apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-dns
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-dns
rules:
  - apiGroups: [""]
    resources: ["services","pods","secrets"]
    verbs: ["get","watch","list"]
  - apiGroups: ["extensions", "networking.k8s.io"]
    resources: ["ingresses"]
    verbs: ["get","watch","list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-dns-viewer
subjects:
  - kind: ServiceAccount
    name: external-dns
    namespace: monitoring
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-dns
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: external-dns
  namespace: monitoring
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: external-dns
  template:
    metadata:
      labels:
        app: external-dns
    spec:
      serviceAccountName: external-dns
      volumes:
        - name: gcp-key
          secret:
            secretName: google-cloud-dns-key
      containers:
        - name: external-dns
          image: k8s.gcr.io/external-dns/external-dns:v0.14.0 # Imagem oficial e estável
          args:
            - --provider=google
            - --source=ingress                     # Observar recursos Ingress para criar registros DNS
            - --domain-filter=crion.dev            # Domínio raiz que o ExternalDNS deve gerenciar
            - --google-project=orbitcloud
            - --registry=noop
            - --managed-record-types=CNAME
            - --policy=upsert-only          # ID do seu projeto no Google Cloud

          # Monta a chave JSON no local que o ExternalDNS espera
          volumeMounts:
            - name: gcp-key
              mountPath: /etc/secrets
          env:
            # Informa ao ExternalDNS onde encontrar o arquivo de credenciais
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /etc/secrets/keygcp.json