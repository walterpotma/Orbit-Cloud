/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type ReadAccessGroupProjectRequest = {
  accessGroupIdOrName: string;
  projectId: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
};

export const ReadAccessGroupProjectRole = {
  Admin: "ADMIN",
  ProjectDeveloper: "PROJECT_DEVELOPER",
  ProjectViewer: "PROJECT_VIEWER",
} as const;
export type ReadAccessGroupProjectRole = ClosedEnum<
  typeof ReadAccessGroupProjectRole
>;

export type ReadAccessGroupProjectResponseBody = {
  teamId: string;
  accessGroupId: string;
  projectId: string;
  role: ReadAccessGroupProjectRole;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const ReadAccessGroupProjectRequest$inboundSchema: z.ZodType<
  ReadAccessGroupProjectRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessGroupIdOrName: z.string(),
  projectId: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/** @internal */
export type ReadAccessGroupProjectRequest$Outbound = {
  accessGroupIdOrName: string;
  projectId: string;
  teamId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const ReadAccessGroupProjectRequest$outboundSchema: z.ZodType<
  ReadAccessGroupProjectRequest$Outbound,
  z.ZodTypeDef,
  ReadAccessGroupProjectRequest
> = z.object({
  accessGroupIdOrName: z.string(),
  projectId: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadAccessGroupProjectRequest$ {
  /** @deprecated use `ReadAccessGroupProjectRequest$inboundSchema` instead. */
  export const inboundSchema = ReadAccessGroupProjectRequest$inboundSchema;
  /** @deprecated use `ReadAccessGroupProjectRequest$outboundSchema` instead. */
  export const outboundSchema = ReadAccessGroupProjectRequest$outboundSchema;
  /** @deprecated use `ReadAccessGroupProjectRequest$Outbound` instead. */
  export type Outbound = ReadAccessGroupProjectRequest$Outbound;
}

export function readAccessGroupProjectRequestToJSON(
  readAccessGroupProjectRequest: ReadAccessGroupProjectRequest,
): string {
  return JSON.stringify(
    ReadAccessGroupProjectRequest$outboundSchema.parse(
      readAccessGroupProjectRequest,
    ),
  );
}

export function readAccessGroupProjectRequestFromJSON(
  jsonString: string,
): SafeParseResult<ReadAccessGroupProjectRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReadAccessGroupProjectRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReadAccessGroupProjectRequest' from JSON`,
  );
}

/** @internal */
export const ReadAccessGroupProjectRole$inboundSchema: z.ZodNativeEnum<
  typeof ReadAccessGroupProjectRole
> = z.nativeEnum(ReadAccessGroupProjectRole);

/** @internal */
export const ReadAccessGroupProjectRole$outboundSchema: z.ZodNativeEnum<
  typeof ReadAccessGroupProjectRole
> = ReadAccessGroupProjectRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadAccessGroupProjectRole$ {
  /** @deprecated use `ReadAccessGroupProjectRole$inboundSchema` instead. */
  export const inboundSchema = ReadAccessGroupProjectRole$inboundSchema;
  /** @deprecated use `ReadAccessGroupProjectRole$outboundSchema` instead. */
  export const outboundSchema = ReadAccessGroupProjectRole$outboundSchema;
}

/** @internal */
export const ReadAccessGroupProjectResponseBody$inboundSchema: z.ZodType<
  ReadAccessGroupProjectResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  teamId: z.string(),
  accessGroupId: z.string(),
  projectId: z.string(),
  role: ReadAccessGroupProjectRole$inboundSchema,
  createdAt: z.string(),
  updatedAt: z.string(),
});

/** @internal */
export type ReadAccessGroupProjectResponseBody$Outbound = {
  teamId: string;
  accessGroupId: string;
  projectId: string;
  role: string;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const ReadAccessGroupProjectResponseBody$outboundSchema: z.ZodType<
  ReadAccessGroupProjectResponseBody$Outbound,
  z.ZodTypeDef,
  ReadAccessGroupProjectResponseBody
> = z.object({
  teamId: z.string(),
  accessGroupId: z.string(),
  projectId: z.string(),
  role: ReadAccessGroupProjectRole$outboundSchema,
  createdAt: z.string(),
  updatedAt: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadAccessGroupProjectResponseBody$ {
  /** @deprecated use `ReadAccessGroupProjectResponseBody$inboundSchema` instead. */
  export const inboundSchema = ReadAccessGroupProjectResponseBody$inboundSchema;
  /** @deprecated use `ReadAccessGroupProjectResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ReadAccessGroupProjectResponseBody$outboundSchema;
  /** @deprecated use `ReadAccessGroupProjectResponseBody$Outbound` instead. */
  export type Outbound = ReadAccessGroupProjectResponseBody$Outbound;
}

export function readAccessGroupProjectResponseBodyToJSON(
  readAccessGroupProjectResponseBody: ReadAccessGroupProjectResponseBody,
): string {
  return JSON.stringify(
    ReadAccessGroupProjectResponseBody$outboundSchema.parse(
      readAccessGroupProjectResponseBody,
    ),
  );
}

export function readAccessGroupProjectResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ReadAccessGroupProjectResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ReadAccessGroupProjectResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReadAccessGroupProjectResponseBody' from JSON`,
  );
}
