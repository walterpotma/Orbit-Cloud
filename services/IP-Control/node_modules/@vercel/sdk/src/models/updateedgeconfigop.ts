/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type UpdateEdgeConfigRequestBody = {
  slug: string;
};

export type UpdateEdgeConfigRequest = {
  edgeConfigId: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
  requestBody: UpdateEdgeConfigRequestBody;
};

/**
 * Keeps track of the current state of the Edge Config while it gets transferred.
 */
export type UpdateEdgeConfigTransfer = {
  fromAccountId: string;
  startedAt: number;
  doneAt: number | null;
};

export type UpdateEdgeConfigSchema = {};

export const UpdateEdgeConfigPurposeEdgeConfigType = {
  Experimentation: "experimentation",
} as const;
export type UpdateEdgeConfigPurposeEdgeConfigType = ClosedEnum<
  typeof UpdateEdgeConfigPurposeEdgeConfigType
>;

export type UpdateEdgeConfigPurpose2 = {
  type: UpdateEdgeConfigPurposeEdgeConfigType;
  resourceId: string;
};

export const UpdateEdgeConfigPurposeType = {
  Flags: "flags",
} as const;
export type UpdateEdgeConfigPurposeType = ClosedEnum<
  typeof UpdateEdgeConfigPurposeType
>;

export type UpdateEdgeConfigPurpose1 = {
  type: UpdateEdgeConfigPurposeType;
  projectId: string;
};

export type UpdateEdgeConfigPurpose =
  | UpdateEdgeConfigPurpose1
  | UpdateEdgeConfigPurpose2;

/**
 * An Edge Config
 */
export type UpdateEdgeConfigResponseBody = {
  createdAt: number;
  updatedAt: number;
  deletedAt?: number | undefined;
  id: string;
  /**
   * Name for the Edge Config Names are not unique. Must start with an alphabetic character and can contain only alphanumeric characters and underscores).
   */
  slug: string;
  ownerId: string;
  digest: string;
  /**
   * Keeps track of the current state of the Edge Config while it gets transferred.
   */
  transfer?: UpdateEdgeConfigTransfer | undefined;
  schema?: UpdateEdgeConfigSchema | undefined;
  purpose?: UpdateEdgeConfigPurpose1 | UpdateEdgeConfigPurpose2 | undefined;
  /**
   * Timestamp of when the Edge Config was synced to DynamoDB initially. It is only set when syncing the entire Edge Config, not when updating.
   */
  syncedToDynamoAt?: number | undefined;
  sizeInBytes: number;
  itemCount: number;
};

/** @internal */
export const UpdateEdgeConfigRequestBody$inboundSchema: z.ZodType<
  UpdateEdgeConfigRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  slug: z.string(),
});

/** @internal */
export type UpdateEdgeConfigRequestBody$Outbound = {
  slug: string;
};

/** @internal */
export const UpdateEdgeConfigRequestBody$outboundSchema: z.ZodType<
  UpdateEdgeConfigRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateEdgeConfigRequestBody
> = z.object({
  slug: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEdgeConfigRequestBody$ {
  /** @deprecated use `UpdateEdgeConfigRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateEdgeConfigRequestBody$inboundSchema;
  /** @deprecated use `UpdateEdgeConfigRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateEdgeConfigRequestBody$outboundSchema;
  /** @deprecated use `UpdateEdgeConfigRequestBody$Outbound` instead. */
  export type Outbound = UpdateEdgeConfigRequestBody$Outbound;
}

export function updateEdgeConfigRequestBodyToJSON(
  updateEdgeConfigRequestBody: UpdateEdgeConfigRequestBody,
): string {
  return JSON.stringify(
    UpdateEdgeConfigRequestBody$outboundSchema.parse(
      updateEdgeConfigRequestBody,
    ),
  );
}

export function updateEdgeConfigRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEdgeConfigRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateEdgeConfigRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEdgeConfigRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateEdgeConfigRequest$inboundSchema: z.ZodType<
  UpdateEdgeConfigRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  edgeConfigId: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  RequestBody: z.lazy(() => UpdateEdgeConfigRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateEdgeConfigRequest$Outbound = {
  edgeConfigId: string;
  teamId?: string | undefined;
  slug?: string | undefined;
  RequestBody: UpdateEdgeConfigRequestBody$Outbound;
};

/** @internal */
export const UpdateEdgeConfigRequest$outboundSchema: z.ZodType<
  UpdateEdgeConfigRequest$Outbound,
  z.ZodTypeDef,
  UpdateEdgeConfigRequest
> = z.object({
  edgeConfigId: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  requestBody: z.lazy(() => UpdateEdgeConfigRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEdgeConfigRequest$ {
  /** @deprecated use `UpdateEdgeConfigRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateEdgeConfigRequest$inboundSchema;
  /** @deprecated use `UpdateEdgeConfigRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateEdgeConfigRequest$outboundSchema;
  /** @deprecated use `UpdateEdgeConfigRequest$Outbound` instead. */
  export type Outbound = UpdateEdgeConfigRequest$Outbound;
}

export function updateEdgeConfigRequestToJSON(
  updateEdgeConfigRequest: UpdateEdgeConfigRequest,
): string {
  return JSON.stringify(
    UpdateEdgeConfigRequest$outboundSchema.parse(updateEdgeConfigRequest),
  );
}

export function updateEdgeConfigRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEdgeConfigRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateEdgeConfigRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEdgeConfigRequest' from JSON`,
  );
}

/** @internal */
export const UpdateEdgeConfigTransfer$inboundSchema: z.ZodType<
  UpdateEdgeConfigTransfer,
  z.ZodTypeDef,
  unknown
> = z.object({
  fromAccountId: z.string(),
  startedAt: z.number(),
  doneAt: z.nullable(z.number()),
});

/** @internal */
export type UpdateEdgeConfigTransfer$Outbound = {
  fromAccountId: string;
  startedAt: number;
  doneAt: number | null;
};

/** @internal */
export const UpdateEdgeConfigTransfer$outboundSchema: z.ZodType<
  UpdateEdgeConfigTransfer$Outbound,
  z.ZodTypeDef,
  UpdateEdgeConfigTransfer
> = z.object({
  fromAccountId: z.string(),
  startedAt: z.number(),
  doneAt: z.nullable(z.number()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEdgeConfigTransfer$ {
  /** @deprecated use `UpdateEdgeConfigTransfer$inboundSchema` instead. */
  export const inboundSchema = UpdateEdgeConfigTransfer$inboundSchema;
  /** @deprecated use `UpdateEdgeConfigTransfer$outboundSchema` instead. */
  export const outboundSchema = UpdateEdgeConfigTransfer$outboundSchema;
  /** @deprecated use `UpdateEdgeConfigTransfer$Outbound` instead. */
  export type Outbound = UpdateEdgeConfigTransfer$Outbound;
}

export function updateEdgeConfigTransferToJSON(
  updateEdgeConfigTransfer: UpdateEdgeConfigTransfer,
): string {
  return JSON.stringify(
    UpdateEdgeConfigTransfer$outboundSchema.parse(updateEdgeConfigTransfer),
  );
}

export function updateEdgeConfigTransferFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEdgeConfigTransfer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateEdgeConfigTransfer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEdgeConfigTransfer' from JSON`,
  );
}

/** @internal */
export const UpdateEdgeConfigSchema$inboundSchema: z.ZodType<
  UpdateEdgeConfigSchema,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateEdgeConfigSchema$Outbound = {};

/** @internal */
export const UpdateEdgeConfigSchema$outboundSchema: z.ZodType<
  UpdateEdgeConfigSchema$Outbound,
  z.ZodTypeDef,
  UpdateEdgeConfigSchema
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEdgeConfigSchema$ {
  /** @deprecated use `UpdateEdgeConfigSchema$inboundSchema` instead. */
  export const inboundSchema = UpdateEdgeConfigSchema$inboundSchema;
  /** @deprecated use `UpdateEdgeConfigSchema$outboundSchema` instead. */
  export const outboundSchema = UpdateEdgeConfigSchema$outboundSchema;
  /** @deprecated use `UpdateEdgeConfigSchema$Outbound` instead. */
  export type Outbound = UpdateEdgeConfigSchema$Outbound;
}

export function updateEdgeConfigSchemaToJSON(
  updateEdgeConfigSchema: UpdateEdgeConfigSchema,
): string {
  return JSON.stringify(
    UpdateEdgeConfigSchema$outboundSchema.parse(updateEdgeConfigSchema),
  );
}

export function updateEdgeConfigSchemaFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEdgeConfigSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateEdgeConfigSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEdgeConfigSchema' from JSON`,
  );
}

/** @internal */
export const UpdateEdgeConfigPurposeEdgeConfigType$inboundSchema:
  z.ZodNativeEnum<typeof UpdateEdgeConfigPurposeEdgeConfigType> = z.nativeEnum(
    UpdateEdgeConfigPurposeEdgeConfigType,
  );

/** @internal */
export const UpdateEdgeConfigPurposeEdgeConfigType$outboundSchema:
  z.ZodNativeEnum<typeof UpdateEdgeConfigPurposeEdgeConfigType> =
    UpdateEdgeConfigPurposeEdgeConfigType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEdgeConfigPurposeEdgeConfigType$ {
  /** @deprecated use `UpdateEdgeConfigPurposeEdgeConfigType$inboundSchema` instead. */
  export const inboundSchema =
    UpdateEdgeConfigPurposeEdgeConfigType$inboundSchema;
  /** @deprecated use `UpdateEdgeConfigPurposeEdgeConfigType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateEdgeConfigPurposeEdgeConfigType$outboundSchema;
}

/** @internal */
export const UpdateEdgeConfigPurpose2$inboundSchema: z.ZodType<
  UpdateEdgeConfigPurpose2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdateEdgeConfigPurposeEdgeConfigType$inboundSchema,
  resourceId: z.string(),
});

/** @internal */
export type UpdateEdgeConfigPurpose2$Outbound = {
  type: string;
  resourceId: string;
};

/** @internal */
export const UpdateEdgeConfigPurpose2$outboundSchema: z.ZodType<
  UpdateEdgeConfigPurpose2$Outbound,
  z.ZodTypeDef,
  UpdateEdgeConfigPurpose2
> = z.object({
  type: UpdateEdgeConfigPurposeEdgeConfigType$outboundSchema,
  resourceId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEdgeConfigPurpose2$ {
  /** @deprecated use `UpdateEdgeConfigPurpose2$inboundSchema` instead. */
  export const inboundSchema = UpdateEdgeConfigPurpose2$inboundSchema;
  /** @deprecated use `UpdateEdgeConfigPurpose2$outboundSchema` instead. */
  export const outboundSchema = UpdateEdgeConfigPurpose2$outboundSchema;
  /** @deprecated use `UpdateEdgeConfigPurpose2$Outbound` instead. */
  export type Outbound = UpdateEdgeConfigPurpose2$Outbound;
}

export function updateEdgeConfigPurpose2ToJSON(
  updateEdgeConfigPurpose2: UpdateEdgeConfigPurpose2,
): string {
  return JSON.stringify(
    UpdateEdgeConfigPurpose2$outboundSchema.parse(updateEdgeConfigPurpose2),
  );
}

export function updateEdgeConfigPurpose2FromJSON(
  jsonString: string,
): SafeParseResult<UpdateEdgeConfigPurpose2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateEdgeConfigPurpose2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEdgeConfigPurpose2' from JSON`,
  );
}

/** @internal */
export const UpdateEdgeConfigPurposeType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateEdgeConfigPurposeType
> = z.nativeEnum(UpdateEdgeConfigPurposeType);

/** @internal */
export const UpdateEdgeConfigPurposeType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateEdgeConfigPurposeType
> = UpdateEdgeConfigPurposeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEdgeConfigPurposeType$ {
  /** @deprecated use `UpdateEdgeConfigPurposeType$inboundSchema` instead. */
  export const inboundSchema = UpdateEdgeConfigPurposeType$inboundSchema;
  /** @deprecated use `UpdateEdgeConfigPurposeType$outboundSchema` instead. */
  export const outboundSchema = UpdateEdgeConfigPurposeType$outboundSchema;
}

/** @internal */
export const UpdateEdgeConfigPurpose1$inboundSchema: z.ZodType<
  UpdateEdgeConfigPurpose1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdateEdgeConfigPurposeType$inboundSchema,
  projectId: z.string(),
});

/** @internal */
export type UpdateEdgeConfigPurpose1$Outbound = {
  type: string;
  projectId: string;
};

/** @internal */
export const UpdateEdgeConfigPurpose1$outboundSchema: z.ZodType<
  UpdateEdgeConfigPurpose1$Outbound,
  z.ZodTypeDef,
  UpdateEdgeConfigPurpose1
> = z.object({
  type: UpdateEdgeConfigPurposeType$outboundSchema,
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEdgeConfigPurpose1$ {
  /** @deprecated use `UpdateEdgeConfigPurpose1$inboundSchema` instead. */
  export const inboundSchema = UpdateEdgeConfigPurpose1$inboundSchema;
  /** @deprecated use `UpdateEdgeConfigPurpose1$outboundSchema` instead. */
  export const outboundSchema = UpdateEdgeConfigPurpose1$outboundSchema;
  /** @deprecated use `UpdateEdgeConfigPurpose1$Outbound` instead. */
  export type Outbound = UpdateEdgeConfigPurpose1$Outbound;
}

export function updateEdgeConfigPurpose1ToJSON(
  updateEdgeConfigPurpose1: UpdateEdgeConfigPurpose1,
): string {
  return JSON.stringify(
    UpdateEdgeConfigPurpose1$outboundSchema.parse(updateEdgeConfigPurpose1),
  );
}

export function updateEdgeConfigPurpose1FromJSON(
  jsonString: string,
): SafeParseResult<UpdateEdgeConfigPurpose1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateEdgeConfigPurpose1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEdgeConfigPurpose1' from JSON`,
  );
}

/** @internal */
export const UpdateEdgeConfigPurpose$inboundSchema: z.ZodType<
  UpdateEdgeConfigPurpose,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateEdgeConfigPurpose1$inboundSchema),
  z.lazy(() => UpdateEdgeConfigPurpose2$inboundSchema),
]);

/** @internal */
export type UpdateEdgeConfigPurpose$Outbound =
  | UpdateEdgeConfigPurpose1$Outbound
  | UpdateEdgeConfigPurpose2$Outbound;

/** @internal */
export const UpdateEdgeConfigPurpose$outboundSchema: z.ZodType<
  UpdateEdgeConfigPurpose$Outbound,
  z.ZodTypeDef,
  UpdateEdgeConfigPurpose
> = z.union([
  z.lazy(() => UpdateEdgeConfigPurpose1$outboundSchema),
  z.lazy(() => UpdateEdgeConfigPurpose2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEdgeConfigPurpose$ {
  /** @deprecated use `UpdateEdgeConfigPurpose$inboundSchema` instead. */
  export const inboundSchema = UpdateEdgeConfigPurpose$inboundSchema;
  /** @deprecated use `UpdateEdgeConfigPurpose$outboundSchema` instead. */
  export const outboundSchema = UpdateEdgeConfigPurpose$outboundSchema;
  /** @deprecated use `UpdateEdgeConfigPurpose$Outbound` instead. */
  export type Outbound = UpdateEdgeConfigPurpose$Outbound;
}

export function updateEdgeConfigPurposeToJSON(
  updateEdgeConfigPurpose: UpdateEdgeConfigPurpose,
): string {
  return JSON.stringify(
    UpdateEdgeConfigPurpose$outboundSchema.parse(updateEdgeConfigPurpose),
  );
}

export function updateEdgeConfigPurposeFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEdgeConfigPurpose, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateEdgeConfigPurpose$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEdgeConfigPurpose' from JSON`,
  );
}

/** @internal */
export const UpdateEdgeConfigResponseBody$inboundSchema: z.ZodType<
  UpdateEdgeConfigResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.number(),
  updatedAt: z.number(),
  deletedAt: z.number().optional(),
  id: z.string(),
  slug: z.string(),
  ownerId: z.string(),
  digest: z.string(),
  transfer: z.lazy(() => UpdateEdgeConfigTransfer$inboundSchema).optional(),
  schema: z.lazy(() => UpdateEdgeConfigSchema$inboundSchema).optional(),
  purpose: z.union([
    z.lazy(() => UpdateEdgeConfigPurpose1$inboundSchema),
    z.lazy(() => UpdateEdgeConfigPurpose2$inboundSchema),
  ]).optional(),
  syncedToDynamoAt: z.number().optional(),
  sizeInBytes: z.number(),
  itemCount: z.number(),
});

/** @internal */
export type UpdateEdgeConfigResponseBody$Outbound = {
  createdAt: number;
  updatedAt: number;
  deletedAt?: number | undefined;
  id: string;
  slug: string;
  ownerId: string;
  digest: string;
  transfer?: UpdateEdgeConfigTransfer$Outbound | undefined;
  schema?: UpdateEdgeConfigSchema$Outbound | undefined;
  purpose?:
    | UpdateEdgeConfigPurpose1$Outbound
    | UpdateEdgeConfigPurpose2$Outbound
    | undefined;
  syncedToDynamoAt?: number | undefined;
  sizeInBytes: number;
  itemCount: number;
};

/** @internal */
export const UpdateEdgeConfigResponseBody$outboundSchema: z.ZodType<
  UpdateEdgeConfigResponseBody$Outbound,
  z.ZodTypeDef,
  UpdateEdgeConfigResponseBody
> = z.object({
  createdAt: z.number(),
  updatedAt: z.number(),
  deletedAt: z.number().optional(),
  id: z.string(),
  slug: z.string(),
  ownerId: z.string(),
  digest: z.string(),
  transfer: z.lazy(() => UpdateEdgeConfigTransfer$outboundSchema).optional(),
  schema: z.lazy(() => UpdateEdgeConfigSchema$outboundSchema).optional(),
  purpose: z.union([
    z.lazy(() => UpdateEdgeConfigPurpose1$outboundSchema),
    z.lazy(() => UpdateEdgeConfigPurpose2$outboundSchema),
  ]).optional(),
  syncedToDynamoAt: z.number().optional(),
  sizeInBytes: z.number(),
  itemCount: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEdgeConfigResponseBody$ {
  /** @deprecated use `UpdateEdgeConfigResponseBody$inboundSchema` instead. */
  export const inboundSchema = UpdateEdgeConfigResponseBody$inboundSchema;
  /** @deprecated use `UpdateEdgeConfigResponseBody$outboundSchema` instead. */
  export const outboundSchema = UpdateEdgeConfigResponseBody$outboundSchema;
  /** @deprecated use `UpdateEdgeConfigResponseBody$Outbound` instead. */
  export type Outbound = UpdateEdgeConfigResponseBody$Outbound;
}

export function updateEdgeConfigResponseBodyToJSON(
  updateEdgeConfigResponseBody: UpdateEdgeConfigResponseBody,
): string {
  return JSON.stringify(
    UpdateEdgeConfigResponseBody$outboundSchema.parse(
      updateEdgeConfigResponseBody,
    ),
  );
}

export function updateEdgeConfigResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEdgeConfigResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateEdgeConfigResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEdgeConfigResponseBody' from JSON`,
  );
}
