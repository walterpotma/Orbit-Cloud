/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type CompleteRollingReleaseRequestBody = {
  /**
   * The ID of the canary deployment to complete
   */
  canaryDeploymentId: string;
};

export type CompleteRollingReleaseRequest = {
  /**
   * Project ID or project name (URL-encoded)
   */
  idOrName: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
  requestBody?: CompleteRollingReleaseRequestBody | undefined;
};

/**
 * The current state of the rolling release
 */
export const CompleteRollingReleaseState = {
  Active: "ACTIVE",
  Complete: "COMPLETE",
  Aborted: "ABORTED",
} as const;
/**
 * The current state of the rolling release
 */
export type CompleteRollingReleaseState = ClosedEnum<
  typeof CompleteRollingReleaseState
>;

export const CompleteRollingReleaseTarget = {
  Staging: "staging",
  Production: "production",
} as const;
export type CompleteRollingReleaseTarget = ClosedEnum<
  typeof CompleteRollingReleaseTarget
>;

export const CompleteRollingReleaseSource = {
  ApiTriggerGitDeploy: "api-trigger-git-deploy",
  Cli: "cli",
  CloneRepo: "clone/repo",
  Git: "git",
  Import: "import",
  ImportRepo: "import/repo",
  Redeploy: "redeploy",
  V0Web: "v0-web",
} as const;
export type CompleteRollingReleaseSource = ClosedEnum<
  typeof CompleteRollingReleaseSource
>;

export const CompleteRollingReleaseReadyState = {
  Building: "BUILDING",
  Error: "ERROR",
  Initializing: "INITIALIZING",
  Queued: "QUEUED",
  Ready: "READY",
  Canceled: "CANCELED",
} as const;
export type CompleteRollingReleaseReadyState = ClosedEnum<
  typeof CompleteRollingReleaseReadyState
>;

/**
 * The current deployment receiving production traffic
 */
export type CompleteRollingReleaseCurrentDeployment = {
  id: string;
  name: string;
  url: string;
  target?: CompleteRollingReleaseTarget | null | undefined;
  source?: CompleteRollingReleaseSource | undefined;
  createdAt: number;
  readyState: CompleteRollingReleaseReadyState;
  readyStateAt?: number | undefined;
};

export const CompleteRollingReleaseRollingReleaseTarget = {
  Staging: "staging",
  Production: "production",
} as const;
export type CompleteRollingReleaseRollingReleaseTarget = ClosedEnum<
  typeof CompleteRollingReleaseRollingReleaseTarget
>;

export const CompleteRollingReleaseRollingReleaseSource = {
  ApiTriggerGitDeploy: "api-trigger-git-deploy",
  Cli: "cli",
  CloneRepo: "clone/repo",
  Git: "git",
  Import: "import",
  ImportRepo: "import/repo",
  Redeploy: "redeploy",
  V0Web: "v0-web",
} as const;
export type CompleteRollingReleaseRollingReleaseSource = ClosedEnum<
  typeof CompleteRollingReleaseRollingReleaseSource
>;

export const CompleteRollingReleaseRollingReleaseReadyState = {
  Building: "BUILDING",
  Error: "ERROR",
  Initializing: "INITIALIZING",
  Queued: "QUEUED",
  Ready: "READY",
  Canceled: "CANCELED",
} as const;
export type CompleteRollingReleaseRollingReleaseReadyState = ClosedEnum<
  typeof CompleteRollingReleaseRollingReleaseReadyState
>;

/**
 * The canary deployment being rolled out
 */
export type CompleteRollingReleaseCanaryDeployment = {
  id: string;
  name: string;
  url: string;
  target?: CompleteRollingReleaseRollingReleaseTarget | null | undefined;
  source?: CompleteRollingReleaseRollingReleaseSource | undefined;
  createdAt: number;
  readyState: CompleteRollingReleaseRollingReleaseReadyState;
  readyStateAt?: number | undefined;
};

/**
 * The advancement type of the rolling release
 */
export const CompleteRollingReleaseAdvancementType = {
  Automatic: "automatic",
  ManualApproval: "manual-approval",
} as const;
/**
 * The advancement type of the rolling release
 */
export type CompleteRollingReleaseAdvancementType = ClosedEnum<
  typeof CompleteRollingReleaseAdvancementType
>;

/**
 * All stages configured for this rolling release
 */
export type CompleteRollingReleaseStages = {
  /**
   * The zero-based index of the stage
   */
  index: number;
  /**
   * Whether or not this stage is the final stage (targetPercentage === 100)
   */
  isFinalStage: boolean;
  /**
   * The percentage of traffic to serve to the canary deployment (0-100)
   */
  targetPercentage: number;
  /**
   * Whether or not this stage requires manual approval to proceed
   */
  requireApproval: boolean;
  /**
   * Duration in seconds for automatic advancement, null for manual stages or the final stage
   */
  duration: number | null;
};

/**
 * The currently active stage, null if the rollout is aborted
 */
export type CompleteRollingReleaseActiveStage = {
  /**
   * The zero-based index of the stage
   */
  index: number;
  /**
   * Whether or not this stage is the final stage (targetPercentage === 100)
   */
  isFinalStage: boolean;
  /**
   * The percentage of traffic to serve to the canary deployment (0-100)
   */
  targetPercentage: number;
  /**
   * Whether or not this stage requires manual approval to proceed
   */
  requireApproval: boolean;
  /**
   * Duration in seconds for automatic advancement, null for manual stages or the final stage
   */
  duration: number | null;
};

/**
 * The next stage to be activated, null if not in ACTIVE state
 */
export type CompleteRollingReleaseNextStage = {
  /**
   * The zero-based index of the stage
   */
  index: number;
  /**
   * Whether or not this stage is the final stage (targetPercentage === 100)
   */
  isFinalStage: boolean;
  /**
   * The percentage of traffic to serve to the canary deployment (0-100)
   */
  targetPercentage: number;
  /**
   * Whether or not this stage requires manual approval to proceed
   */
  requireApproval: boolean;
  /**
   * Duration in seconds for automatic advancement, null for manual stages or the final stage
   */
  duration: number | null;
};

/**
 * Rolling release information including configuration and document details, or null if no rolling release exists
 */
export type CompleteRollingReleaseRollingRelease = {
  /**
   * The current state of the rolling release
   */
  state: CompleteRollingReleaseState;
  /**
   * The current deployment receiving production traffic
   */
  currentDeployment: CompleteRollingReleaseCurrentDeployment | null;
  /**
   * The canary deployment being rolled out
   */
  canaryDeployment: CompleteRollingReleaseCanaryDeployment | null;
  /**
   * The ID of a deployment queued for the next rolling release
   */
  queuedDeploymentId: string | null;
  /**
   * The advancement type of the rolling release
   */
  advancementType: CompleteRollingReleaseAdvancementType;
  /**
   * All stages configured for this rolling release
   */
  stages: Array<CompleteRollingReleaseStages>;
  /**
   * The currently active stage, null if the rollout is aborted
   */
  activeStage: CompleteRollingReleaseActiveStage | null;
  /**
   * The next stage to be activated, null if not in ACTIVE state
   */
  nextStage: CompleteRollingReleaseNextStage | null;
  /**
   * Unix timestamp in milliseconds when the rolling release started
   */
  startedAt: number;
  /**
   * Unix timestamp in milliseconds when the rolling release was last updated
   */
  updatedAt: number;
};

/**
 * The response format for rolling release endpoints that return rolling release information
 */
export type CompleteRollingReleaseResponseBody = {
  /**
   * Rolling release information including configuration and document details, or null if no rolling release exists
   */
  rollingRelease: CompleteRollingReleaseRollingRelease | null;
};

/** @internal */
export const CompleteRollingReleaseRequestBody$inboundSchema: z.ZodType<
  CompleteRollingReleaseRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  canaryDeploymentId: z.string(),
});

/** @internal */
export type CompleteRollingReleaseRequestBody$Outbound = {
  canaryDeploymentId: string;
};

/** @internal */
export const CompleteRollingReleaseRequestBody$outboundSchema: z.ZodType<
  CompleteRollingReleaseRequestBody$Outbound,
  z.ZodTypeDef,
  CompleteRollingReleaseRequestBody
> = z.object({
  canaryDeploymentId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteRollingReleaseRequestBody$ {
  /** @deprecated use `CompleteRollingReleaseRequestBody$inboundSchema` instead. */
  export const inboundSchema = CompleteRollingReleaseRequestBody$inboundSchema;
  /** @deprecated use `CompleteRollingReleaseRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    CompleteRollingReleaseRequestBody$outboundSchema;
  /** @deprecated use `CompleteRollingReleaseRequestBody$Outbound` instead. */
  export type Outbound = CompleteRollingReleaseRequestBody$Outbound;
}

export function completeRollingReleaseRequestBodyToJSON(
  completeRollingReleaseRequestBody: CompleteRollingReleaseRequestBody,
): string {
  return JSON.stringify(
    CompleteRollingReleaseRequestBody$outboundSchema.parse(
      completeRollingReleaseRequestBody,
    ),
  );
}

export function completeRollingReleaseRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CompleteRollingReleaseRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompleteRollingReleaseRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompleteRollingReleaseRequestBody' from JSON`,
  );
}

/** @internal */
export const CompleteRollingReleaseRequest$inboundSchema: z.ZodType<
  CompleteRollingReleaseRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  idOrName: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  RequestBody: z.lazy(() => CompleteRollingReleaseRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CompleteRollingReleaseRequest$Outbound = {
  idOrName: string;
  teamId?: string | undefined;
  slug?: string | undefined;
  RequestBody?: CompleteRollingReleaseRequestBody$Outbound | undefined;
};

/** @internal */
export const CompleteRollingReleaseRequest$outboundSchema: z.ZodType<
  CompleteRollingReleaseRequest$Outbound,
  z.ZodTypeDef,
  CompleteRollingReleaseRequest
> = z.object({
  idOrName: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  requestBody: z.lazy(() => CompleteRollingReleaseRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteRollingReleaseRequest$ {
  /** @deprecated use `CompleteRollingReleaseRequest$inboundSchema` instead. */
  export const inboundSchema = CompleteRollingReleaseRequest$inboundSchema;
  /** @deprecated use `CompleteRollingReleaseRequest$outboundSchema` instead. */
  export const outboundSchema = CompleteRollingReleaseRequest$outboundSchema;
  /** @deprecated use `CompleteRollingReleaseRequest$Outbound` instead. */
  export type Outbound = CompleteRollingReleaseRequest$Outbound;
}

export function completeRollingReleaseRequestToJSON(
  completeRollingReleaseRequest: CompleteRollingReleaseRequest,
): string {
  return JSON.stringify(
    CompleteRollingReleaseRequest$outboundSchema.parse(
      completeRollingReleaseRequest,
    ),
  );
}

export function completeRollingReleaseRequestFromJSON(
  jsonString: string,
): SafeParseResult<CompleteRollingReleaseRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompleteRollingReleaseRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompleteRollingReleaseRequest' from JSON`,
  );
}

/** @internal */
export const CompleteRollingReleaseState$inboundSchema: z.ZodNativeEnum<
  typeof CompleteRollingReleaseState
> = z.nativeEnum(CompleteRollingReleaseState);

/** @internal */
export const CompleteRollingReleaseState$outboundSchema: z.ZodNativeEnum<
  typeof CompleteRollingReleaseState
> = CompleteRollingReleaseState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteRollingReleaseState$ {
  /** @deprecated use `CompleteRollingReleaseState$inboundSchema` instead. */
  export const inboundSchema = CompleteRollingReleaseState$inboundSchema;
  /** @deprecated use `CompleteRollingReleaseState$outboundSchema` instead. */
  export const outboundSchema = CompleteRollingReleaseState$outboundSchema;
}

/** @internal */
export const CompleteRollingReleaseTarget$inboundSchema: z.ZodNativeEnum<
  typeof CompleteRollingReleaseTarget
> = z.nativeEnum(CompleteRollingReleaseTarget);

/** @internal */
export const CompleteRollingReleaseTarget$outboundSchema: z.ZodNativeEnum<
  typeof CompleteRollingReleaseTarget
> = CompleteRollingReleaseTarget$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteRollingReleaseTarget$ {
  /** @deprecated use `CompleteRollingReleaseTarget$inboundSchema` instead. */
  export const inboundSchema = CompleteRollingReleaseTarget$inboundSchema;
  /** @deprecated use `CompleteRollingReleaseTarget$outboundSchema` instead. */
  export const outboundSchema = CompleteRollingReleaseTarget$outboundSchema;
}

/** @internal */
export const CompleteRollingReleaseSource$inboundSchema: z.ZodNativeEnum<
  typeof CompleteRollingReleaseSource
> = z.nativeEnum(CompleteRollingReleaseSource);

/** @internal */
export const CompleteRollingReleaseSource$outboundSchema: z.ZodNativeEnum<
  typeof CompleteRollingReleaseSource
> = CompleteRollingReleaseSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteRollingReleaseSource$ {
  /** @deprecated use `CompleteRollingReleaseSource$inboundSchema` instead. */
  export const inboundSchema = CompleteRollingReleaseSource$inboundSchema;
  /** @deprecated use `CompleteRollingReleaseSource$outboundSchema` instead. */
  export const outboundSchema = CompleteRollingReleaseSource$outboundSchema;
}

/** @internal */
export const CompleteRollingReleaseReadyState$inboundSchema: z.ZodNativeEnum<
  typeof CompleteRollingReleaseReadyState
> = z.nativeEnum(CompleteRollingReleaseReadyState);

/** @internal */
export const CompleteRollingReleaseReadyState$outboundSchema: z.ZodNativeEnum<
  typeof CompleteRollingReleaseReadyState
> = CompleteRollingReleaseReadyState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteRollingReleaseReadyState$ {
  /** @deprecated use `CompleteRollingReleaseReadyState$inboundSchema` instead. */
  export const inboundSchema = CompleteRollingReleaseReadyState$inboundSchema;
  /** @deprecated use `CompleteRollingReleaseReadyState$outboundSchema` instead. */
  export const outboundSchema = CompleteRollingReleaseReadyState$outboundSchema;
}

/** @internal */
export const CompleteRollingReleaseCurrentDeployment$inboundSchema: z.ZodType<
  CompleteRollingReleaseCurrentDeployment,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  url: z.string(),
  target: z.nullable(CompleteRollingReleaseTarget$inboundSchema).optional(),
  source: CompleteRollingReleaseSource$inboundSchema.optional(),
  createdAt: z.number(),
  readyState: CompleteRollingReleaseReadyState$inboundSchema,
  readyStateAt: z.number().optional(),
});

/** @internal */
export type CompleteRollingReleaseCurrentDeployment$Outbound = {
  id: string;
  name: string;
  url: string;
  target?: string | null | undefined;
  source?: string | undefined;
  createdAt: number;
  readyState: string;
  readyStateAt?: number | undefined;
};

/** @internal */
export const CompleteRollingReleaseCurrentDeployment$outboundSchema: z.ZodType<
  CompleteRollingReleaseCurrentDeployment$Outbound,
  z.ZodTypeDef,
  CompleteRollingReleaseCurrentDeployment
> = z.object({
  id: z.string(),
  name: z.string(),
  url: z.string(),
  target: z.nullable(CompleteRollingReleaseTarget$outboundSchema).optional(),
  source: CompleteRollingReleaseSource$outboundSchema.optional(),
  createdAt: z.number(),
  readyState: CompleteRollingReleaseReadyState$outboundSchema,
  readyStateAt: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteRollingReleaseCurrentDeployment$ {
  /** @deprecated use `CompleteRollingReleaseCurrentDeployment$inboundSchema` instead. */
  export const inboundSchema =
    CompleteRollingReleaseCurrentDeployment$inboundSchema;
  /** @deprecated use `CompleteRollingReleaseCurrentDeployment$outboundSchema` instead. */
  export const outboundSchema =
    CompleteRollingReleaseCurrentDeployment$outboundSchema;
  /** @deprecated use `CompleteRollingReleaseCurrentDeployment$Outbound` instead. */
  export type Outbound = CompleteRollingReleaseCurrentDeployment$Outbound;
}

export function completeRollingReleaseCurrentDeploymentToJSON(
  completeRollingReleaseCurrentDeployment:
    CompleteRollingReleaseCurrentDeployment,
): string {
  return JSON.stringify(
    CompleteRollingReleaseCurrentDeployment$outboundSchema.parse(
      completeRollingReleaseCurrentDeployment,
    ),
  );
}

export function completeRollingReleaseCurrentDeploymentFromJSON(
  jsonString: string,
): SafeParseResult<
  CompleteRollingReleaseCurrentDeployment,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CompleteRollingReleaseCurrentDeployment$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CompleteRollingReleaseCurrentDeployment' from JSON`,
  );
}

/** @internal */
export const CompleteRollingReleaseRollingReleaseTarget$inboundSchema:
  z.ZodNativeEnum<typeof CompleteRollingReleaseRollingReleaseTarget> = z
    .nativeEnum(CompleteRollingReleaseRollingReleaseTarget);

/** @internal */
export const CompleteRollingReleaseRollingReleaseTarget$outboundSchema:
  z.ZodNativeEnum<typeof CompleteRollingReleaseRollingReleaseTarget> =
    CompleteRollingReleaseRollingReleaseTarget$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteRollingReleaseRollingReleaseTarget$ {
  /** @deprecated use `CompleteRollingReleaseRollingReleaseTarget$inboundSchema` instead. */
  export const inboundSchema =
    CompleteRollingReleaseRollingReleaseTarget$inboundSchema;
  /** @deprecated use `CompleteRollingReleaseRollingReleaseTarget$outboundSchema` instead. */
  export const outboundSchema =
    CompleteRollingReleaseRollingReleaseTarget$outboundSchema;
}

/** @internal */
export const CompleteRollingReleaseRollingReleaseSource$inboundSchema:
  z.ZodNativeEnum<typeof CompleteRollingReleaseRollingReleaseSource> = z
    .nativeEnum(CompleteRollingReleaseRollingReleaseSource);

/** @internal */
export const CompleteRollingReleaseRollingReleaseSource$outboundSchema:
  z.ZodNativeEnum<typeof CompleteRollingReleaseRollingReleaseSource> =
    CompleteRollingReleaseRollingReleaseSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteRollingReleaseRollingReleaseSource$ {
  /** @deprecated use `CompleteRollingReleaseRollingReleaseSource$inboundSchema` instead. */
  export const inboundSchema =
    CompleteRollingReleaseRollingReleaseSource$inboundSchema;
  /** @deprecated use `CompleteRollingReleaseRollingReleaseSource$outboundSchema` instead. */
  export const outboundSchema =
    CompleteRollingReleaseRollingReleaseSource$outboundSchema;
}

/** @internal */
export const CompleteRollingReleaseRollingReleaseReadyState$inboundSchema:
  z.ZodNativeEnum<typeof CompleteRollingReleaseRollingReleaseReadyState> = z
    .nativeEnum(CompleteRollingReleaseRollingReleaseReadyState);

/** @internal */
export const CompleteRollingReleaseRollingReleaseReadyState$outboundSchema:
  z.ZodNativeEnum<typeof CompleteRollingReleaseRollingReleaseReadyState> =
    CompleteRollingReleaseRollingReleaseReadyState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteRollingReleaseRollingReleaseReadyState$ {
  /** @deprecated use `CompleteRollingReleaseRollingReleaseReadyState$inboundSchema` instead. */
  export const inboundSchema =
    CompleteRollingReleaseRollingReleaseReadyState$inboundSchema;
  /** @deprecated use `CompleteRollingReleaseRollingReleaseReadyState$outboundSchema` instead. */
  export const outboundSchema =
    CompleteRollingReleaseRollingReleaseReadyState$outboundSchema;
}

/** @internal */
export const CompleteRollingReleaseCanaryDeployment$inboundSchema: z.ZodType<
  CompleteRollingReleaseCanaryDeployment,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  url: z.string(),
  target: z.nullable(CompleteRollingReleaseRollingReleaseTarget$inboundSchema)
    .optional(),
  source: CompleteRollingReleaseRollingReleaseSource$inboundSchema.optional(),
  createdAt: z.number(),
  readyState: CompleteRollingReleaseRollingReleaseReadyState$inboundSchema,
  readyStateAt: z.number().optional(),
});

/** @internal */
export type CompleteRollingReleaseCanaryDeployment$Outbound = {
  id: string;
  name: string;
  url: string;
  target?: string | null | undefined;
  source?: string | undefined;
  createdAt: number;
  readyState: string;
  readyStateAt?: number | undefined;
};

/** @internal */
export const CompleteRollingReleaseCanaryDeployment$outboundSchema: z.ZodType<
  CompleteRollingReleaseCanaryDeployment$Outbound,
  z.ZodTypeDef,
  CompleteRollingReleaseCanaryDeployment
> = z.object({
  id: z.string(),
  name: z.string(),
  url: z.string(),
  target: z.nullable(CompleteRollingReleaseRollingReleaseTarget$outboundSchema)
    .optional(),
  source: CompleteRollingReleaseRollingReleaseSource$outboundSchema.optional(),
  createdAt: z.number(),
  readyState: CompleteRollingReleaseRollingReleaseReadyState$outboundSchema,
  readyStateAt: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteRollingReleaseCanaryDeployment$ {
  /** @deprecated use `CompleteRollingReleaseCanaryDeployment$inboundSchema` instead. */
  export const inboundSchema =
    CompleteRollingReleaseCanaryDeployment$inboundSchema;
  /** @deprecated use `CompleteRollingReleaseCanaryDeployment$outboundSchema` instead. */
  export const outboundSchema =
    CompleteRollingReleaseCanaryDeployment$outboundSchema;
  /** @deprecated use `CompleteRollingReleaseCanaryDeployment$Outbound` instead. */
  export type Outbound = CompleteRollingReleaseCanaryDeployment$Outbound;
}

export function completeRollingReleaseCanaryDeploymentToJSON(
  completeRollingReleaseCanaryDeployment:
    CompleteRollingReleaseCanaryDeployment,
): string {
  return JSON.stringify(
    CompleteRollingReleaseCanaryDeployment$outboundSchema.parse(
      completeRollingReleaseCanaryDeployment,
    ),
  );
}

export function completeRollingReleaseCanaryDeploymentFromJSON(
  jsonString: string,
): SafeParseResult<CompleteRollingReleaseCanaryDeployment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CompleteRollingReleaseCanaryDeployment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompleteRollingReleaseCanaryDeployment' from JSON`,
  );
}

/** @internal */
export const CompleteRollingReleaseAdvancementType$inboundSchema:
  z.ZodNativeEnum<typeof CompleteRollingReleaseAdvancementType> = z.nativeEnum(
    CompleteRollingReleaseAdvancementType,
  );

/** @internal */
export const CompleteRollingReleaseAdvancementType$outboundSchema:
  z.ZodNativeEnum<typeof CompleteRollingReleaseAdvancementType> =
    CompleteRollingReleaseAdvancementType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteRollingReleaseAdvancementType$ {
  /** @deprecated use `CompleteRollingReleaseAdvancementType$inboundSchema` instead. */
  export const inboundSchema =
    CompleteRollingReleaseAdvancementType$inboundSchema;
  /** @deprecated use `CompleteRollingReleaseAdvancementType$outboundSchema` instead. */
  export const outboundSchema =
    CompleteRollingReleaseAdvancementType$outboundSchema;
}

/** @internal */
export const CompleteRollingReleaseStages$inboundSchema: z.ZodType<
  CompleteRollingReleaseStages,
  z.ZodTypeDef,
  unknown
> = z.object({
  index: z.number(),
  isFinalStage: z.boolean(),
  targetPercentage: z.number(),
  requireApproval: z.boolean(),
  duration: z.nullable(z.number()),
});

/** @internal */
export type CompleteRollingReleaseStages$Outbound = {
  index: number;
  isFinalStage: boolean;
  targetPercentage: number;
  requireApproval: boolean;
  duration: number | null;
};

/** @internal */
export const CompleteRollingReleaseStages$outboundSchema: z.ZodType<
  CompleteRollingReleaseStages$Outbound,
  z.ZodTypeDef,
  CompleteRollingReleaseStages
> = z.object({
  index: z.number(),
  isFinalStage: z.boolean(),
  targetPercentage: z.number(),
  requireApproval: z.boolean(),
  duration: z.nullable(z.number()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteRollingReleaseStages$ {
  /** @deprecated use `CompleteRollingReleaseStages$inboundSchema` instead. */
  export const inboundSchema = CompleteRollingReleaseStages$inboundSchema;
  /** @deprecated use `CompleteRollingReleaseStages$outboundSchema` instead. */
  export const outboundSchema = CompleteRollingReleaseStages$outboundSchema;
  /** @deprecated use `CompleteRollingReleaseStages$Outbound` instead. */
  export type Outbound = CompleteRollingReleaseStages$Outbound;
}

export function completeRollingReleaseStagesToJSON(
  completeRollingReleaseStages: CompleteRollingReleaseStages,
): string {
  return JSON.stringify(
    CompleteRollingReleaseStages$outboundSchema.parse(
      completeRollingReleaseStages,
    ),
  );
}

export function completeRollingReleaseStagesFromJSON(
  jsonString: string,
): SafeParseResult<CompleteRollingReleaseStages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompleteRollingReleaseStages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompleteRollingReleaseStages' from JSON`,
  );
}

/** @internal */
export const CompleteRollingReleaseActiveStage$inboundSchema: z.ZodType<
  CompleteRollingReleaseActiveStage,
  z.ZodTypeDef,
  unknown
> = z.object({
  index: z.number(),
  isFinalStage: z.boolean(),
  targetPercentage: z.number(),
  requireApproval: z.boolean(),
  duration: z.nullable(z.number()),
});

/** @internal */
export type CompleteRollingReleaseActiveStage$Outbound = {
  index: number;
  isFinalStage: boolean;
  targetPercentage: number;
  requireApproval: boolean;
  duration: number | null;
};

/** @internal */
export const CompleteRollingReleaseActiveStage$outboundSchema: z.ZodType<
  CompleteRollingReleaseActiveStage$Outbound,
  z.ZodTypeDef,
  CompleteRollingReleaseActiveStage
> = z.object({
  index: z.number(),
  isFinalStage: z.boolean(),
  targetPercentage: z.number(),
  requireApproval: z.boolean(),
  duration: z.nullable(z.number()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteRollingReleaseActiveStage$ {
  /** @deprecated use `CompleteRollingReleaseActiveStage$inboundSchema` instead. */
  export const inboundSchema = CompleteRollingReleaseActiveStage$inboundSchema;
  /** @deprecated use `CompleteRollingReleaseActiveStage$outboundSchema` instead. */
  export const outboundSchema =
    CompleteRollingReleaseActiveStage$outboundSchema;
  /** @deprecated use `CompleteRollingReleaseActiveStage$Outbound` instead. */
  export type Outbound = CompleteRollingReleaseActiveStage$Outbound;
}

export function completeRollingReleaseActiveStageToJSON(
  completeRollingReleaseActiveStage: CompleteRollingReleaseActiveStage,
): string {
  return JSON.stringify(
    CompleteRollingReleaseActiveStage$outboundSchema.parse(
      completeRollingReleaseActiveStage,
    ),
  );
}

export function completeRollingReleaseActiveStageFromJSON(
  jsonString: string,
): SafeParseResult<CompleteRollingReleaseActiveStage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompleteRollingReleaseActiveStage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompleteRollingReleaseActiveStage' from JSON`,
  );
}

/** @internal */
export const CompleteRollingReleaseNextStage$inboundSchema: z.ZodType<
  CompleteRollingReleaseNextStage,
  z.ZodTypeDef,
  unknown
> = z.object({
  index: z.number(),
  isFinalStage: z.boolean(),
  targetPercentage: z.number(),
  requireApproval: z.boolean(),
  duration: z.nullable(z.number()),
});

/** @internal */
export type CompleteRollingReleaseNextStage$Outbound = {
  index: number;
  isFinalStage: boolean;
  targetPercentage: number;
  requireApproval: boolean;
  duration: number | null;
};

/** @internal */
export const CompleteRollingReleaseNextStage$outboundSchema: z.ZodType<
  CompleteRollingReleaseNextStage$Outbound,
  z.ZodTypeDef,
  CompleteRollingReleaseNextStage
> = z.object({
  index: z.number(),
  isFinalStage: z.boolean(),
  targetPercentage: z.number(),
  requireApproval: z.boolean(),
  duration: z.nullable(z.number()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteRollingReleaseNextStage$ {
  /** @deprecated use `CompleteRollingReleaseNextStage$inboundSchema` instead. */
  export const inboundSchema = CompleteRollingReleaseNextStage$inboundSchema;
  /** @deprecated use `CompleteRollingReleaseNextStage$outboundSchema` instead. */
  export const outboundSchema = CompleteRollingReleaseNextStage$outboundSchema;
  /** @deprecated use `CompleteRollingReleaseNextStage$Outbound` instead. */
  export type Outbound = CompleteRollingReleaseNextStage$Outbound;
}

export function completeRollingReleaseNextStageToJSON(
  completeRollingReleaseNextStage: CompleteRollingReleaseNextStage,
): string {
  return JSON.stringify(
    CompleteRollingReleaseNextStage$outboundSchema.parse(
      completeRollingReleaseNextStage,
    ),
  );
}

export function completeRollingReleaseNextStageFromJSON(
  jsonString: string,
): SafeParseResult<CompleteRollingReleaseNextStage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompleteRollingReleaseNextStage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompleteRollingReleaseNextStage' from JSON`,
  );
}

/** @internal */
export const CompleteRollingReleaseRollingRelease$inboundSchema: z.ZodType<
  CompleteRollingReleaseRollingRelease,
  z.ZodTypeDef,
  unknown
> = z.object({
  state: CompleteRollingReleaseState$inboundSchema,
  currentDeployment: z.nullable(
    z.lazy(() => CompleteRollingReleaseCurrentDeployment$inboundSchema),
  ),
  canaryDeployment: z.nullable(
    z.lazy(() => CompleteRollingReleaseCanaryDeployment$inboundSchema),
  ),
  queuedDeploymentId: z.nullable(z.string()),
  advancementType: CompleteRollingReleaseAdvancementType$inboundSchema,
  stages: z.array(z.lazy(() => CompleteRollingReleaseStages$inboundSchema)),
  activeStage: z.nullable(
    z.lazy(() => CompleteRollingReleaseActiveStage$inboundSchema),
  ),
  nextStage: z.nullable(
    z.lazy(() => CompleteRollingReleaseNextStage$inboundSchema),
  ),
  startedAt: z.number(),
  updatedAt: z.number(),
});

/** @internal */
export type CompleteRollingReleaseRollingRelease$Outbound = {
  state: string;
  currentDeployment: CompleteRollingReleaseCurrentDeployment$Outbound | null;
  canaryDeployment: CompleteRollingReleaseCanaryDeployment$Outbound | null;
  queuedDeploymentId: string | null;
  advancementType: string;
  stages: Array<CompleteRollingReleaseStages$Outbound>;
  activeStage: CompleteRollingReleaseActiveStage$Outbound | null;
  nextStage: CompleteRollingReleaseNextStage$Outbound | null;
  startedAt: number;
  updatedAt: number;
};

/** @internal */
export const CompleteRollingReleaseRollingRelease$outboundSchema: z.ZodType<
  CompleteRollingReleaseRollingRelease$Outbound,
  z.ZodTypeDef,
  CompleteRollingReleaseRollingRelease
> = z.object({
  state: CompleteRollingReleaseState$outboundSchema,
  currentDeployment: z.nullable(
    z.lazy(() => CompleteRollingReleaseCurrentDeployment$outboundSchema),
  ),
  canaryDeployment: z.nullable(
    z.lazy(() => CompleteRollingReleaseCanaryDeployment$outboundSchema),
  ),
  queuedDeploymentId: z.nullable(z.string()),
  advancementType: CompleteRollingReleaseAdvancementType$outboundSchema,
  stages: z.array(z.lazy(() => CompleteRollingReleaseStages$outboundSchema)),
  activeStage: z.nullable(
    z.lazy(() => CompleteRollingReleaseActiveStage$outboundSchema),
  ),
  nextStage: z.nullable(
    z.lazy(() => CompleteRollingReleaseNextStage$outboundSchema),
  ),
  startedAt: z.number(),
  updatedAt: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteRollingReleaseRollingRelease$ {
  /** @deprecated use `CompleteRollingReleaseRollingRelease$inboundSchema` instead. */
  export const inboundSchema =
    CompleteRollingReleaseRollingRelease$inboundSchema;
  /** @deprecated use `CompleteRollingReleaseRollingRelease$outboundSchema` instead. */
  export const outboundSchema =
    CompleteRollingReleaseRollingRelease$outboundSchema;
  /** @deprecated use `CompleteRollingReleaseRollingRelease$Outbound` instead. */
  export type Outbound = CompleteRollingReleaseRollingRelease$Outbound;
}

export function completeRollingReleaseRollingReleaseToJSON(
  completeRollingReleaseRollingRelease: CompleteRollingReleaseRollingRelease,
): string {
  return JSON.stringify(
    CompleteRollingReleaseRollingRelease$outboundSchema.parse(
      completeRollingReleaseRollingRelease,
    ),
  );
}

export function completeRollingReleaseRollingReleaseFromJSON(
  jsonString: string,
): SafeParseResult<CompleteRollingReleaseRollingRelease, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CompleteRollingReleaseRollingRelease$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompleteRollingReleaseRollingRelease' from JSON`,
  );
}

/** @internal */
export const CompleteRollingReleaseResponseBody$inboundSchema: z.ZodType<
  CompleteRollingReleaseResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  rollingRelease: z.nullable(
    z.lazy(() => CompleteRollingReleaseRollingRelease$inboundSchema),
  ),
});

/** @internal */
export type CompleteRollingReleaseResponseBody$Outbound = {
  rollingRelease: CompleteRollingReleaseRollingRelease$Outbound | null;
};

/** @internal */
export const CompleteRollingReleaseResponseBody$outboundSchema: z.ZodType<
  CompleteRollingReleaseResponseBody$Outbound,
  z.ZodTypeDef,
  CompleteRollingReleaseResponseBody
> = z.object({
  rollingRelease: z.nullable(
    z.lazy(() => CompleteRollingReleaseRollingRelease$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteRollingReleaseResponseBody$ {
  /** @deprecated use `CompleteRollingReleaseResponseBody$inboundSchema` instead. */
  export const inboundSchema = CompleteRollingReleaseResponseBody$inboundSchema;
  /** @deprecated use `CompleteRollingReleaseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CompleteRollingReleaseResponseBody$outboundSchema;
  /** @deprecated use `CompleteRollingReleaseResponseBody$Outbound` instead. */
  export type Outbound = CompleteRollingReleaseResponseBody$Outbound;
}

export function completeRollingReleaseResponseBodyToJSON(
  completeRollingReleaseResponseBody: CompleteRollingReleaseResponseBody,
): string {
  return JSON.stringify(
    CompleteRollingReleaseResponseBody$outboundSchema.parse(
      completeRollingReleaseResponseBody,
    ),
  );
}

export function completeRollingReleaseResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CompleteRollingReleaseResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CompleteRollingReleaseResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompleteRollingReleaseResponseBody' from JSON`,
  );
}
