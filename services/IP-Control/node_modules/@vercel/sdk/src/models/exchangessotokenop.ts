/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * The grant type, when using x-www-form-urlencoded content type
 */
export const ExchangeSsoTokenGrantType = {
  AuthorizationCode: "authorization_code",
} as const;
/**
 * The grant type, when using x-www-form-urlencoded content type
 */
export type ExchangeSsoTokenGrantType = ClosedEnum<
  typeof ExchangeSsoTokenGrantType
>;

export type ExchangeSsoTokenRequestBody = {
  /**
   * The sensitive code received from Vercel
   */
  code: string;
  /**
   * The state received from the initialization request
   */
  state?: string | undefined;
  /**
   * The integration client id
   */
  clientId: string;
  /**
   * The integration client secret
   */
  clientSecret: string;
  /**
   * The integration redirect URI
   */
  redirectUri?: string | undefined;
  /**
   * The grant type, when using x-www-form-urlencoded content type
   */
  grantType?: ExchangeSsoTokenGrantType | undefined;
};

export type ExchangeSsoTokenResponseBody = {
  idToken: string;
  accessToken: string | null;
  tokenType: string | null;
};

/** @internal */
export const ExchangeSsoTokenGrantType$inboundSchema: z.ZodNativeEnum<
  typeof ExchangeSsoTokenGrantType
> = z.nativeEnum(ExchangeSsoTokenGrantType);

/** @internal */
export const ExchangeSsoTokenGrantType$outboundSchema: z.ZodNativeEnum<
  typeof ExchangeSsoTokenGrantType
> = ExchangeSsoTokenGrantType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExchangeSsoTokenGrantType$ {
  /** @deprecated use `ExchangeSsoTokenGrantType$inboundSchema` instead. */
  export const inboundSchema = ExchangeSsoTokenGrantType$inboundSchema;
  /** @deprecated use `ExchangeSsoTokenGrantType$outboundSchema` instead. */
  export const outboundSchema = ExchangeSsoTokenGrantType$outboundSchema;
}

/** @internal */
export const ExchangeSsoTokenRequestBody$inboundSchema: z.ZodType<
  ExchangeSsoTokenRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  state: z.string().optional(),
  client_id: z.string(),
  client_secret: z.string(),
  redirect_uri: z.string().optional(),
  grant_type: ExchangeSsoTokenGrantType$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "client_id": "clientId",
    "client_secret": "clientSecret",
    "redirect_uri": "redirectUri",
    "grant_type": "grantType",
  });
});

/** @internal */
export type ExchangeSsoTokenRequestBody$Outbound = {
  code: string;
  state?: string | undefined;
  client_id: string;
  client_secret: string;
  redirect_uri?: string | undefined;
  grant_type?: string | undefined;
};

/** @internal */
export const ExchangeSsoTokenRequestBody$outboundSchema: z.ZodType<
  ExchangeSsoTokenRequestBody$Outbound,
  z.ZodTypeDef,
  ExchangeSsoTokenRequestBody
> = z.object({
  code: z.string(),
  state: z.string().optional(),
  clientId: z.string(),
  clientSecret: z.string(),
  redirectUri: z.string().optional(),
  grantType: ExchangeSsoTokenGrantType$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    clientId: "client_id",
    clientSecret: "client_secret",
    redirectUri: "redirect_uri",
    grantType: "grant_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExchangeSsoTokenRequestBody$ {
  /** @deprecated use `ExchangeSsoTokenRequestBody$inboundSchema` instead. */
  export const inboundSchema = ExchangeSsoTokenRequestBody$inboundSchema;
  /** @deprecated use `ExchangeSsoTokenRequestBody$outboundSchema` instead. */
  export const outboundSchema = ExchangeSsoTokenRequestBody$outboundSchema;
  /** @deprecated use `ExchangeSsoTokenRequestBody$Outbound` instead. */
  export type Outbound = ExchangeSsoTokenRequestBody$Outbound;
}

export function exchangeSsoTokenRequestBodyToJSON(
  exchangeSsoTokenRequestBody: ExchangeSsoTokenRequestBody,
): string {
  return JSON.stringify(
    ExchangeSsoTokenRequestBody$outboundSchema.parse(
      exchangeSsoTokenRequestBody,
    ),
  );
}

export function exchangeSsoTokenRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ExchangeSsoTokenRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExchangeSsoTokenRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExchangeSsoTokenRequestBody' from JSON`,
  );
}

/** @internal */
export const ExchangeSsoTokenResponseBody$inboundSchema: z.ZodType<
  ExchangeSsoTokenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id_token: z.string(),
  access_token: z.nullable(z.string()),
  token_type: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "id_token": "idToken",
    "access_token": "accessToken",
    "token_type": "tokenType",
  });
});

/** @internal */
export type ExchangeSsoTokenResponseBody$Outbound = {
  id_token: string;
  access_token: string | null;
  token_type: string | null;
};

/** @internal */
export const ExchangeSsoTokenResponseBody$outboundSchema: z.ZodType<
  ExchangeSsoTokenResponseBody$Outbound,
  z.ZodTypeDef,
  ExchangeSsoTokenResponseBody
> = z.object({
  idToken: z.string(),
  accessToken: z.nullable(z.string()),
  tokenType: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    idToken: "id_token",
    accessToken: "access_token",
    tokenType: "token_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExchangeSsoTokenResponseBody$ {
  /** @deprecated use `ExchangeSsoTokenResponseBody$inboundSchema` instead. */
  export const inboundSchema = ExchangeSsoTokenResponseBody$inboundSchema;
  /** @deprecated use `ExchangeSsoTokenResponseBody$outboundSchema` instead. */
  export const outboundSchema = ExchangeSsoTokenResponseBody$outboundSchema;
  /** @deprecated use `ExchangeSsoTokenResponseBody$Outbound` instead. */
  export type Outbound = ExchangeSsoTokenResponseBody$Outbound;
}

export function exchangeSsoTokenResponseBodyToJSON(
  exchangeSsoTokenResponseBody: ExchangeSsoTokenResponseBody,
): string {
  return JSON.stringify(
    ExchangeSsoTokenResponseBody$outboundSchema.parse(
      exchangeSsoTokenResponseBody,
    ),
  );
}

export function exchangeSsoTokenResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ExchangeSsoTokenResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExchangeSsoTokenResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExchangeSsoTokenResponseBody' from JSON`,
  );
}
