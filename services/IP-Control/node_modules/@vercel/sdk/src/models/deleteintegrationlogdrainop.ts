/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type DeleteIntegrationLogDrainRequest = {
  /**
   * ID of the log drain to be deleted
   */
  id: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
};

/** @internal */
export const DeleteIntegrationLogDrainRequest$inboundSchema: z.ZodType<
  DeleteIntegrationLogDrainRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/** @internal */
export type DeleteIntegrationLogDrainRequest$Outbound = {
  id: string;
  teamId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const DeleteIntegrationLogDrainRequest$outboundSchema: z.ZodType<
  DeleteIntegrationLogDrainRequest$Outbound,
  z.ZodTypeDef,
  DeleteIntegrationLogDrainRequest
> = z.object({
  id: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteIntegrationLogDrainRequest$ {
  /** @deprecated use `DeleteIntegrationLogDrainRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteIntegrationLogDrainRequest$inboundSchema;
  /** @deprecated use `DeleteIntegrationLogDrainRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteIntegrationLogDrainRequest$outboundSchema;
  /** @deprecated use `DeleteIntegrationLogDrainRequest$Outbound` instead. */
  export type Outbound = DeleteIntegrationLogDrainRequest$Outbound;
}

export function deleteIntegrationLogDrainRequestToJSON(
  deleteIntegrationLogDrainRequest: DeleteIntegrationLogDrainRequest,
): string {
  return JSON.stringify(
    DeleteIntegrationLogDrainRequest$outboundSchema.parse(
      deleteIntegrationLogDrainRequest,
    ),
  );
}

export function deleteIntegrationLogDrainRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteIntegrationLogDrainRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteIntegrationLogDrainRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteIntegrationLogDrainRequest' from JSON`,
  );
}
