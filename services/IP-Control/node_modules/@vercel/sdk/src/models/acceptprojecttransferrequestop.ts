/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type PaidFeatures = {
  concurrentBuilds?: number | null | undefined;
  passwordProtection?: boolean | null | undefined;
  previewDeploymentSuffix?: boolean | null | undefined;
};

export type AcceptedPolicies = {
  eula: Date;
  privacy: Date;
  additionalProperties?: { [k: string]: Date };
};

export type AcceptProjectTransferRequestRequestBody = {
  /**
   * The desired name for the project
   */
  newProjectName?: string | undefined;
  paidFeatures?: PaidFeatures | undefined;
  acceptedPolicies?: { [k: string]: AcceptedPolicies } | undefined;
};

export type AcceptProjectTransferRequestRequest = {
  /**
   * The code of the project transfer request.
   */
  code: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
  requestBody?: AcceptProjectTransferRequestRequestBody | undefined;
};

export type AcceptProjectTransferRequestResponseBody2 = {};

export const AcceptProjectTransferRequestResponseBodyStatus = {
  Fulfilled: "fulfilled",
  Errored: "errored",
} as const;
export type AcceptProjectTransferRequestResponseBodyStatus = ClosedEnum<
  typeof AcceptProjectTransferRequestResponseBodyStatus
>;

export type AcceptProjectTransferRequestResponseBodyError = {};

export type AcceptProjectTransferRequestResponseBodyResult = {
  status: AcceptProjectTransferRequestResponseBodyStatus;
  error?: AcceptProjectTransferRequestResponseBodyError | undefined;
  code?: string | undefined;
};

export type PartnerCalls = {
  installationId: string;
  resourceIds: Array<string>;
  result: AcceptProjectTransferRequestResponseBodyResult;
};

export type ResourceTransferErrors = {};

export type AcceptProjectTransferRequestResponseBody1 = {
  partnerCalls: Array<PartnerCalls>;
  resourceTransferErrors: Array<ResourceTransferErrors>;
};

/**
 * The project has been transferred successfully.
 */
export type AcceptProjectTransferRequestResponseBody =
  | AcceptProjectTransferRequestResponseBody1
  | AcceptProjectTransferRequestResponseBody2;

/** @internal */
export const PaidFeatures$inboundSchema: z.ZodType<
  PaidFeatures,
  z.ZodTypeDef,
  unknown
> = z.object({
  concurrentBuilds: z.nullable(z.number().int()).optional(),
  passwordProtection: z.nullable(z.boolean()).optional(),
  previewDeploymentSuffix: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type PaidFeatures$Outbound = {
  concurrentBuilds?: number | null | undefined;
  passwordProtection?: boolean | null | undefined;
  previewDeploymentSuffix?: boolean | null | undefined;
};

/** @internal */
export const PaidFeatures$outboundSchema: z.ZodType<
  PaidFeatures$Outbound,
  z.ZodTypeDef,
  PaidFeatures
> = z.object({
  concurrentBuilds: z.nullable(z.number().int()).optional(),
  passwordProtection: z.nullable(z.boolean()).optional(),
  previewDeploymentSuffix: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaidFeatures$ {
  /** @deprecated use `PaidFeatures$inboundSchema` instead. */
  export const inboundSchema = PaidFeatures$inboundSchema;
  /** @deprecated use `PaidFeatures$outboundSchema` instead. */
  export const outboundSchema = PaidFeatures$outboundSchema;
  /** @deprecated use `PaidFeatures$Outbound` instead. */
  export type Outbound = PaidFeatures$Outbound;
}

export function paidFeaturesToJSON(paidFeatures: PaidFeatures): string {
  return JSON.stringify(PaidFeatures$outboundSchema.parse(paidFeatures));
}

export function paidFeaturesFromJSON(
  jsonString: string,
): SafeParseResult<PaidFeatures, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaidFeatures$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaidFeatures' from JSON`,
  );
}

/** @internal */
export const AcceptedPolicies$inboundSchema: z.ZodType<
  AcceptedPolicies,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    eula: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    privacy: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  }).catchall(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  "additionalProperties",
  true,
);

/** @internal */
export type AcceptedPolicies$Outbound = {
  eula: string;
  privacy: string;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const AcceptedPolicies$outboundSchema: z.ZodType<
  AcceptedPolicies$Outbound,
  z.ZodTypeDef,
  AcceptedPolicies
> = z.object({
  eula: z.date().transform(v => v.toISOString()),
  privacy: z.date().transform(v => v.toISOString()),
  additionalProperties: z.record(z.date().transform(v => v.toISOString())),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AcceptedPolicies$ {
  /** @deprecated use `AcceptedPolicies$inboundSchema` instead. */
  export const inboundSchema = AcceptedPolicies$inboundSchema;
  /** @deprecated use `AcceptedPolicies$outboundSchema` instead. */
  export const outboundSchema = AcceptedPolicies$outboundSchema;
  /** @deprecated use `AcceptedPolicies$Outbound` instead. */
  export type Outbound = AcceptedPolicies$Outbound;
}

export function acceptedPoliciesToJSON(
  acceptedPolicies: AcceptedPolicies,
): string {
  return JSON.stringify(
    AcceptedPolicies$outboundSchema.parse(acceptedPolicies),
  );
}

export function acceptedPoliciesFromJSON(
  jsonString: string,
): SafeParseResult<AcceptedPolicies, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AcceptedPolicies$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AcceptedPolicies' from JSON`,
  );
}

/** @internal */
export const AcceptProjectTransferRequestRequestBody$inboundSchema: z.ZodType<
  AcceptProjectTransferRequestRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  newProjectName: z.string().optional(),
  paidFeatures: z.lazy(() => PaidFeatures$inboundSchema).optional(),
  acceptedPolicies: z.record(z.lazy(() => AcceptedPolicies$inboundSchema))
    .optional(),
});

/** @internal */
export type AcceptProjectTransferRequestRequestBody$Outbound = {
  newProjectName?: string | undefined;
  paidFeatures?: PaidFeatures$Outbound | undefined;
  acceptedPolicies?: { [k: string]: AcceptedPolicies$Outbound } | undefined;
};

/** @internal */
export const AcceptProjectTransferRequestRequestBody$outboundSchema: z.ZodType<
  AcceptProjectTransferRequestRequestBody$Outbound,
  z.ZodTypeDef,
  AcceptProjectTransferRequestRequestBody
> = z.object({
  newProjectName: z.string().optional(),
  paidFeatures: z.lazy(() => PaidFeatures$outboundSchema).optional(),
  acceptedPolicies: z.record(z.lazy(() => AcceptedPolicies$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AcceptProjectTransferRequestRequestBody$ {
  /** @deprecated use `AcceptProjectTransferRequestRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    AcceptProjectTransferRequestRequestBody$inboundSchema;
  /** @deprecated use `AcceptProjectTransferRequestRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    AcceptProjectTransferRequestRequestBody$outboundSchema;
  /** @deprecated use `AcceptProjectTransferRequestRequestBody$Outbound` instead. */
  export type Outbound = AcceptProjectTransferRequestRequestBody$Outbound;
}

export function acceptProjectTransferRequestRequestBodyToJSON(
  acceptProjectTransferRequestRequestBody:
    AcceptProjectTransferRequestRequestBody,
): string {
  return JSON.stringify(
    AcceptProjectTransferRequestRequestBody$outboundSchema.parse(
      acceptProjectTransferRequestRequestBody,
    ),
  );
}

export function acceptProjectTransferRequestRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  AcceptProjectTransferRequestRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AcceptProjectTransferRequestRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AcceptProjectTransferRequestRequestBody' from JSON`,
  );
}

/** @internal */
export const AcceptProjectTransferRequestRequest$inboundSchema: z.ZodType<
  AcceptProjectTransferRequestRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  RequestBody: z.lazy(() =>
    AcceptProjectTransferRequestRequestBody$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AcceptProjectTransferRequestRequest$Outbound = {
  code: string;
  teamId?: string | undefined;
  slug?: string | undefined;
  RequestBody?: AcceptProjectTransferRequestRequestBody$Outbound | undefined;
};

/** @internal */
export const AcceptProjectTransferRequestRequest$outboundSchema: z.ZodType<
  AcceptProjectTransferRequestRequest$Outbound,
  z.ZodTypeDef,
  AcceptProjectTransferRequestRequest
> = z.object({
  code: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  requestBody: z.lazy(() =>
    AcceptProjectTransferRequestRequestBody$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AcceptProjectTransferRequestRequest$ {
  /** @deprecated use `AcceptProjectTransferRequestRequest$inboundSchema` instead. */
  export const inboundSchema =
    AcceptProjectTransferRequestRequest$inboundSchema;
  /** @deprecated use `AcceptProjectTransferRequestRequest$outboundSchema` instead. */
  export const outboundSchema =
    AcceptProjectTransferRequestRequest$outboundSchema;
  /** @deprecated use `AcceptProjectTransferRequestRequest$Outbound` instead. */
  export type Outbound = AcceptProjectTransferRequestRequest$Outbound;
}

export function acceptProjectTransferRequestRequestToJSON(
  acceptProjectTransferRequestRequest: AcceptProjectTransferRequestRequest,
): string {
  return JSON.stringify(
    AcceptProjectTransferRequestRequest$outboundSchema.parse(
      acceptProjectTransferRequestRequest,
    ),
  );
}

export function acceptProjectTransferRequestRequestFromJSON(
  jsonString: string,
): SafeParseResult<AcceptProjectTransferRequestRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AcceptProjectTransferRequestRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AcceptProjectTransferRequestRequest' from JSON`,
  );
}

/** @internal */
export const AcceptProjectTransferRequestResponseBody2$inboundSchema: z.ZodType<
  AcceptProjectTransferRequestResponseBody2,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type AcceptProjectTransferRequestResponseBody2$Outbound = {};

/** @internal */
export const AcceptProjectTransferRequestResponseBody2$outboundSchema:
  z.ZodType<
    AcceptProjectTransferRequestResponseBody2$Outbound,
    z.ZodTypeDef,
    AcceptProjectTransferRequestResponseBody2
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AcceptProjectTransferRequestResponseBody2$ {
  /** @deprecated use `AcceptProjectTransferRequestResponseBody2$inboundSchema` instead. */
  export const inboundSchema =
    AcceptProjectTransferRequestResponseBody2$inboundSchema;
  /** @deprecated use `AcceptProjectTransferRequestResponseBody2$outboundSchema` instead. */
  export const outboundSchema =
    AcceptProjectTransferRequestResponseBody2$outboundSchema;
  /** @deprecated use `AcceptProjectTransferRequestResponseBody2$Outbound` instead. */
  export type Outbound = AcceptProjectTransferRequestResponseBody2$Outbound;
}

export function acceptProjectTransferRequestResponseBody2ToJSON(
  acceptProjectTransferRequestResponseBody2:
    AcceptProjectTransferRequestResponseBody2,
): string {
  return JSON.stringify(
    AcceptProjectTransferRequestResponseBody2$outboundSchema.parse(
      acceptProjectTransferRequestResponseBody2,
    ),
  );
}

export function acceptProjectTransferRequestResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<
  AcceptProjectTransferRequestResponseBody2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AcceptProjectTransferRequestResponseBody2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AcceptProjectTransferRequestResponseBody2' from JSON`,
  );
}

/** @internal */
export const AcceptProjectTransferRequestResponseBodyStatus$inboundSchema:
  z.ZodNativeEnum<typeof AcceptProjectTransferRequestResponseBodyStatus> = z
    .nativeEnum(AcceptProjectTransferRequestResponseBodyStatus);

/** @internal */
export const AcceptProjectTransferRequestResponseBodyStatus$outboundSchema:
  z.ZodNativeEnum<typeof AcceptProjectTransferRequestResponseBodyStatus> =
    AcceptProjectTransferRequestResponseBodyStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AcceptProjectTransferRequestResponseBodyStatus$ {
  /** @deprecated use `AcceptProjectTransferRequestResponseBodyStatus$inboundSchema` instead. */
  export const inboundSchema =
    AcceptProjectTransferRequestResponseBodyStatus$inboundSchema;
  /** @deprecated use `AcceptProjectTransferRequestResponseBodyStatus$outboundSchema` instead. */
  export const outboundSchema =
    AcceptProjectTransferRequestResponseBodyStatus$outboundSchema;
}

/** @internal */
export const AcceptProjectTransferRequestResponseBodyError$inboundSchema:
  z.ZodType<
    AcceptProjectTransferRequestResponseBodyError,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type AcceptProjectTransferRequestResponseBodyError$Outbound = {};

/** @internal */
export const AcceptProjectTransferRequestResponseBodyError$outboundSchema:
  z.ZodType<
    AcceptProjectTransferRequestResponseBodyError$Outbound,
    z.ZodTypeDef,
    AcceptProjectTransferRequestResponseBodyError
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AcceptProjectTransferRequestResponseBodyError$ {
  /** @deprecated use `AcceptProjectTransferRequestResponseBodyError$inboundSchema` instead. */
  export const inboundSchema =
    AcceptProjectTransferRequestResponseBodyError$inboundSchema;
  /** @deprecated use `AcceptProjectTransferRequestResponseBodyError$outboundSchema` instead. */
  export const outboundSchema =
    AcceptProjectTransferRequestResponseBodyError$outboundSchema;
  /** @deprecated use `AcceptProjectTransferRequestResponseBodyError$Outbound` instead. */
  export type Outbound = AcceptProjectTransferRequestResponseBodyError$Outbound;
}

export function acceptProjectTransferRequestResponseBodyErrorToJSON(
  acceptProjectTransferRequestResponseBodyError:
    AcceptProjectTransferRequestResponseBodyError,
): string {
  return JSON.stringify(
    AcceptProjectTransferRequestResponseBodyError$outboundSchema.parse(
      acceptProjectTransferRequestResponseBodyError,
    ),
  );
}

export function acceptProjectTransferRequestResponseBodyErrorFromJSON(
  jsonString: string,
): SafeParseResult<
  AcceptProjectTransferRequestResponseBodyError,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AcceptProjectTransferRequestResponseBodyError$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AcceptProjectTransferRequestResponseBodyError' from JSON`,
  );
}

/** @internal */
export const AcceptProjectTransferRequestResponseBodyResult$inboundSchema:
  z.ZodType<
    AcceptProjectTransferRequestResponseBodyResult,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status: AcceptProjectTransferRequestResponseBodyStatus$inboundSchema,
    error: z.lazy(() =>
      AcceptProjectTransferRequestResponseBodyError$inboundSchema
    ).optional(),
    code: z.string().optional(),
  });

/** @internal */
export type AcceptProjectTransferRequestResponseBodyResult$Outbound = {
  status: string;
  error?: AcceptProjectTransferRequestResponseBodyError$Outbound | undefined;
  code?: string | undefined;
};

/** @internal */
export const AcceptProjectTransferRequestResponseBodyResult$outboundSchema:
  z.ZodType<
    AcceptProjectTransferRequestResponseBodyResult$Outbound,
    z.ZodTypeDef,
    AcceptProjectTransferRequestResponseBodyResult
  > = z.object({
    status: AcceptProjectTransferRequestResponseBodyStatus$outboundSchema,
    error: z.lazy(() =>
      AcceptProjectTransferRequestResponseBodyError$outboundSchema
    ).optional(),
    code: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AcceptProjectTransferRequestResponseBodyResult$ {
  /** @deprecated use `AcceptProjectTransferRequestResponseBodyResult$inboundSchema` instead. */
  export const inboundSchema =
    AcceptProjectTransferRequestResponseBodyResult$inboundSchema;
  /** @deprecated use `AcceptProjectTransferRequestResponseBodyResult$outboundSchema` instead. */
  export const outboundSchema =
    AcceptProjectTransferRequestResponseBodyResult$outboundSchema;
  /** @deprecated use `AcceptProjectTransferRequestResponseBodyResult$Outbound` instead. */
  export type Outbound =
    AcceptProjectTransferRequestResponseBodyResult$Outbound;
}

export function acceptProjectTransferRequestResponseBodyResultToJSON(
  acceptProjectTransferRequestResponseBodyResult:
    AcceptProjectTransferRequestResponseBodyResult,
): string {
  return JSON.stringify(
    AcceptProjectTransferRequestResponseBodyResult$outboundSchema.parse(
      acceptProjectTransferRequestResponseBodyResult,
    ),
  );
}

export function acceptProjectTransferRequestResponseBodyResultFromJSON(
  jsonString: string,
): SafeParseResult<
  AcceptProjectTransferRequestResponseBodyResult,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AcceptProjectTransferRequestResponseBodyResult$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AcceptProjectTransferRequestResponseBodyResult' from JSON`,
  );
}

/** @internal */
export const PartnerCalls$inboundSchema: z.ZodType<
  PartnerCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  installationId: z.string(),
  resourceIds: z.array(z.string()),
  result: z.lazy(() =>
    AcceptProjectTransferRequestResponseBodyResult$inboundSchema
  ),
});

/** @internal */
export type PartnerCalls$Outbound = {
  installationId: string;
  resourceIds: Array<string>;
  result: AcceptProjectTransferRequestResponseBodyResult$Outbound;
};

/** @internal */
export const PartnerCalls$outboundSchema: z.ZodType<
  PartnerCalls$Outbound,
  z.ZodTypeDef,
  PartnerCalls
> = z.object({
  installationId: z.string(),
  resourceIds: z.array(z.string()),
  result: z.lazy(() =>
    AcceptProjectTransferRequestResponseBodyResult$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PartnerCalls$ {
  /** @deprecated use `PartnerCalls$inboundSchema` instead. */
  export const inboundSchema = PartnerCalls$inboundSchema;
  /** @deprecated use `PartnerCalls$outboundSchema` instead. */
  export const outboundSchema = PartnerCalls$outboundSchema;
  /** @deprecated use `PartnerCalls$Outbound` instead. */
  export type Outbound = PartnerCalls$Outbound;
}

export function partnerCallsToJSON(partnerCalls: PartnerCalls): string {
  return JSON.stringify(PartnerCalls$outboundSchema.parse(partnerCalls));
}

export function partnerCallsFromJSON(
  jsonString: string,
): SafeParseResult<PartnerCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PartnerCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PartnerCalls' from JSON`,
  );
}

/** @internal */
export const ResourceTransferErrors$inboundSchema: z.ZodType<
  ResourceTransferErrors,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ResourceTransferErrors$Outbound = {};

/** @internal */
export const ResourceTransferErrors$outboundSchema: z.ZodType<
  ResourceTransferErrors$Outbound,
  z.ZodTypeDef,
  ResourceTransferErrors
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResourceTransferErrors$ {
  /** @deprecated use `ResourceTransferErrors$inboundSchema` instead. */
  export const inboundSchema = ResourceTransferErrors$inboundSchema;
  /** @deprecated use `ResourceTransferErrors$outboundSchema` instead. */
  export const outboundSchema = ResourceTransferErrors$outboundSchema;
  /** @deprecated use `ResourceTransferErrors$Outbound` instead. */
  export type Outbound = ResourceTransferErrors$Outbound;
}

export function resourceTransferErrorsToJSON(
  resourceTransferErrors: ResourceTransferErrors,
): string {
  return JSON.stringify(
    ResourceTransferErrors$outboundSchema.parse(resourceTransferErrors),
  );
}

export function resourceTransferErrorsFromJSON(
  jsonString: string,
): SafeParseResult<ResourceTransferErrors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResourceTransferErrors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResourceTransferErrors' from JSON`,
  );
}

/** @internal */
export const AcceptProjectTransferRequestResponseBody1$inboundSchema: z.ZodType<
  AcceptProjectTransferRequestResponseBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  partnerCalls: z.array(z.lazy(() => PartnerCalls$inboundSchema)),
  resourceTransferErrors: z.array(
    z.lazy(() => ResourceTransferErrors$inboundSchema),
  ),
});

/** @internal */
export type AcceptProjectTransferRequestResponseBody1$Outbound = {
  partnerCalls: Array<PartnerCalls$Outbound>;
  resourceTransferErrors: Array<ResourceTransferErrors$Outbound>;
};

/** @internal */
export const AcceptProjectTransferRequestResponseBody1$outboundSchema:
  z.ZodType<
    AcceptProjectTransferRequestResponseBody1$Outbound,
    z.ZodTypeDef,
    AcceptProjectTransferRequestResponseBody1
  > = z.object({
    partnerCalls: z.array(z.lazy(() => PartnerCalls$outboundSchema)),
    resourceTransferErrors: z.array(
      z.lazy(() => ResourceTransferErrors$outboundSchema),
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AcceptProjectTransferRequestResponseBody1$ {
  /** @deprecated use `AcceptProjectTransferRequestResponseBody1$inboundSchema` instead. */
  export const inboundSchema =
    AcceptProjectTransferRequestResponseBody1$inboundSchema;
  /** @deprecated use `AcceptProjectTransferRequestResponseBody1$outboundSchema` instead. */
  export const outboundSchema =
    AcceptProjectTransferRequestResponseBody1$outboundSchema;
  /** @deprecated use `AcceptProjectTransferRequestResponseBody1$Outbound` instead. */
  export type Outbound = AcceptProjectTransferRequestResponseBody1$Outbound;
}

export function acceptProjectTransferRequestResponseBody1ToJSON(
  acceptProjectTransferRequestResponseBody1:
    AcceptProjectTransferRequestResponseBody1,
): string {
  return JSON.stringify(
    AcceptProjectTransferRequestResponseBody1$outboundSchema.parse(
      acceptProjectTransferRequestResponseBody1,
    ),
  );
}

export function acceptProjectTransferRequestResponseBody1FromJSON(
  jsonString: string,
): SafeParseResult<
  AcceptProjectTransferRequestResponseBody1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AcceptProjectTransferRequestResponseBody1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AcceptProjectTransferRequestResponseBody1' from JSON`,
  );
}

/** @internal */
export const AcceptProjectTransferRequestResponseBody$inboundSchema: z.ZodType<
  AcceptProjectTransferRequestResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => AcceptProjectTransferRequestResponseBody1$inboundSchema),
  z.lazy(() => AcceptProjectTransferRequestResponseBody2$inboundSchema),
]);

/** @internal */
export type AcceptProjectTransferRequestResponseBody$Outbound =
  | AcceptProjectTransferRequestResponseBody1$Outbound
  | AcceptProjectTransferRequestResponseBody2$Outbound;

/** @internal */
export const AcceptProjectTransferRequestResponseBody$outboundSchema: z.ZodType<
  AcceptProjectTransferRequestResponseBody$Outbound,
  z.ZodTypeDef,
  AcceptProjectTransferRequestResponseBody
> = z.union([
  z.lazy(() => AcceptProjectTransferRequestResponseBody1$outboundSchema),
  z.lazy(() => AcceptProjectTransferRequestResponseBody2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AcceptProjectTransferRequestResponseBody$ {
  /** @deprecated use `AcceptProjectTransferRequestResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    AcceptProjectTransferRequestResponseBody$inboundSchema;
  /** @deprecated use `AcceptProjectTransferRequestResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    AcceptProjectTransferRequestResponseBody$outboundSchema;
  /** @deprecated use `AcceptProjectTransferRequestResponseBody$Outbound` instead. */
  export type Outbound = AcceptProjectTransferRequestResponseBody$Outbound;
}

export function acceptProjectTransferRequestResponseBodyToJSON(
  acceptProjectTransferRequestResponseBody:
    AcceptProjectTransferRequestResponseBody,
): string {
  return JSON.stringify(
    AcceptProjectTransferRequestResponseBody$outboundSchema.parse(
      acceptProjectTransferRequestResponseBody,
    ),
  );
}

export function acceptProjectTransferRequestResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  AcceptProjectTransferRequestResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AcceptProjectTransferRequestResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AcceptProjectTransferRequestResponseBody' from JSON`,
  );
}
