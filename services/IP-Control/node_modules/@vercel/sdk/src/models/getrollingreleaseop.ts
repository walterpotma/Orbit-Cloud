/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Filter by rolling release state
 */
export const State = {
  Active: "ACTIVE",
  Complete: "COMPLETE",
  Aborted: "ABORTED",
} as const;
/**
 * Filter by rolling release state
 */
export type State = ClosedEnum<typeof State>;

export type GetRollingReleaseRequest = {
  /**
   * Project ID or project name (URL-encoded)
   */
  idOrName: string;
  /**
   * Filter by rolling release state
   */
  state?: State | undefined;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
};

/**
 * The current state of the rolling release
 */
export const GetRollingReleaseState = {
  Active: "ACTIVE",
  Complete: "COMPLETE",
  Aborted: "ABORTED",
} as const;
/**
 * The current state of the rolling release
 */
export type GetRollingReleaseState = ClosedEnum<typeof GetRollingReleaseState>;

export const GetRollingReleaseTarget = {
  Staging: "staging",
  Production: "production",
} as const;
export type GetRollingReleaseTarget = ClosedEnum<
  typeof GetRollingReleaseTarget
>;

export const GetRollingReleaseSource = {
  ApiTriggerGitDeploy: "api-trigger-git-deploy",
  Cli: "cli",
  CloneRepo: "clone/repo",
  Git: "git",
  Import: "import",
  ImportRepo: "import/repo",
  Redeploy: "redeploy",
  V0Web: "v0-web",
} as const;
export type GetRollingReleaseSource = ClosedEnum<
  typeof GetRollingReleaseSource
>;

export const GetRollingReleaseReadyState = {
  Building: "BUILDING",
  Error: "ERROR",
  Initializing: "INITIALIZING",
  Queued: "QUEUED",
  Ready: "READY",
  Canceled: "CANCELED",
} as const;
export type GetRollingReleaseReadyState = ClosedEnum<
  typeof GetRollingReleaseReadyState
>;

/**
 * The current deployment receiving production traffic
 */
export type CurrentDeployment = {
  id: string;
  name: string;
  url: string;
  target?: GetRollingReleaseTarget | null | undefined;
  source?: GetRollingReleaseSource | undefined;
  createdAt: number;
  readyState: GetRollingReleaseReadyState;
  readyStateAt?: number | undefined;
};

export const GetRollingReleaseRollingReleaseTarget = {
  Staging: "staging",
  Production: "production",
} as const;
export type GetRollingReleaseRollingReleaseTarget = ClosedEnum<
  typeof GetRollingReleaseRollingReleaseTarget
>;

export const GetRollingReleaseRollingReleaseSource = {
  ApiTriggerGitDeploy: "api-trigger-git-deploy",
  Cli: "cli",
  CloneRepo: "clone/repo",
  Git: "git",
  Import: "import",
  ImportRepo: "import/repo",
  Redeploy: "redeploy",
  V0Web: "v0-web",
} as const;
export type GetRollingReleaseRollingReleaseSource = ClosedEnum<
  typeof GetRollingReleaseRollingReleaseSource
>;

export const GetRollingReleaseRollingReleaseReadyState = {
  Building: "BUILDING",
  Error: "ERROR",
  Initializing: "INITIALIZING",
  Queued: "QUEUED",
  Ready: "READY",
  Canceled: "CANCELED",
} as const;
export type GetRollingReleaseRollingReleaseReadyState = ClosedEnum<
  typeof GetRollingReleaseRollingReleaseReadyState
>;

/**
 * The canary deployment being rolled out
 */
export type CanaryDeployment = {
  id: string;
  name: string;
  url: string;
  target?: GetRollingReleaseRollingReleaseTarget | null | undefined;
  source?: GetRollingReleaseRollingReleaseSource | undefined;
  createdAt: number;
  readyState: GetRollingReleaseRollingReleaseReadyState;
  readyStateAt?: number | undefined;
};

/**
 * The advancement type of the rolling release
 */
export const AdvancementType = {
  Automatic: "automatic",
  ManualApproval: "manual-approval",
} as const;
/**
 * The advancement type of the rolling release
 */
export type AdvancementType = ClosedEnum<typeof AdvancementType>;

/**
 * All stages configured for this rolling release
 */
export type GetRollingReleaseStages = {
  /**
   * The zero-based index of the stage
   */
  index: number;
  /**
   * Whether or not this stage is the final stage (targetPercentage === 100)
   */
  isFinalStage: boolean;
  /**
   * The percentage of traffic to serve to the canary deployment (0-100)
   */
  targetPercentage: number;
  /**
   * Whether or not this stage requires manual approval to proceed
   */
  requireApproval: boolean;
  /**
   * Duration in seconds for automatic advancement, null for manual stages or the final stage
   */
  duration: number | null;
};

/**
 * The currently active stage, null if the rollout is aborted
 */
export type ActiveStage = {
  /**
   * The zero-based index of the stage
   */
  index: number;
  /**
   * Whether or not this stage is the final stage (targetPercentage === 100)
   */
  isFinalStage: boolean;
  /**
   * The percentage of traffic to serve to the canary deployment (0-100)
   */
  targetPercentage: number;
  /**
   * Whether or not this stage requires manual approval to proceed
   */
  requireApproval: boolean;
  /**
   * Duration in seconds for automatic advancement, null for manual stages or the final stage
   */
  duration: number | null;
};

/**
 * The next stage to be activated, null if not in ACTIVE state
 */
export type NextStage = {
  /**
   * The zero-based index of the stage
   */
  index: number;
  /**
   * Whether or not this stage is the final stage (targetPercentage === 100)
   */
  isFinalStage: boolean;
  /**
   * The percentage of traffic to serve to the canary deployment (0-100)
   */
  targetPercentage: number;
  /**
   * Whether or not this stage requires manual approval to proceed
   */
  requireApproval: boolean;
  /**
   * Duration in seconds for automatic advancement, null for manual stages or the final stage
   */
  duration: number | null;
};

/**
 * Rolling release information including configuration and document details, or null if no rolling release exists
 */
export type GetRollingReleaseRollingRelease = {
  /**
   * The current state of the rolling release
   */
  state: GetRollingReleaseState;
  /**
   * The current deployment receiving production traffic
   */
  currentDeployment: CurrentDeployment | null;
  /**
   * The canary deployment being rolled out
   */
  canaryDeployment: CanaryDeployment | null;
  /**
   * The ID of a deployment queued for the next rolling release
   */
  queuedDeploymentId: string | null;
  /**
   * The advancement type of the rolling release
   */
  advancementType: AdvancementType;
  /**
   * All stages configured for this rolling release
   */
  stages: Array<GetRollingReleaseStages>;
  /**
   * The currently active stage, null if the rollout is aborted
   */
  activeStage: ActiveStage | null;
  /**
   * The next stage to be activated, null if not in ACTIVE state
   */
  nextStage: NextStage | null;
  /**
   * Unix timestamp in milliseconds when the rolling release started
   */
  startedAt: number;
  /**
   * Unix timestamp in milliseconds when the rolling release was last updated
   */
  updatedAt: number;
};

/**
 * The response format for rolling release endpoints that return rolling release information
 */
export type GetRollingReleaseResponseBody = {
  /**
   * Rolling release information including configuration and document details, or null if no rolling release exists
   */
  rollingRelease: GetRollingReleaseRollingRelease | null;
};

/** @internal */
export const State$inboundSchema: z.ZodNativeEnum<typeof State> = z.nativeEnum(
  State,
);

/** @internal */
export const State$outboundSchema: z.ZodNativeEnum<typeof State> =
  State$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace State$ {
  /** @deprecated use `State$inboundSchema` instead. */
  export const inboundSchema = State$inboundSchema;
  /** @deprecated use `State$outboundSchema` instead. */
  export const outboundSchema = State$outboundSchema;
}

/** @internal */
export const GetRollingReleaseRequest$inboundSchema: z.ZodType<
  GetRollingReleaseRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  idOrName: z.string(),
  state: State$inboundSchema.optional(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/** @internal */
export type GetRollingReleaseRequest$Outbound = {
  idOrName: string;
  state?: string | undefined;
  teamId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const GetRollingReleaseRequest$outboundSchema: z.ZodType<
  GetRollingReleaseRequest$Outbound,
  z.ZodTypeDef,
  GetRollingReleaseRequest
> = z.object({
  idOrName: z.string(),
  state: State$outboundSchema.optional(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRollingReleaseRequest$ {
  /** @deprecated use `GetRollingReleaseRequest$inboundSchema` instead. */
  export const inboundSchema = GetRollingReleaseRequest$inboundSchema;
  /** @deprecated use `GetRollingReleaseRequest$outboundSchema` instead. */
  export const outboundSchema = GetRollingReleaseRequest$outboundSchema;
  /** @deprecated use `GetRollingReleaseRequest$Outbound` instead. */
  export type Outbound = GetRollingReleaseRequest$Outbound;
}

export function getRollingReleaseRequestToJSON(
  getRollingReleaseRequest: GetRollingReleaseRequest,
): string {
  return JSON.stringify(
    GetRollingReleaseRequest$outboundSchema.parse(getRollingReleaseRequest),
  );
}

export function getRollingReleaseRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetRollingReleaseRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRollingReleaseRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRollingReleaseRequest' from JSON`,
  );
}

/** @internal */
export const GetRollingReleaseState$inboundSchema: z.ZodNativeEnum<
  typeof GetRollingReleaseState
> = z.nativeEnum(GetRollingReleaseState);

/** @internal */
export const GetRollingReleaseState$outboundSchema: z.ZodNativeEnum<
  typeof GetRollingReleaseState
> = GetRollingReleaseState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRollingReleaseState$ {
  /** @deprecated use `GetRollingReleaseState$inboundSchema` instead. */
  export const inboundSchema = GetRollingReleaseState$inboundSchema;
  /** @deprecated use `GetRollingReleaseState$outboundSchema` instead. */
  export const outboundSchema = GetRollingReleaseState$outboundSchema;
}

/** @internal */
export const GetRollingReleaseTarget$inboundSchema: z.ZodNativeEnum<
  typeof GetRollingReleaseTarget
> = z.nativeEnum(GetRollingReleaseTarget);

/** @internal */
export const GetRollingReleaseTarget$outboundSchema: z.ZodNativeEnum<
  typeof GetRollingReleaseTarget
> = GetRollingReleaseTarget$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRollingReleaseTarget$ {
  /** @deprecated use `GetRollingReleaseTarget$inboundSchema` instead. */
  export const inboundSchema = GetRollingReleaseTarget$inboundSchema;
  /** @deprecated use `GetRollingReleaseTarget$outboundSchema` instead. */
  export const outboundSchema = GetRollingReleaseTarget$outboundSchema;
}

/** @internal */
export const GetRollingReleaseSource$inboundSchema: z.ZodNativeEnum<
  typeof GetRollingReleaseSource
> = z.nativeEnum(GetRollingReleaseSource);

/** @internal */
export const GetRollingReleaseSource$outboundSchema: z.ZodNativeEnum<
  typeof GetRollingReleaseSource
> = GetRollingReleaseSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRollingReleaseSource$ {
  /** @deprecated use `GetRollingReleaseSource$inboundSchema` instead. */
  export const inboundSchema = GetRollingReleaseSource$inboundSchema;
  /** @deprecated use `GetRollingReleaseSource$outboundSchema` instead. */
  export const outboundSchema = GetRollingReleaseSource$outboundSchema;
}

/** @internal */
export const GetRollingReleaseReadyState$inboundSchema: z.ZodNativeEnum<
  typeof GetRollingReleaseReadyState
> = z.nativeEnum(GetRollingReleaseReadyState);

/** @internal */
export const GetRollingReleaseReadyState$outboundSchema: z.ZodNativeEnum<
  typeof GetRollingReleaseReadyState
> = GetRollingReleaseReadyState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRollingReleaseReadyState$ {
  /** @deprecated use `GetRollingReleaseReadyState$inboundSchema` instead. */
  export const inboundSchema = GetRollingReleaseReadyState$inboundSchema;
  /** @deprecated use `GetRollingReleaseReadyState$outboundSchema` instead. */
  export const outboundSchema = GetRollingReleaseReadyState$outboundSchema;
}

/** @internal */
export const CurrentDeployment$inboundSchema: z.ZodType<
  CurrentDeployment,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  url: z.string(),
  target: z.nullable(GetRollingReleaseTarget$inboundSchema).optional(),
  source: GetRollingReleaseSource$inboundSchema.optional(),
  createdAt: z.number(),
  readyState: GetRollingReleaseReadyState$inboundSchema,
  readyStateAt: z.number().optional(),
});

/** @internal */
export type CurrentDeployment$Outbound = {
  id: string;
  name: string;
  url: string;
  target?: string | null | undefined;
  source?: string | undefined;
  createdAt: number;
  readyState: string;
  readyStateAt?: number | undefined;
};

/** @internal */
export const CurrentDeployment$outboundSchema: z.ZodType<
  CurrentDeployment$Outbound,
  z.ZodTypeDef,
  CurrentDeployment
> = z.object({
  id: z.string(),
  name: z.string(),
  url: z.string(),
  target: z.nullable(GetRollingReleaseTarget$outboundSchema).optional(),
  source: GetRollingReleaseSource$outboundSchema.optional(),
  createdAt: z.number(),
  readyState: GetRollingReleaseReadyState$outboundSchema,
  readyStateAt: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CurrentDeployment$ {
  /** @deprecated use `CurrentDeployment$inboundSchema` instead. */
  export const inboundSchema = CurrentDeployment$inboundSchema;
  /** @deprecated use `CurrentDeployment$outboundSchema` instead. */
  export const outboundSchema = CurrentDeployment$outboundSchema;
  /** @deprecated use `CurrentDeployment$Outbound` instead. */
  export type Outbound = CurrentDeployment$Outbound;
}

export function currentDeploymentToJSON(
  currentDeployment: CurrentDeployment,
): string {
  return JSON.stringify(
    CurrentDeployment$outboundSchema.parse(currentDeployment),
  );
}

export function currentDeploymentFromJSON(
  jsonString: string,
): SafeParseResult<CurrentDeployment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CurrentDeployment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CurrentDeployment' from JSON`,
  );
}

/** @internal */
export const GetRollingReleaseRollingReleaseTarget$inboundSchema:
  z.ZodNativeEnum<typeof GetRollingReleaseRollingReleaseTarget> = z.nativeEnum(
    GetRollingReleaseRollingReleaseTarget,
  );

/** @internal */
export const GetRollingReleaseRollingReleaseTarget$outboundSchema:
  z.ZodNativeEnum<typeof GetRollingReleaseRollingReleaseTarget> =
    GetRollingReleaseRollingReleaseTarget$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRollingReleaseRollingReleaseTarget$ {
  /** @deprecated use `GetRollingReleaseRollingReleaseTarget$inboundSchema` instead. */
  export const inboundSchema =
    GetRollingReleaseRollingReleaseTarget$inboundSchema;
  /** @deprecated use `GetRollingReleaseRollingReleaseTarget$outboundSchema` instead. */
  export const outboundSchema =
    GetRollingReleaseRollingReleaseTarget$outboundSchema;
}

/** @internal */
export const GetRollingReleaseRollingReleaseSource$inboundSchema:
  z.ZodNativeEnum<typeof GetRollingReleaseRollingReleaseSource> = z.nativeEnum(
    GetRollingReleaseRollingReleaseSource,
  );

/** @internal */
export const GetRollingReleaseRollingReleaseSource$outboundSchema:
  z.ZodNativeEnum<typeof GetRollingReleaseRollingReleaseSource> =
    GetRollingReleaseRollingReleaseSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRollingReleaseRollingReleaseSource$ {
  /** @deprecated use `GetRollingReleaseRollingReleaseSource$inboundSchema` instead. */
  export const inboundSchema =
    GetRollingReleaseRollingReleaseSource$inboundSchema;
  /** @deprecated use `GetRollingReleaseRollingReleaseSource$outboundSchema` instead. */
  export const outboundSchema =
    GetRollingReleaseRollingReleaseSource$outboundSchema;
}

/** @internal */
export const GetRollingReleaseRollingReleaseReadyState$inboundSchema:
  z.ZodNativeEnum<typeof GetRollingReleaseRollingReleaseReadyState> = z
    .nativeEnum(GetRollingReleaseRollingReleaseReadyState);

/** @internal */
export const GetRollingReleaseRollingReleaseReadyState$outboundSchema:
  z.ZodNativeEnum<typeof GetRollingReleaseRollingReleaseReadyState> =
    GetRollingReleaseRollingReleaseReadyState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRollingReleaseRollingReleaseReadyState$ {
  /** @deprecated use `GetRollingReleaseRollingReleaseReadyState$inboundSchema` instead. */
  export const inboundSchema =
    GetRollingReleaseRollingReleaseReadyState$inboundSchema;
  /** @deprecated use `GetRollingReleaseRollingReleaseReadyState$outboundSchema` instead. */
  export const outboundSchema =
    GetRollingReleaseRollingReleaseReadyState$outboundSchema;
}

/** @internal */
export const CanaryDeployment$inboundSchema: z.ZodType<
  CanaryDeployment,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  url: z.string(),
  target: z.nullable(GetRollingReleaseRollingReleaseTarget$inboundSchema)
    .optional(),
  source: GetRollingReleaseRollingReleaseSource$inboundSchema.optional(),
  createdAt: z.number(),
  readyState: GetRollingReleaseRollingReleaseReadyState$inboundSchema,
  readyStateAt: z.number().optional(),
});

/** @internal */
export type CanaryDeployment$Outbound = {
  id: string;
  name: string;
  url: string;
  target?: string | null | undefined;
  source?: string | undefined;
  createdAt: number;
  readyState: string;
  readyStateAt?: number | undefined;
};

/** @internal */
export const CanaryDeployment$outboundSchema: z.ZodType<
  CanaryDeployment$Outbound,
  z.ZodTypeDef,
  CanaryDeployment
> = z.object({
  id: z.string(),
  name: z.string(),
  url: z.string(),
  target: z.nullable(GetRollingReleaseRollingReleaseTarget$outboundSchema)
    .optional(),
  source: GetRollingReleaseRollingReleaseSource$outboundSchema.optional(),
  createdAt: z.number(),
  readyState: GetRollingReleaseRollingReleaseReadyState$outboundSchema,
  readyStateAt: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CanaryDeployment$ {
  /** @deprecated use `CanaryDeployment$inboundSchema` instead. */
  export const inboundSchema = CanaryDeployment$inboundSchema;
  /** @deprecated use `CanaryDeployment$outboundSchema` instead. */
  export const outboundSchema = CanaryDeployment$outboundSchema;
  /** @deprecated use `CanaryDeployment$Outbound` instead. */
  export type Outbound = CanaryDeployment$Outbound;
}

export function canaryDeploymentToJSON(
  canaryDeployment: CanaryDeployment,
): string {
  return JSON.stringify(
    CanaryDeployment$outboundSchema.parse(canaryDeployment),
  );
}

export function canaryDeploymentFromJSON(
  jsonString: string,
): SafeParseResult<CanaryDeployment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CanaryDeployment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CanaryDeployment' from JSON`,
  );
}

/** @internal */
export const AdvancementType$inboundSchema: z.ZodNativeEnum<
  typeof AdvancementType
> = z.nativeEnum(AdvancementType);

/** @internal */
export const AdvancementType$outboundSchema: z.ZodNativeEnum<
  typeof AdvancementType
> = AdvancementType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AdvancementType$ {
  /** @deprecated use `AdvancementType$inboundSchema` instead. */
  export const inboundSchema = AdvancementType$inboundSchema;
  /** @deprecated use `AdvancementType$outboundSchema` instead. */
  export const outboundSchema = AdvancementType$outboundSchema;
}

/** @internal */
export const GetRollingReleaseStages$inboundSchema: z.ZodType<
  GetRollingReleaseStages,
  z.ZodTypeDef,
  unknown
> = z.object({
  index: z.number(),
  isFinalStage: z.boolean(),
  targetPercentage: z.number(),
  requireApproval: z.boolean(),
  duration: z.nullable(z.number()),
});

/** @internal */
export type GetRollingReleaseStages$Outbound = {
  index: number;
  isFinalStage: boolean;
  targetPercentage: number;
  requireApproval: boolean;
  duration: number | null;
};

/** @internal */
export const GetRollingReleaseStages$outboundSchema: z.ZodType<
  GetRollingReleaseStages$Outbound,
  z.ZodTypeDef,
  GetRollingReleaseStages
> = z.object({
  index: z.number(),
  isFinalStage: z.boolean(),
  targetPercentage: z.number(),
  requireApproval: z.boolean(),
  duration: z.nullable(z.number()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRollingReleaseStages$ {
  /** @deprecated use `GetRollingReleaseStages$inboundSchema` instead. */
  export const inboundSchema = GetRollingReleaseStages$inboundSchema;
  /** @deprecated use `GetRollingReleaseStages$outboundSchema` instead. */
  export const outboundSchema = GetRollingReleaseStages$outboundSchema;
  /** @deprecated use `GetRollingReleaseStages$Outbound` instead. */
  export type Outbound = GetRollingReleaseStages$Outbound;
}

export function getRollingReleaseStagesToJSON(
  getRollingReleaseStages: GetRollingReleaseStages,
): string {
  return JSON.stringify(
    GetRollingReleaseStages$outboundSchema.parse(getRollingReleaseStages),
  );
}

export function getRollingReleaseStagesFromJSON(
  jsonString: string,
): SafeParseResult<GetRollingReleaseStages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRollingReleaseStages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRollingReleaseStages' from JSON`,
  );
}

/** @internal */
export const ActiveStage$inboundSchema: z.ZodType<
  ActiveStage,
  z.ZodTypeDef,
  unknown
> = z.object({
  index: z.number(),
  isFinalStage: z.boolean(),
  targetPercentage: z.number(),
  requireApproval: z.boolean(),
  duration: z.nullable(z.number()),
});

/** @internal */
export type ActiveStage$Outbound = {
  index: number;
  isFinalStage: boolean;
  targetPercentage: number;
  requireApproval: boolean;
  duration: number | null;
};

/** @internal */
export const ActiveStage$outboundSchema: z.ZodType<
  ActiveStage$Outbound,
  z.ZodTypeDef,
  ActiveStage
> = z.object({
  index: z.number(),
  isFinalStage: z.boolean(),
  targetPercentage: z.number(),
  requireApproval: z.boolean(),
  duration: z.nullable(z.number()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActiveStage$ {
  /** @deprecated use `ActiveStage$inboundSchema` instead. */
  export const inboundSchema = ActiveStage$inboundSchema;
  /** @deprecated use `ActiveStage$outboundSchema` instead. */
  export const outboundSchema = ActiveStage$outboundSchema;
  /** @deprecated use `ActiveStage$Outbound` instead. */
  export type Outbound = ActiveStage$Outbound;
}

export function activeStageToJSON(activeStage: ActiveStage): string {
  return JSON.stringify(ActiveStage$outboundSchema.parse(activeStage));
}

export function activeStageFromJSON(
  jsonString: string,
): SafeParseResult<ActiveStage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActiveStage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActiveStage' from JSON`,
  );
}

/** @internal */
export const NextStage$inboundSchema: z.ZodType<
  NextStage,
  z.ZodTypeDef,
  unknown
> = z.object({
  index: z.number(),
  isFinalStage: z.boolean(),
  targetPercentage: z.number(),
  requireApproval: z.boolean(),
  duration: z.nullable(z.number()),
});

/** @internal */
export type NextStage$Outbound = {
  index: number;
  isFinalStage: boolean;
  targetPercentage: number;
  requireApproval: boolean;
  duration: number | null;
};

/** @internal */
export const NextStage$outboundSchema: z.ZodType<
  NextStage$Outbound,
  z.ZodTypeDef,
  NextStage
> = z.object({
  index: z.number(),
  isFinalStage: z.boolean(),
  targetPercentage: z.number(),
  requireApproval: z.boolean(),
  duration: z.nullable(z.number()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NextStage$ {
  /** @deprecated use `NextStage$inboundSchema` instead. */
  export const inboundSchema = NextStage$inboundSchema;
  /** @deprecated use `NextStage$outboundSchema` instead. */
  export const outboundSchema = NextStage$outboundSchema;
  /** @deprecated use `NextStage$Outbound` instead. */
  export type Outbound = NextStage$Outbound;
}

export function nextStageToJSON(nextStage: NextStage): string {
  return JSON.stringify(NextStage$outboundSchema.parse(nextStage));
}

export function nextStageFromJSON(
  jsonString: string,
): SafeParseResult<NextStage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NextStage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NextStage' from JSON`,
  );
}

/** @internal */
export const GetRollingReleaseRollingRelease$inboundSchema: z.ZodType<
  GetRollingReleaseRollingRelease,
  z.ZodTypeDef,
  unknown
> = z.object({
  state: GetRollingReleaseState$inboundSchema,
  currentDeployment: z.nullable(z.lazy(() => CurrentDeployment$inboundSchema)),
  canaryDeployment: z.nullable(z.lazy(() => CanaryDeployment$inboundSchema)),
  queuedDeploymentId: z.nullable(z.string()),
  advancementType: AdvancementType$inboundSchema,
  stages: z.array(z.lazy(() => GetRollingReleaseStages$inboundSchema)),
  activeStage: z.nullable(z.lazy(() => ActiveStage$inboundSchema)),
  nextStage: z.nullable(z.lazy(() => NextStage$inboundSchema)),
  startedAt: z.number(),
  updatedAt: z.number(),
});

/** @internal */
export type GetRollingReleaseRollingRelease$Outbound = {
  state: string;
  currentDeployment: CurrentDeployment$Outbound | null;
  canaryDeployment: CanaryDeployment$Outbound | null;
  queuedDeploymentId: string | null;
  advancementType: string;
  stages: Array<GetRollingReleaseStages$Outbound>;
  activeStage: ActiveStage$Outbound | null;
  nextStage: NextStage$Outbound | null;
  startedAt: number;
  updatedAt: number;
};

/** @internal */
export const GetRollingReleaseRollingRelease$outboundSchema: z.ZodType<
  GetRollingReleaseRollingRelease$Outbound,
  z.ZodTypeDef,
  GetRollingReleaseRollingRelease
> = z.object({
  state: GetRollingReleaseState$outboundSchema,
  currentDeployment: z.nullable(z.lazy(() => CurrentDeployment$outboundSchema)),
  canaryDeployment: z.nullable(z.lazy(() => CanaryDeployment$outboundSchema)),
  queuedDeploymentId: z.nullable(z.string()),
  advancementType: AdvancementType$outboundSchema,
  stages: z.array(z.lazy(() => GetRollingReleaseStages$outboundSchema)),
  activeStage: z.nullable(z.lazy(() => ActiveStage$outboundSchema)),
  nextStage: z.nullable(z.lazy(() => NextStage$outboundSchema)),
  startedAt: z.number(),
  updatedAt: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRollingReleaseRollingRelease$ {
  /** @deprecated use `GetRollingReleaseRollingRelease$inboundSchema` instead. */
  export const inboundSchema = GetRollingReleaseRollingRelease$inboundSchema;
  /** @deprecated use `GetRollingReleaseRollingRelease$outboundSchema` instead. */
  export const outboundSchema = GetRollingReleaseRollingRelease$outboundSchema;
  /** @deprecated use `GetRollingReleaseRollingRelease$Outbound` instead. */
  export type Outbound = GetRollingReleaseRollingRelease$Outbound;
}

export function getRollingReleaseRollingReleaseToJSON(
  getRollingReleaseRollingRelease: GetRollingReleaseRollingRelease,
): string {
  return JSON.stringify(
    GetRollingReleaseRollingRelease$outboundSchema.parse(
      getRollingReleaseRollingRelease,
    ),
  );
}

export function getRollingReleaseRollingReleaseFromJSON(
  jsonString: string,
): SafeParseResult<GetRollingReleaseRollingRelease, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRollingReleaseRollingRelease$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRollingReleaseRollingRelease' from JSON`,
  );
}

/** @internal */
export const GetRollingReleaseResponseBody$inboundSchema: z.ZodType<
  GetRollingReleaseResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  rollingRelease: z.nullable(
    z.lazy(() => GetRollingReleaseRollingRelease$inboundSchema),
  ),
});

/** @internal */
export type GetRollingReleaseResponseBody$Outbound = {
  rollingRelease: GetRollingReleaseRollingRelease$Outbound | null;
};

/** @internal */
export const GetRollingReleaseResponseBody$outboundSchema: z.ZodType<
  GetRollingReleaseResponseBody$Outbound,
  z.ZodTypeDef,
  GetRollingReleaseResponseBody
> = z.object({
  rollingRelease: z.nullable(
    z.lazy(() => GetRollingReleaseRollingRelease$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRollingReleaseResponseBody$ {
  /** @deprecated use `GetRollingReleaseResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetRollingReleaseResponseBody$inboundSchema;
  /** @deprecated use `GetRollingReleaseResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetRollingReleaseResponseBody$outboundSchema;
  /** @deprecated use `GetRollingReleaseResponseBody$Outbound` instead. */
  export type Outbound = GetRollingReleaseResponseBody$Outbound;
}

export function getRollingReleaseResponseBodyToJSON(
  getRollingReleaseResponseBody: GetRollingReleaseResponseBody,
): string {
  return JSON.stringify(
    GetRollingReleaseResponseBody$outboundSchema.parse(
      getRollingReleaseResponseBody,
    ),
  );
}

export function getRollingReleaseResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetRollingReleaseResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRollingReleaseResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRollingReleaseResponseBody' from JSON`,
  );
}
