/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetAccountInfoRequest = {
  integrationConfigurationId: string;
};

/**
 * The best contact for the integration, which can change as team members and their roles change.
 */
export type Contact = {
  email: string;
  name?: string | undefined;
};

export type GetAccountInfoResponseBody = {
  /**
   * The name of the team the installation is tied to.
   */
  name?: string | undefined;
  /**
   * A URL linking to the installation in the Vercel Dashboard.
   */
  url: string;
  /**
   * The best contact for the integration, which can change as team members and their roles change.
   */
  contact: Contact | null;
};

/** @internal */
export const GetAccountInfoRequest$inboundSchema: z.ZodType<
  GetAccountInfoRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  integrationConfigurationId: z.string(),
});

/** @internal */
export type GetAccountInfoRequest$Outbound = {
  integrationConfigurationId: string;
};

/** @internal */
export const GetAccountInfoRequest$outboundSchema: z.ZodType<
  GetAccountInfoRequest$Outbound,
  z.ZodTypeDef,
  GetAccountInfoRequest
> = z.object({
  integrationConfigurationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAccountInfoRequest$ {
  /** @deprecated use `GetAccountInfoRequest$inboundSchema` instead. */
  export const inboundSchema = GetAccountInfoRequest$inboundSchema;
  /** @deprecated use `GetAccountInfoRequest$outboundSchema` instead. */
  export const outboundSchema = GetAccountInfoRequest$outboundSchema;
  /** @deprecated use `GetAccountInfoRequest$Outbound` instead. */
  export type Outbound = GetAccountInfoRequest$Outbound;
}

export function getAccountInfoRequestToJSON(
  getAccountInfoRequest: GetAccountInfoRequest,
): string {
  return JSON.stringify(
    GetAccountInfoRequest$outboundSchema.parse(getAccountInfoRequest),
  );
}

export function getAccountInfoRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAccountInfoRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAccountInfoRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAccountInfoRequest' from JSON`,
  );
}

/** @internal */
export const Contact$inboundSchema: z.ZodType<Contact, z.ZodTypeDef, unknown> =
  z.object({
    email: z.string(),
    name: z.string().optional(),
  });

/** @internal */
export type Contact$Outbound = {
  email: string;
  name?: string | undefined;
};

/** @internal */
export const Contact$outboundSchema: z.ZodType<
  Contact$Outbound,
  z.ZodTypeDef,
  Contact
> = z.object({
  email: z.string(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Contact$ {
  /** @deprecated use `Contact$inboundSchema` instead. */
  export const inboundSchema = Contact$inboundSchema;
  /** @deprecated use `Contact$outboundSchema` instead. */
  export const outboundSchema = Contact$outboundSchema;
  /** @deprecated use `Contact$Outbound` instead. */
  export type Outbound = Contact$Outbound;
}

export function contactToJSON(contact: Contact): string {
  return JSON.stringify(Contact$outboundSchema.parse(contact));
}

export function contactFromJSON(
  jsonString: string,
): SafeParseResult<Contact, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Contact$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Contact' from JSON`,
  );
}

/** @internal */
export const GetAccountInfoResponseBody$inboundSchema: z.ZodType<
  GetAccountInfoResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  url: z.string(),
  contact: z.nullable(z.lazy(() => Contact$inboundSchema)),
});

/** @internal */
export type GetAccountInfoResponseBody$Outbound = {
  name?: string | undefined;
  url: string;
  contact: Contact$Outbound | null;
};

/** @internal */
export const GetAccountInfoResponseBody$outboundSchema: z.ZodType<
  GetAccountInfoResponseBody$Outbound,
  z.ZodTypeDef,
  GetAccountInfoResponseBody
> = z.object({
  name: z.string().optional(),
  url: z.string(),
  contact: z.nullable(z.lazy(() => Contact$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAccountInfoResponseBody$ {
  /** @deprecated use `GetAccountInfoResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetAccountInfoResponseBody$inboundSchema;
  /** @deprecated use `GetAccountInfoResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetAccountInfoResponseBody$outboundSchema;
  /** @deprecated use `GetAccountInfoResponseBody$Outbound` instead. */
  export type Outbound = GetAccountInfoResponseBody$Outbound;
}

export function getAccountInfoResponseBodyToJSON(
  getAccountInfoResponseBody: GetAccountInfoResponseBody,
): string {
  return JSON.stringify(
    GetAccountInfoResponseBody$outboundSchema.parse(getAccountInfoResponseBody),
  );
}

export function getAccountInfoResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetAccountInfoResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAccountInfoResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAccountInfoResponseBody' from JSON`,
  );
}
