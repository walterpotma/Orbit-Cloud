/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type EdgeConfigItemValue = string | number | boolean | {
  [k: string]: EdgeConfigItemValue | null;
} | Array<EdgeConfigItemValue | null>;

/** @internal */
export const EdgeConfigItemValue$inboundSchema: z.ZodType<
  EdgeConfigItemValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.record(z.nullable(z.lazy(() => EdgeConfigItemValue$inboundSchema))),
  z.array(z.nullable(z.lazy(() => EdgeConfigItemValue$inboundSchema))),
]);

/** @internal */
export type EdgeConfigItemValue$Outbound = string | number | boolean | {
  [k: string]: EdgeConfigItemValue$Outbound | null;
} | Array<EdgeConfigItemValue$Outbound | null>;

/** @internal */
export const EdgeConfigItemValue$outboundSchema: z.ZodType<
  EdgeConfigItemValue$Outbound,
  z.ZodTypeDef,
  EdgeConfigItemValue
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.record(z.nullable(z.lazy(() => EdgeConfigItemValue$outboundSchema))),
  z.array(z.nullable(z.lazy(() => EdgeConfigItemValue$outboundSchema))),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EdgeConfigItemValue$ {
  /** @deprecated use `EdgeConfigItemValue$inboundSchema` instead. */
  export const inboundSchema = EdgeConfigItemValue$inboundSchema;
  /** @deprecated use `EdgeConfigItemValue$outboundSchema` instead. */
  export const outboundSchema = EdgeConfigItemValue$outboundSchema;
  /** @deprecated use `EdgeConfigItemValue$Outbound` instead. */
  export type Outbound = EdgeConfigItemValue$Outbound;
}

export function edgeConfigItemValueToJSON(
  edgeConfigItemValue: EdgeConfigItemValue,
): string {
  return JSON.stringify(
    EdgeConfigItemValue$outboundSchema.parse(edgeConfigItemValue),
  );
}

export function edgeConfigItemValueFromJSON(
  jsonString: string,
): SafeParseResult<EdgeConfigItemValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EdgeConfigItemValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EdgeConfigItemValue' from JSON`,
  );
}
