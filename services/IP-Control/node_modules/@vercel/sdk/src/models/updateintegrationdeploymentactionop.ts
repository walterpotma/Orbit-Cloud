/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export const UpdateIntegrationDeploymentActionStatus = {
  Running: "running",
  Succeeded: "succeeded",
  Failed: "failed",
} as const;
export type UpdateIntegrationDeploymentActionStatus = ClosedEnum<
  typeof UpdateIntegrationDeploymentActionStatus
>;

export type Secrets = {
  name: string;
  value: string;
};

export type Outcomes1 = {
  kind: string;
  secrets: Array<Secrets>;
};

export type Outcomes = Outcomes1;

export type UpdateIntegrationDeploymentActionRequestBody = {
  status?: UpdateIntegrationDeploymentActionStatus | undefined;
  statusText?: string | undefined;
  statusUrl?: string | undefined;
  outcomes?: Array<Outcomes1> | undefined;
};

export type UpdateIntegrationDeploymentActionRequest = {
  deploymentId: string;
  integrationConfigurationId: string;
  resourceId: string;
  action: string;
  requestBody?: UpdateIntegrationDeploymentActionRequestBody | undefined;
};

/** @internal */
export const UpdateIntegrationDeploymentActionStatus$inboundSchema:
  z.ZodNativeEnum<typeof UpdateIntegrationDeploymentActionStatus> = z
    .nativeEnum(UpdateIntegrationDeploymentActionStatus);

/** @internal */
export const UpdateIntegrationDeploymentActionStatus$outboundSchema:
  z.ZodNativeEnum<typeof UpdateIntegrationDeploymentActionStatus> =
    UpdateIntegrationDeploymentActionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateIntegrationDeploymentActionStatus$ {
  /** @deprecated use `UpdateIntegrationDeploymentActionStatus$inboundSchema` instead. */
  export const inboundSchema =
    UpdateIntegrationDeploymentActionStatus$inboundSchema;
  /** @deprecated use `UpdateIntegrationDeploymentActionStatus$outboundSchema` instead. */
  export const outboundSchema =
    UpdateIntegrationDeploymentActionStatus$outboundSchema;
}

/** @internal */
export const Secrets$inboundSchema: z.ZodType<Secrets, z.ZodTypeDef, unknown> =
  z.object({
    name: z.string(),
    value: z.string(),
  });

/** @internal */
export type Secrets$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const Secrets$outboundSchema: z.ZodType<
  Secrets$Outbound,
  z.ZodTypeDef,
  Secrets
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Secrets$ {
  /** @deprecated use `Secrets$inboundSchema` instead. */
  export const inboundSchema = Secrets$inboundSchema;
  /** @deprecated use `Secrets$outboundSchema` instead. */
  export const outboundSchema = Secrets$outboundSchema;
  /** @deprecated use `Secrets$Outbound` instead. */
  export type Outbound = Secrets$Outbound;
}

export function secretsToJSON(secrets: Secrets): string {
  return JSON.stringify(Secrets$outboundSchema.parse(secrets));
}

export function secretsFromJSON(
  jsonString: string,
): SafeParseResult<Secrets, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Secrets$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Secrets' from JSON`,
  );
}

/** @internal */
export const Outcomes1$inboundSchema: z.ZodType<
  Outcomes1,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: z.string(),
  secrets: z.array(z.lazy(() => Secrets$inboundSchema)),
});

/** @internal */
export type Outcomes1$Outbound = {
  kind: string;
  secrets: Array<Secrets$Outbound>;
};

/** @internal */
export const Outcomes1$outboundSchema: z.ZodType<
  Outcomes1$Outbound,
  z.ZodTypeDef,
  Outcomes1
> = z.object({
  kind: z.string(),
  secrets: z.array(z.lazy(() => Secrets$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Outcomes1$ {
  /** @deprecated use `Outcomes1$inboundSchema` instead. */
  export const inboundSchema = Outcomes1$inboundSchema;
  /** @deprecated use `Outcomes1$outboundSchema` instead. */
  export const outboundSchema = Outcomes1$outboundSchema;
  /** @deprecated use `Outcomes1$Outbound` instead. */
  export type Outbound = Outcomes1$Outbound;
}

export function outcomes1ToJSON(outcomes1: Outcomes1): string {
  return JSON.stringify(Outcomes1$outboundSchema.parse(outcomes1));
}

export function outcomes1FromJSON(
  jsonString: string,
): SafeParseResult<Outcomes1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Outcomes1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Outcomes1' from JSON`,
  );
}

/** @internal */
export const Outcomes$inboundSchema: z.ZodType<
  Outcomes,
  z.ZodTypeDef,
  unknown
> = z.lazy(() => Outcomes1$inboundSchema);

/** @internal */
export type Outcomes$Outbound = Outcomes1$Outbound;

/** @internal */
export const Outcomes$outboundSchema: z.ZodType<
  Outcomes$Outbound,
  z.ZodTypeDef,
  Outcomes
> = z.lazy(() => Outcomes1$outboundSchema);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Outcomes$ {
  /** @deprecated use `Outcomes$inboundSchema` instead. */
  export const inboundSchema = Outcomes$inboundSchema;
  /** @deprecated use `Outcomes$outboundSchema` instead. */
  export const outboundSchema = Outcomes$outboundSchema;
  /** @deprecated use `Outcomes$Outbound` instead. */
  export type Outbound = Outcomes$Outbound;
}

export function outcomesToJSON(outcomes: Outcomes): string {
  return JSON.stringify(Outcomes$outboundSchema.parse(outcomes));
}

export function outcomesFromJSON(
  jsonString: string,
): SafeParseResult<Outcomes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Outcomes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Outcomes' from JSON`,
  );
}

/** @internal */
export const UpdateIntegrationDeploymentActionRequestBody$inboundSchema:
  z.ZodType<
    UpdateIntegrationDeploymentActionRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status: UpdateIntegrationDeploymentActionStatus$inboundSchema.optional(),
    statusText: z.string().optional(),
    statusUrl: z.string().optional(),
    outcomes: z.array(z.lazy(() => Outcomes1$inboundSchema)).optional(),
  });

/** @internal */
export type UpdateIntegrationDeploymentActionRequestBody$Outbound = {
  status?: string | undefined;
  statusText?: string | undefined;
  statusUrl?: string | undefined;
  outcomes?: Array<Outcomes1$Outbound> | undefined;
};

/** @internal */
export const UpdateIntegrationDeploymentActionRequestBody$outboundSchema:
  z.ZodType<
    UpdateIntegrationDeploymentActionRequestBody$Outbound,
    z.ZodTypeDef,
    UpdateIntegrationDeploymentActionRequestBody
  > = z.object({
    status: UpdateIntegrationDeploymentActionStatus$outboundSchema.optional(),
    statusText: z.string().optional(),
    statusUrl: z.string().optional(),
    outcomes: z.array(z.lazy(() => Outcomes1$outboundSchema)).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateIntegrationDeploymentActionRequestBody$ {
  /** @deprecated use `UpdateIntegrationDeploymentActionRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    UpdateIntegrationDeploymentActionRequestBody$inboundSchema;
  /** @deprecated use `UpdateIntegrationDeploymentActionRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateIntegrationDeploymentActionRequestBody$outboundSchema;
  /** @deprecated use `UpdateIntegrationDeploymentActionRequestBody$Outbound` instead. */
  export type Outbound = UpdateIntegrationDeploymentActionRequestBody$Outbound;
}

export function updateIntegrationDeploymentActionRequestBodyToJSON(
  updateIntegrationDeploymentActionRequestBody:
    UpdateIntegrationDeploymentActionRequestBody,
): string {
  return JSON.stringify(
    UpdateIntegrationDeploymentActionRequestBody$outboundSchema.parse(
      updateIntegrationDeploymentActionRequestBody,
    ),
  );
}

export function updateIntegrationDeploymentActionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateIntegrationDeploymentActionRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateIntegrationDeploymentActionRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateIntegrationDeploymentActionRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateIntegrationDeploymentActionRequest$inboundSchema: z.ZodType<
  UpdateIntegrationDeploymentActionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  deploymentId: z.string(),
  integrationConfigurationId: z.string(),
  resourceId: z.string(),
  action: z.string(),
  RequestBody: z.lazy(() =>
    UpdateIntegrationDeploymentActionRequestBody$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateIntegrationDeploymentActionRequest$Outbound = {
  deploymentId: string;
  integrationConfigurationId: string;
  resourceId: string;
  action: string;
  RequestBody?:
    | UpdateIntegrationDeploymentActionRequestBody$Outbound
    | undefined;
};

/** @internal */
export const UpdateIntegrationDeploymentActionRequest$outboundSchema: z.ZodType<
  UpdateIntegrationDeploymentActionRequest$Outbound,
  z.ZodTypeDef,
  UpdateIntegrationDeploymentActionRequest
> = z.object({
  deploymentId: z.string(),
  integrationConfigurationId: z.string(),
  resourceId: z.string(),
  action: z.string(),
  requestBody: z.lazy(() =>
    UpdateIntegrationDeploymentActionRequestBody$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateIntegrationDeploymentActionRequest$ {
  /** @deprecated use `UpdateIntegrationDeploymentActionRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateIntegrationDeploymentActionRequest$inboundSchema;
  /** @deprecated use `UpdateIntegrationDeploymentActionRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateIntegrationDeploymentActionRequest$outboundSchema;
  /** @deprecated use `UpdateIntegrationDeploymentActionRequest$Outbound` instead. */
  export type Outbound = UpdateIntegrationDeploymentActionRequest$Outbound;
}

export function updateIntegrationDeploymentActionRequestToJSON(
  updateIntegrationDeploymentActionRequest:
    UpdateIntegrationDeploymentActionRequest,
): string {
  return JSON.stringify(
    UpdateIntegrationDeploymentActionRequest$outboundSchema.parse(
      updateIntegrationDeploymentActionRequest,
    ),
  );
}

export function updateIntegrationDeploymentActionRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateIntegrationDeploymentActionRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateIntegrationDeploymentActionRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateIntegrationDeploymentActionRequest' from JSON`,
  );
}
