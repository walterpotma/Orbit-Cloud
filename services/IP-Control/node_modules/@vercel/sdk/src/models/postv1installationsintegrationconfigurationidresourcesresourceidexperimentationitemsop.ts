/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export const Category = {
  Experiment: "experiment",
  Flag: "flag",
} as const;
export type Category = ClosedEnum<typeof Category>;

export type PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsItems =
  {
    id: string;
    slug: string;
    origin: string;
    category?: Category | undefined;
    name?: string | undefined;
    description?: string | undefined;
    isArchived?: boolean | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
  };

export type PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequestBody =
  {
    items: Array<
      PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsItems
    >;
  };

export type PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequest =
  {
    integrationConfigurationId: string;
    resourceId: string;
    requestBody?:
      | PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequestBody
      | undefined;
  };

/** @internal */
export const Category$inboundSchema: z.ZodNativeEnum<typeof Category> = z
  .nativeEnum(Category);

/** @internal */
export const Category$outboundSchema: z.ZodNativeEnum<typeof Category> =
  Category$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Category$ {
  /** @deprecated use `Category$inboundSchema` instead. */
  export const inboundSchema = Category$inboundSchema;
  /** @deprecated use `Category$outboundSchema` instead. */
  export const outboundSchema = Category$outboundSchema;
}

/** @internal */
export const PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsItems$inboundSchema:
  z.ZodType<
    PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsItems,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string(),
    slug: z.string(),
    origin: z.string(),
    category: Category$inboundSchema.optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    isArchived: z.boolean().optional(),
    createdAt: z.number().optional(),
    updatedAt: z.number().optional(),
  });

/** @internal */
export type PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsItems$Outbound =
  {
    id: string;
    slug: string;
    origin: string;
    category?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
    isArchived?: boolean | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
  };

/** @internal */
export const PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsItems$outboundSchema:
  z.ZodType<
    PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsItems$Outbound,
    z.ZodTypeDef,
    PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsItems
  > = z.object({
    id: z.string(),
    slug: z.string(),
    origin: z.string(),
    category: Category$outboundSchema.optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    isArchived: z.boolean().optional(),
    createdAt: z.number().optional(),
    updatedAt: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsItems$ {
  /** @deprecated use `PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsItems$inboundSchema` instead. */
  export const inboundSchema =
    PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsItems$inboundSchema;
  /** @deprecated use `PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsItems$outboundSchema` instead. */
  export const outboundSchema =
    PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsItems$outboundSchema;
  /** @deprecated use `PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsItems$Outbound` instead. */
  export type Outbound =
    PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsItems$Outbound;
}

export function postV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsItemsToJSON(
  postV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsItems:
    PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsItems,
): string {
  return JSON.stringify(
    PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsItems$outboundSchema
      .parse(
        postV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsItems,
      ),
  );
}

export function postV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsItemsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsItems,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsItems$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsItems' from JSON`,
  );
}

/** @internal */
export const PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequestBody$inboundSchema:
  z.ZodType<
    PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    items: z.array(
      z.lazy(() =>
        PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsItems$inboundSchema
      ),
    ),
  });

/** @internal */
export type PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequestBody$Outbound =
  {
    items: Array<
      PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsItems$Outbound
    >;
  };

/** @internal */
export const PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequestBody$outboundSchema:
  z.ZodType<
    PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequestBody$Outbound,
    z.ZodTypeDef,
    PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequestBody
  > = z.object({
    items: z.array(
      z.lazy(() =>
        PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsItems$outboundSchema
      ),
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequestBody$ {
  /** @deprecated use `PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequestBody$inboundSchema;
  /** @deprecated use `PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequestBody$outboundSchema;
  /** @deprecated use `PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequestBody$Outbound` instead. */
  export type Outbound =
    PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequestBody$Outbound;
}

export function postV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequestBodyToJSON(
  postV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequestBody:
    PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequestBody,
): string {
  return JSON.stringify(
    PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequestBody$outboundSchema
      .parse(
        postV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequestBody,
      ),
  );
}

export function postV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequestBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequestBody' from JSON`,
  );
}

/** @internal */
export const PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequest$inboundSchema:
  z.ZodType<
    PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    integrationConfigurationId: z.string(),
    resourceId: z.string(),
    RequestBody: z.lazy(() =>
      PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequestBody$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequest$Outbound =
  {
    integrationConfigurationId: string;
    resourceId: string;
    RequestBody?:
      | PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequestBody$Outbound
      | undefined;
  };

/** @internal */
export const PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequest$outboundSchema:
  z.ZodType<
    PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequest$Outbound,
    z.ZodTypeDef,
    PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequest
  > = z.object({
    integrationConfigurationId: z.string(),
    resourceId: z.string(),
    requestBody: z.lazy(() =>
      PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequestBody$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequest$ {
  /** @deprecated use `PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequest$inboundSchema;
  /** @deprecated use `PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequest$outboundSchema;
  /** @deprecated use `PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequest$Outbound` instead. */
  export type Outbound =
    PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequest$Outbound;
}

export function postV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequestToJSON(
  postV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequest:
    PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequest,
): string {
  return JSON.stringify(
    PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequest$outboundSchema
      .parse(
        postV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequest,
      ),
  );
}

export function postV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsRequest' from JSON`,
  );
}
