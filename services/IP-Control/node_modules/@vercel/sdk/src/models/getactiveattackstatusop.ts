/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetActiveAttackStatusRequest = {
  projectId: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
};

export type AnomalyAlerts = {
  atMinute: string;
  zscore: number;
  totalRequestsMinute: number;
  avgRequests: number;
  stddevRequests: number;
};

export type DdosAlerts = {
  atMinute: string;
  totalReqs: number;
};

export type AffectedHostMap = {
  anomalyAlerts?: { [k: string]: AnomalyAlerts } | undefined;
  ddosAlerts?: { [k: string]: DdosAlerts } | undefined;
};

export type Anomalies = {
  ownerId: string;
  projectId: string;
  startTime: number;
  endTime: number | null;
  atMinute: number;
  state?: string | undefined;
  affectedHostMap: { [k: string]: AffectedHostMap };
};

export type GetActiveAttackStatusResponseBody2 = {
  anomalies: Array<Anomalies>;
};

export type GetActiveAttackStatusResponseBody1 = {};

export type GetActiveAttackStatusResponseBody =
  | GetActiveAttackStatusResponseBody2
  | GetActiveAttackStatusResponseBody1;

/** @internal */
export const GetActiveAttackStatusRequest$inboundSchema: z.ZodType<
  GetActiveAttackStatusRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectId: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/** @internal */
export type GetActiveAttackStatusRequest$Outbound = {
  projectId: string;
  teamId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const GetActiveAttackStatusRequest$outboundSchema: z.ZodType<
  GetActiveAttackStatusRequest$Outbound,
  z.ZodTypeDef,
  GetActiveAttackStatusRequest
> = z.object({
  projectId: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetActiveAttackStatusRequest$ {
  /** @deprecated use `GetActiveAttackStatusRequest$inboundSchema` instead. */
  export const inboundSchema = GetActiveAttackStatusRequest$inboundSchema;
  /** @deprecated use `GetActiveAttackStatusRequest$outboundSchema` instead. */
  export const outboundSchema = GetActiveAttackStatusRequest$outboundSchema;
  /** @deprecated use `GetActiveAttackStatusRequest$Outbound` instead. */
  export type Outbound = GetActiveAttackStatusRequest$Outbound;
}

export function getActiveAttackStatusRequestToJSON(
  getActiveAttackStatusRequest: GetActiveAttackStatusRequest,
): string {
  return JSON.stringify(
    GetActiveAttackStatusRequest$outboundSchema.parse(
      getActiveAttackStatusRequest,
    ),
  );
}

export function getActiveAttackStatusRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetActiveAttackStatusRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetActiveAttackStatusRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetActiveAttackStatusRequest' from JSON`,
  );
}

/** @internal */
export const AnomalyAlerts$inboundSchema: z.ZodType<
  AnomalyAlerts,
  z.ZodTypeDef,
  unknown
> = z.object({
  at_minute: z.string(),
  zscore: z.number(),
  total_requests_minute: z.number(),
  avg_requests: z.number(),
  stddev_requests: z.number(),
}).transform((v) => {
  return remap$(v, {
    "at_minute": "atMinute",
    "total_requests_minute": "totalRequestsMinute",
    "avg_requests": "avgRequests",
    "stddev_requests": "stddevRequests",
  });
});

/** @internal */
export type AnomalyAlerts$Outbound = {
  at_minute: string;
  zscore: number;
  total_requests_minute: number;
  avg_requests: number;
  stddev_requests: number;
};

/** @internal */
export const AnomalyAlerts$outboundSchema: z.ZodType<
  AnomalyAlerts$Outbound,
  z.ZodTypeDef,
  AnomalyAlerts
> = z.object({
  atMinute: z.string(),
  zscore: z.number(),
  totalRequestsMinute: z.number(),
  avgRequests: z.number(),
  stddevRequests: z.number(),
}).transform((v) => {
  return remap$(v, {
    atMinute: "at_minute",
    totalRequestsMinute: "total_requests_minute",
    avgRequests: "avg_requests",
    stddevRequests: "stddev_requests",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnomalyAlerts$ {
  /** @deprecated use `AnomalyAlerts$inboundSchema` instead. */
  export const inboundSchema = AnomalyAlerts$inboundSchema;
  /** @deprecated use `AnomalyAlerts$outboundSchema` instead. */
  export const outboundSchema = AnomalyAlerts$outboundSchema;
  /** @deprecated use `AnomalyAlerts$Outbound` instead. */
  export type Outbound = AnomalyAlerts$Outbound;
}

export function anomalyAlertsToJSON(anomalyAlerts: AnomalyAlerts): string {
  return JSON.stringify(AnomalyAlerts$outboundSchema.parse(anomalyAlerts));
}

export function anomalyAlertsFromJSON(
  jsonString: string,
): SafeParseResult<AnomalyAlerts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnomalyAlerts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnomalyAlerts' from JSON`,
  );
}

/** @internal */
export const DdosAlerts$inboundSchema: z.ZodType<
  DdosAlerts,
  z.ZodTypeDef,
  unknown
> = z.object({
  atMinute: z.string(),
  totalReqs: z.number(),
});

/** @internal */
export type DdosAlerts$Outbound = {
  atMinute: string;
  totalReqs: number;
};

/** @internal */
export const DdosAlerts$outboundSchema: z.ZodType<
  DdosAlerts$Outbound,
  z.ZodTypeDef,
  DdosAlerts
> = z.object({
  atMinute: z.string(),
  totalReqs: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DdosAlerts$ {
  /** @deprecated use `DdosAlerts$inboundSchema` instead. */
  export const inboundSchema = DdosAlerts$inboundSchema;
  /** @deprecated use `DdosAlerts$outboundSchema` instead. */
  export const outboundSchema = DdosAlerts$outboundSchema;
  /** @deprecated use `DdosAlerts$Outbound` instead. */
  export type Outbound = DdosAlerts$Outbound;
}

export function ddosAlertsToJSON(ddosAlerts: DdosAlerts): string {
  return JSON.stringify(DdosAlerts$outboundSchema.parse(ddosAlerts));
}

export function ddosAlertsFromJSON(
  jsonString: string,
): SafeParseResult<DdosAlerts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DdosAlerts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DdosAlerts' from JSON`,
  );
}

/** @internal */
export const AffectedHostMap$inboundSchema: z.ZodType<
  AffectedHostMap,
  z.ZodTypeDef,
  unknown
> = z.object({
  anomalyAlerts: z.record(z.lazy(() => AnomalyAlerts$inboundSchema)).optional(),
  ddosAlerts: z.record(z.lazy(() => DdosAlerts$inboundSchema)).optional(),
});

/** @internal */
export type AffectedHostMap$Outbound = {
  anomalyAlerts?: { [k: string]: AnomalyAlerts$Outbound } | undefined;
  ddosAlerts?: { [k: string]: DdosAlerts$Outbound } | undefined;
};

/** @internal */
export const AffectedHostMap$outboundSchema: z.ZodType<
  AffectedHostMap$Outbound,
  z.ZodTypeDef,
  AffectedHostMap
> = z.object({
  anomalyAlerts: z.record(z.lazy(() => AnomalyAlerts$outboundSchema))
    .optional(),
  ddosAlerts: z.record(z.lazy(() => DdosAlerts$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AffectedHostMap$ {
  /** @deprecated use `AffectedHostMap$inboundSchema` instead. */
  export const inboundSchema = AffectedHostMap$inboundSchema;
  /** @deprecated use `AffectedHostMap$outboundSchema` instead. */
  export const outboundSchema = AffectedHostMap$outboundSchema;
  /** @deprecated use `AffectedHostMap$Outbound` instead. */
  export type Outbound = AffectedHostMap$Outbound;
}

export function affectedHostMapToJSON(
  affectedHostMap: AffectedHostMap,
): string {
  return JSON.stringify(AffectedHostMap$outboundSchema.parse(affectedHostMap));
}

export function affectedHostMapFromJSON(
  jsonString: string,
): SafeParseResult<AffectedHostMap, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AffectedHostMap$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AffectedHostMap' from JSON`,
  );
}

/** @internal */
export const Anomalies$inboundSchema: z.ZodType<
  Anomalies,
  z.ZodTypeDef,
  unknown
> = z.object({
  ownerId: z.string(),
  projectId: z.string(),
  startTime: z.number(),
  endTime: z.nullable(z.number()),
  atMinute: z.number(),
  state: z.string().optional(),
  affectedHostMap: z.record(z.lazy(() => AffectedHostMap$inboundSchema)),
});

/** @internal */
export type Anomalies$Outbound = {
  ownerId: string;
  projectId: string;
  startTime: number;
  endTime: number | null;
  atMinute: number;
  state?: string | undefined;
  affectedHostMap: { [k: string]: AffectedHostMap$Outbound };
};

/** @internal */
export const Anomalies$outboundSchema: z.ZodType<
  Anomalies$Outbound,
  z.ZodTypeDef,
  Anomalies
> = z.object({
  ownerId: z.string(),
  projectId: z.string(),
  startTime: z.number(),
  endTime: z.nullable(z.number()),
  atMinute: z.number(),
  state: z.string().optional(),
  affectedHostMap: z.record(z.lazy(() => AffectedHostMap$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Anomalies$ {
  /** @deprecated use `Anomalies$inboundSchema` instead. */
  export const inboundSchema = Anomalies$inboundSchema;
  /** @deprecated use `Anomalies$outboundSchema` instead. */
  export const outboundSchema = Anomalies$outboundSchema;
  /** @deprecated use `Anomalies$Outbound` instead. */
  export type Outbound = Anomalies$Outbound;
}

export function anomaliesToJSON(anomalies: Anomalies): string {
  return JSON.stringify(Anomalies$outboundSchema.parse(anomalies));
}

export function anomaliesFromJSON(
  jsonString: string,
): SafeParseResult<Anomalies, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Anomalies$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Anomalies' from JSON`,
  );
}

/** @internal */
export const GetActiveAttackStatusResponseBody2$inboundSchema: z.ZodType<
  GetActiveAttackStatusResponseBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  anomalies: z.array(z.lazy(() => Anomalies$inboundSchema)),
});

/** @internal */
export type GetActiveAttackStatusResponseBody2$Outbound = {
  anomalies: Array<Anomalies$Outbound>;
};

/** @internal */
export const GetActiveAttackStatusResponseBody2$outboundSchema: z.ZodType<
  GetActiveAttackStatusResponseBody2$Outbound,
  z.ZodTypeDef,
  GetActiveAttackStatusResponseBody2
> = z.object({
  anomalies: z.array(z.lazy(() => Anomalies$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetActiveAttackStatusResponseBody2$ {
  /** @deprecated use `GetActiveAttackStatusResponseBody2$inboundSchema` instead. */
  export const inboundSchema = GetActiveAttackStatusResponseBody2$inboundSchema;
  /** @deprecated use `GetActiveAttackStatusResponseBody2$outboundSchema` instead. */
  export const outboundSchema =
    GetActiveAttackStatusResponseBody2$outboundSchema;
  /** @deprecated use `GetActiveAttackStatusResponseBody2$Outbound` instead. */
  export type Outbound = GetActiveAttackStatusResponseBody2$Outbound;
}

export function getActiveAttackStatusResponseBody2ToJSON(
  getActiveAttackStatusResponseBody2: GetActiveAttackStatusResponseBody2,
): string {
  return JSON.stringify(
    GetActiveAttackStatusResponseBody2$outboundSchema.parse(
      getActiveAttackStatusResponseBody2,
    ),
  );
}

export function getActiveAttackStatusResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<GetActiveAttackStatusResponseBody2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetActiveAttackStatusResponseBody2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetActiveAttackStatusResponseBody2' from JSON`,
  );
}

/** @internal */
export const GetActiveAttackStatusResponseBody1$inboundSchema: z.ZodType<
  GetActiveAttackStatusResponseBody1,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetActiveAttackStatusResponseBody1$Outbound = {};

/** @internal */
export const GetActiveAttackStatusResponseBody1$outboundSchema: z.ZodType<
  GetActiveAttackStatusResponseBody1$Outbound,
  z.ZodTypeDef,
  GetActiveAttackStatusResponseBody1
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetActiveAttackStatusResponseBody1$ {
  /** @deprecated use `GetActiveAttackStatusResponseBody1$inboundSchema` instead. */
  export const inboundSchema = GetActiveAttackStatusResponseBody1$inboundSchema;
  /** @deprecated use `GetActiveAttackStatusResponseBody1$outboundSchema` instead. */
  export const outboundSchema =
    GetActiveAttackStatusResponseBody1$outboundSchema;
  /** @deprecated use `GetActiveAttackStatusResponseBody1$Outbound` instead. */
  export type Outbound = GetActiveAttackStatusResponseBody1$Outbound;
}

export function getActiveAttackStatusResponseBody1ToJSON(
  getActiveAttackStatusResponseBody1: GetActiveAttackStatusResponseBody1,
): string {
  return JSON.stringify(
    GetActiveAttackStatusResponseBody1$outboundSchema.parse(
      getActiveAttackStatusResponseBody1,
    ),
  );
}

export function getActiveAttackStatusResponseBody1FromJSON(
  jsonString: string,
): SafeParseResult<GetActiveAttackStatusResponseBody1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetActiveAttackStatusResponseBody1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetActiveAttackStatusResponseBody1' from JSON`,
  );
}

/** @internal */
export const GetActiveAttackStatusResponseBody$inboundSchema: z.ZodType<
  GetActiveAttackStatusResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetActiveAttackStatusResponseBody2$inboundSchema),
  z.lazy(() => GetActiveAttackStatusResponseBody1$inboundSchema),
]);

/** @internal */
export type GetActiveAttackStatusResponseBody$Outbound =
  | GetActiveAttackStatusResponseBody2$Outbound
  | GetActiveAttackStatusResponseBody1$Outbound;

/** @internal */
export const GetActiveAttackStatusResponseBody$outboundSchema: z.ZodType<
  GetActiveAttackStatusResponseBody$Outbound,
  z.ZodTypeDef,
  GetActiveAttackStatusResponseBody
> = z.union([
  z.lazy(() => GetActiveAttackStatusResponseBody2$outboundSchema),
  z.lazy(() => GetActiveAttackStatusResponseBody1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetActiveAttackStatusResponseBody$ {
  /** @deprecated use `GetActiveAttackStatusResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetActiveAttackStatusResponseBody$inboundSchema;
  /** @deprecated use `GetActiveAttackStatusResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetActiveAttackStatusResponseBody$outboundSchema;
  /** @deprecated use `GetActiveAttackStatusResponseBody$Outbound` instead. */
  export type Outbound = GetActiveAttackStatusResponseBody$Outbound;
}

export function getActiveAttackStatusResponseBodyToJSON(
  getActiveAttackStatusResponseBody: GetActiveAttackStatusResponseBody,
): string {
  return JSON.stringify(
    GetActiveAttackStatusResponseBody$outboundSchema.parse(
      getActiveAttackStatusResponseBody,
    ),
  );
}

export function getActiveAttackStatusResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetActiveAttackStatusResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetActiveAttackStatusResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetActiveAttackStatusResponseBody' from JSON`,
  );
}
