/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type MoveProjectDomainRequestBody = {
  /**
   * The unique target project identifier
   */
  projectId: string;
};

export type MoveProjectDomainRequest = {
  /**
   * The unique project identifier or the project name
   */
  idOrName: string;
  /**
   * The project domain name
   */
  domain: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
  requestBody?: MoveProjectDomainRequestBody | undefined;
};

/**
 * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
 */
export type MoveProjectDomainVerification = {
  type: string;
  domain: string;
  value: string;
  reason: string;
};

/**
 * The domain was updated successfuly
 */
export type MoveProjectDomainResponseBody = {
  name: string;
  apexName: string;
  projectId: string;
  redirect?: string | null | undefined;
  redirectStatusCode?: number | null | undefined;
  gitBranch?: string | null | undefined;
  customEnvironmentId?: string | null | undefined;
  updatedAt?: number | undefined;
  createdAt?: number | undefined;
  /**
   * `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.
   */
  verified: boolean;
  /**
   * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
   */
  verification?: Array<MoveProjectDomainVerification> | undefined;
};

/** @internal */
export const MoveProjectDomainRequestBody$inboundSchema: z.ZodType<
  MoveProjectDomainRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectId: z.string(),
});

/** @internal */
export type MoveProjectDomainRequestBody$Outbound = {
  projectId: string;
};

/** @internal */
export const MoveProjectDomainRequestBody$outboundSchema: z.ZodType<
  MoveProjectDomainRequestBody$Outbound,
  z.ZodTypeDef,
  MoveProjectDomainRequestBody
> = z.object({
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MoveProjectDomainRequestBody$ {
  /** @deprecated use `MoveProjectDomainRequestBody$inboundSchema` instead. */
  export const inboundSchema = MoveProjectDomainRequestBody$inboundSchema;
  /** @deprecated use `MoveProjectDomainRequestBody$outboundSchema` instead. */
  export const outboundSchema = MoveProjectDomainRequestBody$outboundSchema;
  /** @deprecated use `MoveProjectDomainRequestBody$Outbound` instead. */
  export type Outbound = MoveProjectDomainRequestBody$Outbound;
}

export function moveProjectDomainRequestBodyToJSON(
  moveProjectDomainRequestBody: MoveProjectDomainRequestBody,
): string {
  return JSON.stringify(
    MoveProjectDomainRequestBody$outboundSchema.parse(
      moveProjectDomainRequestBody,
    ),
  );
}

export function moveProjectDomainRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<MoveProjectDomainRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MoveProjectDomainRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MoveProjectDomainRequestBody' from JSON`,
  );
}

/** @internal */
export const MoveProjectDomainRequest$inboundSchema: z.ZodType<
  MoveProjectDomainRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  idOrName: z.string(),
  domain: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  RequestBody: z.lazy(() => MoveProjectDomainRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type MoveProjectDomainRequest$Outbound = {
  idOrName: string;
  domain: string;
  teamId?: string | undefined;
  slug?: string | undefined;
  RequestBody?: MoveProjectDomainRequestBody$Outbound | undefined;
};

/** @internal */
export const MoveProjectDomainRequest$outboundSchema: z.ZodType<
  MoveProjectDomainRequest$Outbound,
  z.ZodTypeDef,
  MoveProjectDomainRequest
> = z.object({
  idOrName: z.string(),
  domain: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  requestBody: z.lazy(() => MoveProjectDomainRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MoveProjectDomainRequest$ {
  /** @deprecated use `MoveProjectDomainRequest$inboundSchema` instead. */
  export const inboundSchema = MoveProjectDomainRequest$inboundSchema;
  /** @deprecated use `MoveProjectDomainRequest$outboundSchema` instead. */
  export const outboundSchema = MoveProjectDomainRequest$outboundSchema;
  /** @deprecated use `MoveProjectDomainRequest$Outbound` instead. */
  export type Outbound = MoveProjectDomainRequest$Outbound;
}

export function moveProjectDomainRequestToJSON(
  moveProjectDomainRequest: MoveProjectDomainRequest,
): string {
  return JSON.stringify(
    MoveProjectDomainRequest$outboundSchema.parse(moveProjectDomainRequest),
  );
}

export function moveProjectDomainRequestFromJSON(
  jsonString: string,
): SafeParseResult<MoveProjectDomainRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MoveProjectDomainRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MoveProjectDomainRequest' from JSON`,
  );
}

/** @internal */
export const MoveProjectDomainVerification$inboundSchema: z.ZodType<
  MoveProjectDomainVerification,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  domain: z.string(),
  value: z.string(),
  reason: z.string(),
});

/** @internal */
export type MoveProjectDomainVerification$Outbound = {
  type: string;
  domain: string;
  value: string;
  reason: string;
};

/** @internal */
export const MoveProjectDomainVerification$outboundSchema: z.ZodType<
  MoveProjectDomainVerification$Outbound,
  z.ZodTypeDef,
  MoveProjectDomainVerification
> = z.object({
  type: z.string(),
  domain: z.string(),
  value: z.string(),
  reason: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MoveProjectDomainVerification$ {
  /** @deprecated use `MoveProjectDomainVerification$inboundSchema` instead. */
  export const inboundSchema = MoveProjectDomainVerification$inboundSchema;
  /** @deprecated use `MoveProjectDomainVerification$outboundSchema` instead. */
  export const outboundSchema = MoveProjectDomainVerification$outboundSchema;
  /** @deprecated use `MoveProjectDomainVerification$Outbound` instead. */
  export type Outbound = MoveProjectDomainVerification$Outbound;
}

export function moveProjectDomainVerificationToJSON(
  moveProjectDomainVerification: MoveProjectDomainVerification,
): string {
  return JSON.stringify(
    MoveProjectDomainVerification$outboundSchema.parse(
      moveProjectDomainVerification,
    ),
  );
}

export function moveProjectDomainVerificationFromJSON(
  jsonString: string,
): SafeParseResult<MoveProjectDomainVerification, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MoveProjectDomainVerification$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MoveProjectDomainVerification' from JSON`,
  );
}

/** @internal */
export const MoveProjectDomainResponseBody$inboundSchema: z.ZodType<
  MoveProjectDomainResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  apexName: z.string(),
  projectId: z.string(),
  redirect: z.nullable(z.string()).optional(),
  redirectStatusCode: z.nullable(z.number()).optional(),
  gitBranch: z.nullable(z.string()).optional(),
  customEnvironmentId: z.nullable(z.string()).optional(),
  updatedAt: z.number().optional(),
  createdAt: z.number().optional(),
  verified: z.boolean(),
  verification: z.array(
    z.lazy(() => MoveProjectDomainVerification$inboundSchema),
  ).optional(),
});

/** @internal */
export type MoveProjectDomainResponseBody$Outbound = {
  name: string;
  apexName: string;
  projectId: string;
  redirect?: string | null | undefined;
  redirectStatusCode?: number | null | undefined;
  gitBranch?: string | null | undefined;
  customEnvironmentId?: string | null | undefined;
  updatedAt?: number | undefined;
  createdAt?: number | undefined;
  verified: boolean;
  verification?: Array<MoveProjectDomainVerification$Outbound> | undefined;
};

/** @internal */
export const MoveProjectDomainResponseBody$outboundSchema: z.ZodType<
  MoveProjectDomainResponseBody$Outbound,
  z.ZodTypeDef,
  MoveProjectDomainResponseBody
> = z.object({
  name: z.string(),
  apexName: z.string(),
  projectId: z.string(),
  redirect: z.nullable(z.string()).optional(),
  redirectStatusCode: z.nullable(z.number()).optional(),
  gitBranch: z.nullable(z.string()).optional(),
  customEnvironmentId: z.nullable(z.string()).optional(),
  updatedAt: z.number().optional(),
  createdAt: z.number().optional(),
  verified: z.boolean(),
  verification: z.array(
    z.lazy(() => MoveProjectDomainVerification$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MoveProjectDomainResponseBody$ {
  /** @deprecated use `MoveProjectDomainResponseBody$inboundSchema` instead. */
  export const inboundSchema = MoveProjectDomainResponseBody$inboundSchema;
  /** @deprecated use `MoveProjectDomainResponseBody$outboundSchema` instead. */
  export const outboundSchema = MoveProjectDomainResponseBody$outboundSchema;
  /** @deprecated use `MoveProjectDomainResponseBody$Outbound` instead. */
  export type Outbound = MoveProjectDomainResponseBody$Outbound;
}

export function moveProjectDomainResponseBodyToJSON(
  moveProjectDomainResponseBody: MoveProjectDomainResponseBody,
): string {
  return JSON.stringify(
    MoveProjectDomainResponseBody$outboundSchema.parse(
      moveProjectDomainResponseBody,
    ),
  );
}

export function moveProjectDomainResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<MoveProjectDomainResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MoveProjectDomainResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MoveProjectDomainResponseBody' from JSON`,
  );
}
