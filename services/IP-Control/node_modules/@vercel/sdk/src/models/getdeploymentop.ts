/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  FlagJSONValue,
  FlagJSONValue$inboundSchema,
  FlagJSONValue$Outbound,
  FlagJSONValue$outboundSchema,
} from "./flagjsonvalue.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetDeploymentRequest = {
  /**
   * The unique identifier or hostname of the deployment.
   */
  idOrUrl: string;
  /**
   * Whether to add in gitRepo information.
   */
  withGitRepoInfo?: string | undefined;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
};

export type GetDeploymentResponseBodyCreator = {
  uid: string;
  username?: string | undefined;
  avatar?: string | undefined;
};

export const GetDeploymentResponseBodyDeploymentsReadyState = {
  Building: "BUILDING",
  Error: "ERROR",
  Initializing: "INITIALIZING",
  Ready: "READY",
} as const;
export type GetDeploymentResponseBodyDeploymentsReadyState = ClosedEnum<
  typeof GetDeploymentResponseBodyDeploymentsReadyState
>;

export type GetDeploymentResponseBodyOutput = {
  path: string;
  functionName: string;
};

/**
 * A partial representation of a Build used by the deployment endpoint.
 */
export type ResponseBodyLambdas = {
  id: string;
  createdAt?: number | undefined;
  readyState?: GetDeploymentResponseBodyDeploymentsReadyState | undefined;
  entrypoint?: string | null | undefined;
  readyStateAt?: number | undefined;
  output: Array<GetDeploymentResponseBodyOutput>;
};

export const GetDeploymentResponseBodyStatus = {
  Queued: "QUEUED",
  Building: "BUILDING",
  Error: "ERROR",
  Initializing: "INITIALIZING",
  Ready: "READY",
  Canceled: "CANCELED",
} as const;
export type GetDeploymentResponseBodyStatus = ClosedEnum<
  typeof GetDeploymentResponseBodyStatus
>;

export type ResponseBodyTeam = {
  id: string;
  name: string;
  slug: string;
  avatar?: string | undefined;
};

export type GetDeploymentCustomEnvironment2 = {
  id: string;
};

/**
 * The type of environment (production, preview, or development)
 */
export const GetDeploymentCustomEnvironmentType = {
  Production: "production",
  Preview: "preview",
  Development: "development",
} as const;
/**
 * The type of environment (production, preview, or development)
 */
export type GetDeploymentCustomEnvironmentType = ClosedEnum<
  typeof GetDeploymentCustomEnvironmentType
>;

/**
 * The type of matching to perform
 */
export const GetDeploymentCustomEnvironmentDeploymentsResponseType = {
  EndsWith: "endsWith",
  StartsWith: "startsWith",
  Equals: "equals",
} as const;
/**
 * The type of matching to perform
 */
export type GetDeploymentCustomEnvironmentDeploymentsResponseType = ClosedEnum<
  typeof GetDeploymentCustomEnvironmentDeploymentsResponseType
>;

/**
 * Configuration for matching git branches to this environment
 */
export type GetDeploymentCustomEnvironmentBranchMatcher = {
  /**
   * The type of matching to perform
   */
  type: GetDeploymentCustomEnvironmentDeploymentsResponseType;
  /**
   * The pattern to match against branch names
   */
  pattern: string;
};

/**
 * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
 */
export type GetDeploymentCustomEnvironmentVerification = {
  type: string;
  domain: string;
  value: string;
  reason: string;
};

/**
 * List of domains associated with this environment
 */
export type GetDeploymentCustomEnvironmentDomains = {
  name: string;
  apexName: string;
  projectId: string;
  redirect?: string | null | undefined;
  redirectStatusCode?: number | null | undefined;
  gitBranch?: string | null | undefined;
  customEnvironmentId?: string | null | undefined;
  updatedAt?: number | undefined;
  createdAt?: number | undefined;
  /**
   * `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.
   */
  verified: boolean;
  /**
   * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
   */
  verification?: Array<GetDeploymentCustomEnvironmentVerification> | undefined;
};

/**
 * Internal representation of a custom environment with all required properties
 */
export type GetDeploymentCustomEnvironment1 = {
  /**
   * Unique identifier for the custom environment (format: env_*)
   */
  id: string;
  /**
   * URL-friendly name of the environment
   */
  slug: string;
  /**
   * The type of environment (production, preview, or development)
   */
  type: GetDeploymentCustomEnvironmentType;
  /**
   * Optional description of the environment's purpose
   */
  description?: string | undefined;
  /**
   * Configuration for matching git branches to this environment
   */
  branchMatcher?: GetDeploymentCustomEnvironmentBranchMatcher | undefined;
  /**
   * List of domains associated with this environment
   */
  domains?: Array<GetDeploymentCustomEnvironmentDomains> | undefined;
  /**
   * List of aliases for the current deployment
   */
  currentDeploymentAliases?: Array<string> | undefined;
  /**
   * Timestamp when the environment was created
   */
  createdAt: number;
  /**
   * Timestamp when the environment was last updated
   */
  updatedAt: number;
};

export type ResponseBodyCustomEnvironment =
  | GetDeploymentCustomEnvironment1
  | GetDeploymentCustomEnvironment2;

export const ResponseBodyOomReport = {
  OutOfMemory: "out-of-memory",
} as const;
export type ResponseBodyOomReport = ClosedEnum<typeof ResponseBodyOomReport>;

export type ResponseBodyAliasWarning = {
  code: string;
  message: string;
  link?: string | undefined;
  action?: string | undefined;
};

export const GetDeploymentResponseBodyReadyState = {
  Queued: "QUEUED",
  Building: "BUILDING",
  Error: "ERROR",
  Initializing: "INITIALIZING",
  Ready: "READY",
  Canceled: "CANCELED",
} as const;
export type GetDeploymentResponseBodyReadyState = ClosedEnum<
  typeof GetDeploymentResponseBodyReadyState
>;

export const GetDeploymentResponseBodyDeploymentsType = {
  Lambdas: "LAMBDAS",
} as const;
export type GetDeploymentResponseBodyDeploymentsType = ClosedEnum<
  typeof GetDeploymentResponseBodyDeploymentsType
>;

export type GetDeploymentResponseBodyAliasError = {
  code: string;
  message: string;
};

export const GetDeploymentResponseBodyChecksState = {
  Registered: "registered",
  Running: "running",
  Completed: "completed",
} as const;
export type GetDeploymentResponseBodyChecksState = ClosedEnum<
  typeof GetDeploymentResponseBodyChecksState
>;

export const GetDeploymentResponseBodyChecksConclusion = {
  Succeeded: "succeeded",
  Failed: "failed",
  Skipped: "skipped",
  Canceled: "canceled",
} as const;
export type GetDeploymentResponseBodyChecksConclusion = ClosedEnum<
  typeof GetDeploymentResponseBodyChecksConclusion
>;

export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody215Type =
  {
    Bitbucket: "bitbucket",
  } as const;
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody215Type =
  ClosedEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody215Type
  >;

export type GetDeploymentGitSource15 = {
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody215Type;
  ref: string;
  sha: string;
  owner?: string | undefined;
  slug?: string | undefined;
  workspaceUuid: string;
  repoUuid: string;
};

export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody214Type =
  {
    Gitlab: "gitlab",
  } as const;
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody214Type =
  ClosedEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody214Type
  >;

export type GetDeploymentGitSource14 = {
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody214Type;
  ref: string;
  sha: string;
  projectId: number;
};

export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody213Type =
  {
    GithubLimited: "github-limited",
  } as const;
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody213Type =
  ClosedEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody213Type
  >;

export type GetDeploymentGitSource13 = {
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody213Type;
  ref: string;
  sha: string;
  repoId: number;
  org?: string | undefined;
  repo?: string | undefined;
};

export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type =
  {
    GithubCustomHost: "github-custom-host",
  } as const;
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type =
  ClosedEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type
  >;

export type GetDeploymentGitSource12 = {
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type;
  host: string;
  ref: string;
  sha: string;
  repoId: number;
  org?: string | undefined;
  repo?: string | undefined;
};

export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type =
  {
    Github: "github",
  } as const;
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type =
  ClosedEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type
  >;

export type GetDeploymentGitSource11 = {
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type;
  ref: string;
  sha: string;
  repoId: number;
  org?: string | undefined;
  repo?: string | undefined;
};

export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type =
  {
    Custom: "custom",
  } as const;
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type =
  ClosedEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type
  >;

/**
 * Allows custom git sources (local folder mounted to the container) in test mode
 */
export type GetDeploymentGitSource10 = {
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type;
  ref: string;
  sha: string;
  gitUrl: string;
};

export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type =
  {
    Bitbucket: "bitbucket",
  } as const;
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type =
  ClosedEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type
  >;

export type GetDeploymentGitSource9 = {
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type;
  owner: string;
  slug: string;
  ref?: string | null | undefined;
  sha?: string | undefined;
  prId?: number | null | undefined;
};

export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type =
  {
    Bitbucket: "bitbucket",
  } as const;
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type =
  ClosedEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type
  >;

export type GetDeploymentGitSource8 = {
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type;
  workspaceUuid?: string | undefined;
  repoUuid: string;
  ref?: string | null | undefined;
  sha?: string | undefined;
  prId?: number | null | undefined;
};

export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type =
  {
    Gitlab: "gitlab",
  } as const;
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type =
  ClosedEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type
  >;

export type GetDeploymentGitSourceDeploymentsProjectId = string | number;

export type GetDeploymentGitSource7 = {
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type;
  projectId: string | number;
  ref?: string | null | undefined;
  sha?: string | undefined;
  prId?: number | null | undefined;
};

export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type =
  {
    GithubLimited: "github-limited",
  } as const;
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type =
  ClosedEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type
  >;

export type GetDeploymentGitSource6 = {
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type;
  org: string;
  repo: string;
  ref?: string | null | undefined;
  sha?: string | undefined;
  prId?: number | null | undefined;
};

export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type =
  {
    GithubLimited: "github-limited",
  } as const;
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type =
  ClosedEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type
  >;

export type GetDeploymentGitSourceDeploymentsResponse200RepoId =
  | string
  | number;

export type GetDeploymentGitSource5 = {
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type;
  repoId: string | number;
  ref?: string | null | undefined;
  sha?: string | undefined;
  prId?: number | null | undefined;
};

export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type =
  {
    GithubCustomHost: "github-custom-host",
  } as const;
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type =
  ClosedEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type
  >;

export type GetDeploymentGitSource4 = {
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type;
  host: string;
  org: string;
  repo: string;
  ref?: string | null | undefined;
  sha?: string | undefined;
  prId?: number | null | undefined;
};

export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type =
  {
    GithubCustomHost: "github-custom-host",
  } as const;
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type =
  ClosedEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type
  >;

export type GetDeploymentGitSourceDeploymentsResponseRepoId = string | number;

export type GetDeploymentGitSource3 = {
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type;
  host: string;
  repoId: string | number;
  ref?: string | null | undefined;
  sha?: string | undefined;
  prId?: number | null | undefined;
};

export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type =
  {
    Github: "github",
  } as const;
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type =
  ClosedEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type
  >;

export type GetDeploymentGitSource2 = {
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type;
  org: string;
  repo: string;
  ref?: string | null | undefined;
  sha?: string | undefined;
  prId?: number | null | undefined;
};

export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type =
  {
    Github: "github",
  } as const;
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type =
  ClosedEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type
  >;

export type GetDeploymentGitSourceDeploymentsRepoId = string | number;

export type GetDeploymentGitSource1 = {
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type;
  repoId: string | number;
  ref?: string | null | undefined;
  sha?: string | undefined;
  prId?: number | null | undefined;
};

export type ResponseBodyGitSource =
  | GetDeploymentGitSource12
  | GetDeploymentGitSource15
  | GetDeploymentGitSource4
  | GetDeploymentGitSource10
  | GetDeploymentGitSource11
  | GetDeploymentGitSource13
  | GetDeploymentGitSource14
  | GetDeploymentGitSource2
  | GetDeploymentGitSource3
  | GetDeploymentGitSource6
  | GetDeploymentGitSource9
  | GetDeploymentGitSource1
  | GetDeploymentGitSource5
  | GetDeploymentGitSource7
  | GetDeploymentGitSource8;

/**
 * If set it overrides the `projectSettings.nodeVersion` for this deployment.
 */
export const GetDeploymentResponseBodyNodeVersion = {
  TwentyTwoDotX: "22.x",
  TwentyDotX: "20.x",
  EighteenDotX: "18.x",
  SixteenDotX: "16.x",
  FourteenDotX: "14.x",
  TwelveDotX: "12.x",
  TenDotX: "10.x",
  EightDot10DotX: "8.10.x",
} as const;
/**
 * If set it overrides the `projectSettings.nodeVersion` for this deployment.
 */
export type GetDeploymentResponseBodyNodeVersion = ClosedEnum<
  typeof GetDeploymentResponseBodyNodeVersion
>;

export type GetDeploymentResponseBodyProject = {
  id: string;
  name: string;
  framework?: string | null | undefined;
};

/**
 * Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - ROLLING: in the process of having production traffic gradually transitioned. - PROMOTED: has seen production traffic
 */
export const GetDeploymentResponseBodyReadySubstate = {
  Staged: "STAGED",
  Rolling: "ROLLING",
  Promoted: "PROMOTED",
} as const;
/**
 * Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - ROLLING: in the process of having production traffic gradually transitioned. - PROMOTED: has seen production traffic
 */
export type GetDeploymentResponseBodyReadySubstate = ClosedEnum<
  typeof GetDeploymentResponseBodyReadySubstate
>;

export const GetDeploymentResponseBodySource = {
  ApiTriggerGitDeploy: "api-trigger-git-deploy",
  Cli: "cli",
  CloneRepo: "clone/repo",
  Git: "git",
  Import: "import",
  ImportRepo: "import/repo",
  Redeploy: "redeploy",
  V0Web: "v0-web",
} as const;
export type GetDeploymentResponseBodySource = ClosedEnum<
  typeof GetDeploymentResponseBodySource
>;

export const GetDeploymentResponseBodyTarget = {
  Staging: "staging",
  Production: "production",
} as const;
export type GetDeploymentResponseBodyTarget = ClosedEnum<
  typeof GetDeploymentResponseBodyTarget
>;

export type GetDeploymentResponseBodyOidcTokenClaims = {
  iss: string;
  sub: string;
  scope: string;
  aud: string;
  owner: string;
  ownerId: string;
  project: string;
  projectId: string;
  environment: string;
};

/**
 * The deployment including only public information
 */
export type GetDeploymentResponseBody2 = {
  alias?: Array<string> | undefined;
  aliasAssigned: boolean;
  bootedAt: number;
  buildingAt: number;
  /**
   * Since April 2025 it necessary for On-Demand Concurrency Minutes calculation
   */
  buildContainerFinishedAt?: number | undefined;
  buildSkipped: boolean;
  creator: GetDeploymentResponseBodyCreator;
  initReadyAt?: number | undefined;
  isFirstBranchDeployment?: boolean | undefined;
  lambdas?: Array<ResponseBodyLambdas> | undefined;
  public: boolean;
  ready?: number | undefined;
  status: GetDeploymentResponseBodyStatus;
  team?: ResponseBodyTeam | undefined;
  userAliases?: Array<string> | undefined;
  previewCommentsEnabled?: boolean | undefined;
  ttyBuildLogs?: boolean | undefined;
  customEnvironment?:
    | GetDeploymentCustomEnvironment1
    | GetDeploymentCustomEnvironment2
    | undefined;
  oomReport?: ResponseBodyOomReport | undefined;
  aliasWarning?: ResponseBodyAliasWarning | null | undefined;
  id: string;
  createdAt: number;
  readyState: GetDeploymentResponseBodyReadyState;
  name: string;
  type: GetDeploymentResponseBodyDeploymentsType;
  aliasError?: GetDeploymentResponseBodyAliasError | null | undefined;
  aliasFinal?: string | null | undefined;
  /**
   * applies to custom domains only, defaults to `true`
   */
  autoAssignCustomDomains?: boolean | undefined;
  automaticAliases?: Array<string> | undefined;
  buildErrorAt?: number | undefined;
  checksState?: GetDeploymentResponseBodyChecksState | undefined;
  checksConclusion?: GetDeploymentResponseBodyChecksConclusion | undefined;
  deletedAt?: number | null | undefined;
  /**
   * Computed field that is only available for deployments with a microfrontend configuration.
   */
  defaultRoute?: string | undefined;
  canceledAt?: number | undefined;
  errorCode?: string | undefined;
  errorLink?: string | undefined;
  errorMessage?: string | null | undefined;
  errorStep?: string | undefined;
  /**
   * Since November 2023 this field defines a set of regions that we will deploy the lambda to passively Lambdas will be deployed to these regions but only invoked if all of the primary `regions` are marked as out of service
   */
  passiveRegions?: Array<string> | undefined;
  gitSource?:
    | GetDeploymentGitSource12
    | GetDeploymentGitSource15
    | GetDeploymentGitSource4
    | GetDeploymentGitSource10
    | GetDeploymentGitSource11
    | GetDeploymentGitSource13
    | GetDeploymentGitSource14
    | GetDeploymentGitSource2
    | GetDeploymentGitSource3
    | GetDeploymentGitSource6
    | GetDeploymentGitSource9
    | GetDeploymentGitSource1
    | GetDeploymentGitSource5
    | GetDeploymentGitSource7
    | GetDeploymentGitSource8
    | undefined;
  meta: { [k: string]: string };
  originCacheRegion?: string | undefined;
  /**
   * If set it overrides the `projectSettings.nodeVersion` for this deployment.
   */
  nodeVersion?: GetDeploymentResponseBodyNodeVersion | undefined;
  project?: GetDeploymentResponseBodyProject | undefined;
  /**
   * Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - ROLLING: in the process of having production traffic gradually transitioned. - PROMOTED: has seen production traffic
   */
  readySubstate?: GetDeploymentResponseBodyReadySubstate | undefined;
  regions: Array<string>;
  softDeletedByRetention?: boolean | undefined;
  source?: GetDeploymentResponseBodySource | undefined;
  target?: GetDeploymentResponseBodyTarget | null | undefined;
  undeletedAt?: number | undefined;
  url: string;
  version: number;
  oidcTokenClaims?: GetDeploymentResponseBodyOidcTokenClaims | undefined;
};

export type ResponseBodyAliasAssignedAt = number | boolean;

export type ResponseBodyBuild = {
  env: Array<string>;
};

export type ResponseBodyBuilds = {
  use: string;
  src?: string | undefined;
  config?: { [k: string]: any } | undefined;
};

export const ResponseBodyFramework = {
  Blitzjs: "blitzjs",
  Nextjs: "nextjs",
  Gatsby: "gatsby",
  Remix: "remix",
  ReactRouter: "react-router",
  Astro: "astro",
  Hexo: "hexo",
  Eleventy: "eleventy",
  Docusaurus2: "docusaurus-2",
  Docusaurus: "docusaurus",
  Preact: "preact",
  Solidstart1: "solidstart-1",
  Solidstart: "solidstart",
  Dojo: "dojo",
  Ember: "ember",
  Vue: "vue",
  Scully: "scully",
  IonicAngular: "ionic-angular",
  Angular: "angular",
  Polymer: "polymer",
  Svelte: "svelte",
  Sveltekit: "sveltekit",
  Sveltekit1: "sveltekit-1",
  IonicReact: "ionic-react",
  CreateReactApp: "create-react-app",
  Gridsome: "gridsome",
  Umijs: "umijs",
  Sapper: "sapper",
  Saber: "saber",
  Stencil: "stencil",
  Nuxtjs: "nuxtjs",
  Redwoodjs: "redwoodjs",
  Hugo: "hugo",
  Jekyll: "jekyll",
  Brunch: "brunch",
  Middleman: "middleman",
  Zola: "zola",
  Hydrogen: "hydrogen",
  Vite: "vite",
  Vitepress: "vitepress",
  Vuepress: "vuepress",
  Parcel: "parcel",
  Fastapi: "fastapi",
  Fasthtml: "fasthtml",
  SanityV3: "sanity-v3",
  Sanity: "sanity",
  Storybook: "storybook",
  Nitro: "nitro",
  Hono: "hono",
  Express: "express",
  Xmcp: "xmcp",
} as const;
export type ResponseBodyFramework = ClosedEnum<typeof ResponseBodyFramework>;

export type ResponseBodySpeedInsights = {
  id: string;
  enabledAt?: number | undefined;
  disabledAt?: number | undefined;
  canceledAt?: number | undefined;
  hasData?: boolean | undefined;
  paidAt?: number | undefined;
};

export type ResponseBodyWebAnalytics = {
  id: string;
  disabledAt?: number | undefined;
  canceledAt?: number | undefined;
  enabledAt?: number | undefined;
  hasData?: boolean | undefined;
};

export type ResponseBodyProjectSettings = {
  buildCommand?: string | null | undefined;
  devCommand?: string | null | undefined;
  framework?: ResponseBodyFramework | null | undefined;
  commandForIgnoringBuildStep?: string | null | undefined;
  installCommand?: string | null | undefined;
  outputDirectory?: string | null | undefined;
  speedInsights?: ResponseBodySpeedInsights | undefined;
  webAnalytics?: ResponseBodyWebAnalytics | undefined;
};

export const GetDeploymentResponseBodyDeploymentsStatus = {
  Skipped: "skipped",
  Pending: "pending",
  Ready: "ready",
  Error: "error",
  Timeout: "timeout",
} as const;
export type GetDeploymentResponseBodyDeploymentsStatus = ClosedEnum<
  typeof GetDeploymentResponseBodyDeploymentsStatus
>;

export type ResponseBodyIntegrations = {
  status: GetDeploymentResponseBodyDeploymentsStatus;
  startedAt: number;
  completedAt?: number | undefined;
  skippedAt?: number | undefined;
  skippedBy?: string | undefined;
};

/**
 * Must be `http` or `https`.
 */
export const ResponseBodyProtocol = {
  Http: "http",
  Https: "https",
} as const;
/**
 * Must be `http` or `https`.
 */
export type ResponseBodyProtocol = ClosedEnum<typeof ResponseBodyProtocol>;

export type ResponseBodyRemotePatterns = {
  /**
   * Must be `http` or `https`.
   */
  protocol?: ResponseBodyProtocol | undefined;
  /**
   * Can be literal or wildcard. Single `*` matches a single subdomain. Double `**` matches any number of subdomains.
   */
  hostname: string;
  /**
   * Can be literal port such as `8080` or empty string meaning no port.
   */
  port?: string | undefined;
  /**
   * Can be literal or wildcard. Single `*` matches a single path segment. Double `**` matches any number of path segments.
   */
  pathname?: string | undefined;
  /**
   * Can be literal query string such as `?v=1` or empty string meaning no query string.
   */
  search?: string | undefined;
};

export type ResponseBodyLocalPatterns = {
  /**
   * Can be literal or wildcard. Single `*` matches a single path segment. Double `**` matches any number of path segments.
   */
  pathname?: string | undefined;
  /**
   * Can be literal query string such as `?v=1` or empty string meaning no query string.
   */
  search?: string | undefined;
};

export const ResponseBodyFormats = {
  ImageAvif: "image/avif",
  ImageWebp: "image/webp",
} as const;
export type ResponseBodyFormats = ClosedEnum<typeof ResponseBodyFormats>;

export const ResponseBodyContentDispositionType = {
  Inline: "inline",
  Attachment: "attachment",
} as const;
export type ResponseBodyContentDispositionType = ClosedEnum<
  typeof ResponseBodyContentDispositionType
>;

export type ResponseBodyImages = {
  sizes?: Array<number> | undefined;
  qualities?: Array<number> | undefined;
  domains?: Array<string> | undefined;
  remotePatterns?: Array<ResponseBodyRemotePatterns> | undefined;
  localPatterns?: Array<ResponseBodyLocalPatterns> | undefined;
  minimumCacheTTL?: number | undefined;
  formats?: Array<ResponseBodyFormats> | undefined;
  dangerouslyAllowSVG?: boolean | undefined;
  contentSecurityPolicy?: string | undefined;
  contentDispositionType?: ResponseBodyContentDispositionType | undefined;
};

export type ResponseBodyCreator = {
  uid: string;
  username?: string | undefined;
  avatar?: string | undefined;
};

export const GetDeploymentResponseBodyDeploymentsResponseReadyState = {
  Building: "BUILDING",
  Error: "ERROR",
  Initializing: "INITIALIZING",
  Ready: "READY",
} as const;
export type GetDeploymentResponseBodyDeploymentsResponseReadyState = ClosedEnum<
  typeof GetDeploymentResponseBodyDeploymentsResponseReadyState
>;

export type ResponseBodyOutput = {
  path: string;
  functionName: string;
};

/**
 * A partial representation of a Build used by the deployment endpoint.
 */
export type GetDeploymentResponseBodyLambdas = {
  id: string;
  createdAt?: number | undefined;
  readyState?:
    | GetDeploymentResponseBodyDeploymentsResponseReadyState
    | undefined;
  entrypoint?: string | null | undefined;
  readyStateAt?: number | undefined;
  output: Array<ResponseBodyOutput>;
};

export const ResponseBodyStatus = {
  Queued: "QUEUED",
  Building: "BUILDING",
  Error: "ERROR",
  Initializing: "INITIALIZING",
  Ready: "READY",
  Canceled: "CANCELED",
} as const;
export type ResponseBodyStatus = ClosedEnum<typeof ResponseBodyStatus>;

export type GetDeploymentResponseBodyTeam = {
  id: string;
  name: string;
  slug: string;
  avatar?: string | undefined;
};

export type GetDeploymentCustomEnvironmentDeployments2 = {
  id: string;
};

/**
 * The type of environment (production, preview, or development)
 */
export const GetDeploymentCustomEnvironmentDeploymentsType = {
  Production: "production",
  Preview: "preview",
  Development: "development",
} as const;
/**
 * The type of environment (production, preview, or development)
 */
export type GetDeploymentCustomEnvironmentDeploymentsType = ClosedEnum<
  typeof GetDeploymentCustomEnvironmentDeploymentsType
>;

/**
 * The type of matching to perform
 */
export const GetDeploymentCustomEnvironmentDeploymentsResponse200Type = {
  EndsWith: "endsWith",
  StartsWith: "startsWith",
  Equals: "equals",
} as const;
/**
 * The type of matching to perform
 */
export type GetDeploymentCustomEnvironmentDeploymentsResponse200Type =
  ClosedEnum<typeof GetDeploymentCustomEnvironmentDeploymentsResponse200Type>;

/**
 * Configuration for matching git branches to this environment
 */
export type GetDeploymentCustomEnvironmentDeploymentsBranchMatcher = {
  /**
   * The type of matching to perform
   */
  type: GetDeploymentCustomEnvironmentDeploymentsResponse200Type;
  /**
   * The pattern to match against branch names
   */
  pattern: string;
};

/**
 * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
 */
export type GetDeploymentCustomEnvironmentDeploymentsVerification = {
  type: string;
  domain: string;
  value: string;
  reason: string;
};

/**
 * List of domains associated with this environment
 */
export type GetDeploymentCustomEnvironmentDeploymentsDomains = {
  name: string;
  apexName: string;
  projectId: string;
  redirect?: string | null | undefined;
  redirectStatusCode?: number | null | undefined;
  gitBranch?: string | null | undefined;
  customEnvironmentId?: string | null | undefined;
  updatedAt?: number | undefined;
  createdAt?: number | undefined;
  /**
   * `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.
   */
  verified: boolean;
  /**
   * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
   */
  verification?:
    | Array<GetDeploymentCustomEnvironmentDeploymentsVerification>
    | undefined;
};

/**
 * Internal representation of a custom environment with all required properties
 */
export type GetDeploymentCustomEnvironmentDeployments1 = {
  /**
   * Unique identifier for the custom environment (format: env_*)
   */
  id: string;
  /**
   * URL-friendly name of the environment
   */
  slug: string;
  /**
   * The type of environment (production, preview, or development)
   */
  type: GetDeploymentCustomEnvironmentDeploymentsType;
  /**
   * Optional description of the environment's purpose
   */
  description?: string | undefined;
  /**
   * Configuration for matching git branches to this environment
   */
  branchMatcher?:
    | GetDeploymentCustomEnvironmentDeploymentsBranchMatcher
    | undefined;
  /**
   * List of domains associated with this environment
   */
  domains?: Array<GetDeploymentCustomEnvironmentDeploymentsDomains> | undefined;
  /**
   * List of aliases for the current deployment
   */
  currentDeploymentAliases?: Array<string> | undefined;
  /**
   * Timestamp when the environment was created
   */
  createdAt: number;
  /**
   * Timestamp when the environment was last updated
   */
  updatedAt: number;
};

export type GetDeploymentResponseBodyCustomEnvironment =
  | GetDeploymentCustomEnvironmentDeployments1
  | GetDeploymentCustomEnvironmentDeployments2;

export const GetDeploymentResponseBodyOomReport = {
  OutOfMemory: "out-of-memory",
} as const;
export type GetDeploymentResponseBodyOomReport = ClosedEnum<
  typeof GetDeploymentResponseBodyOomReport
>;

export type GetDeploymentResponseBodyAliasWarning = {
  code: string;
  message: string;
  link?: string | undefined;
  action?: string | undefined;
};

export const ResponseBodyReadyState = {
  Queued: "QUEUED",
  Building: "BUILDING",
  Error: "ERROR",
  Initializing: "INITIALIZING",
  Ready: "READY",
  Canceled: "CANCELED",
} as const;
export type ResponseBodyReadyState = ClosedEnum<typeof ResponseBodyReadyState>;

export const GetDeploymentResponseBodyType = {
  Lambdas: "LAMBDAS",
} as const;
export type GetDeploymentResponseBodyType = ClosedEnum<
  typeof GetDeploymentResponseBodyType
>;

export type ResponseBodyAliasError = {
  code: string;
  message: string;
};

export const ResponseBodyChecksState = {
  Registered: "registered",
  Running: "running",
  Completed: "completed",
} as const;
export type ResponseBodyChecksState = ClosedEnum<
  typeof ResponseBodyChecksState
>;

export const ResponseBodyChecksConclusion = {
  Succeeded: "succeeded",
  Failed: "failed",
  Skipped: "skipped",
  Canceled: "canceled",
} as const;
export type ResponseBodyChecksConclusion = ClosedEnum<
  typeof ResponseBodyChecksConclusion
>;

export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody115Type =
  {
    Bitbucket: "bitbucket",
  } as const;
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody115Type =
  ClosedEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody115Type
  >;

export type GetDeploymentGitSourceDeployments15 = {
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody115Type;
  ref: string;
  sha: string;
  owner?: string | undefined;
  slug?: string | undefined;
  workspaceUuid: string;
  repoUuid: string;
};

export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody114Type =
  {
    Gitlab: "gitlab",
  } as const;
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody114Type =
  ClosedEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody114Type
  >;

export type GetDeploymentGitSourceDeployments14 = {
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody114Type;
  ref: string;
  sha: string;
  projectId: number;
};

export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody113Type =
  {
    GithubLimited: "github-limited",
  } as const;
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody113Type =
  ClosedEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody113Type
  >;

export type GetDeploymentGitSourceDeployments13 = {
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody113Type;
  ref: string;
  sha: string;
  repoId: number;
  org?: string | undefined;
  repo?: string | undefined;
};

export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type =
  {
    GithubCustomHost: "github-custom-host",
  } as const;
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type =
  ClosedEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type
  >;

export type GetDeploymentGitSourceDeployments12 = {
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type;
  host: string;
  ref: string;
  sha: string;
  repoId: number;
  org?: string | undefined;
  repo?: string | undefined;
};

export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type =
  {
    Github: "github",
  } as const;
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type =
  ClosedEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type
  >;

export type GetDeploymentGitSourceDeployments11 = {
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type;
  ref: string;
  sha: string;
  repoId: number;
  org?: string | undefined;
  repo?: string | undefined;
};

export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type =
  {
    Custom: "custom",
  } as const;
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type =
  ClosedEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type
  >;

/**
 * Allows custom git sources (local folder mounted to the container) in test mode
 */
export type GetDeploymentGitSourceDeployments10 = {
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type;
  ref: string;
  sha: string;
  gitUrl: string;
};

export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type =
  {
    Bitbucket: "bitbucket",
  } as const;
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type =
  ClosedEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type
  >;

export type GetDeploymentGitSourceDeployments9 = {
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type;
  owner: string;
  slug: string;
  ref?: string | null | undefined;
  sha?: string | undefined;
  prId?: number | null | undefined;
};

export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type =
  {
    Bitbucket: "bitbucket",
  } as const;
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type =
  ClosedEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type
  >;

export type GetDeploymentGitSourceDeployments8 = {
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type;
  workspaceUuid?: string | undefined;
  repoUuid: string;
  ref?: string | null | undefined;
  sha?: string | undefined;
  prId?: number | null | undefined;
};

export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType =
  {
    Gitlab: "gitlab",
  } as const;
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType
  >;

export type GetDeploymentGitSourceProjectId = string | number;

export type GetDeploymentGitSourceDeployments7 = {
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType;
  projectId: string | number;
  ref?: string | null | undefined;
  sha?: string | undefined;
  prId?: number | null | undefined;
};

export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType = {
  GithubLimited: "github-limited",
} as const;
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType =
  ClosedEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType
  >;

export type GetDeploymentGitSourceDeployments6 = {
  type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType;
  org: string;
  repo: string;
  ref?: string | null | undefined;
  sha?: string | undefined;
  prId?: number | null | undefined;
};

export const GetDeploymentGitSourceDeploymentsResponse200Type = {
  GithubLimited: "github-limited",
} as const;
export type GetDeploymentGitSourceDeploymentsResponse200Type = ClosedEnum<
  typeof GetDeploymentGitSourceDeploymentsResponse200Type
>;

export type GetDeploymentGitSourceRepoId = string | number;

export type GetDeploymentGitSourceDeployments5 = {
  type: GetDeploymentGitSourceDeploymentsResponse200Type;
  repoId: string | number;
  ref?: string | null | undefined;
  sha?: string | undefined;
  prId?: number | null | undefined;
};

export const GetDeploymentGitSourceDeploymentsResponseType = {
  GithubCustomHost: "github-custom-host",
} as const;
export type GetDeploymentGitSourceDeploymentsResponseType = ClosedEnum<
  typeof GetDeploymentGitSourceDeploymentsResponseType
>;

export type GetDeploymentGitSourceDeployments4 = {
  type: GetDeploymentGitSourceDeploymentsResponseType;
  host: string;
  org: string;
  repo: string;
  ref?: string | null | undefined;
  sha?: string | undefined;
  prId?: number | null | undefined;
};

export const GetDeploymentGitSourceDeploymentsType = {
  GithubCustomHost: "github-custom-host",
} as const;
export type GetDeploymentGitSourceDeploymentsType = ClosedEnum<
  typeof GetDeploymentGitSourceDeploymentsType
>;

export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId =
  | string
  | number;

export type GetDeploymentGitSourceDeployments3 = {
  type: GetDeploymentGitSourceDeploymentsType;
  host: string;
  repoId: string | number;
  ref?: string | null | undefined;
  sha?: string | undefined;
  prId?: number | null | undefined;
};

export const GetDeploymentGitSourceType = {
  Github: "github",
} as const;
export type GetDeploymentGitSourceType = ClosedEnum<
  typeof GetDeploymentGitSourceType
>;

export type GetDeploymentGitSourceDeployments2 = {
  type: GetDeploymentGitSourceType;
  org: string;
  repo: string;
  ref?: string | null | undefined;
  sha?: string | undefined;
  prId?: number | null | undefined;
};

export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type =
  {
    Github: "github",
  } as const;
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type =
  ClosedEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type
  >;

export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId =
  | string
  | number;

export type GetDeploymentGitSourceDeployments1 = {
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type;
  repoId: string | number;
  ref?: string | null | undefined;
  sha?: string | undefined;
  prId?: number | null | undefined;
};

export type GetDeploymentResponseBodyGitSource =
  | GetDeploymentGitSourceDeployments12
  | GetDeploymentGitSourceDeployments15
  | GetDeploymentGitSourceDeployments4
  | GetDeploymentGitSourceDeployments10
  | GetDeploymentGitSourceDeployments11
  | GetDeploymentGitSourceDeployments13
  | GetDeploymentGitSourceDeployments14
  | GetDeploymentGitSourceDeployments2
  | GetDeploymentGitSourceDeployments3
  | GetDeploymentGitSourceDeployments6
  | GetDeploymentGitSourceDeployments9
  | GetDeploymentGitSourceDeployments1
  | GetDeploymentGitSourceDeployments5
  | GetDeploymentGitSourceDeployments7
  | GetDeploymentGitSourceDeployments8;

/**
 * If set it overrides the `projectSettings.nodeVersion` for this deployment.
 */
export const ResponseBodyNodeVersion = {
  TwentyTwoDotX: "22.x",
  TwentyDotX: "20.x",
  EighteenDotX: "18.x",
  SixteenDotX: "16.x",
  FourteenDotX: "14.x",
  TwelveDotX: "12.x",
  TenDotX: "10.x",
  EightDot10DotX: "8.10.x",
} as const;
/**
 * If set it overrides the `projectSettings.nodeVersion` for this deployment.
 */
export type ResponseBodyNodeVersion = ClosedEnum<
  typeof ResponseBodyNodeVersion
>;

export type ResponseBodyProject = {
  id: string;
  name: string;
  framework?: string | null | undefined;
};

/**
 * Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - ROLLING: in the process of having production traffic gradually transitioned. - PROMOTED: has seen production traffic
 */
export const ResponseBodyReadySubstate = {
  Staged: "STAGED",
  Rolling: "ROLLING",
  Promoted: "PROMOTED",
} as const;
/**
 * Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - ROLLING: in the process of having production traffic gradually transitioned. - PROMOTED: has seen production traffic
 */
export type ResponseBodyReadySubstate = ClosedEnum<
  typeof ResponseBodyReadySubstate
>;

export const ResponseBodySource = {
  ApiTriggerGitDeploy: "api-trigger-git-deploy",
  Cli: "cli",
  CloneRepo: "clone/repo",
  Git: "git",
  Import: "import",
  ImportRepo: "import/repo",
  Redeploy: "redeploy",
  V0Web: "v0-web",
} as const;
export type ResponseBodySource = ClosedEnum<typeof ResponseBodySource>;

export const ResponseBodyTarget = {
  Staging: "staging",
  Production: "production",
} as const;
export type ResponseBodyTarget = ClosedEnum<typeof ResponseBodyTarget>;

export type ResponseBodyOidcTokenClaims = {
  iss: string;
  sub: string;
  scope: string;
  aud: string;
  owner: string;
  ownerId: string;
  project: string;
  projectId: string;
  environment: string;
};

export const ResponseBodyPlan = {
  Pro: "pro",
  Enterprise: "enterprise",
  Hobby: "hobby",
} as const;
export type ResponseBodyPlan = ClosedEnum<typeof ResponseBodyPlan>;

export type ResponseBodyCrons = {
  schedule: string;
  path: string;
};

export const ResponseBodyArchitecture = {
  X8664: "x86_64",
  Arm64: "arm64",
} as const;
export type ResponseBodyArchitecture = ClosedEnum<
  typeof ResponseBodyArchitecture
>;

/**
 * Event type - must be "queue/v1beta" (REQUIRED)
 */
export const GetDeploymentResponseBodyDeploymentsResponseType = {
  QueueV1beta: "queue/v1beta",
} as const;
/**
 * Event type - must be "queue/v1beta" (REQUIRED)
 */
export type GetDeploymentResponseBodyDeploymentsResponseType = ClosedEnum<
  typeof GetDeploymentResponseBodyDeploymentsResponseType
>;

/**
 * Queue trigger event for Vercel's queue system. Handles "queue/v1beta" events with queue-specific configuration.
 */
export type ResponseBodyExperimentalTriggers = {
  /**
   * Event type - must be "queue/v1beta" (REQUIRED)
   */
  type: GetDeploymentResponseBodyDeploymentsResponseType;
  /**
   * Name of the queue topic to consume from (REQUIRED)
   */
  topic: string;
  /**
   * Name of the consumer group for this trigger (REQUIRED)
   */
  consumer: string;
  /**
   * Maximum number of delivery attempts for message processing (OPTIONAL) This represents the total number of times a message can be delivered, not the number of retries. Must be at least 1 if specified. Behavior when not specified depends on the server's default configuration.
   */
  maxDeliveries?: number | undefined;
  /**
   * Delay in seconds before retrying failed executions (OPTIONAL) Behavior when not specified depends on the server's default configuration.
   */
  retryAfterSeconds?: number | undefined;
  /**
   * Initial delay in seconds before first execution attempt (OPTIONAL) Must be 0 or greater. Use 0 for no initial delay. Behavior when not specified depends on the server's default configuration.
   */
  initialDelaySeconds?: number | undefined;
};

export type ResponseBodyFunctions = {
  architecture?: ResponseBodyArchitecture | undefined;
  memory?: number | undefined;
  maxDuration?: number | undefined;
  runtime?: string | undefined;
  includeFiles?: string | undefined;
  excludeFiles?: string | undefined;
  experimentalTriggers?: Array<ResponseBodyExperimentalTriggers> | undefined;
  supportsCancellation?: boolean | undefined;
};

export type GetDeploymentRoutes3 = {
  src: string;
  continue: boolean;
  middleware: number;
};

export const GetDeploymentRoutesHandle = {
  Error: "error",
  Filesystem: "filesystem",
  Hit: "hit",
  Miss: "miss",
  Rewrite: "rewrite",
  Resource: "resource",
} as const;
export type GetDeploymentRoutesHandle = ClosedEnum<
  typeof GetDeploymentRoutesHandle
>;

export type GetDeploymentRoutes2 = {
  handle: GetDeploymentRoutesHandle;
  src?: string | undefined;
  dest?: string | undefined;
  status?: number | undefined;
};

export const GetDeploymentHasDeploymentsType = {
  Header: "header",
  Cookie: "cookie",
  Query: "query",
} as const;
export type GetDeploymentHasDeploymentsType = ClosedEnum<
  typeof GetDeploymentHasDeploymentsType
>;

export type GetDeploymentValueDeploymentsResponse200Eq = string | number;

export type GetDeploymentValue2 = {
  eq?: string | number | undefined;
  neq?: string | undefined;
  inc?: Array<string> | undefined;
  ninc?: Array<string> | undefined;
  pre?: string | undefined;
  suf?: string | undefined;
  re?: string | undefined;
  gt?: number | undefined;
  gte?: number | undefined;
  lt?: number | undefined;
  lte?: number | undefined;
};

export type GetDeploymentHasDeploymentsValue = GetDeploymentValue2 | string;

export type GetDeploymentHas2 = {
  type: GetDeploymentHasDeploymentsType;
  key: string;
  value?: GetDeploymentValue2 | string | undefined;
};

export const GetDeploymentHasType = {
  Host: "host",
} as const;
export type GetDeploymentHasType = ClosedEnum<typeof GetDeploymentHasType>;

export type GetDeploymentValueDeploymentsResponseEq = string | number;

export type GetDeploymentValueDeploymentsResponse2002 = {
  eq?: string | number | undefined;
  neq?: string | undefined;
  inc?: Array<string> | undefined;
  ninc?: Array<string> | undefined;
  pre?: string | undefined;
  suf?: string | undefined;
  re?: string | undefined;
  gt?: number | undefined;
  gte?: number | undefined;
  lt?: number | undefined;
  lte?: number | undefined;
};

export type GetDeploymentHasValue =
  | GetDeploymentValueDeploymentsResponse2002
  | string;

export type GetDeploymentHas1 = {
  type: GetDeploymentHasType;
  value: GetDeploymentValueDeploymentsResponse2002 | string;
};

export type GetDeploymentRoutesHas = GetDeploymentHas1 | GetDeploymentHas2;

export const GetDeploymentMissingType = {
  Header: "header",
  Cookie: "cookie",
  Query: "query",
} as const;
export type GetDeploymentMissingType = ClosedEnum<
  typeof GetDeploymentMissingType
>;

export type GetDeploymentValueDeploymentsEq = string | number;

export type GetDeploymentValueDeploymentsResponse2 = {
  eq?: string | number | undefined;
  neq?: string | undefined;
  inc?: Array<string> | undefined;
  ninc?: Array<string> | undefined;
  pre?: string | undefined;
  suf?: string | undefined;
  re?: string | undefined;
  gt?: number | undefined;
  gte?: number | undefined;
  lt?: number | undefined;
  lte?: number | undefined;
};

export type GetDeploymentMissingValue =
  | GetDeploymentValueDeploymentsResponse2
  | string;

export type GetDeploymentMissing2 = {
  type: GetDeploymentMissingType;
  key: string;
  value?: GetDeploymentValueDeploymentsResponse2 | string | undefined;
};

export const GetDeploymentMissingDeploymentsType = {
  Host: "host",
} as const;
export type GetDeploymentMissingDeploymentsType = ClosedEnum<
  typeof GetDeploymentMissingDeploymentsType
>;

export type GetDeploymentValueEq = string | number;

export type GetDeploymentValueDeployments2 = {
  eq?: string | number | undefined;
  neq?: string | undefined;
  inc?: Array<string> | undefined;
  ninc?: Array<string> | undefined;
  pre?: string | undefined;
  suf?: string | undefined;
  re?: string | undefined;
  gt?: number | undefined;
  gte?: number | undefined;
  lt?: number | undefined;
  lte?: number | undefined;
};

export type GetDeploymentMissingDeploymentsValue =
  | GetDeploymentValueDeployments2
  | string;

export type GetDeploymentMissing1 = {
  type: GetDeploymentMissingDeploymentsType;
  value: GetDeploymentValueDeployments2 | string;
};

export type GetDeploymentRoutesMissing =
  | GetDeploymentMissing1
  | GetDeploymentMissing2;

export const GetDeploymentRoutesAction = {
  Challenge: "challenge",
  Deny: "deny",
} as const;
export type GetDeploymentRoutesAction = ClosedEnum<
  typeof GetDeploymentRoutesAction
>;

export type GetDeploymentRoutesMitigate = {
  action: GetDeploymentRoutesAction;
};

export const GetDeploymentRoutesType = {
  RequestHeaders: "request.headers",
  RequestQuery: "request.query",
  ResponseHeaders: "response.headers",
} as const;
export type GetDeploymentRoutesType = ClosedEnum<
  typeof GetDeploymentRoutesType
>;

export const GetDeploymentRoutesOp = {
  Append: "append",
  Set: "set",
  Delete: "delete",
} as const;
export type GetDeploymentRoutesOp = ClosedEnum<typeof GetDeploymentRoutesOp>;

export type GetDeploymentKeyEq = string | number;

export type GetDeploymentKey2 = {
  eq?: string | number | undefined;
  neq?: string | undefined;
  inc?: Array<string> | undefined;
  ninc?: Array<string> | undefined;
  pre?: string | undefined;
  suf?: string | undefined;
  gt?: number | undefined;
  gte?: number | undefined;
  lt?: number | undefined;
  lte?: number | undefined;
};

export type GetDeploymentRoutesKey = GetDeploymentKey2 | string;

export type GetDeploymentRoutesTarget = {
  key: GetDeploymentKey2 | string;
};

export type GetDeploymentRoutesArgs = string | Array<string>;

export type GetDeploymentRoutesTransforms = {
  type: GetDeploymentRoutesType;
  op: GetDeploymentRoutesOp;
  target: GetDeploymentRoutesTarget;
  args?: string | Array<string> | undefined;
};

export type GetDeploymentRoutesLocale = {
  redirect?: { [k: string]: string } | undefined;
  cookie?: string | undefined;
};

export type GetDeploymentRoutes1 = {
  src: string;
  dest?: string | undefined;
  headers?: { [k: string]: string } | undefined;
  methods?: Array<string> | undefined;
  continue?: boolean | undefined;
  override?: boolean | undefined;
  caseSensitive?: boolean | undefined;
  check?: boolean | undefined;
  important?: boolean | undefined;
  status?: number | undefined;
  has?: Array<GetDeploymentHas1 | GetDeploymentHas2> | undefined;
  missing?: Array<GetDeploymentMissing1 | GetDeploymentMissing2> | undefined;
  mitigate?: GetDeploymentRoutesMitigate | undefined;
  transforms?: Array<GetDeploymentRoutesTransforms> | undefined;
  locale?: GetDeploymentRoutesLocale | undefined;
  /**
   * A middleware key within the `output` key under the build result. Overrides a `middleware` definition.
   */
  middlewarePath?: string | undefined;
  /**
   * The original middleware matchers.
   */
  middlewareRawSrc?: Array<string> | undefined;
  /**
   * A middleware index in the `middleware` key under the build result
   */
  middleware?: number | undefined;
};

export type ResponseBodyRoutes =
  | GetDeploymentRoutes3
  | GetDeploymentRoutes1
  | GetDeploymentRoutes2;

export const GetDeploymentGitRepoDeploymentsType = {
  Bitbucket: "bitbucket",
} as const;
export type GetDeploymentGitRepoDeploymentsType = ClosedEnum<
  typeof GetDeploymentGitRepoDeploymentsType
>;

export const GetDeploymentGitRepoOwnerType = {
  Team: "team",
  User: "user",
} as const;
export type GetDeploymentGitRepoOwnerType = ClosedEnum<
  typeof GetDeploymentGitRepoOwnerType
>;

export type GetDeploymentGitRepo3 = {
  owner: string;
  repoUuid: string;
  slug: string;
  type: GetDeploymentGitRepoDeploymentsType;
  workspaceUuid: string;
  path: string;
  defaultBranch: string;
  name: string;
  private: boolean;
  ownerType: GetDeploymentGitRepoOwnerType;
};

export const GetDeploymentGitRepoType = {
  Github: "github",
} as const;
export type GetDeploymentGitRepoType = ClosedEnum<
  typeof GetDeploymentGitRepoType
>;

export const GetDeploymentGitRepoDeploymentsResponseOwnerType = {
  Team: "team",
  User: "user",
} as const;
export type GetDeploymentGitRepoDeploymentsResponseOwnerType = ClosedEnum<
  typeof GetDeploymentGitRepoDeploymentsResponseOwnerType
>;

export type GetDeploymentGitRepo2 = {
  org: string;
  repo: string;
  repoId: number;
  type: GetDeploymentGitRepoType;
  repoOwnerId: number;
  path: string;
  defaultBranch: string;
  name: string;
  private: boolean;
  ownerType: GetDeploymentGitRepoDeploymentsResponseOwnerType;
};

export const GetDeploymentGitRepoDeploymentsResponseType = {
  Gitlab: "gitlab",
} as const;
export type GetDeploymentGitRepoDeploymentsResponseType = ClosedEnum<
  typeof GetDeploymentGitRepoDeploymentsResponseType
>;

export const GetDeploymentGitRepoDeploymentsOwnerType = {
  Team: "team",
  User: "user",
} as const;
export type GetDeploymentGitRepoDeploymentsOwnerType = ClosedEnum<
  typeof GetDeploymentGitRepoDeploymentsOwnerType
>;

export type GetDeploymentGitRepo1 = {
  namespace: string;
  projectId: number;
  type: GetDeploymentGitRepoDeploymentsResponseType;
  url: string;
  path: string;
  defaultBranch: string;
  name: string;
  private: boolean;
  ownerType: GetDeploymentGitRepoDeploymentsOwnerType;
};

export type ResponseBodyGitRepo =
  | GetDeploymentGitRepo2
  | GetDeploymentGitRepo3
  | GetDeploymentGitRepo1;

/**
 * Flags defined in the Build Output API, used by this deployment. Primarily used by the Toolbar to know about the used flags.
 */
export type GetDeploymentFlags2 = {};

export type GetDeploymentFlagsOptions = {
  value: FlagJSONValue | null;
  label?: string | undefined;
};

export type GetDeploymentFlagsDefinitions = {
  options?: Array<GetDeploymentFlagsOptions> | undefined;
  url?: string | undefined;
  description?: string | undefined;
};

/**
 * Flags defined in the Build Output API, used by this deployment. Primarily used by the Toolbar to know about the used flags.
 */
export type GetDeploymentFlags1 = {
  definitions: { [k: string]: GetDeploymentFlagsDefinitions };
};

export type ResponseBodyFlags =
  | GetDeploymentFlags1
  | Array<GetDeploymentFlags2>;

/**
 * A map of the other applications that are part of this group. Only defined on the default application. The field is set after deployments have been created, so can be undefined, but should be there for a successful deployment. Note: this field will be removed when MFE alias routing is fully rolled out.
 */
export type GetDeploymentMicrofrontendsApplications = {
  isDefaultApp?: boolean | undefined;
  /**
   * This is the production alias, it will always show the most up to date of each application.
   */
  productionHost: string;
  /**
   * Use the fixed deploymentAlias and deploymentHost so that the microfrontend preview stays in sync with the deployment. These are only present for mono-repos when a single commit creates multiple deployments. If they are not present, productionHost will be used.
   */
  deploymentAlias?: string | undefined;
  deploymentHost?: string | undefined;
};

/**
 * The result of the microfrontends config upload during deployment creation. Only set for default app deployments. - `success` - The config was uploaded successfully. - `error` - The config upload failed. - `no_config` - No config was found to upload. - `undefined` - The config upload has not been attempted yet.
 */
export const GetDeploymentMicrofrontendsMfeConfigUploadState = {
  Error: "error",
  Success: "success",
  NoConfig: "no_config",
} as const;
/**
 * The result of the microfrontends config upload during deployment creation. Only set for default app deployments. - `success` - The config was uploaded successfully. - `error` - The config upload failed. - `no_config` - No config was found to upload. - `undefined` - The config upload has not been attempted yet.
 */
export type GetDeploymentMicrofrontendsMfeConfigUploadState = ClosedEnum<
  typeof GetDeploymentMicrofrontendsMfeConfigUploadState
>;

export type GetDeploymentMicrofrontends2 = {
  isDefaultApp: boolean;
  /**
   * A map of the other applications that are part of this group. Only defined on the default application. The field is set after deployments have been created, so can be undefined, but should be there for a successful deployment. Note: this field will be removed when MFE alias routing is fully rolled out.
   */
  applications?:
    | { [k: string]: GetDeploymentMicrofrontendsApplications }
    | undefined;
  /**
   * The result of the microfrontends config upload during deployment creation. Only set for default app deployments. - `success` - The config was uploaded successfully. - `error` - The config upload failed. - `no_config` - No config was found to upload. - `undefined` - The config upload has not been attempted yet.
   */
  mfeConfigUploadState?:
    | GetDeploymentMicrofrontendsMfeConfigUploadState
    | undefined;
  /**
   * The project name of the default app of this deployment's microfrontends group.
   */
  defaultAppProjectName: string;
  /**
   * A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI.
   */
  defaultRoute?: string | undefined;
  /**
   * The group of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together.
   */
  groupIds: Array<string>;
  /**
   * Whether the MicrofrontendsAlias2 team flag should be considered enabled for this deployment or not.
   */
  microfrontendsAlias2Enabled?: boolean | undefined;
};

export type GetDeploymentMicrofrontends1 = {
  isDefaultApp?: boolean | undefined;
  /**
   * The project name of the default app of this deployment's microfrontends group.
   */
  defaultAppProjectName: string;
  /**
   * A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI.
   */
  defaultRoute?: string | undefined;
  /**
   * The group of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together.
   */
  groupIds: Array<string>;
  /**
   * Whether the MicrofrontendsAlias2 team flag should be considered enabled for this deployment or not.
   */
  microfrontendsAlias2Enabled?: boolean | undefined;
};

export type ResponseBodyMicrofrontends =
  | GetDeploymentMicrofrontends2
  | GetDeploymentMicrofrontends1;

export const ResponseBodyFunctionType = {
  Fluid: "fluid",
  Standard: "standard",
} as const;
export type ResponseBodyFunctionType = ClosedEnum<
  typeof ResponseBodyFunctionType
>;

export const ResponseBodyFunctionMemoryType = {
  Standard: "standard",
  StandardLegacy: "standard_legacy",
  Performance: "performance",
} as const;
export type ResponseBodyFunctionMemoryType = ClosedEnum<
  typeof ResponseBodyFunctionMemoryType
>;

/**
 * Since February 2025 the configuration must include snapshot data at the time of deployment creation to capture properties for the /deployments/:id/config endpoint utilized for displaying Deployment Configuration on the frontend This is optional because older deployments may not have this data captured
 */
export type ResponseBodyConfig = {
  version?: number | undefined;
  functionType: ResponseBodyFunctionType;
  functionMemoryType: ResponseBodyFunctionMemoryType;
  functionTimeout: number | null;
  secureComputePrimaryRegion: string | null;
  secureComputeFallbackRegion: string | null;
  isUsingActiveCPU?: boolean | undefined;
};

export const ResponseBodyState = {
  Succeeded: "succeeded",
  Failed: "failed",
  Pending: "pending",
} as const;
export type ResponseBodyState = ClosedEnum<typeof ResponseBodyState>;

/**
 * Condensed check data. Retrieve individual check and check run data using api-checks v2 routes.
 */
export type ResponseBodyDeploymentAlias = {
  state: ResponseBodyState;
  startedAt: number;
  completedAt?: number | undefined;
};

export type ResponseBodyChecks = {
  /**
   * Condensed check data. Retrieve individual check and check run data using api-checks v2 routes.
   */
  deploymentAlias: ResponseBodyDeploymentAlias;
};

/**
 * The deployment including both public and private information
 */
export type GetDeploymentResponseBody1 = {
  aliasAssignedAt?: number | boolean | null | undefined;
  alwaysRefuseToBuild?: boolean | undefined;
  build: ResponseBodyBuild;
  buildArtifactUrls?: Array<string> | undefined;
  builds?: Array<ResponseBodyBuilds> | undefined;
  env: Array<string>;
  inspectorUrl: string | null;
  isInConcurrentBuildsQueue: boolean;
  isInSystemBuildsQueue: boolean;
  projectSettings: ResponseBodyProjectSettings;
  readyStateReason?: string | undefined;
  integrations?: ResponseBodyIntegrations | undefined;
  images?: ResponseBodyImages | undefined;
  alias?: Array<string> | undefined;
  aliasAssigned: boolean;
  bootedAt: number;
  buildingAt: number;
  /**
   * Since April 2025 it necessary for On-Demand Concurrency Minutes calculation
   */
  buildContainerFinishedAt?: number | undefined;
  buildSkipped: boolean;
  creator: ResponseBodyCreator;
  initReadyAt?: number | undefined;
  isFirstBranchDeployment?: boolean | undefined;
  lambdas?: Array<GetDeploymentResponseBodyLambdas> | undefined;
  public: boolean;
  ready?: number | undefined;
  status: ResponseBodyStatus;
  team?: GetDeploymentResponseBodyTeam | undefined;
  userAliases?: Array<string> | undefined;
  previewCommentsEnabled?: boolean | undefined;
  ttyBuildLogs?: boolean | undefined;
  customEnvironment?:
    | GetDeploymentCustomEnvironmentDeployments1
    | GetDeploymentCustomEnvironmentDeployments2
    | undefined;
  oomReport?: GetDeploymentResponseBodyOomReport | undefined;
  aliasWarning?: GetDeploymentResponseBodyAliasWarning | null | undefined;
  id: string;
  createdAt: number;
  readyState: ResponseBodyReadyState;
  name: string;
  type: GetDeploymentResponseBodyType;
  aliasError?: ResponseBodyAliasError | null | undefined;
  aliasFinal?: string | null | undefined;
  /**
   * applies to custom domains only, defaults to `true`
   */
  autoAssignCustomDomains?: boolean | undefined;
  automaticAliases?: Array<string> | undefined;
  buildErrorAt?: number | undefined;
  checksState?: ResponseBodyChecksState | undefined;
  checksConclusion?: ResponseBodyChecksConclusion | undefined;
  deletedAt?: number | null | undefined;
  /**
   * Computed field that is only available for deployments with a microfrontend configuration.
   */
  defaultRoute?: string | undefined;
  canceledAt?: number | undefined;
  errorCode?: string | undefined;
  errorLink?: string | undefined;
  errorMessage?: string | null | undefined;
  errorStep?: string | undefined;
  /**
   * Since November 2023 this field defines a set of regions that we will deploy the lambda to passively Lambdas will be deployed to these regions but only invoked if all of the primary `regions` are marked as out of service
   */
  passiveRegions?: Array<string> | undefined;
  gitSource?:
    | GetDeploymentGitSourceDeployments12
    | GetDeploymentGitSourceDeployments15
    | GetDeploymentGitSourceDeployments4
    | GetDeploymentGitSourceDeployments10
    | GetDeploymentGitSourceDeployments11
    | GetDeploymentGitSourceDeployments13
    | GetDeploymentGitSourceDeployments14
    | GetDeploymentGitSourceDeployments2
    | GetDeploymentGitSourceDeployments3
    | GetDeploymentGitSourceDeployments6
    | GetDeploymentGitSourceDeployments9
    | GetDeploymentGitSourceDeployments1
    | GetDeploymentGitSourceDeployments5
    | GetDeploymentGitSourceDeployments7
    | GetDeploymentGitSourceDeployments8
    | undefined;
  meta: { [k: string]: string };
  originCacheRegion?: string | undefined;
  /**
   * If set it overrides the `projectSettings.nodeVersion` for this deployment.
   */
  nodeVersion?: ResponseBodyNodeVersion | undefined;
  project?: ResponseBodyProject | undefined;
  /**
   * Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - ROLLING: in the process of having production traffic gradually transitioned. - PROMOTED: has seen production traffic
   */
  readySubstate?: ResponseBodyReadySubstate | undefined;
  regions: Array<string>;
  softDeletedByRetention?: boolean | undefined;
  source?: ResponseBodySource | undefined;
  target?: ResponseBodyTarget | null | undefined;
  undeletedAt?: number | undefined;
  url: string;
  version: number;
  oidcTokenClaims?: ResponseBodyOidcTokenClaims | undefined;
  projectId: string;
  plan: ResponseBodyPlan;
  connectBuildsEnabled?: boolean | undefined;
  connectConfigurationId?: string | undefined;
  createdIn: string;
  crons?: Array<ResponseBodyCrons> | undefined;
  functions?: { [k: string]: ResponseBodyFunctions } | null | undefined;
  monorepoManager?: string | null | undefined;
  ownerId: string;
  /**
   * Since November 2023 this field defines a Secure Compute network that will only be used to deploy passive lambdas to (as in passiveRegions)
   */
  passiveConnectConfigurationId?: string | undefined;
  routes:
    | Array<GetDeploymentRoutes3 | GetDeploymentRoutes1 | GetDeploymentRoutes2>
    | null;
  gitRepo?:
    | GetDeploymentGitRepo2
    | GetDeploymentGitRepo3
    | GetDeploymentGitRepo1
    | null
    | undefined;
  flags?: GetDeploymentFlags1 | Array<GetDeploymentFlags2> | undefined;
  microfrontends?:
    | GetDeploymentMicrofrontends2
    | GetDeploymentMicrofrontends1
    | undefined;
  /**
   * Since February 2025 the configuration must include snapshot data at the time of deployment creation to capture properties for the /deployments/:id/config endpoint utilized for displaying Deployment Configuration on the frontend This is optional because older deployments may not have this data captured
   */
  config?: ResponseBodyConfig | undefined;
  checks?: ResponseBodyChecks | undefined;
};

/**
 * The deployment including only public information
 *
 * @remarks
 * The deployment including both public and private information
 */
export type GetDeploymentResponseBody =
  | GetDeploymentResponseBody1
  | GetDeploymentResponseBody2;

/** @internal */
export const GetDeploymentRequest$inboundSchema: z.ZodType<
  GetDeploymentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  idOrUrl: z.string(),
  withGitRepoInfo: z.string().optional(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/** @internal */
export type GetDeploymentRequest$Outbound = {
  idOrUrl: string;
  withGitRepoInfo?: string | undefined;
  teamId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const GetDeploymentRequest$outboundSchema: z.ZodType<
  GetDeploymentRequest$Outbound,
  z.ZodTypeDef,
  GetDeploymentRequest
> = z.object({
  idOrUrl: z.string(),
  withGitRepoInfo: z.string().optional(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentRequest$ {
  /** @deprecated use `GetDeploymentRequest$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentRequest$inboundSchema;
  /** @deprecated use `GetDeploymentRequest$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentRequest$outboundSchema;
  /** @deprecated use `GetDeploymentRequest$Outbound` instead. */
  export type Outbound = GetDeploymentRequest$Outbound;
}

export function getDeploymentRequestToJSON(
  getDeploymentRequest: GetDeploymentRequest,
): string {
  return JSON.stringify(
    GetDeploymentRequest$outboundSchema.parse(getDeploymentRequest),
  );
}

export function getDeploymentRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentRequest' from JSON`,
  );
}

/** @internal */
export const GetDeploymentResponseBodyCreator$inboundSchema: z.ZodType<
  GetDeploymentResponseBodyCreator,
  z.ZodTypeDef,
  unknown
> = z.object({
  uid: z.string(),
  username: z.string().optional(),
  avatar: z.string().optional(),
});

/** @internal */
export type GetDeploymentResponseBodyCreator$Outbound = {
  uid: string;
  username?: string | undefined;
  avatar?: string | undefined;
};

/** @internal */
export const GetDeploymentResponseBodyCreator$outboundSchema: z.ZodType<
  GetDeploymentResponseBodyCreator$Outbound,
  z.ZodTypeDef,
  GetDeploymentResponseBodyCreator
> = z.object({
  uid: z.string(),
  username: z.string().optional(),
  avatar: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentResponseBodyCreator$ {
  /** @deprecated use `GetDeploymentResponseBodyCreator$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentResponseBodyCreator$inboundSchema;
  /** @deprecated use `GetDeploymentResponseBodyCreator$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentResponseBodyCreator$outboundSchema;
  /** @deprecated use `GetDeploymentResponseBodyCreator$Outbound` instead. */
  export type Outbound = GetDeploymentResponseBodyCreator$Outbound;
}

export function getDeploymentResponseBodyCreatorToJSON(
  getDeploymentResponseBodyCreator: GetDeploymentResponseBodyCreator,
): string {
  return JSON.stringify(
    GetDeploymentResponseBodyCreator$outboundSchema.parse(
      getDeploymentResponseBodyCreator,
    ),
  );
}

export function getDeploymentResponseBodyCreatorFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentResponseBodyCreator, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentResponseBodyCreator$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentResponseBodyCreator' from JSON`,
  );
}

/** @internal */
export const GetDeploymentResponseBodyDeploymentsReadyState$inboundSchema:
  z.ZodNativeEnum<typeof GetDeploymentResponseBodyDeploymentsReadyState> = z
    .nativeEnum(GetDeploymentResponseBodyDeploymentsReadyState);

/** @internal */
export const GetDeploymentResponseBodyDeploymentsReadyState$outboundSchema:
  z.ZodNativeEnum<typeof GetDeploymentResponseBodyDeploymentsReadyState> =
    GetDeploymentResponseBodyDeploymentsReadyState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentResponseBodyDeploymentsReadyState$ {
  /** @deprecated use `GetDeploymentResponseBodyDeploymentsReadyState$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentResponseBodyDeploymentsReadyState$inboundSchema;
  /** @deprecated use `GetDeploymentResponseBodyDeploymentsReadyState$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentResponseBodyDeploymentsReadyState$outboundSchema;
}

/** @internal */
export const GetDeploymentResponseBodyOutput$inboundSchema: z.ZodType<
  GetDeploymentResponseBodyOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  functionName: z.string(),
});

/** @internal */
export type GetDeploymentResponseBodyOutput$Outbound = {
  path: string;
  functionName: string;
};

/** @internal */
export const GetDeploymentResponseBodyOutput$outboundSchema: z.ZodType<
  GetDeploymentResponseBodyOutput$Outbound,
  z.ZodTypeDef,
  GetDeploymentResponseBodyOutput
> = z.object({
  path: z.string(),
  functionName: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentResponseBodyOutput$ {
  /** @deprecated use `GetDeploymentResponseBodyOutput$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentResponseBodyOutput$inboundSchema;
  /** @deprecated use `GetDeploymentResponseBodyOutput$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentResponseBodyOutput$outboundSchema;
  /** @deprecated use `GetDeploymentResponseBodyOutput$Outbound` instead. */
  export type Outbound = GetDeploymentResponseBodyOutput$Outbound;
}

export function getDeploymentResponseBodyOutputToJSON(
  getDeploymentResponseBodyOutput: GetDeploymentResponseBodyOutput,
): string {
  return JSON.stringify(
    GetDeploymentResponseBodyOutput$outboundSchema.parse(
      getDeploymentResponseBodyOutput,
    ),
  );
}

export function getDeploymentResponseBodyOutputFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentResponseBodyOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentResponseBodyOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentResponseBodyOutput' from JSON`,
  );
}

/** @internal */
export const ResponseBodyLambdas$inboundSchema: z.ZodType<
  ResponseBodyLambdas,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  createdAt: z.number().optional(),
  readyState: GetDeploymentResponseBodyDeploymentsReadyState$inboundSchema
    .optional(),
  entrypoint: z.nullable(z.string()).optional(),
  readyStateAt: z.number().optional(),
  output: z.array(z.lazy(() => GetDeploymentResponseBodyOutput$inboundSchema)),
});

/** @internal */
export type ResponseBodyLambdas$Outbound = {
  id: string;
  createdAt?: number | undefined;
  readyState?: string | undefined;
  entrypoint?: string | null | undefined;
  readyStateAt?: number | undefined;
  output: Array<GetDeploymentResponseBodyOutput$Outbound>;
};

/** @internal */
export const ResponseBodyLambdas$outboundSchema: z.ZodType<
  ResponseBodyLambdas$Outbound,
  z.ZodTypeDef,
  ResponseBodyLambdas
> = z.object({
  id: z.string(),
  createdAt: z.number().optional(),
  readyState: GetDeploymentResponseBodyDeploymentsReadyState$outboundSchema
    .optional(),
  entrypoint: z.nullable(z.string()).optional(),
  readyStateAt: z.number().optional(),
  output: z.array(z.lazy(() => GetDeploymentResponseBodyOutput$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyLambdas$ {
  /** @deprecated use `ResponseBodyLambdas$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyLambdas$inboundSchema;
  /** @deprecated use `ResponseBodyLambdas$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyLambdas$outboundSchema;
  /** @deprecated use `ResponseBodyLambdas$Outbound` instead. */
  export type Outbound = ResponseBodyLambdas$Outbound;
}

export function responseBodyLambdasToJSON(
  responseBodyLambdas: ResponseBodyLambdas,
): string {
  return JSON.stringify(
    ResponseBodyLambdas$outboundSchema.parse(responseBodyLambdas),
  );
}

export function responseBodyLambdasFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyLambdas, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyLambdas$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyLambdas' from JSON`,
  );
}

/** @internal */
export const GetDeploymentResponseBodyStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetDeploymentResponseBodyStatus
> = z.nativeEnum(GetDeploymentResponseBodyStatus);

/** @internal */
export const GetDeploymentResponseBodyStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetDeploymentResponseBodyStatus
> = GetDeploymentResponseBodyStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentResponseBodyStatus$ {
  /** @deprecated use `GetDeploymentResponseBodyStatus$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentResponseBodyStatus$inboundSchema;
  /** @deprecated use `GetDeploymentResponseBodyStatus$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentResponseBodyStatus$outboundSchema;
}

/** @internal */
export const ResponseBodyTeam$inboundSchema: z.ZodType<
  ResponseBodyTeam,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  slug: z.string(),
  avatar: z.string().optional(),
});

/** @internal */
export type ResponseBodyTeam$Outbound = {
  id: string;
  name: string;
  slug: string;
  avatar?: string | undefined;
};

/** @internal */
export const ResponseBodyTeam$outboundSchema: z.ZodType<
  ResponseBodyTeam$Outbound,
  z.ZodTypeDef,
  ResponseBodyTeam
> = z.object({
  id: z.string(),
  name: z.string(),
  slug: z.string(),
  avatar: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyTeam$ {
  /** @deprecated use `ResponseBodyTeam$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyTeam$inboundSchema;
  /** @deprecated use `ResponseBodyTeam$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyTeam$outboundSchema;
  /** @deprecated use `ResponseBodyTeam$Outbound` instead. */
  export type Outbound = ResponseBodyTeam$Outbound;
}

export function responseBodyTeamToJSON(
  responseBodyTeam: ResponseBodyTeam,
): string {
  return JSON.stringify(
    ResponseBodyTeam$outboundSchema.parse(responseBodyTeam),
  );
}

export function responseBodyTeamFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyTeam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyTeam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyTeam' from JSON`,
  );
}

/** @internal */
export const GetDeploymentCustomEnvironment2$inboundSchema: z.ZodType<
  GetDeploymentCustomEnvironment2,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetDeploymentCustomEnvironment2$Outbound = {
  id: string;
};

/** @internal */
export const GetDeploymentCustomEnvironment2$outboundSchema: z.ZodType<
  GetDeploymentCustomEnvironment2$Outbound,
  z.ZodTypeDef,
  GetDeploymentCustomEnvironment2
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentCustomEnvironment2$ {
  /** @deprecated use `GetDeploymentCustomEnvironment2$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentCustomEnvironment2$inboundSchema;
  /** @deprecated use `GetDeploymentCustomEnvironment2$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentCustomEnvironment2$outboundSchema;
  /** @deprecated use `GetDeploymentCustomEnvironment2$Outbound` instead. */
  export type Outbound = GetDeploymentCustomEnvironment2$Outbound;
}

export function getDeploymentCustomEnvironment2ToJSON(
  getDeploymentCustomEnvironment2: GetDeploymentCustomEnvironment2,
): string {
  return JSON.stringify(
    GetDeploymentCustomEnvironment2$outboundSchema.parse(
      getDeploymentCustomEnvironment2,
    ),
  );
}

export function getDeploymentCustomEnvironment2FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentCustomEnvironment2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentCustomEnvironment2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentCustomEnvironment2' from JSON`,
  );
}

/** @internal */
export const GetDeploymentCustomEnvironmentType$inboundSchema: z.ZodNativeEnum<
  typeof GetDeploymentCustomEnvironmentType
> = z.nativeEnum(GetDeploymentCustomEnvironmentType);

/** @internal */
export const GetDeploymentCustomEnvironmentType$outboundSchema: z.ZodNativeEnum<
  typeof GetDeploymentCustomEnvironmentType
> = GetDeploymentCustomEnvironmentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentCustomEnvironmentType$ {
  /** @deprecated use `GetDeploymentCustomEnvironmentType$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentCustomEnvironmentType$inboundSchema;
  /** @deprecated use `GetDeploymentCustomEnvironmentType$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentCustomEnvironmentType$outboundSchema;
}

/** @internal */
export const GetDeploymentCustomEnvironmentDeploymentsResponseType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentCustomEnvironmentDeploymentsResponseType
  > = z.nativeEnum(GetDeploymentCustomEnvironmentDeploymentsResponseType);

/** @internal */
export const GetDeploymentCustomEnvironmentDeploymentsResponseType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentCustomEnvironmentDeploymentsResponseType
  > = GetDeploymentCustomEnvironmentDeploymentsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentCustomEnvironmentDeploymentsResponseType$ {
  /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentCustomEnvironmentDeploymentsResponseType$inboundSchema;
  /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentCustomEnvironmentDeploymentsResponseType$outboundSchema;
}

/** @internal */
export const GetDeploymentCustomEnvironmentBranchMatcher$inboundSchema:
  z.ZodType<
    GetDeploymentCustomEnvironmentBranchMatcher,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: GetDeploymentCustomEnvironmentDeploymentsResponseType$inboundSchema,
    pattern: z.string(),
  });

/** @internal */
export type GetDeploymentCustomEnvironmentBranchMatcher$Outbound = {
  type: string;
  pattern: string;
};

/** @internal */
export const GetDeploymentCustomEnvironmentBranchMatcher$outboundSchema:
  z.ZodType<
    GetDeploymentCustomEnvironmentBranchMatcher$Outbound,
    z.ZodTypeDef,
    GetDeploymentCustomEnvironmentBranchMatcher
  > = z.object({
    type: GetDeploymentCustomEnvironmentDeploymentsResponseType$outboundSchema,
    pattern: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentCustomEnvironmentBranchMatcher$ {
  /** @deprecated use `GetDeploymentCustomEnvironmentBranchMatcher$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentCustomEnvironmentBranchMatcher$inboundSchema;
  /** @deprecated use `GetDeploymentCustomEnvironmentBranchMatcher$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentCustomEnvironmentBranchMatcher$outboundSchema;
  /** @deprecated use `GetDeploymentCustomEnvironmentBranchMatcher$Outbound` instead. */
  export type Outbound = GetDeploymentCustomEnvironmentBranchMatcher$Outbound;
}

export function getDeploymentCustomEnvironmentBranchMatcherToJSON(
  getDeploymentCustomEnvironmentBranchMatcher:
    GetDeploymentCustomEnvironmentBranchMatcher,
): string {
  return JSON.stringify(
    GetDeploymentCustomEnvironmentBranchMatcher$outboundSchema.parse(
      getDeploymentCustomEnvironmentBranchMatcher,
    ),
  );
}

export function getDeploymentCustomEnvironmentBranchMatcherFromJSON(
  jsonString: string,
): SafeParseResult<
  GetDeploymentCustomEnvironmentBranchMatcher,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentCustomEnvironmentBranchMatcher$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetDeploymentCustomEnvironmentBranchMatcher' from JSON`,
  );
}

/** @internal */
export const GetDeploymentCustomEnvironmentVerification$inboundSchema:
  z.ZodType<GetDeploymentCustomEnvironmentVerification, z.ZodTypeDef, unknown> =
    z.object({
      type: z.string(),
      domain: z.string(),
      value: z.string(),
      reason: z.string(),
    });

/** @internal */
export type GetDeploymentCustomEnvironmentVerification$Outbound = {
  type: string;
  domain: string;
  value: string;
  reason: string;
};

/** @internal */
export const GetDeploymentCustomEnvironmentVerification$outboundSchema:
  z.ZodType<
    GetDeploymentCustomEnvironmentVerification$Outbound,
    z.ZodTypeDef,
    GetDeploymentCustomEnvironmentVerification
  > = z.object({
    type: z.string(),
    domain: z.string(),
    value: z.string(),
    reason: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentCustomEnvironmentVerification$ {
  /** @deprecated use `GetDeploymentCustomEnvironmentVerification$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentCustomEnvironmentVerification$inboundSchema;
  /** @deprecated use `GetDeploymentCustomEnvironmentVerification$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentCustomEnvironmentVerification$outboundSchema;
  /** @deprecated use `GetDeploymentCustomEnvironmentVerification$Outbound` instead. */
  export type Outbound = GetDeploymentCustomEnvironmentVerification$Outbound;
}

export function getDeploymentCustomEnvironmentVerificationToJSON(
  getDeploymentCustomEnvironmentVerification:
    GetDeploymentCustomEnvironmentVerification,
): string {
  return JSON.stringify(
    GetDeploymentCustomEnvironmentVerification$outboundSchema.parse(
      getDeploymentCustomEnvironmentVerification,
    ),
  );
}

export function getDeploymentCustomEnvironmentVerificationFromJSON(
  jsonString: string,
): SafeParseResult<
  GetDeploymentCustomEnvironmentVerification,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentCustomEnvironmentVerification$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetDeploymentCustomEnvironmentVerification' from JSON`,
  );
}

/** @internal */
export const GetDeploymentCustomEnvironmentDomains$inboundSchema: z.ZodType<
  GetDeploymentCustomEnvironmentDomains,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  apexName: z.string(),
  projectId: z.string(),
  redirect: z.nullable(z.string()).optional(),
  redirectStatusCode: z.nullable(z.number()).optional(),
  gitBranch: z.nullable(z.string()).optional(),
  customEnvironmentId: z.nullable(z.string()).optional(),
  updatedAt: z.number().optional(),
  createdAt: z.number().optional(),
  verified: z.boolean(),
  verification: z.array(
    z.lazy(() => GetDeploymentCustomEnvironmentVerification$inboundSchema),
  ).optional(),
});

/** @internal */
export type GetDeploymentCustomEnvironmentDomains$Outbound = {
  name: string;
  apexName: string;
  projectId: string;
  redirect?: string | null | undefined;
  redirectStatusCode?: number | null | undefined;
  gitBranch?: string | null | undefined;
  customEnvironmentId?: string | null | undefined;
  updatedAt?: number | undefined;
  createdAt?: number | undefined;
  verified: boolean;
  verification?:
    | Array<GetDeploymentCustomEnvironmentVerification$Outbound>
    | undefined;
};

/** @internal */
export const GetDeploymentCustomEnvironmentDomains$outboundSchema: z.ZodType<
  GetDeploymentCustomEnvironmentDomains$Outbound,
  z.ZodTypeDef,
  GetDeploymentCustomEnvironmentDomains
> = z.object({
  name: z.string(),
  apexName: z.string(),
  projectId: z.string(),
  redirect: z.nullable(z.string()).optional(),
  redirectStatusCode: z.nullable(z.number()).optional(),
  gitBranch: z.nullable(z.string()).optional(),
  customEnvironmentId: z.nullable(z.string()).optional(),
  updatedAt: z.number().optional(),
  createdAt: z.number().optional(),
  verified: z.boolean(),
  verification: z.array(
    z.lazy(() => GetDeploymentCustomEnvironmentVerification$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentCustomEnvironmentDomains$ {
  /** @deprecated use `GetDeploymentCustomEnvironmentDomains$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentCustomEnvironmentDomains$inboundSchema;
  /** @deprecated use `GetDeploymentCustomEnvironmentDomains$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentCustomEnvironmentDomains$outboundSchema;
  /** @deprecated use `GetDeploymentCustomEnvironmentDomains$Outbound` instead. */
  export type Outbound = GetDeploymentCustomEnvironmentDomains$Outbound;
}

export function getDeploymentCustomEnvironmentDomainsToJSON(
  getDeploymentCustomEnvironmentDomains: GetDeploymentCustomEnvironmentDomains,
): string {
  return JSON.stringify(
    GetDeploymentCustomEnvironmentDomains$outboundSchema.parse(
      getDeploymentCustomEnvironmentDomains,
    ),
  );
}

export function getDeploymentCustomEnvironmentDomainsFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentCustomEnvironmentDomains, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentCustomEnvironmentDomains$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentCustomEnvironmentDomains' from JSON`,
  );
}

/** @internal */
export const GetDeploymentCustomEnvironment1$inboundSchema: z.ZodType<
  GetDeploymentCustomEnvironment1,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  slug: z.string(),
  type: GetDeploymentCustomEnvironmentType$inboundSchema,
  description: z.string().optional(),
  branchMatcher: z.lazy(() =>
    GetDeploymentCustomEnvironmentBranchMatcher$inboundSchema
  ).optional(),
  domains: z.array(
    z.lazy(() => GetDeploymentCustomEnvironmentDomains$inboundSchema),
  ).optional(),
  currentDeploymentAliases: z.array(z.string()).optional(),
  createdAt: z.number(),
  updatedAt: z.number(),
});

/** @internal */
export type GetDeploymentCustomEnvironment1$Outbound = {
  id: string;
  slug: string;
  type: string;
  description?: string | undefined;
  branchMatcher?:
    | GetDeploymentCustomEnvironmentBranchMatcher$Outbound
    | undefined;
  domains?: Array<GetDeploymentCustomEnvironmentDomains$Outbound> | undefined;
  currentDeploymentAliases?: Array<string> | undefined;
  createdAt: number;
  updatedAt: number;
};

/** @internal */
export const GetDeploymentCustomEnvironment1$outboundSchema: z.ZodType<
  GetDeploymentCustomEnvironment1$Outbound,
  z.ZodTypeDef,
  GetDeploymentCustomEnvironment1
> = z.object({
  id: z.string(),
  slug: z.string(),
  type: GetDeploymentCustomEnvironmentType$outboundSchema,
  description: z.string().optional(),
  branchMatcher: z.lazy(() =>
    GetDeploymentCustomEnvironmentBranchMatcher$outboundSchema
  ).optional(),
  domains: z.array(
    z.lazy(() => GetDeploymentCustomEnvironmentDomains$outboundSchema),
  ).optional(),
  currentDeploymentAliases: z.array(z.string()).optional(),
  createdAt: z.number(),
  updatedAt: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentCustomEnvironment1$ {
  /** @deprecated use `GetDeploymentCustomEnvironment1$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentCustomEnvironment1$inboundSchema;
  /** @deprecated use `GetDeploymentCustomEnvironment1$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentCustomEnvironment1$outboundSchema;
  /** @deprecated use `GetDeploymentCustomEnvironment1$Outbound` instead. */
  export type Outbound = GetDeploymentCustomEnvironment1$Outbound;
}

export function getDeploymentCustomEnvironment1ToJSON(
  getDeploymentCustomEnvironment1: GetDeploymentCustomEnvironment1,
): string {
  return JSON.stringify(
    GetDeploymentCustomEnvironment1$outboundSchema.parse(
      getDeploymentCustomEnvironment1,
    ),
  );
}

export function getDeploymentCustomEnvironment1FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentCustomEnvironment1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentCustomEnvironment1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentCustomEnvironment1' from JSON`,
  );
}

/** @internal */
export const ResponseBodyCustomEnvironment$inboundSchema: z.ZodType<
  ResponseBodyCustomEnvironment,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetDeploymentCustomEnvironment1$inboundSchema),
  z.lazy(() => GetDeploymentCustomEnvironment2$inboundSchema),
]);

/** @internal */
export type ResponseBodyCustomEnvironment$Outbound =
  | GetDeploymentCustomEnvironment1$Outbound
  | GetDeploymentCustomEnvironment2$Outbound;

/** @internal */
export const ResponseBodyCustomEnvironment$outboundSchema: z.ZodType<
  ResponseBodyCustomEnvironment$Outbound,
  z.ZodTypeDef,
  ResponseBodyCustomEnvironment
> = z.union([
  z.lazy(() => GetDeploymentCustomEnvironment1$outboundSchema),
  z.lazy(() => GetDeploymentCustomEnvironment2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyCustomEnvironment$ {
  /** @deprecated use `ResponseBodyCustomEnvironment$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyCustomEnvironment$inboundSchema;
  /** @deprecated use `ResponseBodyCustomEnvironment$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyCustomEnvironment$outboundSchema;
  /** @deprecated use `ResponseBodyCustomEnvironment$Outbound` instead. */
  export type Outbound = ResponseBodyCustomEnvironment$Outbound;
}

export function responseBodyCustomEnvironmentToJSON(
  responseBodyCustomEnvironment: ResponseBodyCustomEnvironment,
): string {
  return JSON.stringify(
    ResponseBodyCustomEnvironment$outboundSchema.parse(
      responseBodyCustomEnvironment,
    ),
  );
}

export function responseBodyCustomEnvironmentFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyCustomEnvironment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyCustomEnvironment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyCustomEnvironment' from JSON`,
  );
}

/** @internal */
export const ResponseBodyOomReport$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyOomReport
> = z.nativeEnum(ResponseBodyOomReport);

/** @internal */
export const ResponseBodyOomReport$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyOomReport
> = ResponseBodyOomReport$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyOomReport$ {
  /** @deprecated use `ResponseBodyOomReport$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyOomReport$inboundSchema;
  /** @deprecated use `ResponseBodyOomReport$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyOomReport$outboundSchema;
}

/** @internal */
export const ResponseBodyAliasWarning$inboundSchema: z.ZodType<
  ResponseBodyAliasWarning,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
  link: z.string().optional(),
  action: z.string().optional(),
});

/** @internal */
export type ResponseBodyAliasWarning$Outbound = {
  code: string;
  message: string;
  link?: string | undefined;
  action?: string | undefined;
};

/** @internal */
export const ResponseBodyAliasWarning$outboundSchema: z.ZodType<
  ResponseBodyAliasWarning$Outbound,
  z.ZodTypeDef,
  ResponseBodyAliasWarning
> = z.object({
  code: z.string(),
  message: z.string(),
  link: z.string().optional(),
  action: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyAliasWarning$ {
  /** @deprecated use `ResponseBodyAliasWarning$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyAliasWarning$inboundSchema;
  /** @deprecated use `ResponseBodyAliasWarning$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyAliasWarning$outboundSchema;
  /** @deprecated use `ResponseBodyAliasWarning$Outbound` instead. */
  export type Outbound = ResponseBodyAliasWarning$Outbound;
}

export function responseBodyAliasWarningToJSON(
  responseBodyAliasWarning: ResponseBodyAliasWarning,
): string {
  return JSON.stringify(
    ResponseBodyAliasWarning$outboundSchema.parse(responseBodyAliasWarning),
  );
}

export function responseBodyAliasWarningFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyAliasWarning, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyAliasWarning$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyAliasWarning' from JSON`,
  );
}

/** @internal */
export const GetDeploymentResponseBodyReadyState$inboundSchema: z.ZodNativeEnum<
  typeof GetDeploymentResponseBodyReadyState
> = z.nativeEnum(GetDeploymentResponseBodyReadyState);

/** @internal */
export const GetDeploymentResponseBodyReadyState$outboundSchema:
  z.ZodNativeEnum<typeof GetDeploymentResponseBodyReadyState> =
    GetDeploymentResponseBodyReadyState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentResponseBodyReadyState$ {
  /** @deprecated use `GetDeploymentResponseBodyReadyState$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentResponseBodyReadyState$inboundSchema;
  /** @deprecated use `GetDeploymentResponseBodyReadyState$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentResponseBodyReadyState$outboundSchema;
}

/** @internal */
export const GetDeploymentResponseBodyDeploymentsType$inboundSchema:
  z.ZodNativeEnum<typeof GetDeploymentResponseBodyDeploymentsType> = z
    .nativeEnum(GetDeploymentResponseBodyDeploymentsType);

/** @internal */
export const GetDeploymentResponseBodyDeploymentsType$outboundSchema:
  z.ZodNativeEnum<typeof GetDeploymentResponseBodyDeploymentsType> =
    GetDeploymentResponseBodyDeploymentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentResponseBodyDeploymentsType$ {
  /** @deprecated use `GetDeploymentResponseBodyDeploymentsType$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentResponseBodyDeploymentsType$inboundSchema;
  /** @deprecated use `GetDeploymentResponseBodyDeploymentsType$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentResponseBodyDeploymentsType$outboundSchema;
}

/** @internal */
export const GetDeploymentResponseBodyAliasError$inboundSchema: z.ZodType<
  GetDeploymentResponseBodyAliasError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
});

/** @internal */
export type GetDeploymentResponseBodyAliasError$Outbound = {
  code: string;
  message: string;
};

/** @internal */
export const GetDeploymentResponseBodyAliasError$outboundSchema: z.ZodType<
  GetDeploymentResponseBodyAliasError$Outbound,
  z.ZodTypeDef,
  GetDeploymentResponseBodyAliasError
> = z.object({
  code: z.string(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentResponseBodyAliasError$ {
  /** @deprecated use `GetDeploymentResponseBodyAliasError$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentResponseBodyAliasError$inboundSchema;
  /** @deprecated use `GetDeploymentResponseBodyAliasError$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentResponseBodyAliasError$outboundSchema;
  /** @deprecated use `GetDeploymentResponseBodyAliasError$Outbound` instead. */
  export type Outbound = GetDeploymentResponseBodyAliasError$Outbound;
}

export function getDeploymentResponseBodyAliasErrorToJSON(
  getDeploymentResponseBodyAliasError: GetDeploymentResponseBodyAliasError,
): string {
  return JSON.stringify(
    GetDeploymentResponseBodyAliasError$outboundSchema.parse(
      getDeploymentResponseBodyAliasError,
    ),
  );
}

export function getDeploymentResponseBodyAliasErrorFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentResponseBodyAliasError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentResponseBodyAliasError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentResponseBodyAliasError' from JSON`,
  );
}

/** @internal */
export const GetDeploymentResponseBodyChecksState$inboundSchema:
  z.ZodNativeEnum<typeof GetDeploymentResponseBodyChecksState> = z.nativeEnum(
    GetDeploymentResponseBodyChecksState,
  );

/** @internal */
export const GetDeploymentResponseBodyChecksState$outboundSchema:
  z.ZodNativeEnum<typeof GetDeploymentResponseBodyChecksState> =
    GetDeploymentResponseBodyChecksState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentResponseBodyChecksState$ {
  /** @deprecated use `GetDeploymentResponseBodyChecksState$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentResponseBodyChecksState$inboundSchema;
  /** @deprecated use `GetDeploymentResponseBodyChecksState$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentResponseBodyChecksState$outboundSchema;
}

/** @internal */
export const GetDeploymentResponseBodyChecksConclusion$inboundSchema:
  z.ZodNativeEnum<typeof GetDeploymentResponseBodyChecksConclusion> = z
    .nativeEnum(GetDeploymentResponseBodyChecksConclusion);

/** @internal */
export const GetDeploymentResponseBodyChecksConclusion$outboundSchema:
  z.ZodNativeEnum<typeof GetDeploymentResponseBodyChecksConclusion> =
    GetDeploymentResponseBodyChecksConclusion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentResponseBodyChecksConclusion$ {
  /** @deprecated use `GetDeploymentResponseBodyChecksConclusion$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentResponseBodyChecksConclusion$inboundSchema;
  /** @deprecated use `GetDeploymentResponseBodyChecksConclusion$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentResponseBodyChecksConclusion$outboundSchema;
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody215Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody215Type
  > = z.nativeEnum(
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody215Type,
  );

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody215Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody215Type
  > =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody215Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody215Type$ {
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody215Type$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody215Type$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody215Type$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody215Type$outboundSchema;
}

/** @internal */
export const GetDeploymentGitSource15$inboundSchema: z.ZodType<
  GetDeploymentGitSource15,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody215Type$inboundSchema,
  ref: z.string(),
  sha: z.string(),
  owner: z.string().optional(),
  slug: z.string().optional(),
  workspaceUuid: z.string(),
  repoUuid: z.string(),
});

/** @internal */
export type GetDeploymentGitSource15$Outbound = {
  type: string;
  ref: string;
  sha: string;
  owner?: string | undefined;
  slug?: string | undefined;
  workspaceUuid: string;
  repoUuid: string;
};

/** @internal */
export const GetDeploymentGitSource15$outboundSchema: z.ZodType<
  GetDeploymentGitSource15$Outbound,
  z.ZodTypeDef,
  GetDeploymentGitSource15
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody215Type$outboundSchema,
  ref: z.string(),
  sha: z.string(),
  owner: z.string().optional(),
  slug: z.string().optional(),
  workspaceUuid: z.string(),
  repoUuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSource15$ {
  /** @deprecated use `GetDeploymentGitSource15$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentGitSource15$inboundSchema;
  /** @deprecated use `GetDeploymentGitSource15$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentGitSource15$outboundSchema;
  /** @deprecated use `GetDeploymentGitSource15$Outbound` instead. */
  export type Outbound = GetDeploymentGitSource15$Outbound;
}

export function getDeploymentGitSource15ToJSON(
  getDeploymentGitSource15: GetDeploymentGitSource15,
): string {
  return JSON.stringify(
    GetDeploymentGitSource15$outboundSchema.parse(getDeploymentGitSource15),
  );
}

export function getDeploymentGitSource15FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentGitSource15, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentGitSource15$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentGitSource15' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody214Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody214Type
  > = z.nativeEnum(
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody214Type,
  );

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody214Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody214Type
  > =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody214Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody214Type$ {
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody214Type$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody214Type$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody214Type$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody214Type$outboundSchema;
}

/** @internal */
export const GetDeploymentGitSource14$inboundSchema: z.ZodType<
  GetDeploymentGitSource14,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody214Type$inboundSchema,
  ref: z.string(),
  sha: z.string(),
  projectId: z.number(),
});

/** @internal */
export type GetDeploymentGitSource14$Outbound = {
  type: string;
  ref: string;
  sha: string;
  projectId: number;
};

/** @internal */
export const GetDeploymentGitSource14$outboundSchema: z.ZodType<
  GetDeploymentGitSource14$Outbound,
  z.ZodTypeDef,
  GetDeploymentGitSource14
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody214Type$outboundSchema,
  ref: z.string(),
  sha: z.string(),
  projectId: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSource14$ {
  /** @deprecated use `GetDeploymentGitSource14$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentGitSource14$inboundSchema;
  /** @deprecated use `GetDeploymentGitSource14$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentGitSource14$outboundSchema;
  /** @deprecated use `GetDeploymentGitSource14$Outbound` instead. */
  export type Outbound = GetDeploymentGitSource14$Outbound;
}

export function getDeploymentGitSource14ToJSON(
  getDeploymentGitSource14: GetDeploymentGitSource14,
): string {
  return JSON.stringify(
    GetDeploymentGitSource14$outboundSchema.parse(getDeploymentGitSource14),
  );
}

export function getDeploymentGitSource14FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentGitSource14, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentGitSource14$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentGitSource14' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody213Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody213Type
  > = z.nativeEnum(
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody213Type,
  );

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody213Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody213Type
  > =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody213Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody213Type$ {
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody213Type$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody213Type$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody213Type$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody213Type$outboundSchema;
}

/** @internal */
export const GetDeploymentGitSource13$inboundSchema: z.ZodType<
  GetDeploymentGitSource13,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody213Type$inboundSchema,
  ref: z.string(),
  sha: z.string(),
  repoId: z.number(),
  org: z.string().optional(),
  repo: z.string().optional(),
});

/** @internal */
export type GetDeploymentGitSource13$Outbound = {
  type: string;
  ref: string;
  sha: string;
  repoId: number;
  org?: string | undefined;
  repo?: string | undefined;
};

/** @internal */
export const GetDeploymentGitSource13$outboundSchema: z.ZodType<
  GetDeploymentGitSource13$Outbound,
  z.ZodTypeDef,
  GetDeploymentGitSource13
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody213Type$outboundSchema,
  ref: z.string(),
  sha: z.string(),
  repoId: z.number(),
  org: z.string().optional(),
  repo: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSource13$ {
  /** @deprecated use `GetDeploymentGitSource13$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentGitSource13$inboundSchema;
  /** @deprecated use `GetDeploymentGitSource13$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentGitSource13$outboundSchema;
  /** @deprecated use `GetDeploymentGitSource13$Outbound` instead. */
  export type Outbound = GetDeploymentGitSource13$Outbound;
}

export function getDeploymentGitSource13ToJSON(
  getDeploymentGitSource13: GetDeploymentGitSource13,
): string {
  return JSON.stringify(
    GetDeploymentGitSource13$outboundSchema.parse(getDeploymentGitSource13),
  );
}

export function getDeploymentGitSource13FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentGitSource13, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentGitSource13$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentGitSource13' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type
  > = z.nativeEnum(
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type,
  );

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type
  > =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type$ {
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type$outboundSchema;
}

/** @internal */
export const GetDeploymentGitSource12$inboundSchema: z.ZodType<
  GetDeploymentGitSource12,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type$inboundSchema,
  host: z.string(),
  ref: z.string(),
  sha: z.string(),
  repoId: z.number(),
  org: z.string().optional(),
  repo: z.string().optional(),
});

/** @internal */
export type GetDeploymentGitSource12$Outbound = {
  type: string;
  host: string;
  ref: string;
  sha: string;
  repoId: number;
  org?: string | undefined;
  repo?: string | undefined;
};

/** @internal */
export const GetDeploymentGitSource12$outboundSchema: z.ZodType<
  GetDeploymentGitSource12$Outbound,
  z.ZodTypeDef,
  GetDeploymentGitSource12
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type$outboundSchema,
  host: z.string(),
  ref: z.string(),
  sha: z.string(),
  repoId: z.number(),
  org: z.string().optional(),
  repo: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSource12$ {
  /** @deprecated use `GetDeploymentGitSource12$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentGitSource12$inboundSchema;
  /** @deprecated use `GetDeploymentGitSource12$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentGitSource12$outboundSchema;
  /** @deprecated use `GetDeploymentGitSource12$Outbound` instead. */
  export type Outbound = GetDeploymentGitSource12$Outbound;
}

export function getDeploymentGitSource12ToJSON(
  getDeploymentGitSource12: GetDeploymentGitSource12,
): string {
  return JSON.stringify(
    GetDeploymentGitSource12$outboundSchema.parse(getDeploymentGitSource12),
  );
}

export function getDeploymentGitSource12FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentGitSource12, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentGitSource12$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentGitSource12' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type
  > = z.nativeEnum(
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type,
  );

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type
  > =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type$ {
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type$outboundSchema;
}

/** @internal */
export const GetDeploymentGitSource11$inboundSchema: z.ZodType<
  GetDeploymentGitSource11,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type$inboundSchema,
  ref: z.string(),
  sha: z.string(),
  repoId: z.number(),
  org: z.string().optional(),
  repo: z.string().optional(),
});

/** @internal */
export type GetDeploymentGitSource11$Outbound = {
  type: string;
  ref: string;
  sha: string;
  repoId: number;
  org?: string | undefined;
  repo?: string | undefined;
};

/** @internal */
export const GetDeploymentGitSource11$outboundSchema: z.ZodType<
  GetDeploymentGitSource11$Outbound,
  z.ZodTypeDef,
  GetDeploymentGitSource11
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type$outboundSchema,
  ref: z.string(),
  sha: z.string(),
  repoId: z.number(),
  org: z.string().optional(),
  repo: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSource11$ {
  /** @deprecated use `GetDeploymentGitSource11$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentGitSource11$inboundSchema;
  /** @deprecated use `GetDeploymentGitSource11$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentGitSource11$outboundSchema;
  /** @deprecated use `GetDeploymentGitSource11$Outbound` instead. */
  export type Outbound = GetDeploymentGitSource11$Outbound;
}

export function getDeploymentGitSource11ToJSON(
  getDeploymentGitSource11: GetDeploymentGitSource11,
): string {
  return JSON.stringify(
    GetDeploymentGitSource11$outboundSchema.parse(getDeploymentGitSource11),
  );
}

export function getDeploymentGitSource11FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentGitSource11, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentGitSource11$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentGitSource11' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type
  > = z.nativeEnum(
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type,
  );

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type
  > =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type$ {
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type$outboundSchema;
}

/** @internal */
export const GetDeploymentGitSource10$inboundSchema: z.ZodType<
  GetDeploymentGitSource10,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type$inboundSchema,
  ref: z.string(),
  sha: z.string(),
  gitUrl: z.string(),
});

/** @internal */
export type GetDeploymentGitSource10$Outbound = {
  type: string;
  ref: string;
  sha: string;
  gitUrl: string;
};

/** @internal */
export const GetDeploymentGitSource10$outboundSchema: z.ZodType<
  GetDeploymentGitSource10$Outbound,
  z.ZodTypeDef,
  GetDeploymentGitSource10
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type$outboundSchema,
  ref: z.string(),
  sha: z.string(),
  gitUrl: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSource10$ {
  /** @deprecated use `GetDeploymentGitSource10$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentGitSource10$inboundSchema;
  /** @deprecated use `GetDeploymentGitSource10$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentGitSource10$outboundSchema;
  /** @deprecated use `GetDeploymentGitSource10$Outbound` instead. */
  export type Outbound = GetDeploymentGitSource10$Outbound;
}

export function getDeploymentGitSource10ToJSON(
  getDeploymentGitSource10: GetDeploymentGitSource10,
): string {
  return JSON.stringify(
    GetDeploymentGitSource10$outboundSchema.parse(getDeploymentGitSource10),
  );
}

export function getDeploymentGitSource10FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentGitSource10, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentGitSource10$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentGitSource10' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type
  > = z.nativeEnum(
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type,
  );

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type
  > =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type$ {
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type$outboundSchema;
}

/** @internal */
export const GetDeploymentGitSource9$inboundSchema: z.ZodType<
  GetDeploymentGitSource9,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type$inboundSchema,
  owner: z.string(),
  slug: z.string(),
  ref: z.nullable(z.string()).optional(),
  sha: z.string().optional(),
  prId: z.nullable(z.number()).optional(),
});

/** @internal */
export type GetDeploymentGitSource9$Outbound = {
  type: string;
  owner: string;
  slug: string;
  ref?: string | null | undefined;
  sha?: string | undefined;
  prId?: number | null | undefined;
};

/** @internal */
export const GetDeploymentGitSource9$outboundSchema: z.ZodType<
  GetDeploymentGitSource9$Outbound,
  z.ZodTypeDef,
  GetDeploymentGitSource9
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type$outboundSchema,
  owner: z.string(),
  slug: z.string(),
  ref: z.nullable(z.string()).optional(),
  sha: z.string().optional(),
  prId: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSource9$ {
  /** @deprecated use `GetDeploymentGitSource9$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentGitSource9$inboundSchema;
  /** @deprecated use `GetDeploymentGitSource9$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentGitSource9$outboundSchema;
  /** @deprecated use `GetDeploymentGitSource9$Outbound` instead. */
  export type Outbound = GetDeploymentGitSource9$Outbound;
}

export function getDeploymentGitSource9ToJSON(
  getDeploymentGitSource9: GetDeploymentGitSource9,
): string {
  return JSON.stringify(
    GetDeploymentGitSource9$outboundSchema.parse(getDeploymentGitSource9),
  );
}

export function getDeploymentGitSource9FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentGitSource9, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentGitSource9$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentGitSource9' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type
  > = z.nativeEnum(
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type,
  );

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type
  > =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type$ {
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type$outboundSchema;
}

/** @internal */
export const GetDeploymentGitSource8$inboundSchema: z.ZodType<
  GetDeploymentGitSource8,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type$inboundSchema,
  workspaceUuid: z.string().optional(),
  repoUuid: z.string(),
  ref: z.nullable(z.string()).optional(),
  sha: z.string().optional(),
  prId: z.nullable(z.number()).optional(),
});

/** @internal */
export type GetDeploymentGitSource8$Outbound = {
  type: string;
  workspaceUuid?: string | undefined;
  repoUuid: string;
  ref?: string | null | undefined;
  sha?: string | undefined;
  prId?: number | null | undefined;
};

/** @internal */
export const GetDeploymentGitSource8$outboundSchema: z.ZodType<
  GetDeploymentGitSource8$Outbound,
  z.ZodTypeDef,
  GetDeploymentGitSource8
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type$outboundSchema,
  workspaceUuid: z.string().optional(),
  repoUuid: z.string(),
  ref: z.nullable(z.string()).optional(),
  sha: z.string().optional(),
  prId: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSource8$ {
  /** @deprecated use `GetDeploymentGitSource8$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentGitSource8$inboundSchema;
  /** @deprecated use `GetDeploymentGitSource8$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentGitSource8$outboundSchema;
  /** @deprecated use `GetDeploymentGitSource8$Outbound` instead. */
  export type Outbound = GetDeploymentGitSource8$Outbound;
}

export function getDeploymentGitSource8ToJSON(
  getDeploymentGitSource8: GetDeploymentGitSource8,
): string {
  return JSON.stringify(
    GetDeploymentGitSource8$outboundSchema.parse(getDeploymentGitSource8),
  );
}

export function getDeploymentGitSource8FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentGitSource8, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentGitSource8$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentGitSource8' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type
  > = z.nativeEnum(
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type,
  );

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type
  > =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type$ {
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type$outboundSchema;
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsProjectId$inboundSchema:
  z.ZodType<GetDeploymentGitSourceDeploymentsProjectId, z.ZodTypeDef, unknown> =
    z.union([z.string(), z.number()]);

/** @internal */
export type GetDeploymentGitSourceDeploymentsProjectId$Outbound =
  | string
  | number;

/** @internal */
export const GetDeploymentGitSourceDeploymentsProjectId$outboundSchema:
  z.ZodType<
    GetDeploymentGitSourceDeploymentsProjectId$Outbound,
    z.ZodTypeDef,
    GetDeploymentGitSourceDeploymentsProjectId
  > = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeploymentsProjectId$ {
  /** @deprecated use `GetDeploymentGitSourceDeploymentsProjectId$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeploymentsProjectId$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsProjectId$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeploymentsProjectId$outboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsProjectId$Outbound` instead. */
  export type Outbound = GetDeploymentGitSourceDeploymentsProjectId$Outbound;
}

export function getDeploymentGitSourceDeploymentsProjectIdToJSON(
  getDeploymentGitSourceDeploymentsProjectId:
    GetDeploymentGitSourceDeploymentsProjectId,
): string {
  return JSON.stringify(
    GetDeploymentGitSourceDeploymentsProjectId$outboundSchema.parse(
      getDeploymentGitSourceDeploymentsProjectId,
    ),
  );
}

export function getDeploymentGitSourceDeploymentsProjectIdFromJSON(
  jsonString: string,
): SafeParseResult<
  GetDeploymentGitSourceDeploymentsProjectId,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentGitSourceDeploymentsProjectId$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetDeploymentGitSourceDeploymentsProjectId' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitSource7$inboundSchema: z.ZodType<
  GetDeploymentGitSource7,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type$inboundSchema,
  projectId: z.union([z.string(), z.number()]),
  ref: z.nullable(z.string()).optional(),
  sha: z.string().optional(),
  prId: z.nullable(z.number()).optional(),
});

/** @internal */
export type GetDeploymentGitSource7$Outbound = {
  type: string;
  projectId: string | number;
  ref?: string | null | undefined;
  sha?: string | undefined;
  prId?: number | null | undefined;
};

/** @internal */
export const GetDeploymentGitSource7$outboundSchema: z.ZodType<
  GetDeploymentGitSource7$Outbound,
  z.ZodTypeDef,
  GetDeploymentGitSource7
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type$outboundSchema,
  projectId: z.union([z.string(), z.number()]),
  ref: z.nullable(z.string()).optional(),
  sha: z.string().optional(),
  prId: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSource7$ {
  /** @deprecated use `GetDeploymentGitSource7$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentGitSource7$inboundSchema;
  /** @deprecated use `GetDeploymentGitSource7$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentGitSource7$outboundSchema;
  /** @deprecated use `GetDeploymentGitSource7$Outbound` instead. */
  export type Outbound = GetDeploymentGitSource7$Outbound;
}

export function getDeploymentGitSource7ToJSON(
  getDeploymentGitSource7: GetDeploymentGitSource7,
): string {
  return JSON.stringify(
    GetDeploymentGitSource7$outboundSchema.parse(getDeploymentGitSource7),
  );
}

export function getDeploymentGitSource7FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentGitSource7, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentGitSource7$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentGitSource7' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type
  > = z.nativeEnum(
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type,
  );

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type
  > =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type$ {
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type$outboundSchema;
}

/** @internal */
export const GetDeploymentGitSource6$inboundSchema: z.ZodType<
  GetDeploymentGitSource6,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type$inboundSchema,
  org: z.string(),
  repo: z.string(),
  ref: z.nullable(z.string()).optional(),
  sha: z.string().optional(),
  prId: z.nullable(z.number()).optional(),
});

/** @internal */
export type GetDeploymentGitSource6$Outbound = {
  type: string;
  org: string;
  repo: string;
  ref?: string | null | undefined;
  sha?: string | undefined;
  prId?: number | null | undefined;
};

/** @internal */
export const GetDeploymentGitSource6$outboundSchema: z.ZodType<
  GetDeploymentGitSource6$Outbound,
  z.ZodTypeDef,
  GetDeploymentGitSource6
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type$outboundSchema,
  org: z.string(),
  repo: z.string(),
  ref: z.nullable(z.string()).optional(),
  sha: z.string().optional(),
  prId: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSource6$ {
  /** @deprecated use `GetDeploymentGitSource6$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentGitSource6$inboundSchema;
  /** @deprecated use `GetDeploymentGitSource6$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentGitSource6$outboundSchema;
  /** @deprecated use `GetDeploymentGitSource6$Outbound` instead. */
  export type Outbound = GetDeploymentGitSource6$Outbound;
}

export function getDeploymentGitSource6ToJSON(
  getDeploymentGitSource6: GetDeploymentGitSource6,
): string {
  return JSON.stringify(
    GetDeploymentGitSource6$outboundSchema.parse(getDeploymentGitSource6),
  );
}

export function getDeploymentGitSource6FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentGitSource6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentGitSource6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentGitSource6' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type
  > = z.nativeEnum(
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type,
  );

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type
  > =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type$ {
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type$outboundSchema;
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200RepoId$inboundSchema:
  z.ZodType<
    GetDeploymentGitSourceDeploymentsResponse200RepoId,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.number()]);

/** @internal */
export type GetDeploymentGitSourceDeploymentsResponse200RepoId$Outbound =
  | string
  | number;

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200RepoId$outboundSchema:
  z.ZodType<
    GetDeploymentGitSourceDeploymentsResponse200RepoId$Outbound,
    z.ZodTypeDef,
    GetDeploymentGitSourceDeploymentsResponse200RepoId
  > = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeploymentsResponse200RepoId$ {
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200RepoId$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200RepoId$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200RepoId$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200RepoId$outboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200RepoId$Outbound` instead. */
  export type Outbound =
    GetDeploymentGitSourceDeploymentsResponse200RepoId$Outbound;
}

export function getDeploymentGitSourceDeploymentsResponse200RepoIdToJSON(
  getDeploymentGitSourceDeploymentsResponse200RepoId:
    GetDeploymentGitSourceDeploymentsResponse200RepoId,
): string {
  return JSON.stringify(
    GetDeploymentGitSourceDeploymentsResponse200RepoId$outboundSchema.parse(
      getDeploymentGitSourceDeploymentsResponse200RepoId,
    ),
  );
}

export function getDeploymentGitSourceDeploymentsResponse200RepoIdFromJSON(
  jsonString: string,
): SafeParseResult<
  GetDeploymentGitSourceDeploymentsResponse200RepoId,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentGitSourceDeploymentsResponse200RepoId$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetDeploymentGitSourceDeploymentsResponse200RepoId' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitSource5$inboundSchema: z.ZodType<
  GetDeploymentGitSource5,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type$inboundSchema,
  repoId: z.union([z.string(), z.number()]),
  ref: z.nullable(z.string()).optional(),
  sha: z.string().optional(),
  prId: z.nullable(z.number()).optional(),
});

/** @internal */
export type GetDeploymentGitSource5$Outbound = {
  type: string;
  repoId: string | number;
  ref?: string | null | undefined;
  sha?: string | undefined;
  prId?: number | null | undefined;
};

/** @internal */
export const GetDeploymentGitSource5$outboundSchema: z.ZodType<
  GetDeploymentGitSource5$Outbound,
  z.ZodTypeDef,
  GetDeploymentGitSource5
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type$outboundSchema,
  repoId: z.union([z.string(), z.number()]),
  ref: z.nullable(z.string()).optional(),
  sha: z.string().optional(),
  prId: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSource5$ {
  /** @deprecated use `GetDeploymentGitSource5$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentGitSource5$inboundSchema;
  /** @deprecated use `GetDeploymentGitSource5$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentGitSource5$outboundSchema;
  /** @deprecated use `GetDeploymentGitSource5$Outbound` instead. */
  export type Outbound = GetDeploymentGitSource5$Outbound;
}

export function getDeploymentGitSource5ToJSON(
  getDeploymentGitSource5: GetDeploymentGitSource5,
): string {
  return JSON.stringify(
    GetDeploymentGitSource5$outboundSchema.parse(getDeploymentGitSource5),
  );
}

export function getDeploymentGitSource5FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentGitSource5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentGitSource5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentGitSource5' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type
  > = z.nativeEnum(
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type,
  );

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type
  > =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type$ {
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type$outboundSchema;
}

/** @internal */
export const GetDeploymentGitSource4$inboundSchema: z.ZodType<
  GetDeploymentGitSource4,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type$inboundSchema,
  host: z.string(),
  org: z.string(),
  repo: z.string(),
  ref: z.nullable(z.string()).optional(),
  sha: z.string().optional(),
  prId: z.nullable(z.number()).optional(),
});

/** @internal */
export type GetDeploymentGitSource4$Outbound = {
  type: string;
  host: string;
  org: string;
  repo: string;
  ref?: string | null | undefined;
  sha?: string | undefined;
  prId?: number | null | undefined;
};

/** @internal */
export const GetDeploymentGitSource4$outboundSchema: z.ZodType<
  GetDeploymentGitSource4$Outbound,
  z.ZodTypeDef,
  GetDeploymentGitSource4
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type$outboundSchema,
  host: z.string(),
  org: z.string(),
  repo: z.string(),
  ref: z.nullable(z.string()).optional(),
  sha: z.string().optional(),
  prId: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSource4$ {
  /** @deprecated use `GetDeploymentGitSource4$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentGitSource4$inboundSchema;
  /** @deprecated use `GetDeploymentGitSource4$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentGitSource4$outboundSchema;
  /** @deprecated use `GetDeploymentGitSource4$Outbound` instead. */
  export type Outbound = GetDeploymentGitSource4$Outbound;
}

export function getDeploymentGitSource4ToJSON(
  getDeploymentGitSource4: GetDeploymentGitSource4,
): string {
  return JSON.stringify(
    GetDeploymentGitSource4$outboundSchema.parse(getDeploymentGitSource4),
  );
}

export function getDeploymentGitSource4FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentGitSource4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentGitSource4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentGitSource4' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type
  > = z.nativeEnum(
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type,
  );

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type
  > =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type$ {
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type$outboundSchema;
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponseRepoId$inboundSchema:
  z.ZodType<
    GetDeploymentGitSourceDeploymentsResponseRepoId,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.number()]);

/** @internal */
export type GetDeploymentGitSourceDeploymentsResponseRepoId$Outbound =
  | string
  | number;

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponseRepoId$outboundSchema:
  z.ZodType<
    GetDeploymentGitSourceDeploymentsResponseRepoId$Outbound,
    z.ZodTypeDef,
    GetDeploymentGitSourceDeploymentsResponseRepoId
  > = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeploymentsResponseRepoId$ {
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponseRepoId$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeploymentsResponseRepoId$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponseRepoId$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeploymentsResponseRepoId$outboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponseRepoId$Outbound` instead. */
  export type Outbound =
    GetDeploymentGitSourceDeploymentsResponseRepoId$Outbound;
}

export function getDeploymentGitSourceDeploymentsResponseRepoIdToJSON(
  getDeploymentGitSourceDeploymentsResponseRepoId:
    GetDeploymentGitSourceDeploymentsResponseRepoId,
): string {
  return JSON.stringify(
    GetDeploymentGitSourceDeploymentsResponseRepoId$outboundSchema.parse(
      getDeploymentGitSourceDeploymentsResponseRepoId,
    ),
  );
}

export function getDeploymentGitSourceDeploymentsResponseRepoIdFromJSON(
  jsonString: string,
): SafeParseResult<
  GetDeploymentGitSourceDeploymentsResponseRepoId,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentGitSourceDeploymentsResponseRepoId$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetDeploymentGitSourceDeploymentsResponseRepoId' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitSource3$inboundSchema: z.ZodType<
  GetDeploymentGitSource3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type$inboundSchema,
  host: z.string(),
  repoId: z.union([z.string(), z.number()]),
  ref: z.nullable(z.string()).optional(),
  sha: z.string().optional(),
  prId: z.nullable(z.number()).optional(),
});

/** @internal */
export type GetDeploymentGitSource3$Outbound = {
  type: string;
  host: string;
  repoId: string | number;
  ref?: string | null | undefined;
  sha?: string | undefined;
  prId?: number | null | undefined;
};

/** @internal */
export const GetDeploymentGitSource3$outboundSchema: z.ZodType<
  GetDeploymentGitSource3$Outbound,
  z.ZodTypeDef,
  GetDeploymentGitSource3
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type$outboundSchema,
  host: z.string(),
  repoId: z.union([z.string(), z.number()]),
  ref: z.nullable(z.string()).optional(),
  sha: z.string().optional(),
  prId: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSource3$ {
  /** @deprecated use `GetDeploymentGitSource3$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentGitSource3$inboundSchema;
  /** @deprecated use `GetDeploymentGitSource3$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentGitSource3$outboundSchema;
  /** @deprecated use `GetDeploymentGitSource3$Outbound` instead. */
  export type Outbound = GetDeploymentGitSource3$Outbound;
}

export function getDeploymentGitSource3ToJSON(
  getDeploymentGitSource3: GetDeploymentGitSource3,
): string {
  return JSON.stringify(
    GetDeploymentGitSource3$outboundSchema.parse(getDeploymentGitSource3),
  );
}

export function getDeploymentGitSource3FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentGitSource3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentGitSource3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentGitSource3' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type
  > = z.nativeEnum(
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type,
  );

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type
  > =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type$ {
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type$outboundSchema;
}

/** @internal */
export const GetDeploymentGitSource2$inboundSchema: z.ZodType<
  GetDeploymentGitSource2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type$inboundSchema,
  org: z.string(),
  repo: z.string(),
  ref: z.nullable(z.string()).optional(),
  sha: z.string().optional(),
  prId: z.nullable(z.number()).optional(),
});

/** @internal */
export type GetDeploymentGitSource2$Outbound = {
  type: string;
  org: string;
  repo: string;
  ref?: string | null | undefined;
  sha?: string | undefined;
  prId?: number | null | undefined;
};

/** @internal */
export const GetDeploymentGitSource2$outboundSchema: z.ZodType<
  GetDeploymentGitSource2$Outbound,
  z.ZodTypeDef,
  GetDeploymentGitSource2
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type$outboundSchema,
  org: z.string(),
  repo: z.string(),
  ref: z.nullable(z.string()).optional(),
  sha: z.string().optional(),
  prId: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSource2$ {
  /** @deprecated use `GetDeploymentGitSource2$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentGitSource2$inboundSchema;
  /** @deprecated use `GetDeploymentGitSource2$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentGitSource2$outboundSchema;
  /** @deprecated use `GetDeploymentGitSource2$Outbound` instead. */
  export type Outbound = GetDeploymentGitSource2$Outbound;
}

export function getDeploymentGitSource2ToJSON(
  getDeploymentGitSource2: GetDeploymentGitSource2,
): string {
  return JSON.stringify(
    GetDeploymentGitSource2$outboundSchema.parse(getDeploymentGitSource2),
  );
}

export function getDeploymentGitSource2FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentGitSource2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentGitSource2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentGitSource2' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type
  > = z.nativeEnum(
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type,
  );

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type
  > =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type$ {
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type$outboundSchema;
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsRepoId$inboundSchema: z.ZodType<
  GetDeploymentGitSourceDeploymentsRepoId,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type GetDeploymentGitSourceDeploymentsRepoId$Outbound = string | number;

/** @internal */
export const GetDeploymentGitSourceDeploymentsRepoId$outboundSchema: z.ZodType<
  GetDeploymentGitSourceDeploymentsRepoId$Outbound,
  z.ZodTypeDef,
  GetDeploymentGitSourceDeploymentsRepoId
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeploymentsRepoId$ {
  /** @deprecated use `GetDeploymentGitSourceDeploymentsRepoId$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeploymentsRepoId$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsRepoId$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeploymentsRepoId$outboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsRepoId$Outbound` instead. */
  export type Outbound = GetDeploymentGitSourceDeploymentsRepoId$Outbound;
}

export function getDeploymentGitSourceDeploymentsRepoIdToJSON(
  getDeploymentGitSourceDeploymentsRepoId:
    GetDeploymentGitSourceDeploymentsRepoId,
): string {
  return JSON.stringify(
    GetDeploymentGitSourceDeploymentsRepoId$outboundSchema.parse(
      getDeploymentGitSourceDeploymentsRepoId,
    ),
  );
}

export function getDeploymentGitSourceDeploymentsRepoIdFromJSON(
  jsonString: string,
): SafeParseResult<
  GetDeploymentGitSourceDeploymentsRepoId,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentGitSourceDeploymentsRepoId$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetDeploymentGitSourceDeploymentsRepoId' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitSource1$inboundSchema: z.ZodType<
  GetDeploymentGitSource1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type$inboundSchema,
  repoId: z.union([z.string(), z.number()]),
  ref: z.nullable(z.string()).optional(),
  sha: z.string().optional(),
  prId: z.nullable(z.number()).optional(),
});

/** @internal */
export type GetDeploymentGitSource1$Outbound = {
  type: string;
  repoId: string | number;
  ref?: string | null | undefined;
  sha?: string | undefined;
  prId?: number | null | undefined;
};

/** @internal */
export const GetDeploymentGitSource1$outboundSchema: z.ZodType<
  GetDeploymentGitSource1$Outbound,
  z.ZodTypeDef,
  GetDeploymentGitSource1
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type$outboundSchema,
  repoId: z.union([z.string(), z.number()]),
  ref: z.nullable(z.string()).optional(),
  sha: z.string().optional(),
  prId: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSource1$ {
  /** @deprecated use `GetDeploymentGitSource1$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentGitSource1$inboundSchema;
  /** @deprecated use `GetDeploymentGitSource1$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentGitSource1$outboundSchema;
  /** @deprecated use `GetDeploymentGitSource1$Outbound` instead. */
  export type Outbound = GetDeploymentGitSource1$Outbound;
}

export function getDeploymentGitSource1ToJSON(
  getDeploymentGitSource1: GetDeploymentGitSource1,
): string {
  return JSON.stringify(
    GetDeploymentGitSource1$outboundSchema.parse(getDeploymentGitSource1),
  );
}

export function getDeploymentGitSource1FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentGitSource1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentGitSource1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentGitSource1' from JSON`,
  );
}

/** @internal */
export const ResponseBodyGitSource$inboundSchema: z.ZodType<
  ResponseBodyGitSource,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetDeploymentGitSource12$inboundSchema),
  z.lazy(() => GetDeploymentGitSource15$inboundSchema),
  z.lazy(() => GetDeploymentGitSource4$inboundSchema),
  z.lazy(() => GetDeploymentGitSource10$inboundSchema),
  z.lazy(() => GetDeploymentGitSource11$inboundSchema),
  z.lazy(() => GetDeploymentGitSource13$inboundSchema),
  z.lazy(() => GetDeploymentGitSource14$inboundSchema),
  z.lazy(() => GetDeploymentGitSource2$inboundSchema),
  z.lazy(() => GetDeploymentGitSource3$inboundSchema),
  z.lazy(() => GetDeploymentGitSource6$inboundSchema),
  z.lazy(() => GetDeploymentGitSource9$inboundSchema),
  z.lazy(() => GetDeploymentGitSource1$inboundSchema),
  z.lazy(() => GetDeploymentGitSource5$inboundSchema),
  z.lazy(() => GetDeploymentGitSource7$inboundSchema),
  z.lazy(() => GetDeploymentGitSource8$inboundSchema),
]);

/** @internal */
export type ResponseBodyGitSource$Outbound =
  | GetDeploymentGitSource12$Outbound
  | GetDeploymentGitSource15$Outbound
  | GetDeploymentGitSource4$Outbound
  | GetDeploymentGitSource10$Outbound
  | GetDeploymentGitSource11$Outbound
  | GetDeploymentGitSource13$Outbound
  | GetDeploymentGitSource14$Outbound
  | GetDeploymentGitSource2$Outbound
  | GetDeploymentGitSource3$Outbound
  | GetDeploymentGitSource6$Outbound
  | GetDeploymentGitSource9$Outbound
  | GetDeploymentGitSource1$Outbound
  | GetDeploymentGitSource5$Outbound
  | GetDeploymentGitSource7$Outbound
  | GetDeploymentGitSource8$Outbound;

/** @internal */
export const ResponseBodyGitSource$outboundSchema: z.ZodType<
  ResponseBodyGitSource$Outbound,
  z.ZodTypeDef,
  ResponseBodyGitSource
> = z.union([
  z.lazy(() => GetDeploymentGitSource12$outboundSchema),
  z.lazy(() => GetDeploymentGitSource15$outboundSchema),
  z.lazy(() => GetDeploymentGitSource4$outboundSchema),
  z.lazy(() => GetDeploymentGitSource10$outboundSchema),
  z.lazy(() => GetDeploymentGitSource11$outboundSchema),
  z.lazy(() => GetDeploymentGitSource13$outboundSchema),
  z.lazy(() => GetDeploymentGitSource14$outboundSchema),
  z.lazy(() => GetDeploymentGitSource2$outboundSchema),
  z.lazy(() => GetDeploymentGitSource3$outboundSchema),
  z.lazy(() => GetDeploymentGitSource6$outboundSchema),
  z.lazy(() => GetDeploymentGitSource9$outboundSchema),
  z.lazy(() => GetDeploymentGitSource1$outboundSchema),
  z.lazy(() => GetDeploymentGitSource5$outboundSchema),
  z.lazy(() => GetDeploymentGitSource7$outboundSchema),
  z.lazy(() => GetDeploymentGitSource8$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyGitSource$ {
  /** @deprecated use `ResponseBodyGitSource$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyGitSource$inboundSchema;
  /** @deprecated use `ResponseBodyGitSource$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyGitSource$outboundSchema;
  /** @deprecated use `ResponseBodyGitSource$Outbound` instead. */
  export type Outbound = ResponseBodyGitSource$Outbound;
}

export function responseBodyGitSourceToJSON(
  responseBodyGitSource: ResponseBodyGitSource,
): string {
  return JSON.stringify(
    ResponseBodyGitSource$outboundSchema.parse(responseBodyGitSource),
  );
}

export function responseBodyGitSourceFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyGitSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyGitSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyGitSource' from JSON`,
  );
}

/** @internal */
export const GetDeploymentResponseBodyNodeVersion$inboundSchema:
  z.ZodNativeEnum<typeof GetDeploymentResponseBodyNodeVersion> = z.nativeEnum(
    GetDeploymentResponseBodyNodeVersion,
  );

/** @internal */
export const GetDeploymentResponseBodyNodeVersion$outboundSchema:
  z.ZodNativeEnum<typeof GetDeploymentResponseBodyNodeVersion> =
    GetDeploymentResponseBodyNodeVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentResponseBodyNodeVersion$ {
  /** @deprecated use `GetDeploymentResponseBodyNodeVersion$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentResponseBodyNodeVersion$inboundSchema;
  /** @deprecated use `GetDeploymentResponseBodyNodeVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentResponseBodyNodeVersion$outboundSchema;
}

/** @internal */
export const GetDeploymentResponseBodyProject$inboundSchema: z.ZodType<
  GetDeploymentResponseBodyProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  framework: z.nullable(z.string()).optional(),
});

/** @internal */
export type GetDeploymentResponseBodyProject$Outbound = {
  id: string;
  name: string;
  framework?: string | null | undefined;
};

/** @internal */
export const GetDeploymentResponseBodyProject$outboundSchema: z.ZodType<
  GetDeploymentResponseBodyProject$Outbound,
  z.ZodTypeDef,
  GetDeploymentResponseBodyProject
> = z.object({
  id: z.string(),
  name: z.string(),
  framework: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentResponseBodyProject$ {
  /** @deprecated use `GetDeploymentResponseBodyProject$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentResponseBodyProject$inboundSchema;
  /** @deprecated use `GetDeploymentResponseBodyProject$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentResponseBodyProject$outboundSchema;
  /** @deprecated use `GetDeploymentResponseBodyProject$Outbound` instead. */
  export type Outbound = GetDeploymentResponseBodyProject$Outbound;
}

export function getDeploymentResponseBodyProjectToJSON(
  getDeploymentResponseBodyProject: GetDeploymentResponseBodyProject,
): string {
  return JSON.stringify(
    GetDeploymentResponseBodyProject$outboundSchema.parse(
      getDeploymentResponseBodyProject,
    ),
  );
}

export function getDeploymentResponseBodyProjectFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentResponseBodyProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentResponseBodyProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentResponseBodyProject' from JSON`,
  );
}

/** @internal */
export const GetDeploymentResponseBodyReadySubstate$inboundSchema:
  z.ZodNativeEnum<typeof GetDeploymentResponseBodyReadySubstate> = z.nativeEnum(
    GetDeploymentResponseBodyReadySubstate,
  );

/** @internal */
export const GetDeploymentResponseBodyReadySubstate$outboundSchema:
  z.ZodNativeEnum<typeof GetDeploymentResponseBodyReadySubstate> =
    GetDeploymentResponseBodyReadySubstate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentResponseBodyReadySubstate$ {
  /** @deprecated use `GetDeploymentResponseBodyReadySubstate$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentResponseBodyReadySubstate$inboundSchema;
  /** @deprecated use `GetDeploymentResponseBodyReadySubstate$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentResponseBodyReadySubstate$outboundSchema;
}

/** @internal */
export const GetDeploymentResponseBodySource$inboundSchema: z.ZodNativeEnum<
  typeof GetDeploymentResponseBodySource
> = z.nativeEnum(GetDeploymentResponseBodySource);

/** @internal */
export const GetDeploymentResponseBodySource$outboundSchema: z.ZodNativeEnum<
  typeof GetDeploymentResponseBodySource
> = GetDeploymentResponseBodySource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentResponseBodySource$ {
  /** @deprecated use `GetDeploymentResponseBodySource$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentResponseBodySource$inboundSchema;
  /** @deprecated use `GetDeploymentResponseBodySource$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentResponseBodySource$outboundSchema;
}

/** @internal */
export const GetDeploymentResponseBodyTarget$inboundSchema: z.ZodNativeEnum<
  typeof GetDeploymentResponseBodyTarget
> = z.nativeEnum(GetDeploymentResponseBodyTarget);

/** @internal */
export const GetDeploymentResponseBodyTarget$outboundSchema: z.ZodNativeEnum<
  typeof GetDeploymentResponseBodyTarget
> = GetDeploymentResponseBodyTarget$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentResponseBodyTarget$ {
  /** @deprecated use `GetDeploymentResponseBodyTarget$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentResponseBodyTarget$inboundSchema;
  /** @deprecated use `GetDeploymentResponseBodyTarget$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentResponseBodyTarget$outboundSchema;
}

/** @internal */
export const GetDeploymentResponseBodyOidcTokenClaims$inboundSchema: z.ZodType<
  GetDeploymentResponseBodyOidcTokenClaims,
  z.ZodTypeDef,
  unknown
> = z.object({
  iss: z.string(),
  sub: z.string(),
  scope: z.string(),
  aud: z.string(),
  owner: z.string(),
  owner_id: z.string(),
  project: z.string(),
  project_id: z.string(),
  environment: z.string(),
}).transform((v) => {
  return remap$(v, {
    "owner_id": "ownerId",
    "project_id": "projectId",
  });
});

/** @internal */
export type GetDeploymentResponseBodyOidcTokenClaims$Outbound = {
  iss: string;
  sub: string;
  scope: string;
  aud: string;
  owner: string;
  owner_id: string;
  project: string;
  project_id: string;
  environment: string;
};

/** @internal */
export const GetDeploymentResponseBodyOidcTokenClaims$outboundSchema: z.ZodType<
  GetDeploymentResponseBodyOidcTokenClaims$Outbound,
  z.ZodTypeDef,
  GetDeploymentResponseBodyOidcTokenClaims
> = z.object({
  iss: z.string(),
  sub: z.string(),
  scope: z.string(),
  aud: z.string(),
  owner: z.string(),
  ownerId: z.string(),
  project: z.string(),
  projectId: z.string(),
  environment: z.string(),
}).transform((v) => {
  return remap$(v, {
    ownerId: "owner_id",
    projectId: "project_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentResponseBodyOidcTokenClaims$ {
  /** @deprecated use `GetDeploymentResponseBodyOidcTokenClaims$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentResponseBodyOidcTokenClaims$inboundSchema;
  /** @deprecated use `GetDeploymentResponseBodyOidcTokenClaims$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentResponseBodyOidcTokenClaims$outboundSchema;
  /** @deprecated use `GetDeploymentResponseBodyOidcTokenClaims$Outbound` instead. */
  export type Outbound = GetDeploymentResponseBodyOidcTokenClaims$Outbound;
}

export function getDeploymentResponseBodyOidcTokenClaimsToJSON(
  getDeploymentResponseBodyOidcTokenClaims:
    GetDeploymentResponseBodyOidcTokenClaims,
): string {
  return JSON.stringify(
    GetDeploymentResponseBodyOidcTokenClaims$outboundSchema.parse(
      getDeploymentResponseBodyOidcTokenClaims,
    ),
  );
}

export function getDeploymentResponseBodyOidcTokenClaimsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetDeploymentResponseBodyOidcTokenClaims,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentResponseBodyOidcTokenClaims$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetDeploymentResponseBodyOidcTokenClaims' from JSON`,
  );
}

/** @internal */
export const GetDeploymentResponseBody2$inboundSchema: z.ZodType<
  GetDeploymentResponseBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  alias: z.array(z.string()).optional(),
  aliasAssigned: z.boolean(),
  bootedAt: z.number(),
  buildingAt: z.number(),
  buildContainerFinishedAt: z.number().optional(),
  buildSkipped: z.boolean(),
  creator: z.lazy(() => GetDeploymentResponseBodyCreator$inboundSchema),
  initReadyAt: z.number().optional(),
  isFirstBranchDeployment: z.boolean().optional(),
  lambdas: z.array(z.lazy(() => ResponseBodyLambdas$inboundSchema)).optional(),
  public: z.boolean(),
  ready: z.number().optional(),
  status: GetDeploymentResponseBodyStatus$inboundSchema,
  team: z.lazy(() => ResponseBodyTeam$inboundSchema).optional(),
  userAliases: z.array(z.string()).optional(),
  previewCommentsEnabled: z.boolean().optional(),
  ttyBuildLogs: z.boolean().optional(),
  customEnvironment: z.union([
    z.lazy(() => GetDeploymentCustomEnvironment1$inboundSchema),
    z.lazy(() => GetDeploymentCustomEnvironment2$inboundSchema),
  ]).optional(),
  oomReport: ResponseBodyOomReport$inboundSchema.optional(),
  aliasWarning: z.nullable(z.lazy(() => ResponseBodyAliasWarning$inboundSchema))
    .optional(),
  id: z.string(),
  createdAt: z.number(),
  readyState: GetDeploymentResponseBodyReadyState$inboundSchema,
  name: z.string(),
  type: GetDeploymentResponseBodyDeploymentsType$inboundSchema,
  aliasError: z.nullable(
    z.lazy(() => GetDeploymentResponseBodyAliasError$inboundSchema),
  ).optional(),
  aliasFinal: z.nullable(z.string()).optional(),
  autoAssignCustomDomains: z.boolean().optional(),
  automaticAliases: z.array(z.string()).optional(),
  buildErrorAt: z.number().optional(),
  checksState: GetDeploymentResponseBodyChecksState$inboundSchema.optional(),
  checksConclusion: GetDeploymentResponseBodyChecksConclusion$inboundSchema
    .optional(),
  deletedAt: z.nullable(z.number()).optional(),
  defaultRoute: z.string().optional(),
  canceledAt: z.number().optional(),
  errorCode: z.string().optional(),
  errorLink: z.string().optional(),
  errorMessage: z.nullable(z.string()).optional(),
  errorStep: z.string().optional(),
  passiveRegions: z.array(z.string()).optional(),
  gitSource: z.union([
    z.lazy(() => GetDeploymentGitSource12$inboundSchema),
    z.lazy(() => GetDeploymentGitSource15$inboundSchema),
    z.lazy(() => GetDeploymentGitSource4$inboundSchema),
    z.lazy(() => GetDeploymentGitSource10$inboundSchema),
    z.lazy(() => GetDeploymentGitSource11$inboundSchema),
    z.lazy(() => GetDeploymentGitSource13$inboundSchema),
    z.lazy(() => GetDeploymentGitSource14$inboundSchema),
    z.lazy(() => GetDeploymentGitSource2$inboundSchema),
    z.lazy(() => GetDeploymentGitSource3$inboundSchema),
    z.lazy(() => GetDeploymentGitSource6$inboundSchema),
    z.lazy(() => GetDeploymentGitSource9$inboundSchema),
    z.lazy(() => GetDeploymentGitSource1$inboundSchema),
    z.lazy(() => GetDeploymentGitSource5$inboundSchema),
    z.lazy(() => GetDeploymentGitSource7$inboundSchema),
    z.lazy(() => GetDeploymentGitSource8$inboundSchema),
  ]).optional(),
  meta: z.record(z.string()),
  originCacheRegion: z.string().optional(),
  nodeVersion: GetDeploymentResponseBodyNodeVersion$inboundSchema.optional(),
  project: z.lazy(() => GetDeploymentResponseBodyProject$inboundSchema)
    .optional(),
  readySubstate: GetDeploymentResponseBodyReadySubstate$inboundSchema
    .optional(),
  regions: z.array(z.string()),
  softDeletedByRetention: z.boolean().optional(),
  source: GetDeploymentResponseBodySource$inboundSchema.optional(),
  target: z.nullable(GetDeploymentResponseBodyTarget$inboundSchema).optional(),
  undeletedAt: z.number().optional(),
  url: z.string(),
  version: z.number(),
  oidcTokenClaims: z.lazy(() =>
    GetDeploymentResponseBodyOidcTokenClaims$inboundSchema
  ).optional(),
});

/** @internal */
export type GetDeploymentResponseBody2$Outbound = {
  alias?: Array<string> | undefined;
  aliasAssigned: boolean;
  bootedAt: number;
  buildingAt: number;
  buildContainerFinishedAt?: number | undefined;
  buildSkipped: boolean;
  creator: GetDeploymentResponseBodyCreator$Outbound;
  initReadyAt?: number | undefined;
  isFirstBranchDeployment?: boolean | undefined;
  lambdas?: Array<ResponseBodyLambdas$Outbound> | undefined;
  public: boolean;
  ready?: number | undefined;
  status: string;
  team?: ResponseBodyTeam$Outbound | undefined;
  userAliases?: Array<string> | undefined;
  previewCommentsEnabled?: boolean | undefined;
  ttyBuildLogs?: boolean | undefined;
  customEnvironment?:
    | GetDeploymentCustomEnvironment1$Outbound
    | GetDeploymentCustomEnvironment2$Outbound
    | undefined;
  oomReport?: string | undefined;
  aliasWarning?: ResponseBodyAliasWarning$Outbound | null | undefined;
  id: string;
  createdAt: number;
  readyState: string;
  name: string;
  type: string;
  aliasError?: GetDeploymentResponseBodyAliasError$Outbound | null | undefined;
  aliasFinal?: string | null | undefined;
  autoAssignCustomDomains?: boolean | undefined;
  automaticAliases?: Array<string> | undefined;
  buildErrorAt?: number | undefined;
  checksState?: string | undefined;
  checksConclusion?: string | undefined;
  deletedAt?: number | null | undefined;
  defaultRoute?: string | undefined;
  canceledAt?: number | undefined;
  errorCode?: string | undefined;
  errorLink?: string | undefined;
  errorMessage?: string | null | undefined;
  errorStep?: string | undefined;
  passiveRegions?: Array<string> | undefined;
  gitSource?:
    | GetDeploymentGitSource12$Outbound
    | GetDeploymentGitSource15$Outbound
    | GetDeploymentGitSource4$Outbound
    | GetDeploymentGitSource10$Outbound
    | GetDeploymentGitSource11$Outbound
    | GetDeploymentGitSource13$Outbound
    | GetDeploymentGitSource14$Outbound
    | GetDeploymentGitSource2$Outbound
    | GetDeploymentGitSource3$Outbound
    | GetDeploymentGitSource6$Outbound
    | GetDeploymentGitSource9$Outbound
    | GetDeploymentGitSource1$Outbound
    | GetDeploymentGitSource5$Outbound
    | GetDeploymentGitSource7$Outbound
    | GetDeploymentGitSource8$Outbound
    | undefined;
  meta: { [k: string]: string };
  originCacheRegion?: string | undefined;
  nodeVersion?: string | undefined;
  project?: GetDeploymentResponseBodyProject$Outbound | undefined;
  readySubstate?: string | undefined;
  regions: Array<string>;
  softDeletedByRetention?: boolean | undefined;
  source?: string | undefined;
  target?: string | null | undefined;
  undeletedAt?: number | undefined;
  url: string;
  version: number;
  oidcTokenClaims?:
    | GetDeploymentResponseBodyOidcTokenClaims$Outbound
    | undefined;
};

/** @internal */
export const GetDeploymentResponseBody2$outboundSchema: z.ZodType<
  GetDeploymentResponseBody2$Outbound,
  z.ZodTypeDef,
  GetDeploymentResponseBody2
> = z.object({
  alias: z.array(z.string()).optional(),
  aliasAssigned: z.boolean(),
  bootedAt: z.number(),
  buildingAt: z.number(),
  buildContainerFinishedAt: z.number().optional(),
  buildSkipped: z.boolean(),
  creator: z.lazy(() => GetDeploymentResponseBodyCreator$outboundSchema),
  initReadyAt: z.number().optional(),
  isFirstBranchDeployment: z.boolean().optional(),
  lambdas: z.array(z.lazy(() => ResponseBodyLambdas$outboundSchema)).optional(),
  public: z.boolean(),
  ready: z.number().optional(),
  status: GetDeploymentResponseBodyStatus$outboundSchema,
  team: z.lazy(() => ResponseBodyTeam$outboundSchema).optional(),
  userAliases: z.array(z.string()).optional(),
  previewCommentsEnabled: z.boolean().optional(),
  ttyBuildLogs: z.boolean().optional(),
  customEnvironment: z.union([
    z.lazy(() => GetDeploymentCustomEnvironment1$outboundSchema),
    z.lazy(() => GetDeploymentCustomEnvironment2$outboundSchema),
  ]).optional(),
  oomReport: ResponseBodyOomReport$outboundSchema.optional(),
  aliasWarning: z.nullable(
    z.lazy(() => ResponseBodyAliasWarning$outboundSchema),
  ).optional(),
  id: z.string(),
  createdAt: z.number(),
  readyState: GetDeploymentResponseBodyReadyState$outboundSchema,
  name: z.string(),
  type: GetDeploymentResponseBodyDeploymentsType$outboundSchema,
  aliasError: z.nullable(
    z.lazy(() => GetDeploymentResponseBodyAliasError$outboundSchema),
  ).optional(),
  aliasFinal: z.nullable(z.string()).optional(),
  autoAssignCustomDomains: z.boolean().optional(),
  automaticAliases: z.array(z.string()).optional(),
  buildErrorAt: z.number().optional(),
  checksState: GetDeploymentResponseBodyChecksState$outboundSchema.optional(),
  checksConclusion: GetDeploymentResponseBodyChecksConclusion$outboundSchema
    .optional(),
  deletedAt: z.nullable(z.number()).optional(),
  defaultRoute: z.string().optional(),
  canceledAt: z.number().optional(),
  errorCode: z.string().optional(),
  errorLink: z.string().optional(),
  errorMessage: z.nullable(z.string()).optional(),
  errorStep: z.string().optional(),
  passiveRegions: z.array(z.string()).optional(),
  gitSource: z.union([
    z.lazy(() => GetDeploymentGitSource12$outboundSchema),
    z.lazy(() => GetDeploymentGitSource15$outboundSchema),
    z.lazy(() => GetDeploymentGitSource4$outboundSchema),
    z.lazy(() => GetDeploymentGitSource10$outboundSchema),
    z.lazy(() => GetDeploymentGitSource11$outboundSchema),
    z.lazy(() => GetDeploymentGitSource13$outboundSchema),
    z.lazy(() => GetDeploymentGitSource14$outboundSchema),
    z.lazy(() => GetDeploymentGitSource2$outboundSchema),
    z.lazy(() => GetDeploymentGitSource3$outboundSchema),
    z.lazy(() => GetDeploymentGitSource6$outboundSchema),
    z.lazy(() => GetDeploymentGitSource9$outboundSchema),
    z.lazy(() => GetDeploymentGitSource1$outboundSchema),
    z.lazy(() => GetDeploymentGitSource5$outboundSchema),
    z.lazy(() => GetDeploymentGitSource7$outboundSchema),
    z.lazy(() => GetDeploymentGitSource8$outboundSchema),
  ]).optional(),
  meta: z.record(z.string()),
  originCacheRegion: z.string().optional(),
  nodeVersion: GetDeploymentResponseBodyNodeVersion$outboundSchema.optional(),
  project: z.lazy(() => GetDeploymentResponseBodyProject$outboundSchema)
    .optional(),
  readySubstate: GetDeploymentResponseBodyReadySubstate$outboundSchema
    .optional(),
  regions: z.array(z.string()),
  softDeletedByRetention: z.boolean().optional(),
  source: GetDeploymentResponseBodySource$outboundSchema.optional(),
  target: z.nullable(GetDeploymentResponseBodyTarget$outboundSchema).optional(),
  undeletedAt: z.number().optional(),
  url: z.string(),
  version: z.number(),
  oidcTokenClaims: z.lazy(() =>
    GetDeploymentResponseBodyOidcTokenClaims$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentResponseBody2$ {
  /** @deprecated use `GetDeploymentResponseBody2$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentResponseBody2$inboundSchema;
  /** @deprecated use `GetDeploymentResponseBody2$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentResponseBody2$outboundSchema;
  /** @deprecated use `GetDeploymentResponseBody2$Outbound` instead. */
  export type Outbound = GetDeploymentResponseBody2$Outbound;
}

export function getDeploymentResponseBody2ToJSON(
  getDeploymentResponseBody2: GetDeploymentResponseBody2,
): string {
  return JSON.stringify(
    GetDeploymentResponseBody2$outboundSchema.parse(getDeploymentResponseBody2),
  );
}

export function getDeploymentResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentResponseBody2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentResponseBody2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentResponseBody2' from JSON`,
  );
}

/** @internal */
export const ResponseBodyAliasAssignedAt$inboundSchema: z.ZodType<
  ResponseBodyAliasAssignedAt,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.boolean()]);

/** @internal */
export type ResponseBodyAliasAssignedAt$Outbound = number | boolean;

/** @internal */
export const ResponseBodyAliasAssignedAt$outboundSchema: z.ZodType<
  ResponseBodyAliasAssignedAt$Outbound,
  z.ZodTypeDef,
  ResponseBodyAliasAssignedAt
> = z.union([z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyAliasAssignedAt$ {
  /** @deprecated use `ResponseBodyAliasAssignedAt$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyAliasAssignedAt$inboundSchema;
  /** @deprecated use `ResponseBodyAliasAssignedAt$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyAliasAssignedAt$outboundSchema;
  /** @deprecated use `ResponseBodyAliasAssignedAt$Outbound` instead. */
  export type Outbound = ResponseBodyAliasAssignedAt$Outbound;
}

export function responseBodyAliasAssignedAtToJSON(
  responseBodyAliasAssignedAt: ResponseBodyAliasAssignedAt,
): string {
  return JSON.stringify(
    ResponseBodyAliasAssignedAt$outboundSchema.parse(
      responseBodyAliasAssignedAt,
    ),
  );
}

export function responseBodyAliasAssignedAtFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyAliasAssignedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyAliasAssignedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyAliasAssignedAt' from JSON`,
  );
}

/** @internal */
export const ResponseBodyBuild$inboundSchema: z.ZodType<
  ResponseBodyBuild,
  z.ZodTypeDef,
  unknown
> = z.object({
  env: z.array(z.string()),
});

/** @internal */
export type ResponseBodyBuild$Outbound = {
  env: Array<string>;
};

/** @internal */
export const ResponseBodyBuild$outboundSchema: z.ZodType<
  ResponseBodyBuild$Outbound,
  z.ZodTypeDef,
  ResponseBodyBuild
> = z.object({
  env: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyBuild$ {
  /** @deprecated use `ResponseBodyBuild$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyBuild$inboundSchema;
  /** @deprecated use `ResponseBodyBuild$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyBuild$outboundSchema;
  /** @deprecated use `ResponseBodyBuild$Outbound` instead. */
  export type Outbound = ResponseBodyBuild$Outbound;
}

export function responseBodyBuildToJSON(
  responseBodyBuild: ResponseBodyBuild,
): string {
  return JSON.stringify(
    ResponseBodyBuild$outboundSchema.parse(responseBodyBuild),
  );
}

export function responseBodyBuildFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyBuild, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyBuild$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyBuild' from JSON`,
  );
}

/** @internal */
export const ResponseBodyBuilds$inboundSchema: z.ZodType<
  ResponseBodyBuilds,
  z.ZodTypeDef,
  unknown
> = z.object({
  use: z.string(),
  src: z.string().optional(),
  config: z.record(z.any()).optional(),
});

/** @internal */
export type ResponseBodyBuilds$Outbound = {
  use: string;
  src?: string | undefined;
  config?: { [k: string]: any } | undefined;
};

/** @internal */
export const ResponseBodyBuilds$outboundSchema: z.ZodType<
  ResponseBodyBuilds$Outbound,
  z.ZodTypeDef,
  ResponseBodyBuilds
> = z.object({
  use: z.string(),
  src: z.string().optional(),
  config: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyBuilds$ {
  /** @deprecated use `ResponseBodyBuilds$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyBuilds$inboundSchema;
  /** @deprecated use `ResponseBodyBuilds$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyBuilds$outboundSchema;
  /** @deprecated use `ResponseBodyBuilds$Outbound` instead. */
  export type Outbound = ResponseBodyBuilds$Outbound;
}

export function responseBodyBuildsToJSON(
  responseBodyBuilds: ResponseBodyBuilds,
): string {
  return JSON.stringify(
    ResponseBodyBuilds$outboundSchema.parse(responseBodyBuilds),
  );
}

export function responseBodyBuildsFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyBuilds, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyBuilds$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyBuilds' from JSON`,
  );
}

/** @internal */
export const ResponseBodyFramework$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyFramework
> = z.nativeEnum(ResponseBodyFramework);

/** @internal */
export const ResponseBodyFramework$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyFramework
> = ResponseBodyFramework$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyFramework$ {
  /** @deprecated use `ResponseBodyFramework$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyFramework$inboundSchema;
  /** @deprecated use `ResponseBodyFramework$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyFramework$outboundSchema;
}

/** @internal */
export const ResponseBodySpeedInsights$inboundSchema: z.ZodType<
  ResponseBodySpeedInsights,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  enabledAt: z.number().optional(),
  disabledAt: z.number().optional(),
  canceledAt: z.number().optional(),
  hasData: z.boolean().optional(),
  paidAt: z.number().optional(),
});

/** @internal */
export type ResponseBodySpeedInsights$Outbound = {
  id: string;
  enabledAt?: number | undefined;
  disabledAt?: number | undefined;
  canceledAt?: number | undefined;
  hasData?: boolean | undefined;
  paidAt?: number | undefined;
};

/** @internal */
export const ResponseBodySpeedInsights$outboundSchema: z.ZodType<
  ResponseBodySpeedInsights$Outbound,
  z.ZodTypeDef,
  ResponseBodySpeedInsights
> = z.object({
  id: z.string(),
  enabledAt: z.number().optional(),
  disabledAt: z.number().optional(),
  canceledAt: z.number().optional(),
  hasData: z.boolean().optional(),
  paidAt: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodySpeedInsights$ {
  /** @deprecated use `ResponseBodySpeedInsights$inboundSchema` instead. */
  export const inboundSchema = ResponseBodySpeedInsights$inboundSchema;
  /** @deprecated use `ResponseBodySpeedInsights$outboundSchema` instead. */
  export const outboundSchema = ResponseBodySpeedInsights$outboundSchema;
  /** @deprecated use `ResponseBodySpeedInsights$Outbound` instead. */
  export type Outbound = ResponseBodySpeedInsights$Outbound;
}

export function responseBodySpeedInsightsToJSON(
  responseBodySpeedInsights: ResponseBodySpeedInsights,
): string {
  return JSON.stringify(
    ResponseBodySpeedInsights$outboundSchema.parse(responseBodySpeedInsights),
  );
}

export function responseBodySpeedInsightsFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodySpeedInsights, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodySpeedInsights$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodySpeedInsights' from JSON`,
  );
}

/** @internal */
export const ResponseBodyWebAnalytics$inboundSchema: z.ZodType<
  ResponseBodyWebAnalytics,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  disabledAt: z.number().optional(),
  canceledAt: z.number().optional(),
  enabledAt: z.number().optional(),
  hasData: z.boolean().optional(),
});

/** @internal */
export type ResponseBodyWebAnalytics$Outbound = {
  id: string;
  disabledAt?: number | undefined;
  canceledAt?: number | undefined;
  enabledAt?: number | undefined;
  hasData?: boolean | undefined;
};

/** @internal */
export const ResponseBodyWebAnalytics$outboundSchema: z.ZodType<
  ResponseBodyWebAnalytics$Outbound,
  z.ZodTypeDef,
  ResponseBodyWebAnalytics
> = z.object({
  id: z.string(),
  disabledAt: z.number().optional(),
  canceledAt: z.number().optional(),
  enabledAt: z.number().optional(),
  hasData: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyWebAnalytics$ {
  /** @deprecated use `ResponseBodyWebAnalytics$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyWebAnalytics$inboundSchema;
  /** @deprecated use `ResponseBodyWebAnalytics$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyWebAnalytics$outboundSchema;
  /** @deprecated use `ResponseBodyWebAnalytics$Outbound` instead. */
  export type Outbound = ResponseBodyWebAnalytics$Outbound;
}

export function responseBodyWebAnalyticsToJSON(
  responseBodyWebAnalytics: ResponseBodyWebAnalytics,
): string {
  return JSON.stringify(
    ResponseBodyWebAnalytics$outboundSchema.parse(responseBodyWebAnalytics),
  );
}

export function responseBodyWebAnalyticsFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyWebAnalytics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyWebAnalytics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyWebAnalytics' from JSON`,
  );
}

/** @internal */
export const ResponseBodyProjectSettings$inboundSchema: z.ZodType<
  ResponseBodyProjectSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  buildCommand: z.nullable(z.string()).optional(),
  devCommand: z.nullable(z.string()).optional(),
  framework: z.nullable(ResponseBodyFramework$inboundSchema).optional(),
  commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
  installCommand: z.nullable(z.string()).optional(),
  outputDirectory: z.nullable(z.string()).optional(),
  speedInsights: z.lazy(() => ResponseBodySpeedInsights$inboundSchema)
    .optional(),
  webAnalytics: z.lazy(() => ResponseBodyWebAnalytics$inboundSchema).optional(),
});

/** @internal */
export type ResponseBodyProjectSettings$Outbound = {
  buildCommand?: string | null | undefined;
  devCommand?: string | null | undefined;
  framework?: string | null | undefined;
  commandForIgnoringBuildStep?: string | null | undefined;
  installCommand?: string | null | undefined;
  outputDirectory?: string | null | undefined;
  speedInsights?: ResponseBodySpeedInsights$Outbound | undefined;
  webAnalytics?: ResponseBodyWebAnalytics$Outbound | undefined;
};

/** @internal */
export const ResponseBodyProjectSettings$outboundSchema: z.ZodType<
  ResponseBodyProjectSettings$Outbound,
  z.ZodTypeDef,
  ResponseBodyProjectSettings
> = z.object({
  buildCommand: z.nullable(z.string()).optional(),
  devCommand: z.nullable(z.string()).optional(),
  framework: z.nullable(ResponseBodyFramework$outboundSchema).optional(),
  commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
  installCommand: z.nullable(z.string()).optional(),
  outputDirectory: z.nullable(z.string()).optional(),
  speedInsights: z.lazy(() => ResponseBodySpeedInsights$outboundSchema)
    .optional(),
  webAnalytics: z.lazy(() => ResponseBodyWebAnalytics$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyProjectSettings$ {
  /** @deprecated use `ResponseBodyProjectSettings$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyProjectSettings$inboundSchema;
  /** @deprecated use `ResponseBodyProjectSettings$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyProjectSettings$outboundSchema;
  /** @deprecated use `ResponseBodyProjectSettings$Outbound` instead. */
  export type Outbound = ResponseBodyProjectSettings$Outbound;
}

export function responseBodyProjectSettingsToJSON(
  responseBodyProjectSettings: ResponseBodyProjectSettings,
): string {
  return JSON.stringify(
    ResponseBodyProjectSettings$outboundSchema.parse(
      responseBodyProjectSettings,
    ),
  );
}

export function responseBodyProjectSettingsFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyProjectSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyProjectSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyProjectSettings' from JSON`,
  );
}

/** @internal */
export const GetDeploymentResponseBodyDeploymentsStatus$inboundSchema:
  z.ZodNativeEnum<typeof GetDeploymentResponseBodyDeploymentsStatus> = z
    .nativeEnum(GetDeploymentResponseBodyDeploymentsStatus);

/** @internal */
export const GetDeploymentResponseBodyDeploymentsStatus$outboundSchema:
  z.ZodNativeEnum<typeof GetDeploymentResponseBodyDeploymentsStatus> =
    GetDeploymentResponseBodyDeploymentsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentResponseBodyDeploymentsStatus$ {
  /** @deprecated use `GetDeploymentResponseBodyDeploymentsStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentResponseBodyDeploymentsStatus$inboundSchema;
  /** @deprecated use `GetDeploymentResponseBodyDeploymentsStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentResponseBodyDeploymentsStatus$outboundSchema;
}

/** @internal */
export const ResponseBodyIntegrations$inboundSchema: z.ZodType<
  ResponseBodyIntegrations,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: GetDeploymentResponseBodyDeploymentsStatus$inboundSchema,
  startedAt: z.number(),
  completedAt: z.number().optional(),
  skippedAt: z.number().optional(),
  skippedBy: z.string().optional(),
});

/** @internal */
export type ResponseBodyIntegrations$Outbound = {
  status: string;
  startedAt: number;
  completedAt?: number | undefined;
  skippedAt?: number | undefined;
  skippedBy?: string | undefined;
};

/** @internal */
export const ResponseBodyIntegrations$outboundSchema: z.ZodType<
  ResponseBodyIntegrations$Outbound,
  z.ZodTypeDef,
  ResponseBodyIntegrations
> = z.object({
  status: GetDeploymentResponseBodyDeploymentsStatus$outboundSchema,
  startedAt: z.number(),
  completedAt: z.number().optional(),
  skippedAt: z.number().optional(),
  skippedBy: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyIntegrations$ {
  /** @deprecated use `ResponseBodyIntegrations$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyIntegrations$inboundSchema;
  /** @deprecated use `ResponseBodyIntegrations$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyIntegrations$outboundSchema;
  /** @deprecated use `ResponseBodyIntegrations$Outbound` instead. */
  export type Outbound = ResponseBodyIntegrations$Outbound;
}

export function responseBodyIntegrationsToJSON(
  responseBodyIntegrations: ResponseBodyIntegrations,
): string {
  return JSON.stringify(
    ResponseBodyIntegrations$outboundSchema.parse(responseBodyIntegrations),
  );
}

export function responseBodyIntegrationsFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyIntegrations, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyIntegrations$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyIntegrations' from JSON`,
  );
}

/** @internal */
export const ResponseBodyProtocol$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyProtocol
> = z.nativeEnum(ResponseBodyProtocol);

/** @internal */
export const ResponseBodyProtocol$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyProtocol
> = ResponseBodyProtocol$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyProtocol$ {
  /** @deprecated use `ResponseBodyProtocol$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyProtocol$inboundSchema;
  /** @deprecated use `ResponseBodyProtocol$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyProtocol$outboundSchema;
}

/** @internal */
export const ResponseBodyRemotePatterns$inboundSchema: z.ZodType<
  ResponseBodyRemotePatterns,
  z.ZodTypeDef,
  unknown
> = z.object({
  protocol: ResponseBodyProtocol$inboundSchema.optional(),
  hostname: z.string(),
  port: z.string().optional(),
  pathname: z.string().optional(),
  search: z.string().optional(),
});

/** @internal */
export type ResponseBodyRemotePatterns$Outbound = {
  protocol?: string | undefined;
  hostname: string;
  port?: string | undefined;
  pathname?: string | undefined;
  search?: string | undefined;
};

/** @internal */
export const ResponseBodyRemotePatterns$outboundSchema: z.ZodType<
  ResponseBodyRemotePatterns$Outbound,
  z.ZodTypeDef,
  ResponseBodyRemotePatterns
> = z.object({
  protocol: ResponseBodyProtocol$outboundSchema.optional(),
  hostname: z.string(),
  port: z.string().optional(),
  pathname: z.string().optional(),
  search: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyRemotePatterns$ {
  /** @deprecated use `ResponseBodyRemotePatterns$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyRemotePatterns$inboundSchema;
  /** @deprecated use `ResponseBodyRemotePatterns$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyRemotePatterns$outboundSchema;
  /** @deprecated use `ResponseBodyRemotePatterns$Outbound` instead. */
  export type Outbound = ResponseBodyRemotePatterns$Outbound;
}

export function responseBodyRemotePatternsToJSON(
  responseBodyRemotePatterns: ResponseBodyRemotePatterns,
): string {
  return JSON.stringify(
    ResponseBodyRemotePatterns$outboundSchema.parse(responseBodyRemotePatterns),
  );
}

export function responseBodyRemotePatternsFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyRemotePatterns, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyRemotePatterns$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyRemotePatterns' from JSON`,
  );
}

/** @internal */
export const ResponseBodyLocalPatterns$inboundSchema: z.ZodType<
  ResponseBodyLocalPatterns,
  z.ZodTypeDef,
  unknown
> = z.object({
  pathname: z.string().optional(),
  search: z.string().optional(),
});

/** @internal */
export type ResponseBodyLocalPatterns$Outbound = {
  pathname?: string | undefined;
  search?: string | undefined;
};

/** @internal */
export const ResponseBodyLocalPatterns$outboundSchema: z.ZodType<
  ResponseBodyLocalPatterns$Outbound,
  z.ZodTypeDef,
  ResponseBodyLocalPatterns
> = z.object({
  pathname: z.string().optional(),
  search: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyLocalPatterns$ {
  /** @deprecated use `ResponseBodyLocalPatterns$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyLocalPatterns$inboundSchema;
  /** @deprecated use `ResponseBodyLocalPatterns$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyLocalPatterns$outboundSchema;
  /** @deprecated use `ResponseBodyLocalPatterns$Outbound` instead. */
  export type Outbound = ResponseBodyLocalPatterns$Outbound;
}

export function responseBodyLocalPatternsToJSON(
  responseBodyLocalPatterns: ResponseBodyLocalPatterns,
): string {
  return JSON.stringify(
    ResponseBodyLocalPatterns$outboundSchema.parse(responseBodyLocalPatterns),
  );
}

export function responseBodyLocalPatternsFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyLocalPatterns, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyLocalPatterns$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyLocalPatterns' from JSON`,
  );
}

/** @internal */
export const ResponseBodyFormats$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyFormats
> = z.nativeEnum(ResponseBodyFormats);

/** @internal */
export const ResponseBodyFormats$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyFormats
> = ResponseBodyFormats$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyFormats$ {
  /** @deprecated use `ResponseBodyFormats$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyFormats$inboundSchema;
  /** @deprecated use `ResponseBodyFormats$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyFormats$outboundSchema;
}

/** @internal */
export const ResponseBodyContentDispositionType$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyContentDispositionType
> = z.nativeEnum(ResponseBodyContentDispositionType);

/** @internal */
export const ResponseBodyContentDispositionType$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyContentDispositionType
> = ResponseBodyContentDispositionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyContentDispositionType$ {
  /** @deprecated use `ResponseBodyContentDispositionType$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyContentDispositionType$inboundSchema;
  /** @deprecated use `ResponseBodyContentDispositionType$outboundSchema` instead. */
  export const outboundSchema =
    ResponseBodyContentDispositionType$outboundSchema;
}

/** @internal */
export const ResponseBodyImages$inboundSchema: z.ZodType<
  ResponseBodyImages,
  z.ZodTypeDef,
  unknown
> = z.object({
  sizes: z.array(z.number()).optional(),
  qualities: z.array(z.number()).optional(),
  domains: z.array(z.string()).optional(),
  remotePatterns: z.array(
    z.lazy(() => ResponseBodyRemotePatterns$inboundSchema),
  ).optional(),
  localPatterns: z.array(z.lazy(() => ResponseBodyLocalPatterns$inboundSchema))
    .optional(),
  minimumCacheTTL: z.number().optional(),
  formats: z.array(ResponseBodyFormats$inboundSchema).optional(),
  dangerouslyAllowSVG: z.boolean().optional(),
  contentSecurityPolicy: z.string().optional(),
  contentDispositionType: ResponseBodyContentDispositionType$inboundSchema
    .optional(),
});

/** @internal */
export type ResponseBodyImages$Outbound = {
  sizes?: Array<number> | undefined;
  qualities?: Array<number> | undefined;
  domains?: Array<string> | undefined;
  remotePatterns?: Array<ResponseBodyRemotePatterns$Outbound> | undefined;
  localPatterns?: Array<ResponseBodyLocalPatterns$Outbound> | undefined;
  minimumCacheTTL?: number | undefined;
  formats?: Array<string> | undefined;
  dangerouslyAllowSVG?: boolean | undefined;
  contentSecurityPolicy?: string | undefined;
  contentDispositionType?: string | undefined;
};

/** @internal */
export const ResponseBodyImages$outboundSchema: z.ZodType<
  ResponseBodyImages$Outbound,
  z.ZodTypeDef,
  ResponseBodyImages
> = z.object({
  sizes: z.array(z.number()).optional(),
  qualities: z.array(z.number()).optional(),
  domains: z.array(z.string()).optional(),
  remotePatterns: z.array(
    z.lazy(() => ResponseBodyRemotePatterns$outboundSchema),
  ).optional(),
  localPatterns: z.array(z.lazy(() => ResponseBodyLocalPatterns$outboundSchema))
    .optional(),
  minimumCacheTTL: z.number().optional(),
  formats: z.array(ResponseBodyFormats$outboundSchema).optional(),
  dangerouslyAllowSVG: z.boolean().optional(),
  contentSecurityPolicy: z.string().optional(),
  contentDispositionType: ResponseBodyContentDispositionType$outboundSchema
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyImages$ {
  /** @deprecated use `ResponseBodyImages$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyImages$inboundSchema;
  /** @deprecated use `ResponseBodyImages$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyImages$outboundSchema;
  /** @deprecated use `ResponseBodyImages$Outbound` instead. */
  export type Outbound = ResponseBodyImages$Outbound;
}

export function responseBodyImagesToJSON(
  responseBodyImages: ResponseBodyImages,
): string {
  return JSON.stringify(
    ResponseBodyImages$outboundSchema.parse(responseBodyImages),
  );
}

export function responseBodyImagesFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyImages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyImages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyImages' from JSON`,
  );
}

/** @internal */
export const ResponseBodyCreator$inboundSchema: z.ZodType<
  ResponseBodyCreator,
  z.ZodTypeDef,
  unknown
> = z.object({
  uid: z.string(),
  username: z.string().optional(),
  avatar: z.string().optional(),
});

/** @internal */
export type ResponseBodyCreator$Outbound = {
  uid: string;
  username?: string | undefined;
  avatar?: string | undefined;
};

/** @internal */
export const ResponseBodyCreator$outboundSchema: z.ZodType<
  ResponseBodyCreator$Outbound,
  z.ZodTypeDef,
  ResponseBodyCreator
> = z.object({
  uid: z.string(),
  username: z.string().optional(),
  avatar: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyCreator$ {
  /** @deprecated use `ResponseBodyCreator$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyCreator$inboundSchema;
  /** @deprecated use `ResponseBodyCreator$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyCreator$outboundSchema;
  /** @deprecated use `ResponseBodyCreator$Outbound` instead. */
  export type Outbound = ResponseBodyCreator$Outbound;
}

export function responseBodyCreatorToJSON(
  responseBodyCreator: ResponseBodyCreator,
): string {
  return JSON.stringify(
    ResponseBodyCreator$outboundSchema.parse(responseBodyCreator),
  );
}

export function responseBodyCreatorFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyCreator, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyCreator$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyCreator' from JSON`,
  );
}

/** @internal */
export const GetDeploymentResponseBodyDeploymentsResponseReadyState$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentResponseBodyDeploymentsResponseReadyState
  > = z.nativeEnum(GetDeploymentResponseBodyDeploymentsResponseReadyState);

/** @internal */
export const GetDeploymentResponseBodyDeploymentsResponseReadyState$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentResponseBodyDeploymentsResponseReadyState
  > = GetDeploymentResponseBodyDeploymentsResponseReadyState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentResponseBodyDeploymentsResponseReadyState$ {
  /** @deprecated use `GetDeploymentResponseBodyDeploymentsResponseReadyState$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentResponseBodyDeploymentsResponseReadyState$inboundSchema;
  /** @deprecated use `GetDeploymentResponseBodyDeploymentsResponseReadyState$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentResponseBodyDeploymentsResponseReadyState$outboundSchema;
}

/** @internal */
export const ResponseBodyOutput$inboundSchema: z.ZodType<
  ResponseBodyOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  functionName: z.string(),
});

/** @internal */
export type ResponseBodyOutput$Outbound = {
  path: string;
  functionName: string;
};

/** @internal */
export const ResponseBodyOutput$outboundSchema: z.ZodType<
  ResponseBodyOutput$Outbound,
  z.ZodTypeDef,
  ResponseBodyOutput
> = z.object({
  path: z.string(),
  functionName: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyOutput$ {
  /** @deprecated use `ResponseBodyOutput$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyOutput$inboundSchema;
  /** @deprecated use `ResponseBodyOutput$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyOutput$outboundSchema;
  /** @deprecated use `ResponseBodyOutput$Outbound` instead. */
  export type Outbound = ResponseBodyOutput$Outbound;
}

export function responseBodyOutputToJSON(
  responseBodyOutput: ResponseBodyOutput,
): string {
  return JSON.stringify(
    ResponseBodyOutput$outboundSchema.parse(responseBodyOutput),
  );
}

export function responseBodyOutputFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyOutput' from JSON`,
  );
}

/** @internal */
export const GetDeploymentResponseBodyLambdas$inboundSchema: z.ZodType<
  GetDeploymentResponseBodyLambdas,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  createdAt: z.number().optional(),
  readyState:
    GetDeploymentResponseBodyDeploymentsResponseReadyState$inboundSchema
      .optional(),
  entrypoint: z.nullable(z.string()).optional(),
  readyStateAt: z.number().optional(),
  output: z.array(z.lazy(() => ResponseBodyOutput$inboundSchema)),
});

/** @internal */
export type GetDeploymentResponseBodyLambdas$Outbound = {
  id: string;
  createdAt?: number | undefined;
  readyState?: string | undefined;
  entrypoint?: string | null | undefined;
  readyStateAt?: number | undefined;
  output: Array<ResponseBodyOutput$Outbound>;
};

/** @internal */
export const GetDeploymentResponseBodyLambdas$outboundSchema: z.ZodType<
  GetDeploymentResponseBodyLambdas$Outbound,
  z.ZodTypeDef,
  GetDeploymentResponseBodyLambdas
> = z.object({
  id: z.string(),
  createdAt: z.number().optional(),
  readyState:
    GetDeploymentResponseBodyDeploymentsResponseReadyState$outboundSchema
      .optional(),
  entrypoint: z.nullable(z.string()).optional(),
  readyStateAt: z.number().optional(),
  output: z.array(z.lazy(() => ResponseBodyOutput$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentResponseBodyLambdas$ {
  /** @deprecated use `GetDeploymentResponseBodyLambdas$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentResponseBodyLambdas$inboundSchema;
  /** @deprecated use `GetDeploymentResponseBodyLambdas$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentResponseBodyLambdas$outboundSchema;
  /** @deprecated use `GetDeploymentResponseBodyLambdas$Outbound` instead. */
  export type Outbound = GetDeploymentResponseBodyLambdas$Outbound;
}

export function getDeploymentResponseBodyLambdasToJSON(
  getDeploymentResponseBodyLambdas: GetDeploymentResponseBodyLambdas,
): string {
  return JSON.stringify(
    GetDeploymentResponseBodyLambdas$outboundSchema.parse(
      getDeploymentResponseBodyLambdas,
    ),
  );
}

export function getDeploymentResponseBodyLambdasFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentResponseBodyLambdas, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentResponseBodyLambdas$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentResponseBodyLambdas' from JSON`,
  );
}

/** @internal */
export const ResponseBodyStatus$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyStatus
> = z.nativeEnum(ResponseBodyStatus);

/** @internal */
export const ResponseBodyStatus$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyStatus
> = ResponseBodyStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyStatus$ {
  /** @deprecated use `ResponseBodyStatus$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyStatus$inboundSchema;
  /** @deprecated use `ResponseBodyStatus$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyStatus$outboundSchema;
}

/** @internal */
export const GetDeploymentResponseBodyTeam$inboundSchema: z.ZodType<
  GetDeploymentResponseBodyTeam,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  slug: z.string(),
  avatar: z.string().optional(),
});

/** @internal */
export type GetDeploymentResponseBodyTeam$Outbound = {
  id: string;
  name: string;
  slug: string;
  avatar?: string | undefined;
};

/** @internal */
export const GetDeploymentResponseBodyTeam$outboundSchema: z.ZodType<
  GetDeploymentResponseBodyTeam$Outbound,
  z.ZodTypeDef,
  GetDeploymentResponseBodyTeam
> = z.object({
  id: z.string(),
  name: z.string(),
  slug: z.string(),
  avatar: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentResponseBodyTeam$ {
  /** @deprecated use `GetDeploymentResponseBodyTeam$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentResponseBodyTeam$inboundSchema;
  /** @deprecated use `GetDeploymentResponseBodyTeam$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentResponseBodyTeam$outboundSchema;
  /** @deprecated use `GetDeploymentResponseBodyTeam$Outbound` instead. */
  export type Outbound = GetDeploymentResponseBodyTeam$Outbound;
}

export function getDeploymentResponseBodyTeamToJSON(
  getDeploymentResponseBodyTeam: GetDeploymentResponseBodyTeam,
): string {
  return JSON.stringify(
    GetDeploymentResponseBodyTeam$outboundSchema.parse(
      getDeploymentResponseBodyTeam,
    ),
  );
}

export function getDeploymentResponseBodyTeamFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentResponseBodyTeam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentResponseBodyTeam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentResponseBodyTeam' from JSON`,
  );
}

/** @internal */
export const GetDeploymentCustomEnvironmentDeployments2$inboundSchema:
  z.ZodType<GetDeploymentCustomEnvironmentDeployments2, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string(),
    });

/** @internal */
export type GetDeploymentCustomEnvironmentDeployments2$Outbound = {
  id: string;
};

/** @internal */
export const GetDeploymentCustomEnvironmentDeployments2$outboundSchema:
  z.ZodType<
    GetDeploymentCustomEnvironmentDeployments2$Outbound,
    z.ZodTypeDef,
    GetDeploymentCustomEnvironmentDeployments2
  > = z.object({
    id: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentCustomEnvironmentDeployments2$ {
  /** @deprecated use `GetDeploymentCustomEnvironmentDeployments2$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentCustomEnvironmentDeployments2$inboundSchema;
  /** @deprecated use `GetDeploymentCustomEnvironmentDeployments2$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentCustomEnvironmentDeployments2$outboundSchema;
  /** @deprecated use `GetDeploymentCustomEnvironmentDeployments2$Outbound` instead. */
  export type Outbound = GetDeploymentCustomEnvironmentDeployments2$Outbound;
}

export function getDeploymentCustomEnvironmentDeployments2ToJSON(
  getDeploymentCustomEnvironmentDeployments2:
    GetDeploymentCustomEnvironmentDeployments2,
): string {
  return JSON.stringify(
    GetDeploymentCustomEnvironmentDeployments2$outboundSchema.parse(
      getDeploymentCustomEnvironmentDeployments2,
    ),
  );
}

export function getDeploymentCustomEnvironmentDeployments2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetDeploymentCustomEnvironmentDeployments2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentCustomEnvironmentDeployments2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetDeploymentCustomEnvironmentDeployments2' from JSON`,
  );
}

/** @internal */
export const GetDeploymentCustomEnvironmentDeploymentsType$inboundSchema:
  z.ZodNativeEnum<typeof GetDeploymentCustomEnvironmentDeploymentsType> = z
    .nativeEnum(GetDeploymentCustomEnvironmentDeploymentsType);

/** @internal */
export const GetDeploymentCustomEnvironmentDeploymentsType$outboundSchema:
  z.ZodNativeEnum<typeof GetDeploymentCustomEnvironmentDeploymentsType> =
    GetDeploymentCustomEnvironmentDeploymentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentCustomEnvironmentDeploymentsType$ {
  /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsType$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentCustomEnvironmentDeploymentsType$inboundSchema;
  /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsType$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentCustomEnvironmentDeploymentsType$outboundSchema;
}

/** @internal */
export const GetDeploymentCustomEnvironmentDeploymentsResponse200Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentCustomEnvironmentDeploymentsResponse200Type
  > = z.nativeEnum(GetDeploymentCustomEnvironmentDeploymentsResponse200Type);

/** @internal */
export const GetDeploymentCustomEnvironmentDeploymentsResponse200Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentCustomEnvironmentDeploymentsResponse200Type
  > = GetDeploymentCustomEnvironmentDeploymentsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentCustomEnvironmentDeploymentsResponse200Type$ {
  /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentCustomEnvironmentDeploymentsResponse200Type$inboundSchema;
  /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentCustomEnvironmentDeploymentsResponse200Type$outboundSchema;
}

/** @internal */
export const GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$inboundSchema:
  z.ZodType<
    GetDeploymentCustomEnvironmentDeploymentsBranchMatcher,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetDeploymentCustomEnvironmentDeploymentsResponse200Type$inboundSchema,
    pattern: z.string(),
  });

/** @internal */
export type GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$Outbound = {
  type: string;
  pattern: string;
};

/** @internal */
export const GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$outboundSchema:
  z.ZodType<
    GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$Outbound,
    z.ZodTypeDef,
    GetDeploymentCustomEnvironmentDeploymentsBranchMatcher
  > = z.object({
    type:
      GetDeploymentCustomEnvironmentDeploymentsResponse200Type$outboundSchema,
    pattern: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$ {
  /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$inboundSchema;
  /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$outboundSchema;
  /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$Outbound` instead. */
  export type Outbound =
    GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$Outbound;
}

export function getDeploymentCustomEnvironmentDeploymentsBranchMatcherToJSON(
  getDeploymentCustomEnvironmentDeploymentsBranchMatcher:
    GetDeploymentCustomEnvironmentDeploymentsBranchMatcher,
): string {
  return JSON.stringify(
    GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$outboundSchema.parse(
      getDeploymentCustomEnvironmentDeploymentsBranchMatcher,
    ),
  );
}

export function getDeploymentCustomEnvironmentDeploymentsBranchMatcherFromJSON(
  jsonString: string,
): SafeParseResult<
  GetDeploymentCustomEnvironmentDeploymentsBranchMatcher,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentCustomEnvironmentDeploymentsBranchMatcher' from JSON`,
  );
}

/** @internal */
export const GetDeploymentCustomEnvironmentDeploymentsVerification$inboundSchema:
  z.ZodType<
    GetDeploymentCustomEnvironmentDeploymentsVerification,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: z.string(),
    domain: z.string(),
    value: z.string(),
    reason: z.string(),
  });

/** @internal */
export type GetDeploymentCustomEnvironmentDeploymentsVerification$Outbound = {
  type: string;
  domain: string;
  value: string;
  reason: string;
};

/** @internal */
export const GetDeploymentCustomEnvironmentDeploymentsVerification$outboundSchema:
  z.ZodType<
    GetDeploymentCustomEnvironmentDeploymentsVerification$Outbound,
    z.ZodTypeDef,
    GetDeploymentCustomEnvironmentDeploymentsVerification
  > = z.object({
    type: z.string(),
    domain: z.string(),
    value: z.string(),
    reason: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentCustomEnvironmentDeploymentsVerification$ {
  /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsVerification$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentCustomEnvironmentDeploymentsVerification$inboundSchema;
  /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsVerification$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentCustomEnvironmentDeploymentsVerification$outboundSchema;
  /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsVerification$Outbound` instead. */
  export type Outbound =
    GetDeploymentCustomEnvironmentDeploymentsVerification$Outbound;
}

export function getDeploymentCustomEnvironmentDeploymentsVerificationToJSON(
  getDeploymentCustomEnvironmentDeploymentsVerification:
    GetDeploymentCustomEnvironmentDeploymentsVerification,
): string {
  return JSON.stringify(
    GetDeploymentCustomEnvironmentDeploymentsVerification$outboundSchema.parse(
      getDeploymentCustomEnvironmentDeploymentsVerification,
    ),
  );
}

export function getDeploymentCustomEnvironmentDeploymentsVerificationFromJSON(
  jsonString: string,
): SafeParseResult<
  GetDeploymentCustomEnvironmentDeploymentsVerification,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentCustomEnvironmentDeploymentsVerification$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetDeploymentCustomEnvironmentDeploymentsVerification' from JSON`,
  );
}

/** @internal */
export const GetDeploymentCustomEnvironmentDeploymentsDomains$inboundSchema:
  z.ZodType<
    GetDeploymentCustomEnvironmentDeploymentsDomains,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    apexName: z.string(),
    projectId: z.string(),
    redirect: z.nullable(z.string()).optional(),
    redirectStatusCode: z.nullable(z.number()).optional(),
    gitBranch: z.nullable(z.string()).optional(),
    customEnvironmentId: z.nullable(z.string()).optional(),
    updatedAt: z.number().optional(),
    createdAt: z.number().optional(),
    verified: z.boolean(),
    verification: z.array(
      z.lazy(() =>
        GetDeploymentCustomEnvironmentDeploymentsVerification$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type GetDeploymentCustomEnvironmentDeploymentsDomains$Outbound = {
  name: string;
  apexName: string;
  projectId: string;
  redirect?: string | null | undefined;
  redirectStatusCode?: number | null | undefined;
  gitBranch?: string | null | undefined;
  customEnvironmentId?: string | null | undefined;
  updatedAt?: number | undefined;
  createdAt?: number | undefined;
  verified: boolean;
  verification?:
    | Array<GetDeploymentCustomEnvironmentDeploymentsVerification$Outbound>
    | undefined;
};

/** @internal */
export const GetDeploymentCustomEnvironmentDeploymentsDomains$outboundSchema:
  z.ZodType<
    GetDeploymentCustomEnvironmentDeploymentsDomains$Outbound,
    z.ZodTypeDef,
    GetDeploymentCustomEnvironmentDeploymentsDomains
  > = z.object({
    name: z.string(),
    apexName: z.string(),
    projectId: z.string(),
    redirect: z.nullable(z.string()).optional(),
    redirectStatusCode: z.nullable(z.number()).optional(),
    gitBranch: z.nullable(z.string()).optional(),
    customEnvironmentId: z.nullable(z.string()).optional(),
    updatedAt: z.number().optional(),
    createdAt: z.number().optional(),
    verified: z.boolean(),
    verification: z.array(
      z.lazy(() =>
        GetDeploymentCustomEnvironmentDeploymentsVerification$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentCustomEnvironmentDeploymentsDomains$ {
  /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsDomains$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentCustomEnvironmentDeploymentsDomains$inboundSchema;
  /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsDomains$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentCustomEnvironmentDeploymentsDomains$outboundSchema;
  /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsDomains$Outbound` instead. */
  export type Outbound =
    GetDeploymentCustomEnvironmentDeploymentsDomains$Outbound;
}

export function getDeploymentCustomEnvironmentDeploymentsDomainsToJSON(
  getDeploymentCustomEnvironmentDeploymentsDomains:
    GetDeploymentCustomEnvironmentDeploymentsDomains,
): string {
  return JSON.stringify(
    GetDeploymentCustomEnvironmentDeploymentsDomains$outboundSchema.parse(
      getDeploymentCustomEnvironmentDeploymentsDomains,
    ),
  );
}

export function getDeploymentCustomEnvironmentDeploymentsDomainsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetDeploymentCustomEnvironmentDeploymentsDomains,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentCustomEnvironmentDeploymentsDomains$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetDeploymentCustomEnvironmentDeploymentsDomains' from JSON`,
  );
}

/** @internal */
export const GetDeploymentCustomEnvironmentDeployments1$inboundSchema:
  z.ZodType<GetDeploymentCustomEnvironmentDeployments1, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string(),
      slug: z.string(),
      type: GetDeploymentCustomEnvironmentDeploymentsType$inboundSchema,
      description: z.string().optional(),
      branchMatcher: z.lazy(() =>
        GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$inboundSchema
      ).optional(),
      domains: z.array(
        z.lazy(() =>
          GetDeploymentCustomEnvironmentDeploymentsDomains$inboundSchema
        ),
      ).optional(),
      currentDeploymentAliases: z.array(z.string()).optional(),
      createdAt: z.number(),
      updatedAt: z.number(),
    });

/** @internal */
export type GetDeploymentCustomEnvironmentDeployments1$Outbound = {
  id: string;
  slug: string;
  type: string;
  description?: string | undefined;
  branchMatcher?:
    | GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$Outbound
    | undefined;
  domains?:
    | Array<GetDeploymentCustomEnvironmentDeploymentsDomains$Outbound>
    | undefined;
  currentDeploymentAliases?: Array<string> | undefined;
  createdAt: number;
  updatedAt: number;
};

/** @internal */
export const GetDeploymentCustomEnvironmentDeployments1$outboundSchema:
  z.ZodType<
    GetDeploymentCustomEnvironmentDeployments1$Outbound,
    z.ZodTypeDef,
    GetDeploymentCustomEnvironmentDeployments1
  > = z.object({
    id: z.string(),
    slug: z.string(),
    type: GetDeploymentCustomEnvironmentDeploymentsType$outboundSchema,
    description: z.string().optional(),
    branchMatcher: z.lazy(() =>
      GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$outboundSchema
    ).optional(),
    domains: z.array(
      z.lazy(() =>
        GetDeploymentCustomEnvironmentDeploymentsDomains$outboundSchema
      ),
    ).optional(),
    currentDeploymentAliases: z.array(z.string()).optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentCustomEnvironmentDeployments1$ {
  /** @deprecated use `GetDeploymentCustomEnvironmentDeployments1$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentCustomEnvironmentDeployments1$inboundSchema;
  /** @deprecated use `GetDeploymentCustomEnvironmentDeployments1$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentCustomEnvironmentDeployments1$outboundSchema;
  /** @deprecated use `GetDeploymentCustomEnvironmentDeployments1$Outbound` instead. */
  export type Outbound = GetDeploymentCustomEnvironmentDeployments1$Outbound;
}

export function getDeploymentCustomEnvironmentDeployments1ToJSON(
  getDeploymentCustomEnvironmentDeployments1:
    GetDeploymentCustomEnvironmentDeployments1,
): string {
  return JSON.stringify(
    GetDeploymentCustomEnvironmentDeployments1$outboundSchema.parse(
      getDeploymentCustomEnvironmentDeployments1,
    ),
  );
}

export function getDeploymentCustomEnvironmentDeployments1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetDeploymentCustomEnvironmentDeployments1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentCustomEnvironmentDeployments1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetDeploymentCustomEnvironmentDeployments1' from JSON`,
  );
}

/** @internal */
export const GetDeploymentResponseBodyCustomEnvironment$inboundSchema:
  z.ZodType<GetDeploymentResponseBodyCustomEnvironment, z.ZodTypeDef, unknown> =
    z.union([
      z.lazy(() => GetDeploymentCustomEnvironmentDeployments1$inboundSchema),
      z.lazy(() => GetDeploymentCustomEnvironmentDeployments2$inboundSchema),
    ]);

/** @internal */
export type GetDeploymentResponseBodyCustomEnvironment$Outbound =
  | GetDeploymentCustomEnvironmentDeployments1$Outbound
  | GetDeploymentCustomEnvironmentDeployments2$Outbound;

/** @internal */
export const GetDeploymentResponseBodyCustomEnvironment$outboundSchema:
  z.ZodType<
    GetDeploymentResponseBodyCustomEnvironment$Outbound,
    z.ZodTypeDef,
    GetDeploymentResponseBodyCustomEnvironment
  > = z.union([
    z.lazy(() => GetDeploymentCustomEnvironmentDeployments1$outboundSchema),
    z.lazy(() => GetDeploymentCustomEnvironmentDeployments2$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentResponseBodyCustomEnvironment$ {
  /** @deprecated use `GetDeploymentResponseBodyCustomEnvironment$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentResponseBodyCustomEnvironment$inboundSchema;
  /** @deprecated use `GetDeploymentResponseBodyCustomEnvironment$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentResponseBodyCustomEnvironment$outboundSchema;
  /** @deprecated use `GetDeploymentResponseBodyCustomEnvironment$Outbound` instead. */
  export type Outbound = GetDeploymentResponseBodyCustomEnvironment$Outbound;
}

export function getDeploymentResponseBodyCustomEnvironmentToJSON(
  getDeploymentResponseBodyCustomEnvironment:
    GetDeploymentResponseBodyCustomEnvironment,
): string {
  return JSON.stringify(
    GetDeploymentResponseBodyCustomEnvironment$outboundSchema.parse(
      getDeploymentResponseBodyCustomEnvironment,
    ),
  );
}

export function getDeploymentResponseBodyCustomEnvironmentFromJSON(
  jsonString: string,
): SafeParseResult<
  GetDeploymentResponseBodyCustomEnvironment,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentResponseBodyCustomEnvironment$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetDeploymentResponseBodyCustomEnvironment' from JSON`,
  );
}

/** @internal */
export const GetDeploymentResponseBodyOomReport$inboundSchema: z.ZodNativeEnum<
  typeof GetDeploymentResponseBodyOomReport
> = z.nativeEnum(GetDeploymentResponseBodyOomReport);

/** @internal */
export const GetDeploymentResponseBodyOomReport$outboundSchema: z.ZodNativeEnum<
  typeof GetDeploymentResponseBodyOomReport
> = GetDeploymentResponseBodyOomReport$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentResponseBodyOomReport$ {
  /** @deprecated use `GetDeploymentResponseBodyOomReport$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentResponseBodyOomReport$inboundSchema;
  /** @deprecated use `GetDeploymentResponseBodyOomReport$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentResponseBodyOomReport$outboundSchema;
}

/** @internal */
export const GetDeploymentResponseBodyAliasWarning$inboundSchema: z.ZodType<
  GetDeploymentResponseBodyAliasWarning,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
  link: z.string().optional(),
  action: z.string().optional(),
});

/** @internal */
export type GetDeploymentResponseBodyAliasWarning$Outbound = {
  code: string;
  message: string;
  link?: string | undefined;
  action?: string | undefined;
};

/** @internal */
export const GetDeploymentResponseBodyAliasWarning$outboundSchema: z.ZodType<
  GetDeploymentResponseBodyAliasWarning$Outbound,
  z.ZodTypeDef,
  GetDeploymentResponseBodyAliasWarning
> = z.object({
  code: z.string(),
  message: z.string(),
  link: z.string().optional(),
  action: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentResponseBodyAliasWarning$ {
  /** @deprecated use `GetDeploymentResponseBodyAliasWarning$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentResponseBodyAliasWarning$inboundSchema;
  /** @deprecated use `GetDeploymentResponseBodyAliasWarning$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentResponseBodyAliasWarning$outboundSchema;
  /** @deprecated use `GetDeploymentResponseBodyAliasWarning$Outbound` instead. */
  export type Outbound = GetDeploymentResponseBodyAliasWarning$Outbound;
}

export function getDeploymentResponseBodyAliasWarningToJSON(
  getDeploymentResponseBodyAliasWarning: GetDeploymentResponseBodyAliasWarning,
): string {
  return JSON.stringify(
    GetDeploymentResponseBodyAliasWarning$outboundSchema.parse(
      getDeploymentResponseBodyAliasWarning,
    ),
  );
}

export function getDeploymentResponseBodyAliasWarningFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentResponseBodyAliasWarning, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentResponseBodyAliasWarning$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentResponseBodyAliasWarning' from JSON`,
  );
}

/** @internal */
export const ResponseBodyReadyState$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyReadyState
> = z.nativeEnum(ResponseBodyReadyState);

/** @internal */
export const ResponseBodyReadyState$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyReadyState
> = ResponseBodyReadyState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyReadyState$ {
  /** @deprecated use `ResponseBodyReadyState$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyReadyState$inboundSchema;
  /** @deprecated use `ResponseBodyReadyState$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyReadyState$outboundSchema;
}

/** @internal */
export const GetDeploymentResponseBodyType$inboundSchema: z.ZodNativeEnum<
  typeof GetDeploymentResponseBodyType
> = z.nativeEnum(GetDeploymentResponseBodyType);

/** @internal */
export const GetDeploymentResponseBodyType$outboundSchema: z.ZodNativeEnum<
  typeof GetDeploymentResponseBodyType
> = GetDeploymentResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentResponseBodyType$ {
  /** @deprecated use `GetDeploymentResponseBodyType$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentResponseBodyType$inboundSchema;
  /** @deprecated use `GetDeploymentResponseBodyType$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentResponseBodyType$outboundSchema;
}

/** @internal */
export const ResponseBodyAliasError$inboundSchema: z.ZodType<
  ResponseBodyAliasError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
});

/** @internal */
export type ResponseBodyAliasError$Outbound = {
  code: string;
  message: string;
};

/** @internal */
export const ResponseBodyAliasError$outboundSchema: z.ZodType<
  ResponseBodyAliasError$Outbound,
  z.ZodTypeDef,
  ResponseBodyAliasError
> = z.object({
  code: z.string(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyAliasError$ {
  /** @deprecated use `ResponseBodyAliasError$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyAliasError$inboundSchema;
  /** @deprecated use `ResponseBodyAliasError$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyAliasError$outboundSchema;
  /** @deprecated use `ResponseBodyAliasError$Outbound` instead. */
  export type Outbound = ResponseBodyAliasError$Outbound;
}

export function responseBodyAliasErrorToJSON(
  responseBodyAliasError: ResponseBodyAliasError,
): string {
  return JSON.stringify(
    ResponseBodyAliasError$outboundSchema.parse(responseBodyAliasError),
  );
}

export function responseBodyAliasErrorFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyAliasError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyAliasError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyAliasError' from JSON`,
  );
}

/** @internal */
export const ResponseBodyChecksState$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyChecksState
> = z.nativeEnum(ResponseBodyChecksState);

/** @internal */
export const ResponseBodyChecksState$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyChecksState
> = ResponseBodyChecksState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyChecksState$ {
  /** @deprecated use `ResponseBodyChecksState$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyChecksState$inboundSchema;
  /** @deprecated use `ResponseBodyChecksState$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyChecksState$outboundSchema;
}

/** @internal */
export const ResponseBodyChecksConclusion$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyChecksConclusion
> = z.nativeEnum(ResponseBodyChecksConclusion);

/** @internal */
export const ResponseBodyChecksConclusion$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyChecksConclusion
> = ResponseBodyChecksConclusion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyChecksConclusion$ {
  /** @deprecated use `ResponseBodyChecksConclusion$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyChecksConclusion$inboundSchema;
  /** @deprecated use `ResponseBodyChecksConclusion$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyChecksConclusion$outboundSchema;
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody115Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody115Type
  > = z.nativeEnum(
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody115Type,
  );

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody115Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody115Type
  > =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody115Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody115Type$ {
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody115Type$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody115Type$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody115Type$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody115Type$outboundSchema;
}

/** @internal */
export const GetDeploymentGitSourceDeployments15$inboundSchema: z.ZodType<
  GetDeploymentGitSourceDeployments15,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody115Type$inboundSchema,
  ref: z.string(),
  sha: z.string(),
  owner: z.string().optional(),
  slug: z.string().optional(),
  workspaceUuid: z.string(),
  repoUuid: z.string(),
});

/** @internal */
export type GetDeploymentGitSourceDeployments15$Outbound = {
  type: string;
  ref: string;
  sha: string;
  owner?: string | undefined;
  slug?: string | undefined;
  workspaceUuid: string;
  repoUuid: string;
};

/** @internal */
export const GetDeploymentGitSourceDeployments15$outboundSchema: z.ZodType<
  GetDeploymentGitSourceDeployments15$Outbound,
  z.ZodTypeDef,
  GetDeploymentGitSourceDeployments15
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody115Type$outboundSchema,
  ref: z.string(),
  sha: z.string(),
  owner: z.string().optional(),
  slug: z.string().optional(),
  workspaceUuid: z.string(),
  repoUuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeployments15$ {
  /** @deprecated use `GetDeploymentGitSourceDeployments15$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeployments15$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeployments15$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeployments15$outboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeployments15$Outbound` instead. */
  export type Outbound = GetDeploymentGitSourceDeployments15$Outbound;
}

export function getDeploymentGitSourceDeployments15ToJSON(
  getDeploymentGitSourceDeployments15: GetDeploymentGitSourceDeployments15,
): string {
  return JSON.stringify(
    GetDeploymentGitSourceDeployments15$outboundSchema.parse(
      getDeploymentGitSourceDeployments15,
    ),
  );
}

export function getDeploymentGitSourceDeployments15FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentGitSourceDeployments15, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentGitSourceDeployments15$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentGitSourceDeployments15' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody114Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody114Type
  > = z.nativeEnum(
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody114Type,
  );

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody114Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody114Type
  > =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody114Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody114Type$ {
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody114Type$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody114Type$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody114Type$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody114Type$outboundSchema;
}

/** @internal */
export const GetDeploymentGitSourceDeployments14$inboundSchema: z.ZodType<
  GetDeploymentGitSourceDeployments14,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody114Type$inboundSchema,
  ref: z.string(),
  sha: z.string(),
  projectId: z.number(),
});

/** @internal */
export type GetDeploymentGitSourceDeployments14$Outbound = {
  type: string;
  ref: string;
  sha: string;
  projectId: number;
};

/** @internal */
export const GetDeploymentGitSourceDeployments14$outboundSchema: z.ZodType<
  GetDeploymentGitSourceDeployments14$Outbound,
  z.ZodTypeDef,
  GetDeploymentGitSourceDeployments14
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody114Type$outboundSchema,
  ref: z.string(),
  sha: z.string(),
  projectId: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeployments14$ {
  /** @deprecated use `GetDeploymentGitSourceDeployments14$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeployments14$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeployments14$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeployments14$outboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeployments14$Outbound` instead. */
  export type Outbound = GetDeploymentGitSourceDeployments14$Outbound;
}

export function getDeploymentGitSourceDeployments14ToJSON(
  getDeploymentGitSourceDeployments14: GetDeploymentGitSourceDeployments14,
): string {
  return JSON.stringify(
    GetDeploymentGitSourceDeployments14$outboundSchema.parse(
      getDeploymentGitSourceDeployments14,
    ),
  );
}

export function getDeploymentGitSourceDeployments14FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentGitSourceDeployments14, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentGitSourceDeployments14$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentGitSourceDeployments14' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody113Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody113Type
  > = z.nativeEnum(
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody113Type,
  );

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody113Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody113Type
  > =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody113Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody113Type$ {
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody113Type$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody113Type$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody113Type$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody113Type$outboundSchema;
}

/** @internal */
export const GetDeploymentGitSourceDeployments13$inboundSchema: z.ZodType<
  GetDeploymentGitSourceDeployments13,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody113Type$inboundSchema,
  ref: z.string(),
  sha: z.string(),
  repoId: z.number(),
  org: z.string().optional(),
  repo: z.string().optional(),
});

/** @internal */
export type GetDeploymentGitSourceDeployments13$Outbound = {
  type: string;
  ref: string;
  sha: string;
  repoId: number;
  org?: string | undefined;
  repo?: string | undefined;
};

/** @internal */
export const GetDeploymentGitSourceDeployments13$outboundSchema: z.ZodType<
  GetDeploymentGitSourceDeployments13$Outbound,
  z.ZodTypeDef,
  GetDeploymentGitSourceDeployments13
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody113Type$outboundSchema,
  ref: z.string(),
  sha: z.string(),
  repoId: z.number(),
  org: z.string().optional(),
  repo: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeployments13$ {
  /** @deprecated use `GetDeploymentGitSourceDeployments13$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeployments13$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeployments13$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeployments13$outboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeployments13$Outbound` instead. */
  export type Outbound = GetDeploymentGitSourceDeployments13$Outbound;
}

export function getDeploymentGitSourceDeployments13ToJSON(
  getDeploymentGitSourceDeployments13: GetDeploymentGitSourceDeployments13,
): string {
  return JSON.stringify(
    GetDeploymentGitSourceDeployments13$outboundSchema.parse(
      getDeploymentGitSourceDeployments13,
    ),
  );
}

export function getDeploymentGitSourceDeployments13FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentGitSourceDeployments13, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentGitSourceDeployments13$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentGitSourceDeployments13' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type
  > = z.nativeEnum(
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type,
  );

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type
  > =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type$ {
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type$outboundSchema;
}

/** @internal */
export const GetDeploymentGitSourceDeployments12$inboundSchema: z.ZodType<
  GetDeploymentGitSourceDeployments12,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type$inboundSchema,
  host: z.string(),
  ref: z.string(),
  sha: z.string(),
  repoId: z.number(),
  org: z.string().optional(),
  repo: z.string().optional(),
});

/** @internal */
export type GetDeploymentGitSourceDeployments12$Outbound = {
  type: string;
  host: string;
  ref: string;
  sha: string;
  repoId: number;
  org?: string | undefined;
  repo?: string | undefined;
};

/** @internal */
export const GetDeploymentGitSourceDeployments12$outboundSchema: z.ZodType<
  GetDeploymentGitSourceDeployments12$Outbound,
  z.ZodTypeDef,
  GetDeploymentGitSourceDeployments12
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type$outboundSchema,
  host: z.string(),
  ref: z.string(),
  sha: z.string(),
  repoId: z.number(),
  org: z.string().optional(),
  repo: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeployments12$ {
  /** @deprecated use `GetDeploymentGitSourceDeployments12$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeployments12$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeployments12$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeployments12$outboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeployments12$Outbound` instead. */
  export type Outbound = GetDeploymentGitSourceDeployments12$Outbound;
}

export function getDeploymentGitSourceDeployments12ToJSON(
  getDeploymentGitSourceDeployments12: GetDeploymentGitSourceDeployments12,
): string {
  return JSON.stringify(
    GetDeploymentGitSourceDeployments12$outboundSchema.parse(
      getDeploymentGitSourceDeployments12,
    ),
  );
}

export function getDeploymentGitSourceDeployments12FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentGitSourceDeployments12, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentGitSourceDeployments12$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentGitSourceDeployments12' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type
  > = z.nativeEnum(
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type,
  );

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type
  > =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type$ {
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type$outboundSchema;
}

/** @internal */
export const GetDeploymentGitSourceDeployments11$inboundSchema: z.ZodType<
  GetDeploymentGitSourceDeployments11,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type$inboundSchema,
  ref: z.string(),
  sha: z.string(),
  repoId: z.number(),
  org: z.string().optional(),
  repo: z.string().optional(),
});

/** @internal */
export type GetDeploymentGitSourceDeployments11$Outbound = {
  type: string;
  ref: string;
  sha: string;
  repoId: number;
  org?: string | undefined;
  repo?: string | undefined;
};

/** @internal */
export const GetDeploymentGitSourceDeployments11$outboundSchema: z.ZodType<
  GetDeploymentGitSourceDeployments11$Outbound,
  z.ZodTypeDef,
  GetDeploymentGitSourceDeployments11
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type$outboundSchema,
  ref: z.string(),
  sha: z.string(),
  repoId: z.number(),
  org: z.string().optional(),
  repo: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeployments11$ {
  /** @deprecated use `GetDeploymentGitSourceDeployments11$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeployments11$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeployments11$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeployments11$outboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeployments11$Outbound` instead. */
  export type Outbound = GetDeploymentGitSourceDeployments11$Outbound;
}

export function getDeploymentGitSourceDeployments11ToJSON(
  getDeploymentGitSourceDeployments11: GetDeploymentGitSourceDeployments11,
): string {
  return JSON.stringify(
    GetDeploymentGitSourceDeployments11$outboundSchema.parse(
      getDeploymentGitSourceDeployments11,
    ),
  );
}

export function getDeploymentGitSourceDeployments11FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentGitSourceDeployments11, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentGitSourceDeployments11$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentGitSourceDeployments11' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type
  > = z.nativeEnum(
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type,
  );

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type
  > =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type$ {
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type$outboundSchema;
}

/** @internal */
export const GetDeploymentGitSourceDeployments10$inboundSchema: z.ZodType<
  GetDeploymentGitSourceDeployments10,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type$inboundSchema,
  ref: z.string(),
  sha: z.string(),
  gitUrl: z.string(),
});

/** @internal */
export type GetDeploymentGitSourceDeployments10$Outbound = {
  type: string;
  ref: string;
  sha: string;
  gitUrl: string;
};

/** @internal */
export const GetDeploymentGitSourceDeployments10$outboundSchema: z.ZodType<
  GetDeploymentGitSourceDeployments10$Outbound,
  z.ZodTypeDef,
  GetDeploymentGitSourceDeployments10
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type$outboundSchema,
  ref: z.string(),
  sha: z.string(),
  gitUrl: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeployments10$ {
  /** @deprecated use `GetDeploymentGitSourceDeployments10$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeployments10$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeployments10$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeployments10$outboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeployments10$Outbound` instead. */
  export type Outbound = GetDeploymentGitSourceDeployments10$Outbound;
}

export function getDeploymentGitSourceDeployments10ToJSON(
  getDeploymentGitSourceDeployments10: GetDeploymentGitSourceDeployments10,
): string {
  return JSON.stringify(
    GetDeploymentGitSourceDeployments10$outboundSchema.parse(
      getDeploymentGitSourceDeployments10,
    ),
  );
}

export function getDeploymentGitSourceDeployments10FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentGitSourceDeployments10, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentGitSourceDeployments10$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentGitSourceDeployments10' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type
  > = z.nativeEnum(
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type,
  );

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type
  > =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type$ {
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type$outboundSchema;
}

/** @internal */
export const GetDeploymentGitSourceDeployments9$inboundSchema: z.ZodType<
  GetDeploymentGitSourceDeployments9,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type$inboundSchema,
  owner: z.string(),
  slug: z.string(),
  ref: z.nullable(z.string()).optional(),
  sha: z.string().optional(),
  prId: z.nullable(z.number()).optional(),
});

/** @internal */
export type GetDeploymentGitSourceDeployments9$Outbound = {
  type: string;
  owner: string;
  slug: string;
  ref?: string | null | undefined;
  sha?: string | undefined;
  prId?: number | null | undefined;
};

/** @internal */
export const GetDeploymentGitSourceDeployments9$outboundSchema: z.ZodType<
  GetDeploymentGitSourceDeployments9$Outbound,
  z.ZodTypeDef,
  GetDeploymentGitSourceDeployments9
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type$outboundSchema,
  owner: z.string(),
  slug: z.string(),
  ref: z.nullable(z.string()).optional(),
  sha: z.string().optional(),
  prId: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeployments9$ {
  /** @deprecated use `GetDeploymentGitSourceDeployments9$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentGitSourceDeployments9$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeployments9$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeployments9$outboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeployments9$Outbound` instead. */
  export type Outbound = GetDeploymentGitSourceDeployments9$Outbound;
}

export function getDeploymentGitSourceDeployments9ToJSON(
  getDeploymentGitSourceDeployments9: GetDeploymentGitSourceDeployments9,
): string {
  return JSON.stringify(
    GetDeploymentGitSourceDeployments9$outboundSchema.parse(
      getDeploymentGitSourceDeployments9,
    ),
  );
}

export function getDeploymentGitSourceDeployments9FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentGitSourceDeployments9, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentGitSourceDeployments9$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentGitSourceDeployments9' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type
  > = z.nativeEnum(
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type,
  );

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type
  > =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type$ {
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type$outboundSchema;
}

/** @internal */
export const GetDeploymentGitSourceDeployments8$inboundSchema: z.ZodType<
  GetDeploymentGitSourceDeployments8,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type$inboundSchema,
  workspaceUuid: z.string().optional(),
  repoUuid: z.string(),
  ref: z.nullable(z.string()).optional(),
  sha: z.string().optional(),
  prId: z.nullable(z.number()).optional(),
});

/** @internal */
export type GetDeploymentGitSourceDeployments8$Outbound = {
  type: string;
  workspaceUuid?: string | undefined;
  repoUuid: string;
  ref?: string | null | undefined;
  sha?: string | undefined;
  prId?: number | null | undefined;
};

/** @internal */
export const GetDeploymentGitSourceDeployments8$outboundSchema: z.ZodType<
  GetDeploymentGitSourceDeployments8$Outbound,
  z.ZodTypeDef,
  GetDeploymentGitSourceDeployments8
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type$outboundSchema,
  workspaceUuid: z.string().optional(),
  repoUuid: z.string(),
  ref: z.nullable(z.string()).optional(),
  sha: z.string().optional(),
  prId: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeployments8$ {
  /** @deprecated use `GetDeploymentGitSourceDeployments8$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentGitSourceDeployments8$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeployments8$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeployments8$outboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeployments8$Outbound` instead. */
  export type Outbound = GetDeploymentGitSourceDeployments8$Outbound;
}

export function getDeploymentGitSourceDeployments8ToJSON(
  getDeploymentGitSourceDeployments8: GetDeploymentGitSourceDeployments8,
): string {
  return JSON.stringify(
    GetDeploymentGitSourceDeployments8$outboundSchema.parse(
      getDeploymentGitSourceDeployments8,
    ),
  );
}

export function getDeploymentGitSourceDeployments8FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentGitSourceDeployments8, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentGitSourceDeployments8$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentGitSourceDeployments8' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType
  > =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const GetDeploymentGitSourceProjectId$inboundSchema: z.ZodType<
  GetDeploymentGitSourceProjectId,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type GetDeploymentGitSourceProjectId$Outbound = string | number;

/** @internal */
export const GetDeploymentGitSourceProjectId$outboundSchema: z.ZodType<
  GetDeploymentGitSourceProjectId$Outbound,
  z.ZodTypeDef,
  GetDeploymentGitSourceProjectId
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceProjectId$ {
  /** @deprecated use `GetDeploymentGitSourceProjectId$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentGitSourceProjectId$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceProjectId$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentGitSourceProjectId$outboundSchema;
  /** @deprecated use `GetDeploymentGitSourceProjectId$Outbound` instead. */
  export type Outbound = GetDeploymentGitSourceProjectId$Outbound;
}

export function getDeploymentGitSourceProjectIdToJSON(
  getDeploymentGitSourceProjectId: GetDeploymentGitSourceProjectId,
): string {
  return JSON.stringify(
    GetDeploymentGitSourceProjectId$outboundSchema.parse(
      getDeploymentGitSourceProjectId,
    ),
  );
}

export function getDeploymentGitSourceProjectIdFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentGitSourceProjectId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentGitSourceProjectId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentGitSourceProjectId' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitSourceDeployments7$inboundSchema: z.ZodType<
  GetDeploymentGitSourceDeployments7,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$inboundSchema,
  projectId: z.union([z.string(), z.number()]),
  ref: z.nullable(z.string()).optional(),
  sha: z.string().optional(),
  prId: z.nullable(z.number()).optional(),
});

/** @internal */
export type GetDeploymentGitSourceDeployments7$Outbound = {
  type: string;
  projectId: string | number;
  ref?: string | null | undefined;
  sha?: string | undefined;
  prId?: number | null | undefined;
};

/** @internal */
export const GetDeploymentGitSourceDeployments7$outboundSchema: z.ZodType<
  GetDeploymentGitSourceDeployments7$Outbound,
  z.ZodTypeDef,
  GetDeploymentGitSourceDeployments7
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$outboundSchema,
  projectId: z.union([z.string(), z.number()]),
  ref: z.nullable(z.string()).optional(),
  sha: z.string().optional(),
  prId: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeployments7$ {
  /** @deprecated use `GetDeploymentGitSourceDeployments7$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentGitSourceDeployments7$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeployments7$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeployments7$outboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeployments7$Outbound` instead. */
  export type Outbound = GetDeploymentGitSourceDeployments7$Outbound;
}

export function getDeploymentGitSourceDeployments7ToJSON(
  getDeploymentGitSourceDeployments7: GetDeploymentGitSourceDeployments7,
): string {
  return JSON.stringify(
    GetDeploymentGitSourceDeployments7$outboundSchema.parse(
      getDeploymentGitSourceDeployments7,
    ),
  );
}

export function getDeploymentGitSourceDeployments7FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentGitSourceDeployments7, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentGitSourceDeployments7$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentGitSourceDeployments7' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType
  > = z.nativeEnum(
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType,
  );

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType
  > =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$ {
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const GetDeploymentGitSourceDeployments6$inboundSchema: z.ZodType<
  GetDeploymentGitSourceDeployments6,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$inboundSchema,
  org: z.string(),
  repo: z.string(),
  ref: z.nullable(z.string()).optional(),
  sha: z.string().optional(),
  prId: z.nullable(z.number()).optional(),
});

/** @internal */
export type GetDeploymentGitSourceDeployments6$Outbound = {
  type: string;
  org: string;
  repo: string;
  ref?: string | null | undefined;
  sha?: string | undefined;
  prId?: number | null | undefined;
};

/** @internal */
export const GetDeploymentGitSourceDeployments6$outboundSchema: z.ZodType<
  GetDeploymentGitSourceDeployments6$Outbound,
  z.ZodTypeDef,
  GetDeploymentGitSourceDeployments6
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$outboundSchema,
  org: z.string(),
  repo: z.string(),
  ref: z.nullable(z.string()).optional(),
  sha: z.string().optional(),
  prId: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeployments6$ {
  /** @deprecated use `GetDeploymentGitSourceDeployments6$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentGitSourceDeployments6$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeployments6$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeployments6$outboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeployments6$Outbound` instead. */
  export type Outbound = GetDeploymentGitSourceDeployments6$Outbound;
}

export function getDeploymentGitSourceDeployments6ToJSON(
  getDeploymentGitSourceDeployments6: GetDeploymentGitSourceDeployments6,
): string {
  return JSON.stringify(
    GetDeploymentGitSourceDeployments6$outboundSchema.parse(
      getDeploymentGitSourceDeployments6,
    ),
  );
}

export function getDeploymentGitSourceDeployments6FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentGitSourceDeployments6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentGitSourceDeployments6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentGitSourceDeployments6' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200Type> = z
    .nativeEnum(GetDeploymentGitSourceDeploymentsResponse200Type);

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponse200Type> =
    GetDeploymentGitSourceDeploymentsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeploymentsResponse200Type$ {
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200Type$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200Type$outboundSchema;
}

/** @internal */
export const GetDeploymentGitSourceRepoId$inboundSchema: z.ZodType<
  GetDeploymentGitSourceRepoId,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type GetDeploymentGitSourceRepoId$Outbound = string | number;

/** @internal */
export const GetDeploymentGitSourceRepoId$outboundSchema: z.ZodType<
  GetDeploymentGitSourceRepoId$Outbound,
  z.ZodTypeDef,
  GetDeploymentGitSourceRepoId
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceRepoId$ {
  /** @deprecated use `GetDeploymentGitSourceRepoId$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentGitSourceRepoId$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceRepoId$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentGitSourceRepoId$outboundSchema;
  /** @deprecated use `GetDeploymentGitSourceRepoId$Outbound` instead. */
  export type Outbound = GetDeploymentGitSourceRepoId$Outbound;
}

export function getDeploymentGitSourceRepoIdToJSON(
  getDeploymentGitSourceRepoId: GetDeploymentGitSourceRepoId,
): string {
  return JSON.stringify(
    GetDeploymentGitSourceRepoId$outboundSchema.parse(
      getDeploymentGitSourceRepoId,
    ),
  );
}

export function getDeploymentGitSourceRepoIdFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentGitSourceRepoId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentGitSourceRepoId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentGitSourceRepoId' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitSourceDeployments5$inboundSchema: z.ZodType<
  GetDeploymentGitSourceDeployments5,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetDeploymentGitSourceDeploymentsResponse200Type$inboundSchema,
  repoId: z.union([z.string(), z.number()]),
  ref: z.nullable(z.string()).optional(),
  sha: z.string().optional(),
  prId: z.nullable(z.number()).optional(),
});

/** @internal */
export type GetDeploymentGitSourceDeployments5$Outbound = {
  type: string;
  repoId: string | number;
  ref?: string | null | undefined;
  sha?: string | undefined;
  prId?: number | null | undefined;
};

/** @internal */
export const GetDeploymentGitSourceDeployments5$outboundSchema: z.ZodType<
  GetDeploymentGitSourceDeployments5$Outbound,
  z.ZodTypeDef,
  GetDeploymentGitSourceDeployments5
> = z.object({
  type: GetDeploymentGitSourceDeploymentsResponse200Type$outboundSchema,
  repoId: z.union([z.string(), z.number()]),
  ref: z.nullable(z.string()).optional(),
  sha: z.string().optional(),
  prId: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeployments5$ {
  /** @deprecated use `GetDeploymentGitSourceDeployments5$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentGitSourceDeployments5$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeployments5$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeployments5$outboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeployments5$Outbound` instead. */
  export type Outbound = GetDeploymentGitSourceDeployments5$Outbound;
}

export function getDeploymentGitSourceDeployments5ToJSON(
  getDeploymentGitSourceDeployments5: GetDeploymentGitSourceDeployments5,
): string {
  return JSON.stringify(
    GetDeploymentGitSourceDeployments5$outboundSchema.parse(
      getDeploymentGitSourceDeployments5,
    ),
  );
}

export function getDeploymentGitSourceDeployments5FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentGitSourceDeployments5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentGitSourceDeployments5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentGitSourceDeployments5' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponseType$inboundSchema:
  z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponseType> = z
    .nativeEnum(GetDeploymentGitSourceDeploymentsResponseType);

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsResponseType> =
    GetDeploymentGitSourceDeploymentsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeploymentsResponseType$ {
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeploymentsResponseType$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeploymentsResponseType$outboundSchema;
}

/** @internal */
export const GetDeploymentGitSourceDeployments4$inboundSchema: z.ZodType<
  GetDeploymentGitSourceDeployments4,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetDeploymentGitSourceDeploymentsResponseType$inboundSchema,
  host: z.string(),
  org: z.string(),
  repo: z.string(),
  ref: z.nullable(z.string()).optional(),
  sha: z.string().optional(),
  prId: z.nullable(z.number()).optional(),
});

/** @internal */
export type GetDeploymentGitSourceDeployments4$Outbound = {
  type: string;
  host: string;
  org: string;
  repo: string;
  ref?: string | null | undefined;
  sha?: string | undefined;
  prId?: number | null | undefined;
};

/** @internal */
export const GetDeploymentGitSourceDeployments4$outboundSchema: z.ZodType<
  GetDeploymentGitSourceDeployments4$Outbound,
  z.ZodTypeDef,
  GetDeploymentGitSourceDeployments4
> = z.object({
  type: GetDeploymentGitSourceDeploymentsResponseType$outboundSchema,
  host: z.string(),
  org: z.string(),
  repo: z.string(),
  ref: z.nullable(z.string()).optional(),
  sha: z.string().optional(),
  prId: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeployments4$ {
  /** @deprecated use `GetDeploymentGitSourceDeployments4$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentGitSourceDeployments4$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeployments4$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeployments4$outboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeployments4$Outbound` instead. */
  export type Outbound = GetDeploymentGitSourceDeployments4$Outbound;
}

export function getDeploymentGitSourceDeployments4ToJSON(
  getDeploymentGitSourceDeployments4: GetDeploymentGitSourceDeployments4,
): string {
  return JSON.stringify(
    GetDeploymentGitSourceDeployments4$outboundSchema.parse(
      getDeploymentGitSourceDeployments4,
    ),
  );
}

export function getDeploymentGitSourceDeployments4FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentGitSourceDeployments4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentGitSourceDeployments4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentGitSourceDeployments4' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsType$inboundSchema:
  z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsType> = z.nativeEnum(
    GetDeploymentGitSourceDeploymentsType,
  );

/** @internal */
export const GetDeploymentGitSourceDeploymentsType$outboundSchema:
  z.ZodNativeEnum<typeof GetDeploymentGitSourceDeploymentsType> =
    GetDeploymentGitSourceDeploymentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeploymentsType$ {
  /** @deprecated use `GetDeploymentGitSourceDeploymentsType$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeploymentsType$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsType$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeploymentsType$outboundSchema;
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId$inboundSchema:
  z.ZodType<
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.number()]);

/** @internal */
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId$Outbound =
  | string
  | number;

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId$outboundSchema:
  z.ZodType<
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId$Outbound,
    z.ZodTypeDef,
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId
  > = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId$ {
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId$outboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId$Outbound` instead. */
  export type Outbound =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId$Outbound;
}

export function getDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoIdToJSON(
  getDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId,
): string {
  return JSON.stringify(
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId$outboundSchema
      .parse(
        getDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId,
      ),
  );
}

export function getDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoIdFromJSON(
  jsonString: string,
): SafeParseResult<
  GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitSourceDeployments3$inboundSchema: z.ZodType<
  GetDeploymentGitSourceDeployments3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetDeploymentGitSourceDeploymentsType$inboundSchema,
  host: z.string(),
  repoId: z.union([z.string(), z.number()]),
  ref: z.nullable(z.string()).optional(),
  sha: z.string().optional(),
  prId: z.nullable(z.number()).optional(),
});

/** @internal */
export type GetDeploymentGitSourceDeployments3$Outbound = {
  type: string;
  host: string;
  repoId: string | number;
  ref?: string | null | undefined;
  sha?: string | undefined;
  prId?: number | null | undefined;
};

/** @internal */
export const GetDeploymentGitSourceDeployments3$outboundSchema: z.ZodType<
  GetDeploymentGitSourceDeployments3$Outbound,
  z.ZodTypeDef,
  GetDeploymentGitSourceDeployments3
> = z.object({
  type: GetDeploymentGitSourceDeploymentsType$outboundSchema,
  host: z.string(),
  repoId: z.union([z.string(), z.number()]),
  ref: z.nullable(z.string()).optional(),
  sha: z.string().optional(),
  prId: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeployments3$ {
  /** @deprecated use `GetDeploymentGitSourceDeployments3$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentGitSourceDeployments3$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeployments3$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeployments3$outboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeployments3$Outbound` instead. */
  export type Outbound = GetDeploymentGitSourceDeployments3$Outbound;
}

export function getDeploymentGitSourceDeployments3ToJSON(
  getDeploymentGitSourceDeployments3: GetDeploymentGitSourceDeployments3,
): string {
  return JSON.stringify(
    GetDeploymentGitSourceDeployments3$outboundSchema.parse(
      getDeploymentGitSourceDeployments3,
    ),
  );
}

export function getDeploymentGitSourceDeployments3FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentGitSourceDeployments3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentGitSourceDeployments3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentGitSourceDeployments3' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitSourceType$inboundSchema: z.ZodNativeEnum<
  typeof GetDeploymentGitSourceType
> = z.nativeEnum(GetDeploymentGitSourceType);

/** @internal */
export const GetDeploymentGitSourceType$outboundSchema: z.ZodNativeEnum<
  typeof GetDeploymentGitSourceType
> = GetDeploymentGitSourceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceType$ {
  /** @deprecated use `GetDeploymentGitSourceType$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentGitSourceType$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceType$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentGitSourceType$outboundSchema;
}

/** @internal */
export const GetDeploymentGitSourceDeployments2$inboundSchema: z.ZodType<
  GetDeploymentGitSourceDeployments2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetDeploymentGitSourceType$inboundSchema,
  org: z.string(),
  repo: z.string(),
  ref: z.nullable(z.string()).optional(),
  sha: z.string().optional(),
  prId: z.nullable(z.number()).optional(),
});

/** @internal */
export type GetDeploymentGitSourceDeployments2$Outbound = {
  type: string;
  org: string;
  repo: string;
  ref?: string | null | undefined;
  sha?: string | undefined;
  prId?: number | null | undefined;
};

/** @internal */
export const GetDeploymentGitSourceDeployments2$outboundSchema: z.ZodType<
  GetDeploymentGitSourceDeployments2$Outbound,
  z.ZodTypeDef,
  GetDeploymentGitSourceDeployments2
> = z.object({
  type: GetDeploymentGitSourceType$outboundSchema,
  org: z.string(),
  repo: z.string(),
  ref: z.nullable(z.string()).optional(),
  sha: z.string().optional(),
  prId: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeployments2$ {
  /** @deprecated use `GetDeploymentGitSourceDeployments2$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentGitSourceDeployments2$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeployments2$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeployments2$outboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeployments2$Outbound` instead. */
  export type Outbound = GetDeploymentGitSourceDeployments2$Outbound;
}

export function getDeploymentGitSourceDeployments2ToJSON(
  getDeploymentGitSourceDeployments2: GetDeploymentGitSourceDeployments2,
): string {
  return JSON.stringify(
    GetDeploymentGitSourceDeployments2$outboundSchema.parse(
      getDeploymentGitSourceDeployments2,
    ),
  );
}

export function getDeploymentGitSourceDeployments2FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentGitSourceDeployments2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentGitSourceDeployments2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentGitSourceDeployments2' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type
  > = z.nativeEnum(
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type,
  );

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type
  > =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$ {
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$outboundSchema;
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId$inboundSchema:
  z.ZodType<
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.number()]);

/** @internal */
export type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId$Outbound =
  | string
  | number;

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId$outboundSchema:
  z.ZodType<
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId$Outbound,
    z.ZodTypeDef,
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId
  > = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId$ {
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId$outboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId$Outbound` instead. */
  export type Outbound =
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId$Outbound;
}

export function getDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoIdToJSON(
  getDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId,
): string {
  return JSON.stringify(
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId$outboundSchema
      .parse(getDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId),
  );
}

export function getDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoIdFromJSON(
  jsonString: string,
): SafeParseResult<
  GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitSourceDeployments1$inboundSchema: z.ZodType<
  GetDeploymentGitSourceDeployments1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$inboundSchema,
  repoId: z.union([z.string(), z.number()]),
  ref: z.nullable(z.string()).optional(),
  sha: z.string().optional(),
  prId: z.nullable(z.number()).optional(),
});

/** @internal */
export type GetDeploymentGitSourceDeployments1$Outbound = {
  type: string;
  repoId: string | number;
  ref?: string | null | undefined;
  sha?: string | undefined;
  prId?: number | null | undefined;
};

/** @internal */
export const GetDeploymentGitSourceDeployments1$outboundSchema: z.ZodType<
  GetDeploymentGitSourceDeployments1$Outbound,
  z.ZodTypeDef,
  GetDeploymentGitSourceDeployments1
> = z.object({
  type:
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$outboundSchema,
  repoId: z.union([z.string(), z.number()]),
  ref: z.nullable(z.string()).optional(),
  sha: z.string().optional(),
  prId: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitSourceDeployments1$ {
  /** @deprecated use `GetDeploymentGitSourceDeployments1$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentGitSourceDeployments1$inboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeployments1$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitSourceDeployments1$outboundSchema;
  /** @deprecated use `GetDeploymentGitSourceDeployments1$Outbound` instead. */
  export type Outbound = GetDeploymentGitSourceDeployments1$Outbound;
}

export function getDeploymentGitSourceDeployments1ToJSON(
  getDeploymentGitSourceDeployments1: GetDeploymentGitSourceDeployments1,
): string {
  return JSON.stringify(
    GetDeploymentGitSourceDeployments1$outboundSchema.parse(
      getDeploymentGitSourceDeployments1,
    ),
  );
}

export function getDeploymentGitSourceDeployments1FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentGitSourceDeployments1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentGitSourceDeployments1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentGitSourceDeployments1' from JSON`,
  );
}

/** @internal */
export const GetDeploymentResponseBodyGitSource$inboundSchema: z.ZodType<
  GetDeploymentResponseBodyGitSource,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetDeploymentGitSourceDeployments12$inboundSchema),
  z.lazy(() => GetDeploymentGitSourceDeployments15$inboundSchema),
  z.lazy(() => GetDeploymentGitSourceDeployments4$inboundSchema),
  z.lazy(() => GetDeploymentGitSourceDeployments10$inboundSchema),
  z.lazy(() => GetDeploymentGitSourceDeployments11$inboundSchema),
  z.lazy(() => GetDeploymentGitSourceDeployments13$inboundSchema),
  z.lazy(() => GetDeploymentGitSourceDeployments14$inboundSchema),
  z.lazy(() => GetDeploymentGitSourceDeployments2$inboundSchema),
  z.lazy(() => GetDeploymentGitSourceDeployments3$inboundSchema),
  z.lazy(() => GetDeploymentGitSourceDeployments6$inboundSchema),
  z.lazy(() => GetDeploymentGitSourceDeployments9$inboundSchema),
  z.lazy(() => GetDeploymentGitSourceDeployments1$inboundSchema),
  z.lazy(() => GetDeploymentGitSourceDeployments5$inboundSchema),
  z.lazy(() => GetDeploymentGitSourceDeployments7$inboundSchema),
  z.lazy(() => GetDeploymentGitSourceDeployments8$inboundSchema),
]);

/** @internal */
export type GetDeploymentResponseBodyGitSource$Outbound =
  | GetDeploymentGitSourceDeployments12$Outbound
  | GetDeploymentGitSourceDeployments15$Outbound
  | GetDeploymentGitSourceDeployments4$Outbound
  | GetDeploymentGitSourceDeployments10$Outbound
  | GetDeploymentGitSourceDeployments11$Outbound
  | GetDeploymentGitSourceDeployments13$Outbound
  | GetDeploymentGitSourceDeployments14$Outbound
  | GetDeploymentGitSourceDeployments2$Outbound
  | GetDeploymentGitSourceDeployments3$Outbound
  | GetDeploymentGitSourceDeployments6$Outbound
  | GetDeploymentGitSourceDeployments9$Outbound
  | GetDeploymentGitSourceDeployments1$Outbound
  | GetDeploymentGitSourceDeployments5$Outbound
  | GetDeploymentGitSourceDeployments7$Outbound
  | GetDeploymentGitSourceDeployments8$Outbound;

/** @internal */
export const GetDeploymentResponseBodyGitSource$outboundSchema: z.ZodType<
  GetDeploymentResponseBodyGitSource$Outbound,
  z.ZodTypeDef,
  GetDeploymentResponseBodyGitSource
> = z.union([
  z.lazy(() => GetDeploymentGitSourceDeployments12$outboundSchema),
  z.lazy(() => GetDeploymentGitSourceDeployments15$outboundSchema),
  z.lazy(() => GetDeploymentGitSourceDeployments4$outboundSchema),
  z.lazy(() => GetDeploymentGitSourceDeployments10$outboundSchema),
  z.lazy(() => GetDeploymentGitSourceDeployments11$outboundSchema),
  z.lazy(() => GetDeploymentGitSourceDeployments13$outboundSchema),
  z.lazy(() => GetDeploymentGitSourceDeployments14$outboundSchema),
  z.lazy(() => GetDeploymentGitSourceDeployments2$outboundSchema),
  z.lazy(() => GetDeploymentGitSourceDeployments3$outboundSchema),
  z.lazy(() => GetDeploymentGitSourceDeployments6$outboundSchema),
  z.lazy(() => GetDeploymentGitSourceDeployments9$outboundSchema),
  z.lazy(() => GetDeploymentGitSourceDeployments1$outboundSchema),
  z.lazy(() => GetDeploymentGitSourceDeployments5$outboundSchema),
  z.lazy(() => GetDeploymentGitSourceDeployments7$outboundSchema),
  z.lazy(() => GetDeploymentGitSourceDeployments8$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentResponseBodyGitSource$ {
  /** @deprecated use `GetDeploymentResponseBodyGitSource$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentResponseBodyGitSource$inboundSchema;
  /** @deprecated use `GetDeploymentResponseBodyGitSource$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentResponseBodyGitSource$outboundSchema;
  /** @deprecated use `GetDeploymentResponseBodyGitSource$Outbound` instead. */
  export type Outbound = GetDeploymentResponseBodyGitSource$Outbound;
}

export function getDeploymentResponseBodyGitSourceToJSON(
  getDeploymentResponseBodyGitSource: GetDeploymentResponseBodyGitSource,
): string {
  return JSON.stringify(
    GetDeploymentResponseBodyGitSource$outboundSchema.parse(
      getDeploymentResponseBodyGitSource,
    ),
  );
}

export function getDeploymentResponseBodyGitSourceFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentResponseBodyGitSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentResponseBodyGitSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentResponseBodyGitSource' from JSON`,
  );
}

/** @internal */
export const ResponseBodyNodeVersion$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyNodeVersion
> = z.nativeEnum(ResponseBodyNodeVersion);

/** @internal */
export const ResponseBodyNodeVersion$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyNodeVersion
> = ResponseBodyNodeVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyNodeVersion$ {
  /** @deprecated use `ResponseBodyNodeVersion$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyNodeVersion$inboundSchema;
  /** @deprecated use `ResponseBodyNodeVersion$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyNodeVersion$outboundSchema;
}

/** @internal */
export const ResponseBodyProject$inboundSchema: z.ZodType<
  ResponseBodyProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  framework: z.nullable(z.string()).optional(),
});

/** @internal */
export type ResponseBodyProject$Outbound = {
  id: string;
  name: string;
  framework?: string | null | undefined;
};

/** @internal */
export const ResponseBodyProject$outboundSchema: z.ZodType<
  ResponseBodyProject$Outbound,
  z.ZodTypeDef,
  ResponseBodyProject
> = z.object({
  id: z.string(),
  name: z.string(),
  framework: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyProject$ {
  /** @deprecated use `ResponseBodyProject$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyProject$inboundSchema;
  /** @deprecated use `ResponseBodyProject$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyProject$outboundSchema;
  /** @deprecated use `ResponseBodyProject$Outbound` instead. */
  export type Outbound = ResponseBodyProject$Outbound;
}

export function responseBodyProjectToJSON(
  responseBodyProject: ResponseBodyProject,
): string {
  return JSON.stringify(
    ResponseBodyProject$outboundSchema.parse(responseBodyProject),
  );
}

export function responseBodyProjectFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyProject' from JSON`,
  );
}

/** @internal */
export const ResponseBodyReadySubstate$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyReadySubstate
> = z.nativeEnum(ResponseBodyReadySubstate);

/** @internal */
export const ResponseBodyReadySubstate$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyReadySubstate
> = ResponseBodyReadySubstate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyReadySubstate$ {
  /** @deprecated use `ResponseBodyReadySubstate$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyReadySubstate$inboundSchema;
  /** @deprecated use `ResponseBodyReadySubstate$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyReadySubstate$outboundSchema;
}

/** @internal */
export const ResponseBodySource$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodySource
> = z.nativeEnum(ResponseBodySource);

/** @internal */
export const ResponseBodySource$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodySource
> = ResponseBodySource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodySource$ {
  /** @deprecated use `ResponseBodySource$inboundSchema` instead. */
  export const inboundSchema = ResponseBodySource$inboundSchema;
  /** @deprecated use `ResponseBodySource$outboundSchema` instead. */
  export const outboundSchema = ResponseBodySource$outboundSchema;
}

/** @internal */
export const ResponseBodyTarget$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyTarget
> = z.nativeEnum(ResponseBodyTarget);

/** @internal */
export const ResponseBodyTarget$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyTarget
> = ResponseBodyTarget$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyTarget$ {
  /** @deprecated use `ResponseBodyTarget$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyTarget$inboundSchema;
  /** @deprecated use `ResponseBodyTarget$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyTarget$outboundSchema;
}

/** @internal */
export const ResponseBodyOidcTokenClaims$inboundSchema: z.ZodType<
  ResponseBodyOidcTokenClaims,
  z.ZodTypeDef,
  unknown
> = z.object({
  iss: z.string(),
  sub: z.string(),
  scope: z.string(),
  aud: z.string(),
  owner: z.string(),
  owner_id: z.string(),
  project: z.string(),
  project_id: z.string(),
  environment: z.string(),
}).transform((v) => {
  return remap$(v, {
    "owner_id": "ownerId",
    "project_id": "projectId",
  });
});

/** @internal */
export type ResponseBodyOidcTokenClaims$Outbound = {
  iss: string;
  sub: string;
  scope: string;
  aud: string;
  owner: string;
  owner_id: string;
  project: string;
  project_id: string;
  environment: string;
};

/** @internal */
export const ResponseBodyOidcTokenClaims$outboundSchema: z.ZodType<
  ResponseBodyOidcTokenClaims$Outbound,
  z.ZodTypeDef,
  ResponseBodyOidcTokenClaims
> = z.object({
  iss: z.string(),
  sub: z.string(),
  scope: z.string(),
  aud: z.string(),
  owner: z.string(),
  ownerId: z.string(),
  project: z.string(),
  projectId: z.string(),
  environment: z.string(),
}).transform((v) => {
  return remap$(v, {
    ownerId: "owner_id",
    projectId: "project_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyOidcTokenClaims$ {
  /** @deprecated use `ResponseBodyOidcTokenClaims$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyOidcTokenClaims$inboundSchema;
  /** @deprecated use `ResponseBodyOidcTokenClaims$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyOidcTokenClaims$outboundSchema;
  /** @deprecated use `ResponseBodyOidcTokenClaims$Outbound` instead. */
  export type Outbound = ResponseBodyOidcTokenClaims$Outbound;
}

export function responseBodyOidcTokenClaimsToJSON(
  responseBodyOidcTokenClaims: ResponseBodyOidcTokenClaims,
): string {
  return JSON.stringify(
    ResponseBodyOidcTokenClaims$outboundSchema.parse(
      responseBodyOidcTokenClaims,
    ),
  );
}

export function responseBodyOidcTokenClaimsFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyOidcTokenClaims, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyOidcTokenClaims$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyOidcTokenClaims' from JSON`,
  );
}

/** @internal */
export const ResponseBodyPlan$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyPlan
> = z.nativeEnum(ResponseBodyPlan);

/** @internal */
export const ResponseBodyPlan$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyPlan
> = ResponseBodyPlan$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyPlan$ {
  /** @deprecated use `ResponseBodyPlan$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyPlan$inboundSchema;
  /** @deprecated use `ResponseBodyPlan$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyPlan$outboundSchema;
}

/** @internal */
export const ResponseBodyCrons$inboundSchema: z.ZodType<
  ResponseBodyCrons,
  z.ZodTypeDef,
  unknown
> = z.object({
  schedule: z.string(),
  path: z.string(),
});

/** @internal */
export type ResponseBodyCrons$Outbound = {
  schedule: string;
  path: string;
};

/** @internal */
export const ResponseBodyCrons$outboundSchema: z.ZodType<
  ResponseBodyCrons$Outbound,
  z.ZodTypeDef,
  ResponseBodyCrons
> = z.object({
  schedule: z.string(),
  path: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyCrons$ {
  /** @deprecated use `ResponseBodyCrons$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyCrons$inboundSchema;
  /** @deprecated use `ResponseBodyCrons$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyCrons$outboundSchema;
  /** @deprecated use `ResponseBodyCrons$Outbound` instead. */
  export type Outbound = ResponseBodyCrons$Outbound;
}

export function responseBodyCronsToJSON(
  responseBodyCrons: ResponseBodyCrons,
): string {
  return JSON.stringify(
    ResponseBodyCrons$outboundSchema.parse(responseBodyCrons),
  );
}

export function responseBodyCronsFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyCrons, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyCrons$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyCrons' from JSON`,
  );
}

/** @internal */
export const ResponseBodyArchitecture$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyArchitecture
> = z.nativeEnum(ResponseBodyArchitecture);

/** @internal */
export const ResponseBodyArchitecture$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyArchitecture
> = ResponseBodyArchitecture$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyArchitecture$ {
  /** @deprecated use `ResponseBodyArchitecture$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyArchitecture$inboundSchema;
  /** @deprecated use `ResponseBodyArchitecture$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyArchitecture$outboundSchema;
}

/** @internal */
export const GetDeploymentResponseBodyDeploymentsResponseType$inboundSchema:
  z.ZodNativeEnum<typeof GetDeploymentResponseBodyDeploymentsResponseType> = z
    .nativeEnum(GetDeploymentResponseBodyDeploymentsResponseType);

/** @internal */
export const GetDeploymentResponseBodyDeploymentsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof GetDeploymentResponseBodyDeploymentsResponseType> =
    GetDeploymentResponseBodyDeploymentsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentResponseBodyDeploymentsResponseType$ {
  /** @deprecated use `GetDeploymentResponseBodyDeploymentsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentResponseBodyDeploymentsResponseType$inboundSchema;
  /** @deprecated use `GetDeploymentResponseBodyDeploymentsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentResponseBodyDeploymentsResponseType$outboundSchema;
}

/** @internal */
export const ResponseBodyExperimentalTriggers$inboundSchema: z.ZodType<
  ResponseBodyExperimentalTriggers,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetDeploymentResponseBodyDeploymentsResponseType$inboundSchema,
  topic: z.string(),
  consumer: z.string(),
  maxDeliveries: z.number().optional(),
  retryAfterSeconds: z.number().optional(),
  initialDelaySeconds: z.number().optional(),
});

/** @internal */
export type ResponseBodyExperimentalTriggers$Outbound = {
  type: string;
  topic: string;
  consumer: string;
  maxDeliveries?: number | undefined;
  retryAfterSeconds?: number | undefined;
  initialDelaySeconds?: number | undefined;
};

/** @internal */
export const ResponseBodyExperimentalTriggers$outboundSchema: z.ZodType<
  ResponseBodyExperimentalTriggers$Outbound,
  z.ZodTypeDef,
  ResponseBodyExperimentalTriggers
> = z.object({
  type: GetDeploymentResponseBodyDeploymentsResponseType$outboundSchema,
  topic: z.string(),
  consumer: z.string(),
  maxDeliveries: z.number().optional(),
  retryAfterSeconds: z.number().optional(),
  initialDelaySeconds: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyExperimentalTriggers$ {
  /** @deprecated use `ResponseBodyExperimentalTriggers$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyExperimentalTriggers$inboundSchema;
  /** @deprecated use `ResponseBodyExperimentalTriggers$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyExperimentalTriggers$outboundSchema;
  /** @deprecated use `ResponseBodyExperimentalTriggers$Outbound` instead. */
  export type Outbound = ResponseBodyExperimentalTriggers$Outbound;
}

export function responseBodyExperimentalTriggersToJSON(
  responseBodyExperimentalTriggers: ResponseBodyExperimentalTriggers,
): string {
  return JSON.stringify(
    ResponseBodyExperimentalTriggers$outboundSchema.parse(
      responseBodyExperimentalTriggers,
    ),
  );
}

export function responseBodyExperimentalTriggersFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyExperimentalTriggers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyExperimentalTriggers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyExperimentalTriggers' from JSON`,
  );
}

/** @internal */
export const ResponseBodyFunctions$inboundSchema: z.ZodType<
  ResponseBodyFunctions,
  z.ZodTypeDef,
  unknown
> = z.object({
  architecture: ResponseBodyArchitecture$inboundSchema.optional(),
  memory: z.number().optional(),
  maxDuration: z.number().optional(),
  runtime: z.string().optional(),
  includeFiles: z.string().optional(),
  excludeFiles: z.string().optional(),
  experimentalTriggers: z.array(
    z.lazy(() => ResponseBodyExperimentalTriggers$inboundSchema),
  ).optional(),
  supportsCancellation: z.boolean().optional(),
});

/** @internal */
export type ResponseBodyFunctions$Outbound = {
  architecture?: string | undefined;
  memory?: number | undefined;
  maxDuration?: number | undefined;
  runtime?: string | undefined;
  includeFiles?: string | undefined;
  excludeFiles?: string | undefined;
  experimentalTriggers?:
    | Array<ResponseBodyExperimentalTriggers$Outbound>
    | undefined;
  supportsCancellation?: boolean | undefined;
};

/** @internal */
export const ResponseBodyFunctions$outboundSchema: z.ZodType<
  ResponseBodyFunctions$Outbound,
  z.ZodTypeDef,
  ResponseBodyFunctions
> = z.object({
  architecture: ResponseBodyArchitecture$outboundSchema.optional(),
  memory: z.number().optional(),
  maxDuration: z.number().optional(),
  runtime: z.string().optional(),
  includeFiles: z.string().optional(),
  excludeFiles: z.string().optional(),
  experimentalTriggers: z.array(
    z.lazy(() => ResponseBodyExperimentalTriggers$outboundSchema),
  ).optional(),
  supportsCancellation: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyFunctions$ {
  /** @deprecated use `ResponseBodyFunctions$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyFunctions$inboundSchema;
  /** @deprecated use `ResponseBodyFunctions$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyFunctions$outboundSchema;
  /** @deprecated use `ResponseBodyFunctions$Outbound` instead. */
  export type Outbound = ResponseBodyFunctions$Outbound;
}

export function responseBodyFunctionsToJSON(
  responseBodyFunctions: ResponseBodyFunctions,
): string {
  return JSON.stringify(
    ResponseBodyFunctions$outboundSchema.parse(responseBodyFunctions),
  );
}

export function responseBodyFunctionsFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyFunctions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyFunctions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyFunctions' from JSON`,
  );
}

/** @internal */
export const GetDeploymentRoutes3$inboundSchema: z.ZodType<
  GetDeploymentRoutes3,
  z.ZodTypeDef,
  unknown
> = z.object({
  src: z.string(),
  continue: z.boolean(),
  middleware: z.number(),
});

/** @internal */
export type GetDeploymentRoutes3$Outbound = {
  src: string;
  continue: boolean;
  middleware: number;
};

/** @internal */
export const GetDeploymentRoutes3$outboundSchema: z.ZodType<
  GetDeploymentRoutes3$Outbound,
  z.ZodTypeDef,
  GetDeploymentRoutes3
> = z.object({
  src: z.string(),
  continue: z.boolean(),
  middleware: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentRoutes3$ {
  /** @deprecated use `GetDeploymentRoutes3$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentRoutes3$inboundSchema;
  /** @deprecated use `GetDeploymentRoutes3$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentRoutes3$outboundSchema;
  /** @deprecated use `GetDeploymentRoutes3$Outbound` instead. */
  export type Outbound = GetDeploymentRoutes3$Outbound;
}

export function getDeploymentRoutes3ToJSON(
  getDeploymentRoutes3: GetDeploymentRoutes3,
): string {
  return JSON.stringify(
    GetDeploymentRoutes3$outboundSchema.parse(getDeploymentRoutes3),
  );
}

export function getDeploymentRoutes3FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentRoutes3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentRoutes3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentRoutes3' from JSON`,
  );
}

/** @internal */
export const GetDeploymentRoutesHandle$inboundSchema: z.ZodNativeEnum<
  typeof GetDeploymentRoutesHandle
> = z.nativeEnum(GetDeploymentRoutesHandle);

/** @internal */
export const GetDeploymentRoutesHandle$outboundSchema: z.ZodNativeEnum<
  typeof GetDeploymentRoutesHandle
> = GetDeploymentRoutesHandle$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentRoutesHandle$ {
  /** @deprecated use `GetDeploymentRoutesHandle$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentRoutesHandle$inboundSchema;
  /** @deprecated use `GetDeploymentRoutesHandle$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentRoutesHandle$outboundSchema;
}

/** @internal */
export const GetDeploymentRoutes2$inboundSchema: z.ZodType<
  GetDeploymentRoutes2,
  z.ZodTypeDef,
  unknown
> = z.object({
  handle: GetDeploymentRoutesHandle$inboundSchema,
  src: z.string().optional(),
  dest: z.string().optional(),
  status: z.number().optional(),
});

/** @internal */
export type GetDeploymentRoutes2$Outbound = {
  handle: string;
  src?: string | undefined;
  dest?: string | undefined;
  status?: number | undefined;
};

/** @internal */
export const GetDeploymentRoutes2$outboundSchema: z.ZodType<
  GetDeploymentRoutes2$Outbound,
  z.ZodTypeDef,
  GetDeploymentRoutes2
> = z.object({
  handle: GetDeploymentRoutesHandle$outboundSchema,
  src: z.string().optional(),
  dest: z.string().optional(),
  status: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentRoutes2$ {
  /** @deprecated use `GetDeploymentRoutes2$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentRoutes2$inboundSchema;
  /** @deprecated use `GetDeploymentRoutes2$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentRoutes2$outboundSchema;
  /** @deprecated use `GetDeploymentRoutes2$Outbound` instead. */
  export type Outbound = GetDeploymentRoutes2$Outbound;
}

export function getDeploymentRoutes2ToJSON(
  getDeploymentRoutes2: GetDeploymentRoutes2,
): string {
  return JSON.stringify(
    GetDeploymentRoutes2$outboundSchema.parse(getDeploymentRoutes2),
  );
}

export function getDeploymentRoutes2FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentRoutes2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentRoutes2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentRoutes2' from JSON`,
  );
}

/** @internal */
export const GetDeploymentHasDeploymentsType$inboundSchema: z.ZodNativeEnum<
  typeof GetDeploymentHasDeploymentsType
> = z.nativeEnum(GetDeploymentHasDeploymentsType);

/** @internal */
export const GetDeploymentHasDeploymentsType$outboundSchema: z.ZodNativeEnum<
  typeof GetDeploymentHasDeploymentsType
> = GetDeploymentHasDeploymentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentHasDeploymentsType$ {
  /** @deprecated use `GetDeploymentHasDeploymentsType$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentHasDeploymentsType$inboundSchema;
  /** @deprecated use `GetDeploymentHasDeploymentsType$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentHasDeploymentsType$outboundSchema;
}

/** @internal */
export const GetDeploymentValueDeploymentsResponse200Eq$inboundSchema:
  z.ZodType<GetDeploymentValueDeploymentsResponse200Eq, z.ZodTypeDef, unknown> =
    z.union([z.string(), z.number()]);

/** @internal */
export type GetDeploymentValueDeploymentsResponse200Eq$Outbound =
  | string
  | number;

/** @internal */
export const GetDeploymentValueDeploymentsResponse200Eq$outboundSchema:
  z.ZodType<
    GetDeploymentValueDeploymentsResponse200Eq$Outbound,
    z.ZodTypeDef,
    GetDeploymentValueDeploymentsResponse200Eq
  > = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentValueDeploymentsResponse200Eq$ {
  /** @deprecated use `GetDeploymentValueDeploymentsResponse200Eq$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentValueDeploymentsResponse200Eq$inboundSchema;
  /** @deprecated use `GetDeploymentValueDeploymentsResponse200Eq$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentValueDeploymentsResponse200Eq$outboundSchema;
  /** @deprecated use `GetDeploymentValueDeploymentsResponse200Eq$Outbound` instead. */
  export type Outbound = GetDeploymentValueDeploymentsResponse200Eq$Outbound;
}

export function getDeploymentValueDeploymentsResponse200EqToJSON(
  getDeploymentValueDeploymentsResponse200Eq:
    GetDeploymentValueDeploymentsResponse200Eq,
): string {
  return JSON.stringify(
    GetDeploymentValueDeploymentsResponse200Eq$outboundSchema.parse(
      getDeploymentValueDeploymentsResponse200Eq,
    ),
  );
}

export function getDeploymentValueDeploymentsResponse200EqFromJSON(
  jsonString: string,
): SafeParseResult<
  GetDeploymentValueDeploymentsResponse200Eq,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentValueDeploymentsResponse200Eq$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetDeploymentValueDeploymentsResponse200Eq' from JSON`,
  );
}

/** @internal */
export const GetDeploymentValue2$inboundSchema: z.ZodType<
  GetDeploymentValue2,
  z.ZodTypeDef,
  unknown
> = z.object({
  eq: z.union([z.string(), z.number()]).optional(),
  neq: z.string().optional(),
  inc: z.array(z.string()).optional(),
  ninc: z.array(z.string()).optional(),
  pre: z.string().optional(),
  suf: z.string().optional(),
  re: z.string().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
});

/** @internal */
export type GetDeploymentValue2$Outbound = {
  eq?: string | number | undefined;
  neq?: string | undefined;
  inc?: Array<string> | undefined;
  ninc?: Array<string> | undefined;
  pre?: string | undefined;
  suf?: string | undefined;
  re?: string | undefined;
  gt?: number | undefined;
  gte?: number | undefined;
  lt?: number | undefined;
  lte?: number | undefined;
};

/** @internal */
export const GetDeploymentValue2$outboundSchema: z.ZodType<
  GetDeploymentValue2$Outbound,
  z.ZodTypeDef,
  GetDeploymentValue2
> = z.object({
  eq: z.union([z.string(), z.number()]).optional(),
  neq: z.string().optional(),
  inc: z.array(z.string()).optional(),
  ninc: z.array(z.string()).optional(),
  pre: z.string().optional(),
  suf: z.string().optional(),
  re: z.string().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentValue2$ {
  /** @deprecated use `GetDeploymentValue2$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentValue2$inboundSchema;
  /** @deprecated use `GetDeploymentValue2$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentValue2$outboundSchema;
  /** @deprecated use `GetDeploymentValue2$Outbound` instead. */
  export type Outbound = GetDeploymentValue2$Outbound;
}

export function getDeploymentValue2ToJSON(
  getDeploymentValue2: GetDeploymentValue2,
): string {
  return JSON.stringify(
    GetDeploymentValue2$outboundSchema.parse(getDeploymentValue2),
  );
}

export function getDeploymentValue2FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentValue2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentValue2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentValue2' from JSON`,
  );
}

/** @internal */
export const GetDeploymentHasDeploymentsValue$inboundSchema: z.ZodType<
  GetDeploymentHasDeploymentsValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.lazy(() => GetDeploymentValue2$inboundSchema), z.string()]);

/** @internal */
export type GetDeploymentHasDeploymentsValue$Outbound =
  | GetDeploymentValue2$Outbound
  | string;

/** @internal */
export const GetDeploymentHasDeploymentsValue$outboundSchema: z.ZodType<
  GetDeploymentHasDeploymentsValue$Outbound,
  z.ZodTypeDef,
  GetDeploymentHasDeploymentsValue
> = z.union([z.lazy(() => GetDeploymentValue2$outboundSchema), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentHasDeploymentsValue$ {
  /** @deprecated use `GetDeploymentHasDeploymentsValue$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentHasDeploymentsValue$inboundSchema;
  /** @deprecated use `GetDeploymentHasDeploymentsValue$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentHasDeploymentsValue$outboundSchema;
  /** @deprecated use `GetDeploymentHasDeploymentsValue$Outbound` instead. */
  export type Outbound = GetDeploymentHasDeploymentsValue$Outbound;
}

export function getDeploymentHasDeploymentsValueToJSON(
  getDeploymentHasDeploymentsValue: GetDeploymentHasDeploymentsValue,
): string {
  return JSON.stringify(
    GetDeploymentHasDeploymentsValue$outboundSchema.parse(
      getDeploymentHasDeploymentsValue,
    ),
  );
}

export function getDeploymentHasDeploymentsValueFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentHasDeploymentsValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentHasDeploymentsValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentHasDeploymentsValue' from JSON`,
  );
}

/** @internal */
export const GetDeploymentHas2$inboundSchema: z.ZodType<
  GetDeploymentHas2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetDeploymentHasDeploymentsType$inboundSchema,
  key: z.string(),
  value: z.union([z.lazy(() => GetDeploymentValue2$inboundSchema), z.string()])
    .optional(),
});

/** @internal */
export type GetDeploymentHas2$Outbound = {
  type: string;
  key: string;
  value?: GetDeploymentValue2$Outbound | string | undefined;
};

/** @internal */
export const GetDeploymentHas2$outboundSchema: z.ZodType<
  GetDeploymentHas2$Outbound,
  z.ZodTypeDef,
  GetDeploymentHas2
> = z.object({
  type: GetDeploymentHasDeploymentsType$outboundSchema,
  key: z.string(),
  value: z.union([z.lazy(() => GetDeploymentValue2$outboundSchema), z.string()])
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentHas2$ {
  /** @deprecated use `GetDeploymentHas2$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentHas2$inboundSchema;
  /** @deprecated use `GetDeploymentHas2$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentHas2$outboundSchema;
  /** @deprecated use `GetDeploymentHas2$Outbound` instead. */
  export type Outbound = GetDeploymentHas2$Outbound;
}

export function getDeploymentHas2ToJSON(
  getDeploymentHas2: GetDeploymentHas2,
): string {
  return JSON.stringify(
    GetDeploymentHas2$outboundSchema.parse(getDeploymentHas2),
  );
}

export function getDeploymentHas2FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentHas2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentHas2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentHas2' from JSON`,
  );
}

/** @internal */
export const GetDeploymentHasType$inboundSchema: z.ZodNativeEnum<
  typeof GetDeploymentHasType
> = z.nativeEnum(GetDeploymentHasType);

/** @internal */
export const GetDeploymentHasType$outboundSchema: z.ZodNativeEnum<
  typeof GetDeploymentHasType
> = GetDeploymentHasType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentHasType$ {
  /** @deprecated use `GetDeploymentHasType$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentHasType$inboundSchema;
  /** @deprecated use `GetDeploymentHasType$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentHasType$outboundSchema;
}

/** @internal */
export const GetDeploymentValueDeploymentsResponseEq$inboundSchema: z.ZodType<
  GetDeploymentValueDeploymentsResponseEq,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type GetDeploymentValueDeploymentsResponseEq$Outbound = string | number;

/** @internal */
export const GetDeploymentValueDeploymentsResponseEq$outboundSchema: z.ZodType<
  GetDeploymentValueDeploymentsResponseEq$Outbound,
  z.ZodTypeDef,
  GetDeploymentValueDeploymentsResponseEq
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentValueDeploymentsResponseEq$ {
  /** @deprecated use `GetDeploymentValueDeploymentsResponseEq$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentValueDeploymentsResponseEq$inboundSchema;
  /** @deprecated use `GetDeploymentValueDeploymentsResponseEq$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentValueDeploymentsResponseEq$outboundSchema;
  /** @deprecated use `GetDeploymentValueDeploymentsResponseEq$Outbound` instead. */
  export type Outbound = GetDeploymentValueDeploymentsResponseEq$Outbound;
}

export function getDeploymentValueDeploymentsResponseEqToJSON(
  getDeploymentValueDeploymentsResponseEq:
    GetDeploymentValueDeploymentsResponseEq,
): string {
  return JSON.stringify(
    GetDeploymentValueDeploymentsResponseEq$outboundSchema.parse(
      getDeploymentValueDeploymentsResponseEq,
    ),
  );
}

export function getDeploymentValueDeploymentsResponseEqFromJSON(
  jsonString: string,
): SafeParseResult<
  GetDeploymentValueDeploymentsResponseEq,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentValueDeploymentsResponseEq$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetDeploymentValueDeploymentsResponseEq' from JSON`,
  );
}

/** @internal */
export const GetDeploymentValueDeploymentsResponse2002$inboundSchema: z.ZodType<
  GetDeploymentValueDeploymentsResponse2002,
  z.ZodTypeDef,
  unknown
> = z.object({
  eq: z.union([z.string(), z.number()]).optional(),
  neq: z.string().optional(),
  inc: z.array(z.string()).optional(),
  ninc: z.array(z.string()).optional(),
  pre: z.string().optional(),
  suf: z.string().optional(),
  re: z.string().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
});

/** @internal */
export type GetDeploymentValueDeploymentsResponse2002$Outbound = {
  eq?: string | number | undefined;
  neq?: string | undefined;
  inc?: Array<string> | undefined;
  ninc?: Array<string> | undefined;
  pre?: string | undefined;
  suf?: string | undefined;
  re?: string | undefined;
  gt?: number | undefined;
  gte?: number | undefined;
  lt?: number | undefined;
  lte?: number | undefined;
};

/** @internal */
export const GetDeploymentValueDeploymentsResponse2002$outboundSchema:
  z.ZodType<
    GetDeploymentValueDeploymentsResponse2002$Outbound,
    z.ZodTypeDef,
    GetDeploymentValueDeploymentsResponse2002
  > = z.object({
    eq: z.union([z.string(), z.number()]).optional(),
    neq: z.string().optional(),
    inc: z.array(z.string()).optional(),
    ninc: z.array(z.string()).optional(),
    pre: z.string().optional(),
    suf: z.string().optional(),
    re: z.string().optional(),
    gt: z.number().optional(),
    gte: z.number().optional(),
    lt: z.number().optional(),
    lte: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentValueDeploymentsResponse2002$ {
  /** @deprecated use `GetDeploymentValueDeploymentsResponse2002$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentValueDeploymentsResponse2002$inboundSchema;
  /** @deprecated use `GetDeploymentValueDeploymentsResponse2002$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentValueDeploymentsResponse2002$outboundSchema;
  /** @deprecated use `GetDeploymentValueDeploymentsResponse2002$Outbound` instead. */
  export type Outbound = GetDeploymentValueDeploymentsResponse2002$Outbound;
}

export function getDeploymentValueDeploymentsResponse2002ToJSON(
  getDeploymentValueDeploymentsResponse2002:
    GetDeploymentValueDeploymentsResponse2002,
): string {
  return JSON.stringify(
    GetDeploymentValueDeploymentsResponse2002$outboundSchema.parse(
      getDeploymentValueDeploymentsResponse2002,
    ),
  );
}

export function getDeploymentValueDeploymentsResponse2002FromJSON(
  jsonString: string,
): SafeParseResult<
  GetDeploymentValueDeploymentsResponse2002,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentValueDeploymentsResponse2002$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetDeploymentValueDeploymentsResponse2002' from JSON`,
  );
}

/** @internal */
export const GetDeploymentHasValue$inboundSchema: z.ZodType<
  GetDeploymentHasValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetDeploymentValueDeploymentsResponse2002$inboundSchema),
  z.string(),
]);

/** @internal */
export type GetDeploymentHasValue$Outbound =
  | GetDeploymentValueDeploymentsResponse2002$Outbound
  | string;

/** @internal */
export const GetDeploymentHasValue$outboundSchema: z.ZodType<
  GetDeploymentHasValue$Outbound,
  z.ZodTypeDef,
  GetDeploymentHasValue
> = z.union([
  z.lazy(() => GetDeploymentValueDeploymentsResponse2002$outboundSchema),
  z.string(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentHasValue$ {
  /** @deprecated use `GetDeploymentHasValue$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentHasValue$inboundSchema;
  /** @deprecated use `GetDeploymentHasValue$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentHasValue$outboundSchema;
  /** @deprecated use `GetDeploymentHasValue$Outbound` instead. */
  export type Outbound = GetDeploymentHasValue$Outbound;
}

export function getDeploymentHasValueToJSON(
  getDeploymentHasValue: GetDeploymentHasValue,
): string {
  return JSON.stringify(
    GetDeploymentHasValue$outboundSchema.parse(getDeploymentHasValue),
  );
}

export function getDeploymentHasValueFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentHasValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentHasValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentHasValue' from JSON`,
  );
}

/** @internal */
export const GetDeploymentHas1$inboundSchema: z.ZodType<
  GetDeploymentHas1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetDeploymentHasType$inboundSchema,
  value: z.union([
    z.lazy(() => GetDeploymentValueDeploymentsResponse2002$inboundSchema),
    z.string(),
  ]),
});

/** @internal */
export type GetDeploymentHas1$Outbound = {
  type: string;
  value: GetDeploymentValueDeploymentsResponse2002$Outbound | string;
};

/** @internal */
export const GetDeploymentHas1$outboundSchema: z.ZodType<
  GetDeploymentHas1$Outbound,
  z.ZodTypeDef,
  GetDeploymentHas1
> = z.object({
  type: GetDeploymentHasType$outboundSchema,
  value: z.union([
    z.lazy(() => GetDeploymentValueDeploymentsResponse2002$outboundSchema),
    z.string(),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentHas1$ {
  /** @deprecated use `GetDeploymentHas1$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentHas1$inboundSchema;
  /** @deprecated use `GetDeploymentHas1$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentHas1$outboundSchema;
  /** @deprecated use `GetDeploymentHas1$Outbound` instead. */
  export type Outbound = GetDeploymentHas1$Outbound;
}

export function getDeploymentHas1ToJSON(
  getDeploymentHas1: GetDeploymentHas1,
): string {
  return JSON.stringify(
    GetDeploymentHas1$outboundSchema.parse(getDeploymentHas1),
  );
}

export function getDeploymentHas1FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentHas1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentHas1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentHas1' from JSON`,
  );
}

/** @internal */
export const GetDeploymentRoutesHas$inboundSchema: z.ZodType<
  GetDeploymentRoutesHas,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetDeploymentHas1$inboundSchema),
  z.lazy(() => GetDeploymentHas2$inboundSchema),
]);

/** @internal */
export type GetDeploymentRoutesHas$Outbound =
  | GetDeploymentHas1$Outbound
  | GetDeploymentHas2$Outbound;

/** @internal */
export const GetDeploymentRoutesHas$outboundSchema: z.ZodType<
  GetDeploymentRoutesHas$Outbound,
  z.ZodTypeDef,
  GetDeploymentRoutesHas
> = z.union([
  z.lazy(() => GetDeploymentHas1$outboundSchema),
  z.lazy(() => GetDeploymentHas2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentRoutesHas$ {
  /** @deprecated use `GetDeploymentRoutesHas$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentRoutesHas$inboundSchema;
  /** @deprecated use `GetDeploymentRoutesHas$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentRoutesHas$outboundSchema;
  /** @deprecated use `GetDeploymentRoutesHas$Outbound` instead. */
  export type Outbound = GetDeploymentRoutesHas$Outbound;
}

export function getDeploymentRoutesHasToJSON(
  getDeploymentRoutesHas: GetDeploymentRoutesHas,
): string {
  return JSON.stringify(
    GetDeploymentRoutesHas$outboundSchema.parse(getDeploymentRoutesHas),
  );
}

export function getDeploymentRoutesHasFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentRoutesHas, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentRoutesHas$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentRoutesHas' from JSON`,
  );
}

/** @internal */
export const GetDeploymentMissingType$inboundSchema: z.ZodNativeEnum<
  typeof GetDeploymentMissingType
> = z.nativeEnum(GetDeploymentMissingType);

/** @internal */
export const GetDeploymentMissingType$outboundSchema: z.ZodNativeEnum<
  typeof GetDeploymentMissingType
> = GetDeploymentMissingType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentMissingType$ {
  /** @deprecated use `GetDeploymentMissingType$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentMissingType$inboundSchema;
  /** @deprecated use `GetDeploymentMissingType$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentMissingType$outboundSchema;
}

/** @internal */
export const GetDeploymentValueDeploymentsEq$inboundSchema: z.ZodType<
  GetDeploymentValueDeploymentsEq,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type GetDeploymentValueDeploymentsEq$Outbound = string | number;

/** @internal */
export const GetDeploymentValueDeploymentsEq$outboundSchema: z.ZodType<
  GetDeploymentValueDeploymentsEq$Outbound,
  z.ZodTypeDef,
  GetDeploymentValueDeploymentsEq
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentValueDeploymentsEq$ {
  /** @deprecated use `GetDeploymentValueDeploymentsEq$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentValueDeploymentsEq$inboundSchema;
  /** @deprecated use `GetDeploymentValueDeploymentsEq$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentValueDeploymentsEq$outboundSchema;
  /** @deprecated use `GetDeploymentValueDeploymentsEq$Outbound` instead. */
  export type Outbound = GetDeploymentValueDeploymentsEq$Outbound;
}

export function getDeploymentValueDeploymentsEqToJSON(
  getDeploymentValueDeploymentsEq: GetDeploymentValueDeploymentsEq,
): string {
  return JSON.stringify(
    GetDeploymentValueDeploymentsEq$outboundSchema.parse(
      getDeploymentValueDeploymentsEq,
    ),
  );
}

export function getDeploymentValueDeploymentsEqFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentValueDeploymentsEq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentValueDeploymentsEq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentValueDeploymentsEq' from JSON`,
  );
}

/** @internal */
export const GetDeploymentValueDeploymentsResponse2$inboundSchema: z.ZodType<
  GetDeploymentValueDeploymentsResponse2,
  z.ZodTypeDef,
  unknown
> = z.object({
  eq: z.union([z.string(), z.number()]).optional(),
  neq: z.string().optional(),
  inc: z.array(z.string()).optional(),
  ninc: z.array(z.string()).optional(),
  pre: z.string().optional(),
  suf: z.string().optional(),
  re: z.string().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
});

/** @internal */
export type GetDeploymentValueDeploymentsResponse2$Outbound = {
  eq?: string | number | undefined;
  neq?: string | undefined;
  inc?: Array<string> | undefined;
  ninc?: Array<string> | undefined;
  pre?: string | undefined;
  suf?: string | undefined;
  re?: string | undefined;
  gt?: number | undefined;
  gte?: number | undefined;
  lt?: number | undefined;
  lte?: number | undefined;
};

/** @internal */
export const GetDeploymentValueDeploymentsResponse2$outboundSchema: z.ZodType<
  GetDeploymentValueDeploymentsResponse2$Outbound,
  z.ZodTypeDef,
  GetDeploymentValueDeploymentsResponse2
> = z.object({
  eq: z.union([z.string(), z.number()]).optional(),
  neq: z.string().optional(),
  inc: z.array(z.string()).optional(),
  ninc: z.array(z.string()).optional(),
  pre: z.string().optional(),
  suf: z.string().optional(),
  re: z.string().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentValueDeploymentsResponse2$ {
  /** @deprecated use `GetDeploymentValueDeploymentsResponse2$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentValueDeploymentsResponse2$inboundSchema;
  /** @deprecated use `GetDeploymentValueDeploymentsResponse2$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentValueDeploymentsResponse2$outboundSchema;
  /** @deprecated use `GetDeploymentValueDeploymentsResponse2$Outbound` instead. */
  export type Outbound = GetDeploymentValueDeploymentsResponse2$Outbound;
}

export function getDeploymentValueDeploymentsResponse2ToJSON(
  getDeploymentValueDeploymentsResponse2:
    GetDeploymentValueDeploymentsResponse2,
): string {
  return JSON.stringify(
    GetDeploymentValueDeploymentsResponse2$outboundSchema.parse(
      getDeploymentValueDeploymentsResponse2,
    ),
  );
}

export function getDeploymentValueDeploymentsResponse2FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentValueDeploymentsResponse2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentValueDeploymentsResponse2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentValueDeploymentsResponse2' from JSON`,
  );
}

/** @internal */
export const GetDeploymentMissingValue$inboundSchema: z.ZodType<
  GetDeploymentMissingValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetDeploymentValueDeploymentsResponse2$inboundSchema),
  z.string(),
]);

/** @internal */
export type GetDeploymentMissingValue$Outbound =
  | GetDeploymentValueDeploymentsResponse2$Outbound
  | string;

/** @internal */
export const GetDeploymentMissingValue$outboundSchema: z.ZodType<
  GetDeploymentMissingValue$Outbound,
  z.ZodTypeDef,
  GetDeploymentMissingValue
> = z.union([
  z.lazy(() => GetDeploymentValueDeploymentsResponse2$outboundSchema),
  z.string(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentMissingValue$ {
  /** @deprecated use `GetDeploymentMissingValue$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentMissingValue$inboundSchema;
  /** @deprecated use `GetDeploymentMissingValue$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentMissingValue$outboundSchema;
  /** @deprecated use `GetDeploymentMissingValue$Outbound` instead. */
  export type Outbound = GetDeploymentMissingValue$Outbound;
}

export function getDeploymentMissingValueToJSON(
  getDeploymentMissingValue: GetDeploymentMissingValue,
): string {
  return JSON.stringify(
    GetDeploymentMissingValue$outboundSchema.parse(getDeploymentMissingValue),
  );
}

export function getDeploymentMissingValueFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentMissingValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentMissingValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentMissingValue' from JSON`,
  );
}

/** @internal */
export const GetDeploymentMissing2$inboundSchema: z.ZodType<
  GetDeploymentMissing2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetDeploymentMissingType$inboundSchema,
  key: z.string(),
  value: z.union([
    z.lazy(() => GetDeploymentValueDeploymentsResponse2$inboundSchema),
    z.string(),
  ]).optional(),
});

/** @internal */
export type GetDeploymentMissing2$Outbound = {
  type: string;
  key: string;
  value?: GetDeploymentValueDeploymentsResponse2$Outbound | string | undefined;
};

/** @internal */
export const GetDeploymentMissing2$outboundSchema: z.ZodType<
  GetDeploymentMissing2$Outbound,
  z.ZodTypeDef,
  GetDeploymentMissing2
> = z.object({
  type: GetDeploymentMissingType$outboundSchema,
  key: z.string(),
  value: z.union([
    z.lazy(() => GetDeploymentValueDeploymentsResponse2$outboundSchema),
    z.string(),
  ]).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentMissing2$ {
  /** @deprecated use `GetDeploymentMissing2$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentMissing2$inboundSchema;
  /** @deprecated use `GetDeploymentMissing2$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentMissing2$outboundSchema;
  /** @deprecated use `GetDeploymentMissing2$Outbound` instead. */
  export type Outbound = GetDeploymentMissing2$Outbound;
}

export function getDeploymentMissing2ToJSON(
  getDeploymentMissing2: GetDeploymentMissing2,
): string {
  return JSON.stringify(
    GetDeploymentMissing2$outboundSchema.parse(getDeploymentMissing2),
  );
}

export function getDeploymentMissing2FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentMissing2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentMissing2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentMissing2' from JSON`,
  );
}

/** @internal */
export const GetDeploymentMissingDeploymentsType$inboundSchema: z.ZodNativeEnum<
  typeof GetDeploymentMissingDeploymentsType
> = z.nativeEnum(GetDeploymentMissingDeploymentsType);

/** @internal */
export const GetDeploymentMissingDeploymentsType$outboundSchema:
  z.ZodNativeEnum<typeof GetDeploymentMissingDeploymentsType> =
    GetDeploymentMissingDeploymentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentMissingDeploymentsType$ {
  /** @deprecated use `GetDeploymentMissingDeploymentsType$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentMissingDeploymentsType$inboundSchema;
  /** @deprecated use `GetDeploymentMissingDeploymentsType$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentMissingDeploymentsType$outboundSchema;
}

/** @internal */
export const GetDeploymentValueEq$inboundSchema: z.ZodType<
  GetDeploymentValueEq,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type GetDeploymentValueEq$Outbound = string | number;

/** @internal */
export const GetDeploymentValueEq$outboundSchema: z.ZodType<
  GetDeploymentValueEq$Outbound,
  z.ZodTypeDef,
  GetDeploymentValueEq
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentValueEq$ {
  /** @deprecated use `GetDeploymentValueEq$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentValueEq$inboundSchema;
  /** @deprecated use `GetDeploymentValueEq$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentValueEq$outboundSchema;
  /** @deprecated use `GetDeploymentValueEq$Outbound` instead. */
  export type Outbound = GetDeploymentValueEq$Outbound;
}

export function getDeploymentValueEqToJSON(
  getDeploymentValueEq: GetDeploymentValueEq,
): string {
  return JSON.stringify(
    GetDeploymentValueEq$outboundSchema.parse(getDeploymentValueEq),
  );
}

export function getDeploymentValueEqFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentValueEq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentValueEq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentValueEq' from JSON`,
  );
}

/** @internal */
export const GetDeploymentValueDeployments2$inboundSchema: z.ZodType<
  GetDeploymentValueDeployments2,
  z.ZodTypeDef,
  unknown
> = z.object({
  eq: z.union([z.string(), z.number()]).optional(),
  neq: z.string().optional(),
  inc: z.array(z.string()).optional(),
  ninc: z.array(z.string()).optional(),
  pre: z.string().optional(),
  suf: z.string().optional(),
  re: z.string().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
});

/** @internal */
export type GetDeploymentValueDeployments2$Outbound = {
  eq?: string | number | undefined;
  neq?: string | undefined;
  inc?: Array<string> | undefined;
  ninc?: Array<string> | undefined;
  pre?: string | undefined;
  suf?: string | undefined;
  re?: string | undefined;
  gt?: number | undefined;
  gte?: number | undefined;
  lt?: number | undefined;
  lte?: number | undefined;
};

/** @internal */
export const GetDeploymentValueDeployments2$outboundSchema: z.ZodType<
  GetDeploymentValueDeployments2$Outbound,
  z.ZodTypeDef,
  GetDeploymentValueDeployments2
> = z.object({
  eq: z.union([z.string(), z.number()]).optional(),
  neq: z.string().optional(),
  inc: z.array(z.string()).optional(),
  ninc: z.array(z.string()).optional(),
  pre: z.string().optional(),
  suf: z.string().optional(),
  re: z.string().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentValueDeployments2$ {
  /** @deprecated use `GetDeploymentValueDeployments2$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentValueDeployments2$inboundSchema;
  /** @deprecated use `GetDeploymentValueDeployments2$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentValueDeployments2$outboundSchema;
  /** @deprecated use `GetDeploymentValueDeployments2$Outbound` instead. */
  export type Outbound = GetDeploymentValueDeployments2$Outbound;
}

export function getDeploymentValueDeployments2ToJSON(
  getDeploymentValueDeployments2: GetDeploymentValueDeployments2,
): string {
  return JSON.stringify(
    GetDeploymentValueDeployments2$outboundSchema.parse(
      getDeploymentValueDeployments2,
    ),
  );
}

export function getDeploymentValueDeployments2FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentValueDeployments2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentValueDeployments2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentValueDeployments2' from JSON`,
  );
}

/** @internal */
export const GetDeploymentMissingDeploymentsValue$inboundSchema: z.ZodType<
  GetDeploymentMissingDeploymentsValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetDeploymentValueDeployments2$inboundSchema),
  z.string(),
]);

/** @internal */
export type GetDeploymentMissingDeploymentsValue$Outbound =
  | GetDeploymentValueDeployments2$Outbound
  | string;

/** @internal */
export const GetDeploymentMissingDeploymentsValue$outboundSchema: z.ZodType<
  GetDeploymentMissingDeploymentsValue$Outbound,
  z.ZodTypeDef,
  GetDeploymentMissingDeploymentsValue
> = z.union([
  z.lazy(() => GetDeploymentValueDeployments2$outboundSchema),
  z.string(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentMissingDeploymentsValue$ {
  /** @deprecated use `GetDeploymentMissingDeploymentsValue$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentMissingDeploymentsValue$inboundSchema;
  /** @deprecated use `GetDeploymentMissingDeploymentsValue$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentMissingDeploymentsValue$outboundSchema;
  /** @deprecated use `GetDeploymentMissingDeploymentsValue$Outbound` instead. */
  export type Outbound = GetDeploymentMissingDeploymentsValue$Outbound;
}

export function getDeploymentMissingDeploymentsValueToJSON(
  getDeploymentMissingDeploymentsValue: GetDeploymentMissingDeploymentsValue,
): string {
  return JSON.stringify(
    GetDeploymentMissingDeploymentsValue$outboundSchema.parse(
      getDeploymentMissingDeploymentsValue,
    ),
  );
}

export function getDeploymentMissingDeploymentsValueFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentMissingDeploymentsValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentMissingDeploymentsValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentMissingDeploymentsValue' from JSON`,
  );
}

/** @internal */
export const GetDeploymentMissing1$inboundSchema: z.ZodType<
  GetDeploymentMissing1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetDeploymentMissingDeploymentsType$inboundSchema,
  value: z.union([
    z.lazy(() => GetDeploymentValueDeployments2$inboundSchema),
    z.string(),
  ]),
});

/** @internal */
export type GetDeploymentMissing1$Outbound = {
  type: string;
  value: GetDeploymentValueDeployments2$Outbound | string;
};

/** @internal */
export const GetDeploymentMissing1$outboundSchema: z.ZodType<
  GetDeploymentMissing1$Outbound,
  z.ZodTypeDef,
  GetDeploymentMissing1
> = z.object({
  type: GetDeploymentMissingDeploymentsType$outboundSchema,
  value: z.union([
    z.lazy(() => GetDeploymentValueDeployments2$outboundSchema),
    z.string(),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentMissing1$ {
  /** @deprecated use `GetDeploymentMissing1$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentMissing1$inboundSchema;
  /** @deprecated use `GetDeploymentMissing1$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentMissing1$outboundSchema;
  /** @deprecated use `GetDeploymentMissing1$Outbound` instead. */
  export type Outbound = GetDeploymentMissing1$Outbound;
}

export function getDeploymentMissing1ToJSON(
  getDeploymentMissing1: GetDeploymentMissing1,
): string {
  return JSON.stringify(
    GetDeploymentMissing1$outboundSchema.parse(getDeploymentMissing1),
  );
}

export function getDeploymentMissing1FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentMissing1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentMissing1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentMissing1' from JSON`,
  );
}

/** @internal */
export const GetDeploymentRoutesMissing$inboundSchema: z.ZodType<
  GetDeploymentRoutesMissing,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetDeploymentMissing1$inboundSchema),
  z.lazy(() => GetDeploymentMissing2$inboundSchema),
]);

/** @internal */
export type GetDeploymentRoutesMissing$Outbound =
  | GetDeploymentMissing1$Outbound
  | GetDeploymentMissing2$Outbound;

/** @internal */
export const GetDeploymentRoutesMissing$outboundSchema: z.ZodType<
  GetDeploymentRoutesMissing$Outbound,
  z.ZodTypeDef,
  GetDeploymentRoutesMissing
> = z.union([
  z.lazy(() => GetDeploymentMissing1$outboundSchema),
  z.lazy(() => GetDeploymentMissing2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentRoutesMissing$ {
  /** @deprecated use `GetDeploymentRoutesMissing$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentRoutesMissing$inboundSchema;
  /** @deprecated use `GetDeploymentRoutesMissing$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentRoutesMissing$outboundSchema;
  /** @deprecated use `GetDeploymentRoutesMissing$Outbound` instead. */
  export type Outbound = GetDeploymentRoutesMissing$Outbound;
}

export function getDeploymentRoutesMissingToJSON(
  getDeploymentRoutesMissing: GetDeploymentRoutesMissing,
): string {
  return JSON.stringify(
    GetDeploymentRoutesMissing$outboundSchema.parse(getDeploymentRoutesMissing),
  );
}

export function getDeploymentRoutesMissingFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentRoutesMissing, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentRoutesMissing$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentRoutesMissing' from JSON`,
  );
}

/** @internal */
export const GetDeploymentRoutesAction$inboundSchema: z.ZodNativeEnum<
  typeof GetDeploymentRoutesAction
> = z.nativeEnum(GetDeploymentRoutesAction);

/** @internal */
export const GetDeploymentRoutesAction$outboundSchema: z.ZodNativeEnum<
  typeof GetDeploymentRoutesAction
> = GetDeploymentRoutesAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentRoutesAction$ {
  /** @deprecated use `GetDeploymentRoutesAction$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentRoutesAction$inboundSchema;
  /** @deprecated use `GetDeploymentRoutesAction$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentRoutesAction$outboundSchema;
}

/** @internal */
export const GetDeploymentRoutesMitigate$inboundSchema: z.ZodType<
  GetDeploymentRoutesMitigate,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: GetDeploymentRoutesAction$inboundSchema,
});

/** @internal */
export type GetDeploymentRoutesMitigate$Outbound = {
  action: string;
};

/** @internal */
export const GetDeploymentRoutesMitigate$outboundSchema: z.ZodType<
  GetDeploymentRoutesMitigate$Outbound,
  z.ZodTypeDef,
  GetDeploymentRoutesMitigate
> = z.object({
  action: GetDeploymentRoutesAction$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentRoutesMitigate$ {
  /** @deprecated use `GetDeploymentRoutesMitigate$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentRoutesMitigate$inboundSchema;
  /** @deprecated use `GetDeploymentRoutesMitigate$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentRoutesMitigate$outboundSchema;
  /** @deprecated use `GetDeploymentRoutesMitigate$Outbound` instead. */
  export type Outbound = GetDeploymentRoutesMitigate$Outbound;
}

export function getDeploymentRoutesMitigateToJSON(
  getDeploymentRoutesMitigate: GetDeploymentRoutesMitigate,
): string {
  return JSON.stringify(
    GetDeploymentRoutesMitigate$outboundSchema.parse(
      getDeploymentRoutesMitigate,
    ),
  );
}

export function getDeploymentRoutesMitigateFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentRoutesMitigate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentRoutesMitigate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentRoutesMitigate' from JSON`,
  );
}

/** @internal */
export const GetDeploymentRoutesType$inboundSchema: z.ZodNativeEnum<
  typeof GetDeploymentRoutesType
> = z.nativeEnum(GetDeploymentRoutesType);

/** @internal */
export const GetDeploymentRoutesType$outboundSchema: z.ZodNativeEnum<
  typeof GetDeploymentRoutesType
> = GetDeploymentRoutesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentRoutesType$ {
  /** @deprecated use `GetDeploymentRoutesType$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentRoutesType$inboundSchema;
  /** @deprecated use `GetDeploymentRoutesType$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentRoutesType$outboundSchema;
}

/** @internal */
export const GetDeploymentRoutesOp$inboundSchema: z.ZodNativeEnum<
  typeof GetDeploymentRoutesOp
> = z.nativeEnum(GetDeploymentRoutesOp);

/** @internal */
export const GetDeploymentRoutesOp$outboundSchema: z.ZodNativeEnum<
  typeof GetDeploymentRoutesOp
> = GetDeploymentRoutesOp$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentRoutesOp$ {
  /** @deprecated use `GetDeploymentRoutesOp$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentRoutesOp$inboundSchema;
  /** @deprecated use `GetDeploymentRoutesOp$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentRoutesOp$outboundSchema;
}

/** @internal */
export const GetDeploymentKeyEq$inboundSchema: z.ZodType<
  GetDeploymentKeyEq,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type GetDeploymentKeyEq$Outbound = string | number;

/** @internal */
export const GetDeploymentKeyEq$outboundSchema: z.ZodType<
  GetDeploymentKeyEq$Outbound,
  z.ZodTypeDef,
  GetDeploymentKeyEq
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentKeyEq$ {
  /** @deprecated use `GetDeploymentKeyEq$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentKeyEq$inboundSchema;
  /** @deprecated use `GetDeploymentKeyEq$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentKeyEq$outboundSchema;
  /** @deprecated use `GetDeploymentKeyEq$Outbound` instead. */
  export type Outbound = GetDeploymentKeyEq$Outbound;
}

export function getDeploymentKeyEqToJSON(
  getDeploymentKeyEq: GetDeploymentKeyEq,
): string {
  return JSON.stringify(
    GetDeploymentKeyEq$outboundSchema.parse(getDeploymentKeyEq),
  );
}

export function getDeploymentKeyEqFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentKeyEq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentKeyEq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentKeyEq' from JSON`,
  );
}

/** @internal */
export const GetDeploymentKey2$inboundSchema: z.ZodType<
  GetDeploymentKey2,
  z.ZodTypeDef,
  unknown
> = z.object({
  eq: z.union([z.string(), z.number()]).optional(),
  neq: z.string().optional(),
  inc: z.array(z.string()).optional(),
  ninc: z.array(z.string()).optional(),
  pre: z.string().optional(),
  suf: z.string().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
});

/** @internal */
export type GetDeploymentKey2$Outbound = {
  eq?: string | number | undefined;
  neq?: string | undefined;
  inc?: Array<string> | undefined;
  ninc?: Array<string> | undefined;
  pre?: string | undefined;
  suf?: string | undefined;
  gt?: number | undefined;
  gte?: number | undefined;
  lt?: number | undefined;
  lte?: number | undefined;
};

/** @internal */
export const GetDeploymentKey2$outboundSchema: z.ZodType<
  GetDeploymentKey2$Outbound,
  z.ZodTypeDef,
  GetDeploymentKey2
> = z.object({
  eq: z.union([z.string(), z.number()]).optional(),
  neq: z.string().optional(),
  inc: z.array(z.string()).optional(),
  ninc: z.array(z.string()).optional(),
  pre: z.string().optional(),
  suf: z.string().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentKey2$ {
  /** @deprecated use `GetDeploymentKey2$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentKey2$inboundSchema;
  /** @deprecated use `GetDeploymentKey2$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentKey2$outboundSchema;
  /** @deprecated use `GetDeploymentKey2$Outbound` instead. */
  export type Outbound = GetDeploymentKey2$Outbound;
}

export function getDeploymentKey2ToJSON(
  getDeploymentKey2: GetDeploymentKey2,
): string {
  return JSON.stringify(
    GetDeploymentKey2$outboundSchema.parse(getDeploymentKey2),
  );
}

export function getDeploymentKey2FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentKey2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentKey2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentKey2' from JSON`,
  );
}

/** @internal */
export const GetDeploymentRoutesKey$inboundSchema: z.ZodType<
  GetDeploymentRoutesKey,
  z.ZodTypeDef,
  unknown
> = z.union([z.lazy(() => GetDeploymentKey2$inboundSchema), z.string()]);

/** @internal */
export type GetDeploymentRoutesKey$Outbound =
  | GetDeploymentKey2$Outbound
  | string;

/** @internal */
export const GetDeploymentRoutesKey$outboundSchema: z.ZodType<
  GetDeploymentRoutesKey$Outbound,
  z.ZodTypeDef,
  GetDeploymentRoutesKey
> = z.union([z.lazy(() => GetDeploymentKey2$outboundSchema), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentRoutesKey$ {
  /** @deprecated use `GetDeploymentRoutesKey$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentRoutesKey$inboundSchema;
  /** @deprecated use `GetDeploymentRoutesKey$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentRoutesKey$outboundSchema;
  /** @deprecated use `GetDeploymentRoutesKey$Outbound` instead. */
  export type Outbound = GetDeploymentRoutesKey$Outbound;
}

export function getDeploymentRoutesKeyToJSON(
  getDeploymentRoutesKey: GetDeploymentRoutesKey,
): string {
  return JSON.stringify(
    GetDeploymentRoutesKey$outboundSchema.parse(getDeploymentRoutesKey),
  );
}

export function getDeploymentRoutesKeyFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentRoutesKey, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentRoutesKey$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentRoutesKey' from JSON`,
  );
}

/** @internal */
export const GetDeploymentRoutesTarget$inboundSchema: z.ZodType<
  GetDeploymentRoutesTarget,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.union([z.lazy(() => GetDeploymentKey2$inboundSchema), z.string()]),
});

/** @internal */
export type GetDeploymentRoutesTarget$Outbound = {
  key: GetDeploymentKey2$Outbound | string;
};

/** @internal */
export const GetDeploymentRoutesTarget$outboundSchema: z.ZodType<
  GetDeploymentRoutesTarget$Outbound,
  z.ZodTypeDef,
  GetDeploymentRoutesTarget
> = z.object({
  key: z.union([z.lazy(() => GetDeploymentKey2$outboundSchema), z.string()]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentRoutesTarget$ {
  /** @deprecated use `GetDeploymentRoutesTarget$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentRoutesTarget$inboundSchema;
  /** @deprecated use `GetDeploymentRoutesTarget$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentRoutesTarget$outboundSchema;
  /** @deprecated use `GetDeploymentRoutesTarget$Outbound` instead. */
  export type Outbound = GetDeploymentRoutesTarget$Outbound;
}

export function getDeploymentRoutesTargetToJSON(
  getDeploymentRoutesTarget: GetDeploymentRoutesTarget,
): string {
  return JSON.stringify(
    GetDeploymentRoutesTarget$outboundSchema.parse(getDeploymentRoutesTarget),
  );
}

export function getDeploymentRoutesTargetFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentRoutesTarget, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentRoutesTarget$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentRoutesTarget' from JSON`,
  );
}

/** @internal */
export const GetDeploymentRoutesArgs$inboundSchema: z.ZodType<
  GetDeploymentRoutesArgs,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type GetDeploymentRoutesArgs$Outbound = string | Array<string>;

/** @internal */
export const GetDeploymentRoutesArgs$outboundSchema: z.ZodType<
  GetDeploymentRoutesArgs$Outbound,
  z.ZodTypeDef,
  GetDeploymentRoutesArgs
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentRoutesArgs$ {
  /** @deprecated use `GetDeploymentRoutesArgs$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentRoutesArgs$inboundSchema;
  /** @deprecated use `GetDeploymentRoutesArgs$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentRoutesArgs$outboundSchema;
  /** @deprecated use `GetDeploymentRoutesArgs$Outbound` instead. */
  export type Outbound = GetDeploymentRoutesArgs$Outbound;
}

export function getDeploymentRoutesArgsToJSON(
  getDeploymentRoutesArgs: GetDeploymentRoutesArgs,
): string {
  return JSON.stringify(
    GetDeploymentRoutesArgs$outboundSchema.parse(getDeploymentRoutesArgs),
  );
}

export function getDeploymentRoutesArgsFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentRoutesArgs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentRoutesArgs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentRoutesArgs' from JSON`,
  );
}

/** @internal */
export const GetDeploymentRoutesTransforms$inboundSchema: z.ZodType<
  GetDeploymentRoutesTransforms,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetDeploymentRoutesType$inboundSchema,
  op: GetDeploymentRoutesOp$inboundSchema,
  target: z.lazy(() => GetDeploymentRoutesTarget$inboundSchema),
  args: z.union([z.string(), z.array(z.string())]).optional(),
});

/** @internal */
export type GetDeploymentRoutesTransforms$Outbound = {
  type: string;
  op: string;
  target: GetDeploymentRoutesTarget$Outbound;
  args?: string | Array<string> | undefined;
};

/** @internal */
export const GetDeploymentRoutesTransforms$outboundSchema: z.ZodType<
  GetDeploymentRoutesTransforms$Outbound,
  z.ZodTypeDef,
  GetDeploymentRoutesTransforms
> = z.object({
  type: GetDeploymentRoutesType$outboundSchema,
  op: GetDeploymentRoutesOp$outboundSchema,
  target: z.lazy(() => GetDeploymentRoutesTarget$outboundSchema),
  args: z.union([z.string(), z.array(z.string())]).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentRoutesTransforms$ {
  /** @deprecated use `GetDeploymentRoutesTransforms$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentRoutesTransforms$inboundSchema;
  /** @deprecated use `GetDeploymentRoutesTransforms$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentRoutesTransforms$outboundSchema;
  /** @deprecated use `GetDeploymentRoutesTransforms$Outbound` instead. */
  export type Outbound = GetDeploymentRoutesTransforms$Outbound;
}

export function getDeploymentRoutesTransformsToJSON(
  getDeploymentRoutesTransforms: GetDeploymentRoutesTransforms,
): string {
  return JSON.stringify(
    GetDeploymentRoutesTransforms$outboundSchema.parse(
      getDeploymentRoutesTransforms,
    ),
  );
}

export function getDeploymentRoutesTransformsFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentRoutesTransforms, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentRoutesTransforms$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentRoutesTransforms' from JSON`,
  );
}

/** @internal */
export const GetDeploymentRoutesLocale$inboundSchema: z.ZodType<
  GetDeploymentRoutesLocale,
  z.ZodTypeDef,
  unknown
> = z.object({
  redirect: z.record(z.string()).optional(),
  cookie: z.string().optional(),
});

/** @internal */
export type GetDeploymentRoutesLocale$Outbound = {
  redirect?: { [k: string]: string } | undefined;
  cookie?: string | undefined;
};

/** @internal */
export const GetDeploymentRoutesLocale$outboundSchema: z.ZodType<
  GetDeploymentRoutesLocale$Outbound,
  z.ZodTypeDef,
  GetDeploymentRoutesLocale
> = z.object({
  redirect: z.record(z.string()).optional(),
  cookie: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentRoutesLocale$ {
  /** @deprecated use `GetDeploymentRoutesLocale$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentRoutesLocale$inboundSchema;
  /** @deprecated use `GetDeploymentRoutesLocale$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentRoutesLocale$outboundSchema;
  /** @deprecated use `GetDeploymentRoutesLocale$Outbound` instead. */
  export type Outbound = GetDeploymentRoutesLocale$Outbound;
}

export function getDeploymentRoutesLocaleToJSON(
  getDeploymentRoutesLocale: GetDeploymentRoutesLocale,
): string {
  return JSON.stringify(
    GetDeploymentRoutesLocale$outboundSchema.parse(getDeploymentRoutesLocale),
  );
}

export function getDeploymentRoutesLocaleFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentRoutesLocale, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentRoutesLocale$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentRoutesLocale' from JSON`,
  );
}

/** @internal */
export const GetDeploymentRoutes1$inboundSchema: z.ZodType<
  GetDeploymentRoutes1,
  z.ZodTypeDef,
  unknown
> = z.object({
  src: z.string(),
  dest: z.string().optional(),
  headers: z.record(z.string()).optional(),
  methods: z.array(z.string()).optional(),
  continue: z.boolean().optional(),
  override: z.boolean().optional(),
  caseSensitive: z.boolean().optional(),
  check: z.boolean().optional(),
  important: z.boolean().optional(),
  status: z.number().optional(),
  has: z.array(
    z.union([
      z.lazy(() => GetDeploymentHas1$inboundSchema),
      z.lazy(() => GetDeploymentHas2$inboundSchema),
    ]),
  ).optional(),
  missing: z.array(
    z.union([
      z.lazy(() => GetDeploymentMissing1$inboundSchema),
      z.lazy(() => GetDeploymentMissing2$inboundSchema),
    ]),
  ).optional(),
  mitigate: z.lazy(() => GetDeploymentRoutesMitigate$inboundSchema).optional(),
  transforms: z.array(z.lazy(() => GetDeploymentRoutesTransforms$inboundSchema))
    .optional(),
  locale: z.lazy(() => GetDeploymentRoutesLocale$inboundSchema).optional(),
  middlewarePath: z.string().optional(),
  middlewareRawSrc: z.array(z.string()).optional(),
  middleware: z.number().optional(),
});

/** @internal */
export type GetDeploymentRoutes1$Outbound = {
  src: string;
  dest?: string | undefined;
  headers?: { [k: string]: string } | undefined;
  methods?: Array<string> | undefined;
  continue?: boolean | undefined;
  override?: boolean | undefined;
  caseSensitive?: boolean | undefined;
  check?: boolean | undefined;
  important?: boolean | undefined;
  status?: number | undefined;
  has?:
    | Array<GetDeploymentHas1$Outbound | GetDeploymentHas2$Outbound>
    | undefined;
  missing?:
    | Array<GetDeploymentMissing1$Outbound | GetDeploymentMissing2$Outbound>
    | undefined;
  mitigate?: GetDeploymentRoutesMitigate$Outbound | undefined;
  transforms?: Array<GetDeploymentRoutesTransforms$Outbound> | undefined;
  locale?: GetDeploymentRoutesLocale$Outbound | undefined;
  middlewarePath?: string | undefined;
  middlewareRawSrc?: Array<string> | undefined;
  middleware?: number | undefined;
};

/** @internal */
export const GetDeploymentRoutes1$outboundSchema: z.ZodType<
  GetDeploymentRoutes1$Outbound,
  z.ZodTypeDef,
  GetDeploymentRoutes1
> = z.object({
  src: z.string(),
  dest: z.string().optional(),
  headers: z.record(z.string()).optional(),
  methods: z.array(z.string()).optional(),
  continue: z.boolean().optional(),
  override: z.boolean().optional(),
  caseSensitive: z.boolean().optional(),
  check: z.boolean().optional(),
  important: z.boolean().optional(),
  status: z.number().optional(),
  has: z.array(
    z.union([
      z.lazy(() => GetDeploymentHas1$outboundSchema),
      z.lazy(() => GetDeploymentHas2$outboundSchema),
    ]),
  ).optional(),
  missing: z.array(
    z.union([
      z.lazy(() => GetDeploymentMissing1$outboundSchema),
      z.lazy(() => GetDeploymentMissing2$outboundSchema),
    ]),
  ).optional(),
  mitigate: z.lazy(() => GetDeploymentRoutesMitigate$outboundSchema).optional(),
  transforms: z.array(
    z.lazy(() => GetDeploymentRoutesTransforms$outboundSchema),
  ).optional(),
  locale: z.lazy(() => GetDeploymentRoutesLocale$outboundSchema).optional(),
  middlewarePath: z.string().optional(),
  middlewareRawSrc: z.array(z.string()).optional(),
  middleware: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentRoutes1$ {
  /** @deprecated use `GetDeploymentRoutes1$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentRoutes1$inboundSchema;
  /** @deprecated use `GetDeploymentRoutes1$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentRoutes1$outboundSchema;
  /** @deprecated use `GetDeploymentRoutes1$Outbound` instead. */
  export type Outbound = GetDeploymentRoutes1$Outbound;
}

export function getDeploymentRoutes1ToJSON(
  getDeploymentRoutes1: GetDeploymentRoutes1,
): string {
  return JSON.stringify(
    GetDeploymentRoutes1$outboundSchema.parse(getDeploymentRoutes1),
  );
}

export function getDeploymentRoutes1FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentRoutes1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentRoutes1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentRoutes1' from JSON`,
  );
}

/** @internal */
export const ResponseBodyRoutes$inboundSchema: z.ZodType<
  ResponseBodyRoutes,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetDeploymentRoutes3$inboundSchema),
  z.lazy(() => GetDeploymentRoutes1$inboundSchema),
  z.lazy(() => GetDeploymentRoutes2$inboundSchema),
]);

/** @internal */
export type ResponseBodyRoutes$Outbound =
  | GetDeploymentRoutes3$Outbound
  | GetDeploymentRoutes1$Outbound
  | GetDeploymentRoutes2$Outbound;

/** @internal */
export const ResponseBodyRoutes$outboundSchema: z.ZodType<
  ResponseBodyRoutes$Outbound,
  z.ZodTypeDef,
  ResponseBodyRoutes
> = z.union([
  z.lazy(() => GetDeploymentRoutes3$outboundSchema),
  z.lazy(() => GetDeploymentRoutes1$outboundSchema),
  z.lazy(() => GetDeploymentRoutes2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyRoutes$ {
  /** @deprecated use `ResponseBodyRoutes$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyRoutes$inboundSchema;
  /** @deprecated use `ResponseBodyRoutes$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyRoutes$outboundSchema;
  /** @deprecated use `ResponseBodyRoutes$Outbound` instead. */
  export type Outbound = ResponseBodyRoutes$Outbound;
}

export function responseBodyRoutesToJSON(
  responseBodyRoutes: ResponseBodyRoutes,
): string {
  return JSON.stringify(
    ResponseBodyRoutes$outboundSchema.parse(responseBodyRoutes),
  );
}

export function responseBodyRoutesFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyRoutes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyRoutes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyRoutes' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitRepoDeploymentsType$inboundSchema: z.ZodNativeEnum<
  typeof GetDeploymentGitRepoDeploymentsType
> = z.nativeEnum(GetDeploymentGitRepoDeploymentsType);

/** @internal */
export const GetDeploymentGitRepoDeploymentsType$outboundSchema:
  z.ZodNativeEnum<typeof GetDeploymentGitRepoDeploymentsType> =
    GetDeploymentGitRepoDeploymentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitRepoDeploymentsType$ {
  /** @deprecated use `GetDeploymentGitRepoDeploymentsType$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitRepoDeploymentsType$inboundSchema;
  /** @deprecated use `GetDeploymentGitRepoDeploymentsType$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitRepoDeploymentsType$outboundSchema;
}

/** @internal */
export const GetDeploymentGitRepoOwnerType$inboundSchema: z.ZodNativeEnum<
  typeof GetDeploymentGitRepoOwnerType
> = z.nativeEnum(GetDeploymentGitRepoOwnerType);

/** @internal */
export const GetDeploymentGitRepoOwnerType$outboundSchema: z.ZodNativeEnum<
  typeof GetDeploymentGitRepoOwnerType
> = GetDeploymentGitRepoOwnerType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitRepoOwnerType$ {
  /** @deprecated use `GetDeploymentGitRepoOwnerType$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentGitRepoOwnerType$inboundSchema;
  /** @deprecated use `GetDeploymentGitRepoOwnerType$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentGitRepoOwnerType$outboundSchema;
}

/** @internal */
export const GetDeploymentGitRepo3$inboundSchema: z.ZodType<
  GetDeploymentGitRepo3,
  z.ZodTypeDef,
  unknown
> = z.object({
  owner: z.string(),
  repoUuid: z.string(),
  slug: z.string(),
  type: GetDeploymentGitRepoDeploymentsType$inboundSchema,
  workspaceUuid: z.string(),
  path: z.string(),
  defaultBranch: z.string(),
  name: z.string(),
  private: z.boolean(),
  ownerType: GetDeploymentGitRepoOwnerType$inboundSchema,
});

/** @internal */
export type GetDeploymentGitRepo3$Outbound = {
  owner: string;
  repoUuid: string;
  slug: string;
  type: string;
  workspaceUuid: string;
  path: string;
  defaultBranch: string;
  name: string;
  private: boolean;
  ownerType: string;
};

/** @internal */
export const GetDeploymentGitRepo3$outboundSchema: z.ZodType<
  GetDeploymentGitRepo3$Outbound,
  z.ZodTypeDef,
  GetDeploymentGitRepo3
> = z.object({
  owner: z.string(),
  repoUuid: z.string(),
  slug: z.string(),
  type: GetDeploymentGitRepoDeploymentsType$outboundSchema,
  workspaceUuid: z.string(),
  path: z.string(),
  defaultBranch: z.string(),
  name: z.string(),
  private: z.boolean(),
  ownerType: GetDeploymentGitRepoOwnerType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitRepo3$ {
  /** @deprecated use `GetDeploymentGitRepo3$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentGitRepo3$inboundSchema;
  /** @deprecated use `GetDeploymentGitRepo3$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentGitRepo3$outboundSchema;
  /** @deprecated use `GetDeploymentGitRepo3$Outbound` instead. */
  export type Outbound = GetDeploymentGitRepo3$Outbound;
}

export function getDeploymentGitRepo3ToJSON(
  getDeploymentGitRepo3: GetDeploymentGitRepo3,
): string {
  return JSON.stringify(
    GetDeploymentGitRepo3$outboundSchema.parse(getDeploymentGitRepo3),
  );
}

export function getDeploymentGitRepo3FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentGitRepo3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentGitRepo3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentGitRepo3' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitRepoType$inboundSchema: z.ZodNativeEnum<
  typeof GetDeploymentGitRepoType
> = z.nativeEnum(GetDeploymentGitRepoType);

/** @internal */
export const GetDeploymentGitRepoType$outboundSchema: z.ZodNativeEnum<
  typeof GetDeploymentGitRepoType
> = GetDeploymentGitRepoType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitRepoType$ {
  /** @deprecated use `GetDeploymentGitRepoType$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentGitRepoType$inboundSchema;
  /** @deprecated use `GetDeploymentGitRepoType$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentGitRepoType$outboundSchema;
}

/** @internal */
export const GetDeploymentGitRepoDeploymentsResponseOwnerType$inboundSchema:
  z.ZodNativeEnum<typeof GetDeploymentGitRepoDeploymentsResponseOwnerType> = z
    .nativeEnum(GetDeploymentGitRepoDeploymentsResponseOwnerType);

/** @internal */
export const GetDeploymentGitRepoDeploymentsResponseOwnerType$outboundSchema:
  z.ZodNativeEnum<typeof GetDeploymentGitRepoDeploymentsResponseOwnerType> =
    GetDeploymentGitRepoDeploymentsResponseOwnerType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitRepoDeploymentsResponseOwnerType$ {
  /** @deprecated use `GetDeploymentGitRepoDeploymentsResponseOwnerType$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitRepoDeploymentsResponseOwnerType$inboundSchema;
  /** @deprecated use `GetDeploymentGitRepoDeploymentsResponseOwnerType$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitRepoDeploymentsResponseOwnerType$outboundSchema;
}

/** @internal */
export const GetDeploymentGitRepo2$inboundSchema: z.ZodType<
  GetDeploymentGitRepo2,
  z.ZodTypeDef,
  unknown
> = z.object({
  org: z.string(),
  repo: z.string(),
  repoId: z.number(),
  type: GetDeploymentGitRepoType$inboundSchema,
  repoOwnerId: z.number(),
  path: z.string(),
  defaultBranch: z.string(),
  name: z.string(),
  private: z.boolean(),
  ownerType: GetDeploymentGitRepoDeploymentsResponseOwnerType$inboundSchema,
});

/** @internal */
export type GetDeploymentGitRepo2$Outbound = {
  org: string;
  repo: string;
  repoId: number;
  type: string;
  repoOwnerId: number;
  path: string;
  defaultBranch: string;
  name: string;
  private: boolean;
  ownerType: string;
};

/** @internal */
export const GetDeploymentGitRepo2$outboundSchema: z.ZodType<
  GetDeploymentGitRepo2$Outbound,
  z.ZodTypeDef,
  GetDeploymentGitRepo2
> = z.object({
  org: z.string(),
  repo: z.string(),
  repoId: z.number(),
  type: GetDeploymentGitRepoType$outboundSchema,
  repoOwnerId: z.number(),
  path: z.string(),
  defaultBranch: z.string(),
  name: z.string(),
  private: z.boolean(),
  ownerType: GetDeploymentGitRepoDeploymentsResponseOwnerType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitRepo2$ {
  /** @deprecated use `GetDeploymentGitRepo2$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentGitRepo2$inboundSchema;
  /** @deprecated use `GetDeploymentGitRepo2$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentGitRepo2$outboundSchema;
  /** @deprecated use `GetDeploymentGitRepo2$Outbound` instead. */
  export type Outbound = GetDeploymentGitRepo2$Outbound;
}

export function getDeploymentGitRepo2ToJSON(
  getDeploymentGitRepo2: GetDeploymentGitRepo2,
): string {
  return JSON.stringify(
    GetDeploymentGitRepo2$outboundSchema.parse(getDeploymentGitRepo2),
  );
}

export function getDeploymentGitRepo2FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentGitRepo2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentGitRepo2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentGitRepo2' from JSON`,
  );
}

/** @internal */
export const GetDeploymentGitRepoDeploymentsResponseType$inboundSchema:
  z.ZodNativeEnum<typeof GetDeploymentGitRepoDeploymentsResponseType> = z
    .nativeEnum(GetDeploymentGitRepoDeploymentsResponseType);

/** @internal */
export const GetDeploymentGitRepoDeploymentsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof GetDeploymentGitRepoDeploymentsResponseType> =
    GetDeploymentGitRepoDeploymentsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitRepoDeploymentsResponseType$ {
  /** @deprecated use `GetDeploymentGitRepoDeploymentsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitRepoDeploymentsResponseType$inboundSchema;
  /** @deprecated use `GetDeploymentGitRepoDeploymentsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitRepoDeploymentsResponseType$outboundSchema;
}

/** @internal */
export const GetDeploymentGitRepoDeploymentsOwnerType$inboundSchema:
  z.ZodNativeEnum<typeof GetDeploymentGitRepoDeploymentsOwnerType> = z
    .nativeEnum(GetDeploymentGitRepoDeploymentsOwnerType);

/** @internal */
export const GetDeploymentGitRepoDeploymentsOwnerType$outboundSchema:
  z.ZodNativeEnum<typeof GetDeploymentGitRepoDeploymentsOwnerType> =
    GetDeploymentGitRepoDeploymentsOwnerType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitRepoDeploymentsOwnerType$ {
  /** @deprecated use `GetDeploymentGitRepoDeploymentsOwnerType$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentGitRepoDeploymentsOwnerType$inboundSchema;
  /** @deprecated use `GetDeploymentGitRepoDeploymentsOwnerType$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentGitRepoDeploymentsOwnerType$outboundSchema;
}

/** @internal */
export const GetDeploymentGitRepo1$inboundSchema: z.ZodType<
  GetDeploymentGitRepo1,
  z.ZodTypeDef,
  unknown
> = z.object({
  namespace: z.string(),
  projectId: z.number(),
  type: GetDeploymentGitRepoDeploymentsResponseType$inboundSchema,
  url: z.string(),
  path: z.string(),
  defaultBranch: z.string(),
  name: z.string(),
  private: z.boolean(),
  ownerType: GetDeploymentGitRepoDeploymentsOwnerType$inboundSchema,
});

/** @internal */
export type GetDeploymentGitRepo1$Outbound = {
  namespace: string;
  projectId: number;
  type: string;
  url: string;
  path: string;
  defaultBranch: string;
  name: string;
  private: boolean;
  ownerType: string;
};

/** @internal */
export const GetDeploymentGitRepo1$outboundSchema: z.ZodType<
  GetDeploymentGitRepo1$Outbound,
  z.ZodTypeDef,
  GetDeploymentGitRepo1
> = z.object({
  namespace: z.string(),
  projectId: z.number(),
  type: GetDeploymentGitRepoDeploymentsResponseType$outboundSchema,
  url: z.string(),
  path: z.string(),
  defaultBranch: z.string(),
  name: z.string(),
  private: z.boolean(),
  ownerType: GetDeploymentGitRepoDeploymentsOwnerType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentGitRepo1$ {
  /** @deprecated use `GetDeploymentGitRepo1$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentGitRepo1$inboundSchema;
  /** @deprecated use `GetDeploymentGitRepo1$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentGitRepo1$outboundSchema;
  /** @deprecated use `GetDeploymentGitRepo1$Outbound` instead. */
  export type Outbound = GetDeploymentGitRepo1$Outbound;
}

export function getDeploymentGitRepo1ToJSON(
  getDeploymentGitRepo1: GetDeploymentGitRepo1,
): string {
  return JSON.stringify(
    GetDeploymentGitRepo1$outboundSchema.parse(getDeploymentGitRepo1),
  );
}

export function getDeploymentGitRepo1FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentGitRepo1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentGitRepo1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentGitRepo1' from JSON`,
  );
}

/** @internal */
export const ResponseBodyGitRepo$inboundSchema: z.ZodType<
  ResponseBodyGitRepo,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetDeploymentGitRepo2$inboundSchema),
  z.lazy(() => GetDeploymentGitRepo3$inboundSchema),
  z.lazy(() => GetDeploymentGitRepo1$inboundSchema),
]);

/** @internal */
export type ResponseBodyGitRepo$Outbound =
  | GetDeploymentGitRepo2$Outbound
  | GetDeploymentGitRepo3$Outbound
  | GetDeploymentGitRepo1$Outbound;

/** @internal */
export const ResponseBodyGitRepo$outboundSchema: z.ZodType<
  ResponseBodyGitRepo$Outbound,
  z.ZodTypeDef,
  ResponseBodyGitRepo
> = z.union([
  z.lazy(() => GetDeploymentGitRepo2$outboundSchema),
  z.lazy(() => GetDeploymentGitRepo3$outboundSchema),
  z.lazy(() => GetDeploymentGitRepo1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyGitRepo$ {
  /** @deprecated use `ResponseBodyGitRepo$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyGitRepo$inboundSchema;
  /** @deprecated use `ResponseBodyGitRepo$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyGitRepo$outboundSchema;
  /** @deprecated use `ResponseBodyGitRepo$Outbound` instead. */
  export type Outbound = ResponseBodyGitRepo$Outbound;
}

export function responseBodyGitRepoToJSON(
  responseBodyGitRepo: ResponseBodyGitRepo,
): string {
  return JSON.stringify(
    ResponseBodyGitRepo$outboundSchema.parse(responseBodyGitRepo),
  );
}

export function responseBodyGitRepoFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyGitRepo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyGitRepo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyGitRepo' from JSON`,
  );
}

/** @internal */
export const GetDeploymentFlags2$inboundSchema: z.ZodType<
  GetDeploymentFlags2,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetDeploymentFlags2$Outbound = {};

/** @internal */
export const GetDeploymentFlags2$outboundSchema: z.ZodType<
  GetDeploymentFlags2$Outbound,
  z.ZodTypeDef,
  GetDeploymentFlags2
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentFlags2$ {
  /** @deprecated use `GetDeploymentFlags2$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentFlags2$inboundSchema;
  /** @deprecated use `GetDeploymentFlags2$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentFlags2$outboundSchema;
  /** @deprecated use `GetDeploymentFlags2$Outbound` instead. */
  export type Outbound = GetDeploymentFlags2$Outbound;
}

export function getDeploymentFlags2ToJSON(
  getDeploymentFlags2: GetDeploymentFlags2,
): string {
  return JSON.stringify(
    GetDeploymentFlags2$outboundSchema.parse(getDeploymentFlags2),
  );
}

export function getDeploymentFlags2FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentFlags2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentFlags2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentFlags2' from JSON`,
  );
}

/** @internal */
export const GetDeploymentFlagsOptions$inboundSchema: z.ZodType<
  GetDeploymentFlagsOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.nullable(FlagJSONValue$inboundSchema),
  label: z.string().optional(),
});

/** @internal */
export type GetDeploymentFlagsOptions$Outbound = {
  value: FlagJSONValue$Outbound | null;
  label?: string | undefined;
};

/** @internal */
export const GetDeploymentFlagsOptions$outboundSchema: z.ZodType<
  GetDeploymentFlagsOptions$Outbound,
  z.ZodTypeDef,
  GetDeploymentFlagsOptions
> = z.object({
  value: z.nullable(FlagJSONValue$outboundSchema),
  label: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentFlagsOptions$ {
  /** @deprecated use `GetDeploymentFlagsOptions$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentFlagsOptions$inboundSchema;
  /** @deprecated use `GetDeploymentFlagsOptions$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentFlagsOptions$outboundSchema;
  /** @deprecated use `GetDeploymentFlagsOptions$Outbound` instead. */
  export type Outbound = GetDeploymentFlagsOptions$Outbound;
}

export function getDeploymentFlagsOptionsToJSON(
  getDeploymentFlagsOptions: GetDeploymentFlagsOptions,
): string {
  return JSON.stringify(
    GetDeploymentFlagsOptions$outboundSchema.parse(getDeploymentFlagsOptions),
  );
}

export function getDeploymentFlagsOptionsFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentFlagsOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentFlagsOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentFlagsOptions' from JSON`,
  );
}

/** @internal */
export const GetDeploymentFlagsDefinitions$inboundSchema: z.ZodType<
  GetDeploymentFlagsDefinitions,
  z.ZodTypeDef,
  unknown
> = z.object({
  options: z.array(z.lazy(() => GetDeploymentFlagsOptions$inboundSchema))
    .optional(),
  url: z.string().optional(),
  description: z.string().optional(),
});

/** @internal */
export type GetDeploymentFlagsDefinitions$Outbound = {
  options?: Array<GetDeploymentFlagsOptions$Outbound> | undefined;
  url?: string | undefined;
  description?: string | undefined;
};

/** @internal */
export const GetDeploymentFlagsDefinitions$outboundSchema: z.ZodType<
  GetDeploymentFlagsDefinitions$Outbound,
  z.ZodTypeDef,
  GetDeploymentFlagsDefinitions
> = z.object({
  options: z.array(z.lazy(() => GetDeploymentFlagsOptions$outboundSchema))
    .optional(),
  url: z.string().optional(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentFlagsDefinitions$ {
  /** @deprecated use `GetDeploymentFlagsDefinitions$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentFlagsDefinitions$inboundSchema;
  /** @deprecated use `GetDeploymentFlagsDefinitions$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentFlagsDefinitions$outboundSchema;
  /** @deprecated use `GetDeploymentFlagsDefinitions$Outbound` instead. */
  export type Outbound = GetDeploymentFlagsDefinitions$Outbound;
}

export function getDeploymentFlagsDefinitionsToJSON(
  getDeploymentFlagsDefinitions: GetDeploymentFlagsDefinitions,
): string {
  return JSON.stringify(
    GetDeploymentFlagsDefinitions$outboundSchema.parse(
      getDeploymentFlagsDefinitions,
    ),
  );
}

export function getDeploymentFlagsDefinitionsFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentFlagsDefinitions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentFlagsDefinitions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentFlagsDefinitions' from JSON`,
  );
}

/** @internal */
export const GetDeploymentFlags1$inboundSchema: z.ZodType<
  GetDeploymentFlags1,
  z.ZodTypeDef,
  unknown
> = z.object({
  definitions: z.record(
    z.lazy(() => GetDeploymentFlagsDefinitions$inboundSchema),
  ),
});

/** @internal */
export type GetDeploymentFlags1$Outbound = {
  definitions: { [k: string]: GetDeploymentFlagsDefinitions$Outbound };
};

/** @internal */
export const GetDeploymentFlags1$outboundSchema: z.ZodType<
  GetDeploymentFlags1$Outbound,
  z.ZodTypeDef,
  GetDeploymentFlags1
> = z.object({
  definitions: z.record(
    z.lazy(() => GetDeploymentFlagsDefinitions$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentFlags1$ {
  /** @deprecated use `GetDeploymentFlags1$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentFlags1$inboundSchema;
  /** @deprecated use `GetDeploymentFlags1$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentFlags1$outboundSchema;
  /** @deprecated use `GetDeploymentFlags1$Outbound` instead. */
  export type Outbound = GetDeploymentFlags1$Outbound;
}

export function getDeploymentFlags1ToJSON(
  getDeploymentFlags1: GetDeploymentFlags1,
): string {
  return JSON.stringify(
    GetDeploymentFlags1$outboundSchema.parse(getDeploymentFlags1),
  );
}

export function getDeploymentFlags1FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentFlags1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentFlags1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentFlags1' from JSON`,
  );
}

/** @internal */
export const ResponseBodyFlags$inboundSchema: z.ZodType<
  ResponseBodyFlags,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetDeploymentFlags1$inboundSchema),
  z.array(z.lazy(() => GetDeploymentFlags2$inboundSchema)),
]);

/** @internal */
export type ResponseBodyFlags$Outbound =
  | GetDeploymentFlags1$Outbound
  | Array<GetDeploymentFlags2$Outbound>;

/** @internal */
export const ResponseBodyFlags$outboundSchema: z.ZodType<
  ResponseBodyFlags$Outbound,
  z.ZodTypeDef,
  ResponseBodyFlags
> = z.union([
  z.lazy(() => GetDeploymentFlags1$outboundSchema),
  z.array(z.lazy(() => GetDeploymentFlags2$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyFlags$ {
  /** @deprecated use `ResponseBodyFlags$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyFlags$inboundSchema;
  /** @deprecated use `ResponseBodyFlags$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyFlags$outboundSchema;
  /** @deprecated use `ResponseBodyFlags$Outbound` instead. */
  export type Outbound = ResponseBodyFlags$Outbound;
}

export function responseBodyFlagsToJSON(
  responseBodyFlags: ResponseBodyFlags,
): string {
  return JSON.stringify(
    ResponseBodyFlags$outboundSchema.parse(responseBodyFlags),
  );
}

export function responseBodyFlagsFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyFlags, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyFlags$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyFlags' from JSON`,
  );
}

/** @internal */
export const GetDeploymentMicrofrontendsApplications$inboundSchema: z.ZodType<
  GetDeploymentMicrofrontendsApplications,
  z.ZodTypeDef,
  unknown
> = z.object({
  isDefaultApp: z.boolean().optional(),
  productionHost: z.string(),
  deploymentAlias: z.string().optional(),
  deploymentHost: z.string().optional(),
});

/** @internal */
export type GetDeploymentMicrofrontendsApplications$Outbound = {
  isDefaultApp?: boolean | undefined;
  productionHost: string;
  deploymentAlias?: string | undefined;
  deploymentHost?: string | undefined;
};

/** @internal */
export const GetDeploymentMicrofrontendsApplications$outboundSchema: z.ZodType<
  GetDeploymentMicrofrontendsApplications$Outbound,
  z.ZodTypeDef,
  GetDeploymentMicrofrontendsApplications
> = z.object({
  isDefaultApp: z.boolean().optional(),
  productionHost: z.string(),
  deploymentAlias: z.string().optional(),
  deploymentHost: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentMicrofrontendsApplications$ {
  /** @deprecated use `GetDeploymentMicrofrontendsApplications$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentMicrofrontendsApplications$inboundSchema;
  /** @deprecated use `GetDeploymentMicrofrontendsApplications$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentMicrofrontendsApplications$outboundSchema;
  /** @deprecated use `GetDeploymentMicrofrontendsApplications$Outbound` instead. */
  export type Outbound = GetDeploymentMicrofrontendsApplications$Outbound;
}

export function getDeploymentMicrofrontendsApplicationsToJSON(
  getDeploymentMicrofrontendsApplications:
    GetDeploymentMicrofrontendsApplications,
): string {
  return JSON.stringify(
    GetDeploymentMicrofrontendsApplications$outboundSchema.parse(
      getDeploymentMicrofrontendsApplications,
    ),
  );
}

export function getDeploymentMicrofrontendsApplicationsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetDeploymentMicrofrontendsApplications,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetDeploymentMicrofrontendsApplications$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetDeploymentMicrofrontendsApplications' from JSON`,
  );
}

/** @internal */
export const GetDeploymentMicrofrontendsMfeConfigUploadState$inboundSchema:
  z.ZodNativeEnum<typeof GetDeploymentMicrofrontendsMfeConfigUploadState> = z
    .nativeEnum(GetDeploymentMicrofrontendsMfeConfigUploadState);

/** @internal */
export const GetDeploymentMicrofrontendsMfeConfigUploadState$outboundSchema:
  z.ZodNativeEnum<typeof GetDeploymentMicrofrontendsMfeConfigUploadState> =
    GetDeploymentMicrofrontendsMfeConfigUploadState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentMicrofrontendsMfeConfigUploadState$ {
  /** @deprecated use `GetDeploymentMicrofrontendsMfeConfigUploadState$inboundSchema` instead. */
  export const inboundSchema =
    GetDeploymentMicrofrontendsMfeConfigUploadState$inboundSchema;
  /** @deprecated use `GetDeploymentMicrofrontendsMfeConfigUploadState$outboundSchema` instead. */
  export const outboundSchema =
    GetDeploymentMicrofrontendsMfeConfigUploadState$outboundSchema;
}

/** @internal */
export const GetDeploymentMicrofrontends2$inboundSchema: z.ZodType<
  GetDeploymentMicrofrontends2,
  z.ZodTypeDef,
  unknown
> = z.object({
  isDefaultApp: z.boolean(),
  applications: z.record(
    z.lazy(() => GetDeploymentMicrofrontendsApplications$inboundSchema),
  ).optional(),
  mfeConfigUploadState:
    GetDeploymentMicrofrontendsMfeConfigUploadState$inboundSchema.optional(),
  defaultAppProjectName: z.string(),
  defaultRoute: z.string().optional(),
  groupIds: z.array(z.string()),
  microfrontendsAlias2Enabled: z.boolean().optional(),
});

/** @internal */
export type GetDeploymentMicrofrontends2$Outbound = {
  isDefaultApp: boolean;
  applications?: {
    [k: string]: GetDeploymentMicrofrontendsApplications$Outbound;
  } | undefined;
  mfeConfigUploadState?: string | undefined;
  defaultAppProjectName: string;
  defaultRoute?: string | undefined;
  groupIds: Array<string>;
  microfrontendsAlias2Enabled?: boolean | undefined;
};

/** @internal */
export const GetDeploymentMicrofrontends2$outboundSchema: z.ZodType<
  GetDeploymentMicrofrontends2$Outbound,
  z.ZodTypeDef,
  GetDeploymentMicrofrontends2
> = z.object({
  isDefaultApp: z.boolean(),
  applications: z.record(
    z.lazy(() => GetDeploymentMicrofrontendsApplications$outboundSchema),
  ).optional(),
  mfeConfigUploadState:
    GetDeploymentMicrofrontendsMfeConfigUploadState$outboundSchema.optional(),
  defaultAppProjectName: z.string(),
  defaultRoute: z.string().optional(),
  groupIds: z.array(z.string()),
  microfrontendsAlias2Enabled: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentMicrofrontends2$ {
  /** @deprecated use `GetDeploymentMicrofrontends2$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentMicrofrontends2$inboundSchema;
  /** @deprecated use `GetDeploymentMicrofrontends2$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentMicrofrontends2$outboundSchema;
  /** @deprecated use `GetDeploymentMicrofrontends2$Outbound` instead. */
  export type Outbound = GetDeploymentMicrofrontends2$Outbound;
}

export function getDeploymentMicrofrontends2ToJSON(
  getDeploymentMicrofrontends2: GetDeploymentMicrofrontends2,
): string {
  return JSON.stringify(
    GetDeploymentMicrofrontends2$outboundSchema.parse(
      getDeploymentMicrofrontends2,
    ),
  );
}

export function getDeploymentMicrofrontends2FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentMicrofrontends2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentMicrofrontends2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentMicrofrontends2' from JSON`,
  );
}

/** @internal */
export const GetDeploymentMicrofrontends1$inboundSchema: z.ZodType<
  GetDeploymentMicrofrontends1,
  z.ZodTypeDef,
  unknown
> = z.object({
  isDefaultApp: z.boolean().optional(),
  defaultAppProjectName: z.string(),
  defaultRoute: z.string().optional(),
  groupIds: z.array(z.string()),
  microfrontendsAlias2Enabled: z.boolean().optional(),
});

/** @internal */
export type GetDeploymentMicrofrontends1$Outbound = {
  isDefaultApp?: boolean | undefined;
  defaultAppProjectName: string;
  defaultRoute?: string | undefined;
  groupIds: Array<string>;
  microfrontendsAlias2Enabled?: boolean | undefined;
};

/** @internal */
export const GetDeploymentMicrofrontends1$outboundSchema: z.ZodType<
  GetDeploymentMicrofrontends1$Outbound,
  z.ZodTypeDef,
  GetDeploymentMicrofrontends1
> = z.object({
  isDefaultApp: z.boolean().optional(),
  defaultAppProjectName: z.string(),
  defaultRoute: z.string().optional(),
  groupIds: z.array(z.string()),
  microfrontendsAlias2Enabled: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentMicrofrontends1$ {
  /** @deprecated use `GetDeploymentMicrofrontends1$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentMicrofrontends1$inboundSchema;
  /** @deprecated use `GetDeploymentMicrofrontends1$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentMicrofrontends1$outboundSchema;
  /** @deprecated use `GetDeploymentMicrofrontends1$Outbound` instead. */
  export type Outbound = GetDeploymentMicrofrontends1$Outbound;
}

export function getDeploymentMicrofrontends1ToJSON(
  getDeploymentMicrofrontends1: GetDeploymentMicrofrontends1,
): string {
  return JSON.stringify(
    GetDeploymentMicrofrontends1$outboundSchema.parse(
      getDeploymentMicrofrontends1,
    ),
  );
}

export function getDeploymentMicrofrontends1FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentMicrofrontends1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentMicrofrontends1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentMicrofrontends1' from JSON`,
  );
}

/** @internal */
export const ResponseBodyMicrofrontends$inboundSchema: z.ZodType<
  ResponseBodyMicrofrontends,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetDeploymentMicrofrontends2$inboundSchema),
  z.lazy(() => GetDeploymentMicrofrontends1$inboundSchema),
]);

/** @internal */
export type ResponseBodyMicrofrontends$Outbound =
  | GetDeploymentMicrofrontends2$Outbound
  | GetDeploymentMicrofrontends1$Outbound;

/** @internal */
export const ResponseBodyMicrofrontends$outboundSchema: z.ZodType<
  ResponseBodyMicrofrontends$Outbound,
  z.ZodTypeDef,
  ResponseBodyMicrofrontends
> = z.union([
  z.lazy(() => GetDeploymentMicrofrontends2$outboundSchema),
  z.lazy(() => GetDeploymentMicrofrontends1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyMicrofrontends$ {
  /** @deprecated use `ResponseBodyMicrofrontends$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyMicrofrontends$inboundSchema;
  /** @deprecated use `ResponseBodyMicrofrontends$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyMicrofrontends$outboundSchema;
  /** @deprecated use `ResponseBodyMicrofrontends$Outbound` instead. */
  export type Outbound = ResponseBodyMicrofrontends$Outbound;
}

export function responseBodyMicrofrontendsToJSON(
  responseBodyMicrofrontends: ResponseBodyMicrofrontends,
): string {
  return JSON.stringify(
    ResponseBodyMicrofrontends$outboundSchema.parse(responseBodyMicrofrontends),
  );
}

export function responseBodyMicrofrontendsFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyMicrofrontends, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyMicrofrontends$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyMicrofrontends' from JSON`,
  );
}

/** @internal */
export const ResponseBodyFunctionType$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyFunctionType
> = z.nativeEnum(ResponseBodyFunctionType);

/** @internal */
export const ResponseBodyFunctionType$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyFunctionType
> = ResponseBodyFunctionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyFunctionType$ {
  /** @deprecated use `ResponseBodyFunctionType$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyFunctionType$inboundSchema;
  /** @deprecated use `ResponseBodyFunctionType$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyFunctionType$outboundSchema;
}

/** @internal */
export const ResponseBodyFunctionMemoryType$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyFunctionMemoryType
> = z.nativeEnum(ResponseBodyFunctionMemoryType);

/** @internal */
export const ResponseBodyFunctionMemoryType$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyFunctionMemoryType
> = ResponseBodyFunctionMemoryType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyFunctionMemoryType$ {
  /** @deprecated use `ResponseBodyFunctionMemoryType$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyFunctionMemoryType$inboundSchema;
  /** @deprecated use `ResponseBodyFunctionMemoryType$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyFunctionMemoryType$outboundSchema;
}

/** @internal */
export const ResponseBodyConfig$inboundSchema: z.ZodType<
  ResponseBodyConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.number().optional(),
  functionType: ResponseBodyFunctionType$inboundSchema,
  functionMemoryType: ResponseBodyFunctionMemoryType$inboundSchema,
  functionTimeout: z.nullable(z.number()),
  secureComputePrimaryRegion: z.nullable(z.string()),
  secureComputeFallbackRegion: z.nullable(z.string()),
  isUsingActiveCPU: z.boolean().optional(),
});

/** @internal */
export type ResponseBodyConfig$Outbound = {
  version?: number | undefined;
  functionType: string;
  functionMemoryType: string;
  functionTimeout: number | null;
  secureComputePrimaryRegion: string | null;
  secureComputeFallbackRegion: string | null;
  isUsingActiveCPU?: boolean | undefined;
};

/** @internal */
export const ResponseBodyConfig$outboundSchema: z.ZodType<
  ResponseBodyConfig$Outbound,
  z.ZodTypeDef,
  ResponseBodyConfig
> = z.object({
  version: z.number().optional(),
  functionType: ResponseBodyFunctionType$outboundSchema,
  functionMemoryType: ResponseBodyFunctionMemoryType$outboundSchema,
  functionTimeout: z.nullable(z.number()),
  secureComputePrimaryRegion: z.nullable(z.string()),
  secureComputeFallbackRegion: z.nullable(z.string()),
  isUsingActiveCPU: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyConfig$ {
  /** @deprecated use `ResponseBodyConfig$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyConfig$inboundSchema;
  /** @deprecated use `ResponseBodyConfig$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyConfig$outboundSchema;
  /** @deprecated use `ResponseBodyConfig$Outbound` instead. */
  export type Outbound = ResponseBodyConfig$Outbound;
}

export function responseBodyConfigToJSON(
  responseBodyConfig: ResponseBodyConfig,
): string {
  return JSON.stringify(
    ResponseBodyConfig$outboundSchema.parse(responseBodyConfig),
  );
}

export function responseBodyConfigFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyConfig' from JSON`,
  );
}

/** @internal */
export const ResponseBodyState$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyState
> = z.nativeEnum(ResponseBodyState);

/** @internal */
export const ResponseBodyState$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyState
> = ResponseBodyState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyState$ {
  /** @deprecated use `ResponseBodyState$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyState$inboundSchema;
  /** @deprecated use `ResponseBodyState$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyState$outboundSchema;
}

/** @internal */
export const ResponseBodyDeploymentAlias$inboundSchema: z.ZodType<
  ResponseBodyDeploymentAlias,
  z.ZodTypeDef,
  unknown
> = z.object({
  state: ResponseBodyState$inboundSchema,
  startedAt: z.number(),
  completedAt: z.number().optional(),
});

/** @internal */
export type ResponseBodyDeploymentAlias$Outbound = {
  state: string;
  startedAt: number;
  completedAt?: number | undefined;
};

/** @internal */
export const ResponseBodyDeploymentAlias$outboundSchema: z.ZodType<
  ResponseBodyDeploymentAlias$Outbound,
  z.ZodTypeDef,
  ResponseBodyDeploymentAlias
> = z.object({
  state: ResponseBodyState$outboundSchema,
  startedAt: z.number(),
  completedAt: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyDeploymentAlias$ {
  /** @deprecated use `ResponseBodyDeploymentAlias$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyDeploymentAlias$inboundSchema;
  /** @deprecated use `ResponseBodyDeploymentAlias$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyDeploymentAlias$outboundSchema;
  /** @deprecated use `ResponseBodyDeploymentAlias$Outbound` instead. */
  export type Outbound = ResponseBodyDeploymentAlias$Outbound;
}

export function responseBodyDeploymentAliasToJSON(
  responseBodyDeploymentAlias: ResponseBodyDeploymentAlias,
): string {
  return JSON.stringify(
    ResponseBodyDeploymentAlias$outboundSchema.parse(
      responseBodyDeploymentAlias,
    ),
  );
}

export function responseBodyDeploymentAliasFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyDeploymentAlias, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyDeploymentAlias$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyDeploymentAlias' from JSON`,
  );
}

/** @internal */
export const ResponseBodyChecks$inboundSchema: z.ZodType<
  ResponseBodyChecks,
  z.ZodTypeDef,
  unknown
> = z.object({
  "deployment-alias": z.lazy(() => ResponseBodyDeploymentAlias$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "deployment-alias": "deploymentAlias",
  });
});

/** @internal */
export type ResponseBodyChecks$Outbound = {
  "deployment-alias": ResponseBodyDeploymentAlias$Outbound;
};

/** @internal */
export const ResponseBodyChecks$outboundSchema: z.ZodType<
  ResponseBodyChecks$Outbound,
  z.ZodTypeDef,
  ResponseBodyChecks
> = z.object({
  deploymentAlias: z.lazy(() => ResponseBodyDeploymentAlias$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    deploymentAlias: "deployment-alias",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyChecks$ {
  /** @deprecated use `ResponseBodyChecks$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyChecks$inboundSchema;
  /** @deprecated use `ResponseBodyChecks$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyChecks$outboundSchema;
  /** @deprecated use `ResponseBodyChecks$Outbound` instead. */
  export type Outbound = ResponseBodyChecks$Outbound;
}

export function responseBodyChecksToJSON(
  responseBodyChecks: ResponseBodyChecks,
): string {
  return JSON.stringify(
    ResponseBodyChecks$outboundSchema.parse(responseBodyChecks),
  );
}

export function responseBodyChecksFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyChecks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyChecks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyChecks' from JSON`,
  );
}

/** @internal */
export const GetDeploymentResponseBody1$inboundSchema: z.ZodType<
  GetDeploymentResponseBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  aliasAssignedAt: z.nullable(z.union([z.number(), z.boolean()])).optional(),
  alwaysRefuseToBuild: z.boolean().optional(),
  build: z.lazy(() => ResponseBodyBuild$inboundSchema),
  buildArtifactUrls: z.array(z.string()).optional(),
  builds: z.array(z.lazy(() => ResponseBodyBuilds$inboundSchema)).optional(),
  env: z.array(z.string()),
  inspectorUrl: z.nullable(z.string()),
  isInConcurrentBuildsQueue: z.boolean(),
  isInSystemBuildsQueue: z.boolean(),
  projectSettings: z.lazy(() => ResponseBodyProjectSettings$inboundSchema),
  readyStateReason: z.string().optional(),
  integrations: z.lazy(() => ResponseBodyIntegrations$inboundSchema).optional(),
  images: z.lazy(() => ResponseBodyImages$inboundSchema).optional(),
  alias: z.array(z.string()).optional(),
  aliasAssigned: z.boolean(),
  bootedAt: z.number(),
  buildingAt: z.number(),
  buildContainerFinishedAt: z.number().optional(),
  buildSkipped: z.boolean(),
  creator: z.lazy(() => ResponseBodyCreator$inboundSchema),
  initReadyAt: z.number().optional(),
  isFirstBranchDeployment: z.boolean().optional(),
  lambdas: z.array(z.lazy(() => GetDeploymentResponseBodyLambdas$inboundSchema))
    .optional(),
  public: z.boolean(),
  ready: z.number().optional(),
  status: ResponseBodyStatus$inboundSchema,
  team: z.lazy(() => GetDeploymentResponseBodyTeam$inboundSchema).optional(),
  userAliases: z.array(z.string()).optional(),
  previewCommentsEnabled: z.boolean().optional(),
  ttyBuildLogs: z.boolean().optional(),
  customEnvironment: z.union([
    z.lazy(() => GetDeploymentCustomEnvironmentDeployments1$inboundSchema),
    z.lazy(() => GetDeploymentCustomEnvironmentDeployments2$inboundSchema),
  ]).optional(),
  oomReport: GetDeploymentResponseBodyOomReport$inboundSchema.optional(),
  aliasWarning: z.nullable(
    z.lazy(() => GetDeploymentResponseBodyAliasWarning$inboundSchema),
  ).optional(),
  id: z.string(),
  createdAt: z.number(),
  readyState: ResponseBodyReadyState$inboundSchema,
  name: z.string(),
  type: GetDeploymentResponseBodyType$inboundSchema,
  aliasError: z.nullable(z.lazy(() => ResponseBodyAliasError$inboundSchema))
    .optional(),
  aliasFinal: z.nullable(z.string()).optional(),
  autoAssignCustomDomains: z.boolean().optional(),
  automaticAliases: z.array(z.string()).optional(),
  buildErrorAt: z.number().optional(),
  checksState: ResponseBodyChecksState$inboundSchema.optional(),
  checksConclusion: ResponseBodyChecksConclusion$inboundSchema.optional(),
  deletedAt: z.nullable(z.number()).optional(),
  defaultRoute: z.string().optional(),
  canceledAt: z.number().optional(),
  errorCode: z.string().optional(),
  errorLink: z.string().optional(),
  errorMessage: z.nullable(z.string()).optional(),
  errorStep: z.string().optional(),
  passiveRegions: z.array(z.string()).optional(),
  gitSource: z.union([
    z.lazy(() => GetDeploymentGitSourceDeployments12$inboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments15$inboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments4$inboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments10$inboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments11$inboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments13$inboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments14$inboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments2$inboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments3$inboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments6$inboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments9$inboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments1$inboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments5$inboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments7$inboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments8$inboundSchema),
  ]).optional(),
  meta: z.record(z.string()),
  originCacheRegion: z.string().optional(),
  nodeVersion: ResponseBodyNodeVersion$inboundSchema.optional(),
  project: z.lazy(() => ResponseBodyProject$inboundSchema).optional(),
  readySubstate: ResponseBodyReadySubstate$inboundSchema.optional(),
  regions: z.array(z.string()),
  softDeletedByRetention: z.boolean().optional(),
  source: ResponseBodySource$inboundSchema.optional(),
  target: z.nullable(ResponseBodyTarget$inboundSchema).optional(),
  undeletedAt: z.number().optional(),
  url: z.string(),
  version: z.number(),
  oidcTokenClaims: z.lazy(() => ResponseBodyOidcTokenClaims$inboundSchema)
    .optional(),
  projectId: z.string(),
  plan: ResponseBodyPlan$inboundSchema,
  connectBuildsEnabled: z.boolean().optional(),
  connectConfigurationId: z.string().optional(),
  createdIn: z.string(),
  crons: z.array(z.lazy(() => ResponseBodyCrons$inboundSchema)).optional(),
  functions: z.nullable(
    z.record(z.lazy(() => ResponseBodyFunctions$inboundSchema)),
  ).optional(),
  monorepoManager: z.nullable(z.string()).optional(),
  ownerId: z.string(),
  passiveConnectConfigurationId: z.string().optional(),
  routes: z.nullable(
    z.array(z.union([
      z.lazy(() => GetDeploymentRoutes3$inboundSchema),
      z.lazy(() =>
        GetDeploymentRoutes1$inboundSchema
      ),
      z.lazy(() => GetDeploymentRoutes2$inboundSchema),
    ])),
  ),
  gitRepo: z.nullable(
    z.union([
      z.lazy(() => GetDeploymentGitRepo2$inboundSchema),
      z.lazy(() => GetDeploymentGitRepo3$inboundSchema),
      z.lazy(() => GetDeploymentGitRepo1$inboundSchema),
    ]),
  ).optional(),
  flags: z.union([
    z.lazy(() => GetDeploymentFlags1$inboundSchema),
    z.array(z.lazy(() => GetDeploymentFlags2$inboundSchema)),
  ]).optional(),
  microfrontends: z.union([
    z.lazy(() => GetDeploymentMicrofrontends2$inboundSchema),
    z.lazy(() => GetDeploymentMicrofrontends1$inboundSchema),
  ]).optional(),
  config: z.lazy(() => ResponseBodyConfig$inboundSchema).optional(),
  checks: z.lazy(() => ResponseBodyChecks$inboundSchema).optional(),
});

/** @internal */
export type GetDeploymentResponseBody1$Outbound = {
  aliasAssignedAt?: number | boolean | null | undefined;
  alwaysRefuseToBuild?: boolean | undefined;
  build: ResponseBodyBuild$Outbound;
  buildArtifactUrls?: Array<string> | undefined;
  builds?: Array<ResponseBodyBuilds$Outbound> | undefined;
  env: Array<string>;
  inspectorUrl: string | null;
  isInConcurrentBuildsQueue: boolean;
  isInSystemBuildsQueue: boolean;
  projectSettings: ResponseBodyProjectSettings$Outbound;
  readyStateReason?: string | undefined;
  integrations?: ResponseBodyIntegrations$Outbound | undefined;
  images?: ResponseBodyImages$Outbound | undefined;
  alias?: Array<string> | undefined;
  aliasAssigned: boolean;
  bootedAt: number;
  buildingAt: number;
  buildContainerFinishedAt?: number | undefined;
  buildSkipped: boolean;
  creator: ResponseBodyCreator$Outbound;
  initReadyAt?: number | undefined;
  isFirstBranchDeployment?: boolean | undefined;
  lambdas?: Array<GetDeploymentResponseBodyLambdas$Outbound> | undefined;
  public: boolean;
  ready?: number | undefined;
  status: string;
  team?: GetDeploymentResponseBodyTeam$Outbound | undefined;
  userAliases?: Array<string> | undefined;
  previewCommentsEnabled?: boolean | undefined;
  ttyBuildLogs?: boolean | undefined;
  customEnvironment?:
    | GetDeploymentCustomEnvironmentDeployments1$Outbound
    | GetDeploymentCustomEnvironmentDeployments2$Outbound
    | undefined;
  oomReport?: string | undefined;
  aliasWarning?:
    | GetDeploymentResponseBodyAliasWarning$Outbound
    | null
    | undefined;
  id: string;
  createdAt: number;
  readyState: string;
  name: string;
  type: string;
  aliasError?: ResponseBodyAliasError$Outbound | null | undefined;
  aliasFinal?: string | null | undefined;
  autoAssignCustomDomains?: boolean | undefined;
  automaticAliases?: Array<string> | undefined;
  buildErrorAt?: number | undefined;
  checksState?: string | undefined;
  checksConclusion?: string | undefined;
  deletedAt?: number | null | undefined;
  defaultRoute?: string | undefined;
  canceledAt?: number | undefined;
  errorCode?: string | undefined;
  errorLink?: string | undefined;
  errorMessage?: string | null | undefined;
  errorStep?: string | undefined;
  passiveRegions?: Array<string> | undefined;
  gitSource?:
    | GetDeploymentGitSourceDeployments12$Outbound
    | GetDeploymentGitSourceDeployments15$Outbound
    | GetDeploymentGitSourceDeployments4$Outbound
    | GetDeploymentGitSourceDeployments10$Outbound
    | GetDeploymentGitSourceDeployments11$Outbound
    | GetDeploymentGitSourceDeployments13$Outbound
    | GetDeploymentGitSourceDeployments14$Outbound
    | GetDeploymentGitSourceDeployments2$Outbound
    | GetDeploymentGitSourceDeployments3$Outbound
    | GetDeploymentGitSourceDeployments6$Outbound
    | GetDeploymentGitSourceDeployments9$Outbound
    | GetDeploymentGitSourceDeployments1$Outbound
    | GetDeploymentGitSourceDeployments5$Outbound
    | GetDeploymentGitSourceDeployments7$Outbound
    | GetDeploymentGitSourceDeployments8$Outbound
    | undefined;
  meta: { [k: string]: string };
  originCacheRegion?: string | undefined;
  nodeVersion?: string | undefined;
  project?: ResponseBodyProject$Outbound | undefined;
  readySubstate?: string | undefined;
  regions: Array<string>;
  softDeletedByRetention?: boolean | undefined;
  source?: string | undefined;
  target?: string | null | undefined;
  undeletedAt?: number | undefined;
  url: string;
  version: number;
  oidcTokenClaims?: ResponseBodyOidcTokenClaims$Outbound | undefined;
  projectId: string;
  plan: string;
  connectBuildsEnabled?: boolean | undefined;
  connectConfigurationId?: string | undefined;
  createdIn: string;
  crons?: Array<ResponseBodyCrons$Outbound> | undefined;
  functions?:
    | { [k: string]: ResponseBodyFunctions$Outbound }
    | null
    | undefined;
  monorepoManager?: string | null | undefined;
  ownerId: string;
  passiveConnectConfigurationId?: string | undefined;
  routes:
    | Array<
      | GetDeploymentRoutes3$Outbound
      | GetDeploymentRoutes1$Outbound
      | GetDeploymentRoutes2$Outbound
    >
    | null;
  gitRepo?:
    | GetDeploymentGitRepo2$Outbound
    | GetDeploymentGitRepo3$Outbound
    | GetDeploymentGitRepo1$Outbound
    | null
    | undefined;
  flags?:
    | GetDeploymentFlags1$Outbound
    | Array<GetDeploymentFlags2$Outbound>
    | undefined;
  microfrontends?:
    | GetDeploymentMicrofrontends2$Outbound
    | GetDeploymentMicrofrontends1$Outbound
    | undefined;
  config?: ResponseBodyConfig$Outbound | undefined;
  checks?: ResponseBodyChecks$Outbound | undefined;
};

/** @internal */
export const GetDeploymentResponseBody1$outboundSchema: z.ZodType<
  GetDeploymentResponseBody1$Outbound,
  z.ZodTypeDef,
  GetDeploymentResponseBody1
> = z.object({
  aliasAssignedAt: z.nullable(z.union([z.number(), z.boolean()])).optional(),
  alwaysRefuseToBuild: z.boolean().optional(),
  build: z.lazy(() => ResponseBodyBuild$outboundSchema),
  buildArtifactUrls: z.array(z.string()).optional(),
  builds: z.array(z.lazy(() => ResponseBodyBuilds$outboundSchema)).optional(),
  env: z.array(z.string()),
  inspectorUrl: z.nullable(z.string()),
  isInConcurrentBuildsQueue: z.boolean(),
  isInSystemBuildsQueue: z.boolean(),
  projectSettings: z.lazy(() => ResponseBodyProjectSettings$outboundSchema),
  readyStateReason: z.string().optional(),
  integrations: z.lazy(() => ResponseBodyIntegrations$outboundSchema)
    .optional(),
  images: z.lazy(() => ResponseBodyImages$outboundSchema).optional(),
  alias: z.array(z.string()).optional(),
  aliasAssigned: z.boolean(),
  bootedAt: z.number(),
  buildingAt: z.number(),
  buildContainerFinishedAt: z.number().optional(),
  buildSkipped: z.boolean(),
  creator: z.lazy(() => ResponseBodyCreator$outboundSchema),
  initReadyAt: z.number().optional(),
  isFirstBranchDeployment: z.boolean().optional(),
  lambdas: z.array(
    z.lazy(() => GetDeploymentResponseBodyLambdas$outboundSchema),
  ).optional(),
  public: z.boolean(),
  ready: z.number().optional(),
  status: ResponseBodyStatus$outboundSchema,
  team: z.lazy(() => GetDeploymentResponseBodyTeam$outboundSchema).optional(),
  userAliases: z.array(z.string()).optional(),
  previewCommentsEnabled: z.boolean().optional(),
  ttyBuildLogs: z.boolean().optional(),
  customEnvironment: z.union([
    z.lazy(() => GetDeploymentCustomEnvironmentDeployments1$outboundSchema),
    z.lazy(() => GetDeploymentCustomEnvironmentDeployments2$outboundSchema),
  ]).optional(),
  oomReport: GetDeploymentResponseBodyOomReport$outboundSchema.optional(),
  aliasWarning: z.nullable(
    z.lazy(() => GetDeploymentResponseBodyAliasWarning$outboundSchema),
  ).optional(),
  id: z.string(),
  createdAt: z.number(),
  readyState: ResponseBodyReadyState$outboundSchema,
  name: z.string(),
  type: GetDeploymentResponseBodyType$outboundSchema,
  aliasError: z.nullable(z.lazy(() => ResponseBodyAliasError$outboundSchema))
    .optional(),
  aliasFinal: z.nullable(z.string()).optional(),
  autoAssignCustomDomains: z.boolean().optional(),
  automaticAliases: z.array(z.string()).optional(),
  buildErrorAt: z.number().optional(),
  checksState: ResponseBodyChecksState$outboundSchema.optional(),
  checksConclusion: ResponseBodyChecksConclusion$outboundSchema.optional(),
  deletedAt: z.nullable(z.number()).optional(),
  defaultRoute: z.string().optional(),
  canceledAt: z.number().optional(),
  errorCode: z.string().optional(),
  errorLink: z.string().optional(),
  errorMessage: z.nullable(z.string()).optional(),
  errorStep: z.string().optional(),
  passiveRegions: z.array(z.string()).optional(),
  gitSource: z.union([
    z.lazy(() => GetDeploymentGitSourceDeployments12$outboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments15$outboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments4$outboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments10$outboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments11$outboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments13$outboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments14$outboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments2$outboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments3$outboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments6$outboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments9$outboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments1$outboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments5$outboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments7$outboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments8$outboundSchema),
  ]).optional(),
  meta: z.record(z.string()),
  originCacheRegion: z.string().optional(),
  nodeVersion: ResponseBodyNodeVersion$outboundSchema.optional(),
  project: z.lazy(() => ResponseBodyProject$outboundSchema).optional(),
  readySubstate: ResponseBodyReadySubstate$outboundSchema.optional(),
  regions: z.array(z.string()),
  softDeletedByRetention: z.boolean().optional(),
  source: ResponseBodySource$outboundSchema.optional(),
  target: z.nullable(ResponseBodyTarget$outboundSchema).optional(),
  undeletedAt: z.number().optional(),
  url: z.string(),
  version: z.number(),
  oidcTokenClaims: z.lazy(() => ResponseBodyOidcTokenClaims$outboundSchema)
    .optional(),
  projectId: z.string(),
  plan: ResponseBodyPlan$outboundSchema,
  connectBuildsEnabled: z.boolean().optional(),
  connectConfigurationId: z.string().optional(),
  createdIn: z.string(),
  crons: z.array(z.lazy(() => ResponseBodyCrons$outboundSchema)).optional(),
  functions: z.nullable(
    z.record(z.lazy(() => ResponseBodyFunctions$outboundSchema)),
  ).optional(),
  monorepoManager: z.nullable(z.string()).optional(),
  ownerId: z.string(),
  passiveConnectConfigurationId: z.string().optional(),
  routes: z.nullable(
    z.array(z.union([
      z.lazy(() => GetDeploymentRoutes3$outboundSchema),
      z.lazy(() =>
        GetDeploymentRoutes1$outboundSchema
      ),
      z.lazy(() => GetDeploymentRoutes2$outboundSchema),
    ])),
  ),
  gitRepo: z.nullable(
    z.union([
      z.lazy(() => GetDeploymentGitRepo2$outboundSchema),
      z.lazy(() => GetDeploymentGitRepo3$outboundSchema),
      z.lazy(() => GetDeploymentGitRepo1$outboundSchema),
    ]),
  ).optional(),
  flags: z.union([
    z.lazy(() => GetDeploymentFlags1$outboundSchema),
    z.array(z.lazy(() => GetDeploymentFlags2$outboundSchema)),
  ]).optional(),
  microfrontends: z.union([
    z.lazy(() => GetDeploymentMicrofrontends2$outboundSchema),
    z.lazy(() => GetDeploymentMicrofrontends1$outboundSchema),
  ]).optional(),
  config: z.lazy(() => ResponseBodyConfig$outboundSchema).optional(),
  checks: z.lazy(() => ResponseBodyChecks$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentResponseBody1$ {
  /** @deprecated use `GetDeploymentResponseBody1$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentResponseBody1$inboundSchema;
  /** @deprecated use `GetDeploymentResponseBody1$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentResponseBody1$outboundSchema;
  /** @deprecated use `GetDeploymentResponseBody1$Outbound` instead. */
  export type Outbound = GetDeploymentResponseBody1$Outbound;
}

export function getDeploymentResponseBody1ToJSON(
  getDeploymentResponseBody1: GetDeploymentResponseBody1,
): string {
  return JSON.stringify(
    GetDeploymentResponseBody1$outboundSchema.parse(getDeploymentResponseBody1),
  );
}

export function getDeploymentResponseBody1FromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentResponseBody1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentResponseBody1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentResponseBody1' from JSON`,
  );
}

/** @internal */
export const GetDeploymentResponseBody$inboundSchema: z.ZodType<
  GetDeploymentResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetDeploymentResponseBody1$inboundSchema),
  z.lazy(() => GetDeploymentResponseBody2$inboundSchema),
]);

/** @internal */
export type GetDeploymentResponseBody$Outbound =
  | GetDeploymentResponseBody1$Outbound
  | GetDeploymentResponseBody2$Outbound;

/** @internal */
export const GetDeploymentResponseBody$outboundSchema: z.ZodType<
  GetDeploymentResponseBody$Outbound,
  z.ZodTypeDef,
  GetDeploymentResponseBody
> = z.union([
  z.lazy(() => GetDeploymentResponseBody1$outboundSchema),
  z.lazy(() => GetDeploymentResponseBody2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentResponseBody$ {
  /** @deprecated use `GetDeploymentResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentResponseBody$inboundSchema;
  /** @deprecated use `GetDeploymentResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentResponseBody$outboundSchema;
  /** @deprecated use `GetDeploymentResponseBody$Outbound` instead. */
  export type Outbound = GetDeploymentResponseBody$Outbound;
}

export function getDeploymentResponseBodyToJSON(
  getDeploymentResponseBody: GetDeploymentResponseBody,
): string {
  return JSON.stringify(
    GetDeploymentResponseBody$outboundSchema.parse(getDeploymentResponseBody),
  );
}

export function getDeploymentResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentResponseBody' from JSON`,
  );
}
