/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export const PatchEdgeConfigItems1Operation = {
  Create: "create",
  Update: "update",
  Upsert: "upsert",
  Delete: "delete",
} as const;
export type PatchEdgeConfigItems1Operation = ClosedEnum<
  typeof PatchEdgeConfigItems1Operation
>;

export type PatchEdgeConfigItems1Description = string | any;

export type One3 = {
  operation: PatchEdgeConfigItems1Operation;
  key: string;
  value?: any | null | undefined;
  description?: string | any | null | undefined;
};

export const OneOperation = {
  Create: "create",
  Update: "update",
  Upsert: "upsert",
  Delete: "delete",
} as const;
export type OneOperation = ClosedEnum<typeof OneOperation>;

export type OneDescription = string | any;

export type One2 = {
  operation: OneOperation;
  key: string;
  value?: any | null | undefined;
  description?: string | any | null | undefined;
};

export const Operation = {
  Create: "create",
  Update: "update",
  Upsert: "upsert",
  Delete: "delete",
} as const;
export type Operation = ClosedEnum<typeof Operation>;

export type Description = string | any;

export type One1 = {
  operation: Operation;
  key: string;
  value?: any | null | undefined;
  description?: string | any | null | undefined;
};

export type Items1 = One1 | One2 | One3;

export type Items = One1 | One2 | One3;

export type PatchEdgeConfigItemsRequestBody = {
  items: Array<One1 | One2 | One3>;
};

export type PatchEdgeConfigItemsRequest = {
  edgeConfigId: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
  requestBody?: PatchEdgeConfigItemsRequestBody | undefined;
};

export type PatchEdgeConfigItemsResponseBody = {
  status: string;
};

/** @internal */
export const PatchEdgeConfigItems1Operation$inboundSchema: z.ZodNativeEnum<
  typeof PatchEdgeConfigItems1Operation
> = z.nativeEnum(PatchEdgeConfigItems1Operation);

/** @internal */
export const PatchEdgeConfigItems1Operation$outboundSchema: z.ZodNativeEnum<
  typeof PatchEdgeConfigItems1Operation
> = PatchEdgeConfigItems1Operation$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchEdgeConfigItems1Operation$ {
  /** @deprecated use `PatchEdgeConfigItems1Operation$inboundSchema` instead. */
  export const inboundSchema = PatchEdgeConfigItems1Operation$inboundSchema;
  /** @deprecated use `PatchEdgeConfigItems1Operation$outboundSchema` instead. */
  export const outboundSchema = PatchEdgeConfigItems1Operation$outboundSchema;
}

/** @internal */
export const PatchEdgeConfigItems1Description$inboundSchema: z.ZodType<
  PatchEdgeConfigItems1Description,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.any()]);

/** @internal */
export type PatchEdgeConfigItems1Description$Outbound = string | any;

/** @internal */
export const PatchEdgeConfigItems1Description$outboundSchema: z.ZodType<
  PatchEdgeConfigItems1Description$Outbound,
  z.ZodTypeDef,
  PatchEdgeConfigItems1Description
> = z.union([z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchEdgeConfigItems1Description$ {
  /** @deprecated use `PatchEdgeConfigItems1Description$inboundSchema` instead. */
  export const inboundSchema = PatchEdgeConfigItems1Description$inboundSchema;
  /** @deprecated use `PatchEdgeConfigItems1Description$outboundSchema` instead. */
  export const outboundSchema = PatchEdgeConfigItems1Description$outboundSchema;
  /** @deprecated use `PatchEdgeConfigItems1Description$Outbound` instead. */
  export type Outbound = PatchEdgeConfigItems1Description$Outbound;
}

export function patchEdgeConfigItems1DescriptionToJSON(
  patchEdgeConfigItems1Description: PatchEdgeConfigItems1Description,
): string {
  return JSON.stringify(
    PatchEdgeConfigItems1Description$outboundSchema.parse(
      patchEdgeConfigItems1Description,
    ),
  );
}

export function patchEdgeConfigItems1DescriptionFromJSON(
  jsonString: string,
): SafeParseResult<PatchEdgeConfigItems1Description, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchEdgeConfigItems1Description$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchEdgeConfigItems1Description' from JSON`,
  );
}

/** @internal */
export const One3$inboundSchema: z.ZodType<One3, z.ZodTypeDef, unknown> = z
  .object({
    operation: PatchEdgeConfigItems1Operation$inboundSchema,
    key: z.string(),
    value: z.nullable(z.any()).optional(),
    description: z.nullable(z.union([z.string(), z.any()])).optional(),
  });

/** @internal */
export type One3$Outbound = {
  operation: string;
  key: string;
  value?: any | null | undefined;
  description?: string | any | null | undefined;
};

/** @internal */
export const One3$outboundSchema: z.ZodType<One3$Outbound, z.ZodTypeDef, One3> =
  z.object({
    operation: PatchEdgeConfigItems1Operation$outboundSchema,
    key: z.string(),
    value: z.nullable(z.any()).optional(),
    description: z.nullable(z.union([z.string(), z.any()])).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace One3$ {
  /** @deprecated use `One3$inboundSchema` instead. */
  export const inboundSchema = One3$inboundSchema;
  /** @deprecated use `One3$outboundSchema` instead. */
  export const outboundSchema = One3$outboundSchema;
  /** @deprecated use `One3$Outbound` instead. */
  export type Outbound = One3$Outbound;
}

export function one3ToJSON(one3: One3): string {
  return JSON.stringify(One3$outboundSchema.parse(one3));
}

export function one3FromJSON(
  jsonString: string,
): SafeParseResult<One3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => One3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'One3' from JSON`,
  );
}

/** @internal */
export const OneOperation$inboundSchema: z.ZodNativeEnum<typeof OneOperation> =
  z.nativeEnum(OneOperation);

/** @internal */
export const OneOperation$outboundSchema: z.ZodNativeEnum<typeof OneOperation> =
  OneOperation$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OneOperation$ {
  /** @deprecated use `OneOperation$inboundSchema` instead. */
  export const inboundSchema = OneOperation$inboundSchema;
  /** @deprecated use `OneOperation$outboundSchema` instead. */
  export const outboundSchema = OneOperation$outboundSchema;
}

/** @internal */
export const OneDescription$inboundSchema: z.ZodType<
  OneDescription,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.any()]);

/** @internal */
export type OneDescription$Outbound = string | any;

/** @internal */
export const OneDescription$outboundSchema: z.ZodType<
  OneDescription$Outbound,
  z.ZodTypeDef,
  OneDescription
> = z.union([z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OneDescription$ {
  /** @deprecated use `OneDescription$inboundSchema` instead. */
  export const inboundSchema = OneDescription$inboundSchema;
  /** @deprecated use `OneDescription$outboundSchema` instead. */
  export const outboundSchema = OneDescription$outboundSchema;
  /** @deprecated use `OneDescription$Outbound` instead. */
  export type Outbound = OneDescription$Outbound;
}

export function oneDescriptionToJSON(oneDescription: OneDescription): string {
  return JSON.stringify(OneDescription$outboundSchema.parse(oneDescription));
}

export function oneDescriptionFromJSON(
  jsonString: string,
): SafeParseResult<OneDescription, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OneDescription$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OneDescription' from JSON`,
  );
}

/** @internal */
export const One2$inboundSchema: z.ZodType<One2, z.ZodTypeDef, unknown> = z
  .object({
    operation: OneOperation$inboundSchema,
    key: z.string(),
    value: z.nullable(z.any()).optional(),
    description: z.nullable(z.union([z.string(), z.any()])).optional(),
  });

/** @internal */
export type One2$Outbound = {
  operation: string;
  key: string;
  value?: any | null | undefined;
  description?: string | any | null | undefined;
};

/** @internal */
export const One2$outboundSchema: z.ZodType<One2$Outbound, z.ZodTypeDef, One2> =
  z.object({
    operation: OneOperation$outboundSchema,
    key: z.string(),
    value: z.nullable(z.any()).optional(),
    description: z.nullable(z.union([z.string(), z.any()])).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace One2$ {
  /** @deprecated use `One2$inboundSchema` instead. */
  export const inboundSchema = One2$inboundSchema;
  /** @deprecated use `One2$outboundSchema` instead. */
  export const outboundSchema = One2$outboundSchema;
  /** @deprecated use `One2$Outbound` instead. */
  export type Outbound = One2$Outbound;
}

export function one2ToJSON(one2: One2): string {
  return JSON.stringify(One2$outboundSchema.parse(one2));
}

export function one2FromJSON(
  jsonString: string,
): SafeParseResult<One2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => One2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'One2' from JSON`,
  );
}

/** @internal */
export const Operation$inboundSchema: z.ZodNativeEnum<typeof Operation> = z
  .nativeEnum(Operation);

/** @internal */
export const Operation$outboundSchema: z.ZodNativeEnum<typeof Operation> =
  Operation$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Operation$ {
  /** @deprecated use `Operation$inboundSchema` instead. */
  export const inboundSchema = Operation$inboundSchema;
  /** @deprecated use `Operation$outboundSchema` instead. */
  export const outboundSchema = Operation$outboundSchema;
}

/** @internal */
export const Description$inboundSchema: z.ZodType<
  Description,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.any()]);

/** @internal */
export type Description$Outbound = string | any;

/** @internal */
export const Description$outboundSchema: z.ZodType<
  Description$Outbound,
  z.ZodTypeDef,
  Description
> = z.union([z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Description$ {
  /** @deprecated use `Description$inboundSchema` instead. */
  export const inboundSchema = Description$inboundSchema;
  /** @deprecated use `Description$outboundSchema` instead. */
  export const outboundSchema = Description$outboundSchema;
  /** @deprecated use `Description$Outbound` instead. */
  export type Outbound = Description$Outbound;
}

export function descriptionToJSON(description: Description): string {
  return JSON.stringify(Description$outboundSchema.parse(description));
}

export function descriptionFromJSON(
  jsonString: string,
): SafeParseResult<Description, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Description$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Description' from JSON`,
  );
}

/** @internal */
export const One1$inboundSchema: z.ZodType<One1, z.ZodTypeDef, unknown> = z
  .object({
    operation: Operation$inboundSchema,
    key: z.string(),
    value: z.nullable(z.any()).optional(),
    description: z.nullable(z.union([z.string(), z.any()])).optional(),
  });

/** @internal */
export type One1$Outbound = {
  operation: string;
  key: string;
  value?: any | null | undefined;
  description?: string | any | null | undefined;
};

/** @internal */
export const One1$outboundSchema: z.ZodType<One1$Outbound, z.ZodTypeDef, One1> =
  z.object({
    operation: Operation$outboundSchema,
    key: z.string(),
    value: z.nullable(z.any()).optional(),
    description: z.nullable(z.union([z.string(), z.any()])).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace One1$ {
  /** @deprecated use `One1$inboundSchema` instead. */
  export const inboundSchema = One1$inboundSchema;
  /** @deprecated use `One1$outboundSchema` instead. */
  export const outboundSchema = One1$outboundSchema;
  /** @deprecated use `One1$Outbound` instead. */
  export type Outbound = One1$Outbound;
}

export function one1ToJSON(one1: One1): string {
  return JSON.stringify(One1$outboundSchema.parse(one1));
}

export function one1FromJSON(
  jsonString: string,
): SafeParseResult<One1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => One1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'One1' from JSON`,
  );
}

/** @internal */
export const Items1$inboundSchema: z.ZodType<Items1, z.ZodTypeDef, unknown> = z
  .union([
    z.lazy(() => One1$inboundSchema),
    z.lazy(() => One2$inboundSchema),
    z.lazy(() => One3$inboundSchema),
  ]);

/** @internal */
export type Items1$Outbound = One1$Outbound | One2$Outbound | One3$Outbound;

/** @internal */
export const Items1$outboundSchema: z.ZodType<
  Items1$Outbound,
  z.ZodTypeDef,
  Items1
> = z.union([
  z.lazy(() => One1$outboundSchema),
  z.lazy(() => One2$outboundSchema),
  z.lazy(() => One3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Items1$ {
  /** @deprecated use `Items1$inboundSchema` instead. */
  export const inboundSchema = Items1$inboundSchema;
  /** @deprecated use `Items1$outboundSchema` instead. */
  export const outboundSchema = Items1$outboundSchema;
  /** @deprecated use `Items1$Outbound` instead. */
  export type Outbound = Items1$Outbound;
}

export function items1ToJSON(items1: Items1): string {
  return JSON.stringify(Items1$outboundSchema.parse(items1));
}

export function items1FromJSON(
  jsonString: string,
): SafeParseResult<Items1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Items1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Items1' from JSON`,
  );
}

/** @internal */
export const Items$inboundSchema: z.ZodType<Items, z.ZodTypeDef, unknown> = z
  .union([
    z.lazy(() => One1$inboundSchema),
    z.lazy(() => One2$inboundSchema),
    z.lazy(() => One3$inboundSchema),
  ]);

/** @internal */
export type Items$Outbound = One1$Outbound | One2$Outbound | One3$Outbound;

/** @internal */
export const Items$outboundSchema: z.ZodType<
  Items$Outbound,
  z.ZodTypeDef,
  Items
> = z.union([
  z.lazy(() => One1$outboundSchema),
  z.lazy(() => One2$outboundSchema),
  z.lazy(() => One3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Items$ {
  /** @deprecated use `Items$inboundSchema` instead. */
  export const inboundSchema = Items$inboundSchema;
  /** @deprecated use `Items$outboundSchema` instead. */
  export const outboundSchema = Items$outboundSchema;
  /** @deprecated use `Items$Outbound` instead. */
  export type Outbound = Items$Outbound;
}

export function itemsToJSON(items: Items): string {
  return JSON.stringify(Items$outboundSchema.parse(items));
}

export function itemsFromJSON(
  jsonString: string,
): SafeParseResult<Items, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Items$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Items' from JSON`,
  );
}

/** @internal */
export const PatchEdgeConfigItemsRequestBody$inboundSchema: z.ZodType<
  PatchEdgeConfigItemsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(
    z.union([
      z.lazy(() => One1$inboundSchema),
      z.lazy(() => One2$inboundSchema),
      z.lazy(() => One3$inboundSchema),
    ]),
  ),
});

/** @internal */
export type PatchEdgeConfigItemsRequestBody$Outbound = {
  items: Array<One1$Outbound | One2$Outbound | One3$Outbound>;
};

/** @internal */
export const PatchEdgeConfigItemsRequestBody$outboundSchema: z.ZodType<
  PatchEdgeConfigItemsRequestBody$Outbound,
  z.ZodTypeDef,
  PatchEdgeConfigItemsRequestBody
> = z.object({
  items: z.array(
    z.union([
      z.lazy(() => One1$outboundSchema),
      z.lazy(() => One2$outboundSchema),
      z.lazy(() => One3$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchEdgeConfigItemsRequestBody$ {
  /** @deprecated use `PatchEdgeConfigItemsRequestBody$inboundSchema` instead. */
  export const inboundSchema = PatchEdgeConfigItemsRequestBody$inboundSchema;
  /** @deprecated use `PatchEdgeConfigItemsRequestBody$outboundSchema` instead. */
  export const outboundSchema = PatchEdgeConfigItemsRequestBody$outboundSchema;
  /** @deprecated use `PatchEdgeConfigItemsRequestBody$Outbound` instead. */
  export type Outbound = PatchEdgeConfigItemsRequestBody$Outbound;
}

export function patchEdgeConfigItemsRequestBodyToJSON(
  patchEdgeConfigItemsRequestBody: PatchEdgeConfigItemsRequestBody,
): string {
  return JSON.stringify(
    PatchEdgeConfigItemsRequestBody$outboundSchema.parse(
      patchEdgeConfigItemsRequestBody,
    ),
  );
}

export function patchEdgeConfigItemsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PatchEdgeConfigItemsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchEdgeConfigItemsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchEdgeConfigItemsRequestBody' from JSON`,
  );
}

/** @internal */
export const PatchEdgeConfigItemsRequest$inboundSchema: z.ZodType<
  PatchEdgeConfigItemsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  edgeConfigId: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  RequestBody: z.lazy(() => PatchEdgeConfigItemsRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PatchEdgeConfigItemsRequest$Outbound = {
  edgeConfigId: string;
  teamId?: string | undefined;
  slug?: string | undefined;
  RequestBody?: PatchEdgeConfigItemsRequestBody$Outbound | undefined;
};

/** @internal */
export const PatchEdgeConfigItemsRequest$outboundSchema: z.ZodType<
  PatchEdgeConfigItemsRequest$Outbound,
  z.ZodTypeDef,
  PatchEdgeConfigItemsRequest
> = z.object({
  edgeConfigId: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  requestBody: z.lazy(() => PatchEdgeConfigItemsRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchEdgeConfigItemsRequest$ {
  /** @deprecated use `PatchEdgeConfigItemsRequest$inboundSchema` instead. */
  export const inboundSchema = PatchEdgeConfigItemsRequest$inboundSchema;
  /** @deprecated use `PatchEdgeConfigItemsRequest$outboundSchema` instead. */
  export const outboundSchema = PatchEdgeConfigItemsRequest$outboundSchema;
  /** @deprecated use `PatchEdgeConfigItemsRequest$Outbound` instead. */
  export type Outbound = PatchEdgeConfigItemsRequest$Outbound;
}

export function patchEdgeConfigItemsRequestToJSON(
  patchEdgeConfigItemsRequest: PatchEdgeConfigItemsRequest,
): string {
  return JSON.stringify(
    PatchEdgeConfigItemsRequest$outboundSchema.parse(
      patchEdgeConfigItemsRequest,
    ),
  );
}

export function patchEdgeConfigItemsRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchEdgeConfigItemsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchEdgeConfigItemsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchEdgeConfigItemsRequest' from JSON`,
  );
}

/** @internal */
export const PatchEdgeConfigItemsResponseBody$inboundSchema: z.ZodType<
  PatchEdgeConfigItemsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.string(),
});

/** @internal */
export type PatchEdgeConfigItemsResponseBody$Outbound = {
  status: string;
};

/** @internal */
export const PatchEdgeConfigItemsResponseBody$outboundSchema: z.ZodType<
  PatchEdgeConfigItemsResponseBody$Outbound,
  z.ZodTypeDef,
  PatchEdgeConfigItemsResponseBody
> = z.object({
  status: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchEdgeConfigItemsResponseBody$ {
  /** @deprecated use `PatchEdgeConfigItemsResponseBody$inboundSchema` instead. */
  export const inboundSchema = PatchEdgeConfigItemsResponseBody$inboundSchema;
  /** @deprecated use `PatchEdgeConfigItemsResponseBody$outboundSchema` instead. */
  export const outboundSchema = PatchEdgeConfigItemsResponseBody$outboundSchema;
  /** @deprecated use `PatchEdgeConfigItemsResponseBody$Outbound` instead. */
  export type Outbound = PatchEdgeConfigItemsResponseBody$Outbound;
}

export function patchEdgeConfigItemsResponseBodyToJSON(
  patchEdgeConfigItemsResponseBody: PatchEdgeConfigItemsResponseBody,
): string {
  return JSON.stringify(
    PatchEdgeConfigItemsResponseBody$outboundSchema.parse(
      patchEdgeConfigItemsResponseBody,
    ),
  );
}

export function patchEdgeConfigItemsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PatchEdgeConfigItemsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchEdgeConfigItemsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchEdgeConfigItemsResponseBody' from JSON`,
  );
}
