/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export const View = {
  Account: "account",
  Project: "project",
} as const;
export type View = ClosedEnum<typeof View>;

export const InstallationType = {
  Marketplace: "marketplace",
  External: "external",
} as const;
export type InstallationType = ClosedEnum<typeof InstallationType>;

export type GetConfigurationsRequest = {
  view: View;
  installationType?: InstallationType | undefined;
  /**
   * ID of the integration
   */
  integrationIdOrSlug?: string | undefined;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
};

export const TagIds = {
  TagAi: "tag_ai",
  TagAnalytics: "tag_analytics",
  TagAuthentication: "tag_authentication",
  TagCms: "tag_cms",
  TagCodeRepository: "tag_code_repository",
  TagCommerce: "tag_commerce",
  TagDatabases: "tag_databases",
  TagDevTools: "tag_dev_tools",
  TagExperimentation: "tag_experimentation",
  TagFlags: "tag_flags",
  TagLogging: "tag_logging",
  TagMessaging: "tag_messaging",
  TagMonitoring: "tag_monitoring",
  TagObservability: "tag_observability",
  TagPerformance: "tag_performance",
  TagProductivity: "tag_productivity",
  TagSearching: "tag_searching",
  TagSecurity: "tag_security",
  TagTesting: "tag_testing",
  TagVideo: "tag_video",
  TagWorkflow: "tag_workflow",
} as const;
export type TagIds = ClosedEnum<typeof TagIds>;

export type ResponseBodyIntegration = {
  name: string;
  icon: string;
  isLegacy: boolean;
  flags?: Array<string> | undefined;
  assignedBetaLabelAt?: number | undefined;
  tagIds?: Array<TagIds> | undefined;
};

/**
 * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
 */
export const GetConfigurationsResponseBodyIntegrationsSource = {
  Marketplace: "marketplace",
  DeployButton: "deploy-button",
  External: "external",
  V0: "v0",
  ResourceClaims: "resource-claims",
} as const;
/**
 * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
 */
export type GetConfigurationsResponseBodyIntegrationsSource = ClosedEnum<
  typeof GetConfigurationsResponseBodyIntegrationsSource
>;

export const GetConfigurationsResponseBodyIntegrationsType = {
  IntegrationConfiguration: "integration-configuration",
} as const;
export type GetConfigurationsResponseBodyIntegrationsType = ClosedEnum<
  typeof GetConfigurationsResponseBodyIntegrationsType
>;

export const ResponseBodyDisabledReason = {
  DisabledByOwner: "disabled-by-owner",
  FeatureNotAvailable: "feature-not-available",
  DisabledByAdmin: "disabled-by-admin",
  OriginalOwnerLeftTheTeam: "original-owner-left-the-team",
  AccountPlanDowngrade: "account-plan-downgrade",
  OriginalOwnerRoleDowngraded: "original-owner-role-downgraded",
} as const;
export type ResponseBodyDisabledReason = ClosedEnum<
  typeof ResponseBodyDisabledReason
>;

/**
 * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
 */
export const GetConfigurationsResponseBodyInstallationType = {
  Marketplace: "marketplace",
  External: "external",
} as const;
/**
 * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
 */
export type GetConfigurationsResponseBodyInstallationType = ClosedEnum<
  typeof GetConfigurationsResponseBodyInstallationType
>;

export type GetConfigurationsResponseBody2 = {
  integration: ResponseBodyIntegration;
  /**
   * A timestamp that tells you when the configuration was installed successfully
   */
  completedAt?: number | undefined;
  /**
   * A timestamp that tells you when the configuration was created
   */
  createdAt: number;
  /**
   * The unique identifier of the configuration
   */
  id: string;
  /**
   * The unique identifier of the app the configuration was created for
   */
  integrationId: string;
  /**
   * The user or team ID that owns the configuration
   */
  ownerId: string;
  /**
   * When a configuration is limited to access certain projects, this will contain each of the project ID it is allowed to access. If it is not defined, the configuration has full access.
   */
  projects?: Array<string> | undefined;
  /**
   * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
   */
  source?: GetConfigurationsResponseBodyIntegrationsSource | undefined;
  /**
   * The slug of the integration the configuration is created for.
   */
  slug: string;
  /**
   * When the configuration was created for a team, this will show the ID of the team.
   */
  teamId?: string | null | undefined;
  type: GetConfigurationsResponseBodyIntegrationsType;
  /**
   * A timestamp that tells you when the configuration was updated.
   */
  updatedAt: number;
  /**
   * The ID of the user that created the configuration.
   */
  userId: string;
  /**
   * The resources that are allowed to be accessed by the configuration.
   */
  scopes: Array<string>;
  /**
   * A timestamp that tells you when the configuration was disabled. Note: Configurations can be disabled when the associated user loses access to a team. They do not function during this time until the configuration is 'transferred', meaning the associated user is changed to one with access to the team.
   */
  disabledAt?: number | undefined;
  /**
   * A timestamp that tells you when the configuration was deleted.
   */
  deletedAt?: number | null | undefined;
  /**
   * A timestamp that tells you when the configuration deletion has been started for cases when the deletion needs to be settled/approved by partners, such as when marketplace invoices have been paid.
   */
  deleteRequestedAt?: number | null | undefined;
  disabledReason?: ResponseBodyDisabledReason | undefined;
  /**
   * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
   */
  installationType?: GetConfigurationsResponseBodyInstallationType | undefined;
};

/**
 * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
 */
export const GetConfigurationsResponseBodySource = {
  Marketplace: "marketplace",
  DeployButton: "deploy-button",
  External: "external",
  V0: "v0",
  ResourceClaims: "resource-claims",
} as const;
/**
 * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
 */
export type GetConfigurationsResponseBodySource = ClosedEnum<
  typeof GetConfigurationsResponseBodySource
>;

export const GetConfigurationsResponseBodyType = {
  IntegrationConfiguration: "integration-configuration",
} as const;
export type GetConfigurationsResponseBodyType = ClosedEnum<
  typeof GetConfigurationsResponseBodyType
>;

export const DisabledReason = {
  DisabledByOwner: "disabled-by-owner",
  FeatureNotAvailable: "feature-not-available",
  DisabledByAdmin: "disabled-by-admin",
  OriginalOwnerLeftTheTeam: "original-owner-left-the-team",
  AccountPlanDowngrade: "account-plan-downgrade",
  OriginalOwnerRoleDowngraded: "original-owner-role-downgraded",
} as const;
export type DisabledReason = ClosedEnum<typeof DisabledReason>;

/**
 * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
 */
export const ResponseBodyInstallationType = {
  Marketplace: "marketplace",
  External: "external",
} as const;
/**
 * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
 */
export type ResponseBodyInstallationType = ClosedEnum<
  typeof ResponseBodyInstallationType
>;

/**
 * The list of configurations for the authenticated user
 */
export type GetConfigurationsResponseBody1 = {
  /**
   * A timestamp that tells you when the configuration was installed successfully
   */
  completedAt?: number | undefined;
  /**
   * A timestamp that tells you when the configuration was created
   */
  createdAt?: number | undefined;
  /**
   * The unique identifier of the configuration
   */
  id?: string | undefined;
  /**
   * The unique identifier of the app the configuration was created for
   */
  integrationId?: string | undefined;
  /**
   * The user or team ID that owns the configuration
   */
  ownerId?: string | undefined;
  /**
   * When a configuration is limited to access certain projects, this will contain each of the project ID it is allowed to access. If it is not defined, the configuration has full access.
   */
  projects?: Array<string> | undefined;
  /**
   * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
   */
  source?: GetConfigurationsResponseBodySource | undefined;
  /**
   * The slug of the integration the configuration is created for.
   */
  slug?: string | undefined;
  /**
   * When the configuration was created for a team, this will show the ID of the team.
   */
  teamId?: string | null | undefined;
  type?: GetConfigurationsResponseBodyType | undefined;
  /**
   * A timestamp that tells you when the configuration was updated.
   */
  updatedAt?: number | undefined;
  /**
   * The ID of the user that created the configuration.
   */
  userId?: string | undefined;
  /**
   * The resources that are allowed to be accessed by the configuration.
   */
  scopes?: Array<string> | undefined;
  /**
   * A timestamp that tells you when the configuration was disabled. Note: Configurations can be disabled when the associated user loses access to a team. They do not function during this time until the configuration is 'transferred', meaning the associated user is changed to one with access to the team.
   */
  disabledAt?: number | undefined;
  /**
   * A timestamp that tells you when the configuration was deleted.
   */
  deletedAt?: number | null | undefined;
  /**
   * A timestamp that tells you when the configuration deletion has been started for cases when the deletion needs to be settled/approved by partners, such as when marketplace invoices have been paid.
   */
  deleteRequestedAt?: number | null | undefined;
  disabledReason?: DisabledReason | undefined;
  /**
   * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
   */
  installationType?: ResponseBodyInstallationType | undefined;
};

/**
 * The list of configurations for the authenticated user
 */
export type GetConfigurationsResponseBody =
  | Array<GetConfigurationsResponseBody1>
  | Array<GetConfigurationsResponseBody2>;

/** @internal */
export const View$inboundSchema: z.ZodNativeEnum<typeof View> = z.nativeEnum(
  View,
);

/** @internal */
export const View$outboundSchema: z.ZodNativeEnum<typeof View> =
  View$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace View$ {
  /** @deprecated use `View$inboundSchema` instead. */
  export const inboundSchema = View$inboundSchema;
  /** @deprecated use `View$outboundSchema` instead. */
  export const outboundSchema = View$outboundSchema;
}

/** @internal */
export const InstallationType$inboundSchema: z.ZodNativeEnum<
  typeof InstallationType
> = z.nativeEnum(InstallationType);

/** @internal */
export const InstallationType$outboundSchema: z.ZodNativeEnum<
  typeof InstallationType
> = InstallationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstallationType$ {
  /** @deprecated use `InstallationType$inboundSchema` instead. */
  export const inboundSchema = InstallationType$inboundSchema;
  /** @deprecated use `InstallationType$outboundSchema` instead. */
  export const outboundSchema = InstallationType$outboundSchema;
}

/** @internal */
export const GetConfigurationsRequest$inboundSchema: z.ZodType<
  GetConfigurationsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  view: View$inboundSchema,
  installationType: InstallationType$inboundSchema.optional(),
  integrationIdOrSlug: z.string().optional(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/** @internal */
export type GetConfigurationsRequest$Outbound = {
  view: string;
  installationType?: string | undefined;
  integrationIdOrSlug?: string | undefined;
  teamId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const GetConfigurationsRequest$outboundSchema: z.ZodType<
  GetConfigurationsRequest$Outbound,
  z.ZodTypeDef,
  GetConfigurationsRequest
> = z.object({
  view: View$outboundSchema,
  installationType: InstallationType$outboundSchema.optional(),
  integrationIdOrSlug: z.string().optional(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationsRequest$ {
  /** @deprecated use `GetConfigurationsRequest$inboundSchema` instead. */
  export const inboundSchema = GetConfigurationsRequest$inboundSchema;
  /** @deprecated use `GetConfigurationsRequest$outboundSchema` instead. */
  export const outboundSchema = GetConfigurationsRequest$outboundSchema;
  /** @deprecated use `GetConfigurationsRequest$Outbound` instead. */
  export type Outbound = GetConfigurationsRequest$Outbound;
}

export function getConfigurationsRequestToJSON(
  getConfigurationsRequest: GetConfigurationsRequest,
): string {
  return JSON.stringify(
    GetConfigurationsRequest$outboundSchema.parse(getConfigurationsRequest),
  );
}

export function getConfigurationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetConfigurationsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetConfigurationsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetConfigurationsRequest' from JSON`,
  );
}

/** @internal */
export const TagIds$inboundSchema: z.ZodNativeEnum<typeof TagIds> = z
  .nativeEnum(TagIds);

/** @internal */
export const TagIds$outboundSchema: z.ZodNativeEnum<typeof TagIds> =
  TagIds$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TagIds$ {
  /** @deprecated use `TagIds$inboundSchema` instead. */
  export const inboundSchema = TagIds$inboundSchema;
  /** @deprecated use `TagIds$outboundSchema` instead. */
  export const outboundSchema = TagIds$outboundSchema;
}

/** @internal */
export const ResponseBodyIntegration$inboundSchema: z.ZodType<
  ResponseBodyIntegration,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  icon: z.string(),
  isLegacy: z.boolean(),
  flags: z.array(z.string()).optional(),
  assignedBetaLabelAt: z.number().optional(),
  tagIds: z.array(TagIds$inboundSchema).optional(),
});

/** @internal */
export type ResponseBodyIntegration$Outbound = {
  name: string;
  icon: string;
  isLegacy: boolean;
  flags?: Array<string> | undefined;
  assignedBetaLabelAt?: number | undefined;
  tagIds?: Array<string> | undefined;
};

/** @internal */
export const ResponseBodyIntegration$outboundSchema: z.ZodType<
  ResponseBodyIntegration$Outbound,
  z.ZodTypeDef,
  ResponseBodyIntegration
> = z.object({
  name: z.string(),
  icon: z.string(),
  isLegacy: z.boolean(),
  flags: z.array(z.string()).optional(),
  assignedBetaLabelAt: z.number().optional(),
  tagIds: z.array(TagIds$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyIntegration$ {
  /** @deprecated use `ResponseBodyIntegration$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyIntegration$inboundSchema;
  /** @deprecated use `ResponseBodyIntegration$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyIntegration$outboundSchema;
  /** @deprecated use `ResponseBodyIntegration$Outbound` instead. */
  export type Outbound = ResponseBodyIntegration$Outbound;
}

export function responseBodyIntegrationToJSON(
  responseBodyIntegration: ResponseBodyIntegration,
): string {
  return JSON.stringify(
    ResponseBodyIntegration$outboundSchema.parse(responseBodyIntegration),
  );
}

export function responseBodyIntegrationFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyIntegration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyIntegration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyIntegration' from JSON`,
  );
}

/** @internal */
export const GetConfigurationsResponseBodyIntegrationsSource$inboundSchema:
  z.ZodNativeEnum<typeof GetConfigurationsResponseBodyIntegrationsSource> = z
    .nativeEnum(GetConfigurationsResponseBodyIntegrationsSource);

/** @internal */
export const GetConfigurationsResponseBodyIntegrationsSource$outboundSchema:
  z.ZodNativeEnum<typeof GetConfigurationsResponseBodyIntegrationsSource> =
    GetConfigurationsResponseBodyIntegrationsSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationsResponseBodyIntegrationsSource$ {
  /** @deprecated use `GetConfigurationsResponseBodyIntegrationsSource$inboundSchema` instead. */
  export const inboundSchema =
    GetConfigurationsResponseBodyIntegrationsSource$inboundSchema;
  /** @deprecated use `GetConfigurationsResponseBodyIntegrationsSource$outboundSchema` instead. */
  export const outboundSchema =
    GetConfigurationsResponseBodyIntegrationsSource$outboundSchema;
}

/** @internal */
export const GetConfigurationsResponseBodyIntegrationsType$inboundSchema:
  z.ZodNativeEnum<typeof GetConfigurationsResponseBodyIntegrationsType> = z
    .nativeEnum(GetConfigurationsResponseBodyIntegrationsType);

/** @internal */
export const GetConfigurationsResponseBodyIntegrationsType$outboundSchema:
  z.ZodNativeEnum<typeof GetConfigurationsResponseBodyIntegrationsType> =
    GetConfigurationsResponseBodyIntegrationsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationsResponseBodyIntegrationsType$ {
  /** @deprecated use `GetConfigurationsResponseBodyIntegrationsType$inboundSchema` instead. */
  export const inboundSchema =
    GetConfigurationsResponseBodyIntegrationsType$inboundSchema;
  /** @deprecated use `GetConfigurationsResponseBodyIntegrationsType$outboundSchema` instead. */
  export const outboundSchema =
    GetConfigurationsResponseBodyIntegrationsType$outboundSchema;
}

/** @internal */
export const ResponseBodyDisabledReason$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyDisabledReason
> = z.nativeEnum(ResponseBodyDisabledReason);

/** @internal */
export const ResponseBodyDisabledReason$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyDisabledReason
> = ResponseBodyDisabledReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyDisabledReason$ {
  /** @deprecated use `ResponseBodyDisabledReason$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyDisabledReason$inboundSchema;
  /** @deprecated use `ResponseBodyDisabledReason$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyDisabledReason$outboundSchema;
}

/** @internal */
export const GetConfigurationsResponseBodyInstallationType$inboundSchema:
  z.ZodNativeEnum<typeof GetConfigurationsResponseBodyInstallationType> = z
    .nativeEnum(GetConfigurationsResponseBodyInstallationType);

/** @internal */
export const GetConfigurationsResponseBodyInstallationType$outboundSchema:
  z.ZodNativeEnum<typeof GetConfigurationsResponseBodyInstallationType> =
    GetConfigurationsResponseBodyInstallationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationsResponseBodyInstallationType$ {
  /** @deprecated use `GetConfigurationsResponseBodyInstallationType$inboundSchema` instead. */
  export const inboundSchema =
    GetConfigurationsResponseBodyInstallationType$inboundSchema;
  /** @deprecated use `GetConfigurationsResponseBodyInstallationType$outboundSchema` instead. */
  export const outboundSchema =
    GetConfigurationsResponseBodyInstallationType$outboundSchema;
}

/** @internal */
export const GetConfigurationsResponseBody2$inboundSchema: z.ZodType<
  GetConfigurationsResponseBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  integration: z.lazy(() => ResponseBodyIntegration$inboundSchema),
  completedAt: z.number().optional(),
  createdAt: z.number(),
  id: z.string(),
  integrationId: z.string(),
  ownerId: z.string(),
  projects: z.array(z.string()).optional(),
  source: GetConfigurationsResponseBodyIntegrationsSource$inboundSchema
    .optional(),
  slug: z.string(),
  teamId: z.nullable(z.string()).optional(),
  type: GetConfigurationsResponseBodyIntegrationsType$inboundSchema,
  updatedAt: z.number(),
  userId: z.string(),
  scopes: z.array(z.string()),
  disabledAt: z.number().optional(),
  deletedAt: z.nullable(z.number()).optional(),
  deleteRequestedAt: z.nullable(z.number()).optional(),
  disabledReason: ResponseBodyDisabledReason$inboundSchema.optional(),
  installationType: GetConfigurationsResponseBodyInstallationType$inboundSchema
    .optional(),
});

/** @internal */
export type GetConfigurationsResponseBody2$Outbound = {
  integration: ResponseBodyIntegration$Outbound;
  completedAt?: number | undefined;
  createdAt: number;
  id: string;
  integrationId: string;
  ownerId: string;
  projects?: Array<string> | undefined;
  source?: string | undefined;
  slug: string;
  teamId?: string | null | undefined;
  type: string;
  updatedAt: number;
  userId: string;
  scopes: Array<string>;
  disabledAt?: number | undefined;
  deletedAt?: number | null | undefined;
  deleteRequestedAt?: number | null | undefined;
  disabledReason?: string | undefined;
  installationType?: string | undefined;
};

/** @internal */
export const GetConfigurationsResponseBody2$outboundSchema: z.ZodType<
  GetConfigurationsResponseBody2$Outbound,
  z.ZodTypeDef,
  GetConfigurationsResponseBody2
> = z.object({
  integration: z.lazy(() => ResponseBodyIntegration$outboundSchema),
  completedAt: z.number().optional(),
  createdAt: z.number(),
  id: z.string(),
  integrationId: z.string(),
  ownerId: z.string(),
  projects: z.array(z.string()).optional(),
  source: GetConfigurationsResponseBodyIntegrationsSource$outboundSchema
    .optional(),
  slug: z.string(),
  teamId: z.nullable(z.string()).optional(),
  type: GetConfigurationsResponseBodyIntegrationsType$outboundSchema,
  updatedAt: z.number(),
  userId: z.string(),
  scopes: z.array(z.string()),
  disabledAt: z.number().optional(),
  deletedAt: z.nullable(z.number()).optional(),
  deleteRequestedAt: z.nullable(z.number()).optional(),
  disabledReason: ResponseBodyDisabledReason$outboundSchema.optional(),
  installationType: GetConfigurationsResponseBodyInstallationType$outboundSchema
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationsResponseBody2$ {
  /** @deprecated use `GetConfigurationsResponseBody2$inboundSchema` instead. */
  export const inboundSchema = GetConfigurationsResponseBody2$inboundSchema;
  /** @deprecated use `GetConfigurationsResponseBody2$outboundSchema` instead. */
  export const outboundSchema = GetConfigurationsResponseBody2$outboundSchema;
  /** @deprecated use `GetConfigurationsResponseBody2$Outbound` instead. */
  export type Outbound = GetConfigurationsResponseBody2$Outbound;
}

export function getConfigurationsResponseBody2ToJSON(
  getConfigurationsResponseBody2: GetConfigurationsResponseBody2,
): string {
  return JSON.stringify(
    GetConfigurationsResponseBody2$outboundSchema.parse(
      getConfigurationsResponseBody2,
    ),
  );
}

export function getConfigurationsResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<GetConfigurationsResponseBody2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetConfigurationsResponseBody2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetConfigurationsResponseBody2' from JSON`,
  );
}

/** @internal */
export const GetConfigurationsResponseBodySource$inboundSchema: z.ZodNativeEnum<
  typeof GetConfigurationsResponseBodySource
> = z.nativeEnum(GetConfigurationsResponseBodySource);

/** @internal */
export const GetConfigurationsResponseBodySource$outboundSchema:
  z.ZodNativeEnum<typeof GetConfigurationsResponseBodySource> =
    GetConfigurationsResponseBodySource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationsResponseBodySource$ {
  /** @deprecated use `GetConfigurationsResponseBodySource$inboundSchema` instead. */
  export const inboundSchema =
    GetConfigurationsResponseBodySource$inboundSchema;
  /** @deprecated use `GetConfigurationsResponseBodySource$outboundSchema` instead. */
  export const outboundSchema =
    GetConfigurationsResponseBodySource$outboundSchema;
}

/** @internal */
export const GetConfigurationsResponseBodyType$inboundSchema: z.ZodNativeEnum<
  typeof GetConfigurationsResponseBodyType
> = z.nativeEnum(GetConfigurationsResponseBodyType);

/** @internal */
export const GetConfigurationsResponseBodyType$outboundSchema: z.ZodNativeEnum<
  typeof GetConfigurationsResponseBodyType
> = GetConfigurationsResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationsResponseBodyType$ {
  /** @deprecated use `GetConfigurationsResponseBodyType$inboundSchema` instead. */
  export const inboundSchema = GetConfigurationsResponseBodyType$inboundSchema;
  /** @deprecated use `GetConfigurationsResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    GetConfigurationsResponseBodyType$outboundSchema;
}

/** @internal */
export const DisabledReason$inboundSchema: z.ZodNativeEnum<
  typeof DisabledReason
> = z.nativeEnum(DisabledReason);

/** @internal */
export const DisabledReason$outboundSchema: z.ZodNativeEnum<
  typeof DisabledReason
> = DisabledReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DisabledReason$ {
  /** @deprecated use `DisabledReason$inboundSchema` instead. */
  export const inboundSchema = DisabledReason$inboundSchema;
  /** @deprecated use `DisabledReason$outboundSchema` instead. */
  export const outboundSchema = DisabledReason$outboundSchema;
}

/** @internal */
export const ResponseBodyInstallationType$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyInstallationType
> = z.nativeEnum(ResponseBodyInstallationType);

/** @internal */
export const ResponseBodyInstallationType$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyInstallationType
> = ResponseBodyInstallationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyInstallationType$ {
  /** @deprecated use `ResponseBodyInstallationType$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyInstallationType$inboundSchema;
  /** @deprecated use `ResponseBodyInstallationType$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyInstallationType$outboundSchema;
}

/** @internal */
export const GetConfigurationsResponseBody1$inboundSchema: z.ZodType<
  GetConfigurationsResponseBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  completedAt: z.number().optional(),
  createdAt: z.number().optional(),
  id: z.string().optional(),
  integrationId: z.string().optional(),
  ownerId: z.string().optional(),
  projects: z.array(z.string()).optional(),
  source: GetConfigurationsResponseBodySource$inboundSchema.optional(),
  slug: z.string().optional(),
  teamId: z.nullable(z.string()).optional(),
  type: GetConfigurationsResponseBodyType$inboundSchema.optional(),
  updatedAt: z.number().optional(),
  userId: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  disabledAt: z.number().optional(),
  deletedAt: z.nullable(z.number()).optional(),
  deleteRequestedAt: z.nullable(z.number()).optional(),
  disabledReason: DisabledReason$inboundSchema.optional(),
  installationType: ResponseBodyInstallationType$inboundSchema.optional(),
});

/** @internal */
export type GetConfigurationsResponseBody1$Outbound = {
  completedAt?: number | undefined;
  createdAt?: number | undefined;
  id?: string | undefined;
  integrationId?: string | undefined;
  ownerId?: string | undefined;
  projects?: Array<string> | undefined;
  source?: string | undefined;
  slug?: string | undefined;
  teamId?: string | null | undefined;
  type?: string | undefined;
  updatedAt?: number | undefined;
  userId?: string | undefined;
  scopes?: Array<string> | undefined;
  disabledAt?: number | undefined;
  deletedAt?: number | null | undefined;
  deleteRequestedAt?: number | null | undefined;
  disabledReason?: string | undefined;
  installationType?: string | undefined;
};

/** @internal */
export const GetConfigurationsResponseBody1$outboundSchema: z.ZodType<
  GetConfigurationsResponseBody1$Outbound,
  z.ZodTypeDef,
  GetConfigurationsResponseBody1
> = z.object({
  completedAt: z.number().optional(),
  createdAt: z.number().optional(),
  id: z.string().optional(),
  integrationId: z.string().optional(),
  ownerId: z.string().optional(),
  projects: z.array(z.string()).optional(),
  source: GetConfigurationsResponseBodySource$outboundSchema.optional(),
  slug: z.string().optional(),
  teamId: z.nullable(z.string()).optional(),
  type: GetConfigurationsResponseBodyType$outboundSchema.optional(),
  updatedAt: z.number().optional(),
  userId: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  disabledAt: z.number().optional(),
  deletedAt: z.nullable(z.number()).optional(),
  deleteRequestedAt: z.nullable(z.number()).optional(),
  disabledReason: DisabledReason$outboundSchema.optional(),
  installationType: ResponseBodyInstallationType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationsResponseBody1$ {
  /** @deprecated use `GetConfigurationsResponseBody1$inboundSchema` instead. */
  export const inboundSchema = GetConfigurationsResponseBody1$inboundSchema;
  /** @deprecated use `GetConfigurationsResponseBody1$outboundSchema` instead. */
  export const outboundSchema = GetConfigurationsResponseBody1$outboundSchema;
  /** @deprecated use `GetConfigurationsResponseBody1$Outbound` instead. */
  export type Outbound = GetConfigurationsResponseBody1$Outbound;
}

export function getConfigurationsResponseBody1ToJSON(
  getConfigurationsResponseBody1: GetConfigurationsResponseBody1,
): string {
  return JSON.stringify(
    GetConfigurationsResponseBody1$outboundSchema.parse(
      getConfigurationsResponseBody1,
    ),
  );
}

export function getConfigurationsResponseBody1FromJSON(
  jsonString: string,
): SafeParseResult<GetConfigurationsResponseBody1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetConfigurationsResponseBody1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetConfigurationsResponseBody1' from JSON`,
  );
}

/** @internal */
export const GetConfigurationsResponseBody$inboundSchema: z.ZodType<
  GetConfigurationsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.array(z.lazy(() => GetConfigurationsResponseBody1$inboundSchema)),
  z.array(z.lazy(() => GetConfigurationsResponseBody2$inboundSchema)),
]);

/** @internal */
export type GetConfigurationsResponseBody$Outbound =
  | Array<GetConfigurationsResponseBody1$Outbound>
  | Array<GetConfigurationsResponseBody2$Outbound>;

/** @internal */
export const GetConfigurationsResponseBody$outboundSchema: z.ZodType<
  GetConfigurationsResponseBody$Outbound,
  z.ZodTypeDef,
  GetConfigurationsResponseBody
> = z.union([
  z.array(z.lazy(() => GetConfigurationsResponseBody1$outboundSchema)),
  z.array(z.lazy(() => GetConfigurationsResponseBody2$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationsResponseBody$ {
  /** @deprecated use `GetConfigurationsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetConfigurationsResponseBody$inboundSchema;
  /** @deprecated use `GetConfigurationsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetConfigurationsResponseBody$outboundSchema;
  /** @deprecated use `GetConfigurationsResponseBody$Outbound` instead. */
  export type Outbound = GetConfigurationsResponseBody$Outbound;
}

export function getConfigurationsResponseBodyToJSON(
  getConfigurationsResponseBody: GetConfigurationsResponseBody,
): string {
  return JSON.stringify(
    GetConfigurationsResponseBody$outboundSchema.parse(
      getConfigurationsResponseBody,
    ),
  );
}

export function getConfigurationsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetConfigurationsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetConfigurationsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetConfigurationsResponseBody' from JSON`,
  );
}
