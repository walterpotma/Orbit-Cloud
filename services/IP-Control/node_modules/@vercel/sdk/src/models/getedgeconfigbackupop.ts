/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  EdgeConfigItemValue,
  EdgeConfigItemValue$inboundSchema,
  EdgeConfigItemValue$Outbound,
  EdgeConfigItemValue$outboundSchema,
} from "./edgeconfigitemvalue.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetEdgeConfigBackupRequest = {
  edgeConfigId: string;
  edgeConfigBackupVersionId: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
};

export type ResponseBodyUser = {
  id: string;
  username: string;
  email: string;
  name?: string | undefined;
  avatar?: string | undefined;
};

export type GetEdgeConfigBackupResponseBodyItems = {
  updatedAt: number;
  value: EdgeConfigItemValue | null;
  description?: string | undefined;
  createdAt: number;
};

export type ResponseBodyBackup = {
  digest: string;
  items: { [k: string]: GetEdgeConfigBackupResponseBodyItems };
  /**
   * Name for the Edge Config Names are not unique. Must start with an alphabetic character and can contain only alphanumeric characters and underscores).
   */
  slug: string;
  updatedAt: number;
};

export type ResponseBodyMetadata = {
  updatedAt?: string | undefined;
  updatedBy?: string | undefined;
  itemsCount?: number | undefined;
  itemsBytes?: number | undefined;
};

export type GetEdgeConfigBackupResponseBody2 = {
  user: ResponseBodyUser;
  id: string;
  lastModified: number;
  backup: ResponseBodyBackup;
  metadata: ResponseBodyMetadata;
};

export type ResponseBodyItems = {
  updatedAt: number;
  value: EdgeConfigItemValue | null;
  description?: string | undefined;
  createdAt: number;
};

export type Backup = {
  digest: string;
  items: { [k: string]: ResponseBodyItems };
  /**
   * Name for the Edge Config Names are not unique. Must start with an alphabetic character and can contain only alphanumeric characters and underscores).
   */
  slug: string;
  updatedAt: number;
};

export type GetEdgeConfigBackupResponseBodyMetadata = {
  updatedAt?: string | undefined;
  updatedBy?: string | undefined;
  itemsCount?: number | undefined;
  itemsBytes?: number | undefined;
};

export type GetEdgeConfigBackupResponseBodyUser = {
  id: string;
  username: string;
  email: string;
  name?: string | undefined;
  avatar?: string | undefined;
};

/**
 * The object the API responds with when requesting an Edge Config backup
 */
export type GetEdgeConfigBackupResponseBody1 = {
  id: string;
  lastModified: number;
  backup: Backup;
  metadata: GetEdgeConfigBackupResponseBodyMetadata;
  user?: GetEdgeConfigBackupResponseBodyUser | undefined;
};

export type GetEdgeConfigBackupResponseBody =
  | GetEdgeConfigBackupResponseBody2
  | GetEdgeConfigBackupResponseBody1;

/** @internal */
export const GetEdgeConfigBackupRequest$inboundSchema: z.ZodType<
  GetEdgeConfigBackupRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  edgeConfigId: z.string(),
  edgeConfigBackupVersionId: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/** @internal */
export type GetEdgeConfigBackupRequest$Outbound = {
  edgeConfigId: string;
  edgeConfigBackupVersionId: string;
  teamId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const GetEdgeConfigBackupRequest$outboundSchema: z.ZodType<
  GetEdgeConfigBackupRequest$Outbound,
  z.ZodTypeDef,
  GetEdgeConfigBackupRequest
> = z.object({
  edgeConfigId: z.string(),
  edgeConfigBackupVersionId: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEdgeConfigBackupRequest$ {
  /** @deprecated use `GetEdgeConfigBackupRequest$inboundSchema` instead. */
  export const inboundSchema = GetEdgeConfigBackupRequest$inboundSchema;
  /** @deprecated use `GetEdgeConfigBackupRequest$outboundSchema` instead. */
  export const outboundSchema = GetEdgeConfigBackupRequest$outboundSchema;
  /** @deprecated use `GetEdgeConfigBackupRequest$Outbound` instead. */
  export type Outbound = GetEdgeConfigBackupRequest$Outbound;
}

export function getEdgeConfigBackupRequestToJSON(
  getEdgeConfigBackupRequest: GetEdgeConfigBackupRequest,
): string {
  return JSON.stringify(
    GetEdgeConfigBackupRequest$outboundSchema.parse(getEdgeConfigBackupRequest),
  );
}

export function getEdgeConfigBackupRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetEdgeConfigBackupRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEdgeConfigBackupRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEdgeConfigBackupRequest' from JSON`,
  );
}

/** @internal */
export const ResponseBodyUser$inboundSchema: z.ZodType<
  ResponseBodyUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  username: z.string(),
  email: z.string(),
  name: z.string().optional(),
  avatar: z.string().optional(),
});

/** @internal */
export type ResponseBodyUser$Outbound = {
  id: string;
  username: string;
  email: string;
  name?: string | undefined;
  avatar?: string | undefined;
};

/** @internal */
export const ResponseBodyUser$outboundSchema: z.ZodType<
  ResponseBodyUser$Outbound,
  z.ZodTypeDef,
  ResponseBodyUser
> = z.object({
  id: z.string(),
  username: z.string(),
  email: z.string(),
  name: z.string().optional(),
  avatar: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyUser$ {
  /** @deprecated use `ResponseBodyUser$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyUser$inboundSchema;
  /** @deprecated use `ResponseBodyUser$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyUser$outboundSchema;
  /** @deprecated use `ResponseBodyUser$Outbound` instead. */
  export type Outbound = ResponseBodyUser$Outbound;
}

export function responseBodyUserToJSON(
  responseBodyUser: ResponseBodyUser,
): string {
  return JSON.stringify(
    ResponseBodyUser$outboundSchema.parse(responseBodyUser),
  );
}

export function responseBodyUserFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyUser' from JSON`,
  );
}

/** @internal */
export const GetEdgeConfigBackupResponseBodyItems$inboundSchema: z.ZodType<
  GetEdgeConfigBackupResponseBodyItems,
  z.ZodTypeDef,
  unknown
> = z.object({
  updatedAt: z.number(),
  value: z.nullable(EdgeConfigItemValue$inboundSchema),
  description: z.string().optional(),
  createdAt: z.number(),
});

/** @internal */
export type GetEdgeConfigBackupResponseBodyItems$Outbound = {
  updatedAt: number;
  value: EdgeConfigItemValue$Outbound | null;
  description?: string | undefined;
  createdAt: number;
};

/** @internal */
export const GetEdgeConfigBackupResponseBodyItems$outboundSchema: z.ZodType<
  GetEdgeConfigBackupResponseBodyItems$Outbound,
  z.ZodTypeDef,
  GetEdgeConfigBackupResponseBodyItems
> = z.object({
  updatedAt: z.number(),
  value: z.nullable(EdgeConfigItemValue$outboundSchema),
  description: z.string().optional(),
  createdAt: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEdgeConfigBackupResponseBodyItems$ {
  /** @deprecated use `GetEdgeConfigBackupResponseBodyItems$inboundSchema` instead. */
  export const inboundSchema =
    GetEdgeConfigBackupResponseBodyItems$inboundSchema;
  /** @deprecated use `GetEdgeConfigBackupResponseBodyItems$outboundSchema` instead. */
  export const outboundSchema =
    GetEdgeConfigBackupResponseBodyItems$outboundSchema;
  /** @deprecated use `GetEdgeConfigBackupResponseBodyItems$Outbound` instead. */
  export type Outbound = GetEdgeConfigBackupResponseBodyItems$Outbound;
}

export function getEdgeConfigBackupResponseBodyItemsToJSON(
  getEdgeConfigBackupResponseBodyItems: GetEdgeConfigBackupResponseBodyItems,
): string {
  return JSON.stringify(
    GetEdgeConfigBackupResponseBodyItems$outboundSchema.parse(
      getEdgeConfigBackupResponseBodyItems,
    ),
  );
}

export function getEdgeConfigBackupResponseBodyItemsFromJSON(
  jsonString: string,
): SafeParseResult<GetEdgeConfigBackupResponseBodyItems, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetEdgeConfigBackupResponseBodyItems$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEdgeConfigBackupResponseBodyItems' from JSON`,
  );
}

/** @internal */
export const ResponseBodyBackup$inboundSchema: z.ZodType<
  ResponseBodyBackup,
  z.ZodTypeDef,
  unknown
> = z.object({
  digest: z.string(),
  items: z.record(
    z.lazy(() => GetEdgeConfigBackupResponseBodyItems$inboundSchema),
  ),
  slug: z.string(),
  updatedAt: z.number(),
});

/** @internal */
export type ResponseBodyBackup$Outbound = {
  digest: string;
  items: { [k: string]: GetEdgeConfigBackupResponseBodyItems$Outbound };
  slug: string;
  updatedAt: number;
};

/** @internal */
export const ResponseBodyBackup$outboundSchema: z.ZodType<
  ResponseBodyBackup$Outbound,
  z.ZodTypeDef,
  ResponseBodyBackup
> = z.object({
  digest: z.string(),
  items: z.record(
    z.lazy(() => GetEdgeConfigBackupResponseBodyItems$outboundSchema),
  ),
  slug: z.string(),
  updatedAt: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyBackup$ {
  /** @deprecated use `ResponseBodyBackup$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyBackup$inboundSchema;
  /** @deprecated use `ResponseBodyBackup$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyBackup$outboundSchema;
  /** @deprecated use `ResponseBodyBackup$Outbound` instead. */
  export type Outbound = ResponseBodyBackup$Outbound;
}

export function responseBodyBackupToJSON(
  responseBodyBackup: ResponseBodyBackup,
): string {
  return JSON.stringify(
    ResponseBodyBackup$outboundSchema.parse(responseBodyBackup),
  );
}

export function responseBodyBackupFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyBackup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyBackup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyBackup' from JSON`,
  );
}

/** @internal */
export const ResponseBodyMetadata$inboundSchema: z.ZodType<
  ResponseBodyMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  updatedAt: z.string().optional(),
  updatedBy: z.string().optional(),
  itemsCount: z.number().optional(),
  itemsBytes: z.number().optional(),
});

/** @internal */
export type ResponseBodyMetadata$Outbound = {
  updatedAt?: string | undefined;
  updatedBy?: string | undefined;
  itemsCount?: number | undefined;
  itemsBytes?: number | undefined;
};

/** @internal */
export const ResponseBodyMetadata$outboundSchema: z.ZodType<
  ResponseBodyMetadata$Outbound,
  z.ZodTypeDef,
  ResponseBodyMetadata
> = z.object({
  updatedAt: z.string().optional(),
  updatedBy: z.string().optional(),
  itemsCount: z.number().optional(),
  itemsBytes: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyMetadata$ {
  /** @deprecated use `ResponseBodyMetadata$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyMetadata$inboundSchema;
  /** @deprecated use `ResponseBodyMetadata$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyMetadata$outboundSchema;
  /** @deprecated use `ResponseBodyMetadata$Outbound` instead. */
  export type Outbound = ResponseBodyMetadata$Outbound;
}

export function responseBodyMetadataToJSON(
  responseBodyMetadata: ResponseBodyMetadata,
): string {
  return JSON.stringify(
    ResponseBodyMetadata$outboundSchema.parse(responseBodyMetadata),
  );
}

export function responseBodyMetadataFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyMetadata' from JSON`,
  );
}

/** @internal */
export const GetEdgeConfigBackupResponseBody2$inboundSchema: z.ZodType<
  GetEdgeConfigBackupResponseBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  user: z.lazy(() => ResponseBodyUser$inboundSchema),
  id: z.string(),
  lastModified: z.number(),
  backup: z.lazy(() => ResponseBodyBackup$inboundSchema),
  metadata: z.lazy(() => ResponseBodyMetadata$inboundSchema),
});

/** @internal */
export type GetEdgeConfigBackupResponseBody2$Outbound = {
  user: ResponseBodyUser$Outbound;
  id: string;
  lastModified: number;
  backup: ResponseBodyBackup$Outbound;
  metadata: ResponseBodyMetadata$Outbound;
};

/** @internal */
export const GetEdgeConfigBackupResponseBody2$outboundSchema: z.ZodType<
  GetEdgeConfigBackupResponseBody2$Outbound,
  z.ZodTypeDef,
  GetEdgeConfigBackupResponseBody2
> = z.object({
  user: z.lazy(() => ResponseBodyUser$outboundSchema),
  id: z.string(),
  lastModified: z.number(),
  backup: z.lazy(() => ResponseBodyBackup$outboundSchema),
  metadata: z.lazy(() => ResponseBodyMetadata$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEdgeConfigBackupResponseBody2$ {
  /** @deprecated use `GetEdgeConfigBackupResponseBody2$inboundSchema` instead. */
  export const inboundSchema = GetEdgeConfigBackupResponseBody2$inboundSchema;
  /** @deprecated use `GetEdgeConfigBackupResponseBody2$outboundSchema` instead. */
  export const outboundSchema = GetEdgeConfigBackupResponseBody2$outboundSchema;
  /** @deprecated use `GetEdgeConfigBackupResponseBody2$Outbound` instead. */
  export type Outbound = GetEdgeConfigBackupResponseBody2$Outbound;
}

export function getEdgeConfigBackupResponseBody2ToJSON(
  getEdgeConfigBackupResponseBody2: GetEdgeConfigBackupResponseBody2,
): string {
  return JSON.stringify(
    GetEdgeConfigBackupResponseBody2$outboundSchema.parse(
      getEdgeConfigBackupResponseBody2,
    ),
  );
}

export function getEdgeConfigBackupResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<GetEdgeConfigBackupResponseBody2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEdgeConfigBackupResponseBody2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEdgeConfigBackupResponseBody2' from JSON`,
  );
}

/** @internal */
export const ResponseBodyItems$inboundSchema: z.ZodType<
  ResponseBodyItems,
  z.ZodTypeDef,
  unknown
> = z.object({
  updatedAt: z.number(),
  value: z.nullable(EdgeConfigItemValue$inboundSchema),
  description: z.string().optional(),
  createdAt: z.number(),
});

/** @internal */
export type ResponseBodyItems$Outbound = {
  updatedAt: number;
  value: EdgeConfigItemValue$Outbound | null;
  description?: string | undefined;
  createdAt: number;
};

/** @internal */
export const ResponseBodyItems$outboundSchema: z.ZodType<
  ResponseBodyItems$Outbound,
  z.ZodTypeDef,
  ResponseBodyItems
> = z.object({
  updatedAt: z.number(),
  value: z.nullable(EdgeConfigItemValue$outboundSchema),
  description: z.string().optional(),
  createdAt: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyItems$ {
  /** @deprecated use `ResponseBodyItems$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyItems$inboundSchema;
  /** @deprecated use `ResponseBodyItems$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyItems$outboundSchema;
  /** @deprecated use `ResponseBodyItems$Outbound` instead. */
  export type Outbound = ResponseBodyItems$Outbound;
}

export function responseBodyItemsToJSON(
  responseBodyItems: ResponseBodyItems,
): string {
  return JSON.stringify(
    ResponseBodyItems$outboundSchema.parse(responseBodyItems),
  );
}

export function responseBodyItemsFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyItems, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyItems$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyItems' from JSON`,
  );
}

/** @internal */
export const Backup$inboundSchema: z.ZodType<Backup, z.ZodTypeDef, unknown> = z
  .object({
    digest: z.string(),
    items: z.record(z.lazy(() => ResponseBodyItems$inboundSchema)),
    slug: z.string(),
    updatedAt: z.number(),
  });

/** @internal */
export type Backup$Outbound = {
  digest: string;
  items: { [k: string]: ResponseBodyItems$Outbound };
  slug: string;
  updatedAt: number;
};

/** @internal */
export const Backup$outboundSchema: z.ZodType<
  Backup$Outbound,
  z.ZodTypeDef,
  Backup
> = z.object({
  digest: z.string(),
  items: z.record(z.lazy(() => ResponseBodyItems$outboundSchema)),
  slug: z.string(),
  updatedAt: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Backup$ {
  /** @deprecated use `Backup$inboundSchema` instead. */
  export const inboundSchema = Backup$inboundSchema;
  /** @deprecated use `Backup$outboundSchema` instead. */
  export const outboundSchema = Backup$outboundSchema;
  /** @deprecated use `Backup$Outbound` instead. */
  export type Outbound = Backup$Outbound;
}

export function backupToJSON(backup: Backup): string {
  return JSON.stringify(Backup$outboundSchema.parse(backup));
}

export function backupFromJSON(
  jsonString: string,
): SafeParseResult<Backup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Backup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Backup' from JSON`,
  );
}

/** @internal */
export const GetEdgeConfigBackupResponseBodyMetadata$inboundSchema: z.ZodType<
  GetEdgeConfigBackupResponseBodyMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  updatedAt: z.string().optional(),
  updatedBy: z.string().optional(),
  itemsCount: z.number().optional(),
  itemsBytes: z.number().optional(),
});

/** @internal */
export type GetEdgeConfigBackupResponseBodyMetadata$Outbound = {
  updatedAt?: string | undefined;
  updatedBy?: string | undefined;
  itemsCount?: number | undefined;
  itemsBytes?: number | undefined;
};

/** @internal */
export const GetEdgeConfigBackupResponseBodyMetadata$outboundSchema: z.ZodType<
  GetEdgeConfigBackupResponseBodyMetadata$Outbound,
  z.ZodTypeDef,
  GetEdgeConfigBackupResponseBodyMetadata
> = z.object({
  updatedAt: z.string().optional(),
  updatedBy: z.string().optional(),
  itemsCount: z.number().optional(),
  itemsBytes: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEdgeConfigBackupResponseBodyMetadata$ {
  /** @deprecated use `GetEdgeConfigBackupResponseBodyMetadata$inboundSchema` instead. */
  export const inboundSchema =
    GetEdgeConfigBackupResponseBodyMetadata$inboundSchema;
  /** @deprecated use `GetEdgeConfigBackupResponseBodyMetadata$outboundSchema` instead. */
  export const outboundSchema =
    GetEdgeConfigBackupResponseBodyMetadata$outboundSchema;
  /** @deprecated use `GetEdgeConfigBackupResponseBodyMetadata$Outbound` instead. */
  export type Outbound = GetEdgeConfigBackupResponseBodyMetadata$Outbound;
}

export function getEdgeConfigBackupResponseBodyMetadataToJSON(
  getEdgeConfigBackupResponseBodyMetadata:
    GetEdgeConfigBackupResponseBodyMetadata,
): string {
  return JSON.stringify(
    GetEdgeConfigBackupResponseBodyMetadata$outboundSchema.parse(
      getEdgeConfigBackupResponseBodyMetadata,
    ),
  );
}

export function getEdgeConfigBackupResponseBodyMetadataFromJSON(
  jsonString: string,
): SafeParseResult<
  GetEdgeConfigBackupResponseBodyMetadata,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetEdgeConfigBackupResponseBodyMetadata$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetEdgeConfigBackupResponseBodyMetadata' from JSON`,
  );
}

/** @internal */
export const GetEdgeConfigBackupResponseBodyUser$inboundSchema: z.ZodType<
  GetEdgeConfigBackupResponseBodyUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  username: z.string(),
  email: z.string(),
  name: z.string().optional(),
  avatar: z.string().optional(),
});

/** @internal */
export type GetEdgeConfigBackupResponseBodyUser$Outbound = {
  id: string;
  username: string;
  email: string;
  name?: string | undefined;
  avatar?: string | undefined;
};

/** @internal */
export const GetEdgeConfigBackupResponseBodyUser$outboundSchema: z.ZodType<
  GetEdgeConfigBackupResponseBodyUser$Outbound,
  z.ZodTypeDef,
  GetEdgeConfigBackupResponseBodyUser
> = z.object({
  id: z.string(),
  username: z.string(),
  email: z.string(),
  name: z.string().optional(),
  avatar: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEdgeConfigBackupResponseBodyUser$ {
  /** @deprecated use `GetEdgeConfigBackupResponseBodyUser$inboundSchema` instead. */
  export const inboundSchema =
    GetEdgeConfigBackupResponseBodyUser$inboundSchema;
  /** @deprecated use `GetEdgeConfigBackupResponseBodyUser$outboundSchema` instead. */
  export const outboundSchema =
    GetEdgeConfigBackupResponseBodyUser$outboundSchema;
  /** @deprecated use `GetEdgeConfigBackupResponseBodyUser$Outbound` instead. */
  export type Outbound = GetEdgeConfigBackupResponseBodyUser$Outbound;
}

export function getEdgeConfigBackupResponseBodyUserToJSON(
  getEdgeConfigBackupResponseBodyUser: GetEdgeConfigBackupResponseBodyUser,
): string {
  return JSON.stringify(
    GetEdgeConfigBackupResponseBodyUser$outboundSchema.parse(
      getEdgeConfigBackupResponseBodyUser,
    ),
  );
}

export function getEdgeConfigBackupResponseBodyUserFromJSON(
  jsonString: string,
): SafeParseResult<GetEdgeConfigBackupResponseBodyUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetEdgeConfigBackupResponseBodyUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEdgeConfigBackupResponseBodyUser' from JSON`,
  );
}

/** @internal */
export const GetEdgeConfigBackupResponseBody1$inboundSchema: z.ZodType<
  GetEdgeConfigBackupResponseBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  lastModified: z.number(),
  backup: z.lazy(() => Backup$inboundSchema),
  metadata: z.lazy(() => GetEdgeConfigBackupResponseBodyMetadata$inboundSchema),
  user: z.lazy(() => GetEdgeConfigBackupResponseBodyUser$inboundSchema)
    .optional(),
});

/** @internal */
export type GetEdgeConfigBackupResponseBody1$Outbound = {
  id: string;
  lastModified: number;
  backup: Backup$Outbound;
  metadata: GetEdgeConfigBackupResponseBodyMetadata$Outbound;
  user?: GetEdgeConfigBackupResponseBodyUser$Outbound | undefined;
};

/** @internal */
export const GetEdgeConfigBackupResponseBody1$outboundSchema: z.ZodType<
  GetEdgeConfigBackupResponseBody1$Outbound,
  z.ZodTypeDef,
  GetEdgeConfigBackupResponseBody1
> = z.object({
  id: z.string(),
  lastModified: z.number(),
  backup: z.lazy(() => Backup$outboundSchema),
  metadata: z.lazy(() =>
    GetEdgeConfigBackupResponseBodyMetadata$outboundSchema
  ),
  user: z.lazy(() => GetEdgeConfigBackupResponseBodyUser$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEdgeConfigBackupResponseBody1$ {
  /** @deprecated use `GetEdgeConfigBackupResponseBody1$inboundSchema` instead. */
  export const inboundSchema = GetEdgeConfigBackupResponseBody1$inboundSchema;
  /** @deprecated use `GetEdgeConfigBackupResponseBody1$outboundSchema` instead. */
  export const outboundSchema = GetEdgeConfigBackupResponseBody1$outboundSchema;
  /** @deprecated use `GetEdgeConfigBackupResponseBody1$Outbound` instead. */
  export type Outbound = GetEdgeConfigBackupResponseBody1$Outbound;
}

export function getEdgeConfigBackupResponseBody1ToJSON(
  getEdgeConfigBackupResponseBody1: GetEdgeConfigBackupResponseBody1,
): string {
  return JSON.stringify(
    GetEdgeConfigBackupResponseBody1$outboundSchema.parse(
      getEdgeConfigBackupResponseBody1,
    ),
  );
}

export function getEdgeConfigBackupResponseBody1FromJSON(
  jsonString: string,
): SafeParseResult<GetEdgeConfigBackupResponseBody1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEdgeConfigBackupResponseBody1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEdgeConfigBackupResponseBody1' from JSON`,
  );
}

/** @internal */
export const GetEdgeConfigBackupResponseBody$inboundSchema: z.ZodType<
  GetEdgeConfigBackupResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetEdgeConfigBackupResponseBody2$inboundSchema),
  z.lazy(() => GetEdgeConfigBackupResponseBody1$inboundSchema),
]);

/** @internal */
export type GetEdgeConfigBackupResponseBody$Outbound =
  | GetEdgeConfigBackupResponseBody2$Outbound
  | GetEdgeConfigBackupResponseBody1$Outbound;

/** @internal */
export const GetEdgeConfigBackupResponseBody$outboundSchema: z.ZodType<
  GetEdgeConfigBackupResponseBody$Outbound,
  z.ZodTypeDef,
  GetEdgeConfigBackupResponseBody
> = z.union([
  z.lazy(() => GetEdgeConfigBackupResponseBody2$outboundSchema),
  z.lazy(() => GetEdgeConfigBackupResponseBody1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEdgeConfigBackupResponseBody$ {
  /** @deprecated use `GetEdgeConfigBackupResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetEdgeConfigBackupResponseBody$inboundSchema;
  /** @deprecated use `GetEdgeConfigBackupResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetEdgeConfigBackupResponseBody$outboundSchema;
  /** @deprecated use `GetEdgeConfigBackupResponseBody$Outbound` instead. */
  export type Outbound = GetEdgeConfigBackupResponseBody$Outbound;
}

export function getEdgeConfigBackupResponseBodyToJSON(
  getEdgeConfigBackupResponseBody: GetEdgeConfigBackupResponseBody,
): string {
  return JSON.stringify(
    GetEdgeConfigBackupResponseBody$outboundSchema.parse(
      getEdgeConfigBackupResponseBody,
    ),
  );
}

export function getEdgeConfigBackupResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetEdgeConfigBackupResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEdgeConfigBackupResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEdgeConfigBackupResponseBody' from JSON`,
  );
}
