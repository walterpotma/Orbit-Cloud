/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetMemberRequest = {
  integrationConfigurationId: string;
  memberId: string;
};

/**
 * "The `ADMIN` role, by default, is provided to users capable of installing integrations, while the `USER` role can be granted to Vercel users with the Vercel `Billing` or Vercel `Viewer` role, which are considered to be Read-Only roles."
 */
export const GetMemberRole = {
  Admin: "ADMIN",
  User: "USER",
} as const;
/**
 * "The `ADMIN` role, by default, is provided to users capable of installing integrations, while the `USER` role can be granted to Vercel users with the Vercel `Billing` or Vercel `Viewer` role, which are considered to be Read-Only roles."
 */
export type GetMemberRole = ClosedEnum<typeof GetMemberRole>;

export type GetMemberResponseBody = {
  id: string;
  /**
   * "The `ADMIN` role, by default, is provided to users capable of installing integrations, while the `USER` role can be granted to Vercel users with the Vercel `Billing` or Vercel `Viewer` role, which are considered to be Read-Only roles."
   */
  role: GetMemberRole;
};

/** @internal */
export const GetMemberRequest$inboundSchema: z.ZodType<
  GetMemberRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  integrationConfigurationId: z.string(),
  memberId: z.string(),
});

/** @internal */
export type GetMemberRequest$Outbound = {
  integrationConfigurationId: string;
  memberId: string;
};

/** @internal */
export const GetMemberRequest$outboundSchema: z.ZodType<
  GetMemberRequest$Outbound,
  z.ZodTypeDef,
  GetMemberRequest
> = z.object({
  integrationConfigurationId: z.string(),
  memberId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMemberRequest$ {
  /** @deprecated use `GetMemberRequest$inboundSchema` instead. */
  export const inboundSchema = GetMemberRequest$inboundSchema;
  /** @deprecated use `GetMemberRequest$outboundSchema` instead. */
  export const outboundSchema = GetMemberRequest$outboundSchema;
  /** @deprecated use `GetMemberRequest$Outbound` instead. */
  export type Outbound = GetMemberRequest$Outbound;
}

export function getMemberRequestToJSON(
  getMemberRequest: GetMemberRequest,
): string {
  return JSON.stringify(
    GetMemberRequest$outboundSchema.parse(getMemberRequest),
  );
}

export function getMemberRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetMemberRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMemberRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMemberRequest' from JSON`,
  );
}

/** @internal */
export const GetMemberRole$inboundSchema: z.ZodNativeEnum<
  typeof GetMemberRole
> = z.nativeEnum(GetMemberRole);

/** @internal */
export const GetMemberRole$outboundSchema: z.ZodNativeEnum<
  typeof GetMemberRole
> = GetMemberRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMemberRole$ {
  /** @deprecated use `GetMemberRole$inboundSchema` instead. */
  export const inboundSchema = GetMemberRole$inboundSchema;
  /** @deprecated use `GetMemberRole$outboundSchema` instead. */
  export const outboundSchema = GetMemberRole$outboundSchema;
}

/** @internal */
export const GetMemberResponseBody$inboundSchema: z.ZodType<
  GetMemberResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  role: GetMemberRole$inboundSchema,
});

/** @internal */
export type GetMemberResponseBody$Outbound = {
  id: string;
  role: string;
};

/** @internal */
export const GetMemberResponseBody$outboundSchema: z.ZodType<
  GetMemberResponseBody$Outbound,
  z.ZodTypeDef,
  GetMemberResponseBody
> = z.object({
  id: z.string(),
  role: GetMemberRole$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMemberResponseBody$ {
  /** @deprecated use `GetMemberResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetMemberResponseBody$inboundSchema;
  /** @deprecated use `GetMemberResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetMemberResponseBody$outboundSchema;
  /** @deprecated use `GetMemberResponseBody$Outbound` instead. */
  export type Outbound = GetMemberResponseBody$Outbound;
}

export function getMemberResponseBodyToJSON(
  getMemberResponseBody: GetMemberResponseBody,
): string {
  return JSON.stringify(
    GetMemberResponseBody$outboundSchema.parse(getMemberResponseBody),
  );
}

export function getMemberResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetMemberResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMemberResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMemberResponseBody' from JSON`,
  );
}
