/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetConfigurationRequest = {
  /**
   * ID of the configuration to check
   */
  id: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
};

/**
 * A string representing the permission for projects. Possible values are `all` or `selected`.
 */
export const ProjectSelection = {
  Selected: "selected",
  All: "all",
} as const;
/**
 * A string representing the permission for projects. Possible values are `all` or `selected`.
 */
export type ProjectSelection = ClosedEnum<typeof ProjectSelection>;

export const GetConfigurationResponseBodyLevel = {
  Info: "info",
  Warn: "warn",
  Error: "error",
} as const;
export type GetConfigurationResponseBodyLevel = ClosedEnum<
  typeof GetConfigurationResponseBodyLevel
>;

export type ResponseBodyNotification = {
  level: GetConfigurationResponseBodyLevel;
  title: string;
  message?: string | undefined;
  href?: string | undefined;
};

export const TransferRequestKind = {
  TransferFromMarketplace: "transfer-from-marketplace",
} as const;
export type TransferRequestKind = ClosedEnum<typeof TransferRequestKind>;

export type TransferRequestRequester = {
  name: string;
  email?: string | undefined;
};

export type TransferRequest2 = {
  kind: TransferRequestKind;
  requestId: string;
  transferId: string;
  requester: TransferRequestRequester;
  createdAt: number;
  expiresAt: number;
  discardedAt?: number | undefined;
  discardedBy?: string | undefined;
  approvedAt?: number | undefined;
  approvedBy?: string | undefined;
  authorizationId?: string | undefined;
};

export const Kind = {
  TransferToMarketplace: "transfer-to-marketplace",
} as const;
export type Kind = ClosedEnum<typeof Kind>;

export const TransferRequestType = {
  Subscription: "subscription",
  Prepayment: "prepayment",
} as const;
export type TransferRequestType = ClosedEnum<typeof TransferRequestType>;

export const TransferRequestScope = {
  Installation: "installation",
  Resource: "resource",
} as const;
export type TransferRequestScope = ClosedEnum<typeof TransferRequestScope>;

export type TransferRequestBillingPlan = {
  id: string;
  type: TransferRequestType;
  scope?: TransferRequestScope | undefined;
  name: string;
  description: string;
  paymentMethodRequired?: boolean | undefined;
  preauthorizationAmount?: number | undefined;
};

export type Requester = {
  name: string;
  email?: string | undefined;
};

export type TransferRequest1 = {
  kind: Kind;
  metadata?: { [k: string]: any } | undefined;
  billingPlan?: TransferRequestBillingPlan | undefined;
  requestId: string;
  transferId: string;
  requester: Requester;
  createdAt: number;
  expiresAt: number;
  discardedAt?: number | undefined;
  discardedBy?: string | undefined;
  approvedAt?: number | undefined;
  approvedBy?: string | undefined;
  authorizationId?: string | undefined;
};

export type TransferRequest = TransferRequest1 | TransferRequest2;

/**
 * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
 */
export const GetConfigurationResponseBodyIntegrationsSource = {
  Marketplace: "marketplace",
  DeployButton: "deploy-button",
  External: "external",
  V0: "v0",
  ResourceClaims: "resource-claims",
} as const;
/**
 * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
 */
export type GetConfigurationResponseBodyIntegrationsSource = ClosedEnum<
  typeof GetConfigurationResponseBodyIntegrationsSource
>;

export const GetConfigurationResponseBodyIntegrationsType = {
  IntegrationConfiguration: "integration-configuration",
} as const;
export type GetConfigurationResponseBodyIntegrationsType = ClosedEnum<
  typeof GetConfigurationResponseBodyIntegrationsType
>;

export const GetConfigurationResponseBodyIntegrationsDisabledReason = {
  DisabledByOwner: "disabled-by-owner",
  FeatureNotAvailable: "feature-not-available",
  DisabledByAdmin: "disabled-by-admin",
  OriginalOwnerLeftTheTeam: "original-owner-left-the-team",
  AccountPlanDowngrade: "account-plan-downgrade",
  OriginalOwnerRoleDowngraded: "original-owner-role-downgraded",
} as const;
export type GetConfigurationResponseBodyIntegrationsDisabledReason = ClosedEnum<
  typeof GetConfigurationResponseBodyIntegrationsDisabledReason
>;

/**
 * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
 */
export const GetConfigurationResponseBodyIntegrationsInstallationType = {
  Marketplace: "marketplace",
  External: "external",
} as const;
/**
 * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
 */
export type GetConfigurationResponseBodyIntegrationsInstallationType =
  ClosedEnum<typeof GetConfigurationResponseBodyIntegrationsInstallationType>;

export type GetConfigurationResponseBody2 = {
  /**
   * A string representing the permission for projects. Possible values are `all` or `selected`.
   */
  projectSelection: ProjectSelection;
  notification: ResponseBodyNotification;
  transferRequest: TransferRequest1 | TransferRequest2;
  /**
   * When a configuration is limited to access certain projects, this will contain each of the project ID it is allowed to access. If it is not defined, the configuration has full access.
   */
  projects?: Array<string> | undefined;
  /**
   * A timestamp that tells you when the configuration was installed successfully
   */
  completedAt?: number | undefined;
  /**
   * A timestamp that tells you when the configuration was created
   */
  createdAt: number;
  /**
   * The unique identifier of the configuration
   */
  id: string;
  /**
   * The unique identifier of the app the configuration was created for
   */
  integrationId: string;
  /**
   * The user or team ID that owns the configuration
   */
  ownerId: string;
  /**
   * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
   */
  source?: GetConfigurationResponseBodyIntegrationsSource | undefined;
  /**
   * The slug of the integration the configuration is created for.
   */
  slug: string;
  /**
   * When the configuration was created for a team, this will show the ID of the team.
   */
  teamId?: string | null | undefined;
  type: GetConfigurationResponseBodyIntegrationsType;
  /**
   * A timestamp that tells you when the configuration was updated.
   */
  updatedAt: number;
  /**
   * The ID of the user that created the configuration.
   */
  userId: string;
  /**
   * The resources that are allowed to be accessed by the configuration.
   */
  scopes: Array<string>;
  /**
   * A timestamp that tells you when the configuration was disabled. Note: Configurations can be disabled when the associated user loses access to a team. They do not function during this time until the configuration is 'transferred', meaning the associated user is changed to one with access to the team.
   */
  disabledAt?: number | undefined;
  /**
   * A timestamp that tells you when the configuration was deleted.
   */
  deletedAt?: number | null | undefined;
  /**
   * A timestamp that tells you when the configuration deletion has been started for cases when the deletion needs to be settled/approved by partners, such as when marketplace invoices have been paid.
   */
  deleteRequestedAt?: number | null | undefined;
  disabledReason?:
    | GetConfigurationResponseBodyIntegrationsDisabledReason
    | undefined;
  /**
   * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
   */
  installationType?:
    | GetConfigurationResponseBodyIntegrationsInstallationType
    | undefined;
  canConfigureOpenTelemetry?: boolean | undefined;
};

/**
 * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
 */
export const GetConfigurationResponseBodySource = {
  Marketplace: "marketplace",
  DeployButton: "deploy-button",
  External: "external",
  V0: "v0",
  ResourceClaims: "resource-claims",
} as const;
/**
 * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
 */
export type GetConfigurationResponseBodySource = ClosedEnum<
  typeof GetConfigurationResponseBodySource
>;

export const GetConfigurationResponseBodyType = {
  IntegrationConfiguration: "integration-configuration",
} as const;
export type GetConfigurationResponseBodyType = ClosedEnum<
  typeof GetConfigurationResponseBodyType
>;

export const GetConfigurationResponseBodyDisabledReason = {
  DisabledByOwner: "disabled-by-owner",
  FeatureNotAvailable: "feature-not-available",
  DisabledByAdmin: "disabled-by-admin",
  OriginalOwnerLeftTheTeam: "original-owner-left-the-team",
  AccountPlanDowngrade: "account-plan-downgrade",
  OriginalOwnerRoleDowngraded: "original-owner-role-downgraded",
} as const;
export type GetConfigurationResponseBodyDisabledReason = ClosedEnum<
  typeof GetConfigurationResponseBodyDisabledReason
>;

/**
 * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
 */
export const GetConfigurationResponseBodyInstallationType = {
  Marketplace: "marketplace",
  External: "external",
} as const;
/**
 * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
 */
export type GetConfigurationResponseBodyInstallationType = ClosedEnum<
  typeof GetConfigurationResponseBodyInstallationType
>;

/**
 * The configuration with the provided id
 */
export type GetConfigurationResponseBody1 = {
  /**
   * A timestamp that tells you when the configuration was installed successfully
   */
  completedAt?: number | undefined;
  /**
   * A timestamp that tells you when the configuration was created
   */
  createdAt: number;
  /**
   * The unique identifier of the configuration
   */
  id: string;
  /**
   * The unique identifier of the app the configuration was created for
   */
  integrationId: string;
  /**
   * The user or team ID that owns the configuration
   */
  ownerId: string;
  /**
   * When a configuration is limited to access certain projects, this will contain each of the project ID it is allowed to access. If it is not defined, the configuration has full access.
   */
  projects?: Array<string> | undefined;
  /**
   * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
   */
  source?: GetConfigurationResponseBodySource | undefined;
  /**
   * The slug of the integration the configuration is created for.
   */
  slug: string;
  /**
   * When the configuration was created for a team, this will show the ID of the team.
   */
  teamId?: string | null | undefined;
  type: GetConfigurationResponseBodyType;
  /**
   * A timestamp that tells you when the configuration was updated.
   */
  updatedAt: number;
  /**
   * The ID of the user that created the configuration.
   */
  userId: string;
  /**
   * The resources that are allowed to be accessed by the configuration.
   */
  scopes: Array<string>;
  /**
   * A timestamp that tells you when the configuration was disabled. Note: Configurations can be disabled when the associated user loses access to a team. They do not function during this time until the configuration is 'transferred', meaning the associated user is changed to one with access to the team.
   */
  disabledAt?: number | undefined;
  /**
   * A timestamp that tells you when the configuration was deleted.
   */
  deletedAt?: number | null | undefined;
  /**
   * A timestamp that tells you when the configuration deletion has been started for cases when the deletion needs to be settled/approved by partners, such as when marketplace invoices have been paid.
   */
  deleteRequestedAt?: number | null | undefined;
  disabledReason?: GetConfigurationResponseBodyDisabledReason | undefined;
  /**
   * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
   */
  installationType?: GetConfigurationResponseBodyInstallationType | undefined;
};

/**
 * The configuration with the provided id
 */
export type GetConfigurationResponseBody =
  | GetConfigurationResponseBody2
  | GetConfigurationResponseBody1;

/** @internal */
export const GetConfigurationRequest$inboundSchema: z.ZodType<
  GetConfigurationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/** @internal */
export type GetConfigurationRequest$Outbound = {
  id: string;
  teamId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const GetConfigurationRequest$outboundSchema: z.ZodType<
  GetConfigurationRequest$Outbound,
  z.ZodTypeDef,
  GetConfigurationRequest
> = z.object({
  id: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationRequest$ {
  /** @deprecated use `GetConfigurationRequest$inboundSchema` instead. */
  export const inboundSchema = GetConfigurationRequest$inboundSchema;
  /** @deprecated use `GetConfigurationRequest$outboundSchema` instead. */
  export const outboundSchema = GetConfigurationRequest$outboundSchema;
  /** @deprecated use `GetConfigurationRequest$Outbound` instead. */
  export type Outbound = GetConfigurationRequest$Outbound;
}

export function getConfigurationRequestToJSON(
  getConfigurationRequest: GetConfigurationRequest,
): string {
  return JSON.stringify(
    GetConfigurationRequest$outboundSchema.parse(getConfigurationRequest),
  );
}

export function getConfigurationRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetConfigurationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetConfigurationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetConfigurationRequest' from JSON`,
  );
}

/** @internal */
export const ProjectSelection$inboundSchema: z.ZodNativeEnum<
  typeof ProjectSelection
> = z.nativeEnum(ProjectSelection);

/** @internal */
export const ProjectSelection$outboundSchema: z.ZodNativeEnum<
  typeof ProjectSelection
> = ProjectSelection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectSelection$ {
  /** @deprecated use `ProjectSelection$inboundSchema` instead. */
  export const inboundSchema = ProjectSelection$inboundSchema;
  /** @deprecated use `ProjectSelection$outboundSchema` instead. */
  export const outboundSchema = ProjectSelection$outboundSchema;
}

/** @internal */
export const GetConfigurationResponseBodyLevel$inboundSchema: z.ZodNativeEnum<
  typeof GetConfigurationResponseBodyLevel
> = z.nativeEnum(GetConfigurationResponseBodyLevel);

/** @internal */
export const GetConfigurationResponseBodyLevel$outboundSchema: z.ZodNativeEnum<
  typeof GetConfigurationResponseBodyLevel
> = GetConfigurationResponseBodyLevel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationResponseBodyLevel$ {
  /** @deprecated use `GetConfigurationResponseBodyLevel$inboundSchema` instead. */
  export const inboundSchema = GetConfigurationResponseBodyLevel$inboundSchema;
  /** @deprecated use `GetConfigurationResponseBodyLevel$outboundSchema` instead. */
  export const outboundSchema =
    GetConfigurationResponseBodyLevel$outboundSchema;
}

/** @internal */
export const ResponseBodyNotification$inboundSchema: z.ZodType<
  ResponseBodyNotification,
  z.ZodTypeDef,
  unknown
> = z.object({
  level: GetConfigurationResponseBodyLevel$inboundSchema,
  title: z.string(),
  message: z.string().optional(),
  href: z.string().optional(),
});

/** @internal */
export type ResponseBodyNotification$Outbound = {
  level: string;
  title: string;
  message?: string | undefined;
  href?: string | undefined;
};

/** @internal */
export const ResponseBodyNotification$outboundSchema: z.ZodType<
  ResponseBodyNotification$Outbound,
  z.ZodTypeDef,
  ResponseBodyNotification
> = z.object({
  level: GetConfigurationResponseBodyLevel$outboundSchema,
  title: z.string(),
  message: z.string().optional(),
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyNotification$ {
  /** @deprecated use `ResponseBodyNotification$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyNotification$inboundSchema;
  /** @deprecated use `ResponseBodyNotification$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyNotification$outboundSchema;
  /** @deprecated use `ResponseBodyNotification$Outbound` instead. */
  export type Outbound = ResponseBodyNotification$Outbound;
}

export function responseBodyNotificationToJSON(
  responseBodyNotification: ResponseBodyNotification,
): string {
  return JSON.stringify(
    ResponseBodyNotification$outboundSchema.parse(responseBodyNotification),
  );
}

export function responseBodyNotificationFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyNotification, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyNotification$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyNotification' from JSON`,
  );
}

/** @internal */
export const TransferRequestKind$inboundSchema: z.ZodNativeEnum<
  typeof TransferRequestKind
> = z.nativeEnum(TransferRequestKind);

/** @internal */
export const TransferRequestKind$outboundSchema: z.ZodNativeEnum<
  typeof TransferRequestKind
> = TransferRequestKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferRequestKind$ {
  /** @deprecated use `TransferRequestKind$inboundSchema` instead. */
  export const inboundSchema = TransferRequestKind$inboundSchema;
  /** @deprecated use `TransferRequestKind$outboundSchema` instead. */
  export const outboundSchema = TransferRequestKind$outboundSchema;
}

/** @internal */
export const TransferRequestRequester$inboundSchema: z.ZodType<
  TransferRequestRequester,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  email: z.string().optional(),
});

/** @internal */
export type TransferRequestRequester$Outbound = {
  name: string;
  email?: string | undefined;
};

/** @internal */
export const TransferRequestRequester$outboundSchema: z.ZodType<
  TransferRequestRequester$Outbound,
  z.ZodTypeDef,
  TransferRequestRequester
> = z.object({
  name: z.string(),
  email: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferRequestRequester$ {
  /** @deprecated use `TransferRequestRequester$inboundSchema` instead. */
  export const inboundSchema = TransferRequestRequester$inboundSchema;
  /** @deprecated use `TransferRequestRequester$outboundSchema` instead. */
  export const outboundSchema = TransferRequestRequester$outboundSchema;
  /** @deprecated use `TransferRequestRequester$Outbound` instead. */
  export type Outbound = TransferRequestRequester$Outbound;
}

export function transferRequestRequesterToJSON(
  transferRequestRequester: TransferRequestRequester,
): string {
  return JSON.stringify(
    TransferRequestRequester$outboundSchema.parse(transferRequestRequester),
  );
}

export function transferRequestRequesterFromJSON(
  jsonString: string,
): SafeParseResult<TransferRequestRequester, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransferRequestRequester$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransferRequestRequester' from JSON`,
  );
}

/** @internal */
export const TransferRequest2$inboundSchema: z.ZodType<
  TransferRequest2,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: TransferRequestKind$inboundSchema,
  requestId: z.string(),
  transferId: z.string(),
  requester: z.lazy(() => TransferRequestRequester$inboundSchema),
  createdAt: z.number(),
  expiresAt: z.number(),
  discardedAt: z.number().optional(),
  discardedBy: z.string().optional(),
  approvedAt: z.number().optional(),
  approvedBy: z.string().optional(),
  authorizationId: z.string().optional(),
});

/** @internal */
export type TransferRequest2$Outbound = {
  kind: string;
  requestId: string;
  transferId: string;
  requester: TransferRequestRequester$Outbound;
  createdAt: number;
  expiresAt: number;
  discardedAt?: number | undefined;
  discardedBy?: string | undefined;
  approvedAt?: number | undefined;
  approvedBy?: string | undefined;
  authorizationId?: string | undefined;
};

/** @internal */
export const TransferRequest2$outboundSchema: z.ZodType<
  TransferRequest2$Outbound,
  z.ZodTypeDef,
  TransferRequest2
> = z.object({
  kind: TransferRequestKind$outboundSchema,
  requestId: z.string(),
  transferId: z.string(),
  requester: z.lazy(() => TransferRequestRequester$outboundSchema),
  createdAt: z.number(),
  expiresAt: z.number(),
  discardedAt: z.number().optional(),
  discardedBy: z.string().optional(),
  approvedAt: z.number().optional(),
  approvedBy: z.string().optional(),
  authorizationId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferRequest2$ {
  /** @deprecated use `TransferRequest2$inboundSchema` instead. */
  export const inboundSchema = TransferRequest2$inboundSchema;
  /** @deprecated use `TransferRequest2$outboundSchema` instead. */
  export const outboundSchema = TransferRequest2$outboundSchema;
  /** @deprecated use `TransferRequest2$Outbound` instead. */
  export type Outbound = TransferRequest2$Outbound;
}

export function transferRequest2ToJSON(
  transferRequest2: TransferRequest2,
): string {
  return JSON.stringify(
    TransferRequest2$outboundSchema.parse(transferRequest2),
  );
}

export function transferRequest2FromJSON(
  jsonString: string,
): SafeParseResult<TransferRequest2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransferRequest2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransferRequest2' from JSON`,
  );
}

/** @internal */
export const Kind$inboundSchema: z.ZodNativeEnum<typeof Kind> = z.nativeEnum(
  Kind,
);

/** @internal */
export const Kind$outboundSchema: z.ZodNativeEnum<typeof Kind> =
  Kind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Kind$ {
  /** @deprecated use `Kind$inboundSchema` instead. */
  export const inboundSchema = Kind$inboundSchema;
  /** @deprecated use `Kind$outboundSchema` instead. */
  export const outboundSchema = Kind$outboundSchema;
}

/** @internal */
export const TransferRequestType$inboundSchema: z.ZodNativeEnum<
  typeof TransferRequestType
> = z.nativeEnum(TransferRequestType);

/** @internal */
export const TransferRequestType$outboundSchema: z.ZodNativeEnum<
  typeof TransferRequestType
> = TransferRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferRequestType$ {
  /** @deprecated use `TransferRequestType$inboundSchema` instead. */
  export const inboundSchema = TransferRequestType$inboundSchema;
  /** @deprecated use `TransferRequestType$outboundSchema` instead. */
  export const outboundSchema = TransferRequestType$outboundSchema;
}

/** @internal */
export const TransferRequestScope$inboundSchema: z.ZodNativeEnum<
  typeof TransferRequestScope
> = z.nativeEnum(TransferRequestScope);

/** @internal */
export const TransferRequestScope$outboundSchema: z.ZodNativeEnum<
  typeof TransferRequestScope
> = TransferRequestScope$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferRequestScope$ {
  /** @deprecated use `TransferRequestScope$inboundSchema` instead. */
  export const inboundSchema = TransferRequestScope$inboundSchema;
  /** @deprecated use `TransferRequestScope$outboundSchema` instead. */
  export const outboundSchema = TransferRequestScope$outboundSchema;
}

/** @internal */
export const TransferRequestBillingPlan$inboundSchema: z.ZodType<
  TransferRequestBillingPlan,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: TransferRequestType$inboundSchema,
  scope: TransferRequestScope$inboundSchema.optional(),
  name: z.string(),
  description: z.string(),
  paymentMethodRequired: z.boolean().optional(),
  preauthorizationAmount: z.number().optional(),
});

/** @internal */
export type TransferRequestBillingPlan$Outbound = {
  id: string;
  type: string;
  scope?: string | undefined;
  name: string;
  description: string;
  paymentMethodRequired?: boolean | undefined;
  preauthorizationAmount?: number | undefined;
};

/** @internal */
export const TransferRequestBillingPlan$outboundSchema: z.ZodType<
  TransferRequestBillingPlan$Outbound,
  z.ZodTypeDef,
  TransferRequestBillingPlan
> = z.object({
  id: z.string(),
  type: TransferRequestType$outboundSchema,
  scope: TransferRequestScope$outboundSchema.optional(),
  name: z.string(),
  description: z.string(),
  paymentMethodRequired: z.boolean().optional(),
  preauthorizationAmount: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferRequestBillingPlan$ {
  /** @deprecated use `TransferRequestBillingPlan$inboundSchema` instead. */
  export const inboundSchema = TransferRequestBillingPlan$inboundSchema;
  /** @deprecated use `TransferRequestBillingPlan$outboundSchema` instead. */
  export const outboundSchema = TransferRequestBillingPlan$outboundSchema;
  /** @deprecated use `TransferRequestBillingPlan$Outbound` instead. */
  export type Outbound = TransferRequestBillingPlan$Outbound;
}

export function transferRequestBillingPlanToJSON(
  transferRequestBillingPlan: TransferRequestBillingPlan,
): string {
  return JSON.stringify(
    TransferRequestBillingPlan$outboundSchema.parse(transferRequestBillingPlan),
  );
}

export function transferRequestBillingPlanFromJSON(
  jsonString: string,
): SafeParseResult<TransferRequestBillingPlan, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransferRequestBillingPlan$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransferRequestBillingPlan' from JSON`,
  );
}

/** @internal */
export const Requester$inboundSchema: z.ZodType<
  Requester,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  email: z.string().optional(),
});

/** @internal */
export type Requester$Outbound = {
  name: string;
  email?: string | undefined;
};

/** @internal */
export const Requester$outboundSchema: z.ZodType<
  Requester$Outbound,
  z.ZodTypeDef,
  Requester
> = z.object({
  name: z.string(),
  email: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Requester$ {
  /** @deprecated use `Requester$inboundSchema` instead. */
  export const inboundSchema = Requester$inboundSchema;
  /** @deprecated use `Requester$outboundSchema` instead. */
  export const outboundSchema = Requester$outboundSchema;
  /** @deprecated use `Requester$Outbound` instead. */
  export type Outbound = Requester$Outbound;
}

export function requesterToJSON(requester: Requester): string {
  return JSON.stringify(Requester$outboundSchema.parse(requester));
}

export function requesterFromJSON(
  jsonString: string,
): SafeParseResult<Requester, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Requester$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Requester' from JSON`,
  );
}

/** @internal */
export const TransferRequest1$inboundSchema: z.ZodType<
  TransferRequest1,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: Kind$inboundSchema,
  metadata: z.record(z.any()).optional(),
  billingPlan: z.lazy(() => TransferRequestBillingPlan$inboundSchema)
    .optional(),
  requestId: z.string(),
  transferId: z.string(),
  requester: z.lazy(() => Requester$inboundSchema),
  createdAt: z.number(),
  expiresAt: z.number(),
  discardedAt: z.number().optional(),
  discardedBy: z.string().optional(),
  approvedAt: z.number().optional(),
  approvedBy: z.string().optional(),
  authorizationId: z.string().optional(),
});

/** @internal */
export type TransferRequest1$Outbound = {
  kind: string;
  metadata?: { [k: string]: any } | undefined;
  billingPlan?: TransferRequestBillingPlan$Outbound | undefined;
  requestId: string;
  transferId: string;
  requester: Requester$Outbound;
  createdAt: number;
  expiresAt: number;
  discardedAt?: number | undefined;
  discardedBy?: string | undefined;
  approvedAt?: number | undefined;
  approvedBy?: string | undefined;
  authorizationId?: string | undefined;
};

/** @internal */
export const TransferRequest1$outboundSchema: z.ZodType<
  TransferRequest1$Outbound,
  z.ZodTypeDef,
  TransferRequest1
> = z.object({
  kind: Kind$outboundSchema,
  metadata: z.record(z.any()).optional(),
  billingPlan: z.lazy(() => TransferRequestBillingPlan$outboundSchema)
    .optional(),
  requestId: z.string(),
  transferId: z.string(),
  requester: z.lazy(() => Requester$outboundSchema),
  createdAt: z.number(),
  expiresAt: z.number(),
  discardedAt: z.number().optional(),
  discardedBy: z.string().optional(),
  approvedAt: z.number().optional(),
  approvedBy: z.string().optional(),
  authorizationId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferRequest1$ {
  /** @deprecated use `TransferRequest1$inboundSchema` instead. */
  export const inboundSchema = TransferRequest1$inboundSchema;
  /** @deprecated use `TransferRequest1$outboundSchema` instead. */
  export const outboundSchema = TransferRequest1$outboundSchema;
  /** @deprecated use `TransferRequest1$Outbound` instead. */
  export type Outbound = TransferRequest1$Outbound;
}

export function transferRequest1ToJSON(
  transferRequest1: TransferRequest1,
): string {
  return JSON.stringify(
    TransferRequest1$outboundSchema.parse(transferRequest1),
  );
}

export function transferRequest1FromJSON(
  jsonString: string,
): SafeParseResult<TransferRequest1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransferRequest1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransferRequest1' from JSON`,
  );
}

/** @internal */
export const TransferRequest$inboundSchema: z.ZodType<
  TransferRequest,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => TransferRequest1$inboundSchema),
  z.lazy(() => TransferRequest2$inboundSchema),
]);

/** @internal */
export type TransferRequest$Outbound =
  | TransferRequest1$Outbound
  | TransferRequest2$Outbound;

/** @internal */
export const TransferRequest$outboundSchema: z.ZodType<
  TransferRequest$Outbound,
  z.ZodTypeDef,
  TransferRequest
> = z.union([
  z.lazy(() => TransferRequest1$outboundSchema),
  z.lazy(() => TransferRequest2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferRequest$ {
  /** @deprecated use `TransferRequest$inboundSchema` instead. */
  export const inboundSchema = TransferRequest$inboundSchema;
  /** @deprecated use `TransferRequest$outboundSchema` instead. */
  export const outboundSchema = TransferRequest$outboundSchema;
  /** @deprecated use `TransferRequest$Outbound` instead. */
  export type Outbound = TransferRequest$Outbound;
}

export function transferRequestToJSON(
  transferRequest: TransferRequest,
): string {
  return JSON.stringify(TransferRequest$outboundSchema.parse(transferRequest));
}

export function transferRequestFromJSON(
  jsonString: string,
): SafeParseResult<TransferRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransferRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransferRequest' from JSON`,
  );
}

/** @internal */
export const GetConfigurationResponseBodyIntegrationsSource$inboundSchema:
  z.ZodNativeEnum<typeof GetConfigurationResponseBodyIntegrationsSource> = z
    .nativeEnum(GetConfigurationResponseBodyIntegrationsSource);

/** @internal */
export const GetConfigurationResponseBodyIntegrationsSource$outboundSchema:
  z.ZodNativeEnum<typeof GetConfigurationResponseBodyIntegrationsSource> =
    GetConfigurationResponseBodyIntegrationsSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationResponseBodyIntegrationsSource$ {
  /** @deprecated use `GetConfigurationResponseBodyIntegrationsSource$inboundSchema` instead. */
  export const inboundSchema =
    GetConfigurationResponseBodyIntegrationsSource$inboundSchema;
  /** @deprecated use `GetConfigurationResponseBodyIntegrationsSource$outboundSchema` instead. */
  export const outboundSchema =
    GetConfigurationResponseBodyIntegrationsSource$outboundSchema;
}

/** @internal */
export const GetConfigurationResponseBodyIntegrationsType$inboundSchema:
  z.ZodNativeEnum<typeof GetConfigurationResponseBodyIntegrationsType> = z
    .nativeEnum(GetConfigurationResponseBodyIntegrationsType);

/** @internal */
export const GetConfigurationResponseBodyIntegrationsType$outboundSchema:
  z.ZodNativeEnum<typeof GetConfigurationResponseBodyIntegrationsType> =
    GetConfigurationResponseBodyIntegrationsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationResponseBodyIntegrationsType$ {
  /** @deprecated use `GetConfigurationResponseBodyIntegrationsType$inboundSchema` instead. */
  export const inboundSchema =
    GetConfigurationResponseBodyIntegrationsType$inboundSchema;
  /** @deprecated use `GetConfigurationResponseBodyIntegrationsType$outboundSchema` instead. */
  export const outboundSchema =
    GetConfigurationResponseBodyIntegrationsType$outboundSchema;
}

/** @internal */
export const GetConfigurationResponseBodyIntegrationsDisabledReason$inboundSchema:
  z.ZodNativeEnum<
    typeof GetConfigurationResponseBodyIntegrationsDisabledReason
  > = z.nativeEnum(GetConfigurationResponseBodyIntegrationsDisabledReason);

/** @internal */
export const GetConfigurationResponseBodyIntegrationsDisabledReason$outboundSchema:
  z.ZodNativeEnum<
    typeof GetConfigurationResponseBodyIntegrationsDisabledReason
  > = GetConfigurationResponseBodyIntegrationsDisabledReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationResponseBodyIntegrationsDisabledReason$ {
  /** @deprecated use `GetConfigurationResponseBodyIntegrationsDisabledReason$inboundSchema` instead. */
  export const inboundSchema =
    GetConfigurationResponseBodyIntegrationsDisabledReason$inboundSchema;
  /** @deprecated use `GetConfigurationResponseBodyIntegrationsDisabledReason$outboundSchema` instead. */
  export const outboundSchema =
    GetConfigurationResponseBodyIntegrationsDisabledReason$outboundSchema;
}

/** @internal */
export const GetConfigurationResponseBodyIntegrationsInstallationType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetConfigurationResponseBodyIntegrationsInstallationType
  > = z.nativeEnum(GetConfigurationResponseBodyIntegrationsInstallationType);

/** @internal */
export const GetConfigurationResponseBodyIntegrationsInstallationType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetConfigurationResponseBodyIntegrationsInstallationType
  > = GetConfigurationResponseBodyIntegrationsInstallationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationResponseBodyIntegrationsInstallationType$ {
  /** @deprecated use `GetConfigurationResponseBodyIntegrationsInstallationType$inboundSchema` instead. */
  export const inboundSchema =
    GetConfigurationResponseBodyIntegrationsInstallationType$inboundSchema;
  /** @deprecated use `GetConfigurationResponseBodyIntegrationsInstallationType$outboundSchema` instead. */
  export const outboundSchema =
    GetConfigurationResponseBodyIntegrationsInstallationType$outboundSchema;
}

/** @internal */
export const GetConfigurationResponseBody2$inboundSchema: z.ZodType<
  GetConfigurationResponseBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectSelection: ProjectSelection$inboundSchema,
  notification: z.lazy(() => ResponseBodyNotification$inboundSchema),
  transferRequest: z.union([
    z.lazy(() => TransferRequest1$inboundSchema),
    z.lazy(() => TransferRequest2$inboundSchema),
  ]),
  projects: z.array(z.string()).optional(),
  completedAt: z.number().optional(),
  createdAt: z.number(),
  id: z.string(),
  integrationId: z.string(),
  ownerId: z.string(),
  source: GetConfigurationResponseBodyIntegrationsSource$inboundSchema
    .optional(),
  slug: z.string(),
  teamId: z.nullable(z.string()).optional(),
  type: GetConfigurationResponseBodyIntegrationsType$inboundSchema,
  updatedAt: z.number(),
  userId: z.string(),
  scopes: z.array(z.string()),
  disabledAt: z.number().optional(),
  deletedAt: z.nullable(z.number()).optional(),
  deleteRequestedAt: z.nullable(z.number()).optional(),
  disabledReason:
    GetConfigurationResponseBodyIntegrationsDisabledReason$inboundSchema
      .optional(),
  installationType:
    GetConfigurationResponseBodyIntegrationsInstallationType$inboundSchema
      .optional(),
  canConfigureOpenTelemetry: z.boolean().optional(),
});

/** @internal */
export type GetConfigurationResponseBody2$Outbound = {
  projectSelection: string;
  notification: ResponseBodyNotification$Outbound;
  transferRequest: TransferRequest1$Outbound | TransferRequest2$Outbound;
  projects?: Array<string> | undefined;
  completedAt?: number | undefined;
  createdAt: number;
  id: string;
  integrationId: string;
  ownerId: string;
  source?: string | undefined;
  slug: string;
  teamId?: string | null | undefined;
  type: string;
  updatedAt: number;
  userId: string;
  scopes: Array<string>;
  disabledAt?: number | undefined;
  deletedAt?: number | null | undefined;
  deleteRequestedAt?: number | null | undefined;
  disabledReason?: string | undefined;
  installationType?: string | undefined;
  canConfigureOpenTelemetry?: boolean | undefined;
};

/** @internal */
export const GetConfigurationResponseBody2$outboundSchema: z.ZodType<
  GetConfigurationResponseBody2$Outbound,
  z.ZodTypeDef,
  GetConfigurationResponseBody2
> = z.object({
  projectSelection: ProjectSelection$outboundSchema,
  notification: z.lazy(() => ResponseBodyNotification$outboundSchema),
  transferRequest: z.union([
    z.lazy(() => TransferRequest1$outboundSchema),
    z.lazy(() => TransferRequest2$outboundSchema),
  ]),
  projects: z.array(z.string()).optional(),
  completedAt: z.number().optional(),
  createdAt: z.number(),
  id: z.string(),
  integrationId: z.string(),
  ownerId: z.string(),
  source: GetConfigurationResponseBodyIntegrationsSource$outboundSchema
    .optional(),
  slug: z.string(),
  teamId: z.nullable(z.string()).optional(),
  type: GetConfigurationResponseBodyIntegrationsType$outboundSchema,
  updatedAt: z.number(),
  userId: z.string(),
  scopes: z.array(z.string()),
  disabledAt: z.number().optional(),
  deletedAt: z.nullable(z.number()).optional(),
  deleteRequestedAt: z.nullable(z.number()).optional(),
  disabledReason:
    GetConfigurationResponseBodyIntegrationsDisabledReason$outboundSchema
      .optional(),
  installationType:
    GetConfigurationResponseBodyIntegrationsInstallationType$outboundSchema
      .optional(),
  canConfigureOpenTelemetry: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationResponseBody2$ {
  /** @deprecated use `GetConfigurationResponseBody2$inboundSchema` instead. */
  export const inboundSchema = GetConfigurationResponseBody2$inboundSchema;
  /** @deprecated use `GetConfigurationResponseBody2$outboundSchema` instead. */
  export const outboundSchema = GetConfigurationResponseBody2$outboundSchema;
  /** @deprecated use `GetConfigurationResponseBody2$Outbound` instead. */
  export type Outbound = GetConfigurationResponseBody2$Outbound;
}

export function getConfigurationResponseBody2ToJSON(
  getConfigurationResponseBody2: GetConfigurationResponseBody2,
): string {
  return JSON.stringify(
    GetConfigurationResponseBody2$outboundSchema.parse(
      getConfigurationResponseBody2,
    ),
  );
}

export function getConfigurationResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<GetConfigurationResponseBody2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetConfigurationResponseBody2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetConfigurationResponseBody2' from JSON`,
  );
}

/** @internal */
export const GetConfigurationResponseBodySource$inboundSchema: z.ZodNativeEnum<
  typeof GetConfigurationResponseBodySource
> = z.nativeEnum(GetConfigurationResponseBodySource);

/** @internal */
export const GetConfigurationResponseBodySource$outboundSchema: z.ZodNativeEnum<
  typeof GetConfigurationResponseBodySource
> = GetConfigurationResponseBodySource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationResponseBodySource$ {
  /** @deprecated use `GetConfigurationResponseBodySource$inboundSchema` instead. */
  export const inboundSchema = GetConfigurationResponseBodySource$inboundSchema;
  /** @deprecated use `GetConfigurationResponseBodySource$outboundSchema` instead. */
  export const outboundSchema =
    GetConfigurationResponseBodySource$outboundSchema;
}

/** @internal */
export const GetConfigurationResponseBodyType$inboundSchema: z.ZodNativeEnum<
  typeof GetConfigurationResponseBodyType
> = z.nativeEnum(GetConfigurationResponseBodyType);

/** @internal */
export const GetConfigurationResponseBodyType$outboundSchema: z.ZodNativeEnum<
  typeof GetConfigurationResponseBodyType
> = GetConfigurationResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationResponseBodyType$ {
  /** @deprecated use `GetConfigurationResponseBodyType$inboundSchema` instead. */
  export const inboundSchema = GetConfigurationResponseBodyType$inboundSchema;
  /** @deprecated use `GetConfigurationResponseBodyType$outboundSchema` instead. */
  export const outboundSchema = GetConfigurationResponseBodyType$outboundSchema;
}

/** @internal */
export const GetConfigurationResponseBodyDisabledReason$inboundSchema:
  z.ZodNativeEnum<typeof GetConfigurationResponseBodyDisabledReason> = z
    .nativeEnum(GetConfigurationResponseBodyDisabledReason);

/** @internal */
export const GetConfigurationResponseBodyDisabledReason$outboundSchema:
  z.ZodNativeEnum<typeof GetConfigurationResponseBodyDisabledReason> =
    GetConfigurationResponseBodyDisabledReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationResponseBodyDisabledReason$ {
  /** @deprecated use `GetConfigurationResponseBodyDisabledReason$inboundSchema` instead. */
  export const inboundSchema =
    GetConfigurationResponseBodyDisabledReason$inboundSchema;
  /** @deprecated use `GetConfigurationResponseBodyDisabledReason$outboundSchema` instead. */
  export const outboundSchema =
    GetConfigurationResponseBodyDisabledReason$outboundSchema;
}

/** @internal */
export const GetConfigurationResponseBodyInstallationType$inboundSchema:
  z.ZodNativeEnum<typeof GetConfigurationResponseBodyInstallationType> = z
    .nativeEnum(GetConfigurationResponseBodyInstallationType);

/** @internal */
export const GetConfigurationResponseBodyInstallationType$outboundSchema:
  z.ZodNativeEnum<typeof GetConfigurationResponseBodyInstallationType> =
    GetConfigurationResponseBodyInstallationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationResponseBodyInstallationType$ {
  /** @deprecated use `GetConfigurationResponseBodyInstallationType$inboundSchema` instead. */
  export const inboundSchema =
    GetConfigurationResponseBodyInstallationType$inboundSchema;
  /** @deprecated use `GetConfigurationResponseBodyInstallationType$outboundSchema` instead. */
  export const outboundSchema =
    GetConfigurationResponseBodyInstallationType$outboundSchema;
}

/** @internal */
export const GetConfigurationResponseBody1$inboundSchema: z.ZodType<
  GetConfigurationResponseBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  completedAt: z.number().optional(),
  createdAt: z.number(),
  id: z.string(),
  integrationId: z.string(),
  ownerId: z.string(),
  projects: z.array(z.string()).optional(),
  source: GetConfigurationResponseBodySource$inboundSchema.optional(),
  slug: z.string(),
  teamId: z.nullable(z.string()).optional(),
  type: GetConfigurationResponseBodyType$inboundSchema,
  updatedAt: z.number(),
  userId: z.string(),
  scopes: z.array(z.string()),
  disabledAt: z.number().optional(),
  deletedAt: z.nullable(z.number()).optional(),
  deleteRequestedAt: z.nullable(z.number()).optional(),
  disabledReason: GetConfigurationResponseBodyDisabledReason$inboundSchema
    .optional(),
  installationType: GetConfigurationResponseBodyInstallationType$inboundSchema
    .optional(),
});

/** @internal */
export type GetConfigurationResponseBody1$Outbound = {
  completedAt?: number | undefined;
  createdAt: number;
  id: string;
  integrationId: string;
  ownerId: string;
  projects?: Array<string> | undefined;
  source?: string | undefined;
  slug: string;
  teamId?: string | null | undefined;
  type: string;
  updatedAt: number;
  userId: string;
  scopes: Array<string>;
  disabledAt?: number | undefined;
  deletedAt?: number | null | undefined;
  deleteRequestedAt?: number | null | undefined;
  disabledReason?: string | undefined;
  installationType?: string | undefined;
};

/** @internal */
export const GetConfigurationResponseBody1$outboundSchema: z.ZodType<
  GetConfigurationResponseBody1$Outbound,
  z.ZodTypeDef,
  GetConfigurationResponseBody1
> = z.object({
  completedAt: z.number().optional(),
  createdAt: z.number(),
  id: z.string(),
  integrationId: z.string(),
  ownerId: z.string(),
  projects: z.array(z.string()).optional(),
  source: GetConfigurationResponseBodySource$outboundSchema.optional(),
  slug: z.string(),
  teamId: z.nullable(z.string()).optional(),
  type: GetConfigurationResponseBodyType$outboundSchema,
  updatedAt: z.number(),
  userId: z.string(),
  scopes: z.array(z.string()),
  disabledAt: z.number().optional(),
  deletedAt: z.nullable(z.number()).optional(),
  deleteRequestedAt: z.nullable(z.number()).optional(),
  disabledReason: GetConfigurationResponseBodyDisabledReason$outboundSchema
    .optional(),
  installationType: GetConfigurationResponseBodyInstallationType$outboundSchema
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationResponseBody1$ {
  /** @deprecated use `GetConfigurationResponseBody1$inboundSchema` instead. */
  export const inboundSchema = GetConfigurationResponseBody1$inboundSchema;
  /** @deprecated use `GetConfigurationResponseBody1$outboundSchema` instead. */
  export const outboundSchema = GetConfigurationResponseBody1$outboundSchema;
  /** @deprecated use `GetConfigurationResponseBody1$Outbound` instead. */
  export type Outbound = GetConfigurationResponseBody1$Outbound;
}

export function getConfigurationResponseBody1ToJSON(
  getConfigurationResponseBody1: GetConfigurationResponseBody1,
): string {
  return JSON.stringify(
    GetConfigurationResponseBody1$outboundSchema.parse(
      getConfigurationResponseBody1,
    ),
  );
}

export function getConfigurationResponseBody1FromJSON(
  jsonString: string,
): SafeParseResult<GetConfigurationResponseBody1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetConfigurationResponseBody1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetConfigurationResponseBody1' from JSON`,
  );
}

/** @internal */
export const GetConfigurationResponseBody$inboundSchema: z.ZodType<
  GetConfigurationResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetConfigurationResponseBody2$inboundSchema),
  z.lazy(() => GetConfigurationResponseBody1$inboundSchema),
]);

/** @internal */
export type GetConfigurationResponseBody$Outbound =
  | GetConfigurationResponseBody2$Outbound
  | GetConfigurationResponseBody1$Outbound;

/** @internal */
export const GetConfigurationResponseBody$outboundSchema: z.ZodType<
  GetConfigurationResponseBody$Outbound,
  z.ZodTypeDef,
  GetConfigurationResponseBody
> = z.union([
  z.lazy(() => GetConfigurationResponseBody2$outboundSchema),
  z.lazy(() => GetConfigurationResponseBody1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationResponseBody$ {
  /** @deprecated use `GetConfigurationResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetConfigurationResponseBody$inboundSchema;
  /** @deprecated use `GetConfigurationResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetConfigurationResponseBody$outboundSchema;
  /** @deprecated use `GetConfigurationResponseBody$Outbound` instead. */
  export type Outbound = GetConfigurationResponseBody$Outbound;
}

export function getConfigurationResponseBodyToJSON(
  getConfigurationResponseBody: GetConfigurationResponseBody,
): string {
  return JSON.stringify(
    GetConfigurationResponseBody$outboundSchema.parse(
      getConfigurationResponseBody,
    ),
  );
}

export function getConfigurationResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetConfigurationResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetConfigurationResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetConfigurationResponseBody' from JSON`,
  );
}
