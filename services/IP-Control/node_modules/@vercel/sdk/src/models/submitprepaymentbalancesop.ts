/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * A credit balance for a particular token type
 */
export type Balances = {
  /**
   * Partner's resource ID, exclude if credits are tied to the installation and not an individual resource.
   */
  resourceId?: string | undefined;
  /**
   * A human-readable description of the credits the user currently has, e.g. \"2,000 Tokens\"
   */
  credit?: string | undefined;
  /**
   * The name of the credits, for display purposes, e.g. \"Tokens\"
   */
  nameLabel?: string | undefined;
  /**
   * The dollar value of the credit balance, in USD and provided in cents, which is used to trigger automatic purchase thresholds.
   */
  currencyValueInCents: number;
};

export type SubmitPrepaymentBalancesRequestBody = {
  /**
   * Server time of your integration, used to determine the most recent data for race conditions & updates. Only the latest usage data for a given day, week, and month will be kept.
   */
  timestamp: Date;
  balances: Array<Balances>;
};

export type SubmitPrepaymentBalancesRequest = {
  integrationConfigurationId: string;
  requestBody?: SubmitPrepaymentBalancesRequestBody | undefined;
};

/** @internal */
export const Balances$inboundSchema: z.ZodType<
  Balances,
  z.ZodTypeDef,
  unknown
> = z.object({
  resourceId: z.string().optional(),
  credit: z.string().optional(),
  nameLabel: z.string().optional(),
  currencyValueInCents: z.number(),
});

/** @internal */
export type Balances$Outbound = {
  resourceId?: string | undefined;
  credit?: string | undefined;
  nameLabel?: string | undefined;
  currencyValueInCents: number;
};

/** @internal */
export const Balances$outboundSchema: z.ZodType<
  Balances$Outbound,
  z.ZodTypeDef,
  Balances
> = z.object({
  resourceId: z.string().optional(),
  credit: z.string().optional(),
  nameLabel: z.string().optional(),
  currencyValueInCents: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Balances$ {
  /** @deprecated use `Balances$inboundSchema` instead. */
  export const inboundSchema = Balances$inboundSchema;
  /** @deprecated use `Balances$outboundSchema` instead. */
  export const outboundSchema = Balances$outboundSchema;
  /** @deprecated use `Balances$Outbound` instead. */
  export type Outbound = Balances$Outbound;
}

export function balancesToJSON(balances: Balances): string {
  return JSON.stringify(Balances$outboundSchema.parse(balances));
}

export function balancesFromJSON(
  jsonString: string,
): SafeParseResult<Balances, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Balances$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Balances' from JSON`,
  );
}

/** @internal */
export const SubmitPrepaymentBalancesRequestBody$inboundSchema: z.ZodType<
  SubmitPrepaymentBalancesRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  balances: z.array(z.lazy(() => Balances$inboundSchema)),
});

/** @internal */
export type SubmitPrepaymentBalancesRequestBody$Outbound = {
  timestamp: string;
  balances: Array<Balances$Outbound>;
};

/** @internal */
export const SubmitPrepaymentBalancesRequestBody$outboundSchema: z.ZodType<
  SubmitPrepaymentBalancesRequestBody$Outbound,
  z.ZodTypeDef,
  SubmitPrepaymentBalancesRequestBody
> = z.object({
  timestamp: z.date().transform(v => v.toISOString()),
  balances: z.array(z.lazy(() => Balances$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubmitPrepaymentBalancesRequestBody$ {
  /** @deprecated use `SubmitPrepaymentBalancesRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    SubmitPrepaymentBalancesRequestBody$inboundSchema;
  /** @deprecated use `SubmitPrepaymentBalancesRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    SubmitPrepaymentBalancesRequestBody$outboundSchema;
  /** @deprecated use `SubmitPrepaymentBalancesRequestBody$Outbound` instead. */
  export type Outbound = SubmitPrepaymentBalancesRequestBody$Outbound;
}

export function submitPrepaymentBalancesRequestBodyToJSON(
  submitPrepaymentBalancesRequestBody: SubmitPrepaymentBalancesRequestBody,
): string {
  return JSON.stringify(
    SubmitPrepaymentBalancesRequestBody$outboundSchema.parse(
      submitPrepaymentBalancesRequestBody,
    ),
  );
}

export function submitPrepaymentBalancesRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<SubmitPrepaymentBalancesRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SubmitPrepaymentBalancesRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubmitPrepaymentBalancesRequestBody' from JSON`,
  );
}

/** @internal */
export const SubmitPrepaymentBalancesRequest$inboundSchema: z.ZodType<
  SubmitPrepaymentBalancesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  integrationConfigurationId: z.string(),
  RequestBody: z.lazy(() => SubmitPrepaymentBalancesRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type SubmitPrepaymentBalancesRequest$Outbound = {
  integrationConfigurationId: string;
  RequestBody?: SubmitPrepaymentBalancesRequestBody$Outbound | undefined;
};

/** @internal */
export const SubmitPrepaymentBalancesRequest$outboundSchema: z.ZodType<
  SubmitPrepaymentBalancesRequest$Outbound,
  z.ZodTypeDef,
  SubmitPrepaymentBalancesRequest
> = z.object({
  integrationConfigurationId: z.string(),
  requestBody: z.lazy(() => SubmitPrepaymentBalancesRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubmitPrepaymentBalancesRequest$ {
  /** @deprecated use `SubmitPrepaymentBalancesRequest$inboundSchema` instead. */
  export const inboundSchema = SubmitPrepaymentBalancesRequest$inboundSchema;
  /** @deprecated use `SubmitPrepaymentBalancesRequest$outboundSchema` instead. */
  export const outboundSchema = SubmitPrepaymentBalancesRequest$outboundSchema;
  /** @deprecated use `SubmitPrepaymentBalancesRequest$Outbound` instead. */
  export type Outbound = SubmitPrepaymentBalancesRequest$Outbound;
}

export function submitPrepaymentBalancesRequestToJSON(
  submitPrepaymentBalancesRequest: SubmitPrepaymentBalancesRequest,
): string {
  return JSON.stringify(
    SubmitPrepaymentBalancesRequest$outboundSchema.parse(
      submitPrepaymentBalancesRequest,
    ),
  );
}

export function submitPrepaymentBalancesRequestFromJSON(
  jsonString: string,
): SafeParseResult<SubmitPrepaymentBalancesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubmitPrepaymentBalancesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubmitPrepaymentBalancesRequest' from JSON`,
  );
}
