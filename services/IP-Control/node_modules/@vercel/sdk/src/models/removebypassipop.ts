/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type RemoveBypassIpRequestBody2 = {
  domain?: string | undefined;
  projectScope: boolean;
  sourceIp?: string | undefined;
  allSources?: boolean | undefined;
  note?: string | undefined;
};

export type RemoveBypassIpRequestBody1 = {
  domain: string;
  projectScope?: boolean | undefined;
  sourceIp?: string | undefined;
  allSources?: boolean | undefined;
  note?: string | undefined;
};

export type RemoveBypassIpRequestBody =
  | RemoveBypassIpRequestBody1
  | RemoveBypassIpRequestBody2;

export type RemoveBypassIpRequest = {
  projectId: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
  requestBody?:
    | RemoveBypassIpRequestBody1
    | RemoveBypassIpRequestBody2
    | undefined;
};

export type RemoveBypassIpResponseBody = {
  ok: boolean;
};

/** @internal */
export const RemoveBypassIpRequestBody2$inboundSchema: z.ZodType<
  RemoveBypassIpRequestBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  domain: z.string().optional(),
  projectScope: z.boolean(),
  sourceIp: z.string().optional(),
  allSources: z.boolean().optional(),
  note: z.string().optional(),
});

/** @internal */
export type RemoveBypassIpRequestBody2$Outbound = {
  domain?: string | undefined;
  projectScope: boolean;
  sourceIp?: string | undefined;
  allSources?: boolean | undefined;
  note?: string | undefined;
};

/** @internal */
export const RemoveBypassIpRequestBody2$outboundSchema: z.ZodType<
  RemoveBypassIpRequestBody2$Outbound,
  z.ZodTypeDef,
  RemoveBypassIpRequestBody2
> = z.object({
  domain: z.string().optional(),
  projectScope: z.boolean(),
  sourceIp: z.string().optional(),
  allSources: z.boolean().optional(),
  note: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveBypassIpRequestBody2$ {
  /** @deprecated use `RemoveBypassIpRequestBody2$inboundSchema` instead. */
  export const inboundSchema = RemoveBypassIpRequestBody2$inboundSchema;
  /** @deprecated use `RemoveBypassIpRequestBody2$outboundSchema` instead. */
  export const outboundSchema = RemoveBypassIpRequestBody2$outboundSchema;
  /** @deprecated use `RemoveBypassIpRequestBody2$Outbound` instead. */
  export type Outbound = RemoveBypassIpRequestBody2$Outbound;
}

export function removeBypassIpRequestBody2ToJSON(
  removeBypassIpRequestBody2: RemoveBypassIpRequestBody2,
): string {
  return JSON.stringify(
    RemoveBypassIpRequestBody2$outboundSchema.parse(removeBypassIpRequestBody2),
  );
}

export function removeBypassIpRequestBody2FromJSON(
  jsonString: string,
): SafeParseResult<RemoveBypassIpRequestBody2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveBypassIpRequestBody2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveBypassIpRequestBody2' from JSON`,
  );
}

/** @internal */
export const RemoveBypassIpRequestBody1$inboundSchema: z.ZodType<
  RemoveBypassIpRequestBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  domain: z.string(),
  projectScope: z.boolean().optional(),
  sourceIp: z.string().optional(),
  allSources: z.boolean().optional(),
  note: z.string().optional(),
});

/** @internal */
export type RemoveBypassIpRequestBody1$Outbound = {
  domain: string;
  projectScope?: boolean | undefined;
  sourceIp?: string | undefined;
  allSources?: boolean | undefined;
  note?: string | undefined;
};

/** @internal */
export const RemoveBypassIpRequestBody1$outboundSchema: z.ZodType<
  RemoveBypassIpRequestBody1$Outbound,
  z.ZodTypeDef,
  RemoveBypassIpRequestBody1
> = z.object({
  domain: z.string(),
  projectScope: z.boolean().optional(),
  sourceIp: z.string().optional(),
  allSources: z.boolean().optional(),
  note: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveBypassIpRequestBody1$ {
  /** @deprecated use `RemoveBypassIpRequestBody1$inboundSchema` instead. */
  export const inboundSchema = RemoveBypassIpRequestBody1$inboundSchema;
  /** @deprecated use `RemoveBypassIpRequestBody1$outboundSchema` instead. */
  export const outboundSchema = RemoveBypassIpRequestBody1$outboundSchema;
  /** @deprecated use `RemoveBypassIpRequestBody1$Outbound` instead. */
  export type Outbound = RemoveBypassIpRequestBody1$Outbound;
}

export function removeBypassIpRequestBody1ToJSON(
  removeBypassIpRequestBody1: RemoveBypassIpRequestBody1,
): string {
  return JSON.stringify(
    RemoveBypassIpRequestBody1$outboundSchema.parse(removeBypassIpRequestBody1),
  );
}

export function removeBypassIpRequestBody1FromJSON(
  jsonString: string,
): SafeParseResult<RemoveBypassIpRequestBody1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveBypassIpRequestBody1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveBypassIpRequestBody1' from JSON`,
  );
}

/** @internal */
export const RemoveBypassIpRequestBody$inboundSchema: z.ZodType<
  RemoveBypassIpRequestBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => RemoveBypassIpRequestBody1$inboundSchema),
  z.lazy(() => RemoveBypassIpRequestBody2$inboundSchema),
]);

/** @internal */
export type RemoveBypassIpRequestBody$Outbound =
  | RemoveBypassIpRequestBody1$Outbound
  | RemoveBypassIpRequestBody2$Outbound;

/** @internal */
export const RemoveBypassIpRequestBody$outboundSchema: z.ZodType<
  RemoveBypassIpRequestBody$Outbound,
  z.ZodTypeDef,
  RemoveBypassIpRequestBody
> = z.union([
  z.lazy(() => RemoveBypassIpRequestBody1$outboundSchema),
  z.lazy(() => RemoveBypassIpRequestBody2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveBypassIpRequestBody$ {
  /** @deprecated use `RemoveBypassIpRequestBody$inboundSchema` instead. */
  export const inboundSchema = RemoveBypassIpRequestBody$inboundSchema;
  /** @deprecated use `RemoveBypassIpRequestBody$outboundSchema` instead. */
  export const outboundSchema = RemoveBypassIpRequestBody$outboundSchema;
  /** @deprecated use `RemoveBypassIpRequestBody$Outbound` instead. */
  export type Outbound = RemoveBypassIpRequestBody$Outbound;
}

export function removeBypassIpRequestBodyToJSON(
  removeBypassIpRequestBody: RemoveBypassIpRequestBody,
): string {
  return JSON.stringify(
    RemoveBypassIpRequestBody$outboundSchema.parse(removeBypassIpRequestBody),
  );
}

export function removeBypassIpRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<RemoveBypassIpRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveBypassIpRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveBypassIpRequestBody' from JSON`,
  );
}

/** @internal */
export const RemoveBypassIpRequest$inboundSchema: z.ZodType<
  RemoveBypassIpRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectId: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  RequestBody: z.union([
    z.lazy(() => RemoveBypassIpRequestBody1$inboundSchema),
    z.lazy(() => RemoveBypassIpRequestBody2$inboundSchema),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type RemoveBypassIpRequest$Outbound = {
  projectId: string;
  teamId?: string | undefined;
  slug?: string | undefined;
  RequestBody?:
    | RemoveBypassIpRequestBody1$Outbound
    | RemoveBypassIpRequestBody2$Outbound
    | undefined;
};

/** @internal */
export const RemoveBypassIpRequest$outboundSchema: z.ZodType<
  RemoveBypassIpRequest$Outbound,
  z.ZodTypeDef,
  RemoveBypassIpRequest
> = z.object({
  projectId: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  requestBody: z.union([
    z.lazy(() => RemoveBypassIpRequestBody1$outboundSchema),
    z.lazy(() => RemoveBypassIpRequestBody2$outboundSchema),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveBypassIpRequest$ {
  /** @deprecated use `RemoveBypassIpRequest$inboundSchema` instead. */
  export const inboundSchema = RemoveBypassIpRequest$inboundSchema;
  /** @deprecated use `RemoveBypassIpRequest$outboundSchema` instead. */
  export const outboundSchema = RemoveBypassIpRequest$outboundSchema;
  /** @deprecated use `RemoveBypassIpRequest$Outbound` instead. */
  export type Outbound = RemoveBypassIpRequest$Outbound;
}

export function removeBypassIpRequestToJSON(
  removeBypassIpRequest: RemoveBypassIpRequest,
): string {
  return JSON.stringify(
    RemoveBypassIpRequest$outboundSchema.parse(removeBypassIpRequest),
  );
}

export function removeBypassIpRequestFromJSON(
  jsonString: string,
): SafeParseResult<RemoveBypassIpRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveBypassIpRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveBypassIpRequest' from JSON`,
  );
}

/** @internal */
export const RemoveBypassIpResponseBody$inboundSchema: z.ZodType<
  RemoveBypassIpResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  ok: z.boolean(),
});

/** @internal */
export type RemoveBypassIpResponseBody$Outbound = {
  ok: boolean;
};

/** @internal */
export const RemoveBypassIpResponseBody$outboundSchema: z.ZodType<
  RemoveBypassIpResponseBody$Outbound,
  z.ZodTypeDef,
  RemoveBypassIpResponseBody
> = z.object({
  ok: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveBypassIpResponseBody$ {
  /** @deprecated use `RemoveBypassIpResponseBody$inboundSchema` instead. */
  export const inboundSchema = RemoveBypassIpResponseBody$inboundSchema;
  /** @deprecated use `RemoveBypassIpResponseBody$outboundSchema` instead. */
  export const outboundSchema = RemoveBypassIpResponseBody$outboundSchema;
  /** @deprecated use `RemoveBypassIpResponseBody$Outbound` instead. */
  export type Outbound = RemoveBypassIpResponseBody$Outbound;
}

export function removeBypassIpResponseBodyToJSON(
  removeBypassIpResponseBody: RemoveBypassIpResponseBody,
): string {
  return JSON.stringify(
    RemoveBypassIpResponseBody$outboundSchema.parse(removeBypassIpResponseBody),
  );
}

export function removeBypassIpResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<RemoveBypassIpResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveBypassIpResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveBypassIpResponseBody' from JSON`,
  );
}
