/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Pagination,
  Pagination$inboundSchema,
  Pagination$Outbound,
  Pagination$outboundSchema,
} from "./pagination.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Get only aliases of the given domain name
 */
export type Domain = Array<string> | string;

export type ListAliasesRequest = {
  /**
   * Get only aliases of the given domain name
   */
  domain?: Array<string> | string | undefined;
  /**
   * Get only aliases created after the provided timestamp
   */
  from?: number | undefined;
  /**
   * Maximum number of aliases to list from a request
   */
  limit?: number | undefined;
  /**
   * Filter aliases from the given `projectId`
   */
  projectId?: string | undefined;
  /**
   * Get aliases created after this JavaScript timestamp
   */
  since?: number | undefined;
  /**
   * Get aliases created before this JavaScript timestamp
   */
  until?: number | undefined;
  /**
   * Get aliases that would be rolled back for the given deployment
   */
  rollbackDeploymentId?: string | undefined;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
};

/**
 * Information of the user who created the alias
 */
export type ListAliasesCreator = {
  /**
   * ID of the user who created the alias
   */
  uid: string;
  /**
   * Email of the user who created the alias
   */
  email: string;
  /**
   * Username of the user who created the alias
   */
  username: string;
};

/**
 * A map with the deployment ID, URL and metadata
 */
export type ListAliasesDeployment = {
  /**
   * The deployment unique identifier
   */
  id: string;
  /**
   * The deployment unique URL
   */
  url: string;
  /**
   * The deployment metadata
   */
  meta?: string | undefined;
};

export const ListAliasesProtectionBypassAliasesResponse200Scope = {
  EmailInvite: "email_invite",
} as const;
export type ListAliasesProtectionBypassAliasesResponse200Scope = ClosedEnum<
  typeof ListAliasesProtectionBypassAliasesResponse200Scope
>;

/**
 * The protection bypass for the alias
 */
export type ListAliasesProtectionBypass4 = {
  createdAt: number;
  lastUpdatedAt: number;
  lastUpdatedBy: string;
  scope: ListAliasesProtectionBypassAliasesResponse200Scope;
};

export const ListAliasesProtectionBypassAliasesResponseScope = {
  AliasProtectionOverride: "alias-protection-override",
} as const;
export type ListAliasesProtectionBypassAliasesResponseScope = ClosedEnum<
  typeof ListAliasesProtectionBypassAliasesResponseScope
>;

/**
 * The protection bypass for the alias
 */
export type ListAliasesProtectionBypass3 = {
  createdAt: number;
  createdBy: string;
  scope: ListAliasesProtectionBypassAliasesResponseScope;
};

export const ListAliasesProtectionBypassAccess = {
  Requested: "requested",
  Granted: "granted",
} as const;
export type ListAliasesProtectionBypassAccess = ClosedEnum<
  typeof ListAliasesProtectionBypassAccess
>;

export const ListAliasesProtectionBypassAliasesScope = {
  User: "user",
} as const;
export type ListAliasesProtectionBypassAliasesScope = ClosedEnum<
  typeof ListAliasesProtectionBypassAliasesScope
>;

/**
 * The protection bypass for the alias
 */
export type ListAliasesProtectionBypass2 = {
  createdAt: number;
  lastUpdatedAt: number;
  lastUpdatedBy: string;
  access: ListAliasesProtectionBypassAccess;
  scope: ListAliasesProtectionBypassAliasesScope;
};

export const ListAliasesProtectionBypassScope = {
  ShareableLink: "shareable-link",
} as const;
export type ListAliasesProtectionBypassScope = ClosedEnum<
  typeof ListAliasesProtectionBypassScope
>;

/**
 * The protection bypass for the alias
 */
export type ListAliasesProtectionBypass1 = {
  createdAt: number;
  createdBy: string;
  scope: ListAliasesProtectionBypassScope;
  expires?: number | undefined;
};

export type ListAliasesProtectionBypass =
  | ListAliasesProtectionBypass2
  | ListAliasesProtectionBypass4
  | ListAliasesProtectionBypass1
  | ListAliasesProtectionBypass3;

export type ListAliasesDefaultApp = {
  projectId: string;
};

/**
 * A list of the deployment routing information for each project.
 */
export type ListAliasesApplications3 = {
  /**
   * This is the deployment for the same commit, it could be a cancelled deployment. The proxy will fallback to the branchDeploymentId and then the fallbackDeploymentId.
   */
  deploymentId?: string | undefined;
  /**
   * This is the latest non-cancelled deployment of the branch alias at the time the commit alias was created. It is possible there is no deployment for the branch, or this was set before the deployment was canceled, in which case this will point to a cancelled deployment, in either case the proxy will fallback to the fallbackDeploymentId.
   */
  branchDeploymentId?: string | undefined;
  /**
   * This is the deployment of the fallback host at the time the commit alias was created. It is possible for this to be a deleted deployment, in which case the proxy will show that the deployment is deleted. It will not use the fallbackHost, as a future deployment on the fallback host could be invalid for this deployment, and it could lead to confusion / incorrect behavior for the commit alias.
   */
  fallbackDeploymentId?: string | undefined;
  /**
   * Temporary for backwards compatibility. Can remove when metadata change is released
   */
  fallbackHost?: string | undefined;
  branchAlias?: string | undefined;
  /**
   * The project ID of the microfrontends application.
   */
  projectId: string;
};

/**
 * A list of the deployment routing information for each project.
 */
export type ListAliasesApplications2 = {
  /**
   * This is always set. For branch aliases, it's used as the fallback if there is no deployment for the branch.
   */
  fallbackHost: string;
  /**
   * Could point to a branch without a deployment if the project was never deployed. The proxy will fallback to the fallbackHost if there is no deployment.
   */
  branchAlias: string;
  /**
   * The project ID of the microfrontends application.
   */
  projectId: string;
};

/**
 * A list of the deployment routing information for each project.
 */
export type ListAliasesApplications1 = {
  /**
   * This is always set. In production it is used as a pointer to each apps production deployment. For pre-production, it's used as the fallback if there is no deployment for the branch.
   */
  fallbackHost: string;
  /**
   * The project ID of the microfrontends application.
   */
  projectId: string;
};

export type ListAliasesApplications =
  | Array<ListAliasesApplications1>
  | Array<ListAliasesApplications2>
  | Array<ListAliasesApplications3>;

/**
 * The microfrontends for the alias including the routing configuration
 */
export type ListAliasesMicrofrontends = {
  defaultApp: ListAliasesDefaultApp;
  applications:
    | Array<ListAliasesApplications1>
    | Array<ListAliasesApplications2>
    | Array<ListAliasesApplications3>;
};

export type ListAliasesAliases = {
  /**
   * The alias name, it could be a `.vercel.app` subdomain or a custom domain
   */
  alias: string;
  /**
   * The date when the alias was created
   */
  created: Date;
  /**
   * The date when the alias was created in milliseconds since the UNIX epoch
   */
  createdAt?: number | undefined;
  /**
   * Information of the user who created the alias
   */
  creator?: ListAliasesCreator | undefined;
  /**
   * The date when the alias was deleted in milliseconds since the UNIX epoch
   */
  deletedAt?: number | null | undefined;
  /**
   * A map with the deployment ID, URL and metadata
   */
  deployment?: ListAliasesDeployment | undefined;
  /**
   * The deployment ID
   */
  deploymentId: string | null;
  /**
   * The unique identifier of the project
   */
  projectId: string | null;
  /**
   * Target destination domain for redirect when the alias is a redirect
   */
  redirect?: string | null | undefined;
  /**
   * Status code to be used on redirect
   */
  redirectStatusCode?: number | null | undefined;
  /**
   * The unique identifier of the alias
   */
  uid: string;
  /**
   * The date when the alias was updated in milliseconds since the UNIX epoch
   */
  updatedAt?: number | undefined;
  /**
   * The protection bypass for the alias
   */
  protectionBypass?: {
    [k: string]:
      | ListAliasesProtectionBypass2
      | ListAliasesProtectionBypass4
      | ListAliasesProtectionBypass1
      | ListAliasesProtectionBypass3;
  } | undefined;
  /**
   * The microfrontends for the alias including the routing configuration
   */
  microfrontends?: ListAliasesMicrofrontends | undefined;
};

/**
 * The paginated list of aliases
 */
export type ListAliasesResponseBody = {
  aliases: Array<ListAliasesAliases>;
  /**
   * This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.
   */
  pagination: Pagination;
};

/** @internal */
export const Domain$inboundSchema: z.ZodType<Domain, z.ZodTypeDef, unknown> = z
  .union([z.array(z.string()), z.string()]);

/** @internal */
export type Domain$Outbound = Array<string> | string;

/** @internal */
export const Domain$outboundSchema: z.ZodType<
  Domain$Outbound,
  z.ZodTypeDef,
  Domain
> = z.union([z.array(z.string()), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Domain$ {
  /** @deprecated use `Domain$inboundSchema` instead. */
  export const inboundSchema = Domain$inboundSchema;
  /** @deprecated use `Domain$outboundSchema` instead. */
  export const outboundSchema = Domain$outboundSchema;
  /** @deprecated use `Domain$Outbound` instead. */
  export type Outbound = Domain$Outbound;
}

export function domainToJSON(domain: Domain): string {
  return JSON.stringify(Domain$outboundSchema.parse(domain));
}

export function domainFromJSON(
  jsonString: string,
): SafeParseResult<Domain, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Domain$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Domain' from JSON`,
  );
}

/** @internal */
export const ListAliasesRequest$inboundSchema: z.ZodType<
  ListAliasesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  domain: z.union([z.array(z.string()), z.string()]).optional(),
  from: z.number().optional(),
  limit: z.number().optional(),
  projectId: z.string().optional(),
  since: z.number().optional(),
  until: z.number().optional(),
  rollbackDeploymentId: z.string().optional(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/** @internal */
export type ListAliasesRequest$Outbound = {
  domain?: Array<string> | string | undefined;
  from?: number | undefined;
  limit?: number | undefined;
  projectId?: string | undefined;
  since?: number | undefined;
  until?: number | undefined;
  rollbackDeploymentId?: string | undefined;
  teamId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const ListAliasesRequest$outboundSchema: z.ZodType<
  ListAliasesRequest$Outbound,
  z.ZodTypeDef,
  ListAliasesRequest
> = z.object({
  domain: z.union([z.array(z.string()), z.string()]).optional(),
  from: z.number().optional(),
  limit: z.number().optional(),
  projectId: z.string().optional(),
  since: z.number().optional(),
  until: z.number().optional(),
  rollbackDeploymentId: z.string().optional(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAliasesRequest$ {
  /** @deprecated use `ListAliasesRequest$inboundSchema` instead. */
  export const inboundSchema = ListAliasesRequest$inboundSchema;
  /** @deprecated use `ListAliasesRequest$outboundSchema` instead. */
  export const outboundSchema = ListAliasesRequest$outboundSchema;
  /** @deprecated use `ListAliasesRequest$Outbound` instead. */
  export type Outbound = ListAliasesRequest$Outbound;
}

export function listAliasesRequestToJSON(
  listAliasesRequest: ListAliasesRequest,
): string {
  return JSON.stringify(
    ListAliasesRequest$outboundSchema.parse(listAliasesRequest),
  );
}

export function listAliasesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAliasesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAliasesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAliasesRequest' from JSON`,
  );
}

/** @internal */
export const ListAliasesCreator$inboundSchema: z.ZodType<
  ListAliasesCreator,
  z.ZodTypeDef,
  unknown
> = z.object({
  uid: z.string(),
  email: z.string(),
  username: z.string(),
});

/** @internal */
export type ListAliasesCreator$Outbound = {
  uid: string;
  email: string;
  username: string;
};

/** @internal */
export const ListAliasesCreator$outboundSchema: z.ZodType<
  ListAliasesCreator$Outbound,
  z.ZodTypeDef,
  ListAliasesCreator
> = z.object({
  uid: z.string(),
  email: z.string(),
  username: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAliasesCreator$ {
  /** @deprecated use `ListAliasesCreator$inboundSchema` instead. */
  export const inboundSchema = ListAliasesCreator$inboundSchema;
  /** @deprecated use `ListAliasesCreator$outboundSchema` instead. */
  export const outboundSchema = ListAliasesCreator$outboundSchema;
  /** @deprecated use `ListAliasesCreator$Outbound` instead. */
  export type Outbound = ListAliasesCreator$Outbound;
}

export function listAliasesCreatorToJSON(
  listAliasesCreator: ListAliasesCreator,
): string {
  return JSON.stringify(
    ListAliasesCreator$outboundSchema.parse(listAliasesCreator),
  );
}

export function listAliasesCreatorFromJSON(
  jsonString: string,
): SafeParseResult<ListAliasesCreator, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAliasesCreator$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAliasesCreator' from JSON`,
  );
}

/** @internal */
export const ListAliasesDeployment$inboundSchema: z.ZodType<
  ListAliasesDeployment,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  url: z.string(),
  meta: z.string().optional(),
});

/** @internal */
export type ListAliasesDeployment$Outbound = {
  id: string;
  url: string;
  meta?: string | undefined;
};

/** @internal */
export const ListAliasesDeployment$outboundSchema: z.ZodType<
  ListAliasesDeployment$Outbound,
  z.ZodTypeDef,
  ListAliasesDeployment
> = z.object({
  id: z.string(),
  url: z.string(),
  meta: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAliasesDeployment$ {
  /** @deprecated use `ListAliasesDeployment$inboundSchema` instead. */
  export const inboundSchema = ListAliasesDeployment$inboundSchema;
  /** @deprecated use `ListAliasesDeployment$outboundSchema` instead. */
  export const outboundSchema = ListAliasesDeployment$outboundSchema;
  /** @deprecated use `ListAliasesDeployment$Outbound` instead. */
  export type Outbound = ListAliasesDeployment$Outbound;
}

export function listAliasesDeploymentToJSON(
  listAliasesDeployment: ListAliasesDeployment,
): string {
  return JSON.stringify(
    ListAliasesDeployment$outboundSchema.parse(listAliasesDeployment),
  );
}

export function listAliasesDeploymentFromJSON(
  jsonString: string,
): SafeParseResult<ListAliasesDeployment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAliasesDeployment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAliasesDeployment' from JSON`,
  );
}

/** @internal */
export const ListAliasesProtectionBypassAliasesResponse200Scope$inboundSchema:
  z.ZodNativeEnum<typeof ListAliasesProtectionBypassAliasesResponse200Scope> = z
    .nativeEnum(ListAliasesProtectionBypassAliasesResponse200Scope);

/** @internal */
export const ListAliasesProtectionBypassAliasesResponse200Scope$outboundSchema:
  z.ZodNativeEnum<typeof ListAliasesProtectionBypassAliasesResponse200Scope> =
    ListAliasesProtectionBypassAliasesResponse200Scope$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAliasesProtectionBypassAliasesResponse200Scope$ {
  /** @deprecated use `ListAliasesProtectionBypassAliasesResponse200Scope$inboundSchema` instead. */
  export const inboundSchema =
    ListAliasesProtectionBypassAliasesResponse200Scope$inboundSchema;
  /** @deprecated use `ListAliasesProtectionBypassAliasesResponse200Scope$outboundSchema` instead. */
  export const outboundSchema =
    ListAliasesProtectionBypassAliasesResponse200Scope$outboundSchema;
}

/** @internal */
export const ListAliasesProtectionBypass4$inboundSchema: z.ZodType<
  ListAliasesProtectionBypass4,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.number(),
  lastUpdatedAt: z.number(),
  lastUpdatedBy: z.string(),
  scope: ListAliasesProtectionBypassAliasesResponse200Scope$inboundSchema,
});

/** @internal */
export type ListAliasesProtectionBypass4$Outbound = {
  createdAt: number;
  lastUpdatedAt: number;
  lastUpdatedBy: string;
  scope: string;
};

/** @internal */
export const ListAliasesProtectionBypass4$outboundSchema: z.ZodType<
  ListAliasesProtectionBypass4$Outbound,
  z.ZodTypeDef,
  ListAliasesProtectionBypass4
> = z.object({
  createdAt: z.number(),
  lastUpdatedAt: z.number(),
  lastUpdatedBy: z.string(),
  scope: ListAliasesProtectionBypassAliasesResponse200Scope$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAliasesProtectionBypass4$ {
  /** @deprecated use `ListAliasesProtectionBypass4$inboundSchema` instead. */
  export const inboundSchema = ListAliasesProtectionBypass4$inboundSchema;
  /** @deprecated use `ListAliasesProtectionBypass4$outboundSchema` instead. */
  export const outboundSchema = ListAliasesProtectionBypass4$outboundSchema;
  /** @deprecated use `ListAliasesProtectionBypass4$Outbound` instead. */
  export type Outbound = ListAliasesProtectionBypass4$Outbound;
}

export function listAliasesProtectionBypass4ToJSON(
  listAliasesProtectionBypass4: ListAliasesProtectionBypass4,
): string {
  return JSON.stringify(
    ListAliasesProtectionBypass4$outboundSchema.parse(
      listAliasesProtectionBypass4,
    ),
  );
}

export function listAliasesProtectionBypass4FromJSON(
  jsonString: string,
): SafeParseResult<ListAliasesProtectionBypass4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAliasesProtectionBypass4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAliasesProtectionBypass4' from JSON`,
  );
}

/** @internal */
export const ListAliasesProtectionBypassAliasesResponseScope$inboundSchema:
  z.ZodNativeEnum<typeof ListAliasesProtectionBypassAliasesResponseScope> = z
    .nativeEnum(ListAliasesProtectionBypassAliasesResponseScope);

/** @internal */
export const ListAliasesProtectionBypassAliasesResponseScope$outboundSchema:
  z.ZodNativeEnum<typeof ListAliasesProtectionBypassAliasesResponseScope> =
    ListAliasesProtectionBypassAliasesResponseScope$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAliasesProtectionBypassAliasesResponseScope$ {
  /** @deprecated use `ListAliasesProtectionBypassAliasesResponseScope$inboundSchema` instead. */
  export const inboundSchema =
    ListAliasesProtectionBypassAliasesResponseScope$inboundSchema;
  /** @deprecated use `ListAliasesProtectionBypassAliasesResponseScope$outboundSchema` instead. */
  export const outboundSchema =
    ListAliasesProtectionBypassAliasesResponseScope$outboundSchema;
}

/** @internal */
export const ListAliasesProtectionBypass3$inboundSchema: z.ZodType<
  ListAliasesProtectionBypass3,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.number(),
  createdBy: z.string(),
  scope: ListAliasesProtectionBypassAliasesResponseScope$inboundSchema,
});

/** @internal */
export type ListAliasesProtectionBypass3$Outbound = {
  createdAt: number;
  createdBy: string;
  scope: string;
};

/** @internal */
export const ListAliasesProtectionBypass3$outboundSchema: z.ZodType<
  ListAliasesProtectionBypass3$Outbound,
  z.ZodTypeDef,
  ListAliasesProtectionBypass3
> = z.object({
  createdAt: z.number(),
  createdBy: z.string(),
  scope: ListAliasesProtectionBypassAliasesResponseScope$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAliasesProtectionBypass3$ {
  /** @deprecated use `ListAliasesProtectionBypass3$inboundSchema` instead. */
  export const inboundSchema = ListAliasesProtectionBypass3$inboundSchema;
  /** @deprecated use `ListAliasesProtectionBypass3$outboundSchema` instead. */
  export const outboundSchema = ListAliasesProtectionBypass3$outboundSchema;
  /** @deprecated use `ListAliasesProtectionBypass3$Outbound` instead. */
  export type Outbound = ListAliasesProtectionBypass3$Outbound;
}

export function listAliasesProtectionBypass3ToJSON(
  listAliasesProtectionBypass3: ListAliasesProtectionBypass3,
): string {
  return JSON.stringify(
    ListAliasesProtectionBypass3$outboundSchema.parse(
      listAliasesProtectionBypass3,
    ),
  );
}

export function listAliasesProtectionBypass3FromJSON(
  jsonString: string,
): SafeParseResult<ListAliasesProtectionBypass3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAliasesProtectionBypass3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAliasesProtectionBypass3' from JSON`,
  );
}

/** @internal */
export const ListAliasesProtectionBypassAccess$inboundSchema: z.ZodNativeEnum<
  typeof ListAliasesProtectionBypassAccess
> = z.nativeEnum(ListAliasesProtectionBypassAccess);

/** @internal */
export const ListAliasesProtectionBypassAccess$outboundSchema: z.ZodNativeEnum<
  typeof ListAliasesProtectionBypassAccess
> = ListAliasesProtectionBypassAccess$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAliasesProtectionBypassAccess$ {
  /** @deprecated use `ListAliasesProtectionBypassAccess$inboundSchema` instead. */
  export const inboundSchema = ListAliasesProtectionBypassAccess$inboundSchema;
  /** @deprecated use `ListAliasesProtectionBypassAccess$outboundSchema` instead. */
  export const outboundSchema =
    ListAliasesProtectionBypassAccess$outboundSchema;
}

/** @internal */
export const ListAliasesProtectionBypassAliasesScope$inboundSchema:
  z.ZodNativeEnum<typeof ListAliasesProtectionBypassAliasesScope> = z
    .nativeEnum(ListAliasesProtectionBypassAliasesScope);

/** @internal */
export const ListAliasesProtectionBypassAliasesScope$outboundSchema:
  z.ZodNativeEnum<typeof ListAliasesProtectionBypassAliasesScope> =
    ListAliasesProtectionBypassAliasesScope$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAliasesProtectionBypassAliasesScope$ {
  /** @deprecated use `ListAliasesProtectionBypassAliasesScope$inboundSchema` instead. */
  export const inboundSchema =
    ListAliasesProtectionBypassAliasesScope$inboundSchema;
  /** @deprecated use `ListAliasesProtectionBypassAliasesScope$outboundSchema` instead. */
  export const outboundSchema =
    ListAliasesProtectionBypassAliasesScope$outboundSchema;
}

/** @internal */
export const ListAliasesProtectionBypass2$inboundSchema: z.ZodType<
  ListAliasesProtectionBypass2,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.number(),
  lastUpdatedAt: z.number(),
  lastUpdatedBy: z.string(),
  access: ListAliasesProtectionBypassAccess$inboundSchema,
  scope: ListAliasesProtectionBypassAliasesScope$inboundSchema,
});

/** @internal */
export type ListAliasesProtectionBypass2$Outbound = {
  createdAt: number;
  lastUpdatedAt: number;
  lastUpdatedBy: string;
  access: string;
  scope: string;
};

/** @internal */
export const ListAliasesProtectionBypass2$outboundSchema: z.ZodType<
  ListAliasesProtectionBypass2$Outbound,
  z.ZodTypeDef,
  ListAliasesProtectionBypass2
> = z.object({
  createdAt: z.number(),
  lastUpdatedAt: z.number(),
  lastUpdatedBy: z.string(),
  access: ListAliasesProtectionBypassAccess$outboundSchema,
  scope: ListAliasesProtectionBypassAliasesScope$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAliasesProtectionBypass2$ {
  /** @deprecated use `ListAliasesProtectionBypass2$inboundSchema` instead. */
  export const inboundSchema = ListAliasesProtectionBypass2$inboundSchema;
  /** @deprecated use `ListAliasesProtectionBypass2$outboundSchema` instead. */
  export const outboundSchema = ListAliasesProtectionBypass2$outboundSchema;
  /** @deprecated use `ListAliasesProtectionBypass2$Outbound` instead. */
  export type Outbound = ListAliasesProtectionBypass2$Outbound;
}

export function listAliasesProtectionBypass2ToJSON(
  listAliasesProtectionBypass2: ListAliasesProtectionBypass2,
): string {
  return JSON.stringify(
    ListAliasesProtectionBypass2$outboundSchema.parse(
      listAliasesProtectionBypass2,
    ),
  );
}

export function listAliasesProtectionBypass2FromJSON(
  jsonString: string,
): SafeParseResult<ListAliasesProtectionBypass2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAliasesProtectionBypass2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAliasesProtectionBypass2' from JSON`,
  );
}

/** @internal */
export const ListAliasesProtectionBypassScope$inboundSchema: z.ZodNativeEnum<
  typeof ListAliasesProtectionBypassScope
> = z.nativeEnum(ListAliasesProtectionBypassScope);

/** @internal */
export const ListAliasesProtectionBypassScope$outboundSchema: z.ZodNativeEnum<
  typeof ListAliasesProtectionBypassScope
> = ListAliasesProtectionBypassScope$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAliasesProtectionBypassScope$ {
  /** @deprecated use `ListAliasesProtectionBypassScope$inboundSchema` instead. */
  export const inboundSchema = ListAliasesProtectionBypassScope$inboundSchema;
  /** @deprecated use `ListAliasesProtectionBypassScope$outboundSchema` instead. */
  export const outboundSchema = ListAliasesProtectionBypassScope$outboundSchema;
}

/** @internal */
export const ListAliasesProtectionBypass1$inboundSchema: z.ZodType<
  ListAliasesProtectionBypass1,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.number(),
  createdBy: z.string(),
  scope: ListAliasesProtectionBypassScope$inboundSchema,
  expires: z.number().optional(),
});

/** @internal */
export type ListAliasesProtectionBypass1$Outbound = {
  createdAt: number;
  createdBy: string;
  scope: string;
  expires?: number | undefined;
};

/** @internal */
export const ListAliasesProtectionBypass1$outboundSchema: z.ZodType<
  ListAliasesProtectionBypass1$Outbound,
  z.ZodTypeDef,
  ListAliasesProtectionBypass1
> = z.object({
  createdAt: z.number(),
  createdBy: z.string(),
  scope: ListAliasesProtectionBypassScope$outboundSchema,
  expires: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAliasesProtectionBypass1$ {
  /** @deprecated use `ListAliasesProtectionBypass1$inboundSchema` instead. */
  export const inboundSchema = ListAliasesProtectionBypass1$inboundSchema;
  /** @deprecated use `ListAliasesProtectionBypass1$outboundSchema` instead. */
  export const outboundSchema = ListAliasesProtectionBypass1$outboundSchema;
  /** @deprecated use `ListAliasesProtectionBypass1$Outbound` instead. */
  export type Outbound = ListAliasesProtectionBypass1$Outbound;
}

export function listAliasesProtectionBypass1ToJSON(
  listAliasesProtectionBypass1: ListAliasesProtectionBypass1,
): string {
  return JSON.stringify(
    ListAliasesProtectionBypass1$outboundSchema.parse(
      listAliasesProtectionBypass1,
    ),
  );
}

export function listAliasesProtectionBypass1FromJSON(
  jsonString: string,
): SafeParseResult<ListAliasesProtectionBypass1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAliasesProtectionBypass1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAliasesProtectionBypass1' from JSON`,
  );
}

/** @internal */
export const ListAliasesProtectionBypass$inboundSchema: z.ZodType<
  ListAliasesProtectionBypass,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ListAliasesProtectionBypass2$inboundSchema),
  z.lazy(() => ListAliasesProtectionBypass4$inboundSchema),
  z.lazy(() => ListAliasesProtectionBypass1$inboundSchema),
  z.lazy(() => ListAliasesProtectionBypass3$inboundSchema),
]);

/** @internal */
export type ListAliasesProtectionBypass$Outbound =
  | ListAliasesProtectionBypass2$Outbound
  | ListAliasesProtectionBypass4$Outbound
  | ListAliasesProtectionBypass1$Outbound
  | ListAliasesProtectionBypass3$Outbound;

/** @internal */
export const ListAliasesProtectionBypass$outboundSchema: z.ZodType<
  ListAliasesProtectionBypass$Outbound,
  z.ZodTypeDef,
  ListAliasesProtectionBypass
> = z.union([
  z.lazy(() => ListAliasesProtectionBypass2$outboundSchema),
  z.lazy(() => ListAliasesProtectionBypass4$outboundSchema),
  z.lazy(() => ListAliasesProtectionBypass1$outboundSchema),
  z.lazy(() => ListAliasesProtectionBypass3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAliasesProtectionBypass$ {
  /** @deprecated use `ListAliasesProtectionBypass$inboundSchema` instead. */
  export const inboundSchema = ListAliasesProtectionBypass$inboundSchema;
  /** @deprecated use `ListAliasesProtectionBypass$outboundSchema` instead. */
  export const outboundSchema = ListAliasesProtectionBypass$outboundSchema;
  /** @deprecated use `ListAliasesProtectionBypass$Outbound` instead. */
  export type Outbound = ListAliasesProtectionBypass$Outbound;
}

export function listAliasesProtectionBypassToJSON(
  listAliasesProtectionBypass: ListAliasesProtectionBypass,
): string {
  return JSON.stringify(
    ListAliasesProtectionBypass$outboundSchema.parse(
      listAliasesProtectionBypass,
    ),
  );
}

export function listAliasesProtectionBypassFromJSON(
  jsonString: string,
): SafeParseResult<ListAliasesProtectionBypass, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAliasesProtectionBypass$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAliasesProtectionBypass' from JSON`,
  );
}

/** @internal */
export const ListAliasesDefaultApp$inboundSchema: z.ZodType<
  ListAliasesDefaultApp,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectId: z.string(),
});

/** @internal */
export type ListAliasesDefaultApp$Outbound = {
  projectId: string;
};

/** @internal */
export const ListAliasesDefaultApp$outboundSchema: z.ZodType<
  ListAliasesDefaultApp$Outbound,
  z.ZodTypeDef,
  ListAliasesDefaultApp
> = z.object({
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAliasesDefaultApp$ {
  /** @deprecated use `ListAliasesDefaultApp$inboundSchema` instead. */
  export const inboundSchema = ListAliasesDefaultApp$inboundSchema;
  /** @deprecated use `ListAliasesDefaultApp$outboundSchema` instead. */
  export const outboundSchema = ListAliasesDefaultApp$outboundSchema;
  /** @deprecated use `ListAliasesDefaultApp$Outbound` instead. */
  export type Outbound = ListAliasesDefaultApp$Outbound;
}

export function listAliasesDefaultAppToJSON(
  listAliasesDefaultApp: ListAliasesDefaultApp,
): string {
  return JSON.stringify(
    ListAliasesDefaultApp$outboundSchema.parse(listAliasesDefaultApp),
  );
}

export function listAliasesDefaultAppFromJSON(
  jsonString: string,
): SafeParseResult<ListAliasesDefaultApp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAliasesDefaultApp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAliasesDefaultApp' from JSON`,
  );
}

/** @internal */
export const ListAliasesApplications3$inboundSchema: z.ZodType<
  ListAliasesApplications3,
  z.ZodTypeDef,
  unknown
> = z.object({
  deploymentId: z.string().optional(),
  branchDeploymentId: z.string().optional(),
  fallbackDeploymentId: z.string().optional(),
  fallbackHost: z.string().optional(),
  branchAlias: z.string().optional(),
  projectId: z.string(),
});

/** @internal */
export type ListAliasesApplications3$Outbound = {
  deploymentId?: string | undefined;
  branchDeploymentId?: string | undefined;
  fallbackDeploymentId?: string | undefined;
  fallbackHost?: string | undefined;
  branchAlias?: string | undefined;
  projectId: string;
};

/** @internal */
export const ListAliasesApplications3$outboundSchema: z.ZodType<
  ListAliasesApplications3$Outbound,
  z.ZodTypeDef,
  ListAliasesApplications3
> = z.object({
  deploymentId: z.string().optional(),
  branchDeploymentId: z.string().optional(),
  fallbackDeploymentId: z.string().optional(),
  fallbackHost: z.string().optional(),
  branchAlias: z.string().optional(),
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAliasesApplications3$ {
  /** @deprecated use `ListAliasesApplications3$inboundSchema` instead. */
  export const inboundSchema = ListAliasesApplications3$inboundSchema;
  /** @deprecated use `ListAliasesApplications3$outboundSchema` instead. */
  export const outboundSchema = ListAliasesApplications3$outboundSchema;
  /** @deprecated use `ListAliasesApplications3$Outbound` instead. */
  export type Outbound = ListAliasesApplications3$Outbound;
}

export function listAliasesApplications3ToJSON(
  listAliasesApplications3: ListAliasesApplications3,
): string {
  return JSON.stringify(
    ListAliasesApplications3$outboundSchema.parse(listAliasesApplications3),
  );
}

export function listAliasesApplications3FromJSON(
  jsonString: string,
): SafeParseResult<ListAliasesApplications3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAliasesApplications3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAliasesApplications3' from JSON`,
  );
}

/** @internal */
export const ListAliasesApplications2$inboundSchema: z.ZodType<
  ListAliasesApplications2,
  z.ZodTypeDef,
  unknown
> = z.object({
  fallbackHost: z.string(),
  branchAlias: z.string(),
  projectId: z.string(),
});

/** @internal */
export type ListAliasesApplications2$Outbound = {
  fallbackHost: string;
  branchAlias: string;
  projectId: string;
};

/** @internal */
export const ListAliasesApplications2$outboundSchema: z.ZodType<
  ListAliasesApplications2$Outbound,
  z.ZodTypeDef,
  ListAliasesApplications2
> = z.object({
  fallbackHost: z.string(),
  branchAlias: z.string(),
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAliasesApplications2$ {
  /** @deprecated use `ListAliasesApplications2$inboundSchema` instead. */
  export const inboundSchema = ListAliasesApplications2$inboundSchema;
  /** @deprecated use `ListAliasesApplications2$outboundSchema` instead. */
  export const outboundSchema = ListAliasesApplications2$outboundSchema;
  /** @deprecated use `ListAliasesApplications2$Outbound` instead. */
  export type Outbound = ListAliasesApplications2$Outbound;
}

export function listAliasesApplications2ToJSON(
  listAliasesApplications2: ListAliasesApplications2,
): string {
  return JSON.stringify(
    ListAliasesApplications2$outboundSchema.parse(listAliasesApplications2),
  );
}

export function listAliasesApplications2FromJSON(
  jsonString: string,
): SafeParseResult<ListAliasesApplications2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAliasesApplications2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAliasesApplications2' from JSON`,
  );
}

/** @internal */
export const ListAliasesApplications1$inboundSchema: z.ZodType<
  ListAliasesApplications1,
  z.ZodTypeDef,
  unknown
> = z.object({
  fallbackHost: z.string(),
  projectId: z.string(),
});

/** @internal */
export type ListAliasesApplications1$Outbound = {
  fallbackHost: string;
  projectId: string;
};

/** @internal */
export const ListAliasesApplications1$outboundSchema: z.ZodType<
  ListAliasesApplications1$Outbound,
  z.ZodTypeDef,
  ListAliasesApplications1
> = z.object({
  fallbackHost: z.string(),
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAliasesApplications1$ {
  /** @deprecated use `ListAliasesApplications1$inboundSchema` instead. */
  export const inboundSchema = ListAliasesApplications1$inboundSchema;
  /** @deprecated use `ListAliasesApplications1$outboundSchema` instead. */
  export const outboundSchema = ListAliasesApplications1$outboundSchema;
  /** @deprecated use `ListAliasesApplications1$Outbound` instead. */
  export type Outbound = ListAliasesApplications1$Outbound;
}

export function listAliasesApplications1ToJSON(
  listAliasesApplications1: ListAliasesApplications1,
): string {
  return JSON.stringify(
    ListAliasesApplications1$outboundSchema.parse(listAliasesApplications1),
  );
}

export function listAliasesApplications1FromJSON(
  jsonString: string,
): SafeParseResult<ListAliasesApplications1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAliasesApplications1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAliasesApplications1' from JSON`,
  );
}

/** @internal */
export const ListAliasesApplications$inboundSchema: z.ZodType<
  ListAliasesApplications,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.array(z.lazy(() => ListAliasesApplications1$inboundSchema)),
  z.array(z.lazy(() => ListAliasesApplications2$inboundSchema)),
  z.array(z.lazy(() => ListAliasesApplications3$inboundSchema)),
]);

/** @internal */
export type ListAliasesApplications$Outbound =
  | Array<ListAliasesApplications1$Outbound>
  | Array<ListAliasesApplications2$Outbound>
  | Array<ListAliasesApplications3$Outbound>;

/** @internal */
export const ListAliasesApplications$outboundSchema: z.ZodType<
  ListAliasesApplications$Outbound,
  z.ZodTypeDef,
  ListAliasesApplications
> = z.union([
  z.array(z.lazy(() => ListAliasesApplications1$outboundSchema)),
  z.array(z.lazy(() => ListAliasesApplications2$outboundSchema)),
  z.array(z.lazy(() => ListAliasesApplications3$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAliasesApplications$ {
  /** @deprecated use `ListAliasesApplications$inboundSchema` instead. */
  export const inboundSchema = ListAliasesApplications$inboundSchema;
  /** @deprecated use `ListAliasesApplications$outboundSchema` instead. */
  export const outboundSchema = ListAliasesApplications$outboundSchema;
  /** @deprecated use `ListAliasesApplications$Outbound` instead. */
  export type Outbound = ListAliasesApplications$Outbound;
}

export function listAliasesApplicationsToJSON(
  listAliasesApplications: ListAliasesApplications,
): string {
  return JSON.stringify(
    ListAliasesApplications$outboundSchema.parse(listAliasesApplications),
  );
}

export function listAliasesApplicationsFromJSON(
  jsonString: string,
): SafeParseResult<ListAliasesApplications, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAliasesApplications$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAliasesApplications' from JSON`,
  );
}

/** @internal */
export const ListAliasesMicrofrontends$inboundSchema: z.ZodType<
  ListAliasesMicrofrontends,
  z.ZodTypeDef,
  unknown
> = z.object({
  defaultApp: z.lazy(() => ListAliasesDefaultApp$inboundSchema),
  applications: z.union([
    z.array(z.lazy(() => ListAliasesApplications1$inboundSchema)),
    z.array(z.lazy(() => ListAliasesApplications2$inboundSchema)),
    z.array(z.lazy(() => ListAliasesApplications3$inboundSchema)),
  ]),
});

/** @internal */
export type ListAliasesMicrofrontends$Outbound = {
  defaultApp: ListAliasesDefaultApp$Outbound;
  applications:
    | Array<ListAliasesApplications1$Outbound>
    | Array<ListAliasesApplications2$Outbound>
    | Array<ListAliasesApplications3$Outbound>;
};

/** @internal */
export const ListAliasesMicrofrontends$outboundSchema: z.ZodType<
  ListAliasesMicrofrontends$Outbound,
  z.ZodTypeDef,
  ListAliasesMicrofrontends
> = z.object({
  defaultApp: z.lazy(() => ListAliasesDefaultApp$outboundSchema),
  applications: z.union([
    z.array(z.lazy(() => ListAliasesApplications1$outboundSchema)),
    z.array(z.lazy(() => ListAliasesApplications2$outboundSchema)),
    z.array(z.lazy(() => ListAliasesApplications3$outboundSchema)),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAliasesMicrofrontends$ {
  /** @deprecated use `ListAliasesMicrofrontends$inboundSchema` instead. */
  export const inboundSchema = ListAliasesMicrofrontends$inboundSchema;
  /** @deprecated use `ListAliasesMicrofrontends$outboundSchema` instead. */
  export const outboundSchema = ListAliasesMicrofrontends$outboundSchema;
  /** @deprecated use `ListAliasesMicrofrontends$Outbound` instead. */
  export type Outbound = ListAliasesMicrofrontends$Outbound;
}

export function listAliasesMicrofrontendsToJSON(
  listAliasesMicrofrontends: ListAliasesMicrofrontends,
): string {
  return JSON.stringify(
    ListAliasesMicrofrontends$outboundSchema.parse(listAliasesMicrofrontends),
  );
}

export function listAliasesMicrofrontendsFromJSON(
  jsonString: string,
): SafeParseResult<ListAliasesMicrofrontends, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAliasesMicrofrontends$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAliasesMicrofrontends' from JSON`,
  );
}

/** @internal */
export const ListAliasesAliases$inboundSchema: z.ZodType<
  ListAliasesAliases,
  z.ZodTypeDef,
  unknown
> = z.object({
  alias: z.string(),
  created: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  createdAt: z.number().optional(),
  creator: z.lazy(() => ListAliasesCreator$inboundSchema).optional(),
  deletedAt: z.nullable(z.number()).optional(),
  deployment: z.lazy(() => ListAliasesDeployment$inboundSchema).optional(),
  deploymentId: z.nullable(z.string()),
  projectId: z.nullable(z.string()),
  redirect: z.nullable(z.string()).optional(),
  redirectStatusCode: z.nullable(z.number()).optional(),
  uid: z.string(),
  updatedAt: z.number().optional(),
  protectionBypass: z.record(
    z.union([
      z.lazy(() => ListAliasesProtectionBypass2$inboundSchema),
      z.lazy(() => ListAliasesProtectionBypass4$inboundSchema),
      z.lazy(() => ListAliasesProtectionBypass1$inboundSchema),
      z.lazy(() => ListAliasesProtectionBypass3$inboundSchema),
    ]),
  ).optional(),
  microfrontends: z.lazy(() => ListAliasesMicrofrontends$inboundSchema)
    .optional(),
});

/** @internal */
export type ListAliasesAliases$Outbound = {
  alias: string;
  created: string;
  createdAt?: number | undefined;
  creator?: ListAliasesCreator$Outbound | undefined;
  deletedAt?: number | null | undefined;
  deployment?: ListAliasesDeployment$Outbound | undefined;
  deploymentId: string | null;
  projectId: string | null;
  redirect?: string | null | undefined;
  redirectStatusCode?: number | null | undefined;
  uid: string;
  updatedAt?: number | undefined;
  protectionBypass?: {
    [k: string]:
      | ListAliasesProtectionBypass2$Outbound
      | ListAliasesProtectionBypass4$Outbound
      | ListAliasesProtectionBypass1$Outbound
      | ListAliasesProtectionBypass3$Outbound;
  } | undefined;
  microfrontends?: ListAliasesMicrofrontends$Outbound | undefined;
};

/** @internal */
export const ListAliasesAliases$outboundSchema: z.ZodType<
  ListAliasesAliases$Outbound,
  z.ZodTypeDef,
  ListAliasesAliases
> = z.object({
  alias: z.string(),
  created: z.date().transform(v => v.toISOString()),
  createdAt: z.number().optional(),
  creator: z.lazy(() => ListAliasesCreator$outboundSchema).optional(),
  deletedAt: z.nullable(z.number()).optional(),
  deployment: z.lazy(() => ListAliasesDeployment$outboundSchema).optional(),
  deploymentId: z.nullable(z.string()),
  projectId: z.nullable(z.string()),
  redirect: z.nullable(z.string()).optional(),
  redirectStatusCode: z.nullable(z.number()).optional(),
  uid: z.string(),
  updatedAt: z.number().optional(),
  protectionBypass: z.record(
    z.union([
      z.lazy(() => ListAliasesProtectionBypass2$outboundSchema),
      z.lazy(() => ListAliasesProtectionBypass4$outboundSchema),
      z.lazy(() => ListAliasesProtectionBypass1$outboundSchema),
      z.lazy(() => ListAliasesProtectionBypass3$outboundSchema),
    ]),
  ).optional(),
  microfrontends: z.lazy(() => ListAliasesMicrofrontends$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAliasesAliases$ {
  /** @deprecated use `ListAliasesAliases$inboundSchema` instead. */
  export const inboundSchema = ListAliasesAliases$inboundSchema;
  /** @deprecated use `ListAliasesAliases$outboundSchema` instead. */
  export const outboundSchema = ListAliasesAliases$outboundSchema;
  /** @deprecated use `ListAliasesAliases$Outbound` instead. */
  export type Outbound = ListAliasesAliases$Outbound;
}

export function listAliasesAliasesToJSON(
  listAliasesAliases: ListAliasesAliases,
): string {
  return JSON.stringify(
    ListAliasesAliases$outboundSchema.parse(listAliasesAliases),
  );
}

export function listAliasesAliasesFromJSON(
  jsonString: string,
): SafeParseResult<ListAliasesAliases, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAliasesAliases$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAliasesAliases' from JSON`,
  );
}

/** @internal */
export const ListAliasesResponseBody$inboundSchema: z.ZodType<
  ListAliasesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  aliases: z.array(z.lazy(() => ListAliasesAliases$inboundSchema)),
  pagination: Pagination$inboundSchema,
});

/** @internal */
export type ListAliasesResponseBody$Outbound = {
  aliases: Array<ListAliasesAliases$Outbound>;
  pagination: Pagination$Outbound;
};

/** @internal */
export const ListAliasesResponseBody$outboundSchema: z.ZodType<
  ListAliasesResponseBody$Outbound,
  z.ZodTypeDef,
  ListAliasesResponseBody
> = z.object({
  aliases: z.array(z.lazy(() => ListAliasesAliases$outboundSchema)),
  pagination: Pagination$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAliasesResponseBody$ {
  /** @deprecated use `ListAliasesResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListAliasesResponseBody$inboundSchema;
  /** @deprecated use `ListAliasesResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListAliasesResponseBody$outboundSchema;
  /** @deprecated use `ListAliasesResponseBody$Outbound` instead. */
  export type Outbound = ListAliasesResponseBody$Outbound;
}

export function listAliasesResponseBodyToJSON(
  listAliasesResponseBody: ListAliasesResponseBody,
): string {
  return JSON.stringify(
    ListAliasesResponseBody$outboundSchema.parse(listAliasesResponseBody),
  );
}

export function listAliasesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListAliasesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAliasesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAliasesResponseBody' from JSON`,
  );
}
