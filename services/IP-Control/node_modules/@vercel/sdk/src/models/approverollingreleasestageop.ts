/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type ApproveRollingReleaseStageRequestBody = {
  /**
   * The index of the stage to transition to
   */
  nextStageIndex: number;
  /**
   * The id of the canary deployment to approve for the next stage
   */
  canaryDeploymentId: string;
};

export type ApproveRollingReleaseStageRequest = {
  /**
   * Project ID or project name (URL-encoded)
   */
  idOrName: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
  requestBody?: ApproveRollingReleaseStageRequestBody | undefined;
};

/**
 * The current state of the rolling release
 */
export const ApproveRollingReleaseStageState = {
  Active: "ACTIVE",
  Complete: "COMPLETE",
  Aborted: "ABORTED",
} as const;
/**
 * The current state of the rolling release
 */
export type ApproveRollingReleaseStageState = ClosedEnum<
  typeof ApproveRollingReleaseStageState
>;

export const ApproveRollingReleaseStageTarget = {
  Staging: "staging",
  Production: "production",
} as const;
export type ApproveRollingReleaseStageTarget = ClosedEnum<
  typeof ApproveRollingReleaseStageTarget
>;

export const ApproveRollingReleaseStageSource = {
  ApiTriggerGitDeploy: "api-trigger-git-deploy",
  Cli: "cli",
  CloneRepo: "clone/repo",
  Git: "git",
  Import: "import",
  ImportRepo: "import/repo",
  Redeploy: "redeploy",
  V0Web: "v0-web",
} as const;
export type ApproveRollingReleaseStageSource = ClosedEnum<
  typeof ApproveRollingReleaseStageSource
>;

export const ApproveRollingReleaseStageReadyState = {
  Building: "BUILDING",
  Error: "ERROR",
  Initializing: "INITIALIZING",
  Queued: "QUEUED",
  Ready: "READY",
  Canceled: "CANCELED",
} as const;
export type ApproveRollingReleaseStageReadyState = ClosedEnum<
  typeof ApproveRollingReleaseStageReadyState
>;

/**
 * The current deployment receiving production traffic
 */
export type ApproveRollingReleaseStageCurrentDeployment = {
  id: string;
  name: string;
  url: string;
  target?: ApproveRollingReleaseStageTarget | null | undefined;
  source?: ApproveRollingReleaseStageSource | undefined;
  createdAt: number;
  readyState: ApproveRollingReleaseStageReadyState;
  readyStateAt?: number | undefined;
};

export const ApproveRollingReleaseStageRollingReleaseTarget = {
  Staging: "staging",
  Production: "production",
} as const;
export type ApproveRollingReleaseStageRollingReleaseTarget = ClosedEnum<
  typeof ApproveRollingReleaseStageRollingReleaseTarget
>;

export const ApproveRollingReleaseStageRollingReleaseSource = {
  ApiTriggerGitDeploy: "api-trigger-git-deploy",
  Cli: "cli",
  CloneRepo: "clone/repo",
  Git: "git",
  Import: "import",
  ImportRepo: "import/repo",
  Redeploy: "redeploy",
  V0Web: "v0-web",
} as const;
export type ApproveRollingReleaseStageRollingReleaseSource = ClosedEnum<
  typeof ApproveRollingReleaseStageRollingReleaseSource
>;

export const ApproveRollingReleaseStageRollingReleaseReadyState = {
  Building: "BUILDING",
  Error: "ERROR",
  Initializing: "INITIALIZING",
  Queued: "QUEUED",
  Ready: "READY",
  Canceled: "CANCELED",
} as const;
export type ApproveRollingReleaseStageRollingReleaseReadyState = ClosedEnum<
  typeof ApproveRollingReleaseStageRollingReleaseReadyState
>;

/**
 * The canary deployment being rolled out
 */
export type ApproveRollingReleaseStageCanaryDeployment = {
  id: string;
  name: string;
  url: string;
  target?: ApproveRollingReleaseStageRollingReleaseTarget | null | undefined;
  source?: ApproveRollingReleaseStageRollingReleaseSource | undefined;
  createdAt: number;
  readyState: ApproveRollingReleaseStageRollingReleaseReadyState;
  readyStateAt?: number | undefined;
};

/**
 * The advancement type of the rolling release
 */
export const ApproveRollingReleaseStageAdvancementType = {
  Automatic: "automatic",
  ManualApproval: "manual-approval",
} as const;
/**
 * The advancement type of the rolling release
 */
export type ApproveRollingReleaseStageAdvancementType = ClosedEnum<
  typeof ApproveRollingReleaseStageAdvancementType
>;

/**
 * All stages configured for this rolling release
 */
export type ApproveRollingReleaseStageStages = {
  /**
   * The zero-based index of the stage
   */
  index: number;
  /**
   * Whether or not this stage is the final stage (targetPercentage === 100)
   */
  isFinalStage: boolean;
  /**
   * The percentage of traffic to serve to the canary deployment (0-100)
   */
  targetPercentage: number;
  /**
   * Whether or not this stage requires manual approval to proceed
   */
  requireApproval: boolean;
  /**
   * Duration in seconds for automatic advancement, null for manual stages or the final stage
   */
  duration: number | null;
};

/**
 * The currently active stage, null if the rollout is aborted
 */
export type ApproveRollingReleaseStageActiveStage = {
  /**
   * The zero-based index of the stage
   */
  index: number;
  /**
   * Whether or not this stage is the final stage (targetPercentage === 100)
   */
  isFinalStage: boolean;
  /**
   * The percentage of traffic to serve to the canary deployment (0-100)
   */
  targetPercentage: number;
  /**
   * Whether or not this stage requires manual approval to proceed
   */
  requireApproval: boolean;
  /**
   * Duration in seconds for automatic advancement, null for manual stages or the final stage
   */
  duration: number | null;
};

/**
 * The next stage to be activated, null if not in ACTIVE state
 */
export type ApproveRollingReleaseStageNextStage = {
  /**
   * The zero-based index of the stage
   */
  index: number;
  /**
   * Whether or not this stage is the final stage (targetPercentage === 100)
   */
  isFinalStage: boolean;
  /**
   * The percentage of traffic to serve to the canary deployment (0-100)
   */
  targetPercentage: number;
  /**
   * Whether or not this stage requires manual approval to proceed
   */
  requireApproval: boolean;
  /**
   * Duration in seconds for automatic advancement, null for manual stages or the final stage
   */
  duration: number | null;
};

/**
 * Rolling release information including configuration and document details, or null if no rolling release exists
 */
export type ApproveRollingReleaseStageRollingRelease = {
  /**
   * The current state of the rolling release
   */
  state: ApproveRollingReleaseStageState;
  /**
   * The current deployment receiving production traffic
   */
  currentDeployment: ApproveRollingReleaseStageCurrentDeployment | null;
  /**
   * The canary deployment being rolled out
   */
  canaryDeployment: ApproveRollingReleaseStageCanaryDeployment | null;
  /**
   * The ID of a deployment queued for the next rolling release
   */
  queuedDeploymentId: string | null;
  /**
   * The advancement type of the rolling release
   */
  advancementType: ApproveRollingReleaseStageAdvancementType;
  /**
   * All stages configured for this rolling release
   */
  stages: Array<ApproveRollingReleaseStageStages>;
  /**
   * The currently active stage, null if the rollout is aborted
   */
  activeStage: ApproveRollingReleaseStageActiveStage | null;
  /**
   * The next stage to be activated, null if not in ACTIVE state
   */
  nextStage: ApproveRollingReleaseStageNextStage | null;
  /**
   * Unix timestamp in milliseconds when the rolling release started
   */
  startedAt: number;
  /**
   * Unix timestamp in milliseconds when the rolling release was last updated
   */
  updatedAt: number;
};

/**
 * The response format for rolling release endpoints that return rolling release information
 */
export type ApproveRollingReleaseStageResponseBody = {
  /**
   * Rolling release information including configuration and document details, or null if no rolling release exists
   */
  rollingRelease: ApproveRollingReleaseStageRollingRelease | null;
};

/** @internal */
export const ApproveRollingReleaseStageRequestBody$inboundSchema: z.ZodType<
  ApproveRollingReleaseStageRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  nextStageIndex: z.number(),
  canaryDeploymentId: z.string(),
});

/** @internal */
export type ApproveRollingReleaseStageRequestBody$Outbound = {
  nextStageIndex: number;
  canaryDeploymentId: string;
};

/** @internal */
export const ApproveRollingReleaseStageRequestBody$outboundSchema: z.ZodType<
  ApproveRollingReleaseStageRequestBody$Outbound,
  z.ZodTypeDef,
  ApproveRollingReleaseStageRequestBody
> = z.object({
  nextStageIndex: z.number(),
  canaryDeploymentId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApproveRollingReleaseStageRequestBody$ {
  /** @deprecated use `ApproveRollingReleaseStageRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    ApproveRollingReleaseStageRequestBody$inboundSchema;
  /** @deprecated use `ApproveRollingReleaseStageRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    ApproveRollingReleaseStageRequestBody$outboundSchema;
  /** @deprecated use `ApproveRollingReleaseStageRequestBody$Outbound` instead. */
  export type Outbound = ApproveRollingReleaseStageRequestBody$Outbound;
}

export function approveRollingReleaseStageRequestBodyToJSON(
  approveRollingReleaseStageRequestBody: ApproveRollingReleaseStageRequestBody,
): string {
  return JSON.stringify(
    ApproveRollingReleaseStageRequestBody$outboundSchema.parse(
      approveRollingReleaseStageRequestBody,
    ),
  );
}

export function approveRollingReleaseStageRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ApproveRollingReleaseStageRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApproveRollingReleaseStageRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApproveRollingReleaseStageRequestBody' from JSON`,
  );
}

/** @internal */
export const ApproveRollingReleaseStageRequest$inboundSchema: z.ZodType<
  ApproveRollingReleaseStageRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  idOrName: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  RequestBody: z.lazy(() => ApproveRollingReleaseStageRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type ApproveRollingReleaseStageRequest$Outbound = {
  idOrName: string;
  teamId?: string | undefined;
  slug?: string | undefined;
  RequestBody?: ApproveRollingReleaseStageRequestBody$Outbound | undefined;
};

/** @internal */
export const ApproveRollingReleaseStageRequest$outboundSchema: z.ZodType<
  ApproveRollingReleaseStageRequest$Outbound,
  z.ZodTypeDef,
  ApproveRollingReleaseStageRequest
> = z.object({
  idOrName: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  requestBody: z.lazy(() =>
    ApproveRollingReleaseStageRequestBody$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApproveRollingReleaseStageRequest$ {
  /** @deprecated use `ApproveRollingReleaseStageRequest$inboundSchema` instead. */
  export const inboundSchema = ApproveRollingReleaseStageRequest$inboundSchema;
  /** @deprecated use `ApproveRollingReleaseStageRequest$outboundSchema` instead. */
  export const outboundSchema =
    ApproveRollingReleaseStageRequest$outboundSchema;
  /** @deprecated use `ApproveRollingReleaseStageRequest$Outbound` instead. */
  export type Outbound = ApproveRollingReleaseStageRequest$Outbound;
}

export function approveRollingReleaseStageRequestToJSON(
  approveRollingReleaseStageRequest: ApproveRollingReleaseStageRequest,
): string {
  return JSON.stringify(
    ApproveRollingReleaseStageRequest$outboundSchema.parse(
      approveRollingReleaseStageRequest,
    ),
  );
}

export function approveRollingReleaseStageRequestFromJSON(
  jsonString: string,
): SafeParseResult<ApproveRollingReleaseStageRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApproveRollingReleaseStageRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApproveRollingReleaseStageRequest' from JSON`,
  );
}

/** @internal */
export const ApproveRollingReleaseStageState$inboundSchema: z.ZodNativeEnum<
  typeof ApproveRollingReleaseStageState
> = z.nativeEnum(ApproveRollingReleaseStageState);

/** @internal */
export const ApproveRollingReleaseStageState$outboundSchema: z.ZodNativeEnum<
  typeof ApproveRollingReleaseStageState
> = ApproveRollingReleaseStageState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApproveRollingReleaseStageState$ {
  /** @deprecated use `ApproveRollingReleaseStageState$inboundSchema` instead. */
  export const inboundSchema = ApproveRollingReleaseStageState$inboundSchema;
  /** @deprecated use `ApproveRollingReleaseStageState$outboundSchema` instead. */
  export const outboundSchema = ApproveRollingReleaseStageState$outboundSchema;
}

/** @internal */
export const ApproveRollingReleaseStageTarget$inboundSchema: z.ZodNativeEnum<
  typeof ApproveRollingReleaseStageTarget
> = z.nativeEnum(ApproveRollingReleaseStageTarget);

/** @internal */
export const ApproveRollingReleaseStageTarget$outboundSchema: z.ZodNativeEnum<
  typeof ApproveRollingReleaseStageTarget
> = ApproveRollingReleaseStageTarget$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApproveRollingReleaseStageTarget$ {
  /** @deprecated use `ApproveRollingReleaseStageTarget$inboundSchema` instead. */
  export const inboundSchema = ApproveRollingReleaseStageTarget$inboundSchema;
  /** @deprecated use `ApproveRollingReleaseStageTarget$outboundSchema` instead. */
  export const outboundSchema = ApproveRollingReleaseStageTarget$outboundSchema;
}

/** @internal */
export const ApproveRollingReleaseStageSource$inboundSchema: z.ZodNativeEnum<
  typeof ApproveRollingReleaseStageSource
> = z.nativeEnum(ApproveRollingReleaseStageSource);

/** @internal */
export const ApproveRollingReleaseStageSource$outboundSchema: z.ZodNativeEnum<
  typeof ApproveRollingReleaseStageSource
> = ApproveRollingReleaseStageSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApproveRollingReleaseStageSource$ {
  /** @deprecated use `ApproveRollingReleaseStageSource$inboundSchema` instead. */
  export const inboundSchema = ApproveRollingReleaseStageSource$inboundSchema;
  /** @deprecated use `ApproveRollingReleaseStageSource$outboundSchema` instead. */
  export const outboundSchema = ApproveRollingReleaseStageSource$outboundSchema;
}

/** @internal */
export const ApproveRollingReleaseStageReadyState$inboundSchema:
  z.ZodNativeEnum<typeof ApproveRollingReleaseStageReadyState> = z.nativeEnum(
    ApproveRollingReleaseStageReadyState,
  );

/** @internal */
export const ApproveRollingReleaseStageReadyState$outboundSchema:
  z.ZodNativeEnum<typeof ApproveRollingReleaseStageReadyState> =
    ApproveRollingReleaseStageReadyState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApproveRollingReleaseStageReadyState$ {
  /** @deprecated use `ApproveRollingReleaseStageReadyState$inboundSchema` instead. */
  export const inboundSchema =
    ApproveRollingReleaseStageReadyState$inboundSchema;
  /** @deprecated use `ApproveRollingReleaseStageReadyState$outboundSchema` instead. */
  export const outboundSchema =
    ApproveRollingReleaseStageReadyState$outboundSchema;
}

/** @internal */
export const ApproveRollingReleaseStageCurrentDeployment$inboundSchema:
  z.ZodType<
    ApproveRollingReleaseStageCurrentDeployment,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string(),
    name: z.string(),
    url: z.string(),
    target: z.nullable(ApproveRollingReleaseStageTarget$inboundSchema)
      .optional(),
    source: ApproveRollingReleaseStageSource$inboundSchema.optional(),
    createdAt: z.number(),
    readyState: ApproveRollingReleaseStageReadyState$inboundSchema,
    readyStateAt: z.number().optional(),
  });

/** @internal */
export type ApproveRollingReleaseStageCurrentDeployment$Outbound = {
  id: string;
  name: string;
  url: string;
  target?: string | null | undefined;
  source?: string | undefined;
  createdAt: number;
  readyState: string;
  readyStateAt?: number | undefined;
};

/** @internal */
export const ApproveRollingReleaseStageCurrentDeployment$outboundSchema:
  z.ZodType<
    ApproveRollingReleaseStageCurrentDeployment$Outbound,
    z.ZodTypeDef,
    ApproveRollingReleaseStageCurrentDeployment
  > = z.object({
    id: z.string(),
    name: z.string(),
    url: z.string(),
    target: z.nullable(ApproveRollingReleaseStageTarget$outboundSchema)
      .optional(),
    source: ApproveRollingReleaseStageSource$outboundSchema.optional(),
    createdAt: z.number(),
    readyState: ApproveRollingReleaseStageReadyState$outboundSchema,
    readyStateAt: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApproveRollingReleaseStageCurrentDeployment$ {
  /** @deprecated use `ApproveRollingReleaseStageCurrentDeployment$inboundSchema` instead. */
  export const inboundSchema =
    ApproveRollingReleaseStageCurrentDeployment$inboundSchema;
  /** @deprecated use `ApproveRollingReleaseStageCurrentDeployment$outboundSchema` instead. */
  export const outboundSchema =
    ApproveRollingReleaseStageCurrentDeployment$outboundSchema;
  /** @deprecated use `ApproveRollingReleaseStageCurrentDeployment$Outbound` instead. */
  export type Outbound = ApproveRollingReleaseStageCurrentDeployment$Outbound;
}

export function approveRollingReleaseStageCurrentDeploymentToJSON(
  approveRollingReleaseStageCurrentDeployment:
    ApproveRollingReleaseStageCurrentDeployment,
): string {
  return JSON.stringify(
    ApproveRollingReleaseStageCurrentDeployment$outboundSchema.parse(
      approveRollingReleaseStageCurrentDeployment,
    ),
  );
}

export function approveRollingReleaseStageCurrentDeploymentFromJSON(
  jsonString: string,
): SafeParseResult<
  ApproveRollingReleaseStageCurrentDeployment,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ApproveRollingReleaseStageCurrentDeployment$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ApproveRollingReleaseStageCurrentDeployment' from JSON`,
  );
}

/** @internal */
export const ApproveRollingReleaseStageRollingReleaseTarget$inboundSchema:
  z.ZodNativeEnum<typeof ApproveRollingReleaseStageRollingReleaseTarget> = z
    .nativeEnum(ApproveRollingReleaseStageRollingReleaseTarget);

/** @internal */
export const ApproveRollingReleaseStageRollingReleaseTarget$outboundSchema:
  z.ZodNativeEnum<typeof ApproveRollingReleaseStageRollingReleaseTarget> =
    ApproveRollingReleaseStageRollingReleaseTarget$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApproveRollingReleaseStageRollingReleaseTarget$ {
  /** @deprecated use `ApproveRollingReleaseStageRollingReleaseTarget$inboundSchema` instead. */
  export const inboundSchema =
    ApproveRollingReleaseStageRollingReleaseTarget$inboundSchema;
  /** @deprecated use `ApproveRollingReleaseStageRollingReleaseTarget$outboundSchema` instead. */
  export const outboundSchema =
    ApproveRollingReleaseStageRollingReleaseTarget$outboundSchema;
}

/** @internal */
export const ApproveRollingReleaseStageRollingReleaseSource$inboundSchema:
  z.ZodNativeEnum<typeof ApproveRollingReleaseStageRollingReleaseSource> = z
    .nativeEnum(ApproveRollingReleaseStageRollingReleaseSource);

/** @internal */
export const ApproveRollingReleaseStageRollingReleaseSource$outboundSchema:
  z.ZodNativeEnum<typeof ApproveRollingReleaseStageRollingReleaseSource> =
    ApproveRollingReleaseStageRollingReleaseSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApproveRollingReleaseStageRollingReleaseSource$ {
  /** @deprecated use `ApproveRollingReleaseStageRollingReleaseSource$inboundSchema` instead. */
  export const inboundSchema =
    ApproveRollingReleaseStageRollingReleaseSource$inboundSchema;
  /** @deprecated use `ApproveRollingReleaseStageRollingReleaseSource$outboundSchema` instead. */
  export const outboundSchema =
    ApproveRollingReleaseStageRollingReleaseSource$outboundSchema;
}

/** @internal */
export const ApproveRollingReleaseStageRollingReleaseReadyState$inboundSchema:
  z.ZodNativeEnum<typeof ApproveRollingReleaseStageRollingReleaseReadyState> = z
    .nativeEnum(ApproveRollingReleaseStageRollingReleaseReadyState);

/** @internal */
export const ApproveRollingReleaseStageRollingReleaseReadyState$outboundSchema:
  z.ZodNativeEnum<typeof ApproveRollingReleaseStageRollingReleaseReadyState> =
    ApproveRollingReleaseStageRollingReleaseReadyState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApproveRollingReleaseStageRollingReleaseReadyState$ {
  /** @deprecated use `ApproveRollingReleaseStageRollingReleaseReadyState$inboundSchema` instead. */
  export const inboundSchema =
    ApproveRollingReleaseStageRollingReleaseReadyState$inboundSchema;
  /** @deprecated use `ApproveRollingReleaseStageRollingReleaseReadyState$outboundSchema` instead. */
  export const outboundSchema =
    ApproveRollingReleaseStageRollingReleaseReadyState$outboundSchema;
}

/** @internal */
export const ApproveRollingReleaseStageCanaryDeployment$inboundSchema:
  z.ZodType<ApproveRollingReleaseStageCanaryDeployment, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string(),
      name: z.string(),
      url: z.string(),
      target: z.nullable(
        ApproveRollingReleaseStageRollingReleaseTarget$inboundSchema,
      ).optional(),
      source: ApproveRollingReleaseStageRollingReleaseSource$inboundSchema
        .optional(),
      createdAt: z.number(),
      readyState:
        ApproveRollingReleaseStageRollingReleaseReadyState$inboundSchema,
      readyStateAt: z.number().optional(),
    });

/** @internal */
export type ApproveRollingReleaseStageCanaryDeployment$Outbound = {
  id: string;
  name: string;
  url: string;
  target?: string | null | undefined;
  source?: string | undefined;
  createdAt: number;
  readyState: string;
  readyStateAt?: number | undefined;
};

/** @internal */
export const ApproveRollingReleaseStageCanaryDeployment$outboundSchema:
  z.ZodType<
    ApproveRollingReleaseStageCanaryDeployment$Outbound,
    z.ZodTypeDef,
    ApproveRollingReleaseStageCanaryDeployment
  > = z.object({
    id: z.string(),
    name: z.string(),
    url: z.string(),
    target: z.nullable(
      ApproveRollingReleaseStageRollingReleaseTarget$outboundSchema,
    ).optional(),
    source: ApproveRollingReleaseStageRollingReleaseSource$outboundSchema
      .optional(),
    createdAt: z.number(),
    readyState:
      ApproveRollingReleaseStageRollingReleaseReadyState$outboundSchema,
    readyStateAt: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApproveRollingReleaseStageCanaryDeployment$ {
  /** @deprecated use `ApproveRollingReleaseStageCanaryDeployment$inboundSchema` instead. */
  export const inboundSchema =
    ApproveRollingReleaseStageCanaryDeployment$inboundSchema;
  /** @deprecated use `ApproveRollingReleaseStageCanaryDeployment$outboundSchema` instead. */
  export const outboundSchema =
    ApproveRollingReleaseStageCanaryDeployment$outboundSchema;
  /** @deprecated use `ApproveRollingReleaseStageCanaryDeployment$Outbound` instead. */
  export type Outbound = ApproveRollingReleaseStageCanaryDeployment$Outbound;
}

export function approveRollingReleaseStageCanaryDeploymentToJSON(
  approveRollingReleaseStageCanaryDeployment:
    ApproveRollingReleaseStageCanaryDeployment,
): string {
  return JSON.stringify(
    ApproveRollingReleaseStageCanaryDeployment$outboundSchema.parse(
      approveRollingReleaseStageCanaryDeployment,
    ),
  );
}

export function approveRollingReleaseStageCanaryDeploymentFromJSON(
  jsonString: string,
): SafeParseResult<
  ApproveRollingReleaseStageCanaryDeployment,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ApproveRollingReleaseStageCanaryDeployment$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ApproveRollingReleaseStageCanaryDeployment' from JSON`,
  );
}

/** @internal */
export const ApproveRollingReleaseStageAdvancementType$inboundSchema:
  z.ZodNativeEnum<typeof ApproveRollingReleaseStageAdvancementType> = z
    .nativeEnum(ApproveRollingReleaseStageAdvancementType);

/** @internal */
export const ApproveRollingReleaseStageAdvancementType$outboundSchema:
  z.ZodNativeEnum<typeof ApproveRollingReleaseStageAdvancementType> =
    ApproveRollingReleaseStageAdvancementType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApproveRollingReleaseStageAdvancementType$ {
  /** @deprecated use `ApproveRollingReleaseStageAdvancementType$inboundSchema` instead. */
  export const inboundSchema =
    ApproveRollingReleaseStageAdvancementType$inboundSchema;
  /** @deprecated use `ApproveRollingReleaseStageAdvancementType$outboundSchema` instead. */
  export const outboundSchema =
    ApproveRollingReleaseStageAdvancementType$outboundSchema;
}

/** @internal */
export const ApproveRollingReleaseStageStages$inboundSchema: z.ZodType<
  ApproveRollingReleaseStageStages,
  z.ZodTypeDef,
  unknown
> = z.object({
  index: z.number(),
  isFinalStage: z.boolean(),
  targetPercentage: z.number(),
  requireApproval: z.boolean(),
  duration: z.nullable(z.number()),
});

/** @internal */
export type ApproveRollingReleaseStageStages$Outbound = {
  index: number;
  isFinalStage: boolean;
  targetPercentage: number;
  requireApproval: boolean;
  duration: number | null;
};

/** @internal */
export const ApproveRollingReleaseStageStages$outboundSchema: z.ZodType<
  ApproveRollingReleaseStageStages$Outbound,
  z.ZodTypeDef,
  ApproveRollingReleaseStageStages
> = z.object({
  index: z.number(),
  isFinalStage: z.boolean(),
  targetPercentage: z.number(),
  requireApproval: z.boolean(),
  duration: z.nullable(z.number()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApproveRollingReleaseStageStages$ {
  /** @deprecated use `ApproveRollingReleaseStageStages$inboundSchema` instead. */
  export const inboundSchema = ApproveRollingReleaseStageStages$inboundSchema;
  /** @deprecated use `ApproveRollingReleaseStageStages$outboundSchema` instead. */
  export const outboundSchema = ApproveRollingReleaseStageStages$outboundSchema;
  /** @deprecated use `ApproveRollingReleaseStageStages$Outbound` instead. */
  export type Outbound = ApproveRollingReleaseStageStages$Outbound;
}

export function approveRollingReleaseStageStagesToJSON(
  approveRollingReleaseStageStages: ApproveRollingReleaseStageStages,
): string {
  return JSON.stringify(
    ApproveRollingReleaseStageStages$outboundSchema.parse(
      approveRollingReleaseStageStages,
    ),
  );
}

export function approveRollingReleaseStageStagesFromJSON(
  jsonString: string,
): SafeParseResult<ApproveRollingReleaseStageStages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApproveRollingReleaseStageStages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApproveRollingReleaseStageStages' from JSON`,
  );
}

/** @internal */
export const ApproveRollingReleaseStageActiveStage$inboundSchema: z.ZodType<
  ApproveRollingReleaseStageActiveStage,
  z.ZodTypeDef,
  unknown
> = z.object({
  index: z.number(),
  isFinalStage: z.boolean(),
  targetPercentage: z.number(),
  requireApproval: z.boolean(),
  duration: z.nullable(z.number()),
});

/** @internal */
export type ApproveRollingReleaseStageActiveStage$Outbound = {
  index: number;
  isFinalStage: boolean;
  targetPercentage: number;
  requireApproval: boolean;
  duration: number | null;
};

/** @internal */
export const ApproveRollingReleaseStageActiveStage$outboundSchema: z.ZodType<
  ApproveRollingReleaseStageActiveStage$Outbound,
  z.ZodTypeDef,
  ApproveRollingReleaseStageActiveStage
> = z.object({
  index: z.number(),
  isFinalStage: z.boolean(),
  targetPercentage: z.number(),
  requireApproval: z.boolean(),
  duration: z.nullable(z.number()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApproveRollingReleaseStageActiveStage$ {
  /** @deprecated use `ApproveRollingReleaseStageActiveStage$inboundSchema` instead. */
  export const inboundSchema =
    ApproveRollingReleaseStageActiveStage$inboundSchema;
  /** @deprecated use `ApproveRollingReleaseStageActiveStage$outboundSchema` instead. */
  export const outboundSchema =
    ApproveRollingReleaseStageActiveStage$outboundSchema;
  /** @deprecated use `ApproveRollingReleaseStageActiveStage$Outbound` instead. */
  export type Outbound = ApproveRollingReleaseStageActiveStage$Outbound;
}

export function approveRollingReleaseStageActiveStageToJSON(
  approveRollingReleaseStageActiveStage: ApproveRollingReleaseStageActiveStage,
): string {
  return JSON.stringify(
    ApproveRollingReleaseStageActiveStage$outboundSchema.parse(
      approveRollingReleaseStageActiveStage,
    ),
  );
}

export function approveRollingReleaseStageActiveStageFromJSON(
  jsonString: string,
): SafeParseResult<ApproveRollingReleaseStageActiveStage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApproveRollingReleaseStageActiveStage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApproveRollingReleaseStageActiveStage' from JSON`,
  );
}

/** @internal */
export const ApproveRollingReleaseStageNextStage$inboundSchema: z.ZodType<
  ApproveRollingReleaseStageNextStage,
  z.ZodTypeDef,
  unknown
> = z.object({
  index: z.number(),
  isFinalStage: z.boolean(),
  targetPercentage: z.number(),
  requireApproval: z.boolean(),
  duration: z.nullable(z.number()),
});

/** @internal */
export type ApproveRollingReleaseStageNextStage$Outbound = {
  index: number;
  isFinalStage: boolean;
  targetPercentage: number;
  requireApproval: boolean;
  duration: number | null;
};

/** @internal */
export const ApproveRollingReleaseStageNextStage$outboundSchema: z.ZodType<
  ApproveRollingReleaseStageNextStage$Outbound,
  z.ZodTypeDef,
  ApproveRollingReleaseStageNextStage
> = z.object({
  index: z.number(),
  isFinalStage: z.boolean(),
  targetPercentage: z.number(),
  requireApproval: z.boolean(),
  duration: z.nullable(z.number()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApproveRollingReleaseStageNextStage$ {
  /** @deprecated use `ApproveRollingReleaseStageNextStage$inboundSchema` instead. */
  export const inboundSchema =
    ApproveRollingReleaseStageNextStage$inboundSchema;
  /** @deprecated use `ApproveRollingReleaseStageNextStage$outboundSchema` instead. */
  export const outboundSchema =
    ApproveRollingReleaseStageNextStage$outboundSchema;
  /** @deprecated use `ApproveRollingReleaseStageNextStage$Outbound` instead. */
  export type Outbound = ApproveRollingReleaseStageNextStage$Outbound;
}

export function approveRollingReleaseStageNextStageToJSON(
  approveRollingReleaseStageNextStage: ApproveRollingReleaseStageNextStage,
): string {
  return JSON.stringify(
    ApproveRollingReleaseStageNextStage$outboundSchema.parse(
      approveRollingReleaseStageNextStage,
    ),
  );
}

export function approveRollingReleaseStageNextStageFromJSON(
  jsonString: string,
): SafeParseResult<ApproveRollingReleaseStageNextStage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApproveRollingReleaseStageNextStage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApproveRollingReleaseStageNextStage' from JSON`,
  );
}

/** @internal */
export const ApproveRollingReleaseStageRollingRelease$inboundSchema: z.ZodType<
  ApproveRollingReleaseStageRollingRelease,
  z.ZodTypeDef,
  unknown
> = z.object({
  state: ApproveRollingReleaseStageState$inboundSchema,
  currentDeployment: z.nullable(
    z.lazy(() => ApproveRollingReleaseStageCurrentDeployment$inboundSchema),
  ),
  canaryDeployment: z.nullable(
    z.lazy(() => ApproveRollingReleaseStageCanaryDeployment$inboundSchema),
  ),
  queuedDeploymentId: z.nullable(z.string()),
  advancementType: ApproveRollingReleaseStageAdvancementType$inboundSchema,
  stages: z.array(z.lazy(() => ApproveRollingReleaseStageStages$inboundSchema)),
  activeStage: z.nullable(
    z.lazy(() => ApproveRollingReleaseStageActiveStage$inboundSchema),
  ),
  nextStage: z.nullable(
    z.lazy(() => ApproveRollingReleaseStageNextStage$inboundSchema),
  ),
  startedAt: z.number(),
  updatedAt: z.number(),
});

/** @internal */
export type ApproveRollingReleaseStageRollingRelease$Outbound = {
  state: string;
  currentDeployment:
    | ApproveRollingReleaseStageCurrentDeployment$Outbound
    | null;
  canaryDeployment: ApproveRollingReleaseStageCanaryDeployment$Outbound | null;
  queuedDeploymentId: string | null;
  advancementType: string;
  stages: Array<ApproveRollingReleaseStageStages$Outbound>;
  activeStage: ApproveRollingReleaseStageActiveStage$Outbound | null;
  nextStage: ApproveRollingReleaseStageNextStage$Outbound | null;
  startedAt: number;
  updatedAt: number;
};

/** @internal */
export const ApproveRollingReleaseStageRollingRelease$outboundSchema: z.ZodType<
  ApproveRollingReleaseStageRollingRelease$Outbound,
  z.ZodTypeDef,
  ApproveRollingReleaseStageRollingRelease
> = z.object({
  state: ApproveRollingReleaseStageState$outboundSchema,
  currentDeployment: z.nullable(
    z.lazy(() => ApproveRollingReleaseStageCurrentDeployment$outboundSchema),
  ),
  canaryDeployment: z.nullable(
    z.lazy(() => ApproveRollingReleaseStageCanaryDeployment$outboundSchema),
  ),
  queuedDeploymentId: z.nullable(z.string()),
  advancementType: ApproveRollingReleaseStageAdvancementType$outboundSchema,
  stages: z.array(
    z.lazy(() => ApproveRollingReleaseStageStages$outboundSchema),
  ),
  activeStage: z.nullable(
    z.lazy(() => ApproveRollingReleaseStageActiveStage$outboundSchema),
  ),
  nextStage: z.nullable(
    z.lazy(() => ApproveRollingReleaseStageNextStage$outboundSchema),
  ),
  startedAt: z.number(),
  updatedAt: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApproveRollingReleaseStageRollingRelease$ {
  /** @deprecated use `ApproveRollingReleaseStageRollingRelease$inboundSchema` instead. */
  export const inboundSchema =
    ApproveRollingReleaseStageRollingRelease$inboundSchema;
  /** @deprecated use `ApproveRollingReleaseStageRollingRelease$outboundSchema` instead. */
  export const outboundSchema =
    ApproveRollingReleaseStageRollingRelease$outboundSchema;
  /** @deprecated use `ApproveRollingReleaseStageRollingRelease$Outbound` instead. */
  export type Outbound = ApproveRollingReleaseStageRollingRelease$Outbound;
}

export function approveRollingReleaseStageRollingReleaseToJSON(
  approveRollingReleaseStageRollingRelease:
    ApproveRollingReleaseStageRollingRelease,
): string {
  return JSON.stringify(
    ApproveRollingReleaseStageRollingRelease$outboundSchema.parse(
      approveRollingReleaseStageRollingRelease,
    ),
  );
}

export function approveRollingReleaseStageRollingReleaseFromJSON(
  jsonString: string,
): SafeParseResult<
  ApproveRollingReleaseStageRollingRelease,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ApproveRollingReleaseStageRollingRelease$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ApproveRollingReleaseStageRollingRelease' from JSON`,
  );
}

/** @internal */
export const ApproveRollingReleaseStageResponseBody$inboundSchema: z.ZodType<
  ApproveRollingReleaseStageResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  rollingRelease: z.nullable(
    z.lazy(() => ApproveRollingReleaseStageRollingRelease$inboundSchema),
  ),
});

/** @internal */
export type ApproveRollingReleaseStageResponseBody$Outbound = {
  rollingRelease: ApproveRollingReleaseStageRollingRelease$Outbound | null;
};

/** @internal */
export const ApproveRollingReleaseStageResponseBody$outboundSchema: z.ZodType<
  ApproveRollingReleaseStageResponseBody$Outbound,
  z.ZodTypeDef,
  ApproveRollingReleaseStageResponseBody
> = z.object({
  rollingRelease: z.nullable(
    z.lazy(() => ApproveRollingReleaseStageRollingRelease$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApproveRollingReleaseStageResponseBody$ {
  /** @deprecated use `ApproveRollingReleaseStageResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ApproveRollingReleaseStageResponseBody$inboundSchema;
  /** @deprecated use `ApproveRollingReleaseStageResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ApproveRollingReleaseStageResponseBody$outboundSchema;
  /** @deprecated use `ApproveRollingReleaseStageResponseBody$Outbound` instead. */
  export type Outbound = ApproveRollingReleaseStageResponseBody$Outbound;
}

export function approveRollingReleaseStageResponseBodyToJSON(
  approveRollingReleaseStageResponseBody:
    ApproveRollingReleaseStageResponseBody,
): string {
  return JSON.stringify(
    ApproveRollingReleaseStageResponseBody$outboundSchema.parse(
      approveRollingReleaseStageResponseBody,
    ),
  );
}

export function approveRollingReleaseStageResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ApproveRollingReleaseStageResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApproveRollingReleaseStageResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApproveRollingReleaseStageResponseBody' from JSON`,
  );
}
