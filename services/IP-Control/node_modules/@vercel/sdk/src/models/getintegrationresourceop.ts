/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetIntegrationResourceRequest = {
  /**
   * The ID of the integration configuration (installation) the resource belongs to
   */
  integrationConfigurationId: string;
  /**
   * The ID provided by the 3rd party provider for the given resource
   */
  resourceId: string;
};

/**
 * The current status of the resource
 */
export const GetIntegrationResourceStatus = {
  Ready: "ready",
  Pending: "pending",
  Suspended: "suspended",
  Resumed: "resumed",
  Uninstalled: "uninstalled",
  Error: "error",
} as const;
/**
 * The current status of the resource
 */
export type GetIntegrationResourceStatus = ClosedEnum<
  typeof GetIntegrationResourceStatus
>;

export type Experimentation = {
  edgeConfigSyncingEnabled?: boolean | undefined;
  edgeConfigId?: string | undefined;
  edgeConfigTokenId?: string | undefined;
};

/**
 * Any settings provided for the resource to support its product's protocols
 */
export type ProtocolSettings = {
  experimentation?: Experimentation | undefined;
};

export const GetIntegrationResourceLevel = {
  Error: "error",
  Info: "info",
  Warn: "warn",
} as const;
export type GetIntegrationResourceLevel = ClosedEnum<
  typeof GetIntegrationResourceLevel
>;

/**
 * The notification, if set, displayed to the user when viewing the resource in Vercel
 */
export type GetIntegrationResourceNotification = {
  level: GetIntegrationResourceLevel;
  title: string;
  message?: string | undefined;
  href?: string | undefined;
};

export type GetIntegrationResourceMetadata =
  | string
  | number
  | boolean
  | Array<string>
  | Array<number>;

export type GetIntegrationResourceResponseBody = {
  /**
   * The ID provided by the 3rd party provider for the given resource
   */
  id: string;
  /**
   * The ID assigned by Vercel for the given resource
   */
  internalId: string;
  /**
   * The name of the resource as it is recorded in Vercel
   */
  name: string;
  /**
   * The current status of the resource
   */
  status?: GetIntegrationResourceStatus | undefined;
  /**
   * The ID of the product the resource is derived from
   */
  productId: string;
  /**
   * Any settings provided for the resource to support its product's protocols
   */
  protocolSettings?: ProtocolSettings | undefined;
  /**
   * The notification, if set, displayed to the user when viewing the resource in Vercel
   */
  notification?: GetIntegrationResourceNotification | undefined;
  /**
   * The ID of the billing plan the resource is subscribed to, if applicable
   */
  billingPlanId?: string | undefined;
  /**
   * The configured metadata for the resource as defined by its product's Metadata Schema
   */
  metadata?: {
    [k: string]: string | number | boolean | Array<string> | Array<number>;
  } | undefined;
};

/** @internal */
export const GetIntegrationResourceRequest$inboundSchema: z.ZodType<
  GetIntegrationResourceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  integrationConfigurationId: z.string(),
  resourceId: z.string(),
});

/** @internal */
export type GetIntegrationResourceRequest$Outbound = {
  integrationConfigurationId: string;
  resourceId: string;
};

/** @internal */
export const GetIntegrationResourceRequest$outboundSchema: z.ZodType<
  GetIntegrationResourceRequest$Outbound,
  z.ZodTypeDef,
  GetIntegrationResourceRequest
> = z.object({
  integrationConfigurationId: z.string(),
  resourceId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIntegrationResourceRequest$ {
  /** @deprecated use `GetIntegrationResourceRequest$inboundSchema` instead. */
  export const inboundSchema = GetIntegrationResourceRequest$inboundSchema;
  /** @deprecated use `GetIntegrationResourceRequest$outboundSchema` instead. */
  export const outboundSchema = GetIntegrationResourceRequest$outboundSchema;
  /** @deprecated use `GetIntegrationResourceRequest$Outbound` instead. */
  export type Outbound = GetIntegrationResourceRequest$Outbound;
}

export function getIntegrationResourceRequestToJSON(
  getIntegrationResourceRequest: GetIntegrationResourceRequest,
): string {
  return JSON.stringify(
    GetIntegrationResourceRequest$outboundSchema.parse(
      getIntegrationResourceRequest,
    ),
  );
}

export function getIntegrationResourceRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetIntegrationResourceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetIntegrationResourceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetIntegrationResourceRequest' from JSON`,
  );
}

/** @internal */
export const GetIntegrationResourceStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetIntegrationResourceStatus
> = z.nativeEnum(GetIntegrationResourceStatus);

/** @internal */
export const GetIntegrationResourceStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetIntegrationResourceStatus
> = GetIntegrationResourceStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIntegrationResourceStatus$ {
  /** @deprecated use `GetIntegrationResourceStatus$inboundSchema` instead. */
  export const inboundSchema = GetIntegrationResourceStatus$inboundSchema;
  /** @deprecated use `GetIntegrationResourceStatus$outboundSchema` instead. */
  export const outboundSchema = GetIntegrationResourceStatus$outboundSchema;
}

/** @internal */
export const Experimentation$inboundSchema: z.ZodType<
  Experimentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  edgeConfigSyncingEnabled: z.boolean().optional(),
  edgeConfigId: z.string().optional(),
  edgeConfigTokenId: z.string().optional(),
});

/** @internal */
export type Experimentation$Outbound = {
  edgeConfigSyncingEnabled?: boolean | undefined;
  edgeConfigId?: string | undefined;
  edgeConfigTokenId?: string | undefined;
};

/** @internal */
export const Experimentation$outboundSchema: z.ZodType<
  Experimentation$Outbound,
  z.ZodTypeDef,
  Experimentation
> = z.object({
  edgeConfigSyncingEnabled: z.boolean().optional(),
  edgeConfigId: z.string().optional(),
  edgeConfigTokenId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Experimentation$ {
  /** @deprecated use `Experimentation$inboundSchema` instead. */
  export const inboundSchema = Experimentation$inboundSchema;
  /** @deprecated use `Experimentation$outboundSchema` instead. */
  export const outboundSchema = Experimentation$outboundSchema;
  /** @deprecated use `Experimentation$Outbound` instead. */
  export type Outbound = Experimentation$Outbound;
}

export function experimentationToJSON(
  experimentation: Experimentation,
): string {
  return JSON.stringify(Experimentation$outboundSchema.parse(experimentation));
}

export function experimentationFromJSON(
  jsonString: string,
): SafeParseResult<Experimentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Experimentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Experimentation' from JSON`,
  );
}

/** @internal */
export const ProtocolSettings$inboundSchema: z.ZodType<
  ProtocolSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  experimentation: z.lazy(() => Experimentation$inboundSchema).optional(),
});

/** @internal */
export type ProtocolSettings$Outbound = {
  experimentation?: Experimentation$Outbound | undefined;
};

/** @internal */
export const ProtocolSettings$outboundSchema: z.ZodType<
  ProtocolSettings$Outbound,
  z.ZodTypeDef,
  ProtocolSettings
> = z.object({
  experimentation: z.lazy(() => Experimentation$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProtocolSettings$ {
  /** @deprecated use `ProtocolSettings$inboundSchema` instead. */
  export const inboundSchema = ProtocolSettings$inboundSchema;
  /** @deprecated use `ProtocolSettings$outboundSchema` instead. */
  export const outboundSchema = ProtocolSettings$outboundSchema;
  /** @deprecated use `ProtocolSettings$Outbound` instead. */
  export type Outbound = ProtocolSettings$Outbound;
}

export function protocolSettingsToJSON(
  protocolSettings: ProtocolSettings,
): string {
  return JSON.stringify(
    ProtocolSettings$outboundSchema.parse(protocolSettings),
  );
}

export function protocolSettingsFromJSON(
  jsonString: string,
): SafeParseResult<ProtocolSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProtocolSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProtocolSettings' from JSON`,
  );
}

/** @internal */
export const GetIntegrationResourceLevel$inboundSchema: z.ZodNativeEnum<
  typeof GetIntegrationResourceLevel
> = z.nativeEnum(GetIntegrationResourceLevel);

/** @internal */
export const GetIntegrationResourceLevel$outboundSchema: z.ZodNativeEnum<
  typeof GetIntegrationResourceLevel
> = GetIntegrationResourceLevel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIntegrationResourceLevel$ {
  /** @deprecated use `GetIntegrationResourceLevel$inboundSchema` instead. */
  export const inboundSchema = GetIntegrationResourceLevel$inboundSchema;
  /** @deprecated use `GetIntegrationResourceLevel$outboundSchema` instead. */
  export const outboundSchema = GetIntegrationResourceLevel$outboundSchema;
}

/** @internal */
export const GetIntegrationResourceNotification$inboundSchema: z.ZodType<
  GetIntegrationResourceNotification,
  z.ZodTypeDef,
  unknown
> = z.object({
  level: GetIntegrationResourceLevel$inboundSchema,
  title: z.string(),
  message: z.string().optional(),
  href: z.string().optional(),
});

/** @internal */
export type GetIntegrationResourceNotification$Outbound = {
  level: string;
  title: string;
  message?: string | undefined;
  href?: string | undefined;
};

/** @internal */
export const GetIntegrationResourceNotification$outboundSchema: z.ZodType<
  GetIntegrationResourceNotification$Outbound,
  z.ZodTypeDef,
  GetIntegrationResourceNotification
> = z.object({
  level: GetIntegrationResourceLevel$outboundSchema,
  title: z.string(),
  message: z.string().optional(),
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIntegrationResourceNotification$ {
  /** @deprecated use `GetIntegrationResourceNotification$inboundSchema` instead. */
  export const inboundSchema = GetIntegrationResourceNotification$inboundSchema;
  /** @deprecated use `GetIntegrationResourceNotification$outboundSchema` instead. */
  export const outboundSchema =
    GetIntegrationResourceNotification$outboundSchema;
  /** @deprecated use `GetIntegrationResourceNotification$Outbound` instead. */
  export type Outbound = GetIntegrationResourceNotification$Outbound;
}

export function getIntegrationResourceNotificationToJSON(
  getIntegrationResourceNotification: GetIntegrationResourceNotification,
): string {
  return JSON.stringify(
    GetIntegrationResourceNotification$outboundSchema.parse(
      getIntegrationResourceNotification,
    ),
  );
}

export function getIntegrationResourceNotificationFromJSON(
  jsonString: string,
): SafeParseResult<GetIntegrationResourceNotification, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetIntegrationResourceNotification$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetIntegrationResourceNotification' from JSON`,
  );
}

/** @internal */
export const GetIntegrationResourceMetadata$inboundSchema: z.ZodType<
  GetIntegrationResourceMetadata,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.number()),
]);

/** @internal */
export type GetIntegrationResourceMetadata$Outbound =
  | string
  | number
  | boolean
  | Array<string>
  | Array<number>;

/** @internal */
export const GetIntegrationResourceMetadata$outboundSchema: z.ZodType<
  GetIntegrationResourceMetadata$Outbound,
  z.ZodTypeDef,
  GetIntegrationResourceMetadata
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.number()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIntegrationResourceMetadata$ {
  /** @deprecated use `GetIntegrationResourceMetadata$inboundSchema` instead. */
  export const inboundSchema = GetIntegrationResourceMetadata$inboundSchema;
  /** @deprecated use `GetIntegrationResourceMetadata$outboundSchema` instead. */
  export const outboundSchema = GetIntegrationResourceMetadata$outboundSchema;
  /** @deprecated use `GetIntegrationResourceMetadata$Outbound` instead. */
  export type Outbound = GetIntegrationResourceMetadata$Outbound;
}

export function getIntegrationResourceMetadataToJSON(
  getIntegrationResourceMetadata: GetIntegrationResourceMetadata,
): string {
  return JSON.stringify(
    GetIntegrationResourceMetadata$outboundSchema.parse(
      getIntegrationResourceMetadata,
    ),
  );
}

export function getIntegrationResourceMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetIntegrationResourceMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetIntegrationResourceMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetIntegrationResourceMetadata' from JSON`,
  );
}

/** @internal */
export const GetIntegrationResourceResponseBody$inboundSchema: z.ZodType<
  GetIntegrationResourceResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  internalId: z.string(),
  name: z.string(),
  status: GetIntegrationResourceStatus$inboundSchema.optional(),
  productId: z.string(),
  protocolSettings: z.lazy(() => ProtocolSettings$inboundSchema).optional(),
  notification: z.lazy(() => GetIntegrationResourceNotification$inboundSchema)
    .optional(),
  billingPlanId: z.string().optional(),
  metadata: z.record(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.number()),
    ]),
  ).optional(),
});

/** @internal */
export type GetIntegrationResourceResponseBody$Outbound = {
  id: string;
  internalId: string;
  name: string;
  status?: string | undefined;
  productId: string;
  protocolSettings?: ProtocolSettings$Outbound | undefined;
  notification?: GetIntegrationResourceNotification$Outbound | undefined;
  billingPlanId?: string | undefined;
  metadata?: {
    [k: string]: string | number | boolean | Array<string> | Array<number>;
  } | undefined;
};

/** @internal */
export const GetIntegrationResourceResponseBody$outboundSchema: z.ZodType<
  GetIntegrationResourceResponseBody$Outbound,
  z.ZodTypeDef,
  GetIntegrationResourceResponseBody
> = z.object({
  id: z.string(),
  internalId: z.string(),
  name: z.string(),
  status: GetIntegrationResourceStatus$outboundSchema.optional(),
  productId: z.string(),
  protocolSettings: z.lazy(() => ProtocolSettings$outboundSchema).optional(),
  notification: z.lazy(() => GetIntegrationResourceNotification$outboundSchema)
    .optional(),
  billingPlanId: z.string().optional(),
  metadata: z.record(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.number()),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIntegrationResourceResponseBody$ {
  /** @deprecated use `GetIntegrationResourceResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetIntegrationResourceResponseBody$inboundSchema;
  /** @deprecated use `GetIntegrationResourceResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetIntegrationResourceResponseBody$outboundSchema;
  /** @deprecated use `GetIntegrationResourceResponseBody$Outbound` instead. */
  export type Outbound = GetIntegrationResourceResponseBody$Outbound;
}

export function getIntegrationResourceResponseBodyToJSON(
  getIntegrationResourceResponseBody: GetIntegrationResourceResponseBody,
): string {
  return JSON.stringify(
    GetIntegrationResourceResponseBody$outboundSchema.parse(
      getIntegrationResourceResponseBody,
    ),
  );
}

export function getIntegrationResourceResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetIntegrationResourceResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetIntegrationResourceResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetIntegrationResourceResponseBody' from JSON`,
  );
}
