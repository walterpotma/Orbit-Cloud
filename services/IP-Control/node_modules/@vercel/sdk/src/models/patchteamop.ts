/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type PatchTeamRoles2 = {
  accessGroupId: string;
};

export const PatchTeamRoles1 = {
  Owner: "OWNER",
  Member: "MEMBER",
  Developer: "DEVELOPER",
  Security: "SECURITY",
  Billing: "BILLING",
  Viewer: "VIEWER",
  ViewerForPlus: "VIEWER_FOR_PLUS",
  Contributor: "CONTRIBUTOR",
} as const;
export type PatchTeamRoles1 = ClosedEnum<typeof PatchTeamRoles1>;

export type PatchTeamRoles = PatchTeamRoles2 | PatchTeamRoles1;

export type PatchTeamSaml = {
  /**
   * Require that members of the team use SAML Single Sign-On.
   */
  enforced?: boolean | undefined;
  /**
   * Directory groups to role or access group mappings.
   */
  roles?: { [k: string]: PatchTeamRoles2 | PatchTeamRoles1 } | undefined;
};

/**
 * Whether or not remote caching is enabled for the team
 */
export type PatchTeamRemoteCaching = {
  /**
   * Enable or disable remote caching for the team.
   */
  enabled?: boolean | undefined;
};

/**
 * Specify if the password will apply to every Deployment Target or just Preview
 */
export const PatchTeamDeploymentType = {
  All: "all",
  Preview: "preview",
  ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews",
  AllExceptCustomDomains: "all_except_custom_domains",
} as const;
/**
 * Specify if the password will apply to every Deployment Target or just Preview
 */
export type PatchTeamDeploymentType = ClosedEnum<
  typeof PatchTeamDeploymentType
>;

/**
 * Allows to protect project deployments with a password
 */
export type PatchTeamPasswordProtection = {
  /**
   * Specify if the password will apply to every Deployment Target or just Preview
   */
  deploymentType: PatchTeamDeploymentType;
  /**
   * The password that will be used to protect Project Deployments
   */
  password?: string | null | undefined;
};

/**
 * Specify if the Vercel Authentication (SSO Protection) will apply to every Deployment Target or just Preview
 */
export const PatchTeamTeamsDeploymentType = {
  All: "all",
  Preview: "preview",
  ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews",
  AllExceptCustomDomains: "all_except_custom_domains",
} as const;
/**
 * Specify if the Vercel Authentication (SSO Protection) will apply to every Deployment Target or just Preview
 */
export type PatchTeamTeamsDeploymentType = ClosedEnum<
  typeof PatchTeamTeamsDeploymentType
>;

/**
 * Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team
 */
export type PatchTeamSsoProtection = {
  /**
   * Specify if the Vercel Authentication (SSO Protection) will apply to every Deployment Target or just Preview
   */
  deploymentType?: PatchTeamTeamsDeploymentType | undefined;
};

/**
 * Default deployment protection settings for new projects.
 */
export type PatchTeamDefaultDeploymentProtection = {
  /**
   * Allows to protect project deployments with a password
   */
  passwordProtection?: PatchTeamPasswordProtection | null | undefined;
  /**
   * Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team
   */
  ssoProtection?: PatchTeamSsoProtection | null | undefined;
};

/**
 * The time period to keep non-production deployments for
 */
export const Expiration = {
  Oney: "1y",
  Sixm: "6m",
  Threem: "3m",
  Twom: "2m",
  Onem: "1m",
  Twow: "2w",
  Onew: "1w",
  Oned: "1d",
  Unlimited: "unlimited",
} as const;
/**
 * The time period to keep non-production deployments for
 */
export type Expiration = ClosedEnum<typeof Expiration>;

/**
 * The time period to keep production deployments for
 */
export const ExpirationProduction = {
  Oney: "1y",
  Sixm: "6m",
  Threem: "3m",
  Twom: "2m",
  Onem: "1m",
  Twow: "2w",
  Onew: "1w",
  Oned: "1d",
  Unlimited: "unlimited",
} as const;
/**
 * The time period to keep production deployments for
 */
export type ExpirationProduction = ClosedEnum<typeof ExpirationProduction>;

/**
 * The time period to keep canceled deployments for
 */
export const ExpirationCanceled = {
  Oney: "1y",
  Sixm: "6m",
  Threem: "3m",
  Twom: "2m",
  Onem: "1m",
  Twow: "2w",
  Onew: "1w",
  Oned: "1d",
  Unlimited: "unlimited",
} as const;
/**
 * The time period to keep canceled deployments for
 */
export type ExpirationCanceled = ClosedEnum<typeof ExpirationCanceled>;

/**
 * The time period to keep errored deployments for
 */
export const ExpirationErrored = {
  Oney: "1y",
  Sixm: "6m",
  Threem: "3m",
  Twom: "2m",
  Onem: "1m",
  Twow: "2w",
  Onew: "1w",
  Oned: "1d",
  Unlimited: "unlimited",
} as const;
/**
 * The time period to keep errored deployments for
 */
export type ExpirationErrored = ClosedEnum<typeof ExpirationErrored>;

export type PatchTeamDefaultExpirationSettings = {
  /**
   * The time period to keep non-production deployments for
   */
  expiration?: Expiration | undefined;
  /**
   * The time period to keep production deployments for
   */
  expirationProduction?: ExpirationProduction | undefined;
  /**
   * The time period to keep canceled deployments for
   */
  expirationCanceled?: ExpirationCanceled | undefined;
  /**
   * The time period to keep errored deployments for
   */
  expirationErrored?: ExpirationErrored | undefined;
};

export type PatchTeamRequestBody = {
  /**
   * The hash value of an uploaded image.
   */
  avatar?: string | undefined;
  /**
   * A short text that describes the team.
   */
  description?: string | undefined;
  emailDomain?: string | null | undefined;
  /**
   * The name of the team.
   */
  name?: string | undefined;
  /**
   * Suffix that will be used for all preview deployments.
   */
  previewDeploymentSuffix?: string | null | undefined;
  /**
   * Create a new invite code and replace the current one.
   */
  regenerateInviteCode?: boolean | undefined;
  saml?: PatchTeamSaml | undefined;
  /**
   * A new slug for the team.
   */
  slug?: string | undefined;
  /**
   * Enable preview toolbar: one of on, off or default.
   */
  enablePreviewFeedback?: string | undefined;
  /**
   * Enable production toolbar: one of on, off or default.
   */
  enableProductionFeedback?: string | undefined;
  /**
   * Sensitive environment variable policy: one of on, off or default.
   */
  sensitiveEnvironmentVariablePolicy?: string | undefined;
  /**
   * Whether or not remote caching is enabled for the team
   */
  remoteCaching?: PatchTeamRemoteCaching | undefined;
  /**
   * Display or hide IP addresses in Monitoring queries.
   */
  hideIpAddresses?: boolean | undefined;
  /**
   * Display or hide IP addresses in Log Drains.
   */
  hideIpAddressesInLogDrains?: boolean | undefined;
  /**
   * Default deployment protection settings for new projects.
   */
  defaultDeploymentProtection?:
    | PatchTeamDefaultDeploymentProtection
    | undefined;
  defaultExpirationSettings?: PatchTeamDefaultExpirationSettings | undefined;
};

export type PatchTeamRequest = {
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId: string;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
  requestBody: PatchTeamRequestBody;
};

/** @internal */
export const PatchTeamRoles2$inboundSchema: z.ZodType<
  PatchTeamRoles2,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessGroupId: z.string(),
});

/** @internal */
export type PatchTeamRoles2$Outbound = {
  accessGroupId: string;
};

/** @internal */
export const PatchTeamRoles2$outboundSchema: z.ZodType<
  PatchTeamRoles2$Outbound,
  z.ZodTypeDef,
  PatchTeamRoles2
> = z.object({
  accessGroupId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTeamRoles2$ {
  /** @deprecated use `PatchTeamRoles2$inboundSchema` instead. */
  export const inboundSchema = PatchTeamRoles2$inboundSchema;
  /** @deprecated use `PatchTeamRoles2$outboundSchema` instead. */
  export const outboundSchema = PatchTeamRoles2$outboundSchema;
  /** @deprecated use `PatchTeamRoles2$Outbound` instead. */
  export type Outbound = PatchTeamRoles2$Outbound;
}

export function patchTeamRoles2ToJSON(
  patchTeamRoles2: PatchTeamRoles2,
): string {
  return JSON.stringify(PatchTeamRoles2$outboundSchema.parse(patchTeamRoles2));
}

export function patchTeamRoles2FromJSON(
  jsonString: string,
): SafeParseResult<PatchTeamRoles2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchTeamRoles2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchTeamRoles2' from JSON`,
  );
}

/** @internal */
export const PatchTeamRoles1$inboundSchema: z.ZodNativeEnum<
  typeof PatchTeamRoles1
> = z.nativeEnum(PatchTeamRoles1);

/** @internal */
export const PatchTeamRoles1$outboundSchema: z.ZodNativeEnum<
  typeof PatchTeamRoles1
> = PatchTeamRoles1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTeamRoles1$ {
  /** @deprecated use `PatchTeamRoles1$inboundSchema` instead. */
  export const inboundSchema = PatchTeamRoles1$inboundSchema;
  /** @deprecated use `PatchTeamRoles1$outboundSchema` instead. */
  export const outboundSchema = PatchTeamRoles1$outboundSchema;
}

/** @internal */
export const PatchTeamRoles$inboundSchema: z.ZodType<
  PatchTeamRoles,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PatchTeamRoles2$inboundSchema),
  PatchTeamRoles1$inboundSchema,
]);

/** @internal */
export type PatchTeamRoles$Outbound = PatchTeamRoles2$Outbound | string;

/** @internal */
export const PatchTeamRoles$outboundSchema: z.ZodType<
  PatchTeamRoles$Outbound,
  z.ZodTypeDef,
  PatchTeamRoles
> = z.union([
  z.lazy(() => PatchTeamRoles2$outboundSchema),
  PatchTeamRoles1$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTeamRoles$ {
  /** @deprecated use `PatchTeamRoles$inboundSchema` instead. */
  export const inboundSchema = PatchTeamRoles$inboundSchema;
  /** @deprecated use `PatchTeamRoles$outboundSchema` instead. */
  export const outboundSchema = PatchTeamRoles$outboundSchema;
  /** @deprecated use `PatchTeamRoles$Outbound` instead. */
  export type Outbound = PatchTeamRoles$Outbound;
}

export function patchTeamRolesToJSON(patchTeamRoles: PatchTeamRoles): string {
  return JSON.stringify(PatchTeamRoles$outboundSchema.parse(patchTeamRoles));
}

export function patchTeamRolesFromJSON(
  jsonString: string,
): SafeParseResult<PatchTeamRoles, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchTeamRoles$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchTeamRoles' from JSON`,
  );
}

/** @internal */
export const PatchTeamSaml$inboundSchema: z.ZodType<
  PatchTeamSaml,
  z.ZodTypeDef,
  unknown
> = z.object({
  enforced: z.boolean().optional(),
  roles: z.record(
    z.union([
      z.lazy(() => PatchTeamRoles2$inboundSchema),
      PatchTeamRoles1$inboundSchema,
    ]),
  ).optional(),
});

/** @internal */
export type PatchTeamSaml$Outbound = {
  enforced?: boolean | undefined;
  roles?: { [k: string]: PatchTeamRoles2$Outbound | string } | undefined;
};

/** @internal */
export const PatchTeamSaml$outboundSchema: z.ZodType<
  PatchTeamSaml$Outbound,
  z.ZodTypeDef,
  PatchTeamSaml
> = z.object({
  enforced: z.boolean().optional(),
  roles: z.record(
    z.union([
      z.lazy(() => PatchTeamRoles2$outboundSchema),
      PatchTeamRoles1$outboundSchema,
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTeamSaml$ {
  /** @deprecated use `PatchTeamSaml$inboundSchema` instead. */
  export const inboundSchema = PatchTeamSaml$inboundSchema;
  /** @deprecated use `PatchTeamSaml$outboundSchema` instead. */
  export const outboundSchema = PatchTeamSaml$outboundSchema;
  /** @deprecated use `PatchTeamSaml$Outbound` instead. */
  export type Outbound = PatchTeamSaml$Outbound;
}

export function patchTeamSamlToJSON(patchTeamSaml: PatchTeamSaml): string {
  return JSON.stringify(PatchTeamSaml$outboundSchema.parse(patchTeamSaml));
}

export function patchTeamSamlFromJSON(
  jsonString: string,
): SafeParseResult<PatchTeamSaml, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchTeamSaml$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchTeamSaml' from JSON`,
  );
}

/** @internal */
export const PatchTeamRemoteCaching$inboundSchema: z.ZodType<
  PatchTeamRemoteCaching,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean().optional(),
});

/** @internal */
export type PatchTeamRemoteCaching$Outbound = {
  enabled?: boolean | undefined;
};

/** @internal */
export const PatchTeamRemoteCaching$outboundSchema: z.ZodType<
  PatchTeamRemoteCaching$Outbound,
  z.ZodTypeDef,
  PatchTeamRemoteCaching
> = z.object({
  enabled: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTeamRemoteCaching$ {
  /** @deprecated use `PatchTeamRemoteCaching$inboundSchema` instead. */
  export const inboundSchema = PatchTeamRemoteCaching$inboundSchema;
  /** @deprecated use `PatchTeamRemoteCaching$outboundSchema` instead. */
  export const outboundSchema = PatchTeamRemoteCaching$outboundSchema;
  /** @deprecated use `PatchTeamRemoteCaching$Outbound` instead. */
  export type Outbound = PatchTeamRemoteCaching$Outbound;
}

export function patchTeamRemoteCachingToJSON(
  patchTeamRemoteCaching: PatchTeamRemoteCaching,
): string {
  return JSON.stringify(
    PatchTeamRemoteCaching$outboundSchema.parse(patchTeamRemoteCaching),
  );
}

export function patchTeamRemoteCachingFromJSON(
  jsonString: string,
): SafeParseResult<PatchTeamRemoteCaching, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchTeamRemoteCaching$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchTeamRemoteCaching' from JSON`,
  );
}

/** @internal */
export const PatchTeamDeploymentType$inboundSchema: z.ZodNativeEnum<
  typeof PatchTeamDeploymentType
> = z.nativeEnum(PatchTeamDeploymentType);

/** @internal */
export const PatchTeamDeploymentType$outboundSchema: z.ZodNativeEnum<
  typeof PatchTeamDeploymentType
> = PatchTeamDeploymentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTeamDeploymentType$ {
  /** @deprecated use `PatchTeamDeploymentType$inboundSchema` instead. */
  export const inboundSchema = PatchTeamDeploymentType$inboundSchema;
  /** @deprecated use `PatchTeamDeploymentType$outboundSchema` instead. */
  export const outboundSchema = PatchTeamDeploymentType$outboundSchema;
}

/** @internal */
export const PatchTeamPasswordProtection$inboundSchema: z.ZodType<
  PatchTeamPasswordProtection,
  z.ZodTypeDef,
  unknown
> = z.object({
  deploymentType: PatchTeamDeploymentType$inboundSchema,
  password: z.nullable(z.string()).optional(),
});

/** @internal */
export type PatchTeamPasswordProtection$Outbound = {
  deploymentType: string;
  password?: string | null | undefined;
};

/** @internal */
export const PatchTeamPasswordProtection$outboundSchema: z.ZodType<
  PatchTeamPasswordProtection$Outbound,
  z.ZodTypeDef,
  PatchTeamPasswordProtection
> = z.object({
  deploymentType: PatchTeamDeploymentType$outboundSchema,
  password: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTeamPasswordProtection$ {
  /** @deprecated use `PatchTeamPasswordProtection$inboundSchema` instead. */
  export const inboundSchema = PatchTeamPasswordProtection$inboundSchema;
  /** @deprecated use `PatchTeamPasswordProtection$outboundSchema` instead. */
  export const outboundSchema = PatchTeamPasswordProtection$outboundSchema;
  /** @deprecated use `PatchTeamPasswordProtection$Outbound` instead. */
  export type Outbound = PatchTeamPasswordProtection$Outbound;
}

export function patchTeamPasswordProtectionToJSON(
  patchTeamPasswordProtection: PatchTeamPasswordProtection,
): string {
  return JSON.stringify(
    PatchTeamPasswordProtection$outboundSchema.parse(
      patchTeamPasswordProtection,
    ),
  );
}

export function patchTeamPasswordProtectionFromJSON(
  jsonString: string,
): SafeParseResult<PatchTeamPasswordProtection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchTeamPasswordProtection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchTeamPasswordProtection' from JSON`,
  );
}

/** @internal */
export const PatchTeamTeamsDeploymentType$inboundSchema: z.ZodNativeEnum<
  typeof PatchTeamTeamsDeploymentType
> = z.nativeEnum(PatchTeamTeamsDeploymentType);

/** @internal */
export const PatchTeamTeamsDeploymentType$outboundSchema: z.ZodNativeEnum<
  typeof PatchTeamTeamsDeploymentType
> = PatchTeamTeamsDeploymentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTeamTeamsDeploymentType$ {
  /** @deprecated use `PatchTeamTeamsDeploymentType$inboundSchema` instead. */
  export const inboundSchema = PatchTeamTeamsDeploymentType$inboundSchema;
  /** @deprecated use `PatchTeamTeamsDeploymentType$outboundSchema` instead. */
  export const outboundSchema = PatchTeamTeamsDeploymentType$outboundSchema;
}

/** @internal */
export const PatchTeamSsoProtection$inboundSchema: z.ZodType<
  PatchTeamSsoProtection,
  z.ZodTypeDef,
  unknown
> = z.object({
  deploymentType: PatchTeamTeamsDeploymentType$inboundSchema.default("preview"),
});

/** @internal */
export type PatchTeamSsoProtection$Outbound = {
  deploymentType: string;
};

/** @internal */
export const PatchTeamSsoProtection$outboundSchema: z.ZodType<
  PatchTeamSsoProtection$Outbound,
  z.ZodTypeDef,
  PatchTeamSsoProtection
> = z.object({
  deploymentType: PatchTeamTeamsDeploymentType$outboundSchema.default(
    "preview",
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTeamSsoProtection$ {
  /** @deprecated use `PatchTeamSsoProtection$inboundSchema` instead. */
  export const inboundSchema = PatchTeamSsoProtection$inboundSchema;
  /** @deprecated use `PatchTeamSsoProtection$outboundSchema` instead. */
  export const outboundSchema = PatchTeamSsoProtection$outboundSchema;
  /** @deprecated use `PatchTeamSsoProtection$Outbound` instead. */
  export type Outbound = PatchTeamSsoProtection$Outbound;
}

export function patchTeamSsoProtectionToJSON(
  patchTeamSsoProtection: PatchTeamSsoProtection,
): string {
  return JSON.stringify(
    PatchTeamSsoProtection$outboundSchema.parse(patchTeamSsoProtection),
  );
}

export function patchTeamSsoProtectionFromJSON(
  jsonString: string,
): SafeParseResult<PatchTeamSsoProtection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchTeamSsoProtection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchTeamSsoProtection' from JSON`,
  );
}

/** @internal */
export const PatchTeamDefaultDeploymentProtection$inboundSchema: z.ZodType<
  PatchTeamDefaultDeploymentProtection,
  z.ZodTypeDef,
  unknown
> = z.object({
  passwordProtection: z.nullable(
    z.lazy(() => PatchTeamPasswordProtection$inboundSchema),
  ).optional(),
  ssoProtection: z.nullable(z.lazy(() => PatchTeamSsoProtection$inboundSchema))
    .optional(),
});

/** @internal */
export type PatchTeamDefaultDeploymentProtection$Outbound = {
  passwordProtection?: PatchTeamPasswordProtection$Outbound | null | undefined;
  ssoProtection?: PatchTeamSsoProtection$Outbound | null | undefined;
};

/** @internal */
export const PatchTeamDefaultDeploymentProtection$outboundSchema: z.ZodType<
  PatchTeamDefaultDeploymentProtection$Outbound,
  z.ZodTypeDef,
  PatchTeamDefaultDeploymentProtection
> = z.object({
  passwordProtection: z.nullable(
    z.lazy(() => PatchTeamPasswordProtection$outboundSchema),
  ).optional(),
  ssoProtection: z.nullable(z.lazy(() => PatchTeamSsoProtection$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTeamDefaultDeploymentProtection$ {
  /** @deprecated use `PatchTeamDefaultDeploymentProtection$inboundSchema` instead. */
  export const inboundSchema =
    PatchTeamDefaultDeploymentProtection$inboundSchema;
  /** @deprecated use `PatchTeamDefaultDeploymentProtection$outboundSchema` instead. */
  export const outboundSchema =
    PatchTeamDefaultDeploymentProtection$outboundSchema;
  /** @deprecated use `PatchTeamDefaultDeploymentProtection$Outbound` instead. */
  export type Outbound = PatchTeamDefaultDeploymentProtection$Outbound;
}

export function patchTeamDefaultDeploymentProtectionToJSON(
  patchTeamDefaultDeploymentProtection: PatchTeamDefaultDeploymentProtection,
): string {
  return JSON.stringify(
    PatchTeamDefaultDeploymentProtection$outboundSchema.parse(
      patchTeamDefaultDeploymentProtection,
    ),
  );
}

export function patchTeamDefaultDeploymentProtectionFromJSON(
  jsonString: string,
): SafeParseResult<PatchTeamDefaultDeploymentProtection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchTeamDefaultDeploymentProtection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchTeamDefaultDeploymentProtection' from JSON`,
  );
}

/** @internal */
export const Expiration$inboundSchema: z.ZodNativeEnum<typeof Expiration> = z
  .nativeEnum(Expiration);

/** @internal */
export const Expiration$outboundSchema: z.ZodNativeEnum<typeof Expiration> =
  Expiration$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Expiration$ {
  /** @deprecated use `Expiration$inboundSchema` instead. */
  export const inboundSchema = Expiration$inboundSchema;
  /** @deprecated use `Expiration$outboundSchema` instead. */
  export const outboundSchema = Expiration$outboundSchema;
}

/** @internal */
export const ExpirationProduction$inboundSchema: z.ZodNativeEnum<
  typeof ExpirationProduction
> = z.nativeEnum(ExpirationProduction);

/** @internal */
export const ExpirationProduction$outboundSchema: z.ZodNativeEnum<
  typeof ExpirationProduction
> = ExpirationProduction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExpirationProduction$ {
  /** @deprecated use `ExpirationProduction$inboundSchema` instead. */
  export const inboundSchema = ExpirationProduction$inboundSchema;
  /** @deprecated use `ExpirationProduction$outboundSchema` instead. */
  export const outboundSchema = ExpirationProduction$outboundSchema;
}

/** @internal */
export const ExpirationCanceled$inboundSchema: z.ZodNativeEnum<
  typeof ExpirationCanceled
> = z.nativeEnum(ExpirationCanceled);

/** @internal */
export const ExpirationCanceled$outboundSchema: z.ZodNativeEnum<
  typeof ExpirationCanceled
> = ExpirationCanceled$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExpirationCanceled$ {
  /** @deprecated use `ExpirationCanceled$inboundSchema` instead. */
  export const inboundSchema = ExpirationCanceled$inboundSchema;
  /** @deprecated use `ExpirationCanceled$outboundSchema` instead. */
  export const outboundSchema = ExpirationCanceled$outboundSchema;
}

/** @internal */
export const ExpirationErrored$inboundSchema: z.ZodNativeEnum<
  typeof ExpirationErrored
> = z.nativeEnum(ExpirationErrored);

/** @internal */
export const ExpirationErrored$outboundSchema: z.ZodNativeEnum<
  typeof ExpirationErrored
> = ExpirationErrored$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExpirationErrored$ {
  /** @deprecated use `ExpirationErrored$inboundSchema` instead. */
  export const inboundSchema = ExpirationErrored$inboundSchema;
  /** @deprecated use `ExpirationErrored$outboundSchema` instead. */
  export const outboundSchema = ExpirationErrored$outboundSchema;
}

/** @internal */
export const PatchTeamDefaultExpirationSettings$inboundSchema: z.ZodType<
  PatchTeamDefaultExpirationSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  expiration: Expiration$inboundSchema.optional(),
  expirationProduction: ExpirationProduction$inboundSchema.optional(),
  expirationCanceled: ExpirationCanceled$inboundSchema.optional(),
  expirationErrored: ExpirationErrored$inboundSchema.optional(),
});

/** @internal */
export type PatchTeamDefaultExpirationSettings$Outbound = {
  expiration?: string | undefined;
  expirationProduction?: string | undefined;
  expirationCanceled?: string | undefined;
  expirationErrored?: string | undefined;
};

/** @internal */
export const PatchTeamDefaultExpirationSettings$outboundSchema: z.ZodType<
  PatchTeamDefaultExpirationSettings$Outbound,
  z.ZodTypeDef,
  PatchTeamDefaultExpirationSettings
> = z.object({
  expiration: Expiration$outboundSchema.optional(),
  expirationProduction: ExpirationProduction$outboundSchema.optional(),
  expirationCanceled: ExpirationCanceled$outboundSchema.optional(),
  expirationErrored: ExpirationErrored$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTeamDefaultExpirationSettings$ {
  /** @deprecated use `PatchTeamDefaultExpirationSettings$inboundSchema` instead. */
  export const inboundSchema = PatchTeamDefaultExpirationSettings$inboundSchema;
  /** @deprecated use `PatchTeamDefaultExpirationSettings$outboundSchema` instead. */
  export const outboundSchema =
    PatchTeamDefaultExpirationSettings$outboundSchema;
  /** @deprecated use `PatchTeamDefaultExpirationSettings$Outbound` instead. */
  export type Outbound = PatchTeamDefaultExpirationSettings$Outbound;
}

export function patchTeamDefaultExpirationSettingsToJSON(
  patchTeamDefaultExpirationSettings: PatchTeamDefaultExpirationSettings,
): string {
  return JSON.stringify(
    PatchTeamDefaultExpirationSettings$outboundSchema.parse(
      patchTeamDefaultExpirationSettings,
    ),
  );
}

export function patchTeamDefaultExpirationSettingsFromJSON(
  jsonString: string,
): SafeParseResult<PatchTeamDefaultExpirationSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchTeamDefaultExpirationSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchTeamDefaultExpirationSettings' from JSON`,
  );
}

/** @internal */
export const PatchTeamRequestBody$inboundSchema: z.ZodType<
  PatchTeamRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  avatar: z.string().optional(),
  description: z.string().optional(),
  emailDomain: z.nullable(z.string()).optional(),
  name: z.string().optional(),
  previewDeploymentSuffix: z.nullable(z.string()).optional(),
  regenerateInviteCode: z.boolean().optional(),
  saml: z.lazy(() => PatchTeamSaml$inboundSchema).optional(),
  slug: z.string().optional(),
  enablePreviewFeedback: z.string().optional(),
  enableProductionFeedback: z.string().optional(),
  sensitiveEnvironmentVariablePolicy: z.string().optional(),
  remoteCaching: z.lazy(() => PatchTeamRemoteCaching$inboundSchema).optional(),
  hideIpAddresses: z.boolean().optional(),
  hideIpAddressesInLogDrains: z.boolean().optional(),
  defaultDeploymentProtection: z.lazy(() =>
    PatchTeamDefaultDeploymentProtection$inboundSchema
  ).optional(),
  defaultExpirationSettings: z.lazy(() =>
    PatchTeamDefaultExpirationSettings$inboundSchema
  ).optional(),
});

/** @internal */
export type PatchTeamRequestBody$Outbound = {
  avatar?: string | undefined;
  description?: string | undefined;
  emailDomain?: string | null | undefined;
  name?: string | undefined;
  previewDeploymentSuffix?: string | null | undefined;
  regenerateInviteCode?: boolean | undefined;
  saml?: PatchTeamSaml$Outbound | undefined;
  slug?: string | undefined;
  enablePreviewFeedback?: string | undefined;
  enableProductionFeedback?: string | undefined;
  sensitiveEnvironmentVariablePolicy?: string | undefined;
  remoteCaching?: PatchTeamRemoteCaching$Outbound | undefined;
  hideIpAddresses?: boolean | undefined;
  hideIpAddressesInLogDrains?: boolean | undefined;
  defaultDeploymentProtection?:
    | PatchTeamDefaultDeploymentProtection$Outbound
    | undefined;
  defaultExpirationSettings?:
    | PatchTeamDefaultExpirationSettings$Outbound
    | undefined;
};

/** @internal */
export const PatchTeamRequestBody$outboundSchema: z.ZodType<
  PatchTeamRequestBody$Outbound,
  z.ZodTypeDef,
  PatchTeamRequestBody
> = z.object({
  avatar: z.string().optional(),
  description: z.string().optional(),
  emailDomain: z.nullable(z.string()).optional(),
  name: z.string().optional(),
  previewDeploymentSuffix: z.nullable(z.string()).optional(),
  regenerateInviteCode: z.boolean().optional(),
  saml: z.lazy(() => PatchTeamSaml$outboundSchema).optional(),
  slug: z.string().optional(),
  enablePreviewFeedback: z.string().optional(),
  enableProductionFeedback: z.string().optional(),
  sensitiveEnvironmentVariablePolicy: z.string().optional(),
  remoteCaching: z.lazy(() => PatchTeamRemoteCaching$outboundSchema).optional(),
  hideIpAddresses: z.boolean().optional(),
  hideIpAddressesInLogDrains: z.boolean().optional(),
  defaultDeploymentProtection: z.lazy(() =>
    PatchTeamDefaultDeploymentProtection$outboundSchema
  ).optional(),
  defaultExpirationSettings: z.lazy(() =>
    PatchTeamDefaultExpirationSettings$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTeamRequestBody$ {
  /** @deprecated use `PatchTeamRequestBody$inboundSchema` instead. */
  export const inboundSchema = PatchTeamRequestBody$inboundSchema;
  /** @deprecated use `PatchTeamRequestBody$outboundSchema` instead. */
  export const outboundSchema = PatchTeamRequestBody$outboundSchema;
  /** @deprecated use `PatchTeamRequestBody$Outbound` instead. */
  export type Outbound = PatchTeamRequestBody$Outbound;
}

export function patchTeamRequestBodyToJSON(
  patchTeamRequestBody: PatchTeamRequestBody,
): string {
  return JSON.stringify(
    PatchTeamRequestBody$outboundSchema.parse(patchTeamRequestBody),
  );
}

export function patchTeamRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PatchTeamRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchTeamRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchTeamRequestBody' from JSON`,
  );
}

/** @internal */
export const PatchTeamRequest$inboundSchema: z.ZodType<
  PatchTeamRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  teamId: z.string(),
  slug: z.string().optional(),
  RequestBody: z.lazy(() => PatchTeamRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PatchTeamRequest$Outbound = {
  teamId: string;
  slug?: string | undefined;
  RequestBody: PatchTeamRequestBody$Outbound;
};

/** @internal */
export const PatchTeamRequest$outboundSchema: z.ZodType<
  PatchTeamRequest$Outbound,
  z.ZodTypeDef,
  PatchTeamRequest
> = z.object({
  teamId: z.string(),
  slug: z.string().optional(),
  requestBody: z.lazy(() => PatchTeamRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTeamRequest$ {
  /** @deprecated use `PatchTeamRequest$inboundSchema` instead. */
  export const inboundSchema = PatchTeamRequest$inboundSchema;
  /** @deprecated use `PatchTeamRequest$outboundSchema` instead. */
  export const outboundSchema = PatchTeamRequest$outboundSchema;
  /** @deprecated use `PatchTeamRequest$Outbound` instead. */
  export type Outbound = PatchTeamRequest$Outbound;
}

export function patchTeamRequestToJSON(
  patchTeamRequest: PatchTeamRequest,
): string {
  return JSON.stringify(
    PatchTeamRequest$outboundSchema.parse(patchTeamRequest),
  );
}

export function patchTeamRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchTeamRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchTeamRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchTeamRequest' from JSON`,
  );
}
