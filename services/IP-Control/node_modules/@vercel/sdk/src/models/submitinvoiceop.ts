/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Subscription period for this billing cycle.
 */
export type SubmitInvoicePeriod = {
  start: Date;
  end: Date;
};

export type SubmitInvoiceItems = {
  /**
   * Partner's resource ID.
   */
  resourceId?: string | undefined;
  /**
   * Partner's billing plan ID.
   */
  billingPlanId: string;
  /**
   * Start and end are only needed if different from the period's start/end.
   */
  start?: Date | undefined;
  /**
   * Start and end are only needed if different from the period's start/end.
   */
  end?: Date | undefined;
  name: string;
  details?: string | undefined;
  /**
   * Currency amount as a decimal string.
   */
  price: string;
  quantity: number;
  units: string;
  /**
   * Currency amount as a decimal string.
   */
  total: string;
};

export type SubmitInvoiceDiscounts = {
  /**
   * Partner's resource ID.
   */
  resourceId?: string | undefined;
  /**
   * Partner's billing plan ID.
   */
  billingPlanId: string;
  /**
   * Start and end are only needed if different from the period's start/end.
   */
  start?: Date | undefined;
  /**
   * Start and end are only needed if different from the period's start/end.
   */
  end?: Date | undefined;
  name: string;
  details?: string | undefined;
  /**
   * Currency amount as a decimal string.
   */
  amount: string;
};

export const Result = {
  Paid: "paid",
  Notpaid: "notpaid",
} as const;
export type Result = ClosedEnum<typeof Result>;

/**
 * Test mode
 */
export type Test = {
  validate?: boolean | undefined;
  result?: Result | undefined;
};

export type SubmitInvoiceRequestBody = {
  externalId?: string | undefined;
  /**
   * Invoice date. Must be within the period's start and end.
   */
  invoiceDate: Date;
  /**
   * Additional memo for the invoice.
   */
  memo?: string | undefined;
  /**
   * Subscription period for this billing cycle.
   */
  period: SubmitInvoicePeriod;
  items: Array<SubmitInvoiceItems>;
  discounts?: Array<SubmitInvoiceDiscounts> | undefined;
  /**
   * Test mode
   */
  test?: Test | undefined;
};

export type SubmitInvoiceRequest = {
  integrationConfigurationId: string;
  requestBody: SubmitInvoiceRequestBody;
};

export type SubmitInvoiceResponseBody = {
  invoiceId?: string | undefined;
  test?: boolean | undefined;
  validationErrors?: Array<string> | undefined;
};

/** @internal */
export const SubmitInvoicePeriod$inboundSchema: z.ZodType<
  SubmitInvoicePeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  start: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  end: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type SubmitInvoicePeriod$Outbound = {
  start: string;
  end: string;
};

/** @internal */
export const SubmitInvoicePeriod$outboundSchema: z.ZodType<
  SubmitInvoicePeriod$Outbound,
  z.ZodTypeDef,
  SubmitInvoicePeriod
> = z.object({
  start: z.date().transform(v => v.toISOString()),
  end: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubmitInvoicePeriod$ {
  /** @deprecated use `SubmitInvoicePeriod$inboundSchema` instead. */
  export const inboundSchema = SubmitInvoicePeriod$inboundSchema;
  /** @deprecated use `SubmitInvoicePeriod$outboundSchema` instead. */
  export const outboundSchema = SubmitInvoicePeriod$outboundSchema;
  /** @deprecated use `SubmitInvoicePeriod$Outbound` instead. */
  export type Outbound = SubmitInvoicePeriod$Outbound;
}

export function submitInvoicePeriodToJSON(
  submitInvoicePeriod: SubmitInvoicePeriod,
): string {
  return JSON.stringify(
    SubmitInvoicePeriod$outboundSchema.parse(submitInvoicePeriod),
  );
}

export function submitInvoicePeriodFromJSON(
  jsonString: string,
): SafeParseResult<SubmitInvoicePeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubmitInvoicePeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubmitInvoicePeriod' from JSON`,
  );
}

/** @internal */
export const SubmitInvoiceItems$inboundSchema: z.ZodType<
  SubmitInvoiceItems,
  z.ZodTypeDef,
  unknown
> = z.object({
  resourceId: z.string().optional(),
  billingPlanId: z.string(),
  start: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  end: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  name: z.string(),
  details: z.string().optional(),
  price: z.string(),
  quantity: z.number(),
  units: z.string(),
  total: z.string(),
});

/** @internal */
export type SubmitInvoiceItems$Outbound = {
  resourceId?: string | undefined;
  billingPlanId: string;
  start?: string | undefined;
  end?: string | undefined;
  name: string;
  details?: string | undefined;
  price: string;
  quantity: number;
  units: string;
  total: string;
};

/** @internal */
export const SubmitInvoiceItems$outboundSchema: z.ZodType<
  SubmitInvoiceItems$Outbound,
  z.ZodTypeDef,
  SubmitInvoiceItems
> = z.object({
  resourceId: z.string().optional(),
  billingPlanId: z.string(),
  start: z.date().transform(v => v.toISOString()).optional(),
  end: z.date().transform(v => v.toISOString()).optional(),
  name: z.string(),
  details: z.string().optional(),
  price: z.string(),
  quantity: z.number(),
  units: z.string(),
  total: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubmitInvoiceItems$ {
  /** @deprecated use `SubmitInvoiceItems$inboundSchema` instead. */
  export const inboundSchema = SubmitInvoiceItems$inboundSchema;
  /** @deprecated use `SubmitInvoiceItems$outboundSchema` instead. */
  export const outboundSchema = SubmitInvoiceItems$outboundSchema;
  /** @deprecated use `SubmitInvoiceItems$Outbound` instead. */
  export type Outbound = SubmitInvoiceItems$Outbound;
}

export function submitInvoiceItemsToJSON(
  submitInvoiceItems: SubmitInvoiceItems,
): string {
  return JSON.stringify(
    SubmitInvoiceItems$outboundSchema.parse(submitInvoiceItems),
  );
}

export function submitInvoiceItemsFromJSON(
  jsonString: string,
): SafeParseResult<SubmitInvoiceItems, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubmitInvoiceItems$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubmitInvoiceItems' from JSON`,
  );
}

/** @internal */
export const SubmitInvoiceDiscounts$inboundSchema: z.ZodType<
  SubmitInvoiceDiscounts,
  z.ZodTypeDef,
  unknown
> = z.object({
  resourceId: z.string().optional(),
  billingPlanId: z.string(),
  start: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  end: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  name: z.string(),
  details: z.string().optional(),
  amount: z.string(),
});

/** @internal */
export type SubmitInvoiceDiscounts$Outbound = {
  resourceId?: string | undefined;
  billingPlanId: string;
  start?: string | undefined;
  end?: string | undefined;
  name: string;
  details?: string | undefined;
  amount: string;
};

/** @internal */
export const SubmitInvoiceDiscounts$outboundSchema: z.ZodType<
  SubmitInvoiceDiscounts$Outbound,
  z.ZodTypeDef,
  SubmitInvoiceDiscounts
> = z.object({
  resourceId: z.string().optional(),
  billingPlanId: z.string(),
  start: z.date().transform(v => v.toISOString()).optional(),
  end: z.date().transform(v => v.toISOString()).optional(),
  name: z.string(),
  details: z.string().optional(),
  amount: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubmitInvoiceDiscounts$ {
  /** @deprecated use `SubmitInvoiceDiscounts$inboundSchema` instead. */
  export const inboundSchema = SubmitInvoiceDiscounts$inboundSchema;
  /** @deprecated use `SubmitInvoiceDiscounts$outboundSchema` instead. */
  export const outboundSchema = SubmitInvoiceDiscounts$outboundSchema;
  /** @deprecated use `SubmitInvoiceDiscounts$Outbound` instead. */
  export type Outbound = SubmitInvoiceDiscounts$Outbound;
}

export function submitInvoiceDiscountsToJSON(
  submitInvoiceDiscounts: SubmitInvoiceDiscounts,
): string {
  return JSON.stringify(
    SubmitInvoiceDiscounts$outboundSchema.parse(submitInvoiceDiscounts),
  );
}

export function submitInvoiceDiscountsFromJSON(
  jsonString: string,
): SafeParseResult<SubmitInvoiceDiscounts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubmitInvoiceDiscounts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubmitInvoiceDiscounts' from JSON`,
  );
}

/** @internal */
export const Result$inboundSchema: z.ZodNativeEnum<typeof Result> = z
  .nativeEnum(Result);

/** @internal */
export const Result$outboundSchema: z.ZodNativeEnum<typeof Result> =
  Result$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Result$ {
  /** @deprecated use `Result$inboundSchema` instead. */
  export const inboundSchema = Result$inboundSchema;
  /** @deprecated use `Result$outboundSchema` instead. */
  export const outboundSchema = Result$outboundSchema;
}

/** @internal */
export const Test$inboundSchema: z.ZodType<Test, z.ZodTypeDef, unknown> = z
  .object({
    validate: z.boolean().optional(),
    result: Result$inboundSchema.optional(),
  });

/** @internal */
export type Test$Outbound = {
  validate?: boolean | undefined;
  result?: string | undefined;
};

/** @internal */
export const Test$outboundSchema: z.ZodType<Test$Outbound, z.ZodTypeDef, Test> =
  z.object({
    validate: z.boolean().optional(),
    result: Result$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Test$ {
  /** @deprecated use `Test$inboundSchema` instead. */
  export const inboundSchema = Test$inboundSchema;
  /** @deprecated use `Test$outboundSchema` instead. */
  export const outboundSchema = Test$outboundSchema;
  /** @deprecated use `Test$Outbound` instead. */
  export type Outbound = Test$Outbound;
}

export function testToJSON(test: Test): string {
  return JSON.stringify(Test$outboundSchema.parse(test));
}

export function testFromJSON(
  jsonString: string,
): SafeParseResult<Test, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Test$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Test' from JSON`,
  );
}

/** @internal */
export const SubmitInvoiceRequestBody$inboundSchema: z.ZodType<
  SubmitInvoiceRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  externalId: z.string().optional(),
  invoiceDate: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  memo: z.string().optional(),
  period: z.lazy(() => SubmitInvoicePeriod$inboundSchema),
  items: z.array(z.lazy(() => SubmitInvoiceItems$inboundSchema)),
  discounts: z.array(z.lazy(() => SubmitInvoiceDiscounts$inboundSchema))
    .optional(),
  test: z.lazy(() => Test$inboundSchema).optional(),
});

/** @internal */
export type SubmitInvoiceRequestBody$Outbound = {
  externalId?: string | undefined;
  invoiceDate: string;
  memo?: string | undefined;
  period: SubmitInvoicePeriod$Outbound;
  items: Array<SubmitInvoiceItems$Outbound>;
  discounts?: Array<SubmitInvoiceDiscounts$Outbound> | undefined;
  test?: Test$Outbound | undefined;
};

/** @internal */
export const SubmitInvoiceRequestBody$outboundSchema: z.ZodType<
  SubmitInvoiceRequestBody$Outbound,
  z.ZodTypeDef,
  SubmitInvoiceRequestBody
> = z.object({
  externalId: z.string().optional(),
  invoiceDate: z.date().transform(v => v.toISOString()),
  memo: z.string().optional(),
  period: z.lazy(() => SubmitInvoicePeriod$outboundSchema),
  items: z.array(z.lazy(() => SubmitInvoiceItems$outboundSchema)),
  discounts: z.array(z.lazy(() => SubmitInvoiceDiscounts$outboundSchema))
    .optional(),
  test: z.lazy(() => Test$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubmitInvoiceRequestBody$ {
  /** @deprecated use `SubmitInvoiceRequestBody$inboundSchema` instead. */
  export const inboundSchema = SubmitInvoiceRequestBody$inboundSchema;
  /** @deprecated use `SubmitInvoiceRequestBody$outboundSchema` instead. */
  export const outboundSchema = SubmitInvoiceRequestBody$outboundSchema;
  /** @deprecated use `SubmitInvoiceRequestBody$Outbound` instead. */
  export type Outbound = SubmitInvoiceRequestBody$Outbound;
}

export function submitInvoiceRequestBodyToJSON(
  submitInvoiceRequestBody: SubmitInvoiceRequestBody,
): string {
  return JSON.stringify(
    SubmitInvoiceRequestBody$outboundSchema.parse(submitInvoiceRequestBody),
  );
}

export function submitInvoiceRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<SubmitInvoiceRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubmitInvoiceRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubmitInvoiceRequestBody' from JSON`,
  );
}

/** @internal */
export const SubmitInvoiceRequest$inboundSchema: z.ZodType<
  SubmitInvoiceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  integrationConfigurationId: z.string(),
  RequestBody: z.lazy(() => SubmitInvoiceRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type SubmitInvoiceRequest$Outbound = {
  integrationConfigurationId: string;
  RequestBody: SubmitInvoiceRequestBody$Outbound;
};

/** @internal */
export const SubmitInvoiceRequest$outboundSchema: z.ZodType<
  SubmitInvoiceRequest$Outbound,
  z.ZodTypeDef,
  SubmitInvoiceRequest
> = z.object({
  integrationConfigurationId: z.string(),
  requestBody: z.lazy(() => SubmitInvoiceRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubmitInvoiceRequest$ {
  /** @deprecated use `SubmitInvoiceRequest$inboundSchema` instead. */
  export const inboundSchema = SubmitInvoiceRequest$inboundSchema;
  /** @deprecated use `SubmitInvoiceRequest$outboundSchema` instead. */
  export const outboundSchema = SubmitInvoiceRequest$outboundSchema;
  /** @deprecated use `SubmitInvoiceRequest$Outbound` instead. */
  export type Outbound = SubmitInvoiceRequest$Outbound;
}

export function submitInvoiceRequestToJSON(
  submitInvoiceRequest: SubmitInvoiceRequest,
): string {
  return JSON.stringify(
    SubmitInvoiceRequest$outboundSchema.parse(submitInvoiceRequest),
  );
}

export function submitInvoiceRequestFromJSON(
  jsonString: string,
): SafeParseResult<SubmitInvoiceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubmitInvoiceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubmitInvoiceRequest' from JSON`,
  );
}

/** @internal */
export const SubmitInvoiceResponseBody$inboundSchema: z.ZodType<
  SubmitInvoiceResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  invoiceId: z.string().optional(),
  test: z.boolean().optional(),
  validationErrors: z.array(z.string()).optional(),
});

/** @internal */
export type SubmitInvoiceResponseBody$Outbound = {
  invoiceId?: string | undefined;
  test?: boolean | undefined;
  validationErrors?: Array<string> | undefined;
};

/** @internal */
export const SubmitInvoiceResponseBody$outboundSchema: z.ZodType<
  SubmitInvoiceResponseBody$Outbound,
  z.ZodTypeDef,
  SubmitInvoiceResponseBody
> = z.object({
  invoiceId: z.string().optional(),
  test: z.boolean().optional(),
  validationErrors: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubmitInvoiceResponseBody$ {
  /** @deprecated use `SubmitInvoiceResponseBody$inboundSchema` instead. */
  export const inboundSchema = SubmitInvoiceResponseBody$inboundSchema;
  /** @deprecated use `SubmitInvoiceResponseBody$outboundSchema` instead. */
  export const outboundSchema = SubmitInvoiceResponseBody$outboundSchema;
  /** @deprecated use `SubmitInvoiceResponseBody$Outbound` instead. */
  export type Outbound = SubmitInvoiceResponseBody$Outbound;
}

export function submitInvoiceResponseBodyToJSON(
  submitInvoiceResponseBody: SubmitInvoiceResponseBody,
): string {
  return JSON.stringify(
    SubmitInvoiceResponseBody$outboundSchema.parse(submitInvoiceResponseBody),
  );
}

export function submitInvoiceResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<SubmitInvoiceResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubmitInvoiceResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubmitInvoiceResponseBody' from JSON`,
  );
}
