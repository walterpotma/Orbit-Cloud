/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetRollingReleaseConfigRequest = {
  /**
   * Project ID or project name (URL-encoded)
   */
  idOrName: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
};

/**
 * An array of all the stages required during a deployment release. Each stage defines a target percentage and advancement rules. The final stage must always have targetPercentage: 100.
 */
export type GetRollingReleaseConfigStages = {
  /**
   * The percentage of traffic to serve to the canary deployment (0-100)
   */
  targetPercentage: number;
  /**
   * Whether or not this stage requires manual approval to proceed
   */
  requireApproval?: boolean | undefined;
  /**
   * Duration in minutes for automatic advancement to the next stage
   */
  duration?: number | undefined;
};

/**
 * Project-level rolling release configuration that defines how deployments should be gradually rolled out
 */
export type GetRollingReleaseConfigRollingRelease = {
  /**
   * The environment that the release targets, currently only supports production. Adding in case we want to configure with alias groups or custom environments.
   */
  target: string;
  /**
   * An array of all the stages required during a deployment release. Each stage defines a target percentage and advancement rules. The final stage must always have targetPercentage: 100.
   */
  stages?: Array<GetRollingReleaseConfigStages> | null | undefined;
  /**
   * Whether the request served by a canary deployment should return a header indicating a canary was served. Defaults to `false` when omitted.
   */
  canaryResponseHeader?: boolean | undefined;
};

export type GetRollingReleaseConfigResponseBody = {
  /**
   * Project-level rolling release configuration that defines how deployments should be gradually rolled out
   */
  rollingRelease: GetRollingReleaseConfigRollingRelease | null;
};

/** @internal */
export const GetRollingReleaseConfigRequest$inboundSchema: z.ZodType<
  GetRollingReleaseConfigRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  idOrName: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/** @internal */
export type GetRollingReleaseConfigRequest$Outbound = {
  idOrName: string;
  teamId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const GetRollingReleaseConfigRequest$outboundSchema: z.ZodType<
  GetRollingReleaseConfigRequest$Outbound,
  z.ZodTypeDef,
  GetRollingReleaseConfigRequest
> = z.object({
  idOrName: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRollingReleaseConfigRequest$ {
  /** @deprecated use `GetRollingReleaseConfigRequest$inboundSchema` instead. */
  export const inboundSchema = GetRollingReleaseConfigRequest$inboundSchema;
  /** @deprecated use `GetRollingReleaseConfigRequest$outboundSchema` instead. */
  export const outboundSchema = GetRollingReleaseConfigRequest$outboundSchema;
  /** @deprecated use `GetRollingReleaseConfigRequest$Outbound` instead. */
  export type Outbound = GetRollingReleaseConfigRequest$Outbound;
}

export function getRollingReleaseConfigRequestToJSON(
  getRollingReleaseConfigRequest: GetRollingReleaseConfigRequest,
): string {
  return JSON.stringify(
    GetRollingReleaseConfigRequest$outboundSchema.parse(
      getRollingReleaseConfigRequest,
    ),
  );
}

export function getRollingReleaseConfigRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetRollingReleaseConfigRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRollingReleaseConfigRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRollingReleaseConfigRequest' from JSON`,
  );
}

/** @internal */
export const GetRollingReleaseConfigStages$inboundSchema: z.ZodType<
  GetRollingReleaseConfigStages,
  z.ZodTypeDef,
  unknown
> = z.object({
  targetPercentage: z.number(),
  requireApproval: z.boolean().optional(),
  duration: z.number().optional(),
});

/** @internal */
export type GetRollingReleaseConfigStages$Outbound = {
  targetPercentage: number;
  requireApproval?: boolean | undefined;
  duration?: number | undefined;
};

/** @internal */
export const GetRollingReleaseConfigStages$outboundSchema: z.ZodType<
  GetRollingReleaseConfigStages$Outbound,
  z.ZodTypeDef,
  GetRollingReleaseConfigStages
> = z.object({
  targetPercentage: z.number(),
  requireApproval: z.boolean().optional(),
  duration: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRollingReleaseConfigStages$ {
  /** @deprecated use `GetRollingReleaseConfigStages$inboundSchema` instead. */
  export const inboundSchema = GetRollingReleaseConfigStages$inboundSchema;
  /** @deprecated use `GetRollingReleaseConfigStages$outboundSchema` instead. */
  export const outboundSchema = GetRollingReleaseConfigStages$outboundSchema;
  /** @deprecated use `GetRollingReleaseConfigStages$Outbound` instead. */
  export type Outbound = GetRollingReleaseConfigStages$Outbound;
}

export function getRollingReleaseConfigStagesToJSON(
  getRollingReleaseConfigStages: GetRollingReleaseConfigStages,
): string {
  return JSON.stringify(
    GetRollingReleaseConfigStages$outboundSchema.parse(
      getRollingReleaseConfigStages,
    ),
  );
}

export function getRollingReleaseConfigStagesFromJSON(
  jsonString: string,
): SafeParseResult<GetRollingReleaseConfigStages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRollingReleaseConfigStages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRollingReleaseConfigStages' from JSON`,
  );
}

/** @internal */
export const GetRollingReleaseConfigRollingRelease$inboundSchema: z.ZodType<
  GetRollingReleaseConfigRollingRelease,
  z.ZodTypeDef,
  unknown
> = z.object({
  target: z.string(),
  stages: z.nullable(
    z.array(z.lazy(() => GetRollingReleaseConfigStages$inboundSchema)),
  ).optional(),
  canaryResponseHeader: z.boolean().optional(),
});

/** @internal */
export type GetRollingReleaseConfigRollingRelease$Outbound = {
  target: string;
  stages?: Array<GetRollingReleaseConfigStages$Outbound> | null | undefined;
  canaryResponseHeader?: boolean | undefined;
};

/** @internal */
export const GetRollingReleaseConfigRollingRelease$outboundSchema: z.ZodType<
  GetRollingReleaseConfigRollingRelease$Outbound,
  z.ZodTypeDef,
  GetRollingReleaseConfigRollingRelease
> = z.object({
  target: z.string(),
  stages: z.nullable(
    z.array(z.lazy(() => GetRollingReleaseConfigStages$outboundSchema)),
  ).optional(),
  canaryResponseHeader: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRollingReleaseConfigRollingRelease$ {
  /** @deprecated use `GetRollingReleaseConfigRollingRelease$inboundSchema` instead. */
  export const inboundSchema =
    GetRollingReleaseConfigRollingRelease$inboundSchema;
  /** @deprecated use `GetRollingReleaseConfigRollingRelease$outboundSchema` instead. */
  export const outboundSchema =
    GetRollingReleaseConfigRollingRelease$outboundSchema;
  /** @deprecated use `GetRollingReleaseConfigRollingRelease$Outbound` instead. */
  export type Outbound = GetRollingReleaseConfigRollingRelease$Outbound;
}

export function getRollingReleaseConfigRollingReleaseToJSON(
  getRollingReleaseConfigRollingRelease: GetRollingReleaseConfigRollingRelease,
): string {
  return JSON.stringify(
    GetRollingReleaseConfigRollingRelease$outboundSchema.parse(
      getRollingReleaseConfigRollingRelease,
    ),
  );
}

export function getRollingReleaseConfigRollingReleaseFromJSON(
  jsonString: string,
): SafeParseResult<GetRollingReleaseConfigRollingRelease, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetRollingReleaseConfigRollingRelease$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRollingReleaseConfigRollingRelease' from JSON`,
  );
}

/** @internal */
export const GetRollingReleaseConfigResponseBody$inboundSchema: z.ZodType<
  GetRollingReleaseConfigResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  rollingRelease: z.nullable(
    z.lazy(() => GetRollingReleaseConfigRollingRelease$inboundSchema),
  ),
});

/** @internal */
export type GetRollingReleaseConfigResponseBody$Outbound = {
  rollingRelease: GetRollingReleaseConfigRollingRelease$Outbound | null;
};

/** @internal */
export const GetRollingReleaseConfigResponseBody$outboundSchema: z.ZodType<
  GetRollingReleaseConfigResponseBody$Outbound,
  z.ZodTypeDef,
  GetRollingReleaseConfigResponseBody
> = z.object({
  rollingRelease: z.nullable(
    z.lazy(() => GetRollingReleaseConfigRollingRelease$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRollingReleaseConfigResponseBody$ {
  /** @deprecated use `GetRollingReleaseConfigResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetRollingReleaseConfigResponseBody$inboundSchema;
  /** @deprecated use `GetRollingReleaseConfigResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetRollingReleaseConfigResponseBody$outboundSchema;
  /** @deprecated use `GetRollingReleaseConfigResponseBody$Outbound` instead. */
  export type Outbound = GetRollingReleaseConfigResponseBody$Outbound;
}

export function getRollingReleaseConfigResponseBodyToJSON(
  getRollingReleaseConfigResponseBody: GetRollingReleaseConfigResponseBody,
): string {
  return JSON.stringify(
    GetRollingReleaseConfigResponseBody$outboundSchema.parse(
      getRollingReleaseConfigResponseBody,
    ),
  );
}

export function getRollingReleaseConfigResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetRollingReleaseConfigResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetRollingReleaseConfigResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRollingReleaseConfigResponseBody' from JSON`,
  );
}
