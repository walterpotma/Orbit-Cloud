/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * An object describing the reason why the team is being deleted.
 */
export type DeleteTeamReasons = {
  /**
   * Idenitifier slug of the reason why the team is being deleted.
   */
  slug: string;
  /**
   * Description of the reason why the team is being deleted.
   */
  description: string;
};

export type DeleteTeamRequestBody = {
  /**
   * Optional array of objects that describe the reason why the team is being deleted.
   */
  reasons?: Array<DeleteTeamReasons> | undefined;
};

export type DeleteTeamRequest = {
  /**
   * Id of the team to be set as the new default team
   */
  newDefaultTeamId?: string | undefined;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId: string;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
  requestBody: DeleteTeamRequestBody;
};

/**
 * The Team was successfully deleted
 */
export type DeleteTeamResponseBody = {
  /**
   * The ID of the deleted Team
   */
  id: string;
  /**
   * Signifies whether the default team update has failed, when newDefaultTeamId is provided in request query.
   */
  newDefaultTeamIdError?: boolean | undefined;
};

/** @internal */
export const DeleteTeamReasons$inboundSchema: z.ZodType<
  DeleteTeamReasons,
  z.ZodTypeDef,
  unknown
> = z.object({
  slug: z.string(),
  description: z.string(),
});

/** @internal */
export type DeleteTeamReasons$Outbound = {
  slug: string;
  description: string;
};

/** @internal */
export const DeleteTeamReasons$outboundSchema: z.ZodType<
  DeleteTeamReasons$Outbound,
  z.ZodTypeDef,
  DeleteTeamReasons
> = z.object({
  slug: z.string(),
  description: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTeamReasons$ {
  /** @deprecated use `DeleteTeamReasons$inboundSchema` instead. */
  export const inboundSchema = DeleteTeamReasons$inboundSchema;
  /** @deprecated use `DeleteTeamReasons$outboundSchema` instead. */
  export const outboundSchema = DeleteTeamReasons$outboundSchema;
  /** @deprecated use `DeleteTeamReasons$Outbound` instead. */
  export type Outbound = DeleteTeamReasons$Outbound;
}

export function deleteTeamReasonsToJSON(
  deleteTeamReasons: DeleteTeamReasons,
): string {
  return JSON.stringify(
    DeleteTeamReasons$outboundSchema.parse(deleteTeamReasons),
  );
}

export function deleteTeamReasonsFromJSON(
  jsonString: string,
): SafeParseResult<DeleteTeamReasons, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteTeamReasons$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteTeamReasons' from JSON`,
  );
}

/** @internal */
export const DeleteTeamRequestBody$inboundSchema: z.ZodType<
  DeleteTeamRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  reasons: z.array(z.lazy(() => DeleteTeamReasons$inboundSchema)).optional(),
});

/** @internal */
export type DeleteTeamRequestBody$Outbound = {
  reasons?: Array<DeleteTeamReasons$Outbound> | undefined;
};

/** @internal */
export const DeleteTeamRequestBody$outboundSchema: z.ZodType<
  DeleteTeamRequestBody$Outbound,
  z.ZodTypeDef,
  DeleteTeamRequestBody
> = z.object({
  reasons: z.array(z.lazy(() => DeleteTeamReasons$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTeamRequestBody$ {
  /** @deprecated use `DeleteTeamRequestBody$inboundSchema` instead. */
  export const inboundSchema = DeleteTeamRequestBody$inboundSchema;
  /** @deprecated use `DeleteTeamRequestBody$outboundSchema` instead. */
  export const outboundSchema = DeleteTeamRequestBody$outboundSchema;
  /** @deprecated use `DeleteTeamRequestBody$Outbound` instead. */
  export type Outbound = DeleteTeamRequestBody$Outbound;
}

export function deleteTeamRequestBodyToJSON(
  deleteTeamRequestBody: DeleteTeamRequestBody,
): string {
  return JSON.stringify(
    DeleteTeamRequestBody$outboundSchema.parse(deleteTeamRequestBody),
  );
}

export function deleteTeamRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteTeamRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteTeamRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteTeamRequestBody' from JSON`,
  );
}

/** @internal */
export const DeleteTeamRequest$inboundSchema: z.ZodType<
  DeleteTeamRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  newDefaultTeamId: z.string().optional(),
  teamId: z.string(),
  slug: z.string().optional(),
  RequestBody: z.lazy(() => DeleteTeamRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type DeleteTeamRequest$Outbound = {
  newDefaultTeamId?: string | undefined;
  teamId: string;
  slug?: string | undefined;
  RequestBody: DeleteTeamRequestBody$Outbound;
};

/** @internal */
export const DeleteTeamRequest$outboundSchema: z.ZodType<
  DeleteTeamRequest$Outbound,
  z.ZodTypeDef,
  DeleteTeamRequest
> = z.object({
  newDefaultTeamId: z.string().optional(),
  teamId: z.string(),
  slug: z.string().optional(),
  requestBody: z.lazy(() => DeleteTeamRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTeamRequest$ {
  /** @deprecated use `DeleteTeamRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteTeamRequest$inboundSchema;
  /** @deprecated use `DeleteTeamRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteTeamRequest$outboundSchema;
  /** @deprecated use `DeleteTeamRequest$Outbound` instead. */
  export type Outbound = DeleteTeamRequest$Outbound;
}

export function deleteTeamRequestToJSON(
  deleteTeamRequest: DeleteTeamRequest,
): string {
  return JSON.stringify(
    DeleteTeamRequest$outboundSchema.parse(deleteTeamRequest),
  );
}

export function deleteTeamRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteTeamRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteTeamRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteTeamRequest' from JSON`,
  );
}

/** @internal */
export const DeleteTeamResponseBody$inboundSchema: z.ZodType<
  DeleteTeamResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  newDefaultTeamIdError: z.boolean().optional(),
});

/** @internal */
export type DeleteTeamResponseBody$Outbound = {
  id: string;
  newDefaultTeamIdError?: boolean | undefined;
};

/** @internal */
export const DeleteTeamResponseBody$outboundSchema: z.ZodType<
  DeleteTeamResponseBody$Outbound,
  z.ZodTypeDef,
  DeleteTeamResponseBody
> = z.object({
  id: z.string(),
  newDefaultTeamIdError: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTeamResponseBody$ {
  /** @deprecated use `DeleteTeamResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeleteTeamResponseBody$inboundSchema;
  /** @deprecated use `DeleteTeamResponseBody$outboundSchema` instead. */
  export const outboundSchema = DeleteTeamResponseBody$outboundSchema;
  /** @deprecated use `DeleteTeamResponseBody$Outbound` instead. */
  export type Outbound = DeleteTeamResponseBody$Outbound;
}

export function deleteTeamResponseBodyToJSON(
  deleteTeamResponseBody: DeleteTeamResponseBody,
): string {
  return JSON.stringify(
    DeleteTeamResponseBody$outboundSchema.parse(deleteTeamResponseBody),
  );
}

export function deleteTeamResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteTeamResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteTeamResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteTeamResponseBody' from JSON`,
  );
}
