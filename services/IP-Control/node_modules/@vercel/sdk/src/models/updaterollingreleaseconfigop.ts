/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type UpdateRollingReleaseConfigRequest = {
  /**
   * Project ID or project name (URL-encoded)
   */
  idOrName: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
};

/**
 * A stage object configured for a rolling release once a new deployment is triggered the first stage will be read in the proxy for first time visitors, and if a RNG < targetPercentage then it will serve the new deployment. Upon approval the next stage will be read, etc.
 */
export type ResponseBodyStages = {
  /**
   * The percentage of traffic to serve to the canary deployment (0-100)
   */
  targetPercentage: number;
  /**
   * Whether or not this stage requires manual approval to proceed
   */
  requireApproval?: boolean | undefined;
  /**
   * Duration in minutes for automatic advancement to the next stage
   */
  duration?: number | undefined;
};

export type ResponseBodyRollingRelease = {
  stages?: Array<ResponseBodyStages> | null | undefined;
};

export type UpdateRollingReleaseConfigResponseBody2 = {
  rollingRelease: ResponseBodyRollingRelease | null;
};

export type UpdateRollingReleaseConfigResponseBody1 = {
  rollingRelease?: any | null | undefined;
};

export type UpdateRollingReleaseConfigResponseBody =
  | UpdateRollingReleaseConfigResponseBody1
  | UpdateRollingReleaseConfigResponseBody2;

/** @internal */
export const UpdateRollingReleaseConfigRequest$inboundSchema: z.ZodType<
  UpdateRollingReleaseConfigRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  idOrName: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/** @internal */
export type UpdateRollingReleaseConfigRequest$Outbound = {
  idOrName: string;
  teamId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const UpdateRollingReleaseConfigRequest$outboundSchema: z.ZodType<
  UpdateRollingReleaseConfigRequest$Outbound,
  z.ZodTypeDef,
  UpdateRollingReleaseConfigRequest
> = z.object({
  idOrName: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRollingReleaseConfigRequest$ {
  /** @deprecated use `UpdateRollingReleaseConfigRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateRollingReleaseConfigRequest$inboundSchema;
  /** @deprecated use `UpdateRollingReleaseConfigRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateRollingReleaseConfigRequest$outboundSchema;
  /** @deprecated use `UpdateRollingReleaseConfigRequest$Outbound` instead. */
  export type Outbound = UpdateRollingReleaseConfigRequest$Outbound;
}

export function updateRollingReleaseConfigRequestToJSON(
  updateRollingReleaseConfigRequest: UpdateRollingReleaseConfigRequest,
): string {
  return JSON.stringify(
    UpdateRollingReleaseConfigRequest$outboundSchema.parse(
      updateRollingReleaseConfigRequest,
    ),
  );
}

export function updateRollingReleaseConfigRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateRollingReleaseConfigRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateRollingReleaseConfigRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateRollingReleaseConfigRequest' from JSON`,
  );
}

/** @internal */
export const ResponseBodyStages$inboundSchema: z.ZodType<
  ResponseBodyStages,
  z.ZodTypeDef,
  unknown
> = z.object({
  targetPercentage: z.number(),
  requireApproval: z.boolean().optional(),
  duration: z.number().optional(),
});

/** @internal */
export type ResponseBodyStages$Outbound = {
  targetPercentage: number;
  requireApproval?: boolean | undefined;
  duration?: number | undefined;
};

/** @internal */
export const ResponseBodyStages$outboundSchema: z.ZodType<
  ResponseBodyStages$Outbound,
  z.ZodTypeDef,
  ResponseBodyStages
> = z.object({
  targetPercentage: z.number(),
  requireApproval: z.boolean().optional(),
  duration: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyStages$ {
  /** @deprecated use `ResponseBodyStages$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyStages$inboundSchema;
  /** @deprecated use `ResponseBodyStages$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyStages$outboundSchema;
  /** @deprecated use `ResponseBodyStages$Outbound` instead. */
  export type Outbound = ResponseBodyStages$Outbound;
}

export function responseBodyStagesToJSON(
  responseBodyStages: ResponseBodyStages,
): string {
  return JSON.stringify(
    ResponseBodyStages$outboundSchema.parse(responseBodyStages),
  );
}

export function responseBodyStagesFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyStages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyStages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyStages' from JSON`,
  );
}

/** @internal */
export const ResponseBodyRollingRelease$inboundSchema: z.ZodType<
  ResponseBodyRollingRelease,
  z.ZodTypeDef,
  unknown
> = z.object({
  stages: z.nullable(z.array(z.lazy(() => ResponseBodyStages$inboundSchema)))
    .optional(),
});

/** @internal */
export type ResponseBodyRollingRelease$Outbound = {
  stages?: Array<ResponseBodyStages$Outbound> | null | undefined;
};

/** @internal */
export const ResponseBodyRollingRelease$outboundSchema: z.ZodType<
  ResponseBodyRollingRelease$Outbound,
  z.ZodTypeDef,
  ResponseBodyRollingRelease
> = z.object({
  stages: z.nullable(z.array(z.lazy(() => ResponseBodyStages$outboundSchema)))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyRollingRelease$ {
  /** @deprecated use `ResponseBodyRollingRelease$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyRollingRelease$inboundSchema;
  /** @deprecated use `ResponseBodyRollingRelease$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyRollingRelease$outboundSchema;
  /** @deprecated use `ResponseBodyRollingRelease$Outbound` instead. */
  export type Outbound = ResponseBodyRollingRelease$Outbound;
}

export function responseBodyRollingReleaseToJSON(
  responseBodyRollingRelease: ResponseBodyRollingRelease,
): string {
  return JSON.stringify(
    ResponseBodyRollingRelease$outboundSchema.parse(responseBodyRollingRelease),
  );
}

export function responseBodyRollingReleaseFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyRollingRelease, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyRollingRelease$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyRollingRelease' from JSON`,
  );
}

/** @internal */
export const UpdateRollingReleaseConfigResponseBody2$inboundSchema: z.ZodType<
  UpdateRollingReleaseConfigResponseBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  rollingRelease: z.nullable(
    z.lazy(() => ResponseBodyRollingRelease$inboundSchema),
  ),
});

/** @internal */
export type UpdateRollingReleaseConfigResponseBody2$Outbound = {
  rollingRelease: ResponseBodyRollingRelease$Outbound | null;
};

/** @internal */
export const UpdateRollingReleaseConfigResponseBody2$outboundSchema: z.ZodType<
  UpdateRollingReleaseConfigResponseBody2$Outbound,
  z.ZodTypeDef,
  UpdateRollingReleaseConfigResponseBody2
> = z.object({
  rollingRelease: z.nullable(
    z.lazy(() => ResponseBodyRollingRelease$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRollingReleaseConfigResponseBody2$ {
  /** @deprecated use `UpdateRollingReleaseConfigResponseBody2$inboundSchema` instead. */
  export const inboundSchema =
    UpdateRollingReleaseConfigResponseBody2$inboundSchema;
  /** @deprecated use `UpdateRollingReleaseConfigResponseBody2$outboundSchema` instead. */
  export const outboundSchema =
    UpdateRollingReleaseConfigResponseBody2$outboundSchema;
  /** @deprecated use `UpdateRollingReleaseConfigResponseBody2$Outbound` instead. */
  export type Outbound = UpdateRollingReleaseConfigResponseBody2$Outbound;
}

export function updateRollingReleaseConfigResponseBody2ToJSON(
  updateRollingReleaseConfigResponseBody2:
    UpdateRollingReleaseConfigResponseBody2,
): string {
  return JSON.stringify(
    UpdateRollingReleaseConfigResponseBody2$outboundSchema.parse(
      updateRollingReleaseConfigResponseBody2,
    ),
  );
}

export function updateRollingReleaseConfigResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateRollingReleaseConfigResponseBody2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateRollingReleaseConfigResponseBody2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateRollingReleaseConfigResponseBody2' from JSON`,
  );
}

/** @internal */
export const UpdateRollingReleaseConfigResponseBody1$inboundSchema: z.ZodType<
  UpdateRollingReleaseConfigResponseBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  rollingRelease: z.nullable(z.any()).optional(),
});

/** @internal */
export type UpdateRollingReleaseConfigResponseBody1$Outbound = {
  rollingRelease?: any | null | undefined;
};

/** @internal */
export const UpdateRollingReleaseConfigResponseBody1$outboundSchema: z.ZodType<
  UpdateRollingReleaseConfigResponseBody1$Outbound,
  z.ZodTypeDef,
  UpdateRollingReleaseConfigResponseBody1
> = z.object({
  rollingRelease: z.nullable(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRollingReleaseConfigResponseBody1$ {
  /** @deprecated use `UpdateRollingReleaseConfigResponseBody1$inboundSchema` instead. */
  export const inboundSchema =
    UpdateRollingReleaseConfigResponseBody1$inboundSchema;
  /** @deprecated use `UpdateRollingReleaseConfigResponseBody1$outboundSchema` instead. */
  export const outboundSchema =
    UpdateRollingReleaseConfigResponseBody1$outboundSchema;
  /** @deprecated use `UpdateRollingReleaseConfigResponseBody1$Outbound` instead. */
  export type Outbound = UpdateRollingReleaseConfigResponseBody1$Outbound;
}

export function updateRollingReleaseConfigResponseBody1ToJSON(
  updateRollingReleaseConfigResponseBody1:
    UpdateRollingReleaseConfigResponseBody1,
): string {
  return JSON.stringify(
    UpdateRollingReleaseConfigResponseBody1$outboundSchema.parse(
      updateRollingReleaseConfigResponseBody1,
    ),
  );
}

export function updateRollingReleaseConfigResponseBody1FromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateRollingReleaseConfigResponseBody1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateRollingReleaseConfigResponseBody1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateRollingReleaseConfigResponseBody1' from JSON`,
  );
}

/** @internal */
export const UpdateRollingReleaseConfigResponseBody$inboundSchema: z.ZodType<
  UpdateRollingReleaseConfigResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateRollingReleaseConfigResponseBody1$inboundSchema),
  z.lazy(() => UpdateRollingReleaseConfigResponseBody2$inboundSchema),
]);

/** @internal */
export type UpdateRollingReleaseConfigResponseBody$Outbound =
  | UpdateRollingReleaseConfigResponseBody1$Outbound
  | UpdateRollingReleaseConfigResponseBody2$Outbound;

/** @internal */
export const UpdateRollingReleaseConfigResponseBody$outboundSchema: z.ZodType<
  UpdateRollingReleaseConfigResponseBody$Outbound,
  z.ZodTypeDef,
  UpdateRollingReleaseConfigResponseBody
> = z.union([
  z.lazy(() => UpdateRollingReleaseConfigResponseBody1$outboundSchema),
  z.lazy(() => UpdateRollingReleaseConfigResponseBody2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRollingReleaseConfigResponseBody$ {
  /** @deprecated use `UpdateRollingReleaseConfigResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    UpdateRollingReleaseConfigResponseBody$inboundSchema;
  /** @deprecated use `UpdateRollingReleaseConfigResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateRollingReleaseConfigResponseBody$outboundSchema;
  /** @deprecated use `UpdateRollingReleaseConfigResponseBody$Outbound` instead. */
  export type Outbound = UpdateRollingReleaseConfigResponseBody$Outbound;
}

export function updateRollingReleaseConfigResponseBodyToJSON(
  updateRollingReleaseConfigResponseBody:
    UpdateRollingReleaseConfigResponseBody,
): string {
  return JSON.stringify(
    UpdateRollingReleaseConfigResponseBody$outboundSchema.parse(
      updateRollingReleaseConfigResponseBody,
    ),
  );
}

export function updateRollingReleaseConfigResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateRollingReleaseConfigResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateRollingReleaseConfigResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateRollingReleaseConfigResponseBody' from JSON`,
  );
}
