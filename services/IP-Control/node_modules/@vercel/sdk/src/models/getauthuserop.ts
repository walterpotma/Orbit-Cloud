/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AuthUser,
  AuthUser$inboundSchema,
  AuthUser$Outbound,
  AuthUser$outboundSchema,
} from "./authuser.js";
import {
  AuthUserLimited,
  AuthUserLimited$inboundSchema,
  AuthUserLimited$Outbound,
  AuthUserLimited$outboundSchema,
} from "./authuserlimited.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetAuthUserUser = AuthUser | AuthUserLimited;

/**
 * Successful response.
 */
export type GetAuthUserResponseBody = {
  user: AuthUser | AuthUserLimited;
};

/** @internal */
export const GetAuthUserUser$inboundSchema: z.ZodType<
  GetAuthUserUser,
  z.ZodTypeDef,
  unknown
> = z.union([AuthUser$inboundSchema, AuthUserLimited$inboundSchema]);

/** @internal */
export type GetAuthUserUser$Outbound =
  | AuthUser$Outbound
  | AuthUserLimited$Outbound;

/** @internal */
export const GetAuthUserUser$outboundSchema: z.ZodType<
  GetAuthUserUser$Outbound,
  z.ZodTypeDef,
  GetAuthUserUser
> = z.union([AuthUser$outboundSchema, AuthUserLimited$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAuthUserUser$ {
  /** @deprecated use `GetAuthUserUser$inboundSchema` instead. */
  export const inboundSchema = GetAuthUserUser$inboundSchema;
  /** @deprecated use `GetAuthUserUser$outboundSchema` instead. */
  export const outboundSchema = GetAuthUserUser$outboundSchema;
  /** @deprecated use `GetAuthUserUser$Outbound` instead. */
  export type Outbound = GetAuthUserUser$Outbound;
}

export function getAuthUserUserToJSON(
  getAuthUserUser: GetAuthUserUser,
): string {
  return JSON.stringify(GetAuthUserUser$outboundSchema.parse(getAuthUserUser));
}

export function getAuthUserUserFromJSON(
  jsonString: string,
): SafeParseResult<GetAuthUserUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAuthUserUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAuthUserUser' from JSON`,
  );
}

/** @internal */
export const GetAuthUserResponseBody$inboundSchema: z.ZodType<
  GetAuthUserResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  user: z.union([AuthUser$inboundSchema, AuthUserLimited$inboundSchema]),
});

/** @internal */
export type GetAuthUserResponseBody$Outbound = {
  user: AuthUser$Outbound | AuthUserLimited$Outbound;
};

/** @internal */
export const GetAuthUserResponseBody$outboundSchema: z.ZodType<
  GetAuthUserResponseBody$Outbound,
  z.ZodTypeDef,
  GetAuthUserResponseBody
> = z.object({
  user: z.union([AuthUser$outboundSchema, AuthUserLimited$outboundSchema]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAuthUserResponseBody$ {
  /** @deprecated use `GetAuthUserResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetAuthUserResponseBody$inboundSchema;
  /** @deprecated use `GetAuthUserResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetAuthUserResponseBody$outboundSchema;
  /** @deprecated use `GetAuthUserResponseBody$Outbound` instead. */
  export type Outbound = GetAuthUserResponseBody$Outbound;
}

export function getAuthUserResponseBodyToJSON(
  getAuthUserResponseBody: GetAuthUserResponseBody,
): string {
  return JSON.stringify(
    GetAuthUserResponseBody$outboundSchema.parse(getAuthUserResponseBody),
  );
}

export function getAuthUserResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetAuthUserResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAuthUserResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAuthUserResponseBody' from JSON`,
  );
}
