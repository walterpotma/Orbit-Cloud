/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * The project role that will be added to this Access Group.
 */
export const CreateAccessGroupProjectRole = {
  Admin: "ADMIN",
  ProjectViewer: "PROJECT_VIEWER",
  ProjectDeveloper: "PROJECT_DEVELOPER",
} as const;
/**
 * The project role that will be added to this Access Group.
 */
export type CreateAccessGroupProjectRole = ClosedEnum<
  typeof CreateAccessGroupProjectRole
>;

export type CreateAccessGroupProjectRequestBody = {
  /**
   * The ID of the project.
   */
  projectId: string;
  /**
   * The project role that will be added to this Access Group.
   */
  role: CreateAccessGroupProjectRole;
};

export type CreateAccessGroupProjectRequest = {
  accessGroupIdOrName: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
  requestBody: CreateAccessGroupProjectRequestBody;
};

export const CreateAccessGroupProjectAccessGroupsRole = {
  Admin: "ADMIN",
  ProjectDeveloper: "PROJECT_DEVELOPER",
  ProjectViewer: "PROJECT_VIEWER",
} as const;
export type CreateAccessGroupProjectAccessGroupsRole = ClosedEnum<
  typeof CreateAccessGroupProjectAccessGroupsRole
>;

export type CreateAccessGroupProjectResponseBody = {
  teamId: string;
  accessGroupId: string;
  projectId: string;
  role: CreateAccessGroupProjectAccessGroupsRole;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const CreateAccessGroupProjectRole$inboundSchema: z.ZodNativeEnum<
  typeof CreateAccessGroupProjectRole
> = z.nativeEnum(CreateAccessGroupProjectRole);

/** @internal */
export const CreateAccessGroupProjectRole$outboundSchema: z.ZodNativeEnum<
  typeof CreateAccessGroupProjectRole
> = CreateAccessGroupProjectRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAccessGroupProjectRole$ {
  /** @deprecated use `CreateAccessGroupProjectRole$inboundSchema` instead. */
  export const inboundSchema = CreateAccessGroupProjectRole$inboundSchema;
  /** @deprecated use `CreateAccessGroupProjectRole$outboundSchema` instead. */
  export const outboundSchema = CreateAccessGroupProjectRole$outboundSchema;
}

/** @internal */
export const CreateAccessGroupProjectRequestBody$inboundSchema: z.ZodType<
  CreateAccessGroupProjectRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectId: z.string(),
  role: CreateAccessGroupProjectRole$inboundSchema,
});

/** @internal */
export type CreateAccessGroupProjectRequestBody$Outbound = {
  projectId: string;
  role: string;
};

/** @internal */
export const CreateAccessGroupProjectRequestBody$outboundSchema: z.ZodType<
  CreateAccessGroupProjectRequestBody$Outbound,
  z.ZodTypeDef,
  CreateAccessGroupProjectRequestBody
> = z.object({
  projectId: z.string(),
  role: CreateAccessGroupProjectRole$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAccessGroupProjectRequestBody$ {
  /** @deprecated use `CreateAccessGroupProjectRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    CreateAccessGroupProjectRequestBody$inboundSchema;
  /** @deprecated use `CreateAccessGroupProjectRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateAccessGroupProjectRequestBody$outboundSchema;
  /** @deprecated use `CreateAccessGroupProjectRequestBody$Outbound` instead. */
  export type Outbound = CreateAccessGroupProjectRequestBody$Outbound;
}

export function createAccessGroupProjectRequestBodyToJSON(
  createAccessGroupProjectRequestBody: CreateAccessGroupProjectRequestBody,
): string {
  return JSON.stringify(
    CreateAccessGroupProjectRequestBody$outboundSchema.parse(
      createAccessGroupProjectRequestBody,
    ),
  );
}

export function createAccessGroupProjectRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateAccessGroupProjectRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAccessGroupProjectRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAccessGroupProjectRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateAccessGroupProjectRequest$inboundSchema: z.ZodType<
  CreateAccessGroupProjectRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessGroupIdOrName: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  RequestBody: z.lazy(() => CreateAccessGroupProjectRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateAccessGroupProjectRequest$Outbound = {
  accessGroupIdOrName: string;
  teamId?: string | undefined;
  slug?: string | undefined;
  RequestBody: CreateAccessGroupProjectRequestBody$Outbound;
};

/** @internal */
export const CreateAccessGroupProjectRequest$outboundSchema: z.ZodType<
  CreateAccessGroupProjectRequest$Outbound,
  z.ZodTypeDef,
  CreateAccessGroupProjectRequest
> = z.object({
  accessGroupIdOrName: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  requestBody: z.lazy(() => CreateAccessGroupProjectRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAccessGroupProjectRequest$ {
  /** @deprecated use `CreateAccessGroupProjectRequest$inboundSchema` instead. */
  export const inboundSchema = CreateAccessGroupProjectRequest$inboundSchema;
  /** @deprecated use `CreateAccessGroupProjectRequest$outboundSchema` instead. */
  export const outboundSchema = CreateAccessGroupProjectRequest$outboundSchema;
  /** @deprecated use `CreateAccessGroupProjectRequest$Outbound` instead. */
  export type Outbound = CreateAccessGroupProjectRequest$Outbound;
}

export function createAccessGroupProjectRequestToJSON(
  createAccessGroupProjectRequest: CreateAccessGroupProjectRequest,
): string {
  return JSON.stringify(
    CreateAccessGroupProjectRequest$outboundSchema.parse(
      createAccessGroupProjectRequest,
    ),
  );
}

export function createAccessGroupProjectRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateAccessGroupProjectRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAccessGroupProjectRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAccessGroupProjectRequest' from JSON`,
  );
}

/** @internal */
export const CreateAccessGroupProjectAccessGroupsRole$inboundSchema:
  z.ZodNativeEnum<typeof CreateAccessGroupProjectAccessGroupsRole> = z
    .nativeEnum(CreateAccessGroupProjectAccessGroupsRole);

/** @internal */
export const CreateAccessGroupProjectAccessGroupsRole$outboundSchema:
  z.ZodNativeEnum<typeof CreateAccessGroupProjectAccessGroupsRole> =
    CreateAccessGroupProjectAccessGroupsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAccessGroupProjectAccessGroupsRole$ {
  /** @deprecated use `CreateAccessGroupProjectAccessGroupsRole$inboundSchema` instead. */
  export const inboundSchema =
    CreateAccessGroupProjectAccessGroupsRole$inboundSchema;
  /** @deprecated use `CreateAccessGroupProjectAccessGroupsRole$outboundSchema` instead. */
  export const outboundSchema =
    CreateAccessGroupProjectAccessGroupsRole$outboundSchema;
}

/** @internal */
export const CreateAccessGroupProjectResponseBody$inboundSchema: z.ZodType<
  CreateAccessGroupProjectResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  teamId: z.string(),
  accessGroupId: z.string(),
  projectId: z.string(),
  role: CreateAccessGroupProjectAccessGroupsRole$inboundSchema,
  createdAt: z.string(),
  updatedAt: z.string(),
});

/** @internal */
export type CreateAccessGroupProjectResponseBody$Outbound = {
  teamId: string;
  accessGroupId: string;
  projectId: string;
  role: string;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const CreateAccessGroupProjectResponseBody$outboundSchema: z.ZodType<
  CreateAccessGroupProjectResponseBody$Outbound,
  z.ZodTypeDef,
  CreateAccessGroupProjectResponseBody
> = z.object({
  teamId: z.string(),
  accessGroupId: z.string(),
  projectId: z.string(),
  role: CreateAccessGroupProjectAccessGroupsRole$outboundSchema,
  createdAt: z.string(),
  updatedAt: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAccessGroupProjectResponseBody$ {
  /** @deprecated use `CreateAccessGroupProjectResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    CreateAccessGroupProjectResponseBody$inboundSchema;
  /** @deprecated use `CreateAccessGroupProjectResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateAccessGroupProjectResponseBody$outboundSchema;
  /** @deprecated use `CreateAccessGroupProjectResponseBody$Outbound` instead. */
  export type Outbound = CreateAccessGroupProjectResponseBody$Outbound;
}

export function createAccessGroupProjectResponseBodyToJSON(
  createAccessGroupProjectResponseBody: CreateAccessGroupProjectResponseBody,
): string {
  return JSON.stringify(
    CreateAccessGroupProjectResponseBody$outboundSchema.parse(
      createAccessGroupProjectResponseBody,
    ),
  );
}

export function createAccessGroupProjectResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateAccessGroupProjectResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAccessGroupProjectResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAccessGroupProjectResponseBody' from JSON`,
  );
}
