/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export const CreateEventEventType = {
  ResourceUpdated: "resource.updated",
} as const;
export type CreateEventEventType = ClosedEnum<typeof CreateEventEventType>;

export type Event2 = {
  type: CreateEventEventType;
  /**
   * Partner-provided product slug or id
   */
  productId: string;
  /**
   * Partner provided resource ID
   */
  resourceId: string;
};

export const EventType = {
  InstallationUpdated: "installation.updated",
} as const;
export type EventType = ClosedEnum<typeof EventType>;

export type Event1 = {
  type: EventType;
  /**
   * The installation-level billing plan ID
   */
  billingPlanId?: string | undefined;
};

export type CreateEventEvent = Event2 | Event1;

export type CreateEventRequestBody = {
  event: Event2 | Event1;
};

export type CreateEventRequest = {
  integrationConfigurationId: string;
  requestBody: CreateEventRequestBody;
};

/** @internal */
export const CreateEventEventType$inboundSchema: z.ZodNativeEnum<
  typeof CreateEventEventType
> = z.nativeEnum(CreateEventEventType);

/** @internal */
export const CreateEventEventType$outboundSchema: z.ZodNativeEnum<
  typeof CreateEventEventType
> = CreateEventEventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEventEventType$ {
  /** @deprecated use `CreateEventEventType$inboundSchema` instead. */
  export const inboundSchema = CreateEventEventType$inboundSchema;
  /** @deprecated use `CreateEventEventType$outboundSchema` instead. */
  export const outboundSchema = CreateEventEventType$outboundSchema;
}

/** @internal */
export const Event2$inboundSchema: z.ZodType<Event2, z.ZodTypeDef, unknown> = z
  .object({
    type: CreateEventEventType$inboundSchema,
    productId: z.string(),
    resourceId: z.string(),
  });

/** @internal */
export type Event2$Outbound = {
  type: string;
  productId: string;
  resourceId: string;
};

/** @internal */
export const Event2$outboundSchema: z.ZodType<
  Event2$Outbound,
  z.ZodTypeDef,
  Event2
> = z.object({
  type: CreateEventEventType$outboundSchema,
  productId: z.string(),
  resourceId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Event2$ {
  /** @deprecated use `Event2$inboundSchema` instead. */
  export const inboundSchema = Event2$inboundSchema;
  /** @deprecated use `Event2$outboundSchema` instead. */
  export const outboundSchema = Event2$outboundSchema;
  /** @deprecated use `Event2$Outbound` instead. */
  export type Outbound = Event2$Outbound;
}

export function event2ToJSON(event2: Event2): string {
  return JSON.stringify(Event2$outboundSchema.parse(event2));
}

export function event2FromJSON(
  jsonString: string,
): SafeParseResult<Event2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Event2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Event2' from JSON`,
  );
}

/** @internal */
export const EventType$inboundSchema: z.ZodNativeEnum<typeof EventType> = z
  .nativeEnum(EventType);

/** @internal */
export const EventType$outboundSchema: z.ZodNativeEnum<typeof EventType> =
  EventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventType$ {
  /** @deprecated use `EventType$inboundSchema` instead. */
  export const inboundSchema = EventType$inboundSchema;
  /** @deprecated use `EventType$outboundSchema` instead. */
  export const outboundSchema = EventType$outboundSchema;
}

/** @internal */
export const Event1$inboundSchema: z.ZodType<Event1, z.ZodTypeDef, unknown> = z
  .object({
    type: EventType$inboundSchema,
    billingPlanId: z.string().optional(),
  });

/** @internal */
export type Event1$Outbound = {
  type: string;
  billingPlanId?: string | undefined;
};

/** @internal */
export const Event1$outboundSchema: z.ZodType<
  Event1$Outbound,
  z.ZodTypeDef,
  Event1
> = z.object({
  type: EventType$outboundSchema,
  billingPlanId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Event1$ {
  /** @deprecated use `Event1$inboundSchema` instead. */
  export const inboundSchema = Event1$inboundSchema;
  /** @deprecated use `Event1$outboundSchema` instead. */
  export const outboundSchema = Event1$outboundSchema;
  /** @deprecated use `Event1$Outbound` instead. */
  export type Outbound = Event1$Outbound;
}

export function event1ToJSON(event1: Event1): string {
  return JSON.stringify(Event1$outboundSchema.parse(event1));
}

export function event1FromJSON(
  jsonString: string,
): SafeParseResult<Event1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Event1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Event1' from JSON`,
  );
}

/** @internal */
export const CreateEventEvent$inboundSchema: z.ZodType<
  CreateEventEvent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Event2$inboundSchema),
  z.lazy(() => Event1$inboundSchema),
]);

/** @internal */
export type CreateEventEvent$Outbound = Event2$Outbound | Event1$Outbound;

/** @internal */
export const CreateEventEvent$outboundSchema: z.ZodType<
  CreateEventEvent$Outbound,
  z.ZodTypeDef,
  CreateEventEvent
> = z.union([
  z.lazy(() => Event2$outboundSchema),
  z.lazy(() => Event1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEventEvent$ {
  /** @deprecated use `CreateEventEvent$inboundSchema` instead. */
  export const inboundSchema = CreateEventEvent$inboundSchema;
  /** @deprecated use `CreateEventEvent$outboundSchema` instead. */
  export const outboundSchema = CreateEventEvent$outboundSchema;
  /** @deprecated use `CreateEventEvent$Outbound` instead. */
  export type Outbound = CreateEventEvent$Outbound;
}

export function createEventEventToJSON(
  createEventEvent: CreateEventEvent,
): string {
  return JSON.stringify(
    CreateEventEvent$outboundSchema.parse(createEventEvent),
  );
}

export function createEventEventFromJSON(
  jsonString: string,
): SafeParseResult<CreateEventEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateEventEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateEventEvent' from JSON`,
  );
}

/** @internal */
export const CreateEventRequestBody$inboundSchema: z.ZodType<
  CreateEventRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  event: z.union([
    z.lazy(() => Event2$inboundSchema),
    z.lazy(() => Event1$inboundSchema),
  ]),
});

/** @internal */
export type CreateEventRequestBody$Outbound = {
  event: Event2$Outbound | Event1$Outbound;
};

/** @internal */
export const CreateEventRequestBody$outboundSchema: z.ZodType<
  CreateEventRequestBody$Outbound,
  z.ZodTypeDef,
  CreateEventRequestBody
> = z.object({
  event: z.union([
    z.lazy(() => Event2$outboundSchema),
    z.lazy(() => Event1$outboundSchema),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEventRequestBody$ {
  /** @deprecated use `CreateEventRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateEventRequestBody$inboundSchema;
  /** @deprecated use `CreateEventRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateEventRequestBody$outboundSchema;
  /** @deprecated use `CreateEventRequestBody$Outbound` instead. */
  export type Outbound = CreateEventRequestBody$Outbound;
}

export function createEventRequestBodyToJSON(
  createEventRequestBody: CreateEventRequestBody,
): string {
  return JSON.stringify(
    CreateEventRequestBody$outboundSchema.parse(createEventRequestBody),
  );
}

export function createEventRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateEventRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateEventRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateEventRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateEventRequest$inboundSchema: z.ZodType<
  CreateEventRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  integrationConfigurationId: z.string(),
  RequestBody: z.lazy(() => CreateEventRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateEventRequest$Outbound = {
  integrationConfigurationId: string;
  RequestBody: CreateEventRequestBody$Outbound;
};

/** @internal */
export const CreateEventRequest$outboundSchema: z.ZodType<
  CreateEventRequest$Outbound,
  z.ZodTypeDef,
  CreateEventRequest
> = z.object({
  integrationConfigurationId: z.string(),
  requestBody: z.lazy(() => CreateEventRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEventRequest$ {
  /** @deprecated use `CreateEventRequest$inboundSchema` instead. */
  export const inboundSchema = CreateEventRequest$inboundSchema;
  /** @deprecated use `CreateEventRequest$outboundSchema` instead. */
  export const outboundSchema = CreateEventRequest$outboundSchema;
  /** @deprecated use `CreateEventRequest$Outbound` instead. */
  export type Outbound = CreateEventRequest$Outbound;
}

export function createEventRequestToJSON(
  createEventRequest: CreateEventRequest,
): string {
  return JSON.stringify(
    CreateEventRequest$outboundSchema.parse(createEventRequest),
  );
}

export function createEventRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateEventRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateEventRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateEventRequest' from JSON`,
  );
}
