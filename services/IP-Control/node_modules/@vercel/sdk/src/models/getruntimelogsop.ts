/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetRuntimeLogsRequest = {
  projectId: string;
  deploymentId: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
};

export const GetRuntimeLogsLevel = {
  Error: "error",
  Warning: "warning",
  Info: "info",
} as const;
export type GetRuntimeLogsLevel = ClosedEnum<typeof GetRuntimeLogsLevel>;

export const GetRuntimeLogsSource = {
  Delimiter: "delimiter",
  EdgeFunction: "edge-function",
  EdgeMiddleware: "edge-middleware",
  Serverless: "serverless",
  Request: "request",
} as const;
export type GetRuntimeLogsSource = ClosedEnum<typeof GetRuntimeLogsSource>;

export type GetRuntimeLogsResponseBody = {
  level: GetRuntimeLogsLevel;
  message: string;
  rowId: string;
  source: GetRuntimeLogsSource;
  timestampInMs: number;
  domain: string;
  messageTruncated: boolean;
  requestMethod: string;
  requestPath: string;
  responseStatusCode: number;
};

/** @internal */
export const GetRuntimeLogsRequest$inboundSchema: z.ZodType<
  GetRuntimeLogsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectId: z.string(),
  deploymentId: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/** @internal */
export type GetRuntimeLogsRequest$Outbound = {
  projectId: string;
  deploymentId: string;
  teamId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const GetRuntimeLogsRequest$outboundSchema: z.ZodType<
  GetRuntimeLogsRequest$Outbound,
  z.ZodTypeDef,
  GetRuntimeLogsRequest
> = z.object({
  projectId: z.string(),
  deploymentId: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRuntimeLogsRequest$ {
  /** @deprecated use `GetRuntimeLogsRequest$inboundSchema` instead. */
  export const inboundSchema = GetRuntimeLogsRequest$inboundSchema;
  /** @deprecated use `GetRuntimeLogsRequest$outboundSchema` instead. */
  export const outboundSchema = GetRuntimeLogsRequest$outboundSchema;
  /** @deprecated use `GetRuntimeLogsRequest$Outbound` instead. */
  export type Outbound = GetRuntimeLogsRequest$Outbound;
}

export function getRuntimeLogsRequestToJSON(
  getRuntimeLogsRequest: GetRuntimeLogsRequest,
): string {
  return JSON.stringify(
    GetRuntimeLogsRequest$outboundSchema.parse(getRuntimeLogsRequest),
  );
}

export function getRuntimeLogsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetRuntimeLogsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRuntimeLogsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRuntimeLogsRequest' from JSON`,
  );
}

/** @internal */
export const GetRuntimeLogsLevel$inboundSchema: z.ZodNativeEnum<
  typeof GetRuntimeLogsLevel
> = z.nativeEnum(GetRuntimeLogsLevel);

/** @internal */
export const GetRuntimeLogsLevel$outboundSchema: z.ZodNativeEnum<
  typeof GetRuntimeLogsLevel
> = GetRuntimeLogsLevel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRuntimeLogsLevel$ {
  /** @deprecated use `GetRuntimeLogsLevel$inboundSchema` instead. */
  export const inboundSchema = GetRuntimeLogsLevel$inboundSchema;
  /** @deprecated use `GetRuntimeLogsLevel$outboundSchema` instead. */
  export const outboundSchema = GetRuntimeLogsLevel$outboundSchema;
}

/** @internal */
export const GetRuntimeLogsSource$inboundSchema: z.ZodNativeEnum<
  typeof GetRuntimeLogsSource
> = z.nativeEnum(GetRuntimeLogsSource);

/** @internal */
export const GetRuntimeLogsSource$outboundSchema: z.ZodNativeEnum<
  typeof GetRuntimeLogsSource
> = GetRuntimeLogsSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRuntimeLogsSource$ {
  /** @deprecated use `GetRuntimeLogsSource$inboundSchema` instead. */
  export const inboundSchema = GetRuntimeLogsSource$inboundSchema;
  /** @deprecated use `GetRuntimeLogsSource$outboundSchema` instead. */
  export const outboundSchema = GetRuntimeLogsSource$outboundSchema;
}

/** @internal */
export const GetRuntimeLogsResponseBody$inboundSchema: z.ZodType<
  GetRuntimeLogsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  level: GetRuntimeLogsLevel$inboundSchema,
  message: z.string(),
  rowId: z.string(),
  source: GetRuntimeLogsSource$inboundSchema,
  timestampInMs: z.number(),
  domain: z.string(),
  messageTruncated: z.boolean(),
  requestMethod: z.string(),
  requestPath: z.string(),
  responseStatusCode: z.number(),
});

/** @internal */
export type GetRuntimeLogsResponseBody$Outbound = {
  level: string;
  message: string;
  rowId: string;
  source: string;
  timestampInMs: number;
  domain: string;
  messageTruncated: boolean;
  requestMethod: string;
  requestPath: string;
  responseStatusCode: number;
};

/** @internal */
export const GetRuntimeLogsResponseBody$outboundSchema: z.ZodType<
  GetRuntimeLogsResponseBody$Outbound,
  z.ZodTypeDef,
  GetRuntimeLogsResponseBody
> = z.object({
  level: GetRuntimeLogsLevel$outboundSchema,
  message: z.string(),
  rowId: z.string(),
  source: GetRuntimeLogsSource$outboundSchema,
  timestampInMs: z.number(),
  domain: z.string(),
  messageTruncated: z.boolean(),
  requestMethod: z.string(),
  requestPath: z.string(),
  responseStatusCode: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRuntimeLogsResponseBody$ {
  /** @deprecated use `GetRuntimeLogsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetRuntimeLogsResponseBody$inboundSchema;
  /** @deprecated use `GetRuntimeLogsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetRuntimeLogsResponseBody$outboundSchema;
  /** @deprecated use `GetRuntimeLogsResponseBody$Outbound` instead. */
  export type Outbound = GetRuntimeLogsResponseBody$Outbound;
}

export function getRuntimeLogsResponseBodyToJSON(
  getRuntimeLogsResponseBody: GetRuntimeLogsResponseBody,
): string {
  return JSON.stringify(
    GetRuntimeLogsResponseBody$outboundSchema.parse(getRuntimeLogsResponseBody),
  );
}

export function getRuntimeLogsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetRuntimeLogsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRuntimeLogsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRuntimeLogsResponseBody' from JSON`,
  );
}
