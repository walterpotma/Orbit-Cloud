/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * The role of the user to invite
 */
export const InviteUserToTeamRole = {
  Owner: "OWNER",
  Member: "MEMBER",
  Developer: "DEVELOPER",
  Security: "SECURITY",
  Billing: "BILLING",
  Viewer: "VIEWER",
  ViewerForPlus: "VIEWER_FOR_PLUS",
  Contributor: "CONTRIBUTOR",
} as const;
/**
 * The role of the user to invite
 */
export type InviteUserToTeamRole = ClosedEnum<typeof InviteUserToTeamRole>;

/**
 * Sets the project roles for the invited user
 */
export const InviteUserToTeamTeamsRole = {
  Admin: "ADMIN",
  ProjectViewer: "PROJECT_VIEWER",
  ProjectDeveloper: "PROJECT_DEVELOPER",
} as const;
/**
 * Sets the project roles for the invited user
 */
export type InviteUserToTeamTeamsRole = ClosedEnum<
  typeof InviteUserToTeamTeamsRole
>;

export type InviteUserToTeamProjects = {
  /**
   * The ID of the project.
   */
  projectId: string;
  /**
   * Sets the project roles for the invited user
   */
  role: InviteUserToTeamTeamsRole;
};

export type InviteUserToTeamRequestBody = {
  /**
   * The email address of the user to invite
   */
  email: string;
  /**
   * The role of the user to invite
   */
  role?: InviteUserToTeamRole | undefined;
  projects?: Array<InviteUserToTeamProjects> | undefined;
};

export type InviteUserToTeamRequest = {
  teamId: string;
  requestBody: InviteUserToTeamRequestBody;
};

/**
 * The role used for the invitation
 */
export const InviteUserToTeamTeamsResponseRole = {
  Owner: "OWNER",
  Member: "MEMBER",
  Developer: "DEVELOPER",
  Security: "SECURITY",
  Billing: "BILLING",
  Viewer: "VIEWER",
  ViewerForPlus: "VIEWER_FOR_PLUS",
  Contributor: "CONTRIBUTOR",
} as const;
/**
 * The role used for the invitation
 */
export type InviteUserToTeamTeamsResponseRole = ClosedEnum<
  typeof InviteUserToTeamTeamsResponseRole
>;

/**
 * The team roles of the user
 */
export const InviteUserToTeamTeamRoles = {
  Owner: "OWNER",
  Member: "MEMBER",
  Developer: "DEVELOPER",
  Security: "SECURITY",
  Billing: "BILLING",
  Viewer: "VIEWER",
  ViewerForPlus: "VIEWER_FOR_PLUS",
  Contributor: "CONTRIBUTOR",
} as const;
/**
 * The team roles of the user
 */
export type InviteUserToTeamTeamRoles = ClosedEnum<
  typeof InviteUserToTeamTeamRoles
>;

/**
 * The team permissions of the user
 */
export const InviteUserToTeamTeamPermissions = {
  IntegrationManager: "IntegrationManager",
  CreateProject: "CreateProject",
  FullProductionDeployment: "FullProductionDeployment",
  UsageViewer: "UsageViewer",
  EnvVariableManager: "EnvVariableManager",
  EnvironmentManager: "EnvironmentManager",
  V0Builder: "V0Builder",
  V0Chatter: "V0Chatter",
  V0Viewer: "V0Viewer",
} as const;
/**
 * The team permissions of the user
 */
export type InviteUserToTeamTeamPermissions = ClosedEnum<
  typeof InviteUserToTeamTeamPermissions
>;

/**
 * The member was successfully added to the team
 */
export type InviteUserToTeamResponseBody = {
  /**
   * The ID of the invited user
   */
  uid: string;
  /**
   * The username of the invited user
   */
  username: string;
  /**
   * The email of the invited user.
   */
  email: string;
  /**
   * The role used for the invitation
   */
  role: InviteUserToTeamTeamsResponseRole;
  /**
   * The team roles of the user
   */
  teamRoles?: Array<InviteUserToTeamTeamRoles> | undefined;
  /**
   * The team permissions of the user
   */
  teamPermissions?: Array<InviteUserToTeamTeamPermissions> | undefined;
};

/** @internal */
export const InviteUserToTeamRole$inboundSchema: z.ZodNativeEnum<
  typeof InviteUserToTeamRole
> = z.nativeEnum(InviteUserToTeamRole);

/** @internal */
export const InviteUserToTeamRole$outboundSchema: z.ZodNativeEnum<
  typeof InviteUserToTeamRole
> = InviteUserToTeamRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InviteUserToTeamRole$ {
  /** @deprecated use `InviteUserToTeamRole$inboundSchema` instead. */
  export const inboundSchema = InviteUserToTeamRole$inboundSchema;
  /** @deprecated use `InviteUserToTeamRole$outboundSchema` instead. */
  export const outboundSchema = InviteUserToTeamRole$outboundSchema;
}

/** @internal */
export const InviteUserToTeamTeamsRole$inboundSchema: z.ZodNativeEnum<
  typeof InviteUserToTeamTeamsRole
> = z.nativeEnum(InviteUserToTeamTeamsRole);

/** @internal */
export const InviteUserToTeamTeamsRole$outboundSchema: z.ZodNativeEnum<
  typeof InviteUserToTeamTeamsRole
> = InviteUserToTeamTeamsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InviteUserToTeamTeamsRole$ {
  /** @deprecated use `InviteUserToTeamTeamsRole$inboundSchema` instead. */
  export const inboundSchema = InviteUserToTeamTeamsRole$inboundSchema;
  /** @deprecated use `InviteUserToTeamTeamsRole$outboundSchema` instead. */
  export const outboundSchema = InviteUserToTeamTeamsRole$outboundSchema;
}

/** @internal */
export const InviteUserToTeamProjects$inboundSchema: z.ZodType<
  InviteUserToTeamProjects,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectId: z.string(),
  role: InviteUserToTeamTeamsRole$inboundSchema,
});

/** @internal */
export type InviteUserToTeamProjects$Outbound = {
  projectId: string;
  role: string;
};

/** @internal */
export const InviteUserToTeamProjects$outboundSchema: z.ZodType<
  InviteUserToTeamProjects$Outbound,
  z.ZodTypeDef,
  InviteUserToTeamProjects
> = z.object({
  projectId: z.string(),
  role: InviteUserToTeamTeamsRole$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InviteUserToTeamProjects$ {
  /** @deprecated use `InviteUserToTeamProjects$inboundSchema` instead. */
  export const inboundSchema = InviteUserToTeamProjects$inboundSchema;
  /** @deprecated use `InviteUserToTeamProjects$outboundSchema` instead. */
  export const outboundSchema = InviteUserToTeamProjects$outboundSchema;
  /** @deprecated use `InviteUserToTeamProjects$Outbound` instead. */
  export type Outbound = InviteUserToTeamProjects$Outbound;
}

export function inviteUserToTeamProjectsToJSON(
  inviteUserToTeamProjects: InviteUserToTeamProjects,
): string {
  return JSON.stringify(
    InviteUserToTeamProjects$outboundSchema.parse(inviteUserToTeamProjects),
  );
}

export function inviteUserToTeamProjectsFromJSON(
  jsonString: string,
): SafeParseResult<InviteUserToTeamProjects, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InviteUserToTeamProjects$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InviteUserToTeamProjects' from JSON`,
  );
}

/** @internal */
export const InviteUserToTeamRequestBody$inboundSchema: z.ZodType<
  InviteUserToTeamRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string(),
  role: InviteUserToTeamRole$inboundSchema.default("MEMBER"),
  projects: z.array(z.lazy(() => InviteUserToTeamProjects$inboundSchema))
    .optional(),
});

/** @internal */
export type InviteUserToTeamRequestBody$Outbound = {
  email: string;
  role: string;
  projects?: Array<InviteUserToTeamProjects$Outbound> | undefined;
};

/** @internal */
export const InviteUserToTeamRequestBody$outboundSchema: z.ZodType<
  InviteUserToTeamRequestBody$Outbound,
  z.ZodTypeDef,
  InviteUserToTeamRequestBody
> = z.object({
  email: z.string(),
  role: InviteUserToTeamRole$outboundSchema.default("MEMBER"),
  projects: z.array(z.lazy(() => InviteUserToTeamProjects$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InviteUserToTeamRequestBody$ {
  /** @deprecated use `InviteUserToTeamRequestBody$inboundSchema` instead. */
  export const inboundSchema = InviteUserToTeamRequestBody$inboundSchema;
  /** @deprecated use `InviteUserToTeamRequestBody$outboundSchema` instead. */
  export const outboundSchema = InviteUserToTeamRequestBody$outboundSchema;
  /** @deprecated use `InviteUserToTeamRequestBody$Outbound` instead. */
  export type Outbound = InviteUserToTeamRequestBody$Outbound;
}

export function inviteUserToTeamRequestBodyToJSON(
  inviteUserToTeamRequestBody: InviteUserToTeamRequestBody,
): string {
  return JSON.stringify(
    InviteUserToTeamRequestBody$outboundSchema.parse(
      inviteUserToTeamRequestBody,
    ),
  );
}

export function inviteUserToTeamRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<InviteUserToTeamRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InviteUserToTeamRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InviteUserToTeamRequestBody' from JSON`,
  );
}

/** @internal */
export const InviteUserToTeamRequest$inboundSchema: z.ZodType<
  InviteUserToTeamRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  teamId: z.string(),
  RequestBody: z.lazy(() => InviteUserToTeamRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type InviteUserToTeamRequest$Outbound = {
  teamId: string;
  RequestBody: InviteUserToTeamRequestBody$Outbound;
};

/** @internal */
export const InviteUserToTeamRequest$outboundSchema: z.ZodType<
  InviteUserToTeamRequest$Outbound,
  z.ZodTypeDef,
  InviteUserToTeamRequest
> = z.object({
  teamId: z.string(),
  requestBody: z.lazy(() => InviteUserToTeamRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InviteUserToTeamRequest$ {
  /** @deprecated use `InviteUserToTeamRequest$inboundSchema` instead. */
  export const inboundSchema = InviteUserToTeamRequest$inboundSchema;
  /** @deprecated use `InviteUserToTeamRequest$outboundSchema` instead. */
  export const outboundSchema = InviteUserToTeamRequest$outboundSchema;
  /** @deprecated use `InviteUserToTeamRequest$Outbound` instead. */
  export type Outbound = InviteUserToTeamRequest$Outbound;
}

export function inviteUserToTeamRequestToJSON(
  inviteUserToTeamRequest: InviteUserToTeamRequest,
): string {
  return JSON.stringify(
    InviteUserToTeamRequest$outboundSchema.parse(inviteUserToTeamRequest),
  );
}

export function inviteUserToTeamRequestFromJSON(
  jsonString: string,
): SafeParseResult<InviteUserToTeamRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InviteUserToTeamRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InviteUserToTeamRequest' from JSON`,
  );
}

/** @internal */
export const InviteUserToTeamTeamsResponseRole$inboundSchema: z.ZodNativeEnum<
  typeof InviteUserToTeamTeamsResponseRole
> = z.nativeEnum(InviteUserToTeamTeamsResponseRole);

/** @internal */
export const InviteUserToTeamTeamsResponseRole$outboundSchema: z.ZodNativeEnum<
  typeof InviteUserToTeamTeamsResponseRole
> = InviteUserToTeamTeamsResponseRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InviteUserToTeamTeamsResponseRole$ {
  /** @deprecated use `InviteUserToTeamTeamsResponseRole$inboundSchema` instead. */
  export const inboundSchema = InviteUserToTeamTeamsResponseRole$inboundSchema;
  /** @deprecated use `InviteUserToTeamTeamsResponseRole$outboundSchema` instead. */
  export const outboundSchema =
    InviteUserToTeamTeamsResponseRole$outboundSchema;
}

/** @internal */
export const InviteUserToTeamTeamRoles$inboundSchema: z.ZodNativeEnum<
  typeof InviteUserToTeamTeamRoles
> = z.nativeEnum(InviteUserToTeamTeamRoles);

/** @internal */
export const InviteUserToTeamTeamRoles$outboundSchema: z.ZodNativeEnum<
  typeof InviteUserToTeamTeamRoles
> = InviteUserToTeamTeamRoles$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InviteUserToTeamTeamRoles$ {
  /** @deprecated use `InviteUserToTeamTeamRoles$inboundSchema` instead. */
  export const inboundSchema = InviteUserToTeamTeamRoles$inboundSchema;
  /** @deprecated use `InviteUserToTeamTeamRoles$outboundSchema` instead. */
  export const outboundSchema = InviteUserToTeamTeamRoles$outboundSchema;
}

/** @internal */
export const InviteUserToTeamTeamPermissions$inboundSchema: z.ZodNativeEnum<
  typeof InviteUserToTeamTeamPermissions
> = z.nativeEnum(InviteUserToTeamTeamPermissions);

/** @internal */
export const InviteUserToTeamTeamPermissions$outboundSchema: z.ZodNativeEnum<
  typeof InviteUserToTeamTeamPermissions
> = InviteUserToTeamTeamPermissions$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InviteUserToTeamTeamPermissions$ {
  /** @deprecated use `InviteUserToTeamTeamPermissions$inboundSchema` instead. */
  export const inboundSchema = InviteUserToTeamTeamPermissions$inboundSchema;
  /** @deprecated use `InviteUserToTeamTeamPermissions$outboundSchema` instead. */
  export const outboundSchema = InviteUserToTeamTeamPermissions$outboundSchema;
}

/** @internal */
export const InviteUserToTeamResponseBody$inboundSchema: z.ZodType<
  InviteUserToTeamResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  uid: z.string(),
  username: z.string(),
  email: z.string(),
  role: InviteUserToTeamTeamsResponseRole$inboundSchema,
  teamRoles: z.array(InviteUserToTeamTeamRoles$inboundSchema).optional(),
  teamPermissions: z.array(InviteUserToTeamTeamPermissions$inboundSchema)
    .optional(),
});

/** @internal */
export type InviteUserToTeamResponseBody$Outbound = {
  uid: string;
  username: string;
  email: string;
  role: string;
  teamRoles?: Array<string> | undefined;
  teamPermissions?: Array<string> | undefined;
};

/** @internal */
export const InviteUserToTeamResponseBody$outboundSchema: z.ZodType<
  InviteUserToTeamResponseBody$Outbound,
  z.ZodTypeDef,
  InviteUserToTeamResponseBody
> = z.object({
  uid: z.string(),
  username: z.string(),
  email: z.string(),
  role: InviteUserToTeamTeamsResponseRole$outboundSchema,
  teamRoles: z.array(InviteUserToTeamTeamRoles$outboundSchema).optional(),
  teamPermissions: z.array(InviteUserToTeamTeamPermissions$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InviteUserToTeamResponseBody$ {
  /** @deprecated use `InviteUserToTeamResponseBody$inboundSchema` instead. */
  export const inboundSchema = InviteUserToTeamResponseBody$inboundSchema;
  /** @deprecated use `InviteUserToTeamResponseBody$outboundSchema` instead. */
  export const outboundSchema = InviteUserToTeamResponseBody$outboundSchema;
  /** @deprecated use `InviteUserToTeamResponseBody$Outbound` instead. */
  export type Outbound = InviteUserToTeamResponseBody$Outbound;
}

export function inviteUserToTeamResponseBodyToJSON(
  inviteUserToTeamResponseBody: InviteUserToTeamResponseBody,
): string {
  return JSON.stringify(
    InviteUserToTeamResponseBody$outboundSchema.parse(
      inviteUserToTeamResponseBody,
    ),
  );
}

export function inviteUserToTeamResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<InviteUserToTeamResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InviteUserToTeamResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InviteUserToTeamResponseBody' from JSON`,
  );
}
