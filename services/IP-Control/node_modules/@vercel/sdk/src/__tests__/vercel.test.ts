/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { assert, expect, it, test } from "vitest";
import { Vercel } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

it.skip("Vercel Post /Domains", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step post_/domains.test referencing operation post_/domains not found in document`]",
  );
});

it.skip("Vercel Get /Projects/{project Id}/logs Presets", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step get_/projects/{projectId}/logs-presets.test referencing operation get_/projects/{projectId}/logs-presets not found in document`]",
  );
});

it.skip("Vercel Post /Projects/{project Id}/logs Presets", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step post_/projects/{projectId}/logs-presets.test referencing operation post_/projects/{projectId}/logs-presets not found in document`]",
  );
});

it.skip("Vercel Delete /Projects/{project Id}/logs Presets/{id}", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step delete_/projects/{projectId}/logs-presets/{id}.test referencing operation delete_/projects/{projectId}/logs-presets/{id} not found in document`]",
  );
});

it.skip("Vercel Patch /Projects/{project Id}/logs Presets/{id}", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step patch_/projects/{projectId}/logs-presets/{id}.test referencing operation patch_/projects/{projectId}/logs-presets/{id} not found in document`]",
  );
});

test("Vercel Get /V1 /Integrations/integration/{integration Id Or Slug}/products/{product Id Or Slug}/plans", async () => {
  const testHttpClient = createTestHTTPClient(
    "get_/v1/integrations/integration/{integrationIdOrSlug}/products/{productIdOrSlug}/plans",
  );

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
  });

  const result = await vercel
    .getV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlans(
      {
        integrationIdOrSlug: "<value>",
        productIdOrSlug: "<value>",
      },
    );
  expect(result).toBeDefined();
  expect(result).toEqual({
    plans: [
      {
        type: "prepayment",
        id: "<id>",
        name: "<value>",
        scope: "resource",
        description:
          "cope unless hierarchy versus ouch more regarding tabulate",
        paymentMethodRequired: false,
      },
    ],
  });
});
