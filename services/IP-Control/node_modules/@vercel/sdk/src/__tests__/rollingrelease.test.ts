/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { Vercel } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Rolling Release Get Rolling Release Config", async () => {
  const testHttpClient = createTestHTTPClient("getRollingReleaseConfig");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.rollingRelease.getRollingReleaseConfig({
    idOrName: "<value>",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    rollingRelease: {
      target: "production",
      stages: [
        {
          targetPercentage: 25,
          requireApproval: false,
          duration: 600,
        },
      ],
      canaryResponseHeader: false,
    },
  });
});

test("Rolling Release Delete Rolling Release Config", async () => {
  const testHttpClient = createTestHTTPClient("deleteRollingReleaseConfig");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.rollingRelease.deleteRollingReleaseConfig({
    idOrName: "<value>",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    rollingRelease: "<value>",
  });
});

test("Rolling Release Update Rolling Release Config", async () => {
  const testHttpClient = createTestHTTPClient("updateRollingReleaseConfig");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.rollingRelease.updateRollingReleaseConfig({
    idOrName: "<value>",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    rollingRelease: "<value>",
  });
});

test("Rolling Release Get Rolling Release", async () => {
  const testHttpClient = createTestHTTPClient("getRollingRelease");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.rollingRelease.getRollingRelease({
    idOrName: "<value>",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    rollingRelease: {
      state: "ACTIVE",
      currentDeployment: {
        id: "dpl_abc123",
        name: "my-shop@main",
        url: "my-shop.vercel.app",
        target: "production",
        source: "git",
        createdAt: 1716206500000,
        readyState: "READY",
        readyStateAt: 1716206800000,
      },
      canaryDeployment: {
        id: "dpl_def456",
        name: "my-shop@9c7e2f4",
        url: "9c7e2f4-my-shop.vercel.app",
        target: "production",
        source: "git",
        createdAt: 1716210100000,
        readyState: "READY",
        readyStateAt: 1716210400000,
      },
      queuedDeploymentId: "dpl_ghi789",
      advancementType: "manual-approval",
      stages: [
        {
          index: 0,
          isFinalStage: false,
          targetPercentage: 5,
          requireApproval: true,
          duration: null,
        },
        {
          index: 1,
          isFinalStage: false,
          targetPercentage: 25,
          requireApproval: true,
          duration: null,
        },
        {
          index: 2,
          isFinalStage: false,
          targetPercentage: 60,
          requireApproval: true,
          duration: null,
        },
        {
          index: 3,
          isFinalStage: true,
          targetPercentage: 100,
          requireApproval: false,
          duration: null,
        },
      ],
      activeStage: {
        index: 1,
        isFinalStage: false,
        targetPercentage: 25,
        requireApproval: true,
        duration: null,
      },
      nextStage: {
        index: 2,
        isFinalStage: false,
        targetPercentage: 60,
        requireApproval: true,
        duration: null,
      },
      startedAt: 1716210500000,
      updatedAt: 1716210600000,
    },
  });
});

test("Rolling Release Approve Rolling Release Stage", async () => {
  const testHttpClient = createTestHTTPClient("approveRollingReleaseStage");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.rollingRelease.approveRollingReleaseStage({
    idOrName: "<value>",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    rollingRelease: {
      state: "ACTIVE",
      currentDeployment: {
        id: "dpl_abc123",
        name: "my-shop@main",
        url: "my-shop.vercel.app",
        target: "production",
        source: "git",
        createdAt: 1716206500000,
        readyState: "READY",
        readyStateAt: 1716206800000,
      },
      canaryDeployment: {
        id: "dpl_def456",
        name: "my-shop@9c7e2f4",
        url: "9c7e2f4-my-shop.vercel.app",
        target: "production",
        source: "git",
        createdAt: 1716210100000,
        readyState: "READY",
        readyStateAt: 1716210400000,
      },
      queuedDeploymentId: "dpl_ghi789",
      advancementType: "manual-approval",
      stages: [
        {
          index: 0,
          isFinalStage: false,
          targetPercentage: 5,
          requireApproval: true,
          duration: null,
        },
        {
          index: 1,
          isFinalStage: false,
          targetPercentage: 25,
          requireApproval: true,
          duration: null,
        },
        {
          index: 2,
          isFinalStage: false,
          targetPercentage: 60,
          requireApproval: true,
          duration: null,
        },
        {
          index: 3,
          isFinalStage: true,
          targetPercentage: 100,
          requireApproval: false,
          duration: null,
        },
      ],
      activeStage: {
        index: 1,
        isFinalStage: false,
        targetPercentage: 25,
        requireApproval: true,
        duration: null,
      },
      nextStage: {
        index: 2,
        isFinalStage: false,
        targetPercentage: 60,
        requireApproval: true,
        duration: null,
      },
      startedAt: 1716210500000,
      updatedAt: 1716210600000,
    },
  });
});

test("Rolling Release Complete Rolling Release", async () => {
  const testHttpClient = createTestHTTPClient("completeRollingRelease");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.rollingRelease.completeRollingRelease({
    idOrName: "<value>",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    rollingRelease: {
      state: "ACTIVE",
      currentDeployment: {
        id: "dpl_abc123",
        name: "my-shop@main",
        url: "my-shop.vercel.app",
        target: "production",
        source: "git",
        createdAt: 1716206500000,
        readyState: "READY",
        readyStateAt: 1716206800000,
      },
      canaryDeployment: {
        id: "dpl_def456",
        name: "my-shop@9c7e2f4",
        url: "9c7e2f4-my-shop.vercel.app",
        target: "production",
        source: "git",
        createdAt: 1716210100000,
        readyState: "READY",
        readyStateAt: 1716210400000,
      },
      queuedDeploymentId: "dpl_ghi789",
      advancementType: "manual-approval",
      stages: [
        {
          index: 0,
          isFinalStage: false,
          targetPercentage: 5,
          requireApproval: true,
          duration: null,
        },
        {
          index: 1,
          isFinalStage: false,
          targetPercentage: 25,
          requireApproval: true,
          duration: null,
        },
        {
          index: 2,
          isFinalStage: false,
          targetPercentage: 60,
          requireApproval: true,
          duration: null,
        },
        {
          index: 3,
          isFinalStage: true,
          targetPercentage: 100,
          requireApproval: false,
          duration: null,
        },
      ],
      activeStage: {
        index: 1,
        isFinalStage: false,
        targetPercentage: 25,
        requireApproval: true,
        duration: null,
      },
      nextStage: {
        index: 2,
        isFinalStage: false,
        targetPercentage: 60,
        requireApproval: true,
        duration: null,
      },
      startedAt: 1716210500000,
      updatedAt: 1716210600000,
    },
  });
});

test("Rolling Release Get Rolling Release Billing Status", async () => {
  const testHttpClient = createTestHTTPClient("getRollingReleaseBillingStatus");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.rollingRelease.getRollingReleaseBillingStatus({
    idOrName: "<value>",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    availableSlots: 9636.63,
    reason: "available_slots",
    message: "<value>",
  });
});
