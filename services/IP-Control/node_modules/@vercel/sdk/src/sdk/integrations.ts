/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { deploymentsUpdateIntegrationDeploymentAction } from "../funcs/deploymentsUpdateIntegrationDeploymentAction.js";
import { integrationsConnectIntegrationResourceToProject } from "../funcs/integrationsConnectIntegrationResourceToProject.js";
import { integrationsCreateIntegrationStoreDirect } from "../funcs/integrationsCreateIntegrationStoreDirect.js";
import { integrationsDeleteConfiguration } from "../funcs/integrationsDeleteConfiguration.js";
import { integrationsGetConfiguration } from "../funcs/integrationsGetConfiguration.js";
import { integrationsGetConfigurationProducts } from "../funcs/integrationsGetConfigurationProducts.js";
import { integrationsGetConfigurations } from "../funcs/integrationsGetConfigurations.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { ConnectIntegrationResourceToProjectRequest } from "../models/connectintegrationresourcetoprojectop.js";
import {
  CreateIntegrationStoreDirectRequest,
  CreateIntegrationStoreDirectResponseBody,
} from "../models/createintegrationstoredirectop.js";
import { DeleteConfigurationRequest } from "../models/deleteconfigurationop.js";
import {
  GetConfigurationRequest,
  GetConfigurationResponseBody,
} from "../models/getconfigurationop.js";
import {
  GetConfigurationProductsRequest,
  GetConfigurationProductsResponseBody,
} from "../models/getconfigurationproductsop.js";
import {
  GetConfigurationsRequest,
  GetConfigurationsResponseBody,
} from "../models/getconfigurationsop.js";
import { UpdateIntegrationDeploymentActionRequest } from "../models/updateintegrationdeploymentactionop.js";
import { unwrapAsync } from "../types/fp.js";

export class Integrations extends ClientSDK {
  /**
   * Update deployment integration action
   *
   * @remarks
   * Updates the deployment integration action for the specified integration installation
   */
  async updateIntegrationDeploymentAction(
    request: UpdateIntegrationDeploymentActionRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(deploymentsUpdateIntegrationDeploymentAction(
      this,
      request,
      options,
    ));
  }

  /**
   * Connect integration resource to project
   *
   * @remarks
   * Connects an integration resource to a Vercel project. This endpoint establishes a connection between a provisioned integration resource (from storage APIs like `POST /v1/storage/stores/integration/direct`) and a specific Vercel project.
   */
  async connectIntegrationResourceToProject(
    request: ConnectIntegrationResourceToProjectRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(integrationsConnectIntegrationResourceToProject(
      this,
      request,
      options,
    ));
  }

  /**
   * Get configurations for the authenticated user or team
   *
   * @remarks
   * Allows to retrieve all configurations for an authenticated integration. When the `project` view is used, configurations generated for the authorization flow will be filtered out of the results.
   */
  async getConfigurations(
    request: GetConfigurationsRequest,
    options?: RequestOptions,
  ): Promise<GetConfigurationsResponseBody> {
    return unwrapAsync(integrationsGetConfigurations(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve an integration configuration
   *
   * @remarks
   * Allows to retrieve a the configuration with the provided id in case it exists. The authenticated user or team must be the owner of the config in order to access it.
   */
  async getConfiguration(
    request: GetConfigurationRequest,
    options?: RequestOptions,
  ): Promise<GetConfigurationResponseBody> {
    return unwrapAsync(integrationsGetConfiguration(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an integration configuration
   *
   * @remarks
   * Allows to remove the configuration with the `id` provided in the parameters. The configuration and all of its resources will be removed. This includes Webhooks, LogDrains and Project Env variables.
   */
  async deleteConfiguration(
    request: DeleteConfigurationRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(integrationsDeleteConfiguration(
      this,
      request,
      options,
    ));
  }

  /**
   * List products for integration configuration
   *
   * @remarks
   * Lists all products available for an integration configuration. Use this endpoint to discover what integration products are available for your integration configuration. The returned product IDs or slugs can then be used with storage provisioning endpoints like `POST /v1/storage/stores/integration/direct`. ## Workflow 1. Get your integration configurations: `GET /v1/integrations/configurations` 2. **Use this endpoint**: Get products for a configuration: `GET /v1/integrations/configuration/{id}/products` 3. Create storage resource: `POST /v1/storage/stores/integration/direct` ## Response Returns an array of products with their IDs, slugs, names, supported protocols, and metadata requirements. Each product represents a different type of resource you can provision. The `metadataSchema` field contains a JSON Schema that defines: - **Required metadata**: Fields that must be provided during storage creation - **Optional metadata**: Fields that can be provided but are not mandatory - **Field validation**: Data types, allowed values, and constraints Use this schema to validate metadata before calling the storage creation endpoint.
   */
  async getConfigurationProducts(
    request: GetConfigurationProductsRequest,
    options?: RequestOptions,
  ): Promise<GetConfigurationProductsResponseBody> {
    return unwrapAsync(integrationsGetConfigurationProducts(
      this,
      request,
      options,
    ));
  }

  /**
   * Create integration store (free and paid plans)
   *
   * @remarks
   * Creates an integration store for both FREE and PAID billing plans. This simplified endpoint automatically provisions real integration storage resources while handling billing complexity behind the scenes. It supports both free and paid billing plans with automatic authorization creation for paid resources. ## How it works 1. Validates the integration configuration and product 2. For free resources: Auto-discovers available free billing plans 3. For paid resources: Creates billing authorization inline using provided billingPlanId 4. Provisions real resources through the Vercel Marketplace 5. Returns the created store with connection details ## Workflow Before using this endpoint, discover available products and billing plans: 1. List your configurations: `GET /v1/integrations/configurations` 2. Get products for a configuration: `GET /v1/integrations/configuration/{id}/products` 3. Get billing plans for a product: `GET /integrations/integration/{integrationId}/products/{productId}/plans` 4. Review the `metadataSchema` for each product to understand required metadata 5. Create storage with discovered product: `POST /v1/storage/stores/integration/direct` ## Usage Patterns - **Free resources**: Omit `billingPlanId` - endpoint will auto-discover free plans - **Paid resources**: Provide `billingPlanId` from billing plans discovery - **Prepayment plans**: Also provide `prepaymentAmountCents` for variable amount plans ## Limitations - **Admin access required**: Only integration configuration admins can create stores - **Storage limits apply**: Subject to your team's storage quotas - **Payment method required**: For paid plans, ensure valid payment method is configured ## Error Responses - `400 Bad Request`: Invalid input, no plans available, or billing issues - `403 Forbidden`: Insufficient permissions (non-admin users) - `404 Not Found`: Integration configuration or product not found - `429 Too Many Requests`: Rate limit exceeded
   */
  async createIntegrationStoreDirect(
    request: CreateIntegrationStoreDirectRequest,
    options?: RequestOptions,
  ): Promise<CreateIntegrationStoreDirectResponseBody> {
    return unwrapAsync(integrationsCreateIntegrationStoreDirect(
      this,
      request,
      options,
    ));
  }
}
