/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { deploymentsCreateDeployment } from "../../funcs/deploymentsCreateDeployment.js";
import { CreateDeploymentRequest$inboundSchema } from "../../models/createdeploymentop.js";
import { formatResult } from "../tools.js";
const args = {
    request: CreateDeploymentRequest$inboundSchema,
};
export const tool$deploymentsCreateDeployment = {
    name: "deployments-create-deployment",
    description: `Create a new deployment

Create a new deployment with all the required and intended data. If the deployment is not a git deployment, all files must be provided with the request, either referenced or inlined. Additionally, a deployment id can be specified to redeploy a previous deployment.`,
    args,
    tool: async (client, args, ctx) => {
        const [result, apiCall] = await deploymentsCreateDeployment(client, args.request, { fetchOptions: { signal: ctx.signal } }).$inspect();
        if (!result.ok) {
            return {
                content: [{ type: "text", text: result.error.message }],
                isError: true,
            };
        }
        const value = result.value;
        return formatResult(value, apiCall);
    },
};
//# sourceMappingURL=deploymentsCreateDeployment.js.map