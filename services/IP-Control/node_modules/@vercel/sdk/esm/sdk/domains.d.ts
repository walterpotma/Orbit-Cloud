import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { BuyDomainRequest, BuyDomainResponse } from "../models/buydomainop.js";
import { CheckDomainPriceRequest, CheckDomainPriceResponseBody } from "../models/checkdomainpriceop.js";
import { CheckDomainStatusRequest, CheckDomainStatusResponseBody } from "../models/checkdomainstatusop.js";
import { CreateOrTransferDomainRequest, CreateOrTransferDomainResponseBody } from "../models/createortransferdomainop.js";
import { DeleteDomainRequest, DeleteDomainResponseBody } from "../models/deletedomainop.js";
import { GetDomainConfigRequest, GetDomainConfigResponseBody } from "../models/getdomainconfigop.js";
import { GetDomainRequest, GetDomainResponseBody } from "../models/getdomainop.js";
import { GetDomainsRequest, GetDomainsResponseBody } from "../models/getdomainsop.js";
import { GetDomainTransferRequest, GetDomainTransferResponseBody } from "../models/getdomaintransferop.js";
import { PatchDomainRequest, PatchDomainResponseBody } from "../models/patchdomainop.js";
export declare class Domains extends ClientSDK {
    /**
     * Purchase a domain
     *
     * @remarks
     * Allows to purchase the specified domain.
     */
    buyDomain(request: BuyDomainRequest, options?: RequestOptions): Promise<BuyDomainResponse>;
    /**
     * Check the price for a domain
     *
     * @remarks
     * Check the price to purchase a domain and how long a single purchase period is.
     */
    checkDomainPrice(request: CheckDomainPriceRequest, options?: RequestOptions): Promise<CheckDomainPriceResponseBody>;
    /**
     * Check a Domain Availability
     *
     * @remarks
     * Check if a domain name is available for purchase.
     */
    checkDomainStatus(request: CheckDomainStatusRequest, options?: RequestOptions): Promise<CheckDomainStatusResponseBody>;
    /**
     * Get domain transfer info.
     *
     * @remarks
     * Fetch domain transfer availability or transfer status if a transfer is in progress.
     */
    getDomainTransfer(request: GetDomainTransferRequest, options?: RequestOptions): Promise<GetDomainTransferResponseBody>;
    /**
     * Get a Domain's configuration
     *
     * @remarks
     * Get a Domain's configuration.
     */
    getDomainConfig(request: GetDomainConfigRequest, options?: RequestOptions): Promise<GetDomainConfigResponseBody>;
    /**
     * Get Information for a Single Domain
     *
     * @remarks
     * Get information for a single domain in an account or team.
     */
    getDomain(request: GetDomainRequest, options?: RequestOptions): Promise<GetDomainResponseBody>;
    /**
     * List all the domains
     *
     * @remarks
     * Retrieves a list of domains registered for the authenticated user or team. By default it returns the last 20 domains if no limit is provided.
     */
    getDomains(request: GetDomainsRequest, options?: RequestOptions): Promise<GetDomainsResponseBody>;
    /**
     * Register or transfer-in a new Domain
     *
     * @remarks
     * This endpoint is used for adding a new apex domain name with Vercel for the authenticating user. Can also be used for initiating a domain transfer request from an external Registrar to Vercel.
     */
    createOrTransferDomain(request: CreateOrTransferDomainRequest, options?: RequestOptions): Promise<CreateOrTransferDomainResponseBody>;
    /**
     * Update or move apex domain
     *
     * @remarks
     * Update or move apex domain.
     */
    patchDomain(request: PatchDomainRequest, options?: RequestOptions): Promise<PatchDomainResponseBody>;
    /**
     * Remove a domain by name
     *
     * @remarks
     * Delete a previously registered domain name from Vercel. Deleting a domain will automatically remove any associated aliases.
     */
    deleteDomain(request: DeleteDomainRequest, options?: RequestOptions): Promise<DeleteDomainResponseBody>;
}
//# sourceMappingURL=domains.d.ts.map