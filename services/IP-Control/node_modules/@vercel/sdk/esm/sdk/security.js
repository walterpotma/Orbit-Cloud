/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { securityAddBypassIp } from "../funcs/securityAddBypassIp.js";
import { securityGetActiveAttackStatus } from "../funcs/securityGetActiveAttackStatus.js";
import { securityGetBypassIp } from "../funcs/securityGetBypassIp.js";
import { securityGetFirewallConfig } from "../funcs/securityGetFirewallConfig.js";
import { securityPutFirewallConfig } from "../funcs/securityPutFirewallConfig.js";
import { securityRemoveBypassIp } from "../funcs/securityRemoveBypassIp.js";
import { securityUpdateAttackChallengeMode } from "../funcs/securityUpdateAttackChallengeMode.js";
import { securityUpdateFirewallConfig } from "../funcs/securityUpdateFirewallConfig.js";
import { ClientSDK } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
export class Security extends ClientSDK {
    /**
     * Update Attack Challenge mode
     *
     * @remarks
     * Update the setting for determining if the project has Attack Challenge mode enabled.
     */
    async updateAttackChallengeMode(request, options) {
        return unwrapAsync(securityUpdateAttackChallengeMode(this, request, options));
    }
    /**
     * Put Firewall Configuration
     *
     * @remarks
     * Set the firewall configuration to provided rules and settings. Creates or overwrite the existing firewall configuration.
     */
    async putFirewallConfig(request, options) {
        return unwrapAsync(securityPutFirewallConfig(this, request, options));
    }
    /**
     * Update Firewall Configuration
     *
     * @remarks
     * Process updates to modify the existing firewall config for a project
     */
    async updateFirewallConfig(request, options) {
        return unwrapAsync(securityUpdateFirewallConfig(this, request, options));
    }
    /**
     * Read Firewall Configuration
     *
     * @remarks
     * Retrieve the specified firewall configuration for a project. The deployed configVersion will be `active`
     */
    async getFirewallConfig(request, options) {
        return unwrapAsync(securityGetFirewallConfig(this, request, options));
    }
    /**
     * Read active attack data
     *
     * @remarks
     * Retrieve active attack data within the last 24h window
     */
    async getActiveAttackStatus(request, options) {
        return unwrapAsync(securityGetActiveAttackStatus(this, request, options));
    }
    /**
     * Read System Bypass
     *
     * @remarks
     * Retrieve the system bypass rules configured for the specified project
     */
    async getBypassIp(request, options) {
        return unwrapAsync(securityGetBypassIp(this, request, options));
    }
    /**
     * Create System Bypass Rule
     *
     * @remarks
     * Create new system bypass rules
     */
    async addBypassIp(request, options) {
        return unwrapAsync(securityAddBypassIp(this, request, options));
    }
    /**
     * Remove System Bypass Rule
     *
     * @remarks
     * Remove system bypass rules
     */
    async removeBypassIp(request, options) {
        return unwrapAsync(securityRemoveBypassIp(this, request, options));
    }
}
//# sourceMappingURL=security.js.map