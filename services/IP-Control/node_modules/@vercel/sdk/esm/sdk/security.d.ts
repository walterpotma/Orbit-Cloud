import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { AddBypassIpRequest, AddBypassIpResponseBody } from "../models/addbypassipop.js";
import { GetActiveAttackStatusRequest, GetActiveAttackStatusResponseBody } from "../models/getactiveattackstatusop.js";
import { GetBypassIpRequest, GetBypassIpResponseBody } from "../models/getbypassipop.js";
import { GetFirewallConfigRequest, GetFirewallConfigResponseBody } from "../models/getfirewallconfigop.js";
import { PutFirewallConfigRequest, PutFirewallConfigResponseBody } from "../models/putfirewallconfigop.js";
import { RemoveBypassIpRequest, RemoveBypassIpResponseBody } from "../models/removebypassipop.js";
import { UpdateAttackChallengeModeRequest, UpdateAttackChallengeModeResponseBody } from "../models/updateattackchallengemodeop.js";
import { UpdateFirewallConfigRequest, UpdateFirewallConfigResponseBody } from "../models/updatefirewallconfigop.js";
export declare class Security extends ClientSDK {
    /**
     * Update Attack Challenge mode
     *
     * @remarks
     * Update the setting for determining if the project has Attack Challenge mode enabled.
     */
    updateAttackChallengeMode(request: UpdateAttackChallengeModeRequest, options?: RequestOptions): Promise<UpdateAttackChallengeModeResponseBody>;
    /**
     * Put Firewall Configuration
     *
     * @remarks
     * Set the firewall configuration to provided rules and settings. Creates or overwrite the existing firewall configuration.
     */
    putFirewallConfig(request: PutFirewallConfigRequest, options?: RequestOptions): Promise<PutFirewallConfigResponseBody>;
    /**
     * Update Firewall Configuration
     *
     * @remarks
     * Process updates to modify the existing firewall config for a project
     */
    updateFirewallConfig(request: UpdateFirewallConfigRequest, options?: RequestOptions): Promise<UpdateFirewallConfigResponseBody>;
    /**
     * Read Firewall Configuration
     *
     * @remarks
     * Retrieve the specified firewall configuration for a project. The deployed configVersion will be `active`
     */
    getFirewallConfig(request: GetFirewallConfigRequest, options?: RequestOptions): Promise<GetFirewallConfigResponseBody>;
    /**
     * Read active attack data
     *
     * @remarks
     * Retrieve active attack data within the last 24h window
     */
    getActiveAttackStatus(request: GetActiveAttackStatusRequest, options?: RequestOptions): Promise<GetActiveAttackStatusResponseBody>;
    /**
     * Read System Bypass
     *
     * @remarks
     * Retrieve the system bypass rules configured for the specified project
     */
    getBypassIp(request: GetBypassIpRequest, options?: RequestOptions): Promise<GetBypassIpResponseBody>;
    /**
     * Create System Bypass Rule
     *
     * @remarks
     * Create new system bypass rules
     */
    addBypassIp(request: AddBypassIpRequest, options?: RequestOptions): Promise<AddBypassIpResponseBody>;
    /**
     * Remove System Bypass Rule
     *
     * @remarks
     * Remove system bypass rules
     */
    removeBypassIp(request: RemoveBypassIpRequest, options?: RequestOptions): Promise<RemoveBypassIpResponseBody>;
}
//# sourceMappingURL=security.d.ts.map