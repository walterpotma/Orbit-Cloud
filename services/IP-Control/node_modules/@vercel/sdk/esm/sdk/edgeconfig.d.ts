import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { CreateEdgeConfigRequest, CreateEdgeConfigResponseBody } from "../models/createedgeconfigop.js";
import { CreateEdgeConfigTokenRequest, CreateEdgeConfigTokenResponseBody } from "../models/createedgeconfigtokenop.js";
import { DeleteEdgeConfigRequest } from "../models/deleteedgeconfigop.js";
import { DeleteEdgeConfigSchemaRequest } from "../models/deleteedgeconfigschemaop.js";
import { DeleteEdgeConfigTokensRequest } from "../models/deleteedgeconfigtokensop.js";
import { EdgeConfigItem } from "../models/edgeconfigitem.js";
import { EdgeConfigToken } from "../models/edgeconfigtoken.js";
import { GetEdgeConfigBackupRequest, GetEdgeConfigBackupResponseBody } from "../models/getedgeconfigbackupop.js";
import { GetEdgeConfigBackupsRequest, GetEdgeConfigBackupsResponseBody } from "../models/getedgeconfigbackupsop.js";
import { GetEdgeConfigItemRequest } from "../models/getedgeconfigitemop.js";
import { GetEdgeConfigItemsRequest } from "../models/getedgeconfigitemsop.js";
import { GetEdgeConfigRequest, GetEdgeConfigResponseBody } from "../models/getedgeconfigop.js";
import { GetEdgeConfigSchemaRequest, GetEdgeConfigSchemaResponseBody } from "../models/getedgeconfigschemaop.js";
import { GetEdgeConfigsRequest, GetEdgeConfigsResponseBody } from "../models/getedgeconfigsop.js";
import { GetEdgeConfigTokenRequest } from "../models/getedgeconfigtokenop.js";
import { GetEdgeConfigTokensRequest } from "../models/getedgeconfigtokensop.js";
import { PatchEdgeConfigItemsRequest, PatchEdgeConfigItemsResponseBody } from "../models/patchedgeconfigitemsop.js";
import { PatchEdgeConfigSchemaRequest, PatchEdgeConfigSchemaResponseBody } from "../models/patchedgeconfigschemaop.js";
import { UpdateEdgeConfigRequest, UpdateEdgeConfigResponseBody } from "../models/updateedgeconfigop.js";
export declare class EdgeConfig extends ClientSDK {
    /**
     * Get Edge Configs
     *
     * @remarks
     * Returns all Edge Configs.
     */
    getEdgeConfigs(request: GetEdgeConfigsRequest, options?: RequestOptions): Promise<Array<GetEdgeConfigsResponseBody>>;
    /**
     * Create an Edge Config
     *
     * @remarks
     * Creates an Edge Config.
     */
    createEdgeConfig(request: CreateEdgeConfigRequest, options?: RequestOptions): Promise<CreateEdgeConfigResponseBody>;
    /**
     * Get an Edge Config
     *
     * @remarks
     * Returns an Edge Config.
     */
    getEdgeConfig(request: GetEdgeConfigRequest, options?: RequestOptions): Promise<GetEdgeConfigResponseBody>;
    /**
     * Update an Edge Config
     *
     * @remarks
     * Updates an Edge Config.
     */
    updateEdgeConfig(request: UpdateEdgeConfigRequest, options?: RequestOptions): Promise<UpdateEdgeConfigResponseBody>;
    /**
     * Delete an Edge Config
     *
     * @remarks
     * Delete an Edge Config by id.
     */
    deleteEdgeConfig(request: DeleteEdgeConfigRequest, options?: RequestOptions): Promise<void>;
    /**
     * Get Edge Config items
     *
     * @remarks
     * Returns all items of an Edge Config.
     */
    getEdgeConfigItems(request: GetEdgeConfigItemsRequest, options?: RequestOptions): Promise<Array<EdgeConfigItem>>;
    /**
     * Update Edge Config items in batch
     *
     * @remarks
     * Update multiple Edge Config Items in batch.
     */
    patchEdgeConfigItems(request: PatchEdgeConfigItemsRequest, options?: RequestOptions): Promise<PatchEdgeConfigItemsResponseBody>;
    /**
     * Get Edge Config schema
     *
     * @remarks
     * Returns the schema of an Edge Config.
     */
    getEdgeConfigSchema(request: GetEdgeConfigSchemaRequest, options?: RequestOptions): Promise<GetEdgeConfigSchemaResponseBody>;
    /**
     * Update Edge Config schema
     *
     * @remarks
     * Update an Edge Config's schema.
     */
    patchEdgeConfigSchema(request: PatchEdgeConfigSchemaRequest, options?: RequestOptions): Promise<PatchEdgeConfigSchemaResponseBody>;
    /**
     * Delete an Edge Config's schema
     *
     * @remarks
     * Deletes the schema of existing Edge Config.
     */
    deleteEdgeConfigSchema(request: DeleteEdgeConfigSchemaRequest, options?: RequestOptions): Promise<void>;
    /**
     * Get an Edge Config item
     *
     * @remarks
     * Returns a specific Edge Config Item.
     */
    getEdgeConfigItem(request: GetEdgeConfigItemRequest, options?: RequestOptions): Promise<EdgeConfigItem>;
    /**
     * Get all tokens of an Edge Config
     *
     * @remarks
     * Returns all tokens of an Edge Config.
     */
    getEdgeConfigTokens(request: GetEdgeConfigTokensRequest, options?: RequestOptions): Promise<EdgeConfigToken>;
    /**
     * Delete one or more Edge Config tokens
     *
     * @remarks
     * Deletes one or more tokens of an existing Edge Config.
     */
    deleteEdgeConfigTokens(request: DeleteEdgeConfigTokensRequest, options?: RequestOptions): Promise<void>;
    /**
     * Get Edge Config token meta data
     *
     * @remarks
     * Return meta data about an Edge Config token.
     */
    getEdgeConfigToken(request: GetEdgeConfigTokenRequest, options?: RequestOptions): Promise<EdgeConfigToken>;
    /**
     * Create an Edge Config token
     *
     * @remarks
     * Adds a token to an existing Edge Config.
     */
    createEdgeConfigToken(request: CreateEdgeConfigTokenRequest, options?: RequestOptions): Promise<CreateEdgeConfigTokenResponseBody>;
    /**
     * Get Edge Config backup
     *
     * @remarks
     * Retrieves a specific version of an Edge Config from backup storage.
     */
    getEdgeConfigBackup(request: GetEdgeConfigBackupRequest, options?: RequestOptions): Promise<GetEdgeConfigBackupResponseBody>;
    /**
     * Get Edge Config backups
     *
     * @remarks
     * Returns backups of an Edge Config.
     */
    getEdgeConfigBackups(request: GetEdgeConfigBackupsRequest, options?: RequestOptions): Promise<GetEdgeConfigBackupsResponseBody>;
}
//# sourceMappingURL=edgeconfig.d.ts.map