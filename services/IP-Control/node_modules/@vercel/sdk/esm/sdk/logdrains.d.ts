import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { CreateLogDrainRequest, CreateLogDrainResponseBody } from "../models/createlogdrainop.js";
import { DeleteIntegrationLogDrainRequest } from "../models/deleteintegrationlogdrainop.js";
import { GetIntegrationLogDrainsRequest, GetIntegrationLogDrainsResponseBody } from "../models/getintegrationlogdrainsop.js";
export declare class LogDrains extends ClientSDK {
    /**
     * Retrieves a list of Integration log drains
     *
     * @remarks
     * Retrieves a list of all Integration log drains that are defined for the authenticated user or team. When using an OAuth2 token, the list is limited to log drains created by the authenticated integration.
     */
    getIntegrationLogDrains(request: GetIntegrationLogDrainsRequest, options?: RequestOptions): Promise<Array<GetIntegrationLogDrainsResponseBody>>;
    /**
     * Creates a new Integration Log Drain
     *
     * @remarks
     * Creates an Integration log drain. This endpoint must be called with an OAuth2 client (integration), since log drains are tied to integrations. If it is called with a different token type it will produce a 400 error.
     */
    createLogDrain(request: CreateLogDrainRequest, options?: RequestOptions): Promise<CreateLogDrainResponseBody>;
    /**
     * Deletes the Integration log drain with the provided `id`
     *
     * @remarks
     * Deletes the Integration log drain with the provided `id`. When using an OAuth2 Token, the log drain can be deleted only if the integration owns it.
     */
    deleteIntegrationLogDrain(request: DeleteIntegrationLogDrainRequest, options?: RequestOptions): Promise<void>;
}
//# sourceMappingURL=logdrains.d.ts.map