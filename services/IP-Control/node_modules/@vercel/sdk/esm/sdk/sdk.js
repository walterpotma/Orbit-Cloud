/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { getV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlans } from "../funcs/getV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlans.js";
import { ClientSDK } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
import { AccessGroups } from "./accessgroups.js";
import { Aliases } from "./aliases.js";
import { Artifacts } from "./artifacts.js";
import { Authentication } from "./authentication.js";
import { Certs } from "./certs.js";
import { Checks } from "./checks.js";
import { Deployments } from "./deployments.js";
import { Dns } from "./dns.js";
import { Domains } from "./domains.js";
import { EdgeConfig } from "./edgeconfig.js";
import { Environment } from "./environment.js";
import { Integrations } from "./integrations.js";
import { LogDrains } from "./logdrains.js";
import { Logs } from "./logs.js";
import { Marketplace } from "./marketplace.js";
import { ProjectMembers } from "./projectmembers.js";
import { Projects } from "./projects.js";
import { RollingRelease } from "./rollingrelease.js";
import { Security } from "./security.js";
import { Teams } from "./teams.js";
import { User } from "./user.js";
import { Webhooks } from "./webhooks.js";
export class Vercel extends ClientSDK {
    get accessGroups() {
        return (this._accessGroups ?? (this._accessGroups = new AccessGroups(this._options)));
    }
    get artifacts() {
        return (this._artifacts ?? (this._artifacts = new Artifacts(this._options)));
    }
    get checks() {
        return (this._checks ?? (this._checks = new Checks(this._options)));
    }
    get projects() {
        return (this._projects ?? (this._projects = new Projects(this._options)));
    }
    get deployments() {
        return (this._deployments ?? (this._deployments = new Deployments(this._options)));
    }
    get integrations() {
        return (this._integrations ?? (this._integrations = new Integrations(this._options)));
    }
    get domains() {
        return (this._domains ?? (this._domains = new Domains(this._options)));
    }
    get dns() {
        return (this._dns ?? (this._dns = new Dns(this._options)));
    }
    get edgeConfig() {
        return (this._edgeConfig ?? (this._edgeConfig = new EdgeConfig(this._options)));
    }
    get user() {
        return (this._user ?? (this._user = new User(this._options)));
    }
    get marketplace() {
        return (this._marketplace ?? (this._marketplace = new Marketplace(this._options)));
    }
    get authentication() {
        return (this._authentication ?? (this._authentication = new Authentication(this._options)));
    }
    get logDrains() {
        return (this._logDrains ?? (this._logDrains = new LogDrains(this._options)));
    }
    get logs() {
        return (this._logs ?? (this._logs = new Logs(this._options)));
    }
    get projectMembers() {
        return (this._projectMembers ?? (this._projectMembers = new ProjectMembers(this._options)));
    }
    get environment() {
        return (this._environment ?? (this._environment = new Environment(this._options)));
    }
    get rollingRelease() {
        return (this._rollingRelease ?? (this._rollingRelease = new RollingRelease(this._options)));
    }
    get security() {
        return (this._security ?? (this._security = new Security(this._options)));
    }
    get teams() {
        return (this._teams ?? (this._teams = new Teams(this._options)));
    }
    get webhooks() {
        return (this._webhooks ?? (this._webhooks = new Webhooks(this._options)));
    }
    get aliases() {
        return (this._aliases ?? (this._aliases = new Aliases(this._options)));
    }
    get certs() {
        return (this._certs ?? (this._certs = new Certs(this._options)));
    }
    async getV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlans(request, options) {
        return unwrapAsync(getV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlans(this, request, options));
    }
}
//# sourceMappingURL=sdk.js.map