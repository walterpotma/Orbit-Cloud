import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
/**
 * The type of entity.
 */
export declare const UserEventType: {
    readonly Author: "author";
    readonly BitbucketLogin: "bitbucket_login";
    readonly Bold: "bold";
    readonly DeploymentHost: "deployment_host";
    readonly DnsRecord: "dns_record";
    readonly GitLink: "git_link";
    readonly GithubLogin: "github_login";
    readonly GitlabLogin: "gitlab_login";
    readonly HookName: "hook_name";
    readonly Integration: "integration";
    readonly EdgeConfig: "edge-config";
    readonly Flag: "flag";
    readonly FlagsSegment: "flags-segment";
    readonly FlagsSettings: "flags-settings";
    readonly Link: "link";
    readonly ProjectName: "project_name";
    readonly ScalingRules: "scaling_rules";
    readonly EnvVarName: "env_var_name";
    readonly Target: "target";
    readonly Store: "store";
    readonly System: "system";
};
/**
 * The type of entity.
 */
export type UserEventType = ClosedEnum<typeof UserEventType>;
/**
 * A list of "entities" within the event `text`. Useful for enhancing the displayed text with additional styling and links.
 */
export type Entities = {
    /**
     * The type of entity.
     */
    type: UserEventType;
    /**
     * The index of where the entity begins within the `text` (inclusive).
     */
    start: number;
    /**
     * The index of where the entity ends within the `text` (non-inclusive).
     */
    end: number;
};
/**
 * Metadata for {@link userId}.
 */
export type User = {
    username: string;
    avatar: string;
    email: string;
    slug?: string | undefined;
    uid: string;
};
export declare const UserEventPrincipalType: {
    readonly App: "app";
};
export type UserEventPrincipalType = ClosedEnum<typeof UserEventPrincipalType>;
/**
 * Metadata for {@link principalId}.
 */
export type Two = {
    type: UserEventPrincipalType;
    clientId: string;
    name: string;
};
export declare const PrincipalType: {
    readonly User: "user";
};
export type PrincipalType = ClosedEnum<typeof PrincipalType>;
/**
 * Metadata for {@link principalId}.
 */
export type One = {
    type?: PrincipalType | undefined;
    avatar: string;
    email: string;
    slug?: string | undefined;
    uid: string;
    username: string;
};
export type Principal = One | Two;
export declare const UserEventViaType: {
    readonly App: "app";
};
export type UserEventViaType = ClosedEnum<typeof UserEventViaType>;
/**
 * Metadata for {@link viaIds}.
 */
export type Via2 = {
    type: UserEventViaType;
    clientId: string;
    name: string;
};
export declare const ViaType: {
    readonly User: "user";
};
export type ViaType = ClosedEnum<typeof ViaType>;
/**
 * Metadata for {@link viaIds}.
 */
export type Via1 = {
    type?: ViaType | undefined;
    avatar: string;
    email: string;
    slug?: string | undefined;
    uid: string;
    username: string;
};
export type Via = Via1 | Via2;
export declare const GrantType: {
    readonly AuthorizationCode: "authorization_code";
    readonly RefreshToken: "refresh_token";
    readonly UrnIetfParamsOauthGrantTypeDeviceCode: "urn:ietf:params:oauth:grant-type:device_code";
    readonly ClientCredentials: "client_credentials";
};
export type GrantType = ClosedEnum<typeof GrantType>;
export declare const AuthMethod: {
    readonly Email: "email";
    readonly Saml: "saml";
    readonly App: "app";
    readonly Github: "github";
    readonly Gitlab: "gitlab";
    readonly Bitbucket: "bitbucket";
    readonly Manual: "manual";
    readonly Passkey: "passkey";
    readonly Otp: "otp";
    readonly Sms: "sms";
    readonly Invite: "invite";
    readonly Google: "google";
};
export type AuthMethod = ClosedEnum<typeof AuthMethod>;
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndSixtyOne = {
    grantType: GrantType;
    appName: string;
    /**
     * access_token TTL
     */
    atTTL: number;
    /**
     * refresh_token TTL
     */
    rtTTL?: number | undefined;
    scope: string;
    authMethod: AuthMethod;
};
export type UserEventPayload160Team = {
    id: string;
    name: string;
};
export type UserEventPayload160Configuration = {
    id: string;
    name?: string | undefined;
};
export type UserEventPayloadPeering = {
    id: string;
    name?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndSixty = {
    team: UserEventPayload160Team;
    configuration: UserEventPayload160Configuration;
    peering: UserEventPayloadPeering;
    newName?: string | undefined;
};
export type UserEventPayload159Team = {
    id: string;
    name: string;
};
export type UserEventPayload159Configuration = {
    id: string;
    name?: string | undefined;
};
export type PayloadPeering = {
    id: string;
    name?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndFiftyNine = {
    team: UserEventPayload159Team;
    configuration: UserEventPayload159Configuration;
    peering: PayloadPeering;
};
export type UserEventPayload158Team = {
    id: string;
    name: string;
};
export type UserEventPayload158Configuration = {
    id: string;
    name?: string | undefined;
};
export type Peering = {
    id: string;
    accountId: string;
    region: string;
    vpcId: string;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndFiftyEight = {
    team: UserEventPayload158Team;
    configuration: UserEventPayload158Configuration;
    peering: Peering;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndFiftySeven = {
    appName: string;
    appId?: string | undefined;
    installationId?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndFiftySix = {
    appName: string;
    appId?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndFiftyFive = {
    appName: string;
    appId: string;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndFiftyFour = {
    appName: string;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndFiftyThree = {
    appName: string;
    nextScopes: Array<string>;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndFiftyTwo = {
    appName: string;
    scopes: Array<string>;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndFiftyOne = {
    oldName: string;
    newName: string;
};
export declare const Tier: {
    readonly Pro: "pro";
    readonly Plus: "plus";
};
export type Tier = ClosedEnum<typeof Tier>;
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndFifty = {
    tier: Tier;
};
export type ProjectWebAnalytics = {
    id: string;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    enabledAt?: number | undefined;
    hasData?: boolean | undefined;
};
export type PrevProjectWebAnalytics = {
    id: string;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    enabledAt?: number | undefined;
    hasData?: boolean | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndFortyNine = {
    projectId: string;
    projectName: string;
    projectWebAnalytics?: ProjectWebAnalytics | undefined;
    prevProjectWebAnalytics?: PrevProjectWebAnalytics | null | undefined;
};
export type Microfrontends2 = {
    updatedAt: number;
    groupIds: Array<any>;
    enabled: boolean;
};
export type Microfrontends1 = {
    /**
     * Timestamp when the microfrontends settings were last updated.
     */
    updatedAt: number;
    /**
     * The group IDs of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together.
     */
    groupIds: Array<string>;
    /**
     * Whether microfrontends are enabled for this project.
     */
    enabled: boolean;
    /**
     * Whether this project is the default application for the microfrontends group. The default application is the one that is used as the top level shell for the microfrontends group and hosts the other microfrontends.
     */
    isDefaultApp?: boolean | undefined;
    /**
     * A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI. Includes the leading slash, e.g. `/docs`
     */
    defaultRoute?: string | undefined;
    /**
     * Whether observability data should be routed to this microfrontend project or a root project.
     */
    routeObservabilityToThisProject?: boolean | undefined;
};
export type Microfrontends = Microfrontends1 | Microfrontends2;
export type UserEventPayload148Project = {
    id: string;
    name: string;
    microfrontends?: Microfrontends1 | Microfrontends2 | undefined;
};
export type UserEventMicrofrontends2 = {
    updatedAt: number;
    groupIds: Array<any>;
    enabled: boolean;
};
export type UserEventMicrofrontends1 = {
    /**
     * Timestamp when the microfrontends settings were last updated.
     */
    updatedAt: number;
    /**
     * The group IDs of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together.
     */
    groupIds: Array<string>;
    /**
     * Whether microfrontends are enabled for this project.
     */
    enabled: boolean;
    /**
     * Whether this project is the default application for the microfrontends group. The default application is the one that is used as the top level shell for the microfrontends group and hosts the other microfrontends.
     */
    isDefaultApp?: boolean | undefined;
    /**
     * A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI. Includes the leading slash, e.g. `/docs`
     */
    defaultRoute?: string | undefined;
    /**
     * Whether observability data should be routed to this microfrontend project or a root project.
     */
    routeObservabilityToThisProject?: boolean | undefined;
};
export type PayloadMicrofrontends = UserEventMicrofrontends1 | UserEventMicrofrontends2;
export type UserEventPayload148PrevProject = {
    microfrontends?: UserEventMicrofrontends1 | UserEventMicrofrontends2 | undefined;
};
export type PayloadPrev = {
    project: UserEventPayload148PrevProject;
};
export type PayloadGroup = {
    id: string;
    slug: string;
    name: string;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndFortyEight = {
    project: UserEventPayload148Project;
    prev: PayloadPrev;
    group: PayloadGroup;
};
export type UserEventPayload147Project = {
    id: string;
    name: string;
};
export type Group = {
    id: string;
    slug: string;
    name: string;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndFortySeven = {
    project: UserEventPayload147Project;
    group: Group;
};
export type Prev = {
    name: string;
    slug: string;
    fallbackEnvironment: string;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndFortySix = {
    id: string;
    slug?: string | undefined;
    name?: string | undefined;
    fallbackEnvironment?: string | undefined;
    prev: Prev;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndFortyFive = {
    id: string;
    slug: string;
    name: string;
};
export declare const UserEventPayload144Action: {
    readonly Enable: "enable";
    readonly Disable: "disable";
};
export type UserEventPayload144Action = ClosedEnum<typeof UserEventPayload144Action>;
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndFortyFour = {
    action: UserEventPayload144Action;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndFortyThree = {
    edgeConfigId: string;
    edgeConfigSlug: string;
    /**
     * ids of deleted tokens
     */
    edgeConfigTokenIds: Array<string>;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndFortyTwo = {
    edgeConfigId: string;
    edgeConfigSlug: string;
    edgeConfigTokenId: string;
    label: string;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndFortyOne = {
    edgeConfigId: string;
    edgeConfigSlug: string;
    edgeConfigDigest: string;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndForty = {
    projectName: string;
    urls: Array<string>;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndThirtyNine = {
    projectName: string;
    tags: Array<string>;
    target?: string | undefined;
};
export declare const UserEventPayload138Role: {
    readonly Admin: "ADMIN";
    readonly ProjectDeveloper: "PROJECT_DEVELOPER";
    readonly ProjectViewer: "PROJECT_VIEWER";
};
export type UserEventPayload138Role = ClosedEnum<typeof UserEventPayload138Role>;
export type UserEventPayload138Project = {
    name: string;
    role: UserEventPayload138Role;
    invitedUserName: string;
    id?: string | undefined;
    invitedUserId?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndThirtyEight = {
    project: UserEventPayload138Project;
};
export type UserEventPayload137Project = {
    id: string;
    name: string;
};
export declare const UserEventPayload137Role: {
    readonly Admin: "ADMIN";
    readonly ProjectDeveloper: "PROJECT_DEVELOPER";
    readonly ProjectViewer: "PROJECT_VIEWER";
};
export type UserEventPayload137Role = ClosedEnum<typeof UserEventPayload137Role>;
export declare const PayloadPreviousRole: {
    readonly Admin: "ADMIN";
    readonly ProjectDeveloper: "PROJECT_DEVELOPER";
    readonly ProjectViewer: "PROJECT_VIEWER";
};
export type PayloadPreviousRole = ClosedEnum<typeof PayloadPreviousRole>;
export type PayloadProjectMembership = {
    role?: UserEventPayload137Role | undefined;
    uid?: string | undefined;
    createdAt?: number | undefined;
    username?: string | undefined;
    previousRole?: PayloadPreviousRole | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndThirtySeven = {
    project: UserEventPayload137Project;
    projectMembership: PayloadProjectMembership;
};
export type UserEventPayload136Project = {
    name: string;
    id?: string | undefined;
};
export declare const UserEventPayloadRole: {
    readonly Admin: "ADMIN";
    readonly ProjectDeveloper: "PROJECT_DEVELOPER";
    readonly ProjectViewer: "PROJECT_VIEWER";
};
export type UserEventPayloadRole = ClosedEnum<typeof UserEventPayloadRole>;
export type RemovedMembership = {
    role: UserEventPayloadRole;
    uid: string;
    createdAt: number;
    username?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndThirtySix = {
    project: UserEventPayload136Project;
    removedMembership: RemovedMembership;
};
export type UserEventPayload135Project = {
    name: string;
    id?: string | undefined;
};
export declare const PayloadRole: {
    readonly Admin: "ADMIN";
    readonly ProjectDeveloper: "PROJECT_DEVELOPER";
    readonly ProjectViewer: "PROJECT_VIEWER";
};
export type PayloadRole = ClosedEnum<typeof PayloadRole>;
export type ProjectMembership = {
    role: PayloadRole;
    uid: string;
    createdAt: number;
    username?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndThirtyFive = {
    project: UserEventPayload135Project;
    projectMembership: ProjectMembership | null;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndThirtyFour = {
    previousProjectName: string;
    newProjectName: string;
    originAccountName: string;
    transferId?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndThirtyThree = {
    previousProjectName: string;
    newProjectName: string;
    destinationAccountName: string;
    transferId?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndThirtyTwo = {
    projectName: string;
    destinationAccountName: string | null;
    transferId?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndThirtyOne = {
    projectId: string;
    projectName: string;
    originAccountName: string;
    destinationAccountName: string;
    destinationAccountId: string;
    transferId?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndThirty = {
    requestedTeamName: string;
    requestedUserName?: string | undefined;
    gitUsername?: string | undefined;
    githubUsername?: string | undefined;
    gitlabUsername?: string | undefined;
    bitbucketUsername?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndTwentyNine = {
    teamName: string;
    username?: string | undefined;
    gitUsername?: string | null | undefined;
    githubUsername?: string | null | undefined;
    gitlabUsername?: string | null | undefined;
    bitbucketUsername?: string | null | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndTwentyEight = {
    teamName: string;
    username?: string | undefined;
    gitUsername?: string | undefined;
    githubUsername?: string | null | undefined;
    gitlabUsername?: string | null | undefined;
    bitbucketUsername?: string | null | undefined;
    updatedUid?: string | undefined;
    teamId?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndTwentySeven = {
    price?: number | undefined;
    currency?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndTwentySix = {
    previewDeploymentSuffix?: string | null | undefined;
    previousPreviewDeploymentSuffix?: string | null | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndTwentyFive = {
    price?: number | undefined;
    currency?: string | undefined;
    enabled?: boolean | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndTwentyFour = {
    username: string;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndTwentyThree = {
    email: string;
    prevEmail: string;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndTwentyTwo = {
    mfaEnabled: boolean;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndTwentyOne = {
    enabled: boolean;
    totpVerified: boolean;
};
export type Previous = {
    enabled: boolean;
    totpVerified: boolean;
};
export type Next = {
    enabled: boolean;
    totpVerified: boolean;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndTwenty = {
    previous: Previous;
    next: Next;
};
/**
 * Represents configuration for remote caching
 */
export type PayloadRemoteCaching = {
    enabled?: boolean | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndNineteen = {
    /**
     * Represents configuration for remote caching
     */
    remoteCaching?: PayloadRemoteCaching | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndEighteen = {
    slug?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndSeventeen = {
    name?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndSixteen = {
    enforced: boolean;
};
export type UserEventPayload115User = {
    id: string;
    username: string;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndFifteen = {
    entitlement: string;
    user: UserEventPayload115User;
    previousCanceledAt?: string | undefined;
};
export type UserEventPayloadUser = {
    id: string;
    username: string;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndFourteen = {
    entitlement: string;
    user: UserEventPayloadUser;
};
export type UpdatedUser = {
    username: string;
    email: string;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndThirteen = {
    directoryType?: string | undefined;
    updatedUser?: UpdatedUser | undefined;
    role?: string | undefined;
    previousRole: string;
    updatedUid?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndTwelve = {
    role?: string | undefined;
    uid: string;
    origin?: string | undefined;
    teamRoles?: Array<string> | undefined;
    teamPermissions?: Array<string> | undefined;
    entitlements?: Array<string> | undefined;
};
export type DeletedUser = {
    username: string;
    email: string;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndEleven = {
    deletedUser?: DeletedUser | undefined;
    deletedUid?: string | undefined;
    githubUsername?: string | null | undefined;
    gitlabUsername?: string | null | undefined;
    bitbucketUsername?: string | null | undefined;
    directoryType?: string | undefined;
};
export type InvitedUser = {
    username: string;
    email: string;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndTen = {
    directoryType?: string | undefined;
    ssoType?: string | undefined;
    invitedUser?: InvitedUser | undefined;
    invitedEmail?: string | undefined;
    invitationRole?: string | undefined;
    entitlements?: Array<string> | undefined;
    invitedUid?: string | undefined;
};
export type Reasons = {
    slug: string;
    description: string;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndNine = {
    slug: string;
    teamId: string;
    by: string;
    reasons?: Array<Reasons> | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndEight = {
    slug: string;
};
export type Store = {
    name: string;
    id: string;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndSeven = {
    store: Store;
    ownerId?: string | undefined;
};
export declare const StoreType: {
    readonly Redis: "redis";
    readonly Postgres: "postgres";
};
export type StoreType = ClosedEnum<typeof StoreType>;
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndSix = {
    storeType: StoreType;
};
export declare const UserEventPayloadType: {
    readonly Redis: "redis";
    readonly Postgres: "postgres";
    readonly EdgeConfig: "edge-config";
    readonly Blob: "blob";
    readonly Integration: "integration";
};
export type UserEventPayloadType = ClosedEnum<typeof UserEventPayloadType>;
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndFive = {
    id: string;
    name?: string | undefined;
    computeUnitsMax?: number | undefined;
    computeUnitsMin?: number | undefined;
    suspendTimeoutSeconds?: number | undefined;
    type: UserEventPayloadType;
};
/**
 * The budget type
 */
export declare const UserEventPayload104Type: {
    readonly Fixed: "fixed";
};
/**
 * The budget type
 */
export type UserEventPayload104Type = ClosedEnum<typeof UserEventPayload104Type>;
/**
 * The acive pricing plan the team is billed with
 */
export declare const PayloadPricingPlan: {
    readonly Plus: "plus";
    readonly Legacy: "legacy";
    readonly Unbundled: "unbundled";
};
/**
 * The acive pricing plan the team is billed with
 */
export type PayloadPricingPlan = ClosedEnum<typeof PayloadPricingPlan>;
/**
 * Represents a budget for tracking and notifying teams on their spending.
 */
export type BudgetItem = {
    /**
     * The budget type
     */
    type: UserEventPayload104Type;
    /**
     * Budget amount (USD / dollars)
     */
    fixedBudget: number;
    /**
     * Array of the last 3 months of spend data
     */
    previousSpend: Array<number>;
    /**
     * Array of 50, 75, 100 to keep track of notifications sent out
     */
    notifiedAt: Array<number>;
    /**
     * Webhook id that corresponds to a webhook in Cosmos webhook collection
     */
    webhookId?: string | undefined;
    /**
     * Keep track if the webhook has been called for the month
     */
    webhookNotified?: boolean | undefined;
    /**
     * Date time when budget is created
     */
    createdAt: number;
    /**
     * Date time when budget is updated last
     */
    updatedAt?: number | undefined;
    /**
     * Is the budget currently active for a customer
     */
    isActive: boolean;
    /**
     * Should all projects be paused if budget is exceeded
     */
    pauseProjects?: boolean | undefined;
    /**
     * The acive pricing plan the team is billed with
     */
    pricingPlan?: PayloadPricingPlan | undefined;
    /**
     * Partition key
     */
    teamId: string;
    /**
     * Sort key that needs to be unique per teamId
     */
    id: string;
};
export type PayloadBudget = {
    /**
     * Represents a budget for tracking and notifying teams on their spending.
     */
    budgetItem: BudgetItem;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndFour = {
    budget: PayloadBudget;
};
/**
 * The budget type
 */
export declare const UserEventPayload103Type: {
    readonly Fixed: "fixed";
};
/**
 * The budget type
 */
export type UserEventPayload103Type = ClosedEnum<typeof UserEventPayload103Type>;
/**
 * The acive pricing plan the team is billed with
 */
export declare const PricingPlan: {
    readonly Plus: "plus";
    readonly Legacy: "legacy";
    readonly Unbundled: "unbundled";
};
/**
 * The acive pricing plan the team is billed with
 */
export type PricingPlan = ClosedEnum<typeof PricingPlan>;
/**
 * Represents a budget for tracking and notifying teams on their spending.
 */
export type Budget = {
    /**
     * The budget type
     */
    type: UserEventPayload103Type;
    /**
     * Budget amount (USD / dollars)
     */
    fixedBudget: number;
    /**
     * Array of the last 3 months of spend data
     */
    previousSpend: Array<number>;
    /**
     * Array of 50, 75, 100 to keep track of notifications sent out
     */
    notifiedAt: Array<number>;
    /**
     * Webhook id that corresponds to a webhook in Cosmos webhook collection
     */
    webhookId?: string | undefined;
    /**
     * Keep track if the webhook has been called for the month
     */
    webhookNotified?: boolean | undefined;
    /**
     * Date time when budget is created
     */
    createdAt: number;
    /**
     * Date time when budget is updated last
     */
    updatedAt?: number | undefined;
    /**
     * Is the budget currently active for a customer
     */
    isActive: boolean;
    /**
     * Should all projects be paused if budget is exceeded
     */
    pauseProjects?: boolean | undefined;
    /**
     * The acive pricing plan the team is billed with
     */
    pricingPlan?: PricingPlan | undefined;
    /**
     * Partition key
     */
    teamId: string;
    /**
     * Sort key that needs to be unique per teamId
     */
    id: string;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndThree = {
    /**
     * Represents a budget for tracking and notifying teams on their spending.
     */
    budget: Budget;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndTwo = {
    webhookUrl?: string | undefined;
};
export type ScalingRules = {
    min: number;
    max: number;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundredAndOne = {
    scalingRules: {
        [k: string]: ScalingRules;
    };
    min: number;
    max: number;
    url: string;
};
/**
 * The payload of the event, if requested.
 */
export type OneHundred = {
    bio: string;
};
/**
 * The payload of the event, if requested.
 */
export type NinetyNine = {
    oldName: string;
    newName: string;
    uid?: string | undefined;
};
export type Name2 = {
    name: string;
};
export type Name = Name2 | string;
/**
 * The payload of the event, if requested.
 */
export type NinetyEight = {
    uid: string;
    name: Name2 | string;
};
export type UserEventPayload97Team = {
    id: string;
    name?: string | undefined;
};
export type PayloadPreviousRule = {
    email: string;
};
/**
 * The payload of the event, if requested.
 */
export type NinetySeven = {
    team: UserEventPayload97Team;
    previousRule: PayloadPreviousRule;
};
export type UserEventPayload96Team = {
    id: string;
    name?: string | undefined;
};
export type PreviousRule = {
    email: string;
};
export type NextRule = {
    email: string;
};
/**
 * The payload of the event, if requested.
 */
export type NinetySix = {
    team: UserEventPayload96Team;
    previousRule?: PreviousRule | undefined;
    nextRule?: NextRule | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type NinetyFive = {
    email: string;
};
/**
 * The payload of the event, if requested.
 */
export type NinetyFour = {
    email: string;
    verified: boolean;
};
/**
 * The payload of the event, if requested.
 */
export type NinetyThree = {
    instances: number;
    url: string;
};
/**
 * The payload of the event, if requested.
 */
export type NinetyTwo = {
    gitProvider: string;
    gitProviderGroupDescriptor: string;
    gitScope: string;
};
/**
 * The payload of the event, if requested.
 */
export type NinetyOne = {
    projectId: string;
    projectName: string;
    newTargetPercentage?: number | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type Ninety = {
    projectId: string;
    projectName: string;
};
/**
 * The payload of the event, if requested.
 */
export type EightyNine = {
    source: string;
    projectId: string;
};
/**
 * The payload of the event, if requested.
 */
export type EightyEight = {
    projectId: string;
};
export type UserEventPayload87Team = {
    id: string;
    name: string;
};
export declare const EnvId2: {
    readonly Preview: "preview";
    readonly Production: "production";
};
export type EnvId2 = ClosedEnum<typeof EnvId2>;
export type EnvId = string | EnvId2;
export type Aws = {
    subnetIds: Array<string>;
    securityGroupId: string;
};
export type OldConnectConfigurations = {
    envId: string | EnvId2;
    connectConfigurationId: string;
    dc?: string | undefined;
    passive: boolean;
    buildsEnabled: boolean;
    aws?: Aws | undefined;
    createdAt: number;
    updatedAt: number;
};
export declare const UserEventEnvId2: {
    readonly Preview: "preview";
    readonly Production: "production";
};
export type UserEventEnvId2 = ClosedEnum<typeof UserEventEnvId2>;
export type PayloadEnvId = string | UserEventEnvId2;
export type PayloadAws = {
    subnetIds: Array<string>;
    securityGroupId: string;
};
export type NewConnectConfigurations = {
    envId: string | UserEventEnvId2;
    connectConfigurationId: string;
    dc?: string | undefined;
    passive: boolean;
    buildsEnabled: boolean;
    aws?: PayloadAws | undefined;
    createdAt: number;
    updatedAt: number;
};
export type UserEventPayload87Project = {
    id: string;
    name?: string | undefined;
    oldConnectConfigurations: Array<OldConnectConfigurations> | null;
    newConnectConfigurations: Array<NewConnectConfigurations> | null;
};
/**
 * The payload of the event, if requested.
 */
export type EightySeven = {
    team: UserEventPayload87Team;
    project: UserEventPayload87Project;
};
/**
 * The payload of the event, if requested.
 */
export type EightySix = {
    name: string;
    ownerId: string;
};
export declare const UserEventPayload85Action: {
    readonly Enabled: "enabled";
    readonly Disabled: "disabled";
    readonly Regenerated: "regenerated";
};
export type UserEventPayload85Action = ClosedEnum<typeof UserEventPayload85Action>;
/**
 * The payload of the event, if requested.
 */
export type EightyFive = {
    projectName: string;
    action: UserEventPayload85Action;
};
export type Paths = {
    value: string;
};
export type OptionsAllowlist = {
    paths: Array<Paths>;
};
export type PayloadPaths = {
    value: string;
};
export type OldOptionsAllowlist = {
    paths: Array<PayloadPaths>;
};
/**
 * The payload of the event, if requested.
 */
export type EightyFour = {
    projectName: string;
    optionsAllowlist?: OptionsAllowlist | null | undefined;
    oldOptionsAllowlist?: OldOptionsAllowlist | null | undefined;
};
export declare const TrustedIps: {
    readonly All: "all";
    readonly Preview: "preview";
    readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
    readonly AllExceptCustomDomains: "all_except_custom_domains";
    readonly Production: "production";
};
export type TrustedIps = ClosedEnum<typeof TrustedIps>;
export declare const OldTrustedIps: {
    readonly All: "all";
    readonly Preview: "preview";
    readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
    readonly AllExceptCustomDomains: "all_except_custom_domains";
    readonly Production: "production";
};
export type OldTrustedIps = ClosedEnum<typeof OldTrustedIps>;
/**
 * The payload of the event, if requested.
 */
export type EightyThree = {
    projectName: string;
    trustedIps?: TrustedIps | null | undefined;
    oldTrustedIps?: OldTrustedIps | null | undefined;
    addedAddresses?: Array<string> | null | undefined;
    removedAddresses?: Array<string> | null | undefined;
};
export declare const PasswordProtection2: {
    readonly All: "all";
    readonly Preview: "preview";
    readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
    readonly AllExceptCustomDomains: "all_except_custom_domains";
};
export type PasswordProtection2 = ClosedEnum<typeof PasswordProtection2>;
export declare const PasswordProtectionDeploymentType: {
    readonly All: "all";
    readonly Preview: "preview";
    readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
    readonly AllExceptCustomDomains: "all_except_custom_domains";
};
export type PasswordProtectionDeploymentType = ClosedEnum<typeof PasswordProtectionDeploymentType>;
export type PasswordProtection1 = {
    deploymentType: PasswordProtectionDeploymentType;
};
export type PayloadPasswordProtection = PasswordProtection1 | PasswordProtection2;
export declare const OldPasswordProtection2: {
    readonly All: "all";
    readonly Preview: "preview";
    readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
    readonly AllExceptCustomDomains: "all_except_custom_domains";
};
export type OldPasswordProtection2 = ClosedEnum<typeof OldPasswordProtection2>;
export declare const OldPasswordProtectionDeploymentType: {
    readonly All: "all";
    readonly Preview: "preview";
    readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
    readonly AllExceptCustomDomains: "all_except_custom_domains";
};
export type OldPasswordProtectionDeploymentType = ClosedEnum<typeof OldPasswordProtectionDeploymentType>;
export type OldPasswordProtection1 = {
    deploymentType: OldPasswordProtectionDeploymentType;
};
export type OldPasswordProtection = OldPasswordProtection1 | OldPasswordProtection2;
/**
 * The payload of the event, if requested.
 */
export type EightyTwo = {
    projectName: string;
    passwordProtection: PasswordProtection1 | PasswordProtection2 | null;
    oldPasswordProtection: OldPasswordProtection1 | OldPasswordProtection2 | null;
};
export declare const SsoProtection2: {
    readonly All: "all";
    readonly Preview: "preview";
    readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
    readonly AllExceptCustomDomains: "all_except_custom_domains";
};
export type SsoProtection2 = ClosedEnum<typeof SsoProtection2>;
export declare const DeploymentType: {
    readonly All: "all";
    readonly Preview: "preview";
    readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
    readonly AllExceptCustomDomains: "all_except_custom_domains";
};
export type DeploymentType = ClosedEnum<typeof DeploymentType>;
export type SsoProtection1 = {
    deploymentType: DeploymentType;
};
export type PayloadSsoProtection = SsoProtection1 | SsoProtection2;
export declare const OldSsoProtection2: {
    readonly All: "all";
    readonly Preview: "preview";
    readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
    readonly AllExceptCustomDomains: "all_except_custom_domains";
};
export type OldSsoProtection2 = ClosedEnum<typeof OldSsoProtection2>;
export declare const OldSsoProtectionDeploymentType: {
    readonly All: "all";
    readonly Preview: "preview";
    readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
    readonly AllExceptCustomDomains: "all_except_custom_domains";
};
export type OldSsoProtectionDeploymentType = ClosedEnum<typeof OldSsoProtectionDeploymentType>;
export type OldSsoProtection1 = {
    deploymentType: OldSsoProtectionDeploymentType;
};
export type OldSsoProtection = OldSsoProtection1 | OldSsoProtection2;
/**
 * The payload of the event, if requested.
 */
export type EightyOne = {
    projectName: string;
    ssoProtection: SsoProtection1 | SsoProtection2 | null;
    oldSsoProtection: OldSsoProtection1 | OldSsoProtection2 | null;
};
/**
 * The payload of the event, if requested.
 */
export type Eighty = {
    projectName?: string | undefined;
    projectId: string;
};
/**
 * The payload of the event, if requested.
 */
export type SeventyNine = {
    projectName?: string | undefined;
    projectId: string;
    projectAnalytics?: {
        [k: string]: any;
    } | undefined;
    prevProjectAnalytics?: {
        [k: string]: any;
    } | null | undefined;
};
export type ProjectAnalytics = {
    id: string;
    canceledAt?: number | null | undefined;
    disabledAt: number;
    enabledAt: number;
    paidAt?: number | undefined;
    sampleRatePercent?: number | null | undefined;
    spendLimitInDollars?: number | null | undefined;
};
export type PrevProjectAnalytics = {
    id: string;
    canceledAt?: number | null | undefined;
    disabledAt: number;
    enabledAt: number;
    paidAt?: number | undefined;
    sampleRatePercent?: number | null | undefined;
    spendLimitInDollars?: number | null | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type SeventyEight = {
    projectName?: string | undefined;
    projectId: string;
    projectAnalytics: ProjectAnalytics | null;
    prevProjectAnalytics: PrevProjectAnalytics | null;
};
/**
 * The payload of the event, if requested.
 */
export type SeventySeven = {
    projectName: string;
    branch: string;
};
export declare const UserEventPayload76Role: {
    readonly Owner: "OWNER";
    readonly Member: "MEMBER";
    readonly Developer: "DEVELOPER";
    readonly Security: "SECURITY";
    readonly Billing: "BILLING";
    readonly Viewer: "VIEWER";
    readonly ViewerForPlus: "VIEWER_FOR_PLUS";
    readonly Contributor: "CONTRIBUTOR";
};
export type UserEventPayload76Role = ClosedEnum<typeof UserEventPayload76Role>;
export declare const PayloadOrigin: {
    readonly Teams: "teams";
    readonly Saml: "saml";
    readonly Link: "link";
    readonly Github: "github";
    readonly Gitlab: "gitlab";
    readonly Bitbucket: "bitbucket";
    readonly Mail: "mail";
    readonly Import: "import";
    readonly Dsync: "dsync";
    readonly Feedback: "feedback";
    readonly OrganizationTeams: "organization-teams";
};
export type PayloadOrigin = ClosedEnum<typeof PayloadOrigin>;
export type PayloadGitUserId = string | number;
export type PayloadJoinedFrom = {
    origin: PayloadOrigin;
    commitId?: string | undefined;
    repoId?: string | undefined;
    repoPath?: string | undefined;
    gitUserId?: string | number | undefined;
    gitUserLogin?: string | undefined;
    ssoUserId?: string | undefined;
    ssoConnectedAt?: number | undefined;
    idpUserId?: string | undefined;
    dsyncUserId?: string | undefined;
    dsyncConnectedAt?: number | undefined;
};
export type RemovedUsers = {
    role: UserEventPayload76Role;
    confirmed: boolean;
    confirmedAt?: number | undefined;
    joinedFrom?: PayloadJoinedFrom | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type SeventySix = {
    plan: string;
    removedUsers?: {
        [k: string]: RemovedUsers;
    } | undefined;
    priorPlan?: string | undefined;
    isDowngrade?: boolean | undefined;
    userAgent?: string | undefined;
    isReactivate?: boolean | undefined;
    isTrialUpgrade?: boolean | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type SeventyFive = {
    projectName: string;
};
/**
 * The payload of the event, if requested.
 */
export type SeventyFour = {
    projectId: string;
    toDeploymentId: string;
    projectName: string;
};
/**
 * The payload of the event, if requested.
 */
export type SeventyThree = {
    drainUrl: string | null;
    integrationName?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type SeventyTwo = {
    logDrainUrl: string;
    integrationName?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type SeventyOne = {
    logDrainUrl: string | null;
    integrationName?: string | undefined;
};
export declare const PayloadName: {
    readonly Iphone: "iphone";
    readonly Ipad: "ipad";
    readonly Ipod: "ipod";
    readonly Chrome: "chrome";
    readonly Firefox: "firefox";
    readonly Mozilla: "mozilla";
    readonly Unknown: "unknown";
};
export type PayloadName = ClosedEnum<typeof PayloadName>;
export type Browser = {
    name: PayloadName;
};
export declare const UserEventPayloadName: {
    readonly Unknown: "unknown";
    readonly Darwin: "darwin";
    readonly Win32: "win32";
    readonly Win: "win";
    readonly Windows: "windows";
    readonly Linux: "linux";
    readonly Freebsd: "freebsd";
    readonly Sunos: "sunos";
    readonly Mac: "mac";
    readonly Ios: "ios";
    readonly Android: "android";
    readonly MacOS: "Mac OS";
    readonly OsX: "OS X";
};
export type UserEventPayloadName = ClosedEnum<typeof UserEventPayloadName>;
export type Os = {
    name: UserEventPayloadName;
};
export type UserAgent = {
    browser: Browser;
    ua: string;
    program: string;
    os: Os;
};
export type Names = {
    en: string;
};
export type City = {
    names: Names;
};
export type PayloadNames = {
    en: string;
};
export type Country = {
    names: PayloadNames;
};
export type UserEventPayloadNames = {
    en: string;
};
export type MostSpecificSubdivision = {
    names: UserEventPayloadNames;
};
export type Geolocation = {
    city?: City | undefined;
    country: Country;
    mostSpecificSubdivision?: MostSpecificSubdivision | undefined;
    regionName?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type Seventy = {
    userAgent?: UserAgent | undefined;
    geolocation?: Geolocation | null | undefined;
    viaGithub: boolean;
    viaGitlab: boolean;
    viaBitbucket: boolean;
    viaGoogle: boolean;
    viaSamlSso: boolean;
    viaPasskey: boolean;
    ssoType?: string | undefined;
    env?: string | undefined;
    os?: string | undefined;
    username?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type SixtyNine = {
    integrationId: string;
    configurationId: string;
    integrationSlug: string;
    integrationName: string;
    ownerId: string;
    projectIds?: Array<string> | undefined;
    confirmedScopes: Array<string>;
};
/**
 * The payload of the event, if requested.
 */
export type SixtyEight = {
    projectId: string;
    fromDeploymentId: string;
    toDeploymentId: string;
    projectName: string;
    reason?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type SixtySeven = {
    integrationId: string;
    configurationId: string;
    integrationSlug: string;
    integrationName: string;
    ownerId: string;
    projectIds?: Array<string> | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type SixtySix = {
    integrationId: string;
    configurationId: string;
    integrationSlug: string;
    integrationName: string;
    ownerId: string;
    billingPlanId: string;
    billingPlanName?: string | undefined;
};
export type Configurations = {
    integrationId: string;
    configurationId: string;
    integrationSlug: string;
    integrationName?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type SixtyFive = {
    configurations: Array<Configurations>;
    ownerId: string;
};
export declare const UserEventPayload64Action: {
    readonly HardBlocked: "hard-blocked";
    readonly SoftBlocked: "soft-blocked";
    readonly Unblocked: "unblocked";
};
export type UserEventPayload64Action = ClosedEnum<typeof UserEventPayload64Action>;
/**
 * Since June 2023
 */
export type BlockHistory = {
    action: UserEventPayload64Action;
    createdAt: number;
    caseId?: string | undefined;
    reason: string;
    actor?: string | undefined;
    statusCode?: number | undefined;
    comment?: string | undefined;
};
/**
 * (scanner history). Since November 2021. First element is newest.
 */
export type History = {
    scanner: string;
    reason: string;
    by: string;
    byId: string;
    at: number;
};
export type Abuse = {
    /**
     * Since June 2023
     */
    blockHistory?: Array<BlockHistory> | undefined;
    /**
     * Since March 2022. Helps abuse checks by tracking git auths. Format: `<platform>:<detail>:<value>`
     */
    gitAuthHistory?: Array<string> | undefined;
    /**
     * (scanner history). Since November 2021. First element is newest.
     */
    history?: Array<History> | undefined;
    /**
     * Since September 2023. How often did this owner trigger an actual git lineage deploy block?
     */
    gitLineageBlocks?: number | undefined;
    /**
     * Since September 2023. How often did this owner trigger a git lineage deploy block dry run?
     */
    gitLineageBlocksDry?: number | undefined;
    /**
     * Since November 2021. Guides the abuse scanner in build container.
     */
    scanner?: string | undefined;
    /**
     * Since November 2021
     */
    updatedAt: number;
    creationUserAgent?: string | undefined;
    creationIp?: string | undefined;
    removedPhoneNumbers?: string | undefined;
};
export declare const Plan: {
    readonly Pro: "pro";
    readonly Enterprise: "enterprise";
    readonly Hobby: "hobby";
};
export type Plan = ClosedEnum<typeof Plan>;
export type PayloadBilling = {
    plan: Plan;
};
export declare const UserEventCredentialsType: {
    readonly GithubOauthCustomHost: "github-oauth-custom-host";
};
export type UserEventCredentialsType = ClosedEnum<typeof UserEventCredentialsType>;
export type Credentials2 = {
    type: UserEventCredentialsType;
    host: string;
    id: string;
};
export declare const CredentialsType: {
    readonly Gitlab: "gitlab";
    readonly Bitbucket: "bitbucket";
    readonly Google: "google";
    readonly GithubOauth: "github-oauth";
    readonly GithubOauthLimited: "github-oauth-limited";
};
export type CredentialsType = ClosedEnum<typeof CredentialsType>;
export type Credentials1 = {
    type: CredentialsType;
    id: string;
};
export type Credentials = Credentials2 | Credentials1;
export type PayloadDataCache = {
    excessBillingEnabled?: boolean | undefined;
};
export type PayloadDismissals = {
    scopeId: string;
    createdAt: number;
};
export type PayloadDismissedToasts = {
    name: string;
    dismissals: Array<PayloadDismissals>;
};
export type PayloadFavoriteProjectsAndSpaces = {
    teamId: string;
    projectId: string;
};
export type PayloadImportFlowGitNamespace = string | number;
export type PayloadImportFlowGitNamespaceId = string | number;
export declare const PayloadImportFlowGitProvider: {
    readonly Github: "github";
    readonly Gitlab: "gitlab";
    readonly Bitbucket: "bitbucket";
    readonly GithubLimited: "github-limited";
    readonly GithubCustomHost: "github-custom-host";
};
export type PayloadImportFlowGitProvider = ClosedEnum<typeof PayloadImportFlowGitProvider>;
export type PayloadGitNamespaceId = string | number;
export type PayloadPreferredScopesAndGitNamespaces = {
    scopeId: string;
    gitNamespaceId: string | number | null;
};
export type PreventAutoBlocking = number | boolean;
/**
 * Represents configuration for remote caching
 */
export type UserEventPayloadRemoteCaching = {
    enabled?: boolean | undefined;
};
export type PayloadBuildEntitlements = {
    enhancedBuilds?: boolean | undefined;
};
export declare const PayloadPurchaseType: {
    readonly Enhanced: "enhanced";
    readonly Turbo: "turbo";
};
export type PayloadPurchaseType = ClosedEnum<typeof PayloadPurchaseType>;
export type PayloadBuildMachine = {
    purchaseType?: PayloadPurchaseType | undefined;
    isDefaultBuildMachine?: boolean | undefined;
    cores?: number | undefined;
    memory?: number | undefined;
};
export type PayloadSecurity = {
    customRules?: number | undefined;
    ipBlocks?: number | undefined;
    ipBypass?: number | undefined;
    rateLimit?: number | undefined;
};
export type PayloadResourceConfig = {
    nodeType?: string | undefined;
    concurrentBuilds?: number | undefined;
    elasticConcurrencyEnabled?: boolean | undefined;
    buildEntitlements?: PayloadBuildEntitlements | undefined;
    awsAccountType?: string | undefined;
    awsAccountIds?: Array<string> | undefined;
    cfZoneName?: string | undefined;
    imageOptimizationType?: string | undefined;
    edgeConfigs?: number | undefined;
    edgeConfigSize?: number | undefined;
    edgeFunctionMaxSizeBytes?: number | undefined;
    edgeFunctionExecutionTimeoutMs?: number | undefined;
    serverlessFunctionMaxMemorySize?: number | undefined;
    kvDatabases?: number | undefined;
    postgresDatabases?: number | undefined;
    blobStores?: number | undefined;
    integrationStores?: number | undefined;
    cronJobs?: number | undefined;
    cronJobsPerProject?: number | undefined;
    microfrontendGroupsPerTeam?: number | undefined;
    microfrontendProjectsPerGroup?: number | undefined;
    flagsExplorerOverridesThreshold?: number | undefined;
    flagsExplorerUnlimitedOverrides?: boolean | undefined;
    customEnvironmentsPerProject?: number | undefined;
    buildMachine?: PayloadBuildMachine | undefined;
    security?: PayloadSecurity | undefined;
};
export type ResourceLimits = {
    max: number;
    duration: number;
};
export declare const PayloadViewPreference: {
    readonly Cards: "cards";
    readonly List: "list";
};
export type PayloadViewPreference = ClosedEnum<typeof PayloadViewPreference>;
export declare const PayloadFavoritesViewPreference: {
    readonly Open: "open";
    readonly Closed: "closed";
};
export type PayloadFavoritesViewPreference = ClosedEnum<typeof PayloadFavoritesViewPreference>;
export declare const PayloadRecentsViewPreference: {
    readonly Open: "open";
    readonly Closed: "closed";
};
export type PayloadRecentsViewPreference = ClosedEnum<typeof PayloadRecentsViewPreference>;
export type PayloadActiveDashboardViews = {
    scopeId: string;
    viewPreference?: PayloadViewPreference | null | undefined;
    favoritesViewPreference?: PayloadFavoritesViewPreference | null | undefined;
    recentsViewPreference?: PayloadRecentsViewPreference | null | undefined;
};
export type SecondaryEmails = {
    email: string;
    verified: boolean;
};
export type Rules = {
    email: string;
};
export type EmailNotifications = {
    rules?: {
        [k: string]: Rules;
    } | undefined;
};
export type PayloadReasons = {
    name: string;
    value: string;
};
export type SiftScores = {
    score: number;
    reasons: Array<PayloadReasons>;
};
export declare const UserEventPayload64Name: {
    readonly String: "string";
};
export type UserEventPayload64Name = ClosedEnum<typeof UserEventPayload64Name>;
export type SiftRoute = {
    name: UserEventPayload64Name;
};
export declare const PayloadReason: {
    readonly SubscriptionCanceled: "SUBSCRIPTION_CANCELED";
    readonly SubscriptionExpired: "SUBSCRIPTION_EXPIRED";
    readonly UnpaidInvoice: "UNPAID_INVOICE";
    readonly EnterpriseTrialEnded: "ENTERPRISE_TRIAL_ENDED";
    readonly FairUseLimitsExceeded: "FAIR_USE_LIMITS_EXCEEDED";
    readonly BlockedForPlatformAbuse: "BLOCKED_FOR_PLATFORM_ABUSE";
};
export type PayloadReason = ClosedEnum<typeof PayloadReason>;
export declare const PayloadBlockedDueToOverageType: {
    readonly AnalyticsUsage: "analyticsUsage";
    readonly Artifacts: "artifacts";
    readonly Bandwidth: "bandwidth";
    readonly BlobTotalAdvancedRequests: "blobTotalAdvancedRequests";
    readonly BlobTotalAvgSizeInBytes: "blobTotalAvgSizeInBytes";
    readonly BlobTotalGetResponseObjectSizeInBytes: "blobTotalGetResponseObjectSizeInBytes";
    readonly BlobTotalSimpleRequests: "blobTotalSimpleRequests";
    readonly ConnectDataTransfer: "connectDataTransfer";
    readonly DataCacheRead: "dataCacheRead";
    readonly DataCacheWrite: "dataCacheWrite";
    readonly EdgeConfigRead: "edgeConfigRead";
    readonly EdgeConfigWrite: "edgeConfigWrite";
    readonly EdgeFunctionExecutionUnits: "edgeFunctionExecutionUnits";
    readonly EdgeMiddlewareInvocations: "edgeMiddlewareInvocations";
    readonly EdgeRequestAdditionalCpuDuration: "edgeRequestAdditionalCpuDuration";
    readonly EdgeRequest: "edgeRequest";
    readonly ElasticConcurrencyBuildSlots: "elasticConcurrencyBuildSlots";
    readonly FastDataTransfer: "fastDataTransfer";
    readonly FastOriginTransfer: "fastOriginTransfer";
    readonly FluidCpuDuration: "fluidCpuDuration";
    readonly FluidDuration: "fluidDuration";
    readonly FunctionDuration: "functionDuration";
    readonly FunctionInvocation: "functionInvocation";
    readonly ImageOptimizationCacheRead: "imageOptimizationCacheRead";
    readonly ImageOptimizationCacheWrite: "imageOptimizationCacheWrite";
    readonly ImageOptimizationTransformation: "imageOptimizationTransformation";
    readonly LogDrainsVolume: "logDrainsVolume";
    readonly MonitoringMetric: "monitoringMetric";
    readonly BlobDataTransfer: "blobDataTransfer";
    readonly ObservabilityEvent: "observabilityEvent";
    readonly OnDemandConcurrencyMinutes: "onDemandConcurrencyMinutes";
    readonly RuntimeCacheRead: "runtimeCacheRead";
    readonly RuntimeCacheWrite: "runtimeCacheWrite";
    readonly ServerlessFunctionExecution: "serverlessFunctionExecution";
    readonly SourceImages: "sourceImages";
    readonly WafOwaspExcessBytes: "wafOwaspExcessBytes";
    readonly WafOwaspRequests: "wafOwaspRequests";
    readonly WafRateLimitRequest: "wafRateLimitRequest";
    readonly WebAnalyticsEvent: "webAnalyticsEvent";
};
export type PayloadBlockedDueToOverageType = ClosedEnum<typeof PayloadBlockedDueToOverageType>;
export type PayloadSoftBlock = {
    blockedAt: number;
    reason: PayloadReason;
    blockedDueToOverageType?: PayloadBlockedDueToOverageType | undefined;
};
export declare const UserEventPayload64Role: {
    readonly Owner: "OWNER";
    readonly Member: "MEMBER";
    readonly Developer: "DEVELOPER";
    readonly Security: "SECURITY";
    readonly Billing: "BILLING";
    readonly Viewer: "VIEWER";
    readonly ViewerForPlus: "VIEWER_FOR_PLUS";
    readonly Contributor: "CONTRIBUTOR";
};
export type UserEventPayload64Role = ClosedEnum<typeof UserEventPayload64Role>;
export declare const PayloadTeamRoles: {
    readonly Owner: "OWNER";
    readonly Member: "MEMBER";
    readonly Developer: "DEVELOPER";
    readonly Security: "SECURITY";
    readonly Billing: "BILLING";
    readonly Viewer: "VIEWER";
    readonly ViewerForPlus: "VIEWER_FOR_PLUS";
    readonly Contributor: "CONTRIBUTOR";
};
export type PayloadTeamRoles = ClosedEnum<typeof PayloadTeamRoles>;
export declare const PayloadTeamPermissions: {
    readonly IntegrationManager: "IntegrationManager";
    readonly CreateProject: "CreateProject";
    readonly FullProductionDeployment: "FullProductionDeployment";
    readonly UsageViewer: "UsageViewer";
    readonly EnvVariableManager: "EnvVariableManager";
    readonly EnvironmentManager: "EnvironmentManager";
    readonly V0Builder: "V0Builder";
    readonly V0Chatter: "V0Chatter";
    readonly V0Viewer: "V0Viewer";
};
export type PayloadTeamPermissions = ClosedEnum<typeof PayloadTeamPermissions>;
export declare const UserEventPayloadOrigin: {
    readonly Teams: "teams";
    readonly Saml: "saml";
    readonly Link: "link";
    readonly Github: "github";
    readonly Gitlab: "gitlab";
    readonly Bitbucket: "bitbucket";
    readonly Mail: "mail";
    readonly Import: "import";
    readonly Dsync: "dsync";
    readonly Feedback: "feedback";
    readonly OrganizationTeams: "organization-teams";
};
export type UserEventPayloadOrigin = ClosedEnum<typeof UserEventPayloadOrigin>;
export type UserEventPayloadGitUserId = string | number;
export type UserEventPayloadJoinedFrom = {
    origin: UserEventPayloadOrigin;
    commitId?: string | undefined;
    repoId?: string | undefined;
    repoPath?: string | undefined;
    gitUserId?: string | number | undefined;
    gitUserLogin?: string | undefined;
    ssoUserId?: string | undefined;
    ssoConnectedAt?: number | undefined;
    idpUserId?: string | undefined;
    dsyncUserId?: string | undefined;
    dsyncConnectedAt?: number | undefined;
};
export type Teams = {
    created: number;
    createdAt: number;
    teamId: string;
    role: UserEventPayload64Role;
    confirmed: boolean;
    confirmedAt: number;
    accessRequestedAt?: number | undefined;
    teamRoles?: Array<PayloadTeamRoles> | undefined;
    teamPermissions?: Array<PayloadTeamPermissions> | undefined;
    joinedFrom?: UserEventPayloadJoinedFrom | undefined;
};
export declare const UserEventPayload64Type: {
    readonly User: "user";
};
export type UserEventPayload64Type = ClosedEnum<typeof UserEventPayload64Type>;
/**
 * Contains the timestamps when a user was notified about their usage
 */
export type UsageAlerts = {
    warningAt?: number | null | undefined;
    blockingAt?: number | null | undefined;
};
export type AnalyticsUsage = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type Artifacts = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type Bandwidth = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type BlobTotalAdvancedRequests = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type BlobTotalAvgSizeInBytes = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type BlobTotalGetResponseObjectSizeInBytes = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type BlobTotalSimpleRequests = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type ConnectDataTransfer = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type DataCacheRead = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type DataCacheWrite = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type EdgeConfigRead = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type EdgeConfigWrite = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type EdgeFunctionExecutionUnits = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type EdgeMiddlewareInvocations = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type EdgeRequestAdditionalCpuDuration = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type EdgeRequest = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type ElasticConcurrencyBuildSlots = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type FastDataTransfer = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type FastOriginTransfer = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type FluidCpuDuration = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type FluidDuration = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type FunctionDuration = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type FunctionInvocation = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type ImageOptimizationCacheRead = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type ImageOptimizationCacheWrite = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type ImageOptimizationTransformation = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type LogDrainsVolume = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type MonitoringMetric = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type BlobDataTransfer = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type ObservabilityEvent = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type OnDemandConcurrencyMinutes = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type RuntimeCacheRead = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type RuntimeCacheWrite = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type ServerlessFunctionExecution = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type SourceImages = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type WafOwaspExcessBytes = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type WafOwaspRequests = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type WafRateLimitRequest = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type WebAnalyticsEvent = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
export type OverageUsageAlerts = {
    analyticsUsage?: AnalyticsUsage | undefined;
    artifacts?: Artifacts | undefined;
    bandwidth?: Bandwidth | undefined;
    blobTotalAdvancedRequests?: BlobTotalAdvancedRequests | undefined;
    blobTotalAvgSizeInBytes?: BlobTotalAvgSizeInBytes | undefined;
    blobTotalGetResponseObjectSizeInBytes?: BlobTotalGetResponseObjectSizeInBytes | undefined;
    blobTotalSimpleRequests?: BlobTotalSimpleRequests | undefined;
    connectDataTransfer?: ConnectDataTransfer | undefined;
    dataCacheRead?: DataCacheRead | undefined;
    dataCacheWrite?: DataCacheWrite | undefined;
    edgeConfigRead?: EdgeConfigRead | undefined;
    edgeConfigWrite?: EdgeConfigWrite | undefined;
    edgeFunctionExecutionUnits?: EdgeFunctionExecutionUnits | undefined;
    edgeMiddlewareInvocations?: EdgeMiddlewareInvocations | undefined;
    edgeRequestAdditionalCpuDuration?: EdgeRequestAdditionalCpuDuration | undefined;
    edgeRequest?: EdgeRequest | undefined;
    elasticConcurrencyBuildSlots?: ElasticConcurrencyBuildSlots | undefined;
    fastDataTransfer?: FastDataTransfer | undefined;
    fastOriginTransfer?: FastOriginTransfer | undefined;
    fluidCpuDuration?: FluidCpuDuration | undefined;
    fluidDuration?: FluidDuration | undefined;
    functionDuration?: FunctionDuration | undefined;
    functionInvocation?: FunctionInvocation | undefined;
    imageOptimizationCacheRead?: ImageOptimizationCacheRead | undefined;
    imageOptimizationCacheWrite?: ImageOptimizationCacheWrite | undefined;
    imageOptimizationTransformation?: ImageOptimizationTransformation | undefined;
    logDrainsVolume?: LogDrainsVolume | undefined;
    monitoringMetric?: MonitoringMetric | undefined;
    blobDataTransfer?: BlobDataTransfer | undefined;
    observabilityEvent?: ObservabilityEvent | undefined;
    onDemandConcurrencyMinutes?: OnDemandConcurrencyMinutes | undefined;
    runtimeCacheRead?: RuntimeCacheRead | undefined;
    runtimeCacheWrite?: RuntimeCacheWrite | undefined;
    serverlessFunctionExecution?: ServerlessFunctionExecution | undefined;
    sourceImages?: SourceImages | undefined;
    wafOwaspExcessBytes?: WafOwaspExcessBytes | undefined;
    wafOwaspRequests?: WafOwaspRequests | undefined;
    wafRateLimitRequest?: WafRateLimitRequest | undefined;
    webAnalyticsEvent?: WebAnalyticsEvent | undefined;
};
/**
 * Contains the timestamps for usage summary emails.
 */
export type OverageMetadata = {
    /**
     * Tracks if the first time on-demand overage email has been sent.
     */
    firstTimeOnDemandNotificationSentAt?: number | undefined;
    /**
     * Tracks the last time we sent a daily summary email.
     */
    dailyOverageSummaryEmailSentAt?: number | undefined;
    /**
     * Tracks the last time we sent a weekly summary email.
     */
    weeklyOverageSummaryEmailSentAt?: number | undefined;
    /**
     * Tracks when the overage summary email will stop auto-sending. We currently lock the user into email for a month after the last on-demand usage.
     */
    overageSummaryExpiresAt?: number | undefined;
    /**
     * Tracks the last time we sent a increased on-demand email.
     */
    increasedOnDemandEmailSentAt?: number | undefined;
    /**
     * Tracks the last time we attempted to send an increased on-demand email. This check is to limit the number of attempts per day.
     */
    increasedOnDemandEmailAttemptedAt?: number | undefined;
};
/**
 * Whether the Vercel Toolbar is enabled for preview deployments.
 */
export declare const PayloadEnablePreviewFeedback: {
    readonly Default: "default";
    readonly On: "on";
    readonly Off: "off";
    readonly OnForce: "on-force";
    readonly OffForce: "off-force";
    readonly DefaultForce: "default-force";
};
/**
 * Whether the Vercel Toolbar is enabled for preview deployments.
 */
export type PayloadEnablePreviewFeedback = ClosedEnum<typeof PayloadEnablePreviewFeedback>;
export declare const BlockReason: {
    readonly AdminOverride: "admin_override";
    readonly LimitsExceeded: "limits_exceeded";
};
export type BlockReason = ClosedEnum<typeof BlockReason>;
export type PayloadWebAnalytics = {
    updatedAt: number;
    blockedFrom?: number | undefined;
    blockedUntil?: number | undefined;
    blockReason: BlockReason;
    graceEmailSentAt?: number | undefined;
};
export declare const PayloadBlockReason: {
    readonly AdminOverride: "admin_override";
    readonly LimitsExceeded: "limits_exceeded";
};
export type PayloadBlockReason = ClosedEnum<typeof PayloadBlockReason>;
export declare const BlockType: {
    readonly Soft: "soft";
    readonly Hard: "hard";
};
export type BlockType = ClosedEnum<typeof BlockType>;
/**
 * A soft block indicates a temporary pause in data collection (ex limit exceeded for the current cycle) A hard block indicates a stoppage in data collection that requires manual intervention (ex upgrading a pro trial)
 */
export type Monitoring = {
    updatedAt: number;
    blockedFrom?: number | undefined;
    blockedUntil?: number | undefined;
    blockReason: PayloadBlockReason;
    blockType: BlockType;
};
export declare const UserEventPayloadBlockReason: {
    readonly AdminOverride: "admin_override";
    readonly LimitsExceeded: "limits_exceeded";
};
export type UserEventPayloadBlockReason = ClosedEnum<typeof UserEventPayloadBlockReason>;
export declare const PayloadBlockType: {
    readonly Soft: "soft";
    readonly Hard: "hard";
};
export type PayloadBlockType = ClosedEnum<typeof PayloadBlockType>;
export type ObservabilityPlus = {
    updatedAt: number;
    blockedFrom?: number | undefined;
    blockedUntil?: number | undefined;
    blockReason: UserEventPayloadBlockReason;
    blockType: PayloadBlockType;
};
export declare const UserEventPayload64BlockReason: {
    readonly AdminOverride: "admin_override";
    readonly LimitsExceeded: "limits_exceeded";
};
export type UserEventPayload64BlockReason = ClosedEnum<typeof UserEventPayload64BlockReason>;
export type UserEventPayloadDataCache = {
    updatedAt: number;
    blockedFrom?: number | undefined;
    blockedUntil?: number | undefined;
    blockReason: UserEventPayload64BlockReason;
};
export declare const UserEventPayload64NewOwnerBlockReason: {
    readonly AdminOverride: "admin_override";
    readonly LimitsExceeded: "limits_exceeded";
};
export type UserEventPayload64NewOwnerBlockReason = ClosedEnum<typeof UserEventPayload64NewOwnerBlockReason>;
export type PayloadImageOptimizationTransformation = {
    updatedAt: number;
    blockedFrom?: number | undefined;
    blockedUntil?: number | undefined;
    blockReason: UserEventPayload64NewOwnerBlockReason;
};
export declare const UserEventPayload64NewOwnerFeatureBlocksBlockReason: {
    readonly AdminOverride: "admin_override";
    readonly LimitsExceeded: "limits_exceeded";
};
export type UserEventPayload64NewOwnerFeatureBlocksBlockReason = ClosedEnum<typeof UserEventPayload64NewOwnerFeatureBlocksBlockReason>;
export type PayloadSourceImages = {
    updatedAt: number;
    blockedFrom?: number | undefined;
    blockedUntil?: number | undefined;
    blockReason: UserEventPayload64NewOwnerFeatureBlocksBlockReason;
};
export declare const UserEventPayload64NewOwnerFeatureBlocksBlobBlockReason: {
    readonly AdminOverride: "admin_override";
    readonly LimitsExceeded: "limits_exceeded";
};
export type UserEventPayload64NewOwnerFeatureBlocksBlobBlockReason = ClosedEnum<typeof UserEventPayload64NewOwnerFeatureBlocksBlobBlockReason>;
export declare const OverageReason: {
    readonly AnalyticsUsage: "analyticsUsage";
    readonly Artifacts: "artifacts";
    readonly Bandwidth: "bandwidth";
    readonly BlobTotalAdvancedRequests: "blobTotalAdvancedRequests";
    readonly BlobTotalAvgSizeInBytes: "blobTotalAvgSizeInBytes";
    readonly BlobTotalGetResponseObjectSizeInBytes: "blobTotalGetResponseObjectSizeInBytes";
    readonly BlobTotalSimpleRequests: "blobTotalSimpleRequests";
    readonly ConnectDataTransfer: "connectDataTransfer";
    readonly DataCacheRead: "dataCacheRead";
    readonly DataCacheWrite: "dataCacheWrite";
    readonly EdgeConfigRead: "edgeConfigRead";
    readonly EdgeConfigWrite: "edgeConfigWrite";
    readonly EdgeFunctionExecutionUnits: "edgeFunctionExecutionUnits";
    readonly EdgeMiddlewareInvocations: "edgeMiddlewareInvocations";
    readonly EdgeRequestAdditionalCpuDuration: "edgeRequestAdditionalCpuDuration";
    readonly EdgeRequest: "edgeRequest";
    readonly ElasticConcurrencyBuildSlots: "elasticConcurrencyBuildSlots";
    readonly FastDataTransfer: "fastDataTransfer";
    readonly FastOriginTransfer: "fastOriginTransfer";
    readonly FluidCpuDuration: "fluidCpuDuration";
    readonly FluidDuration: "fluidDuration";
    readonly FunctionDuration: "functionDuration";
    readonly FunctionInvocation: "functionInvocation";
    readonly ImageOptimizationCacheRead: "imageOptimizationCacheRead";
    readonly ImageOptimizationCacheWrite: "imageOptimizationCacheWrite";
    readonly ImageOptimizationTransformation: "imageOptimizationTransformation";
    readonly LogDrainsVolume: "logDrainsVolume";
    readonly MonitoringMetric: "monitoringMetric";
    readonly BlobDataTransfer: "blobDataTransfer";
    readonly ObservabilityEvent: "observabilityEvent";
    readonly OnDemandConcurrencyMinutes: "onDemandConcurrencyMinutes";
    readonly RuntimeCacheRead: "runtimeCacheRead";
    readonly RuntimeCacheWrite: "runtimeCacheWrite";
    readonly ServerlessFunctionExecution: "serverlessFunctionExecution";
    readonly SourceImages: "sourceImages";
    readonly WafOwaspExcessBytes: "wafOwaspExcessBytes";
    readonly WafOwaspRequests: "wafOwaspRequests";
    readonly WafRateLimitRequest: "wafRateLimitRequest";
    readonly WebAnalyticsEvent: "webAnalyticsEvent";
};
export type OverageReason = ClosedEnum<typeof OverageReason>;
export type BlobT = {
    updatedAt: number;
    blockedFrom?: number | undefined;
    blockedUntil?: number | undefined;
    blockReason: UserEventPayload64NewOwnerFeatureBlocksBlobBlockReason;
    overageReason: OverageReason;
};
export declare const UserEventPayload64NewOwnerFeatureBlocksPostgresBlockReason: {
    readonly AdminOverride: "admin_override";
    readonly LimitsExceeded: "limits_exceeded";
};
export type UserEventPayload64NewOwnerFeatureBlocksPostgresBlockReason = ClosedEnum<typeof UserEventPayload64NewOwnerFeatureBlocksPostgresBlockReason>;
export declare const PayloadOverageReason: {
    readonly AnalyticsUsage: "analyticsUsage";
    readonly Artifacts: "artifacts";
    readonly Bandwidth: "bandwidth";
    readonly BlobTotalAdvancedRequests: "blobTotalAdvancedRequests";
    readonly BlobTotalAvgSizeInBytes: "blobTotalAvgSizeInBytes";
    readonly BlobTotalGetResponseObjectSizeInBytes: "blobTotalGetResponseObjectSizeInBytes";
    readonly BlobTotalSimpleRequests: "blobTotalSimpleRequests";
    readonly ConnectDataTransfer: "connectDataTransfer";
    readonly DataCacheRead: "dataCacheRead";
    readonly DataCacheWrite: "dataCacheWrite";
    readonly EdgeConfigRead: "edgeConfigRead";
    readonly EdgeConfigWrite: "edgeConfigWrite";
    readonly EdgeFunctionExecutionUnits: "edgeFunctionExecutionUnits";
    readonly EdgeMiddlewareInvocations: "edgeMiddlewareInvocations";
    readonly EdgeRequestAdditionalCpuDuration: "edgeRequestAdditionalCpuDuration";
    readonly EdgeRequest: "edgeRequest";
    readonly ElasticConcurrencyBuildSlots: "elasticConcurrencyBuildSlots";
    readonly FastDataTransfer: "fastDataTransfer";
    readonly FastOriginTransfer: "fastOriginTransfer";
    readonly FluidCpuDuration: "fluidCpuDuration";
    readonly FluidDuration: "fluidDuration";
    readonly FunctionDuration: "functionDuration";
    readonly FunctionInvocation: "functionInvocation";
    readonly ImageOptimizationCacheRead: "imageOptimizationCacheRead";
    readonly ImageOptimizationCacheWrite: "imageOptimizationCacheWrite";
    readonly ImageOptimizationTransformation: "imageOptimizationTransformation";
    readonly LogDrainsVolume: "logDrainsVolume";
    readonly MonitoringMetric: "monitoringMetric";
    readonly BlobDataTransfer: "blobDataTransfer";
    readonly ObservabilityEvent: "observabilityEvent";
    readonly OnDemandConcurrencyMinutes: "onDemandConcurrencyMinutes";
    readonly RuntimeCacheRead: "runtimeCacheRead";
    readonly RuntimeCacheWrite: "runtimeCacheWrite";
    readonly ServerlessFunctionExecution: "serverlessFunctionExecution";
    readonly SourceImages: "sourceImages";
    readonly WafOwaspExcessBytes: "wafOwaspExcessBytes";
    readonly WafOwaspRequests: "wafOwaspRequests";
    readonly WafRateLimitRequest: "wafRateLimitRequest";
    readonly WebAnalyticsEvent: "webAnalyticsEvent";
};
export type PayloadOverageReason = ClosedEnum<typeof PayloadOverageReason>;
export type Postgres = {
    updatedAt: number;
    blockedFrom?: number | undefined;
    blockedUntil?: number | undefined;
    blockReason: UserEventPayload64NewOwnerFeatureBlocksPostgresBlockReason;
    overageReason: PayloadOverageReason;
};
export declare const UserEventPayload64NewOwnerFeatureBlocksRedisBlockReason: {
    readonly AdminOverride: "admin_override";
    readonly LimitsExceeded: "limits_exceeded";
};
export type UserEventPayload64NewOwnerFeatureBlocksRedisBlockReason = ClosedEnum<typeof UserEventPayload64NewOwnerFeatureBlocksRedisBlockReason>;
export declare const UserEventPayloadOverageReason: {
    readonly AnalyticsUsage: "analyticsUsage";
    readonly Artifacts: "artifacts";
    readonly Bandwidth: "bandwidth";
    readonly BlobTotalAdvancedRequests: "blobTotalAdvancedRequests";
    readonly BlobTotalAvgSizeInBytes: "blobTotalAvgSizeInBytes";
    readonly BlobTotalGetResponseObjectSizeInBytes: "blobTotalGetResponseObjectSizeInBytes";
    readonly BlobTotalSimpleRequests: "blobTotalSimpleRequests";
    readonly ConnectDataTransfer: "connectDataTransfer";
    readonly DataCacheRead: "dataCacheRead";
    readonly DataCacheWrite: "dataCacheWrite";
    readonly EdgeConfigRead: "edgeConfigRead";
    readonly EdgeConfigWrite: "edgeConfigWrite";
    readonly EdgeFunctionExecutionUnits: "edgeFunctionExecutionUnits";
    readonly EdgeMiddlewareInvocations: "edgeMiddlewareInvocations";
    readonly EdgeRequestAdditionalCpuDuration: "edgeRequestAdditionalCpuDuration";
    readonly EdgeRequest: "edgeRequest";
    readonly ElasticConcurrencyBuildSlots: "elasticConcurrencyBuildSlots";
    readonly FastDataTransfer: "fastDataTransfer";
    readonly FastOriginTransfer: "fastOriginTransfer";
    readonly FluidCpuDuration: "fluidCpuDuration";
    readonly FluidDuration: "fluidDuration";
    readonly FunctionDuration: "functionDuration";
    readonly FunctionInvocation: "functionInvocation";
    readonly ImageOptimizationCacheRead: "imageOptimizationCacheRead";
    readonly ImageOptimizationCacheWrite: "imageOptimizationCacheWrite";
    readonly ImageOptimizationTransformation: "imageOptimizationTransformation";
    readonly LogDrainsVolume: "logDrainsVolume";
    readonly MonitoringMetric: "monitoringMetric";
    readonly BlobDataTransfer: "blobDataTransfer";
    readonly ObservabilityEvent: "observabilityEvent";
    readonly OnDemandConcurrencyMinutes: "onDemandConcurrencyMinutes";
    readonly RuntimeCacheRead: "runtimeCacheRead";
    readonly RuntimeCacheWrite: "runtimeCacheWrite";
    readonly ServerlessFunctionExecution: "serverlessFunctionExecution";
    readonly SourceImages: "sourceImages";
    readonly WafOwaspExcessBytes: "wafOwaspExcessBytes";
    readonly WafOwaspRequests: "wafOwaspRequests";
    readonly WafRateLimitRequest: "wafRateLimitRequest";
    readonly WebAnalyticsEvent: "webAnalyticsEvent";
};
export type UserEventPayloadOverageReason = ClosedEnum<typeof UserEventPayloadOverageReason>;
export type Redis = {
    updatedAt: number;
    blockedFrom?: number | undefined;
    blockedUntil?: number | undefined;
    blockReason: UserEventPayload64NewOwnerFeatureBlocksRedisBlockReason;
    overageReason: UserEventPayloadOverageReason;
};
/**
 * Information about which features are blocked for a user. Blocks can be either soft (the user can still access the feature, but with a warning, e.g. prompting an upgrade) or hard (the user cannot access the feature at all).
 */
export type PayloadFeatureBlocks = {
    webAnalytics?: PayloadWebAnalytics | undefined;
    /**
     * A soft block indicates a temporary pause in data collection (ex limit exceeded for the current cycle) A hard block indicates a stoppage in data collection that requires manual intervention (ex upgrading a pro trial)
     */
    monitoring?: Monitoring | undefined;
    observabilityPlus?: ObservabilityPlus | undefined;
    dataCache?: UserEventPayloadDataCache | undefined;
    imageOptimizationTransformation?: PayloadImageOptimizationTransformation | undefined;
    sourceImages?: PayloadSourceImages | undefined;
    blob?: BlobT | undefined;
    postgres?: Postgres | undefined;
    redis?: Redis | undefined;
};
export declare const Version: {
    readonly Northstar: "northstar";
};
export type Version = ClosedEnum<typeof Version>;
/**
 * An archive of information about the Northstar migration, derived from the old (deprecated) property, `northstarMigrationEvents`.
 */
export type NorthstarMigration = {
    /**
     * The ID of the team we created for this user.
     */
    teamId: string;
    /**
     * The number of projects migrated for this user.
     */
    projects: number;
    /**
     * The number of stores migrated for this user.
     */
    stores: number;
    /**
     * The number of integration configurations migrated for this user.
     */
    integrationConfigurations: number;
    /**
     * The number of integration clients migrated for this user.
     */
    integrationClients: number;
    /**
     * The migration start time timestamp for this user.
     */
    startTime: number;
    /**
     * The migration end time timestamp for this user.
     */
    endTime: number;
};
export type Totp = {
    secret: string;
    createdAt: number;
};
/**
 * MFA configuration. When enabled, the user will be required to provide a second factor of authentication when logging in.
 */
export type MfaConfiguration = {
    enabled: boolean;
    enabledAt?: number | undefined;
    recoveryCodes: Array<string>;
    totp?: Totp | undefined;
};
export type NewOwner = {
    abuse?: Abuse | undefined;
    acceptanceState?: string | undefined;
    acceptedAt?: number | undefined;
    avatar?: string | undefined;
    billing: PayloadBilling;
    blocked: number | null;
    blockReason?: string | undefined;
    created?: number | undefined;
    createdAt: number;
    credentials?: Array<Credentials2 | Credentials1> | undefined;
    customerId?: string | null | undefined;
    orbCustomerId?: string | null | undefined;
    dataCache?: PayloadDataCache | undefined;
    deletedAt?: number | null | undefined;
    deploymentSecret: string;
    dismissedTeams?: Array<string> | undefined;
    dismissedToasts?: Array<PayloadDismissedToasts> | undefined;
    favoriteProjectsAndSpaces?: Array<PayloadFavoriteProjectsAndSpaces> | undefined;
    email: string;
    id: string;
    importFlowGitNamespace?: string | number | null | undefined;
    importFlowGitNamespaceId?: string | number | null | undefined;
    importFlowGitProvider?: PayloadImportFlowGitProvider | null | undefined;
    preferredScopesAndGitNamespaces?: Array<PayloadPreferredScopesAndGitNamespaces> | undefined;
    isDomainReseller?: boolean | undefined;
    isZeitPub?: boolean | undefined;
    maxActiveSlots?: number | undefined;
    name?: string | undefined;
    phoneNumber?: string | undefined;
    platformVersion: number | null;
    preventAutoBlocking?: number | boolean | undefined;
    /**
     * Overrides our DEFAULT project domains limit per account or per project.
     */
    projectDomainsLimit?: number | undefined;
    /**
     * Represents configuration for remote caching
     */
    remoteCaching?: UserEventPayloadRemoteCaching | undefined;
    removedAliasesAt?: number | undefined;
    removedBillingSubscriptionAt?: number | undefined;
    removedConfigurationsAt?: number | undefined;
    removedDeploymentsAt?: number | undefined;
    removedDomiansAt?: number | undefined;
    removedEventsAt?: number | undefined;
    removedProjectsAt?: number | undefined;
    removedSecretsAt?: number | undefined;
    removedSharedEnvVarsAt?: number | undefined;
    removedEdgeConfigsAt?: number | undefined;
    resourceConfig?: PayloadResourceConfig | undefined;
    /**
     * User | Team resource limits
     */
    resourceLimits?: {
        [k: string]: ResourceLimits;
    } | undefined;
    activeDashboardViews?: Array<PayloadActiveDashboardViews> | undefined;
    secondaryEmails?: Array<SecondaryEmails> | undefined;
    emailNotifications?: EmailNotifications | undefined;
    siftScore?: number | undefined;
    siftScores?: {
        [k: string]: SiftScores;
    } | undefined;
    siftRoute?: SiftRoute | undefined;
    sfdcId?: string | undefined;
    softBlock?: PayloadSoftBlock | null | undefined;
    stagingPrefix: string;
    sysToken: string;
    /**
     * A helper that allows to describe a relationship attribute. It receives the shape of a relationship plus the foreignKey name to make it mandatory in the resulting type.
     */
    teams?: Array<Teams> | undefined;
    /**
     * Introduced 2022-04-12 An array of teamIds (for trial teams created after 2022-04-01), created by the user in question. Used in determining whether the team has a trial available in utils/api-teams/user-has-trial-available.ts.
     */
    trialTeamIds?: Array<string> | undefined;
    /**
     * Introduced 2022-04-19 Number of maximum trials to allocate to a user. When undefined, defaults to MAX_TRIALS in utils/api-teams/user-has-trial-available.ts. This is set to trialTeamIds + 1 by services/api-backoffice/src/handlers/add-additional-trial.ts.
     */
    maxTrials?: number | undefined;
    /**
     * Deprecated on 2022-04-12 in favor of trialTeamIds and using utils/api-teams/user-has-trial-available.ts.
     */
    trialTeamId?: string | undefined;
    type: UserEventPayload64Type;
    /**
     * Contains the timestamps when a user was notified about their usage
     */
    usageAlerts?: UsageAlerts | null | undefined;
    overageUsageAlerts?: OverageUsageAlerts | undefined;
    /**
     * Contains the timestamps for usage summary emails.
     */
    overageMetadata?: OverageMetadata | undefined;
    username: string;
    updatedAt: number;
    /**
     * Whether the Vercel Toolbar is enabled for preview deployments.
     */
    enablePreviewFeedback?: PayloadEnablePreviewFeedback | undefined;
    /**
     * Information about which features are blocked for a user. Blocks can be either soft (the user can still access the feature, but with a warning, e.g. prompting an upgrade) or hard (the user cannot access the feature at all).
     */
    featureBlocks?: PayloadFeatureBlocks | undefined;
    defaultTeamId?: string | undefined;
    version: Version;
    /**
     * An archive of information about the Northstar migration, derived from the old (deprecated) property, `northstarMigrationEvents`.
     */
    northstarMigration?: NorthstarMigration | undefined;
    /**
     * The salesforce opportunity ID that this user is linked to. This is used to automatically associate a team of the user's choosing with the opportunity.
     */
    opportunityId?: string | undefined;
    /**
     * MFA configuration. When enabled, the user will be required to provide a second factor of authentication when logging in.
     */
    mfaConfiguration?: MfaConfiguration | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type SixtyFour = {
    userId: string;
    integrationId: string;
    configurationId: string;
    integrationSlug: string;
    integrationName?: string | undefined;
    newOwner: NewOwner | null;
};
/**
 * The payload of the event, if requested.
 */
export type SixtyThree = {
    integrationId: string;
    integrationSlug: string;
    integrationName: string;
};
/**
 * The payload of the event, if requested.
 */
export type SixtyTwo = {
    projectId: string;
    prevAttackModeEnabled?: boolean | undefined;
    prevAttackModeActiveUntil?: number | null | undefined;
    attackModeEnabled: boolean;
    attackModeActiveUntil?: number | null | undefined;
};
export declare const UserEventPayload61Action: {
    readonly Log: "log";
    readonly Challenge: "challenge";
    readonly Deny: "deny";
};
export type UserEventPayload61Action = ClosedEnum<typeof UserEventPayload61Action>;
export type RuleGroups = {
    active: boolean;
    action?: UserEventPayload61Action | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type SixtyOne = {
    projectId: string;
    rulesetName: string;
    ruleGroups: {
        [k: string]: RuleGroups;
    };
};
export declare const UserEventPayloadAction: {
    readonly Log: "log";
    readonly Challenge: "challenge";
    readonly Deny: "deny";
};
export type UserEventPayloadAction = ClosedEnum<typeof UserEventPayloadAction>;
/**
 * The payload of the event, if requested.
 */
export type Sixty = {
    projectId: string;
    rulesetName: string;
    active: boolean;
    action?: UserEventPayloadAction | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type FiftyNine = {
    projectId: string;
    scope: string;
    source: string;
};
export type ConfigChanges = {};
/**
 * The payload of the event, if requested.
 */
export type FiftyEight = {
    projectId: string;
    restore: boolean;
    configVersion: number;
    configChangeCount: number;
    configChanges: Array<ConfigChanges>;
};
/**
 * The type of this cosmos doc instance, if blank, assume secret.
 */
export declare const UserEventPayload57OldEnvVarType: {
    readonly System: "system";
    readonly Encrypted: "encrypted";
    readonly Plain: "plain";
    readonly Sensitive: "sensitive";
};
/**
 * The type of this cosmos doc instance, if blank, assume secret.
 */
export type UserEventPayload57OldEnvVarType = ClosedEnum<typeof UserEventPayload57OldEnvVarType>;
/**
 * environments this env variable targets
 */
export declare const UserEventPayloadTarget: {
    readonly Production: "production";
    readonly Preview: "preview";
    readonly Development: "development";
};
/**
 * environments this env variable targets
 */
export type UserEventPayloadTarget = ClosedEnum<typeof UserEventPayloadTarget>;
export type OldEnvVar = {
    /**
     * The date when the Shared Env Var was created.
     */
    created?: Date | undefined;
    /**
     * The name of the Shared Env Var.
     */
    key?: string | undefined;
    /**
     * The unique identifier of the owner (team) the Shared Env Var was created for.
     */
    ownerId?: string | null | undefined;
    /**
     * The unique identifier of the Shared Env Var.
     */
    id?: string | undefined;
    /**
     * The unique identifier of the user who created the Shared Env Var.
     */
    createdBy?: string | null | undefined;
    /**
     * The unique identifier of the user who deleted the Shared Env Var.
     */
    deletedBy?: string | null | undefined;
    /**
     * The unique identifier of the user who last updated the Shared Env Var.
     */
    updatedBy?: string | null | undefined;
    /**
     * Timestamp for when the Shared Env Var was created.
     */
    createdAt?: number | undefined;
    /**
     * Timestamp for when the Shared Env Var was (soft) deleted.
     */
    deletedAt?: number | undefined;
    /**
     * Timestamp for when the Shared Env Var was last updated.
     */
    updatedAt?: number | undefined;
    /**
     * The value of the Shared Env Var.
     */
    value?: string | undefined;
    /**
     * The unique identifiers of the projects which the Shared Env Var is linked to.
     */
    projectId?: Array<string> | undefined;
    /**
     * The type of this cosmos doc instance, if blank, assume secret.
     */
    type?: UserEventPayload57OldEnvVarType | undefined;
    /**
     * environments this env variable targets
     */
    target?: Array<UserEventPayloadTarget> | undefined;
    /**
     * whether or not this env varible applies to custom environments
     */
    applyToAllCustomEnvironments?: boolean | undefined;
    /**
     * whether or not this env variable is decrypted
     */
    decrypted?: boolean | undefined;
    /**
     * A user provided comment that describes what this Shared Env Var is for.
     */
    comment?: string | undefined;
    /**
     * The last editor full name or username.
     */
    lastEditedByDisplayName?: string | undefined;
};
/**
 * The type of this cosmos doc instance, if blank, assume secret.
 */
export declare const UserEventPayload57Type: {
    readonly System: "system";
    readonly Encrypted: "encrypted";
    readonly Plain: "plain";
    readonly Sensitive: "sensitive";
};
/**
 * The type of this cosmos doc instance, if blank, assume secret.
 */
export type UserEventPayload57Type = ClosedEnum<typeof UserEventPayload57Type>;
/**
 * environments this env variable targets
 */
export declare const UserEventPayload57Target: {
    readonly Production: "production";
    readonly Preview: "preview";
    readonly Development: "development";
};
/**
 * environments this env variable targets
 */
export type UserEventPayload57Target = ClosedEnum<typeof UserEventPayload57Target>;
export type NewEnvVar = {
    /**
     * The date when the Shared Env Var was created.
     */
    created?: Date | undefined;
    /**
     * The name of the Shared Env Var.
     */
    key?: string | undefined;
    /**
     * The unique identifier of the owner (team) the Shared Env Var was created for.
     */
    ownerId?: string | null | undefined;
    /**
     * The unique identifier of the Shared Env Var.
     */
    id?: string | undefined;
    /**
     * The unique identifier of the user who created the Shared Env Var.
     */
    createdBy?: string | null | undefined;
    /**
     * The unique identifier of the user who deleted the Shared Env Var.
     */
    deletedBy?: string | null | undefined;
    /**
     * The unique identifier of the user who last updated the Shared Env Var.
     */
    updatedBy?: string | null | undefined;
    /**
     * Timestamp for when the Shared Env Var was created.
     */
    createdAt?: number | undefined;
    /**
     * Timestamp for when the Shared Env Var was (soft) deleted.
     */
    deletedAt?: number | undefined;
    /**
     * Timestamp for when the Shared Env Var was last updated.
     */
    updatedAt?: number | undefined;
    /**
     * The value of the Shared Env Var.
     */
    value?: string | undefined;
    /**
     * The unique identifiers of the projects which the Shared Env Var is linked to.
     */
    projectId?: Array<string> | undefined;
    /**
     * The type of this cosmos doc instance, if blank, assume secret.
     */
    type?: UserEventPayload57Type | undefined;
    /**
     * environments this env variable targets
     */
    target?: Array<UserEventPayload57Target> | undefined;
    /**
     * whether or not this env varible applies to custom environments
     */
    applyToAllCustomEnvironments?: boolean | undefined;
    /**
     * whether or not this env variable is decrypted
     */
    decrypted?: boolean | undefined;
    /**
     * A user provided comment that describes what this Shared Env Var is for.
     */
    comment?: string | undefined;
    /**
     * The last editor full name or username.
     */
    lastEditedByDisplayName?: string | undefined;
};
export declare const OldTarget: {
    readonly Production: "production";
    readonly Preview: "preview";
    readonly Development: "development";
};
export type OldTarget = ClosedEnum<typeof OldTarget>;
export declare const NewTarget: {
    readonly Production: "production";
    readonly Preview: "preview";
    readonly Development: "development";
};
export type NewTarget = ClosedEnum<typeof NewTarget>;
export type OldProjects = {
    projectName?: string | undefined;
    projectId: string;
};
export type NewProjects = {
    projectName?: string | undefined;
    projectId: string;
};
export type UpdateDiff = {
    id: string;
    key?: string | undefined;
    newKey?: string | undefined;
    oldTarget?: Array<OldTarget> | undefined;
    newTarget?: Array<NewTarget> | undefined;
    oldType?: string | undefined;
    newType?: string | undefined;
    oldProjects?: Array<OldProjects> | undefined;
    newProjects?: Array<NewProjects> | undefined;
    changedValue: boolean;
};
/**
 * The payload of the event, if requested.
 */
export type FiftySeven = {
    oldEnvVar?: OldEnvVar | undefined;
    newEnvVar?: NewEnvVar | undefined;
    updateDiff?: UpdateDiff | undefined;
};
/**
 * The type of this cosmos doc instance, if blank, assume secret.
 */
export declare const PayloadType: {
    readonly System: "system";
    readonly Encrypted: "encrypted";
    readonly Plain: "plain";
    readonly Sensitive: "sensitive";
};
/**
 * The type of this cosmos doc instance, if blank, assume secret.
 */
export type PayloadType = ClosedEnum<typeof PayloadType>;
/**
 * environments this env variable targets
 */
export declare const PayloadTarget: {
    readonly Production: "production";
    readonly Preview: "preview";
    readonly Development: "development";
};
/**
 * environments this env variable targets
 */
export type PayloadTarget = ClosedEnum<typeof PayloadTarget>;
/**
 * The payload of the event, if requested.
 */
export type FiftySix = {
    /**
     * The date when the Shared Env Var was created.
     */
    created?: Date | undefined;
    /**
     * The name of the Shared Env Var.
     */
    key?: string | undefined;
    /**
     * The unique identifier of the owner (team) the Shared Env Var was created for.
     */
    ownerId?: string | null | undefined;
    /**
     * The unique identifier of the Shared Env Var.
     */
    id?: string | undefined;
    /**
     * The unique identifier of the user who created the Shared Env Var.
     */
    createdBy?: string | null | undefined;
    /**
     * The unique identifier of the user who deleted the Shared Env Var.
     */
    deletedBy?: string | null | undefined;
    /**
     * The unique identifier of the user who last updated the Shared Env Var.
     */
    updatedBy?: string | null | undefined;
    /**
     * Timestamp for when the Shared Env Var was created.
     */
    createdAt?: number | undefined;
    /**
     * Timestamp for when the Shared Env Var was (soft) deleted.
     */
    deletedAt?: number | undefined;
    /**
     * Timestamp for when the Shared Env Var was last updated.
     */
    updatedAt?: number | undefined;
    /**
     * The value of the Shared Env Var.
     */
    value?: string | undefined;
    /**
     * The unique identifiers of the projects which the Shared Env Var is linked to.
     */
    projectId?: Array<string> | undefined;
    /**
     * The type of this cosmos doc instance, if blank, assume secret.
     */
    type?: PayloadType | undefined;
    /**
     * environments this env variable targets
     */
    target?: Array<PayloadTarget> | undefined;
    /**
     * whether or not this env varible applies to custom environments
     */
    applyToAllCustomEnvironments?: boolean | undefined;
    /**
     * whether or not this env variable is decrypted
     */
    decrypted?: boolean | undefined;
    /**
     * A user provided comment that describes what this Shared Env Var is for.
     */
    comment?: string | undefined;
    /**
     * The last editor full name or username.
     */
    lastEditedByDisplayName?: string | undefined;
    projectNames?: Array<string> | undefined;
};
export type Target = string | Array<string>;
/**
 * The payload of the event, if requested.
 */
export type FiftyFive = {
    key?: string | undefined;
    projectId?: string | undefined;
    projectName?: string | undefined;
    target?: string | Array<string> | undefined;
    id?: string | undefined;
    gitBranch?: string | undefined;
    edgeConfigId?: string | null | undefined;
    edgeConfigTokenId?: string | null | undefined;
    source?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type FiftyFour = {
    email: string;
    name: string;
};
/**
 * The payload of the event, if requested.
 */
export type FiftyThree = {
    sha: string;
    gitUserPlatform: string;
    projectName: string;
};
/**
 * The payload of the event, if requested.
 */
export type FiftyTwo = {
    name: string;
    price?: number | undefined;
    currency?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type FiftyOne = {
    renew?: boolean | undefined;
    domain: string;
};
/**
 * The payload of the event, if requested.
 */
export type Fifty = {
    name: string;
    destinationId: string;
    destinationName: string;
};
/**
 * The payload of the event, if requested.
 */
export type FortyNine = {
    name: string;
    destinationId: string | null;
    destinationName: string | null;
};
/**
 * The payload of the event, if requested.
 */
export type FortyEight = {
    name: string;
    fromId: string | null;
    fromName: string | null;
};
/**
 * The payload of the event, if requested.
 */
export type FortySeven = {
    domainId: string;
    name: string;
};
export type UserEventPayload46OldTeam = {
    name: string;
};
export type UserEventPayload46NewTeam = {
    name: string;
};
/**
 * The payload of the event, if requested.
 */
export type FortySix = {
    name: string;
    oldTeam?: UserEventPayload46OldTeam | undefined;
    newTeam?: UserEventPayload46NewTeam | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type FortyFive = {
    name: string;
    userId: string;
    teamId: string;
    ownerName: string;
};
/**
 * The payload of the event, if requested.
 */
export type FortyFour = {
    name: string;
    cdnEnabled: boolean;
};
/**
 * The payload of the event, if requested.
 */
export type FortyThree = {
    name: string;
    price: number;
    currency?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type FortyTwo = {
    name: string;
};
/**
 * The payload of the event, if requested.
 */
export type FortyOne = {
    id: string;
    value: string;
    name: string;
    domain: string;
    type: string;
};
/**
 * The payload of the event, if requested.
 */
export type Forty = {
    id: string;
    value: string;
    name: string;
    domain: string;
    type: string;
    mxPriority?: number | undefined;
};
export type UserEventPayloadDeployment = {
    id: string;
    name: string;
    url: string;
    meta: {
        [k: string]: string;
    };
};
/**
 * The payload of the event, if requested.
 */
export type ThirtyNine = {
    deployment: UserEventPayloadDeployment;
    deploymentId: string;
    url: string;
};
export type UserEventPayloadOldTeam = {
    name: string;
};
export type UserEventPayloadNewTeam = {
    name: string;
};
/**
 * The payload of the event, if requested.
 */
export type ThirtyEight = {
    url: string;
    oldTeam?: UserEventPayloadOldTeam | undefined;
    newTeam?: UserEventPayloadNewTeam | undefined;
};
export type PayloadDeployment = {
    id: string;
    name: string;
    url: string;
    meta: {
        [k: string]: string;
    };
};
/**
 * The payload of the event, if requested.
 */
export type ThirtySeven = {
    name?: string | undefined;
    alias?: Array<string> | undefined;
    target?: string | null | undefined;
    deployment?: PayloadDeployment | null | undefined;
    url: string;
    forced?: boolean | undefined;
    deploymentId?: string | undefined;
    plan?: string | undefined;
    project?: string | undefined;
    projectId?: string | undefined;
    regions?: Array<string> | undefined;
    type?: string | undefined;
};
export type UserEventPayload36Project = {
    name: string;
};
export type DeployHook = {
    createdAt: number;
    id: string;
    name: string;
    ref: string;
};
export type Job = {
    deployHook: DeployHook;
    state: string;
};
/**
 * The payload of the event, if requested.
 */
export type ThirtySix = {
    project: UserEventPayload36Project;
    job: Job;
};
/**
 * The payload of the event, if requested.
 */
export type ThirtyFive = {
    bitbucketEmail: string;
    bitbucketLogin: string;
    bitbucketName?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type ThirtyFour = {
    gitlabLogin: string;
    gitlabEmail: string;
    gitlabName?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type ThirtyThree = {
    githubLogin: string;
};
export type UserEventPayload32Team = {
    id: string;
    name: string;
};
export type UserEventPayload32Configuration = {
    id: string;
    name?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type ThirtyTwo = {
    team: UserEventPayload32Team;
    configuration: UserEventPayload32Configuration;
    newName: string;
};
export type UserEventPayloadTeam = {
    id: string;
    name: string;
};
export type UserEventPayloadConfiguration = {
    id: string;
    name?: string | undefined;
};
export type UserEventPayload31Project = {
    id: string;
    name?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type ThirtyOne = {
    team: UserEventPayloadTeam;
    configuration: UserEventPayloadConfiguration;
    project: UserEventPayload31Project;
};
export type PayloadTeam = {
    id: string;
    name: string;
};
export type PayloadConfiguration = {
    id: string;
    name?: string | undefined;
};
export type UserEventPayloadProject = {
    id: string;
    name?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type Thirty = {
    team: PayloadTeam;
    configuration: PayloadConfiguration;
    project: UserEventPayloadProject;
    buildsEnabled?: boolean | undefined;
    passive?: boolean | undefined;
};
export type UserEventPayload29Team = {
    id: string;
    name: string;
};
export type Configuration = {
    id: string;
    name?: string | undefined;
};
export type PayloadProject = {
    id: string;
    name?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type TwentyNine = {
    team: UserEventPayload29Team;
    configuration: Configuration;
    project: PayloadProject;
    buildsEnabled?: boolean | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type TwentyEight = {
    suffix: string;
};
/**
 * The payload of the event, if requested.
 */
export type TwentySeven = {
    status: string;
    suffix: string;
};
/**
 * The payload of the event, if requested.
 */
export type TwentySix = {
    reason?: string | undefined;
    suffix: string;
};
/**
 * The payload of the event, if requested.
 */
export type TwentyFive = {
    cn?: string | undefined;
    cns?: Array<string> | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type TwentyFour = {
    id: string;
    cn?: string | undefined;
    cns?: Array<string> | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type TwentyThree = {
    src: string;
    dst: string;
};
export type PayloadOldTeam = {
    name: string;
};
export type PayloadNewTeam = {
    name: string;
};
/**
 * The payload of the event, if requested.
 */
export type TwentyTwo = {
    id: string;
    oldTeam?: PayloadOldTeam | undefined;
    newTeam?: PayloadNewTeam | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type TwentyOne = {
    cn?: string | undefined;
    cns?: Array<string> | undefined;
    id?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type Twenty = {
    cn?: string | undefined;
    cns?: Array<string> | undefined;
    custom: boolean;
    id?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type Nineteen = {
    avatar?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type Eighteen = {
    projectName: string;
    autoExposeSystemEnvs: boolean;
};
/**
 * The payload of the event, if requested.
 */
export type Seventeen = {
    alias: string;
    deploymentUrl: string;
};
/**
 * The payload of the event, if requested.
 */
export type Sixteen = {
    name?: string | undefined;
    alias: string;
    aliasId: string;
    deploymentId: string | null;
};
export type OldTeam = {
    name: string;
};
export type NewTeam = {
    name: string;
};
/**
 * The payload of the event, if requested.
 */
export type Fifteen = {
    name?: string | undefined;
    alias: string;
    oldTeam?: OldTeam | undefined;
    newTeam?: NewTeam | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type Fourteen = {
    alias?: string | undefined;
    email?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type Thirteen = {
    alias?: string | undefined;
    email?: string | undefined;
    username?: string | undefined;
};
export declare const PayloadAction: {
    readonly Created: "created";
    readonly Removed: "removed";
};
export type PayloadAction = ClosedEnum<typeof PayloadAction>;
/**
 * The payload of the event, if requested.
 */
export type Twelve = {
    projectName: string;
    alias: string;
    action: PayloadAction;
};
/**
 * The payload of the event, if requested.
 */
export type Eleven = {
    alias?: string | undefined;
    aliasId?: string | undefined;
    userId?: string | undefined;
    username?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type Ten = {
    alias?: string | undefined;
    userId?: string | undefined;
    username?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type Nine = {
    alias?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type Eight = {
    aliasId?: string | undefined;
    alias?: string | undefined;
    projectName?: string | undefined;
};
export type Deployment = {
    id: string;
    name: string;
    url: string;
    meta: {
        [k: string]: string;
    };
};
/**
 * The payload of the event, if requested.
 */
export type Seven = {
    alias?: string | undefined;
    deployment?: Deployment | null | undefined;
    ruleCount?: number | undefined;
    deploymentUrl?: string | undefined;
    aliasId?: string | undefined;
    deploymentId?: string | null | undefined;
    oldDeploymentId?: string | null | undefined;
    redirect?: string | undefined;
    redirectStatusCode?: number | null | undefined;
    target?: string | null | undefined;
    system?: boolean | undefined;
    aliasUpdatedAt?: number | undefined;
};
export type UserEventPayload6AccessGroup = {
    id: string;
    name: string;
};
export type Project = {
    id: string;
    name?: string | undefined;
};
export declare const NextRole: {
    readonly Admin: "ADMIN";
    readonly ProjectDeveloper: "PROJECT_DEVELOPER";
    readonly ProjectViewer: "PROJECT_VIEWER";
};
export type NextRole = ClosedEnum<typeof NextRole>;
export declare const PreviousRole: {
    readonly Admin: "ADMIN";
    readonly ProjectDeveloper: "PROJECT_DEVELOPER";
    readonly ProjectViewer: "PROJECT_VIEWER";
};
export type PreviousRole = ClosedEnum<typeof PreviousRole>;
/**
 * The payload of the event, if requested.
 */
export type Six = {
    accessGroup: UserEventPayload6AccessGroup;
    project: Project;
    nextRole?: NextRole | null | undefined;
    previousRole?: PreviousRole | undefined;
};
export type UserEventPayloadAccessGroup = {
    id: string;
    name?: string | undefined;
};
export type PayloadUser = {
    id: string;
    username?: string | undefined;
};
/**
 * The payload of the event, if requested.
 */
export type Five = {
    accessGroup: UserEventPayloadAccessGroup;
    user: PayloadUser;
    directoryType?: string | undefined;
};
export type PayloadAccessGroup = {
    id: string;
    name: string;
};
/**
 * The payload of the event, if requested.
 */
export type Four = {
    author: string;
    accessGroup: PayloadAccessGroup;
};
export type AccessGroup = {
    id: string;
    name: string;
};
/**
 * The payload of the event, if requested.
 */
export type Three = {
    accessGroup: AccessGroup;
};
export declare const Action: {
    readonly Created: "created";
    readonly Updated: "updated";
    readonly Deleted: "deleted";
    readonly Archived: "archived";
    readonly Unarchived: "unarchived";
};
export type Action = ClosedEnum<typeof Action>;
/**
 * The payload of the event, if requested.
 */
export type Payload2 = {
    action: Action;
    id: string;
    slug: string;
    projectId: string;
};
/**
 * The payload of the event, if requested.
 */
export type Payload1 = {};
export type Payload = SixtySix | SixtyNine | Seventy | Forty | FortyOne | FiftyEight | SixtyFour | SixtySeven | OneHundredAndThirtyOne | OneHundredAndSixtyOne | Payload2 | FortyFive | SixtyEight | OneHundredAndOne | OneHundredAndFortyTwo | Twelve | Sixteen | TwentyNine | Thirty | ThirtyOne | ThirtyTwo | ThirtyNine | FortyEight | FortyNine | Fifty | FiftyThree | FiftyNine | Sixty | SixtyOne | SixtyThree | SeventyFour | SeventyEight | EightyOne | EightyTwo | NinetyTwo | OneHundredAndNine | OneHundredAndThirtyThree | OneHundredAndThirtyFour | OneHundredAndFortyOne | OneHundredAndFortyThree | OneHundredAndFortyFive | OneHundredAndFortyEight | OneHundredAndFiftyEight | OneHundredAndFiftyNine | OneHundredAndSixty | Four | Five | Six | Seventeen | Eighteen | TwentyThree | TwentySeven | ThirtyFour | ThirtyFive | ThirtySix | FortyThree | FortyFour | FortySeven | FiftyFour | SixtyTwo | SixtyFive | SeventySeven | EightyFive | EightySix | EightySeven | EightyNine | Ninety | NinetyOne | NinetyThree | NinetyFour | NinetySeven | NinetyEight | NinetyNine | OneHundredAndFive | OneHundredAndFourteen | OneHundredAndFifteen | OneHundredAndTwenty | OneHundredAndTwentyOne | OneHundredAndTwentyThree | OneHundredAndThirtyTwo | OneHundredAndThirtyFive | OneHundredAndThirtySix | OneHundredAndThirtySeven | OneHundredAndThirtyNine | OneHundredAndForty | OneHundredAndFortySix | OneHundredAndFortySeven | OneHundredAndFortyNine | OneHundredAndFiftyOne | OneHundredAndFiftyTwo | OneHundredAndFiftyThree | OneHundredAndFiftyFive | Three | Fifteen | Twenty | TwentyTwo | TwentyFour | TwentySix | TwentyEight | ThirtyThree | ThirtySeven | ThirtyEight | FortyTwo | FortySix | FiftyOne | FiftyTwo | SeventyOne | SeventyTwo | SeventyThree | SeventyFive | SeventySix | SeventyNine | Eighty | EightyThree | EightyFour | EightyEight | NinetyFive | NinetySix | OneHundred | OneHundredAndThree | OneHundredAndFour | OneHundredAndSix | OneHundredAndSeven | OneHundredAndEight | OneHundredAndTwelve | OneHundredAndThirteen | OneHundredAndSixteen | OneHundredAndTwentyTwo | OneHundredAndTwentyFour | OneHundredAndTwentyEight | OneHundredAndTwentyNine | OneHundredAndThirty | OneHundredAndThirtyEight | OneHundredAndFortyFour | OneHundredAndFifty | OneHundredAndFiftyFour | OneHundredAndFiftySix | OneHundredAndFiftySeven | Payload1 | Seven | Eight | Nine | Ten | Eleven | Thirteen | Fourteen | Nineteen | TwentyOne | TwentyFive | FiftyFive | FiftySix | FiftySeven | OneHundredAndTwo | OneHundredAndTen | OneHundredAndEleven | OneHundredAndSeventeen | OneHundredAndEighteen | OneHundredAndNineteen | OneHundredAndTwentyFive | OneHundredAndTwentySix | OneHundredAndTwentySeven;
/**
 * Array of events generated by the User.
 */
export type UserEvent = {
    /**
     * The unique identifier of the Event.
     */
    id: string;
    /**
     * The human-readable text of the Event.
     */
    text: string;
    /**
     * A list of "entities" within the event `text`. Useful for enhancing the displayed text with additional styling and links.
     */
    entities: Array<Entities>;
    /**
     * Timestamp (in milliseconds) of when the event was generated.
     */
    createdAt: number;
    /**
     * Metadata for {@link userId}.
     */
    user?: User | undefined;
    principal?: One | Two | undefined;
    /**
     * Metadata for {@link viaIds}.
     */
    via?: Array<Via1 | Via2> | undefined;
    /**
     * When the principal who generated the event is a user, this is their ID; otherwise, it is empty.
     */
    userId: string;
    /**
     * The ID of the principal who generated the event. The principal is typically a user, but it could also be an app, an integration, etc. The principal may have delegated its authority to an acting party, and so {@link viaIds} should be checked as well.
     */
    principalId: string;
    /**
     * If the principal delegated its authority (for example, a user delegating to an app), then this array contains the ID of the current actor. For example, if `principalId` is "user123" and `viaIds` is `["app456"]`, we can say the event was triggered by - "app456 on behalf of user123", or - "user123 via app4556". Both are equivalent. Arbitrarily long chains of delegation can be represented. For example, if `principalId` is "user123" and `viaIds` is `["service1", "service2"]`, we can say the event was triggered by "user123 via service1 via service2".
     */
    viaIds?: Array<string> | undefined;
    payload?: SixtySix | SixtyNine | Seventy | Forty | FortyOne | FiftyEight | SixtyFour | SixtySeven | OneHundredAndThirtyOne | OneHundredAndSixtyOne | Payload2 | FortyFive | SixtyEight | OneHundredAndOne | OneHundredAndFortyTwo | Twelve | Sixteen | TwentyNine | Thirty | ThirtyOne | ThirtyTwo | ThirtyNine | FortyEight | FortyNine | Fifty | FiftyThree | FiftyNine | Sixty | SixtyOne | SixtyThree | SeventyFour | SeventyEight | EightyOne | EightyTwo | NinetyTwo | OneHundredAndNine | OneHundredAndThirtyThree | OneHundredAndThirtyFour | OneHundredAndFortyOne | OneHundredAndFortyThree | OneHundredAndFortyFive | OneHundredAndFortyEight | OneHundredAndFiftyEight | OneHundredAndFiftyNine | OneHundredAndSixty | Four | Five | Six | Seventeen | Eighteen | TwentyThree | TwentySeven | ThirtyFour | ThirtyFive | ThirtySix | FortyThree | FortyFour | FortySeven | FiftyFour | SixtyTwo | SixtyFive | SeventySeven | EightyFive | EightySix | EightySeven | EightyNine | Ninety | NinetyOne | NinetyThree | NinetyFour | NinetySeven | NinetyEight | NinetyNine | OneHundredAndFive | OneHundredAndFourteen | OneHundredAndFifteen | OneHundredAndTwenty | OneHundredAndTwentyOne | OneHundredAndTwentyThree | OneHundredAndThirtyTwo | OneHundredAndThirtyFive | OneHundredAndThirtySix | OneHundredAndThirtySeven | OneHundredAndThirtyNine | OneHundredAndForty | OneHundredAndFortySix | OneHundredAndFortySeven | OneHundredAndFortyNine | OneHundredAndFiftyOne | OneHundredAndFiftyTwo | OneHundredAndFiftyThree | OneHundredAndFiftyFive | Three | Fifteen | Twenty | TwentyTwo | TwentyFour | TwentySix | TwentyEight | ThirtyThree | ThirtySeven | ThirtyEight | FortyTwo | FortySix | FiftyOne | FiftyTwo | SeventyOne | SeventyTwo | SeventyThree | SeventyFive | SeventySix | SeventyNine | Eighty | EightyThree | EightyFour | EightyEight | NinetyFive | NinetySix | OneHundred | OneHundredAndThree | OneHundredAndFour | OneHundredAndSix | OneHundredAndSeven | OneHundredAndEight | OneHundredAndTwelve | OneHundredAndThirteen | OneHundredAndSixteen | OneHundredAndTwentyTwo | OneHundredAndTwentyFour | OneHundredAndTwentyEight | OneHundredAndTwentyNine | OneHundredAndThirty | OneHundredAndThirtyEight | OneHundredAndFortyFour | OneHundredAndFifty | OneHundredAndFiftyFour | OneHundredAndFiftySix | OneHundredAndFiftySeven | Payload1 | Seven | Eight | Nine | Ten | Eleven | Thirteen | Fourteen | Nineteen | TwentyOne | TwentyFive | FiftyFive | FiftySix | FiftySeven | OneHundredAndTwo | OneHundredAndTen | OneHundredAndEleven | OneHundredAndSeventeen | OneHundredAndEighteen | OneHundredAndNineteen | OneHundredAndTwentyFive | OneHundredAndTwentySix | OneHundredAndTwentySeven | undefined;
};
/** @internal */
export declare const UserEventType$inboundSchema: z.ZodNativeEnum<typeof UserEventType>;
/** @internal */
export declare const UserEventType$outboundSchema: z.ZodNativeEnum<typeof UserEventType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventType$ {
    /** @deprecated use `UserEventType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Author: "author";
        readonly BitbucketLogin: "bitbucket_login";
        readonly Bold: "bold";
        readonly DeploymentHost: "deployment_host";
        readonly DnsRecord: "dns_record";
        readonly GitLink: "git_link";
        readonly GithubLogin: "github_login";
        readonly GitlabLogin: "gitlab_login";
        readonly HookName: "hook_name";
        readonly Integration: "integration";
        readonly EdgeConfig: "edge-config";
        readonly Flag: "flag";
        readonly FlagsSegment: "flags-segment";
        readonly FlagsSettings: "flags-settings";
        readonly Link: "link";
        readonly ProjectName: "project_name";
        readonly ScalingRules: "scaling_rules";
        readonly EnvVarName: "env_var_name";
        readonly Target: "target";
        readonly Store: "store";
        readonly System: "system";
    }>;
    /** @deprecated use `UserEventType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Author: "author";
        readonly BitbucketLogin: "bitbucket_login";
        readonly Bold: "bold";
        readonly DeploymentHost: "deployment_host";
        readonly DnsRecord: "dns_record";
        readonly GitLink: "git_link";
        readonly GithubLogin: "github_login";
        readonly GitlabLogin: "gitlab_login";
        readonly HookName: "hook_name";
        readonly Integration: "integration";
        readonly EdgeConfig: "edge-config";
        readonly Flag: "flag";
        readonly FlagsSegment: "flags-segment";
        readonly FlagsSettings: "flags-settings";
        readonly Link: "link";
        readonly ProjectName: "project_name";
        readonly ScalingRules: "scaling_rules";
        readonly EnvVarName: "env_var_name";
        readonly Target: "target";
        readonly Store: "store";
        readonly System: "system";
    }>;
}
/** @internal */
export declare const Entities$inboundSchema: z.ZodType<Entities, z.ZodTypeDef, unknown>;
/** @internal */
export type Entities$Outbound = {
    type: string;
    start: number;
    end: number;
};
/** @internal */
export declare const Entities$outboundSchema: z.ZodType<Entities$Outbound, z.ZodTypeDef, Entities>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Entities$ {
    /** @deprecated use `Entities$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Entities, z.ZodTypeDef, unknown>;
    /** @deprecated use `Entities$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Entities$Outbound, z.ZodTypeDef, Entities>;
    /** @deprecated use `Entities$Outbound` instead. */
    type Outbound = Entities$Outbound;
}
export declare function entitiesToJSON(entities: Entities): string;
export declare function entitiesFromJSON(jsonString: string): SafeParseResult<Entities, SDKValidationError>;
/** @internal */
export declare const User$inboundSchema: z.ZodType<User, z.ZodTypeDef, unknown>;
/** @internal */
export type User$Outbound = {
    username: string;
    avatar: string;
    email: string;
    slug?: string | undefined;
    uid: string;
};
/** @internal */
export declare const User$outboundSchema: z.ZodType<User$Outbound, z.ZodTypeDef, User>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace User$ {
    /** @deprecated use `User$inboundSchema` instead. */
    const inboundSchema: z.ZodType<User, z.ZodTypeDef, unknown>;
    /** @deprecated use `User$outboundSchema` instead. */
    const outboundSchema: z.ZodType<User$Outbound, z.ZodTypeDef, User>;
    /** @deprecated use `User$Outbound` instead. */
    type Outbound = User$Outbound;
}
export declare function userToJSON(user: User): string;
export declare function userFromJSON(jsonString: string): SafeParseResult<User, SDKValidationError>;
/** @internal */
export declare const UserEventPrincipalType$inboundSchema: z.ZodNativeEnum<typeof UserEventPrincipalType>;
/** @internal */
export declare const UserEventPrincipalType$outboundSchema: z.ZodNativeEnum<typeof UserEventPrincipalType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPrincipalType$ {
    /** @deprecated use `UserEventPrincipalType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly App: "app";
    }>;
    /** @deprecated use `UserEventPrincipalType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly App: "app";
    }>;
}
/** @internal */
export declare const Two$inboundSchema: z.ZodType<Two, z.ZodTypeDef, unknown>;
/** @internal */
export type Two$Outbound = {
    type: string;
    clientId: string;
    name: string;
};
/** @internal */
export declare const Two$outboundSchema: z.ZodType<Two$Outbound, z.ZodTypeDef, Two>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Two$ {
    /** @deprecated use `Two$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Two, z.ZodTypeDef, unknown>;
    /** @deprecated use `Two$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Two$Outbound, z.ZodTypeDef, Two>;
    /** @deprecated use `Two$Outbound` instead. */
    type Outbound = Two$Outbound;
}
export declare function twoToJSON(two: Two): string;
export declare function twoFromJSON(jsonString: string): SafeParseResult<Two, SDKValidationError>;
/** @internal */
export declare const PrincipalType$inboundSchema: z.ZodNativeEnum<typeof PrincipalType>;
/** @internal */
export declare const PrincipalType$outboundSchema: z.ZodNativeEnum<typeof PrincipalType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PrincipalType$ {
    /** @deprecated use `PrincipalType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly User: "user";
    }>;
    /** @deprecated use `PrincipalType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly User: "user";
    }>;
}
/** @internal */
export declare const One$inboundSchema: z.ZodType<One, z.ZodTypeDef, unknown>;
/** @internal */
export type One$Outbound = {
    type?: string | undefined;
    avatar: string;
    email: string;
    slug?: string | undefined;
    uid: string;
    username: string;
};
/** @internal */
export declare const One$outboundSchema: z.ZodType<One$Outbound, z.ZodTypeDef, One>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace One$ {
    /** @deprecated use `One$inboundSchema` instead. */
    const inboundSchema: z.ZodType<One, z.ZodTypeDef, unknown>;
    /** @deprecated use `One$outboundSchema` instead. */
    const outboundSchema: z.ZodType<One$Outbound, z.ZodTypeDef, One>;
    /** @deprecated use `One$Outbound` instead. */
    type Outbound = One$Outbound;
}
export declare function oneToJSON(one: One): string;
export declare function oneFromJSON(jsonString: string): SafeParseResult<One, SDKValidationError>;
/** @internal */
export declare const Principal$inboundSchema: z.ZodType<Principal, z.ZodTypeDef, unknown>;
/** @internal */
export type Principal$Outbound = One$Outbound | Two$Outbound;
/** @internal */
export declare const Principal$outboundSchema: z.ZodType<Principal$Outbound, z.ZodTypeDef, Principal>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Principal$ {
    /** @deprecated use `Principal$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Principal, z.ZodTypeDef, unknown>;
    /** @deprecated use `Principal$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Principal$Outbound, z.ZodTypeDef, Principal>;
    /** @deprecated use `Principal$Outbound` instead. */
    type Outbound = Principal$Outbound;
}
export declare function principalToJSON(principal: Principal): string;
export declare function principalFromJSON(jsonString: string): SafeParseResult<Principal, SDKValidationError>;
/** @internal */
export declare const UserEventViaType$inboundSchema: z.ZodNativeEnum<typeof UserEventViaType>;
/** @internal */
export declare const UserEventViaType$outboundSchema: z.ZodNativeEnum<typeof UserEventViaType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventViaType$ {
    /** @deprecated use `UserEventViaType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly App: "app";
    }>;
    /** @deprecated use `UserEventViaType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly App: "app";
    }>;
}
/** @internal */
export declare const Via2$inboundSchema: z.ZodType<Via2, z.ZodTypeDef, unknown>;
/** @internal */
export type Via2$Outbound = {
    type: string;
    clientId: string;
    name: string;
};
/** @internal */
export declare const Via2$outboundSchema: z.ZodType<Via2$Outbound, z.ZodTypeDef, Via2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Via2$ {
    /** @deprecated use `Via2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Via2, z.ZodTypeDef, unknown>;
    /** @deprecated use `Via2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Via2$Outbound, z.ZodTypeDef, Via2>;
    /** @deprecated use `Via2$Outbound` instead. */
    type Outbound = Via2$Outbound;
}
export declare function via2ToJSON(via2: Via2): string;
export declare function via2FromJSON(jsonString: string): SafeParseResult<Via2, SDKValidationError>;
/** @internal */
export declare const ViaType$inboundSchema: z.ZodNativeEnum<typeof ViaType>;
/** @internal */
export declare const ViaType$outboundSchema: z.ZodNativeEnum<typeof ViaType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ViaType$ {
    /** @deprecated use `ViaType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly User: "user";
    }>;
    /** @deprecated use `ViaType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly User: "user";
    }>;
}
/** @internal */
export declare const Via1$inboundSchema: z.ZodType<Via1, z.ZodTypeDef, unknown>;
/** @internal */
export type Via1$Outbound = {
    type?: string | undefined;
    avatar: string;
    email: string;
    slug?: string | undefined;
    uid: string;
    username: string;
};
/** @internal */
export declare const Via1$outboundSchema: z.ZodType<Via1$Outbound, z.ZodTypeDef, Via1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Via1$ {
    /** @deprecated use `Via1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Via1, z.ZodTypeDef, unknown>;
    /** @deprecated use `Via1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Via1$Outbound, z.ZodTypeDef, Via1>;
    /** @deprecated use `Via1$Outbound` instead. */
    type Outbound = Via1$Outbound;
}
export declare function via1ToJSON(via1: Via1): string;
export declare function via1FromJSON(jsonString: string): SafeParseResult<Via1, SDKValidationError>;
/** @internal */
export declare const Via$inboundSchema: z.ZodType<Via, z.ZodTypeDef, unknown>;
/** @internal */
export type Via$Outbound = Via1$Outbound | Via2$Outbound;
/** @internal */
export declare const Via$outboundSchema: z.ZodType<Via$Outbound, z.ZodTypeDef, Via>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Via$ {
    /** @deprecated use `Via$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Via, z.ZodTypeDef, unknown>;
    /** @deprecated use `Via$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Via$Outbound, z.ZodTypeDef, Via>;
    /** @deprecated use `Via$Outbound` instead. */
    type Outbound = Via$Outbound;
}
export declare function viaToJSON(via: Via): string;
export declare function viaFromJSON(jsonString: string): SafeParseResult<Via, SDKValidationError>;
/** @internal */
export declare const GrantType$inboundSchema: z.ZodNativeEnum<typeof GrantType>;
/** @internal */
export declare const GrantType$outboundSchema: z.ZodNativeEnum<typeof GrantType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GrantType$ {
    /** @deprecated use `GrantType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly AuthorizationCode: "authorization_code";
        readonly RefreshToken: "refresh_token";
        readonly UrnIetfParamsOauthGrantTypeDeviceCode: "urn:ietf:params:oauth:grant-type:device_code";
        readonly ClientCredentials: "client_credentials";
    }>;
    /** @deprecated use `GrantType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly AuthorizationCode: "authorization_code";
        readonly RefreshToken: "refresh_token";
        readonly UrnIetfParamsOauthGrantTypeDeviceCode: "urn:ietf:params:oauth:grant-type:device_code";
        readonly ClientCredentials: "client_credentials";
    }>;
}
/** @internal */
export declare const AuthMethod$inboundSchema: z.ZodNativeEnum<typeof AuthMethod>;
/** @internal */
export declare const AuthMethod$outboundSchema: z.ZodNativeEnum<typeof AuthMethod>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AuthMethod$ {
    /** @deprecated use `AuthMethod$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Email: "email";
        readonly Saml: "saml";
        readonly App: "app";
        readonly Github: "github";
        readonly Gitlab: "gitlab";
        readonly Bitbucket: "bitbucket";
        readonly Manual: "manual";
        readonly Passkey: "passkey";
        readonly Otp: "otp";
        readonly Sms: "sms";
        readonly Invite: "invite";
        readonly Google: "google";
    }>;
    /** @deprecated use `AuthMethod$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Email: "email";
        readonly Saml: "saml";
        readonly App: "app";
        readonly Github: "github";
        readonly Gitlab: "gitlab";
        readonly Bitbucket: "bitbucket";
        readonly Manual: "manual";
        readonly Passkey: "passkey";
        readonly Otp: "otp";
        readonly Sms: "sms";
        readonly Invite: "invite";
        readonly Google: "google";
    }>;
}
/** @internal */
export declare const OneHundredAndSixtyOne$inboundSchema: z.ZodType<OneHundredAndSixtyOne, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndSixtyOne$Outbound = {
    grantType: string;
    appName: string;
    atTTL: number;
    rtTTL?: number | undefined;
    scope: string;
    authMethod: string;
};
/** @internal */
export declare const OneHundredAndSixtyOne$outboundSchema: z.ZodType<OneHundredAndSixtyOne$Outbound, z.ZodTypeDef, OneHundredAndSixtyOne>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndSixtyOne$ {
    /** @deprecated use `OneHundredAndSixtyOne$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndSixtyOne, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndSixtyOne$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndSixtyOne$Outbound, z.ZodTypeDef, OneHundredAndSixtyOne>;
    /** @deprecated use `OneHundredAndSixtyOne$Outbound` instead. */
    type Outbound = OneHundredAndSixtyOne$Outbound;
}
export declare function oneHundredAndSixtyOneToJSON(oneHundredAndSixtyOne: OneHundredAndSixtyOne): string;
export declare function oneHundredAndSixtyOneFromJSON(jsonString: string): SafeParseResult<OneHundredAndSixtyOne, SDKValidationError>;
/** @internal */
export declare const UserEventPayload160Team$inboundSchema: z.ZodType<UserEventPayload160Team, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayload160Team$Outbound = {
    id: string;
    name: string;
};
/** @internal */
export declare const UserEventPayload160Team$outboundSchema: z.ZodType<UserEventPayload160Team$Outbound, z.ZodTypeDef, UserEventPayload160Team>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload160Team$ {
    /** @deprecated use `UserEventPayload160Team$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayload160Team, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayload160Team$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayload160Team$Outbound, z.ZodTypeDef, UserEventPayload160Team>;
    /** @deprecated use `UserEventPayload160Team$Outbound` instead. */
    type Outbound = UserEventPayload160Team$Outbound;
}
export declare function userEventPayload160TeamToJSON(userEventPayload160Team: UserEventPayload160Team): string;
export declare function userEventPayload160TeamFromJSON(jsonString: string): SafeParseResult<UserEventPayload160Team, SDKValidationError>;
/** @internal */
export declare const UserEventPayload160Configuration$inboundSchema: z.ZodType<UserEventPayload160Configuration, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayload160Configuration$Outbound = {
    id: string;
    name?: string | undefined;
};
/** @internal */
export declare const UserEventPayload160Configuration$outboundSchema: z.ZodType<UserEventPayload160Configuration$Outbound, z.ZodTypeDef, UserEventPayload160Configuration>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload160Configuration$ {
    /** @deprecated use `UserEventPayload160Configuration$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayload160Configuration, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayload160Configuration$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayload160Configuration$Outbound, z.ZodTypeDef, UserEventPayload160Configuration>;
    /** @deprecated use `UserEventPayload160Configuration$Outbound` instead. */
    type Outbound = UserEventPayload160Configuration$Outbound;
}
export declare function userEventPayload160ConfigurationToJSON(userEventPayload160Configuration: UserEventPayload160Configuration): string;
export declare function userEventPayload160ConfigurationFromJSON(jsonString: string): SafeParseResult<UserEventPayload160Configuration, SDKValidationError>;
/** @internal */
export declare const UserEventPayloadPeering$inboundSchema: z.ZodType<UserEventPayloadPeering, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayloadPeering$Outbound = {
    id: string;
    name?: string | undefined;
};
/** @internal */
export declare const UserEventPayloadPeering$outboundSchema: z.ZodType<UserEventPayloadPeering$Outbound, z.ZodTypeDef, UserEventPayloadPeering>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayloadPeering$ {
    /** @deprecated use `UserEventPayloadPeering$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayloadPeering, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayloadPeering$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayloadPeering$Outbound, z.ZodTypeDef, UserEventPayloadPeering>;
    /** @deprecated use `UserEventPayloadPeering$Outbound` instead. */
    type Outbound = UserEventPayloadPeering$Outbound;
}
export declare function userEventPayloadPeeringToJSON(userEventPayloadPeering: UserEventPayloadPeering): string;
export declare function userEventPayloadPeeringFromJSON(jsonString: string): SafeParseResult<UserEventPayloadPeering, SDKValidationError>;
/** @internal */
export declare const OneHundredAndSixty$inboundSchema: z.ZodType<OneHundredAndSixty, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndSixty$Outbound = {
    team: UserEventPayload160Team$Outbound;
    configuration: UserEventPayload160Configuration$Outbound;
    peering: UserEventPayloadPeering$Outbound;
    newName?: string | undefined;
};
/** @internal */
export declare const OneHundredAndSixty$outboundSchema: z.ZodType<OneHundredAndSixty$Outbound, z.ZodTypeDef, OneHundredAndSixty>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndSixty$ {
    /** @deprecated use `OneHundredAndSixty$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndSixty, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndSixty$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndSixty$Outbound, z.ZodTypeDef, OneHundredAndSixty>;
    /** @deprecated use `OneHundredAndSixty$Outbound` instead. */
    type Outbound = OneHundredAndSixty$Outbound;
}
export declare function oneHundredAndSixtyToJSON(oneHundredAndSixty: OneHundredAndSixty): string;
export declare function oneHundredAndSixtyFromJSON(jsonString: string): SafeParseResult<OneHundredAndSixty, SDKValidationError>;
/** @internal */
export declare const UserEventPayload159Team$inboundSchema: z.ZodType<UserEventPayload159Team, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayload159Team$Outbound = {
    id: string;
    name: string;
};
/** @internal */
export declare const UserEventPayload159Team$outboundSchema: z.ZodType<UserEventPayload159Team$Outbound, z.ZodTypeDef, UserEventPayload159Team>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload159Team$ {
    /** @deprecated use `UserEventPayload159Team$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayload159Team, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayload159Team$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayload159Team$Outbound, z.ZodTypeDef, UserEventPayload159Team>;
    /** @deprecated use `UserEventPayload159Team$Outbound` instead. */
    type Outbound = UserEventPayload159Team$Outbound;
}
export declare function userEventPayload159TeamToJSON(userEventPayload159Team: UserEventPayload159Team): string;
export declare function userEventPayload159TeamFromJSON(jsonString: string): SafeParseResult<UserEventPayload159Team, SDKValidationError>;
/** @internal */
export declare const UserEventPayload159Configuration$inboundSchema: z.ZodType<UserEventPayload159Configuration, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayload159Configuration$Outbound = {
    id: string;
    name?: string | undefined;
};
/** @internal */
export declare const UserEventPayload159Configuration$outboundSchema: z.ZodType<UserEventPayload159Configuration$Outbound, z.ZodTypeDef, UserEventPayload159Configuration>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload159Configuration$ {
    /** @deprecated use `UserEventPayload159Configuration$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayload159Configuration, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayload159Configuration$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayload159Configuration$Outbound, z.ZodTypeDef, UserEventPayload159Configuration>;
    /** @deprecated use `UserEventPayload159Configuration$Outbound` instead. */
    type Outbound = UserEventPayload159Configuration$Outbound;
}
export declare function userEventPayload159ConfigurationToJSON(userEventPayload159Configuration: UserEventPayload159Configuration): string;
export declare function userEventPayload159ConfigurationFromJSON(jsonString: string): SafeParseResult<UserEventPayload159Configuration, SDKValidationError>;
/** @internal */
export declare const PayloadPeering$inboundSchema: z.ZodType<PayloadPeering, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadPeering$Outbound = {
    id: string;
    name?: string | undefined;
};
/** @internal */
export declare const PayloadPeering$outboundSchema: z.ZodType<PayloadPeering$Outbound, z.ZodTypeDef, PayloadPeering>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadPeering$ {
    /** @deprecated use `PayloadPeering$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadPeering, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadPeering$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadPeering$Outbound, z.ZodTypeDef, PayloadPeering>;
    /** @deprecated use `PayloadPeering$Outbound` instead. */
    type Outbound = PayloadPeering$Outbound;
}
export declare function payloadPeeringToJSON(payloadPeering: PayloadPeering): string;
export declare function payloadPeeringFromJSON(jsonString: string): SafeParseResult<PayloadPeering, SDKValidationError>;
/** @internal */
export declare const OneHundredAndFiftyNine$inboundSchema: z.ZodType<OneHundredAndFiftyNine, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndFiftyNine$Outbound = {
    team: UserEventPayload159Team$Outbound;
    configuration: UserEventPayload159Configuration$Outbound;
    peering: PayloadPeering$Outbound;
};
/** @internal */
export declare const OneHundredAndFiftyNine$outboundSchema: z.ZodType<OneHundredAndFiftyNine$Outbound, z.ZodTypeDef, OneHundredAndFiftyNine>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndFiftyNine$ {
    /** @deprecated use `OneHundredAndFiftyNine$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndFiftyNine, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndFiftyNine$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndFiftyNine$Outbound, z.ZodTypeDef, OneHundredAndFiftyNine>;
    /** @deprecated use `OneHundredAndFiftyNine$Outbound` instead. */
    type Outbound = OneHundredAndFiftyNine$Outbound;
}
export declare function oneHundredAndFiftyNineToJSON(oneHundredAndFiftyNine: OneHundredAndFiftyNine): string;
export declare function oneHundredAndFiftyNineFromJSON(jsonString: string): SafeParseResult<OneHundredAndFiftyNine, SDKValidationError>;
/** @internal */
export declare const UserEventPayload158Team$inboundSchema: z.ZodType<UserEventPayload158Team, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayload158Team$Outbound = {
    id: string;
    name: string;
};
/** @internal */
export declare const UserEventPayload158Team$outboundSchema: z.ZodType<UserEventPayload158Team$Outbound, z.ZodTypeDef, UserEventPayload158Team>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload158Team$ {
    /** @deprecated use `UserEventPayload158Team$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayload158Team, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayload158Team$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayload158Team$Outbound, z.ZodTypeDef, UserEventPayload158Team>;
    /** @deprecated use `UserEventPayload158Team$Outbound` instead. */
    type Outbound = UserEventPayload158Team$Outbound;
}
export declare function userEventPayload158TeamToJSON(userEventPayload158Team: UserEventPayload158Team): string;
export declare function userEventPayload158TeamFromJSON(jsonString: string): SafeParseResult<UserEventPayload158Team, SDKValidationError>;
/** @internal */
export declare const UserEventPayload158Configuration$inboundSchema: z.ZodType<UserEventPayload158Configuration, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayload158Configuration$Outbound = {
    id: string;
    name?: string | undefined;
};
/** @internal */
export declare const UserEventPayload158Configuration$outboundSchema: z.ZodType<UserEventPayload158Configuration$Outbound, z.ZodTypeDef, UserEventPayload158Configuration>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload158Configuration$ {
    /** @deprecated use `UserEventPayload158Configuration$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayload158Configuration, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayload158Configuration$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayload158Configuration$Outbound, z.ZodTypeDef, UserEventPayload158Configuration>;
    /** @deprecated use `UserEventPayload158Configuration$Outbound` instead. */
    type Outbound = UserEventPayload158Configuration$Outbound;
}
export declare function userEventPayload158ConfigurationToJSON(userEventPayload158Configuration: UserEventPayload158Configuration): string;
export declare function userEventPayload158ConfigurationFromJSON(jsonString: string): SafeParseResult<UserEventPayload158Configuration, SDKValidationError>;
/** @internal */
export declare const Peering$inboundSchema: z.ZodType<Peering, z.ZodTypeDef, unknown>;
/** @internal */
export type Peering$Outbound = {
    id: string;
    accountId: string;
    region: string;
    vpcId: string;
};
/** @internal */
export declare const Peering$outboundSchema: z.ZodType<Peering$Outbound, z.ZodTypeDef, Peering>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Peering$ {
    /** @deprecated use `Peering$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Peering, z.ZodTypeDef, unknown>;
    /** @deprecated use `Peering$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Peering$Outbound, z.ZodTypeDef, Peering>;
    /** @deprecated use `Peering$Outbound` instead. */
    type Outbound = Peering$Outbound;
}
export declare function peeringToJSON(peering: Peering): string;
export declare function peeringFromJSON(jsonString: string): SafeParseResult<Peering, SDKValidationError>;
/** @internal */
export declare const OneHundredAndFiftyEight$inboundSchema: z.ZodType<OneHundredAndFiftyEight, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndFiftyEight$Outbound = {
    team: UserEventPayload158Team$Outbound;
    configuration: UserEventPayload158Configuration$Outbound;
    peering: Peering$Outbound;
};
/** @internal */
export declare const OneHundredAndFiftyEight$outboundSchema: z.ZodType<OneHundredAndFiftyEight$Outbound, z.ZodTypeDef, OneHundredAndFiftyEight>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndFiftyEight$ {
    /** @deprecated use `OneHundredAndFiftyEight$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndFiftyEight, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndFiftyEight$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndFiftyEight$Outbound, z.ZodTypeDef, OneHundredAndFiftyEight>;
    /** @deprecated use `OneHundredAndFiftyEight$Outbound` instead. */
    type Outbound = OneHundredAndFiftyEight$Outbound;
}
export declare function oneHundredAndFiftyEightToJSON(oneHundredAndFiftyEight: OneHundredAndFiftyEight): string;
export declare function oneHundredAndFiftyEightFromJSON(jsonString: string): SafeParseResult<OneHundredAndFiftyEight, SDKValidationError>;
/** @internal */
export declare const OneHundredAndFiftySeven$inboundSchema: z.ZodType<OneHundredAndFiftySeven, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndFiftySeven$Outbound = {
    appName: string;
    appId?: string | undefined;
    installationId?: string | undefined;
};
/** @internal */
export declare const OneHundredAndFiftySeven$outboundSchema: z.ZodType<OneHundredAndFiftySeven$Outbound, z.ZodTypeDef, OneHundredAndFiftySeven>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndFiftySeven$ {
    /** @deprecated use `OneHundredAndFiftySeven$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndFiftySeven, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndFiftySeven$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndFiftySeven$Outbound, z.ZodTypeDef, OneHundredAndFiftySeven>;
    /** @deprecated use `OneHundredAndFiftySeven$Outbound` instead. */
    type Outbound = OneHundredAndFiftySeven$Outbound;
}
export declare function oneHundredAndFiftySevenToJSON(oneHundredAndFiftySeven: OneHundredAndFiftySeven): string;
export declare function oneHundredAndFiftySevenFromJSON(jsonString: string): SafeParseResult<OneHundredAndFiftySeven, SDKValidationError>;
/** @internal */
export declare const OneHundredAndFiftySix$inboundSchema: z.ZodType<OneHundredAndFiftySix, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndFiftySix$Outbound = {
    appName: string;
    appId?: string | undefined;
};
/** @internal */
export declare const OneHundredAndFiftySix$outboundSchema: z.ZodType<OneHundredAndFiftySix$Outbound, z.ZodTypeDef, OneHundredAndFiftySix>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndFiftySix$ {
    /** @deprecated use `OneHundredAndFiftySix$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndFiftySix, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndFiftySix$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndFiftySix$Outbound, z.ZodTypeDef, OneHundredAndFiftySix>;
    /** @deprecated use `OneHundredAndFiftySix$Outbound` instead. */
    type Outbound = OneHundredAndFiftySix$Outbound;
}
export declare function oneHundredAndFiftySixToJSON(oneHundredAndFiftySix: OneHundredAndFiftySix): string;
export declare function oneHundredAndFiftySixFromJSON(jsonString: string): SafeParseResult<OneHundredAndFiftySix, SDKValidationError>;
/** @internal */
export declare const OneHundredAndFiftyFive$inboundSchema: z.ZodType<OneHundredAndFiftyFive, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndFiftyFive$Outbound = {
    appName: string;
    appId: string;
};
/** @internal */
export declare const OneHundredAndFiftyFive$outboundSchema: z.ZodType<OneHundredAndFiftyFive$Outbound, z.ZodTypeDef, OneHundredAndFiftyFive>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndFiftyFive$ {
    /** @deprecated use `OneHundredAndFiftyFive$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndFiftyFive, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndFiftyFive$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndFiftyFive$Outbound, z.ZodTypeDef, OneHundredAndFiftyFive>;
    /** @deprecated use `OneHundredAndFiftyFive$Outbound` instead. */
    type Outbound = OneHundredAndFiftyFive$Outbound;
}
export declare function oneHundredAndFiftyFiveToJSON(oneHundredAndFiftyFive: OneHundredAndFiftyFive): string;
export declare function oneHundredAndFiftyFiveFromJSON(jsonString: string): SafeParseResult<OneHundredAndFiftyFive, SDKValidationError>;
/** @internal */
export declare const OneHundredAndFiftyFour$inboundSchema: z.ZodType<OneHundredAndFiftyFour, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndFiftyFour$Outbound = {
    appName: string;
};
/** @internal */
export declare const OneHundredAndFiftyFour$outboundSchema: z.ZodType<OneHundredAndFiftyFour$Outbound, z.ZodTypeDef, OneHundredAndFiftyFour>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndFiftyFour$ {
    /** @deprecated use `OneHundredAndFiftyFour$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndFiftyFour, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndFiftyFour$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndFiftyFour$Outbound, z.ZodTypeDef, OneHundredAndFiftyFour>;
    /** @deprecated use `OneHundredAndFiftyFour$Outbound` instead. */
    type Outbound = OneHundredAndFiftyFour$Outbound;
}
export declare function oneHundredAndFiftyFourToJSON(oneHundredAndFiftyFour: OneHundredAndFiftyFour): string;
export declare function oneHundredAndFiftyFourFromJSON(jsonString: string): SafeParseResult<OneHundredAndFiftyFour, SDKValidationError>;
/** @internal */
export declare const OneHundredAndFiftyThree$inboundSchema: z.ZodType<OneHundredAndFiftyThree, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndFiftyThree$Outbound = {
    appName: string;
    nextScopes: Array<string>;
};
/** @internal */
export declare const OneHundredAndFiftyThree$outboundSchema: z.ZodType<OneHundredAndFiftyThree$Outbound, z.ZodTypeDef, OneHundredAndFiftyThree>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndFiftyThree$ {
    /** @deprecated use `OneHundredAndFiftyThree$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndFiftyThree, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndFiftyThree$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndFiftyThree$Outbound, z.ZodTypeDef, OneHundredAndFiftyThree>;
    /** @deprecated use `OneHundredAndFiftyThree$Outbound` instead. */
    type Outbound = OneHundredAndFiftyThree$Outbound;
}
export declare function oneHundredAndFiftyThreeToJSON(oneHundredAndFiftyThree: OneHundredAndFiftyThree): string;
export declare function oneHundredAndFiftyThreeFromJSON(jsonString: string): SafeParseResult<OneHundredAndFiftyThree, SDKValidationError>;
/** @internal */
export declare const OneHundredAndFiftyTwo$inboundSchema: z.ZodType<OneHundredAndFiftyTwo, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndFiftyTwo$Outbound = {
    appName: string;
    scopes: Array<string>;
};
/** @internal */
export declare const OneHundredAndFiftyTwo$outboundSchema: z.ZodType<OneHundredAndFiftyTwo$Outbound, z.ZodTypeDef, OneHundredAndFiftyTwo>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndFiftyTwo$ {
    /** @deprecated use `OneHundredAndFiftyTwo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndFiftyTwo, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndFiftyTwo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndFiftyTwo$Outbound, z.ZodTypeDef, OneHundredAndFiftyTwo>;
    /** @deprecated use `OneHundredAndFiftyTwo$Outbound` instead. */
    type Outbound = OneHundredAndFiftyTwo$Outbound;
}
export declare function oneHundredAndFiftyTwoToJSON(oneHundredAndFiftyTwo: OneHundredAndFiftyTwo): string;
export declare function oneHundredAndFiftyTwoFromJSON(jsonString: string): SafeParseResult<OneHundredAndFiftyTwo, SDKValidationError>;
/** @internal */
export declare const OneHundredAndFiftyOne$inboundSchema: z.ZodType<OneHundredAndFiftyOne, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndFiftyOne$Outbound = {
    oldName: string;
    newName: string;
};
/** @internal */
export declare const OneHundredAndFiftyOne$outboundSchema: z.ZodType<OneHundredAndFiftyOne$Outbound, z.ZodTypeDef, OneHundredAndFiftyOne>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndFiftyOne$ {
    /** @deprecated use `OneHundredAndFiftyOne$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndFiftyOne, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndFiftyOne$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndFiftyOne$Outbound, z.ZodTypeDef, OneHundredAndFiftyOne>;
    /** @deprecated use `OneHundredAndFiftyOne$Outbound` instead. */
    type Outbound = OneHundredAndFiftyOne$Outbound;
}
export declare function oneHundredAndFiftyOneToJSON(oneHundredAndFiftyOne: OneHundredAndFiftyOne): string;
export declare function oneHundredAndFiftyOneFromJSON(jsonString: string): SafeParseResult<OneHundredAndFiftyOne, SDKValidationError>;
/** @internal */
export declare const Tier$inboundSchema: z.ZodNativeEnum<typeof Tier>;
/** @internal */
export declare const Tier$outboundSchema: z.ZodNativeEnum<typeof Tier>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Tier$ {
    /** @deprecated use `Tier$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Pro: "pro";
        readonly Plus: "plus";
    }>;
    /** @deprecated use `Tier$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Pro: "pro";
        readonly Plus: "plus";
    }>;
}
/** @internal */
export declare const OneHundredAndFifty$inboundSchema: z.ZodType<OneHundredAndFifty, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndFifty$Outbound = {
    tier: string;
};
/** @internal */
export declare const OneHundredAndFifty$outboundSchema: z.ZodType<OneHundredAndFifty$Outbound, z.ZodTypeDef, OneHundredAndFifty>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndFifty$ {
    /** @deprecated use `OneHundredAndFifty$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndFifty, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndFifty$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndFifty$Outbound, z.ZodTypeDef, OneHundredAndFifty>;
    /** @deprecated use `OneHundredAndFifty$Outbound` instead. */
    type Outbound = OneHundredAndFifty$Outbound;
}
export declare function oneHundredAndFiftyToJSON(oneHundredAndFifty: OneHundredAndFifty): string;
export declare function oneHundredAndFiftyFromJSON(jsonString: string): SafeParseResult<OneHundredAndFifty, SDKValidationError>;
/** @internal */
export declare const ProjectWebAnalytics$inboundSchema: z.ZodType<ProjectWebAnalytics, z.ZodTypeDef, unknown>;
/** @internal */
export type ProjectWebAnalytics$Outbound = {
    id: string;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    enabledAt?: number | undefined;
    hasData?: boolean | undefined;
};
/** @internal */
export declare const ProjectWebAnalytics$outboundSchema: z.ZodType<ProjectWebAnalytics$Outbound, z.ZodTypeDef, ProjectWebAnalytics>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ProjectWebAnalytics$ {
    /** @deprecated use `ProjectWebAnalytics$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ProjectWebAnalytics, z.ZodTypeDef, unknown>;
    /** @deprecated use `ProjectWebAnalytics$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ProjectWebAnalytics$Outbound, z.ZodTypeDef, ProjectWebAnalytics>;
    /** @deprecated use `ProjectWebAnalytics$Outbound` instead. */
    type Outbound = ProjectWebAnalytics$Outbound;
}
export declare function projectWebAnalyticsToJSON(projectWebAnalytics: ProjectWebAnalytics): string;
export declare function projectWebAnalyticsFromJSON(jsonString: string): SafeParseResult<ProjectWebAnalytics, SDKValidationError>;
/** @internal */
export declare const PrevProjectWebAnalytics$inboundSchema: z.ZodType<PrevProjectWebAnalytics, z.ZodTypeDef, unknown>;
/** @internal */
export type PrevProjectWebAnalytics$Outbound = {
    id: string;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    enabledAt?: number | undefined;
    hasData?: boolean | undefined;
};
/** @internal */
export declare const PrevProjectWebAnalytics$outboundSchema: z.ZodType<PrevProjectWebAnalytics$Outbound, z.ZodTypeDef, PrevProjectWebAnalytics>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PrevProjectWebAnalytics$ {
    /** @deprecated use `PrevProjectWebAnalytics$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PrevProjectWebAnalytics, z.ZodTypeDef, unknown>;
    /** @deprecated use `PrevProjectWebAnalytics$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PrevProjectWebAnalytics$Outbound, z.ZodTypeDef, PrevProjectWebAnalytics>;
    /** @deprecated use `PrevProjectWebAnalytics$Outbound` instead. */
    type Outbound = PrevProjectWebAnalytics$Outbound;
}
export declare function prevProjectWebAnalyticsToJSON(prevProjectWebAnalytics: PrevProjectWebAnalytics): string;
export declare function prevProjectWebAnalyticsFromJSON(jsonString: string): SafeParseResult<PrevProjectWebAnalytics, SDKValidationError>;
/** @internal */
export declare const OneHundredAndFortyNine$inboundSchema: z.ZodType<OneHundredAndFortyNine, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndFortyNine$Outbound = {
    projectId: string;
    projectName: string;
    projectWebAnalytics?: ProjectWebAnalytics$Outbound | undefined;
    prevProjectWebAnalytics?: PrevProjectWebAnalytics$Outbound | null | undefined;
};
/** @internal */
export declare const OneHundredAndFortyNine$outboundSchema: z.ZodType<OneHundredAndFortyNine$Outbound, z.ZodTypeDef, OneHundredAndFortyNine>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndFortyNine$ {
    /** @deprecated use `OneHundredAndFortyNine$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndFortyNine, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndFortyNine$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndFortyNine$Outbound, z.ZodTypeDef, OneHundredAndFortyNine>;
    /** @deprecated use `OneHundredAndFortyNine$Outbound` instead. */
    type Outbound = OneHundredAndFortyNine$Outbound;
}
export declare function oneHundredAndFortyNineToJSON(oneHundredAndFortyNine: OneHundredAndFortyNine): string;
export declare function oneHundredAndFortyNineFromJSON(jsonString: string): SafeParseResult<OneHundredAndFortyNine, SDKValidationError>;
/** @internal */
export declare const Microfrontends2$inboundSchema: z.ZodType<Microfrontends2, z.ZodTypeDef, unknown>;
/** @internal */
export type Microfrontends2$Outbound = {
    updatedAt: number;
    groupIds: Array<any>;
    enabled: boolean;
};
/** @internal */
export declare const Microfrontends2$outboundSchema: z.ZodType<Microfrontends2$Outbound, z.ZodTypeDef, Microfrontends2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Microfrontends2$ {
    /** @deprecated use `Microfrontends2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Microfrontends2, z.ZodTypeDef, unknown>;
    /** @deprecated use `Microfrontends2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Microfrontends2$Outbound, z.ZodTypeDef, Microfrontends2>;
    /** @deprecated use `Microfrontends2$Outbound` instead. */
    type Outbound = Microfrontends2$Outbound;
}
export declare function microfrontends2ToJSON(microfrontends2: Microfrontends2): string;
export declare function microfrontends2FromJSON(jsonString: string): SafeParseResult<Microfrontends2, SDKValidationError>;
/** @internal */
export declare const Microfrontends1$inboundSchema: z.ZodType<Microfrontends1, z.ZodTypeDef, unknown>;
/** @internal */
export type Microfrontends1$Outbound = {
    updatedAt: number;
    groupIds: Array<string>;
    enabled: boolean;
    isDefaultApp?: boolean | undefined;
    defaultRoute?: string | undefined;
    routeObservabilityToThisProject?: boolean | undefined;
};
/** @internal */
export declare const Microfrontends1$outboundSchema: z.ZodType<Microfrontends1$Outbound, z.ZodTypeDef, Microfrontends1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Microfrontends1$ {
    /** @deprecated use `Microfrontends1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Microfrontends1, z.ZodTypeDef, unknown>;
    /** @deprecated use `Microfrontends1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Microfrontends1$Outbound, z.ZodTypeDef, Microfrontends1>;
    /** @deprecated use `Microfrontends1$Outbound` instead. */
    type Outbound = Microfrontends1$Outbound;
}
export declare function microfrontends1ToJSON(microfrontends1: Microfrontends1): string;
export declare function microfrontends1FromJSON(jsonString: string): SafeParseResult<Microfrontends1, SDKValidationError>;
/** @internal */
export declare const Microfrontends$inboundSchema: z.ZodType<Microfrontends, z.ZodTypeDef, unknown>;
/** @internal */
export type Microfrontends$Outbound = Microfrontends1$Outbound | Microfrontends2$Outbound;
/** @internal */
export declare const Microfrontends$outboundSchema: z.ZodType<Microfrontends$Outbound, z.ZodTypeDef, Microfrontends>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Microfrontends$ {
    /** @deprecated use `Microfrontends$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Microfrontends, z.ZodTypeDef, unknown>;
    /** @deprecated use `Microfrontends$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Microfrontends$Outbound, z.ZodTypeDef, Microfrontends>;
    /** @deprecated use `Microfrontends$Outbound` instead. */
    type Outbound = Microfrontends$Outbound;
}
export declare function microfrontendsToJSON(microfrontends: Microfrontends): string;
export declare function microfrontendsFromJSON(jsonString: string): SafeParseResult<Microfrontends, SDKValidationError>;
/** @internal */
export declare const UserEventPayload148Project$inboundSchema: z.ZodType<UserEventPayload148Project, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayload148Project$Outbound = {
    id: string;
    name: string;
    microfrontends?: Microfrontends1$Outbound | Microfrontends2$Outbound | undefined;
};
/** @internal */
export declare const UserEventPayload148Project$outboundSchema: z.ZodType<UserEventPayload148Project$Outbound, z.ZodTypeDef, UserEventPayload148Project>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload148Project$ {
    /** @deprecated use `UserEventPayload148Project$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayload148Project, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayload148Project$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayload148Project$Outbound, z.ZodTypeDef, UserEventPayload148Project>;
    /** @deprecated use `UserEventPayload148Project$Outbound` instead. */
    type Outbound = UserEventPayload148Project$Outbound;
}
export declare function userEventPayload148ProjectToJSON(userEventPayload148Project: UserEventPayload148Project): string;
export declare function userEventPayload148ProjectFromJSON(jsonString: string): SafeParseResult<UserEventPayload148Project, SDKValidationError>;
/** @internal */
export declare const UserEventMicrofrontends2$inboundSchema: z.ZodType<UserEventMicrofrontends2, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventMicrofrontends2$Outbound = {
    updatedAt: number;
    groupIds: Array<any>;
    enabled: boolean;
};
/** @internal */
export declare const UserEventMicrofrontends2$outboundSchema: z.ZodType<UserEventMicrofrontends2$Outbound, z.ZodTypeDef, UserEventMicrofrontends2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventMicrofrontends2$ {
    /** @deprecated use `UserEventMicrofrontends2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventMicrofrontends2, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventMicrofrontends2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventMicrofrontends2$Outbound, z.ZodTypeDef, UserEventMicrofrontends2>;
    /** @deprecated use `UserEventMicrofrontends2$Outbound` instead. */
    type Outbound = UserEventMicrofrontends2$Outbound;
}
export declare function userEventMicrofrontends2ToJSON(userEventMicrofrontends2: UserEventMicrofrontends2): string;
export declare function userEventMicrofrontends2FromJSON(jsonString: string): SafeParseResult<UserEventMicrofrontends2, SDKValidationError>;
/** @internal */
export declare const UserEventMicrofrontends1$inboundSchema: z.ZodType<UserEventMicrofrontends1, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventMicrofrontends1$Outbound = {
    updatedAt: number;
    groupIds: Array<string>;
    enabled: boolean;
    isDefaultApp?: boolean | undefined;
    defaultRoute?: string | undefined;
    routeObservabilityToThisProject?: boolean | undefined;
};
/** @internal */
export declare const UserEventMicrofrontends1$outboundSchema: z.ZodType<UserEventMicrofrontends1$Outbound, z.ZodTypeDef, UserEventMicrofrontends1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventMicrofrontends1$ {
    /** @deprecated use `UserEventMicrofrontends1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventMicrofrontends1, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventMicrofrontends1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventMicrofrontends1$Outbound, z.ZodTypeDef, UserEventMicrofrontends1>;
    /** @deprecated use `UserEventMicrofrontends1$Outbound` instead. */
    type Outbound = UserEventMicrofrontends1$Outbound;
}
export declare function userEventMicrofrontends1ToJSON(userEventMicrofrontends1: UserEventMicrofrontends1): string;
export declare function userEventMicrofrontends1FromJSON(jsonString: string): SafeParseResult<UserEventMicrofrontends1, SDKValidationError>;
/** @internal */
export declare const PayloadMicrofrontends$inboundSchema: z.ZodType<PayloadMicrofrontends, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadMicrofrontends$Outbound = UserEventMicrofrontends1$Outbound | UserEventMicrofrontends2$Outbound;
/** @internal */
export declare const PayloadMicrofrontends$outboundSchema: z.ZodType<PayloadMicrofrontends$Outbound, z.ZodTypeDef, PayloadMicrofrontends>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadMicrofrontends$ {
    /** @deprecated use `PayloadMicrofrontends$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadMicrofrontends, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadMicrofrontends$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadMicrofrontends$Outbound, z.ZodTypeDef, PayloadMicrofrontends>;
    /** @deprecated use `PayloadMicrofrontends$Outbound` instead. */
    type Outbound = PayloadMicrofrontends$Outbound;
}
export declare function payloadMicrofrontendsToJSON(payloadMicrofrontends: PayloadMicrofrontends): string;
export declare function payloadMicrofrontendsFromJSON(jsonString: string): SafeParseResult<PayloadMicrofrontends, SDKValidationError>;
/** @internal */
export declare const UserEventPayload148PrevProject$inboundSchema: z.ZodType<UserEventPayload148PrevProject, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayload148PrevProject$Outbound = {
    microfrontends?: UserEventMicrofrontends1$Outbound | UserEventMicrofrontends2$Outbound | undefined;
};
/** @internal */
export declare const UserEventPayload148PrevProject$outboundSchema: z.ZodType<UserEventPayload148PrevProject$Outbound, z.ZodTypeDef, UserEventPayload148PrevProject>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload148PrevProject$ {
    /** @deprecated use `UserEventPayload148PrevProject$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayload148PrevProject, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayload148PrevProject$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayload148PrevProject$Outbound, z.ZodTypeDef, UserEventPayload148PrevProject>;
    /** @deprecated use `UserEventPayload148PrevProject$Outbound` instead. */
    type Outbound = UserEventPayload148PrevProject$Outbound;
}
export declare function userEventPayload148PrevProjectToJSON(userEventPayload148PrevProject: UserEventPayload148PrevProject): string;
export declare function userEventPayload148PrevProjectFromJSON(jsonString: string): SafeParseResult<UserEventPayload148PrevProject, SDKValidationError>;
/** @internal */
export declare const PayloadPrev$inboundSchema: z.ZodType<PayloadPrev, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadPrev$Outbound = {
    project: UserEventPayload148PrevProject$Outbound;
};
/** @internal */
export declare const PayloadPrev$outboundSchema: z.ZodType<PayloadPrev$Outbound, z.ZodTypeDef, PayloadPrev>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadPrev$ {
    /** @deprecated use `PayloadPrev$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadPrev, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadPrev$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadPrev$Outbound, z.ZodTypeDef, PayloadPrev>;
    /** @deprecated use `PayloadPrev$Outbound` instead. */
    type Outbound = PayloadPrev$Outbound;
}
export declare function payloadPrevToJSON(payloadPrev: PayloadPrev): string;
export declare function payloadPrevFromJSON(jsonString: string): SafeParseResult<PayloadPrev, SDKValidationError>;
/** @internal */
export declare const PayloadGroup$inboundSchema: z.ZodType<PayloadGroup, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadGroup$Outbound = {
    id: string;
    slug: string;
    name: string;
};
/** @internal */
export declare const PayloadGroup$outboundSchema: z.ZodType<PayloadGroup$Outbound, z.ZodTypeDef, PayloadGroup>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadGroup$ {
    /** @deprecated use `PayloadGroup$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadGroup, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadGroup$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadGroup$Outbound, z.ZodTypeDef, PayloadGroup>;
    /** @deprecated use `PayloadGroup$Outbound` instead. */
    type Outbound = PayloadGroup$Outbound;
}
export declare function payloadGroupToJSON(payloadGroup: PayloadGroup): string;
export declare function payloadGroupFromJSON(jsonString: string): SafeParseResult<PayloadGroup, SDKValidationError>;
/** @internal */
export declare const OneHundredAndFortyEight$inboundSchema: z.ZodType<OneHundredAndFortyEight, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndFortyEight$Outbound = {
    project: UserEventPayload148Project$Outbound;
    prev: PayloadPrev$Outbound;
    group: PayloadGroup$Outbound;
};
/** @internal */
export declare const OneHundredAndFortyEight$outboundSchema: z.ZodType<OneHundredAndFortyEight$Outbound, z.ZodTypeDef, OneHundredAndFortyEight>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndFortyEight$ {
    /** @deprecated use `OneHundredAndFortyEight$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndFortyEight, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndFortyEight$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndFortyEight$Outbound, z.ZodTypeDef, OneHundredAndFortyEight>;
    /** @deprecated use `OneHundredAndFortyEight$Outbound` instead. */
    type Outbound = OneHundredAndFortyEight$Outbound;
}
export declare function oneHundredAndFortyEightToJSON(oneHundredAndFortyEight: OneHundredAndFortyEight): string;
export declare function oneHundredAndFortyEightFromJSON(jsonString: string): SafeParseResult<OneHundredAndFortyEight, SDKValidationError>;
/** @internal */
export declare const UserEventPayload147Project$inboundSchema: z.ZodType<UserEventPayload147Project, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayload147Project$Outbound = {
    id: string;
    name: string;
};
/** @internal */
export declare const UserEventPayload147Project$outboundSchema: z.ZodType<UserEventPayload147Project$Outbound, z.ZodTypeDef, UserEventPayload147Project>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload147Project$ {
    /** @deprecated use `UserEventPayload147Project$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayload147Project, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayload147Project$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayload147Project$Outbound, z.ZodTypeDef, UserEventPayload147Project>;
    /** @deprecated use `UserEventPayload147Project$Outbound` instead. */
    type Outbound = UserEventPayload147Project$Outbound;
}
export declare function userEventPayload147ProjectToJSON(userEventPayload147Project: UserEventPayload147Project): string;
export declare function userEventPayload147ProjectFromJSON(jsonString: string): SafeParseResult<UserEventPayload147Project, SDKValidationError>;
/** @internal */
export declare const Group$inboundSchema: z.ZodType<Group, z.ZodTypeDef, unknown>;
/** @internal */
export type Group$Outbound = {
    id: string;
    slug: string;
    name: string;
};
/** @internal */
export declare const Group$outboundSchema: z.ZodType<Group$Outbound, z.ZodTypeDef, Group>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Group$ {
    /** @deprecated use `Group$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Group, z.ZodTypeDef, unknown>;
    /** @deprecated use `Group$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Group$Outbound, z.ZodTypeDef, Group>;
    /** @deprecated use `Group$Outbound` instead. */
    type Outbound = Group$Outbound;
}
export declare function groupToJSON(group: Group): string;
export declare function groupFromJSON(jsonString: string): SafeParseResult<Group, SDKValidationError>;
/** @internal */
export declare const OneHundredAndFortySeven$inboundSchema: z.ZodType<OneHundredAndFortySeven, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndFortySeven$Outbound = {
    project: UserEventPayload147Project$Outbound;
    group: Group$Outbound;
};
/** @internal */
export declare const OneHundredAndFortySeven$outboundSchema: z.ZodType<OneHundredAndFortySeven$Outbound, z.ZodTypeDef, OneHundredAndFortySeven>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndFortySeven$ {
    /** @deprecated use `OneHundredAndFortySeven$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndFortySeven, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndFortySeven$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndFortySeven$Outbound, z.ZodTypeDef, OneHundredAndFortySeven>;
    /** @deprecated use `OneHundredAndFortySeven$Outbound` instead. */
    type Outbound = OneHundredAndFortySeven$Outbound;
}
export declare function oneHundredAndFortySevenToJSON(oneHundredAndFortySeven: OneHundredAndFortySeven): string;
export declare function oneHundredAndFortySevenFromJSON(jsonString: string): SafeParseResult<OneHundredAndFortySeven, SDKValidationError>;
/** @internal */
export declare const Prev$inboundSchema: z.ZodType<Prev, z.ZodTypeDef, unknown>;
/** @internal */
export type Prev$Outbound = {
    name: string;
    slug: string;
    fallbackEnvironment: string;
};
/** @internal */
export declare const Prev$outboundSchema: z.ZodType<Prev$Outbound, z.ZodTypeDef, Prev>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Prev$ {
    /** @deprecated use `Prev$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Prev, z.ZodTypeDef, unknown>;
    /** @deprecated use `Prev$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Prev$Outbound, z.ZodTypeDef, Prev>;
    /** @deprecated use `Prev$Outbound` instead. */
    type Outbound = Prev$Outbound;
}
export declare function prevToJSON(prev: Prev): string;
export declare function prevFromJSON(jsonString: string): SafeParseResult<Prev, SDKValidationError>;
/** @internal */
export declare const OneHundredAndFortySix$inboundSchema: z.ZodType<OneHundredAndFortySix, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndFortySix$Outbound = {
    id: string;
    slug?: string | undefined;
    name?: string | undefined;
    fallbackEnvironment?: string | undefined;
    prev: Prev$Outbound;
};
/** @internal */
export declare const OneHundredAndFortySix$outboundSchema: z.ZodType<OneHundredAndFortySix$Outbound, z.ZodTypeDef, OneHundredAndFortySix>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndFortySix$ {
    /** @deprecated use `OneHundredAndFortySix$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndFortySix, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndFortySix$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndFortySix$Outbound, z.ZodTypeDef, OneHundredAndFortySix>;
    /** @deprecated use `OneHundredAndFortySix$Outbound` instead. */
    type Outbound = OneHundredAndFortySix$Outbound;
}
export declare function oneHundredAndFortySixToJSON(oneHundredAndFortySix: OneHundredAndFortySix): string;
export declare function oneHundredAndFortySixFromJSON(jsonString: string): SafeParseResult<OneHundredAndFortySix, SDKValidationError>;
/** @internal */
export declare const OneHundredAndFortyFive$inboundSchema: z.ZodType<OneHundredAndFortyFive, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndFortyFive$Outbound = {
    id: string;
    slug: string;
    name: string;
};
/** @internal */
export declare const OneHundredAndFortyFive$outboundSchema: z.ZodType<OneHundredAndFortyFive$Outbound, z.ZodTypeDef, OneHundredAndFortyFive>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndFortyFive$ {
    /** @deprecated use `OneHundredAndFortyFive$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndFortyFive, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndFortyFive$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndFortyFive$Outbound, z.ZodTypeDef, OneHundredAndFortyFive>;
    /** @deprecated use `OneHundredAndFortyFive$Outbound` instead. */
    type Outbound = OneHundredAndFortyFive$Outbound;
}
export declare function oneHundredAndFortyFiveToJSON(oneHundredAndFortyFive: OneHundredAndFortyFive): string;
export declare function oneHundredAndFortyFiveFromJSON(jsonString: string): SafeParseResult<OneHundredAndFortyFive, SDKValidationError>;
/** @internal */
export declare const UserEventPayload144Action$inboundSchema: z.ZodNativeEnum<typeof UserEventPayload144Action>;
/** @internal */
export declare const UserEventPayload144Action$outboundSchema: z.ZodNativeEnum<typeof UserEventPayload144Action>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload144Action$ {
    /** @deprecated use `UserEventPayload144Action$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Enable: "enable";
        readonly Disable: "disable";
    }>;
    /** @deprecated use `UserEventPayload144Action$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Enable: "enable";
        readonly Disable: "disable";
    }>;
}
/** @internal */
export declare const OneHundredAndFortyFour$inboundSchema: z.ZodType<OneHundredAndFortyFour, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndFortyFour$Outbound = {
    action: string;
};
/** @internal */
export declare const OneHundredAndFortyFour$outboundSchema: z.ZodType<OneHundredAndFortyFour$Outbound, z.ZodTypeDef, OneHundredAndFortyFour>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndFortyFour$ {
    /** @deprecated use `OneHundredAndFortyFour$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndFortyFour, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndFortyFour$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndFortyFour$Outbound, z.ZodTypeDef, OneHundredAndFortyFour>;
    /** @deprecated use `OneHundredAndFortyFour$Outbound` instead. */
    type Outbound = OneHundredAndFortyFour$Outbound;
}
export declare function oneHundredAndFortyFourToJSON(oneHundredAndFortyFour: OneHundredAndFortyFour): string;
export declare function oneHundredAndFortyFourFromJSON(jsonString: string): SafeParseResult<OneHundredAndFortyFour, SDKValidationError>;
/** @internal */
export declare const OneHundredAndFortyThree$inboundSchema: z.ZodType<OneHundredAndFortyThree, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndFortyThree$Outbound = {
    edgeConfigId: string;
    edgeConfigSlug: string;
    edgeConfigTokenIds: Array<string>;
};
/** @internal */
export declare const OneHundredAndFortyThree$outboundSchema: z.ZodType<OneHundredAndFortyThree$Outbound, z.ZodTypeDef, OneHundredAndFortyThree>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndFortyThree$ {
    /** @deprecated use `OneHundredAndFortyThree$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndFortyThree, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndFortyThree$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndFortyThree$Outbound, z.ZodTypeDef, OneHundredAndFortyThree>;
    /** @deprecated use `OneHundredAndFortyThree$Outbound` instead. */
    type Outbound = OneHundredAndFortyThree$Outbound;
}
export declare function oneHundredAndFortyThreeToJSON(oneHundredAndFortyThree: OneHundredAndFortyThree): string;
export declare function oneHundredAndFortyThreeFromJSON(jsonString: string): SafeParseResult<OneHundredAndFortyThree, SDKValidationError>;
/** @internal */
export declare const OneHundredAndFortyTwo$inboundSchema: z.ZodType<OneHundredAndFortyTwo, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndFortyTwo$Outbound = {
    edgeConfigId: string;
    edgeConfigSlug: string;
    edgeConfigTokenId: string;
    label: string;
};
/** @internal */
export declare const OneHundredAndFortyTwo$outboundSchema: z.ZodType<OneHundredAndFortyTwo$Outbound, z.ZodTypeDef, OneHundredAndFortyTwo>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndFortyTwo$ {
    /** @deprecated use `OneHundredAndFortyTwo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndFortyTwo, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndFortyTwo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndFortyTwo$Outbound, z.ZodTypeDef, OneHundredAndFortyTwo>;
    /** @deprecated use `OneHundredAndFortyTwo$Outbound` instead. */
    type Outbound = OneHundredAndFortyTwo$Outbound;
}
export declare function oneHundredAndFortyTwoToJSON(oneHundredAndFortyTwo: OneHundredAndFortyTwo): string;
export declare function oneHundredAndFortyTwoFromJSON(jsonString: string): SafeParseResult<OneHundredAndFortyTwo, SDKValidationError>;
/** @internal */
export declare const OneHundredAndFortyOne$inboundSchema: z.ZodType<OneHundredAndFortyOne, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndFortyOne$Outbound = {
    edgeConfigId: string;
    edgeConfigSlug: string;
    edgeConfigDigest: string;
};
/** @internal */
export declare const OneHundredAndFortyOne$outboundSchema: z.ZodType<OneHundredAndFortyOne$Outbound, z.ZodTypeDef, OneHundredAndFortyOne>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndFortyOne$ {
    /** @deprecated use `OneHundredAndFortyOne$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndFortyOne, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndFortyOne$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndFortyOne$Outbound, z.ZodTypeDef, OneHundredAndFortyOne>;
    /** @deprecated use `OneHundredAndFortyOne$Outbound` instead. */
    type Outbound = OneHundredAndFortyOne$Outbound;
}
export declare function oneHundredAndFortyOneToJSON(oneHundredAndFortyOne: OneHundredAndFortyOne): string;
export declare function oneHundredAndFortyOneFromJSON(jsonString: string): SafeParseResult<OneHundredAndFortyOne, SDKValidationError>;
/** @internal */
export declare const OneHundredAndForty$inboundSchema: z.ZodType<OneHundredAndForty, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndForty$Outbound = {
    projectName: string;
    urls: Array<string>;
};
/** @internal */
export declare const OneHundredAndForty$outboundSchema: z.ZodType<OneHundredAndForty$Outbound, z.ZodTypeDef, OneHundredAndForty>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndForty$ {
    /** @deprecated use `OneHundredAndForty$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndForty, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndForty$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndForty$Outbound, z.ZodTypeDef, OneHundredAndForty>;
    /** @deprecated use `OneHundredAndForty$Outbound` instead. */
    type Outbound = OneHundredAndForty$Outbound;
}
export declare function oneHundredAndFortyToJSON(oneHundredAndForty: OneHundredAndForty): string;
export declare function oneHundredAndFortyFromJSON(jsonString: string): SafeParseResult<OneHundredAndForty, SDKValidationError>;
/** @internal */
export declare const OneHundredAndThirtyNine$inboundSchema: z.ZodType<OneHundredAndThirtyNine, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndThirtyNine$Outbound = {
    projectName: string;
    tags: Array<string>;
    target?: string | undefined;
};
/** @internal */
export declare const OneHundredAndThirtyNine$outboundSchema: z.ZodType<OneHundredAndThirtyNine$Outbound, z.ZodTypeDef, OneHundredAndThirtyNine>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndThirtyNine$ {
    /** @deprecated use `OneHundredAndThirtyNine$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndThirtyNine, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndThirtyNine$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndThirtyNine$Outbound, z.ZodTypeDef, OneHundredAndThirtyNine>;
    /** @deprecated use `OneHundredAndThirtyNine$Outbound` instead. */
    type Outbound = OneHundredAndThirtyNine$Outbound;
}
export declare function oneHundredAndThirtyNineToJSON(oneHundredAndThirtyNine: OneHundredAndThirtyNine): string;
export declare function oneHundredAndThirtyNineFromJSON(jsonString: string): SafeParseResult<OneHundredAndThirtyNine, SDKValidationError>;
/** @internal */
export declare const UserEventPayload138Role$inboundSchema: z.ZodNativeEnum<typeof UserEventPayload138Role>;
/** @internal */
export declare const UserEventPayload138Role$outboundSchema: z.ZodNativeEnum<typeof UserEventPayload138Role>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload138Role$ {
    /** @deprecated use `UserEventPayload138Role$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Admin: "ADMIN";
        readonly ProjectDeveloper: "PROJECT_DEVELOPER";
        readonly ProjectViewer: "PROJECT_VIEWER";
    }>;
    /** @deprecated use `UserEventPayload138Role$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Admin: "ADMIN";
        readonly ProjectDeveloper: "PROJECT_DEVELOPER";
        readonly ProjectViewer: "PROJECT_VIEWER";
    }>;
}
/** @internal */
export declare const UserEventPayload138Project$inboundSchema: z.ZodType<UserEventPayload138Project, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayload138Project$Outbound = {
    name: string;
    role: string;
    invitedUserName: string;
    id?: string | undefined;
    invitedUserId?: string | undefined;
};
/** @internal */
export declare const UserEventPayload138Project$outboundSchema: z.ZodType<UserEventPayload138Project$Outbound, z.ZodTypeDef, UserEventPayload138Project>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload138Project$ {
    /** @deprecated use `UserEventPayload138Project$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayload138Project, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayload138Project$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayload138Project$Outbound, z.ZodTypeDef, UserEventPayload138Project>;
    /** @deprecated use `UserEventPayload138Project$Outbound` instead. */
    type Outbound = UserEventPayload138Project$Outbound;
}
export declare function userEventPayload138ProjectToJSON(userEventPayload138Project: UserEventPayload138Project): string;
export declare function userEventPayload138ProjectFromJSON(jsonString: string): SafeParseResult<UserEventPayload138Project, SDKValidationError>;
/** @internal */
export declare const OneHundredAndThirtyEight$inboundSchema: z.ZodType<OneHundredAndThirtyEight, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndThirtyEight$Outbound = {
    project: UserEventPayload138Project$Outbound;
};
/** @internal */
export declare const OneHundredAndThirtyEight$outboundSchema: z.ZodType<OneHundredAndThirtyEight$Outbound, z.ZodTypeDef, OneHundredAndThirtyEight>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndThirtyEight$ {
    /** @deprecated use `OneHundredAndThirtyEight$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndThirtyEight, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndThirtyEight$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndThirtyEight$Outbound, z.ZodTypeDef, OneHundredAndThirtyEight>;
    /** @deprecated use `OneHundredAndThirtyEight$Outbound` instead. */
    type Outbound = OneHundredAndThirtyEight$Outbound;
}
export declare function oneHundredAndThirtyEightToJSON(oneHundredAndThirtyEight: OneHundredAndThirtyEight): string;
export declare function oneHundredAndThirtyEightFromJSON(jsonString: string): SafeParseResult<OneHundredAndThirtyEight, SDKValidationError>;
/** @internal */
export declare const UserEventPayload137Project$inboundSchema: z.ZodType<UserEventPayload137Project, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayload137Project$Outbound = {
    id: string;
    name: string;
};
/** @internal */
export declare const UserEventPayload137Project$outboundSchema: z.ZodType<UserEventPayload137Project$Outbound, z.ZodTypeDef, UserEventPayload137Project>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload137Project$ {
    /** @deprecated use `UserEventPayload137Project$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayload137Project, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayload137Project$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayload137Project$Outbound, z.ZodTypeDef, UserEventPayload137Project>;
    /** @deprecated use `UserEventPayload137Project$Outbound` instead. */
    type Outbound = UserEventPayload137Project$Outbound;
}
export declare function userEventPayload137ProjectToJSON(userEventPayload137Project: UserEventPayload137Project): string;
export declare function userEventPayload137ProjectFromJSON(jsonString: string): SafeParseResult<UserEventPayload137Project, SDKValidationError>;
/** @internal */
export declare const UserEventPayload137Role$inboundSchema: z.ZodNativeEnum<typeof UserEventPayload137Role>;
/** @internal */
export declare const UserEventPayload137Role$outboundSchema: z.ZodNativeEnum<typeof UserEventPayload137Role>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload137Role$ {
    /** @deprecated use `UserEventPayload137Role$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Admin: "ADMIN";
        readonly ProjectDeveloper: "PROJECT_DEVELOPER";
        readonly ProjectViewer: "PROJECT_VIEWER";
    }>;
    /** @deprecated use `UserEventPayload137Role$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Admin: "ADMIN";
        readonly ProjectDeveloper: "PROJECT_DEVELOPER";
        readonly ProjectViewer: "PROJECT_VIEWER";
    }>;
}
/** @internal */
export declare const PayloadPreviousRole$inboundSchema: z.ZodNativeEnum<typeof PayloadPreviousRole>;
/** @internal */
export declare const PayloadPreviousRole$outboundSchema: z.ZodNativeEnum<typeof PayloadPreviousRole>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadPreviousRole$ {
    /** @deprecated use `PayloadPreviousRole$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Admin: "ADMIN";
        readonly ProjectDeveloper: "PROJECT_DEVELOPER";
        readonly ProjectViewer: "PROJECT_VIEWER";
    }>;
    /** @deprecated use `PayloadPreviousRole$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Admin: "ADMIN";
        readonly ProjectDeveloper: "PROJECT_DEVELOPER";
        readonly ProjectViewer: "PROJECT_VIEWER";
    }>;
}
/** @internal */
export declare const PayloadProjectMembership$inboundSchema: z.ZodType<PayloadProjectMembership, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadProjectMembership$Outbound = {
    role?: string | undefined;
    uid?: string | undefined;
    createdAt?: number | undefined;
    username?: string | undefined;
    previousRole?: string | undefined;
};
/** @internal */
export declare const PayloadProjectMembership$outboundSchema: z.ZodType<PayloadProjectMembership$Outbound, z.ZodTypeDef, PayloadProjectMembership>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadProjectMembership$ {
    /** @deprecated use `PayloadProjectMembership$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadProjectMembership, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadProjectMembership$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadProjectMembership$Outbound, z.ZodTypeDef, PayloadProjectMembership>;
    /** @deprecated use `PayloadProjectMembership$Outbound` instead. */
    type Outbound = PayloadProjectMembership$Outbound;
}
export declare function payloadProjectMembershipToJSON(payloadProjectMembership: PayloadProjectMembership): string;
export declare function payloadProjectMembershipFromJSON(jsonString: string): SafeParseResult<PayloadProjectMembership, SDKValidationError>;
/** @internal */
export declare const OneHundredAndThirtySeven$inboundSchema: z.ZodType<OneHundredAndThirtySeven, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndThirtySeven$Outbound = {
    project: UserEventPayload137Project$Outbound;
    projectMembership: PayloadProjectMembership$Outbound;
};
/** @internal */
export declare const OneHundredAndThirtySeven$outboundSchema: z.ZodType<OneHundredAndThirtySeven$Outbound, z.ZodTypeDef, OneHundredAndThirtySeven>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndThirtySeven$ {
    /** @deprecated use `OneHundredAndThirtySeven$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndThirtySeven, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndThirtySeven$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndThirtySeven$Outbound, z.ZodTypeDef, OneHundredAndThirtySeven>;
    /** @deprecated use `OneHundredAndThirtySeven$Outbound` instead. */
    type Outbound = OneHundredAndThirtySeven$Outbound;
}
export declare function oneHundredAndThirtySevenToJSON(oneHundredAndThirtySeven: OneHundredAndThirtySeven): string;
export declare function oneHundredAndThirtySevenFromJSON(jsonString: string): SafeParseResult<OneHundredAndThirtySeven, SDKValidationError>;
/** @internal */
export declare const UserEventPayload136Project$inboundSchema: z.ZodType<UserEventPayload136Project, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayload136Project$Outbound = {
    name: string;
    id?: string | undefined;
};
/** @internal */
export declare const UserEventPayload136Project$outboundSchema: z.ZodType<UserEventPayload136Project$Outbound, z.ZodTypeDef, UserEventPayload136Project>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload136Project$ {
    /** @deprecated use `UserEventPayload136Project$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayload136Project, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayload136Project$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayload136Project$Outbound, z.ZodTypeDef, UserEventPayload136Project>;
    /** @deprecated use `UserEventPayload136Project$Outbound` instead. */
    type Outbound = UserEventPayload136Project$Outbound;
}
export declare function userEventPayload136ProjectToJSON(userEventPayload136Project: UserEventPayload136Project): string;
export declare function userEventPayload136ProjectFromJSON(jsonString: string): SafeParseResult<UserEventPayload136Project, SDKValidationError>;
/** @internal */
export declare const UserEventPayloadRole$inboundSchema: z.ZodNativeEnum<typeof UserEventPayloadRole>;
/** @internal */
export declare const UserEventPayloadRole$outboundSchema: z.ZodNativeEnum<typeof UserEventPayloadRole>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayloadRole$ {
    /** @deprecated use `UserEventPayloadRole$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Admin: "ADMIN";
        readonly ProjectDeveloper: "PROJECT_DEVELOPER";
        readonly ProjectViewer: "PROJECT_VIEWER";
    }>;
    /** @deprecated use `UserEventPayloadRole$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Admin: "ADMIN";
        readonly ProjectDeveloper: "PROJECT_DEVELOPER";
        readonly ProjectViewer: "PROJECT_VIEWER";
    }>;
}
/** @internal */
export declare const RemovedMembership$inboundSchema: z.ZodType<RemovedMembership, z.ZodTypeDef, unknown>;
/** @internal */
export type RemovedMembership$Outbound = {
    role: string;
    uid: string;
    createdAt: number;
    username?: string | undefined;
};
/** @internal */
export declare const RemovedMembership$outboundSchema: z.ZodType<RemovedMembership$Outbound, z.ZodTypeDef, RemovedMembership>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RemovedMembership$ {
    /** @deprecated use `RemovedMembership$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RemovedMembership, z.ZodTypeDef, unknown>;
    /** @deprecated use `RemovedMembership$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RemovedMembership$Outbound, z.ZodTypeDef, RemovedMembership>;
    /** @deprecated use `RemovedMembership$Outbound` instead. */
    type Outbound = RemovedMembership$Outbound;
}
export declare function removedMembershipToJSON(removedMembership: RemovedMembership): string;
export declare function removedMembershipFromJSON(jsonString: string): SafeParseResult<RemovedMembership, SDKValidationError>;
/** @internal */
export declare const OneHundredAndThirtySix$inboundSchema: z.ZodType<OneHundredAndThirtySix, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndThirtySix$Outbound = {
    project: UserEventPayload136Project$Outbound;
    removedMembership: RemovedMembership$Outbound;
};
/** @internal */
export declare const OneHundredAndThirtySix$outboundSchema: z.ZodType<OneHundredAndThirtySix$Outbound, z.ZodTypeDef, OneHundredAndThirtySix>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndThirtySix$ {
    /** @deprecated use `OneHundredAndThirtySix$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndThirtySix, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndThirtySix$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndThirtySix$Outbound, z.ZodTypeDef, OneHundredAndThirtySix>;
    /** @deprecated use `OneHundredAndThirtySix$Outbound` instead. */
    type Outbound = OneHundredAndThirtySix$Outbound;
}
export declare function oneHundredAndThirtySixToJSON(oneHundredAndThirtySix: OneHundredAndThirtySix): string;
export declare function oneHundredAndThirtySixFromJSON(jsonString: string): SafeParseResult<OneHundredAndThirtySix, SDKValidationError>;
/** @internal */
export declare const UserEventPayload135Project$inboundSchema: z.ZodType<UserEventPayload135Project, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayload135Project$Outbound = {
    name: string;
    id?: string | undefined;
};
/** @internal */
export declare const UserEventPayload135Project$outboundSchema: z.ZodType<UserEventPayload135Project$Outbound, z.ZodTypeDef, UserEventPayload135Project>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload135Project$ {
    /** @deprecated use `UserEventPayload135Project$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayload135Project, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayload135Project$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayload135Project$Outbound, z.ZodTypeDef, UserEventPayload135Project>;
    /** @deprecated use `UserEventPayload135Project$Outbound` instead. */
    type Outbound = UserEventPayload135Project$Outbound;
}
export declare function userEventPayload135ProjectToJSON(userEventPayload135Project: UserEventPayload135Project): string;
export declare function userEventPayload135ProjectFromJSON(jsonString: string): SafeParseResult<UserEventPayload135Project, SDKValidationError>;
/** @internal */
export declare const PayloadRole$inboundSchema: z.ZodNativeEnum<typeof PayloadRole>;
/** @internal */
export declare const PayloadRole$outboundSchema: z.ZodNativeEnum<typeof PayloadRole>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadRole$ {
    /** @deprecated use `PayloadRole$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Admin: "ADMIN";
        readonly ProjectDeveloper: "PROJECT_DEVELOPER";
        readonly ProjectViewer: "PROJECT_VIEWER";
    }>;
    /** @deprecated use `PayloadRole$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Admin: "ADMIN";
        readonly ProjectDeveloper: "PROJECT_DEVELOPER";
        readonly ProjectViewer: "PROJECT_VIEWER";
    }>;
}
/** @internal */
export declare const ProjectMembership$inboundSchema: z.ZodType<ProjectMembership, z.ZodTypeDef, unknown>;
/** @internal */
export type ProjectMembership$Outbound = {
    role: string;
    uid: string;
    createdAt: number;
    username?: string | undefined;
};
/** @internal */
export declare const ProjectMembership$outboundSchema: z.ZodType<ProjectMembership$Outbound, z.ZodTypeDef, ProjectMembership>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ProjectMembership$ {
    /** @deprecated use `ProjectMembership$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ProjectMembership, z.ZodTypeDef, unknown>;
    /** @deprecated use `ProjectMembership$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ProjectMembership$Outbound, z.ZodTypeDef, ProjectMembership>;
    /** @deprecated use `ProjectMembership$Outbound` instead. */
    type Outbound = ProjectMembership$Outbound;
}
export declare function projectMembershipToJSON(projectMembership: ProjectMembership): string;
export declare function projectMembershipFromJSON(jsonString: string): SafeParseResult<ProjectMembership, SDKValidationError>;
/** @internal */
export declare const OneHundredAndThirtyFive$inboundSchema: z.ZodType<OneHundredAndThirtyFive, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndThirtyFive$Outbound = {
    project: UserEventPayload135Project$Outbound;
    projectMembership: ProjectMembership$Outbound | null;
};
/** @internal */
export declare const OneHundredAndThirtyFive$outboundSchema: z.ZodType<OneHundredAndThirtyFive$Outbound, z.ZodTypeDef, OneHundredAndThirtyFive>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndThirtyFive$ {
    /** @deprecated use `OneHundredAndThirtyFive$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndThirtyFive, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndThirtyFive$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndThirtyFive$Outbound, z.ZodTypeDef, OneHundredAndThirtyFive>;
    /** @deprecated use `OneHundredAndThirtyFive$Outbound` instead. */
    type Outbound = OneHundredAndThirtyFive$Outbound;
}
export declare function oneHundredAndThirtyFiveToJSON(oneHundredAndThirtyFive: OneHundredAndThirtyFive): string;
export declare function oneHundredAndThirtyFiveFromJSON(jsonString: string): SafeParseResult<OneHundredAndThirtyFive, SDKValidationError>;
/** @internal */
export declare const OneHundredAndThirtyFour$inboundSchema: z.ZodType<OneHundredAndThirtyFour, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndThirtyFour$Outbound = {
    previousProjectName: string;
    newProjectName: string;
    originAccountName: string;
    transferId?: string | undefined;
};
/** @internal */
export declare const OneHundredAndThirtyFour$outboundSchema: z.ZodType<OneHundredAndThirtyFour$Outbound, z.ZodTypeDef, OneHundredAndThirtyFour>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndThirtyFour$ {
    /** @deprecated use `OneHundredAndThirtyFour$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndThirtyFour, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndThirtyFour$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndThirtyFour$Outbound, z.ZodTypeDef, OneHundredAndThirtyFour>;
    /** @deprecated use `OneHundredAndThirtyFour$Outbound` instead. */
    type Outbound = OneHundredAndThirtyFour$Outbound;
}
export declare function oneHundredAndThirtyFourToJSON(oneHundredAndThirtyFour: OneHundredAndThirtyFour): string;
export declare function oneHundredAndThirtyFourFromJSON(jsonString: string): SafeParseResult<OneHundredAndThirtyFour, SDKValidationError>;
/** @internal */
export declare const OneHundredAndThirtyThree$inboundSchema: z.ZodType<OneHundredAndThirtyThree, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndThirtyThree$Outbound = {
    previousProjectName: string;
    newProjectName: string;
    destinationAccountName: string;
    transferId?: string | undefined;
};
/** @internal */
export declare const OneHundredAndThirtyThree$outboundSchema: z.ZodType<OneHundredAndThirtyThree$Outbound, z.ZodTypeDef, OneHundredAndThirtyThree>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndThirtyThree$ {
    /** @deprecated use `OneHundredAndThirtyThree$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndThirtyThree, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndThirtyThree$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndThirtyThree$Outbound, z.ZodTypeDef, OneHundredAndThirtyThree>;
    /** @deprecated use `OneHundredAndThirtyThree$Outbound` instead. */
    type Outbound = OneHundredAndThirtyThree$Outbound;
}
export declare function oneHundredAndThirtyThreeToJSON(oneHundredAndThirtyThree: OneHundredAndThirtyThree): string;
export declare function oneHundredAndThirtyThreeFromJSON(jsonString: string): SafeParseResult<OneHundredAndThirtyThree, SDKValidationError>;
/** @internal */
export declare const OneHundredAndThirtyTwo$inboundSchema: z.ZodType<OneHundredAndThirtyTwo, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndThirtyTwo$Outbound = {
    projectName: string;
    destinationAccountName: string | null;
    transferId?: string | undefined;
};
/** @internal */
export declare const OneHundredAndThirtyTwo$outboundSchema: z.ZodType<OneHundredAndThirtyTwo$Outbound, z.ZodTypeDef, OneHundredAndThirtyTwo>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndThirtyTwo$ {
    /** @deprecated use `OneHundredAndThirtyTwo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndThirtyTwo, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndThirtyTwo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndThirtyTwo$Outbound, z.ZodTypeDef, OneHundredAndThirtyTwo>;
    /** @deprecated use `OneHundredAndThirtyTwo$Outbound` instead. */
    type Outbound = OneHundredAndThirtyTwo$Outbound;
}
export declare function oneHundredAndThirtyTwoToJSON(oneHundredAndThirtyTwo: OneHundredAndThirtyTwo): string;
export declare function oneHundredAndThirtyTwoFromJSON(jsonString: string): SafeParseResult<OneHundredAndThirtyTwo, SDKValidationError>;
/** @internal */
export declare const OneHundredAndThirtyOne$inboundSchema: z.ZodType<OneHundredAndThirtyOne, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndThirtyOne$Outbound = {
    projectId: string;
    projectName: string;
    originAccountName: string;
    destinationAccountName: string;
    destinationAccountId: string;
    transferId?: string | undefined;
};
/** @internal */
export declare const OneHundredAndThirtyOne$outboundSchema: z.ZodType<OneHundredAndThirtyOne$Outbound, z.ZodTypeDef, OneHundredAndThirtyOne>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndThirtyOne$ {
    /** @deprecated use `OneHundredAndThirtyOne$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndThirtyOne, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndThirtyOne$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndThirtyOne$Outbound, z.ZodTypeDef, OneHundredAndThirtyOne>;
    /** @deprecated use `OneHundredAndThirtyOne$Outbound` instead. */
    type Outbound = OneHundredAndThirtyOne$Outbound;
}
export declare function oneHundredAndThirtyOneToJSON(oneHundredAndThirtyOne: OneHundredAndThirtyOne): string;
export declare function oneHundredAndThirtyOneFromJSON(jsonString: string): SafeParseResult<OneHundredAndThirtyOne, SDKValidationError>;
/** @internal */
export declare const OneHundredAndThirty$inboundSchema: z.ZodType<OneHundredAndThirty, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndThirty$Outbound = {
    requestedTeamName: string;
    requestedUserName?: string | undefined;
    gitUsername?: string | undefined;
    githubUsername?: string | undefined;
    gitlabUsername?: string | undefined;
    bitbucketUsername?: string | undefined;
};
/** @internal */
export declare const OneHundredAndThirty$outboundSchema: z.ZodType<OneHundredAndThirty$Outbound, z.ZodTypeDef, OneHundredAndThirty>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndThirty$ {
    /** @deprecated use `OneHundredAndThirty$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndThirty, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndThirty$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndThirty$Outbound, z.ZodTypeDef, OneHundredAndThirty>;
    /** @deprecated use `OneHundredAndThirty$Outbound` instead. */
    type Outbound = OneHundredAndThirty$Outbound;
}
export declare function oneHundredAndThirtyToJSON(oneHundredAndThirty: OneHundredAndThirty): string;
export declare function oneHundredAndThirtyFromJSON(jsonString: string): SafeParseResult<OneHundredAndThirty, SDKValidationError>;
/** @internal */
export declare const OneHundredAndTwentyNine$inboundSchema: z.ZodType<OneHundredAndTwentyNine, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndTwentyNine$Outbound = {
    teamName: string;
    username?: string | undefined;
    gitUsername?: string | null | undefined;
    githubUsername?: string | null | undefined;
    gitlabUsername?: string | null | undefined;
    bitbucketUsername?: string | null | undefined;
};
/** @internal */
export declare const OneHundredAndTwentyNine$outboundSchema: z.ZodType<OneHundredAndTwentyNine$Outbound, z.ZodTypeDef, OneHundredAndTwentyNine>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndTwentyNine$ {
    /** @deprecated use `OneHundredAndTwentyNine$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndTwentyNine, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndTwentyNine$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndTwentyNine$Outbound, z.ZodTypeDef, OneHundredAndTwentyNine>;
    /** @deprecated use `OneHundredAndTwentyNine$Outbound` instead. */
    type Outbound = OneHundredAndTwentyNine$Outbound;
}
export declare function oneHundredAndTwentyNineToJSON(oneHundredAndTwentyNine: OneHundredAndTwentyNine): string;
export declare function oneHundredAndTwentyNineFromJSON(jsonString: string): SafeParseResult<OneHundredAndTwentyNine, SDKValidationError>;
/** @internal */
export declare const OneHundredAndTwentyEight$inboundSchema: z.ZodType<OneHundredAndTwentyEight, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndTwentyEight$Outbound = {
    teamName: string;
    username?: string | undefined;
    gitUsername?: string | undefined;
    githubUsername?: string | null | undefined;
    gitlabUsername?: string | null | undefined;
    bitbucketUsername?: string | null | undefined;
    updatedUid?: string | undefined;
    teamId?: string | undefined;
};
/** @internal */
export declare const OneHundredAndTwentyEight$outboundSchema: z.ZodType<OneHundredAndTwentyEight$Outbound, z.ZodTypeDef, OneHundredAndTwentyEight>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndTwentyEight$ {
    /** @deprecated use `OneHundredAndTwentyEight$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndTwentyEight, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndTwentyEight$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndTwentyEight$Outbound, z.ZodTypeDef, OneHundredAndTwentyEight>;
    /** @deprecated use `OneHundredAndTwentyEight$Outbound` instead. */
    type Outbound = OneHundredAndTwentyEight$Outbound;
}
export declare function oneHundredAndTwentyEightToJSON(oneHundredAndTwentyEight: OneHundredAndTwentyEight): string;
export declare function oneHundredAndTwentyEightFromJSON(jsonString: string): SafeParseResult<OneHundredAndTwentyEight, SDKValidationError>;
/** @internal */
export declare const OneHundredAndTwentySeven$inboundSchema: z.ZodType<OneHundredAndTwentySeven, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndTwentySeven$Outbound = {
    price?: number | undefined;
    currency?: string | undefined;
};
/** @internal */
export declare const OneHundredAndTwentySeven$outboundSchema: z.ZodType<OneHundredAndTwentySeven$Outbound, z.ZodTypeDef, OneHundredAndTwentySeven>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndTwentySeven$ {
    /** @deprecated use `OneHundredAndTwentySeven$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndTwentySeven, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndTwentySeven$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndTwentySeven$Outbound, z.ZodTypeDef, OneHundredAndTwentySeven>;
    /** @deprecated use `OneHundredAndTwentySeven$Outbound` instead. */
    type Outbound = OneHundredAndTwentySeven$Outbound;
}
export declare function oneHundredAndTwentySevenToJSON(oneHundredAndTwentySeven: OneHundredAndTwentySeven): string;
export declare function oneHundredAndTwentySevenFromJSON(jsonString: string): SafeParseResult<OneHundredAndTwentySeven, SDKValidationError>;
/** @internal */
export declare const OneHundredAndTwentySix$inboundSchema: z.ZodType<OneHundredAndTwentySix, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndTwentySix$Outbound = {
    previewDeploymentSuffix?: string | null | undefined;
    previousPreviewDeploymentSuffix?: string | null | undefined;
};
/** @internal */
export declare const OneHundredAndTwentySix$outboundSchema: z.ZodType<OneHundredAndTwentySix$Outbound, z.ZodTypeDef, OneHundredAndTwentySix>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndTwentySix$ {
    /** @deprecated use `OneHundredAndTwentySix$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndTwentySix, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndTwentySix$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndTwentySix$Outbound, z.ZodTypeDef, OneHundredAndTwentySix>;
    /** @deprecated use `OneHundredAndTwentySix$Outbound` instead. */
    type Outbound = OneHundredAndTwentySix$Outbound;
}
export declare function oneHundredAndTwentySixToJSON(oneHundredAndTwentySix: OneHundredAndTwentySix): string;
export declare function oneHundredAndTwentySixFromJSON(jsonString: string): SafeParseResult<OneHundredAndTwentySix, SDKValidationError>;
/** @internal */
export declare const OneHundredAndTwentyFive$inboundSchema: z.ZodType<OneHundredAndTwentyFive, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndTwentyFive$Outbound = {
    price?: number | undefined;
    currency?: string | undefined;
    enabled?: boolean | undefined;
};
/** @internal */
export declare const OneHundredAndTwentyFive$outboundSchema: z.ZodType<OneHundredAndTwentyFive$Outbound, z.ZodTypeDef, OneHundredAndTwentyFive>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndTwentyFive$ {
    /** @deprecated use `OneHundredAndTwentyFive$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndTwentyFive, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndTwentyFive$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndTwentyFive$Outbound, z.ZodTypeDef, OneHundredAndTwentyFive>;
    /** @deprecated use `OneHundredAndTwentyFive$Outbound` instead. */
    type Outbound = OneHundredAndTwentyFive$Outbound;
}
export declare function oneHundredAndTwentyFiveToJSON(oneHundredAndTwentyFive: OneHundredAndTwentyFive): string;
export declare function oneHundredAndTwentyFiveFromJSON(jsonString: string): SafeParseResult<OneHundredAndTwentyFive, SDKValidationError>;
/** @internal */
export declare const OneHundredAndTwentyFour$inboundSchema: z.ZodType<OneHundredAndTwentyFour, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndTwentyFour$Outbound = {
    username: string;
};
/** @internal */
export declare const OneHundredAndTwentyFour$outboundSchema: z.ZodType<OneHundredAndTwentyFour$Outbound, z.ZodTypeDef, OneHundredAndTwentyFour>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndTwentyFour$ {
    /** @deprecated use `OneHundredAndTwentyFour$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndTwentyFour, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndTwentyFour$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndTwentyFour$Outbound, z.ZodTypeDef, OneHundredAndTwentyFour>;
    /** @deprecated use `OneHundredAndTwentyFour$Outbound` instead. */
    type Outbound = OneHundredAndTwentyFour$Outbound;
}
export declare function oneHundredAndTwentyFourToJSON(oneHundredAndTwentyFour: OneHundredAndTwentyFour): string;
export declare function oneHundredAndTwentyFourFromJSON(jsonString: string): SafeParseResult<OneHundredAndTwentyFour, SDKValidationError>;
/** @internal */
export declare const OneHundredAndTwentyThree$inboundSchema: z.ZodType<OneHundredAndTwentyThree, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndTwentyThree$Outbound = {
    email: string;
    prevEmail: string;
};
/** @internal */
export declare const OneHundredAndTwentyThree$outboundSchema: z.ZodType<OneHundredAndTwentyThree$Outbound, z.ZodTypeDef, OneHundredAndTwentyThree>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndTwentyThree$ {
    /** @deprecated use `OneHundredAndTwentyThree$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndTwentyThree, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndTwentyThree$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndTwentyThree$Outbound, z.ZodTypeDef, OneHundredAndTwentyThree>;
    /** @deprecated use `OneHundredAndTwentyThree$Outbound` instead. */
    type Outbound = OneHundredAndTwentyThree$Outbound;
}
export declare function oneHundredAndTwentyThreeToJSON(oneHundredAndTwentyThree: OneHundredAndTwentyThree): string;
export declare function oneHundredAndTwentyThreeFromJSON(jsonString: string): SafeParseResult<OneHundredAndTwentyThree, SDKValidationError>;
/** @internal */
export declare const OneHundredAndTwentyTwo$inboundSchema: z.ZodType<OneHundredAndTwentyTwo, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndTwentyTwo$Outbound = {
    mfaEnabled: boolean;
};
/** @internal */
export declare const OneHundredAndTwentyTwo$outboundSchema: z.ZodType<OneHundredAndTwentyTwo$Outbound, z.ZodTypeDef, OneHundredAndTwentyTwo>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndTwentyTwo$ {
    /** @deprecated use `OneHundredAndTwentyTwo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndTwentyTwo, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndTwentyTwo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndTwentyTwo$Outbound, z.ZodTypeDef, OneHundredAndTwentyTwo>;
    /** @deprecated use `OneHundredAndTwentyTwo$Outbound` instead. */
    type Outbound = OneHundredAndTwentyTwo$Outbound;
}
export declare function oneHundredAndTwentyTwoToJSON(oneHundredAndTwentyTwo: OneHundredAndTwentyTwo): string;
export declare function oneHundredAndTwentyTwoFromJSON(jsonString: string): SafeParseResult<OneHundredAndTwentyTwo, SDKValidationError>;
/** @internal */
export declare const OneHundredAndTwentyOne$inboundSchema: z.ZodType<OneHundredAndTwentyOne, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndTwentyOne$Outbound = {
    enabled: boolean;
    totpVerified: boolean;
};
/** @internal */
export declare const OneHundredAndTwentyOne$outboundSchema: z.ZodType<OneHundredAndTwentyOne$Outbound, z.ZodTypeDef, OneHundredAndTwentyOne>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndTwentyOne$ {
    /** @deprecated use `OneHundredAndTwentyOne$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndTwentyOne, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndTwentyOne$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndTwentyOne$Outbound, z.ZodTypeDef, OneHundredAndTwentyOne>;
    /** @deprecated use `OneHundredAndTwentyOne$Outbound` instead. */
    type Outbound = OneHundredAndTwentyOne$Outbound;
}
export declare function oneHundredAndTwentyOneToJSON(oneHundredAndTwentyOne: OneHundredAndTwentyOne): string;
export declare function oneHundredAndTwentyOneFromJSON(jsonString: string): SafeParseResult<OneHundredAndTwentyOne, SDKValidationError>;
/** @internal */
export declare const Previous$inboundSchema: z.ZodType<Previous, z.ZodTypeDef, unknown>;
/** @internal */
export type Previous$Outbound = {
    enabled: boolean;
    totpVerified: boolean;
};
/** @internal */
export declare const Previous$outboundSchema: z.ZodType<Previous$Outbound, z.ZodTypeDef, Previous>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Previous$ {
    /** @deprecated use `Previous$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Previous, z.ZodTypeDef, unknown>;
    /** @deprecated use `Previous$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Previous$Outbound, z.ZodTypeDef, Previous>;
    /** @deprecated use `Previous$Outbound` instead. */
    type Outbound = Previous$Outbound;
}
export declare function previousToJSON(previous: Previous): string;
export declare function previousFromJSON(jsonString: string): SafeParseResult<Previous, SDKValidationError>;
/** @internal */
export declare const Next$inboundSchema: z.ZodType<Next, z.ZodTypeDef, unknown>;
/** @internal */
export type Next$Outbound = {
    enabled: boolean;
    totpVerified: boolean;
};
/** @internal */
export declare const Next$outboundSchema: z.ZodType<Next$Outbound, z.ZodTypeDef, Next>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Next$ {
    /** @deprecated use `Next$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Next, z.ZodTypeDef, unknown>;
    /** @deprecated use `Next$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Next$Outbound, z.ZodTypeDef, Next>;
    /** @deprecated use `Next$Outbound` instead. */
    type Outbound = Next$Outbound;
}
export declare function nextToJSON(next: Next): string;
export declare function nextFromJSON(jsonString: string): SafeParseResult<Next, SDKValidationError>;
/** @internal */
export declare const OneHundredAndTwenty$inboundSchema: z.ZodType<OneHundredAndTwenty, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndTwenty$Outbound = {
    previous: Previous$Outbound;
    next: Next$Outbound;
};
/** @internal */
export declare const OneHundredAndTwenty$outboundSchema: z.ZodType<OneHundredAndTwenty$Outbound, z.ZodTypeDef, OneHundredAndTwenty>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndTwenty$ {
    /** @deprecated use `OneHundredAndTwenty$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndTwenty, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndTwenty$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndTwenty$Outbound, z.ZodTypeDef, OneHundredAndTwenty>;
    /** @deprecated use `OneHundredAndTwenty$Outbound` instead. */
    type Outbound = OneHundredAndTwenty$Outbound;
}
export declare function oneHundredAndTwentyToJSON(oneHundredAndTwenty: OneHundredAndTwenty): string;
export declare function oneHundredAndTwentyFromJSON(jsonString: string): SafeParseResult<OneHundredAndTwenty, SDKValidationError>;
/** @internal */
export declare const PayloadRemoteCaching$inboundSchema: z.ZodType<PayloadRemoteCaching, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadRemoteCaching$Outbound = {
    enabled?: boolean | undefined;
};
/** @internal */
export declare const PayloadRemoteCaching$outboundSchema: z.ZodType<PayloadRemoteCaching$Outbound, z.ZodTypeDef, PayloadRemoteCaching>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadRemoteCaching$ {
    /** @deprecated use `PayloadRemoteCaching$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadRemoteCaching, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadRemoteCaching$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadRemoteCaching$Outbound, z.ZodTypeDef, PayloadRemoteCaching>;
    /** @deprecated use `PayloadRemoteCaching$Outbound` instead. */
    type Outbound = PayloadRemoteCaching$Outbound;
}
export declare function payloadRemoteCachingToJSON(payloadRemoteCaching: PayloadRemoteCaching): string;
export declare function payloadRemoteCachingFromJSON(jsonString: string): SafeParseResult<PayloadRemoteCaching, SDKValidationError>;
/** @internal */
export declare const OneHundredAndNineteen$inboundSchema: z.ZodType<OneHundredAndNineteen, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndNineteen$Outbound = {
    remoteCaching?: PayloadRemoteCaching$Outbound | undefined;
};
/** @internal */
export declare const OneHundredAndNineteen$outboundSchema: z.ZodType<OneHundredAndNineteen$Outbound, z.ZodTypeDef, OneHundredAndNineteen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndNineteen$ {
    /** @deprecated use `OneHundredAndNineteen$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndNineteen, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndNineteen$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndNineteen$Outbound, z.ZodTypeDef, OneHundredAndNineteen>;
    /** @deprecated use `OneHundredAndNineteen$Outbound` instead. */
    type Outbound = OneHundredAndNineteen$Outbound;
}
export declare function oneHundredAndNineteenToJSON(oneHundredAndNineteen: OneHundredAndNineteen): string;
export declare function oneHundredAndNineteenFromJSON(jsonString: string): SafeParseResult<OneHundredAndNineteen, SDKValidationError>;
/** @internal */
export declare const OneHundredAndEighteen$inboundSchema: z.ZodType<OneHundredAndEighteen, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndEighteen$Outbound = {
    slug?: string | undefined;
};
/** @internal */
export declare const OneHundredAndEighteen$outboundSchema: z.ZodType<OneHundredAndEighteen$Outbound, z.ZodTypeDef, OneHundredAndEighteen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndEighteen$ {
    /** @deprecated use `OneHundredAndEighteen$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndEighteen, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndEighteen$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndEighteen$Outbound, z.ZodTypeDef, OneHundredAndEighteen>;
    /** @deprecated use `OneHundredAndEighteen$Outbound` instead. */
    type Outbound = OneHundredAndEighteen$Outbound;
}
export declare function oneHundredAndEighteenToJSON(oneHundredAndEighteen: OneHundredAndEighteen): string;
export declare function oneHundredAndEighteenFromJSON(jsonString: string): SafeParseResult<OneHundredAndEighteen, SDKValidationError>;
/** @internal */
export declare const OneHundredAndSeventeen$inboundSchema: z.ZodType<OneHundredAndSeventeen, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndSeventeen$Outbound = {
    name?: string | undefined;
};
/** @internal */
export declare const OneHundredAndSeventeen$outboundSchema: z.ZodType<OneHundredAndSeventeen$Outbound, z.ZodTypeDef, OneHundredAndSeventeen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndSeventeen$ {
    /** @deprecated use `OneHundredAndSeventeen$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndSeventeen, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndSeventeen$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndSeventeen$Outbound, z.ZodTypeDef, OneHundredAndSeventeen>;
    /** @deprecated use `OneHundredAndSeventeen$Outbound` instead. */
    type Outbound = OneHundredAndSeventeen$Outbound;
}
export declare function oneHundredAndSeventeenToJSON(oneHundredAndSeventeen: OneHundredAndSeventeen): string;
export declare function oneHundredAndSeventeenFromJSON(jsonString: string): SafeParseResult<OneHundredAndSeventeen, SDKValidationError>;
/** @internal */
export declare const OneHundredAndSixteen$inboundSchema: z.ZodType<OneHundredAndSixteen, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndSixteen$Outbound = {
    enforced: boolean;
};
/** @internal */
export declare const OneHundredAndSixteen$outboundSchema: z.ZodType<OneHundredAndSixteen$Outbound, z.ZodTypeDef, OneHundredAndSixteen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndSixteen$ {
    /** @deprecated use `OneHundredAndSixteen$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndSixteen, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndSixteen$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndSixteen$Outbound, z.ZodTypeDef, OneHundredAndSixteen>;
    /** @deprecated use `OneHundredAndSixteen$Outbound` instead. */
    type Outbound = OneHundredAndSixteen$Outbound;
}
export declare function oneHundredAndSixteenToJSON(oneHundredAndSixteen: OneHundredAndSixteen): string;
export declare function oneHundredAndSixteenFromJSON(jsonString: string): SafeParseResult<OneHundredAndSixteen, SDKValidationError>;
/** @internal */
export declare const UserEventPayload115User$inboundSchema: z.ZodType<UserEventPayload115User, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayload115User$Outbound = {
    id: string;
    username: string;
};
/** @internal */
export declare const UserEventPayload115User$outboundSchema: z.ZodType<UserEventPayload115User$Outbound, z.ZodTypeDef, UserEventPayload115User>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload115User$ {
    /** @deprecated use `UserEventPayload115User$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayload115User, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayload115User$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayload115User$Outbound, z.ZodTypeDef, UserEventPayload115User>;
    /** @deprecated use `UserEventPayload115User$Outbound` instead. */
    type Outbound = UserEventPayload115User$Outbound;
}
export declare function userEventPayload115UserToJSON(userEventPayload115User: UserEventPayload115User): string;
export declare function userEventPayload115UserFromJSON(jsonString: string): SafeParseResult<UserEventPayload115User, SDKValidationError>;
/** @internal */
export declare const OneHundredAndFifteen$inboundSchema: z.ZodType<OneHundredAndFifteen, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndFifteen$Outbound = {
    entitlement: string;
    user: UserEventPayload115User$Outbound;
    previousCanceledAt?: string | undefined;
};
/** @internal */
export declare const OneHundredAndFifteen$outboundSchema: z.ZodType<OneHundredAndFifteen$Outbound, z.ZodTypeDef, OneHundredAndFifteen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndFifteen$ {
    /** @deprecated use `OneHundredAndFifteen$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndFifteen, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndFifteen$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndFifteen$Outbound, z.ZodTypeDef, OneHundredAndFifteen>;
    /** @deprecated use `OneHundredAndFifteen$Outbound` instead. */
    type Outbound = OneHundredAndFifteen$Outbound;
}
export declare function oneHundredAndFifteenToJSON(oneHundredAndFifteen: OneHundredAndFifteen): string;
export declare function oneHundredAndFifteenFromJSON(jsonString: string): SafeParseResult<OneHundredAndFifteen, SDKValidationError>;
/** @internal */
export declare const UserEventPayloadUser$inboundSchema: z.ZodType<UserEventPayloadUser, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayloadUser$Outbound = {
    id: string;
    username: string;
};
/** @internal */
export declare const UserEventPayloadUser$outboundSchema: z.ZodType<UserEventPayloadUser$Outbound, z.ZodTypeDef, UserEventPayloadUser>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayloadUser$ {
    /** @deprecated use `UserEventPayloadUser$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayloadUser, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayloadUser$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayloadUser$Outbound, z.ZodTypeDef, UserEventPayloadUser>;
    /** @deprecated use `UserEventPayloadUser$Outbound` instead. */
    type Outbound = UserEventPayloadUser$Outbound;
}
export declare function userEventPayloadUserToJSON(userEventPayloadUser: UserEventPayloadUser): string;
export declare function userEventPayloadUserFromJSON(jsonString: string): SafeParseResult<UserEventPayloadUser, SDKValidationError>;
/** @internal */
export declare const OneHundredAndFourteen$inboundSchema: z.ZodType<OneHundredAndFourteen, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndFourteen$Outbound = {
    entitlement: string;
    user: UserEventPayloadUser$Outbound;
};
/** @internal */
export declare const OneHundredAndFourteen$outboundSchema: z.ZodType<OneHundredAndFourteen$Outbound, z.ZodTypeDef, OneHundredAndFourteen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndFourteen$ {
    /** @deprecated use `OneHundredAndFourteen$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndFourteen, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndFourteen$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndFourteen$Outbound, z.ZodTypeDef, OneHundredAndFourteen>;
    /** @deprecated use `OneHundredAndFourteen$Outbound` instead. */
    type Outbound = OneHundredAndFourteen$Outbound;
}
export declare function oneHundredAndFourteenToJSON(oneHundredAndFourteen: OneHundredAndFourteen): string;
export declare function oneHundredAndFourteenFromJSON(jsonString: string): SafeParseResult<OneHundredAndFourteen, SDKValidationError>;
/** @internal */
export declare const UpdatedUser$inboundSchema: z.ZodType<UpdatedUser, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdatedUser$Outbound = {
    username: string;
    email: string;
};
/** @internal */
export declare const UpdatedUser$outboundSchema: z.ZodType<UpdatedUser$Outbound, z.ZodTypeDef, UpdatedUser>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdatedUser$ {
    /** @deprecated use `UpdatedUser$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdatedUser, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdatedUser$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdatedUser$Outbound, z.ZodTypeDef, UpdatedUser>;
    /** @deprecated use `UpdatedUser$Outbound` instead. */
    type Outbound = UpdatedUser$Outbound;
}
export declare function updatedUserToJSON(updatedUser: UpdatedUser): string;
export declare function updatedUserFromJSON(jsonString: string): SafeParseResult<UpdatedUser, SDKValidationError>;
/** @internal */
export declare const OneHundredAndThirteen$inboundSchema: z.ZodType<OneHundredAndThirteen, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndThirteen$Outbound = {
    directoryType?: string | undefined;
    updatedUser?: UpdatedUser$Outbound | undefined;
    role?: string | undefined;
    previousRole: string;
    updatedUid?: string | undefined;
};
/** @internal */
export declare const OneHundredAndThirteen$outboundSchema: z.ZodType<OneHundredAndThirteen$Outbound, z.ZodTypeDef, OneHundredAndThirteen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndThirteen$ {
    /** @deprecated use `OneHundredAndThirteen$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndThirteen, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndThirteen$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndThirteen$Outbound, z.ZodTypeDef, OneHundredAndThirteen>;
    /** @deprecated use `OneHundredAndThirteen$Outbound` instead. */
    type Outbound = OneHundredAndThirteen$Outbound;
}
export declare function oneHundredAndThirteenToJSON(oneHundredAndThirteen: OneHundredAndThirteen): string;
export declare function oneHundredAndThirteenFromJSON(jsonString: string): SafeParseResult<OneHundredAndThirteen, SDKValidationError>;
/** @internal */
export declare const OneHundredAndTwelve$inboundSchema: z.ZodType<OneHundredAndTwelve, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndTwelve$Outbound = {
    role?: string | undefined;
    uid: string;
    origin?: string | undefined;
    teamRoles?: Array<string> | undefined;
    teamPermissions?: Array<string> | undefined;
    entitlements?: Array<string> | undefined;
};
/** @internal */
export declare const OneHundredAndTwelve$outboundSchema: z.ZodType<OneHundredAndTwelve$Outbound, z.ZodTypeDef, OneHundredAndTwelve>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndTwelve$ {
    /** @deprecated use `OneHundredAndTwelve$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndTwelve, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndTwelve$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndTwelve$Outbound, z.ZodTypeDef, OneHundredAndTwelve>;
    /** @deprecated use `OneHundredAndTwelve$Outbound` instead. */
    type Outbound = OneHundredAndTwelve$Outbound;
}
export declare function oneHundredAndTwelveToJSON(oneHundredAndTwelve: OneHundredAndTwelve): string;
export declare function oneHundredAndTwelveFromJSON(jsonString: string): SafeParseResult<OneHundredAndTwelve, SDKValidationError>;
/** @internal */
export declare const DeletedUser$inboundSchema: z.ZodType<DeletedUser, z.ZodTypeDef, unknown>;
/** @internal */
export type DeletedUser$Outbound = {
    username: string;
    email: string;
};
/** @internal */
export declare const DeletedUser$outboundSchema: z.ZodType<DeletedUser$Outbound, z.ZodTypeDef, DeletedUser>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace DeletedUser$ {
    /** @deprecated use `DeletedUser$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DeletedUser, z.ZodTypeDef, unknown>;
    /** @deprecated use `DeletedUser$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DeletedUser$Outbound, z.ZodTypeDef, DeletedUser>;
    /** @deprecated use `DeletedUser$Outbound` instead. */
    type Outbound = DeletedUser$Outbound;
}
export declare function deletedUserToJSON(deletedUser: DeletedUser): string;
export declare function deletedUserFromJSON(jsonString: string): SafeParseResult<DeletedUser, SDKValidationError>;
/** @internal */
export declare const OneHundredAndEleven$inboundSchema: z.ZodType<OneHundredAndEleven, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndEleven$Outbound = {
    deletedUser?: DeletedUser$Outbound | undefined;
    deletedUid?: string | undefined;
    githubUsername?: string | null | undefined;
    gitlabUsername?: string | null | undefined;
    bitbucketUsername?: string | null | undefined;
    directoryType?: string | undefined;
};
/** @internal */
export declare const OneHundredAndEleven$outboundSchema: z.ZodType<OneHundredAndEleven$Outbound, z.ZodTypeDef, OneHundredAndEleven>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndEleven$ {
    /** @deprecated use `OneHundredAndEleven$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndEleven, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndEleven$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndEleven$Outbound, z.ZodTypeDef, OneHundredAndEleven>;
    /** @deprecated use `OneHundredAndEleven$Outbound` instead. */
    type Outbound = OneHundredAndEleven$Outbound;
}
export declare function oneHundredAndElevenToJSON(oneHundredAndEleven: OneHundredAndEleven): string;
export declare function oneHundredAndElevenFromJSON(jsonString: string): SafeParseResult<OneHundredAndEleven, SDKValidationError>;
/** @internal */
export declare const InvitedUser$inboundSchema: z.ZodType<InvitedUser, z.ZodTypeDef, unknown>;
/** @internal */
export type InvitedUser$Outbound = {
    username: string;
    email: string;
};
/** @internal */
export declare const InvitedUser$outboundSchema: z.ZodType<InvitedUser$Outbound, z.ZodTypeDef, InvitedUser>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace InvitedUser$ {
    /** @deprecated use `InvitedUser$inboundSchema` instead. */
    const inboundSchema: z.ZodType<InvitedUser, z.ZodTypeDef, unknown>;
    /** @deprecated use `InvitedUser$outboundSchema` instead. */
    const outboundSchema: z.ZodType<InvitedUser$Outbound, z.ZodTypeDef, InvitedUser>;
    /** @deprecated use `InvitedUser$Outbound` instead. */
    type Outbound = InvitedUser$Outbound;
}
export declare function invitedUserToJSON(invitedUser: InvitedUser): string;
export declare function invitedUserFromJSON(jsonString: string): SafeParseResult<InvitedUser, SDKValidationError>;
/** @internal */
export declare const OneHundredAndTen$inboundSchema: z.ZodType<OneHundredAndTen, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndTen$Outbound = {
    directoryType?: string | undefined;
    ssoType?: string | undefined;
    invitedUser?: InvitedUser$Outbound | undefined;
    invitedEmail?: string | undefined;
    invitationRole?: string | undefined;
    entitlements?: Array<string> | undefined;
    invitedUid?: string | undefined;
};
/** @internal */
export declare const OneHundredAndTen$outboundSchema: z.ZodType<OneHundredAndTen$Outbound, z.ZodTypeDef, OneHundredAndTen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndTen$ {
    /** @deprecated use `OneHundredAndTen$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndTen, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndTen$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndTen$Outbound, z.ZodTypeDef, OneHundredAndTen>;
    /** @deprecated use `OneHundredAndTen$Outbound` instead. */
    type Outbound = OneHundredAndTen$Outbound;
}
export declare function oneHundredAndTenToJSON(oneHundredAndTen: OneHundredAndTen): string;
export declare function oneHundredAndTenFromJSON(jsonString: string): SafeParseResult<OneHundredAndTen, SDKValidationError>;
/** @internal */
export declare const Reasons$inboundSchema: z.ZodType<Reasons, z.ZodTypeDef, unknown>;
/** @internal */
export type Reasons$Outbound = {
    slug: string;
    description: string;
};
/** @internal */
export declare const Reasons$outboundSchema: z.ZodType<Reasons$Outbound, z.ZodTypeDef, Reasons>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Reasons$ {
    /** @deprecated use `Reasons$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Reasons, z.ZodTypeDef, unknown>;
    /** @deprecated use `Reasons$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Reasons$Outbound, z.ZodTypeDef, Reasons>;
    /** @deprecated use `Reasons$Outbound` instead. */
    type Outbound = Reasons$Outbound;
}
export declare function reasonsToJSON(reasons: Reasons): string;
export declare function reasonsFromJSON(jsonString: string): SafeParseResult<Reasons, SDKValidationError>;
/** @internal */
export declare const OneHundredAndNine$inboundSchema: z.ZodType<OneHundredAndNine, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndNine$Outbound = {
    slug: string;
    teamId: string;
    by: string;
    reasons?: Array<Reasons$Outbound> | undefined;
};
/** @internal */
export declare const OneHundredAndNine$outboundSchema: z.ZodType<OneHundredAndNine$Outbound, z.ZodTypeDef, OneHundredAndNine>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndNine$ {
    /** @deprecated use `OneHundredAndNine$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndNine, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndNine$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndNine$Outbound, z.ZodTypeDef, OneHundredAndNine>;
    /** @deprecated use `OneHundredAndNine$Outbound` instead. */
    type Outbound = OneHundredAndNine$Outbound;
}
export declare function oneHundredAndNineToJSON(oneHundredAndNine: OneHundredAndNine): string;
export declare function oneHundredAndNineFromJSON(jsonString: string): SafeParseResult<OneHundredAndNine, SDKValidationError>;
/** @internal */
export declare const OneHundredAndEight$inboundSchema: z.ZodType<OneHundredAndEight, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndEight$Outbound = {
    slug: string;
};
/** @internal */
export declare const OneHundredAndEight$outboundSchema: z.ZodType<OneHundredAndEight$Outbound, z.ZodTypeDef, OneHundredAndEight>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndEight$ {
    /** @deprecated use `OneHundredAndEight$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndEight, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndEight$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndEight$Outbound, z.ZodTypeDef, OneHundredAndEight>;
    /** @deprecated use `OneHundredAndEight$Outbound` instead. */
    type Outbound = OneHundredAndEight$Outbound;
}
export declare function oneHundredAndEightToJSON(oneHundredAndEight: OneHundredAndEight): string;
export declare function oneHundredAndEightFromJSON(jsonString: string): SafeParseResult<OneHundredAndEight, SDKValidationError>;
/** @internal */
export declare const Store$inboundSchema: z.ZodType<Store, z.ZodTypeDef, unknown>;
/** @internal */
export type Store$Outbound = {
    name: string;
    id: string;
};
/** @internal */
export declare const Store$outboundSchema: z.ZodType<Store$Outbound, z.ZodTypeDef, Store>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Store$ {
    /** @deprecated use `Store$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Store, z.ZodTypeDef, unknown>;
    /** @deprecated use `Store$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Store$Outbound, z.ZodTypeDef, Store>;
    /** @deprecated use `Store$Outbound` instead. */
    type Outbound = Store$Outbound;
}
export declare function storeToJSON(store: Store): string;
export declare function storeFromJSON(jsonString: string): SafeParseResult<Store, SDKValidationError>;
/** @internal */
export declare const OneHundredAndSeven$inboundSchema: z.ZodType<OneHundredAndSeven, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndSeven$Outbound = {
    store: Store$Outbound;
    ownerId?: string | undefined;
};
/** @internal */
export declare const OneHundredAndSeven$outboundSchema: z.ZodType<OneHundredAndSeven$Outbound, z.ZodTypeDef, OneHundredAndSeven>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndSeven$ {
    /** @deprecated use `OneHundredAndSeven$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndSeven, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndSeven$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndSeven$Outbound, z.ZodTypeDef, OneHundredAndSeven>;
    /** @deprecated use `OneHundredAndSeven$Outbound` instead. */
    type Outbound = OneHundredAndSeven$Outbound;
}
export declare function oneHundredAndSevenToJSON(oneHundredAndSeven: OneHundredAndSeven): string;
export declare function oneHundredAndSevenFromJSON(jsonString: string): SafeParseResult<OneHundredAndSeven, SDKValidationError>;
/** @internal */
export declare const StoreType$inboundSchema: z.ZodNativeEnum<typeof StoreType>;
/** @internal */
export declare const StoreType$outboundSchema: z.ZodNativeEnum<typeof StoreType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace StoreType$ {
    /** @deprecated use `StoreType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Redis: "redis";
        readonly Postgres: "postgres";
    }>;
    /** @deprecated use `StoreType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Redis: "redis";
        readonly Postgres: "postgres";
    }>;
}
/** @internal */
export declare const OneHundredAndSix$inboundSchema: z.ZodType<OneHundredAndSix, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndSix$Outbound = {
    storeType: string;
};
/** @internal */
export declare const OneHundredAndSix$outboundSchema: z.ZodType<OneHundredAndSix$Outbound, z.ZodTypeDef, OneHundredAndSix>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndSix$ {
    /** @deprecated use `OneHundredAndSix$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndSix, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndSix$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndSix$Outbound, z.ZodTypeDef, OneHundredAndSix>;
    /** @deprecated use `OneHundredAndSix$Outbound` instead. */
    type Outbound = OneHundredAndSix$Outbound;
}
export declare function oneHundredAndSixToJSON(oneHundredAndSix: OneHundredAndSix): string;
export declare function oneHundredAndSixFromJSON(jsonString: string): SafeParseResult<OneHundredAndSix, SDKValidationError>;
/** @internal */
export declare const UserEventPayloadType$inboundSchema: z.ZodNativeEnum<typeof UserEventPayloadType>;
/** @internal */
export declare const UserEventPayloadType$outboundSchema: z.ZodNativeEnum<typeof UserEventPayloadType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayloadType$ {
    /** @deprecated use `UserEventPayloadType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Redis: "redis";
        readonly Postgres: "postgres";
        readonly EdgeConfig: "edge-config";
        readonly Blob: "blob";
        readonly Integration: "integration";
    }>;
    /** @deprecated use `UserEventPayloadType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Redis: "redis";
        readonly Postgres: "postgres";
        readonly EdgeConfig: "edge-config";
        readonly Blob: "blob";
        readonly Integration: "integration";
    }>;
}
/** @internal */
export declare const OneHundredAndFive$inboundSchema: z.ZodType<OneHundredAndFive, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndFive$Outbound = {
    id: string;
    name?: string | undefined;
    computeUnitsMax?: number | undefined;
    computeUnitsMin?: number | undefined;
    suspendTimeoutSeconds?: number | undefined;
    type: string;
};
/** @internal */
export declare const OneHundredAndFive$outboundSchema: z.ZodType<OneHundredAndFive$Outbound, z.ZodTypeDef, OneHundredAndFive>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndFive$ {
    /** @deprecated use `OneHundredAndFive$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndFive, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndFive$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndFive$Outbound, z.ZodTypeDef, OneHundredAndFive>;
    /** @deprecated use `OneHundredAndFive$Outbound` instead. */
    type Outbound = OneHundredAndFive$Outbound;
}
export declare function oneHundredAndFiveToJSON(oneHundredAndFive: OneHundredAndFive): string;
export declare function oneHundredAndFiveFromJSON(jsonString: string): SafeParseResult<OneHundredAndFive, SDKValidationError>;
/** @internal */
export declare const UserEventPayload104Type$inboundSchema: z.ZodNativeEnum<typeof UserEventPayload104Type>;
/** @internal */
export declare const UserEventPayload104Type$outboundSchema: z.ZodNativeEnum<typeof UserEventPayload104Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload104Type$ {
    /** @deprecated use `UserEventPayload104Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Fixed: "fixed";
    }>;
    /** @deprecated use `UserEventPayload104Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Fixed: "fixed";
    }>;
}
/** @internal */
export declare const PayloadPricingPlan$inboundSchema: z.ZodNativeEnum<typeof PayloadPricingPlan>;
/** @internal */
export declare const PayloadPricingPlan$outboundSchema: z.ZodNativeEnum<typeof PayloadPricingPlan>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadPricingPlan$ {
    /** @deprecated use `PayloadPricingPlan$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Plus: "plus";
        readonly Legacy: "legacy";
        readonly Unbundled: "unbundled";
    }>;
    /** @deprecated use `PayloadPricingPlan$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Plus: "plus";
        readonly Legacy: "legacy";
        readonly Unbundled: "unbundled";
    }>;
}
/** @internal */
export declare const BudgetItem$inboundSchema: z.ZodType<BudgetItem, z.ZodTypeDef, unknown>;
/** @internal */
export type BudgetItem$Outbound = {
    type: string;
    fixedBudget: number;
    previousSpend: Array<number>;
    notifiedAt: Array<number>;
    webhookId?: string | undefined;
    webhookNotified?: boolean | undefined;
    createdAt: number;
    updatedAt?: number | undefined;
    isActive: boolean;
    pauseProjects?: boolean | undefined;
    pricingPlan?: string | undefined;
    teamId: string;
    id: string;
};
/** @internal */
export declare const BudgetItem$outboundSchema: z.ZodType<BudgetItem$Outbound, z.ZodTypeDef, BudgetItem>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BudgetItem$ {
    /** @deprecated use `BudgetItem$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BudgetItem, z.ZodTypeDef, unknown>;
    /** @deprecated use `BudgetItem$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BudgetItem$Outbound, z.ZodTypeDef, BudgetItem>;
    /** @deprecated use `BudgetItem$Outbound` instead. */
    type Outbound = BudgetItem$Outbound;
}
export declare function budgetItemToJSON(budgetItem: BudgetItem): string;
export declare function budgetItemFromJSON(jsonString: string): SafeParseResult<BudgetItem, SDKValidationError>;
/** @internal */
export declare const PayloadBudget$inboundSchema: z.ZodType<PayloadBudget, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadBudget$Outbound = {
    budgetItem: BudgetItem$Outbound;
};
/** @internal */
export declare const PayloadBudget$outboundSchema: z.ZodType<PayloadBudget$Outbound, z.ZodTypeDef, PayloadBudget>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadBudget$ {
    /** @deprecated use `PayloadBudget$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadBudget, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadBudget$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadBudget$Outbound, z.ZodTypeDef, PayloadBudget>;
    /** @deprecated use `PayloadBudget$Outbound` instead. */
    type Outbound = PayloadBudget$Outbound;
}
export declare function payloadBudgetToJSON(payloadBudget: PayloadBudget): string;
export declare function payloadBudgetFromJSON(jsonString: string): SafeParseResult<PayloadBudget, SDKValidationError>;
/** @internal */
export declare const OneHundredAndFour$inboundSchema: z.ZodType<OneHundredAndFour, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndFour$Outbound = {
    budget: PayloadBudget$Outbound;
};
/** @internal */
export declare const OneHundredAndFour$outboundSchema: z.ZodType<OneHundredAndFour$Outbound, z.ZodTypeDef, OneHundredAndFour>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndFour$ {
    /** @deprecated use `OneHundredAndFour$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndFour, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndFour$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndFour$Outbound, z.ZodTypeDef, OneHundredAndFour>;
    /** @deprecated use `OneHundredAndFour$Outbound` instead. */
    type Outbound = OneHundredAndFour$Outbound;
}
export declare function oneHundredAndFourToJSON(oneHundredAndFour: OneHundredAndFour): string;
export declare function oneHundredAndFourFromJSON(jsonString: string): SafeParseResult<OneHundredAndFour, SDKValidationError>;
/** @internal */
export declare const UserEventPayload103Type$inboundSchema: z.ZodNativeEnum<typeof UserEventPayload103Type>;
/** @internal */
export declare const UserEventPayload103Type$outboundSchema: z.ZodNativeEnum<typeof UserEventPayload103Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload103Type$ {
    /** @deprecated use `UserEventPayload103Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Fixed: "fixed";
    }>;
    /** @deprecated use `UserEventPayload103Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Fixed: "fixed";
    }>;
}
/** @internal */
export declare const PricingPlan$inboundSchema: z.ZodNativeEnum<typeof PricingPlan>;
/** @internal */
export declare const PricingPlan$outboundSchema: z.ZodNativeEnum<typeof PricingPlan>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PricingPlan$ {
    /** @deprecated use `PricingPlan$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Plus: "plus";
        readonly Legacy: "legacy";
        readonly Unbundled: "unbundled";
    }>;
    /** @deprecated use `PricingPlan$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Plus: "plus";
        readonly Legacy: "legacy";
        readonly Unbundled: "unbundled";
    }>;
}
/** @internal */
export declare const Budget$inboundSchema: z.ZodType<Budget, z.ZodTypeDef, unknown>;
/** @internal */
export type Budget$Outbound = {
    type: string;
    fixedBudget: number;
    previousSpend: Array<number>;
    notifiedAt: Array<number>;
    webhookId?: string | undefined;
    webhookNotified?: boolean | undefined;
    createdAt: number;
    updatedAt?: number | undefined;
    isActive: boolean;
    pauseProjects?: boolean | undefined;
    pricingPlan?: string | undefined;
    teamId: string;
    id: string;
};
/** @internal */
export declare const Budget$outboundSchema: z.ZodType<Budget$Outbound, z.ZodTypeDef, Budget>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Budget$ {
    /** @deprecated use `Budget$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Budget, z.ZodTypeDef, unknown>;
    /** @deprecated use `Budget$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Budget$Outbound, z.ZodTypeDef, Budget>;
    /** @deprecated use `Budget$Outbound` instead. */
    type Outbound = Budget$Outbound;
}
export declare function budgetToJSON(budget: Budget): string;
export declare function budgetFromJSON(jsonString: string): SafeParseResult<Budget, SDKValidationError>;
/** @internal */
export declare const OneHundredAndThree$inboundSchema: z.ZodType<OneHundredAndThree, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndThree$Outbound = {
    budget: Budget$Outbound;
};
/** @internal */
export declare const OneHundredAndThree$outboundSchema: z.ZodType<OneHundredAndThree$Outbound, z.ZodTypeDef, OneHundredAndThree>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndThree$ {
    /** @deprecated use `OneHundredAndThree$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndThree, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndThree$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndThree$Outbound, z.ZodTypeDef, OneHundredAndThree>;
    /** @deprecated use `OneHundredAndThree$Outbound` instead. */
    type Outbound = OneHundredAndThree$Outbound;
}
export declare function oneHundredAndThreeToJSON(oneHundredAndThree: OneHundredAndThree): string;
export declare function oneHundredAndThreeFromJSON(jsonString: string): SafeParseResult<OneHundredAndThree, SDKValidationError>;
/** @internal */
export declare const OneHundredAndTwo$inboundSchema: z.ZodType<OneHundredAndTwo, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndTwo$Outbound = {
    webhookUrl?: string | undefined;
};
/** @internal */
export declare const OneHundredAndTwo$outboundSchema: z.ZodType<OneHundredAndTwo$Outbound, z.ZodTypeDef, OneHundredAndTwo>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndTwo$ {
    /** @deprecated use `OneHundredAndTwo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndTwo, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndTwo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndTwo$Outbound, z.ZodTypeDef, OneHundredAndTwo>;
    /** @deprecated use `OneHundredAndTwo$Outbound` instead. */
    type Outbound = OneHundredAndTwo$Outbound;
}
export declare function oneHundredAndTwoToJSON(oneHundredAndTwo: OneHundredAndTwo): string;
export declare function oneHundredAndTwoFromJSON(jsonString: string): SafeParseResult<OneHundredAndTwo, SDKValidationError>;
/** @internal */
export declare const ScalingRules$inboundSchema: z.ZodType<ScalingRules, z.ZodTypeDef, unknown>;
/** @internal */
export type ScalingRules$Outbound = {
    min: number;
    max: number;
};
/** @internal */
export declare const ScalingRules$outboundSchema: z.ZodType<ScalingRules$Outbound, z.ZodTypeDef, ScalingRules>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ScalingRules$ {
    /** @deprecated use `ScalingRules$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ScalingRules, z.ZodTypeDef, unknown>;
    /** @deprecated use `ScalingRules$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ScalingRules$Outbound, z.ZodTypeDef, ScalingRules>;
    /** @deprecated use `ScalingRules$Outbound` instead. */
    type Outbound = ScalingRules$Outbound;
}
export declare function scalingRulesToJSON(scalingRules: ScalingRules): string;
export declare function scalingRulesFromJSON(jsonString: string): SafeParseResult<ScalingRules, SDKValidationError>;
/** @internal */
export declare const OneHundredAndOne$inboundSchema: z.ZodType<OneHundredAndOne, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundredAndOne$Outbound = {
    scalingRules: {
        [k: string]: ScalingRules$Outbound;
    };
    min: number;
    max: number;
    url: string;
};
/** @internal */
export declare const OneHundredAndOne$outboundSchema: z.ZodType<OneHundredAndOne$Outbound, z.ZodTypeDef, OneHundredAndOne>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundredAndOne$ {
    /** @deprecated use `OneHundredAndOne$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundredAndOne, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundredAndOne$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundredAndOne$Outbound, z.ZodTypeDef, OneHundredAndOne>;
    /** @deprecated use `OneHundredAndOne$Outbound` instead. */
    type Outbound = OneHundredAndOne$Outbound;
}
export declare function oneHundredAndOneToJSON(oneHundredAndOne: OneHundredAndOne): string;
export declare function oneHundredAndOneFromJSON(jsonString: string): SafeParseResult<OneHundredAndOne, SDKValidationError>;
/** @internal */
export declare const OneHundred$inboundSchema: z.ZodType<OneHundred, z.ZodTypeDef, unknown>;
/** @internal */
export type OneHundred$Outbound = {
    bio: string;
};
/** @internal */
export declare const OneHundred$outboundSchema: z.ZodType<OneHundred$Outbound, z.ZodTypeDef, OneHundred>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneHundred$ {
    /** @deprecated use `OneHundred$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OneHundred, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneHundred$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OneHundred$Outbound, z.ZodTypeDef, OneHundred>;
    /** @deprecated use `OneHundred$Outbound` instead. */
    type Outbound = OneHundred$Outbound;
}
export declare function oneHundredToJSON(oneHundred: OneHundred): string;
export declare function oneHundredFromJSON(jsonString: string): SafeParseResult<OneHundred, SDKValidationError>;
/** @internal */
export declare const NinetyNine$inboundSchema: z.ZodType<NinetyNine, z.ZodTypeDef, unknown>;
/** @internal */
export type NinetyNine$Outbound = {
    oldName: string;
    newName: string;
    uid?: string | undefined;
};
/** @internal */
export declare const NinetyNine$outboundSchema: z.ZodType<NinetyNine$Outbound, z.ZodTypeDef, NinetyNine>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NinetyNine$ {
    /** @deprecated use `NinetyNine$inboundSchema` instead. */
    const inboundSchema: z.ZodType<NinetyNine, z.ZodTypeDef, unknown>;
    /** @deprecated use `NinetyNine$outboundSchema` instead. */
    const outboundSchema: z.ZodType<NinetyNine$Outbound, z.ZodTypeDef, NinetyNine>;
    /** @deprecated use `NinetyNine$Outbound` instead. */
    type Outbound = NinetyNine$Outbound;
}
export declare function ninetyNineToJSON(ninetyNine: NinetyNine): string;
export declare function ninetyNineFromJSON(jsonString: string): SafeParseResult<NinetyNine, SDKValidationError>;
/** @internal */
export declare const Name2$inboundSchema: z.ZodType<Name2, z.ZodTypeDef, unknown>;
/** @internal */
export type Name2$Outbound = {
    name: string;
};
/** @internal */
export declare const Name2$outboundSchema: z.ZodType<Name2$Outbound, z.ZodTypeDef, Name2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Name2$ {
    /** @deprecated use `Name2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Name2, z.ZodTypeDef, unknown>;
    /** @deprecated use `Name2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Name2$Outbound, z.ZodTypeDef, Name2>;
    /** @deprecated use `Name2$Outbound` instead. */
    type Outbound = Name2$Outbound;
}
export declare function name2ToJSON(name2: Name2): string;
export declare function name2FromJSON(jsonString: string): SafeParseResult<Name2, SDKValidationError>;
/** @internal */
export declare const Name$inboundSchema: z.ZodType<Name, z.ZodTypeDef, unknown>;
/** @internal */
export type Name$Outbound = Name2$Outbound | string;
/** @internal */
export declare const Name$outboundSchema: z.ZodType<Name$Outbound, z.ZodTypeDef, Name>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Name$ {
    /** @deprecated use `Name$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Name, z.ZodTypeDef, unknown>;
    /** @deprecated use `Name$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Name$Outbound, z.ZodTypeDef, Name>;
    /** @deprecated use `Name$Outbound` instead. */
    type Outbound = Name$Outbound;
}
export declare function nameToJSON(name: Name): string;
export declare function nameFromJSON(jsonString: string): SafeParseResult<Name, SDKValidationError>;
/** @internal */
export declare const NinetyEight$inboundSchema: z.ZodType<NinetyEight, z.ZodTypeDef, unknown>;
/** @internal */
export type NinetyEight$Outbound = {
    uid: string;
    name: Name2$Outbound | string;
};
/** @internal */
export declare const NinetyEight$outboundSchema: z.ZodType<NinetyEight$Outbound, z.ZodTypeDef, NinetyEight>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NinetyEight$ {
    /** @deprecated use `NinetyEight$inboundSchema` instead. */
    const inboundSchema: z.ZodType<NinetyEight, z.ZodTypeDef, unknown>;
    /** @deprecated use `NinetyEight$outboundSchema` instead. */
    const outboundSchema: z.ZodType<NinetyEight$Outbound, z.ZodTypeDef, NinetyEight>;
    /** @deprecated use `NinetyEight$Outbound` instead. */
    type Outbound = NinetyEight$Outbound;
}
export declare function ninetyEightToJSON(ninetyEight: NinetyEight): string;
export declare function ninetyEightFromJSON(jsonString: string): SafeParseResult<NinetyEight, SDKValidationError>;
/** @internal */
export declare const UserEventPayload97Team$inboundSchema: z.ZodType<UserEventPayload97Team, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayload97Team$Outbound = {
    id: string;
    name?: string | undefined;
};
/** @internal */
export declare const UserEventPayload97Team$outboundSchema: z.ZodType<UserEventPayload97Team$Outbound, z.ZodTypeDef, UserEventPayload97Team>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload97Team$ {
    /** @deprecated use `UserEventPayload97Team$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayload97Team, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayload97Team$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayload97Team$Outbound, z.ZodTypeDef, UserEventPayload97Team>;
    /** @deprecated use `UserEventPayload97Team$Outbound` instead. */
    type Outbound = UserEventPayload97Team$Outbound;
}
export declare function userEventPayload97TeamToJSON(userEventPayload97Team: UserEventPayload97Team): string;
export declare function userEventPayload97TeamFromJSON(jsonString: string): SafeParseResult<UserEventPayload97Team, SDKValidationError>;
/** @internal */
export declare const PayloadPreviousRule$inboundSchema: z.ZodType<PayloadPreviousRule, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadPreviousRule$Outbound = {
    email: string;
};
/** @internal */
export declare const PayloadPreviousRule$outboundSchema: z.ZodType<PayloadPreviousRule$Outbound, z.ZodTypeDef, PayloadPreviousRule>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadPreviousRule$ {
    /** @deprecated use `PayloadPreviousRule$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadPreviousRule, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadPreviousRule$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadPreviousRule$Outbound, z.ZodTypeDef, PayloadPreviousRule>;
    /** @deprecated use `PayloadPreviousRule$Outbound` instead. */
    type Outbound = PayloadPreviousRule$Outbound;
}
export declare function payloadPreviousRuleToJSON(payloadPreviousRule: PayloadPreviousRule): string;
export declare function payloadPreviousRuleFromJSON(jsonString: string): SafeParseResult<PayloadPreviousRule, SDKValidationError>;
/** @internal */
export declare const NinetySeven$inboundSchema: z.ZodType<NinetySeven, z.ZodTypeDef, unknown>;
/** @internal */
export type NinetySeven$Outbound = {
    team: UserEventPayload97Team$Outbound;
    previousRule: PayloadPreviousRule$Outbound;
};
/** @internal */
export declare const NinetySeven$outboundSchema: z.ZodType<NinetySeven$Outbound, z.ZodTypeDef, NinetySeven>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NinetySeven$ {
    /** @deprecated use `NinetySeven$inboundSchema` instead. */
    const inboundSchema: z.ZodType<NinetySeven, z.ZodTypeDef, unknown>;
    /** @deprecated use `NinetySeven$outboundSchema` instead. */
    const outboundSchema: z.ZodType<NinetySeven$Outbound, z.ZodTypeDef, NinetySeven>;
    /** @deprecated use `NinetySeven$Outbound` instead. */
    type Outbound = NinetySeven$Outbound;
}
export declare function ninetySevenToJSON(ninetySeven: NinetySeven): string;
export declare function ninetySevenFromJSON(jsonString: string): SafeParseResult<NinetySeven, SDKValidationError>;
/** @internal */
export declare const UserEventPayload96Team$inboundSchema: z.ZodType<UserEventPayload96Team, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayload96Team$Outbound = {
    id: string;
    name?: string | undefined;
};
/** @internal */
export declare const UserEventPayload96Team$outboundSchema: z.ZodType<UserEventPayload96Team$Outbound, z.ZodTypeDef, UserEventPayload96Team>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload96Team$ {
    /** @deprecated use `UserEventPayload96Team$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayload96Team, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayload96Team$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayload96Team$Outbound, z.ZodTypeDef, UserEventPayload96Team>;
    /** @deprecated use `UserEventPayload96Team$Outbound` instead. */
    type Outbound = UserEventPayload96Team$Outbound;
}
export declare function userEventPayload96TeamToJSON(userEventPayload96Team: UserEventPayload96Team): string;
export declare function userEventPayload96TeamFromJSON(jsonString: string): SafeParseResult<UserEventPayload96Team, SDKValidationError>;
/** @internal */
export declare const PreviousRule$inboundSchema: z.ZodType<PreviousRule, z.ZodTypeDef, unknown>;
/** @internal */
export type PreviousRule$Outbound = {
    email: string;
};
/** @internal */
export declare const PreviousRule$outboundSchema: z.ZodType<PreviousRule$Outbound, z.ZodTypeDef, PreviousRule>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PreviousRule$ {
    /** @deprecated use `PreviousRule$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PreviousRule, z.ZodTypeDef, unknown>;
    /** @deprecated use `PreviousRule$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PreviousRule$Outbound, z.ZodTypeDef, PreviousRule>;
    /** @deprecated use `PreviousRule$Outbound` instead. */
    type Outbound = PreviousRule$Outbound;
}
export declare function previousRuleToJSON(previousRule: PreviousRule): string;
export declare function previousRuleFromJSON(jsonString: string): SafeParseResult<PreviousRule, SDKValidationError>;
/** @internal */
export declare const NextRule$inboundSchema: z.ZodType<NextRule, z.ZodTypeDef, unknown>;
/** @internal */
export type NextRule$Outbound = {
    email: string;
};
/** @internal */
export declare const NextRule$outboundSchema: z.ZodType<NextRule$Outbound, z.ZodTypeDef, NextRule>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NextRule$ {
    /** @deprecated use `NextRule$inboundSchema` instead. */
    const inboundSchema: z.ZodType<NextRule, z.ZodTypeDef, unknown>;
    /** @deprecated use `NextRule$outboundSchema` instead. */
    const outboundSchema: z.ZodType<NextRule$Outbound, z.ZodTypeDef, NextRule>;
    /** @deprecated use `NextRule$Outbound` instead. */
    type Outbound = NextRule$Outbound;
}
export declare function nextRuleToJSON(nextRule: NextRule): string;
export declare function nextRuleFromJSON(jsonString: string): SafeParseResult<NextRule, SDKValidationError>;
/** @internal */
export declare const NinetySix$inboundSchema: z.ZodType<NinetySix, z.ZodTypeDef, unknown>;
/** @internal */
export type NinetySix$Outbound = {
    team: UserEventPayload96Team$Outbound;
    previousRule?: PreviousRule$Outbound | undefined;
    nextRule?: NextRule$Outbound | undefined;
};
/** @internal */
export declare const NinetySix$outboundSchema: z.ZodType<NinetySix$Outbound, z.ZodTypeDef, NinetySix>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NinetySix$ {
    /** @deprecated use `NinetySix$inboundSchema` instead. */
    const inboundSchema: z.ZodType<NinetySix, z.ZodTypeDef, unknown>;
    /** @deprecated use `NinetySix$outboundSchema` instead. */
    const outboundSchema: z.ZodType<NinetySix$Outbound, z.ZodTypeDef, NinetySix>;
    /** @deprecated use `NinetySix$Outbound` instead. */
    type Outbound = NinetySix$Outbound;
}
export declare function ninetySixToJSON(ninetySix: NinetySix): string;
export declare function ninetySixFromJSON(jsonString: string): SafeParseResult<NinetySix, SDKValidationError>;
/** @internal */
export declare const NinetyFive$inboundSchema: z.ZodType<NinetyFive, z.ZodTypeDef, unknown>;
/** @internal */
export type NinetyFive$Outbound = {
    email: string;
};
/** @internal */
export declare const NinetyFive$outboundSchema: z.ZodType<NinetyFive$Outbound, z.ZodTypeDef, NinetyFive>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NinetyFive$ {
    /** @deprecated use `NinetyFive$inboundSchema` instead. */
    const inboundSchema: z.ZodType<NinetyFive, z.ZodTypeDef, unknown>;
    /** @deprecated use `NinetyFive$outboundSchema` instead. */
    const outboundSchema: z.ZodType<NinetyFive$Outbound, z.ZodTypeDef, NinetyFive>;
    /** @deprecated use `NinetyFive$Outbound` instead. */
    type Outbound = NinetyFive$Outbound;
}
export declare function ninetyFiveToJSON(ninetyFive: NinetyFive): string;
export declare function ninetyFiveFromJSON(jsonString: string): SafeParseResult<NinetyFive, SDKValidationError>;
/** @internal */
export declare const NinetyFour$inboundSchema: z.ZodType<NinetyFour, z.ZodTypeDef, unknown>;
/** @internal */
export type NinetyFour$Outbound = {
    email: string;
    verified: boolean;
};
/** @internal */
export declare const NinetyFour$outboundSchema: z.ZodType<NinetyFour$Outbound, z.ZodTypeDef, NinetyFour>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NinetyFour$ {
    /** @deprecated use `NinetyFour$inboundSchema` instead. */
    const inboundSchema: z.ZodType<NinetyFour, z.ZodTypeDef, unknown>;
    /** @deprecated use `NinetyFour$outboundSchema` instead. */
    const outboundSchema: z.ZodType<NinetyFour$Outbound, z.ZodTypeDef, NinetyFour>;
    /** @deprecated use `NinetyFour$Outbound` instead. */
    type Outbound = NinetyFour$Outbound;
}
export declare function ninetyFourToJSON(ninetyFour: NinetyFour): string;
export declare function ninetyFourFromJSON(jsonString: string): SafeParseResult<NinetyFour, SDKValidationError>;
/** @internal */
export declare const NinetyThree$inboundSchema: z.ZodType<NinetyThree, z.ZodTypeDef, unknown>;
/** @internal */
export type NinetyThree$Outbound = {
    instances: number;
    url: string;
};
/** @internal */
export declare const NinetyThree$outboundSchema: z.ZodType<NinetyThree$Outbound, z.ZodTypeDef, NinetyThree>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NinetyThree$ {
    /** @deprecated use `NinetyThree$inboundSchema` instead. */
    const inboundSchema: z.ZodType<NinetyThree, z.ZodTypeDef, unknown>;
    /** @deprecated use `NinetyThree$outboundSchema` instead. */
    const outboundSchema: z.ZodType<NinetyThree$Outbound, z.ZodTypeDef, NinetyThree>;
    /** @deprecated use `NinetyThree$Outbound` instead. */
    type Outbound = NinetyThree$Outbound;
}
export declare function ninetyThreeToJSON(ninetyThree: NinetyThree): string;
export declare function ninetyThreeFromJSON(jsonString: string): SafeParseResult<NinetyThree, SDKValidationError>;
/** @internal */
export declare const NinetyTwo$inboundSchema: z.ZodType<NinetyTwo, z.ZodTypeDef, unknown>;
/** @internal */
export type NinetyTwo$Outbound = {
    gitProvider: string;
    gitProviderGroupDescriptor: string;
    gitScope: string;
};
/** @internal */
export declare const NinetyTwo$outboundSchema: z.ZodType<NinetyTwo$Outbound, z.ZodTypeDef, NinetyTwo>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NinetyTwo$ {
    /** @deprecated use `NinetyTwo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<NinetyTwo, z.ZodTypeDef, unknown>;
    /** @deprecated use `NinetyTwo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<NinetyTwo$Outbound, z.ZodTypeDef, NinetyTwo>;
    /** @deprecated use `NinetyTwo$Outbound` instead. */
    type Outbound = NinetyTwo$Outbound;
}
export declare function ninetyTwoToJSON(ninetyTwo: NinetyTwo): string;
export declare function ninetyTwoFromJSON(jsonString: string): SafeParseResult<NinetyTwo, SDKValidationError>;
/** @internal */
export declare const NinetyOne$inboundSchema: z.ZodType<NinetyOne, z.ZodTypeDef, unknown>;
/** @internal */
export type NinetyOne$Outbound = {
    projectId: string;
    projectName: string;
    newTargetPercentage?: number | undefined;
};
/** @internal */
export declare const NinetyOne$outboundSchema: z.ZodType<NinetyOne$Outbound, z.ZodTypeDef, NinetyOne>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NinetyOne$ {
    /** @deprecated use `NinetyOne$inboundSchema` instead. */
    const inboundSchema: z.ZodType<NinetyOne, z.ZodTypeDef, unknown>;
    /** @deprecated use `NinetyOne$outboundSchema` instead. */
    const outboundSchema: z.ZodType<NinetyOne$Outbound, z.ZodTypeDef, NinetyOne>;
    /** @deprecated use `NinetyOne$Outbound` instead. */
    type Outbound = NinetyOne$Outbound;
}
export declare function ninetyOneToJSON(ninetyOne: NinetyOne): string;
export declare function ninetyOneFromJSON(jsonString: string): SafeParseResult<NinetyOne, SDKValidationError>;
/** @internal */
export declare const Ninety$inboundSchema: z.ZodType<Ninety, z.ZodTypeDef, unknown>;
/** @internal */
export type Ninety$Outbound = {
    projectId: string;
    projectName: string;
};
/** @internal */
export declare const Ninety$outboundSchema: z.ZodType<Ninety$Outbound, z.ZodTypeDef, Ninety>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Ninety$ {
    /** @deprecated use `Ninety$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Ninety, z.ZodTypeDef, unknown>;
    /** @deprecated use `Ninety$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Ninety$Outbound, z.ZodTypeDef, Ninety>;
    /** @deprecated use `Ninety$Outbound` instead. */
    type Outbound = Ninety$Outbound;
}
export declare function ninetyToJSON(ninety: Ninety): string;
export declare function ninetyFromJSON(jsonString: string): SafeParseResult<Ninety, SDKValidationError>;
/** @internal */
export declare const EightyNine$inboundSchema: z.ZodType<EightyNine, z.ZodTypeDef, unknown>;
/** @internal */
export type EightyNine$Outbound = {
    source: string;
    projectId: string;
};
/** @internal */
export declare const EightyNine$outboundSchema: z.ZodType<EightyNine$Outbound, z.ZodTypeDef, EightyNine>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EightyNine$ {
    /** @deprecated use `EightyNine$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EightyNine, z.ZodTypeDef, unknown>;
    /** @deprecated use `EightyNine$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EightyNine$Outbound, z.ZodTypeDef, EightyNine>;
    /** @deprecated use `EightyNine$Outbound` instead. */
    type Outbound = EightyNine$Outbound;
}
export declare function eightyNineToJSON(eightyNine: EightyNine): string;
export declare function eightyNineFromJSON(jsonString: string): SafeParseResult<EightyNine, SDKValidationError>;
/** @internal */
export declare const EightyEight$inboundSchema: z.ZodType<EightyEight, z.ZodTypeDef, unknown>;
/** @internal */
export type EightyEight$Outbound = {
    projectId: string;
};
/** @internal */
export declare const EightyEight$outboundSchema: z.ZodType<EightyEight$Outbound, z.ZodTypeDef, EightyEight>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EightyEight$ {
    /** @deprecated use `EightyEight$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EightyEight, z.ZodTypeDef, unknown>;
    /** @deprecated use `EightyEight$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EightyEight$Outbound, z.ZodTypeDef, EightyEight>;
    /** @deprecated use `EightyEight$Outbound` instead. */
    type Outbound = EightyEight$Outbound;
}
export declare function eightyEightToJSON(eightyEight: EightyEight): string;
export declare function eightyEightFromJSON(jsonString: string): SafeParseResult<EightyEight, SDKValidationError>;
/** @internal */
export declare const UserEventPayload87Team$inboundSchema: z.ZodType<UserEventPayload87Team, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayload87Team$Outbound = {
    id: string;
    name: string;
};
/** @internal */
export declare const UserEventPayload87Team$outboundSchema: z.ZodType<UserEventPayload87Team$Outbound, z.ZodTypeDef, UserEventPayload87Team>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload87Team$ {
    /** @deprecated use `UserEventPayload87Team$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayload87Team, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayload87Team$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayload87Team$Outbound, z.ZodTypeDef, UserEventPayload87Team>;
    /** @deprecated use `UserEventPayload87Team$Outbound` instead. */
    type Outbound = UserEventPayload87Team$Outbound;
}
export declare function userEventPayload87TeamToJSON(userEventPayload87Team: UserEventPayload87Team): string;
export declare function userEventPayload87TeamFromJSON(jsonString: string): SafeParseResult<UserEventPayload87Team, SDKValidationError>;
/** @internal */
export declare const EnvId2$inboundSchema: z.ZodNativeEnum<typeof EnvId2>;
/** @internal */
export declare const EnvId2$outboundSchema: z.ZodNativeEnum<typeof EnvId2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EnvId2$ {
    /** @deprecated use `EnvId2$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Preview: "preview";
        readonly Production: "production";
    }>;
    /** @deprecated use `EnvId2$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Preview: "preview";
        readonly Production: "production";
    }>;
}
/** @internal */
export declare const EnvId$inboundSchema: z.ZodType<EnvId, z.ZodTypeDef, unknown>;
/** @internal */
export type EnvId$Outbound = string | string;
/** @internal */
export declare const EnvId$outboundSchema: z.ZodType<EnvId$Outbound, z.ZodTypeDef, EnvId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EnvId$ {
    /** @deprecated use `EnvId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<string, z.ZodTypeDef, unknown>;
    /** @deprecated use `EnvId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<string, z.ZodTypeDef, string>;
    /** @deprecated use `EnvId$Outbound` instead. */
    type Outbound = EnvId$Outbound;
}
export declare function envIdToJSON(envId: EnvId): string;
export declare function envIdFromJSON(jsonString: string): SafeParseResult<EnvId, SDKValidationError>;
/** @internal */
export declare const Aws$inboundSchema: z.ZodType<Aws, z.ZodTypeDef, unknown>;
/** @internal */
export type Aws$Outbound = {
    subnetIds: Array<string>;
    securityGroupId: string;
};
/** @internal */
export declare const Aws$outboundSchema: z.ZodType<Aws$Outbound, z.ZodTypeDef, Aws>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Aws$ {
    /** @deprecated use `Aws$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Aws, z.ZodTypeDef, unknown>;
    /** @deprecated use `Aws$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Aws$Outbound, z.ZodTypeDef, Aws>;
    /** @deprecated use `Aws$Outbound` instead. */
    type Outbound = Aws$Outbound;
}
export declare function awsToJSON(aws: Aws): string;
export declare function awsFromJSON(jsonString: string): SafeParseResult<Aws, SDKValidationError>;
/** @internal */
export declare const OldConnectConfigurations$inboundSchema: z.ZodType<OldConnectConfigurations, z.ZodTypeDef, unknown>;
/** @internal */
export type OldConnectConfigurations$Outbound = {
    envId: string | string;
    connectConfigurationId: string;
    dc?: string | undefined;
    passive: boolean;
    buildsEnabled: boolean;
    aws?: Aws$Outbound | undefined;
    createdAt: number;
    updatedAt: number;
};
/** @internal */
export declare const OldConnectConfigurations$outboundSchema: z.ZodType<OldConnectConfigurations$Outbound, z.ZodTypeDef, OldConnectConfigurations>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OldConnectConfigurations$ {
    /** @deprecated use `OldConnectConfigurations$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OldConnectConfigurations, z.ZodTypeDef, unknown>;
    /** @deprecated use `OldConnectConfigurations$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OldConnectConfigurations$Outbound, z.ZodTypeDef, OldConnectConfigurations>;
    /** @deprecated use `OldConnectConfigurations$Outbound` instead. */
    type Outbound = OldConnectConfigurations$Outbound;
}
export declare function oldConnectConfigurationsToJSON(oldConnectConfigurations: OldConnectConfigurations): string;
export declare function oldConnectConfigurationsFromJSON(jsonString: string): SafeParseResult<OldConnectConfigurations, SDKValidationError>;
/** @internal */
export declare const UserEventEnvId2$inboundSchema: z.ZodNativeEnum<typeof UserEventEnvId2>;
/** @internal */
export declare const UserEventEnvId2$outboundSchema: z.ZodNativeEnum<typeof UserEventEnvId2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventEnvId2$ {
    /** @deprecated use `UserEventEnvId2$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Preview: "preview";
        readonly Production: "production";
    }>;
    /** @deprecated use `UserEventEnvId2$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Preview: "preview";
        readonly Production: "production";
    }>;
}
/** @internal */
export declare const PayloadEnvId$inboundSchema: z.ZodType<PayloadEnvId, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadEnvId$Outbound = string | string;
/** @internal */
export declare const PayloadEnvId$outboundSchema: z.ZodType<PayloadEnvId$Outbound, z.ZodTypeDef, PayloadEnvId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadEnvId$ {
    /** @deprecated use `PayloadEnvId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<string, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadEnvId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<string, z.ZodTypeDef, string>;
    /** @deprecated use `PayloadEnvId$Outbound` instead. */
    type Outbound = PayloadEnvId$Outbound;
}
export declare function payloadEnvIdToJSON(payloadEnvId: PayloadEnvId): string;
export declare function payloadEnvIdFromJSON(jsonString: string): SafeParseResult<PayloadEnvId, SDKValidationError>;
/** @internal */
export declare const PayloadAws$inboundSchema: z.ZodType<PayloadAws, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadAws$Outbound = {
    subnetIds: Array<string>;
    securityGroupId: string;
};
/** @internal */
export declare const PayloadAws$outboundSchema: z.ZodType<PayloadAws$Outbound, z.ZodTypeDef, PayloadAws>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadAws$ {
    /** @deprecated use `PayloadAws$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadAws, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadAws$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadAws$Outbound, z.ZodTypeDef, PayloadAws>;
    /** @deprecated use `PayloadAws$Outbound` instead. */
    type Outbound = PayloadAws$Outbound;
}
export declare function payloadAwsToJSON(payloadAws: PayloadAws): string;
export declare function payloadAwsFromJSON(jsonString: string): SafeParseResult<PayloadAws, SDKValidationError>;
/** @internal */
export declare const NewConnectConfigurations$inboundSchema: z.ZodType<NewConnectConfigurations, z.ZodTypeDef, unknown>;
/** @internal */
export type NewConnectConfigurations$Outbound = {
    envId: string | string;
    connectConfigurationId: string;
    dc?: string | undefined;
    passive: boolean;
    buildsEnabled: boolean;
    aws?: PayloadAws$Outbound | undefined;
    createdAt: number;
    updatedAt: number;
};
/** @internal */
export declare const NewConnectConfigurations$outboundSchema: z.ZodType<NewConnectConfigurations$Outbound, z.ZodTypeDef, NewConnectConfigurations>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NewConnectConfigurations$ {
    /** @deprecated use `NewConnectConfigurations$inboundSchema` instead. */
    const inboundSchema: z.ZodType<NewConnectConfigurations, z.ZodTypeDef, unknown>;
    /** @deprecated use `NewConnectConfigurations$outboundSchema` instead. */
    const outboundSchema: z.ZodType<NewConnectConfigurations$Outbound, z.ZodTypeDef, NewConnectConfigurations>;
    /** @deprecated use `NewConnectConfigurations$Outbound` instead. */
    type Outbound = NewConnectConfigurations$Outbound;
}
export declare function newConnectConfigurationsToJSON(newConnectConfigurations: NewConnectConfigurations): string;
export declare function newConnectConfigurationsFromJSON(jsonString: string): SafeParseResult<NewConnectConfigurations, SDKValidationError>;
/** @internal */
export declare const UserEventPayload87Project$inboundSchema: z.ZodType<UserEventPayload87Project, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayload87Project$Outbound = {
    id: string;
    name?: string | undefined;
    oldConnectConfigurations: Array<OldConnectConfigurations$Outbound> | null;
    newConnectConfigurations: Array<NewConnectConfigurations$Outbound> | null;
};
/** @internal */
export declare const UserEventPayload87Project$outboundSchema: z.ZodType<UserEventPayload87Project$Outbound, z.ZodTypeDef, UserEventPayload87Project>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload87Project$ {
    /** @deprecated use `UserEventPayload87Project$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayload87Project, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayload87Project$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayload87Project$Outbound, z.ZodTypeDef, UserEventPayload87Project>;
    /** @deprecated use `UserEventPayload87Project$Outbound` instead. */
    type Outbound = UserEventPayload87Project$Outbound;
}
export declare function userEventPayload87ProjectToJSON(userEventPayload87Project: UserEventPayload87Project): string;
export declare function userEventPayload87ProjectFromJSON(jsonString: string): SafeParseResult<UserEventPayload87Project, SDKValidationError>;
/** @internal */
export declare const EightySeven$inboundSchema: z.ZodType<EightySeven, z.ZodTypeDef, unknown>;
/** @internal */
export type EightySeven$Outbound = {
    team: UserEventPayload87Team$Outbound;
    project: UserEventPayload87Project$Outbound;
};
/** @internal */
export declare const EightySeven$outboundSchema: z.ZodType<EightySeven$Outbound, z.ZodTypeDef, EightySeven>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EightySeven$ {
    /** @deprecated use `EightySeven$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EightySeven, z.ZodTypeDef, unknown>;
    /** @deprecated use `EightySeven$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EightySeven$Outbound, z.ZodTypeDef, EightySeven>;
    /** @deprecated use `EightySeven$Outbound` instead. */
    type Outbound = EightySeven$Outbound;
}
export declare function eightySevenToJSON(eightySeven: EightySeven): string;
export declare function eightySevenFromJSON(jsonString: string): SafeParseResult<EightySeven, SDKValidationError>;
/** @internal */
export declare const EightySix$inboundSchema: z.ZodType<EightySix, z.ZodTypeDef, unknown>;
/** @internal */
export type EightySix$Outbound = {
    name: string;
    ownerId: string;
};
/** @internal */
export declare const EightySix$outboundSchema: z.ZodType<EightySix$Outbound, z.ZodTypeDef, EightySix>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EightySix$ {
    /** @deprecated use `EightySix$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EightySix, z.ZodTypeDef, unknown>;
    /** @deprecated use `EightySix$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EightySix$Outbound, z.ZodTypeDef, EightySix>;
    /** @deprecated use `EightySix$Outbound` instead. */
    type Outbound = EightySix$Outbound;
}
export declare function eightySixToJSON(eightySix: EightySix): string;
export declare function eightySixFromJSON(jsonString: string): SafeParseResult<EightySix, SDKValidationError>;
/** @internal */
export declare const UserEventPayload85Action$inboundSchema: z.ZodNativeEnum<typeof UserEventPayload85Action>;
/** @internal */
export declare const UserEventPayload85Action$outboundSchema: z.ZodNativeEnum<typeof UserEventPayload85Action>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload85Action$ {
    /** @deprecated use `UserEventPayload85Action$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Enabled: "enabled";
        readonly Disabled: "disabled";
        readonly Regenerated: "regenerated";
    }>;
    /** @deprecated use `UserEventPayload85Action$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Enabled: "enabled";
        readonly Disabled: "disabled";
        readonly Regenerated: "regenerated";
    }>;
}
/** @internal */
export declare const EightyFive$inboundSchema: z.ZodType<EightyFive, z.ZodTypeDef, unknown>;
/** @internal */
export type EightyFive$Outbound = {
    projectName: string;
    action: string;
};
/** @internal */
export declare const EightyFive$outboundSchema: z.ZodType<EightyFive$Outbound, z.ZodTypeDef, EightyFive>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EightyFive$ {
    /** @deprecated use `EightyFive$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EightyFive, z.ZodTypeDef, unknown>;
    /** @deprecated use `EightyFive$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EightyFive$Outbound, z.ZodTypeDef, EightyFive>;
    /** @deprecated use `EightyFive$Outbound` instead. */
    type Outbound = EightyFive$Outbound;
}
export declare function eightyFiveToJSON(eightyFive: EightyFive): string;
export declare function eightyFiveFromJSON(jsonString: string): SafeParseResult<EightyFive, SDKValidationError>;
/** @internal */
export declare const Paths$inboundSchema: z.ZodType<Paths, z.ZodTypeDef, unknown>;
/** @internal */
export type Paths$Outbound = {
    value: string;
};
/** @internal */
export declare const Paths$outboundSchema: z.ZodType<Paths$Outbound, z.ZodTypeDef, Paths>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Paths$ {
    /** @deprecated use `Paths$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Paths, z.ZodTypeDef, unknown>;
    /** @deprecated use `Paths$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Paths$Outbound, z.ZodTypeDef, Paths>;
    /** @deprecated use `Paths$Outbound` instead. */
    type Outbound = Paths$Outbound;
}
export declare function pathsToJSON(paths: Paths): string;
export declare function pathsFromJSON(jsonString: string): SafeParseResult<Paths, SDKValidationError>;
/** @internal */
export declare const OptionsAllowlist$inboundSchema: z.ZodType<OptionsAllowlist, z.ZodTypeDef, unknown>;
/** @internal */
export type OptionsAllowlist$Outbound = {
    paths: Array<Paths$Outbound>;
};
/** @internal */
export declare const OptionsAllowlist$outboundSchema: z.ZodType<OptionsAllowlist$Outbound, z.ZodTypeDef, OptionsAllowlist>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OptionsAllowlist$ {
    /** @deprecated use `OptionsAllowlist$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OptionsAllowlist, z.ZodTypeDef, unknown>;
    /** @deprecated use `OptionsAllowlist$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OptionsAllowlist$Outbound, z.ZodTypeDef, OptionsAllowlist>;
    /** @deprecated use `OptionsAllowlist$Outbound` instead. */
    type Outbound = OptionsAllowlist$Outbound;
}
export declare function optionsAllowlistToJSON(optionsAllowlist: OptionsAllowlist): string;
export declare function optionsAllowlistFromJSON(jsonString: string): SafeParseResult<OptionsAllowlist, SDKValidationError>;
/** @internal */
export declare const PayloadPaths$inboundSchema: z.ZodType<PayloadPaths, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadPaths$Outbound = {
    value: string;
};
/** @internal */
export declare const PayloadPaths$outboundSchema: z.ZodType<PayloadPaths$Outbound, z.ZodTypeDef, PayloadPaths>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadPaths$ {
    /** @deprecated use `PayloadPaths$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadPaths, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadPaths$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadPaths$Outbound, z.ZodTypeDef, PayloadPaths>;
    /** @deprecated use `PayloadPaths$Outbound` instead. */
    type Outbound = PayloadPaths$Outbound;
}
export declare function payloadPathsToJSON(payloadPaths: PayloadPaths): string;
export declare function payloadPathsFromJSON(jsonString: string): SafeParseResult<PayloadPaths, SDKValidationError>;
/** @internal */
export declare const OldOptionsAllowlist$inboundSchema: z.ZodType<OldOptionsAllowlist, z.ZodTypeDef, unknown>;
/** @internal */
export type OldOptionsAllowlist$Outbound = {
    paths: Array<PayloadPaths$Outbound>;
};
/** @internal */
export declare const OldOptionsAllowlist$outboundSchema: z.ZodType<OldOptionsAllowlist$Outbound, z.ZodTypeDef, OldOptionsAllowlist>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OldOptionsAllowlist$ {
    /** @deprecated use `OldOptionsAllowlist$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OldOptionsAllowlist, z.ZodTypeDef, unknown>;
    /** @deprecated use `OldOptionsAllowlist$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OldOptionsAllowlist$Outbound, z.ZodTypeDef, OldOptionsAllowlist>;
    /** @deprecated use `OldOptionsAllowlist$Outbound` instead. */
    type Outbound = OldOptionsAllowlist$Outbound;
}
export declare function oldOptionsAllowlistToJSON(oldOptionsAllowlist: OldOptionsAllowlist): string;
export declare function oldOptionsAllowlistFromJSON(jsonString: string): SafeParseResult<OldOptionsAllowlist, SDKValidationError>;
/** @internal */
export declare const EightyFour$inboundSchema: z.ZodType<EightyFour, z.ZodTypeDef, unknown>;
/** @internal */
export type EightyFour$Outbound = {
    projectName: string;
    optionsAllowlist?: OptionsAllowlist$Outbound | null | undefined;
    oldOptionsAllowlist?: OldOptionsAllowlist$Outbound | null | undefined;
};
/** @internal */
export declare const EightyFour$outboundSchema: z.ZodType<EightyFour$Outbound, z.ZodTypeDef, EightyFour>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EightyFour$ {
    /** @deprecated use `EightyFour$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EightyFour, z.ZodTypeDef, unknown>;
    /** @deprecated use `EightyFour$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EightyFour$Outbound, z.ZodTypeDef, EightyFour>;
    /** @deprecated use `EightyFour$Outbound` instead. */
    type Outbound = EightyFour$Outbound;
}
export declare function eightyFourToJSON(eightyFour: EightyFour): string;
export declare function eightyFourFromJSON(jsonString: string): SafeParseResult<EightyFour, SDKValidationError>;
/** @internal */
export declare const TrustedIps$inboundSchema: z.ZodNativeEnum<typeof TrustedIps>;
/** @internal */
export declare const TrustedIps$outboundSchema: z.ZodNativeEnum<typeof TrustedIps>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TrustedIps$ {
    /** @deprecated use `TrustedIps$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly All: "all";
        readonly Preview: "preview";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
        readonly Production: "production";
    }>;
    /** @deprecated use `TrustedIps$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly All: "all";
        readonly Preview: "preview";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
        readonly Production: "production";
    }>;
}
/** @internal */
export declare const OldTrustedIps$inboundSchema: z.ZodNativeEnum<typeof OldTrustedIps>;
/** @internal */
export declare const OldTrustedIps$outboundSchema: z.ZodNativeEnum<typeof OldTrustedIps>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OldTrustedIps$ {
    /** @deprecated use `OldTrustedIps$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly All: "all";
        readonly Preview: "preview";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
        readonly Production: "production";
    }>;
    /** @deprecated use `OldTrustedIps$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly All: "all";
        readonly Preview: "preview";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
        readonly Production: "production";
    }>;
}
/** @internal */
export declare const EightyThree$inboundSchema: z.ZodType<EightyThree, z.ZodTypeDef, unknown>;
/** @internal */
export type EightyThree$Outbound = {
    projectName: string;
    trustedIps?: string | null | undefined;
    oldTrustedIps?: string | null | undefined;
    addedAddresses?: Array<string> | null | undefined;
    removedAddresses?: Array<string> | null | undefined;
};
/** @internal */
export declare const EightyThree$outboundSchema: z.ZodType<EightyThree$Outbound, z.ZodTypeDef, EightyThree>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EightyThree$ {
    /** @deprecated use `EightyThree$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EightyThree, z.ZodTypeDef, unknown>;
    /** @deprecated use `EightyThree$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EightyThree$Outbound, z.ZodTypeDef, EightyThree>;
    /** @deprecated use `EightyThree$Outbound` instead. */
    type Outbound = EightyThree$Outbound;
}
export declare function eightyThreeToJSON(eightyThree: EightyThree): string;
export declare function eightyThreeFromJSON(jsonString: string): SafeParseResult<EightyThree, SDKValidationError>;
/** @internal */
export declare const PasswordProtection2$inboundSchema: z.ZodNativeEnum<typeof PasswordProtection2>;
/** @internal */
export declare const PasswordProtection2$outboundSchema: z.ZodNativeEnum<typeof PasswordProtection2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PasswordProtection2$ {
    /** @deprecated use `PasswordProtection2$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly All: "all";
        readonly Preview: "preview";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
    /** @deprecated use `PasswordProtection2$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly All: "all";
        readonly Preview: "preview";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
}
/** @internal */
export declare const PasswordProtectionDeploymentType$inboundSchema: z.ZodNativeEnum<typeof PasswordProtectionDeploymentType>;
/** @internal */
export declare const PasswordProtectionDeploymentType$outboundSchema: z.ZodNativeEnum<typeof PasswordProtectionDeploymentType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PasswordProtectionDeploymentType$ {
    /** @deprecated use `PasswordProtectionDeploymentType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly All: "all";
        readonly Preview: "preview";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
    /** @deprecated use `PasswordProtectionDeploymentType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly All: "all";
        readonly Preview: "preview";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
}
/** @internal */
export declare const PasswordProtection1$inboundSchema: z.ZodType<PasswordProtection1, z.ZodTypeDef, unknown>;
/** @internal */
export type PasswordProtection1$Outbound = {
    deploymentType: string;
};
/** @internal */
export declare const PasswordProtection1$outboundSchema: z.ZodType<PasswordProtection1$Outbound, z.ZodTypeDef, PasswordProtection1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PasswordProtection1$ {
    /** @deprecated use `PasswordProtection1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PasswordProtection1, z.ZodTypeDef, unknown>;
    /** @deprecated use `PasswordProtection1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PasswordProtection1$Outbound, z.ZodTypeDef, PasswordProtection1>;
    /** @deprecated use `PasswordProtection1$Outbound` instead. */
    type Outbound = PasswordProtection1$Outbound;
}
export declare function passwordProtection1ToJSON(passwordProtection1: PasswordProtection1): string;
export declare function passwordProtection1FromJSON(jsonString: string): SafeParseResult<PasswordProtection1, SDKValidationError>;
/** @internal */
export declare const PayloadPasswordProtection$inboundSchema: z.ZodType<PayloadPasswordProtection, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadPasswordProtection$Outbound = PasswordProtection1$Outbound | string;
/** @internal */
export declare const PayloadPasswordProtection$outboundSchema: z.ZodType<PayloadPasswordProtection$Outbound, z.ZodTypeDef, PayloadPasswordProtection>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadPasswordProtection$ {
    /** @deprecated use `PayloadPasswordProtection$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadPasswordProtection, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadPasswordProtection$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadPasswordProtection$Outbound, z.ZodTypeDef, PayloadPasswordProtection>;
    /** @deprecated use `PayloadPasswordProtection$Outbound` instead. */
    type Outbound = PayloadPasswordProtection$Outbound;
}
export declare function payloadPasswordProtectionToJSON(payloadPasswordProtection: PayloadPasswordProtection): string;
export declare function payloadPasswordProtectionFromJSON(jsonString: string): SafeParseResult<PayloadPasswordProtection, SDKValidationError>;
/** @internal */
export declare const OldPasswordProtection2$inboundSchema: z.ZodNativeEnum<typeof OldPasswordProtection2>;
/** @internal */
export declare const OldPasswordProtection2$outboundSchema: z.ZodNativeEnum<typeof OldPasswordProtection2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OldPasswordProtection2$ {
    /** @deprecated use `OldPasswordProtection2$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly All: "all";
        readonly Preview: "preview";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
    /** @deprecated use `OldPasswordProtection2$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly All: "all";
        readonly Preview: "preview";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
}
/** @internal */
export declare const OldPasswordProtectionDeploymentType$inboundSchema: z.ZodNativeEnum<typeof OldPasswordProtectionDeploymentType>;
/** @internal */
export declare const OldPasswordProtectionDeploymentType$outboundSchema: z.ZodNativeEnum<typeof OldPasswordProtectionDeploymentType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OldPasswordProtectionDeploymentType$ {
    /** @deprecated use `OldPasswordProtectionDeploymentType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly All: "all";
        readonly Preview: "preview";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
    /** @deprecated use `OldPasswordProtectionDeploymentType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly All: "all";
        readonly Preview: "preview";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
}
/** @internal */
export declare const OldPasswordProtection1$inboundSchema: z.ZodType<OldPasswordProtection1, z.ZodTypeDef, unknown>;
/** @internal */
export type OldPasswordProtection1$Outbound = {
    deploymentType: string;
};
/** @internal */
export declare const OldPasswordProtection1$outboundSchema: z.ZodType<OldPasswordProtection1$Outbound, z.ZodTypeDef, OldPasswordProtection1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OldPasswordProtection1$ {
    /** @deprecated use `OldPasswordProtection1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OldPasswordProtection1, z.ZodTypeDef, unknown>;
    /** @deprecated use `OldPasswordProtection1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OldPasswordProtection1$Outbound, z.ZodTypeDef, OldPasswordProtection1>;
    /** @deprecated use `OldPasswordProtection1$Outbound` instead. */
    type Outbound = OldPasswordProtection1$Outbound;
}
export declare function oldPasswordProtection1ToJSON(oldPasswordProtection1: OldPasswordProtection1): string;
export declare function oldPasswordProtection1FromJSON(jsonString: string): SafeParseResult<OldPasswordProtection1, SDKValidationError>;
/** @internal */
export declare const OldPasswordProtection$inboundSchema: z.ZodType<OldPasswordProtection, z.ZodTypeDef, unknown>;
/** @internal */
export type OldPasswordProtection$Outbound = OldPasswordProtection1$Outbound | string;
/** @internal */
export declare const OldPasswordProtection$outboundSchema: z.ZodType<OldPasswordProtection$Outbound, z.ZodTypeDef, OldPasswordProtection>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OldPasswordProtection$ {
    /** @deprecated use `OldPasswordProtection$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OldPasswordProtection, z.ZodTypeDef, unknown>;
    /** @deprecated use `OldPasswordProtection$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OldPasswordProtection$Outbound, z.ZodTypeDef, OldPasswordProtection>;
    /** @deprecated use `OldPasswordProtection$Outbound` instead. */
    type Outbound = OldPasswordProtection$Outbound;
}
export declare function oldPasswordProtectionToJSON(oldPasswordProtection: OldPasswordProtection): string;
export declare function oldPasswordProtectionFromJSON(jsonString: string): SafeParseResult<OldPasswordProtection, SDKValidationError>;
/** @internal */
export declare const EightyTwo$inboundSchema: z.ZodType<EightyTwo, z.ZodTypeDef, unknown>;
/** @internal */
export type EightyTwo$Outbound = {
    projectName: string;
    passwordProtection: PasswordProtection1$Outbound | string | null;
    oldPasswordProtection: OldPasswordProtection1$Outbound | string | null;
};
/** @internal */
export declare const EightyTwo$outboundSchema: z.ZodType<EightyTwo$Outbound, z.ZodTypeDef, EightyTwo>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EightyTwo$ {
    /** @deprecated use `EightyTwo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EightyTwo, z.ZodTypeDef, unknown>;
    /** @deprecated use `EightyTwo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EightyTwo$Outbound, z.ZodTypeDef, EightyTwo>;
    /** @deprecated use `EightyTwo$Outbound` instead. */
    type Outbound = EightyTwo$Outbound;
}
export declare function eightyTwoToJSON(eightyTwo: EightyTwo): string;
export declare function eightyTwoFromJSON(jsonString: string): SafeParseResult<EightyTwo, SDKValidationError>;
/** @internal */
export declare const SsoProtection2$inboundSchema: z.ZodNativeEnum<typeof SsoProtection2>;
/** @internal */
export declare const SsoProtection2$outboundSchema: z.ZodNativeEnum<typeof SsoProtection2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SsoProtection2$ {
    /** @deprecated use `SsoProtection2$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly All: "all";
        readonly Preview: "preview";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
    /** @deprecated use `SsoProtection2$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly All: "all";
        readonly Preview: "preview";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
}
/** @internal */
export declare const DeploymentType$inboundSchema: z.ZodNativeEnum<typeof DeploymentType>;
/** @internal */
export declare const DeploymentType$outboundSchema: z.ZodNativeEnum<typeof DeploymentType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace DeploymentType$ {
    /** @deprecated use `DeploymentType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly All: "all";
        readonly Preview: "preview";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
    /** @deprecated use `DeploymentType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly All: "all";
        readonly Preview: "preview";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
}
/** @internal */
export declare const SsoProtection1$inboundSchema: z.ZodType<SsoProtection1, z.ZodTypeDef, unknown>;
/** @internal */
export type SsoProtection1$Outbound = {
    deploymentType: string;
};
/** @internal */
export declare const SsoProtection1$outboundSchema: z.ZodType<SsoProtection1$Outbound, z.ZodTypeDef, SsoProtection1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SsoProtection1$ {
    /** @deprecated use `SsoProtection1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SsoProtection1, z.ZodTypeDef, unknown>;
    /** @deprecated use `SsoProtection1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SsoProtection1$Outbound, z.ZodTypeDef, SsoProtection1>;
    /** @deprecated use `SsoProtection1$Outbound` instead. */
    type Outbound = SsoProtection1$Outbound;
}
export declare function ssoProtection1ToJSON(ssoProtection1: SsoProtection1): string;
export declare function ssoProtection1FromJSON(jsonString: string): SafeParseResult<SsoProtection1, SDKValidationError>;
/** @internal */
export declare const PayloadSsoProtection$inboundSchema: z.ZodType<PayloadSsoProtection, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadSsoProtection$Outbound = SsoProtection1$Outbound | string;
/** @internal */
export declare const PayloadSsoProtection$outboundSchema: z.ZodType<PayloadSsoProtection$Outbound, z.ZodTypeDef, PayloadSsoProtection>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadSsoProtection$ {
    /** @deprecated use `PayloadSsoProtection$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadSsoProtection, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadSsoProtection$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadSsoProtection$Outbound, z.ZodTypeDef, PayloadSsoProtection>;
    /** @deprecated use `PayloadSsoProtection$Outbound` instead. */
    type Outbound = PayloadSsoProtection$Outbound;
}
export declare function payloadSsoProtectionToJSON(payloadSsoProtection: PayloadSsoProtection): string;
export declare function payloadSsoProtectionFromJSON(jsonString: string): SafeParseResult<PayloadSsoProtection, SDKValidationError>;
/** @internal */
export declare const OldSsoProtection2$inboundSchema: z.ZodNativeEnum<typeof OldSsoProtection2>;
/** @internal */
export declare const OldSsoProtection2$outboundSchema: z.ZodNativeEnum<typeof OldSsoProtection2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OldSsoProtection2$ {
    /** @deprecated use `OldSsoProtection2$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly All: "all";
        readonly Preview: "preview";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
    /** @deprecated use `OldSsoProtection2$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly All: "all";
        readonly Preview: "preview";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
}
/** @internal */
export declare const OldSsoProtectionDeploymentType$inboundSchema: z.ZodNativeEnum<typeof OldSsoProtectionDeploymentType>;
/** @internal */
export declare const OldSsoProtectionDeploymentType$outboundSchema: z.ZodNativeEnum<typeof OldSsoProtectionDeploymentType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OldSsoProtectionDeploymentType$ {
    /** @deprecated use `OldSsoProtectionDeploymentType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly All: "all";
        readonly Preview: "preview";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
    /** @deprecated use `OldSsoProtectionDeploymentType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly All: "all";
        readonly Preview: "preview";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
}
/** @internal */
export declare const OldSsoProtection1$inboundSchema: z.ZodType<OldSsoProtection1, z.ZodTypeDef, unknown>;
/** @internal */
export type OldSsoProtection1$Outbound = {
    deploymentType: string;
};
/** @internal */
export declare const OldSsoProtection1$outboundSchema: z.ZodType<OldSsoProtection1$Outbound, z.ZodTypeDef, OldSsoProtection1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OldSsoProtection1$ {
    /** @deprecated use `OldSsoProtection1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OldSsoProtection1, z.ZodTypeDef, unknown>;
    /** @deprecated use `OldSsoProtection1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OldSsoProtection1$Outbound, z.ZodTypeDef, OldSsoProtection1>;
    /** @deprecated use `OldSsoProtection1$Outbound` instead. */
    type Outbound = OldSsoProtection1$Outbound;
}
export declare function oldSsoProtection1ToJSON(oldSsoProtection1: OldSsoProtection1): string;
export declare function oldSsoProtection1FromJSON(jsonString: string): SafeParseResult<OldSsoProtection1, SDKValidationError>;
/** @internal */
export declare const OldSsoProtection$inboundSchema: z.ZodType<OldSsoProtection, z.ZodTypeDef, unknown>;
/** @internal */
export type OldSsoProtection$Outbound = OldSsoProtection1$Outbound | string;
/** @internal */
export declare const OldSsoProtection$outboundSchema: z.ZodType<OldSsoProtection$Outbound, z.ZodTypeDef, OldSsoProtection>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OldSsoProtection$ {
    /** @deprecated use `OldSsoProtection$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OldSsoProtection, z.ZodTypeDef, unknown>;
    /** @deprecated use `OldSsoProtection$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OldSsoProtection$Outbound, z.ZodTypeDef, OldSsoProtection>;
    /** @deprecated use `OldSsoProtection$Outbound` instead. */
    type Outbound = OldSsoProtection$Outbound;
}
export declare function oldSsoProtectionToJSON(oldSsoProtection: OldSsoProtection): string;
export declare function oldSsoProtectionFromJSON(jsonString: string): SafeParseResult<OldSsoProtection, SDKValidationError>;
/** @internal */
export declare const EightyOne$inboundSchema: z.ZodType<EightyOne, z.ZodTypeDef, unknown>;
/** @internal */
export type EightyOne$Outbound = {
    projectName: string;
    ssoProtection: SsoProtection1$Outbound | string | null;
    oldSsoProtection: OldSsoProtection1$Outbound | string | null;
};
/** @internal */
export declare const EightyOne$outboundSchema: z.ZodType<EightyOne$Outbound, z.ZodTypeDef, EightyOne>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EightyOne$ {
    /** @deprecated use `EightyOne$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EightyOne, z.ZodTypeDef, unknown>;
    /** @deprecated use `EightyOne$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EightyOne$Outbound, z.ZodTypeDef, EightyOne>;
    /** @deprecated use `EightyOne$Outbound` instead. */
    type Outbound = EightyOne$Outbound;
}
export declare function eightyOneToJSON(eightyOne: EightyOne): string;
export declare function eightyOneFromJSON(jsonString: string): SafeParseResult<EightyOne, SDKValidationError>;
/** @internal */
export declare const Eighty$inboundSchema: z.ZodType<Eighty, z.ZodTypeDef, unknown>;
/** @internal */
export type Eighty$Outbound = {
    projectName?: string | undefined;
    projectId: string;
};
/** @internal */
export declare const Eighty$outboundSchema: z.ZodType<Eighty$Outbound, z.ZodTypeDef, Eighty>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Eighty$ {
    /** @deprecated use `Eighty$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Eighty, z.ZodTypeDef, unknown>;
    /** @deprecated use `Eighty$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Eighty$Outbound, z.ZodTypeDef, Eighty>;
    /** @deprecated use `Eighty$Outbound` instead. */
    type Outbound = Eighty$Outbound;
}
export declare function eightyToJSON(eighty: Eighty): string;
export declare function eightyFromJSON(jsonString: string): SafeParseResult<Eighty, SDKValidationError>;
/** @internal */
export declare const SeventyNine$inboundSchema: z.ZodType<SeventyNine, z.ZodTypeDef, unknown>;
/** @internal */
export type SeventyNine$Outbound = {
    projectName?: string | undefined;
    projectId: string;
    projectAnalytics?: {
        [k: string]: any;
    } | undefined;
    prevProjectAnalytics?: {
        [k: string]: any;
    } | null | undefined;
};
/** @internal */
export declare const SeventyNine$outboundSchema: z.ZodType<SeventyNine$Outbound, z.ZodTypeDef, SeventyNine>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SeventyNine$ {
    /** @deprecated use `SeventyNine$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SeventyNine, z.ZodTypeDef, unknown>;
    /** @deprecated use `SeventyNine$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SeventyNine$Outbound, z.ZodTypeDef, SeventyNine>;
    /** @deprecated use `SeventyNine$Outbound` instead. */
    type Outbound = SeventyNine$Outbound;
}
export declare function seventyNineToJSON(seventyNine: SeventyNine): string;
export declare function seventyNineFromJSON(jsonString: string): SafeParseResult<SeventyNine, SDKValidationError>;
/** @internal */
export declare const ProjectAnalytics$inboundSchema: z.ZodType<ProjectAnalytics, z.ZodTypeDef, unknown>;
/** @internal */
export type ProjectAnalytics$Outbound = {
    id: string;
    canceledAt?: number | null | undefined;
    disabledAt: number;
    enabledAt: number;
    paidAt?: number | undefined;
    sampleRatePercent?: number | null | undefined;
    spendLimitInDollars?: number | null | undefined;
};
/** @internal */
export declare const ProjectAnalytics$outboundSchema: z.ZodType<ProjectAnalytics$Outbound, z.ZodTypeDef, ProjectAnalytics>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ProjectAnalytics$ {
    /** @deprecated use `ProjectAnalytics$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ProjectAnalytics, z.ZodTypeDef, unknown>;
    /** @deprecated use `ProjectAnalytics$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ProjectAnalytics$Outbound, z.ZodTypeDef, ProjectAnalytics>;
    /** @deprecated use `ProjectAnalytics$Outbound` instead. */
    type Outbound = ProjectAnalytics$Outbound;
}
export declare function projectAnalyticsToJSON(projectAnalytics: ProjectAnalytics): string;
export declare function projectAnalyticsFromJSON(jsonString: string): SafeParseResult<ProjectAnalytics, SDKValidationError>;
/** @internal */
export declare const PrevProjectAnalytics$inboundSchema: z.ZodType<PrevProjectAnalytics, z.ZodTypeDef, unknown>;
/** @internal */
export type PrevProjectAnalytics$Outbound = {
    id: string;
    canceledAt?: number | null | undefined;
    disabledAt: number;
    enabledAt: number;
    paidAt?: number | undefined;
    sampleRatePercent?: number | null | undefined;
    spendLimitInDollars?: number | null | undefined;
};
/** @internal */
export declare const PrevProjectAnalytics$outboundSchema: z.ZodType<PrevProjectAnalytics$Outbound, z.ZodTypeDef, PrevProjectAnalytics>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PrevProjectAnalytics$ {
    /** @deprecated use `PrevProjectAnalytics$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PrevProjectAnalytics, z.ZodTypeDef, unknown>;
    /** @deprecated use `PrevProjectAnalytics$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PrevProjectAnalytics$Outbound, z.ZodTypeDef, PrevProjectAnalytics>;
    /** @deprecated use `PrevProjectAnalytics$Outbound` instead. */
    type Outbound = PrevProjectAnalytics$Outbound;
}
export declare function prevProjectAnalyticsToJSON(prevProjectAnalytics: PrevProjectAnalytics): string;
export declare function prevProjectAnalyticsFromJSON(jsonString: string): SafeParseResult<PrevProjectAnalytics, SDKValidationError>;
/** @internal */
export declare const SeventyEight$inboundSchema: z.ZodType<SeventyEight, z.ZodTypeDef, unknown>;
/** @internal */
export type SeventyEight$Outbound = {
    projectName?: string | undefined;
    projectId: string;
    projectAnalytics: ProjectAnalytics$Outbound | null;
    prevProjectAnalytics: PrevProjectAnalytics$Outbound | null;
};
/** @internal */
export declare const SeventyEight$outboundSchema: z.ZodType<SeventyEight$Outbound, z.ZodTypeDef, SeventyEight>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SeventyEight$ {
    /** @deprecated use `SeventyEight$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SeventyEight, z.ZodTypeDef, unknown>;
    /** @deprecated use `SeventyEight$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SeventyEight$Outbound, z.ZodTypeDef, SeventyEight>;
    /** @deprecated use `SeventyEight$Outbound` instead. */
    type Outbound = SeventyEight$Outbound;
}
export declare function seventyEightToJSON(seventyEight: SeventyEight): string;
export declare function seventyEightFromJSON(jsonString: string): SafeParseResult<SeventyEight, SDKValidationError>;
/** @internal */
export declare const SeventySeven$inboundSchema: z.ZodType<SeventySeven, z.ZodTypeDef, unknown>;
/** @internal */
export type SeventySeven$Outbound = {
    projectName: string;
    branch: string;
};
/** @internal */
export declare const SeventySeven$outboundSchema: z.ZodType<SeventySeven$Outbound, z.ZodTypeDef, SeventySeven>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SeventySeven$ {
    /** @deprecated use `SeventySeven$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SeventySeven, z.ZodTypeDef, unknown>;
    /** @deprecated use `SeventySeven$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SeventySeven$Outbound, z.ZodTypeDef, SeventySeven>;
    /** @deprecated use `SeventySeven$Outbound` instead. */
    type Outbound = SeventySeven$Outbound;
}
export declare function seventySevenToJSON(seventySeven: SeventySeven): string;
export declare function seventySevenFromJSON(jsonString: string): SafeParseResult<SeventySeven, SDKValidationError>;
/** @internal */
export declare const UserEventPayload76Role$inboundSchema: z.ZodNativeEnum<typeof UserEventPayload76Role>;
/** @internal */
export declare const UserEventPayload76Role$outboundSchema: z.ZodNativeEnum<typeof UserEventPayload76Role>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload76Role$ {
    /** @deprecated use `UserEventPayload76Role$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly ViewerForPlus: "VIEWER_FOR_PLUS";
        readonly Contributor: "CONTRIBUTOR";
    }>;
    /** @deprecated use `UserEventPayload76Role$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly ViewerForPlus: "VIEWER_FOR_PLUS";
        readonly Contributor: "CONTRIBUTOR";
    }>;
}
/** @internal */
export declare const PayloadOrigin$inboundSchema: z.ZodNativeEnum<typeof PayloadOrigin>;
/** @internal */
export declare const PayloadOrigin$outboundSchema: z.ZodNativeEnum<typeof PayloadOrigin>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadOrigin$ {
    /** @deprecated use `PayloadOrigin$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Teams: "teams";
        readonly Saml: "saml";
        readonly Link: "link";
        readonly Github: "github";
        readonly Gitlab: "gitlab";
        readonly Bitbucket: "bitbucket";
        readonly Mail: "mail";
        readonly Import: "import";
        readonly Dsync: "dsync";
        readonly Feedback: "feedback";
        readonly OrganizationTeams: "organization-teams";
    }>;
    /** @deprecated use `PayloadOrigin$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Teams: "teams";
        readonly Saml: "saml";
        readonly Link: "link";
        readonly Github: "github";
        readonly Gitlab: "gitlab";
        readonly Bitbucket: "bitbucket";
        readonly Mail: "mail";
        readonly Import: "import";
        readonly Dsync: "dsync";
        readonly Feedback: "feedback";
        readonly OrganizationTeams: "organization-teams";
    }>;
}
/** @internal */
export declare const PayloadGitUserId$inboundSchema: z.ZodType<PayloadGitUserId, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadGitUserId$Outbound = string | number;
/** @internal */
export declare const PayloadGitUserId$outboundSchema: z.ZodType<PayloadGitUserId$Outbound, z.ZodTypeDef, PayloadGitUserId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadGitUserId$ {
    /** @deprecated use `PayloadGitUserId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadGitUserId, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadGitUserId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadGitUserId$Outbound, z.ZodTypeDef, PayloadGitUserId>;
    /** @deprecated use `PayloadGitUserId$Outbound` instead. */
    type Outbound = PayloadGitUserId$Outbound;
}
export declare function payloadGitUserIdToJSON(payloadGitUserId: PayloadGitUserId): string;
export declare function payloadGitUserIdFromJSON(jsonString: string): SafeParseResult<PayloadGitUserId, SDKValidationError>;
/** @internal */
export declare const PayloadJoinedFrom$inboundSchema: z.ZodType<PayloadJoinedFrom, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadJoinedFrom$Outbound = {
    origin: string;
    commitId?: string | undefined;
    repoId?: string | undefined;
    repoPath?: string | undefined;
    gitUserId?: string | number | undefined;
    gitUserLogin?: string | undefined;
    ssoUserId?: string | undefined;
    ssoConnectedAt?: number | undefined;
    idpUserId?: string | undefined;
    dsyncUserId?: string | undefined;
    dsyncConnectedAt?: number | undefined;
};
/** @internal */
export declare const PayloadJoinedFrom$outboundSchema: z.ZodType<PayloadJoinedFrom$Outbound, z.ZodTypeDef, PayloadJoinedFrom>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadJoinedFrom$ {
    /** @deprecated use `PayloadJoinedFrom$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadJoinedFrom, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadJoinedFrom$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadJoinedFrom$Outbound, z.ZodTypeDef, PayloadJoinedFrom>;
    /** @deprecated use `PayloadJoinedFrom$Outbound` instead. */
    type Outbound = PayloadJoinedFrom$Outbound;
}
export declare function payloadJoinedFromToJSON(payloadJoinedFrom: PayloadJoinedFrom): string;
export declare function payloadJoinedFromFromJSON(jsonString: string): SafeParseResult<PayloadJoinedFrom, SDKValidationError>;
/** @internal */
export declare const RemovedUsers$inboundSchema: z.ZodType<RemovedUsers, z.ZodTypeDef, unknown>;
/** @internal */
export type RemovedUsers$Outbound = {
    role: string;
    confirmed: boolean;
    confirmedAt?: number | undefined;
    joinedFrom?: PayloadJoinedFrom$Outbound | undefined;
};
/** @internal */
export declare const RemovedUsers$outboundSchema: z.ZodType<RemovedUsers$Outbound, z.ZodTypeDef, RemovedUsers>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RemovedUsers$ {
    /** @deprecated use `RemovedUsers$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RemovedUsers, z.ZodTypeDef, unknown>;
    /** @deprecated use `RemovedUsers$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RemovedUsers$Outbound, z.ZodTypeDef, RemovedUsers>;
    /** @deprecated use `RemovedUsers$Outbound` instead. */
    type Outbound = RemovedUsers$Outbound;
}
export declare function removedUsersToJSON(removedUsers: RemovedUsers): string;
export declare function removedUsersFromJSON(jsonString: string): SafeParseResult<RemovedUsers, SDKValidationError>;
/** @internal */
export declare const SeventySix$inboundSchema: z.ZodType<SeventySix, z.ZodTypeDef, unknown>;
/** @internal */
export type SeventySix$Outbound = {
    plan: string;
    removedUsers?: {
        [k: string]: RemovedUsers$Outbound;
    } | undefined;
    priorPlan?: string | undefined;
    isDowngrade?: boolean | undefined;
    userAgent?: string | undefined;
    isReactivate?: boolean | undefined;
    isTrialUpgrade?: boolean | undefined;
};
/** @internal */
export declare const SeventySix$outboundSchema: z.ZodType<SeventySix$Outbound, z.ZodTypeDef, SeventySix>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SeventySix$ {
    /** @deprecated use `SeventySix$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SeventySix, z.ZodTypeDef, unknown>;
    /** @deprecated use `SeventySix$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SeventySix$Outbound, z.ZodTypeDef, SeventySix>;
    /** @deprecated use `SeventySix$Outbound` instead. */
    type Outbound = SeventySix$Outbound;
}
export declare function seventySixToJSON(seventySix: SeventySix): string;
export declare function seventySixFromJSON(jsonString: string): SafeParseResult<SeventySix, SDKValidationError>;
/** @internal */
export declare const SeventyFive$inboundSchema: z.ZodType<SeventyFive, z.ZodTypeDef, unknown>;
/** @internal */
export type SeventyFive$Outbound = {
    projectName: string;
};
/** @internal */
export declare const SeventyFive$outboundSchema: z.ZodType<SeventyFive$Outbound, z.ZodTypeDef, SeventyFive>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SeventyFive$ {
    /** @deprecated use `SeventyFive$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SeventyFive, z.ZodTypeDef, unknown>;
    /** @deprecated use `SeventyFive$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SeventyFive$Outbound, z.ZodTypeDef, SeventyFive>;
    /** @deprecated use `SeventyFive$Outbound` instead. */
    type Outbound = SeventyFive$Outbound;
}
export declare function seventyFiveToJSON(seventyFive: SeventyFive): string;
export declare function seventyFiveFromJSON(jsonString: string): SafeParseResult<SeventyFive, SDKValidationError>;
/** @internal */
export declare const SeventyFour$inboundSchema: z.ZodType<SeventyFour, z.ZodTypeDef, unknown>;
/** @internal */
export type SeventyFour$Outbound = {
    projectId: string;
    toDeploymentId: string;
    projectName: string;
};
/** @internal */
export declare const SeventyFour$outboundSchema: z.ZodType<SeventyFour$Outbound, z.ZodTypeDef, SeventyFour>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SeventyFour$ {
    /** @deprecated use `SeventyFour$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SeventyFour, z.ZodTypeDef, unknown>;
    /** @deprecated use `SeventyFour$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SeventyFour$Outbound, z.ZodTypeDef, SeventyFour>;
    /** @deprecated use `SeventyFour$Outbound` instead. */
    type Outbound = SeventyFour$Outbound;
}
export declare function seventyFourToJSON(seventyFour: SeventyFour): string;
export declare function seventyFourFromJSON(jsonString: string): SafeParseResult<SeventyFour, SDKValidationError>;
/** @internal */
export declare const SeventyThree$inboundSchema: z.ZodType<SeventyThree, z.ZodTypeDef, unknown>;
/** @internal */
export type SeventyThree$Outbound = {
    drainUrl: string | null;
    integrationName?: string | undefined;
};
/** @internal */
export declare const SeventyThree$outboundSchema: z.ZodType<SeventyThree$Outbound, z.ZodTypeDef, SeventyThree>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SeventyThree$ {
    /** @deprecated use `SeventyThree$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SeventyThree, z.ZodTypeDef, unknown>;
    /** @deprecated use `SeventyThree$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SeventyThree$Outbound, z.ZodTypeDef, SeventyThree>;
    /** @deprecated use `SeventyThree$Outbound` instead. */
    type Outbound = SeventyThree$Outbound;
}
export declare function seventyThreeToJSON(seventyThree: SeventyThree): string;
export declare function seventyThreeFromJSON(jsonString: string): SafeParseResult<SeventyThree, SDKValidationError>;
/** @internal */
export declare const SeventyTwo$inboundSchema: z.ZodType<SeventyTwo, z.ZodTypeDef, unknown>;
/** @internal */
export type SeventyTwo$Outbound = {
    logDrainUrl: string;
    integrationName?: string | undefined;
};
/** @internal */
export declare const SeventyTwo$outboundSchema: z.ZodType<SeventyTwo$Outbound, z.ZodTypeDef, SeventyTwo>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SeventyTwo$ {
    /** @deprecated use `SeventyTwo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SeventyTwo, z.ZodTypeDef, unknown>;
    /** @deprecated use `SeventyTwo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SeventyTwo$Outbound, z.ZodTypeDef, SeventyTwo>;
    /** @deprecated use `SeventyTwo$Outbound` instead. */
    type Outbound = SeventyTwo$Outbound;
}
export declare function seventyTwoToJSON(seventyTwo: SeventyTwo): string;
export declare function seventyTwoFromJSON(jsonString: string): SafeParseResult<SeventyTwo, SDKValidationError>;
/** @internal */
export declare const SeventyOne$inboundSchema: z.ZodType<SeventyOne, z.ZodTypeDef, unknown>;
/** @internal */
export type SeventyOne$Outbound = {
    logDrainUrl: string | null;
    integrationName?: string | undefined;
};
/** @internal */
export declare const SeventyOne$outboundSchema: z.ZodType<SeventyOne$Outbound, z.ZodTypeDef, SeventyOne>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SeventyOne$ {
    /** @deprecated use `SeventyOne$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SeventyOne, z.ZodTypeDef, unknown>;
    /** @deprecated use `SeventyOne$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SeventyOne$Outbound, z.ZodTypeDef, SeventyOne>;
    /** @deprecated use `SeventyOne$Outbound` instead. */
    type Outbound = SeventyOne$Outbound;
}
export declare function seventyOneToJSON(seventyOne: SeventyOne): string;
export declare function seventyOneFromJSON(jsonString: string): SafeParseResult<SeventyOne, SDKValidationError>;
/** @internal */
export declare const PayloadName$inboundSchema: z.ZodNativeEnum<typeof PayloadName>;
/** @internal */
export declare const PayloadName$outboundSchema: z.ZodNativeEnum<typeof PayloadName>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadName$ {
    /** @deprecated use `PayloadName$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Iphone: "iphone";
        readonly Ipad: "ipad";
        readonly Ipod: "ipod";
        readonly Chrome: "chrome";
        readonly Firefox: "firefox";
        readonly Mozilla: "mozilla";
        readonly Unknown: "unknown";
    }>;
    /** @deprecated use `PayloadName$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Iphone: "iphone";
        readonly Ipad: "ipad";
        readonly Ipod: "ipod";
        readonly Chrome: "chrome";
        readonly Firefox: "firefox";
        readonly Mozilla: "mozilla";
        readonly Unknown: "unknown";
    }>;
}
/** @internal */
export declare const Browser$inboundSchema: z.ZodType<Browser, z.ZodTypeDef, unknown>;
/** @internal */
export type Browser$Outbound = {
    name: string;
};
/** @internal */
export declare const Browser$outboundSchema: z.ZodType<Browser$Outbound, z.ZodTypeDef, Browser>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Browser$ {
    /** @deprecated use `Browser$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Browser, z.ZodTypeDef, unknown>;
    /** @deprecated use `Browser$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Browser$Outbound, z.ZodTypeDef, Browser>;
    /** @deprecated use `Browser$Outbound` instead. */
    type Outbound = Browser$Outbound;
}
export declare function browserToJSON(browser: Browser): string;
export declare function browserFromJSON(jsonString: string): SafeParseResult<Browser, SDKValidationError>;
/** @internal */
export declare const UserEventPayloadName$inboundSchema: z.ZodNativeEnum<typeof UserEventPayloadName>;
/** @internal */
export declare const UserEventPayloadName$outboundSchema: z.ZodNativeEnum<typeof UserEventPayloadName>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayloadName$ {
    /** @deprecated use `UserEventPayloadName$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Unknown: "unknown";
        readonly Darwin: "darwin";
        readonly Win32: "win32";
        readonly Win: "win";
        readonly Windows: "windows";
        readonly Linux: "linux";
        readonly Freebsd: "freebsd";
        readonly Sunos: "sunos";
        readonly Mac: "mac";
        readonly Ios: "ios";
        readonly Android: "android";
        readonly MacOS: "Mac OS";
        readonly OsX: "OS X";
    }>;
    /** @deprecated use `UserEventPayloadName$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Unknown: "unknown";
        readonly Darwin: "darwin";
        readonly Win32: "win32";
        readonly Win: "win";
        readonly Windows: "windows";
        readonly Linux: "linux";
        readonly Freebsd: "freebsd";
        readonly Sunos: "sunos";
        readonly Mac: "mac";
        readonly Ios: "ios";
        readonly Android: "android";
        readonly MacOS: "Mac OS";
        readonly OsX: "OS X";
    }>;
}
/** @internal */
export declare const Os$inboundSchema: z.ZodType<Os, z.ZodTypeDef, unknown>;
/** @internal */
export type Os$Outbound = {
    name: string;
};
/** @internal */
export declare const Os$outboundSchema: z.ZodType<Os$Outbound, z.ZodTypeDef, Os>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Os$ {
    /** @deprecated use `Os$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Os, z.ZodTypeDef, unknown>;
    /** @deprecated use `Os$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Os$Outbound, z.ZodTypeDef, Os>;
    /** @deprecated use `Os$Outbound` instead. */
    type Outbound = Os$Outbound;
}
export declare function osToJSON(os: Os): string;
export declare function osFromJSON(jsonString: string): SafeParseResult<Os, SDKValidationError>;
/** @internal */
export declare const UserAgent$inboundSchema: z.ZodType<UserAgent, z.ZodTypeDef, unknown>;
/** @internal */
export type UserAgent$Outbound = {
    browser: Browser$Outbound;
    ua: string;
    program: string;
    os: Os$Outbound;
};
/** @internal */
export declare const UserAgent$outboundSchema: z.ZodType<UserAgent$Outbound, z.ZodTypeDef, UserAgent>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserAgent$ {
    /** @deprecated use `UserAgent$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserAgent, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserAgent$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserAgent$Outbound, z.ZodTypeDef, UserAgent>;
    /** @deprecated use `UserAgent$Outbound` instead. */
    type Outbound = UserAgent$Outbound;
}
export declare function userAgentToJSON(userAgent: UserAgent): string;
export declare function userAgentFromJSON(jsonString: string): SafeParseResult<UserAgent, SDKValidationError>;
/** @internal */
export declare const Names$inboundSchema: z.ZodType<Names, z.ZodTypeDef, unknown>;
/** @internal */
export type Names$Outbound = {
    en: string;
};
/** @internal */
export declare const Names$outboundSchema: z.ZodType<Names$Outbound, z.ZodTypeDef, Names>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Names$ {
    /** @deprecated use `Names$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Names, z.ZodTypeDef, unknown>;
    /** @deprecated use `Names$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Names$Outbound, z.ZodTypeDef, Names>;
    /** @deprecated use `Names$Outbound` instead. */
    type Outbound = Names$Outbound;
}
export declare function namesToJSON(names: Names): string;
export declare function namesFromJSON(jsonString: string): SafeParseResult<Names, SDKValidationError>;
/** @internal */
export declare const City$inboundSchema: z.ZodType<City, z.ZodTypeDef, unknown>;
/** @internal */
export type City$Outbound = {
    names: Names$Outbound;
};
/** @internal */
export declare const City$outboundSchema: z.ZodType<City$Outbound, z.ZodTypeDef, City>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace City$ {
    /** @deprecated use `City$inboundSchema` instead. */
    const inboundSchema: z.ZodType<City, z.ZodTypeDef, unknown>;
    /** @deprecated use `City$outboundSchema` instead. */
    const outboundSchema: z.ZodType<City$Outbound, z.ZodTypeDef, City>;
    /** @deprecated use `City$Outbound` instead. */
    type Outbound = City$Outbound;
}
export declare function cityToJSON(city: City): string;
export declare function cityFromJSON(jsonString: string): SafeParseResult<City, SDKValidationError>;
/** @internal */
export declare const PayloadNames$inboundSchema: z.ZodType<PayloadNames, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadNames$Outbound = {
    en: string;
};
/** @internal */
export declare const PayloadNames$outboundSchema: z.ZodType<PayloadNames$Outbound, z.ZodTypeDef, PayloadNames>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadNames$ {
    /** @deprecated use `PayloadNames$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadNames, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadNames$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadNames$Outbound, z.ZodTypeDef, PayloadNames>;
    /** @deprecated use `PayloadNames$Outbound` instead. */
    type Outbound = PayloadNames$Outbound;
}
export declare function payloadNamesToJSON(payloadNames: PayloadNames): string;
export declare function payloadNamesFromJSON(jsonString: string): SafeParseResult<PayloadNames, SDKValidationError>;
/** @internal */
export declare const Country$inboundSchema: z.ZodType<Country, z.ZodTypeDef, unknown>;
/** @internal */
export type Country$Outbound = {
    names: PayloadNames$Outbound;
};
/** @internal */
export declare const Country$outboundSchema: z.ZodType<Country$Outbound, z.ZodTypeDef, Country>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Country$ {
    /** @deprecated use `Country$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Country, z.ZodTypeDef, unknown>;
    /** @deprecated use `Country$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Country$Outbound, z.ZodTypeDef, Country>;
    /** @deprecated use `Country$Outbound` instead. */
    type Outbound = Country$Outbound;
}
export declare function countryToJSON(country: Country): string;
export declare function countryFromJSON(jsonString: string): SafeParseResult<Country, SDKValidationError>;
/** @internal */
export declare const UserEventPayloadNames$inboundSchema: z.ZodType<UserEventPayloadNames, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayloadNames$Outbound = {
    en: string;
};
/** @internal */
export declare const UserEventPayloadNames$outboundSchema: z.ZodType<UserEventPayloadNames$Outbound, z.ZodTypeDef, UserEventPayloadNames>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayloadNames$ {
    /** @deprecated use `UserEventPayloadNames$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayloadNames, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayloadNames$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayloadNames$Outbound, z.ZodTypeDef, UserEventPayloadNames>;
    /** @deprecated use `UserEventPayloadNames$Outbound` instead. */
    type Outbound = UserEventPayloadNames$Outbound;
}
export declare function userEventPayloadNamesToJSON(userEventPayloadNames: UserEventPayloadNames): string;
export declare function userEventPayloadNamesFromJSON(jsonString: string): SafeParseResult<UserEventPayloadNames, SDKValidationError>;
/** @internal */
export declare const MostSpecificSubdivision$inboundSchema: z.ZodType<MostSpecificSubdivision, z.ZodTypeDef, unknown>;
/** @internal */
export type MostSpecificSubdivision$Outbound = {
    names: UserEventPayloadNames$Outbound;
};
/** @internal */
export declare const MostSpecificSubdivision$outboundSchema: z.ZodType<MostSpecificSubdivision$Outbound, z.ZodTypeDef, MostSpecificSubdivision>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MostSpecificSubdivision$ {
    /** @deprecated use `MostSpecificSubdivision$inboundSchema` instead. */
    const inboundSchema: z.ZodType<MostSpecificSubdivision, z.ZodTypeDef, unknown>;
    /** @deprecated use `MostSpecificSubdivision$outboundSchema` instead. */
    const outboundSchema: z.ZodType<MostSpecificSubdivision$Outbound, z.ZodTypeDef, MostSpecificSubdivision>;
    /** @deprecated use `MostSpecificSubdivision$Outbound` instead. */
    type Outbound = MostSpecificSubdivision$Outbound;
}
export declare function mostSpecificSubdivisionToJSON(mostSpecificSubdivision: MostSpecificSubdivision): string;
export declare function mostSpecificSubdivisionFromJSON(jsonString: string): SafeParseResult<MostSpecificSubdivision, SDKValidationError>;
/** @internal */
export declare const Geolocation$inboundSchema: z.ZodType<Geolocation, z.ZodTypeDef, unknown>;
/** @internal */
export type Geolocation$Outbound = {
    city?: City$Outbound | undefined;
    country: Country$Outbound;
    most_specific_subdivision?: MostSpecificSubdivision$Outbound | undefined;
    regionName?: string | undefined;
};
/** @internal */
export declare const Geolocation$outboundSchema: z.ZodType<Geolocation$Outbound, z.ZodTypeDef, Geolocation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Geolocation$ {
    /** @deprecated use `Geolocation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Geolocation, z.ZodTypeDef, unknown>;
    /** @deprecated use `Geolocation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Geolocation$Outbound, z.ZodTypeDef, Geolocation>;
    /** @deprecated use `Geolocation$Outbound` instead. */
    type Outbound = Geolocation$Outbound;
}
export declare function geolocationToJSON(geolocation: Geolocation): string;
export declare function geolocationFromJSON(jsonString: string): SafeParseResult<Geolocation, SDKValidationError>;
/** @internal */
export declare const Seventy$inboundSchema: z.ZodType<Seventy, z.ZodTypeDef, unknown>;
/** @internal */
export type Seventy$Outbound = {
    userAgent?: UserAgent$Outbound | undefined;
    geolocation?: Geolocation$Outbound | null | undefined;
    viaGithub: boolean;
    viaGitlab: boolean;
    viaBitbucket: boolean;
    viaGoogle: boolean;
    viaSamlSso: boolean;
    viaPasskey: boolean;
    ssoType?: string | undefined;
    env?: string | undefined;
    os?: string | undefined;
    username?: string | undefined;
};
/** @internal */
export declare const Seventy$outboundSchema: z.ZodType<Seventy$Outbound, z.ZodTypeDef, Seventy>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Seventy$ {
    /** @deprecated use `Seventy$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Seventy, z.ZodTypeDef, unknown>;
    /** @deprecated use `Seventy$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Seventy$Outbound, z.ZodTypeDef, Seventy>;
    /** @deprecated use `Seventy$Outbound` instead. */
    type Outbound = Seventy$Outbound;
}
export declare function seventyToJSON(seventy: Seventy): string;
export declare function seventyFromJSON(jsonString: string): SafeParseResult<Seventy, SDKValidationError>;
/** @internal */
export declare const SixtyNine$inboundSchema: z.ZodType<SixtyNine, z.ZodTypeDef, unknown>;
/** @internal */
export type SixtyNine$Outbound = {
    integrationId: string;
    configurationId: string;
    integrationSlug: string;
    integrationName: string;
    ownerId: string;
    projectIds?: Array<string> | undefined;
    confirmedScopes: Array<string>;
};
/** @internal */
export declare const SixtyNine$outboundSchema: z.ZodType<SixtyNine$Outbound, z.ZodTypeDef, SixtyNine>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SixtyNine$ {
    /** @deprecated use `SixtyNine$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SixtyNine, z.ZodTypeDef, unknown>;
    /** @deprecated use `SixtyNine$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SixtyNine$Outbound, z.ZodTypeDef, SixtyNine>;
    /** @deprecated use `SixtyNine$Outbound` instead. */
    type Outbound = SixtyNine$Outbound;
}
export declare function sixtyNineToJSON(sixtyNine: SixtyNine): string;
export declare function sixtyNineFromJSON(jsonString: string): SafeParseResult<SixtyNine, SDKValidationError>;
/** @internal */
export declare const SixtyEight$inboundSchema: z.ZodType<SixtyEight, z.ZodTypeDef, unknown>;
/** @internal */
export type SixtyEight$Outbound = {
    projectId: string;
    fromDeploymentId: string;
    toDeploymentId: string;
    projectName: string;
    reason?: string | undefined;
};
/** @internal */
export declare const SixtyEight$outboundSchema: z.ZodType<SixtyEight$Outbound, z.ZodTypeDef, SixtyEight>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SixtyEight$ {
    /** @deprecated use `SixtyEight$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SixtyEight, z.ZodTypeDef, unknown>;
    /** @deprecated use `SixtyEight$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SixtyEight$Outbound, z.ZodTypeDef, SixtyEight>;
    /** @deprecated use `SixtyEight$Outbound` instead. */
    type Outbound = SixtyEight$Outbound;
}
export declare function sixtyEightToJSON(sixtyEight: SixtyEight): string;
export declare function sixtyEightFromJSON(jsonString: string): SafeParseResult<SixtyEight, SDKValidationError>;
/** @internal */
export declare const SixtySeven$inboundSchema: z.ZodType<SixtySeven, z.ZodTypeDef, unknown>;
/** @internal */
export type SixtySeven$Outbound = {
    integrationId: string;
    configurationId: string;
    integrationSlug: string;
    integrationName: string;
    ownerId: string;
    projectIds?: Array<string> | undefined;
};
/** @internal */
export declare const SixtySeven$outboundSchema: z.ZodType<SixtySeven$Outbound, z.ZodTypeDef, SixtySeven>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SixtySeven$ {
    /** @deprecated use `SixtySeven$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SixtySeven, z.ZodTypeDef, unknown>;
    /** @deprecated use `SixtySeven$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SixtySeven$Outbound, z.ZodTypeDef, SixtySeven>;
    /** @deprecated use `SixtySeven$Outbound` instead. */
    type Outbound = SixtySeven$Outbound;
}
export declare function sixtySevenToJSON(sixtySeven: SixtySeven): string;
export declare function sixtySevenFromJSON(jsonString: string): SafeParseResult<SixtySeven, SDKValidationError>;
/** @internal */
export declare const SixtySix$inboundSchema: z.ZodType<SixtySix, z.ZodTypeDef, unknown>;
/** @internal */
export type SixtySix$Outbound = {
    integrationId: string;
    configurationId: string;
    integrationSlug: string;
    integrationName: string;
    ownerId: string;
    billingPlanId: string;
    billingPlanName?: string | undefined;
};
/** @internal */
export declare const SixtySix$outboundSchema: z.ZodType<SixtySix$Outbound, z.ZodTypeDef, SixtySix>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SixtySix$ {
    /** @deprecated use `SixtySix$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SixtySix, z.ZodTypeDef, unknown>;
    /** @deprecated use `SixtySix$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SixtySix$Outbound, z.ZodTypeDef, SixtySix>;
    /** @deprecated use `SixtySix$Outbound` instead. */
    type Outbound = SixtySix$Outbound;
}
export declare function sixtySixToJSON(sixtySix: SixtySix): string;
export declare function sixtySixFromJSON(jsonString: string): SafeParseResult<SixtySix, SDKValidationError>;
/** @internal */
export declare const Configurations$inboundSchema: z.ZodType<Configurations, z.ZodTypeDef, unknown>;
/** @internal */
export type Configurations$Outbound = {
    integrationId: string;
    configurationId: string;
    integrationSlug: string;
    integrationName?: string | undefined;
};
/** @internal */
export declare const Configurations$outboundSchema: z.ZodType<Configurations$Outbound, z.ZodTypeDef, Configurations>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Configurations$ {
    /** @deprecated use `Configurations$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Configurations, z.ZodTypeDef, unknown>;
    /** @deprecated use `Configurations$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Configurations$Outbound, z.ZodTypeDef, Configurations>;
    /** @deprecated use `Configurations$Outbound` instead. */
    type Outbound = Configurations$Outbound;
}
export declare function configurationsToJSON(configurations: Configurations): string;
export declare function configurationsFromJSON(jsonString: string): SafeParseResult<Configurations, SDKValidationError>;
/** @internal */
export declare const SixtyFive$inboundSchema: z.ZodType<SixtyFive, z.ZodTypeDef, unknown>;
/** @internal */
export type SixtyFive$Outbound = {
    configurations: Array<Configurations$Outbound>;
    ownerId: string;
};
/** @internal */
export declare const SixtyFive$outboundSchema: z.ZodType<SixtyFive$Outbound, z.ZodTypeDef, SixtyFive>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SixtyFive$ {
    /** @deprecated use `SixtyFive$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SixtyFive, z.ZodTypeDef, unknown>;
    /** @deprecated use `SixtyFive$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SixtyFive$Outbound, z.ZodTypeDef, SixtyFive>;
    /** @deprecated use `SixtyFive$Outbound` instead. */
    type Outbound = SixtyFive$Outbound;
}
export declare function sixtyFiveToJSON(sixtyFive: SixtyFive): string;
export declare function sixtyFiveFromJSON(jsonString: string): SafeParseResult<SixtyFive, SDKValidationError>;
/** @internal */
export declare const UserEventPayload64Action$inboundSchema: z.ZodNativeEnum<typeof UserEventPayload64Action>;
/** @internal */
export declare const UserEventPayload64Action$outboundSchema: z.ZodNativeEnum<typeof UserEventPayload64Action>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload64Action$ {
    /** @deprecated use `UserEventPayload64Action$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly HardBlocked: "hard-blocked";
        readonly SoftBlocked: "soft-blocked";
        readonly Unblocked: "unblocked";
    }>;
    /** @deprecated use `UserEventPayload64Action$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly HardBlocked: "hard-blocked";
        readonly SoftBlocked: "soft-blocked";
        readonly Unblocked: "unblocked";
    }>;
}
/** @internal */
export declare const BlockHistory$inboundSchema: z.ZodType<BlockHistory, z.ZodTypeDef, unknown>;
/** @internal */
export type BlockHistory$Outbound = {
    action: string;
    createdAt: number;
    caseId?: string | undefined;
    reason: string;
    actor?: string | undefined;
    statusCode?: number | undefined;
    comment?: string | undefined;
};
/** @internal */
export declare const BlockHistory$outboundSchema: z.ZodType<BlockHistory$Outbound, z.ZodTypeDef, BlockHistory>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BlockHistory$ {
    /** @deprecated use `BlockHistory$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BlockHistory, z.ZodTypeDef, unknown>;
    /** @deprecated use `BlockHistory$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BlockHistory$Outbound, z.ZodTypeDef, BlockHistory>;
    /** @deprecated use `BlockHistory$Outbound` instead. */
    type Outbound = BlockHistory$Outbound;
}
export declare function blockHistoryToJSON(blockHistory: BlockHistory): string;
export declare function blockHistoryFromJSON(jsonString: string): SafeParseResult<BlockHistory, SDKValidationError>;
/** @internal */
export declare const History$inboundSchema: z.ZodType<History, z.ZodTypeDef, unknown>;
/** @internal */
export type History$Outbound = {
    scanner: string;
    reason: string;
    by: string;
    byId: string;
    at: number;
};
/** @internal */
export declare const History$outboundSchema: z.ZodType<History$Outbound, z.ZodTypeDef, History>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace History$ {
    /** @deprecated use `History$inboundSchema` instead. */
    const inboundSchema: z.ZodType<History, z.ZodTypeDef, unknown>;
    /** @deprecated use `History$outboundSchema` instead. */
    const outboundSchema: z.ZodType<History$Outbound, z.ZodTypeDef, History>;
    /** @deprecated use `History$Outbound` instead. */
    type Outbound = History$Outbound;
}
export declare function historyToJSON(history: History): string;
export declare function historyFromJSON(jsonString: string): SafeParseResult<History, SDKValidationError>;
/** @internal */
export declare const Abuse$inboundSchema: z.ZodType<Abuse, z.ZodTypeDef, unknown>;
/** @internal */
export type Abuse$Outbound = {
    blockHistory?: Array<BlockHistory$Outbound> | undefined;
    gitAuthHistory?: Array<string> | undefined;
    history?: Array<History$Outbound> | undefined;
    gitLineageBlocks?: number | undefined;
    gitLineageBlocksDry?: number | undefined;
    scanner?: string | undefined;
    updatedAt: number;
    creationUserAgent?: string | undefined;
    creationIp?: string | undefined;
    removedPhoneNumbers?: string | undefined;
};
/** @internal */
export declare const Abuse$outboundSchema: z.ZodType<Abuse$Outbound, z.ZodTypeDef, Abuse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Abuse$ {
    /** @deprecated use `Abuse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Abuse, z.ZodTypeDef, unknown>;
    /** @deprecated use `Abuse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Abuse$Outbound, z.ZodTypeDef, Abuse>;
    /** @deprecated use `Abuse$Outbound` instead. */
    type Outbound = Abuse$Outbound;
}
export declare function abuseToJSON(abuse: Abuse): string;
export declare function abuseFromJSON(jsonString: string): SafeParseResult<Abuse, SDKValidationError>;
/** @internal */
export declare const Plan$inboundSchema: z.ZodNativeEnum<typeof Plan>;
/** @internal */
export declare const Plan$outboundSchema: z.ZodNativeEnum<typeof Plan>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Plan$ {
    /** @deprecated use `Plan$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Pro: "pro";
        readonly Enterprise: "enterprise";
        readonly Hobby: "hobby";
    }>;
    /** @deprecated use `Plan$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Pro: "pro";
        readonly Enterprise: "enterprise";
        readonly Hobby: "hobby";
    }>;
}
/** @internal */
export declare const PayloadBilling$inboundSchema: z.ZodType<PayloadBilling, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadBilling$Outbound = {
    plan: string;
};
/** @internal */
export declare const PayloadBilling$outboundSchema: z.ZodType<PayloadBilling$Outbound, z.ZodTypeDef, PayloadBilling>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadBilling$ {
    /** @deprecated use `PayloadBilling$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadBilling, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadBilling$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadBilling$Outbound, z.ZodTypeDef, PayloadBilling>;
    /** @deprecated use `PayloadBilling$Outbound` instead. */
    type Outbound = PayloadBilling$Outbound;
}
export declare function payloadBillingToJSON(payloadBilling: PayloadBilling): string;
export declare function payloadBillingFromJSON(jsonString: string): SafeParseResult<PayloadBilling, SDKValidationError>;
/** @internal */
export declare const UserEventCredentialsType$inboundSchema: z.ZodNativeEnum<typeof UserEventCredentialsType>;
/** @internal */
export declare const UserEventCredentialsType$outboundSchema: z.ZodNativeEnum<typeof UserEventCredentialsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventCredentialsType$ {
    /** @deprecated use `UserEventCredentialsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly GithubOauthCustomHost: "github-oauth-custom-host";
    }>;
    /** @deprecated use `UserEventCredentialsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly GithubOauthCustomHost: "github-oauth-custom-host";
    }>;
}
/** @internal */
export declare const Credentials2$inboundSchema: z.ZodType<Credentials2, z.ZodTypeDef, unknown>;
/** @internal */
export type Credentials2$Outbound = {
    type: string;
    host: string;
    id: string;
};
/** @internal */
export declare const Credentials2$outboundSchema: z.ZodType<Credentials2$Outbound, z.ZodTypeDef, Credentials2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Credentials2$ {
    /** @deprecated use `Credentials2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Credentials2, z.ZodTypeDef, unknown>;
    /** @deprecated use `Credentials2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Credentials2$Outbound, z.ZodTypeDef, Credentials2>;
    /** @deprecated use `Credentials2$Outbound` instead. */
    type Outbound = Credentials2$Outbound;
}
export declare function credentials2ToJSON(credentials2: Credentials2): string;
export declare function credentials2FromJSON(jsonString: string): SafeParseResult<Credentials2, SDKValidationError>;
/** @internal */
export declare const CredentialsType$inboundSchema: z.ZodNativeEnum<typeof CredentialsType>;
/** @internal */
export declare const CredentialsType$outboundSchema: z.ZodNativeEnum<typeof CredentialsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CredentialsType$ {
    /** @deprecated use `CredentialsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Gitlab: "gitlab";
        readonly Bitbucket: "bitbucket";
        readonly Google: "google";
        readonly GithubOauth: "github-oauth";
        readonly GithubOauthLimited: "github-oauth-limited";
    }>;
    /** @deprecated use `CredentialsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Gitlab: "gitlab";
        readonly Bitbucket: "bitbucket";
        readonly Google: "google";
        readonly GithubOauth: "github-oauth";
        readonly GithubOauthLimited: "github-oauth-limited";
    }>;
}
/** @internal */
export declare const Credentials1$inboundSchema: z.ZodType<Credentials1, z.ZodTypeDef, unknown>;
/** @internal */
export type Credentials1$Outbound = {
    type: string;
    id: string;
};
/** @internal */
export declare const Credentials1$outboundSchema: z.ZodType<Credentials1$Outbound, z.ZodTypeDef, Credentials1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Credentials1$ {
    /** @deprecated use `Credentials1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Credentials1, z.ZodTypeDef, unknown>;
    /** @deprecated use `Credentials1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Credentials1$Outbound, z.ZodTypeDef, Credentials1>;
    /** @deprecated use `Credentials1$Outbound` instead. */
    type Outbound = Credentials1$Outbound;
}
export declare function credentials1ToJSON(credentials1: Credentials1): string;
export declare function credentials1FromJSON(jsonString: string): SafeParseResult<Credentials1, SDKValidationError>;
/** @internal */
export declare const Credentials$inboundSchema: z.ZodType<Credentials, z.ZodTypeDef, unknown>;
/** @internal */
export type Credentials$Outbound = Credentials2$Outbound | Credentials1$Outbound;
/** @internal */
export declare const Credentials$outboundSchema: z.ZodType<Credentials$Outbound, z.ZodTypeDef, Credentials>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Credentials$ {
    /** @deprecated use `Credentials$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Credentials, z.ZodTypeDef, unknown>;
    /** @deprecated use `Credentials$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Credentials$Outbound, z.ZodTypeDef, Credentials>;
    /** @deprecated use `Credentials$Outbound` instead. */
    type Outbound = Credentials$Outbound;
}
export declare function credentialsToJSON(credentials: Credentials): string;
export declare function credentialsFromJSON(jsonString: string): SafeParseResult<Credentials, SDKValidationError>;
/** @internal */
export declare const PayloadDataCache$inboundSchema: z.ZodType<PayloadDataCache, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadDataCache$Outbound = {
    excessBillingEnabled?: boolean | undefined;
};
/** @internal */
export declare const PayloadDataCache$outboundSchema: z.ZodType<PayloadDataCache$Outbound, z.ZodTypeDef, PayloadDataCache>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadDataCache$ {
    /** @deprecated use `PayloadDataCache$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadDataCache, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadDataCache$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadDataCache$Outbound, z.ZodTypeDef, PayloadDataCache>;
    /** @deprecated use `PayloadDataCache$Outbound` instead. */
    type Outbound = PayloadDataCache$Outbound;
}
export declare function payloadDataCacheToJSON(payloadDataCache: PayloadDataCache): string;
export declare function payloadDataCacheFromJSON(jsonString: string): SafeParseResult<PayloadDataCache, SDKValidationError>;
/** @internal */
export declare const PayloadDismissals$inboundSchema: z.ZodType<PayloadDismissals, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadDismissals$Outbound = {
    scopeId: string;
    createdAt: number;
};
/** @internal */
export declare const PayloadDismissals$outboundSchema: z.ZodType<PayloadDismissals$Outbound, z.ZodTypeDef, PayloadDismissals>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadDismissals$ {
    /** @deprecated use `PayloadDismissals$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadDismissals, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadDismissals$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadDismissals$Outbound, z.ZodTypeDef, PayloadDismissals>;
    /** @deprecated use `PayloadDismissals$Outbound` instead. */
    type Outbound = PayloadDismissals$Outbound;
}
export declare function payloadDismissalsToJSON(payloadDismissals: PayloadDismissals): string;
export declare function payloadDismissalsFromJSON(jsonString: string): SafeParseResult<PayloadDismissals, SDKValidationError>;
/** @internal */
export declare const PayloadDismissedToasts$inboundSchema: z.ZodType<PayloadDismissedToasts, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadDismissedToasts$Outbound = {
    name: string;
    dismissals: Array<PayloadDismissals$Outbound>;
};
/** @internal */
export declare const PayloadDismissedToasts$outboundSchema: z.ZodType<PayloadDismissedToasts$Outbound, z.ZodTypeDef, PayloadDismissedToasts>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadDismissedToasts$ {
    /** @deprecated use `PayloadDismissedToasts$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadDismissedToasts, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadDismissedToasts$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadDismissedToasts$Outbound, z.ZodTypeDef, PayloadDismissedToasts>;
    /** @deprecated use `PayloadDismissedToasts$Outbound` instead. */
    type Outbound = PayloadDismissedToasts$Outbound;
}
export declare function payloadDismissedToastsToJSON(payloadDismissedToasts: PayloadDismissedToasts): string;
export declare function payloadDismissedToastsFromJSON(jsonString: string): SafeParseResult<PayloadDismissedToasts, SDKValidationError>;
/** @internal */
export declare const PayloadFavoriteProjectsAndSpaces$inboundSchema: z.ZodType<PayloadFavoriteProjectsAndSpaces, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadFavoriteProjectsAndSpaces$Outbound = {
    teamId: string;
    projectId: string;
};
/** @internal */
export declare const PayloadFavoriteProjectsAndSpaces$outboundSchema: z.ZodType<PayloadFavoriteProjectsAndSpaces$Outbound, z.ZodTypeDef, PayloadFavoriteProjectsAndSpaces>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadFavoriteProjectsAndSpaces$ {
    /** @deprecated use `PayloadFavoriteProjectsAndSpaces$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadFavoriteProjectsAndSpaces, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadFavoriteProjectsAndSpaces$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadFavoriteProjectsAndSpaces$Outbound, z.ZodTypeDef, PayloadFavoriteProjectsAndSpaces>;
    /** @deprecated use `PayloadFavoriteProjectsAndSpaces$Outbound` instead. */
    type Outbound = PayloadFavoriteProjectsAndSpaces$Outbound;
}
export declare function payloadFavoriteProjectsAndSpacesToJSON(payloadFavoriteProjectsAndSpaces: PayloadFavoriteProjectsAndSpaces): string;
export declare function payloadFavoriteProjectsAndSpacesFromJSON(jsonString: string): SafeParseResult<PayloadFavoriteProjectsAndSpaces, SDKValidationError>;
/** @internal */
export declare const PayloadImportFlowGitNamespace$inboundSchema: z.ZodType<PayloadImportFlowGitNamespace, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadImportFlowGitNamespace$Outbound = string | number;
/** @internal */
export declare const PayloadImportFlowGitNamespace$outboundSchema: z.ZodType<PayloadImportFlowGitNamespace$Outbound, z.ZodTypeDef, PayloadImportFlowGitNamespace>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadImportFlowGitNamespace$ {
    /** @deprecated use `PayloadImportFlowGitNamespace$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadImportFlowGitNamespace, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadImportFlowGitNamespace$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadImportFlowGitNamespace$Outbound, z.ZodTypeDef, PayloadImportFlowGitNamespace>;
    /** @deprecated use `PayloadImportFlowGitNamespace$Outbound` instead. */
    type Outbound = PayloadImportFlowGitNamespace$Outbound;
}
export declare function payloadImportFlowGitNamespaceToJSON(payloadImportFlowGitNamespace: PayloadImportFlowGitNamespace): string;
export declare function payloadImportFlowGitNamespaceFromJSON(jsonString: string): SafeParseResult<PayloadImportFlowGitNamespace, SDKValidationError>;
/** @internal */
export declare const PayloadImportFlowGitNamespaceId$inboundSchema: z.ZodType<PayloadImportFlowGitNamespaceId, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadImportFlowGitNamespaceId$Outbound = string | number;
/** @internal */
export declare const PayloadImportFlowGitNamespaceId$outboundSchema: z.ZodType<PayloadImportFlowGitNamespaceId$Outbound, z.ZodTypeDef, PayloadImportFlowGitNamespaceId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadImportFlowGitNamespaceId$ {
    /** @deprecated use `PayloadImportFlowGitNamespaceId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadImportFlowGitNamespaceId, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadImportFlowGitNamespaceId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadImportFlowGitNamespaceId$Outbound, z.ZodTypeDef, PayloadImportFlowGitNamespaceId>;
    /** @deprecated use `PayloadImportFlowGitNamespaceId$Outbound` instead. */
    type Outbound = PayloadImportFlowGitNamespaceId$Outbound;
}
export declare function payloadImportFlowGitNamespaceIdToJSON(payloadImportFlowGitNamespaceId: PayloadImportFlowGitNamespaceId): string;
export declare function payloadImportFlowGitNamespaceIdFromJSON(jsonString: string): SafeParseResult<PayloadImportFlowGitNamespaceId, SDKValidationError>;
/** @internal */
export declare const PayloadImportFlowGitProvider$inboundSchema: z.ZodNativeEnum<typeof PayloadImportFlowGitProvider>;
/** @internal */
export declare const PayloadImportFlowGitProvider$outboundSchema: z.ZodNativeEnum<typeof PayloadImportFlowGitProvider>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadImportFlowGitProvider$ {
    /** @deprecated use `PayloadImportFlowGitProvider$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
        readonly Gitlab: "gitlab";
        readonly Bitbucket: "bitbucket";
        readonly GithubLimited: "github-limited";
        readonly GithubCustomHost: "github-custom-host";
    }>;
    /** @deprecated use `PayloadImportFlowGitProvider$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
        readonly Gitlab: "gitlab";
        readonly Bitbucket: "bitbucket";
        readonly GithubLimited: "github-limited";
        readonly GithubCustomHost: "github-custom-host";
    }>;
}
/** @internal */
export declare const PayloadGitNamespaceId$inboundSchema: z.ZodType<PayloadGitNamespaceId, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadGitNamespaceId$Outbound = string | number;
/** @internal */
export declare const PayloadGitNamespaceId$outboundSchema: z.ZodType<PayloadGitNamespaceId$Outbound, z.ZodTypeDef, PayloadGitNamespaceId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadGitNamespaceId$ {
    /** @deprecated use `PayloadGitNamespaceId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadGitNamespaceId, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadGitNamespaceId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadGitNamespaceId$Outbound, z.ZodTypeDef, PayloadGitNamespaceId>;
    /** @deprecated use `PayloadGitNamespaceId$Outbound` instead. */
    type Outbound = PayloadGitNamespaceId$Outbound;
}
export declare function payloadGitNamespaceIdToJSON(payloadGitNamespaceId: PayloadGitNamespaceId): string;
export declare function payloadGitNamespaceIdFromJSON(jsonString: string): SafeParseResult<PayloadGitNamespaceId, SDKValidationError>;
/** @internal */
export declare const PayloadPreferredScopesAndGitNamespaces$inboundSchema: z.ZodType<PayloadPreferredScopesAndGitNamespaces, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadPreferredScopesAndGitNamespaces$Outbound = {
    scopeId: string;
    gitNamespaceId: string | number | null;
};
/** @internal */
export declare const PayloadPreferredScopesAndGitNamespaces$outboundSchema: z.ZodType<PayloadPreferredScopesAndGitNamespaces$Outbound, z.ZodTypeDef, PayloadPreferredScopesAndGitNamespaces>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadPreferredScopesAndGitNamespaces$ {
    /** @deprecated use `PayloadPreferredScopesAndGitNamespaces$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadPreferredScopesAndGitNamespaces, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadPreferredScopesAndGitNamespaces$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadPreferredScopesAndGitNamespaces$Outbound, z.ZodTypeDef, PayloadPreferredScopesAndGitNamespaces>;
    /** @deprecated use `PayloadPreferredScopesAndGitNamespaces$Outbound` instead. */
    type Outbound = PayloadPreferredScopesAndGitNamespaces$Outbound;
}
export declare function payloadPreferredScopesAndGitNamespacesToJSON(payloadPreferredScopesAndGitNamespaces: PayloadPreferredScopesAndGitNamespaces): string;
export declare function payloadPreferredScopesAndGitNamespacesFromJSON(jsonString: string): SafeParseResult<PayloadPreferredScopesAndGitNamespaces, SDKValidationError>;
/** @internal */
export declare const PreventAutoBlocking$inboundSchema: z.ZodType<PreventAutoBlocking, z.ZodTypeDef, unknown>;
/** @internal */
export type PreventAutoBlocking$Outbound = number | boolean;
/** @internal */
export declare const PreventAutoBlocking$outboundSchema: z.ZodType<PreventAutoBlocking$Outbound, z.ZodTypeDef, PreventAutoBlocking>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PreventAutoBlocking$ {
    /** @deprecated use `PreventAutoBlocking$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PreventAutoBlocking, z.ZodTypeDef, unknown>;
    /** @deprecated use `PreventAutoBlocking$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PreventAutoBlocking$Outbound, z.ZodTypeDef, PreventAutoBlocking>;
    /** @deprecated use `PreventAutoBlocking$Outbound` instead. */
    type Outbound = PreventAutoBlocking$Outbound;
}
export declare function preventAutoBlockingToJSON(preventAutoBlocking: PreventAutoBlocking): string;
export declare function preventAutoBlockingFromJSON(jsonString: string): SafeParseResult<PreventAutoBlocking, SDKValidationError>;
/** @internal */
export declare const UserEventPayloadRemoteCaching$inboundSchema: z.ZodType<UserEventPayloadRemoteCaching, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayloadRemoteCaching$Outbound = {
    enabled?: boolean | undefined;
};
/** @internal */
export declare const UserEventPayloadRemoteCaching$outboundSchema: z.ZodType<UserEventPayloadRemoteCaching$Outbound, z.ZodTypeDef, UserEventPayloadRemoteCaching>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayloadRemoteCaching$ {
    /** @deprecated use `UserEventPayloadRemoteCaching$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayloadRemoteCaching, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayloadRemoteCaching$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayloadRemoteCaching$Outbound, z.ZodTypeDef, UserEventPayloadRemoteCaching>;
    /** @deprecated use `UserEventPayloadRemoteCaching$Outbound` instead. */
    type Outbound = UserEventPayloadRemoteCaching$Outbound;
}
export declare function userEventPayloadRemoteCachingToJSON(userEventPayloadRemoteCaching: UserEventPayloadRemoteCaching): string;
export declare function userEventPayloadRemoteCachingFromJSON(jsonString: string): SafeParseResult<UserEventPayloadRemoteCaching, SDKValidationError>;
/** @internal */
export declare const PayloadBuildEntitlements$inboundSchema: z.ZodType<PayloadBuildEntitlements, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadBuildEntitlements$Outbound = {
    enhancedBuilds?: boolean | undefined;
};
/** @internal */
export declare const PayloadBuildEntitlements$outboundSchema: z.ZodType<PayloadBuildEntitlements$Outbound, z.ZodTypeDef, PayloadBuildEntitlements>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadBuildEntitlements$ {
    /** @deprecated use `PayloadBuildEntitlements$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadBuildEntitlements, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadBuildEntitlements$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadBuildEntitlements$Outbound, z.ZodTypeDef, PayloadBuildEntitlements>;
    /** @deprecated use `PayloadBuildEntitlements$Outbound` instead. */
    type Outbound = PayloadBuildEntitlements$Outbound;
}
export declare function payloadBuildEntitlementsToJSON(payloadBuildEntitlements: PayloadBuildEntitlements): string;
export declare function payloadBuildEntitlementsFromJSON(jsonString: string): SafeParseResult<PayloadBuildEntitlements, SDKValidationError>;
/** @internal */
export declare const PayloadPurchaseType$inboundSchema: z.ZodNativeEnum<typeof PayloadPurchaseType>;
/** @internal */
export declare const PayloadPurchaseType$outboundSchema: z.ZodNativeEnum<typeof PayloadPurchaseType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadPurchaseType$ {
    /** @deprecated use `PayloadPurchaseType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Enhanced: "enhanced";
        readonly Turbo: "turbo";
    }>;
    /** @deprecated use `PayloadPurchaseType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Enhanced: "enhanced";
        readonly Turbo: "turbo";
    }>;
}
/** @internal */
export declare const PayloadBuildMachine$inboundSchema: z.ZodType<PayloadBuildMachine, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadBuildMachine$Outbound = {
    purchaseType?: string | undefined;
    isDefaultBuildMachine?: boolean | undefined;
    cores?: number | undefined;
    memory?: number | undefined;
};
/** @internal */
export declare const PayloadBuildMachine$outboundSchema: z.ZodType<PayloadBuildMachine$Outbound, z.ZodTypeDef, PayloadBuildMachine>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadBuildMachine$ {
    /** @deprecated use `PayloadBuildMachine$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadBuildMachine, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadBuildMachine$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadBuildMachine$Outbound, z.ZodTypeDef, PayloadBuildMachine>;
    /** @deprecated use `PayloadBuildMachine$Outbound` instead. */
    type Outbound = PayloadBuildMachine$Outbound;
}
export declare function payloadBuildMachineToJSON(payloadBuildMachine: PayloadBuildMachine): string;
export declare function payloadBuildMachineFromJSON(jsonString: string): SafeParseResult<PayloadBuildMachine, SDKValidationError>;
/** @internal */
export declare const PayloadSecurity$inboundSchema: z.ZodType<PayloadSecurity, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadSecurity$Outbound = {
    customRules?: number | undefined;
    ipBlocks?: number | undefined;
    ipBypass?: number | undefined;
    rateLimit?: number | undefined;
};
/** @internal */
export declare const PayloadSecurity$outboundSchema: z.ZodType<PayloadSecurity$Outbound, z.ZodTypeDef, PayloadSecurity>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadSecurity$ {
    /** @deprecated use `PayloadSecurity$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadSecurity, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadSecurity$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadSecurity$Outbound, z.ZodTypeDef, PayloadSecurity>;
    /** @deprecated use `PayloadSecurity$Outbound` instead. */
    type Outbound = PayloadSecurity$Outbound;
}
export declare function payloadSecurityToJSON(payloadSecurity: PayloadSecurity): string;
export declare function payloadSecurityFromJSON(jsonString: string): SafeParseResult<PayloadSecurity, SDKValidationError>;
/** @internal */
export declare const PayloadResourceConfig$inboundSchema: z.ZodType<PayloadResourceConfig, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadResourceConfig$Outbound = {
    nodeType?: string | undefined;
    concurrentBuilds?: number | undefined;
    elasticConcurrencyEnabled?: boolean | undefined;
    buildEntitlements?: PayloadBuildEntitlements$Outbound | undefined;
    awsAccountType?: string | undefined;
    awsAccountIds?: Array<string> | undefined;
    cfZoneName?: string | undefined;
    imageOptimizationType?: string | undefined;
    edgeConfigs?: number | undefined;
    edgeConfigSize?: number | undefined;
    edgeFunctionMaxSizeBytes?: number | undefined;
    edgeFunctionExecutionTimeoutMs?: number | undefined;
    serverlessFunctionMaxMemorySize?: number | undefined;
    kvDatabases?: number | undefined;
    postgresDatabases?: number | undefined;
    blobStores?: number | undefined;
    integrationStores?: number | undefined;
    cronJobs?: number | undefined;
    cronJobsPerProject?: number | undefined;
    microfrontendGroupsPerTeam?: number | undefined;
    microfrontendProjectsPerGroup?: number | undefined;
    flagsExplorerOverridesThreshold?: number | undefined;
    flagsExplorerUnlimitedOverrides?: boolean | undefined;
    customEnvironmentsPerProject?: number | undefined;
    buildMachine?: PayloadBuildMachine$Outbound | undefined;
    security?: PayloadSecurity$Outbound | undefined;
};
/** @internal */
export declare const PayloadResourceConfig$outboundSchema: z.ZodType<PayloadResourceConfig$Outbound, z.ZodTypeDef, PayloadResourceConfig>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadResourceConfig$ {
    /** @deprecated use `PayloadResourceConfig$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadResourceConfig, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadResourceConfig$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadResourceConfig$Outbound, z.ZodTypeDef, PayloadResourceConfig>;
    /** @deprecated use `PayloadResourceConfig$Outbound` instead. */
    type Outbound = PayloadResourceConfig$Outbound;
}
export declare function payloadResourceConfigToJSON(payloadResourceConfig: PayloadResourceConfig): string;
export declare function payloadResourceConfigFromJSON(jsonString: string): SafeParseResult<PayloadResourceConfig, SDKValidationError>;
/** @internal */
export declare const ResourceLimits$inboundSchema: z.ZodType<ResourceLimits, z.ZodTypeDef, unknown>;
/** @internal */
export type ResourceLimits$Outbound = {
    max: number;
    duration: number;
};
/** @internal */
export declare const ResourceLimits$outboundSchema: z.ZodType<ResourceLimits$Outbound, z.ZodTypeDef, ResourceLimits>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResourceLimits$ {
    /** @deprecated use `ResourceLimits$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResourceLimits, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResourceLimits$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResourceLimits$Outbound, z.ZodTypeDef, ResourceLimits>;
    /** @deprecated use `ResourceLimits$Outbound` instead. */
    type Outbound = ResourceLimits$Outbound;
}
export declare function resourceLimitsToJSON(resourceLimits: ResourceLimits): string;
export declare function resourceLimitsFromJSON(jsonString: string): SafeParseResult<ResourceLimits, SDKValidationError>;
/** @internal */
export declare const PayloadViewPreference$inboundSchema: z.ZodNativeEnum<typeof PayloadViewPreference>;
/** @internal */
export declare const PayloadViewPreference$outboundSchema: z.ZodNativeEnum<typeof PayloadViewPreference>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadViewPreference$ {
    /** @deprecated use `PayloadViewPreference$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Cards: "cards";
        readonly List: "list";
    }>;
    /** @deprecated use `PayloadViewPreference$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Cards: "cards";
        readonly List: "list";
    }>;
}
/** @internal */
export declare const PayloadFavoritesViewPreference$inboundSchema: z.ZodNativeEnum<typeof PayloadFavoritesViewPreference>;
/** @internal */
export declare const PayloadFavoritesViewPreference$outboundSchema: z.ZodNativeEnum<typeof PayloadFavoritesViewPreference>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadFavoritesViewPreference$ {
    /** @deprecated use `PayloadFavoritesViewPreference$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Open: "open";
        readonly Closed: "closed";
    }>;
    /** @deprecated use `PayloadFavoritesViewPreference$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Open: "open";
        readonly Closed: "closed";
    }>;
}
/** @internal */
export declare const PayloadRecentsViewPreference$inboundSchema: z.ZodNativeEnum<typeof PayloadRecentsViewPreference>;
/** @internal */
export declare const PayloadRecentsViewPreference$outboundSchema: z.ZodNativeEnum<typeof PayloadRecentsViewPreference>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadRecentsViewPreference$ {
    /** @deprecated use `PayloadRecentsViewPreference$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Open: "open";
        readonly Closed: "closed";
    }>;
    /** @deprecated use `PayloadRecentsViewPreference$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Open: "open";
        readonly Closed: "closed";
    }>;
}
/** @internal */
export declare const PayloadActiveDashboardViews$inboundSchema: z.ZodType<PayloadActiveDashboardViews, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadActiveDashboardViews$Outbound = {
    scopeId: string;
    viewPreference?: string | null | undefined;
    favoritesViewPreference?: string | null | undefined;
    recentsViewPreference?: string | null | undefined;
};
/** @internal */
export declare const PayloadActiveDashboardViews$outboundSchema: z.ZodType<PayloadActiveDashboardViews$Outbound, z.ZodTypeDef, PayloadActiveDashboardViews>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadActiveDashboardViews$ {
    /** @deprecated use `PayloadActiveDashboardViews$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadActiveDashboardViews, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadActiveDashboardViews$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadActiveDashboardViews$Outbound, z.ZodTypeDef, PayloadActiveDashboardViews>;
    /** @deprecated use `PayloadActiveDashboardViews$Outbound` instead. */
    type Outbound = PayloadActiveDashboardViews$Outbound;
}
export declare function payloadActiveDashboardViewsToJSON(payloadActiveDashboardViews: PayloadActiveDashboardViews): string;
export declare function payloadActiveDashboardViewsFromJSON(jsonString: string): SafeParseResult<PayloadActiveDashboardViews, SDKValidationError>;
/** @internal */
export declare const SecondaryEmails$inboundSchema: z.ZodType<SecondaryEmails, z.ZodTypeDef, unknown>;
/** @internal */
export type SecondaryEmails$Outbound = {
    email: string;
    verified: boolean;
};
/** @internal */
export declare const SecondaryEmails$outboundSchema: z.ZodType<SecondaryEmails$Outbound, z.ZodTypeDef, SecondaryEmails>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SecondaryEmails$ {
    /** @deprecated use `SecondaryEmails$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SecondaryEmails, z.ZodTypeDef, unknown>;
    /** @deprecated use `SecondaryEmails$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SecondaryEmails$Outbound, z.ZodTypeDef, SecondaryEmails>;
    /** @deprecated use `SecondaryEmails$Outbound` instead. */
    type Outbound = SecondaryEmails$Outbound;
}
export declare function secondaryEmailsToJSON(secondaryEmails: SecondaryEmails): string;
export declare function secondaryEmailsFromJSON(jsonString: string): SafeParseResult<SecondaryEmails, SDKValidationError>;
/** @internal */
export declare const Rules$inboundSchema: z.ZodType<Rules, z.ZodTypeDef, unknown>;
/** @internal */
export type Rules$Outbound = {
    email: string;
};
/** @internal */
export declare const Rules$outboundSchema: z.ZodType<Rules$Outbound, z.ZodTypeDef, Rules>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Rules$ {
    /** @deprecated use `Rules$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Rules, z.ZodTypeDef, unknown>;
    /** @deprecated use `Rules$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Rules$Outbound, z.ZodTypeDef, Rules>;
    /** @deprecated use `Rules$Outbound` instead. */
    type Outbound = Rules$Outbound;
}
export declare function rulesToJSON(rules: Rules): string;
export declare function rulesFromJSON(jsonString: string): SafeParseResult<Rules, SDKValidationError>;
/** @internal */
export declare const EmailNotifications$inboundSchema: z.ZodType<EmailNotifications, z.ZodTypeDef, unknown>;
/** @internal */
export type EmailNotifications$Outbound = {
    rules?: {
        [k: string]: Rules$Outbound;
    } | undefined;
};
/** @internal */
export declare const EmailNotifications$outboundSchema: z.ZodType<EmailNotifications$Outbound, z.ZodTypeDef, EmailNotifications>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EmailNotifications$ {
    /** @deprecated use `EmailNotifications$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EmailNotifications, z.ZodTypeDef, unknown>;
    /** @deprecated use `EmailNotifications$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EmailNotifications$Outbound, z.ZodTypeDef, EmailNotifications>;
    /** @deprecated use `EmailNotifications$Outbound` instead. */
    type Outbound = EmailNotifications$Outbound;
}
export declare function emailNotificationsToJSON(emailNotifications: EmailNotifications): string;
export declare function emailNotificationsFromJSON(jsonString: string): SafeParseResult<EmailNotifications, SDKValidationError>;
/** @internal */
export declare const PayloadReasons$inboundSchema: z.ZodType<PayloadReasons, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadReasons$Outbound = {
    name: string;
    value: string;
};
/** @internal */
export declare const PayloadReasons$outboundSchema: z.ZodType<PayloadReasons$Outbound, z.ZodTypeDef, PayloadReasons>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadReasons$ {
    /** @deprecated use `PayloadReasons$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadReasons, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadReasons$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadReasons$Outbound, z.ZodTypeDef, PayloadReasons>;
    /** @deprecated use `PayloadReasons$Outbound` instead. */
    type Outbound = PayloadReasons$Outbound;
}
export declare function payloadReasonsToJSON(payloadReasons: PayloadReasons): string;
export declare function payloadReasonsFromJSON(jsonString: string): SafeParseResult<PayloadReasons, SDKValidationError>;
/** @internal */
export declare const SiftScores$inboundSchema: z.ZodType<SiftScores, z.ZodTypeDef, unknown>;
/** @internal */
export type SiftScores$Outbound = {
    score: number;
    reasons: Array<PayloadReasons$Outbound>;
};
/** @internal */
export declare const SiftScores$outboundSchema: z.ZodType<SiftScores$Outbound, z.ZodTypeDef, SiftScores>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SiftScores$ {
    /** @deprecated use `SiftScores$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SiftScores, z.ZodTypeDef, unknown>;
    /** @deprecated use `SiftScores$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SiftScores$Outbound, z.ZodTypeDef, SiftScores>;
    /** @deprecated use `SiftScores$Outbound` instead. */
    type Outbound = SiftScores$Outbound;
}
export declare function siftScoresToJSON(siftScores: SiftScores): string;
export declare function siftScoresFromJSON(jsonString: string): SafeParseResult<SiftScores, SDKValidationError>;
/** @internal */
export declare const UserEventPayload64Name$inboundSchema: z.ZodNativeEnum<typeof UserEventPayload64Name>;
/** @internal */
export declare const UserEventPayload64Name$outboundSchema: z.ZodNativeEnum<typeof UserEventPayload64Name>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload64Name$ {
    /** @deprecated use `UserEventPayload64Name$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly String: "string";
    }>;
    /** @deprecated use `UserEventPayload64Name$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly String: "string";
    }>;
}
/** @internal */
export declare const SiftRoute$inboundSchema: z.ZodType<SiftRoute, z.ZodTypeDef, unknown>;
/** @internal */
export type SiftRoute$Outbound = {
    name: string;
};
/** @internal */
export declare const SiftRoute$outboundSchema: z.ZodType<SiftRoute$Outbound, z.ZodTypeDef, SiftRoute>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SiftRoute$ {
    /** @deprecated use `SiftRoute$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SiftRoute, z.ZodTypeDef, unknown>;
    /** @deprecated use `SiftRoute$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SiftRoute$Outbound, z.ZodTypeDef, SiftRoute>;
    /** @deprecated use `SiftRoute$Outbound` instead. */
    type Outbound = SiftRoute$Outbound;
}
export declare function siftRouteToJSON(siftRoute: SiftRoute): string;
export declare function siftRouteFromJSON(jsonString: string): SafeParseResult<SiftRoute, SDKValidationError>;
/** @internal */
export declare const PayloadReason$inboundSchema: z.ZodNativeEnum<typeof PayloadReason>;
/** @internal */
export declare const PayloadReason$outboundSchema: z.ZodNativeEnum<typeof PayloadReason>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadReason$ {
    /** @deprecated use `PayloadReason$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly SubscriptionCanceled: "SUBSCRIPTION_CANCELED";
        readonly SubscriptionExpired: "SUBSCRIPTION_EXPIRED";
        readonly UnpaidInvoice: "UNPAID_INVOICE";
        readonly EnterpriseTrialEnded: "ENTERPRISE_TRIAL_ENDED";
        readonly FairUseLimitsExceeded: "FAIR_USE_LIMITS_EXCEEDED";
        readonly BlockedForPlatformAbuse: "BLOCKED_FOR_PLATFORM_ABUSE";
    }>;
    /** @deprecated use `PayloadReason$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly SubscriptionCanceled: "SUBSCRIPTION_CANCELED";
        readonly SubscriptionExpired: "SUBSCRIPTION_EXPIRED";
        readonly UnpaidInvoice: "UNPAID_INVOICE";
        readonly EnterpriseTrialEnded: "ENTERPRISE_TRIAL_ENDED";
        readonly FairUseLimitsExceeded: "FAIR_USE_LIMITS_EXCEEDED";
        readonly BlockedForPlatformAbuse: "BLOCKED_FOR_PLATFORM_ABUSE";
    }>;
}
/** @internal */
export declare const PayloadBlockedDueToOverageType$inboundSchema: z.ZodNativeEnum<typeof PayloadBlockedDueToOverageType>;
/** @internal */
export declare const PayloadBlockedDueToOverageType$outboundSchema: z.ZodNativeEnum<typeof PayloadBlockedDueToOverageType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadBlockedDueToOverageType$ {
    /** @deprecated use `PayloadBlockedDueToOverageType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly AnalyticsUsage: "analyticsUsage";
        readonly Artifacts: "artifacts";
        readonly Bandwidth: "bandwidth";
        readonly BlobTotalAdvancedRequests: "blobTotalAdvancedRequests";
        readonly BlobTotalAvgSizeInBytes: "blobTotalAvgSizeInBytes";
        readonly BlobTotalGetResponseObjectSizeInBytes: "blobTotalGetResponseObjectSizeInBytes";
        readonly BlobTotalSimpleRequests: "blobTotalSimpleRequests";
        readonly ConnectDataTransfer: "connectDataTransfer";
        readonly DataCacheRead: "dataCacheRead";
        readonly DataCacheWrite: "dataCacheWrite";
        readonly EdgeConfigRead: "edgeConfigRead";
        readonly EdgeConfigWrite: "edgeConfigWrite";
        readonly EdgeFunctionExecutionUnits: "edgeFunctionExecutionUnits";
        readonly EdgeMiddlewareInvocations: "edgeMiddlewareInvocations";
        readonly EdgeRequestAdditionalCpuDuration: "edgeRequestAdditionalCpuDuration";
        readonly EdgeRequest: "edgeRequest";
        readonly ElasticConcurrencyBuildSlots: "elasticConcurrencyBuildSlots";
        readonly FastDataTransfer: "fastDataTransfer";
        readonly FastOriginTransfer: "fastOriginTransfer";
        readonly FluidCpuDuration: "fluidCpuDuration";
        readonly FluidDuration: "fluidDuration";
        readonly FunctionDuration: "functionDuration";
        readonly FunctionInvocation: "functionInvocation";
        readonly ImageOptimizationCacheRead: "imageOptimizationCacheRead";
        readonly ImageOptimizationCacheWrite: "imageOptimizationCacheWrite";
        readonly ImageOptimizationTransformation: "imageOptimizationTransformation";
        readonly LogDrainsVolume: "logDrainsVolume";
        readonly MonitoringMetric: "monitoringMetric";
        readonly BlobDataTransfer: "blobDataTransfer";
        readonly ObservabilityEvent: "observabilityEvent";
        readonly OnDemandConcurrencyMinutes: "onDemandConcurrencyMinutes";
        readonly RuntimeCacheRead: "runtimeCacheRead";
        readonly RuntimeCacheWrite: "runtimeCacheWrite";
        readonly ServerlessFunctionExecution: "serverlessFunctionExecution";
        readonly SourceImages: "sourceImages";
        readonly WafOwaspExcessBytes: "wafOwaspExcessBytes";
        readonly WafOwaspRequests: "wafOwaspRequests";
        readonly WafRateLimitRequest: "wafRateLimitRequest";
        readonly WebAnalyticsEvent: "webAnalyticsEvent";
    }>;
    /** @deprecated use `PayloadBlockedDueToOverageType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly AnalyticsUsage: "analyticsUsage";
        readonly Artifacts: "artifacts";
        readonly Bandwidth: "bandwidth";
        readonly BlobTotalAdvancedRequests: "blobTotalAdvancedRequests";
        readonly BlobTotalAvgSizeInBytes: "blobTotalAvgSizeInBytes";
        readonly BlobTotalGetResponseObjectSizeInBytes: "blobTotalGetResponseObjectSizeInBytes";
        readonly BlobTotalSimpleRequests: "blobTotalSimpleRequests";
        readonly ConnectDataTransfer: "connectDataTransfer";
        readonly DataCacheRead: "dataCacheRead";
        readonly DataCacheWrite: "dataCacheWrite";
        readonly EdgeConfigRead: "edgeConfigRead";
        readonly EdgeConfigWrite: "edgeConfigWrite";
        readonly EdgeFunctionExecutionUnits: "edgeFunctionExecutionUnits";
        readonly EdgeMiddlewareInvocations: "edgeMiddlewareInvocations";
        readonly EdgeRequestAdditionalCpuDuration: "edgeRequestAdditionalCpuDuration";
        readonly EdgeRequest: "edgeRequest";
        readonly ElasticConcurrencyBuildSlots: "elasticConcurrencyBuildSlots";
        readonly FastDataTransfer: "fastDataTransfer";
        readonly FastOriginTransfer: "fastOriginTransfer";
        readonly FluidCpuDuration: "fluidCpuDuration";
        readonly FluidDuration: "fluidDuration";
        readonly FunctionDuration: "functionDuration";
        readonly FunctionInvocation: "functionInvocation";
        readonly ImageOptimizationCacheRead: "imageOptimizationCacheRead";
        readonly ImageOptimizationCacheWrite: "imageOptimizationCacheWrite";
        readonly ImageOptimizationTransformation: "imageOptimizationTransformation";
        readonly LogDrainsVolume: "logDrainsVolume";
        readonly MonitoringMetric: "monitoringMetric";
        readonly BlobDataTransfer: "blobDataTransfer";
        readonly ObservabilityEvent: "observabilityEvent";
        readonly OnDemandConcurrencyMinutes: "onDemandConcurrencyMinutes";
        readonly RuntimeCacheRead: "runtimeCacheRead";
        readonly RuntimeCacheWrite: "runtimeCacheWrite";
        readonly ServerlessFunctionExecution: "serverlessFunctionExecution";
        readonly SourceImages: "sourceImages";
        readonly WafOwaspExcessBytes: "wafOwaspExcessBytes";
        readonly WafOwaspRequests: "wafOwaspRequests";
        readonly WafRateLimitRequest: "wafRateLimitRequest";
        readonly WebAnalyticsEvent: "webAnalyticsEvent";
    }>;
}
/** @internal */
export declare const PayloadSoftBlock$inboundSchema: z.ZodType<PayloadSoftBlock, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadSoftBlock$Outbound = {
    blockedAt: number;
    reason: string;
    blockedDueToOverageType?: string | undefined;
};
/** @internal */
export declare const PayloadSoftBlock$outboundSchema: z.ZodType<PayloadSoftBlock$Outbound, z.ZodTypeDef, PayloadSoftBlock>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadSoftBlock$ {
    /** @deprecated use `PayloadSoftBlock$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadSoftBlock, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadSoftBlock$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadSoftBlock$Outbound, z.ZodTypeDef, PayloadSoftBlock>;
    /** @deprecated use `PayloadSoftBlock$Outbound` instead. */
    type Outbound = PayloadSoftBlock$Outbound;
}
export declare function payloadSoftBlockToJSON(payloadSoftBlock: PayloadSoftBlock): string;
export declare function payloadSoftBlockFromJSON(jsonString: string): SafeParseResult<PayloadSoftBlock, SDKValidationError>;
/** @internal */
export declare const UserEventPayload64Role$inboundSchema: z.ZodNativeEnum<typeof UserEventPayload64Role>;
/** @internal */
export declare const UserEventPayload64Role$outboundSchema: z.ZodNativeEnum<typeof UserEventPayload64Role>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload64Role$ {
    /** @deprecated use `UserEventPayload64Role$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly ViewerForPlus: "VIEWER_FOR_PLUS";
        readonly Contributor: "CONTRIBUTOR";
    }>;
    /** @deprecated use `UserEventPayload64Role$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly ViewerForPlus: "VIEWER_FOR_PLUS";
        readonly Contributor: "CONTRIBUTOR";
    }>;
}
/** @internal */
export declare const PayloadTeamRoles$inboundSchema: z.ZodNativeEnum<typeof PayloadTeamRoles>;
/** @internal */
export declare const PayloadTeamRoles$outboundSchema: z.ZodNativeEnum<typeof PayloadTeamRoles>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadTeamRoles$ {
    /** @deprecated use `PayloadTeamRoles$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly ViewerForPlus: "VIEWER_FOR_PLUS";
        readonly Contributor: "CONTRIBUTOR";
    }>;
    /** @deprecated use `PayloadTeamRoles$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly ViewerForPlus: "VIEWER_FOR_PLUS";
        readonly Contributor: "CONTRIBUTOR";
    }>;
}
/** @internal */
export declare const PayloadTeamPermissions$inboundSchema: z.ZodNativeEnum<typeof PayloadTeamPermissions>;
/** @internal */
export declare const PayloadTeamPermissions$outboundSchema: z.ZodNativeEnum<typeof PayloadTeamPermissions>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadTeamPermissions$ {
    /** @deprecated use `PayloadTeamPermissions$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly IntegrationManager: "IntegrationManager";
        readonly CreateProject: "CreateProject";
        readonly FullProductionDeployment: "FullProductionDeployment";
        readonly UsageViewer: "UsageViewer";
        readonly EnvVariableManager: "EnvVariableManager";
        readonly EnvironmentManager: "EnvironmentManager";
        readonly V0Builder: "V0Builder";
        readonly V0Chatter: "V0Chatter";
        readonly V0Viewer: "V0Viewer";
    }>;
    /** @deprecated use `PayloadTeamPermissions$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly IntegrationManager: "IntegrationManager";
        readonly CreateProject: "CreateProject";
        readonly FullProductionDeployment: "FullProductionDeployment";
        readonly UsageViewer: "UsageViewer";
        readonly EnvVariableManager: "EnvVariableManager";
        readonly EnvironmentManager: "EnvironmentManager";
        readonly V0Builder: "V0Builder";
        readonly V0Chatter: "V0Chatter";
        readonly V0Viewer: "V0Viewer";
    }>;
}
/** @internal */
export declare const UserEventPayloadOrigin$inboundSchema: z.ZodNativeEnum<typeof UserEventPayloadOrigin>;
/** @internal */
export declare const UserEventPayloadOrigin$outboundSchema: z.ZodNativeEnum<typeof UserEventPayloadOrigin>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayloadOrigin$ {
    /** @deprecated use `UserEventPayloadOrigin$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Teams: "teams";
        readonly Saml: "saml";
        readonly Link: "link";
        readonly Github: "github";
        readonly Gitlab: "gitlab";
        readonly Bitbucket: "bitbucket";
        readonly Mail: "mail";
        readonly Import: "import";
        readonly Dsync: "dsync";
        readonly Feedback: "feedback";
        readonly OrganizationTeams: "organization-teams";
    }>;
    /** @deprecated use `UserEventPayloadOrigin$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Teams: "teams";
        readonly Saml: "saml";
        readonly Link: "link";
        readonly Github: "github";
        readonly Gitlab: "gitlab";
        readonly Bitbucket: "bitbucket";
        readonly Mail: "mail";
        readonly Import: "import";
        readonly Dsync: "dsync";
        readonly Feedback: "feedback";
        readonly OrganizationTeams: "organization-teams";
    }>;
}
/** @internal */
export declare const UserEventPayloadGitUserId$inboundSchema: z.ZodType<UserEventPayloadGitUserId, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayloadGitUserId$Outbound = string | number;
/** @internal */
export declare const UserEventPayloadGitUserId$outboundSchema: z.ZodType<UserEventPayloadGitUserId$Outbound, z.ZodTypeDef, UserEventPayloadGitUserId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayloadGitUserId$ {
    /** @deprecated use `UserEventPayloadGitUserId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayloadGitUserId, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayloadGitUserId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayloadGitUserId$Outbound, z.ZodTypeDef, UserEventPayloadGitUserId>;
    /** @deprecated use `UserEventPayloadGitUserId$Outbound` instead. */
    type Outbound = UserEventPayloadGitUserId$Outbound;
}
export declare function userEventPayloadGitUserIdToJSON(userEventPayloadGitUserId: UserEventPayloadGitUserId): string;
export declare function userEventPayloadGitUserIdFromJSON(jsonString: string): SafeParseResult<UserEventPayloadGitUserId, SDKValidationError>;
/** @internal */
export declare const UserEventPayloadJoinedFrom$inboundSchema: z.ZodType<UserEventPayloadJoinedFrom, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayloadJoinedFrom$Outbound = {
    origin: string;
    commitId?: string | undefined;
    repoId?: string | undefined;
    repoPath?: string | undefined;
    gitUserId?: string | number | undefined;
    gitUserLogin?: string | undefined;
    ssoUserId?: string | undefined;
    ssoConnectedAt?: number | undefined;
    idpUserId?: string | undefined;
    dsyncUserId?: string | undefined;
    dsyncConnectedAt?: number | undefined;
};
/** @internal */
export declare const UserEventPayloadJoinedFrom$outboundSchema: z.ZodType<UserEventPayloadJoinedFrom$Outbound, z.ZodTypeDef, UserEventPayloadJoinedFrom>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayloadJoinedFrom$ {
    /** @deprecated use `UserEventPayloadJoinedFrom$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayloadJoinedFrom, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayloadJoinedFrom$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayloadJoinedFrom$Outbound, z.ZodTypeDef, UserEventPayloadJoinedFrom>;
    /** @deprecated use `UserEventPayloadJoinedFrom$Outbound` instead. */
    type Outbound = UserEventPayloadJoinedFrom$Outbound;
}
export declare function userEventPayloadJoinedFromToJSON(userEventPayloadJoinedFrom: UserEventPayloadJoinedFrom): string;
export declare function userEventPayloadJoinedFromFromJSON(jsonString: string): SafeParseResult<UserEventPayloadJoinedFrom, SDKValidationError>;
/** @internal */
export declare const Teams$inboundSchema: z.ZodType<Teams, z.ZodTypeDef, unknown>;
/** @internal */
export type Teams$Outbound = {
    created: number;
    createdAt: number;
    teamId: string;
    role: string;
    confirmed: boolean;
    confirmedAt: number;
    accessRequestedAt?: number | undefined;
    teamRoles?: Array<string> | undefined;
    teamPermissions?: Array<string> | undefined;
    joinedFrom?: UserEventPayloadJoinedFrom$Outbound | undefined;
};
/** @internal */
export declare const Teams$outboundSchema: z.ZodType<Teams$Outbound, z.ZodTypeDef, Teams>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Teams$ {
    /** @deprecated use `Teams$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Teams, z.ZodTypeDef, unknown>;
    /** @deprecated use `Teams$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Teams$Outbound, z.ZodTypeDef, Teams>;
    /** @deprecated use `Teams$Outbound` instead. */
    type Outbound = Teams$Outbound;
}
export declare function teamsToJSON(teams: Teams): string;
export declare function teamsFromJSON(jsonString: string): SafeParseResult<Teams, SDKValidationError>;
/** @internal */
export declare const UserEventPayload64Type$inboundSchema: z.ZodNativeEnum<typeof UserEventPayload64Type>;
/** @internal */
export declare const UserEventPayload64Type$outboundSchema: z.ZodNativeEnum<typeof UserEventPayload64Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload64Type$ {
    /** @deprecated use `UserEventPayload64Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly User: "user";
    }>;
    /** @deprecated use `UserEventPayload64Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly User: "user";
    }>;
}
/** @internal */
export declare const UsageAlerts$inboundSchema: z.ZodType<UsageAlerts, z.ZodTypeDef, unknown>;
/** @internal */
export type UsageAlerts$Outbound = {
    warningAt?: number | null | undefined;
    blockingAt?: number | null | undefined;
};
/** @internal */
export declare const UsageAlerts$outboundSchema: z.ZodType<UsageAlerts$Outbound, z.ZodTypeDef, UsageAlerts>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UsageAlerts$ {
    /** @deprecated use `UsageAlerts$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UsageAlerts, z.ZodTypeDef, unknown>;
    /** @deprecated use `UsageAlerts$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UsageAlerts$Outbound, z.ZodTypeDef, UsageAlerts>;
    /** @deprecated use `UsageAlerts$Outbound` instead. */
    type Outbound = UsageAlerts$Outbound;
}
export declare function usageAlertsToJSON(usageAlerts: UsageAlerts): string;
export declare function usageAlertsFromJSON(jsonString: string): SafeParseResult<UsageAlerts, SDKValidationError>;
/** @internal */
export declare const AnalyticsUsage$inboundSchema: z.ZodType<AnalyticsUsage, z.ZodTypeDef, unknown>;
/** @internal */
export type AnalyticsUsage$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const AnalyticsUsage$outboundSchema: z.ZodType<AnalyticsUsage$Outbound, z.ZodTypeDef, AnalyticsUsage>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AnalyticsUsage$ {
    /** @deprecated use `AnalyticsUsage$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AnalyticsUsage, z.ZodTypeDef, unknown>;
    /** @deprecated use `AnalyticsUsage$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AnalyticsUsage$Outbound, z.ZodTypeDef, AnalyticsUsage>;
    /** @deprecated use `AnalyticsUsage$Outbound` instead. */
    type Outbound = AnalyticsUsage$Outbound;
}
export declare function analyticsUsageToJSON(analyticsUsage: AnalyticsUsage): string;
export declare function analyticsUsageFromJSON(jsonString: string): SafeParseResult<AnalyticsUsage, SDKValidationError>;
/** @internal */
export declare const Artifacts$inboundSchema: z.ZodType<Artifacts, z.ZodTypeDef, unknown>;
/** @internal */
export type Artifacts$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const Artifacts$outboundSchema: z.ZodType<Artifacts$Outbound, z.ZodTypeDef, Artifacts>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Artifacts$ {
    /** @deprecated use `Artifacts$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Artifacts, z.ZodTypeDef, unknown>;
    /** @deprecated use `Artifacts$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Artifacts$Outbound, z.ZodTypeDef, Artifacts>;
    /** @deprecated use `Artifacts$Outbound` instead. */
    type Outbound = Artifacts$Outbound;
}
export declare function artifactsToJSON(artifacts: Artifacts): string;
export declare function artifactsFromJSON(jsonString: string): SafeParseResult<Artifacts, SDKValidationError>;
/** @internal */
export declare const Bandwidth$inboundSchema: z.ZodType<Bandwidth, z.ZodTypeDef, unknown>;
/** @internal */
export type Bandwidth$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const Bandwidth$outboundSchema: z.ZodType<Bandwidth$Outbound, z.ZodTypeDef, Bandwidth>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Bandwidth$ {
    /** @deprecated use `Bandwidth$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Bandwidth, z.ZodTypeDef, unknown>;
    /** @deprecated use `Bandwidth$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Bandwidth$Outbound, z.ZodTypeDef, Bandwidth>;
    /** @deprecated use `Bandwidth$Outbound` instead. */
    type Outbound = Bandwidth$Outbound;
}
export declare function bandwidthToJSON(bandwidth: Bandwidth): string;
export declare function bandwidthFromJSON(jsonString: string): SafeParseResult<Bandwidth, SDKValidationError>;
/** @internal */
export declare const BlobTotalAdvancedRequests$inboundSchema: z.ZodType<BlobTotalAdvancedRequests, z.ZodTypeDef, unknown>;
/** @internal */
export type BlobTotalAdvancedRequests$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const BlobTotalAdvancedRequests$outboundSchema: z.ZodType<BlobTotalAdvancedRequests$Outbound, z.ZodTypeDef, BlobTotalAdvancedRequests>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BlobTotalAdvancedRequests$ {
    /** @deprecated use `BlobTotalAdvancedRequests$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BlobTotalAdvancedRequests, z.ZodTypeDef, unknown>;
    /** @deprecated use `BlobTotalAdvancedRequests$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BlobTotalAdvancedRequests$Outbound, z.ZodTypeDef, BlobTotalAdvancedRequests>;
    /** @deprecated use `BlobTotalAdvancedRequests$Outbound` instead. */
    type Outbound = BlobTotalAdvancedRequests$Outbound;
}
export declare function blobTotalAdvancedRequestsToJSON(blobTotalAdvancedRequests: BlobTotalAdvancedRequests): string;
export declare function blobTotalAdvancedRequestsFromJSON(jsonString: string): SafeParseResult<BlobTotalAdvancedRequests, SDKValidationError>;
/** @internal */
export declare const BlobTotalAvgSizeInBytes$inboundSchema: z.ZodType<BlobTotalAvgSizeInBytes, z.ZodTypeDef, unknown>;
/** @internal */
export type BlobTotalAvgSizeInBytes$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const BlobTotalAvgSizeInBytes$outboundSchema: z.ZodType<BlobTotalAvgSizeInBytes$Outbound, z.ZodTypeDef, BlobTotalAvgSizeInBytes>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BlobTotalAvgSizeInBytes$ {
    /** @deprecated use `BlobTotalAvgSizeInBytes$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BlobTotalAvgSizeInBytes, z.ZodTypeDef, unknown>;
    /** @deprecated use `BlobTotalAvgSizeInBytes$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BlobTotalAvgSizeInBytes$Outbound, z.ZodTypeDef, BlobTotalAvgSizeInBytes>;
    /** @deprecated use `BlobTotalAvgSizeInBytes$Outbound` instead. */
    type Outbound = BlobTotalAvgSizeInBytes$Outbound;
}
export declare function blobTotalAvgSizeInBytesToJSON(blobTotalAvgSizeInBytes: BlobTotalAvgSizeInBytes): string;
export declare function blobTotalAvgSizeInBytesFromJSON(jsonString: string): SafeParseResult<BlobTotalAvgSizeInBytes, SDKValidationError>;
/** @internal */
export declare const BlobTotalGetResponseObjectSizeInBytes$inboundSchema: z.ZodType<BlobTotalGetResponseObjectSizeInBytes, z.ZodTypeDef, unknown>;
/** @internal */
export type BlobTotalGetResponseObjectSizeInBytes$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const BlobTotalGetResponseObjectSizeInBytes$outboundSchema: z.ZodType<BlobTotalGetResponseObjectSizeInBytes$Outbound, z.ZodTypeDef, BlobTotalGetResponseObjectSizeInBytes>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BlobTotalGetResponseObjectSizeInBytes$ {
    /** @deprecated use `BlobTotalGetResponseObjectSizeInBytes$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BlobTotalGetResponseObjectSizeInBytes, z.ZodTypeDef, unknown>;
    /** @deprecated use `BlobTotalGetResponseObjectSizeInBytes$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BlobTotalGetResponseObjectSizeInBytes$Outbound, z.ZodTypeDef, BlobTotalGetResponseObjectSizeInBytes>;
    /** @deprecated use `BlobTotalGetResponseObjectSizeInBytes$Outbound` instead. */
    type Outbound = BlobTotalGetResponseObjectSizeInBytes$Outbound;
}
export declare function blobTotalGetResponseObjectSizeInBytesToJSON(blobTotalGetResponseObjectSizeInBytes: BlobTotalGetResponseObjectSizeInBytes): string;
export declare function blobTotalGetResponseObjectSizeInBytesFromJSON(jsonString: string): SafeParseResult<BlobTotalGetResponseObjectSizeInBytes, SDKValidationError>;
/** @internal */
export declare const BlobTotalSimpleRequests$inboundSchema: z.ZodType<BlobTotalSimpleRequests, z.ZodTypeDef, unknown>;
/** @internal */
export type BlobTotalSimpleRequests$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const BlobTotalSimpleRequests$outboundSchema: z.ZodType<BlobTotalSimpleRequests$Outbound, z.ZodTypeDef, BlobTotalSimpleRequests>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BlobTotalSimpleRequests$ {
    /** @deprecated use `BlobTotalSimpleRequests$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BlobTotalSimpleRequests, z.ZodTypeDef, unknown>;
    /** @deprecated use `BlobTotalSimpleRequests$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BlobTotalSimpleRequests$Outbound, z.ZodTypeDef, BlobTotalSimpleRequests>;
    /** @deprecated use `BlobTotalSimpleRequests$Outbound` instead. */
    type Outbound = BlobTotalSimpleRequests$Outbound;
}
export declare function blobTotalSimpleRequestsToJSON(blobTotalSimpleRequests: BlobTotalSimpleRequests): string;
export declare function blobTotalSimpleRequestsFromJSON(jsonString: string): SafeParseResult<BlobTotalSimpleRequests, SDKValidationError>;
/** @internal */
export declare const ConnectDataTransfer$inboundSchema: z.ZodType<ConnectDataTransfer, z.ZodTypeDef, unknown>;
/** @internal */
export type ConnectDataTransfer$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const ConnectDataTransfer$outboundSchema: z.ZodType<ConnectDataTransfer$Outbound, z.ZodTypeDef, ConnectDataTransfer>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ConnectDataTransfer$ {
    /** @deprecated use `ConnectDataTransfer$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ConnectDataTransfer, z.ZodTypeDef, unknown>;
    /** @deprecated use `ConnectDataTransfer$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ConnectDataTransfer$Outbound, z.ZodTypeDef, ConnectDataTransfer>;
    /** @deprecated use `ConnectDataTransfer$Outbound` instead. */
    type Outbound = ConnectDataTransfer$Outbound;
}
export declare function connectDataTransferToJSON(connectDataTransfer: ConnectDataTransfer): string;
export declare function connectDataTransferFromJSON(jsonString: string): SafeParseResult<ConnectDataTransfer, SDKValidationError>;
/** @internal */
export declare const DataCacheRead$inboundSchema: z.ZodType<DataCacheRead, z.ZodTypeDef, unknown>;
/** @internal */
export type DataCacheRead$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const DataCacheRead$outboundSchema: z.ZodType<DataCacheRead$Outbound, z.ZodTypeDef, DataCacheRead>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace DataCacheRead$ {
    /** @deprecated use `DataCacheRead$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DataCacheRead, z.ZodTypeDef, unknown>;
    /** @deprecated use `DataCacheRead$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DataCacheRead$Outbound, z.ZodTypeDef, DataCacheRead>;
    /** @deprecated use `DataCacheRead$Outbound` instead. */
    type Outbound = DataCacheRead$Outbound;
}
export declare function dataCacheReadToJSON(dataCacheRead: DataCacheRead): string;
export declare function dataCacheReadFromJSON(jsonString: string): SafeParseResult<DataCacheRead, SDKValidationError>;
/** @internal */
export declare const DataCacheWrite$inboundSchema: z.ZodType<DataCacheWrite, z.ZodTypeDef, unknown>;
/** @internal */
export type DataCacheWrite$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const DataCacheWrite$outboundSchema: z.ZodType<DataCacheWrite$Outbound, z.ZodTypeDef, DataCacheWrite>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace DataCacheWrite$ {
    /** @deprecated use `DataCacheWrite$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DataCacheWrite, z.ZodTypeDef, unknown>;
    /** @deprecated use `DataCacheWrite$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DataCacheWrite$Outbound, z.ZodTypeDef, DataCacheWrite>;
    /** @deprecated use `DataCacheWrite$Outbound` instead. */
    type Outbound = DataCacheWrite$Outbound;
}
export declare function dataCacheWriteToJSON(dataCacheWrite: DataCacheWrite): string;
export declare function dataCacheWriteFromJSON(jsonString: string): SafeParseResult<DataCacheWrite, SDKValidationError>;
/** @internal */
export declare const EdgeConfigRead$inboundSchema: z.ZodType<EdgeConfigRead, z.ZodTypeDef, unknown>;
/** @internal */
export type EdgeConfigRead$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const EdgeConfigRead$outboundSchema: z.ZodType<EdgeConfigRead$Outbound, z.ZodTypeDef, EdgeConfigRead>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EdgeConfigRead$ {
    /** @deprecated use `EdgeConfigRead$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EdgeConfigRead, z.ZodTypeDef, unknown>;
    /** @deprecated use `EdgeConfigRead$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EdgeConfigRead$Outbound, z.ZodTypeDef, EdgeConfigRead>;
    /** @deprecated use `EdgeConfigRead$Outbound` instead. */
    type Outbound = EdgeConfigRead$Outbound;
}
export declare function edgeConfigReadToJSON(edgeConfigRead: EdgeConfigRead): string;
export declare function edgeConfigReadFromJSON(jsonString: string): SafeParseResult<EdgeConfigRead, SDKValidationError>;
/** @internal */
export declare const EdgeConfigWrite$inboundSchema: z.ZodType<EdgeConfigWrite, z.ZodTypeDef, unknown>;
/** @internal */
export type EdgeConfigWrite$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const EdgeConfigWrite$outboundSchema: z.ZodType<EdgeConfigWrite$Outbound, z.ZodTypeDef, EdgeConfigWrite>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EdgeConfigWrite$ {
    /** @deprecated use `EdgeConfigWrite$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EdgeConfigWrite, z.ZodTypeDef, unknown>;
    /** @deprecated use `EdgeConfigWrite$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EdgeConfigWrite$Outbound, z.ZodTypeDef, EdgeConfigWrite>;
    /** @deprecated use `EdgeConfigWrite$Outbound` instead. */
    type Outbound = EdgeConfigWrite$Outbound;
}
export declare function edgeConfigWriteToJSON(edgeConfigWrite: EdgeConfigWrite): string;
export declare function edgeConfigWriteFromJSON(jsonString: string): SafeParseResult<EdgeConfigWrite, SDKValidationError>;
/** @internal */
export declare const EdgeFunctionExecutionUnits$inboundSchema: z.ZodType<EdgeFunctionExecutionUnits, z.ZodTypeDef, unknown>;
/** @internal */
export type EdgeFunctionExecutionUnits$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const EdgeFunctionExecutionUnits$outboundSchema: z.ZodType<EdgeFunctionExecutionUnits$Outbound, z.ZodTypeDef, EdgeFunctionExecutionUnits>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EdgeFunctionExecutionUnits$ {
    /** @deprecated use `EdgeFunctionExecutionUnits$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EdgeFunctionExecutionUnits, z.ZodTypeDef, unknown>;
    /** @deprecated use `EdgeFunctionExecutionUnits$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EdgeFunctionExecutionUnits$Outbound, z.ZodTypeDef, EdgeFunctionExecutionUnits>;
    /** @deprecated use `EdgeFunctionExecutionUnits$Outbound` instead. */
    type Outbound = EdgeFunctionExecutionUnits$Outbound;
}
export declare function edgeFunctionExecutionUnitsToJSON(edgeFunctionExecutionUnits: EdgeFunctionExecutionUnits): string;
export declare function edgeFunctionExecutionUnitsFromJSON(jsonString: string): SafeParseResult<EdgeFunctionExecutionUnits, SDKValidationError>;
/** @internal */
export declare const EdgeMiddlewareInvocations$inboundSchema: z.ZodType<EdgeMiddlewareInvocations, z.ZodTypeDef, unknown>;
/** @internal */
export type EdgeMiddlewareInvocations$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const EdgeMiddlewareInvocations$outboundSchema: z.ZodType<EdgeMiddlewareInvocations$Outbound, z.ZodTypeDef, EdgeMiddlewareInvocations>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EdgeMiddlewareInvocations$ {
    /** @deprecated use `EdgeMiddlewareInvocations$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EdgeMiddlewareInvocations, z.ZodTypeDef, unknown>;
    /** @deprecated use `EdgeMiddlewareInvocations$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EdgeMiddlewareInvocations$Outbound, z.ZodTypeDef, EdgeMiddlewareInvocations>;
    /** @deprecated use `EdgeMiddlewareInvocations$Outbound` instead. */
    type Outbound = EdgeMiddlewareInvocations$Outbound;
}
export declare function edgeMiddlewareInvocationsToJSON(edgeMiddlewareInvocations: EdgeMiddlewareInvocations): string;
export declare function edgeMiddlewareInvocationsFromJSON(jsonString: string): SafeParseResult<EdgeMiddlewareInvocations, SDKValidationError>;
/** @internal */
export declare const EdgeRequestAdditionalCpuDuration$inboundSchema: z.ZodType<EdgeRequestAdditionalCpuDuration, z.ZodTypeDef, unknown>;
/** @internal */
export type EdgeRequestAdditionalCpuDuration$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const EdgeRequestAdditionalCpuDuration$outboundSchema: z.ZodType<EdgeRequestAdditionalCpuDuration$Outbound, z.ZodTypeDef, EdgeRequestAdditionalCpuDuration>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EdgeRequestAdditionalCpuDuration$ {
    /** @deprecated use `EdgeRequestAdditionalCpuDuration$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EdgeRequestAdditionalCpuDuration, z.ZodTypeDef, unknown>;
    /** @deprecated use `EdgeRequestAdditionalCpuDuration$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EdgeRequestAdditionalCpuDuration$Outbound, z.ZodTypeDef, EdgeRequestAdditionalCpuDuration>;
    /** @deprecated use `EdgeRequestAdditionalCpuDuration$Outbound` instead. */
    type Outbound = EdgeRequestAdditionalCpuDuration$Outbound;
}
export declare function edgeRequestAdditionalCpuDurationToJSON(edgeRequestAdditionalCpuDuration: EdgeRequestAdditionalCpuDuration): string;
export declare function edgeRequestAdditionalCpuDurationFromJSON(jsonString: string): SafeParseResult<EdgeRequestAdditionalCpuDuration, SDKValidationError>;
/** @internal */
export declare const EdgeRequest$inboundSchema: z.ZodType<EdgeRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type EdgeRequest$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const EdgeRequest$outboundSchema: z.ZodType<EdgeRequest$Outbound, z.ZodTypeDef, EdgeRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EdgeRequest$ {
    /** @deprecated use `EdgeRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EdgeRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `EdgeRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EdgeRequest$Outbound, z.ZodTypeDef, EdgeRequest>;
    /** @deprecated use `EdgeRequest$Outbound` instead. */
    type Outbound = EdgeRequest$Outbound;
}
export declare function edgeRequestToJSON(edgeRequest: EdgeRequest): string;
export declare function edgeRequestFromJSON(jsonString: string): SafeParseResult<EdgeRequest, SDKValidationError>;
/** @internal */
export declare const ElasticConcurrencyBuildSlots$inboundSchema: z.ZodType<ElasticConcurrencyBuildSlots, z.ZodTypeDef, unknown>;
/** @internal */
export type ElasticConcurrencyBuildSlots$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const ElasticConcurrencyBuildSlots$outboundSchema: z.ZodType<ElasticConcurrencyBuildSlots$Outbound, z.ZodTypeDef, ElasticConcurrencyBuildSlots>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ElasticConcurrencyBuildSlots$ {
    /** @deprecated use `ElasticConcurrencyBuildSlots$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ElasticConcurrencyBuildSlots, z.ZodTypeDef, unknown>;
    /** @deprecated use `ElasticConcurrencyBuildSlots$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ElasticConcurrencyBuildSlots$Outbound, z.ZodTypeDef, ElasticConcurrencyBuildSlots>;
    /** @deprecated use `ElasticConcurrencyBuildSlots$Outbound` instead. */
    type Outbound = ElasticConcurrencyBuildSlots$Outbound;
}
export declare function elasticConcurrencyBuildSlotsToJSON(elasticConcurrencyBuildSlots: ElasticConcurrencyBuildSlots): string;
export declare function elasticConcurrencyBuildSlotsFromJSON(jsonString: string): SafeParseResult<ElasticConcurrencyBuildSlots, SDKValidationError>;
/** @internal */
export declare const FastDataTransfer$inboundSchema: z.ZodType<FastDataTransfer, z.ZodTypeDef, unknown>;
/** @internal */
export type FastDataTransfer$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const FastDataTransfer$outboundSchema: z.ZodType<FastDataTransfer$Outbound, z.ZodTypeDef, FastDataTransfer>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FastDataTransfer$ {
    /** @deprecated use `FastDataTransfer$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FastDataTransfer, z.ZodTypeDef, unknown>;
    /** @deprecated use `FastDataTransfer$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FastDataTransfer$Outbound, z.ZodTypeDef, FastDataTransfer>;
    /** @deprecated use `FastDataTransfer$Outbound` instead. */
    type Outbound = FastDataTransfer$Outbound;
}
export declare function fastDataTransferToJSON(fastDataTransfer: FastDataTransfer): string;
export declare function fastDataTransferFromJSON(jsonString: string): SafeParseResult<FastDataTransfer, SDKValidationError>;
/** @internal */
export declare const FastOriginTransfer$inboundSchema: z.ZodType<FastOriginTransfer, z.ZodTypeDef, unknown>;
/** @internal */
export type FastOriginTransfer$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const FastOriginTransfer$outboundSchema: z.ZodType<FastOriginTransfer$Outbound, z.ZodTypeDef, FastOriginTransfer>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FastOriginTransfer$ {
    /** @deprecated use `FastOriginTransfer$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FastOriginTransfer, z.ZodTypeDef, unknown>;
    /** @deprecated use `FastOriginTransfer$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FastOriginTransfer$Outbound, z.ZodTypeDef, FastOriginTransfer>;
    /** @deprecated use `FastOriginTransfer$Outbound` instead. */
    type Outbound = FastOriginTransfer$Outbound;
}
export declare function fastOriginTransferToJSON(fastOriginTransfer: FastOriginTransfer): string;
export declare function fastOriginTransferFromJSON(jsonString: string): SafeParseResult<FastOriginTransfer, SDKValidationError>;
/** @internal */
export declare const FluidCpuDuration$inboundSchema: z.ZodType<FluidCpuDuration, z.ZodTypeDef, unknown>;
/** @internal */
export type FluidCpuDuration$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const FluidCpuDuration$outboundSchema: z.ZodType<FluidCpuDuration$Outbound, z.ZodTypeDef, FluidCpuDuration>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FluidCpuDuration$ {
    /** @deprecated use `FluidCpuDuration$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FluidCpuDuration, z.ZodTypeDef, unknown>;
    /** @deprecated use `FluidCpuDuration$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FluidCpuDuration$Outbound, z.ZodTypeDef, FluidCpuDuration>;
    /** @deprecated use `FluidCpuDuration$Outbound` instead. */
    type Outbound = FluidCpuDuration$Outbound;
}
export declare function fluidCpuDurationToJSON(fluidCpuDuration: FluidCpuDuration): string;
export declare function fluidCpuDurationFromJSON(jsonString: string): SafeParseResult<FluidCpuDuration, SDKValidationError>;
/** @internal */
export declare const FluidDuration$inboundSchema: z.ZodType<FluidDuration, z.ZodTypeDef, unknown>;
/** @internal */
export type FluidDuration$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const FluidDuration$outboundSchema: z.ZodType<FluidDuration$Outbound, z.ZodTypeDef, FluidDuration>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FluidDuration$ {
    /** @deprecated use `FluidDuration$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FluidDuration, z.ZodTypeDef, unknown>;
    /** @deprecated use `FluidDuration$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FluidDuration$Outbound, z.ZodTypeDef, FluidDuration>;
    /** @deprecated use `FluidDuration$Outbound` instead. */
    type Outbound = FluidDuration$Outbound;
}
export declare function fluidDurationToJSON(fluidDuration: FluidDuration): string;
export declare function fluidDurationFromJSON(jsonString: string): SafeParseResult<FluidDuration, SDKValidationError>;
/** @internal */
export declare const FunctionDuration$inboundSchema: z.ZodType<FunctionDuration, z.ZodTypeDef, unknown>;
/** @internal */
export type FunctionDuration$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const FunctionDuration$outboundSchema: z.ZodType<FunctionDuration$Outbound, z.ZodTypeDef, FunctionDuration>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FunctionDuration$ {
    /** @deprecated use `FunctionDuration$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FunctionDuration, z.ZodTypeDef, unknown>;
    /** @deprecated use `FunctionDuration$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FunctionDuration$Outbound, z.ZodTypeDef, FunctionDuration>;
    /** @deprecated use `FunctionDuration$Outbound` instead. */
    type Outbound = FunctionDuration$Outbound;
}
export declare function functionDurationToJSON(functionDuration: FunctionDuration): string;
export declare function functionDurationFromJSON(jsonString: string): SafeParseResult<FunctionDuration, SDKValidationError>;
/** @internal */
export declare const FunctionInvocation$inboundSchema: z.ZodType<FunctionInvocation, z.ZodTypeDef, unknown>;
/** @internal */
export type FunctionInvocation$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const FunctionInvocation$outboundSchema: z.ZodType<FunctionInvocation$Outbound, z.ZodTypeDef, FunctionInvocation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FunctionInvocation$ {
    /** @deprecated use `FunctionInvocation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FunctionInvocation, z.ZodTypeDef, unknown>;
    /** @deprecated use `FunctionInvocation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FunctionInvocation$Outbound, z.ZodTypeDef, FunctionInvocation>;
    /** @deprecated use `FunctionInvocation$Outbound` instead. */
    type Outbound = FunctionInvocation$Outbound;
}
export declare function functionInvocationToJSON(functionInvocation: FunctionInvocation): string;
export declare function functionInvocationFromJSON(jsonString: string): SafeParseResult<FunctionInvocation, SDKValidationError>;
/** @internal */
export declare const ImageOptimizationCacheRead$inboundSchema: z.ZodType<ImageOptimizationCacheRead, z.ZodTypeDef, unknown>;
/** @internal */
export type ImageOptimizationCacheRead$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const ImageOptimizationCacheRead$outboundSchema: z.ZodType<ImageOptimizationCacheRead$Outbound, z.ZodTypeDef, ImageOptimizationCacheRead>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ImageOptimizationCacheRead$ {
    /** @deprecated use `ImageOptimizationCacheRead$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ImageOptimizationCacheRead, z.ZodTypeDef, unknown>;
    /** @deprecated use `ImageOptimizationCacheRead$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ImageOptimizationCacheRead$Outbound, z.ZodTypeDef, ImageOptimizationCacheRead>;
    /** @deprecated use `ImageOptimizationCacheRead$Outbound` instead. */
    type Outbound = ImageOptimizationCacheRead$Outbound;
}
export declare function imageOptimizationCacheReadToJSON(imageOptimizationCacheRead: ImageOptimizationCacheRead): string;
export declare function imageOptimizationCacheReadFromJSON(jsonString: string): SafeParseResult<ImageOptimizationCacheRead, SDKValidationError>;
/** @internal */
export declare const ImageOptimizationCacheWrite$inboundSchema: z.ZodType<ImageOptimizationCacheWrite, z.ZodTypeDef, unknown>;
/** @internal */
export type ImageOptimizationCacheWrite$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const ImageOptimizationCacheWrite$outboundSchema: z.ZodType<ImageOptimizationCacheWrite$Outbound, z.ZodTypeDef, ImageOptimizationCacheWrite>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ImageOptimizationCacheWrite$ {
    /** @deprecated use `ImageOptimizationCacheWrite$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ImageOptimizationCacheWrite, z.ZodTypeDef, unknown>;
    /** @deprecated use `ImageOptimizationCacheWrite$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ImageOptimizationCacheWrite$Outbound, z.ZodTypeDef, ImageOptimizationCacheWrite>;
    /** @deprecated use `ImageOptimizationCacheWrite$Outbound` instead. */
    type Outbound = ImageOptimizationCacheWrite$Outbound;
}
export declare function imageOptimizationCacheWriteToJSON(imageOptimizationCacheWrite: ImageOptimizationCacheWrite): string;
export declare function imageOptimizationCacheWriteFromJSON(jsonString: string): SafeParseResult<ImageOptimizationCacheWrite, SDKValidationError>;
/** @internal */
export declare const ImageOptimizationTransformation$inboundSchema: z.ZodType<ImageOptimizationTransformation, z.ZodTypeDef, unknown>;
/** @internal */
export type ImageOptimizationTransformation$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const ImageOptimizationTransformation$outboundSchema: z.ZodType<ImageOptimizationTransformation$Outbound, z.ZodTypeDef, ImageOptimizationTransformation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ImageOptimizationTransformation$ {
    /** @deprecated use `ImageOptimizationTransformation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ImageOptimizationTransformation, z.ZodTypeDef, unknown>;
    /** @deprecated use `ImageOptimizationTransformation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ImageOptimizationTransformation$Outbound, z.ZodTypeDef, ImageOptimizationTransformation>;
    /** @deprecated use `ImageOptimizationTransformation$Outbound` instead. */
    type Outbound = ImageOptimizationTransformation$Outbound;
}
export declare function imageOptimizationTransformationToJSON(imageOptimizationTransformation: ImageOptimizationTransformation): string;
export declare function imageOptimizationTransformationFromJSON(jsonString: string): SafeParseResult<ImageOptimizationTransformation, SDKValidationError>;
/** @internal */
export declare const LogDrainsVolume$inboundSchema: z.ZodType<LogDrainsVolume, z.ZodTypeDef, unknown>;
/** @internal */
export type LogDrainsVolume$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const LogDrainsVolume$outboundSchema: z.ZodType<LogDrainsVolume$Outbound, z.ZodTypeDef, LogDrainsVolume>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace LogDrainsVolume$ {
    /** @deprecated use `LogDrainsVolume$inboundSchema` instead. */
    const inboundSchema: z.ZodType<LogDrainsVolume, z.ZodTypeDef, unknown>;
    /** @deprecated use `LogDrainsVolume$outboundSchema` instead. */
    const outboundSchema: z.ZodType<LogDrainsVolume$Outbound, z.ZodTypeDef, LogDrainsVolume>;
    /** @deprecated use `LogDrainsVolume$Outbound` instead. */
    type Outbound = LogDrainsVolume$Outbound;
}
export declare function logDrainsVolumeToJSON(logDrainsVolume: LogDrainsVolume): string;
export declare function logDrainsVolumeFromJSON(jsonString: string): SafeParseResult<LogDrainsVolume, SDKValidationError>;
/** @internal */
export declare const MonitoringMetric$inboundSchema: z.ZodType<MonitoringMetric, z.ZodTypeDef, unknown>;
/** @internal */
export type MonitoringMetric$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const MonitoringMetric$outboundSchema: z.ZodType<MonitoringMetric$Outbound, z.ZodTypeDef, MonitoringMetric>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MonitoringMetric$ {
    /** @deprecated use `MonitoringMetric$inboundSchema` instead. */
    const inboundSchema: z.ZodType<MonitoringMetric, z.ZodTypeDef, unknown>;
    /** @deprecated use `MonitoringMetric$outboundSchema` instead. */
    const outboundSchema: z.ZodType<MonitoringMetric$Outbound, z.ZodTypeDef, MonitoringMetric>;
    /** @deprecated use `MonitoringMetric$Outbound` instead. */
    type Outbound = MonitoringMetric$Outbound;
}
export declare function monitoringMetricToJSON(monitoringMetric: MonitoringMetric): string;
export declare function monitoringMetricFromJSON(jsonString: string): SafeParseResult<MonitoringMetric, SDKValidationError>;
/** @internal */
export declare const BlobDataTransfer$inboundSchema: z.ZodType<BlobDataTransfer, z.ZodTypeDef, unknown>;
/** @internal */
export type BlobDataTransfer$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const BlobDataTransfer$outboundSchema: z.ZodType<BlobDataTransfer$Outbound, z.ZodTypeDef, BlobDataTransfer>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BlobDataTransfer$ {
    /** @deprecated use `BlobDataTransfer$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BlobDataTransfer, z.ZodTypeDef, unknown>;
    /** @deprecated use `BlobDataTransfer$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BlobDataTransfer$Outbound, z.ZodTypeDef, BlobDataTransfer>;
    /** @deprecated use `BlobDataTransfer$Outbound` instead. */
    type Outbound = BlobDataTransfer$Outbound;
}
export declare function blobDataTransferToJSON(blobDataTransfer: BlobDataTransfer): string;
export declare function blobDataTransferFromJSON(jsonString: string): SafeParseResult<BlobDataTransfer, SDKValidationError>;
/** @internal */
export declare const ObservabilityEvent$inboundSchema: z.ZodType<ObservabilityEvent, z.ZodTypeDef, unknown>;
/** @internal */
export type ObservabilityEvent$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const ObservabilityEvent$outboundSchema: z.ZodType<ObservabilityEvent$Outbound, z.ZodTypeDef, ObservabilityEvent>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ObservabilityEvent$ {
    /** @deprecated use `ObservabilityEvent$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ObservabilityEvent, z.ZodTypeDef, unknown>;
    /** @deprecated use `ObservabilityEvent$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ObservabilityEvent$Outbound, z.ZodTypeDef, ObservabilityEvent>;
    /** @deprecated use `ObservabilityEvent$Outbound` instead. */
    type Outbound = ObservabilityEvent$Outbound;
}
export declare function observabilityEventToJSON(observabilityEvent: ObservabilityEvent): string;
export declare function observabilityEventFromJSON(jsonString: string): SafeParseResult<ObservabilityEvent, SDKValidationError>;
/** @internal */
export declare const OnDemandConcurrencyMinutes$inboundSchema: z.ZodType<OnDemandConcurrencyMinutes, z.ZodTypeDef, unknown>;
/** @internal */
export type OnDemandConcurrencyMinutes$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const OnDemandConcurrencyMinutes$outboundSchema: z.ZodType<OnDemandConcurrencyMinutes$Outbound, z.ZodTypeDef, OnDemandConcurrencyMinutes>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OnDemandConcurrencyMinutes$ {
    /** @deprecated use `OnDemandConcurrencyMinutes$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OnDemandConcurrencyMinutes, z.ZodTypeDef, unknown>;
    /** @deprecated use `OnDemandConcurrencyMinutes$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OnDemandConcurrencyMinutes$Outbound, z.ZodTypeDef, OnDemandConcurrencyMinutes>;
    /** @deprecated use `OnDemandConcurrencyMinutes$Outbound` instead. */
    type Outbound = OnDemandConcurrencyMinutes$Outbound;
}
export declare function onDemandConcurrencyMinutesToJSON(onDemandConcurrencyMinutes: OnDemandConcurrencyMinutes): string;
export declare function onDemandConcurrencyMinutesFromJSON(jsonString: string): SafeParseResult<OnDemandConcurrencyMinutes, SDKValidationError>;
/** @internal */
export declare const RuntimeCacheRead$inboundSchema: z.ZodType<RuntimeCacheRead, z.ZodTypeDef, unknown>;
/** @internal */
export type RuntimeCacheRead$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const RuntimeCacheRead$outboundSchema: z.ZodType<RuntimeCacheRead$Outbound, z.ZodTypeDef, RuntimeCacheRead>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RuntimeCacheRead$ {
    /** @deprecated use `RuntimeCacheRead$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RuntimeCacheRead, z.ZodTypeDef, unknown>;
    /** @deprecated use `RuntimeCacheRead$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RuntimeCacheRead$Outbound, z.ZodTypeDef, RuntimeCacheRead>;
    /** @deprecated use `RuntimeCacheRead$Outbound` instead. */
    type Outbound = RuntimeCacheRead$Outbound;
}
export declare function runtimeCacheReadToJSON(runtimeCacheRead: RuntimeCacheRead): string;
export declare function runtimeCacheReadFromJSON(jsonString: string): SafeParseResult<RuntimeCacheRead, SDKValidationError>;
/** @internal */
export declare const RuntimeCacheWrite$inboundSchema: z.ZodType<RuntimeCacheWrite, z.ZodTypeDef, unknown>;
/** @internal */
export type RuntimeCacheWrite$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const RuntimeCacheWrite$outboundSchema: z.ZodType<RuntimeCacheWrite$Outbound, z.ZodTypeDef, RuntimeCacheWrite>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RuntimeCacheWrite$ {
    /** @deprecated use `RuntimeCacheWrite$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RuntimeCacheWrite, z.ZodTypeDef, unknown>;
    /** @deprecated use `RuntimeCacheWrite$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RuntimeCacheWrite$Outbound, z.ZodTypeDef, RuntimeCacheWrite>;
    /** @deprecated use `RuntimeCacheWrite$Outbound` instead. */
    type Outbound = RuntimeCacheWrite$Outbound;
}
export declare function runtimeCacheWriteToJSON(runtimeCacheWrite: RuntimeCacheWrite): string;
export declare function runtimeCacheWriteFromJSON(jsonString: string): SafeParseResult<RuntimeCacheWrite, SDKValidationError>;
/** @internal */
export declare const ServerlessFunctionExecution$inboundSchema: z.ZodType<ServerlessFunctionExecution, z.ZodTypeDef, unknown>;
/** @internal */
export type ServerlessFunctionExecution$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const ServerlessFunctionExecution$outboundSchema: z.ZodType<ServerlessFunctionExecution$Outbound, z.ZodTypeDef, ServerlessFunctionExecution>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ServerlessFunctionExecution$ {
    /** @deprecated use `ServerlessFunctionExecution$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ServerlessFunctionExecution, z.ZodTypeDef, unknown>;
    /** @deprecated use `ServerlessFunctionExecution$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ServerlessFunctionExecution$Outbound, z.ZodTypeDef, ServerlessFunctionExecution>;
    /** @deprecated use `ServerlessFunctionExecution$Outbound` instead. */
    type Outbound = ServerlessFunctionExecution$Outbound;
}
export declare function serverlessFunctionExecutionToJSON(serverlessFunctionExecution: ServerlessFunctionExecution): string;
export declare function serverlessFunctionExecutionFromJSON(jsonString: string): SafeParseResult<ServerlessFunctionExecution, SDKValidationError>;
/** @internal */
export declare const SourceImages$inboundSchema: z.ZodType<SourceImages, z.ZodTypeDef, unknown>;
/** @internal */
export type SourceImages$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const SourceImages$outboundSchema: z.ZodType<SourceImages$Outbound, z.ZodTypeDef, SourceImages>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SourceImages$ {
    /** @deprecated use `SourceImages$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SourceImages, z.ZodTypeDef, unknown>;
    /** @deprecated use `SourceImages$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SourceImages$Outbound, z.ZodTypeDef, SourceImages>;
    /** @deprecated use `SourceImages$Outbound` instead. */
    type Outbound = SourceImages$Outbound;
}
export declare function sourceImagesToJSON(sourceImages: SourceImages): string;
export declare function sourceImagesFromJSON(jsonString: string): SafeParseResult<SourceImages, SDKValidationError>;
/** @internal */
export declare const WafOwaspExcessBytes$inboundSchema: z.ZodType<WafOwaspExcessBytes, z.ZodTypeDef, unknown>;
/** @internal */
export type WafOwaspExcessBytes$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const WafOwaspExcessBytes$outboundSchema: z.ZodType<WafOwaspExcessBytes$Outbound, z.ZodTypeDef, WafOwaspExcessBytes>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace WafOwaspExcessBytes$ {
    /** @deprecated use `WafOwaspExcessBytes$inboundSchema` instead. */
    const inboundSchema: z.ZodType<WafOwaspExcessBytes, z.ZodTypeDef, unknown>;
    /** @deprecated use `WafOwaspExcessBytes$outboundSchema` instead. */
    const outboundSchema: z.ZodType<WafOwaspExcessBytes$Outbound, z.ZodTypeDef, WafOwaspExcessBytes>;
    /** @deprecated use `WafOwaspExcessBytes$Outbound` instead. */
    type Outbound = WafOwaspExcessBytes$Outbound;
}
export declare function wafOwaspExcessBytesToJSON(wafOwaspExcessBytes: WafOwaspExcessBytes): string;
export declare function wafOwaspExcessBytesFromJSON(jsonString: string): SafeParseResult<WafOwaspExcessBytes, SDKValidationError>;
/** @internal */
export declare const WafOwaspRequests$inboundSchema: z.ZodType<WafOwaspRequests, z.ZodTypeDef, unknown>;
/** @internal */
export type WafOwaspRequests$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const WafOwaspRequests$outboundSchema: z.ZodType<WafOwaspRequests$Outbound, z.ZodTypeDef, WafOwaspRequests>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace WafOwaspRequests$ {
    /** @deprecated use `WafOwaspRequests$inboundSchema` instead. */
    const inboundSchema: z.ZodType<WafOwaspRequests, z.ZodTypeDef, unknown>;
    /** @deprecated use `WafOwaspRequests$outboundSchema` instead. */
    const outboundSchema: z.ZodType<WafOwaspRequests$Outbound, z.ZodTypeDef, WafOwaspRequests>;
    /** @deprecated use `WafOwaspRequests$Outbound` instead. */
    type Outbound = WafOwaspRequests$Outbound;
}
export declare function wafOwaspRequestsToJSON(wafOwaspRequests: WafOwaspRequests): string;
export declare function wafOwaspRequestsFromJSON(jsonString: string): SafeParseResult<WafOwaspRequests, SDKValidationError>;
/** @internal */
export declare const WafRateLimitRequest$inboundSchema: z.ZodType<WafRateLimitRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type WafRateLimitRequest$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const WafRateLimitRequest$outboundSchema: z.ZodType<WafRateLimitRequest$Outbound, z.ZodTypeDef, WafRateLimitRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace WafRateLimitRequest$ {
    /** @deprecated use `WafRateLimitRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<WafRateLimitRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `WafRateLimitRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<WafRateLimitRequest$Outbound, z.ZodTypeDef, WafRateLimitRequest>;
    /** @deprecated use `WafRateLimitRequest$Outbound` instead. */
    type Outbound = WafRateLimitRequest$Outbound;
}
export declare function wafRateLimitRequestToJSON(wafRateLimitRequest: WafRateLimitRequest): string;
export declare function wafRateLimitRequestFromJSON(jsonString: string): SafeParseResult<WafRateLimitRequest, SDKValidationError>;
/** @internal */
export declare const WebAnalyticsEvent$inboundSchema: z.ZodType<WebAnalyticsEvent, z.ZodTypeDef, unknown>;
/** @internal */
export type WebAnalyticsEvent$Outbound = {
    currentThreshold: number;
    warningAt?: number | null | undefined;
    blockedAt?: number | null | undefined;
};
/** @internal */
export declare const WebAnalyticsEvent$outboundSchema: z.ZodType<WebAnalyticsEvent$Outbound, z.ZodTypeDef, WebAnalyticsEvent>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace WebAnalyticsEvent$ {
    /** @deprecated use `WebAnalyticsEvent$inboundSchema` instead. */
    const inboundSchema: z.ZodType<WebAnalyticsEvent, z.ZodTypeDef, unknown>;
    /** @deprecated use `WebAnalyticsEvent$outboundSchema` instead. */
    const outboundSchema: z.ZodType<WebAnalyticsEvent$Outbound, z.ZodTypeDef, WebAnalyticsEvent>;
    /** @deprecated use `WebAnalyticsEvent$Outbound` instead. */
    type Outbound = WebAnalyticsEvent$Outbound;
}
export declare function webAnalyticsEventToJSON(webAnalyticsEvent: WebAnalyticsEvent): string;
export declare function webAnalyticsEventFromJSON(jsonString: string): SafeParseResult<WebAnalyticsEvent, SDKValidationError>;
/** @internal */
export declare const OverageUsageAlerts$inboundSchema: z.ZodType<OverageUsageAlerts, z.ZodTypeDef, unknown>;
/** @internal */
export type OverageUsageAlerts$Outbound = {
    analyticsUsage?: AnalyticsUsage$Outbound | undefined;
    artifacts?: Artifacts$Outbound | undefined;
    bandwidth?: Bandwidth$Outbound | undefined;
    blobTotalAdvancedRequests?: BlobTotalAdvancedRequests$Outbound | undefined;
    blobTotalAvgSizeInBytes?: BlobTotalAvgSizeInBytes$Outbound | undefined;
    blobTotalGetResponseObjectSizeInBytes?: BlobTotalGetResponseObjectSizeInBytes$Outbound | undefined;
    blobTotalSimpleRequests?: BlobTotalSimpleRequests$Outbound | undefined;
    connectDataTransfer?: ConnectDataTransfer$Outbound | undefined;
    dataCacheRead?: DataCacheRead$Outbound | undefined;
    dataCacheWrite?: DataCacheWrite$Outbound | undefined;
    edgeConfigRead?: EdgeConfigRead$Outbound | undefined;
    edgeConfigWrite?: EdgeConfigWrite$Outbound | undefined;
    edgeFunctionExecutionUnits?: EdgeFunctionExecutionUnits$Outbound | undefined;
    edgeMiddlewareInvocations?: EdgeMiddlewareInvocations$Outbound | undefined;
    edgeRequestAdditionalCpuDuration?: EdgeRequestAdditionalCpuDuration$Outbound | undefined;
    edgeRequest?: EdgeRequest$Outbound | undefined;
    elasticConcurrencyBuildSlots?: ElasticConcurrencyBuildSlots$Outbound | undefined;
    fastDataTransfer?: FastDataTransfer$Outbound | undefined;
    fastOriginTransfer?: FastOriginTransfer$Outbound | undefined;
    fluidCpuDuration?: FluidCpuDuration$Outbound | undefined;
    fluidDuration?: FluidDuration$Outbound | undefined;
    functionDuration?: FunctionDuration$Outbound | undefined;
    functionInvocation?: FunctionInvocation$Outbound | undefined;
    imageOptimizationCacheRead?: ImageOptimizationCacheRead$Outbound | undefined;
    imageOptimizationCacheWrite?: ImageOptimizationCacheWrite$Outbound | undefined;
    imageOptimizationTransformation?: ImageOptimizationTransformation$Outbound | undefined;
    logDrainsVolume?: LogDrainsVolume$Outbound | undefined;
    monitoringMetric?: MonitoringMetric$Outbound | undefined;
    blobDataTransfer?: BlobDataTransfer$Outbound | undefined;
    observabilityEvent?: ObservabilityEvent$Outbound | undefined;
    onDemandConcurrencyMinutes?: OnDemandConcurrencyMinutes$Outbound | undefined;
    runtimeCacheRead?: RuntimeCacheRead$Outbound | undefined;
    runtimeCacheWrite?: RuntimeCacheWrite$Outbound | undefined;
    serverlessFunctionExecution?: ServerlessFunctionExecution$Outbound | undefined;
    sourceImages?: SourceImages$Outbound | undefined;
    wafOwaspExcessBytes?: WafOwaspExcessBytes$Outbound | undefined;
    wafOwaspRequests?: WafOwaspRequests$Outbound | undefined;
    wafRateLimitRequest?: WafRateLimitRequest$Outbound | undefined;
    webAnalyticsEvent?: WebAnalyticsEvent$Outbound | undefined;
};
/** @internal */
export declare const OverageUsageAlerts$outboundSchema: z.ZodType<OverageUsageAlerts$Outbound, z.ZodTypeDef, OverageUsageAlerts>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OverageUsageAlerts$ {
    /** @deprecated use `OverageUsageAlerts$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OverageUsageAlerts, z.ZodTypeDef, unknown>;
    /** @deprecated use `OverageUsageAlerts$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OverageUsageAlerts$Outbound, z.ZodTypeDef, OverageUsageAlerts>;
    /** @deprecated use `OverageUsageAlerts$Outbound` instead. */
    type Outbound = OverageUsageAlerts$Outbound;
}
export declare function overageUsageAlertsToJSON(overageUsageAlerts: OverageUsageAlerts): string;
export declare function overageUsageAlertsFromJSON(jsonString: string): SafeParseResult<OverageUsageAlerts, SDKValidationError>;
/** @internal */
export declare const OverageMetadata$inboundSchema: z.ZodType<OverageMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type OverageMetadata$Outbound = {
    firstTimeOnDemandNotificationSentAt?: number | undefined;
    dailyOverageSummaryEmailSentAt?: number | undefined;
    weeklyOverageSummaryEmailSentAt?: number | undefined;
    overageSummaryExpiresAt?: number | undefined;
    increasedOnDemandEmailSentAt?: number | undefined;
    increasedOnDemandEmailAttemptedAt?: number | undefined;
};
/** @internal */
export declare const OverageMetadata$outboundSchema: z.ZodType<OverageMetadata$Outbound, z.ZodTypeDef, OverageMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OverageMetadata$ {
    /** @deprecated use `OverageMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OverageMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `OverageMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OverageMetadata$Outbound, z.ZodTypeDef, OverageMetadata>;
    /** @deprecated use `OverageMetadata$Outbound` instead. */
    type Outbound = OverageMetadata$Outbound;
}
export declare function overageMetadataToJSON(overageMetadata: OverageMetadata): string;
export declare function overageMetadataFromJSON(jsonString: string): SafeParseResult<OverageMetadata, SDKValidationError>;
/** @internal */
export declare const PayloadEnablePreviewFeedback$inboundSchema: z.ZodNativeEnum<typeof PayloadEnablePreviewFeedback>;
/** @internal */
export declare const PayloadEnablePreviewFeedback$outboundSchema: z.ZodNativeEnum<typeof PayloadEnablePreviewFeedback>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadEnablePreviewFeedback$ {
    /** @deprecated use `PayloadEnablePreviewFeedback$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Default: "default";
        readonly On: "on";
        readonly Off: "off";
        readonly OnForce: "on-force";
        readonly OffForce: "off-force";
        readonly DefaultForce: "default-force";
    }>;
    /** @deprecated use `PayloadEnablePreviewFeedback$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Default: "default";
        readonly On: "on";
        readonly Off: "off";
        readonly OnForce: "on-force";
        readonly OffForce: "off-force";
        readonly DefaultForce: "default-force";
    }>;
}
/** @internal */
export declare const BlockReason$inboundSchema: z.ZodNativeEnum<typeof BlockReason>;
/** @internal */
export declare const BlockReason$outboundSchema: z.ZodNativeEnum<typeof BlockReason>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BlockReason$ {
    /** @deprecated use `BlockReason$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly AdminOverride: "admin_override";
        readonly LimitsExceeded: "limits_exceeded";
    }>;
    /** @deprecated use `BlockReason$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly AdminOverride: "admin_override";
        readonly LimitsExceeded: "limits_exceeded";
    }>;
}
/** @internal */
export declare const PayloadWebAnalytics$inboundSchema: z.ZodType<PayloadWebAnalytics, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadWebAnalytics$Outbound = {
    updatedAt: number;
    blockedFrom?: number | undefined;
    blockedUntil?: number | undefined;
    blockReason: string;
    graceEmailSentAt?: number | undefined;
};
/** @internal */
export declare const PayloadWebAnalytics$outboundSchema: z.ZodType<PayloadWebAnalytics$Outbound, z.ZodTypeDef, PayloadWebAnalytics>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadWebAnalytics$ {
    /** @deprecated use `PayloadWebAnalytics$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadWebAnalytics, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadWebAnalytics$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadWebAnalytics$Outbound, z.ZodTypeDef, PayloadWebAnalytics>;
    /** @deprecated use `PayloadWebAnalytics$Outbound` instead. */
    type Outbound = PayloadWebAnalytics$Outbound;
}
export declare function payloadWebAnalyticsToJSON(payloadWebAnalytics: PayloadWebAnalytics): string;
export declare function payloadWebAnalyticsFromJSON(jsonString: string): SafeParseResult<PayloadWebAnalytics, SDKValidationError>;
/** @internal */
export declare const PayloadBlockReason$inboundSchema: z.ZodNativeEnum<typeof PayloadBlockReason>;
/** @internal */
export declare const PayloadBlockReason$outboundSchema: z.ZodNativeEnum<typeof PayloadBlockReason>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadBlockReason$ {
    /** @deprecated use `PayloadBlockReason$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly AdminOverride: "admin_override";
        readonly LimitsExceeded: "limits_exceeded";
    }>;
    /** @deprecated use `PayloadBlockReason$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly AdminOverride: "admin_override";
        readonly LimitsExceeded: "limits_exceeded";
    }>;
}
/** @internal */
export declare const BlockType$inboundSchema: z.ZodNativeEnum<typeof BlockType>;
/** @internal */
export declare const BlockType$outboundSchema: z.ZodNativeEnum<typeof BlockType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BlockType$ {
    /** @deprecated use `BlockType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Soft: "soft";
        readonly Hard: "hard";
    }>;
    /** @deprecated use `BlockType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Soft: "soft";
        readonly Hard: "hard";
    }>;
}
/** @internal */
export declare const Monitoring$inboundSchema: z.ZodType<Monitoring, z.ZodTypeDef, unknown>;
/** @internal */
export type Monitoring$Outbound = {
    updatedAt: number;
    blockedFrom?: number | undefined;
    blockedUntil?: number | undefined;
    blockReason: string;
    blockType: string;
};
/** @internal */
export declare const Monitoring$outboundSchema: z.ZodType<Monitoring$Outbound, z.ZodTypeDef, Monitoring>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Monitoring$ {
    /** @deprecated use `Monitoring$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Monitoring, z.ZodTypeDef, unknown>;
    /** @deprecated use `Monitoring$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Monitoring$Outbound, z.ZodTypeDef, Monitoring>;
    /** @deprecated use `Monitoring$Outbound` instead. */
    type Outbound = Monitoring$Outbound;
}
export declare function monitoringToJSON(monitoring: Monitoring): string;
export declare function monitoringFromJSON(jsonString: string): SafeParseResult<Monitoring, SDKValidationError>;
/** @internal */
export declare const UserEventPayloadBlockReason$inboundSchema: z.ZodNativeEnum<typeof UserEventPayloadBlockReason>;
/** @internal */
export declare const UserEventPayloadBlockReason$outboundSchema: z.ZodNativeEnum<typeof UserEventPayloadBlockReason>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayloadBlockReason$ {
    /** @deprecated use `UserEventPayloadBlockReason$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly AdminOverride: "admin_override";
        readonly LimitsExceeded: "limits_exceeded";
    }>;
    /** @deprecated use `UserEventPayloadBlockReason$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly AdminOverride: "admin_override";
        readonly LimitsExceeded: "limits_exceeded";
    }>;
}
/** @internal */
export declare const PayloadBlockType$inboundSchema: z.ZodNativeEnum<typeof PayloadBlockType>;
/** @internal */
export declare const PayloadBlockType$outboundSchema: z.ZodNativeEnum<typeof PayloadBlockType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadBlockType$ {
    /** @deprecated use `PayloadBlockType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Soft: "soft";
        readonly Hard: "hard";
    }>;
    /** @deprecated use `PayloadBlockType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Soft: "soft";
        readonly Hard: "hard";
    }>;
}
/** @internal */
export declare const ObservabilityPlus$inboundSchema: z.ZodType<ObservabilityPlus, z.ZodTypeDef, unknown>;
/** @internal */
export type ObservabilityPlus$Outbound = {
    updatedAt: number;
    blockedFrom?: number | undefined;
    blockedUntil?: number | undefined;
    blockReason: string;
    blockType: string;
};
/** @internal */
export declare const ObservabilityPlus$outboundSchema: z.ZodType<ObservabilityPlus$Outbound, z.ZodTypeDef, ObservabilityPlus>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ObservabilityPlus$ {
    /** @deprecated use `ObservabilityPlus$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ObservabilityPlus, z.ZodTypeDef, unknown>;
    /** @deprecated use `ObservabilityPlus$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ObservabilityPlus$Outbound, z.ZodTypeDef, ObservabilityPlus>;
    /** @deprecated use `ObservabilityPlus$Outbound` instead. */
    type Outbound = ObservabilityPlus$Outbound;
}
export declare function observabilityPlusToJSON(observabilityPlus: ObservabilityPlus): string;
export declare function observabilityPlusFromJSON(jsonString: string): SafeParseResult<ObservabilityPlus, SDKValidationError>;
/** @internal */
export declare const UserEventPayload64BlockReason$inboundSchema: z.ZodNativeEnum<typeof UserEventPayload64BlockReason>;
/** @internal */
export declare const UserEventPayload64BlockReason$outboundSchema: z.ZodNativeEnum<typeof UserEventPayload64BlockReason>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload64BlockReason$ {
    /** @deprecated use `UserEventPayload64BlockReason$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly AdminOverride: "admin_override";
        readonly LimitsExceeded: "limits_exceeded";
    }>;
    /** @deprecated use `UserEventPayload64BlockReason$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly AdminOverride: "admin_override";
        readonly LimitsExceeded: "limits_exceeded";
    }>;
}
/** @internal */
export declare const UserEventPayloadDataCache$inboundSchema: z.ZodType<UserEventPayloadDataCache, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayloadDataCache$Outbound = {
    updatedAt: number;
    blockedFrom?: number | undefined;
    blockedUntil?: number | undefined;
    blockReason: string;
};
/** @internal */
export declare const UserEventPayloadDataCache$outboundSchema: z.ZodType<UserEventPayloadDataCache$Outbound, z.ZodTypeDef, UserEventPayloadDataCache>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayloadDataCache$ {
    /** @deprecated use `UserEventPayloadDataCache$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayloadDataCache, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayloadDataCache$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayloadDataCache$Outbound, z.ZodTypeDef, UserEventPayloadDataCache>;
    /** @deprecated use `UserEventPayloadDataCache$Outbound` instead. */
    type Outbound = UserEventPayloadDataCache$Outbound;
}
export declare function userEventPayloadDataCacheToJSON(userEventPayloadDataCache: UserEventPayloadDataCache): string;
export declare function userEventPayloadDataCacheFromJSON(jsonString: string): SafeParseResult<UserEventPayloadDataCache, SDKValidationError>;
/** @internal */
export declare const UserEventPayload64NewOwnerBlockReason$inboundSchema: z.ZodNativeEnum<typeof UserEventPayload64NewOwnerBlockReason>;
/** @internal */
export declare const UserEventPayload64NewOwnerBlockReason$outboundSchema: z.ZodNativeEnum<typeof UserEventPayload64NewOwnerBlockReason>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload64NewOwnerBlockReason$ {
    /** @deprecated use `UserEventPayload64NewOwnerBlockReason$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly AdminOverride: "admin_override";
        readonly LimitsExceeded: "limits_exceeded";
    }>;
    /** @deprecated use `UserEventPayload64NewOwnerBlockReason$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly AdminOverride: "admin_override";
        readonly LimitsExceeded: "limits_exceeded";
    }>;
}
/** @internal */
export declare const PayloadImageOptimizationTransformation$inboundSchema: z.ZodType<PayloadImageOptimizationTransformation, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadImageOptimizationTransformation$Outbound = {
    updatedAt: number;
    blockedFrom?: number | undefined;
    blockedUntil?: number | undefined;
    blockReason: string;
};
/** @internal */
export declare const PayloadImageOptimizationTransformation$outboundSchema: z.ZodType<PayloadImageOptimizationTransformation$Outbound, z.ZodTypeDef, PayloadImageOptimizationTransformation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadImageOptimizationTransformation$ {
    /** @deprecated use `PayloadImageOptimizationTransformation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadImageOptimizationTransformation, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadImageOptimizationTransformation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadImageOptimizationTransformation$Outbound, z.ZodTypeDef, PayloadImageOptimizationTransformation>;
    /** @deprecated use `PayloadImageOptimizationTransformation$Outbound` instead. */
    type Outbound = PayloadImageOptimizationTransformation$Outbound;
}
export declare function payloadImageOptimizationTransformationToJSON(payloadImageOptimizationTransformation: PayloadImageOptimizationTransformation): string;
export declare function payloadImageOptimizationTransformationFromJSON(jsonString: string): SafeParseResult<PayloadImageOptimizationTransformation, SDKValidationError>;
/** @internal */
export declare const UserEventPayload64NewOwnerFeatureBlocksBlockReason$inboundSchema: z.ZodNativeEnum<typeof UserEventPayload64NewOwnerFeatureBlocksBlockReason>;
/** @internal */
export declare const UserEventPayload64NewOwnerFeatureBlocksBlockReason$outboundSchema: z.ZodNativeEnum<typeof UserEventPayload64NewOwnerFeatureBlocksBlockReason>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload64NewOwnerFeatureBlocksBlockReason$ {
    /** @deprecated use `UserEventPayload64NewOwnerFeatureBlocksBlockReason$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly AdminOverride: "admin_override";
        readonly LimitsExceeded: "limits_exceeded";
    }>;
    /** @deprecated use `UserEventPayload64NewOwnerFeatureBlocksBlockReason$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly AdminOverride: "admin_override";
        readonly LimitsExceeded: "limits_exceeded";
    }>;
}
/** @internal */
export declare const PayloadSourceImages$inboundSchema: z.ZodType<PayloadSourceImages, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadSourceImages$Outbound = {
    updatedAt: number;
    blockedFrom?: number | undefined;
    blockedUntil?: number | undefined;
    blockReason: string;
};
/** @internal */
export declare const PayloadSourceImages$outboundSchema: z.ZodType<PayloadSourceImages$Outbound, z.ZodTypeDef, PayloadSourceImages>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadSourceImages$ {
    /** @deprecated use `PayloadSourceImages$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadSourceImages, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadSourceImages$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadSourceImages$Outbound, z.ZodTypeDef, PayloadSourceImages>;
    /** @deprecated use `PayloadSourceImages$Outbound` instead. */
    type Outbound = PayloadSourceImages$Outbound;
}
export declare function payloadSourceImagesToJSON(payloadSourceImages: PayloadSourceImages): string;
export declare function payloadSourceImagesFromJSON(jsonString: string): SafeParseResult<PayloadSourceImages, SDKValidationError>;
/** @internal */
export declare const UserEventPayload64NewOwnerFeatureBlocksBlobBlockReason$inboundSchema: z.ZodNativeEnum<typeof UserEventPayload64NewOwnerFeatureBlocksBlobBlockReason>;
/** @internal */
export declare const UserEventPayload64NewOwnerFeatureBlocksBlobBlockReason$outboundSchema: z.ZodNativeEnum<typeof UserEventPayload64NewOwnerFeatureBlocksBlobBlockReason>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload64NewOwnerFeatureBlocksBlobBlockReason$ {
    /** @deprecated use `UserEventPayload64NewOwnerFeatureBlocksBlobBlockReason$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly AdminOverride: "admin_override";
        readonly LimitsExceeded: "limits_exceeded";
    }>;
    /** @deprecated use `UserEventPayload64NewOwnerFeatureBlocksBlobBlockReason$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly AdminOverride: "admin_override";
        readonly LimitsExceeded: "limits_exceeded";
    }>;
}
/** @internal */
export declare const OverageReason$inboundSchema: z.ZodNativeEnum<typeof OverageReason>;
/** @internal */
export declare const OverageReason$outboundSchema: z.ZodNativeEnum<typeof OverageReason>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OverageReason$ {
    /** @deprecated use `OverageReason$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly AnalyticsUsage: "analyticsUsage";
        readonly Artifacts: "artifacts";
        readonly Bandwidth: "bandwidth";
        readonly BlobTotalAdvancedRequests: "blobTotalAdvancedRequests";
        readonly BlobTotalAvgSizeInBytes: "blobTotalAvgSizeInBytes";
        readonly BlobTotalGetResponseObjectSizeInBytes: "blobTotalGetResponseObjectSizeInBytes";
        readonly BlobTotalSimpleRequests: "blobTotalSimpleRequests";
        readonly ConnectDataTransfer: "connectDataTransfer";
        readonly DataCacheRead: "dataCacheRead";
        readonly DataCacheWrite: "dataCacheWrite";
        readonly EdgeConfigRead: "edgeConfigRead";
        readonly EdgeConfigWrite: "edgeConfigWrite";
        readonly EdgeFunctionExecutionUnits: "edgeFunctionExecutionUnits";
        readonly EdgeMiddlewareInvocations: "edgeMiddlewareInvocations";
        readonly EdgeRequestAdditionalCpuDuration: "edgeRequestAdditionalCpuDuration";
        readonly EdgeRequest: "edgeRequest";
        readonly ElasticConcurrencyBuildSlots: "elasticConcurrencyBuildSlots";
        readonly FastDataTransfer: "fastDataTransfer";
        readonly FastOriginTransfer: "fastOriginTransfer";
        readonly FluidCpuDuration: "fluidCpuDuration";
        readonly FluidDuration: "fluidDuration";
        readonly FunctionDuration: "functionDuration";
        readonly FunctionInvocation: "functionInvocation";
        readonly ImageOptimizationCacheRead: "imageOptimizationCacheRead";
        readonly ImageOptimizationCacheWrite: "imageOptimizationCacheWrite";
        readonly ImageOptimizationTransformation: "imageOptimizationTransformation";
        readonly LogDrainsVolume: "logDrainsVolume";
        readonly MonitoringMetric: "monitoringMetric";
        readonly BlobDataTransfer: "blobDataTransfer";
        readonly ObservabilityEvent: "observabilityEvent";
        readonly OnDemandConcurrencyMinutes: "onDemandConcurrencyMinutes";
        readonly RuntimeCacheRead: "runtimeCacheRead";
        readonly RuntimeCacheWrite: "runtimeCacheWrite";
        readonly ServerlessFunctionExecution: "serverlessFunctionExecution";
        readonly SourceImages: "sourceImages";
        readonly WafOwaspExcessBytes: "wafOwaspExcessBytes";
        readonly WafOwaspRequests: "wafOwaspRequests";
        readonly WafRateLimitRequest: "wafRateLimitRequest";
        readonly WebAnalyticsEvent: "webAnalyticsEvent";
    }>;
    /** @deprecated use `OverageReason$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly AnalyticsUsage: "analyticsUsage";
        readonly Artifacts: "artifacts";
        readonly Bandwidth: "bandwidth";
        readonly BlobTotalAdvancedRequests: "blobTotalAdvancedRequests";
        readonly BlobTotalAvgSizeInBytes: "blobTotalAvgSizeInBytes";
        readonly BlobTotalGetResponseObjectSizeInBytes: "blobTotalGetResponseObjectSizeInBytes";
        readonly BlobTotalSimpleRequests: "blobTotalSimpleRequests";
        readonly ConnectDataTransfer: "connectDataTransfer";
        readonly DataCacheRead: "dataCacheRead";
        readonly DataCacheWrite: "dataCacheWrite";
        readonly EdgeConfigRead: "edgeConfigRead";
        readonly EdgeConfigWrite: "edgeConfigWrite";
        readonly EdgeFunctionExecutionUnits: "edgeFunctionExecutionUnits";
        readonly EdgeMiddlewareInvocations: "edgeMiddlewareInvocations";
        readonly EdgeRequestAdditionalCpuDuration: "edgeRequestAdditionalCpuDuration";
        readonly EdgeRequest: "edgeRequest";
        readonly ElasticConcurrencyBuildSlots: "elasticConcurrencyBuildSlots";
        readonly FastDataTransfer: "fastDataTransfer";
        readonly FastOriginTransfer: "fastOriginTransfer";
        readonly FluidCpuDuration: "fluidCpuDuration";
        readonly FluidDuration: "fluidDuration";
        readonly FunctionDuration: "functionDuration";
        readonly FunctionInvocation: "functionInvocation";
        readonly ImageOptimizationCacheRead: "imageOptimizationCacheRead";
        readonly ImageOptimizationCacheWrite: "imageOptimizationCacheWrite";
        readonly ImageOptimizationTransformation: "imageOptimizationTransformation";
        readonly LogDrainsVolume: "logDrainsVolume";
        readonly MonitoringMetric: "monitoringMetric";
        readonly BlobDataTransfer: "blobDataTransfer";
        readonly ObservabilityEvent: "observabilityEvent";
        readonly OnDemandConcurrencyMinutes: "onDemandConcurrencyMinutes";
        readonly RuntimeCacheRead: "runtimeCacheRead";
        readonly RuntimeCacheWrite: "runtimeCacheWrite";
        readonly ServerlessFunctionExecution: "serverlessFunctionExecution";
        readonly SourceImages: "sourceImages";
        readonly WafOwaspExcessBytes: "wafOwaspExcessBytes";
        readonly WafOwaspRequests: "wafOwaspRequests";
        readonly WafRateLimitRequest: "wafRateLimitRequest";
        readonly WebAnalyticsEvent: "webAnalyticsEvent";
    }>;
}
/** @internal */
export declare const BlobT$inboundSchema: z.ZodType<BlobT, z.ZodTypeDef, unknown>;
/** @internal */
export type BlobT$Outbound = {
    updatedAt: number;
    blockedFrom?: number | undefined;
    blockedUntil?: number | undefined;
    blockReason: string;
    overageReason: string;
};
/** @internal */
export declare const BlobT$outboundSchema: z.ZodType<BlobT$Outbound, z.ZodTypeDef, BlobT>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BlobT$ {
    /** @deprecated use `BlobT$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BlobT, z.ZodTypeDef, unknown>;
    /** @deprecated use `BlobT$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BlobT$Outbound, z.ZodTypeDef, BlobT>;
    /** @deprecated use `BlobT$Outbound` instead. */
    type Outbound = BlobT$Outbound;
}
export declare function blobToJSON(blobT: BlobT): string;
export declare function blobFromJSON(jsonString: string): SafeParseResult<BlobT, SDKValidationError>;
/** @internal */
export declare const UserEventPayload64NewOwnerFeatureBlocksPostgresBlockReason$inboundSchema: z.ZodNativeEnum<typeof UserEventPayload64NewOwnerFeatureBlocksPostgresBlockReason>;
/** @internal */
export declare const UserEventPayload64NewOwnerFeatureBlocksPostgresBlockReason$outboundSchema: z.ZodNativeEnum<typeof UserEventPayload64NewOwnerFeatureBlocksPostgresBlockReason>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload64NewOwnerFeatureBlocksPostgresBlockReason$ {
    /** @deprecated use `UserEventPayload64NewOwnerFeatureBlocksPostgresBlockReason$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly AdminOverride: "admin_override";
        readonly LimitsExceeded: "limits_exceeded";
    }>;
    /** @deprecated use `UserEventPayload64NewOwnerFeatureBlocksPostgresBlockReason$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly AdminOverride: "admin_override";
        readonly LimitsExceeded: "limits_exceeded";
    }>;
}
/** @internal */
export declare const PayloadOverageReason$inboundSchema: z.ZodNativeEnum<typeof PayloadOverageReason>;
/** @internal */
export declare const PayloadOverageReason$outboundSchema: z.ZodNativeEnum<typeof PayloadOverageReason>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadOverageReason$ {
    /** @deprecated use `PayloadOverageReason$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly AnalyticsUsage: "analyticsUsage";
        readonly Artifacts: "artifacts";
        readonly Bandwidth: "bandwidth";
        readonly BlobTotalAdvancedRequests: "blobTotalAdvancedRequests";
        readonly BlobTotalAvgSizeInBytes: "blobTotalAvgSizeInBytes";
        readonly BlobTotalGetResponseObjectSizeInBytes: "blobTotalGetResponseObjectSizeInBytes";
        readonly BlobTotalSimpleRequests: "blobTotalSimpleRequests";
        readonly ConnectDataTransfer: "connectDataTransfer";
        readonly DataCacheRead: "dataCacheRead";
        readonly DataCacheWrite: "dataCacheWrite";
        readonly EdgeConfigRead: "edgeConfigRead";
        readonly EdgeConfigWrite: "edgeConfigWrite";
        readonly EdgeFunctionExecutionUnits: "edgeFunctionExecutionUnits";
        readonly EdgeMiddlewareInvocations: "edgeMiddlewareInvocations";
        readonly EdgeRequestAdditionalCpuDuration: "edgeRequestAdditionalCpuDuration";
        readonly EdgeRequest: "edgeRequest";
        readonly ElasticConcurrencyBuildSlots: "elasticConcurrencyBuildSlots";
        readonly FastDataTransfer: "fastDataTransfer";
        readonly FastOriginTransfer: "fastOriginTransfer";
        readonly FluidCpuDuration: "fluidCpuDuration";
        readonly FluidDuration: "fluidDuration";
        readonly FunctionDuration: "functionDuration";
        readonly FunctionInvocation: "functionInvocation";
        readonly ImageOptimizationCacheRead: "imageOptimizationCacheRead";
        readonly ImageOptimizationCacheWrite: "imageOptimizationCacheWrite";
        readonly ImageOptimizationTransformation: "imageOptimizationTransformation";
        readonly LogDrainsVolume: "logDrainsVolume";
        readonly MonitoringMetric: "monitoringMetric";
        readonly BlobDataTransfer: "blobDataTransfer";
        readonly ObservabilityEvent: "observabilityEvent";
        readonly OnDemandConcurrencyMinutes: "onDemandConcurrencyMinutes";
        readonly RuntimeCacheRead: "runtimeCacheRead";
        readonly RuntimeCacheWrite: "runtimeCacheWrite";
        readonly ServerlessFunctionExecution: "serverlessFunctionExecution";
        readonly SourceImages: "sourceImages";
        readonly WafOwaspExcessBytes: "wafOwaspExcessBytes";
        readonly WafOwaspRequests: "wafOwaspRequests";
        readonly WafRateLimitRequest: "wafRateLimitRequest";
        readonly WebAnalyticsEvent: "webAnalyticsEvent";
    }>;
    /** @deprecated use `PayloadOverageReason$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly AnalyticsUsage: "analyticsUsage";
        readonly Artifacts: "artifacts";
        readonly Bandwidth: "bandwidth";
        readonly BlobTotalAdvancedRequests: "blobTotalAdvancedRequests";
        readonly BlobTotalAvgSizeInBytes: "blobTotalAvgSizeInBytes";
        readonly BlobTotalGetResponseObjectSizeInBytes: "blobTotalGetResponseObjectSizeInBytes";
        readonly BlobTotalSimpleRequests: "blobTotalSimpleRequests";
        readonly ConnectDataTransfer: "connectDataTransfer";
        readonly DataCacheRead: "dataCacheRead";
        readonly DataCacheWrite: "dataCacheWrite";
        readonly EdgeConfigRead: "edgeConfigRead";
        readonly EdgeConfigWrite: "edgeConfigWrite";
        readonly EdgeFunctionExecutionUnits: "edgeFunctionExecutionUnits";
        readonly EdgeMiddlewareInvocations: "edgeMiddlewareInvocations";
        readonly EdgeRequestAdditionalCpuDuration: "edgeRequestAdditionalCpuDuration";
        readonly EdgeRequest: "edgeRequest";
        readonly ElasticConcurrencyBuildSlots: "elasticConcurrencyBuildSlots";
        readonly FastDataTransfer: "fastDataTransfer";
        readonly FastOriginTransfer: "fastOriginTransfer";
        readonly FluidCpuDuration: "fluidCpuDuration";
        readonly FluidDuration: "fluidDuration";
        readonly FunctionDuration: "functionDuration";
        readonly FunctionInvocation: "functionInvocation";
        readonly ImageOptimizationCacheRead: "imageOptimizationCacheRead";
        readonly ImageOptimizationCacheWrite: "imageOptimizationCacheWrite";
        readonly ImageOptimizationTransformation: "imageOptimizationTransformation";
        readonly LogDrainsVolume: "logDrainsVolume";
        readonly MonitoringMetric: "monitoringMetric";
        readonly BlobDataTransfer: "blobDataTransfer";
        readonly ObservabilityEvent: "observabilityEvent";
        readonly OnDemandConcurrencyMinutes: "onDemandConcurrencyMinutes";
        readonly RuntimeCacheRead: "runtimeCacheRead";
        readonly RuntimeCacheWrite: "runtimeCacheWrite";
        readonly ServerlessFunctionExecution: "serverlessFunctionExecution";
        readonly SourceImages: "sourceImages";
        readonly WafOwaspExcessBytes: "wafOwaspExcessBytes";
        readonly WafOwaspRequests: "wafOwaspRequests";
        readonly WafRateLimitRequest: "wafRateLimitRequest";
        readonly WebAnalyticsEvent: "webAnalyticsEvent";
    }>;
}
/** @internal */
export declare const Postgres$inboundSchema: z.ZodType<Postgres, z.ZodTypeDef, unknown>;
/** @internal */
export type Postgres$Outbound = {
    updatedAt: number;
    blockedFrom?: number | undefined;
    blockedUntil?: number | undefined;
    blockReason: string;
    overageReason: string;
};
/** @internal */
export declare const Postgres$outboundSchema: z.ZodType<Postgres$Outbound, z.ZodTypeDef, Postgres>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Postgres$ {
    /** @deprecated use `Postgres$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Postgres, z.ZodTypeDef, unknown>;
    /** @deprecated use `Postgres$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Postgres$Outbound, z.ZodTypeDef, Postgres>;
    /** @deprecated use `Postgres$Outbound` instead. */
    type Outbound = Postgres$Outbound;
}
export declare function postgresToJSON(postgres: Postgres): string;
export declare function postgresFromJSON(jsonString: string): SafeParseResult<Postgres, SDKValidationError>;
/** @internal */
export declare const UserEventPayload64NewOwnerFeatureBlocksRedisBlockReason$inboundSchema: z.ZodNativeEnum<typeof UserEventPayload64NewOwnerFeatureBlocksRedisBlockReason>;
/** @internal */
export declare const UserEventPayload64NewOwnerFeatureBlocksRedisBlockReason$outboundSchema: z.ZodNativeEnum<typeof UserEventPayload64NewOwnerFeatureBlocksRedisBlockReason>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload64NewOwnerFeatureBlocksRedisBlockReason$ {
    /** @deprecated use `UserEventPayload64NewOwnerFeatureBlocksRedisBlockReason$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly AdminOverride: "admin_override";
        readonly LimitsExceeded: "limits_exceeded";
    }>;
    /** @deprecated use `UserEventPayload64NewOwnerFeatureBlocksRedisBlockReason$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly AdminOverride: "admin_override";
        readonly LimitsExceeded: "limits_exceeded";
    }>;
}
/** @internal */
export declare const UserEventPayloadOverageReason$inboundSchema: z.ZodNativeEnum<typeof UserEventPayloadOverageReason>;
/** @internal */
export declare const UserEventPayloadOverageReason$outboundSchema: z.ZodNativeEnum<typeof UserEventPayloadOverageReason>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayloadOverageReason$ {
    /** @deprecated use `UserEventPayloadOverageReason$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly AnalyticsUsage: "analyticsUsage";
        readonly Artifacts: "artifacts";
        readonly Bandwidth: "bandwidth";
        readonly BlobTotalAdvancedRequests: "blobTotalAdvancedRequests";
        readonly BlobTotalAvgSizeInBytes: "blobTotalAvgSizeInBytes";
        readonly BlobTotalGetResponseObjectSizeInBytes: "blobTotalGetResponseObjectSizeInBytes";
        readonly BlobTotalSimpleRequests: "blobTotalSimpleRequests";
        readonly ConnectDataTransfer: "connectDataTransfer";
        readonly DataCacheRead: "dataCacheRead";
        readonly DataCacheWrite: "dataCacheWrite";
        readonly EdgeConfigRead: "edgeConfigRead";
        readonly EdgeConfigWrite: "edgeConfigWrite";
        readonly EdgeFunctionExecutionUnits: "edgeFunctionExecutionUnits";
        readonly EdgeMiddlewareInvocations: "edgeMiddlewareInvocations";
        readonly EdgeRequestAdditionalCpuDuration: "edgeRequestAdditionalCpuDuration";
        readonly EdgeRequest: "edgeRequest";
        readonly ElasticConcurrencyBuildSlots: "elasticConcurrencyBuildSlots";
        readonly FastDataTransfer: "fastDataTransfer";
        readonly FastOriginTransfer: "fastOriginTransfer";
        readonly FluidCpuDuration: "fluidCpuDuration";
        readonly FluidDuration: "fluidDuration";
        readonly FunctionDuration: "functionDuration";
        readonly FunctionInvocation: "functionInvocation";
        readonly ImageOptimizationCacheRead: "imageOptimizationCacheRead";
        readonly ImageOptimizationCacheWrite: "imageOptimizationCacheWrite";
        readonly ImageOptimizationTransformation: "imageOptimizationTransformation";
        readonly LogDrainsVolume: "logDrainsVolume";
        readonly MonitoringMetric: "monitoringMetric";
        readonly BlobDataTransfer: "blobDataTransfer";
        readonly ObservabilityEvent: "observabilityEvent";
        readonly OnDemandConcurrencyMinutes: "onDemandConcurrencyMinutes";
        readonly RuntimeCacheRead: "runtimeCacheRead";
        readonly RuntimeCacheWrite: "runtimeCacheWrite";
        readonly ServerlessFunctionExecution: "serverlessFunctionExecution";
        readonly SourceImages: "sourceImages";
        readonly WafOwaspExcessBytes: "wafOwaspExcessBytes";
        readonly WafOwaspRequests: "wafOwaspRequests";
        readonly WafRateLimitRequest: "wafRateLimitRequest";
        readonly WebAnalyticsEvent: "webAnalyticsEvent";
    }>;
    /** @deprecated use `UserEventPayloadOverageReason$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly AnalyticsUsage: "analyticsUsage";
        readonly Artifacts: "artifacts";
        readonly Bandwidth: "bandwidth";
        readonly BlobTotalAdvancedRequests: "blobTotalAdvancedRequests";
        readonly BlobTotalAvgSizeInBytes: "blobTotalAvgSizeInBytes";
        readonly BlobTotalGetResponseObjectSizeInBytes: "blobTotalGetResponseObjectSizeInBytes";
        readonly BlobTotalSimpleRequests: "blobTotalSimpleRequests";
        readonly ConnectDataTransfer: "connectDataTransfer";
        readonly DataCacheRead: "dataCacheRead";
        readonly DataCacheWrite: "dataCacheWrite";
        readonly EdgeConfigRead: "edgeConfigRead";
        readonly EdgeConfigWrite: "edgeConfigWrite";
        readonly EdgeFunctionExecutionUnits: "edgeFunctionExecutionUnits";
        readonly EdgeMiddlewareInvocations: "edgeMiddlewareInvocations";
        readonly EdgeRequestAdditionalCpuDuration: "edgeRequestAdditionalCpuDuration";
        readonly EdgeRequest: "edgeRequest";
        readonly ElasticConcurrencyBuildSlots: "elasticConcurrencyBuildSlots";
        readonly FastDataTransfer: "fastDataTransfer";
        readonly FastOriginTransfer: "fastOriginTransfer";
        readonly FluidCpuDuration: "fluidCpuDuration";
        readonly FluidDuration: "fluidDuration";
        readonly FunctionDuration: "functionDuration";
        readonly FunctionInvocation: "functionInvocation";
        readonly ImageOptimizationCacheRead: "imageOptimizationCacheRead";
        readonly ImageOptimizationCacheWrite: "imageOptimizationCacheWrite";
        readonly ImageOptimizationTransformation: "imageOptimizationTransformation";
        readonly LogDrainsVolume: "logDrainsVolume";
        readonly MonitoringMetric: "monitoringMetric";
        readonly BlobDataTransfer: "blobDataTransfer";
        readonly ObservabilityEvent: "observabilityEvent";
        readonly OnDemandConcurrencyMinutes: "onDemandConcurrencyMinutes";
        readonly RuntimeCacheRead: "runtimeCacheRead";
        readonly RuntimeCacheWrite: "runtimeCacheWrite";
        readonly ServerlessFunctionExecution: "serverlessFunctionExecution";
        readonly SourceImages: "sourceImages";
        readonly WafOwaspExcessBytes: "wafOwaspExcessBytes";
        readonly WafOwaspRequests: "wafOwaspRequests";
        readonly WafRateLimitRequest: "wafRateLimitRequest";
        readonly WebAnalyticsEvent: "webAnalyticsEvent";
    }>;
}
/** @internal */
export declare const Redis$inboundSchema: z.ZodType<Redis, z.ZodTypeDef, unknown>;
/** @internal */
export type Redis$Outbound = {
    updatedAt: number;
    blockedFrom?: number | undefined;
    blockedUntil?: number | undefined;
    blockReason: string;
    overageReason: string;
};
/** @internal */
export declare const Redis$outboundSchema: z.ZodType<Redis$Outbound, z.ZodTypeDef, Redis>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Redis$ {
    /** @deprecated use `Redis$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Redis, z.ZodTypeDef, unknown>;
    /** @deprecated use `Redis$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Redis$Outbound, z.ZodTypeDef, Redis>;
    /** @deprecated use `Redis$Outbound` instead. */
    type Outbound = Redis$Outbound;
}
export declare function redisToJSON(redis: Redis): string;
export declare function redisFromJSON(jsonString: string): SafeParseResult<Redis, SDKValidationError>;
/** @internal */
export declare const PayloadFeatureBlocks$inboundSchema: z.ZodType<PayloadFeatureBlocks, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadFeatureBlocks$Outbound = {
    webAnalytics?: PayloadWebAnalytics$Outbound | undefined;
    monitoring?: Monitoring$Outbound | undefined;
    observabilityPlus?: ObservabilityPlus$Outbound | undefined;
    dataCache?: UserEventPayloadDataCache$Outbound | undefined;
    imageOptimizationTransformation?: PayloadImageOptimizationTransformation$Outbound | undefined;
    sourceImages?: PayloadSourceImages$Outbound | undefined;
    blob?: BlobT$Outbound | undefined;
    postgres?: Postgres$Outbound | undefined;
    redis?: Redis$Outbound | undefined;
};
/** @internal */
export declare const PayloadFeatureBlocks$outboundSchema: z.ZodType<PayloadFeatureBlocks$Outbound, z.ZodTypeDef, PayloadFeatureBlocks>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadFeatureBlocks$ {
    /** @deprecated use `PayloadFeatureBlocks$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadFeatureBlocks, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadFeatureBlocks$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadFeatureBlocks$Outbound, z.ZodTypeDef, PayloadFeatureBlocks>;
    /** @deprecated use `PayloadFeatureBlocks$Outbound` instead. */
    type Outbound = PayloadFeatureBlocks$Outbound;
}
export declare function payloadFeatureBlocksToJSON(payloadFeatureBlocks: PayloadFeatureBlocks): string;
export declare function payloadFeatureBlocksFromJSON(jsonString: string): SafeParseResult<PayloadFeatureBlocks, SDKValidationError>;
/** @internal */
export declare const Version$inboundSchema: z.ZodNativeEnum<typeof Version>;
/** @internal */
export declare const Version$outboundSchema: z.ZodNativeEnum<typeof Version>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Version$ {
    /** @deprecated use `Version$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Northstar: "northstar";
    }>;
    /** @deprecated use `Version$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Northstar: "northstar";
    }>;
}
/** @internal */
export declare const NorthstarMigration$inboundSchema: z.ZodType<NorthstarMigration, z.ZodTypeDef, unknown>;
/** @internal */
export type NorthstarMigration$Outbound = {
    teamId: string;
    projects: number;
    stores: number;
    integrationConfigurations: number;
    integrationClients: number;
    startTime: number;
    endTime: number;
};
/** @internal */
export declare const NorthstarMigration$outboundSchema: z.ZodType<NorthstarMigration$Outbound, z.ZodTypeDef, NorthstarMigration>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NorthstarMigration$ {
    /** @deprecated use `NorthstarMigration$inboundSchema` instead. */
    const inboundSchema: z.ZodType<NorthstarMigration, z.ZodTypeDef, unknown>;
    /** @deprecated use `NorthstarMigration$outboundSchema` instead. */
    const outboundSchema: z.ZodType<NorthstarMigration$Outbound, z.ZodTypeDef, NorthstarMigration>;
    /** @deprecated use `NorthstarMigration$Outbound` instead. */
    type Outbound = NorthstarMigration$Outbound;
}
export declare function northstarMigrationToJSON(northstarMigration: NorthstarMigration): string;
export declare function northstarMigrationFromJSON(jsonString: string): SafeParseResult<NorthstarMigration, SDKValidationError>;
/** @internal */
export declare const Totp$inboundSchema: z.ZodType<Totp, z.ZodTypeDef, unknown>;
/** @internal */
export type Totp$Outbound = {
    secret: string;
    createdAt: number;
};
/** @internal */
export declare const Totp$outboundSchema: z.ZodType<Totp$Outbound, z.ZodTypeDef, Totp>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Totp$ {
    /** @deprecated use `Totp$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Totp, z.ZodTypeDef, unknown>;
    /** @deprecated use `Totp$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Totp$Outbound, z.ZodTypeDef, Totp>;
    /** @deprecated use `Totp$Outbound` instead. */
    type Outbound = Totp$Outbound;
}
export declare function totpToJSON(totp: Totp): string;
export declare function totpFromJSON(jsonString: string): SafeParseResult<Totp, SDKValidationError>;
/** @internal */
export declare const MfaConfiguration$inboundSchema: z.ZodType<MfaConfiguration, z.ZodTypeDef, unknown>;
/** @internal */
export type MfaConfiguration$Outbound = {
    enabled: boolean;
    enabledAt?: number | undefined;
    recoveryCodes: Array<string>;
    totp?: Totp$Outbound | undefined;
};
/** @internal */
export declare const MfaConfiguration$outboundSchema: z.ZodType<MfaConfiguration$Outbound, z.ZodTypeDef, MfaConfiguration>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MfaConfiguration$ {
    /** @deprecated use `MfaConfiguration$inboundSchema` instead. */
    const inboundSchema: z.ZodType<MfaConfiguration, z.ZodTypeDef, unknown>;
    /** @deprecated use `MfaConfiguration$outboundSchema` instead. */
    const outboundSchema: z.ZodType<MfaConfiguration$Outbound, z.ZodTypeDef, MfaConfiguration>;
    /** @deprecated use `MfaConfiguration$Outbound` instead. */
    type Outbound = MfaConfiguration$Outbound;
}
export declare function mfaConfigurationToJSON(mfaConfiguration: MfaConfiguration): string;
export declare function mfaConfigurationFromJSON(jsonString: string): SafeParseResult<MfaConfiguration, SDKValidationError>;
/** @internal */
export declare const NewOwner$inboundSchema: z.ZodType<NewOwner, z.ZodTypeDef, unknown>;
/** @internal */
export type NewOwner$Outbound = {
    abuse?: Abuse$Outbound | undefined;
    acceptanceState?: string | undefined;
    acceptedAt?: number | undefined;
    avatar?: string | undefined;
    billing: PayloadBilling$Outbound;
    blocked: number | null;
    blockReason?: string | undefined;
    created?: number | undefined;
    createdAt: number;
    credentials?: Array<Credentials2$Outbound | Credentials1$Outbound> | undefined;
    customerId?: string | null | undefined;
    orbCustomerId?: string | null | undefined;
    dataCache?: PayloadDataCache$Outbound | undefined;
    deletedAt?: number | null | undefined;
    deploymentSecret: string;
    dismissedTeams?: Array<string> | undefined;
    dismissedToasts?: Array<PayloadDismissedToasts$Outbound> | undefined;
    favoriteProjectsAndSpaces?: Array<PayloadFavoriteProjectsAndSpaces$Outbound> | undefined;
    email: string;
    id: string;
    importFlowGitNamespace?: string | number | null | undefined;
    importFlowGitNamespaceId?: string | number | null | undefined;
    importFlowGitProvider?: string | null | undefined;
    preferredScopesAndGitNamespaces?: Array<PayloadPreferredScopesAndGitNamespaces$Outbound> | undefined;
    isDomainReseller?: boolean | undefined;
    isZeitPub?: boolean | undefined;
    maxActiveSlots?: number | undefined;
    name?: string | undefined;
    phoneNumber?: string | undefined;
    platformVersion: number | null;
    preventAutoBlocking?: number | boolean | undefined;
    projectDomainsLimit?: number | undefined;
    remoteCaching?: UserEventPayloadRemoteCaching$Outbound | undefined;
    removedAliasesAt?: number | undefined;
    removedBillingSubscriptionAt?: number | undefined;
    removedConfigurationsAt?: number | undefined;
    removedDeploymentsAt?: number | undefined;
    removedDomiansAt?: number | undefined;
    removedEventsAt?: number | undefined;
    removedProjectsAt?: number | undefined;
    removedSecretsAt?: number | undefined;
    removedSharedEnvVarsAt?: number | undefined;
    removedEdgeConfigsAt?: number | undefined;
    resourceConfig?: PayloadResourceConfig$Outbound | undefined;
    resourceLimits?: {
        [k: string]: ResourceLimits$Outbound;
    } | undefined;
    activeDashboardViews?: Array<PayloadActiveDashboardViews$Outbound> | undefined;
    secondaryEmails?: Array<SecondaryEmails$Outbound> | undefined;
    emailNotifications?: EmailNotifications$Outbound | undefined;
    siftScore?: number | undefined;
    siftScores?: {
        [k: string]: SiftScores$Outbound;
    } | undefined;
    siftRoute?: SiftRoute$Outbound | undefined;
    sfdcId?: string | undefined;
    softBlock?: PayloadSoftBlock$Outbound | null | undefined;
    stagingPrefix: string;
    sysToken: string;
    teams?: Array<Teams$Outbound> | undefined;
    trialTeamIds?: Array<string> | undefined;
    maxTrials?: number | undefined;
    trialTeamId?: string | undefined;
    type: string;
    usageAlerts?: UsageAlerts$Outbound | null | undefined;
    overageUsageAlerts?: OverageUsageAlerts$Outbound | undefined;
    overageMetadata?: OverageMetadata$Outbound | undefined;
    username: string;
    updatedAt: number;
    enablePreviewFeedback?: string | undefined;
    featureBlocks?: PayloadFeatureBlocks$Outbound | undefined;
    defaultTeamId?: string | undefined;
    version: string;
    northstarMigration?: NorthstarMigration$Outbound | undefined;
    opportunityId?: string | undefined;
    mfaConfiguration?: MfaConfiguration$Outbound | undefined;
};
/** @internal */
export declare const NewOwner$outboundSchema: z.ZodType<NewOwner$Outbound, z.ZodTypeDef, NewOwner>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NewOwner$ {
    /** @deprecated use `NewOwner$inboundSchema` instead. */
    const inboundSchema: z.ZodType<NewOwner, z.ZodTypeDef, unknown>;
    /** @deprecated use `NewOwner$outboundSchema` instead. */
    const outboundSchema: z.ZodType<NewOwner$Outbound, z.ZodTypeDef, NewOwner>;
    /** @deprecated use `NewOwner$Outbound` instead. */
    type Outbound = NewOwner$Outbound;
}
export declare function newOwnerToJSON(newOwner: NewOwner): string;
export declare function newOwnerFromJSON(jsonString: string): SafeParseResult<NewOwner, SDKValidationError>;
/** @internal */
export declare const SixtyFour$inboundSchema: z.ZodType<SixtyFour, z.ZodTypeDef, unknown>;
/** @internal */
export type SixtyFour$Outbound = {
    userId: string;
    integrationId: string;
    configurationId: string;
    integrationSlug: string;
    integrationName?: string | undefined;
    newOwner: NewOwner$Outbound | null;
};
/** @internal */
export declare const SixtyFour$outboundSchema: z.ZodType<SixtyFour$Outbound, z.ZodTypeDef, SixtyFour>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SixtyFour$ {
    /** @deprecated use `SixtyFour$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SixtyFour, z.ZodTypeDef, unknown>;
    /** @deprecated use `SixtyFour$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SixtyFour$Outbound, z.ZodTypeDef, SixtyFour>;
    /** @deprecated use `SixtyFour$Outbound` instead. */
    type Outbound = SixtyFour$Outbound;
}
export declare function sixtyFourToJSON(sixtyFour: SixtyFour): string;
export declare function sixtyFourFromJSON(jsonString: string): SafeParseResult<SixtyFour, SDKValidationError>;
/** @internal */
export declare const SixtyThree$inboundSchema: z.ZodType<SixtyThree, z.ZodTypeDef, unknown>;
/** @internal */
export type SixtyThree$Outbound = {
    integrationId: string;
    integrationSlug: string;
    integrationName: string;
};
/** @internal */
export declare const SixtyThree$outboundSchema: z.ZodType<SixtyThree$Outbound, z.ZodTypeDef, SixtyThree>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SixtyThree$ {
    /** @deprecated use `SixtyThree$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SixtyThree, z.ZodTypeDef, unknown>;
    /** @deprecated use `SixtyThree$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SixtyThree$Outbound, z.ZodTypeDef, SixtyThree>;
    /** @deprecated use `SixtyThree$Outbound` instead. */
    type Outbound = SixtyThree$Outbound;
}
export declare function sixtyThreeToJSON(sixtyThree: SixtyThree): string;
export declare function sixtyThreeFromJSON(jsonString: string): SafeParseResult<SixtyThree, SDKValidationError>;
/** @internal */
export declare const SixtyTwo$inboundSchema: z.ZodType<SixtyTwo, z.ZodTypeDef, unknown>;
/** @internal */
export type SixtyTwo$Outbound = {
    projectId: string;
    prevAttackModeEnabled?: boolean | undefined;
    prevAttackModeActiveUntil?: number | null | undefined;
    attackModeEnabled: boolean;
    attackModeActiveUntil?: number | null | undefined;
};
/** @internal */
export declare const SixtyTwo$outboundSchema: z.ZodType<SixtyTwo$Outbound, z.ZodTypeDef, SixtyTwo>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SixtyTwo$ {
    /** @deprecated use `SixtyTwo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SixtyTwo, z.ZodTypeDef, unknown>;
    /** @deprecated use `SixtyTwo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SixtyTwo$Outbound, z.ZodTypeDef, SixtyTwo>;
    /** @deprecated use `SixtyTwo$Outbound` instead. */
    type Outbound = SixtyTwo$Outbound;
}
export declare function sixtyTwoToJSON(sixtyTwo: SixtyTwo): string;
export declare function sixtyTwoFromJSON(jsonString: string): SafeParseResult<SixtyTwo, SDKValidationError>;
/** @internal */
export declare const UserEventPayload61Action$inboundSchema: z.ZodNativeEnum<typeof UserEventPayload61Action>;
/** @internal */
export declare const UserEventPayload61Action$outboundSchema: z.ZodNativeEnum<typeof UserEventPayload61Action>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload61Action$ {
    /** @deprecated use `UserEventPayload61Action$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Log: "log";
        readonly Challenge: "challenge";
        readonly Deny: "deny";
    }>;
    /** @deprecated use `UserEventPayload61Action$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Log: "log";
        readonly Challenge: "challenge";
        readonly Deny: "deny";
    }>;
}
/** @internal */
export declare const RuleGroups$inboundSchema: z.ZodType<RuleGroups, z.ZodTypeDef, unknown>;
/** @internal */
export type RuleGroups$Outbound = {
    active: boolean;
    action?: string | undefined;
};
/** @internal */
export declare const RuleGroups$outboundSchema: z.ZodType<RuleGroups$Outbound, z.ZodTypeDef, RuleGroups>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RuleGroups$ {
    /** @deprecated use `RuleGroups$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RuleGroups, z.ZodTypeDef, unknown>;
    /** @deprecated use `RuleGroups$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RuleGroups$Outbound, z.ZodTypeDef, RuleGroups>;
    /** @deprecated use `RuleGroups$Outbound` instead. */
    type Outbound = RuleGroups$Outbound;
}
export declare function ruleGroupsToJSON(ruleGroups: RuleGroups): string;
export declare function ruleGroupsFromJSON(jsonString: string): SafeParseResult<RuleGroups, SDKValidationError>;
/** @internal */
export declare const SixtyOne$inboundSchema: z.ZodType<SixtyOne, z.ZodTypeDef, unknown>;
/** @internal */
export type SixtyOne$Outbound = {
    projectId: string;
    rulesetName: string;
    ruleGroups: {
        [k: string]: RuleGroups$Outbound;
    };
};
/** @internal */
export declare const SixtyOne$outboundSchema: z.ZodType<SixtyOne$Outbound, z.ZodTypeDef, SixtyOne>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SixtyOne$ {
    /** @deprecated use `SixtyOne$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SixtyOne, z.ZodTypeDef, unknown>;
    /** @deprecated use `SixtyOne$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SixtyOne$Outbound, z.ZodTypeDef, SixtyOne>;
    /** @deprecated use `SixtyOne$Outbound` instead. */
    type Outbound = SixtyOne$Outbound;
}
export declare function sixtyOneToJSON(sixtyOne: SixtyOne): string;
export declare function sixtyOneFromJSON(jsonString: string): SafeParseResult<SixtyOne, SDKValidationError>;
/** @internal */
export declare const UserEventPayloadAction$inboundSchema: z.ZodNativeEnum<typeof UserEventPayloadAction>;
/** @internal */
export declare const UserEventPayloadAction$outboundSchema: z.ZodNativeEnum<typeof UserEventPayloadAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayloadAction$ {
    /** @deprecated use `UserEventPayloadAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Log: "log";
        readonly Challenge: "challenge";
        readonly Deny: "deny";
    }>;
    /** @deprecated use `UserEventPayloadAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Log: "log";
        readonly Challenge: "challenge";
        readonly Deny: "deny";
    }>;
}
/** @internal */
export declare const Sixty$inboundSchema: z.ZodType<Sixty, z.ZodTypeDef, unknown>;
/** @internal */
export type Sixty$Outbound = {
    projectId: string;
    rulesetName: string;
    active: boolean;
    action?: string | undefined;
};
/** @internal */
export declare const Sixty$outboundSchema: z.ZodType<Sixty$Outbound, z.ZodTypeDef, Sixty>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Sixty$ {
    /** @deprecated use `Sixty$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Sixty, z.ZodTypeDef, unknown>;
    /** @deprecated use `Sixty$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Sixty$Outbound, z.ZodTypeDef, Sixty>;
    /** @deprecated use `Sixty$Outbound` instead. */
    type Outbound = Sixty$Outbound;
}
export declare function sixtyToJSON(sixty: Sixty): string;
export declare function sixtyFromJSON(jsonString: string): SafeParseResult<Sixty, SDKValidationError>;
/** @internal */
export declare const FiftyNine$inboundSchema: z.ZodType<FiftyNine, z.ZodTypeDef, unknown>;
/** @internal */
export type FiftyNine$Outbound = {
    projectId: string;
    scope: string;
    source: string;
};
/** @internal */
export declare const FiftyNine$outboundSchema: z.ZodType<FiftyNine$Outbound, z.ZodTypeDef, FiftyNine>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FiftyNine$ {
    /** @deprecated use `FiftyNine$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FiftyNine, z.ZodTypeDef, unknown>;
    /** @deprecated use `FiftyNine$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FiftyNine$Outbound, z.ZodTypeDef, FiftyNine>;
    /** @deprecated use `FiftyNine$Outbound` instead. */
    type Outbound = FiftyNine$Outbound;
}
export declare function fiftyNineToJSON(fiftyNine: FiftyNine): string;
export declare function fiftyNineFromJSON(jsonString: string): SafeParseResult<FiftyNine, SDKValidationError>;
/** @internal */
export declare const ConfigChanges$inboundSchema: z.ZodType<ConfigChanges, z.ZodTypeDef, unknown>;
/** @internal */
export type ConfigChanges$Outbound = {};
/** @internal */
export declare const ConfigChanges$outboundSchema: z.ZodType<ConfigChanges$Outbound, z.ZodTypeDef, ConfigChanges>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ConfigChanges$ {
    /** @deprecated use `ConfigChanges$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ConfigChanges, z.ZodTypeDef, unknown>;
    /** @deprecated use `ConfigChanges$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ConfigChanges$Outbound, z.ZodTypeDef, ConfigChanges>;
    /** @deprecated use `ConfigChanges$Outbound` instead. */
    type Outbound = ConfigChanges$Outbound;
}
export declare function configChangesToJSON(configChanges: ConfigChanges): string;
export declare function configChangesFromJSON(jsonString: string): SafeParseResult<ConfigChanges, SDKValidationError>;
/** @internal */
export declare const FiftyEight$inboundSchema: z.ZodType<FiftyEight, z.ZodTypeDef, unknown>;
/** @internal */
export type FiftyEight$Outbound = {
    projectId: string;
    restore: boolean;
    configVersion: number;
    configChangeCount: number;
    configChanges: Array<ConfigChanges$Outbound>;
};
/** @internal */
export declare const FiftyEight$outboundSchema: z.ZodType<FiftyEight$Outbound, z.ZodTypeDef, FiftyEight>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FiftyEight$ {
    /** @deprecated use `FiftyEight$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FiftyEight, z.ZodTypeDef, unknown>;
    /** @deprecated use `FiftyEight$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FiftyEight$Outbound, z.ZodTypeDef, FiftyEight>;
    /** @deprecated use `FiftyEight$Outbound` instead. */
    type Outbound = FiftyEight$Outbound;
}
export declare function fiftyEightToJSON(fiftyEight: FiftyEight): string;
export declare function fiftyEightFromJSON(jsonString: string): SafeParseResult<FiftyEight, SDKValidationError>;
/** @internal */
export declare const UserEventPayload57OldEnvVarType$inboundSchema: z.ZodNativeEnum<typeof UserEventPayload57OldEnvVarType>;
/** @internal */
export declare const UserEventPayload57OldEnvVarType$outboundSchema: z.ZodNativeEnum<typeof UserEventPayload57OldEnvVarType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload57OldEnvVarType$ {
    /** @deprecated use `UserEventPayload57OldEnvVarType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly System: "system";
        readonly Encrypted: "encrypted";
        readonly Plain: "plain";
        readonly Sensitive: "sensitive";
    }>;
    /** @deprecated use `UserEventPayload57OldEnvVarType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly System: "system";
        readonly Encrypted: "encrypted";
        readonly Plain: "plain";
        readonly Sensitive: "sensitive";
    }>;
}
/** @internal */
export declare const UserEventPayloadTarget$inboundSchema: z.ZodNativeEnum<typeof UserEventPayloadTarget>;
/** @internal */
export declare const UserEventPayloadTarget$outboundSchema: z.ZodNativeEnum<typeof UserEventPayloadTarget>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayloadTarget$ {
    /** @deprecated use `UserEventPayloadTarget$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Production: "production";
        readonly Preview: "preview";
        readonly Development: "development";
    }>;
    /** @deprecated use `UserEventPayloadTarget$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Production: "production";
        readonly Preview: "preview";
        readonly Development: "development";
    }>;
}
/** @internal */
export declare const OldEnvVar$inboundSchema: z.ZodType<OldEnvVar, z.ZodTypeDef, unknown>;
/** @internal */
export type OldEnvVar$Outbound = {
    created?: string | undefined;
    key?: string | undefined;
    ownerId?: string | null | undefined;
    id?: string | undefined;
    createdBy?: string | null | undefined;
    deletedBy?: string | null | undefined;
    updatedBy?: string | null | undefined;
    createdAt?: number | undefined;
    deletedAt?: number | undefined;
    updatedAt?: number | undefined;
    value?: string | undefined;
    projectId?: Array<string> | undefined;
    type?: string | undefined;
    target?: Array<string> | undefined;
    applyToAllCustomEnvironments?: boolean | undefined;
    decrypted?: boolean | undefined;
    comment?: string | undefined;
    lastEditedByDisplayName?: string | undefined;
};
/** @internal */
export declare const OldEnvVar$outboundSchema: z.ZodType<OldEnvVar$Outbound, z.ZodTypeDef, OldEnvVar>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OldEnvVar$ {
    /** @deprecated use `OldEnvVar$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OldEnvVar, z.ZodTypeDef, unknown>;
    /** @deprecated use `OldEnvVar$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OldEnvVar$Outbound, z.ZodTypeDef, OldEnvVar>;
    /** @deprecated use `OldEnvVar$Outbound` instead. */
    type Outbound = OldEnvVar$Outbound;
}
export declare function oldEnvVarToJSON(oldEnvVar: OldEnvVar): string;
export declare function oldEnvVarFromJSON(jsonString: string): SafeParseResult<OldEnvVar, SDKValidationError>;
/** @internal */
export declare const UserEventPayload57Type$inboundSchema: z.ZodNativeEnum<typeof UserEventPayload57Type>;
/** @internal */
export declare const UserEventPayload57Type$outboundSchema: z.ZodNativeEnum<typeof UserEventPayload57Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload57Type$ {
    /** @deprecated use `UserEventPayload57Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly System: "system";
        readonly Encrypted: "encrypted";
        readonly Plain: "plain";
        readonly Sensitive: "sensitive";
    }>;
    /** @deprecated use `UserEventPayload57Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly System: "system";
        readonly Encrypted: "encrypted";
        readonly Plain: "plain";
        readonly Sensitive: "sensitive";
    }>;
}
/** @internal */
export declare const UserEventPayload57Target$inboundSchema: z.ZodNativeEnum<typeof UserEventPayload57Target>;
/** @internal */
export declare const UserEventPayload57Target$outboundSchema: z.ZodNativeEnum<typeof UserEventPayload57Target>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload57Target$ {
    /** @deprecated use `UserEventPayload57Target$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Production: "production";
        readonly Preview: "preview";
        readonly Development: "development";
    }>;
    /** @deprecated use `UserEventPayload57Target$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Production: "production";
        readonly Preview: "preview";
        readonly Development: "development";
    }>;
}
/** @internal */
export declare const NewEnvVar$inboundSchema: z.ZodType<NewEnvVar, z.ZodTypeDef, unknown>;
/** @internal */
export type NewEnvVar$Outbound = {
    created?: string | undefined;
    key?: string | undefined;
    ownerId?: string | null | undefined;
    id?: string | undefined;
    createdBy?: string | null | undefined;
    deletedBy?: string | null | undefined;
    updatedBy?: string | null | undefined;
    createdAt?: number | undefined;
    deletedAt?: number | undefined;
    updatedAt?: number | undefined;
    value?: string | undefined;
    projectId?: Array<string> | undefined;
    type?: string | undefined;
    target?: Array<string> | undefined;
    applyToAllCustomEnvironments?: boolean | undefined;
    decrypted?: boolean | undefined;
    comment?: string | undefined;
    lastEditedByDisplayName?: string | undefined;
};
/** @internal */
export declare const NewEnvVar$outboundSchema: z.ZodType<NewEnvVar$Outbound, z.ZodTypeDef, NewEnvVar>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NewEnvVar$ {
    /** @deprecated use `NewEnvVar$inboundSchema` instead. */
    const inboundSchema: z.ZodType<NewEnvVar, z.ZodTypeDef, unknown>;
    /** @deprecated use `NewEnvVar$outboundSchema` instead. */
    const outboundSchema: z.ZodType<NewEnvVar$Outbound, z.ZodTypeDef, NewEnvVar>;
    /** @deprecated use `NewEnvVar$Outbound` instead. */
    type Outbound = NewEnvVar$Outbound;
}
export declare function newEnvVarToJSON(newEnvVar: NewEnvVar): string;
export declare function newEnvVarFromJSON(jsonString: string): SafeParseResult<NewEnvVar, SDKValidationError>;
/** @internal */
export declare const OldTarget$inboundSchema: z.ZodNativeEnum<typeof OldTarget>;
/** @internal */
export declare const OldTarget$outboundSchema: z.ZodNativeEnum<typeof OldTarget>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OldTarget$ {
    /** @deprecated use `OldTarget$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Production: "production";
        readonly Preview: "preview";
        readonly Development: "development";
    }>;
    /** @deprecated use `OldTarget$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Production: "production";
        readonly Preview: "preview";
        readonly Development: "development";
    }>;
}
/** @internal */
export declare const NewTarget$inboundSchema: z.ZodNativeEnum<typeof NewTarget>;
/** @internal */
export declare const NewTarget$outboundSchema: z.ZodNativeEnum<typeof NewTarget>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NewTarget$ {
    /** @deprecated use `NewTarget$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Production: "production";
        readonly Preview: "preview";
        readonly Development: "development";
    }>;
    /** @deprecated use `NewTarget$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Production: "production";
        readonly Preview: "preview";
        readonly Development: "development";
    }>;
}
/** @internal */
export declare const OldProjects$inboundSchema: z.ZodType<OldProjects, z.ZodTypeDef, unknown>;
/** @internal */
export type OldProjects$Outbound = {
    projectName?: string | undefined;
    projectId: string;
};
/** @internal */
export declare const OldProjects$outboundSchema: z.ZodType<OldProjects$Outbound, z.ZodTypeDef, OldProjects>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OldProjects$ {
    /** @deprecated use `OldProjects$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OldProjects, z.ZodTypeDef, unknown>;
    /** @deprecated use `OldProjects$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OldProjects$Outbound, z.ZodTypeDef, OldProjects>;
    /** @deprecated use `OldProjects$Outbound` instead. */
    type Outbound = OldProjects$Outbound;
}
export declare function oldProjectsToJSON(oldProjects: OldProjects): string;
export declare function oldProjectsFromJSON(jsonString: string): SafeParseResult<OldProjects, SDKValidationError>;
/** @internal */
export declare const NewProjects$inboundSchema: z.ZodType<NewProjects, z.ZodTypeDef, unknown>;
/** @internal */
export type NewProjects$Outbound = {
    projectName?: string | undefined;
    projectId: string;
};
/** @internal */
export declare const NewProjects$outboundSchema: z.ZodType<NewProjects$Outbound, z.ZodTypeDef, NewProjects>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NewProjects$ {
    /** @deprecated use `NewProjects$inboundSchema` instead. */
    const inboundSchema: z.ZodType<NewProjects, z.ZodTypeDef, unknown>;
    /** @deprecated use `NewProjects$outboundSchema` instead. */
    const outboundSchema: z.ZodType<NewProjects$Outbound, z.ZodTypeDef, NewProjects>;
    /** @deprecated use `NewProjects$Outbound` instead. */
    type Outbound = NewProjects$Outbound;
}
export declare function newProjectsToJSON(newProjects: NewProjects): string;
export declare function newProjectsFromJSON(jsonString: string): SafeParseResult<NewProjects, SDKValidationError>;
/** @internal */
export declare const UpdateDiff$inboundSchema: z.ZodType<UpdateDiff, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateDiff$Outbound = {
    id: string;
    key?: string | undefined;
    newKey?: string | undefined;
    oldTarget?: Array<string> | undefined;
    newTarget?: Array<string> | undefined;
    oldType?: string | undefined;
    newType?: string | undefined;
    oldProjects?: Array<OldProjects$Outbound> | undefined;
    newProjects?: Array<NewProjects$Outbound> | undefined;
    changedValue: boolean;
};
/** @internal */
export declare const UpdateDiff$outboundSchema: z.ZodType<UpdateDiff$Outbound, z.ZodTypeDef, UpdateDiff>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateDiff$ {
    /** @deprecated use `UpdateDiff$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateDiff, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateDiff$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateDiff$Outbound, z.ZodTypeDef, UpdateDiff>;
    /** @deprecated use `UpdateDiff$Outbound` instead. */
    type Outbound = UpdateDiff$Outbound;
}
export declare function updateDiffToJSON(updateDiff: UpdateDiff): string;
export declare function updateDiffFromJSON(jsonString: string): SafeParseResult<UpdateDiff, SDKValidationError>;
/** @internal */
export declare const FiftySeven$inboundSchema: z.ZodType<FiftySeven, z.ZodTypeDef, unknown>;
/** @internal */
export type FiftySeven$Outbound = {
    oldEnvVar?: OldEnvVar$Outbound | undefined;
    newEnvVar?: NewEnvVar$Outbound | undefined;
    updateDiff?: UpdateDiff$Outbound | undefined;
};
/** @internal */
export declare const FiftySeven$outboundSchema: z.ZodType<FiftySeven$Outbound, z.ZodTypeDef, FiftySeven>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FiftySeven$ {
    /** @deprecated use `FiftySeven$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FiftySeven, z.ZodTypeDef, unknown>;
    /** @deprecated use `FiftySeven$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FiftySeven$Outbound, z.ZodTypeDef, FiftySeven>;
    /** @deprecated use `FiftySeven$Outbound` instead. */
    type Outbound = FiftySeven$Outbound;
}
export declare function fiftySevenToJSON(fiftySeven: FiftySeven): string;
export declare function fiftySevenFromJSON(jsonString: string): SafeParseResult<FiftySeven, SDKValidationError>;
/** @internal */
export declare const PayloadType$inboundSchema: z.ZodNativeEnum<typeof PayloadType>;
/** @internal */
export declare const PayloadType$outboundSchema: z.ZodNativeEnum<typeof PayloadType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadType$ {
    /** @deprecated use `PayloadType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly System: "system";
        readonly Encrypted: "encrypted";
        readonly Plain: "plain";
        readonly Sensitive: "sensitive";
    }>;
    /** @deprecated use `PayloadType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly System: "system";
        readonly Encrypted: "encrypted";
        readonly Plain: "plain";
        readonly Sensitive: "sensitive";
    }>;
}
/** @internal */
export declare const PayloadTarget$inboundSchema: z.ZodNativeEnum<typeof PayloadTarget>;
/** @internal */
export declare const PayloadTarget$outboundSchema: z.ZodNativeEnum<typeof PayloadTarget>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadTarget$ {
    /** @deprecated use `PayloadTarget$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Production: "production";
        readonly Preview: "preview";
        readonly Development: "development";
    }>;
    /** @deprecated use `PayloadTarget$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Production: "production";
        readonly Preview: "preview";
        readonly Development: "development";
    }>;
}
/** @internal */
export declare const FiftySix$inboundSchema: z.ZodType<FiftySix, z.ZodTypeDef, unknown>;
/** @internal */
export type FiftySix$Outbound = {
    created?: string | undefined;
    key?: string | undefined;
    ownerId?: string | null | undefined;
    id?: string | undefined;
    createdBy?: string | null | undefined;
    deletedBy?: string | null | undefined;
    updatedBy?: string | null | undefined;
    createdAt?: number | undefined;
    deletedAt?: number | undefined;
    updatedAt?: number | undefined;
    value?: string | undefined;
    projectId?: Array<string> | undefined;
    type?: string | undefined;
    target?: Array<string> | undefined;
    applyToAllCustomEnvironments?: boolean | undefined;
    decrypted?: boolean | undefined;
    comment?: string | undefined;
    lastEditedByDisplayName?: string | undefined;
    projectNames?: Array<string> | undefined;
};
/** @internal */
export declare const FiftySix$outboundSchema: z.ZodType<FiftySix$Outbound, z.ZodTypeDef, FiftySix>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FiftySix$ {
    /** @deprecated use `FiftySix$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FiftySix, z.ZodTypeDef, unknown>;
    /** @deprecated use `FiftySix$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FiftySix$Outbound, z.ZodTypeDef, FiftySix>;
    /** @deprecated use `FiftySix$Outbound` instead. */
    type Outbound = FiftySix$Outbound;
}
export declare function fiftySixToJSON(fiftySix: FiftySix): string;
export declare function fiftySixFromJSON(jsonString: string): SafeParseResult<FiftySix, SDKValidationError>;
/** @internal */
export declare const Target$inboundSchema: z.ZodType<Target, z.ZodTypeDef, unknown>;
/** @internal */
export type Target$Outbound = string | Array<string>;
/** @internal */
export declare const Target$outboundSchema: z.ZodType<Target$Outbound, z.ZodTypeDef, Target>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Target$ {
    /** @deprecated use `Target$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Target, z.ZodTypeDef, unknown>;
    /** @deprecated use `Target$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Target$Outbound, z.ZodTypeDef, Target>;
    /** @deprecated use `Target$Outbound` instead. */
    type Outbound = Target$Outbound;
}
export declare function targetToJSON(target: Target): string;
export declare function targetFromJSON(jsonString: string): SafeParseResult<Target, SDKValidationError>;
/** @internal */
export declare const FiftyFive$inboundSchema: z.ZodType<FiftyFive, z.ZodTypeDef, unknown>;
/** @internal */
export type FiftyFive$Outbound = {
    key?: string | undefined;
    projectId?: string | undefined;
    projectName?: string | undefined;
    target?: string | Array<string> | undefined;
    id?: string | undefined;
    gitBranch?: string | undefined;
    edgeConfigId?: string | null | undefined;
    edgeConfigTokenId?: string | null | undefined;
    source?: string | undefined;
};
/** @internal */
export declare const FiftyFive$outboundSchema: z.ZodType<FiftyFive$Outbound, z.ZodTypeDef, FiftyFive>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FiftyFive$ {
    /** @deprecated use `FiftyFive$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FiftyFive, z.ZodTypeDef, unknown>;
    /** @deprecated use `FiftyFive$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FiftyFive$Outbound, z.ZodTypeDef, FiftyFive>;
    /** @deprecated use `FiftyFive$Outbound` instead. */
    type Outbound = FiftyFive$Outbound;
}
export declare function fiftyFiveToJSON(fiftyFive: FiftyFive): string;
export declare function fiftyFiveFromJSON(jsonString: string): SafeParseResult<FiftyFive, SDKValidationError>;
/** @internal */
export declare const FiftyFour$inboundSchema: z.ZodType<FiftyFour, z.ZodTypeDef, unknown>;
/** @internal */
export type FiftyFour$Outbound = {
    email: string;
    name: string;
};
/** @internal */
export declare const FiftyFour$outboundSchema: z.ZodType<FiftyFour$Outbound, z.ZodTypeDef, FiftyFour>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FiftyFour$ {
    /** @deprecated use `FiftyFour$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FiftyFour, z.ZodTypeDef, unknown>;
    /** @deprecated use `FiftyFour$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FiftyFour$Outbound, z.ZodTypeDef, FiftyFour>;
    /** @deprecated use `FiftyFour$Outbound` instead. */
    type Outbound = FiftyFour$Outbound;
}
export declare function fiftyFourToJSON(fiftyFour: FiftyFour): string;
export declare function fiftyFourFromJSON(jsonString: string): SafeParseResult<FiftyFour, SDKValidationError>;
/** @internal */
export declare const FiftyThree$inboundSchema: z.ZodType<FiftyThree, z.ZodTypeDef, unknown>;
/** @internal */
export type FiftyThree$Outbound = {
    sha: string;
    gitUserPlatform: string;
    projectName: string;
};
/** @internal */
export declare const FiftyThree$outboundSchema: z.ZodType<FiftyThree$Outbound, z.ZodTypeDef, FiftyThree>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FiftyThree$ {
    /** @deprecated use `FiftyThree$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FiftyThree, z.ZodTypeDef, unknown>;
    /** @deprecated use `FiftyThree$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FiftyThree$Outbound, z.ZodTypeDef, FiftyThree>;
    /** @deprecated use `FiftyThree$Outbound` instead. */
    type Outbound = FiftyThree$Outbound;
}
export declare function fiftyThreeToJSON(fiftyThree: FiftyThree): string;
export declare function fiftyThreeFromJSON(jsonString: string): SafeParseResult<FiftyThree, SDKValidationError>;
/** @internal */
export declare const FiftyTwo$inboundSchema: z.ZodType<FiftyTwo, z.ZodTypeDef, unknown>;
/** @internal */
export type FiftyTwo$Outbound = {
    name: string;
    price?: number | undefined;
    currency?: string | undefined;
};
/** @internal */
export declare const FiftyTwo$outboundSchema: z.ZodType<FiftyTwo$Outbound, z.ZodTypeDef, FiftyTwo>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FiftyTwo$ {
    /** @deprecated use `FiftyTwo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FiftyTwo, z.ZodTypeDef, unknown>;
    /** @deprecated use `FiftyTwo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FiftyTwo$Outbound, z.ZodTypeDef, FiftyTwo>;
    /** @deprecated use `FiftyTwo$Outbound` instead. */
    type Outbound = FiftyTwo$Outbound;
}
export declare function fiftyTwoToJSON(fiftyTwo: FiftyTwo): string;
export declare function fiftyTwoFromJSON(jsonString: string): SafeParseResult<FiftyTwo, SDKValidationError>;
/** @internal */
export declare const FiftyOne$inboundSchema: z.ZodType<FiftyOne, z.ZodTypeDef, unknown>;
/** @internal */
export type FiftyOne$Outbound = {
    renew?: boolean | undefined;
    domain: string;
};
/** @internal */
export declare const FiftyOne$outboundSchema: z.ZodType<FiftyOne$Outbound, z.ZodTypeDef, FiftyOne>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FiftyOne$ {
    /** @deprecated use `FiftyOne$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FiftyOne, z.ZodTypeDef, unknown>;
    /** @deprecated use `FiftyOne$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FiftyOne$Outbound, z.ZodTypeDef, FiftyOne>;
    /** @deprecated use `FiftyOne$Outbound` instead. */
    type Outbound = FiftyOne$Outbound;
}
export declare function fiftyOneToJSON(fiftyOne: FiftyOne): string;
export declare function fiftyOneFromJSON(jsonString: string): SafeParseResult<FiftyOne, SDKValidationError>;
/** @internal */
export declare const Fifty$inboundSchema: z.ZodType<Fifty, z.ZodTypeDef, unknown>;
/** @internal */
export type Fifty$Outbound = {
    name: string;
    destinationId: string;
    destinationName: string;
};
/** @internal */
export declare const Fifty$outboundSchema: z.ZodType<Fifty$Outbound, z.ZodTypeDef, Fifty>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Fifty$ {
    /** @deprecated use `Fifty$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Fifty, z.ZodTypeDef, unknown>;
    /** @deprecated use `Fifty$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Fifty$Outbound, z.ZodTypeDef, Fifty>;
    /** @deprecated use `Fifty$Outbound` instead. */
    type Outbound = Fifty$Outbound;
}
export declare function fiftyToJSON(fifty: Fifty): string;
export declare function fiftyFromJSON(jsonString: string): SafeParseResult<Fifty, SDKValidationError>;
/** @internal */
export declare const FortyNine$inboundSchema: z.ZodType<FortyNine, z.ZodTypeDef, unknown>;
/** @internal */
export type FortyNine$Outbound = {
    name: string;
    destinationId: string | null;
    destinationName: string | null;
};
/** @internal */
export declare const FortyNine$outboundSchema: z.ZodType<FortyNine$Outbound, z.ZodTypeDef, FortyNine>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FortyNine$ {
    /** @deprecated use `FortyNine$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FortyNine, z.ZodTypeDef, unknown>;
    /** @deprecated use `FortyNine$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FortyNine$Outbound, z.ZodTypeDef, FortyNine>;
    /** @deprecated use `FortyNine$Outbound` instead. */
    type Outbound = FortyNine$Outbound;
}
export declare function fortyNineToJSON(fortyNine: FortyNine): string;
export declare function fortyNineFromJSON(jsonString: string): SafeParseResult<FortyNine, SDKValidationError>;
/** @internal */
export declare const FortyEight$inboundSchema: z.ZodType<FortyEight, z.ZodTypeDef, unknown>;
/** @internal */
export type FortyEight$Outbound = {
    name: string;
    fromId: string | null;
    fromName: string | null;
};
/** @internal */
export declare const FortyEight$outboundSchema: z.ZodType<FortyEight$Outbound, z.ZodTypeDef, FortyEight>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FortyEight$ {
    /** @deprecated use `FortyEight$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FortyEight, z.ZodTypeDef, unknown>;
    /** @deprecated use `FortyEight$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FortyEight$Outbound, z.ZodTypeDef, FortyEight>;
    /** @deprecated use `FortyEight$Outbound` instead. */
    type Outbound = FortyEight$Outbound;
}
export declare function fortyEightToJSON(fortyEight: FortyEight): string;
export declare function fortyEightFromJSON(jsonString: string): SafeParseResult<FortyEight, SDKValidationError>;
/** @internal */
export declare const FortySeven$inboundSchema: z.ZodType<FortySeven, z.ZodTypeDef, unknown>;
/** @internal */
export type FortySeven$Outbound = {
    domainId: string;
    name: string;
};
/** @internal */
export declare const FortySeven$outboundSchema: z.ZodType<FortySeven$Outbound, z.ZodTypeDef, FortySeven>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FortySeven$ {
    /** @deprecated use `FortySeven$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FortySeven, z.ZodTypeDef, unknown>;
    /** @deprecated use `FortySeven$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FortySeven$Outbound, z.ZodTypeDef, FortySeven>;
    /** @deprecated use `FortySeven$Outbound` instead. */
    type Outbound = FortySeven$Outbound;
}
export declare function fortySevenToJSON(fortySeven: FortySeven): string;
export declare function fortySevenFromJSON(jsonString: string): SafeParseResult<FortySeven, SDKValidationError>;
/** @internal */
export declare const UserEventPayload46OldTeam$inboundSchema: z.ZodType<UserEventPayload46OldTeam, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayload46OldTeam$Outbound = {
    name: string;
};
/** @internal */
export declare const UserEventPayload46OldTeam$outboundSchema: z.ZodType<UserEventPayload46OldTeam$Outbound, z.ZodTypeDef, UserEventPayload46OldTeam>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload46OldTeam$ {
    /** @deprecated use `UserEventPayload46OldTeam$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayload46OldTeam, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayload46OldTeam$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayload46OldTeam$Outbound, z.ZodTypeDef, UserEventPayload46OldTeam>;
    /** @deprecated use `UserEventPayload46OldTeam$Outbound` instead. */
    type Outbound = UserEventPayload46OldTeam$Outbound;
}
export declare function userEventPayload46OldTeamToJSON(userEventPayload46OldTeam: UserEventPayload46OldTeam): string;
export declare function userEventPayload46OldTeamFromJSON(jsonString: string): SafeParseResult<UserEventPayload46OldTeam, SDKValidationError>;
/** @internal */
export declare const UserEventPayload46NewTeam$inboundSchema: z.ZodType<UserEventPayload46NewTeam, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayload46NewTeam$Outbound = {
    name: string;
};
/** @internal */
export declare const UserEventPayload46NewTeam$outboundSchema: z.ZodType<UserEventPayload46NewTeam$Outbound, z.ZodTypeDef, UserEventPayload46NewTeam>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload46NewTeam$ {
    /** @deprecated use `UserEventPayload46NewTeam$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayload46NewTeam, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayload46NewTeam$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayload46NewTeam$Outbound, z.ZodTypeDef, UserEventPayload46NewTeam>;
    /** @deprecated use `UserEventPayload46NewTeam$Outbound` instead. */
    type Outbound = UserEventPayload46NewTeam$Outbound;
}
export declare function userEventPayload46NewTeamToJSON(userEventPayload46NewTeam: UserEventPayload46NewTeam): string;
export declare function userEventPayload46NewTeamFromJSON(jsonString: string): SafeParseResult<UserEventPayload46NewTeam, SDKValidationError>;
/** @internal */
export declare const FortySix$inboundSchema: z.ZodType<FortySix, z.ZodTypeDef, unknown>;
/** @internal */
export type FortySix$Outbound = {
    name: string;
    oldTeam?: UserEventPayload46OldTeam$Outbound | undefined;
    newTeam?: UserEventPayload46NewTeam$Outbound | undefined;
};
/** @internal */
export declare const FortySix$outboundSchema: z.ZodType<FortySix$Outbound, z.ZodTypeDef, FortySix>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FortySix$ {
    /** @deprecated use `FortySix$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FortySix, z.ZodTypeDef, unknown>;
    /** @deprecated use `FortySix$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FortySix$Outbound, z.ZodTypeDef, FortySix>;
    /** @deprecated use `FortySix$Outbound` instead. */
    type Outbound = FortySix$Outbound;
}
export declare function fortySixToJSON(fortySix: FortySix): string;
export declare function fortySixFromJSON(jsonString: string): SafeParseResult<FortySix, SDKValidationError>;
/** @internal */
export declare const FortyFive$inboundSchema: z.ZodType<FortyFive, z.ZodTypeDef, unknown>;
/** @internal */
export type FortyFive$Outbound = {
    name: string;
    userId: string;
    teamId: string;
    ownerName: string;
};
/** @internal */
export declare const FortyFive$outboundSchema: z.ZodType<FortyFive$Outbound, z.ZodTypeDef, FortyFive>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FortyFive$ {
    /** @deprecated use `FortyFive$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FortyFive, z.ZodTypeDef, unknown>;
    /** @deprecated use `FortyFive$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FortyFive$Outbound, z.ZodTypeDef, FortyFive>;
    /** @deprecated use `FortyFive$Outbound` instead. */
    type Outbound = FortyFive$Outbound;
}
export declare function fortyFiveToJSON(fortyFive: FortyFive): string;
export declare function fortyFiveFromJSON(jsonString: string): SafeParseResult<FortyFive, SDKValidationError>;
/** @internal */
export declare const FortyFour$inboundSchema: z.ZodType<FortyFour, z.ZodTypeDef, unknown>;
/** @internal */
export type FortyFour$Outbound = {
    name: string;
    cdnEnabled: boolean;
};
/** @internal */
export declare const FortyFour$outboundSchema: z.ZodType<FortyFour$Outbound, z.ZodTypeDef, FortyFour>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FortyFour$ {
    /** @deprecated use `FortyFour$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FortyFour, z.ZodTypeDef, unknown>;
    /** @deprecated use `FortyFour$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FortyFour$Outbound, z.ZodTypeDef, FortyFour>;
    /** @deprecated use `FortyFour$Outbound` instead. */
    type Outbound = FortyFour$Outbound;
}
export declare function fortyFourToJSON(fortyFour: FortyFour): string;
export declare function fortyFourFromJSON(jsonString: string): SafeParseResult<FortyFour, SDKValidationError>;
/** @internal */
export declare const FortyThree$inboundSchema: z.ZodType<FortyThree, z.ZodTypeDef, unknown>;
/** @internal */
export type FortyThree$Outbound = {
    name: string;
    price: number;
    currency?: string | undefined;
};
/** @internal */
export declare const FortyThree$outboundSchema: z.ZodType<FortyThree$Outbound, z.ZodTypeDef, FortyThree>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FortyThree$ {
    /** @deprecated use `FortyThree$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FortyThree, z.ZodTypeDef, unknown>;
    /** @deprecated use `FortyThree$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FortyThree$Outbound, z.ZodTypeDef, FortyThree>;
    /** @deprecated use `FortyThree$Outbound` instead. */
    type Outbound = FortyThree$Outbound;
}
export declare function fortyThreeToJSON(fortyThree: FortyThree): string;
export declare function fortyThreeFromJSON(jsonString: string): SafeParseResult<FortyThree, SDKValidationError>;
/** @internal */
export declare const FortyTwo$inboundSchema: z.ZodType<FortyTwo, z.ZodTypeDef, unknown>;
/** @internal */
export type FortyTwo$Outbound = {
    name: string;
};
/** @internal */
export declare const FortyTwo$outboundSchema: z.ZodType<FortyTwo$Outbound, z.ZodTypeDef, FortyTwo>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FortyTwo$ {
    /** @deprecated use `FortyTwo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FortyTwo, z.ZodTypeDef, unknown>;
    /** @deprecated use `FortyTwo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FortyTwo$Outbound, z.ZodTypeDef, FortyTwo>;
    /** @deprecated use `FortyTwo$Outbound` instead. */
    type Outbound = FortyTwo$Outbound;
}
export declare function fortyTwoToJSON(fortyTwo: FortyTwo): string;
export declare function fortyTwoFromJSON(jsonString: string): SafeParseResult<FortyTwo, SDKValidationError>;
/** @internal */
export declare const FortyOne$inboundSchema: z.ZodType<FortyOne, z.ZodTypeDef, unknown>;
/** @internal */
export type FortyOne$Outbound = {
    id: string;
    value: string;
    name: string;
    domain: string;
    type: string;
};
/** @internal */
export declare const FortyOne$outboundSchema: z.ZodType<FortyOne$Outbound, z.ZodTypeDef, FortyOne>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FortyOne$ {
    /** @deprecated use `FortyOne$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FortyOne, z.ZodTypeDef, unknown>;
    /** @deprecated use `FortyOne$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FortyOne$Outbound, z.ZodTypeDef, FortyOne>;
    /** @deprecated use `FortyOne$Outbound` instead. */
    type Outbound = FortyOne$Outbound;
}
export declare function fortyOneToJSON(fortyOne: FortyOne): string;
export declare function fortyOneFromJSON(jsonString: string): SafeParseResult<FortyOne, SDKValidationError>;
/** @internal */
export declare const Forty$inboundSchema: z.ZodType<Forty, z.ZodTypeDef, unknown>;
/** @internal */
export type Forty$Outbound = {
    id: string;
    value: string;
    name: string;
    domain: string;
    type: string;
    mxPriority?: number | undefined;
};
/** @internal */
export declare const Forty$outboundSchema: z.ZodType<Forty$Outbound, z.ZodTypeDef, Forty>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Forty$ {
    /** @deprecated use `Forty$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Forty, z.ZodTypeDef, unknown>;
    /** @deprecated use `Forty$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Forty$Outbound, z.ZodTypeDef, Forty>;
    /** @deprecated use `Forty$Outbound` instead. */
    type Outbound = Forty$Outbound;
}
export declare function fortyToJSON(forty: Forty): string;
export declare function fortyFromJSON(jsonString: string): SafeParseResult<Forty, SDKValidationError>;
/** @internal */
export declare const UserEventPayloadDeployment$inboundSchema: z.ZodType<UserEventPayloadDeployment, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayloadDeployment$Outbound = {
    id: string;
    name: string;
    url: string;
    meta: {
        [k: string]: string;
    };
};
/** @internal */
export declare const UserEventPayloadDeployment$outboundSchema: z.ZodType<UserEventPayloadDeployment$Outbound, z.ZodTypeDef, UserEventPayloadDeployment>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayloadDeployment$ {
    /** @deprecated use `UserEventPayloadDeployment$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayloadDeployment, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayloadDeployment$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayloadDeployment$Outbound, z.ZodTypeDef, UserEventPayloadDeployment>;
    /** @deprecated use `UserEventPayloadDeployment$Outbound` instead. */
    type Outbound = UserEventPayloadDeployment$Outbound;
}
export declare function userEventPayloadDeploymentToJSON(userEventPayloadDeployment: UserEventPayloadDeployment): string;
export declare function userEventPayloadDeploymentFromJSON(jsonString: string): SafeParseResult<UserEventPayloadDeployment, SDKValidationError>;
/** @internal */
export declare const ThirtyNine$inboundSchema: z.ZodType<ThirtyNine, z.ZodTypeDef, unknown>;
/** @internal */
export type ThirtyNine$Outbound = {
    deployment: UserEventPayloadDeployment$Outbound;
    deploymentId: string;
    url: string;
};
/** @internal */
export declare const ThirtyNine$outboundSchema: z.ZodType<ThirtyNine$Outbound, z.ZodTypeDef, ThirtyNine>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ThirtyNine$ {
    /** @deprecated use `ThirtyNine$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ThirtyNine, z.ZodTypeDef, unknown>;
    /** @deprecated use `ThirtyNine$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ThirtyNine$Outbound, z.ZodTypeDef, ThirtyNine>;
    /** @deprecated use `ThirtyNine$Outbound` instead. */
    type Outbound = ThirtyNine$Outbound;
}
export declare function thirtyNineToJSON(thirtyNine: ThirtyNine): string;
export declare function thirtyNineFromJSON(jsonString: string): SafeParseResult<ThirtyNine, SDKValidationError>;
/** @internal */
export declare const UserEventPayloadOldTeam$inboundSchema: z.ZodType<UserEventPayloadOldTeam, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayloadOldTeam$Outbound = {
    name: string;
};
/** @internal */
export declare const UserEventPayloadOldTeam$outboundSchema: z.ZodType<UserEventPayloadOldTeam$Outbound, z.ZodTypeDef, UserEventPayloadOldTeam>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayloadOldTeam$ {
    /** @deprecated use `UserEventPayloadOldTeam$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayloadOldTeam, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayloadOldTeam$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayloadOldTeam$Outbound, z.ZodTypeDef, UserEventPayloadOldTeam>;
    /** @deprecated use `UserEventPayloadOldTeam$Outbound` instead. */
    type Outbound = UserEventPayloadOldTeam$Outbound;
}
export declare function userEventPayloadOldTeamToJSON(userEventPayloadOldTeam: UserEventPayloadOldTeam): string;
export declare function userEventPayloadOldTeamFromJSON(jsonString: string): SafeParseResult<UserEventPayloadOldTeam, SDKValidationError>;
/** @internal */
export declare const UserEventPayloadNewTeam$inboundSchema: z.ZodType<UserEventPayloadNewTeam, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayloadNewTeam$Outbound = {
    name: string;
};
/** @internal */
export declare const UserEventPayloadNewTeam$outboundSchema: z.ZodType<UserEventPayloadNewTeam$Outbound, z.ZodTypeDef, UserEventPayloadNewTeam>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayloadNewTeam$ {
    /** @deprecated use `UserEventPayloadNewTeam$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayloadNewTeam, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayloadNewTeam$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayloadNewTeam$Outbound, z.ZodTypeDef, UserEventPayloadNewTeam>;
    /** @deprecated use `UserEventPayloadNewTeam$Outbound` instead. */
    type Outbound = UserEventPayloadNewTeam$Outbound;
}
export declare function userEventPayloadNewTeamToJSON(userEventPayloadNewTeam: UserEventPayloadNewTeam): string;
export declare function userEventPayloadNewTeamFromJSON(jsonString: string): SafeParseResult<UserEventPayloadNewTeam, SDKValidationError>;
/** @internal */
export declare const ThirtyEight$inboundSchema: z.ZodType<ThirtyEight, z.ZodTypeDef, unknown>;
/** @internal */
export type ThirtyEight$Outbound = {
    url: string;
    oldTeam?: UserEventPayloadOldTeam$Outbound | undefined;
    newTeam?: UserEventPayloadNewTeam$Outbound | undefined;
};
/** @internal */
export declare const ThirtyEight$outboundSchema: z.ZodType<ThirtyEight$Outbound, z.ZodTypeDef, ThirtyEight>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ThirtyEight$ {
    /** @deprecated use `ThirtyEight$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ThirtyEight, z.ZodTypeDef, unknown>;
    /** @deprecated use `ThirtyEight$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ThirtyEight$Outbound, z.ZodTypeDef, ThirtyEight>;
    /** @deprecated use `ThirtyEight$Outbound` instead. */
    type Outbound = ThirtyEight$Outbound;
}
export declare function thirtyEightToJSON(thirtyEight: ThirtyEight): string;
export declare function thirtyEightFromJSON(jsonString: string): SafeParseResult<ThirtyEight, SDKValidationError>;
/** @internal */
export declare const PayloadDeployment$inboundSchema: z.ZodType<PayloadDeployment, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadDeployment$Outbound = {
    id: string;
    name: string;
    url: string;
    meta: {
        [k: string]: string;
    };
};
/** @internal */
export declare const PayloadDeployment$outboundSchema: z.ZodType<PayloadDeployment$Outbound, z.ZodTypeDef, PayloadDeployment>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadDeployment$ {
    /** @deprecated use `PayloadDeployment$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadDeployment, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadDeployment$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadDeployment$Outbound, z.ZodTypeDef, PayloadDeployment>;
    /** @deprecated use `PayloadDeployment$Outbound` instead. */
    type Outbound = PayloadDeployment$Outbound;
}
export declare function payloadDeploymentToJSON(payloadDeployment: PayloadDeployment): string;
export declare function payloadDeploymentFromJSON(jsonString: string): SafeParseResult<PayloadDeployment, SDKValidationError>;
/** @internal */
export declare const ThirtySeven$inboundSchema: z.ZodType<ThirtySeven, z.ZodTypeDef, unknown>;
/** @internal */
export type ThirtySeven$Outbound = {
    name?: string | undefined;
    alias?: Array<string> | undefined;
    target?: string | null | undefined;
    deployment?: PayloadDeployment$Outbound | null | undefined;
    url: string;
    forced?: boolean | undefined;
    deploymentId?: string | undefined;
    plan?: string | undefined;
    project?: string | undefined;
    projectId?: string | undefined;
    regions?: Array<string> | undefined;
    type?: string | undefined;
};
/** @internal */
export declare const ThirtySeven$outboundSchema: z.ZodType<ThirtySeven$Outbound, z.ZodTypeDef, ThirtySeven>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ThirtySeven$ {
    /** @deprecated use `ThirtySeven$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ThirtySeven, z.ZodTypeDef, unknown>;
    /** @deprecated use `ThirtySeven$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ThirtySeven$Outbound, z.ZodTypeDef, ThirtySeven>;
    /** @deprecated use `ThirtySeven$Outbound` instead. */
    type Outbound = ThirtySeven$Outbound;
}
export declare function thirtySevenToJSON(thirtySeven: ThirtySeven): string;
export declare function thirtySevenFromJSON(jsonString: string): SafeParseResult<ThirtySeven, SDKValidationError>;
/** @internal */
export declare const UserEventPayload36Project$inboundSchema: z.ZodType<UserEventPayload36Project, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayload36Project$Outbound = {
    name: string;
};
/** @internal */
export declare const UserEventPayload36Project$outboundSchema: z.ZodType<UserEventPayload36Project$Outbound, z.ZodTypeDef, UserEventPayload36Project>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload36Project$ {
    /** @deprecated use `UserEventPayload36Project$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayload36Project, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayload36Project$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayload36Project$Outbound, z.ZodTypeDef, UserEventPayload36Project>;
    /** @deprecated use `UserEventPayload36Project$Outbound` instead. */
    type Outbound = UserEventPayload36Project$Outbound;
}
export declare function userEventPayload36ProjectToJSON(userEventPayload36Project: UserEventPayload36Project): string;
export declare function userEventPayload36ProjectFromJSON(jsonString: string): SafeParseResult<UserEventPayload36Project, SDKValidationError>;
/** @internal */
export declare const DeployHook$inboundSchema: z.ZodType<DeployHook, z.ZodTypeDef, unknown>;
/** @internal */
export type DeployHook$Outbound = {
    createdAt: number;
    id: string;
    name: string;
    ref: string;
};
/** @internal */
export declare const DeployHook$outboundSchema: z.ZodType<DeployHook$Outbound, z.ZodTypeDef, DeployHook>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace DeployHook$ {
    /** @deprecated use `DeployHook$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DeployHook, z.ZodTypeDef, unknown>;
    /** @deprecated use `DeployHook$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DeployHook$Outbound, z.ZodTypeDef, DeployHook>;
    /** @deprecated use `DeployHook$Outbound` instead. */
    type Outbound = DeployHook$Outbound;
}
export declare function deployHookToJSON(deployHook: DeployHook): string;
export declare function deployHookFromJSON(jsonString: string): SafeParseResult<DeployHook, SDKValidationError>;
/** @internal */
export declare const Job$inboundSchema: z.ZodType<Job, z.ZodTypeDef, unknown>;
/** @internal */
export type Job$Outbound = {
    deployHook: DeployHook$Outbound;
    state: string;
};
/** @internal */
export declare const Job$outboundSchema: z.ZodType<Job$Outbound, z.ZodTypeDef, Job>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Job$ {
    /** @deprecated use `Job$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Job, z.ZodTypeDef, unknown>;
    /** @deprecated use `Job$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Job$Outbound, z.ZodTypeDef, Job>;
    /** @deprecated use `Job$Outbound` instead. */
    type Outbound = Job$Outbound;
}
export declare function jobToJSON(job: Job): string;
export declare function jobFromJSON(jsonString: string): SafeParseResult<Job, SDKValidationError>;
/** @internal */
export declare const ThirtySix$inboundSchema: z.ZodType<ThirtySix, z.ZodTypeDef, unknown>;
/** @internal */
export type ThirtySix$Outbound = {
    project: UserEventPayload36Project$Outbound;
    job: Job$Outbound;
};
/** @internal */
export declare const ThirtySix$outboundSchema: z.ZodType<ThirtySix$Outbound, z.ZodTypeDef, ThirtySix>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ThirtySix$ {
    /** @deprecated use `ThirtySix$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ThirtySix, z.ZodTypeDef, unknown>;
    /** @deprecated use `ThirtySix$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ThirtySix$Outbound, z.ZodTypeDef, ThirtySix>;
    /** @deprecated use `ThirtySix$Outbound` instead. */
    type Outbound = ThirtySix$Outbound;
}
export declare function thirtySixToJSON(thirtySix: ThirtySix): string;
export declare function thirtySixFromJSON(jsonString: string): SafeParseResult<ThirtySix, SDKValidationError>;
/** @internal */
export declare const ThirtyFive$inboundSchema: z.ZodType<ThirtyFive, z.ZodTypeDef, unknown>;
/** @internal */
export type ThirtyFive$Outbound = {
    bitbucketEmail: string;
    bitbucketLogin: string;
    bitbucketName?: string | undefined;
};
/** @internal */
export declare const ThirtyFive$outboundSchema: z.ZodType<ThirtyFive$Outbound, z.ZodTypeDef, ThirtyFive>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ThirtyFive$ {
    /** @deprecated use `ThirtyFive$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ThirtyFive, z.ZodTypeDef, unknown>;
    /** @deprecated use `ThirtyFive$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ThirtyFive$Outbound, z.ZodTypeDef, ThirtyFive>;
    /** @deprecated use `ThirtyFive$Outbound` instead. */
    type Outbound = ThirtyFive$Outbound;
}
export declare function thirtyFiveToJSON(thirtyFive: ThirtyFive): string;
export declare function thirtyFiveFromJSON(jsonString: string): SafeParseResult<ThirtyFive, SDKValidationError>;
/** @internal */
export declare const ThirtyFour$inboundSchema: z.ZodType<ThirtyFour, z.ZodTypeDef, unknown>;
/** @internal */
export type ThirtyFour$Outbound = {
    gitlabLogin: string;
    gitlabEmail: string;
    gitlabName?: string | undefined;
};
/** @internal */
export declare const ThirtyFour$outboundSchema: z.ZodType<ThirtyFour$Outbound, z.ZodTypeDef, ThirtyFour>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ThirtyFour$ {
    /** @deprecated use `ThirtyFour$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ThirtyFour, z.ZodTypeDef, unknown>;
    /** @deprecated use `ThirtyFour$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ThirtyFour$Outbound, z.ZodTypeDef, ThirtyFour>;
    /** @deprecated use `ThirtyFour$Outbound` instead. */
    type Outbound = ThirtyFour$Outbound;
}
export declare function thirtyFourToJSON(thirtyFour: ThirtyFour): string;
export declare function thirtyFourFromJSON(jsonString: string): SafeParseResult<ThirtyFour, SDKValidationError>;
/** @internal */
export declare const ThirtyThree$inboundSchema: z.ZodType<ThirtyThree, z.ZodTypeDef, unknown>;
/** @internal */
export type ThirtyThree$Outbound = {
    githubLogin: string;
};
/** @internal */
export declare const ThirtyThree$outboundSchema: z.ZodType<ThirtyThree$Outbound, z.ZodTypeDef, ThirtyThree>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ThirtyThree$ {
    /** @deprecated use `ThirtyThree$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ThirtyThree, z.ZodTypeDef, unknown>;
    /** @deprecated use `ThirtyThree$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ThirtyThree$Outbound, z.ZodTypeDef, ThirtyThree>;
    /** @deprecated use `ThirtyThree$Outbound` instead. */
    type Outbound = ThirtyThree$Outbound;
}
export declare function thirtyThreeToJSON(thirtyThree: ThirtyThree): string;
export declare function thirtyThreeFromJSON(jsonString: string): SafeParseResult<ThirtyThree, SDKValidationError>;
/** @internal */
export declare const UserEventPayload32Team$inboundSchema: z.ZodType<UserEventPayload32Team, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayload32Team$Outbound = {
    id: string;
    name: string;
};
/** @internal */
export declare const UserEventPayload32Team$outboundSchema: z.ZodType<UserEventPayload32Team$Outbound, z.ZodTypeDef, UserEventPayload32Team>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload32Team$ {
    /** @deprecated use `UserEventPayload32Team$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayload32Team, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayload32Team$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayload32Team$Outbound, z.ZodTypeDef, UserEventPayload32Team>;
    /** @deprecated use `UserEventPayload32Team$Outbound` instead. */
    type Outbound = UserEventPayload32Team$Outbound;
}
export declare function userEventPayload32TeamToJSON(userEventPayload32Team: UserEventPayload32Team): string;
export declare function userEventPayload32TeamFromJSON(jsonString: string): SafeParseResult<UserEventPayload32Team, SDKValidationError>;
/** @internal */
export declare const UserEventPayload32Configuration$inboundSchema: z.ZodType<UserEventPayload32Configuration, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayload32Configuration$Outbound = {
    id: string;
    name?: string | undefined;
};
/** @internal */
export declare const UserEventPayload32Configuration$outboundSchema: z.ZodType<UserEventPayload32Configuration$Outbound, z.ZodTypeDef, UserEventPayload32Configuration>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload32Configuration$ {
    /** @deprecated use `UserEventPayload32Configuration$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayload32Configuration, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayload32Configuration$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayload32Configuration$Outbound, z.ZodTypeDef, UserEventPayload32Configuration>;
    /** @deprecated use `UserEventPayload32Configuration$Outbound` instead. */
    type Outbound = UserEventPayload32Configuration$Outbound;
}
export declare function userEventPayload32ConfigurationToJSON(userEventPayload32Configuration: UserEventPayload32Configuration): string;
export declare function userEventPayload32ConfigurationFromJSON(jsonString: string): SafeParseResult<UserEventPayload32Configuration, SDKValidationError>;
/** @internal */
export declare const ThirtyTwo$inboundSchema: z.ZodType<ThirtyTwo, z.ZodTypeDef, unknown>;
/** @internal */
export type ThirtyTwo$Outbound = {
    team: UserEventPayload32Team$Outbound;
    configuration: UserEventPayload32Configuration$Outbound;
    newName: string;
};
/** @internal */
export declare const ThirtyTwo$outboundSchema: z.ZodType<ThirtyTwo$Outbound, z.ZodTypeDef, ThirtyTwo>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ThirtyTwo$ {
    /** @deprecated use `ThirtyTwo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ThirtyTwo, z.ZodTypeDef, unknown>;
    /** @deprecated use `ThirtyTwo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ThirtyTwo$Outbound, z.ZodTypeDef, ThirtyTwo>;
    /** @deprecated use `ThirtyTwo$Outbound` instead. */
    type Outbound = ThirtyTwo$Outbound;
}
export declare function thirtyTwoToJSON(thirtyTwo: ThirtyTwo): string;
export declare function thirtyTwoFromJSON(jsonString: string): SafeParseResult<ThirtyTwo, SDKValidationError>;
/** @internal */
export declare const UserEventPayloadTeam$inboundSchema: z.ZodType<UserEventPayloadTeam, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayloadTeam$Outbound = {
    id: string;
    name: string;
};
/** @internal */
export declare const UserEventPayloadTeam$outboundSchema: z.ZodType<UserEventPayloadTeam$Outbound, z.ZodTypeDef, UserEventPayloadTeam>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayloadTeam$ {
    /** @deprecated use `UserEventPayloadTeam$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayloadTeam, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayloadTeam$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayloadTeam$Outbound, z.ZodTypeDef, UserEventPayloadTeam>;
    /** @deprecated use `UserEventPayloadTeam$Outbound` instead. */
    type Outbound = UserEventPayloadTeam$Outbound;
}
export declare function userEventPayloadTeamToJSON(userEventPayloadTeam: UserEventPayloadTeam): string;
export declare function userEventPayloadTeamFromJSON(jsonString: string): SafeParseResult<UserEventPayloadTeam, SDKValidationError>;
/** @internal */
export declare const UserEventPayloadConfiguration$inboundSchema: z.ZodType<UserEventPayloadConfiguration, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayloadConfiguration$Outbound = {
    id: string;
    name?: string | undefined;
};
/** @internal */
export declare const UserEventPayloadConfiguration$outboundSchema: z.ZodType<UserEventPayloadConfiguration$Outbound, z.ZodTypeDef, UserEventPayloadConfiguration>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayloadConfiguration$ {
    /** @deprecated use `UserEventPayloadConfiguration$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayloadConfiguration, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayloadConfiguration$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayloadConfiguration$Outbound, z.ZodTypeDef, UserEventPayloadConfiguration>;
    /** @deprecated use `UserEventPayloadConfiguration$Outbound` instead. */
    type Outbound = UserEventPayloadConfiguration$Outbound;
}
export declare function userEventPayloadConfigurationToJSON(userEventPayloadConfiguration: UserEventPayloadConfiguration): string;
export declare function userEventPayloadConfigurationFromJSON(jsonString: string): SafeParseResult<UserEventPayloadConfiguration, SDKValidationError>;
/** @internal */
export declare const UserEventPayload31Project$inboundSchema: z.ZodType<UserEventPayload31Project, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayload31Project$Outbound = {
    id: string;
    name?: string | undefined;
};
/** @internal */
export declare const UserEventPayload31Project$outboundSchema: z.ZodType<UserEventPayload31Project$Outbound, z.ZodTypeDef, UserEventPayload31Project>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload31Project$ {
    /** @deprecated use `UserEventPayload31Project$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayload31Project, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayload31Project$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayload31Project$Outbound, z.ZodTypeDef, UserEventPayload31Project>;
    /** @deprecated use `UserEventPayload31Project$Outbound` instead. */
    type Outbound = UserEventPayload31Project$Outbound;
}
export declare function userEventPayload31ProjectToJSON(userEventPayload31Project: UserEventPayload31Project): string;
export declare function userEventPayload31ProjectFromJSON(jsonString: string): SafeParseResult<UserEventPayload31Project, SDKValidationError>;
/** @internal */
export declare const ThirtyOne$inboundSchema: z.ZodType<ThirtyOne, z.ZodTypeDef, unknown>;
/** @internal */
export type ThirtyOne$Outbound = {
    team: UserEventPayloadTeam$Outbound;
    configuration: UserEventPayloadConfiguration$Outbound;
    project: UserEventPayload31Project$Outbound;
};
/** @internal */
export declare const ThirtyOne$outboundSchema: z.ZodType<ThirtyOne$Outbound, z.ZodTypeDef, ThirtyOne>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ThirtyOne$ {
    /** @deprecated use `ThirtyOne$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ThirtyOne, z.ZodTypeDef, unknown>;
    /** @deprecated use `ThirtyOne$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ThirtyOne$Outbound, z.ZodTypeDef, ThirtyOne>;
    /** @deprecated use `ThirtyOne$Outbound` instead. */
    type Outbound = ThirtyOne$Outbound;
}
export declare function thirtyOneToJSON(thirtyOne: ThirtyOne): string;
export declare function thirtyOneFromJSON(jsonString: string): SafeParseResult<ThirtyOne, SDKValidationError>;
/** @internal */
export declare const PayloadTeam$inboundSchema: z.ZodType<PayloadTeam, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadTeam$Outbound = {
    id: string;
    name: string;
};
/** @internal */
export declare const PayloadTeam$outboundSchema: z.ZodType<PayloadTeam$Outbound, z.ZodTypeDef, PayloadTeam>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadTeam$ {
    /** @deprecated use `PayloadTeam$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadTeam, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadTeam$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadTeam$Outbound, z.ZodTypeDef, PayloadTeam>;
    /** @deprecated use `PayloadTeam$Outbound` instead. */
    type Outbound = PayloadTeam$Outbound;
}
export declare function payloadTeamToJSON(payloadTeam: PayloadTeam): string;
export declare function payloadTeamFromJSON(jsonString: string): SafeParseResult<PayloadTeam, SDKValidationError>;
/** @internal */
export declare const PayloadConfiguration$inboundSchema: z.ZodType<PayloadConfiguration, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadConfiguration$Outbound = {
    id: string;
    name?: string | undefined;
};
/** @internal */
export declare const PayloadConfiguration$outboundSchema: z.ZodType<PayloadConfiguration$Outbound, z.ZodTypeDef, PayloadConfiguration>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadConfiguration$ {
    /** @deprecated use `PayloadConfiguration$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadConfiguration, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadConfiguration$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadConfiguration$Outbound, z.ZodTypeDef, PayloadConfiguration>;
    /** @deprecated use `PayloadConfiguration$Outbound` instead. */
    type Outbound = PayloadConfiguration$Outbound;
}
export declare function payloadConfigurationToJSON(payloadConfiguration: PayloadConfiguration): string;
export declare function payloadConfigurationFromJSON(jsonString: string): SafeParseResult<PayloadConfiguration, SDKValidationError>;
/** @internal */
export declare const UserEventPayloadProject$inboundSchema: z.ZodType<UserEventPayloadProject, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayloadProject$Outbound = {
    id: string;
    name?: string | undefined;
};
/** @internal */
export declare const UserEventPayloadProject$outboundSchema: z.ZodType<UserEventPayloadProject$Outbound, z.ZodTypeDef, UserEventPayloadProject>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayloadProject$ {
    /** @deprecated use `UserEventPayloadProject$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayloadProject, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayloadProject$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayloadProject$Outbound, z.ZodTypeDef, UserEventPayloadProject>;
    /** @deprecated use `UserEventPayloadProject$Outbound` instead. */
    type Outbound = UserEventPayloadProject$Outbound;
}
export declare function userEventPayloadProjectToJSON(userEventPayloadProject: UserEventPayloadProject): string;
export declare function userEventPayloadProjectFromJSON(jsonString: string): SafeParseResult<UserEventPayloadProject, SDKValidationError>;
/** @internal */
export declare const Thirty$inboundSchema: z.ZodType<Thirty, z.ZodTypeDef, unknown>;
/** @internal */
export type Thirty$Outbound = {
    team: PayloadTeam$Outbound;
    configuration: PayloadConfiguration$Outbound;
    project: UserEventPayloadProject$Outbound;
    buildsEnabled?: boolean | undefined;
    passive?: boolean | undefined;
};
/** @internal */
export declare const Thirty$outboundSchema: z.ZodType<Thirty$Outbound, z.ZodTypeDef, Thirty>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Thirty$ {
    /** @deprecated use `Thirty$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Thirty, z.ZodTypeDef, unknown>;
    /** @deprecated use `Thirty$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Thirty$Outbound, z.ZodTypeDef, Thirty>;
    /** @deprecated use `Thirty$Outbound` instead. */
    type Outbound = Thirty$Outbound;
}
export declare function thirtyToJSON(thirty: Thirty): string;
export declare function thirtyFromJSON(jsonString: string): SafeParseResult<Thirty, SDKValidationError>;
/** @internal */
export declare const UserEventPayload29Team$inboundSchema: z.ZodType<UserEventPayload29Team, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayload29Team$Outbound = {
    id: string;
    name: string;
};
/** @internal */
export declare const UserEventPayload29Team$outboundSchema: z.ZodType<UserEventPayload29Team$Outbound, z.ZodTypeDef, UserEventPayload29Team>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload29Team$ {
    /** @deprecated use `UserEventPayload29Team$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayload29Team, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayload29Team$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayload29Team$Outbound, z.ZodTypeDef, UserEventPayload29Team>;
    /** @deprecated use `UserEventPayload29Team$Outbound` instead. */
    type Outbound = UserEventPayload29Team$Outbound;
}
export declare function userEventPayload29TeamToJSON(userEventPayload29Team: UserEventPayload29Team): string;
export declare function userEventPayload29TeamFromJSON(jsonString: string): SafeParseResult<UserEventPayload29Team, SDKValidationError>;
/** @internal */
export declare const Configuration$inboundSchema: z.ZodType<Configuration, z.ZodTypeDef, unknown>;
/** @internal */
export type Configuration$Outbound = {
    id: string;
    name?: string | undefined;
};
/** @internal */
export declare const Configuration$outboundSchema: z.ZodType<Configuration$Outbound, z.ZodTypeDef, Configuration>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Configuration$ {
    /** @deprecated use `Configuration$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Configuration, z.ZodTypeDef, unknown>;
    /** @deprecated use `Configuration$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Configuration$Outbound, z.ZodTypeDef, Configuration>;
    /** @deprecated use `Configuration$Outbound` instead. */
    type Outbound = Configuration$Outbound;
}
export declare function configurationToJSON(configuration: Configuration): string;
export declare function configurationFromJSON(jsonString: string): SafeParseResult<Configuration, SDKValidationError>;
/** @internal */
export declare const PayloadProject$inboundSchema: z.ZodType<PayloadProject, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadProject$Outbound = {
    id: string;
    name?: string | undefined;
};
/** @internal */
export declare const PayloadProject$outboundSchema: z.ZodType<PayloadProject$Outbound, z.ZodTypeDef, PayloadProject>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadProject$ {
    /** @deprecated use `PayloadProject$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadProject, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadProject$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadProject$Outbound, z.ZodTypeDef, PayloadProject>;
    /** @deprecated use `PayloadProject$Outbound` instead. */
    type Outbound = PayloadProject$Outbound;
}
export declare function payloadProjectToJSON(payloadProject: PayloadProject): string;
export declare function payloadProjectFromJSON(jsonString: string): SafeParseResult<PayloadProject, SDKValidationError>;
/** @internal */
export declare const TwentyNine$inboundSchema: z.ZodType<TwentyNine, z.ZodTypeDef, unknown>;
/** @internal */
export type TwentyNine$Outbound = {
    team: UserEventPayload29Team$Outbound;
    configuration: Configuration$Outbound;
    project: PayloadProject$Outbound;
    buildsEnabled?: boolean | undefined;
};
/** @internal */
export declare const TwentyNine$outboundSchema: z.ZodType<TwentyNine$Outbound, z.ZodTypeDef, TwentyNine>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TwentyNine$ {
    /** @deprecated use `TwentyNine$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TwentyNine, z.ZodTypeDef, unknown>;
    /** @deprecated use `TwentyNine$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TwentyNine$Outbound, z.ZodTypeDef, TwentyNine>;
    /** @deprecated use `TwentyNine$Outbound` instead. */
    type Outbound = TwentyNine$Outbound;
}
export declare function twentyNineToJSON(twentyNine: TwentyNine): string;
export declare function twentyNineFromJSON(jsonString: string): SafeParseResult<TwentyNine, SDKValidationError>;
/** @internal */
export declare const TwentyEight$inboundSchema: z.ZodType<TwentyEight, z.ZodTypeDef, unknown>;
/** @internal */
export type TwentyEight$Outbound = {
    suffix: string;
};
/** @internal */
export declare const TwentyEight$outboundSchema: z.ZodType<TwentyEight$Outbound, z.ZodTypeDef, TwentyEight>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TwentyEight$ {
    /** @deprecated use `TwentyEight$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TwentyEight, z.ZodTypeDef, unknown>;
    /** @deprecated use `TwentyEight$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TwentyEight$Outbound, z.ZodTypeDef, TwentyEight>;
    /** @deprecated use `TwentyEight$Outbound` instead. */
    type Outbound = TwentyEight$Outbound;
}
export declare function twentyEightToJSON(twentyEight: TwentyEight): string;
export declare function twentyEightFromJSON(jsonString: string): SafeParseResult<TwentyEight, SDKValidationError>;
/** @internal */
export declare const TwentySeven$inboundSchema: z.ZodType<TwentySeven, z.ZodTypeDef, unknown>;
/** @internal */
export type TwentySeven$Outbound = {
    status: string;
    suffix: string;
};
/** @internal */
export declare const TwentySeven$outboundSchema: z.ZodType<TwentySeven$Outbound, z.ZodTypeDef, TwentySeven>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TwentySeven$ {
    /** @deprecated use `TwentySeven$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TwentySeven, z.ZodTypeDef, unknown>;
    /** @deprecated use `TwentySeven$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TwentySeven$Outbound, z.ZodTypeDef, TwentySeven>;
    /** @deprecated use `TwentySeven$Outbound` instead. */
    type Outbound = TwentySeven$Outbound;
}
export declare function twentySevenToJSON(twentySeven: TwentySeven): string;
export declare function twentySevenFromJSON(jsonString: string): SafeParseResult<TwentySeven, SDKValidationError>;
/** @internal */
export declare const TwentySix$inboundSchema: z.ZodType<TwentySix, z.ZodTypeDef, unknown>;
/** @internal */
export type TwentySix$Outbound = {
    reason?: string | undefined;
    suffix: string;
};
/** @internal */
export declare const TwentySix$outboundSchema: z.ZodType<TwentySix$Outbound, z.ZodTypeDef, TwentySix>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TwentySix$ {
    /** @deprecated use `TwentySix$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TwentySix, z.ZodTypeDef, unknown>;
    /** @deprecated use `TwentySix$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TwentySix$Outbound, z.ZodTypeDef, TwentySix>;
    /** @deprecated use `TwentySix$Outbound` instead. */
    type Outbound = TwentySix$Outbound;
}
export declare function twentySixToJSON(twentySix: TwentySix): string;
export declare function twentySixFromJSON(jsonString: string): SafeParseResult<TwentySix, SDKValidationError>;
/** @internal */
export declare const TwentyFive$inboundSchema: z.ZodType<TwentyFive, z.ZodTypeDef, unknown>;
/** @internal */
export type TwentyFive$Outbound = {
    cn?: string | undefined;
    cns?: Array<string> | undefined;
};
/** @internal */
export declare const TwentyFive$outboundSchema: z.ZodType<TwentyFive$Outbound, z.ZodTypeDef, TwentyFive>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TwentyFive$ {
    /** @deprecated use `TwentyFive$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TwentyFive, z.ZodTypeDef, unknown>;
    /** @deprecated use `TwentyFive$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TwentyFive$Outbound, z.ZodTypeDef, TwentyFive>;
    /** @deprecated use `TwentyFive$Outbound` instead. */
    type Outbound = TwentyFive$Outbound;
}
export declare function twentyFiveToJSON(twentyFive: TwentyFive): string;
export declare function twentyFiveFromJSON(jsonString: string): SafeParseResult<TwentyFive, SDKValidationError>;
/** @internal */
export declare const TwentyFour$inboundSchema: z.ZodType<TwentyFour, z.ZodTypeDef, unknown>;
/** @internal */
export type TwentyFour$Outbound = {
    id: string;
    cn?: string | undefined;
    cns?: Array<string> | undefined;
};
/** @internal */
export declare const TwentyFour$outboundSchema: z.ZodType<TwentyFour$Outbound, z.ZodTypeDef, TwentyFour>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TwentyFour$ {
    /** @deprecated use `TwentyFour$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TwentyFour, z.ZodTypeDef, unknown>;
    /** @deprecated use `TwentyFour$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TwentyFour$Outbound, z.ZodTypeDef, TwentyFour>;
    /** @deprecated use `TwentyFour$Outbound` instead. */
    type Outbound = TwentyFour$Outbound;
}
export declare function twentyFourToJSON(twentyFour: TwentyFour): string;
export declare function twentyFourFromJSON(jsonString: string): SafeParseResult<TwentyFour, SDKValidationError>;
/** @internal */
export declare const TwentyThree$inboundSchema: z.ZodType<TwentyThree, z.ZodTypeDef, unknown>;
/** @internal */
export type TwentyThree$Outbound = {
    src: string;
    dst: string;
};
/** @internal */
export declare const TwentyThree$outboundSchema: z.ZodType<TwentyThree$Outbound, z.ZodTypeDef, TwentyThree>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TwentyThree$ {
    /** @deprecated use `TwentyThree$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TwentyThree, z.ZodTypeDef, unknown>;
    /** @deprecated use `TwentyThree$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TwentyThree$Outbound, z.ZodTypeDef, TwentyThree>;
    /** @deprecated use `TwentyThree$Outbound` instead. */
    type Outbound = TwentyThree$Outbound;
}
export declare function twentyThreeToJSON(twentyThree: TwentyThree): string;
export declare function twentyThreeFromJSON(jsonString: string): SafeParseResult<TwentyThree, SDKValidationError>;
/** @internal */
export declare const PayloadOldTeam$inboundSchema: z.ZodType<PayloadOldTeam, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadOldTeam$Outbound = {
    name: string;
};
/** @internal */
export declare const PayloadOldTeam$outboundSchema: z.ZodType<PayloadOldTeam$Outbound, z.ZodTypeDef, PayloadOldTeam>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadOldTeam$ {
    /** @deprecated use `PayloadOldTeam$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadOldTeam, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadOldTeam$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadOldTeam$Outbound, z.ZodTypeDef, PayloadOldTeam>;
    /** @deprecated use `PayloadOldTeam$Outbound` instead. */
    type Outbound = PayloadOldTeam$Outbound;
}
export declare function payloadOldTeamToJSON(payloadOldTeam: PayloadOldTeam): string;
export declare function payloadOldTeamFromJSON(jsonString: string): SafeParseResult<PayloadOldTeam, SDKValidationError>;
/** @internal */
export declare const PayloadNewTeam$inboundSchema: z.ZodType<PayloadNewTeam, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadNewTeam$Outbound = {
    name: string;
};
/** @internal */
export declare const PayloadNewTeam$outboundSchema: z.ZodType<PayloadNewTeam$Outbound, z.ZodTypeDef, PayloadNewTeam>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadNewTeam$ {
    /** @deprecated use `PayloadNewTeam$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadNewTeam, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadNewTeam$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadNewTeam$Outbound, z.ZodTypeDef, PayloadNewTeam>;
    /** @deprecated use `PayloadNewTeam$Outbound` instead. */
    type Outbound = PayloadNewTeam$Outbound;
}
export declare function payloadNewTeamToJSON(payloadNewTeam: PayloadNewTeam): string;
export declare function payloadNewTeamFromJSON(jsonString: string): SafeParseResult<PayloadNewTeam, SDKValidationError>;
/** @internal */
export declare const TwentyTwo$inboundSchema: z.ZodType<TwentyTwo, z.ZodTypeDef, unknown>;
/** @internal */
export type TwentyTwo$Outbound = {
    id: string;
    oldTeam?: PayloadOldTeam$Outbound | undefined;
    newTeam?: PayloadNewTeam$Outbound | undefined;
};
/** @internal */
export declare const TwentyTwo$outboundSchema: z.ZodType<TwentyTwo$Outbound, z.ZodTypeDef, TwentyTwo>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TwentyTwo$ {
    /** @deprecated use `TwentyTwo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TwentyTwo, z.ZodTypeDef, unknown>;
    /** @deprecated use `TwentyTwo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TwentyTwo$Outbound, z.ZodTypeDef, TwentyTwo>;
    /** @deprecated use `TwentyTwo$Outbound` instead. */
    type Outbound = TwentyTwo$Outbound;
}
export declare function twentyTwoToJSON(twentyTwo: TwentyTwo): string;
export declare function twentyTwoFromJSON(jsonString: string): SafeParseResult<TwentyTwo, SDKValidationError>;
/** @internal */
export declare const TwentyOne$inboundSchema: z.ZodType<TwentyOne, z.ZodTypeDef, unknown>;
/** @internal */
export type TwentyOne$Outbound = {
    cn?: string | undefined;
    cns?: Array<string> | undefined;
    id?: string | undefined;
};
/** @internal */
export declare const TwentyOne$outboundSchema: z.ZodType<TwentyOne$Outbound, z.ZodTypeDef, TwentyOne>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TwentyOne$ {
    /** @deprecated use `TwentyOne$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TwentyOne, z.ZodTypeDef, unknown>;
    /** @deprecated use `TwentyOne$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TwentyOne$Outbound, z.ZodTypeDef, TwentyOne>;
    /** @deprecated use `TwentyOne$Outbound` instead. */
    type Outbound = TwentyOne$Outbound;
}
export declare function twentyOneToJSON(twentyOne: TwentyOne): string;
export declare function twentyOneFromJSON(jsonString: string): SafeParseResult<TwentyOne, SDKValidationError>;
/** @internal */
export declare const Twenty$inboundSchema: z.ZodType<Twenty, z.ZodTypeDef, unknown>;
/** @internal */
export type Twenty$Outbound = {
    cn?: string | undefined;
    cns?: Array<string> | undefined;
    custom: boolean;
    id?: string | undefined;
};
/** @internal */
export declare const Twenty$outboundSchema: z.ZodType<Twenty$Outbound, z.ZodTypeDef, Twenty>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Twenty$ {
    /** @deprecated use `Twenty$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Twenty, z.ZodTypeDef, unknown>;
    /** @deprecated use `Twenty$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Twenty$Outbound, z.ZodTypeDef, Twenty>;
    /** @deprecated use `Twenty$Outbound` instead. */
    type Outbound = Twenty$Outbound;
}
export declare function twentyToJSON(twenty: Twenty): string;
export declare function twentyFromJSON(jsonString: string): SafeParseResult<Twenty, SDKValidationError>;
/** @internal */
export declare const Nineteen$inboundSchema: z.ZodType<Nineteen, z.ZodTypeDef, unknown>;
/** @internal */
export type Nineteen$Outbound = {
    avatar?: string | undefined;
};
/** @internal */
export declare const Nineteen$outboundSchema: z.ZodType<Nineteen$Outbound, z.ZodTypeDef, Nineteen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Nineteen$ {
    /** @deprecated use `Nineteen$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Nineteen, z.ZodTypeDef, unknown>;
    /** @deprecated use `Nineteen$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Nineteen$Outbound, z.ZodTypeDef, Nineteen>;
    /** @deprecated use `Nineteen$Outbound` instead. */
    type Outbound = Nineteen$Outbound;
}
export declare function nineteenToJSON(nineteen: Nineteen): string;
export declare function nineteenFromJSON(jsonString: string): SafeParseResult<Nineteen, SDKValidationError>;
/** @internal */
export declare const Eighteen$inboundSchema: z.ZodType<Eighteen, z.ZodTypeDef, unknown>;
/** @internal */
export type Eighteen$Outbound = {
    projectName: string;
    autoExposeSystemEnvs: boolean;
};
/** @internal */
export declare const Eighteen$outboundSchema: z.ZodType<Eighteen$Outbound, z.ZodTypeDef, Eighteen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Eighteen$ {
    /** @deprecated use `Eighteen$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Eighteen, z.ZodTypeDef, unknown>;
    /** @deprecated use `Eighteen$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Eighteen$Outbound, z.ZodTypeDef, Eighteen>;
    /** @deprecated use `Eighteen$Outbound` instead. */
    type Outbound = Eighteen$Outbound;
}
export declare function eighteenToJSON(eighteen: Eighteen): string;
export declare function eighteenFromJSON(jsonString: string): SafeParseResult<Eighteen, SDKValidationError>;
/** @internal */
export declare const Seventeen$inboundSchema: z.ZodType<Seventeen, z.ZodTypeDef, unknown>;
/** @internal */
export type Seventeen$Outbound = {
    alias: string;
    deploymentUrl: string;
};
/** @internal */
export declare const Seventeen$outboundSchema: z.ZodType<Seventeen$Outbound, z.ZodTypeDef, Seventeen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Seventeen$ {
    /** @deprecated use `Seventeen$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Seventeen, z.ZodTypeDef, unknown>;
    /** @deprecated use `Seventeen$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Seventeen$Outbound, z.ZodTypeDef, Seventeen>;
    /** @deprecated use `Seventeen$Outbound` instead. */
    type Outbound = Seventeen$Outbound;
}
export declare function seventeenToJSON(seventeen: Seventeen): string;
export declare function seventeenFromJSON(jsonString: string): SafeParseResult<Seventeen, SDKValidationError>;
/** @internal */
export declare const Sixteen$inboundSchema: z.ZodType<Sixteen, z.ZodTypeDef, unknown>;
/** @internal */
export type Sixteen$Outbound = {
    name?: string | undefined;
    alias: string;
    aliasId: string;
    deploymentId: string | null;
};
/** @internal */
export declare const Sixteen$outboundSchema: z.ZodType<Sixteen$Outbound, z.ZodTypeDef, Sixteen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Sixteen$ {
    /** @deprecated use `Sixteen$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Sixteen, z.ZodTypeDef, unknown>;
    /** @deprecated use `Sixteen$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Sixteen$Outbound, z.ZodTypeDef, Sixteen>;
    /** @deprecated use `Sixteen$Outbound` instead. */
    type Outbound = Sixteen$Outbound;
}
export declare function sixteenToJSON(sixteen: Sixteen): string;
export declare function sixteenFromJSON(jsonString: string): SafeParseResult<Sixteen, SDKValidationError>;
/** @internal */
export declare const OldTeam$inboundSchema: z.ZodType<OldTeam, z.ZodTypeDef, unknown>;
/** @internal */
export type OldTeam$Outbound = {
    name: string;
};
/** @internal */
export declare const OldTeam$outboundSchema: z.ZodType<OldTeam$Outbound, z.ZodTypeDef, OldTeam>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OldTeam$ {
    /** @deprecated use `OldTeam$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OldTeam, z.ZodTypeDef, unknown>;
    /** @deprecated use `OldTeam$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OldTeam$Outbound, z.ZodTypeDef, OldTeam>;
    /** @deprecated use `OldTeam$Outbound` instead. */
    type Outbound = OldTeam$Outbound;
}
export declare function oldTeamToJSON(oldTeam: OldTeam): string;
export declare function oldTeamFromJSON(jsonString: string): SafeParseResult<OldTeam, SDKValidationError>;
/** @internal */
export declare const NewTeam$inboundSchema: z.ZodType<NewTeam, z.ZodTypeDef, unknown>;
/** @internal */
export type NewTeam$Outbound = {
    name: string;
};
/** @internal */
export declare const NewTeam$outboundSchema: z.ZodType<NewTeam$Outbound, z.ZodTypeDef, NewTeam>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NewTeam$ {
    /** @deprecated use `NewTeam$inboundSchema` instead. */
    const inboundSchema: z.ZodType<NewTeam, z.ZodTypeDef, unknown>;
    /** @deprecated use `NewTeam$outboundSchema` instead. */
    const outboundSchema: z.ZodType<NewTeam$Outbound, z.ZodTypeDef, NewTeam>;
    /** @deprecated use `NewTeam$Outbound` instead. */
    type Outbound = NewTeam$Outbound;
}
export declare function newTeamToJSON(newTeam: NewTeam): string;
export declare function newTeamFromJSON(jsonString: string): SafeParseResult<NewTeam, SDKValidationError>;
/** @internal */
export declare const Fifteen$inboundSchema: z.ZodType<Fifteen, z.ZodTypeDef, unknown>;
/** @internal */
export type Fifteen$Outbound = {
    name?: string | undefined;
    alias: string;
    oldTeam?: OldTeam$Outbound | undefined;
    newTeam?: NewTeam$Outbound | undefined;
};
/** @internal */
export declare const Fifteen$outboundSchema: z.ZodType<Fifteen$Outbound, z.ZodTypeDef, Fifteen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Fifteen$ {
    /** @deprecated use `Fifteen$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Fifteen, z.ZodTypeDef, unknown>;
    /** @deprecated use `Fifteen$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Fifteen$Outbound, z.ZodTypeDef, Fifteen>;
    /** @deprecated use `Fifteen$Outbound` instead. */
    type Outbound = Fifteen$Outbound;
}
export declare function fifteenToJSON(fifteen: Fifteen): string;
export declare function fifteenFromJSON(jsonString: string): SafeParseResult<Fifteen, SDKValidationError>;
/** @internal */
export declare const Fourteen$inboundSchema: z.ZodType<Fourteen, z.ZodTypeDef, unknown>;
/** @internal */
export type Fourteen$Outbound = {
    alias?: string | undefined;
    email?: string | undefined;
};
/** @internal */
export declare const Fourteen$outboundSchema: z.ZodType<Fourteen$Outbound, z.ZodTypeDef, Fourteen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Fourteen$ {
    /** @deprecated use `Fourteen$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Fourteen, z.ZodTypeDef, unknown>;
    /** @deprecated use `Fourteen$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Fourteen$Outbound, z.ZodTypeDef, Fourteen>;
    /** @deprecated use `Fourteen$Outbound` instead. */
    type Outbound = Fourteen$Outbound;
}
export declare function fourteenToJSON(fourteen: Fourteen): string;
export declare function fourteenFromJSON(jsonString: string): SafeParseResult<Fourteen, SDKValidationError>;
/** @internal */
export declare const Thirteen$inboundSchema: z.ZodType<Thirteen, z.ZodTypeDef, unknown>;
/** @internal */
export type Thirteen$Outbound = {
    alias?: string | undefined;
    email?: string | undefined;
    username?: string | undefined;
};
/** @internal */
export declare const Thirteen$outboundSchema: z.ZodType<Thirteen$Outbound, z.ZodTypeDef, Thirteen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Thirteen$ {
    /** @deprecated use `Thirteen$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Thirteen, z.ZodTypeDef, unknown>;
    /** @deprecated use `Thirteen$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Thirteen$Outbound, z.ZodTypeDef, Thirteen>;
    /** @deprecated use `Thirteen$Outbound` instead. */
    type Outbound = Thirteen$Outbound;
}
export declare function thirteenToJSON(thirteen: Thirteen): string;
export declare function thirteenFromJSON(jsonString: string): SafeParseResult<Thirteen, SDKValidationError>;
/** @internal */
export declare const PayloadAction$inboundSchema: z.ZodNativeEnum<typeof PayloadAction>;
/** @internal */
export declare const PayloadAction$outboundSchema: z.ZodNativeEnum<typeof PayloadAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadAction$ {
    /** @deprecated use `PayloadAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Created: "created";
        readonly Removed: "removed";
    }>;
    /** @deprecated use `PayloadAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Created: "created";
        readonly Removed: "removed";
    }>;
}
/** @internal */
export declare const Twelve$inboundSchema: z.ZodType<Twelve, z.ZodTypeDef, unknown>;
/** @internal */
export type Twelve$Outbound = {
    projectName: string;
    alias: string;
    action: string;
};
/** @internal */
export declare const Twelve$outboundSchema: z.ZodType<Twelve$Outbound, z.ZodTypeDef, Twelve>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Twelve$ {
    /** @deprecated use `Twelve$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Twelve, z.ZodTypeDef, unknown>;
    /** @deprecated use `Twelve$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Twelve$Outbound, z.ZodTypeDef, Twelve>;
    /** @deprecated use `Twelve$Outbound` instead. */
    type Outbound = Twelve$Outbound;
}
export declare function twelveToJSON(twelve: Twelve): string;
export declare function twelveFromJSON(jsonString: string): SafeParseResult<Twelve, SDKValidationError>;
/** @internal */
export declare const Eleven$inboundSchema: z.ZodType<Eleven, z.ZodTypeDef, unknown>;
/** @internal */
export type Eleven$Outbound = {
    alias?: string | undefined;
    aliasId?: string | undefined;
    userId?: string | undefined;
    username?: string | undefined;
};
/** @internal */
export declare const Eleven$outboundSchema: z.ZodType<Eleven$Outbound, z.ZodTypeDef, Eleven>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Eleven$ {
    /** @deprecated use `Eleven$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Eleven, z.ZodTypeDef, unknown>;
    /** @deprecated use `Eleven$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Eleven$Outbound, z.ZodTypeDef, Eleven>;
    /** @deprecated use `Eleven$Outbound` instead. */
    type Outbound = Eleven$Outbound;
}
export declare function elevenToJSON(eleven: Eleven): string;
export declare function elevenFromJSON(jsonString: string): SafeParseResult<Eleven, SDKValidationError>;
/** @internal */
export declare const Ten$inboundSchema: z.ZodType<Ten, z.ZodTypeDef, unknown>;
/** @internal */
export type Ten$Outbound = {
    alias?: string | undefined;
    userId?: string | undefined;
    username?: string | undefined;
};
/** @internal */
export declare const Ten$outboundSchema: z.ZodType<Ten$Outbound, z.ZodTypeDef, Ten>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Ten$ {
    /** @deprecated use `Ten$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Ten, z.ZodTypeDef, unknown>;
    /** @deprecated use `Ten$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Ten$Outbound, z.ZodTypeDef, Ten>;
    /** @deprecated use `Ten$Outbound` instead. */
    type Outbound = Ten$Outbound;
}
export declare function tenToJSON(ten: Ten): string;
export declare function tenFromJSON(jsonString: string): SafeParseResult<Ten, SDKValidationError>;
/** @internal */
export declare const Nine$inboundSchema: z.ZodType<Nine, z.ZodTypeDef, unknown>;
/** @internal */
export type Nine$Outbound = {
    alias?: string | undefined;
};
/** @internal */
export declare const Nine$outboundSchema: z.ZodType<Nine$Outbound, z.ZodTypeDef, Nine>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Nine$ {
    /** @deprecated use `Nine$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Nine, z.ZodTypeDef, unknown>;
    /** @deprecated use `Nine$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Nine$Outbound, z.ZodTypeDef, Nine>;
    /** @deprecated use `Nine$Outbound` instead. */
    type Outbound = Nine$Outbound;
}
export declare function nineToJSON(nine: Nine): string;
export declare function nineFromJSON(jsonString: string): SafeParseResult<Nine, SDKValidationError>;
/** @internal */
export declare const Eight$inboundSchema: z.ZodType<Eight, z.ZodTypeDef, unknown>;
/** @internal */
export type Eight$Outbound = {
    aliasId?: string | undefined;
    alias?: string | undefined;
    projectName?: string | undefined;
};
/** @internal */
export declare const Eight$outboundSchema: z.ZodType<Eight$Outbound, z.ZodTypeDef, Eight>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Eight$ {
    /** @deprecated use `Eight$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Eight, z.ZodTypeDef, unknown>;
    /** @deprecated use `Eight$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Eight$Outbound, z.ZodTypeDef, Eight>;
    /** @deprecated use `Eight$Outbound` instead. */
    type Outbound = Eight$Outbound;
}
export declare function eightToJSON(eight: Eight): string;
export declare function eightFromJSON(jsonString: string): SafeParseResult<Eight, SDKValidationError>;
/** @internal */
export declare const Deployment$inboundSchema: z.ZodType<Deployment, z.ZodTypeDef, unknown>;
/** @internal */
export type Deployment$Outbound = {
    id: string;
    name: string;
    url: string;
    meta: {
        [k: string]: string;
    };
};
/** @internal */
export declare const Deployment$outboundSchema: z.ZodType<Deployment$Outbound, z.ZodTypeDef, Deployment>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Deployment$ {
    /** @deprecated use `Deployment$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Deployment, z.ZodTypeDef, unknown>;
    /** @deprecated use `Deployment$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Deployment$Outbound, z.ZodTypeDef, Deployment>;
    /** @deprecated use `Deployment$Outbound` instead. */
    type Outbound = Deployment$Outbound;
}
export declare function deploymentToJSON(deployment: Deployment): string;
export declare function deploymentFromJSON(jsonString: string): SafeParseResult<Deployment, SDKValidationError>;
/** @internal */
export declare const Seven$inboundSchema: z.ZodType<Seven, z.ZodTypeDef, unknown>;
/** @internal */
export type Seven$Outbound = {
    alias?: string | undefined;
    deployment?: Deployment$Outbound | null | undefined;
    ruleCount?: number | undefined;
    deploymentUrl?: string | undefined;
    aliasId?: string | undefined;
    deploymentId?: string | null | undefined;
    oldDeploymentId?: string | null | undefined;
    redirect?: string | undefined;
    redirectStatusCode?: number | null | undefined;
    target?: string | null | undefined;
    system?: boolean | undefined;
    aliasUpdatedAt?: number | undefined;
};
/** @internal */
export declare const Seven$outboundSchema: z.ZodType<Seven$Outbound, z.ZodTypeDef, Seven>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Seven$ {
    /** @deprecated use `Seven$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Seven, z.ZodTypeDef, unknown>;
    /** @deprecated use `Seven$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Seven$Outbound, z.ZodTypeDef, Seven>;
    /** @deprecated use `Seven$Outbound` instead. */
    type Outbound = Seven$Outbound;
}
export declare function sevenToJSON(seven: Seven): string;
export declare function sevenFromJSON(jsonString: string): SafeParseResult<Seven, SDKValidationError>;
/** @internal */
export declare const UserEventPayload6AccessGroup$inboundSchema: z.ZodType<UserEventPayload6AccessGroup, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayload6AccessGroup$Outbound = {
    id: string;
    name: string;
};
/** @internal */
export declare const UserEventPayload6AccessGroup$outboundSchema: z.ZodType<UserEventPayload6AccessGroup$Outbound, z.ZodTypeDef, UserEventPayload6AccessGroup>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayload6AccessGroup$ {
    /** @deprecated use `UserEventPayload6AccessGroup$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayload6AccessGroup, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayload6AccessGroup$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayload6AccessGroup$Outbound, z.ZodTypeDef, UserEventPayload6AccessGroup>;
    /** @deprecated use `UserEventPayload6AccessGroup$Outbound` instead. */
    type Outbound = UserEventPayload6AccessGroup$Outbound;
}
export declare function userEventPayload6AccessGroupToJSON(userEventPayload6AccessGroup: UserEventPayload6AccessGroup): string;
export declare function userEventPayload6AccessGroupFromJSON(jsonString: string): SafeParseResult<UserEventPayload6AccessGroup, SDKValidationError>;
/** @internal */
export declare const Project$inboundSchema: z.ZodType<Project, z.ZodTypeDef, unknown>;
/** @internal */
export type Project$Outbound = {
    id: string;
    name?: string | undefined;
};
/** @internal */
export declare const Project$outboundSchema: z.ZodType<Project$Outbound, z.ZodTypeDef, Project>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Project$ {
    /** @deprecated use `Project$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Project, z.ZodTypeDef, unknown>;
    /** @deprecated use `Project$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Project$Outbound, z.ZodTypeDef, Project>;
    /** @deprecated use `Project$Outbound` instead. */
    type Outbound = Project$Outbound;
}
export declare function projectToJSON(project: Project): string;
export declare function projectFromJSON(jsonString: string): SafeParseResult<Project, SDKValidationError>;
/** @internal */
export declare const NextRole$inboundSchema: z.ZodNativeEnum<typeof NextRole>;
/** @internal */
export declare const NextRole$outboundSchema: z.ZodNativeEnum<typeof NextRole>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NextRole$ {
    /** @deprecated use `NextRole$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Admin: "ADMIN";
        readonly ProjectDeveloper: "PROJECT_DEVELOPER";
        readonly ProjectViewer: "PROJECT_VIEWER";
    }>;
    /** @deprecated use `NextRole$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Admin: "ADMIN";
        readonly ProjectDeveloper: "PROJECT_DEVELOPER";
        readonly ProjectViewer: "PROJECT_VIEWER";
    }>;
}
/** @internal */
export declare const PreviousRole$inboundSchema: z.ZodNativeEnum<typeof PreviousRole>;
/** @internal */
export declare const PreviousRole$outboundSchema: z.ZodNativeEnum<typeof PreviousRole>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PreviousRole$ {
    /** @deprecated use `PreviousRole$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Admin: "ADMIN";
        readonly ProjectDeveloper: "PROJECT_DEVELOPER";
        readonly ProjectViewer: "PROJECT_VIEWER";
    }>;
    /** @deprecated use `PreviousRole$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Admin: "ADMIN";
        readonly ProjectDeveloper: "PROJECT_DEVELOPER";
        readonly ProjectViewer: "PROJECT_VIEWER";
    }>;
}
/** @internal */
export declare const Six$inboundSchema: z.ZodType<Six, z.ZodTypeDef, unknown>;
/** @internal */
export type Six$Outbound = {
    accessGroup: UserEventPayload6AccessGroup$Outbound;
    project: Project$Outbound;
    next_role?: string | null | undefined;
    previous_role?: string | undefined;
};
/** @internal */
export declare const Six$outboundSchema: z.ZodType<Six$Outbound, z.ZodTypeDef, Six>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Six$ {
    /** @deprecated use `Six$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Six, z.ZodTypeDef, unknown>;
    /** @deprecated use `Six$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Six$Outbound, z.ZodTypeDef, Six>;
    /** @deprecated use `Six$Outbound` instead. */
    type Outbound = Six$Outbound;
}
export declare function sixToJSON(six: Six): string;
export declare function sixFromJSON(jsonString: string): SafeParseResult<Six, SDKValidationError>;
/** @internal */
export declare const UserEventPayloadAccessGroup$inboundSchema: z.ZodType<UserEventPayloadAccessGroup, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventPayloadAccessGroup$Outbound = {
    id: string;
    name?: string | undefined;
};
/** @internal */
export declare const UserEventPayloadAccessGroup$outboundSchema: z.ZodType<UserEventPayloadAccessGroup$Outbound, z.ZodTypeDef, UserEventPayloadAccessGroup>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventPayloadAccessGroup$ {
    /** @deprecated use `UserEventPayloadAccessGroup$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventPayloadAccessGroup, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventPayloadAccessGroup$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventPayloadAccessGroup$Outbound, z.ZodTypeDef, UserEventPayloadAccessGroup>;
    /** @deprecated use `UserEventPayloadAccessGroup$Outbound` instead. */
    type Outbound = UserEventPayloadAccessGroup$Outbound;
}
export declare function userEventPayloadAccessGroupToJSON(userEventPayloadAccessGroup: UserEventPayloadAccessGroup): string;
export declare function userEventPayloadAccessGroupFromJSON(jsonString: string): SafeParseResult<UserEventPayloadAccessGroup, SDKValidationError>;
/** @internal */
export declare const PayloadUser$inboundSchema: z.ZodType<PayloadUser, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadUser$Outbound = {
    id: string;
    username?: string | undefined;
};
/** @internal */
export declare const PayloadUser$outboundSchema: z.ZodType<PayloadUser$Outbound, z.ZodTypeDef, PayloadUser>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadUser$ {
    /** @deprecated use `PayloadUser$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadUser, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadUser$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadUser$Outbound, z.ZodTypeDef, PayloadUser>;
    /** @deprecated use `PayloadUser$Outbound` instead. */
    type Outbound = PayloadUser$Outbound;
}
export declare function payloadUserToJSON(payloadUser: PayloadUser): string;
export declare function payloadUserFromJSON(jsonString: string): SafeParseResult<PayloadUser, SDKValidationError>;
/** @internal */
export declare const Five$inboundSchema: z.ZodType<Five, z.ZodTypeDef, unknown>;
/** @internal */
export type Five$Outbound = {
    accessGroup: UserEventPayloadAccessGroup$Outbound;
    user: PayloadUser$Outbound;
    directoryType?: string | undefined;
};
/** @internal */
export declare const Five$outboundSchema: z.ZodType<Five$Outbound, z.ZodTypeDef, Five>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Five$ {
    /** @deprecated use `Five$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Five, z.ZodTypeDef, unknown>;
    /** @deprecated use `Five$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Five$Outbound, z.ZodTypeDef, Five>;
    /** @deprecated use `Five$Outbound` instead. */
    type Outbound = Five$Outbound;
}
export declare function fiveToJSON(five: Five): string;
export declare function fiveFromJSON(jsonString: string): SafeParseResult<Five, SDKValidationError>;
/** @internal */
export declare const PayloadAccessGroup$inboundSchema: z.ZodType<PayloadAccessGroup, z.ZodTypeDef, unknown>;
/** @internal */
export type PayloadAccessGroup$Outbound = {
    id: string;
    name: string;
};
/** @internal */
export declare const PayloadAccessGroup$outboundSchema: z.ZodType<PayloadAccessGroup$Outbound, z.ZodTypeDef, PayloadAccessGroup>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PayloadAccessGroup$ {
    /** @deprecated use `PayloadAccessGroup$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PayloadAccessGroup, z.ZodTypeDef, unknown>;
    /** @deprecated use `PayloadAccessGroup$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PayloadAccessGroup$Outbound, z.ZodTypeDef, PayloadAccessGroup>;
    /** @deprecated use `PayloadAccessGroup$Outbound` instead. */
    type Outbound = PayloadAccessGroup$Outbound;
}
export declare function payloadAccessGroupToJSON(payloadAccessGroup: PayloadAccessGroup): string;
export declare function payloadAccessGroupFromJSON(jsonString: string): SafeParseResult<PayloadAccessGroup, SDKValidationError>;
/** @internal */
export declare const Four$inboundSchema: z.ZodType<Four, z.ZodTypeDef, unknown>;
/** @internal */
export type Four$Outbound = {
    author: string;
    accessGroup: PayloadAccessGroup$Outbound;
};
/** @internal */
export declare const Four$outboundSchema: z.ZodType<Four$Outbound, z.ZodTypeDef, Four>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Four$ {
    /** @deprecated use `Four$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Four, z.ZodTypeDef, unknown>;
    /** @deprecated use `Four$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Four$Outbound, z.ZodTypeDef, Four>;
    /** @deprecated use `Four$Outbound` instead. */
    type Outbound = Four$Outbound;
}
export declare function fourToJSON(four: Four): string;
export declare function fourFromJSON(jsonString: string): SafeParseResult<Four, SDKValidationError>;
/** @internal */
export declare const AccessGroup$inboundSchema: z.ZodType<AccessGroup, z.ZodTypeDef, unknown>;
/** @internal */
export type AccessGroup$Outbound = {
    id: string;
    name: string;
};
/** @internal */
export declare const AccessGroup$outboundSchema: z.ZodType<AccessGroup$Outbound, z.ZodTypeDef, AccessGroup>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AccessGroup$ {
    /** @deprecated use `AccessGroup$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AccessGroup, z.ZodTypeDef, unknown>;
    /** @deprecated use `AccessGroup$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AccessGroup$Outbound, z.ZodTypeDef, AccessGroup>;
    /** @deprecated use `AccessGroup$Outbound` instead. */
    type Outbound = AccessGroup$Outbound;
}
export declare function accessGroupToJSON(accessGroup: AccessGroup): string;
export declare function accessGroupFromJSON(jsonString: string): SafeParseResult<AccessGroup, SDKValidationError>;
/** @internal */
export declare const Three$inboundSchema: z.ZodType<Three, z.ZodTypeDef, unknown>;
/** @internal */
export type Three$Outbound = {
    accessGroup: AccessGroup$Outbound;
};
/** @internal */
export declare const Three$outboundSchema: z.ZodType<Three$Outbound, z.ZodTypeDef, Three>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Three$ {
    /** @deprecated use `Three$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Three, z.ZodTypeDef, unknown>;
    /** @deprecated use `Three$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Three$Outbound, z.ZodTypeDef, Three>;
    /** @deprecated use `Three$Outbound` instead. */
    type Outbound = Three$Outbound;
}
export declare function threeToJSON(three: Three): string;
export declare function threeFromJSON(jsonString: string): SafeParseResult<Three, SDKValidationError>;
/** @internal */
export declare const Action$inboundSchema: z.ZodNativeEnum<typeof Action>;
/** @internal */
export declare const Action$outboundSchema: z.ZodNativeEnum<typeof Action>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Action$ {
    /** @deprecated use `Action$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Created: "created";
        readonly Updated: "updated";
        readonly Deleted: "deleted";
        readonly Archived: "archived";
        readonly Unarchived: "unarchived";
    }>;
    /** @deprecated use `Action$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Created: "created";
        readonly Updated: "updated";
        readonly Deleted: "deleted";
        readonly Archived: "archived";
        readonly Unarchived: "unarchived";
    }>;
}
/** @internal */
export declare const Payload2$inboundSchema: z.ZodType<Payload2, z.ZodTypeDef, unknown>;
/** @internal */
export type Payload2$Outbound = {
    action: string;
    id: string;
    slug: string;
    projectId: string;
};
/** @internal */
export declare const Payload2$outboundSchema: z.ZodType<Payload2$Outbound, z.ZodTypeDef, Payload2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Payload2$ {
    /** @deprecated use `Payload2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Payload2, z.ZodTypeDef, unknown>;
    /** @deprecated use `Payload2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Payload2$Outbound, z.ZodTypeDef, Payload2>;
    /** @deprecated use `Payload2$Outbound` instead. */
    type Outbound = Payload2$Outbound;
}
export declare function payload2ToJSON(payload2: Payload2): string;
export declare function payload2FromJSON(jsonString: string): SafeParseResult<Payload2, SDKValidationError>;
/** @internal */
export declare const Payload1$inboundSchema: z.ZodType<Payload1, z.ZodTypeDef, unknown>;
/** @internal */
export type Payload1$Outbound = {};
/** @internal */
export declare const Payload1$outboundSchema: z.ZodType<Payload1$Outbound, z.ZodTypeDef, Payload1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Payload1$ {
    /** @deprecated use `Payload1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Payload1, z.ZodTypeDef, unknown>;
    /** @deprecated use `Payload1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Payload1$Outbound, z.ZodTypeDef, Payload1>;
    /** @deprecated use `Payload1$Outbound` instead. */
    type Outbound = Payload1$Outbound;
}
export declare function payload1ToJSON(payload1: Payload1): string;
export declare function payload1FromJSON(jsonString: string): SafeParseResult<Payload1, SDKValidationError>;
/** @internal */
export declare const Payload$inboundSchema: z.ZodType<Payload, z.ZodTypeDef, unknown>;
/** @internal */
export type Payload$Outbound = SixtySix$Outbound | SixtyNine$Outbound | Seventy$Outbound | Forty$Outbound | FortyOne$Outbound | FiftyEight$Outbound | SixtyFour$Outbound | SixtySeven$Outbound | OneHundredAndThirtyOne$Outbound | OneHundredAndSixtyOne$Outbound | Payload2$Outbound | FortyFive$Outbound | SixtyEight$Outbound | OneHundredAndOne$Outbound | OneHundredAndFortyTwo$Outbound | Twelve$Outbound | Sixteen$Outbound | TwentyNine$Outbound | Thirty$Outbound | ThirtyOne$Outbound | ThirtyTwo$Outbound | ThirtyNine$Outbound | FortyEight$Outbound | FortyNine$Outbound | Fifty$Outbound | FiftyThree$Outbound | FiftyNine$Outbound | Sixty$Outbound | SixtyOne$Outbound | SixtyThree$Outbound | SeventyFour$Outbound | SeventyEight$Outbound | EightyOne$Outbound | EightyTwo$Outbound | NinetyTwo$Outbound | OneHundredAndNine$Outbound | OneHundredAndThirtyThree$Outbound | OneHundredAndThirtyFour$Outbound | OneHundredAndFortyOne$Outbound | OneHundredAndFortyThree$Outbound | OneHundredAndFortyFive$Outbound | OneHundredAndFortyEight$Outbound | OneHundredAndFiftyEight$Outbound | OneHundredAndFiftyNine$Outbound | OneHundredAndSixty$Outbound | Four$Outbound | Five$Outbound | Six$Outbound | Seventeen$Outbound | Eighteen$Outbound | TwentyThree$Outbound | TwentySeven$Outbound | ThirtyFour$Outbound | ThirtyFive$Outbound | ThirtySix$Outbound | FortyThree$Outbound | FortyFour$Outbound | FortySeven$Outbound | FiftyFour$Outbound | SixtyTwo$Outbound | SixtyFive$Outbound | SeventySeven$Outbound | EightyFive$Outbound | EightySix$Outbound | EightySeven$Outbound | EightyNine$Outbound | Ninety$Outbound | NinetyOne$Outbound | NinetyThree$Outbound | NinetyFour$Outbound | NinetySeven$Outbound | NinetyEight$Outbound | NinetyNine$Outbound | OneHundredAndFive$Outbound | OneHundredAndFourteen$Outbound | OneHundredAndFifteen$Outbound | OneHundredAndTwenty$Outbound | OneHundredAndTwentyOne$Outbound | OneHundredAndTwentyThree$Outbound | OneHundredAndThirtyTwo$Outbound | OneHundredAndThirtyFive$Outbound | OneHundredAndThirtySix$Outbound | OneHundredAndThirtySeven$Outbound | OneHundredAndThirtyNine$Outbound | OneHundredAndForty$Outbound | OneHundredAndFortySix$Outbound | OneHundredAndFortySeven$Outbound | OneHundredAndFortyNine$Outbound | OneHundredAndFiftyOne$Outbound | OneHundredAndFiftyTwo$Outbound | OneHundredAndFiftyThree$Outbound | OneHundredAndFiftyFive$Outbound | Three$Outbound | Fifteen$Outbound | Twenty$Outbound | TwentyTwo$Outbound | TwentyFour$Outbound | TwentySix$Outbound | TwentyEight$Outbound | ThirtyThree$Outbound | ThirtySeven$Outbound | ThirtyEight$Outbound | FortyTwo$Outbound | FortySix$Outbound | FiftyOne$Outbound | FiftyTwo$Outbound | SeventyOne$Outbound | SeventyTwo$Outbound | SeventyThree$Outbound | SeventyFive$Outbound | SeventySix$Outbound | SeventyNine$Outbound | Eighty$Outbound | EightyThree$Outbound | EightyFour$Outbound | EightyEight$Outbound | NinetyFive$Outbound | NinetySix$Outbound | OneHundred$Outbound | OneHundredAndThree$Outbound | OneHundredAndFour$Outbound | OneHundredAndSix$Outbound | OneHundredAndSeven$Outbound | OneHundredAndEight$Outbound | OneHundredAndTwelve$Outbound | OneHundredAndThirteen$Outbound | OneHundredAndSixteen$Outbound | OneHundredAndTwentyTwo$Outbound | OneHundredAndTwentyFour$Outbound | OneHundredAndTwentyEight$Outbound | OneHundredAndTwentyNine$Outbound | OneHundredAndThirty$Outbound | OneHundredAndThirtyEight$Outbound | OneHundredAndFortyFour$Outbound | OneHundredAndFifty$Outbound | OneHundredAndFiftyFour$Outbound | OneHundredAndFiftySix$Outbound | OneHundredAndFiftySeven$Outbound | Payload1$Outbound | Seven$Outbound | Eight$Outbound | Nine$Outbound | Ten$Outbound | Eleven$Outbound | Thirteen$Outbound | Fourteen$Outbound | Nineteen$Outbound | TwentyOne$Outbound | TwentyFive$Outbound | FiftyFive$Outbound | FiftySix$Outbound | FiftySeven$Outbound | OneHundredAndTwo$Outbound | OneHundredAndTen$Outbound | OneHundredAndEleven$Outbound | OneHundredAndSeventeen$Outbound | OneHundredAndEighteen$Outbound | OneHundredAndNineteen$Outbound | OneHundredAndTwentyFive$Outbound | OneHundredAndTwentySix$Outbound | OneHundredAndTwentySeven$Outbound;
/** @internal */
export declare const Payload$outboundSchema: z.ZodType<Payload$Outbound, z.ZodTypeDef, Payload>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Payload$ {
    /** @deprecated use `Payload$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Payload, z.ZodTypeDef, unknown>;
    /** @deprecated use `Payload$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Payload$Outbound, z.ZodTypeDef, Payload>;
    /** @deprecated use `Payload$Outbound` instead. */
    type Outbound = Payload$Outbound;
}
export declare function payloadToJSON(payload: Payload): string;
export declare function payloadFromJSON(jsonString: string): SafeParseResult<Payload, SDKValidationError>;
/** @internal */
export declare const UserEvent$inboundSchema: z.ZodType<UserEvent, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEvent$Outbound = {
    id: string;
    text: string;
    entities: Array<Entities$Outbound>;
    createdAt: number;
    user?: User$Outbound | undefined;
    principal?: One$Outbound | Two$Outbound | undefined;
    via?: Array<Via1$Outbound | Via2$Outbound> | undefined;
    userId: string;
    principalId: string;
    viaIds?: Array<string> | undefined;
    payload?: SixtySix$Outbound | SixtyNine$Outbound | Seventy$Outbound | Forty$Outbound | FortyOne$Outbound | FiftyEight$Outbound | SixtyFour$Outbound | SixtySeven$Outbound | OneHundredAndThirtyOne$Outbound | OneHundredAndSixtyOne$Outbound | Payload2$Outbound | FortyFive$Outbound | SixtyEight$Outbound | OneHundredAndOne$Outbound | OneHundredAndFortyTwo$Outbound | Twelve$Outbound | Sixteen$Outbound | TwentyNine$Outbound | Thirty$Outbound | ThirtyOne$Outbound | ThirtyTwo$Outbound | ThirtyNine$Outbound | FortyEight$Outbound | FortyNine$Outbound | Fifty$Outbound | FiftyThree$Outbound | FiftyNine$Outbound | Sixty$Outbound | SixtyOne$Outbound | SixtyThree$Outbound | SeventyFour$Outbound | SeventyEight$Outbound | EightyOne$Outbound | EightyTwo$Outbound | NinetyTwo$Outbound | OneHundredAndNine$Outbound | OneHundredAndThirtyThree$Outbound | OneHundredAndThirtyFour$Outbound | OneHundredAndFortyOne$Outbound | OneHundredAndFortyThree$Outbound | OneHundredAndFortyFive$Outbound | OneHundredAndFortyEight$Outbound | OneHundredAndFiftyEight$Outbound | OneHundredAndFiftyNine$Outbound | OneHundredAndSixty$Outbound | Four$Outbound | Five$Outbound | Six$Outbound | Seventeen$Outbound | Eighteen$Outbound | TwentyThree$Outbound | TwentySeven$Outbound | ThirtyFour$Outbound | ThirtyFive$Outbound | ThirtySix$Outbound | FortyThree$Outbound | FortyFour$Outbound | FortySeven$Outbound | FiftyFour$Outbound | SixtyTwo$Outbound | SixtyFive$Outbound | SeventySeven$Outbound | EightyFive$Outbound | EightySix$Outbound | EightySeven$Outbound | EightyNine$Outbound | Ninety$Outbound | NinetyOne$Outbound | NinetyThree$Outbound | NinetyFour$Outbound | NinetySeven$Outbound | NinetyEight$Outbound | NinetyNine$Outbound | OneHundredAndFive$Outbound | OneHundredAndFourteen$Outbound | OneHundredAndFifteen$Outbound | OneHundredAndTwenty$Outbound | OneHundredAndTwentyOne$Outbound | OneHundredAndTwentyThree$Outbound | OneHundredAndThirtyTwo$Outbound | OneHundredAndThirtyFive$Outbound | OneHundredAndThirtySix$Outbound | OneHundredAndThirtySeven$Outbound | OneHundredAndThirtyNine$Outbound | OneHundredAndForty$Outbound | OneHundredAndFortySix$Outbound | OneHundredAndFortySeven$Outbound | OneHundredAndFortyNine$Outbound | OneHundredAndFiftyOne$Outbound | OneHundredAndFiftyTwo$Outbound | OneHundredAndFiftyThree$Outbound | OneHundredAndFiftyFive$Outbound | Three$Outbound | Fifteen$Outbound | Twenty$Outbound | TwentyTwo$Outbound | TwentyFour$Outbound | TwentySix$Outbound | TwentyEight$Outbound | ThirtyThree$Outbound | ThirtySeven$Outbound | ThirtyEight$Outbound | FortyTwo$Outbound | FortySix$Outbound | FiftyOne$Outbound | FiftyTwo$Outbound | SeventyOne$Outbound | SeventyTwo$Outbound | SeventyThree$Outbound | SeventyFive$Outbound | SeventySix$Outbound | SeventyNine$Outbound | Eighty$Outbound | EightyThree$Outbound | EightyFour$Outbound | EightyEight$Outbound | NinetyFive$Outbound | NinetySix$Outbound | OneHundred$Outbound | OneHundredAndThree$Outbound | OneHundredAndFour$Outbound | OneHundredAndSix$Outbound | OneHundredAndSeven$Outbound | OneHundredAndEight$Outbound | OneHundredAndTwelve$Outbound | OneHundredAndThirteen$Outbound | OneHundredAndSixteen$Outbound | OneHundredAndTwentyTwo$Outbound | OneHundredAndTwentyFour$Outbound | OneHundredAndTwentyEight$Outbound | OneHundredAndTwentyNine$Outbound | OneHundredAndThirty$Outbound | OneHundredAndThirtyEight$Outbound | OneHundredAndFortyFour$Outbound | OneHundredAndFifty$Outbound | OneHundredAndFiftyFour$Outbound | OneHundredAndFiftySix$Outbound | OneHundredAndFiftySeven$Outbound | Payload1$Outbound | Seven$Outbound | Eight$Outbound | Nine$Outbound | Ten$Outbound | Eleven$Outbound | Thirteen$Outbound | Fourteen$Outbound | Nineteen$Outbound | TwentyOne$Outbound | TwentyFive$Outbound | FiftyFive$Outbound | FiftySix$Outbound | FiftySeven$Outbound | OneHundredAndTwo$Outbound | OneHundredAndTen$Outbound | OneHundredAndEleven$Outbound | OneHundredAndSeventeen$Outbound | OneHundredAndEighteen$Outbound | OneHundredAndNineteen$Outbound | OneHundredAndTwentyFive$Outbound | OneHundredAndTwentySix$Outbound | OneHundredAndTwentySeven$Outbound | undefined;
};
/** @internal */
export declare const UserEvent$outboundSchema: z.ZodType<UserEvent$Outbound, z.ZodTypeDef, UserEvent>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEvent$ {
    /** @deprecated use `UserEvent$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEvent, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEvent$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEvent$Outbound, z.ZodTypeDef, UserEvent>;
    /** @deprecated use `UserEvent$Outbound` instead. */
    type Outbound = UserEvent$Outbound;
}
export declare function userEventToJSON(userEvent: UserEvent): string;
export declare function userEventFromJSON(jsonString: string): SafeParseResult<UserEvent, SDKValidationError>;
//# sourceMappingURL=userevent.d.ts.map