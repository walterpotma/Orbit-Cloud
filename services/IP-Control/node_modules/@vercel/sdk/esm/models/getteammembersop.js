/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
/**
 * Only return members with the specified team role.
 */
export const QueryParamRole = {
    Owner: "OWNER",
    Member: "MEMBER",
    Developer: "DEVELOPER",
    Security: "SECURITY",
    Billing: "BILLING",
    Viewer: "VIEWER",
    ViewerForPlus: "VIEWER_FOR_PLUS",
    Contributor: "CONTRIBUTOR",
};
/**
 * Role of this user in the team.
 */
export const GetTeamMembersRole = {
    Owner: "OWNER",
    Member: "MEMBER",
    Developer: "DEVELOPER",
    Security: "SECURITY",
    Billing: "BILLING",
    Viewer: "VIEWER",
    ViewerForPlus: "VIEWER_FOR_PLUS",
    Contributor: "CONTRIBUTOR",
};
export const GetTeamMembersOrigin = {
    Teams: "teams",
    Link: "link",
    Mail: "mail",
    Import: "import",
    Github: "github",
    Gitlab: "gitlab",
    Bitbucket: "bitbucket",
    Saml: "saml",
    Dsync: "dsync",
    Feedback: "feedback",
    OrganizationTeams: "organization-teams",
};
export const GetTeamMembersTeamsResponseRole = {
    Admin: "ADMIN",
    ProjectDeveloper: "PROJECT_DEVELOPER",
    ProjectViewer: "PROJECT_VIEWER",
};
export const GetTeamMembersTeamsRole = {
    Owner: "OWNER",
    Member: "MEMBER",
    Developer: "DEVELOPER",
    Security: "SECURITY",
    Billing: "BILLING",
    Viewer: "VIEWER",
    ViewerForPlus: "VIEWER_FOR_PLUS",
    Contributor: "CONTRIBUTOR",
};
export const GetTeamMembersTeamRoles = {
    Owner: "OWNER",
    Member: "MEMBER",
    Developer: "DEVELOPER",
    Security: "SECURITY",
    Billing: "BILLING",
    Viewer: "VIEWER",
    ViewerForPlus: "VIEWER_FOR_PLUS",
    Contributor: "CONTRIBUTOR",
};
export const GetTeamMembersTeamPermissions = {
    IntegrationManager: "IntegrationManager",
    CreateProject: "CreateProject",
    FullProductionDeployment: "FullProductionDeployment",
    UsageViewer: "UsageViewer",
    EnvVariableManager: "EnvVariableManager",
    EnvironmentManager: "EnvironmentManager",
    V0Builder: "V0Builder",
    V0Chatter: "V0Chatter",
    V0Viewer: "V0Viewer",
};
export const GetTeamMembersTeamsProjects = {
    Admin: "ADMIN",
    ProjectDeveloper: "PROJECT_DEVELOPER",
    ProjectViewer: "PROJECT_VIEWER",
};
/** @internal */
export const QueryParamRole$inboundSchema = z.nativeEnum(QueryParamRole);
/** @internal */
export const QueryParamRole$outboundSchema = QueryParamRole$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var QueryParamRole$;
(function (QueryParamRole$) {
    /** @deprecated use `QueryParamRole$inboundSchema` instead. */
    QueryParamRole$.inboundSchema = QueryParamRole$inboundSchema;
    /** @deprecated use `QueryParamRole$outboundSchema` instead. */
    QueryParamRole$.outboundSchema = QueryParamRole$outboundSchema;
})(QueryParamRole$ || (QueryParamRole$ = {}));
/** @internal */
export const GetTeamMembersRequest$inboundSchema = z.object({
    limit: z.number().optional(),
    since: z.number().optional(),
    until: z.number().optional(),
    search: z.string().optional(),
    role: QueryParamRole$inboundSchema.optional(),
    excludeProject: z.string().optional(),
    eligibleMembersForProjectId: z.string().optional(),
});
/** @internal */
export const GetTeamMembersRequest$outboundSchema = z.object({
    limit: z.number().optional(),
    since: z.number().optional(),
    until: z.number().optional(),
    search: z.string().optional(),
    role: QueryParamRole$outboundSchema.optional(),
    excludeProject: z.string().optional(),
    eligibleMembersForProjectId: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetTeamMembersRequest$;
(function (GetTeamMembersRequest$) {
    /** @deprecated use `GetTeamMembersRequest$inboundSchema` instead. */
    GetTeamMembersRequest$.inboundSchema = GetTeamMembersRequest$inboundSchema;
    /** @deprecated use `GetTeamMembersRequest$outboundSchema` instead. */
    GetTeamMembersRequest$.outboundSchema = GetTeamMembersRequest$outboundSchema;
})(GetTeamMembersRequest$ || (GetTeamMembersRequest$ = {}));
export function getTeamMembersRequestToJSON(getTeamMembersRequest) {
    return JSON.stringify(GetTeamMembersRequest$outboundSchema.parse(getTeamMembersRequest));
}
export function getTeamMembersRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetTeamMembersRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetTeamMembersRequest' from JSON`);
}
/** @internal */
export const GetTeamMembersGithub$inboundSchema = z.object({
    login: z.string().optional(),
});
/** @internal */
export const GetTeamMembersGithub$outboundSchema = z.object({
    login: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetTeamMembersGithub$;
(function (GetTeamMembersGithub$) {
    /** @deprecated use `GetTeamMembersGithub$inboundSchema` instead. */
    GetTeamMembersGithub$.inboundSchema = GetTeamMembersGithub$inboundSchema;
    /** @deprecated use `GetTeamMembersGithub$outboundSchema` instead. */
    GetTeamMembersGithub$.outboundSchema = GetTeamMembersGithub$outboundSchema;
})(GetTeamMembersGithub$ || (GetTeamMembersGithub$ = {}));
export function getTeamMembersGithubToJSON(getTeamMembersGithub) {
    return JSON.stringify(GetTeamMembersGithub$outboundSchema.parse(getTeamMembersGithub));
}
export function getTeamMembersGithubFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetTeamMembersGithub$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetTeamMembersGithub' from JSON`);
}
/** @internal */
export const GetTeamMembersGitlab$inboundSchema = z.object({
    login: z.string().optional(),
});
/** @internal */
export const GetTeamMembersGitlab$outboundSchema = z.object({
    login: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetTeamMembersGitlab$;
(function (GetTeamMembersGitlab$) {
    /** @deprecated use `GetTeamMembersGitlab$inboundSchema` instead. */
    GetTeamMembersGitlab$.inboundSchema = GetTeamMembersGitlab$inboundSchema;
    /** @deprecated use `GetTeamMembersGitlab$outboundSchema` instead. */
    GetTeamMembersGitlab$.outboundSchema = GetTeamMembersGitlab$outboundSchema;
})(GetTeamMembersGitlab$ || (GetTeamMembersGitlab$ = {}));
export function getTeamMembersGitlabToJSON(getTeamMembersGitlab) {
    return JSON.stringify(GetTeamMembersGitlab$outboundSchema.parse(getTeamMembersGitlab));
}
export function getTeamMembersGitlabFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetTeamMembersGitlab$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetTeamMembersGitlab' from JSON`);
}
/** @internal */
export const GetTeamMembersBitbucket$inboundSchema = z.object({
    login: z.string().optional(),
});
/** @internal */
export const GetTeamMembersBitbucket$outboundSchema = z.object({
    login: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetTeamMembersBitbucket$;
(function (GetTeamMembersBitbucket$) {
    /** @deprecated use `GetTeamMembersBitbucket$inboundSchema` instead. */
    GetTeamMembersBitbucket$.inboundSchema = GetTeamMembersBitbucket$inboundSchema;
    /** @deprecated use `GetTeamMembersBitbucket$outboundSchema` instead. */
    GetTeamMembersBitbucket$.outboundSchema = GetTeamMembersBitbucket$outboundSchema;
})(GetTeamMembersBitbucket$ || (GetTeamMembersBitbucket$ = {}));
export function getTeamMembersBitbucketToJSON(getTeamMembersBitbucket) {
    return JSON.stringify(GetTeamMembersBitbucket$outboundSchema.parse(getTeamMembersBitbucket));
}
export function getTeamMembersBitbucketFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetTeamMembersBitbucket$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetTeamMembersBitbucket' from JSON`);
}
/** @internal */
export const GetTeamMembersRole$inboundSchema = z.nativeEnum(GetTeamMembersRole);
/** @internal */
export const GetTeamMembersRole$outboundSchema = GetTeamMembersRole$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetTeamMembersRole$;
(function (GetTeamMembersRole$) {
    /** @deprecated use `GetTeamMembersRole$inboundSchema` instead. */
    GetTeamMembersRole$.inboundSchema = GetTeamMembersRole$inboundSchema;
    /** @deprecated use `GetTeamMembersRole$outboundSchema` instead. */
    GetTeamMembersRole$.outboundSchema = GetTeamMembersRole$outboundSchema;
})(GetTeamMembersRole$ || (GetTeamMembersRole$ = {}));
/** @internal */
export const GetTeamMembersOrigin$inboundSchema = z.nativeEnum(GetTeamMembersOrigin);
/** @internal */
export const GetTeamMembersOrigin$outboundSchema = GetTeamMembersOrigin$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetTeamMembersOrigin$;
(function (GetTeamMembersOrigin$) {
    /** @deprecated use `GetTeamMembersOrigin$inboundSchema` instead. */
    GetTeamMembersOrigin$.inboundSchema = GetTeamMembersOrigin$inboundSchema;
    /** @deprecated use `GetTeamMembersOrigin$outboundSchema` instead. */
    GetTeamMembersOrigin$.outboundSchema = GetTeamMembersOrigin$outboundSchema;
})(GetTeamMembersOrigin$ || (GetTeamMembersOrigin$ = {}));
/** @internal */
export const GetTeamMembersGitUserId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const GetTeamMembersGitUserId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetTeamMembersGitUserId$;
(function (GetTeamMembersGitUserId$) {
    /** @deprecated use `GetTeamMembersGitUserId$inboundSchema` instead. */
    GetTeamMembersGitUserId$.inboundSchema = GetTeamMembersGitUserId$inboundSchema;
    /** @deprecated use `GetTeamMembersGitUserId$outboundSchema` instead. */
    GetTeamMembersGitUserId$.outboundSchema = GetTeamMembersGitUserId$outboundSchema;
})(GetTeamMembersGitUserId$ || (GetTeamMembersGitUserId$ = {}));
export function getTeamMembersGitUserIdToJSON(getTeamMembersGitUserId) {
    return JSON.stringify(GetTeamMembersGitUserId$outboundSchema.parse(getTeamMembersGitUserId));
}
export function getTeamMembersGitUserIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetTeamMembersGitUserId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetTeamMembersGitUserId' from JSON`);
}
/** @internal */
export const GetTeamMembersJoinedFrom$inboundSchema = z.object({
    origin: GetTeamMembersOrigin$inboundSchema,
    commitId: z.string().optional(),
    repoId: z.string().optional(),
    repoPath: z.string().optional(),
    gitUserId: z.union([z.string(), z.number()]).optional(),
    gitUserLogin: z.string().optional(),
    ssoUserId: z.string().optional(),
    ssoConnectedAt: z.number().optional(),
    idpUserId: z.string().optional(),
    dsyncUserId: z.string().optional(),
    dsyncConnectedAt: z.number().optional(),
});
/** @internal */
export const GetTeamMembersJoinedFrom$outboundSchema = z.object({
    origin: GetTeamMembersOrigin$outboundSchema,
    commitId: z.string().optional(),
    repoId: z.string().optional(),
    repoPath: z.string().optional(),
    gitUserId: z.union([z.string(), z.number()]).optional(),
    gitUserLogin: z.string().optional(),
    ssoUserId: z.string().optional(),
    ssoConnectedAt: z.number().optional(),
    idpUserId: z.string().optional(),
    dsyncUserId: z.string().optional(),
    dsyncConnectedAt: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetTeamMembersJoinedFrom$;
(function (GetTeamMembersJoinedFrom$) {
    /** @deprecated use `GetTeamMembersJoinedFrom$inboundSchema` instead. */
    GetTeamMembersJoinedFrom$.inboundSchema = GetTeamMembersJoinedFrom$inboundSchema;
    /** @deprecated use `GetTeamMembersJoinedFrom$outboundSchema` instead. */
    GetTeamMembersJoinedFrom$.outboundSchema = GetTeamMembersJoinedFrom$outboundSchema;
})(GetTeamMembersJoinedFrom$ || (GetTeamMembersJoinedFrom$ = {}));
export function getTeamMembersJoinedFromToJSON(getTeamMembersJoinedFrom) {
    return JSON.stringify(GetTeamMembersJoinedFrom$outboundSchema.parse(getTeamMembersJoinedFrom));
}
export function getTeamMembersJoinedFromFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetTeamMembersJoinedFrom$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetTeamMembersJoinedFrom' from JSON`);
}
/** @internal */
export const GetTeamMembersTeamsResponseRole$inboundSchema = z.nativeEnum(GetTeamMembersTeamsResponseRole);
/** @internal */
export const GetTeamMembersTeamsResponseRole$outboundSchema = GetTeamMembersTeamsResponseRole$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetTeamMembersTeamsResponseRole$;
(function (GetTeamMembersTeamsResponseRole$) {
    /** @deprecated use `GetTeamMembersTeamsResponseRole$inboundSchema` instead. */
    GetTeamMembersTeamsResponseRole$.inboundSchema = GetTeamMembersTeamsResponseRole$inboundSchema;
    /** @deprecated use `GetTeamMembersTeamsResponseRole$outboundSchema` instead. */
    GetTeamMembersTeamsResponseRole$.outboundSchema = GetTeamMembersTeamsResponseRole$outboundSchema;
})(GetTeamMembersTeamsResponseRole$ || (GetTeamMembersTeamsResponseRole$ = {}));
/** @internal */
export const GetTeamMembersProjects$inboundSchema = z.object({
    name: z.string(),
    id: z.string(),
    role: GetTeamMembersTeamsResponseRole$inboundSchema.optional(),
});
/** @internal */
export const GetTeamMembersProjects$outboundSchema = z.object({
    name: z.string(),
    id: z.string(),
    role: GetTeamMembersTeamsResponseRole$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetTeamMembersProjects$;
(function (GetTeamMembersProjects$) {
    /** @deprecated use `GetTeamMembersProjects$inboundSchema` instead. */
    GetTeamMembersProjects$.inboundSchema = GetTeamMembersProjects$inboundSchema;
    /** @deprecated use `GetTeamMembersProjects$outboundSchema` instead. */
    GetTeamMembersProjects$.outboundSchema = GetTeamMembersProjects$outboundSchema;
})(GetTeamMembersProjects$ || (GetTeamMembersProjects$ = {}));
export function getTeamMembersProjectsToJSON(getTeamMembersProjects) {
    return JSON.stringify(GetTeamMembersProjects$outboundSchema.parse(getTeamMembersProjects));
}
export function getTeamMembersProjectsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetTeamMembersProjects$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetTeamMembersProjects' from JSON`);
}
/** @internal */
export const GetTeamMembersMembers$inboundSchema = z.object({
    avatar: z.string().optional(),
    confirmed: z.boolean(),
    email: z.string(),
    github: z.lazy(() => GetTeamMembersGithub$inboundSchema).optional(),
    gitlab: z.lazy(() => GetTeamMembersGitlab$inboundSchema).optional(),
    bitbucket: z.lazy(() => GetTeamMembersBitbucket$inboundSchema).optional(),
    role: GetTeamMembersRole$inboundSchema,
    uid: z.string(),
    username: z.string(),
    name: z.string().optional(),
    createdAt: z.number(),
    accessRequestedAt: z.number().optional(),
    joinedFrom: z.lazy(() => GetTeamMembersJoinedFrom$inboundSchema).optional(),
    projects: z.array(z.lazy(() => GetTeamMembersProjects$inboundSchema))
        .optional(),
});
/** @internal */
export const GetTeamMembersMembers$outboundSchema = z.object({
    avatar: z.string().optional(),
    confirmed: z.boolean(),
    email: z.string(),
    github: z.lazy(() => GetTeamMembersGithub$outboundSchema).optional(),
    gitlab: z.lazy(() => GetTeamMembersGitlab$outboundSchema).optional(),
    bitbucket: z.lazy(() => GetTeamMembersBitbucket$outboundSchema).optional(),
    role: GetTeamMembersRole$outboundSchema,
    uid: z.string(),
    username: z.string(),
    name: z.string().optional(),
    createdAt: z.number(),
    accessRequestedAt: z.number().optional(),
    joinedFrom: z.lazy(() => GetTeamMembersJoinedFrom$outboundSchema).optional(),
    projects: z.array(z.lazy(() => GetTeamMembersProjects$outboundSchema))
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetTeamMembersMembers$;
(function (GetTeamMembersMembers$) {
    /** @deprecated use `GetTeamMembersMembers$inboundSchema` instead. */
    GetTeamMembersMembers$.inboundSchema = GetTeamMembersMembers$inboundSchema;
    /** @deprecated use `GetTeamMembersMembers$outboundSchema` instead. */
    GetTeamMembersMembers$.outboundSchema = GetTeamMembersMembers$outboundSchema;
})(GetTeamMembersMembers$ || (GetTeamMembersMembers$ = {}));
export function getTeamMembersMembersToJSON(getTeamMembersMembers) {
    return JSON.stringify(GetTeamMembersMembers$outboundSchema.parse(getTeamMembersMembers));
}
export function getTeamMembersMembersFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetTeamMembersMembers$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetTeamMembersMembers' from JSON`);
}
/** @internal */
export const GetTeamMembersTeamsRole$inboundSchema = z.nativeEnum(GetTeamMembersTeamsRole);
/** @internal */
export const GetTeamMembersTeamsRole$outboundSchema = GetTeamMembersTeamsRole$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetTeamMembersTeamsRole$;
(function (GetTeamMembersTeamsRole$) {
    /** @deprecated use `GetTeamMembersTeamsRole$inboundSchema` instead. */
    GetTeamMembersTeamsRole$.inboundSchema = GetTeamMembersTeamsRole$inboundSchema;
    /** @deprecated use `GetTeamMembersTeamsRole$outboundSchema` instead. */
    GetTeamMembersTeamsRole$.outboundSchema = GetTeamMembersTeamsRole$outboundSchema;
})(GetTeamMembersTeamsRole$ || (GetTeamMembersTeamsRole$ = {}));
/** @internal */
export const GetTeamMembersTeamRoles$inboundSchema = z.nativeEnum(GetTeamMembersTeamRoles);
/** @internal */
export const GetTeamMembersTeamRoles$outboundSchema = GetTeamMembersTeamRoles$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetTeamMembersTeamRoles$;
(function (GetTeamMembersTeamRoles$) {
    /** @deprecated use `GetTeamMembersTeamRoles$inboundSchema` instead. */
    GetTeamMembersTeamRoles$.inboundSchema = GetTeamMembersTeamRoles$inboundSchema;
    /** @deprecated use `GetTeamMembersTeamRoles$outboundSchema` instead. */
    GetTeamMembersTeamRoles$.outboundSchema = GetTeamMembersTeamRoles$outboundSchema;
})(GetTeamMembersTeamRoles$ || (GetTeamMembersTeamRoles$ = {}));
/** @internal */
export const GetTeamMembersTeamPermissions$inboundSchema = z.nativeEnum(GetTeamMembersTeamPermissions);
/** @internal */
export const GetTeamMembersTeamPermissions$outboundSchema = GetTeamMembersTeamPermissions$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetTeamMembersTeamPermissions$;
(function (GetTeamMembersTeamPermissions$) {
    /** @deprecated use `GetTeamMembersTeamPermissions$inboundSchema` instead. */
    GetTeamMembersTeamPermissions$.inboundSchema = GetTeamMembersTeamPermissions$inboundSchema;
    /** @deprecated use `GetTeamMembersTeamPermissions$outboundSchema` instead. */
    GetTeamMembersTeamPermissions$.outboundSchema = GetTeamMembersTeamPermissions$outboundSchema;
})(GetTeamMembersTeamPermissions$ || (GetTeamMembersTeamPermissions$ = {}));
/** @internal */
export const GetTeamMembersTeamsProjects$inboundSchema = z.nativeEnum(GetTeamMembersTeamsProjects);
/** @internal */
export const GetTeamMembersTeamsProjects$outboundSchema = GetTeamMembersTeamsProjects$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetTeamMembersTeamsProjects$;
(function (GetTeamMembersTeamsProjects$) {
    /** @deprecated use `GetTeamMembersTeamsProjects$inboundSchema` instead. */
    GetTeamMembersTeamsProjects$.inboundSchema = GetTeamMembersTeamsProjects$inboundSchema;
    /** @deprecated use `GetTeamMembersTeamsProjects$outboundSchema` instead. */
    GetTeamMembersTeamsProjects$.outboundSchema = GetTeamMembersTeamsProjects$outboundSchema;
})(GetTeamMembersTeamsProjects$ || (GetTeamMembersTeamsProjects$ = {}));
/** @internal */
export const EmailInviteCodes$inboundSchema = z.object({
    accessGroups: z.array(z.string()).optional(),
    id: z.string(),
    email: z.string().optional(),
    role: GetTeamMembersTeamsRole$inboundSchema.optional(),
    teamRoles: z.array(GetTeamMembersTeamRoles$inboundSchema).optional(),
    teamPermissions: z.array(GetTeamMembersTeamPermissions$inboundSchema)
        .optional(),
    isDSyncUser: z.boolean(),
    createdAt: z.number().optional(),
    expired: z.boolean().optional(),
    projects: z.record(GetTeamMembersTeamsProjects$inboundSchema).optional(),
    entitlements: z.array(z.string()).optional(),
});
/** @internal */
export const EmailInviteCodes$outboundSchema = z.object({
    accessGroups: z.array(z.string()).optional(),
    id: z.string(),
    email: z.string().optional(),
    role: GetTeamMembersTeamsRole$outboundSchema.optional(),
    teamRoles: z.array(GetTeamMembersTeamRoles$outboundSchema).optional(),
    teamPermissions: z.array(GetTeamMembersTeamPermissions$outboundSchema)
        .optional(),
    isDSyncUser: z.boolean(),
    createdAt: z.number().optional(),
    expired: z.boolean().optional(),
    projects: z.record(GetTeamMembersTeamsProjects$outboundSchema).optional(),
    entitlements: z.array(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EmailInviteCodes$;
(function (EmailInviteCodes$) {
    /** @deprecated use `EmailInviteCodes$inboundSchema` instead. */
    EmailInviteCodes$.inboundSchema = EmailInviteCodes$inboundSchema;
    /** @deprecated use `EmailInviteCodes$outboundSchema` instead. */
    EmailInviteCodes$.outboundSchema = EmailInviteCodes$outboundSchema;
})(EmailInviteCodes$ || (EmailInviteCodes$ = {}));
export function emailInviteCodesToJSON(emailInviteCodes) {
    return JSON.stringify(EmailInviteCodes$outboundSchema.parse(emailInviteCodes));
}
export function emailInviteCodesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EmailInviteCodes$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EmailInviteCodes' from JSON`);
}
/** @internal */
export const GetTeamMembersPagination$inboundSchema = z.object({
    hasNext: z.boolean(),
    count: z.number(),
    next: z.nullable(z.number()),
    prev: z.nullable(z.number()),
});
/** @internal */
export const GetTeamMembersPagination$outboundSchema = z.object({
    hasNext: z.boolean(),
    count: z.number(),
    next: z.nullable(z.number()),
    prev: z.nullable(z.number()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetTeamMembersPagination$;
(function (GetTeamMembersPagination$) {
    /** @deprecated use `GetTeamMembersPagination$inboundSchema` instead. */
    GetTeamMembersPagination$.inboundSchema = GetTeamMembersPagination$inboundSchema;
    /** @deprecated use `GetTeamMembersPagination$outboundSchema` instead. */
    GetTeamMembersPagination$.outboundSchema = GetTeamMembersPagination$outboundSchema;
})(GetTeamMembersPagination$ || (GetTeamMembersPagination$ = {}));
export function getTeamMembersPaginationToJSON(getTeamMembersPagination) {
    return JSON.stringify(GetTeamMembersPagination$outboundSchema.parse(getTeamMembersPagination));
}
export function getTeamMembersPaginationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetTeamMembersPagination$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetTeamMembersPagination' from JSON`);
}
/** @internal */
export const GetTeamMembersResponseBody$inboundSchema = z.object({
    members: z.array(z.lazy(() => GetTeamMembersMembers$inboundSchema)),
    emailInviteCodes: z.array(z.lazy(() => EmailInviteCodes$inboundSchema))
        .optional(),
    pagination: z.lazy(() => GetTeamMembersPagination$inboundSchema),
});
/** @internal */
export const GetTeamMembersResponseBody$outboundSchema = z.object({
    members: z.array(z.lazy(() => GetTeamMembersMembers$outboundSchema)),
    emailInviteCodes: z.array(z.lazy(() => EmailInviteCodes$outboundSchema))
        .optional(),
    pagination: z.lazy(() => GetTeamMembersPagination$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetTeamMembersResponseBody$;
(function (GetTeamMembersResponseBody$) {
    /** @deprecated use `GetTeamMembersResponseBody$inboundSchema` instead. */
    GetTeamMembersResponseBody$.inboundSchema = GetTeamMembersResponseBody$inboundSchema;
    /** @deprecated use `GetTeamMembersResponseBody$outboundSchema` instead. */
    GetTeamMembersResponseBody$.outboundSchema = GetTeamMembersResponseBody$outboundSchema;
})(GetTeamMembersResponseBody$ || (GetTeamMembersResponseBody$ = {}));
export function getTeamMembersResponseBodyToJSON(getTeamMembersResponseBody) {
    return JSON.stringify(GetTeamMembersResponseBody$outboundSchema.parse(getTeamMembersResponseBody));
}
export function getTeamMembersResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetTeamMembersResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetTeamMembersResponseBody' from JSON`);
}
//# sourceMappingURL=getteammembersop.js.map