import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
/**
 * The current status of the check
 */
export declare const Status: {
    readonly Running: "running";
    readonly Completed: "completed";
};
/**
 * The current status of the check
 */
export type Status = ClosedEnum<typeof Status>;
/**
 * The result of the check being run
 */
export declare const Conclusion: {
    readonly Canceled: "canceled";
    readonly Failed: "failed";
    readonly Neutral: "neutral";
    readonly Succeeded: "succeeded";
    readonly Skipped: "skipped";
};
/**
 * The result of the check being run
 */
export type Conclusion = ClosedEnum<typeof Conclusion>;
export declare const UpdateCheckSource: {
    readonly WebVitals: "web-vitals";
};
export type UpdateCheckSource = ClosedEnum<typeof UpdateCheckSource>;
export type Fcp = {
    /**
     * First Contentful Paint value
     */
    value: number | null;
    /**
     * Previous First Contentful Paint value to display a delta
     */
    previousValue?: number | undefined;
    source: UpdateCheckSource;
};
export declare const UpdateCheckChecksSource: {
    readonly WebVitals: "web-vitals";
};
export type UpdateCheckChecksSource = ClosedEnum<typeof UpdateCheckChecksSource>;
export type Lcp = {
    /**
     * Largest Contentful Paint value
     */
    value: number | null;
    /**
     * Previous Largest Contentful Paint value to display a delta
     */
    previousValue?: number | undefined;
    source: UpdateCheckChecksSource;
};
export declare const UpdateCheckChecksRequestSource: {
    readonly WebVitals: "web-vitals";
};
export type UpdateCheckChecksRequestSource = ClosedEnum<typeof UpdateCheckChecksRequestSource>;
export type Cls = {
    /**
     * Cumulative Layout Shift value
     */
    value: number | null;
    /**
     * Previous Cumulative Layout Shift value to display a delta
     */
    previousValue?: number | undefined;
    source: UpdateCheckChecksRequestSource;
};
export declare const UpdateCheckChecksRequestRequestBodySource: {
    readonly WebVitals: "web-vitals";
};
export type UpdateCheckChecksRequestRequestBodySource = ClosedEnum<typeof UpdateCheckChecksRequestRequestBodySource>;
export type Tbt = {
    /**
     * Total Blocking Time value
     */
    value: number | null;
    /**
     * Previous Total Blocking Time value to display a delta
     */
    previousValue?: number | undefined;
    source: UpdateCheckChecksRequestRequestBodySource;
};
export declare const UpdateCheckChecksRequestRequestBodyOutputSource: {
    readonly WebVitals: "web-vitals";
};
export type UpdateCheckChecksRequestRequestBodyOutputSource = ClosedEnum<typeof UpdateCheckChecksRequestRequestBodyOutputSource>;
export type VirtualExperienceScore = {
    /**
     * The calculated Virtual Experience Score value, between 0 and 100
     */
    value: number | null;
    /**
     * A previous Virtual Experience Score value to display a delta, between 0 and 100
     */
    previousValue?: number | undefined;
    source: UpdateCheckChecksRequestRequestBodyOutputSource;
};
/**
 * Metrics about the page
 */
export type Metrics = {
    fcp: Fcp;
    lcp: Lcp;
    cls: Cls;
    tbt: Tbt;
    virtualExperienceScore?: VirtualExperienceScore | undefined;
};
/**
 * The results of the check Run
 */
export type Output = {
    /**
     * Metrics about the page
     */
    metrics?: Metrics | undefined;
};
export type UpdateCheckRequestBody = {
    /**
     * The name of the check being created
     */
    name?: string | undefined;
    /**
     * Path of the page that is being checked
     */
    path?: string | undefined;
    /**
     * The current status of the check
     */
    status?: Status | undefined;
    /**
     * The result of the check being run
     */
    conclusion?: Conclusion | undefined;
    /**
     * A URL a user may visit to see more information about the check
     */
    detailsUrl?: string | undefined;
    /**
     * The results of the check Run
     */
    output?: Output | undefined;
    /**
     * An identifier that can be used as an external reference
     */
    externalId?: string | undefined;
};
export type UpdateCheckRequest = {
    /**
     * The deployment to update the check for.
     */
    deploymentId: string;
    /**
     * The check being updated
     */
    checkId: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody: UpdateCheckRequestBody;
};
export declare const UpdateCheckStatus: {
    readonly Registered: "registered";
    readonly Running: "running";
    readonly Completed: "completed";
};
export type UpdateCheckStatus = ClosedEnum<typeof UpdateCheckStatus>;
export declare const UpdateCheckConclusion: {
    readonly Canceled: "canceled";
    readonly Failed: "failed";
    readonly Neutral: "neutral";
    readonly Succeeded: "succeeded";
    readonly Skipped: "skipped";
    readonly Stale: "stale";
};
export type UpdateCheckConclusion = ClosedEnum<typeof UpdateCheckConclusion>;
export declare const UpdateCheckChecksResponseSource: {
    readonly WebVitals: "web-vitals";
};
export type UpdateCheckChecksResponseSource = ClosedEnum<typeof UpdateCheckChecksResponseSource>;
export type UpdateCheckFCP = {
    value: number | null;
    previousValue?: number | undefined;
    source: UpdateCheckChecksResponseSource;
};
export declare const UpdateCheckChecksResponse200Source: {
    readonly WebVitals: "web-vitals";
};
export type UpdateCheckChecksResponse200Source = ClosedEnum<typeof UpdateCheckChecksResponse200Source>;
export type UpdateCheckLCP = {
    value: number | null;
    previousValue?: number | undefined;
    source: UpdateCheckChecksResponse200Source;
};
export declare const UpdateCheckChecksResponse200ApplicationJSONSource: {
    readonly WebVitals: "web-vitals";
};
export type UpdateCheckChecksResponse200ApplicationJSONSource = ClosedEnum<typeof UpdateCheckChecksResponse200ApplicationJSONSource>;
export type UpdateCheckCLS = {
    value: number | null;
    previousValue?: number | undefined;
    source: UpdateCheckChecksResponse200ApplicationJSONSource;
};
export declare const UpdateCheckChecksResponse200ApplicationJSONResponseBodySource: {
    readonly WebVitals: "web-vitals";
};
export type UpdateCheckChecksResponse200ApplicationJSONResponseBodySource = ClosedEnum<typeof UpdateCheckChecksResponse200ApplicationJSONResponseBodySource>;
export type UpdateCheckTBT = {
    value: number | null;
    previousValue?: number | undefined;
    source: UpdateCheckChecksResponse200ApplicationJSONResponseBodySource;
};
export declare const UpdateCheckChecksResponse200ApplicationJSONResponseBodyOutputSource: {
    readonly WebVitals: "web-vitals";
};
export type UpdateCheckChecksResponse200ApplicationJSONResponseBodyOutputSource = ClosedEnum<typeof UpdateCheckChecksResponse200ApplicationJSONResponseBodyOutputSource>;
export type UpdateCheckVirtualExperienceScore = {
    value: number | null;
    previousValue?: number | undefined;
    source: UpdateCheckChecksResponse200ApplicationJSONResponseBodyOutputSource;
};
export type UpdateCheckMetrics = {
    fcp: UpdateCheckFCP;
    lcp: UpdateCheckLCP;
    cls: UpdateCheckCLS;
    tbt: UpdateCheckTBT;
    virtualExperienceScore?: UpdateCheckVirtualExperienceScore | undefined;
};
export type UpdateCheckOutput = {
    metrics?: UpdateCheckMetrics | undefined;
};
export type UpdateCheckResponseBody = {
    id: string;
    name: string;
    path?: string | undefined;
    status: UpdateCheckStatus;
    conclusion?: UpdateCheckConclusion | undefined;
    blocking: boolean;
    output?: UpdateCheckOutput | undefined;
    detailsUrl?: string | undefined;
    integrationId: string;
    deploymentId: string;
    externalId?: string | undefined;
    createdAt: number;
    updatedAt: number;
    startedAt?: number | undefined;
    completedAt?: number | undefined;
    rerequestable?: boolean | undefined;
};
/** @internal */
export declare const Status$inboundSchema: z.ZodNativeEnum<typeof Status>;
/** @internal */
export declare const Status$outboundSchema: z.ZodNativeEnum<typeof Status>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Status$ {
    /** @deprecated use `Status$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Running: "running";
        readonly Completed: "completed";
    }>;
    /** @deprecated use `Status$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Running: "running";
        readonly Completed: "completed";
    }>;
}
/** @internal */
export declare const Conclusion$inboundSchema: z.ZodNativeEnum<typeof Conclusion>;
/** @internal */
export declare const Conclusion$outboundSchema: z.ZodNativeEnum<typeof Conclusion>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Conclusion$ {
    /** @deprecated use `Conclusion$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Canceled: "canceled";
        readonly Failed: "failed";
        readonly Neutral: "neutral";
        readonly Succeeded: "succeeded";
        readonly Skipped: "skipped";
    }>;
    /** @deprecated use `Conclusion$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Canceled: "canceled";
        readonly Failed: "failed";
        readonly Neutral: "neutral";
        readonly Succeeded: "succeeded";
        readonly Skipped: "skipped";
    }>;
}
/** @internal */
export declare const UpdateCheckSource$inboundSchema: z.ZodNativeEnum<typeof UpdateCheckSource>;
/** @internal */
export declare const UpdateCheckSource$outboundSchema: z.ZodNativeEnum<typeof UpdateCheckSource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateCheckSource$ {
    /** @deprecated use `UpdateCheckSource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
    /** @deprecated use `UpdateCheckSource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
}
/** @internal */
export declare const Fcp$inboundSchema: z.ZodType<Fcp, z.ZodTypeDef, unknown>;
/** @internal */
export type Fcp$Outbound = {
    value: number | null;
    previousValue?: number | undefined;
    source: string;
};
/** @internal */
export declare const Fcp$outboundSchema: z.ZodType<Fcp$Outbound, z.ZodTypeDef, Fcp>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Fcp$ {
    /** @deprecated use `Fcp$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Fcp, z.ZodTypeDef, unknown>;
    /** @deprecated use `Fcp$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Fcp$Outbound, z.ZodTypeDef, Fcp>;
    /** @deprecated use `Fcp$Outbound` instead. */
    type Outbound = Fcp$Outbound;
}
export declare function fcpToJSON(fcp: Fcp): string;
export declare function fcpFromJSON(jsonString: string): SafeParseResult<Fcp, SDKValidationError>;
/** @internal */
export declare const UpdateCheckChecksSource$inboundSchema: z.ZodNativeEnum<typeof UpdateCheckChecksSource>;
/** @internal */
export declare const UpdateCheckChecksSource$outboundSchema: z.ZodNativeEnum<typeof UpdateCheckChecksSource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateCheckChecksSource$ {
    /** @deprecated use `UpdateCheckChecksSource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
    /** @deprecated use `UpdateCheckChecksSource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
}
/** @internal */
export declare const Lcp$inboundSchema: z.ZodType<Lcp, z.ZodTypeDef, unknown>;
/** @internal */
export type Lcp$Outbound = {
    value: number | null;
    previousValue?: number | undefined;
    source: string;
};
/** @internal */
export declare const Lcp$outboundSchema: z.ZodType<Lcp$Outbound, z.ZodTypeDef, Lcp>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Lcp$ {
    /** @deprecated use `Lcp$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Lcp, z.ZodTypeDef, unknown>;
    /** @deprecated use `Lcp$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Lcp$Outbound, z.ZodTypeDef, Lcp>;
    /** @deprecated use `Lcp$Outbound` instead. */
    type Outbound = Lcp$Outbound;
}
export declare function lcpToJSON(lcp: Lcp): string;
export declare function lcpFromJSON(jsonString: string): SafeParseResult<Lcp, SDKValidationError>;
/** @internal */
export declare const UpdateCheckChecksRequestSource$inboundSchema: z.ZodNativeEnum<typeof UpdateCheckChecksRequestSource>;
/** @internal */
export declare const UpdateCheckChecksRequestSource$outboundSchema: z.ZodNativeEnum<typeof UpdateCheckChecksRequestSource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateCheckChecksRequestSource$ {
    /** @deprecated use `UpdateCheckChecksRequestSource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
    /** @deprecated use `UpdateCheckChecksRequestSource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
}
/** @internal */
export declare const Cls$inboundSchema: z.ZodType<Cls, z.ZodTypeDef, unknown>;
/** @internal */
export type Cls$Outbound = {
    value: number | null;
    previousValue?: number | undefined;
    source: string;
};
/** @internal */
export declare const Cls$outboundSchema: z.ZodType<Cls$Outbound, z.ZodTypeDef, Cls>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Cls$ {
    /** @deprecated use `Cls$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Cls, z.ZodTypeDef, unknown>;
    /** @deprecated use `Cls$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Cls$Outbound, z.ZodTypeDef, Cls>;
    /** @deprecated use `Cls$Outbound` instead. */
    type Outbound = Cls$Outbound;
}
export declare function clsToJSON(cls: Cls): string;
export declare function clsFromJSON(jsonString: string): SafeParseResult<Cls, SDKValidationError>;
/** @internal */
export declare const UpdateCheckChecksRequestRequestBodySource$inboundSchema: z.ZodNativeEnum<typeof UpdateCheckChecksRequestRequestBodySource>;
/** @internal */
export declare const UpdateCheckChecksRequestRequestBodySource$outboundSchema: z.ZodNativeEnum<typeof UpdateCheckChecksRequestRequestBodySource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateCheckChecksRequestRequestBodySource$ {
    /** @deprecated use `UpdateCheckChecksRequestRequestBodySource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
    /** @deprecated use `UpdateCheckChecksRequestRequestBodySource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
}
/** @internal */
export declare const Tbt$inboundSchema: z.ZodType<Tbt, z.ZodTypeDef, unknown>;
/** @internal */
export type Tbt$Outbound = {
    value: number | null;
    previousValue?: number | undefined;
    source: string;
};
/** @internal */
export declare const Tbt$outboundSchema: z.ZodType<Tbt$Outbound, z.ZodTypeDef, Tbt>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Tbt$ {
    /** @deprecated use `Tbt$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Tbt, z.ZodTypeDef, unknown>;
    /** @deprecated use `Tbt$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Tbt$Outbound, z.ZodTypeDef, Tbt>;
    /** @deprecated use `Tbt$Outbound` instead. */
    type Outbound = Tbt$Outbound;
}
export declare function tbtToJSON(tbt: Tbt): string;
export declare function tbtFromJSON(jsonString: string): SafeParseResult<Tbt, SDKValidationError>;
/** @internal */
export declare const UpdateCheckChecksRequestRequestBodyOutputSource$inboundSchema: z.ZodNativeEnum<typeof UpdateCheckChecksRequestRequestBodyOutputSource>;
/** @internal */
export declare const UpdateCheckChecksRequestRequestBodyOutputSource$outboundSchema: z.ZodNativeEnum<typeof UpdateCheckChecksRequestRequestBodyOutputSource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateCheckChecksRequestRequestBodyOutputSource$ {
    /** @deprecated use `UpdateCheckChecksRequestRequestBodyOutputSource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
    /** @deprecated use `UpdateCheckChecksRequestRequestBodyOutputSource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
}
/** @internal */
export declare const VirtualExperienceScore$inboundSchema: z.ZodType<VirtualExperienceScore, z.ZodTypeDef, unknown>;
/** @internal */
export type VirtualExperienceScore$Outbound = {
    value: number | null;
    previousValue?: number | undefined;
    source: string;
};
/** @internal */
export declare const VirtualExperienceScore$outboundSchema: z.ZodType<VirtualExperienceScore$Outbound, z.ZodTypeDef, VirtualExperienceScore>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace VirtualExperienceScore$ {
    /** @deprecated use `VirtualExperienceScore$inboundSchema` instead. */
    const inboundSchema: z.ZodType<VirtualExperienceScore, z.ZodTypeDef, unknown>;
    /** @deprecated use `VirtualExperienceScore$outboundSchema` instead. */
    const outboundSchema: z.ZodType<VirtualExperienceScore$Outbound, z.ZodTypeDef, VirtualExperienceScore>;
    /** @deprecated use `VirtualExperienceScore$Outbound` instead. */
    type Outbound = VirtualExperienceScore$Outbound;
}
export declare function virtualExperienceScoreToJSON(virtualExperienceScore: VirtualExperienceScore): string;
export declare function virtualExperienceScoreFromJSON(jsonString: string): SafeParseResult<VirtualExperienceScore, SDKValidationError>;
/** @internal */
export declare const Metrics$inboundSchema: z.ZodType<Metrics, z.ZodTypeDef, unknown>;
/** @internal */
export type Metrics$Outbound = {
    FCP: Fcp$Outbound;
    LCP: Lcp$Outbound;
    CLS: Cls$Outbound;
    TBT: Tbt$Outbound;
    virtualExperienceScore?: VirtualExperienceScore$Outbound | undefined;
};
/** @internal */
export declare const Metrics$outboundSchema: z.ZodType<Metrics$Outbound, z.ZodTypeDef, Metrics>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Metrics$ {
    /** @deprecated use `Metrics$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Metrics, z.ZodTypeDef, unknown>;
    /** @deprecated use `Metrics$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Metrics$Outbound, z.ZodTypeDef, Metrics>;
    /** @deprecated use `Metrics$Outbound` instead. */
    type Outbound = Metrics$Outbound;
}
export declare function metricsToJSON(metrics: Metrics): string;
export declare function metricsFromJSON(jsonString: string): SafeParseResult<Metrics, SDKValidationError>;
/** @internal */
export declare const Output$inboundSchema: z.ZodType<Output, z.ZodTypeDef, unknown>;
/** @internal */
export type Output$Outbound = {
    metrics?: Metrics$Outbound | undefined;
};
/** @internal */
export declare const Output$outboundSchema: z.ZodType<Output$Outbound, z.ZodTypeDef, Output>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Output$ {
    /** @deprecated use `Output$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Output, z.ZodTypeDef, unknown>;
    /** @deprecated use `Output$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Output$Outbound, z.ZodTypeDef, Output>;
    /** @deprecated use `Output$Outbound` instead. */
    type Outbound = Output$Outbound;
}
export declare function outputToJSON(output: Output): string;
export declare function outputFromJSON(jsonString: string): SafeParseResult<Output, SDKValidationError>;
/** @internal */
export declare const UpdateCheckRequestBody$inboundSchema: z.ZodType<UpdateCheckRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateCheckRequestBody$Outbound = {
    name?: string | undefined;
    path?: string | undefined;
    status?: string | undefined;
    conclusion?: string | undefined;
    detailsUrl?: string | undefined;
    output?: Output$Outbound | undefined;
    externalId?: string | undefined;
};
/** @internal */
export declare const UpdateCheckRequestBody$outboundSchema: z.ZodType<UpdateCheckRequestBody$Outbound, z.ZodTypeDef, UpdateCheckRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateCheckRequestBody$ {
    /** @deprecated use `UpdateCheckRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateCheckRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateCheckRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateCheckRequestBody$Outbound, z.ZodTypeDef, UpdateCheckRequestBody>;
    /** @deprecated use `UpdateCheckRequestBody$Outbound` instead. */
    type Outbound = UpdateCheckRequestBody$Outbound;
}
export declare function updateCheckRequestBodyToJSON(updateCheckRequestBody: UpdateCheckRequestBody): string;
export declare function updateCheckRequestBodyFromJSON(jsonString: string): SafeParseResult<UpdateCheckRequestBody, SDKValidationError>;
/** @internal */
export declare const UpdateCheckRequest$inboundSchema: z.ZodType<UpdateCheckRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateCheckRequest$Outbound = {
    deploymentId: string;
    checkId: string;
    teamId?: string | undefined;
    slug?: string | undefined;
    RequestBody: UpdateCheckRequestBody$Outbound;
};
/** @internal */
export declare const UpdateCheckRequest$outboundSchema: z.ZodType<UpdateCheckRequest$Outbound, z.ZodTypeDef, UpdateCheckRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateCheckRequest$ {
    /** @deprecated use `UpdateCheckRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateCheckRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateCheckRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateCheckRequest$Outbound, z.ZodTypeDef, UpdateCheckRequest>;
    /** @deprecated use `UpdateCheckRequest$Outbound` instead. */
    type Outbound = UpdateCheckRequest$Outbound;
}
export declare function updateCheckRequestToJSON(updateCheckRequest: UpdateCheckRequest): string;
export declare function updateCheckRequestFromJSON(jsonString: string): SafeParseResult<UpdateCheckRequest, SDKValidationError>;
/** @internal */
export declare const UpdateCheckStatus$inboundSchema: z.ZodNativeEnum<typeof UpdateCheckStatus>;
/** @internal */
export declare const UpdateCheckStatus$outboundSchema: z.ZodNativeEnum<typeof UpdateCheckStatus>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateCheckStatus$ {
    /** @deprecated use `UpdateCheckStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Registered: "registered";
        readonly Running: "running";
        readonly Completed: "completed";
    }>;
    /** @deprecated use `UpdateCheckStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Registered: "registered";
        readonly Running: "running";
        readonly Completed: "completed";
    }>;
}
/** @internal */
export declare const UpdateCheckConclusion$inboundSchema: z.ZodNativeEnum<typeof UpdateCheckConclusion>;
/** @internal */
export declare const UpdateCheckConclusion$outboundSchema: z.ZodNativeEnum<typeof UpdateCheckConclusion>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateCheckConclusion$ {
    /** @deprecated use `UpdateCheckConclusion$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Canceled: "canceled";
        readonly Failed: "failed";
        readonly Neutral: "neutral";
        readonly Succeeded: "succeeded";
        readonly Skipped: "skipped";
        readonly Stale: "stale";
    }>;
    /** @deprecated use `UpdateCheckConclusion$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Canceled: "canceled";
        readonly Failed: "failed";
        readonly Neutral: "neutral";
        readonly Succeeded: "succeeded";
        readonly Skipped: "skipped";
        readonly Stale: "stale";
    }>;
}
/** @internal */
export declare const UpdateCheckChecksResponseSource$inboundSchema: z.ZodNativeEnum<typeof UpdateCheckChecksResponseSource>;
/** @internal */
export declare const UpdateCheckChecksResponseSource$outboundSchema: z.ZodNativeEnum<typeof UpdateCheckChecksResponseSource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateCheckChecksResponseSource$ {
    /** @deprecated use `UpdateCheckChecksResponseSource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
    /** @deprecated use `UpdateCheckChecksResponseSource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
}
/** @internal */
export declare const UpdateCheckFCP$inboundSchema: z.ZodType<UpdateCheckFCP, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateCheckFCP$Outbound = {
    value: number | null;
    previousValue?: number | undefined;
    source: string;
};
/** @internal */
export declare const UpdateCheckFCP$outboundSchema: z.ZodType<UpdateCheckFCP$Outbound, z.ZodTypeDef, UpdateCheckFCP>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateCheckFCP$ {
    /** @deprecated use `UpdateCheckFCP$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateCheckFCP, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateCheckFCP$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateCheckFCP$Outbound, z.ZodTypeDef, UpdateCheckFCP>;
    /** @deprecated use `UpdateCheckFCP$Outbound` instead. */
    type Outbound = UpdateCheckFCP$Outbound;
}
export declare function updateCheckFCPToJSON(updateCheckFCP: UpdateCheckFCP): string;
export declare function updateCheckFCPFromJSON(jsonString: string): SafeParseResult<UpdateCheckFCP, SDKValidationError>;
/** @internal */
export declare const UpdateCheckChecksResponse200Source$inboundSchema: z.ZodNativeEnum<typeof UpdateCheckChecksResponse200Source>;
/** @internal */
export declare const UpdateCheckChecksResponse200Source$outboundSchema: z.ZodNativeEnum<typeof UpdateCheckChecksResponse200Source>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateCheckChecksResponse200Source$ {
    /** @deprecated use `UpdateCheckChecksResponse200Source$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
    /** @deprecated use `UpdateCheckChecksResponse200Source$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
}
/** @internal */
export declare const UpdateCheckLCP$inboundSchema: z.ZodType<UpdateCheckLCP, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateCheckLCP$Outbound = {
    value: number | null;
    previousValue?: number | undefined;
    source: string;
};
/** @internal */
export declare const UpdateCheckLCP$outboundSchema: z.ZodType<UpdateCheckLCP$Outbound, z.ZodTypeDef, UpdateCheckLCP>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateCheckLCP$ {
    /** @deprecated use `UpdateCheckLCP$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateCheckLCP, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateCheckLCP$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateCheckLCP$Outbound, z.ZodTypeDef, UpdateCheckLCP>;
    /** @deprecated use `UpdateCheckLCP$Outbound` instead. */
    type Outbound = UpdateCheckLCP$Outbound;
}
export declare function updateCheckLCPToJSON(updateCheckLCP: UpdateCheckLCP): string;
export declare function updateCheckLCPFromJSON(jsonString: string): SafeParseResult<UpdateCheckLCP, SDKValidationError>;
/** @internal */
export declare const UpdateCheckChecksResponse200ApplicationJSONSource$inboundSchema: z.ZodNativeEnum<typeof UpdateCheckChecksResponse200ApplicationJSONSource>;
/** @internal */
export declare const UpdateCheckChecksResponse200ApplicationJSONSource$outboundSchema: z.ZodNativeEnum<typeof UpdateCheckChecksResponse200ApplicationJSONSource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateCheckChecksResponse200ApplicationJSONSource$ {
    /** @deprecated use `UpdateCheckChecksResponse200ApplicationJSONSource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
    /** @deprecated use `UpdateCheckChecksResponse200ApplicationJSONSource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
}
/** @internal */
export declare const UpdateCheckCLS$inboundSchema: z.ZodType<UpdateCheckCLS, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateCheckCLS$Outbound = {
    value: number | null;
    previousValue?: number | undefined;
    source: string;
};
/** @internal */
export declare const UpdateCheckCLS$outboundSchema: z.ZodType<UpdateCheckCLS$Outbound, z.ZodTypeDef, UpdateCheckCLS>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateCheckCLS$ {
    /** @deprecated use `UpdateCheckCLS$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateCheckCLS, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateCheckCLS$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateCheckCLS$Outbound, z.ZodTypeDef, UpdateCheckCLS>;
    /** @deprecated use `UpdateCheckCLS$Outbound` instead. */
    type Outbound = UpdateCheckCLS$Outbound;
}
export declare function updateCheckCLSToJSON(updateCheckCLS: UpdateCheckCLS): string;
export declare function updateCheckCLSFromJSON(jsonString: string): SafeParseResult<UpdateCheckCLS, SDKValidationError>;
/** @internal */
export declare const UpdateCheckChecksResponse200ApplicationJSONResponseBodySource$inboundSchema: z.ZodNativeEnum<typeof UpdateCheckChecksResponse200ApplicationJSONResponseBodySource>;
/** @internal */
export declare const UpdateCheckChecksResponse200ApplicationJSONResponseBodySource$outboundSchema: z.ZodNativeEnum<typeof UpdateCheckChecksResponse200ApplicationJSONResponseBodySource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateCheckChecksResponse200ApplicationJSONResponseBodySource$ {
    /** @deprecated use `UpdateCheckChecksResponse200ApplicationJSONResponseBodySource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
    /** @deprecated use `UpdateCheckChecksResponse200ApplicationJSONResponseBodySource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
}
/** @internal */
export declare const UpdateCheckTBT$inboundSchema: z.ZodType<UpdateCheckTBT, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateCheckTBT$Outbound = {
    value: number | null;
    previousValue?: number | undefined;
    source: string;
};
/** @internal */
export declare const UpdateCheckTBT$outboundSchema: z.ZodType<UpdateCheckTBT$Outbound, z.ZodTypeDef, UpdateCheckTBT>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateCheckTBT$ {
    /** @deprecated use `UpdateCheckTBT$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateCheckTBT, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateCheckTBT$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateCheckTBT$Outbound, z.ZodTypeDef, UpdateCheckTBT>;
    /** @deprecated use `UpdateCheckTBT$Outbound` instead. */
    type Outbound = UpdateCheckTBT$Outbound;
}
export declare function updateCheckTBTToJSON(updateCheckTBT: UpdateCheckTBT): string;
export declare function updateCheckTBTFromJSON(jsonString: string): SafeParseResult<UpdateCheckTBT, SDKValidationError>;
/** @internal */
export declare const UpdateCheckChecksResponse200ApplicationJSONResponseBodyOutputSource$inboundSchema: z.ZodNativeEnum<typeof UpdateCheckChecksResponse200ApplicationJSONResponseBodyOutputSource>;
/** @internal */
export declare const UpdateCheckChecksResponse200ApplicationJSONResponseBodyOutputSource$outboundSchema: z.ZodNativeEnum<typeof UpdateCheckChecksResponse200ApplicationJSONResponseBodyOutputSource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateCheckChecksResponse200ApplicationJSONResponseBodyOutputSource$ {
    /** @deprecated use `UpdateCheckChecksResponse200ApplicationJSONResponseBodyOutputSource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
    /** @deprecated use `UpdateCheckChecksResponse200ApplicationJSONResponseBodyOutputSource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
}
/** @internal */
export declare const UpdateCheckVirtualExperienceScore$inboundSchema: z.ZodType<UpdateCheckVirtualExperienceScore, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateCheckVirtualExperienceScore$Outbound = {
    value: number | null;
    previousValue?: number | undefined;
    source: string;
};
/** @internal */
export declare const UpdateCheckVirtualExperienceScore$outboundSchema: z.ZodType<UpdateCheckVirtualExperienceScore$Outbound, z.ZodTypeDef, UpdateCheckVirtualExperienceScore>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateCheckVirtualExperienceScore$ {
    /** @deprecated use `UpdateCheckVirtualExperienceScore$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateCheckVirtualExperienceScore, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateCheckVirtualExperienceScore$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateCheckVirtualExperienceScore$Outbound, z.ZodTypeDef, UpdateCheckVirtualExperienceScore>;
    /** @deprecated use `UpdateCheckVirtualExperienceScore$Outbound` instead. */
    type Outbound = UpdateCheckVirtualExperienceScore$Outbound;
}
export declare function updateCheckVirtualExperienceScoreToJSON(updateCheckVirtualExperienceScore: UpdateCheckVirtualExperienceScore): string;
export declare function updateCheckVirtualExperienceScoreFromJSON(jsonString: string): SafeParseResult<UpdateCheckVirtualExperienceScore, SDKValidationError>;
/** @internal */
export declare const UpdateCheckMetrics$inboundSchema: z.ZodType<UpdateCheckMetrics, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateCheckMetrics$Outbound = {
    FCP: UpdateCheckFCP$Outbound;
    LCP: UpdateCheckLCP$Outbound;
    CLS: UpdateCheckCLS$Outbound;
    TBT: UpdateCheckTBT$Outbound;
    virtualExperienceScore?: UpdateCheckVirtualExperienceScore$Outbound | undefined;
};
/** @internal */
export declare const UpdateCheckMetrics$outboundSchema: z.ZodType<UpdateCheckMetrics$Outbound, z.ZodTypeDef, UpdateCheckMetrics>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateCheckMetrics$ {
    /** @deprecated use `UpdateCheckMetrics$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateCheckMetrics, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateCheckMetrics$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateCheckMetrics$Outbound, z.ZodTypeDef, UpdateCheckMetrics>;
    /** @deprecated use `UpdateCheckMetrics$Outbound` instead. */
    type Outbound = UpdateCheckMetrics$Outbound;
}
export declare function updateCheckMetricsToJSON(updateCheckMetrics: UpdateCheckMetrics): string;
export declare function updateCheckMetricsFromJSON(jsonString: string): SafeParseResult<UpdateCheckMetrics, SDKValidationError>;
/** @internal */
export declare const UpdateCheckOutput$inboundSchema: z.ZodType<UpdateCheckOutput, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateCheckOutput$Outbound = {
    metrics?: UpdateCheckMetrics$Outbound | undefined;
};
/** @internal */
export declare const UpdateCheckOutput$outboundSchema: z.ZodType<UpdateCheckOutput$Outbound, z.ZodTypeDef, UpdateCheckOutput>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateCheckOutput$ {
    /** @deprecated use `UpdateCheckOutput$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateCheckOutput, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateCheckOutput$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateCheckOutput$Outbound, z.ZodTypeDef, UpdateCheckOutput>;
    /** @deprecated use `UpdateCheckOutput$Outbound` instead. */
    type Outbound = UpdateCheckOutput$Outbound;
}
export declare function updateCheckOutputToJSON(updateCheckOutput: UpdateCheckOutput): string;
export declare function updateCheckOutputFromJSON(jsonString: string): SafeParseResult<UpdateCheckOutput, SDKValidationError>;
/** @internal */
export declare const UpdateCheckResponseBody$inboundSchema: z.ZodType<UpdateCheckResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateCheckResponseBody$Outbound = {
    id: string;
    name: string;
    path?: string | undefined;
    status: string;
    conclusion?: string | undefined;
    blocking: boolean;
    output?: UpdateCheckOutput$Outbound | undefined;
    detailsUrl?: string | undefined;
    integrationId: string;
    deploymentId: string;
    externalId?: string | undefined;
    createdAt: number;
    updatedAt: number;
    startedAt?: number | undefined;
    completedAt?: number | undefined;
    rerequestable?: boolean | undefined;
};
/** @internal */
export declare const UpdateCheckResponseBody$outboundSchema: z.ZodType<UpdateCheckResponseBody$Outbound, z.ZodTypeDef, UpdateCheckResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateCheckResponseBody$ {
    /** @deprecated use `UpdateCheckResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateCheckResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateCheckResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateCheckResponseBody$Outbound, z.ZodTypeDef, UpdateCheckResponseBody>;
    /** @deprecated use `UpdateCheckResponseBody$Outbound` instead. */
    type Outbound = UpdateCheckResponseBody$Outbound;
}
export declare function updateCheckResponseBodyToJSON(updateCheckResponseBody: UpdateCheckResponseBody): string;
export declare function updateCheckResponseBodyFromJSON(jsonString: string): SafeParseResult<UpdateCheckResponseBody, SDKValidationError>;
//# sourceMappingURL=updatecheckop.d.ts.map