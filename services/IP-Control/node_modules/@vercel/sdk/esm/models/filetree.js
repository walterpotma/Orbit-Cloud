/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
/**
 * String indicating the type of file tree entry.
 */
export const Type = {
    Directory: "directory",
    File: "file",
    Symlink: "symlink",
    Lambda: "lambda",
    Middleware: "middleware",
    Invalid: "invalid",
};
/** @internal */
export const Type$inboundSchema = z.nativeEnum(Type);
/** @internal */
export const Type$outboundSchema = Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Type$;
(function (Type$) {
    /** @deprecated use `Type$inboundSchema` instead. */
    Type$.inboundSchema = Type$inboundSchema;
    /** @deprecated use `Type$outboundSchema` instead. */
    Type$.outboundSchema = Type$outboundSchema;
})(Type$ || (Type$ = {}));
/** @internal */
export const FileTree$inboundSchema = z.object({
    name: z.string(),
    type: Type$inboundSchema,
    uid: z.string().optional(),
    children: z.array(z.lazy(() => FileTree$inboundSchema)).optional(),
    contentType: z.string().optional(),
    mode: z.number(),
    symlink: z.string().optional(),
});
/** @internal */
export const FileTree$outboundSchema = z.object({
    name: z.string(),
    type: Type$outboundSchema,
    uid: z.string().optional(),
    children: z.array(z.lazy(() => FileTree$outboundSchema)).optional(),
    contentType: z.string().optional(),
    mode: z.number(),
    symlink: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FileTree$;
(function (FileTree$) {
    /** @deprecated use `FileTree$inboundSchema` instead. */
    FileTree$.inboundSchema = FileTree$inboundSchema;
    /** @deprecated use `FileTree$outboundSchema` instead. */
    FileTree$.outboundSchema = FileTree$outboundSchema;
})(FileTree$ || (FileTree$ = {}));
export function fileTreeToJSON(fileTree) {
    return JSON.stringify(FileTree$outboundSchema.parse(fileTree));
}
export function fileTreeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FileTree$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FileTree' from JSON`);
}
//# sourceMappingURL=filetree.js.map