/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
export const GetBypassIpAction = {
    Block: "block",
    Bypass: "bypass",
};
/** @internal */
export const GetBypassIpRequest$inboundSchema = z.object({
    projectId: z.string(),
    limit: z.number().optional(),
    sourceIp: z.string().optional(),
    domain: z.string().optional(),
    projectScope: z.boolean().optional(),
    offset: z.string().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/** @internal */
export const GetBypassIpRequest$outboundSchema = z.object({
    projectId: z.string(),
    limit: z.number().optional(),
    sourceIp: z.string().optional(),
    domain: z.string().optional(),
    projectScope: z.boolean().optional(),
    offset: z.string().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetBypassIpRequest$;
(function (GetBypassIpRequest$) {
    /** @deprecated use `GetBypassIpRequest$inboundSchema` instead. */
    GetBypassIpRequest$.inboundSchema = GetBypassIpRequest$inboundSchema;
    /** @deprecated use `GetBypassIpRequest$outboundSchema` instead. */
    GetBypassIpRequest$.outboundSchema = GetBypassIpRequest$outboundSchema;
})(GetBypassIpRequest$ || (GetBypassIpRequest$ = {}));
export function getBypassIpRequestToJSON(getBypassIpRequest) {
    return JSON.stringify(GetBypassIpRequest$outboundSchema.parse(getBypassIpRequest));
}
export function getBypassIpRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetBypassIpRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetBypassIpRequest' from JSON`);
}
/** @internal */
export const GetBypassIpAction$inboundSchema = z.nativeEnum(GetBypassIpAction);
/** @internal */
export const GetBypassIpAction$outboundSchema = GetBypassIpAction$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetBypassIpAction$;
(function (GetBypassIpAction$) {
    /** @deprecated use `GetBypassIpAction$inboundSchema` instead. */
    GetBypassIpAction$.inboundSchema = GetBypassIpAction$inboundSchema;
    /** @deprecated use `GetBypassIpAction$outboundSchema` instead. */
    GetBypassIpAction$.outboundSchema = GetBypassIpAction$outboundSchema;
})(GetBypassIpAction$ || (GetBypassIpAction$ = {}));
/** @internal */
export const GetBypassIpResult$inboundSchema = z.object({
    OwnerId: z.string(),
    Id: z.string(),
    Domain: z.string(),
    Ip: z.string(),
    Action: GetBypassIpAction$inboundSchema.optional(),
    ProjectId: z.string().optional(),
    IsProjectRule: z.boolean().optional(),
    Note: z.string().optional(),
    CreatedAt: z.string(),
    ActorId: z.string().optional(),
    UpdatedAt: z.string(),
    UpdatedAtHour: z.string(),
    DeletedAt: z.string().optional(),
    ExpiresAt: z.nullable(z.number()).optional(),
}).transform((v) => {
    return remap$(v, {
        "OwnerId": "ownerId",
        "Id": "id",
        "Domain": "domain",
        "Ip": "ip",
        "Action": "action",
        "ProjectId": "projectId",
        "IsProjectRule": "isProjectRule",
        "Note": "note",
        "CreatedAt": "createdAt",
        "ActorId": "actorId",
        "UpdatedAt": "updatedAt",
        "UpdatedAtHour": "updatedAtHour",
        "DeletedAt": "deletedAt",
        "ExpiresAt": "expiresAt",
    });
});
/** @internal */
export const GetBypassIpResult$outboundSchema = z.object({
    ownerId: z.string(),
    id: z.string(),
    domain: z.string(),
    ip: z.string(),
    action: GetBypassIpAction$outboundSchema.optional(),
    projectId: z.string().optional(),
    isProjectRule: z.boolean().optional(),
    note: z.string().optional(),
    createdAt: z.string(),
    actorId: z.string().optional(),
    updatedAt: z.string(),
    updatedAtHour: z.string(),
    deletedAt: z.string().optional(),
    expiresAt: z.nullable(z.number()).optional(),
}).transform((v) => {
    return remap$(v, {
        ownerId: "OwnerId",
        id: "Id",
        domain: "Domain",
        ip: "Ip",
        action: "Action",
        projectId: "ProjectId",
        isProjectRule: "IsProjectRule",
        note: "Note",
        createdAt: "CreatedAt",
        actorId: "ActorId",
        updatedAt: "UpdatedAt",
        updatedAtHour: "UpdatedAtHour",
        deletedAt: "DeletedAt",
        expiresAt: "ExpiresAt",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetBypassIpResult$;
(function (GetBypassIpResult$) {
    /** @deprecated use `GetBypassIpResult$inboundSchema` instead. */
    GetBypassIpResult$.inboundSchema = GetBypassIpResult$inboundSchema;
    /** @deprecated use `GetBypassIpResult$outboundSchema` instead. */
    GetBypassIpResult$.outboundSchema = GetBypassIpResult$outboundSchema;
})(GetBypassIpResult$ || (GetBypassIpResult$ = {}));
export function getBypassIpResultToJSON(getBypassIpResult) {
    return JSON.stringify(GetBypassIpResult$outboundSchema.parse(getBypassIpResult));
}
export function getBypassIpResultFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetBypassIpResult$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetBypassIpResult' from JSON`);
}
/** @internal */
export const GetBypassIpPagination$inboundSchema = z.object({
    OwnerId: z.string(),
    Id: z.string(),
}).transform((v) => {
    return remap$(v, {
        "OwnerId": "ownerId",
        "Id": "id",
    });
});
/** @internal */
export const GetBypassIpPagination$outboundSchema = z.object({
    ownerId: z.string(),
    id: z.string(),
}).transform((v) => {
    return remap$(v, {
        ownerId: "OwnerId",
        id: "Id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetBypassIpPagination$;
(function (GetBypassIpPagination$) {
    /** @deprecated use `GetBypassIpPagination$inboundSchema` instead. */
    GetBypassIpPagination$.inboundSchema = GetBypassIpPagination$inboundSchema;
    /** @deprecated use `GetBypassIpPagination$outboundSchema` instead. */
    GetBypassIpPagination$.outboundSchema = GetBypassIpPagination$outboundSchema;
})(GetBypassIpPagination$ || (GetBypassIpPagination$ = {}));
export function getBypassIpPaginationToJSON(getBypassIpPagination) {
    return JSON.stringify(GetBypassIpPagination$outboundSchema.parse(getBypassIpPagination));
}
export function getBypassIpPaginationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetBypassIpPagination$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetBypassIpPagination' from JSON`);
}
/** @internal */
export const GetBypassIpResponseBody$inboundSchema = z.object({
    result: z.array(z.lazy(() => GetBypassIpResult$inboundSchema)),
    pagination: z.lazy(() => GetBypassIpPagination$inboundSchema).optional(),
});
/** @internal */
export const GetBypassIpResponseBody$outboundSchema = z.object({
    result: z.array(z.lazy(() => GetBypassIpResult$outboundSchema)),
    pagination: z.lazy(() => GetBypassIpPagination$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetBypassIpResponseBody$;
(function (GetBypassIpResponseBody$) {
    /** @deprecated use `GetBypassIpResponseBody$inboundSchema` instead. */
    GetBypassIpResponseBody$.inboundSchema = GetBypassIpResponseBody$inboundSchema;
    /** @deprecated use `GetBypassIpResponseBody$outboundSchema` instead. */
    GetBypassIpResponseBody$.outboundSchema = GetBypassIpResponseBody$outboundSchema;
})(GetBypassIpResponseBody$ || (GetBypassIpResponseBody$ = {}));
export function getBypassIpResponseBodyToJSON(getBypassIpResponseBody) {
    return JSON.stringify(GetBypassIpResponseBody$outboundSchema.parse(getBypassIpResponseBody));
}
export function getBypassIpResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetBypassIpResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetBypassIpResponseBody' from JSON`);
}
//# sourceMappingURL=getbypassipop.js.map