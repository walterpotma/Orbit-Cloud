import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export declare const PatchEdgeConfigItems1Operation: {
    readonly Create: "create";
    readonly Update: "update";
    readonly Upsert: "upsert";
    readonly Delete: "delete";
};
export type PatchEdgeConfigItems1Operation = ClosedEnum<typeof PatchEdgeConfigItems1Operation>;
export type PatchEdgeConfigItems1Description = string | any;
export type One3 = {
    operation: PatchEdgeConfigItems1Operation;
    key: string;
    value?: any | null | undefined;
    description?: string | any | null | undefined;
};
export declare const OneOperation: {
    readonly Create: "create";
    readonly Update: "update";
    readonly Upsert: "upsert";
    readonly Delete: "delete";
};
export type OneOperation = ClosedEnum<typeof OneOperation>;
export type OneDescription = string | any;
export type One2 = {
    operation: OneOperation;
    key: string;
    value?: any | null | undefined;
    description?: string | any | null | undefined;
};
export declare const Operation: {
    readonly Create: "create";
    readonly Update: "update";
    readonly Upsert: "upsert";
    readonly Delete: "delete";
};
export type Operation = ClosedEnum<typeof Operation>;
export type Description = string | any;
export type One1 = {
    operation: Operation;
    key: string;
    value?: any | null | undefined;
    description?: string | any | null | undefined;
};
export type Items1 = One1 | One2 | One3;
export type Items = One1 | One2 | One3;
export type PatchEdgeConfigItemsRequestBody = {
    items: Array<One1 | One2 | One3>;
};
export type PatchEdgeConfigItemsRequest = {
    edgeConfigId: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody?: PatchEdgeConfigItemsRequestBody | undefined;
};
export type PatchEdgeConfigItemsResponseBody = {
    status: string;
};
/** @internal */
export declare const PatchEdgeConfigItems1Operation$inboundSchema: z.ZodNativeEnum<typeof PatchEdgeConfigItems1Operation>;
/** @internal */
export declare const PatchEdgeConfigItems1Operation$outboundSchema: z.ZodNativeEnum<typeof PatchEdgeConfigItems1Operation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PatchEdgeConfigItems1Operation$ {
    /** @deprecated use `PatchEdgeConfigItems1Operation$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Create: "create";
        readonly Update: "update";
        readonly Upsert: "upsert";
        readonly Delete: "delete";
    }>;
    /** @deprecated use `PatchEdgeConfigItems1Operation$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Create: "create";
        readonly Update: "update";
        readonly Upsert: "upsert";
        readonly Delete: "delete";
    }>;
}
/** @internal */
export declare const PatchEdgeConfigItems1Description$inboundSchema: z.ZodType<PatchEdgeConfigItems1Description, z.ZodTypeDef, unknown>;
/** @internal */
export type PatchEdgeConfigItems1Description$Outbound = string | any;
/** @internal */
export declare const PatchEdgeConfigItems1Description$outboundSchema: z.ZodType<PatchEdgeConfigItems1Description$Outbound, z.ZodTypeDef, PatchEdgeConfigItems1Description>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PatchEdgeConfigItems1Description$ {
    /** @deprecated use `PatchEdgeConfigItems1Description$inboundSchema` instead. */
    const inboundSchema: z.ZodType<any, z.ZodTypeDef, unknown>;
    /** @deprecated use `PatchEdgeConfigItems1Description$outboundSchema` instead. */
    const outboundSchema: z.ZodType<any, z.ZodTypeDef, any>;
    /** @deprecated use `PatchEdgeConfigItems1Description$Outbound` instead. */
    type Outbound = PatchEdgeConfigItems1Description$Outbound;
}
export declare function patchEdgeConfigItems1DescriptionToJSON(patchEdgeConfigItems1Description: PatchEdgeConfigItems1Description): string;
export declare function patchEdgeConfigItems1DescriptionFromJSON(jsonString: string): SafeParseResult<PatchEdgeConfigItems1Description, SDKValidationError>;
/** @internal */
export declare const One3$inboundSchema: z.ZodType<One3, z.ZodTypeDef, unknown>;
/** @internal */
export type One3$Outbound = {
    operation: string;
    key: string;
    value?: any | null | undefined;
    description?: string | any | null | undefined;
};
/** @internal */
export declare const One3$outboundSchema: z.ZodType<One3$Outbound, z.ZodTypeDef, One3>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace One3$ {
    /** @deprecated use `One3$inboundSchema` instead. */
    const inboundSchema: z.ZodType<One3, z.ZodTypeDef, unknown>;
    /** @deprecated use `One3$outboundSchema` instead. */
    const outboundSchema: z.ZodType<One3$Outbound, z.ZodTypeDef, One3>;
    /** @deprecated use `One3$Outbound` instead. */
    type Outbound = One3$Outbound;
}
export declare function one3ToJSON(one3: One3): string;
export declare function one3FromJSON(jsonString: string): SafeParseResult<One3, SDKValidationError>;
/** @internal */
export declare const OneOperation$inboundSchema: z.ZodNativeEnum<typeof OneOperation>;
/** @internal */
export declare const OneOperation$outboundSchema: z.ZodNativeEnum<typeof OneOperation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneOperation$ {
    /** @deprecated use `OneOperation$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Create: "create";
        readonly Update: "update";
        readonly Upsert: "upsert";
        readonly Delete: "delete";
    }>;
    /** @deprecated use `OneOperation$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Create: "create";
        readonly Update: "update";
        readonly Upsert: "upsert";
        readonly Delete: "delete";
    }>;
}
/** @internal */
export declare const OneDescription$inboundSchema: z.ZodType<OneDescription, z.ZodTypeDef, unknown>;
/** @internal */
export type OneDescription$Outbound = string | any;
/** @internal */
export declare const OneDescription$outboundSchema: z.ZodType<OneDescription$Outbound, z.ZodTypeDef, OneDescription>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneDescription$ {
    /** @deprecated use `OneDescription$inboundSchema` instead. */
    const inboundSchema: z.ZodType<any, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneDescription$outboundSchema` instead. */
    const outboundSchema: z.ZodType<any, z.ZodTypeDef, any>;
    /** @deprecated use `OneDescription$Outbound` instead. */
    type Outbound = OneDescription$Outbound;
}
export declare function oneDescriptionToJSON(oneDescription: OneDescription): string;
export declare function oneDescriptionFromJSON(jsonString: string): SafeParseResult<OneDescription, SDKValidationError>;
/** @internal */
export declare const One2$inboundSchema: z.ZodType<One2, z.ZodTypeDef, unknown>;
/** @internal */
export type One2$Outbound = {
    operation: string;
    key: string;
    value?: any | null | undefined;
    description?: string | any | null | undefined;
};
/** @internal */
export declare const One2$outboundSchema: z.ZodType<One2$Outbound, z.ZodTypeDef, One2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace One2$ {
    /** @deprecated use `One2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<One2, z.ZodTypeDef, unknown>;
    /** @deprecated use `One2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<One2$Outbound, z.ZodTypeDef, One2>;
    /** @deprecated use `One2$Outbound` instead. */
    type Outbound = One2$Outbound;
}
export declare function one2ToJSON(one2: One2): string;
export declare function one2FromJSON(jsonString: string): SafeParseResult<One2, SDKValidationError>;
/** @internal */
export declare const Operation$inboundSchema: z.ZodNativeEnum<typeof Operation>;
/** @internal */
export declare const Operation$outboundSchema: z.ZodNativeEnum<typeof Operation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Operation$ {
    /** @deprecated use `Operation$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Create: "create";
        readonly Update: "update";
        readonly Upsert: "upsert";
        readonly Delete: "delete";
    }>;
    /** @deprecated use `Operation$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Create: "create";
        readonly Update: "update";
        readonly Upsert: "upsert";
        readonly Delete: "delete";
    }>;
}
/** @internal */
export declare const Description$inboundSchema: z.ZodType<Description, z.ZodTypeDef, unknown>;
/** @internal */
export type Description$Outbound = string | any;
/** @internal */
export declare const Description$outboundSchema: z.ZodType<Description$Outbound, z.ZodTypeDef, Description>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Description$ {
    /** @deprecated use `Description$inboundSchema` instead. */
    const inboundSchema: z.ZodType<any, z.ZodTypeDef, unknown>;
    /** @deprecated use `Description$outboundSchema` instead. */
    const outboundSchema: z.ZodType<any, z.ZodTypeDef, any>;
    /** @deprecated use `Description$Outbound` instead. */
    type Outbound = Description$Outbound;
}
export declare function descriptionToJSON(description: Description): string;
export declare function descriptionFromJSON(jsonString: string): SafeParseResult<Description, SDKValidationError>;
/** @internal */
export declare const One1$inboundSchema: z.ZodType<One1, z.ZodTypeDef, unknown>;
/** @internal */
export type One1$Outbound = {
    operation: string;
    key: string;
    value?: any | null | undefined;
    description?: string | any | null | undefined;
};
/** @internal */
export declare const One1$outboundSchema: z.ZodType<One1$Outbound, z.ZodTypeDef, One1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace One1$ {
    /** @deprecated use `One1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<One1, z.ZodTypeDef, unknown>;
    /** @deprecated use `One1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<One1$Outbound, z.ZodTypeDef, One1>;
    /** @deprecated use `One1$Outbound` instead. */
    type Outbound = One1$Outbound;
}
export declare function one1ToJSON(one1: One1): string;
export declare function one1FromJSON(jsonString: string): SafeParseResult<One1, SDKValidationError>;
/** @internal */
export declare const Items1$inboundSchema: z.ZodType<Items1, z.ZodTypeDef, unknown>;
/** @internal */
export type Items1$Outbound = One1$Outbound | One2$Outbound | One3$Outbound;
/** @internal */
export declare const Items1$outboundSchema: z.ZodType<Items1$Outbound, z.ZodTypeDef, Items1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Items1$ {
    /** @deprecated use `Items1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Items1, z.ZodTypeDef, unknown>;
    /** @deprecated use `Items1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Items1$Outbound, z.ZodTypeDef, Items1>;
    /** @deprecated use `Items1$Outbound` instead. */
    type Outbound = Items1$Outbound;
}
export declare function items1ToJSON(items1: Items1): string;
export declare function items1FromJSON(jsonString: string): SafeParseResult<Items1, SDKValidationError>;
/** @internal */
export declare const Items$inboundSchema: z.ZodType<Items, z.ZodTypeDef, unknown>;
/** @internal */
export type Items$Outbound = One1$Outbound | One2$Outbound | One3$Outbound;
/** @internal */
export declare const Items$outboundSchema: z.ZodType<Items$Outbound, z.ZodTypeDef, Items>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Items$ {
    /** @deprecated use `Items$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Items, z.ZodTypeDef, unknown>;
    /** @deprecated use `Items$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Items$Outbound, z.ZodTypeDef, Items>;
    /** @deprecated use `Items$Outbound` instead. */
    type Outbound = Items$Outbound;
}
export declare function itemsToJSON(items: Items): string;
export declare function itemsFromJSON(jsonString: string): SafeParseResult<Items, SDKValidationError>;
/** @internal */
export declare const PatchEdgeConfigItemsRequestBody$inboundSchema: z.ZodType<PatchEdgeConfigItemsRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type PatchEdgeConfigItemsRequestBody$Outbound = {
    items: Array<One1$Outbound | One2$Outbound | One3$Outbound>;
};
/** @internal */
export declare const PatchEdgeConfigItemsRequestBody$outboundSchema: z.ZodType<PatchEdgeConfigItemsRequestBody$Outbound, z.ZodTypeDef, PatchEdgeConfigItemsRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PatchEdgeConfigItemsRequestBody$ {
    /** @deprecated use `PatchEdgeConfigItemsRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PatchEdgeConfigItemsRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `PatchEdgeConfigItemsRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PatchEdgeConfigItemsRequestBody$Outbound, z.ZodTypeDef, PatchEdgeConfigItemsRequestBody>;
    /** @deprecated use `PatchEdgeConfigItemsRequestBody$Outbound` instead. */
    type Outbound = PatchEdgeConfigItemsRequestBody$Outbound;
}
export declare function patchEdgeConfigItemsRequestBodyToJSON(patchEdgeConfigItemsRequestBody: PatchEdgeConfigItemsRequestBody): string;
export declare function patchEdgeConfigItemsRequestBodyFromJSON(jsonString: string): SafeParseResult<PatchEdgeConfigItemsRequestBody, SDKValidationError>;
/** @internal */
export declare const PatchEdgeConfigItemsRequest$inboundSchema: z.ZodType<PatchEdgeConfigItemsRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type PatchEdgeConfigItemsRequest$Outbound = {
    edgeConfigId: string;
    teamId?: string | undefined;
    slug?: string | undefined;
    RequestBody?: PatchEdgeConfigItemsRequestBody$Outbound | undefined;
};
/** @internal */
export declare const PatchEdgeConfigItemsRequest$outboundSchema: z.ZodType<PatchEdgeConfigItemsRequest$Outbound, z.ZodTypeDef, PatchEdgeConfigItemsRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PatchEdgeConfigItemsRequest$ {
    /** @deprecated use `PatchEdgeConfigItemsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PatchEdgeConfigItemsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `PatchEdgeConfigItemsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PatchEdgeConfigItemsRequest$Outbound, z.ZodTypeDef, PatchEdgeConfigItemsRequest>;
    /** @deprecated use `PatchEdgeConfigItemsRequest$Outbound` instead. */
    type Outbound = PatchEdgeConfigItemsRequest$Outbound;
}
export declare function patchEdgeConfigItemsRequestToJSON(patchEdgeConfigItemsRequest: PatchEdgeConfigItemsRequest): string;
export declare function patchEdgeConfigItemsRequestFromJSON(jsonString: string): SafeParseResult<PatchEdgeConfigItemsRequest, SDKValidationError>;
/** @internal */
export declare const PatchEdgeConfigItemsResponseBody$inboundSchema: z.ZodType<PatchEdgeConfigItemsResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type PatchEdgeConfigItemsResponseBody$Outbound = {
    status: string;
};
/** @internal */
export declare const PatchEdgeConfigItemsResponseBody$outboundSchema: z.ZodType<PatchEdgeConfigItemsResponseBody$Outbound, z.ZodTypeDef, PatchEdgeConfigItemsResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PatchEdgeConfigItemsResponseBody$ {
    /** @deprecated use `PatchEdgeConfigItemsResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PatchEdgeConfigItemsResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `PatchEdgeConfigItemsResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PatchEdgeConfigItemsResponseBody$Outbound, z.ZodTypeDef, PatchEdgeConfigItemsResponseBody>;
    /** @deprecated use `PatchEdgeConfigItemsResponseBody$Outbound` instead. */
    type Outbound = PatchEdgeConfigItemsResponseBody$Outbound;
}
export declare function patchEdgeConfigItemsResponseBodyToJSON(patchEdgeConfigItemsResponseBody: PatchEdgeConfigItemsResponseBody): string;
export declare function patchEdgeConfigItemsResponseBodyFromJSON(jsonString: string): SafeParseResult<PatchEdgeConfigItemsResponseBody, SDKValidationError>;
//# sourceMappingURL=patchedgeconfigitemsop.d.ts.map