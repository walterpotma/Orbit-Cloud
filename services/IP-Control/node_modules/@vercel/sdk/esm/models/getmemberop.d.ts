import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type GetMemberRequest = {
    integrationConfigurationId: string;
    memberId: string;
};
/**
 * "The `ADMIN` role, by default, is provided to users capable of installing integrations, while the `USER` role can be granted to Vercel users with the Vercel `Billing` or Vercel `Viewer` role, which are considered to be Read-Only roles."
 */
export declare const GetMemberRole: {
    readonly Admin: "ADMIN";
    readonly User: "USER";
};
/**
 * "The `ADMIN` role, by default, is provided to users capable of installing integrations, while the `USER` role can be granted to Vercel users with the Vercel `Billing` or Vercel `Viewer` role, which are considered to be Read-Only roles."
 */
export type GetMemberRole = ClosedEnum<typeof GetMemberRole>;
export type GetMemberResponseBody = {
    id: string;
    /**
     * "The `ADMIN` role, by default, is provided to users capable of installing integrations, while the `USER` role can be granted to Vercel users with the Vercel `Billing` or Vercel `Viewer` role, which are considered to be Read-Only roles."
     */
    role: GetMemberRole;
};
/** @internal */
export declare const GetMemberRequest$inboundSchema: z.ZodType<GetMemberRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetMemberRequest$Outbound = {
    integrationConfigurationId: string;
    memberId: string;
};
/** @internal */
export declare const GetMemberRequest$outboundSchema: z.ZodType<GetMemberRequest$Outbound, z.ZodTypeDef, GetMemberRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetMemberRequest$ {
    /** @deprecated use `GetMemberRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetMemberRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetMemberRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetMemberRequest$Outbound, z.ZodTypeDef, GetMemberRequest>;
    /** @deprecated use `GetMemberRequest$Outbound` instead. */
    type Outbound = GetMemberRequest$Outbound;
}
export declare function getMemberRequestToJSON(getMemberRequest: GetMemberRequest): string;
export declare function getMemberRequestFromJSON(jsonString: string): SafeParseResult<GetMemberRequest, SDKValidationError>;
/** @internal */
export declare const GetMemberRole$inboundSchema: z.ZodNativeEnum<typeof GetMemberRole>;
/** @internal */
export declare const GetMemberRole$outboundSchema: z.ZodNativeEnum<typeof GetMemberRole>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetMemberRole$ {
    /** @deprecated use `GetMemberRole$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Admin: "ADMIN";
        readonly User: "USER";
    }>;
    /** @deprecated use `GetMemberRole$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Admin: "ADMIN";
        readonly User: "USER";
    }>;
}
/** @internal */
export declare const GetMemberResponseBody$inboundSchema: z.ZodType<GetMemberResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type GetMemberResponseBody$Outbound = {
    id: string;
    role: string;
};
/** @internal */
export declare const GetMemberResponseBody$outboundSchema: z.ZodType<GetMemberResponseBody$Outbound, z.ZodTypeDef, GetMemberResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetMemberResponseBody$ {
    /** @deprecated use `GetMemberResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetMemberResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetMemberResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetMemberResponseBody$Outbound, z.ZodTypeDef, GetMemberResponseBody>;
    /** @deprecated use `GetMemberResponseBody$Outbound` instead. */
    type Outbound = GetMemberResponseBody$Outbound;
}
export declare function getMemberResponseBodyToJSON(getMemberResponseBody: GetMemberResponseBody): string;
export declare function getMemberResponseBodyFromJSON(jsonString: string): SafeParseResult<GetMemberResponseBody, SDKValidationError>;
//# sourceMappingURL=getmemberop.d.ts.map