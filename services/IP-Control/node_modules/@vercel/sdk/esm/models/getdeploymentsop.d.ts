import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { Pagination, Pagination$Outbound } from "./pagination.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type GetDeploymentsRequest = {
    /**
     * Name of the deployment.
     */
    app?: string | undefined;
    /**
     * Gets the deployment created after this Date timestamp. (default: current time)
     */
    from?: number | undefined;
    /**
     * Maximum number of deployments to list from a request.
     */
    limit?: number | undefined;
    /**
     * Filter deployments from the given ID or name.
     */
    projectId?: string | undefined;
    /**
     * Filter deployments based on the environment.
     */
    target?: string | undefined;
    /**
     * Gets the deployment created before this Date timestamp. (default: current time)
     */
    to?: number | undefined;
    /**
     * Filter out deployments based on users who have created the deployment.
     */
    users?: string | undefined;
    /**
     * Get Deployments created after this JavaScript timestamp.
     */
    since?: number | undefined;
    /**
     * Get Deployments created before this JavaScript timestamp.
     */
    until?: number | undefined;
    /**
     * Filter deployments based on their state (`BUILDING`, `ERROR`, `INITIALIZING`, `QUEUED`, `READY`, `CANCELED`)
     */
    state?: string | undefined;
    /**
     * Filter deployments based on their rollback candidacy
     */
    rollbackCandidate?: boolean | undefined;
    /**
     * Filter deployments based on the branch name
     */
    branch?: string | undefined;
    /**
     * Filter deployments based on the SHA
     */
    sha?: string | undefined;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};
/**
 * The source of the deployment.
 */
export declare const GetDeploymentsSource: {
    readonly ApiTriggerGitDeploy: "api-trigger-git-deploy";
    readonly Cli: "cli";
    readonly CloneRepo: "clone/repo";
    readonly Git: "git";
    readonly Import: "import";
    readonly ImportRepo: "import/repo";
    readonly Redeploy: "redeploy";
    readonly V0Web: "v0-web";
};
/**
 * The source of the deployment.
 */
export type GetDeploymentsSource = ClosedEnum<typeof GetDeploymentsSource>;
/**
 * In which state is the deployment.
 */
export declare const GetDeploymentsState: {
    readonly Building: "BUILDING";
    readonly Error: "ERROR";
    readonly Initializing: "INITIALIZING";
    readonly Queued: "QUEUED";
    readonly Ready: "READY";
    readonly Canceled: "CANCELED";
    readonly Deleted: "DELETED";
};
/**
 * In which state is the deployment.
 */
export type GetDeploymentsState = ClosedEnum<typeof GetDeploymentsState>;
/**
 * In which state is the deployment.
 */
export declare const GetDeploymentsReadyState: {
    readonly Building: "BUILDING";
    readonly Error: "ERROR";
    readonly Initializing: "INITIALIZING";
    readonly Queued: "QUEUED";
    readonly Ready: "READY";
    readonly Canceled: "CANCELED";
    readonly Deleted: "DELETED";
};
/**
 * In which state is the deployment.
 */
export type GetDeploymentsReadyState = ClosedEnum<typeof GetDeploymentsReadyState>;
/**
 * The type of the deployment.
 */
export declare const GetDeploymentsType: {
    readonly Lambdas: "LAMBDAS";
};
/**
 * The type of the deployment.
 */
export type GetDeploymentsType = ClosedEnum<typeof GetDeploymentsType>;
/**
 * Metadata information of the user who created the deployment.
 */
export type GetDeploymentsCreator = {
    /**
     * The unique identifier of the user.
     */
    uid: string;
    /**
     * The email address of the user.
     */
    email?: string | undefined;
    /**
     * The username of the user.
     */
    username?: string | undefined;
    /**
     * The GitHub login of the user.
     */
    githubLogin?: string | undefined;
    /**
     * The GitLab login of the user.
     */
    gitlabLogin?: string | undefined;
};
/**
 * On which environment has the deployment been deployed to.
 */
export declare const GetDeploymentsTarget: {
    readonly Production: "production";
    readonly Staging: "staging";
};
/**
 * On which environment has the deployment been deployed to.
 */
export type GetDeploymentsTarget = ClosedEnum<typeof GetDeploymentsTarget>;
/**
 * An error object in case aliasing of the deployment failed.
 */
export type GetDeploymentsAliasError = {
    code: string;
    message: string;
};
export type GetDeploymentsAliasAssigned = number | boolean;
/**
 * Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - ROLLING: in the process of gradually transitioning production traffic - PROMOTED: has seen production traffic
 */
export declare const GetDeploymentsReadySubstate: {
    readonly Staged: "STAGED";
    readonly Rolling: "ROLLING";
    readonly Promoted: "PROMOTED";
};
/**
 * Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - ROLLING: in the process of gradually transitioning production traffic - PROMOTED: has seen production traffic
 */
export type GetDeploymentsReadySubstate = ClosedEnum<typeof GetDeploymentsReadySubstate>;
/**
 * State of all registered checks
 */
export declare const GetDeploymentsChecksState: {
    readonly Registered: "registered";
    readonly Running: "running";
    readonly Completed: "completed";
};
/**
 * State of all registered checks
 */
export type GetDeploymentsChecksState = ClosedEnum<typeof GetDeploymentsChecksState>;
/**
 * Conclusion for checks
 */
export declare const GetDeploymentsChecksConclusion: {
    readonly Succeeded: "succeeded";
    readonly Failed: "failed";
    readonly Skipped: "skipped";
    readonly Canceled: "canceled";
};
/**
 * Conclusion for checks
 */
export type GetDeploymentsChecksConclusion = ClosedEnum<typeof GetDeploymentsChecksConclusion>;
export declare const GetDeploymentsDeploymentsState: {
    readonly Succeeded: "succeeded";
    readonly Failed: "failed";
    readonly Pending: "pending";
};
export type GetDeploymentsDeploymentsState = ClosedEnum<typeof GetDeploymentsDeploymentsState>;
/**
 * Detailed information about v2 deployment checks. Includes information about blocked workflows in the deployment lifecycle.
 */
export type GetDeploymentsDeploymentAlias = {
    state: GetDeploymentsDeploymentsState;
    startedAt: number;
    completedAt?: number | undefined;
};
/**
 * Detailed information about v2 deployment checks. Includes information about blocked workflows in the deployment lifecycle.
 */
export type GetDeploymentsChecks = {
    /**
     * Detailed information about v2 deployment checks. Includes information about blocked workflows in the deployment lifecycle.
     */
    deploymentAlias: GetDeploymentsDeploymentAlias;
};
/**
 * Indicates if the deployment encountered an out-of-memory error.
 */
export declare const GetDeploymentsOomReport: {
    readonly OutOfMemory: "out-of-memory";
};
/**
 * Indicates if the deployment encountered an out-of-memory error.
 */
export type GetDeploymentsOomReport = ClosedEnum<typeof GetDeploymentsOomReport>;
export declare const GetDeploymentsFramework: {
    readonly Blitzjs: "blitzjs";
    readonly Nextjs: "nextjs";
    readonly Gatsby: "gatsby";
    readonly Remix: "remix";
    readonly ReactRouter: "react-router";
    readonly Astro: "astro";
    readonly Hexo: "hexo";
    readonly Eleventy: "eleventy";
    readonly Docusaurus2: "docusaurus-2";
    readonly Docusaurus: "docusaurus";
    readonly Preact: "preact";
    readonly Solidstart1: "solidstart-1";
    readonly Solidstart: "solidstart";
    readonly Dojo: "dojo";
    readonly Ember: "ember";
    readonly Vue: "vue";
    readonly Scully: "scully";
    readonly IonicAngular: "ionic-angular";
    readonly Angular: "angular";
    readonly Polymer: "polymer";
    readonly Svelte: "svelte";
    readonly Sveltekit: "sveltekit";
    readonly Sveltekit1: "sveltekit-1";
    readonly IonicReact: "ionic-react";
    readonly CreateReactApp: "create-react-app";
    readonly Gridsome: "gridsome";
    readonly Umijs: "umijs";
    readonly Sapper: "sapper";
    readonly Saber: "saber";
    readonly Stencil: "stencil";
    readonly Nuxtjs: "nuxtjs";
    readonly Redwoodjs: "redwoodjs";
    readonly Hugo: "hugo";
    readonly Jekyll: "jekyll";
    readonly Brunch: "brunch";
    readonly Middleman: "middleman";
    readonly Zola: "zola";
    readonly Hydrogen: "hydrogen";
    readonly Vite: "vite";
    readonly Vitepress: "vitepress";
    readonly Vuepress: "vuepress";
    readonly Parcel: "parcel";
    readonly Fastapi: "fastapi";
    readonly Fasthtml: "fasthtml";
    readonly SanityV3: "sanity-v3";
    readonly Sanity: "sanity";
    readonly Storybook: "storybook";
    readonly Nitro: "nitro";
    readonly Hono: "hono";
    readonly Express: "express";
    readonly Xmcp: "xmcp";
};
export type GetDeploymentsFramework = ClosedEnum<typeof GetDeploymentsFramework>;
export declare const GetDeploymentsNodeVersion: {
    readonly TwentyTwoDotX: "22.x";
    readonly TwentyDotX: "20.x";
    readonly EighteenDotX: "18.x";
    readonly SixteenDotX: "16.x";
    readonly FourteenDotX: "14.x";
    readonly TwelveDotX: "12.x";
    readonly TenDotX: "10.x";
    readonly EightDot10DotX: "8.10.x";
};
export type GetDeploymentsNodeVersion = ClosedEnum<typeof GetDeploymentsNodeVersion>;
export type GetDeploymentsSpeedInsights = {
    id: string;
    enabledAt?: number | undefined;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    hasData?: boolean | undefined;
    paidAt?: number | undefined;
};
export type GetDeploymentsWebAnalytics = {
    id: string;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    enabledAt?: number | undefined;
    hasData?: boolean | undefined;
};
/**
 * Since June '23
 */
export type GetDeploymentsGitComments = {
    /**
     * Whether the Vercel bot should comment on PRs
     */
    onPullRequest: boolean;
    /**
     * Whether the Vercel bot should comment on commits
     */
    onCommit: boolean;
};
/**
 * The project settings which was used for this deployment
 */
export type GetDeploymentsProjectSettings = {
    framework?: GetDeploymentsFramework | null | undefined;
    gitForkProtection?: boolean | undefined;
    customerSupportCodeVisibility?: boolean | undefined;
    gitLFS?: boolean | undefined;
    devCommand?: string | null | undefined;
    installCommand?: string | null | undefined;
    buildCommand?: string | null | undefined;
    nodeVersion?: GetDeploymentsNodeVersion | undefined;
    outputDirectory?: string | null | undefined;
    publicSource?: boolean | null | undefined;
    rootDirectory?: string | null | undefined;
    sourceFilesOutsideRootDirectory?: boolean | undefined;
    commandForIgnoringBuildStep?: string | null | undefined;
    createdAt?: number | undefined;
    speedInsights?: GetDeploymentsSpeedInsights | undefined;
    webAnalytics?: GetDeploymentsWebAnalytics | undefined;
    skipGitConnectDuringLink?: boolean | undefined;
    /**
     * Since June '23
     */
    gitComments?: GetDeploymentsGitComments | undefined;
};
/**
 * The custom environment used for this deployment, if any
 */
export type GetDeploymentsCustomEnvironment = {
    id: string;
    slug?: string | undefined;
};
export type Deployments = {
    /**
     * The unique identifier of the deployment.
     */
    uid: string;
    /**
     * The name of the deployment.
     */
    name: string;
    /**
     * The project ID of the deployment
     */
    projectId: string;
    /**
     * The URL of the deployment.
     */
    url: string;
    /**
     * Timestamp of when the deployment got created.
     */
    created: number;
    /**
     * The default route that should be used for screenshots and links if configured with microfrontends.
     */
    defaultRoute?: string | undefined;
    /**
     * Timestamp of when the deployment got deleted.
     */
    deleted?: number | undefined;
    /**
     * Timestamp of when the deployment was undeleted.
     */
    undeleted?: number | undefined;
    /**
     * Optional flag to indicate if the deployment was soft deleted by retention policy.
     */
    softDeletedByRetention?: boolean | undefined;
    /**
     * The source of the deployment.
     */
    source?: GetDeploymentsSource | undefined;
    /**
     * In which state is the deployment.
     */
    state?: GetDeploymentsState | undefined;
    /**
     * In which state is the deployment.
     */
    readyState?: GetDeploymentsReadyState | undefined;
    /**
     * The type of the deployment.
     */
    type: GetDeploymentsType;
    /**
     * Metadata information of the user who created the deployment.
     */
    creator: GetDeploymentsCreator;
    /**
     * Metadata information from the Git provider.
     */
    meta?: {
        [k: string]: string;
    } | undefined;
    /**
     * On which environment has the deployment been deployed to.
     */
    target?: GetDeploymentsTarget | null | undefined;
    /**
     * An error object in case aliasing of the deployment failed.
     */
    aliasError?: GetDeploymentsAliasError | null | undefined;
    aliasAssigned?: number | boolean | null | undefined;
    /**
     * Timestamp of when the deployment got created.
     */
    createdAt?: number | undefined;
    /**
     * Timestamp of when the deployment started building at.
     */
    buildingAt?: number | undefined;
    /**
     * Timestamp of when the deployment got ready.
     */
    ready?: number | undefined;
    /**
     * Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - ROLLING: in the process of gradually transitioning production traffic - PROMOTED: has seen production traffic
     */
    readySubstate?: GetDeploymentsReadySubstate | undefined;
    /**
     * State of all registered checks
     */
    checksState?: GetDeploymentsChecksState | undefined;
    /**
     * Conclusion for checks
     */
    checksConclusion?: GetDeploymentsChecksConclusion | undefined;
    /**
     * Detailed information about v2 deployment checks. Includes information about blocked workflows in the deployment lifecycle.
     */
    checks?: GetDeploymentsChecks | undefined;
    /**
     * Vercel URL to inspect the deployment.
     */
    inspectorUrl: string | null;
    /**
     * Error code when the deployment is in an error state.
     */
    errorCode?: string | undefined;
    /**
     * Error message when the deployment is in an canceled or error state.
     */
    errorMessage?: string | null | undefined;
    /**
     * Indicates if the deployment encountered an out-of-memory error.
     */
    oomReport?: GetDeploymentsOomReport | undefined;
    /**
     * Deployment can be used for instant rollback
     */
    isRollbackCandidate?: boolean | null | undefined;
    /**
     * The project settings which was used for this deployment
     */
    projectSettings?: GetDeploymentsProjectSettings | undefined;
    /**
     * The flag saying if Secure Compute network is used for builds
     */
    connectBuildsEnabled?: boolean | undefined;
    /**
     * The ID of Secure Compute network used for this deployment
     */
    connectConfigurationId?: string | undefined;
    /**
     * The ID of Secure Compute network used for this deployment's passive functions
     */
    passiveConnectConfigurationId?: string | undefined;
    /**
     * The expiration configured by the project retention policy
     */
    expiration?: number | undefined;
    /**
     * The expiration proposed to replace the existing expiration
     */
    proposedExpiration?: number | undefined;
    /**
     * The custom environment used for this deployment, if any
     */
    customEnvironment?: GetDeploymentsCustomEnvironment | undefined;
};
export type GetDeploymentsResponseBody = {
    /**
     * This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.
     */
    pagination: Pagination;
    deployments: Array<Deployments>;
};
/** @internal */
export declare const GetDeploymentsRequest$inboundSchema: z.ZodType<GetDeploymentsRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentsRequest$Outbound = {
    app?: string | undefined;
    from?: number | undefined;
    limit?: number | undefined;
    projectId?: string | undefined;
    target?: string | undefined;
    to?: number | undefined;
    users?: string | undefined;
    since?: number | undefined;
    until?: number | undefined;
    state?: string | undefined;
    rollbackCandidate?: boolean | undefined;
    branch?: string | undefined;
    sha?: string | undefined;
    teamId?: string | undefined;
    slug?: string | undefined;
};
/** @internal */
export declare const GetDeploymentsRequest$outboundSchema: z.ZodType<GetDeploymentsRequest$Outbound, z.ZodTypeDef, GetDeploymentsRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentsRequest$ {
    /** @deprecated use `GetDeploymentsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentsRequest$Outbound, z.ZodTypeDef, GetDeploymentsRequest>;
    /** @deprecated use `GetDeploymentsRequest$Outbound` instead. */
    type Outbound = GetDeploymentsRequest$Outbound;
}
export declare function getDeploymentsRequestToJSON(getDeploymentsRequest: GetDeploymentsRequest): string;
export declare function getDeploymentsRequestFromJSON(jsonString: string): SafeParseResult<GetDeploymentsRequest, SDKValidationError>;
/** @internal */
export declare const GetDeploymentsSource$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentsSource>;
/** @internal */
export declare const GetDeploymentsSource$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentsSource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentsSource$ {
    /** @deprecated use `GetDeploymentsSource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly ApiTriggerGitDeploy: "api-trigger-git-deploy";
        readonly Cli: "cli";
        readonly CloneRepo: "clone/repo";
        readonly Git: "git";
        readonly Import: "import";
        readonly ImportRepo: "import/repo";
        readonly Redeploy: "redeploy";
        readonly V0Web: "v0-web";
    }>;
    /** @deprecated use `GetDeploymentsSource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly ApiTriggerGitDeploy: "api-trigger-git-deploy";
        readonly Cli: "cli";
        readonly CloneRepo: "clone/repo";
        readonly Git: "git";
        readonly Import: "import";
        readonly ImportRepo: "import/repo";
        readonly Redeploy: "redeploy";
        readonly V0Web: "v0-web";
    }>;
}
/** @internal */
export declare const GetDeploymentsState$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentsState>;
/** @internal */
export declare const GetDeploymentsState$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentsState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentsState$ {
    /** @deprecated use `GetDeploymentsState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Queued: "QUEUED";
        readonly Ready: "READY";
        readonly Canceled: "CANCELED";
        readonly Deleted: "DELETED";
    }>;
    /** @deprecated use `GetDeploymentsState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Queued: "QUEUED";
        readonly Ready: "READY";
        readonly Canceled: "CANCELED";
        readonly Deleted: "DELETED";
    }>;
}
/** @internal */
export declare const GetDeploymentsReadyState$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentsReadyState>;
/** @internal */
export declare const GetDeploymentsReadyState$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentsReadyState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentsReadyState$ {
    /** @deprecated use `GetDeploymentsReadyState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Queued: "QUEUED";
        readonly Ready: "READY";
        readonly Canceled: "CANCELED";
        readonly Deleted: "DELETED";
    }>;
    /** @deprecated use `GetDeploymentsReadyState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Queued: "QUEUED";
        readonly Ready: "READY";
        readonly Canceled: "CANCELED";
        readonly Deleted: "DELETED";
    }>;
}
/** @internal */
export declare const GetDeploymentsType$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentsType>;
/** @internal */
export declare const GetDeploymentsType$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentsType$ {
    /** @deprecated use `GetDeploymentsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Lambdas: "LAMBDAS";
    }>;
    /** @deprecated use `GetDeploymentsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Lambdas: "LAMBDAS";
    }>;
}
/** @internal */
export declare const GetDeploymentsCreator$inboundSchema: z.ZodType<GetDeploymentsCreator, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentsCreator$Outbound = {
    uid: string;
    email?: string | undefined;
    username?: string | undefined;
    githubLogin?: string | undefined;
    gitlabLogin?: string | undefined;
};
/** @internal */
export declare const GetDeploymentsCreator$outboundSchema: z.ZodType<GetDeploymentsCreator$Outbound, z.ZodTypeDef, GetDeploymentsCreator>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentsCreator$ {
    /** @deprecated use `GetDeploymentsCreator$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentsCreator, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentsCreator$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentsCreator$Outbound, z.ZodTypeDef, GetDeploymentsCreator>;
    /** @deprecated use `GetDeploymentsCreator$Outbound` instead. */
    type Outbound = GetDeploymentsCreator$Outbound;
}
export declare function getDeploymentsCreatorToJSON(getDeploymentsCreator: GetDeploymentsCreator): string;
export declare function getDeploymentsCreatorFromJSON(jsonString: string): SafeParseResult<GetDeploymentsCreator, SDKValidationError>;
/** @internal */
export declare const GetDeploymentsTarget$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentsTarget>;
/** @internal */
export declare const GetDeploymentsTarget$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentsTarget>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentsTarget$ {
    /** @deprecated use `GetDeploymentsTarget$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Production: "production";
        readonly Staging: "staging";
    }>;
    /** @deprecated use `GetDeploymentsTarget$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Production: "production";
        readonly Staging: "staging";
    }>;
}
/** @internal */
export declare const GetDeploymentsAliasError$inboundSchema: z.ZodType<GetDeploymentsAliasError, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentsAliasError$Outbound = {
    code: string;
    message: string;
};
/** @internal */
export declare const GetDeploymentsAliasError$outboundSchema: z.ZodType<GetDeploymentsAliasError$Outbound, z.ZodTypeDef, GetDeploymentsAliasError>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentsAliasError$ {
    /** @deprecated use `GetDeploymentsAliasError$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentsAliasError, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentsAliasError$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentsAliasError$Outbound, z.ZodTypeDef, GetDeploymentsAliasError>;
    /** @deprecated use `GetDeploymentsAliasError$Outbound` instead. */
    type Outbound = GetDeploymentsAliasError$Outbound;
}
export declare function getDeploymentsAliasErrorToJSON(getDeploymentsAliasError: GetDeploymentsAliasError): string;
export declare function getDeploymentsAliasErrorFromJSON(jsonString: string): SafeParseResult<GetDeploymentsAliasError, SDKValidationError>;
/** @internal */
export declare const GetDeploymentsAliasAssigned$inboundSchema: z.ZodType<GetDeploymentsAliasAssigned, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentsAliasAssigned$Outbound = number | boolean;
/** @internal */
export declare const GetDeploymentsAliasAssigned$outboundSchema: z.ZodType<GetDeploymentsAliasAssigned$Outbound, z.ZodTypeDef, GetDeploymentsAliasAssigned>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentsAliasAssigned$ {
    /** @deprecated use `GetDeploymentsAliasAssigned$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentsAliasAssigned, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentsAliasAssigned$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentsAliasAssigned$Outbound, z.ZodTypeDef, GetDeploymentsAliasAssigned>;
    /** @deprecated use `GetDeploymentsAliasAssigned$Outbound` instead. */
    type Outbound = GetDeploymentsAliasAssigned$Outbound;
}
export declare function getDeploymentsAliasAssignedToJSON(getDeploymentsAliasAssigned: GetDeploymentsAliasAssigned): string;
export declare function getDeploymentsAliasAssignedFromJSON(jsonString: string): SafeParseResult<GetDeploymentsAliasAssigned, SDKValidationError>;
/** @internal */
export declare const GetDeploymentsReadySubstate$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentsReadySubstate>;
/** @internal */
export declare const GetDeploymentsReadySubstate$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentsReadySubstate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentsReadySubstate$ {
    /** @deprecated use `GetDeploymentsReadySubstate$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Staged: "STAGED";
        readonly Rolling: "ROLLING";
        readonly Promoted: "PROMOTED";
    }>;
    /** @deprecated use `GetDeploymentsReadySubstate$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Staged: "STAGED";
        readonly Rolling: "ROLLING";
        readonly Promoted: "PROMOTED";
    }>;
}
/** @internal */
export declare const GetDeploymentsChecksState$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentsChecksState>;
/** @internal */
export declare const GetDeploymentsChecksState$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentsChecksState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentsChecksState$ {
    /** @deprecated use `GetDeploymentsChecksState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Registered: "registered";
        readonly Running: "running";
        readonly Completed: "completed";
    }>;
    /** @deprecated use `GetDeploymentsChecksState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Registered: "registered";
        readonly Running: "running";
        readonly Completed: "completed";
    }>;
}
/** @internal */
export declare const GetDeploymentsChecksConclusion$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentsChecksConclusion>;
/** @internal */
export declare const GetDeploymentsChecksConclusion$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentsChecksConclusion>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentsChecksConclusion$ {
    /** @deprecated use `GetDeploymentsChecksConclusion$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Succeeded: "succeeded";
        readonly Failed: "failed";
        readonly Skipped: "skipped";
        readonly Canceled: "canceled";
    }>;
    /** @deprecated use `GetDeploymentsChecksConclusion$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Succeeded: "succeeded";
        readonly Failed: "failed";
        readonly Skipped: "skipped";
        readonly Canceled: "canceled";
    }>;
}
/** @internal */
export declare const GetDeploymentsDeploymentsState$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentsDeploymentsState>;
/** @internal */
export declare const GetDeploymentsDeploymentsState$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentsDeploymentsState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentsDeploymentsState$ {
    /** @deprecated use `GetDeploymentsDeploymentsState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Succeeded: "succeeded";
        readonly Failed: "failed";
        readonly Pending: "pending";
    }>;
    /** @deprecated use `GetDeploymentsDeploymentsState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Succeeded: "succeeded";
        readonly Failed: "failed";
        readonly Pending: "pending";
    }>;
}
/** @internal */
export declare const GetDeploymentsDeploymentAlias$inboundSchema: z.ZodType<GetDeploymentsDeploymentAlias, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentsDeploymentAlias$Outbound = {
    state: string;
    startedAt: number;
    completedAt?: number | undefined;
};
/** @internal */
export declare const GetDeploymentsDeploymentAlias$outboundSchema: z.ZodType<GetDeploymentsDeploymentAlias$Outbound, z.ZodTypeDef, GetDeploymentsDeploymentAlias>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentsDeploymentAlias$ {
    /** @deprecated use `GetDeploymentsDeploymentAlias$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentsDeploymentAlias, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentsDeploymentAlias$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentsDeploymentAlias$Outbound, z.ZodTypeDef, GetDeploymentsDeploymentAlias>;
    /** @deprecated use `GetDeploymentsDeploymentAlias$Outbound` instead. */
    type Outbound = GetDeploymentsDeploymentAlias$Outbound;
}
export declare function getDeploymentsDeploymentAliasToJSON(getDeploymentsDeploymentAlias: GetDeploymentsDeploymentAlias): string;
export declare function getDeploymentsDeploymentAliasFromJSON(jsonString: string): SafeParseResult<GetDeploymentsDeploymentAlias, SDKValidationError>;
/** @internal */
export declare const GetDeploymentsChecks$inboundSchema: z.ZodType<GetDeploymentsChecks, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentsChecks$Outbound = {
    "deployment-alias": GetDeploymentsDeploymentAlias$Outbound;
};
/** @internal */
export declare const GetDeploymentsChecks$outboundSchema: z.ZodType<GetDeploymentsChecks$Outbound, z.ZodTypeDef, GetDeploymentsChecks>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentsChecks$ {
    /** @deprecated use `GetDeploymentsChecks$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentsChecks, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentsChecks$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentsChecks$Outbound, z.ZodTypeDef, GetDeploymentsChecks>;
    /** @deprecated use `GetDeploymentsChecks$Outbound` instead. */
    type Outbound = GetDeploymentsChecks$Outbound;
}
export declare function getDeploymentsChecksToJSON(getDeploymentsChecks: GetDeploymentsChecks): string;
export declare function getDeploymentsChecksFromJSON(jsonString: string): SafeParseResult<GetDeploymentsChecks, SDKValidationError>;
/** @internal */
export declare const GetDeploymentsOomReport$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentsOomReport>;
/** @internal */
export declare const GetDeploymentsOomReport$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentsOomReport>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentsOomReport$ {
    /** @deprecated use `GetDeploymentsOomReport$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly OutOfMemory: "out-of-memory";
    }>;
    /** @deprecated use `GetDeploymentsOomReport$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly OutOfMemory: "out-of-memory";
    }>;
}
/** @internal */
export declare const GetDeploymentsFramework$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentsFramework>;
/** @internal */
export declare const GetDeploymentsFramework$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentsFramework>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentsFramework$ {
    /** @deprecated use `GetDeploymentsFramework$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Blitzjs: "blitzjs";
        readonly Nextjs: "nextjs";
        readonly Gatsby: "gatsby";
        readonly Remix: "remix";
        readonly ReactRouter: "react-router";
        readonly Astro: "astro";
        readonly Hexo: "hexo";
        readonly Eleventy: "eleventy";
        readonly Docusaurus2: "docusaurus-2";
        readonly Docusaurus: "docusaurus";
        readonly Preact: "preact";
        readonly Solidstart1: "solidstart-1";
        readonly Solidstart: "solidstart";
        readonly Dojo: "dojo";
        readonly Ember: "ember";
        readonly Vue: "vue";
        readonly Scully: "scully";
        readonly IonicAngular: "ionic-angular";
        readonly Angular: "angular";
        readonly Polymer: "polymer";
        readonly Svelte: "svelte";
        readonly Sveltekit: "sveltekit";
        readonly Sveltekit1: "sveltekit-1";
        readonly IonicReact: "ionic-react";
        readonly CreateReactApp: "create-react-app";
        readonly Gridsome: "gridsome";
        readonly Umijs: "umijs";
        readonly Sapper: "sapper";
        readonly Saber: "saber";
        readonly Stencil: "stencil";
        readonly Nuxtjs: "nuxtjs";
        readonly Redwoodjs: "redwoodjs";
        readonly Hugo: "hugo";
        readonly Jekyll: "jekyll";
        readonly Brunch: "brunch";
        readonly Middleman: "middleman";
        readonly Zola: "zola";
        readonly Hydrogen: "hydrogen";
        readonly Vite: "vite";
        readonly Vitepress: "vitepress";
        readonly Vuepress: "vuepress";
        readonly Parcel: "parcel";
        readonly Fastapi: "fastapi";
        readonly Fasthtml: "fasthtml";
        readonly SanityV3: "sanity-v3";
        readonly Sanity: "sanity";
        readonly Storybook: "storybook";
        readonly Nitro: "nitro";
        readonly Hono: "hono";
        readonly Express: "express";
        readonly Xmcp: "xmcp";
    }>;
    /** @deprecated use `GetDeploymentsFramework$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Blitzjs: "blitzjs";
        readonly Nextjs: "nextjs";
        readonly Gatsby: "gatsby";
        readonly Remix: "remix";
        readonly ReactRouter: "react-router";
        readonly Astro: "astro";
        readonly Hexo: "hexo";
        readonly Eleventy: "eleventy";
        readonly Docusaurus2: "docusaurus-2";
        readonly Docusaurus: "docusaurus";
        readonly Preact: "preact";
        readonly Solidstart1: "solidstart-1";
        readonly Solidstart: "solidstart";
        readonly Dojo: "dojo";
        readonly Ember: "ember";
        readonly Vue: "vue";
        readonly Scully: "scully";
        readonly IonicAngular: "ionic-angular";
        readonly Angular: "angular";
        readonly Polymer: "polymer";
        readonly Svelte: "svelte";
        readonly Sveltekit: "sveltekit";
        readonly Sveltekit1: "sveltekit-1";
        readonly IonicReact: "ionic-react";
        readonly CreateReactApp: "create-react-app";
        readonly Gridsome: "gridsome";
        readonly Umijs: "umijs";
        readonly Sapper: "sapper";
        readonly Saber: "saber";
        readonly Stencil: "stencil";
        readonly Nuxtjs: "nuxtjs";
        readonly Redwoodjs: "redwoodjs";
        readonly Hugo: "hugo";
        readonly Jekyll: "jekyll";
        readonly Brunch: "brunch";
        readonly Middleman: "middleman";
        readonly Zola: "zola";
        readonly Hydrogen: "hydrogen";
        readonly Vite: "vite";
        readonly Vitepress: "vitepress";
        readonly Vuepress: "vuepress";
        readonly Parcel: "parcel";
        readonly Fastapi: "fastapi";
        readonly Fasthtml: "fasthtml";
        readonly SanityV3: "sanity-v3";
        readonly Sanity: "sanity";
        readonly Storybook: "storybook";
        readonly Nitro: "nitro";
        readonly Hono: "hono";
        readonly Express: "express";
        readonly Xmcp: "xmcp";
    }>;
}
/** @internal */
export declare const GetDeploymentsNodeVersion$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentsNodeVersion>;
/** @internal */
export declare const GetDeploymentsNodeVersion$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentsNodeVersion>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentsNodeVersion$ {
    /** @deprecated use `GetDeploymentsNodeVersion$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly TwentyTwoDotX: "22.x";
        readonly TwentyDotX: "20.x";
        readonly EighteenDotX: "18.x";
        readonly SixteenDotX: "16.x";
        readonly FourteenDotX: "14.x";
        readonly TwelveDotX: "12.x";
        readonly TenDotX: "10.x";
        readonly EightDot10DotX: "8.10.x";
    }>;
    /** @deprecated use `GetDeploymentsNodeVersion$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly TwentyTwoDotX: "22.x";
        readonly TwentyDotX: "20.x";
        readonly EighteenDotX: "18.x";
        readonly SixteenDotX: "16.x";
        readonly FourteenDotX: "14.x";
        readonly TwelveDotX: "12.x";
        readonly TenDotX: "10.x";
        readonly EightDot10DotX: "8.10.x";
    }>;
}
/** @internal */
export declare const GetDeploymentsSpeedInsights$inboundSchema: z.ZodType<GetDeploymentsSpeedInsights, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentsSpeedInsights$Outbound = {
    id: string;
    enabledAt?: number | undefined;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    hasData?: boolean | undefined;
    paidAt?: number | undefined;
};
/** @internal */
export declare const GetDeploymentsSpeedInsights$outboundSchema: z.ZodType<GetDeploymentsSpeedInsights$Outbound, z.ZodTypeDef, GetDeploymentsSpeedInsights>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentsSpeedInsights$ {
    /** @deprecated use `GetDeploymentsSpeedInsights$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentsSpeedInsights, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentsSpeedInsights$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentsSpeedInsights$Outbound, z.ZodTypeDef, GetDeploymentsSpeedInsights>;
    /** @deprecated use `GetDeploymentsSpeedInsights$Outbound` instead. */
    type Outbound = GetDeploymentsSpeedInsights$Outbound;
}
export declare function getDeploymentsSpeedInsightsToJSON(getDeploymentsSpeedInsights: GetDeploymentsSpeedInsights): string;
export declare function getDeploymentsSpeedInsightsFromJSON(jsonString: string): SafeParseResult<GetDeploymentsSpeedInsights, SDKValidationError>;
/** @internal */
export declare const GetDeploymentsWebAnalytics$inboundSchema: z.ZodType<GetDeploymentsWebAnalytics, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentsWebAnalytics$Outbound = {
    id: string;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    enabledAt?: number | undefined;
    hasData?: boolean | undefined;
};
/** @internal */
export declare const GetDeploymentsWebAnalytics$outboundSchema: z.ZodType<GetDeploymentsWebAnalytics$Outbound, z.ZodTypeDef, GetDeploymentsWebAnalytics>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentsWebAnalytics$ {
    /** @deprecated use `GetDeploymentsWebAnalytics$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentsWebAnalytics, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentsWebAnalytics$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentsWebAnalytics$Outbound, z.ZodTypeDef, GetDeploymentsWebAnalytics>;
    /** @deprecated use `GetDeploymentsWebAnalytics$Outbound` instead. */
    type Outbound = GetDeploymentsWebAnalytics$Outbound;
}
export declare function getDeploymentsWebAnalyticsToJSON(getDeploymentsWebAnalytics: GetDeploymentsWebAnalytics): string;
export declare function getDeploymentsWebAnalyticsFromJSON(jsonString: string): SafeParseResult<GetDeploymentsWebAnalytics, SDKValidationError>;
/** @internal */
export declare const GetDeploymentsGitComments$inboundSchema: z.ZodType<GetDeploymentsGitComments, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentsGitComments$Outbound = {
    onPullRequest: boolean;
    onCommit: boolean;
};
/** @internal */
export declare const GetDeploymentsGitComments$outboundSchema: z.ZodType<GetDeploymentsGitComments$Outbound, z.ZodTypeDef, GetDeploymentsGitComments>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentsGitComments$ {
    /** @deprecated use `GetDeploymentsGitComments$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentsGitComments, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentsGitComments$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentsGitComments$Outbound, z.ZodTypeDef, GetDeploymentsGitComments>;
    /** @deprecated use `GetDeploymentsGitComments$Outbound` instead. */
    type Outbound = GetDeploymentsGitComments$Outbound;
}
export declare function getDeploymentsGitCommentsToJSON(getDeploymentsGitComments: GetDeploymentsGitComments): string;
export declare function getDeploymentsGitCommentsFromJSON(jsonString: string): SafeParseResult<GetDeploymentsGitComments, SDKValidationError>;
/** @internal */
export declare const GetDeploymentsProjectSettings$inboundSchema: z.ZodType<GetDeploymentsProjectSettings, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentsProjectSettings$Outbound = {
    framework?: string | null | undefined;
    gitForkProtection?: boolean | undefined;
    customerSupportCodeVisibility?: boolean | undefined;
    gitLFS?: boolean | undefined;
    devCommand?: string | null | undefined;
    installCommand?: string | null | undefined;
    buildCommand?: string | null | undefined;
    nodeVersion?: string | undefined;
    outputDirectory?: string | null | undefined;
    publicSource?: boolean | null | undefined;
    rootDirectory?: string | null | undefined;
    sourceFilesOutsideRootDirectory?: boolean | undefined;
    commandForIgnoringBuildStep?: string | null | undefined;
    createdAt?: number | undefined;
    speedInsights?: GetDeploymentsSpeedInsights$Outbound | undefined;
    webAnalytics?: GetDeploymentsWebAnalytics$Outbound | undefined;
    skipGitConnectDuringLink?: boolean | undefined;
    gitComments?: GetDeploymentsGitComments$Outbound | undefined;
};
/** @internal */
export declare const GetDeploymentsProjectSettings$outboundSchema: z.ZodType<GetDeploymentsProjectSettings$Outbound, z.ZodTypeDef, GetDeploymentsProjectSettings>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentsProjectSettings$ {
    /** @deprecated use `GetDeploymentsProjectSettings$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentsProjectSettings, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentsProjectSettings$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentsProjectSettings$Outbound, z.ZodTypeDef, GetDeploymentsProjectSettings>;
    /** @deprecated use `GetDeploymentsProjectSettings$Outbound` instead. */
    type Outbound = GetDeploymentsProjectSettings$Outbound;
}
export declare function getDeploymentsProjectSettingsToJSON(getDeploymentsProjectSettings: GetDeploymentsProjectSettings): string;
export declare function getDeploymentsProjectSettingsFromJSON(jsonString: string): SafeParseResult<GetDeploymentsProjectSettings, SDKValidationError>;
/** @internal */
export declare const GetDeploymentsCustomEnvironment$inboundSchema: z.ZodType<GetDeploymentsCustomEnvironment, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentsCustomEnvironment$Outbound = {
    id: string;
    slug?: string | undefined;
};
/** @internal */
export declare const GetDeploymentsCustomEnvironment$outboundSchema: z.ZodType<GetDeploymentsCustomEnvironment$Outbound, z.ZodTypeDef, GetDeploymentsCustomEnvironment>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentsCustomEnvironment$ {
    /** @deprecated use `GetDeploymentsCustomEnvironment$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentsCustomEnvironment, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentsCustomEnvironment$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentsCustomEnvironment$Outbound, z.ZodTypeDef, GetDeploymentsCustomEnvironment>;
    /** @deprecated use `GetDeploymentsCustomEnvironment$Outbound` instead. */
    type Outbound = GetDeploymentsCustomEnvironment$Outbound;
}
export declare function getDeploymentsCustomEnvironmentToJSON(getDeploymentsCustomEnvironment: GetDeploymentsCustomEnvironment): string;
export declare function getDeploymentsCustomEnvironmentFromJSON(jsonString: string): SafeParseResult<GetDeploymentsCustomEnvironment, SDKValidationError>;
/** @internal */
export declare const Deployments$inboundSchema: z.ZodType<Deployments, z.ZodTypeDef, unknown>;
/** @internal */
export type Deployments$Outbound = {
    uid: string;
    name: string;
    projectId: string;
    url: string;
    created: number;
    defaultRoute?: string | undefined;
    deleted?: number | undefined;
    undeleted?: number | undefined;
    softDeletedByRetention?: boolean | undefined;
    source?: string | undefined;
    state?: string | undefined;
    readyState?: string | undefined;
    type: string;
    creator: GetDeploymentsCreator$Outbound;
    meta?: {
        [k: string]: string;
    } | undefined;
    target?: string | null | undefined;
    aliasError?: GetDeploymentsAliasError$Outbound | null | undefined;
    aliasAssigned?: number | boolean | null | undefined;
    createdAt?: number | undefined;
    buildingAt?: number | undefined;
    ready?: number | undefined;
    readySubstate?: string | undefined;
    checksState?: string | undefined;
    checksConclusion?: string | undefined;
    checks?: GetDeploymentsChecks$Outbound | undefined;
    inspectorUrl: string | null;
    errorCode?: string | undefined;
    errorMessage?: string | null | undefined;
    oomReport?: string | undefined;
    isRollbackCandidate?: boolean | null | undefined;
    projectSettings?: GetDeploymentsProjectSettings$Outbound | undefined;
    connectBuildsEnabled?: boolean | undefined;
    connectConfigurationId?: string | undefined;
    passiveConnectConfigurationId?: string | undefined;
    expiration?: number | undefined;
    proposedExpiration?: number | undefined;
    customEnvironment?: GetDeploymentsCustomEnvironment$Outbound | undefined;
};
/** @internal */
export declare const Deployments$outboundSchema: z.ZodType<Deployments$Outbound, z.ZodTypeDef, Deployments>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Deployments$ {
    /** @deprecated use `Deployments$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Deployments, z.ZodTypeDef, unknown>;
    /** @deprecated use `Deployments$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Deployments$Outbound, z.ZodTypeDef, Deployments>;
    /** @deprecated use `Deployments$Outbound` instead. */
    type Outbound = Deployments$Outbound;
}
export declare function deploymentsToJSON(deployments: Deployments): string;
export declare function deploymentsFromJSON(jsonString: string): SafeParseResult<Deployments, SDKValidationError>;
/** @internal */
export declare const GetDeploymentsResponseBody$inboundSchema: z.ZodType<GetDeploymentsResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentsResponseBody$Outbound = {
    pagination: Pagination$Outbound;
    deployments: Array<Deployments$Outbound>;
};
/** @internal */
export declare const GetDeploymentsResponseBody$outboundSchema: z.ZodType<GetDeploymentsResponseBody$Outbound, z.ZodTypeDef, GetDeploymentsResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentsResponseBody$ {
    /** @deprecated use `GetDeploymentsResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentsResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentsResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentsResponseBody$Outbound, z.ZodTypeDef, GetDeploymentsResponseBody>;
    /** @deprecated use `GetDeploymentsResponseBody$Outbound` instead. */
    type Outbound = GetDeploymentsResponseBody$Outbound;
}
export declare function getDeploymentsResponseBodyToJSON(getDeploymentsResponseBody: GetDeploymentsResponseBody): string;
export declare function getDeploymentsResponseBodyFromJSON(jsonString: string): SafeParseResult<GetDeploymentsResponseBody, SDKValidationError>;
//# sourceMappingURL=getdeploymentsop.d.ts.map