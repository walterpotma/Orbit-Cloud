/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
/**
 * Filter by rolling release state
 */
export const State = {
    Active: "ACTIVE",
    Complete: "COMPLETE",
    Aborted: "ABORTED",
};
/**
 * The current state of the rolling release
 */
export const GetRollingReleaseState = {
    Active: "ACTIVE",
    Complete: "COMPLETE",
    Aborted: "ABORTED",
};
export const GetRollingReleaseTarget = {
    Staging: "staging",
    Production: "production",
};
export const GetRollingReleaseSource = {
    ApiTriggerGitDeploy: "api-trigger-git-deploy",
    Cli: "cli",
    CloneRepo: "clone/repo",
    Git: "git",
    Import: "import",
    ImportRepo: "import/repo",
    Redeploy: "redeploy",
    V0Web: "v0-web",
};
export const GetRollingReleaseReadyState = {
    Building: "BUILDING",
    Error: "ERROR",
    Initializing: "INITIALIZING",
    Queued: "QUEUED",
    Ready: "READY",
    Canceled: "CANCELED",
};
export const GetRollingReleaseRollingReleaseTarget = {
    Staging: "staging",
    Production: "production",
};
export const GetRollingReleaseRollingReleaseSource = {
    ApiTriggerGitDeploy: "api-trigger-git-deploy",
    Cli: "cli",
    CloneRepo: "clone/repo",
    Git: "git",
    Import: "import",
    ImportRepo: "import/repo",
    Redeploy: "redeploy",
    V0Web: "v0-web",
};
export const GetRollingReleaseRollingReleaseReadyState = {
    Building: "BUILDING",
    Error: "ERROR",
    Initializing: "INITIALIZING",
    Queued: "QUEUED",
    Ready: "READY",
    Canceled: "CANCELED",
};
/**
 * The advancement type of the rolling release
 */
export const AdvancementType = {
    Automatic: "automatic",
    ManualApproval: "manual-approval",
};
/** @internal */
export const State$inboundSchema = z.nativeEnum(State);
/** @internal */
export const State$outboundSchema = State$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var State$;
(function (State$) {
    /** @deprecated use `State$inboundSchema` instead. */
    State$.inboundSchema = State$inboundSchema;
    /** @deprecated use `State$outboundSchema` instead. */
    State$.outboundSchema = State$outboundSchema;
})(State$ || (State$ = {}));
/** @internal */
export const GetRollingReleaseRequest$inboundSchema = z.object({
    idOrName: z.string(),
    state: State$inboundSchema.optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/** @internal */
export const GetRollingReleaseRequest$outboundSchema = z.object({
    idOrName: z.string(),
    state: State$outboundSchema.optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetRollingReleaseRequest$;
(function (GetRollingReleaseRequest$) {
    /** @deprecated use `GetRollingReleaseRequest$inboundSchema` instead. */
    GetRollingReleaseRequest$.inboundSchema = GetRollingReleaseRequest$inboundSchema;
    /** @deprecated use `GetRollingReleaseRequest$outboundSchema` instead. */
    GetRollingReleaseRequest$.outboundSchema = GetRollingReleaseRequest$outboundSchema;
})(GetRollingReleaseRequest$ || (GetRollingReleaseRequest$ = {}));
export function getRollingReleaseRequestToJSON(getRollingReleaseRequest) {
    return JSON.stringify(GetRollingReleaseRequest$outboundSchema.parse(getRollingReleaseRequest));
}
export function getRollingReleaseRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetRollingReleaseRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetRollingReleaseRequest' from JSON`);
}
/** @internal */
export const GetRollingReleaseState$inboundSchema = z.nativeEnum(GetRollingReleaseState);
/** @internal */
export const GetRollingReleaseState$outboundSchema = GetRollingReleaseState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetRollingReleaseState$;
(function (GetRollingReleaseState$) {
    /** @deprecated use `GetRollingReleaseState$inboundSchema` instead. */
    GetRollingReleaseState$.inboundSchema = GetRollingReleaseState$inboundSchema;
    /** @deprecated use `GetRollingReleaseState$outboundSchema` instead. */
    GetRollingReleaseState$.outboundSchema = GetRollingReleaseState$outboundSchema;
})(GetRollingReleaseState$ || (GetRollingReleaseState$ = {}));
/** @internal */
export const GetRollingReleaseTarget$inboundSchema = z.nativeEnum(GetRollingReleaseTarget);
/** @internal */
export const GetRollingReleaseTarget$outboundSchema = GetRollingReleaseTarget$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetRollingReleaseTarget$;
(function (GetRollingReleaseTarget$) {
    /** @deprecated use `GetRollingReleaseTarget$inboundSchema` instead. */
    GetRollingReleaseTarget$.inboundSchema = GetRollingReleaseTarget$inboundSchema;
    /** @deprecated use `GetRollingReleaseTarget$outboundSchema` instead. */
    GetRollingReleaseTarget$.outboundSchema = GetRollingReleaseTarget$outboundSchema;
})(GetRollingReleaseTarget$ || (GetRollingReleaseTarget$ = {}));
/** @internal */
export const GetRollingReleaseSource$inboundSchema = z.nativeEnum(GetRollingReleaseSource);
/** @internal */
export const GetRollingReleaseSource$outboundSchema = GetRollingReleaseSource$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetRollingReleaseSource$;
(function (GetRollingReleaseSource$) {
    /** @deprecated use `GetRollingReleaseSource$inboundSchema` instead. */
    GetRollingReleaseSource$.inboundSchema = GetRollingReleaseSource$inboundSchema;
    /** @deprecated use `GetRollingReleaseSource$outboundSchema` instead. */
    GetRollingReleaseSource$.outboundSchema = GetRollingReleaseSource$outboundSchema;
})(GetRollingReleaseSource$ || (GetRollingReleaseSource$ = {}));
/** @internal */
export const GetRollingReleaseReadyState$inboundSchema = z.nativeEnum(GetRollingReleaseReadyState);
/** @internal */
export const GetRollingReleaseReadyState$outboundSchema = GetRollingReleaseReadyState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetRollingReleaseReadyState$;
(function (GetRollingReleaseReadyState$) {
    /** @deprecated use `GetRollingReleaseReadyState$inboundSchema` instead. */
    GetRollingReleaseReadyState$.inboundSchema = GetRollingReleaseReadyState$inboundSchema;
    /** @deprecated use `GetRollingReleaseReadyState$outboundSchema` instead. */
    GetRollingReleaseReadyState$.outboundSchema = GetRollingReleaseReadyState$outboundSchema;
})(GetRollingReleaseReadyState$ || (GetRollingReleaseReadyState$ = {}));
/** @internal */
export const CurrentDeployment$inboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    url: z.string(),
    target: z.nullable(GetRollingReleaseTarget$inboundSchema).optional(),
    source: GetRollingReleaseSource$inboundSchema.optional(),
    createdAt: z.number(),
    readyState: GetRollingReleaseReadyState$inboundSchema,
    readyStateAt: z.number().optional(),
});
/** @internal */
export const CurrentDeployment$outboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    url: z.string(),
    target: z.nullable(GetRollingReleaseTarget$outboundSchema).optional(),
    source: GetRollingReleaseSource$outboundSchema.optional(),
    createdAt: z.number(),
    readyState: GetRollingReleaseReadyState$outboundSchema,
    readyStateAt: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CurrentDeployment$;
(function (CurrentDeployment$) {
    /** @deprecated use `CurrentDeployment$inboundSchema` instead. */
    CurrentDeployment$.inboundSchema = CurrentDeployment$inboundSchema;
    /** @deprecated use `CurrentDeployment$outboundSchema` instead. */
    CurrentDeployment$.outboundSchema = CurrentDeployment$outboundSchema;
})(CurrentDeployment$ || (CurrentDeployment$ = {}));
export function currentDeploymentToJSON(currentDeployment) {
    return JSON.stringify(CurrentDeployment$outboundSchema.parse(currentDeployment));
}
export function currentDeploymentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CurrentDeployment$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CurrentDeployment' from JSON`);
}
/** @internal */
export const GetRollingReleaseRollingReleaseTarget$inboundSchema = z.nativeEnum(GetRollingReleaseRollingReleaseTarget);
/** @internal */
export const GetRollingReleaseRollingReleaseTarget$outboundSchema = GetRollingReleaseRollingReleaseTarget$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetRollingReleaseRollingReleaseTarget$;
(function (GetRollingReleaseRollingReleaseTarget$) {
    /** @deprecated use `GetRollingReleaseRollingReleaseTarget$inboundSchema` instead. */
    GetRollingReleaseRollingReleaseTarget$.inboundSchema = GetRollingReleaseRollingReleaseTarget$inboundSchema;
    /** @deprecated use `GetRollingReleaseRollingReleaseTarget$outboundSchema` instead. */
    GetRollingReleaseRollingReleaseTarget$.outboundSchema = GetRollingReleaseRollingReleaseTarget$outboundSchema;
})(GetRollingReleaseRollingReleaseTarget$ || (GetRollingReleaseRollingReleaseTarget$ = {}));
/** @internal */
export const GetRollingReleaseRollingReleaseSource$inboundSchema = z.nativeEnum(GetRollingReleaseRollingReleaseSource);
/** @internal */
export const GetRollingReleaseRollingReleaseSource$outboundSchema = GetRollingReleaseRollingReleaseSource$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetRollingReleaseRollingReleaseSource$;
(function (GetRollingReleaseRollingReleaseSource$) {
    /** @deprecated use `GetRollingReleaseRollingReleaseSource$inboundSchema` instead. */
    GetRollingReleaseRollingReleaseSource$.inboundSchema = GetRollingReleaseRollingReleaseSource$inboundSchema;
    /** @deprecated use `GetRollingReleaseRollingReleaseSource$outboundSchema` instead. */
    GetRollingReleaseRollingReleaseSource$.outboundSchema = GetRollingReleaseRollingReleaseSource$outboundSchema;
})(GetRollingReleaseRollingReleaseSource$ || (GetRollingReleaseRollingReleaseSource$ = {}));
/** @internal */
export const GetRollingReleaseRollingReleaseReadyState$inboundSchema = z
    .nativeEnum(GetRollingReleaseRollingReleaseReadyState);
/** @internal */
export const GetRollingReleaseRollingReleaseReadyState$outboundSchema = GetRollingReleaseRollingReleaseReadyState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetRollingReleaseRollingReleaseReadyState$;
(function (GetRollingReleaseRollingReleaseReadyState$) {
    /** @deprecated use `GetRollingReleaseRollingReleaseReadyState$inboundSchema` instead. */
    GetRollingReleaseRollingReleaseReadyState$.inboundSchema = GetRollingReleaseRollingReleaseReadyState$inboundSchema;
    /** @deprecated use `GetRollingReleaseRollingReleaseReadyState$outboundSchema` instead. */
    GetRollingReleaseRollingReleaseReadyState$.outboundSchema = GetRollingReleaseRollingReleaseReadyState$outboundSchema;
})(GetRollingReleaseRollingReleaseReadyState$ || (GetRollingReleaseRollingReleaseReadyState$ = {}));
/** @internal */
export const CanaryDeployment$inboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    url: z.string(),
    target: z.nullable(GetRollingReleaseRollingReleaseTarget$inboundSchema)
        .optional(),
    source: GetRollingReleaseRollingReleaseSource$inboundSchema.optional(),
    createdAt: z.number(),
    readyState: GetRollingReleaseRollingReleaseReadyState$inboundSchema,
    readyStateAt: z.number().optional(),
});
/** @internal */
export const CanaryDeployment$outboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    url: z.string(),
    target: z.nullable(GetRollingReleaseRollingReleaseTarget$outboundSchema)
        .optional(),
    source: GetRollingReleaseRollingReleaseSource$outboundSchema.optional(),
    createdAt: z.number(),
    readyState: GetRollingReleaseRollingReleaseReadyState$outboundSchema,
    readyStateAt: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CanaryDeployment$;
(function (CanaryDeployment$) {
    /** @deprecated use `CanaryDeployment$inboundSchema` instead. */
    CanaryDeployment$.inboundSchema = CanaryDeployment$inboundSchema;
    /** @deprecated use `CanaryDeployment$outboundSchema` instead. */
    CanaryDeployment$.outboundSchema = CanaryDeployment$outboundSchema;
})(CanaryDeployment$ || (CanaryDeployment$ = {}));
export function canaryDeploymentToJSON(canaryDeployment) {
    return JSON.stringify(CanaryDeployment$outboundSchema.parse(canaryDeployment));
}
export function canaryDeploymentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CanaryDeployment$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CanaryDeployment' from JSON`);
}
/** @internal */
export const AdvancementType$inboundSchema = z.nativeEnum(AdvancementType);
/** @internal */
export const AdvancementType$outboundSchema = AdvancementType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AdvancementType$;
(function (AdvancementType$) {
    /** @deprecated use `AdvancementType$inboundSchema` instead. */
    AdvancementType$.inboundSchema = AdvancementType$inboundSchema;
    /** @deprecated use `AdvancementType$outboundSchema` instead. */
    AdvancementType$.outboundSchema = AdvancementType$outboundSchema;
})(AdvancementType$ || (AdvancementType$ = {}));
/** @internal */
export const GetRollingReleaseStages$inboundSchema = z.object({
    index: z.number(),
    isFinalStage: z.boolean(),
    targetPercentage: z.number(),
    requireApproval: z.boolean(),
    duration: z.nullable(z.number()),
});
/** @internal */
export const GetRollingReleaseStages$outboundSchema = z.object({
    index: z.number(),
    isFinalStage: z.boolean(),
    targetPercentage: z.number(),
    requireApproval: z.boolean(),
    duration: z.nullable(z.number()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetRollingReleaseStages$;
(function (GetRollingReleaseStages$) {
    /** @deprecated use `GetRollingReleaseStages$inboundSchema` instead. */
    GetRollingReleaseStages$.inboundSchema = GetRollingReleaseStages$inboundSchema;
    /** @deprecated use `GetRollingReleaseStages$outboundSchema` instead. */
    GetRollingReleaseStages$.outboundSchema = GetRollingReleaseStages$outboundSchema;
})(GetRollingReleaseStages$ || (GetRollingReleaseStages$ = {}));
export function getRollingReleaseStagesToJSON(getRollingReleaseStages) {
    return JSON.stringify(GetRollingReleaseStages$outboundSchema.parse(getRollingReleaseStages));
}
export function getRollingReleaseStagesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetRollingReleaseStages$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetRollingReleaseStages' from JSON`);
}
/** @internal */
export const ActiveStage$inboundSchema = z.object({
    index: z.number(),
    isFinalStage: z.boolean(),
    targetPercentage: z.number(),
    requireApproval: z.boolean(),
    duration: z.nullable(z.number()),
});
/** @internal */
export const ActiveStage$outboundSchema = z.object({
    index: z.number(),
    isFinalStage: z.boolean(),
    targetPercentage: z.number(),
    requireApproval: z.boolean(),
    duration: z.nullable(z.number()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActiveStage$;
(function (ActiveStage$) {
    /** @deprecated use `ActiveStage$inboundSchema` instead. */
    ActiveStage$.inboundSchema = ActiveStage$inboundSchema;
    /** @deprecated use `ActiveStage$outboundSchema` instead. */
    ActiveStage$.outboundSchema = ActiveStage$outboundSchema;
})(ActiveStage$ || (ActiveStage$ = {}));
export function activeStageToJSON(activeStage) {
    return JSON.stringify(ActiveStage$outboundSchema.parse(activeStage));
}
export function activeStageFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActiveStage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActiveStage' from JSON`);
}
/** @internal */
export const NextStage$inboundSchema = z.object({
    index: z.number(),
    isFinalStage: z.boolean(),
    targetPercentage: z.number(),
    requireApproval: z.boolean(),
    duration: z.nullable(z.number()),
});
/** @internal */
export const NextStage$outboundSchema = z.object({
    index: z.number(),
    isFinalStage: z.boolean(),
    targetPercentage: z.number(),
    requireApproval: z.boolean(),
    duration: z.nullable(z.number()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NextStage$;
(function (NextStage$) {
    /** @deprecated use `NextStage$inboundSchema` instead. */
    NextStage$.inboundSchema = NextStage$inboundSchema;
    /** @deprecated use `NextStage$outboundSchema` instead. */
    NextStage$.outboundSchema = NextStage$outboundSchema;
})(NextStage$ || (NextStage$ = {}));
export function nextStageToJSON(nextStage) {
    return JSON.stringify(NextStage$outboundSchema.parse(nextStage));
}
export function nextStageFromJSON(jsonString) {
    return safeParse(jsonString, (x) => NextStage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NextStage' from JSON`);
}
/** @internal */
export const GetRollingReleaseRollingRelease$inboundSchema = z.object({
    state: GetRollingReleaseState$inboundSchema,
    currentDeployment: z.nullable(z.lazy(() => CurrentDeployment$inboundSchema)),
    canaryDeployment: z.nullable(z.lazy(() => CanaryDeployment$inboundSchema)),
    queuedDeploymentId: z.nullable(z.string()),
    advancementType: AdvancementType$inboundSchema,
    stages: z.array(z.lazy(() => GetRollingReleaseStages$inboundSchema)),
    activeStage: z.nullable(z.lazy(() => ActiveStage$inboundSchema)),
    nextStage: z.nullable(z.lazy(() => NextStage$inboundSchema)),
    startedAt: z.number(),
    updatedAt: z.number(),
});
/** @internal */
export const GetRollingReleaseRollingRelease$outboundSchema = z.object({
    state: GetRollingReleaseState$outboundSchema,
    currentDeployment: z.nullable(z.lazy(() => CurrentDeployment$outboundSchema)),
    canaryDeployment: z.nullable(z.lazy(() => CanaryDeployment$outboundSchema)),
    queuedDeploymentId: z.nullable(z.string()),
    advancementType: AdvancementType$outboundSchema,
    stages: z.array(z.lazy(() => GetRollingReleaseStages$outboundSchema)),
    activeStage: z.nullable(z.lazy(() => ActiveStage$outboundSchema)),
    nextStage: z.nullable(z.lazy(() => NextStage$outboundSchema)),
    startedAt: z.number(),
    updatedAt: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetRollingReleaseRollingRelease$;
(function (GetRollingReleaseRollingRelease$) {
    /** @deprecated use `GetRollingReleaseRollingRelease$inboundSchema` instead. */
    GetRollingReleaseRollingRelease$.inboundSchema = GetRollingReleaseRollingRelease$inboundSchema;
    /** @deprecated use `GetRollingReleaseRollingRelease$outboundSchema` instead. */
    GetRollingReleaseRollingRelease$.outboundSchema = GetRollingReleaseRollingRelease$outboundSchema;
})(GetRollingReleaseRollingRelease$ || (GetRollingReleaseRollingRelease$ = {}));
export function getRollingReleaseRollingReleaseToJSON(getRollingReleaseRollingRelease) {
    return JSON.stringify(GetRollingReleaseRollingRelease$outboundSchema.parse(getRollingReleaseRollingRelease));
}
export function getRollingReleaseRollingReleaseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetRollingReleaseRollingRelease$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetRollingReleaseRollingRelease' from JSON`);
}
/** @internal */
export const GetRollingReleaseResponseBody$inboundSchema = z.object({
    rollingRelease: z.nullable(z.lazy(() => GetRollingReleaseRollingRelease$inboundSchema)),
});
/** @internal */
export const GetRollingReleaseResponseBody$outboundSchema = z.object({
    rollingRelease: z.nullable(z.lazy(() => GetRollingReleaseRollingRelease$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetRollingReleaseResponseBody$;
(function (GetRollingReleaseResponseBody$) {
    /** @deprecated use `GetRollingReleaseResponseBody$inboundSchema` instead. */
    GetRollingReleaseResponseBody$.inboundSchema = GetRollingReleaseResponseBody$inboundSchema;
    /** @deprecated use `GetRollingReleaseResponseBody$outboundSchema` instead. */
    GetRollingReleaseResponseBody$.outboundSchema = GetRollingReleaseResponseBody$outboundSchema;
})(GetRollingReleaseResponseBody$ || (GetRollingReleaseResponseBody$ = {}));
export function getRollingReleaseResponseBodyToJSON(getRollingReleaseResponseBody) {
    return JSON.stringify(GetRollingReleaseResponseBody$outboundSchema.parse(getRollingReleaseResponseBody));
}
export function getRollingReleaseResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetRollingReleaseResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetRollingReleaseResponseBody' from JSON`);
}
//# sourceMappingURL=getrollingreleaseop.js.map