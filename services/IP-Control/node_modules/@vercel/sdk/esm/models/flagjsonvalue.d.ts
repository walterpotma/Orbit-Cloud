import * as z from "zod";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type FlagJSONValue = string | number | boolean | Array<FlagJSONValue | null> | {
    [k: string]: FlagJSONValue | null;
};
/** @internal */
export declare const FlagJSONValue$inboundSchema: z.ZodType<FlagJSONValue, z.ZodTypeDef, unknown>;
/** @internal */
export type FlagJSONValue$Outbound = string | number | boolean | Array<FlagJSONValue$Outbound | null> | {
    [k: string]: FlagJSONValue$Outbound | null;
};
/** @internal */
export declare const FlagJSONValue$outboundSchema: z.ZodType<FlagJSONValue$Outbound, z.ZodTypeDef, FlagJSONValue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FlagJSONValue$ {
    /** @deprecated use `FlagJSONValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FlagJSONValue, z.ZodTypeDef, unknown>;
    /** @deprecated use `FlagJSONValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FlagJSONValue$Outbound, z.ZodTypeDef, FlagJSONValue>;
    /** @deprecated use `FlagJSONValue$Outbound` instead. */
    type Outbound = FlagJSONValue$Outbound;
}
export declare function flagJSONValueToJSON(flagJSONValue: FlagJSONValue): string;
export declare function flagJSONValueFromJSON(jsonString: string): SafeParseResult<FlagJSONValue, SDKValidationError>;
//# sourceMappingURL=flagjsonvalue.d.ts.map