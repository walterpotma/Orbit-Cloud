import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { Pagination, Pagination$Outbound } from "./pagination.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type GetDomainsRequest = {
    /**
     * Maximum number of domains to list from a request.
     */
    limit?: number | undefined;
    /**
     * Get domains created after this JavaScript timestamp.
     */
    since?: number | undefined;
    /**
     * Get domains created before this JavaScript timestamp.
     */
    until?: number | undefined;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};
/**
 * An object containing information of the domain creator, including the user's id, username, and email.
 */
export type GetDomainsCreator = {
    username: string;
    email: string;
    customerId?: string | null | undefined;
    isDomainReseller?: boolean | undefined;
    id: string;
};
/**
 * Whether or not the domain is registered with Name.com. If set to `true`, the domain is registered with Name.com.
 */
export declare const GetDomainsRegistrar: {
    readonly New: "new";
};
/**
 * Whether or not the domain is registered with Name.com. If set to `true`, the domain is registered with Name.com.
 */
export type GetDomainsRegistrar = ClosedEnum<typeof GetDomainsRegistrar>;
/**
 * The type of service the domain is handled by. `external` if the DNS is externally handled, `zeit.world` if handled with Vercel, or `na` if the service is not available.
 */
export declare const GetDomainsServiceType: {
    readonly ZeitWorld: "zeit.world";
    readonly External: "external";
    readonly Na: "na";
};
/**
 * The type of service the domain is handled by. `external` if the DNS is externally handled, `zeit.world` if handled with Vercel, or `na` if the service is not available.
 */
export type GetDomainsServiceType = ClosedEnum<typeof GetDomainsServiceType>;
export type Domains = {
    /**
     * If the domain has the ownership verified.
     */
    verified: boolean;
    /**
     * A list of the current nameservers of the domain.
     */
    nameservers: Array<string>;
    /**
     * A list of the intended nameservers for the domain to point to Vercel DNS.
     */
    intendedNameservers: Array<string>;
    /**
     * A list of custom nameservers for the domain to point to. Only applies to domains purchased with Vercel.
     */
    customNameservers?: Array<string> | undefined;
    /**
     * An object containing information of the domain creator, including the user's id, username, and email.
     */
    creator: GetDomainsCreator;
    /**
     * Whether or not the domain is registered with Name.com. If set to `true`, the domain is registered with Name.com.
     */
    registrar?: GetDomainsRegistrar | undefined;
    teamId: string | null;
    /**
     * Timestamp in milliseconds when the domain was created in the registry.
     */
    createdAt: number;
    /**
     * If it was purchased through Vercel, the timestamp in milliseconds when it was purchased.
     */
    boughtAt: number | null;
    /**
     * Timestamp in milliseconds at which the domain is set to expire. `null` if not bought with Vercel.
     */
    expiresAt: number | null;
    /**
     * The unique identifier of the domain.
     */
    id: string;
    /**
     * The domain name.
     */
    name: string;
    /**
     * Timestamp in milliseconds at which the domain was ordered.
     */
    orderedAt?: number | undefined;
    /**
     * Indicates whether the domain is set to automatically renew.
     */
    renew?: boolean | undefined;
    /**
     * The type of service the domain is handled by. `external` if the DNS is externally handled, `zeit.world` if handled with Vercel, or `na` if the service is not available.
     */
    serviceType: GetDomainsServiceType;
    /**
     * Timestamp in milliseconds at which the domain was successfully transferred into Vercel. `null` if the transfer is still processing or was never transferred in.
     */
    transferredAt?: number | null | undefined;
    /**
     * If transferred into Vercel, timestamp in milliseconds when the domain transfer was initiated.
     */
    transferStartedAt?: number | undefined;
    userId: string;
};
/**
 * Successful response retrieving a list of domains.
 */
export type GetDomainsResponseBody = {
    domains: Array<Domains>;
    /**
     * This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.
     */
    pagination: Pagination;
};
/** @internal */
export declare const GetDomainsRequest$inboundSchema: z.ZodType<GetDomainsRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDomainsRequest$Outbound = {
    limit?: number | undefined;
    since?: number | undefined;
    until?: number | undefined;
    teamId?: string | undefined;
    slug?: string | undefined;
};
/** @internal */
export declare const GetDomainsRequest$outboundSchema: z.ZodType<GetDomainsRequest$Outbound, z.ZodTypeDef, GetDomainsRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDomainsRequest$ {
    /** @deprecated use `GetDomainsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDomainsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDomainsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDomainsRequest$Outbound, z.ZodTypeDef, GetDomainsRequest>;
    /** @deprecated use `GetDomainsRequest$Outbound` instead. */
    type Outbound = GetDomainsRequest$Outbound;
}
export declare function getDomainsRequestToJSON(getDomainsRequest: GetDomainsRequest): string;
export declare function getDomainsRequestFromJSON(jsonString: string): SafeParseResult<GetDomainsRequest, SDKValidationError>;
/** @internal */
export declare const GetDomainsCreator$inboundSchema: z.ZodType<GetDomainsCreator, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDomainsCreator$Outbound = {
    username: string;
    email: string;
    customerId?: string | null | undefined;
    isDomainReseller?: boolean | undefined;
    id: string;
};
/** @internal */
export declare const GetDomainsCreator$outboundSchema: z.ZodType<GetDomainsCreator$Outbound, z.ZodTypeDef, GetDomainsCreator>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDomainsCreator$ {
    /** @deprecated use `GetDomainsCreator$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDomainsCreator, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDomainsCreator$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDomainsCreator$Outbound, z.ZodTypeDef, GetDomainsCreator>;
    /** @deprecated use `GetDomainsCreator$Outbound` instead. */
    type Outbound = GetDomainsCreator$Outbound;
}
export declare function getDomainsCreatorToJSON(getDomainsCreator: GetDomainsCreator): string;
export declare function getDomainsCreatorFromJSON(jsonString: string): SafeParseResult<GetDomainsCreator, SDKValidationError>;
/** @internal */
export declare const GetDomainsRegistrar$inboundSchema: z.ZodNativeEnum<typeof GetDomainsRegistrar>;
/** @internal */
export declare const GetDomainsRegistrar$outboundSchema: z.ZodNativeEnum<typeof GetDomainsRegistrar>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDomainsRegistrar$ {
    /** @deprecated use `GetDomainsRegistrar$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly New: "new";
    }>;
    /** @deprecated use `GetDomainsRegistrar$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly New: "new";
    }>;
}
/** @internal */
export declare const GetDomainsServiceType$inboundSchema: z.ZodNativeEnum<typeof GetDomainsServiceType>;
/** @internal */
export declare const GetDomainsServiceType$outboundSchema: z.ZodNativeEnum<typeof GetDomainsServiceType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDomainsServiceType$ {
    /** @deprecated use `GetDomainsServiceType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly ZeitWorld: "zeit.world";
        readonly External: "external";
        readonly Na: "na";
    }>;
    /** @deprecated use `GetDomainsServiceType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly ZeitWorld: "zeit.world";
        readonly External: "external";
        readonly Na: "na";
    }>;
}
/** @internal */
export declare const Domains$inboundSchema: z.ZodType<Domains, z.ZodTypeDef, unknown>;
/** @internal */
export type Domains$Outbound = {
    verified: boolean;
    nameservers: Array<string>;
    intendedNameservers: Array<string>;
    customNameservers?: Array<string> | undefined;
    creator: GetDomainsCreator$Outbound;
    registrar?: string | undefined;
    teamId: string | null;
    createdAt: number;
    boughtAt: number | null;
    expiresAt: number | null;
    id: string;
    name: string;
    orderedAt?: number | undefined;
    renew?: boolean | undefined;
    serviceType: string;
    transferredAt?: number | null | undefined;
    transferStartedAt?: number | undefined;
    userId: string;
};
/** @internal */
export declare const Domains$outboundSchema: z.ZodType<Domains$Outbound, z.ZodTypeDef, Domains>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Domains$ {
    /** @deprecated use `Domains$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Domains, z.ZodTypeDef, unknown>;
    /** @deprecated use `Domains$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Domains$Outbound, z.ZodTypeDef, Domains>;
    /** @deprecated use `Domains$Outbound` instead. */
    type Outbound = Domains$Outbound;
}
export declare function domainsToJSON(domains: Domains): string;
export declare function domainsFromJSON(jsonString: string): SafeParseResult<Domains, SDKValidationError>;
/** @internal */
export declare const GetDomainsResponseBody$inboundSchema: z.ZodType<GetDomainsResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDomainsResponseBody$Outbound = {
    domains: Array<Domains$Outbound>;
    pagination: Pagination$Outbound;
};
/** @internal */
export declare const GetDomainsResponseBody$outboundSchema: z.ZodType<GetDomainsResponseBody$Outbound, z.ZodTypeDef, GetDomainsResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDomainsResponseBody$ {
    /** @deprecated use `GetDomainsResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDomainsResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDomainsResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDomainsResponseBody$Outbound, z.ZodTypeDef, GetDomainsResponseBody>;
    /** @deprecated use `GetDomainsResponseBody$Outbound` instead. */
    type Outbound = GetDomainsResponseBody$Outbound;
}
export declare function getDomainsResponseBodyToJSON(getDomainsResponseBody: GetDomainsResponseBody): string;
export declare function getDomainsResponseBodyFromJSON(jsonString: string): SafeParseResult<GetDomainsResponseBody, SDKValidationError>;
//# sourceMappingURL=getdomainsop.d.ts.map