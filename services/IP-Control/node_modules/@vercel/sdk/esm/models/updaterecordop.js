/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/**
 * The type of the DNS record
 */
export const UpdateRecordType = {
    A: "A",
    Aaaa: "AAAA",
    Alias: "ALIAS",
    Caa: "CAA",
    Cname: "CNAME",
    Https: "HTTPS",
    Mx: "MX",
    Srv: "SRV",
    Txt: "TXT",
    Ns: "NS",
};
export const RecordType = {
    A: "A",
    Aaaa: "AAAA",
    Alias: "ALIAS",
    Caa: "CAA",
    Cname: "CNAME",
    Https: "HTTPS",
    Mx: "MX",
    Srv: "SRV",
    Txt: "TXT",
    Ns: "NS",
};
export const UpdateRecordDnsType = {
    Record: "record",
    RecordSys: "record-sys",
};
/** @internal */
export const UpdateRecordType$inboundSchema = z.nativeEnum(UpdateRecordType);
/** @internal */
export const UpdateRecordType$outboundSchema = UpdateRecordType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateRecordType$;
(function (UpdateRecordType$) {
    /** @deprecated use `UpdateRecordType$inboundSchema` instead. */
    UpdateRecordType$.inboundSchema = UpdateRecordType$inboundSchema;
    /** @deprecated use `UpdateRecordType$outboundSchema` instead. */
    UpdateRecordType$.outboundSchema = UpdateRecordType$outboundSchema;
})(UpdateRecordType$ || (UpdateRecordType$ = {}));
/** @internal */
export const Srv$inboundSchema = z
    .object({
    target: z.nullable(z.string()),
    weight: z.nullable(z.number().int()),
    port: z.nullable(z.number().int()),
    priority: z.nullable(z.number().int()),
});
/** @internal */
export const Srv$outboundSchema = z
    .object({
    target: z.nullable(z.string()),
    weight: z.nullable(z.number().int()),
    port: z.nullable(z.number().int()),
    priority: z.nullable(z.number().int()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Srv$;
(function (Srv$) {
    /** @deprecated use `Srv$inboundSchema` instead. */
    Srv$.inboundSchema = Srv$inboundSchema;
    /** @deprecated use `Srv$outboundSchema` instead. */
    Srv$.outboundSchema = Srv$outboundSchema;
})(Srv$ || (Srv$ = {}));
export function srvToJSON(srv) {
    return JSON.stringify(Srv$outboundSchema.parse(srv));
}
export function srvFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Srv$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Srv' from JSON`);
}
/** @internal */
export const Https$inboundSchema = z
    .object({
    priority: z.nullable(z.number().int()),
    target: z.nullable(z.string()),
    params: z.nullable(z.string()).optional(),
});
/** @internal */
export const Https$outboundSchema = z.object({
    priority: z.nullable(z.number().int()),
    target: z.nullable(z.string()),
    params: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Https$;
(function (Https$) {
    /** @deprecated use `Https$inboundSchema` instead. */
    Https$.inboundSchema = Https$inboundSchema;
    /** @deprecated use `Https$outboundSchema` instead. */
    Https$.outboundSchema = Https$outboundSchema;
})(Https$ || (Https$ = {}));
export function httpsToJSON(https) {
    return JSON.stringify(Https$outboundSchema.parse(https));
}
export function httpsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Https$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Https' from JSON`);
}
/** @internal */
export const UpdateRecordRequestBody$inboundSchema = z.object({
    name: z.nullable(z.string()).optional(),
    value: z.nullable(z.string()).optional(),
    type: z.nullable(UpdateRecordType$inboundSchema).optional(),
    ttl: z.nullable(z.number().int()).optional(),
    mxPriority: z.nullable(z.number().int()).optional(),
    srv: z.nullable(z.lazy(() => Srv$inboundSchema)).optional(),
    https: z.nullable(z.lazy(() => Https$inboundSchema)).optional(),
    comment: z.string().optional(),
});
/** @internal */
export const UpdateRecordRequestBody$outboundSchema = z.object({
    name: z.nullable(z.string()).optional(),
    value: z.nullable(z.string()).optional(),
    type: z.nullable(UpdateRecordType$outboundSchema).optional(),
    ttl: z.nullable(z.number().int()).optional(),
    mxPriority: z.nullable(z.number().int()).optional(),
    srv: z.nullable(z.lazy(() => Srv$outboundSchema)).optional(),
    https: z.nullable(z.lazy(() => Https$outboundSchema)).optional(),
    comment: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateRecordRequestBody$;
(function (UpdateRecordRequestBody$) {
    /** @deprecated use `UpdateRecordRequestBody$inboundSchema` instead. */
    UpdateRecordRequestBody$.inboundSchema = UpdateRecordRequestBody$inboundSchema;
    /** @deprecated use `UpdateRecordRequestBody$outboundSchema` instead. */
    UpdateRecordRequestBody$.outboundSchema = UpdateRecordRequestBody$outboundSchema;
})(UpdateRecordRequestBody$ || (UpdateRecordRequestBody$ = {}));
export function updateRecordRequestBodyToJSON(updateRecordRequestBody) {
    return JSON.stringify(UpdateRecordRequestBody$outboundSchema.parse(updateRecordRequestBody));
}
export function updateRecordRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateRecordRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateRecordRequestBody' from JSON`);
}
/** @internal */
export const UpdateRecordRequest$inboundSchema = z.object({
    recordId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => UpdateRecordRequestBody$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const UpdateRecordRequest$outboundSchema = z.object({
    recordId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => UpdateRecordRequestBody$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateRecordRequest$;
(function (UpdateRecordRequest$) {
    /** @deprecated use `UpdateRecordRequest$inboundSchema` instead. */
    UpdateRecordRequest$.inboundSchema = UpdateRecordRequest$inboundSchema;
    /** @deprecated use `UpdateRecordRequest$outboundSchema` instead. */
    UpdateRecordRequest$.outboundSchema = UpdateRecordRequest$outboundSchema;
})(UpdateRecordRequest$ || (UpdateRecordRequest$ = {}));
export function updateRecordRequestToJSON(updateRecordRequest) {
    return JSON.stringify(UpdateRecordRequest$outboundSchema.parse(updateRecordRequest));
}
export function updateRecordRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateRecordRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateRecordRequest' from JSON`);
}
/** @internal */
export const RecordType$inboundSchema = z
    .nativeEnum(RecordType);
/** @internal */
export const RecordType$outboundSchema = RecordType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RecordType$;
(function (RecordType$) {
    /** @deprecated use `RecordType$inboundSchema` instead. */
    RecordType$.inboundSchema = RecordType$inboundSchema;
    /** @deprecated use `RecordType$outboundSchema` instead. */
    RecordType$.outboundSchema = RecordType$outboundSchema;
})(RecordType$ || (RecordType$ = {}));
/** @internal */
export const UpdateRecordDnsType$inboundSchema = z.nativeEnum(UpdateRecordDnsType);
/** @internal */
export const UpdateRecordDnsType$outboundSchema = UpdateRecordDnsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateRecordDnsType$;
(function (UpdateRecordDnsType$) {
    /** @deprecated use `UpdateRecordDnsType$inboundSchema` instead. */
    UpdateRecordDnsType$.inboundSchema = UpdateRecordDnsType$inboundSchema;
    /** @deprecated use `UpdateRecordDnsType$outboundSchema` instead. */
    UpdateRecordDnsType$.outboundSchema = UpdateRecordDnsType$outboundSchema;
})(UpdateRecordDnsType$ || (UpdateRecordDnsType$ = {}));
/** @internal */
export const UpdateRecordResponseBody$inboundSchema = z.object({
    createdAt: z.nullable(z.number()).optional(),
    creator: z.string(),
    domain: z.string(),
    id: z.string(),
    name: z.string(),
    recordType: RecordType$inboundSchema,
    ttl: z.number().optional(),
    type: UpdateRecordDnsType$inboundSchema,
    value: z.string(),
    comment: z.string().optional(),
});
/** @internal */
export const UpdateRecordResponseBody$outboundSchema = z.object({
    createdAt: z.nullable(z.number()).optional(),
    creator: z.string(),
    domain: z.string(),
    id: z.string(),
    name: z.string(),
    recordType: RecordType$outboundSchema,
    ttl: z.number().optional(),
    type: UpdateRecordDnsType$outboundSchema,
    value: z.string(),
    comment: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateRecordResponseBody$;
(function (UpdateRecordResponseBody$) {
    /** @deprecated use `UpdateRecordResponseBody$inboundSchema` instead. */
    UpdateRecordResponseBody$.inboundSchema = UpdateRecordResponseBody$inboundSchema;
    /** @deprecated use `UpdateRecordResponseBody$outboundSchema` instead. */
    UpdateRecordResponseBody$.outboundSchema = UpdateRecordResponseBody$outboundSchema;
})(UpdateRecordResponseBody$ || (UpdateRecordResponseBody$ = {}));
export function updateRecordResponseBodyToJSON(updateRecordResponseBody) {
    return JSON.stringify(UpdateRecordResponseBody$outboundSchema.parse(updateRecordResponseBody));
}
export function updateRecordResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateRecordResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateRecordResponseBody' from JSON`);
}
//# sourceMappingURL=updaterecordop.js.map