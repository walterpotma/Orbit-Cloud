/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/** @internal */
export const UploadFileRequest$inboundSchema = z.object({
    "Content-Length": z.number().optional(),
    "x-vercel-digest": z.string().optional(),
    "x-now-digest": z.string().optional(),
    "x-now-size": z.number().optional(),
    "x-internal-v0-token": z.string().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.union([
        z.instanceof((ReadableStream)),
        z.instanceof(Blob),
        z.instanceof(ArrayBuffer),
        z.instanceof(Uint8Array),
    ]).optional(),
}).transform((v) => {
    return remap$(v, {
        "Content-Length": "contentLength",
        "x-vercel-digest": "xVercelDigest",
        "x-now-digest": "xNowDigest",
        "x-now-size": "xNowSize",
        "x-internal-v0-token": "xInternalV0Token",
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const UploadFileRequest$outboundSchema = z.object({
    contentLength: z.number().optional(),
    xVercelDigest: z.string().optional(),
    xNowDigest: z.string().optional(),
    xNowSize: z.number().optional(),
    xInternalV0Token: z.string().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.union([
        z.instanceof((ReadableStream)),
        z.instanceof(Blob),
        z.instanceof(ArrayBuffer),
        z.instanceof(Uint8Array),
    ]).optional(),
}).transform((v) => {
    return remap$(v, {
        contentLength: "Content-Length",
        xVercelDigest: "x-vercel-digest",
        xNowDigest: "x-now-digest",
        xNowSize: "x-now-size",
        xInternalV0Token: "x-internal-v0-token",
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UploadFileRequest$;
(function (UploadFileRequest$) {
    /** @deprecated use `UploadFileRequest$inboundSchema` instead. */
    UploadFileRequest$.inboundSchema = UploadFileRequest$inboundSchema;
    /** @deprecated use `UploadFileRequest$outboundSchema` instead. */
    UploadFileRequest$.outboundSchema = UploadFileRequest$outboundSchema;
})(UploadFileRequest$ || (UploadFileRequest$ = {}));
export function uploadFileRequestToJSON(uploadFileRequest) {
    return JSON.stringify(UploadFileRequest$outboundSchema.parse(uploadFileRequest));
}
export function uploadFileRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UploadFileRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UploadFileRequest' from JSON`);
}
/** @internal */
export const UploadFileResponseBody2$inboundSchema = z.object({});
/** @internal */
export const UploadFileResponseBody2$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UploadFileResponseBody2$;
(function (UploadFileResponseBody2$) {
    /** @deprecated use `UploadFileResponseBody2$inboundSchema` instead. */
    UploadFileResponseBody2$.inboundSchema = UploadFileResponseBody2$inboundSchema;
    /** @deprecated use `UploadFileResponseBody2$outboundSchema` instead. */
    UploadFileResponseBody2$.outboundSchema = UploadFileResponseBody2$outboundSchema;
})(UploadFileResponseBody2$ || (UploadFileResponseBody2$ = {}));
export function uploadFileResponseBody2ToJSON(uploadFileResponseBody2) {
    return JSON.stringify(UploadFileResponseBody2$outboundSchema.parse(uploadFileResponseBody2));
}
export function uploadFileResponseBody2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UploadFileResponseBody2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UploadFileResponseBody2' from JSON`);
}
/** @internal */
export const UploadFileResponseBody1$inboundSchema = z.object({
    urls: z.array(z.string()),
});
/** @internal */
export const UploadFileResponseBody1$outboundSchema = z.object({
    urls: z.array(z.string()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UploadFileResponseBody1$;
(function (UploadFileResponseBody1$) {
    /** @deprecated use `UploadFileResponseBody1$inboundSchema` instead. */
    UploadFileResponseBody1$.inboundSchema = UploadFileResponseBody1$inboundSchema;
    /** @deprecated use `UploadFileResponseBody1$outboundSchema` instead. */
    UploadFileResponseBody1$.outboundSchema = UploadFileResponseBody1$outboundSchema;
})(UploadFileResponseBody1$ || (UploadFileResponseBody1$ = {}));
export function uploadFileResponseBody1ToJSON(uploadFileResponseBody1) {
    return JSON.stringify(UploadFileResponseBody1$outboundSchema.parse(uploadFileResponseBody1));
}
export function uploadFileResponseBody1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UploadFileResponseBody1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UploadFileResponseBody1' from JSON`);
}
/** @internal */
export const UploadFileResponseBody$inboundSchema = z.union([
    z.lazy(() => UploadFileResponseBody1$inboundSchema),
    z.lazy(() => UploadFileResponseBody2$inboundSchema),
]);
/** @internal */
export const UploadFileResponseBody$outboundSchema = z.union([
    z.lazy(() => UploadFileResponseBody1$outboundSchema),
    z.lazy(() => UploadFileResponseBody2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UploadFileResponseBody$;
(function (UploadFileResponseBody$) {
    /** @deprecated use `UploadFileResponseBody$inboundSchema` instead. */
    UploadFileResponseBody$.inboundSchema = UploadFileResponseBody$inboundSchema;
    /** @deprecated use `UploadFileResponseBody$outboundSchema` instead. */
    UploadFileResponseBody$.outboundSchema = UploadFileResponseBody$outboundSchema;
})(UploadFileResponseBody$ || (UploadFileResponseBody$ = {}));
export function uploadFileResponseBodyToJSON(uploadFileResponseBody) {
    return JSON.stringify(UploadFileResponseBody$outboundSchema.parse(uploadFileResponseBody));
}
export function uploadFileResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UploadFileResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UploadFileResponseBody' from JSON`);
}
//# sourceMappingURL=uploadfileop.js.map