import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
/**
 * Filter by rolling release state
 */
export declare const State: {
    readonly Active: "ACTIVE";
    readonly Complete: "COMPLETE";
    readonly Aborted: "ABORTED";
};
/**
 * Filter by rolling release state
 */
export type State = ClosedEnum<typeof State>;
export type GetRollingReleaseRequest = {
    /**
     * Project ID or project name (URL-encoded)
     */
    idOrName: string;
    /**
     * Filter by rolling release state
     */
    state?: State | undefined;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};
/**
 * The current state of the rolling release
 */
export declare const GetRollingReleaseState: {
    readonly Active: "ACTIVE";
    readonly Complete: "COMPLETE";
    readonly Aborted: "ABORTED";
};
/**
 * The current state of the rolling release
 */
export type GetRollingReleaseState = ClosedEnum<typeof GetRollingReleaseState>;
export declare const GetRollingReleaseTarget: {
    readonly Staging: "staging";
    readonly Production: "production";
};
export type GetRollingReleaseTarget = ClosedEnum<typeof GetRollingReleaseTarget>;
export declare const GetRollingReleaseSource: {
    readonly ApiTriggerGitDeploy: "api-trigger-git-deploy";
    readonly Cli: "cli";
    readonly CloneRepo: "clone/repo";
    readonly Git: "git";
    readonly Import: "import";
    readonly ImportRepo: "import/repo";
    readonly Redeploy: "redeploy";
    readonly V0Web: "v0-web";
};
export type GetRollingReleaseSource = ClosedEnum<typeof GetRollingReleaseSource>;
export declare const GetRollingReleaseReadyState: {
    readonly Building: "BUILDING";
    readonly Error: "ERROR";
    readonly Initializing: "INITIALIZING";
    readonly Queued: "QUEUED";
    readonly Ready: "READY";
    readonly Canceled: "CANCELED";
};
export type GetRollingReleaseReadyState = ClosedEnum<typeof GetRollingReleaseReadyState>;
/**
 * The current deployment receiving production traffic
 */
export type CurrentDeployment = {
    id: string;
    name: string;
    url: string;
    target?: GetRollingReleaseTarget | null | undefined;
    source?: GetRollingReleaseSource | undefined;
    createdAt: number;
    readyState: GetRollingReleaseReadyState;
    readyStateAt?: number | undefined;
};
export declare const GetRollingReleaseRollingReleaseTarget: {
    readonly Staging: "staging";
    readonly Production: "production";
};
export type GetRollingReleaseRollingReleaseTarget = ClosedEnum<typeof GetRollingReleaseRollingReleaseTarget>;
export declare const GetRollingReleaseRollingReleaseSource: {
    readonly ApiTriggerGitDeploy: "api-trigger-git-deploy";
    readonly Cli: "cli";
    readonly CloneRepo: "clone/repo";
    readonly Git: "git";
    readonly Import: "import";
    readonly ImportRepo: "import/repo";
    readonly Redeploy: "redeploy";
    readonly V0Web: "v0-web";
};
export type GetRollingReleaseRollingReleaseSource = ClosedEnum<typeof GetRollingReleaseRollingReleaseSource>;
export declare const GetRollingReleaseRollingReleaseReadyState: {
    readonly Building: "BUILDING";
    readonly Error: "ERROR";
    readonly Initializing: "INITIALIZING";
    readonly Queued: "QUEUED";
    readonly Ready: "READY";
    readonly Canceled: "CANCELED";
};
export type GetRollingReleaseRollingReleaseReadyState = ClosedEnum<typeof GetRollingReleaseRollingReleaseReadyState>;
/**
 * The canary deployment being rolled out
 */
export type CanaryDeployment = {
    id: string;
    name: string;
    url: string;
    target?: GetRollingReleaseRollingReleaseTarget | null | undefined;
    source?: GetRollingReleaseRollingReleaseSource | undefined;
    createdAt: number;
    readyState: GetRollingReleaseRollingReleaseReadyState;
    readyStateAt?: number | undefined;
};
/**
 * The advancement type of the rolling release
 */
export declare const AdvancementType: {
    readonly Automatic: "automatic";
    readonly ManualApproval: "manual-approval";
};
/**
 * The advancement type of the rolling release
 */
export type AdvancementType = ClosedEnum<typeof AdvancementType>;
/**
 * All stages configured for this rolling release
 */
export type GetRollingReleaseStages = {
    /**
     * The zero-based index of the stage
     */
    index: number;
    /**
     * Whether or not this stage is the final stage (targetPercentage === 100)
     */
    isFinalStage: boolean;
    /**
     * The percentage of traffic to serve to the canary deployment (0-100)
     */
    targetPercentage: number;
    /**
     * Whether or not this stage requires manual approval to proceed
     */
    requireApproval: boolean;
    /**
     * Duration in seconds for automatic advancement, null for manual stages or the final stage
     */
    duration: number | null;
};
/**
 * The currently active stage, null if the rollout is aborted
 */
export type ActiveStage = {
    /**
     * The zero-based index of the stage
     */
    index: number;
    /**
     * Whether or not this stage is the final stage (targetPercentage === 100)
     */
    isFinalStage: boolean;
    /**
     * The percentage of traffic to serve to the canary deployment (0-100)
     */
    targetPercentage: number;
    /**
     * Whether or not this stage requires manual approval to proceed
     */
    requireApproval: boolean;
    /**
     * Duration in seconds for automatic advancement, null for manual stages or the final stage
     */
    duration: number | null;
};
/**
 * The next stage to be activated, null if not in ACTIVE state
 */
export type NextStage = {
    /**
     * The zero-based index of the stage
     */
    index: number;
    /**
     * Whether or not this stage is the final stage (targetPercentage === 100)
     */
    isFinalStage: boolean;
    /**
     * The percentage of traffic to serve to the canary deployment (0-100)
     */
    targetPercentage: number;
    /**
     * Whether or not this stage requires manual approval to proceed
     */
    requireApproval: boolean;
    /**
     * Duration in seconds for automatic advancement, null for manual stages or the final stage
     */
    duration: number | null;
};
/**
 * Rolling release information including configuration and document details, or null if no rolling release exists
 */
export type GetRollingReleaseRollingRelease = {
    /**
     * The current state of the rolling release
     */
    state: GetRollingReleaseState;
    /**
     * The current deployment receiving production traffic
     */
    currentDeployment: CurrentDeployment | null;
    /**
     * The canary deployment being rolled out
     */
    canaryDeployment: CanaryDeployment | null;
    /**
     * The ID of a deployment queued for the next rolling release
     */
    queuedDeploymentId: string | null;
    /**
     * The advancement type of the rolling release
     */
    advancementType: AdvancementType;
    /**
     * All stages configured for this rolling release
     */
    stages: Array<GetRollingReleaseStages>;
    /**
     * The currently active stage, null if the rollout is aborted
     */
    activeStage: ActiveStage | null;
    /**
     * The next stage to be activated, null if not in ACTIVE state
     */
    nextStage: NextStage | null;
    /**
     * Unix timestamp in milliseconds when the rolling release started
     */
    startedAt: number;
    /**
     * Unix timestamp in milliseconds when the rolling release was last updated
     */
    updatedAt: number;
};
/**
 * The response format for rolling release endpoints that return rolling release information
 */
export type GetRollingReleaseResponseBody = {
    /**
     * Rolling release information including configuration and document details, or null if no rolling release exists
     */
    rollingRelease: GetRollingReleaseRollingRelease | null;
};
/** @internal */
export declare const State$inboundSchema: z.ZodNativeEnum<typeof State>;
/** @internal */
export declare const State$outboundSchema: z.ZodNativeEnum<typeof State>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace State$ {
    /** @deprecated use `State$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Active: "ACTIVE";
        readonly Complete: "COMPLETE";
        readonly Aborted: "ABORTED";
    }>;
    /** @deprecated use `State$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Active: "ACTIVE";
        readonly Complete: "COMPLETE";
        readonly Aborted: "ABORTED";
    }>;
}
/** @internal */
export declare const GetRollingReleaseRequest$inboundSchema: z.ZodType<GetRollingReleaseRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetRollingReleaseRequest$Outbound = {
    idOrName: string;
    state?: string | undefined;
    teamId?: string | undefined;
    slug?: string | undefined;
};
/** @internal */
export declare const GetRollingReleaseRequest$outboundSchema: z.ZodType<GetRollingReleaseRequest$Outbound, z.ZodTypeDef, GetRollingReleaseRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetRollingReleaseRequest$ {
    /** @deprecated use `GetRollingReleaseRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetRollingReleaseRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetRollingReleaseRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetRollingReleaseRequest$Outbound, z.ZodTypeDef, GetRollingReleaseRequest>;
    /** @deprecated use `GetRollingReleaseRequest$Outbound` instead. */
    type Outbound = GetRollingReleaseRequest$Outbound;
}
export declare function getRollingReleaseRequestToJSON(getRollingReleaseRequest: GetRollingReleaseRequest): string;
export declare function getRollingReleaseRequestFromJSON(jsonString: string): SafeParseResult<GetRollingReleaseRequest, SDKValidationError>;
/** @internal */
export declare const GetRollingReleaseState$inboundSchema: z.ZodNativeEnum<typeof GetRollingReleaseState>;
/** @internal */
export declare const GetRollingReleaseState$outboundSchema: z.ZodNativeEnum<typeof GetRollingReleaseState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetRollingReleaseState$ {
    /** @deprecated use `GetRollingReleaseState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Active: "ACTIVE";
        readonly Complete: "COMPLETE";
        readonly Aborted: "ABORTED";
    }>;
    /** @deprecated use `GetRollingReleaseState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Active: "ACTIVE";
        readonly Complete: "COMPLETE";
        readonly Aborted: "ABORTED";
    }>;
}
/** @internal */
export declare const GetRollingReleaseTarget$inboundSchema: z.ZodNativeEnum<typeof GetRollingReleaseTarget>;
/** @internal */
export declare const GetRollingReleaseTarget$outboundSchema: z.ZodNativeEnum<typeof GetRollingReleaseTarget>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetRollingReleaseTarget$ {
    /** @deprecated use `GetRollingReleaseTarget$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Staging: "staging";
        readonly Production: "production";
    }>;
    /** @deprecated use `GetRollingReleaseTarget$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Staging: "staging";
        readonly Production: "production";
    }>;
}
/** @internal */
export declare const GetRollingReleaseSource$inboundSchema: z.ZodNativeEnum<typeof GetRollingReleaseSource>;
/** @internal */
export declare const GetRollingReleaseSource$outboundSchema: z.ZodNativeEnum<typeof GetRollingReleaseSource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetRollingReleaseSource$ {
    /** @deprecated use `GetRollingReleaseSource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly ApiTriggerGitDeploy: "api-trigger-git-deploy";
        readonly Cli: "cli";
        readonly CloneRepo: "clone/repo";
        readonly Git: "git";
        readonly Import: "import";
        readonly ImportRepo: "import/repo";
        readonly Redeploy: "redeploy";
        readonly V0Web: "v0-web";
    }>;
    /** @deprecated use `GetRollingReleaseSource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly ApiTriggerGitDeploy: "api-trigger-git-deploy";
        readonly Cli: "cli";
        readonly CloneRepo: "clone/repo";
        readonly Git: "git";
        readonly Import: "import";
        readonly ImportRepo: "import/repo";
        readonly Redeploy: "redeploy";
        readonly V0Web: "v0-web";
    }>;
}
/** @internal */
export declare const GetRollingReleaseReadyState$inboundSchema: z.ZodNativeEnum<typeof GetRollingReleaseReadyState>;
/** @internal */
export declare const GetRollingReleaseReadyState$outboundSchema: z.ZodNativeEnum<typeof GetRollingReleaseReadyState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetRollingReleaseReadyState$ {
    /** @deprecated use `GetRollingReleaseReadyState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Queued: "QUEUED";
        readonly Ready: "READY";
        readonly Canceled: "CANCELED";
    }>;
    /** @deprecated use `GetRollingReleaseReadyState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Queued: "QUEUED";
        readonly Ready: "READY";
        readonly Canceled: "CANCELED";
    }>;
}
/** @internal */
export declare const CurrentDeployment$inboundSchema: z.ZodType<CurrentDeployment, z.ZodTypeDef, unknown>;
/** @internal */
export type CurrentDeployment$Outbound = {
    id: string;
    name: string;
    url: string;
    target?: string | null | undefined;
    source?: string | undefined;
    createdAt: number;
    readyState: string;
    readyStateAt?: number | undefined;
};
/** @internal */
export declare const CurrentDeployment$outboundSchema: z.ZodType<CurrentDeployment$Outbound, z.ZodTypeDef, CurrentDeployment>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CurrentDeployment$ {
    /** @deprecated use `CurrentDeployment$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CurrentDeployment, z.ZodTypeDef, unknown>;
    /** @deprecated use `CurrentDeployment$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CurrentDeployment$Outbound, z.ZodTypeDef, CurrentDeployment>;
    /** @deprecated use `CurrentDeployment$Outbound` instead. */
    type Outbound = CurrentDeployment$Outbound;
}
export declare function currentDeploymentToJSON(currentDeployment: CurrentDeployment): string;
export declare function currentDeploymentFromJSON(jsonString: string): SafeParseResult<CurrentDeployment, SDKValidationError>;
/** @internal */
export declare const GetRollingReleaseRollingReleaseTarget$inboundSchema: z.ZodNativeEnum<typeof GetRollingReleaseRollingReleaseTarget>;
/** @internal */
export declare const GetRollingReleaseRollingReleaseTarget$outboundSchema: z.ZodNativeEnum<typeof GetRollingReleaseRollingReleaseTarget>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetRollingReleaseRollingReleaseTarget$ {
    /** @deprecated use `GetRollingReleaseRollingReleaseTarget$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Staging: "staging";
        readonly Production: "production";
    }>;
    /** @deprecated use `GetRollingReleaseRollingReleaseTarget$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Staging: "staging";
        readonly Production: "production";
    }>;
}
/** @internal */
export declare const GetRollingReleaseRollingReleaseSource$inboundSchema: z.ZodNativeEnum<typeof GetRollingReleaseRollingReleaseSource>;
/** @internal */
export declare const GetRollingReleaseRollingReleaseSource$outboundSchema: z.ZodNativeEnum<typeof GetRollingReleaseRollingReleaseSource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetRollingReleaseRollingReleaseSource$ {
    /** @deprecated use `GetRollingReleaseRollingReleaseSource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly ApiTriggerGitDeploy: "api-trigger-git-deploy";
        readonly Cli: "cli";
        readonly CloneRepo: "clone/repo";
        readonly Git: "git";
        readonly Import: "import";
        readonly ImportRepo: "import/repo";
        readonly Redeploy: "redeploy";
        readonly V0Web: "v0-web";
    }>;
    /** @deprecated use `GetRollingReleaseRollingReleaseSource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly ApiTriggerGitDeploy: "api-trigger-git-deploy";
        readonly Cli: "cli";
        readonly CloneRepo: "clone/repo";
        readonly Git: "git";
        readonly Import: "import";
        readonly ImportRepo: "import/repo";
        readonly Redeploy: "redeploy";
        readonly V0Web: "v0-web";
    }>;
}
/** @internal */
export declare const GetRollingReleaseRollingReleaseReadyState$inboundSchema: z.ZodNativeEnum<typeof GetRollingReleaseRollingReleaseReadyState>;
/** @internal */
export declare const GetRollingReleaseRollingReleaseReadyState$outboundSchema: z.ZodNativeEnum<typeof GetRollingReleaseRollingReleaseReadyState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetRollingReleaseRollingReleaseReadyState$ {
    /** @deprecated use `GetRollingReleaseRollingReleaseReadyState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Queued: "QUEUED";
        readonly Ready: "READY";
        readonly Canceled: "CANCELED";
    }>;
    /** @deprecated use `GetRollingReleaseRollingReleaseReadyState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Queued: "QUEUED";
        readonly Ready: "READY";
        readonly Canceled: "CANCELED";
    }>;
}
/** @internal */
export declare const CanaryDeployment$inboundSchema: z.ZodType<CanaryDeployment, z.ZodTypeDef, unknown>;
/** @internal */
export type CanaryDeployment$Outbound = {
    id: string;
    name: string;
    url: string;
    target?: string | null | undefined;
    source?: string | undefined;
    createdAt: number;
    readyState: string;
    readyStateAt?: number | undefined;
};
/** @internal */
export declare const CanaryDeployment$outboundSchema: z.ZodType<CanaryDeployment$Outbound, z.ZodTypeDef, CanaryDeployment>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CanaryDeployment$ {
    /** @deprecated use `CanaryDeployment$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CanaryDeployment, z.ZodTypeDef, unknown>;
    /** @deprecated use `CanaryDeployment$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CanaryDeployment$Outbound, z.ZodTypeDef, CanaryDeployment>;
    /** @deprecated use `CanaryDeployment$Outbound` instead. */
    type Outbound = CanaryDeployment$Outbound;
}
export declare function canaryDeploymentToJSON(canaryDeployment: CanaryDeployment): string;
export declare function canaryDeploymentFromJSON(jsonString: string): SafeParseResult<CanaryDeployment, SDKValidationError>;
/** @internal */
export declare const AdvancementType$inboundSchema: z.ZodNativeEnum<typeof AdvancementType>;
/** @internal */
export declare const AdvancementType$outboundSchema: z.ZodNativeEnum<typeof AdvancementType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AdvancementType$ {
    /** @deprecated use `AdvancementType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Automatic: "automatic";
        readonly ManualApproval: "manual-approval";
    }>;
    /** @deprecated use `AdvancementType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Automatic: "automatic";
        readonly ManualApproval: "manual-approval";
    }>;
}
/** @internal */
export declare const GetRollingReleaseStages$inboundSchema: z.ZodType<GetRollingReleaseStages, z.ZodTypeDef, unknown>;
/** @internal */
export type GetRollingReleaseStages$Outbound = {
    index: number;
    isFinalStage: boolean;
    targetPercentage: number;
    requireApproval: boolean;
    duration: number | null;
};
/** @internal */
export declare const GetRollingReleaseStages$outboundSchema: z.ZodType<GetRollingReleaseStages$Outbound, z.ZodTypeDef, GetRollingReleaseStages>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetRollingReleaseStages$ {
    /** @deprecated use `GetRollingReleaseStages$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetRollingReleaseStages, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetRollingReleaseStages$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetRollingReleaseStages$Outbound, z.ZodTypeDef, GetRollingReleaseStages>;
    /** @deprecated use `GetRollingReleaseStages$Outbound` instead. */
    type Outbound = GetRollingReleaseStages$Outbound;
}
export declare function getRollingReleaseStagesToJSON(getRollingReleaseStages: GetRollingReleaseStages): string;
export declare function getRollingReleaseStagesFromJSON(jsonString: string): SafeParseResult<GetRollingReleaseStages, SDKValidationError>;
/** @internal */
export declare const ActiveStage$inboundSchema: z.ZodType<ActiveStage, z.ZodTypeDef, unknown>;
/** @internal */
export type ActiveStage$Outbound = {
    index: number;
    isFinalStage: boolean;
    targetPercentage: number;
    requireApproval: boolean;
    duration: number | null;
};
/** @internal */
export declare const ActiveStage$outboundSchema: z.ZodType<ActiveStage$Outbound, z.ZodTypeDef, ActiveStage>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActiveStage$ {
    /** @deprecated use `ActiveStage$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActiveStage, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActiveStage$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActiveStage$Outbound, z.ZodTypeDef, ActiveStage>;
    /** @deprecated use `ActiveStage$Outbound` instead. */
    type Outbound = ActiveStage$Outbound;
}
export declare function activeStageToJSON(activeStage: ActiveStage): string;
export declare function activeStageFromJSON(jsonString: string): SafeParseResult<ActiveStage, SDKValidationError>;
/** @internal */
export declare const NextStage$inboundSchema: z.ZodType<NextStage, z.ZodTypeDef, unknown>;
/** @internal */
export type NextStage$Outbound = {
    index: number;
    isFinalStage: boolean;
    targetPercentage: number;
    requireApproval: boolean;
    duration: number | null;
};
/** @internal */
export declare const NextStage$outboundSchema: z.ZodType<NextStage$Outbound, z.ZodTypeDef, NextStage>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NextStage$ {
    /** @deprecated use `NextStage$inboundSchema` instead. */
    const inboundSchema: z.ZodType<NextStage, z.ZodTypeDef, unknown>;
    /** @deprecated use `NextStage$outboundSchema` instead. */
    const outboundSchema: z.ZodType<NextStage$Outbound, z.ZodTypeDef, NextStage>;
    /** @deprecated use `NextStage$Outbound` instead. */
    type Outbound = NextStage$Outbound;
}
export declare function nextStageToJSON(nextStage: NextStage): string;
export declare function nextStageFromJSON(jsonString: string): SafeParseResult<NextStage, SDKValidationError>;
/** @internal */
export declare const GetRollingReleaseRollingRelease$inboundSchema: z.ZodType<GetRollingReleaseRollingRelease, z.ZodTypeDef, unknown>;
/** @internal */
export type GetRollingReleaseRollingRelease$Outbound = {
    state: string;
    currentDeployment: CurrentDeployment$Outbound | null;
    canaryDeployment: CanaryDeployment$Outbound | null;
    queuedDeploymentId: string | null;
    advancementType: string;
    stages: Array<GetRollingReleaseStages$Outbound>;
    activeStage: ActiveStage$Outbound | null;
    nextStage: NextStage$Outbound | null;
    startedAt: number;
    updatedAt: number;
};
/** @internal */
export declare const GetRollingReleaseRollingRelease$outboundSchema: z.ZodType<GetRollingReleaseRollingRelease$Outbound, z.ZodTypeDef, GetRollingReleaseRollingRelease>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetRollingReleaseRollingRelease$ {
    /** @deprecated use `GetRollingReleaseRollingRelease$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetRollingReleaseRollingRelease, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetRollingReleaseRollingRelease$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetRollingReleaseRollingRelease$Outbound, z.ZodTypeDef, GetRollingReleaseRollingRelease>;
    /** @deprecated use `GetRollingReleaseRollingRelease$Outbound` instead. */
    type Outbound = GetRollingReleaseRollingRelease$Outbound;
}
export declare function getRollingReleaseRollingReleaseToJSON(getRollingReleaseRollingRelease: GetRollingReleaseRollingRelease): string;
export declare function getRollingReleaseRollingReleaseFromJSON(jsonString: string): SafeParseResult<GetRollingReleaseRollingRelease, SDKValidationError>;
/** @internal */
export declare const GetRollingReleaseResponseBody$inboundSchema: z.ZodType<GetRollingReleaseResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type GetRollingReleaseResponseBody$Outbound = {
    rollingRelease: GetRollingReleaseRollingRelease$Outbound | null;
};
/** @internal */
export declare const GetRollingReleaseResponseBody$outboundSchema: z.ZodType<GetRollingReleaseResponseBody$Outbound, z.ZodTypeDef, GetRollingReleaseResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetRollingReleaseResponseBody$ {
    /** @deprecated use `GetRollingReleaseResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetRollingReleaseResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetRollingReleaseResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetRollingReleaseResponseBody$Outbound, z.ZodTypeDef, GetRollingReleaseResponseBody>;
    /** @deprecated use `GetRollingReleaseResponseBody$Outbound` instead. */
    type Outbound = GetRollingReleaseResponseBody$Outbound;
}
export declare function getRollingReleaseResponseBodyToJSON(getRollingReleaseResponseBody: GetRollingReleaseResponseBody): string;
export declare function getRollingReleaseResponseBodyFromJSON(jsonString: string): SafeParseResult<GetRollingReleaseResponseBody, SDKValidationError>;
//# sourceMappingURL=getrollingreleaseop.d.ts.map