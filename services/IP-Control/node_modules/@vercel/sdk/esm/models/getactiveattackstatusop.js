/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/** @internal */
export const GetActiveAttackStatusRequest$inboundSchema = z.object({
    projectId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/** @internal */
export const GetActiveAttackStatusRequest$outboundSchema = z.object({
    projectId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetActiveAttackStatusRequest$;
(function (GetActiveAttackStatusRequest$) {
    /** @deprecated use `GetActiveAttackStatusRequest$inboundSchema` instead. */
    GetActiveAttackStatusRequest$.inboundSchema = GetActiveAttackStatusRequest$inboundSchema;
    /** @deprecated use `GetActiveAttackStatusRequest$outboundSchema` instead. */
    GetActiveAttackStatusRequest$.outboundSchema = GetActiveAttackStatusRequest$outboundSchema;
})(GetActiveAttackStatusRequest$ || (GetActiveAttackStatusRequest$ = {}));
export function getActiveAttackStatusRequestToJSON(getActiveAttackStatusRequest) {
    return JSON.stringify(GetActiveAttackStatusRequest$outboundSchema.parse(getActiveAttackStatusRequest));
}
export function getActiveAttackStatusRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetActiveAttackStatusRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetActiveAttackStatusRequest' from JSON`);
}
/** @internal */
export const AnomalyAlerts$inboundSchema = z.object({
    at_minute: z.string(),
    zscore: z.number(),
    total_requests_minute: z.number(),
    avg_requests: z.number(),
    stddev_requests: z.number(),
}).transform((v) => {
    return remap$(v, {
        "at_minute": "atMinute",
        "total_requests_minute": "totalRequestsMinute",
        "avg_requests": "avgRequests",
        "stddev_requests": "stddevRequests",
    });
});
/** @internal */
export const AnomalyAlerts$outboundSchema = z.object({
    atMinute: z.string(),
    zscore: z.number(),
    totalRequestsMinute: z.number(),
    avgRequests: z.number(),
    stddevRequests: z.number(),
}).transform((v) => {
    return remap$(v, {
        atMinute: "at_minute",
        totalRequestsMinute: "total_requests_minute",
        avgRequests: "avg_requests",
        stddevRequests: "stddev_requests",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AnomalyAlerts$;
(function (AnomalyAlerts$) {
    /** @deprecated use `AnomalyAlerts$inboundSchema` instead. */
    AnomalyAlerts$.inboundSchema = AnomalyAlerts$inboundSchema;
    /** @deprecated use `AnomalyAlerts$outboundSchema` instead. */
    AnomalyAlerts$.outboundSchema = AnomalyAlerts$outboundSchema;
})(AnomalyAlerts$ || (AnomalyAlerts$ = {}));
export function anomalyAlertsToJSON(anomalyAlerts) {
    return JSON.stringify(AnomalyAlerts$outboundSchema.parse(anomalyAlerts));
}
export function anomalyAlertsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AnomalyAlerts$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AnomalyAlerts' from JSON`);
}
/** @internal */
export const DdosAlerts$inboundSchema = z.object({
    atMinute: z.string(),
    totalReqs: z.number(),
});
/** @internal */
export const DdosAlerts$outboundSchema = z.object({
    atMinute: z.string(),
    totalReqs: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DdosAlerts$;
(function (DdosAlerts$) {
    /** @deprecated use `DdosAlerts$inboundSchema` instead. */
    DdosAlerts$.inboundSchema = DdosAlerts$inboundSchema;
    /** @deprecated use `DdosAlerts$outboundSchema` instead. */
    DdosAlerts$.outboundSchema = DdosAlerts$outboundSchema;
})(DdosAlerts$ || (DdosAlerts$ = {}));
export function ddosAlertsToJSON(ddosAlerts) {
    return JSON.stringify(DdosAlerts$outboundSchema.parse(ddosAlerts));
}
export function ddosAlertsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DdosAlerts$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DdosAlerts' from JSON`);
}
/** @internal */
export const AffectedHostMap$inboundSchema = z.object({
    anomalyAlerts: z.record(z.lazy(() => AnomalyAlerts$inboundSchema)).optional(),
    ddosAlerts: z.record(z.lazy(() => DdosAlerts$inboundSchema)).optional(),
});
/** @internal */
export const AffectedHostMap$outboundSchema = z.object({
    anomalyAlerts: z.record(z.lazy(() => AnomalyAlerts$outboundSchema))
        .optional(),
    ddosAlerts: z.record(z.lazy(() => DdosAlerts$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AffectedHostMap$;
(function (AffectedHostMap$) {
    /** @deprecated use `AffectedHostMap$inboundSchema` instead. */
    AffectedHostMap$.inboundSchema = AffectedHostMap$inboundSchema;
    /** @deprecated use `AffectedHostMap$outboundSchema` instead. */
    AffectedHostMap$.outboundSchema = AffectedHostMap$outboundSchema;
})(AffectedHostMap$ || (AffectedHostMap$ = {}));
export function affectedHostMapToJSON(affectedHostMap) {
    return JSON.stringify(AffectedHostMap$outboundSchema.parse(affectedHostMap));
}
export function affectedHostMapFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AffectedHostMap$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AffectedHostMap' from JSON`);
}
/** @internal */
export const Anomalies$inboundSchema = z.object({
    ownerId: z.string(),
    projectId: z.string(),
    startTime: z.number(),
    endTime: z.nullable(z.number()),
    atMinute: z.number(),
    state: z.string().optional(),
    affectedHostMap: z.record(z.lazy(() => AffectedHostMap$inboundSchema)),
});
/** @internal */
export const Anomalies$outboundSchema = z.object({
    ownerId: z.string(),
    projectId: z.string(),
    startTime: z.number(),
    endTime: z.nullable(z.number()),
    atMinute: z.number(),
    state: z.string().optional(),
    affectedHostMap: z.record(z.lazy(() => AffectedHostMap$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Anomalies$;
(function (Anomalies$) {
    /** @deprecated use `Anomalies$inboundSchema` instead. */
    Anomalies$.inboundSchema = Anomalies$inboundSchema;
    /** @deprecated use `Anomalies$outboundSchema` instead. */
    Anomalies$.outboundSchema = Anomalies$outboundSchema;
})(Anomalies$ || (Anomalies$ = {}));
export function anomaliesToJSON(anomalies) {
    return JSON.stringify(Anomalies$outboundSchema.parse(anomalies));
}
export function anomaliesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Anomalies$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Anomalies' from JSON`);
}
/** @internal */
export const GetActiveAttackStatusResponseBody2$inboundSchema = z.object({
    anomalies: z.array(z.lazy(() => Anomalies$inboundSchema)),
});
/** @internal */
export const GetActiveAttackStatusResponseBody2$outboundSchema = z.object({
    anomalies: z.array(z.lazy(() => Anomalies$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetActiveAttackStatusResponseBody2$;
(function (GetActiveAttackStatusResponseBody2$) {
    /** @deprecated use `GetActiveAttackStatusResponseBody2$inboundSchema` instead. */
    GetActiveAttackStatusResponseBody2$.inboundSchema = GetActiveAttackStatusResponseBody2$inboundSchema;
    /** @deprecated use `GetActiveAttackStatusResponseBody2$outboundSchema` instead. */
    GetActiveAttackStatusResponseBody2$.outboundSchema = GetActiveAttackStatusResponseBody2$outboundSchema;
})(GetActiveAttackStatusResponseBody2$ || (GetActiveAttackStatusResponseBody2$ = {}));
export function getActiveAttackStatusResponseBody2ToJSON(getActiveAttackStatusResponseBody2) {
    return JSON.stringify(GetActiveAttackStatusResponseBody2$outboundSchema.parse(getActiveAttackStatusResponseBody2));
}
export function getActiveAttackStatusResponseBody2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetActiveAttackStatusResponseBody2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetActiveAttackStatusResponseBody2' from JSON`);
}
/** @internal */
export const GetActiveAttackStatusResponseBody1$inboundSchema = z.object({});
/** @internal */
export const GetActiveAttackStatusResponseBody1$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetActiveAttackStatusResponseBody1$;
(function (GetActiveAttackStatusResponseBody1$) {
    /** @deprecated use `GetActiveAttackStatusResponseBody1$inboundSchema` instead. */
    GetActiveAttackStatusResponseBody1$.inboundSchema = GetActiveAttackStatusResponseBody1$inboundSchema;
    /** @deprecated use `GetActiveAttackStatusResponseBody1$outboundSchema` instead. */
    GetActiveAttackStatusResponseBody1$.outboundSchema = GetActiveAttackStatusResponseBody1$outboundSchema;
})(GetActiveAttackStatusResponseBody1$ || (GetActiveAttackStatusResponseBody1$ = {}));
export function getActiveAttackStatusResponseBody1ToJSON(getActiveAttackStatusResponseBody1) {
    return JSON.stringify(GetActiveAttackStatusResponseBody1$outboundSchema.parse(getActiveAttackStatusResponseBody1));
}
export function getActiveAttackStatusResponseBody1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetActiveAttackStatusResponseBody1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetActiveAttackStatusResponseBody1' from JSON`);
}
/** @internal */
export const GetActiveAttackStatusResponseBody$inboundSchema = z.union([
    z.lazy(() => GetActiveAttackStatusResponseBody2$inboundSchema),
    z.lazy(() => GetActiveAttackStatusResponseBody1$inboundSchema),
]);
/** @internal */
export const GetActiveAttackStatusResponseBody$outboundSchema = z.union([
    z.lazy(() => GetActiveAttackStatusResponseBody2$outboundSchema),
    z.lazy(() => GetActiveAttackStatusResponseBody1$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetActiveAttackStatusResponseBody$;
(function (GetActiveAttackStatusResponseBody$) {
    /** @deprecated use `GetActiveAttackStatusResponseBody$inboundSchema` instead. */
    GetActiveAttackStatusResponseBody$.inboundSchema = GetActiveAttackStatusResponseBody$inboundSchema;
    /** @deprecated use `GetActiveAttackStatusResponseBody$outboundSchema` instead. */
    GetActiveAttackStatusResponseBody$.outboundSchema = GetActiveAttackStatusResponseBody$outboundSchema;
})(GetActiveAttackStatusResponseBody$ || (GetActiveAttackStatusResponseBody$ = {}));
export function getActiveAttackStatusResponseBodyToJSON(getActiveAttackStatusResponseBody) {
    return JSON.stringify(GetActiveAttackStatusResponseBody$outboundSchema.parse(getActiveAttackStatusResponseBody));
}
export function getActiveAttackStatusResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetActiveAttackStatusResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetActiveAttackStatusResponseBody' from JSON`);
}
//# sourceMappingURL=getactiveattackstatusop.js.map