/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/**
 * The current state of the rolling release
 */
export const CompleteRollingReleaseState = {
    Active: "ACTIVE",
    Complete: "COMPLETE",
    Aborted: "ABORTED",
};
export const CompleteRollingReleaseTarget = {
    Staging: "staging",
    Production: "production",
};
export const CompleteRollingReleaseSource = {
    ApiTriggerGitDeploy: "api-trigger-git-deploy",
    Cli: "cli",
    CloneRepo: "clone/repo",
    Git: "git",
    Import: "import",
    ImportRepo: "import/repo",
    Redeploy: "redeploy",
    V0Web: "v0-web",
};
export const CompleteRollingReleaseReadyState = {
    Building: "BUILDING",
    Error: "ERROR",
    Initializing: "INITIALIZING",
    Queued: "QUEUED",
    Ready: "READY",
    Canceled: "CANCELED",
};
export const CompleteRollingReleaseRollingReleaseTarget = {
    Staging: "staging",
    Production: "production",
};
export const CompleteRollingReleaseRollingReleaseSource = {
    ApiTriggerGitDeploy: "api-trigger-git-deploy",
    Cli: "cli",
    CloneRepo: "clone/repo",
    Git: "git",
    Import: "import",
    ImportRepo: "import/repo",
    Redeploy: "redeploy",
    V0Web: "v0-web",
};
export const CompleteRollingReleaseRollingReleaseReadyState = {
    Building: "BUILDING",
    Error: "ERROR",
    Initializing: "INITIALIZING",
    Queued: "QUEUED",
    Ready: "READY",
    Canceled: "CANCELED",
};
/**
 * The advancement type of the rolling release
 */
export const CompleteRollingReleaseAdvancementType = {
    Automatic: "automatic",
    ManualApproval: "manual-approval",
};
/** @internal */
export const CompleteRollingReleaseRequestBody$inboundSchema = z.object({
    canaryDeploymentId: z.string(),
});
/** @internal */
export const CompleteRollingReleaseRequestBody$outboundSchema = z.object({
    canaryDeploymentId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompleteRollingReleaseRequestBody$;
(function (CompleteRollingReleaseRequestBody$) {
    /** @deprecated use `CompleteRollingReleaseRequestBody$inboundSchema` instead. */
    CompleteRollingReleaseRequestBody$.inboundSchema = CompleteRollingReleaseRequestBody$inboundSchema;
    /** @deprecated use `CompleteRollingReleaseRequestBody$outboundSchema` instead. */
    CompleteRollingReleaseRequestBody$.outboundSchema = CompleteRollingReleaseRequestBody$outboundSchema;
})(CompleteRollingReleaseRequestBody$ || (CompleteRollingReleaseRequestBody$ = {}));
export function completeRollingReleaseRequestBodyToJSON(completeRollingReleaseRequestBody) {
    return JSON.stringify(CompleteRollingReleaseRequestBody$outboundSchema.parse(completeRollingReleaseRequestBody));
}
export function completeRollingReleaseRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CompleteRollingReleaseRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CompleteRollingReleaseRequestBody' from JSON`);
}
/** @internal */
export const CompleteRollingReleaseRequest$inboundSchema = z.object({
    idOrName: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => CompleteRollingReleaseRequestBody$inboundSchema)
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const CompleteRollingReleaseRequest$outboundSchema = z.object({
    idOrName: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => CompleteRollingReleaseRequestBody$outboundSchema)
        .optional(),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompleteRollingReleaseRequest$;
(function (CompleteRollingReleaseRequest$) {
    /** @deprecated use `CompleteRollingReleaseRequest$inboundSchema` instead. */
    CompleteRollingReleaseRequest$.inboundSchema = CompleteRollingReleaseRequest$inboundSchema;
    /** @deprecated use `CompleteRollingReleaseRequest$outboundSchema` instead. */
    CompleteRollingReleaseRequest$.outboundSchema = CompleteRollingReleaseRequest$outboundSchema;
})(CompleteRollingReleaseRequest$ || (CompleteRollingReleaseRequest$ = {}));
export function completeRollingReleaseRequestToJSON(completeRollingReleaseRequest) {
    return JSON.stringify(CompleteRollingReleaseRequest$outboundSchema.parse(completeRollingReleaseRequest));
}
export function completeRollingReleaseRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CompleteRollingReleaseRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CompleteRollingReleaseRequest' from JSON`);
}
/** @internal */
export const CompleteRollingReleaseState$inboundSchema = z.nativeEnum(CompleteRollingReleaseState);
/** @internal */
export const CompleteRollingReleaseState$outboundSchema = CompleteRollingReleaseState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompleteRollingReleaseState$;
(function (CompleteRollingReleaseState$) {
    /** @deprecated use `CompleteRollingReleaseState$inboundSchema` instead. */
    CompleteRollingReleaseState$.inboundSchema = CompleteRollingReleaseState$inboundSchema;
    /** @deprecated use `CompleteRollingReleaseState$outboundSchema` instead. */
    CompleteRollingReleaseState$.outboundSchema = CompleteRollingReleaseState$outboundSchema;
})(CompleteRollingReleaseState$ || (CompleteRollingReleaseState$ = {}));
/** @internal */
export const CompleteRollingReleaseTarget$inboundSchema = z.nativeEnum(CompleteRollingReleaseTarget);
/** @internal */
export const CompleteRollingReleaseTarget$outboundSchema = CompleteRollingReleaseTarget$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompleteRollingReleaseTarget$;
(function (CompleteRollingReleaseTarget$) {
    /** @deprecated use `CompleteRollingReleaseTarget$inboundSchema` instead. */
    CompleteRollingReleaseTarget$.inboundSchema = CompleteRollingReleaseTarget$inboundSchema;
    /** @deprecated use `CompleteRollingReleaseTarget$outboundSchema` instead. */
    CompleteRollingReleaseTarget$.outboundSchema = CompleteRollingReleaseTarget$outboundSchema;
})(CompleteRollingReleaseTarget$ || (CompleteRollingReleaseTarget$ = {}));
/** @internal */
export const CompleteRollingReleaseSource$inboundSchema = z.nativeEnum(CompleteRollingReleaseSource);
/** @internal */
export const CompleteRollingReleaseSource$outboundSchema = CompleteRollingReleaseSource$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompleteRollingReleaseSource$;
(function (CompleteRollingReleaseSource$) {
    /** @deprecated use `CompleteRollingReleaseSource$inboundSchema` instead. */
    CompleteRollingReleaseSource$.inboundSchema = CompleteRollingReleaseSource$inboundSchema;
    /** @deprecated use `CompleteRollingReleaseSource$outboundSchema` instead. */
    CompleteRollingReleaseSource$.outboundSchema = CompleteRollingReleaseSource$outboundSchema;
})(CompleteRollingReleaseSource$ || (CompleteRollingReleaseSource$ = {}));
/** @internal */
export const CompleteRollingReleaseReadyState$inboundSchema = z.nativeEnum(CompleteRollingReleaseReadyState);
/** @internal */
export const CompleteRollingReleaseReadyState$outboundSchema = CompleteRollingReleaseReadyState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompleteRollingReleaseReadyState$;
(function (CompleteRollingReleaseReadyState$) {
    /** @deprecated use `CompleteRollingReleaseReadyState$inboundSchema` instead. */
    CompleteRollingReleaseReadyState$.inboundSchema = CompleteRollingReleaseReadyState$inboundSchema;
    /** @deprecated use `CompleteRollingReleaseReadyState$outboundSchema` instead. */
    CompleteRollingReleaseReadyState$.outboundSchema = CompleteRollingReleaseReadyState$outboundSchema;
})(CompleteRollingReleaseReadyState$ || (CompleteRollingReleaseReadyState$ = {}));
/** @internal */
export const CompleteRollingReleaseCurrentDeployment$inboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    url: z.string(),
    target: z.nullable(CompleteRollingReleaseTarget$inboundSchema).optional(),
    source: CompleteRollingReleaseSource$inboundSchema.optional(),
    createdAt: z.number(),
    readyState: CompleteRollingReleaseReadyState$inboundSchema,
    readyStateAt: z.number().optional(),
});
/** @internal */
export const CompleteRollingReleaseCurrentDeployment$outboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    url: z.string(),
    target: z.nullable(CompleteRollingReleaseTarget$outboundSchema).optional(),
    source: CompleteRollingReleaseSource$outboundSchema.optional(),
    createdAt: z.number(),
    readyState: CompleteRollingReleaseReadyState$outboundSchema,
    readyStateAt: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompleteRollingReleaseCurrentDeployment$;
(function (CompleteRollingReleaseCurrentDeployment$) {
    /** @deprecated use `CompleteRollingReleaseCurrentDeployment$inboundSchema` instead. */
    CompleteRollingReleaseCurrentDeployment$.inboundSchema = CompleteRollingReleaseCurrentDeployment$inboundSchema;
    /** @deprecated use `CompleteRollingReleaseCurrentDeployment$outboundSchema` instead. */
    CompleteRollingReleaseCurrentDeployment$.outboundSchema = CompleteRollingReleaseCurrentDeployment$outboundSchema;
})(CompleteRollingReleaseCurrentDeployment$ || (CompleteRollingReleaseCurrentDeployment$ = {}));
export function completeRollingReleaseCurrentDeploymentToJSON(completeRollingReleaseCurrentDeployment) {
    return JSON.stringify(CompleteRollingReleaseCurrentDeployment$outboundSchema.parse(completeRollingReleaseCurrentDeployment));
}
export function completeRollingReleaseCurrentDeploymentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CompleteRollingReleaseCurrentDeployment$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CompleteRollingReleaseCurrentDeployment' from JSON`);
}
/** @internal */
export const CompleteRollingReleaseRollingReleaseTarget$inboundSchema = z
    .nativeEnum(CompleteRollingReleaseRollingReleaseTarget);
/** @internal */
export const CompleteRollingReleaseRollingReleaseTarget$outboundSchema = CompleteRollingReleaseRollingReleaseTarget$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompleteRollingReleaseRollingReleaseTarget$;
(function (CompleteRollingReleaseRollingReleaseTarget$) {
    /** @deprecated use `CompleteRollingReleaseRollingReleaseTarget$inboundSchema` instead. */
    CompleteRollingReleaseRollingReleaseTarget$.inboundSchema = CompleteRollingReleaseRollingReleaseTarget$inboundSchema;
    /** @deprecated use `CompleteRollingReleaseRollingReleaseTarget$outboundSchema` instead. */
    CompleteRollingReleaseRollingReleaseTarget$.outboundSchema = CompleteRollingReleaseRollingReleaseTarget$outboundSchema;
})(CompleteRollingReleaseRollingReleaseTarget$ || (CompleteRollingReleaseRollingReleaseTarget$ = {}));
/** @internal */
export const CompleteRollingReleaseRollingReleaseSource$inboundSchema = z
    .nativeEnum(CompleteRollingReleaseRollingReleaseSource);
/** @internal */
export const CompleteRollingReleaseRollingReleaseSource$outboundSchema = CompleteRollingReleaseRollingReleaseSource$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompleteRollingReleaseRollingReleaseSource$;
(function (CompleteRollingReleaseRollingReleaseSource$) {
    /** @deprecated use `CompleteRollingReleaseRollingReleaseSource$inboundSchema` instead. */
    CompleteRollingReleaseRollingReleaseSource$.inboundSchema = CompleteRollingReleaseRollingReleaseSource$inboundSchema;
    /** @deprecated use `CompleteRollingReleaseRollingReleaseSource$outboundSchema` instead. */
    CompleteRollingReleaseRollingReleaseSource$.outboundSchema = CompleteRollingReleaseRollingReleaseSource$outboundSchema;
})(CompleteRollingReleaseRollingReleaseSource$ || (CompleteRollingReleaseRollingReleaseSource$ = {}));
/** @internal */
export const CompleteRollingReleaseRollingReleaseReadyState$inboundSchema = z
    .nativeEnum(CompleteRollingReleaseRollingReleaseReadyState);
/** @internal */
export const CompleteRollingReleaseRollingReleaseReadyState$outboundSchema = CompleteRollingReleaseRollingReleaseReadyState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompleteRollingReleaseRollingReleaseReadyState$;
(function (CompleteRollingReleaseRollingReleaseReadyState$) {
    /** @deprecated use `CompleteRollingReleaseRollingReleaseReadyState$inboundSchema` instead. */
    CompleteRollingReleaseRollingReleaseReadyState$.inboundSchema = CompleteRollingReleaseRollingReleaseReadyState$inboundSchema;
    /** @deprecated use `CompleteRollingReleaseRollingReleaseReadyState$outboundSchema` instead. */
    CompleteRollingReleaseRollingReleaseReadyState$.outboundSchema = CompleteRollingReleaseRollingReleaseReadyState$outboundSchema;
})(CompleteRollingReleaseRollingReleaseReadyState$ || (CompleteRollingReleaseRollingReleaseReadyState$ = {}));
/** @internal */
export const CompleteRollingReleaseCanaryDeployment$inboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    url: z.string(),
    target: z.nullable(CompleteRollingReleaseRollingReleaseTarget$inboundSchema)
        .optional(),
    source: CompleteRollingReleaseRollingReleaseSource$inboundSchema.optional(),
    createdAt: z.number(),
    readyState: CompleteRollingReleaseRollingReleaseReadyState$inboundSchema,
    readyStateAt: z.number().optional(),
});
/** @internal */
export const CompleteRollingReleaseCanaryDeployment$outboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    url: z.string(),
    target: z.nullable(CompleteRollingReleaseRollingReleaseTarget$outboundSchema)
        .optional(),
    source: CompleteRollingReleaseRollingReleaseSource$outboundSchema.optional(),
    createdAt: z.number(),
    readyState: CompleteRollingReleaseRollingReleaseReadyState$outboundSchema,
    readyStateAt: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompleteRollingReleaseCanaryDeployment$;
(function (CompleteRollingReleaseCanaryDeployment$) {
    /** @deprecated use `CompleteRollingReleaseCanaryDeployment$inboundSchema` instead. */
    CompleteRollingReleaseCanaryDeployment$.inboundSchema = CompleteRollingReleaseCanaryDeployment$inboundSchema;
    /** @deprecated use `CompleteRollingReleaseCanaryDeployment$outboundSchema` instead. */
    CompleteRollingReleaseCanaryDeployment$.outboundSchema = CompleteRollingReleaseCanaryDeployment$outboundSchema;
})(CompleteRollingReleaseCanaryDeployment$ || (CompleteRollingReleaseCanaryDeployment$ = {}));
export function completeRollingReleaseCanaryDeploymentToJSON(completeRollingReleaseCanaryDeployment) {
    return JSON.stringify(CompleteRollingReleaseCanaryDeployment$outboundSchema.parse(completeRollingReleaseCanaryDeployment));
}
export function completeRollingReleaseCanaryDeploymentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CompleteRollingReleaseCanaryDeployment$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CompleteRollingReleaseCanaryDeployment' from JSON`);
}
/** @internal */
export const CompleteRollingReleaseAdvancementType$inboundSchema = z.nativeEnum(CompleteRollingReleaseAdvancementType);
/** @internal */
export const CompleteRollingReleaseAdvancementType$outboundSchema = CompleteRollingReleaseAdvancementType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompleteRollingReleaseAdvancementType$;
(function (CompleteRollingReleaseAdvancementType$) {
    /** @deprecated use `CompleteRollingReleaseAdvancementType$inboundSchema` instead. */
    CompleteRollingReleaseAdvancementType$.inboundSchema = CompleteRollingReleaseAdvancementType$inboundSchema;
    /** @deprecated use `CompleteRollingReleaseAdvancementType$outboundSchema` instead. */
    CompleteRollingReleaseAdvancementType$.outboundSchema = CompleteRollingReleaseAdvancementType$outboundSchema;
})(CompleteRollingReleaseAdvancementType$ || (CompleteRollingReleaseAdvancementType$ = {}));
/** @internal */
export const CompleteRollingReleaseStages$inboundSchema = z.object({
    index: z.number(),
    isFinalStage: z.boolean(),
    targetPercentage: z.number(),
    requireApproval: z.boolean(),
    duration: z.nullable(z.number()),
});
/** @internal */
export const CompleteRollingReleaseStages$outboundSchema = z.object({
    index: z.number(),
    isFinalStage: z.boolean(),
    targetPercentage: z.number(),
    requireApproval: z.boolean(),
    duration: z.nullable(z.number()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompleteRollingReleaseStages$;
(function (CompleteRollingReleaseStages$) {
    /** @deprecated use `CompleteRollingReleaseStages$inboundSchema` instead. */
    CompleteRollingReleaseStages$.inboundSchema = CompleteRollingReleaseStages$inboundSchema;
    /** @deprecated use `CompleteRollingReleaseStages$outboundSchema` instead. */
    CompleteRollingReleaseStages$.outboundSchema = CompleteRollingReleaseStages$outboundSchema;
})(CompleteRollingReleaseStages$ || (CompleteRollingReleaseStages$ = {}));
export function completeRollingReleaseStagesToJSON(completeRollingReleaseStages) {
    return JSON.stringify(CompleteRollingReleaseStages$outboundSchema.parse(completeRollingReleaseStages));
}
export function completeRollingReleaseStagesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CompleteRollingReleaseStages$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CompleteRollingReleaseStages' from JSON`);
}
/** @internal */
export const CompleteRollingReleaseActiveStage$inboundSchema = z.object({
    index: z.number(),
    isFinalStage: z.boolean(),
    targetPercentage: z.number(),
    requireApproval: z.boolean(),
    duration: z.nullable(z.number()),
});
/** @internal */
export const CompleteRollingReleaseActiveStage$outboundSchema = z.object({
    index: z.number(),
    isFinalStage: z.boolean(),
    targetPercentage: z.number(),
    requireApproval: z.boolean(),
    duration: z.nullable(z.number()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompleteRollingReleaseActiveStage$;
(function (CompleteRollingReleaseActiveStage$) {
    /** @deprecated use `CompleteRollingReleaseActiveStage$inboundSchema` instead. */
    CompleteRollingReleaseActiveStage$.inboundSchema = CompleteRollingReleaseActiveStage$inboundSchema;
    /** @deprecated use `CompleteRollingReleaseActiveStage$outboundSchema` instead. */
    CompleteRollingReleaseActiveStage$.outboundSchema = CompleteRollingReleaseActiveStage$outboundSchema;
})(CompleteRollingReleaseActiveStage$ || (CompleteRollingReleaseActiveStage$ = {}));
export function completeRollingReleaseActiveStageToJSON(completeRollingReleaseActiveStage) {
    return JSON.stringify(CompleteRollingReleaseActiveStage$outboundSchema.parse(completeRollingReleaseActiveStage));
}
export function completeRollingReleaseActiveStageFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CompleteRollingReleaseActiveStage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CompleteRollingReleaseActiveStage' from JSON`);
}
/** @internal */
export const CompleteRollingReleaseNextStage$inboundSchema = z.object({
    index: z.number(),
    isFinalStage: z.boolean(),
    targetPercentage: z.number(),
    requireApproval: z.boolean(),
    duration: z.nullable(z.number()),
});
/** @internal */
export const CompleteRollingReleaseNextStage$outboundSchema = z.object({
    index: z.number(),
    isFinalStage: z.boolean(),
    targetPercentage: z.number(),
    requireApproval: z.boolean(),
    duration: z.nullable(z.number()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompleteRollingReleaseNextStage$;
(function (CompleteRollingReleaseNextStage$) {
    /** @deprecated use `CompleteRollingReleaseNextStage$inboundSchema` instead. */
    CompleteRollingReleaseNextStage$.inboundSchema = CompleteRollingReleaseNextStage$inboundSchema;
    /** @deprecated use `CompleteRollingReleaseNextStage$outboundSchema` instead. */
    CompleteRollingReleaseNextStage$.outboundSchema = CompleteRollingReleaseNextStage$outboundSchema;
})(CompleteRollingReleaseNextStage$ || (CompleteRollingReleaseNextStage$ = {}));
export function completeRollingReleaseNextStageToJSON(completeRollingReleaseNextStage) {
    return JSON.stringify(CompleteRollingReleaseNextStage$outboundSchema.parse(completeRollingReleaseNextStage));
}
export function completeRollingReleaseNextStageFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CompleteRollingReleaseNextStage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CompleteRollingReleaseNextStage' from JSON`);
}
/** @internal */
export const CompleteRollingReleaseRollingRelease$inboundSchema = z.object({
    state: CompleteRollingReleaseState$inboundSchema,
    currentDeployment: z.nullable(z.lazy(() => CompleteRollingReleaseCurrentDeployment$inboundSchema)),
    canaryDeployment: z.nullable(z.lazy(() => CompleteRollingReleaseCanaryDeployment$inboundSchema)),
    queuedDeploymentId: z.nullable(z.string()),
    advancementType: CompleteRollingReleaseAdvancementType$inboundSchema,
    stages: z.array(z.lazy(() => CompleteRollingReleaseStages$inboundSchema)),
    activeStage: z.nullable(z.lazy(() => CompleteRollingReleaseActiveStage$inboundSchema)),
    nextStage: z.nullable(z.lazy(() => CompleteRollingReleaseNextStage$inboundSchema)),
    startedAt: z.number(),
    updatedAt: z.number(),
});
/** @internal */
export const CompleteRollingReleaseRollingRelease$outboundSchema = z.object({
    state: CompleteRollingReleaseState$outboundSchema,
    currentDeployment: z.nullable(z.lazy(() => CompleteRollingReleaseCurrentDeployment$outboundSchema)),
    canaryDeployment: z.nullable(z.lazy(() => CompleteRollingReleaseCanaryDeployment$outboundSchema)),
    queuedDeploymentId: z.nullable(z.string()),
    advancementType: CompleteRollingReleaseAdvancementType$outboundSchema,
    stages: z.array(z.lazy(() => CompleteRollingReleaseStages$outboundSchema)),
    activeStage: z.nullable(z.lazy(() => CompleteRollingReleaseActiveStage$outboundSchema)),
    nextStage: z.nullable(z.lazy(() => CompleteRollingReleaseNextStage$outboundSchema)),
    startedAt: z.number(),
    updatedAt: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompleteRollingReleaseRollingRelease$;
(function (CompleteRollingReleaseRollingRelease$) {
    /** @deprecated use `CompleteRollingReleaseRollingRelease$inboundSchema` instead. */
    CompleteRollingReleaseRollingRelease$.inboundSchema = CompleteRollingReleaseRollingRelease$inboundSchema;
    /** @deprecated use `CompleteRollingReleaseRollingRelease$outboundSchema` instead. */
    CompleteRollingReleaseRollingRelease$.outboundSchema = CompleteRollingReleaseRollingRelease$outboundSchema;
})(CompleteRollingReleaseRollingRelease$ || (CompleteRollingReleaseRollingRelease$ = {}));
export function completeRollingReleaseRollingReleaseToJSON(completeRollingReleaseRollingRelease) {
    return JSON.stringify(CompleteRollingReleaseRollingRelease$outboundSchema.parse(completeRollingReleaseRollingRelease));
}
export function completeRollingReleaseRollingReleaseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CompleteRollingReleaseRollingRelease$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CompleteRollingReleaseRollingRelease' from JSON`);
}
/** @internal */
export const CompleteRollingReleaseResponseBody$inboundSchema = z.object({
    rollingRelease: z.nullable(z.lazy(() => CompleteRollingReleaseRollingRelease$inboundSchema)),
});
/** @internal */
export const CompleteRollingReleaseResponseBody$outboundSchema = z.object({
    rollingRelease: z.nullable(z.lazy(() => CompleteRollingReleaseRollingRelease$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CompleteRollingReleaseResponseBody$;
(function (CompleteRollingReleaseResponseBody$) {
    /** @deprecated use `CompleteRollingReleaseResponseBody$inboundSchema` instead. */
    CompleteRollingReleaseResponseBody$.inboundSchema = CompleteRollingReleaseResponseBody$inboundSchema;
    /** @deprecated use `CompleteRollingReleaseResponseBody$outboundSchema` instead. */
    CompleteRollingReleaseResponseBody$.outboundSchema = CompleteRollingReleaseResponseBody$outboundSchema;
})(CompleteRollingReleaseResponseBody$ || (CompleteRollingReleaseResponseBody$ = {}));
export function completeRollingReleaseResponseBodyToJSON(completeRollingReleaseResponseBody) {
    return JSON.stringify(CompleteRollingReleaseResponseBody$outboundSchema.parse(completeRollingReleaseResponseBody));
}
export function completeRollingReleaseResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CompleteRollingReleaseResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CompleteRollingReleaseResponseBody' from JSON`);
}
//# sourceMappingURL=completerollingreleaseop.js.map