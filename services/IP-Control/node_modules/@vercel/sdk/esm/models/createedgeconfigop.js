/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
export const CreateEdgeConfigPurposeType = {
    Experimentation: "experimentation",
};
export const PurposeType = {
    Flags: "flags",
};
/** @internal */
export const CreateEdgeConfigRequestBody$inboundSchema = z.object({
    slug: z.string(),
    items: z.record(z.any()).optional(),
});
/** @internal */
export const CreateEdgeConfigRequestBody$outboundSchema = z.object({
    slug: z.string(),
    items: z.record(z.any()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateEdgeConfigRequestBody$;
(function (CreateEdgeConfigRequestBody$) {
    /** @deprecated use `CreateEdgeConfigRequestBody$inboundSchema` instead. */
    CreateEdgeConfigRequestBody$.inboundSchema = CreateEdgeConfigRequestBody$inboundSchema;
    /** @deprecated use `CreateEdgeConfigRequestBody$outboundSchema` instead. */
    CreateEdgeConfigRequestBody$.outboundSchema = CreateEdgeConfigRequestBody$outboundSchema;
})(CreateEdgeConfigRequestBody$ || (CreateEdgeConfigRequestBody$ = {}));
export function createEdgeConfigRequestBodyToJSON(createEdgeConfigRequestBody) {
    return JSON.stringify(CreateEdgeConfigRequestBody$outboundSchema.parse(createEdgeConfigRequestBody));
}
export function createEdgeConfigRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateEdgeConfigRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateEdgeConfigRequestBody' from JSON`);
}
/** @internal */
export const CreateEdgeConfigRequest$inboundSchema = z.object({
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => CreateEdgeConfigRequestBody$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const CreateEdgeConfigRequest$outboundSchema = z.object({
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => CreateEdgeConfigRequestBody$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateEdgeConfigRequest$;
(function (CreateEdgeConfigRequest$) {
    /** @deprecated use `CreateEdgeConfigRequest$inboundSchema` instead. */
    CreateEdgeConfigRequest$.inboundSchema = CreateEdgeConfigRequest$inboundSchema;
    /** @deprecated use `CreateEdgeConfigRequest$outboundSchema` instead. */
    CreateEdgeConfigRequest$.outboundSchema = CreateEdgeConfigRequest$outboundSchema;
})(CreateEdgeConfigRequest$ || (CreateEdgeConfigRequest$ = {}));
export function createEdgeConfigRequestToJSON(createEdgeConfigRequest) {
    return JSON.stringify(CreateEdgeConfigRequest$outboundSchema.parse(createEdgeConfigRequest));
}
export function createEdgeConfigRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateEdgeConfigRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateEdgeConfigRequest' from JSON`);
}
/** @internal */
export const CreateEdgeConfigTransfer$inboundSchema = z.object({
    fromAccountId: z.string(),
    startedAt: z.number(),
    doneAt: z.nullable(z.number()),
});
/** @internal */
export const CreateEdgeConfigTransfer$outboundSchema = z.object({
    fromAccountId: z.string(),
    startedAt: z.number(),
    doneAt: z.nullable(z.number()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateEdgeConfigTransfer$;
(function (CreateEdgeConfigTransfer$) {
    /** @deprecated use `CreateEdgeConfigTransfer$inboundSchema` instead. */
    CreateEdgeConfigTransfer$.inboundSchema = CreateEdgeConfigTransfer$inboundSchema;
    /** @deprecated use `CreateEdgeConfigTransfer$outboundSchema` instead. */
    CreateEdgeConfigTransfer$.outboundSchema = CreateEdgeConfigTransfer$outboundSchema;
})(CreateEdgeConfigTransfer$ || (CreateEdgeConfigTransfer$ = {}));
export function createEdgeConfigTransferToJSON(createEdgeConfigTransfer) {
    return JSON.stringify(CreateEdgeConfigTransfer$outboundSchema.parse(createEdgeConfigTransfer));
}
export function createEdgeConfigTransferFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateEdgeConfigTransfer$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateEdgeConfigTransfer' from JSON`);
}
/** @internal */
export const CreateEdgeConfigSchema$inboundSchema = z.object({});
/** @internal */
export const CreateEdgeConfigSchema$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateEdgeConfigSchema$;
(function (CreateEdgeConfigSchema$) {
    /** @deprecated use `CreateEdgeConfigSchema$inboundSchema` instead. */
    CreateEdgeConfigSchema$.inboundSchema = CreateEdgeConfigSchema$inboundSchema;
    /** @deprecated use `CreateEdgeConfigSchema$outboundSchema` instead. */
    CreateEdgeConfigSchema$.outboundSchema = CreateEdgeConfigSchema$outboundSchema;
})(CreateEdgeConfigSchema$ || (CreateEdgeConfigSchema$ = {}));
export function createEdgeConfigSchemaToJSON(createEdgeConfigSchema) {
    return JSON.stringify(CreateEdgeConfigSchema$outboundSchema.parse(createEdgeConfigSchema));
}
export function createEdgeConfigSchemaFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateEdgeConfigSchema$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateEdgeConfigSchema' from JSON`);
}
/** @internal */
export const CreateEdgeConfigPurposeType$inboundSchema = z.nativeEnum(CreateEdgeConfigPurposeType);
/** @internal */
export const CreateEdgeConfigPurposeType$outboundSchema = CreateEdgeConfigPurposeType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateEdgeConfigPurposeType$;
(function (CreateEdgeConfigPurposeType$) {
    /** @deprecated use `CreateEdgeConfigPurposeType$inboundSchema` instead. */
    CreateEdgeConfigPurposeType$.inboundSchema = CreateEdgeConfigPurposeType$inboundSchema;
    /** @deprecated use `CreateEdgeConfigPurposeType$outboundSchema` instead. */
    CreateEdgeConfigPurposeType$.outboundSchema = CreateEdgeConfigPurposeType$outboundSchema;
})(CreateEdgeConfigPurposeType$ || (CreateEdgeConfigPurposeType$ = {}));
/** @internal */
export const Purpose2$inboundSchema = z.object({
    type: CreateEdgeConfigPurposeType$inboundSchema,
    resourceId: z.string(),
});
/** @internal */
export const Purpose2$outboundSchema = z.object({
    type: CreateEdgeConfigPurposeType$outboundSchema,
    resourceId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Purpose2$;
(function (Purpose2$) {
    /** @deprecated use `Purpose2$inboundSchema` instead. */
    Purpose2$.inboundSchema = Purpose2$inboundSchema;
    /** @deprecated use `Purpose2$outboundSchema` instead. */
    Purpose2$.outboundSchema = Purpose2$outboundSchema;
})(Purpose2$ || (Purpose2$ = {}));
export function purpose2ToJSON(purpose2) {
    return JSON.stringify(Purpose2$outboundSchema.parse(purpose2));
}
export function purpose2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Purpose2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Purpose2' from JSON`);
}
/** @internal */
export const PurposeType$inboundSchema = z
    .nativeEnum(PurposeType);
/** @internal */
export const PurposeType$outboundSchema = PurposeType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PurposeType$;
(function (PurposeType$) {
    /** @deprecated use `PurposeType$inboundSchema` instead. */
    PurposeType$.inboundSchema = PurposeType$inboundSchema;
    /** @deprecated use `PurposeType$outboundSchema` instead. */
    PurposeType$.outboundSchema = PurposeType$outboundSchema;
})(PurposeType$ || (PurposeType$ = {}));
/** @internal */
export const Purpose1$inboundSchema = z.object({
    type: PurposeType$inboundSchema,
    projectId: z.string(),
});
/** @internal */
export const Purpose1$outboundSchema = z.object({
    type: PurposeType$outboundSchema,
    projectId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Purpose1$;
(function (Purpose1$) {
    /** @deprecated use `Purpose1$inboundSchema` instead. */
    Purpose1$.inboundSchema = Purpose1$inboundSchema;
    /** @deprecated use `Purpose1$outboundSchema` instead. */
    Purpose1$.outboundSchema = Purpose1$outboundSchema;
})(Purpose1$ || (Purpose1$ = {}));
export function purpose1ToJSON(purpose1) {
    return JSON.stringify(Purpose1$outboundSchema.parse(purpose1));
}
export function purpose1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Purpose1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Purpose1' from JSON`);
}
/** @internal */
export const CreateEdgeConfigPurpose$inboundSchema = z.union([
    z.lazy(() => Purpose1$inboundSchema),
    z.lazy(() => Purpose2$inboundSchema),
]);
/** @internal */
export const CreateEdgeConfigPurpose$outboundSchema = z.union([
    z.lazy(() => Purpose1$outboundSchema),
    z.lazy(() => Purpose2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateEdgeConfigPurpose$;
(function (CreateEdgeConfigPurpose$) {
    /** @deprecated use `CreateEdgeConfigPurpose$inboundSchema` instead. */
    CreateEdgeConfigPurpose$.inboundSchema = CreateEdgeConfigPurpose$inboundSchema;
    /** @deprecated use `CreateEdgeConfigPurpose$outboundSchema` instead. */
    CreateEdgeConfigPurpose$.outboundSchema = CreateEdgeConfigPurpose$outboundSchema;
})(CreateEdgeConfigPurpose$ || (CreateEdgeConfigPurpose$ = {}));
export function createEdgeConfigPurposeToJSON(createEdgeConfigPurpose) {
    return JSON.stringify(CreateEdgeConfigPurpose$outboundSchema.parse(createEdgeConfigPurpose));
}
export function createEdgeConfigPurposeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateEdgeConfigPurpose$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateEdgeConfigPurpose' from JSON`);
}
/** @internal */
export const CreateEdgeConfigResponseBody$inboundSchema = z.object({
    createdAt: z.number(),
    updatedAt: z.number(),
    deletedAt: z.number().optional(),
    id: z.string(),
    slug: z.string(),
    ownerId: z.string(),
    digest: z.string(),
    transfer: z.lazy(() => CreateEdgeConfigTransfer$inboundSchema).optional(),
    schema: z.lazy(() => CreateEdgeConfigSchema$inboundSchema).optional(),
    purpose: z.union([
        z.lazy(() => Purpose1$inboundSchema),
        z.lazy(() => Purpose2$inboundSchema),
    ]).optional(),
    syncedToDynamoAt: z.number().optional(),
    sizeInBytes: z.number(),
    itemCount: z.number(),
});
/** @internal */
export const CreateEdgeConfigResponseBody$outboundSchema = z.object({
    createdAt: z.number(),
    updatedAt: z.number(),
    deletedAt: z.number().optional(),
    id: z.string(),
    slug: z.string(),
    ownerId: z.string(),
    digest: z.string(),
    transfer: z.lazy(() => CreateEdgeConfigTransfer$outboundSchema).optional(),
    schema: z.lazy(() => CreateEdgeConfigSchema$outboundSchema).optional(),
    purpose: z.union([
        z.lazy(() => Purpose1$outboundSchema),
        z.lazy(() => Purpose2$outboundSchema),
    ]).optional(),
    syncedToDynamoAt: z.number().optional(),
    sizeInBytes: z.number(),
    itemCount: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateEdgeConfigResponseBody$;
(function (CreateEdgeConfigResponseBody$) {
    /** @deprecated use `CreateEdgeConfigResponseBody$inboundSchema` instead. */
    CreateEdgeConfigResponseBody$.inboundSchema = CreateEdgeConfigResponseBody$inboundSchema;
    /** @deprecated use `CreateEdgeConfigResponseBody$outboundSchema` instead. */
    CreateEdgeConfigResponseBody$.outboundSchema = CreateEdgeConfigResponseBody$outboundSchema;
})(CreateEdgeConfigResponseBody$ || (CreateEdgeConfigResponseBody$ = {}));
export function createEdgeConfigResponseBodyToJSON(createEdgeConfigResponseBody) {
    return JSON.stringify(CreateEdgeConfigResponseBody$outboundSchema.parse(createEdgeConfigResponseBody));
}
export function createEdgeConfigResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateEdgeConfigResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateEdgeConfigResponseBody' from JSON`);
}
//# sourceMappingURL=createedgeconfigop.js.map