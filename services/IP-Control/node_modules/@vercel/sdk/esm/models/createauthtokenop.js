/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { AuthToken$inboundSchema, AuthToken$outboundSchema, } from "./authtoken.js";
/** @internal */
export const CreateAuthTokenRequestBody$inboundSchema = z.object({
    name: z.string(),
    expiresAt: z.number().optional(),
});
/** @internal */
export const CreateAuthTokenRequestBody$outboundSchema = z.object({
    name: z.string(),
    expiresAt: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateAuthTokenRequestBody$;
(function (CreateAuthTokenRequestBody$) {
    /** @deprecated use `CreateAuthTokenRequestBody$inboundSchema` instead. */
    CreateAuthTokenRequestBody$.inboundSchema = CreateAuthTokenRequestBody$inboundSchema;
    /** @deprecated use `CreateAuthTokenRequestBody$outboundSchema` instead. */
    CreateAuthTokenRequestBody$.outboundSchema = CreateAuthTokenRequestBody$outboundSchema;
})(CreateAuthTokenRequestBody$ || (CreateAuthTokenRequestBody$ = {}));
export function createAuthTokenRequestBodyToJSON(createAuthTokenRequestBody) {
    return JSON.stringify(CreateAuthTokenRequestBody$outboundSchema.parse(createAuthTokenRequestBody));
}
export function createAuthTokenRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateAuthTokenRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateAuthTokenRequestBody' from JSON`);
}
/** @internal */
export const CreateAuthTokenRequest$inboundSchema = z.object({
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => CreateAuthTokenRequestBody$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const CreateAuthTokenRequest$outboundSchema = z.object({
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => CreateAuthTokenRequestBody$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateAuthTokenRequest$;
(function (CreateAuthTokenRequest$) {
    /** @deprecated use `CreateAuthTokenRequest$inboundSchema` instead. */
    CreateAuthTokenRequest$.inboundSchema = CreateAuthTokenRequest$inboundSchema;
    /** @deprecated use `CreateAuthTokenRequest$outboundSchema` instead. */
    CreateAuthTokenRequest$.outboundSchema = CreateAuthTokenRequest$outboundSchema;
})(CreateAuthTokenRequest$ || (CreateAuthTokenRequest$ = {}));
export function createAuthTokenRequestToJSON(createAuthTokenRequest) {
    return JSON.stringify(CreateAuthTokenRequest$outboundSchema.parse(createAuthTokenRequest));
}
export function createAuthTokenRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateAuthTokenRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateAuthTokenRequest' from JSON`);
}
/** @internal */
export const CreateAuthTokenResponseBody$inboundSchema = z.object({
    token: AuthToken$inboundSchema,
    bearerToken: z.string(),
});
/** @internal */
export const CreateAuthTokenResponseBody$outboundSchema = z.object({
    token: AuthToken$outboundSchema,
    bearerToken: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateAuthTokenResponseBody$;
(function (CreateAuthTokenResponseBody$) {
    /** @deprecated use `CreateAuthTokenResponseBody$inboundSchema` instead. */
    CreateAuthTokenResponseBody$.inboundSchema = CreateAuthTokenResponseBody$inboundSchema;
    /** @deprecated use `CreateAuthTokenResponseBody$outboundSchema` instead. */
    CreateAuthTokenResponseBody$.outboundSchema = CreateAuthTokenResponseBody$outboundSchema;
})(CreateAuthTokenResponseBody$ || (CreateAuthTokenResponseBody$ = {}));
export function createAuthTokenResponseBodyToJSON(createAuthTokenResponseBody) {
    return JSON.stringify(CreateAuthTokenResponseBody$outboundSchema.parse(createAuthTokenResponseBody));
}
export function createAuthTokenResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateAuthTokenResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateAuthTokenResponseBody' from JSON`);
}
//# sourceMappingURL=createauthtokenop.js.map