/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { FlagJSONValue$inboundSchema, FlagJSONValue$outboundSchema, } from "./flagjsonvalue.js";
export const GetDeploymentResponseBodyDeploymentsReadyState = {
    Building: "BUILDING",
    Error: "ERROR",
    Initializing: "INITIALIZING",
    Ready: "READY",
};
export const GetDeploymentResponseBodyStatus = {
    Queued: "QUEUED",
    Building: "BUILDING",
    Error: "ERROR",
    Initializing: "INITIALIZING",
    Ready: "READY",
    Canceled: "CANCELED",
};
/**
 * The type of environment (production, preview, or development)
 */
export const GetDeploymentCustomEnvironmentType = {
    Production: "production",
    Preview: "preview",
    Development: "development",
};
/**
 * The type of matching to perform
 */
export const GetDeploymentCustomEnvironmentDeploymentsResponseType = {
    EndsWith: "endsWith",
    StartsWith: "startsWith",
    Equals: "equals",
};
export const ResponseBodyOomReport = {
    OutOfMemory: "out-of-memory",
};
export const GetDeploymentResponseBodyReadyState = {
    Queued: "QUEUED",
    Building: "BUILDING",
    Error: "ERROR",
    Initializing: "INITIALIZING",
    Ready: "READY",
    Canceled: "CANCELED",
};
export const GetDeploymentResponseBodyDeploymentsType = {
    Lambdas: "LAMBDAS",
};
export const GetDeploymentResponseBodyChecksState = {
    Registered: "registered",
    Running: "running",
    Completed: "completed",
};
export const GetDeploymentResponseBodyChecksConclusion = {
    Succeeded: "succeeded",
    Failed: "failed",
    Skipped: "skipped",
    Canceled: "canceled",
};
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody215Type = {
    Bitbucket: "bitbucket",
};
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody214Type = {
    Gitlab: "gitlab",
};
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody213Type = {
    GithubLimited: "github-limited",
};
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type = {
    GithubCustomHost: "github-custom-host",
};
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type = {
    Github: "github",
};
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type = {
    Custom: "custom",
};
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type = {
    Bitbucket: "bitbucket",
};
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type = {
    Bitbucket: "bitbucket",
};
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type = {
    Gitlab: "gitlab",
};
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type = {
    GithubLimited: "github-limited",
};
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type = {
    GithubLimited: "github-limited",
};
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type = {
    GithubCustomHost: "github-custom-host",
};
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type = {
    GithubCustomHost: "github-custom-host",
};
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type = {
    Github: "github",
};
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type = {
    Github: "github",
};
/**
 * If set it overrides the `projectSettings.nodeVersion` for this deployment.
 */
export const GetDeploymentResponseBodyNodeVersion = {
    TwentyTwoDotX: "22.x",
    TwentyDotX: "20.x",
    EighteenDotX: "18.x",
    SixteenDotX: "16.x",
    FourteenDotX: "14.x",
    TwelveDotX: "12.x",
    TenDotX: "10.x",
    EightDot10DotX: "8.10.x",
};
/**
 * Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - ROLLING: in the process of having production traffic gradually transitioned. - PROMOTED: has seen production traffic
 */
export const GetDeploymentResponseBodyReadySubstate = {
    Staged: "STAGED",
    Rolling: "ROLLING",
    Promoted: "PROMOTED",
};
export const GetDeploymentResponseBodySource = {
    ApiTriggerGitDeploy: "api-trigger-git-deploy",
    Cli: "cli",
    CloneRepo: "clone/repo",
    Git: "git",
    Import: "import",
    ImportRepo: "import/repo",
    Redeploy: "redeploy",
    V0Web: "v0-web",
};
export const GetDeploymentResponseBodyTarget = {
    Staging: "staging",
    Production: "production",
};
export const ResponseBodyFramework = {
    Blitzjs: "blitzjs",
    Nextjs: "nextjs",
    Gatsby: "gatsby",
    Remix: "remix",
    ReactRouter: "react-router",
    Astro: "astro",
    Hexo: "hexo",
    Eleventy: "eleventy",
    Docusaurus2: "docusaurus-2",
    Docusaurus: "docusaurus",
    Preact: "preact",
    Solidstart1: "solidstart-1",
    Solidstart: "solidstart",
    Dojo: "dojo",
    Ember: "ember",
    Vue: "vue",
    Scully: "scully",
    IonicAngular: "ionic-angular",
    Angular: "angular",
    Polymer: "polymer",
    Svelte: "svelte",
    Sveltekit: "sveltekit",
    Sveltekit1: "sveltekit-1",
    IonicReact: "ionic-react",
    CreateReactApp: "create-react-app",
    Gridsome: "gridsome",
    Umijs: "umijs",
    Sapper: "sapper",
    Saber: "saber",
    Stencil: "stencil",
    Nuxtjs: "nuxtjs",
    Redwoodjs: "redwoodjs",
    Hugo: "hugo",
    Jekyll: "jekyll",
    Brunch: "brunch",
    Middleman: "middleman",
    Zola: "zola",
    Hydrogen: "hydrogen",
    Vite: "vite",
    Vitepress: "vitepress",
    Vuepress: "vuepress",
    Parcel: "parcel",
    Fastapi: "fastapi",
    Fasthtml: "fasthtml",
    SanityV3: "sanity-v3",
    Sanity: "sanity",
    Storybook: "storybook",
    Nitro: "nitro",
    Hono: "hono",
    Express: "express",
    Xmcp: "xmcp",
};
export const GetDeploymentResponseBodyDeploymentsStatus = {
    Skipped: "skipped",
    Pending: "pending",
    Ready: "ready",
    Error: "error",
    Timeout: "timeout",
};
/**
 * Must be `http` or `https`.
 */
export const ResponseBodyProtocol = {
    Http: "http",
    Https: "https",
};
export const ResponseBodyFormats = {
    ImageAvif: "image/avif",
    ImageWebp: "image/webp",
};
export const ResponseBodyContentDispositionType = {
    Inline: "inline",
    Attachment: "attachment",
};
export const GetDeploymentResponseBodyDeploymentsResponseReadyState = {
    Building: "BUILDING",
    Error: "ERROR",
    Initializing: "INITIALIZING",
    Ready: "READY",
};
export const ResponseBodyStatus = {
    Queued: "QUEUED",
    Building: "BUILDING",
    Error: "ERROR",
    Initializing: "INITIALIZING",
    Ready: "READY",
    Canceled: "CANCELED",
};
/**
 * The type of environment (production, preview, or development)
 */
export const GetDeploymentCustomEnvironmentDeploymentsType = {
    Production: "production",
    Preview: "preview",
    Development: "development",
};
/**
 * The type of matching to perform
 */
export const GetDeploymentCustomEnvironmentDeploymentsResponse200Type = {
    EndsWith: "endsWith",
    StartsWith: "startsWith",
    Equals: "equals",
};
export const GetDeploymentResponseBodyOomReport = {
    OutOfMemory: "out-of-memory",
};
export const ResponseBodyReadyState = {
    Queued: "QUEUED",
    Building: "BUILDING",
    Error: "ERROR",
    Initializing: "INITIALIZING",
    Ready: "READY",
    Canceled: "CANCELED",
};
export const GetDeploymentResponseBodyType = {
    Lambdas: "LAMBDAS",
};
export const ResponseBodyChecksState = {
    Registered: "registered",
    Running: "running",
    Completed: "completed",
};
export const ResponseBodyChecksConclusion = {
    Succeeded: "succeeded",
    Failed: "failed",
    Skipped: "skipped",
    Canceled: "canceled",
};
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody115Type = {
    Bitbucket: "bitbucket",
};
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody114Type = {
    Gitlab: "gitlab",
};
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody113Type = {
    GithubLimited: "github-limited",
};
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type = {
    GithubCustomHost: "github-custom-host",
};
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type = {
    Github: "github",
};
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type = {
    Custom: "custom",
};
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type = {
    Bitbucket: "bitbucket",
};
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type = {
    Bitbucket: "bitbucket",
};
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType = {
    Gitlab: "gitlab",
};
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType = {
    GithubLimited: "github-limited",
};
export const GetDeploymentGitSourceDeploymentsResponse200Type = {
    GithubLimited: "github-limited",
};
export const GetDeploymentGitSourceDeploymentsResponseType = {
    GithubCustomHost: "github-custom-host",
};
export const GetDeploymentGitSourceDeploymentsType = {
    GithubCustomHost: "github-custom-host",
};
export const GetDeploymentGitSourceType = {
    Github: "github",
};
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type = {
    Github: "github",
};
/**
 * If set it overrides the `projectSettings.nodeVersion` for this deployment.
 */
export const ResponseBodyNodeVersion = {
    TwentyTwoDotX: "22.x",
    TwentyDotX: "20.x",
    EighteenDotX: "18.x",
    SixteenDotX: "16.x",
    FourteenDotX: "14.x",
    TwelveDotX: "12.x",
    TenDotX: "10.x",
    EightDot10DotX: "8.10.x",
};
/**
 * Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - ROLLING: in the process of having production traffic gradually transitioned. - PROMOTED: has seen production traffic
 */
export const ResponseBodyReadySubstate = {
    Staged: "STAGED",
    Rolling: "ROLLING",
    Promoted: "PROMOTED",
};
export const ResponseBodySource = {
    ApiTriggerGitDeploy: "api-trigger-git-deploy",
    Cli: "cli",
    CloneRepo: "clone/repo",
    Git: "git",
    Import: "import",
    ImportRepo: "import/repo",
    Redeploy: "redeploy",
    V0Web: "v0-web",
};
export const ResponseBodyTarget = {
    Staging: "staging",
    Production: "production",
};
export const ResponseBodyPlan = {
    Pro: "pro",
    Enterprise: "enterprise",
    Hobby: "hobby",
};
export const ResponseBodyArchitecture = {
    X8664: "x86_64",
    Arm64: "arm64",
};
/**
 * Event type - must be "queue/v1beta" (REQUIRED)
 */
export const GetDeploymentResponseBodyDeploymentsResponseType = {
    QueueV1beta: "queue/v1beta",
};
export const GetDeploymentRoutesHandle = {
    Error: "error",
    Filesystem: "filesystem",
    Hit: "hit",
    Miss: "miss",
    Rewrite: "rewrite",
    Resource: "resource",
};
export const GetDeploymentHasDeploymentsType = {
    Header: "header",
    Cookie: "cookie",
    Query: "query",
};
export const GetDeploymentHasType = {
    Host: "host",
};
export const GetDeploymentMissingType = {
    Header: "header",
    Cookie: "cookie",
    Query: "query",
};
export const GetDeploymentMissingDeploymentsType = {
    Host: "host",
};
export const GetDeploymentRoutesAction = {
    Challenge: "challenge",
    Deny: "deny",
};
export const GetDeploymentRoutesType = {
    RequestHeaders: "request.headers",
    RequestQuery: "request.query",
    ResponseHeaders: "response.headers",
};
export const GetDeploymentRoutesOp = {
    Append: "append",
    Set: "set",
    Delete: "delete",
};
export const GetDeploymentGitRepoDeploymentsType = {
    Bitbucket: "bitbucket",
};
export const GetDeploymentGitRepoOwnerType = {
    Team: "team",
    User: "user",
};
export const GetDeploymentGitRepoType = {
    Github: "github",
};
export const GetDeploymentGitRepoDeploymentsResponseOwnerType = {
    Team: "team",
    User: "user",
};
export const GetDeploymentGitRepoDeploymentsResponseType = {
    Gitlab: "gitlab",
};
export const GetDeploymentGitRepoDeploymentsOwnerType = {
    Team: "team",
    User: "user",
};
/**
 * The result of the microfrontends config upload during deployment creation. Only set for default app deployments. - `success` - The config was uploaded successfully. - `error` - The config upload failed. - `no_config` - No config was found to upload. - `undefined` - The config upload has not been attempted yet.
 */
export const GetDeploymentMicrofrontendsMfeConfigUploadState = {
    Error: "error",
    Success: "success",
    NoConfig: "no_config",
};
export const ResponseBodyFunctionType = {
    Fluid: "fluid",
    Standard: "standard",
};
export const ResponseBodyFunctionMemoryType = {
    Standard: "standard",
    StandardLegacy: "standard_legacy",
    Performance: "performance",
};
export const ResponseBodyState = {
    Succeeded: "succeeded",
    Failed: "failed",
    Pending: "pending",
};
/** @internal */
export const GetDeploymentRequest$inboundSchema = z.object({
    idOrUrl: z.string(),
    withGitRepoInfo: z.string().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/** @internal */
export const GetDeploymentRequest$outboundSchema = z.object({
    idOrUrl: z.string(),
    withGitRepoInfo: z.string().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentRequest$;
(function (GetDeploymentRequest$) {
    /** @deprecated use `GetDeploymentRequest$inboundSchema` instead. */
    GetDeploymentRequest$.inboundSchema = GetDeploymentRequest$inboundSchema;
    /** @deprecated use `GetDeploymentRequest$outboundSchema` instead. */
    GetDeploymentRequest$.outboundSchema = GetDeploymentRequest$outboundSchema;
})(GetDeploymentRequest$ || (GetDeploymentRequest$ = {}));
export function getDeploymentRequestToJSON(getDeploymentRequest) {
    return JSON.stringify(GetDeploymentRequest$outboundSchema.parse(getDeploymentRequest));
}
export function getDeploymentRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentRequest' from JSON`);
}
/** @internal */
export const GetDeploymentResponseBodyCreator$inboundSchema = z.object({
    uid: z.string(),
    username: z.string().optional(),
    avatar: z.string().optional(),
});
/** @internal */
export const GetDeploymentResponseBodyCreator$outboundSchema = z.object({
    uid: z.string(),
    username: z.string().optional(),
    avatar: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentResponseBodyCreator$;
(function (GetDeploymentResponseBodyCreator$) {
    /** @deprecated use `GetDeploymentResponseBodyCreator$inboundSchema` instead. */
    GetDeploymentResponseBodyCreator$.inboundSchema = GetDeploymentResponseBodyCreator$inboundSchema;
    /** @deprecated use `GetDeploymentResponseBodyCreator$outboundSchema` instead. */
    GetDeploymentResponseBodyCreator$.outboundSchema = GetDeploymentResponseBodyCreator$outboundSchema;
})(GetDeploymentResponseBodyCreator$ || (GetDeploymentResponseBodyCreator$ = {}));
export function getDeploymentResponseBodyCreatorToJSON(getDeploymentResponseBodyCreator) {
    return JSON.stringify(GetDeploymentResponseBodyCreator$outboundSchema.parse(getDeploymentResponseBodyCreator));
}
export function getDeploymentResponseBodyCreatorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentResponseBodyCreator$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentResponseBodyCreator' from JSON`);
}
/** @internal */
export const GetDeploymentResponseBodyDeploymentsReadyState$inboundSchema = z
    .nativeEnum(GetDeploymentResponseBodyDeploymentsReadyState);
/** @internal */
export const GetDeploymentResponseBodyDeploymentsReadyState$outboundSchema = GetDeploymentResponseBodyDeploymentsReadyState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentResponseBodyDeploymentsReadyState$;
(function (GetDeploymentResponseBodyDeploymentsReadyState$) {
    /** @deprecated use `GetDeploymentResponseBodyDeploymentsReadyState$inboundSchema` instead. */
    GetDeploymentResponseBodyDeploymentsReadyState$.inboundSchema = GetDeploymentResponseBodyDeploymentsReadyState$inboundSchema;
    /** @deprecated use `GetDeploymentResponseBodyDeploymentsReadyState$outboundSchema` instead. */
    GetDeploymentResponseBodyDeploymentsReadyState$.outboundSchema = GetDeploymentResponseBodyDeploymentsReadyState$outboundSchema;
})(GetDeploymentResponseBodyDeploymentsReadyState$ || (GetDeploymentResponseBodyDeploymentsReadyState$ = {}));
/** @internal */
export const GetDeploymentResponseBodyOutput$inboundSchema = z.object({
    path: z.string(),
    functionName: z.string(),
});
/** @internal */
export const GetDeploymentResponseBodyOutput$outboundSchema = z.object({
    path: z.string(),
    functionName: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentResponseBodyOutput$;
(function (GetDeploymentResponseBodyOutput$) {
    /** @deprecated use `GetDeploymentResponseBodyOutput$inboundSchema` instead. */
    GetDeploymentResponseBodyOutput$.inboundSchema = GetDeploymentResponseBodyOutput$inboundSchema;
    /** @deprecated use `GetDeploymentResponseBodyOutput$outboundSchema` instead. */
    GetDeploymentResponseBodyOutput$.outboundSchema = GetDeploymentResponseBodyOutput$outboundSchema;
})(GetDeploymentResponseBodyOutput$ || (GetDeploymentResponseBodyOutput$ = {}));
export function getDeploymentResponseBodyOutputToJSON(getDeploymentResponseBodyOutput) {
    return JSON.stringify(GetDeploymentResponseBodyOutput$outboundSchema.parse(getDeploymentResponseBodyOutput));
}
export function getDeploymentResponseBodyOutputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentResponseBodyOutput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentResponseBodyOutput' from JSON`);
}
/** @internal */
export const ResponseBodyLambdas$inboundSchema = z.object({
    id: z.string(),
    createdAt: z.number().optional(),
    readyState: GetDeploymentResponseBodyDeploymentsReadyState$inboundSchema
        .optional(),
    entrypoint: z.nullable(z.string()).optional(),
    readyStateAt: z.number().optional(),
    output: z.array(z.lazy(() => GetDeploymentResponseBodyOutput$inboundSchema)),
});
/** @internal */
export const ResponseBodyLambdas$outboundSchema = z.object({
    id: z.string(),
    createdAt: z.number().optional(),
    readyState: GetDeploymentResponseBodyDeploymentsReadyState$outboundSchema
        .optional(),
    entrypoint: z.nullable(z.string()).optional(),
    readyStateAt: z.number().optional(),
    output: z.array(z.lazy(() => GetDeploymentResponseBodyOutput$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyLambdas$;
(function (ResponseBodyLambdas$) {
    /** @deprecated use `ResponseBodyLambdas$inboundSchema` instead. */
    ResponseBodyLambdas$.inboundSchema = ResponseBodyLambdas$inboundSchema;
    /** @deprecated use `ResponseBodyLambdas$outboundSchema` instead. */
    ResponseBodyLambdas$.outboundSchema = ResponseBodyLambdas$outboundSchema;
})(ResponseBodyLambdas$ || (ResponseBodyLambdas$ = {}));
export function responseBodyLambdasToJSON(responseBodyLambdas) {
    return JSON.stringify(ResponseBodyLambdas$outboundSchema.parse(responseBodyLambdas));
}
export function responseBodyLambdasFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyLambdas$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyLambdas' from JSON`);
}
/** @internal */
export const GetDeploymentResponseBodyStatus$inboundSchema = z.nativeEnum(GetDeploymentResponseBodyStatus);
/** @internal */
export const GetDeploymentResponseBodyStatus$outboundSchema = GetDeploymentResponseBodyStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentResponseBodyStatus$;
(function (GetDeploymentResponseBodyStatus$) {
    /** @deprecated use `GetDeploymentResponseBodyStatus$inboundSchema` instead. */
    GetDeploymentResponseBodyStatus$.inboundSchema = GetDeploymentResponseBodyStatus$inboundSchema;
    /** @deprecated use `GetDeploymentResponseBodyStatus$outboundSchema` instead. */
    GetDeploymentResponseBodyStatus$.outboundSchema = GetDeploymentResponseBodyStatus$outboundSchema;
})(GetDeploymentResponseBodyStatus$ || (GetDeploymentResponseBodyStatus$ = {}));
/** @internal */
export const ResponseBodyTeam$inboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    slug: z.string(),
    avatar: z.string().optional(),
});
/** @internal */
export const ResponseBodyTeam$outboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    slug: z.string(),
    avatar: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyTeam$;
(function (ResponseBodyTeam$) {
    /** @deprecated use `ResponseBodyTeam$inboundSchema` instead. */
    ResponseBodyTeam$.inboundSchema = ResponseBodyTeam$inboundSchema;
    /** @deprecated use `ResponseBodyTeam$outboundSchema` instead. */
    ResponseBodyTeam$.outboundSchema = ResponseBodyTeam$outboundSchema;
})(ResponseBodyTeam$ || (ResponseBodyTeam$ = {}));
export function responseBodyTeamToJSON(responseBodyTeam) {
    return JSON.stringify(ResponseBodyTeam$outboundSchema.parse(responseBodyTeam));
}
export function responseBodyTeamFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyTeam$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyTeam' from JSON`);
}
/** @internal */
export const GetDeploymentCustomEnvironment2$inboundSchema = z.object({
    id: z.string(),
});
/** @internal */
export const GetDeploymentCustomEnvironment2$outboundSchema = z.object({
    id: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentCustomEnvironment2$;
(function (GetDeploymentCustomEnvironment2$) {
    /** @deprecated use `GetDeploymentCustomEnvironment2$inboundSchema` instead. */
    GetDeploymentCustomEnvironment2$.inboundSchema = GetDeploymentCustomEnvironment2$inboundSchema;
    /** @deprecated use `GetDeploymentCustomEnvironment2$outboundSchema` instead. */
    GetDeploymentCustomEnvironment2$.outboundSchema = GetDeploymentCustomEnvironment2$outboundSchema;
})(GetDeploymentCustomEnvironment2$ || (GetDeploymentCustomEnvironment2$ = {}));
export function getDeploymentCustomEnvironment2ToJSON(getDeploymentCustomEnvironment2) {
    return JSON.stringify(GetDeploymentCustomEnvironment2$outboundSchema.parse(getDeploymentCustomEnvironment2));
}
export function getDeploymentCustomEnvironment2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentCustomEnvironment2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentCustomEnvironment2' from JSON`);
}
/** @internal */
export const GetDeploymentCustomEnvironmentType$inboundSchema = z.nativeEnum(GetDeploymentCustomEnvironmentType);
/** @internal */
export const GetDeploymentCustomEnvironmentType$outboundSchema = GetDeploymentCustomEnvironmentType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentCustomEnvironmentType$;
(function (GetDeploymentCustomEnvironmentType$) {
    /** @deprecated use `GetDeploymentCustomEnvironmentType$inboundSchema` instead. */
    GetDeploymentCustomEnvironmentType$.inboundSchema = GetDeploymentCustomEnvironmentType$inboundSchema;
    /** @deprecated use `GetDeploymentCustomEnvironmentType$outboundSchema` instead. */
    GetDeploymentCustomEnvironmentType$.outboundSchema = GetDeploymentCustomEnvironmentType$outboundSchema;
})(GetDeploymentCustomEnvironmentType$ || (GetDeploymentCustomEnvironmentType$ = {}));
/** @internal */
export const GetDeploymentCustomEnvironmentDeploymentsResponseType$inboundSchema = z.nativeEnum(GetDeploymentCustomEnvironmentDeploymentsResponseType);
/** @internal */
export const GetDeploymentCustomEnvironmentDeploymentsResponseType$outboundSchema = GetDeploymentCustomEnvironmentDeploymentsResponseType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentCustomEnvironmentDeploymentsResponseType$;
(function (GetDeploymentCustomEnvironmentDeploymentsResponseType$) {
    /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsResponseType$inboundSchema` instead. */
    GetDeploymentCustomEnvironmentDeploymentsResponseType$.inboundSchema = GetDeploymentCustomEnvironmentDeploymentsResponseType$inboundSchema;
    /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsResponseType$outboundSchema` instead. */
    GetDeploymentCustomEnvironmentDeploymentsResponseType$.outboundSchema = GetDeploymentCustomEnvironmentDeploymentsResponseType$outboundSchema;
})(GetDeploymentCustomEnvironmentDeploymentsResponseType$ || (GetDeploymentCustomEnvironmentDeploymentsResponseType$ = {}));
/** @internal */
export const GetDeploymentCustomEnvironmentBranchMatcher$inboundSchema = z.object({
    type: GetDeploymentCustomEnvironmentDeploymentsResponseType$inboundSchema,
    pattern: z.string(),
});
/** @internal */
export const GetDeploymentCustomEnvironmentBranchMatcher$outboundSchema = z.object({
    type: GetDeploymentCustomEnvironmentDeploymentsResponseType$outboundSchema,
    pattern: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentCustomEnvironmentBranchMatcher$;
(function (GetDeploymentCustomEnvironmentBranchMatcher$) {
    /** @deprecated use `GetDeploymentCustomEnvironmentBranchMatcher$inboundSchema` instead. */
    GetDeploymentCustomEnvironmentBranchMatcher$.inboundSchema = GetDeploymentCustomEnvironmentBranchMatcher$inboundSchema;
    /** @deprecated use `GetDeploymentCustomEnvironmentBranchMatcher$outboundSchema` instead. */
    GetDeploymentCustomEnvironmentBranchMatcher$.outboundSchema = GetDeploymentCustomEnvironmentBranchMatcher$outboundSchema;
})(GetDeploymentCustomEnvironmentBranchMatcher$ || (GetDeploymentCustomEnvironmentBranchMatcher$ = {}));
export function getDeploymentCustomEnvironmentBranchMatcherToJSON(getDeploymentCustomEnvironmentBranchMatcher) {
    return JSON.stringify(GetDeploymentCustomEnvironmentBranchMatcher$outboundSchema.parse(getDeploymentCustomEnvironmentBranchMatcher));
}
export function getDeploymentCustomEnvironmentBranchMatcherFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentCustomEnvironmentBranchMatcher$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentCustomEnvironmentBranchMatcher' from JSON`);
}
/** @internal */
export const GetDeploymentCustomEnvironmentVerification$inboundSchema = z.object({
    type: z.string(),
    domain: z.string(),
    value: z.string(),
    reason: z.string(),
});
/** @internal */
export const GetDeploymentCustomEnvironmentVerification$outboundSchema = z.object({
    type: z.string(),
    domain: z.string(),
    value: z.string(),
    reason: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentCustomEnvironmentVerification$;
(function (GetDeploymentCustomEnvironmentVerification$) {
    /** @deprecated use `GetDeploymentCustomEnvironmentVerification$inboundSchema` instead. */
    GetDeploymentCustomEnvironmentVerification$.inboundSchema = GetDeploymentCustomEnvironmentVerification$inboundSchema;
    /** @deprecated use `GetDeploymentCustomEnvironmentVerification$outboundSchema` instead. */
    GetDeploymentCustomEnvironmentVerification$.outboundSchema = GetDeploymentCustomEnvironmentVerification$outboundSchema;
})(GetDeploymentCustomEnvironmentVerification$ || (GetDeploymentCustomEnvironmentVerification$ = {}));
export function getDeploymentCustomEnvironmentVerificationToJSON(getDeploymentCustomEnvironmentVerification) {
    return JSON.stringify(GetDeploymentCustomEnvironmentVerification$outboundSchema.parse(getDeploymentCustomEnvironmentVerification));
}
export function getDeploymentCustomEnvironmentVerificationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentCustomEnvironmentVerification$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentCustomEnvironmentVerification' from JSON`);
}
/** @internal */
export const GetDeploymentCustomEnvironmentDomains$inboundSchema = z.object({
    name: z.string(),
    apexName: z.string(),
    projectId: z.string(),
    redirect: z.nullable(z.string()).optional(),
    redirectStatusCode: z.nullable(z.number()).optional(),
    gitBranch: z.nullable(z.string()).optional(),
    customEnvironmentId: z.nullable(z.string()).optional(),
    updatedAt: z.number().optional(),
    createdAt: z.number().optional(),
    verified: z.boolean(),
    verification: z.array(z.lazy(() => GetDeploymentCustomEnvironmentVerification$inboundSchema)).optional(),
});
/** @internal */
export const GetDeploymentCustomEnvironmentDomains$outboundSchema = z.object({
    name: z.string(),
    apexName: z.string(),
    projectId: z.string(),
    redirect: z.nullable(z.string()).optional(),
    redirectStatusCode: z.nullable(z.number()).optional(),
    gitBranch: z.nullable(z.string()).optional(),
    customEnvironmentId: z.nullable(z.string()).optional(),
    updatedAt: z.number().optional(),
    createdAt: z.number().optional(),
    verified: z.boolean(),
    verification: z.array(z.lazy(() => GetDeploymentCustomEnvironmentVerification$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentCustomEnvironmentDomains$;
(function (GetDeploymentCustomEnvironmentDomains$) {
    /** @deprecated use `GetDeploymentCustomEnvironmentDomains$inboundSchema` instead. */
    GetDeploymentCustomEnvironmentDomains$.inboundSchema = GetDeploymentCustomEnvironmentDomains$inboundSchema;
    /** @deprecated use `GetDeploymentCustomEnvironmentDomains$outboundSchema` instead. */
    GetDeploymentCustomEnvironmentDomains$.outboundSchema = GetDeploymentCustomEnvironmentDomains$outboundSchema;
})(GetDeploymentCustomEnvironmentDomains$ || (GetDeploymentCustomEnvironmentDomains$ = {}));
export function getDeploymentCustomEnvironmentDomainsToJSON(getDeploymentCustomEnvironmentDomains) {
    return JSON.stringify(GetDeploymentCustomEnvironmentDomains$outboundSchema.parse(getDeploymentCustomEnvironmentDomains));
}
export function getDeploymentCustomEnvironmentDomainsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentCustomEnvironmentDomains$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentCustomEnvironmentDomains' from JSON`);
}
/** @internal */
export const GetDeploymentCustomEnvironment1$inboundSchema = z.object({
    id: z.string(),
    slug: z.string(),
    type: GetDeploymentCustomEnvironmentType$inboundSchema,
    description: z.string().optional(),
    branchMatcher: z.lazy(() => GetDeploymentCustomEnvironmentBranchMatcher$inboundSchema).optional(),
    domains: z.array(z.lazy(() => GetDeploymentCustomEnvironmentDomains$inboundSchema)).optional(),
    currentDeploymentAliases: z.array(z.string()).optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
});
/** @internal */
export const GetDeploymentCustomEnvironment1$outboundSchema = z.object({
    id: z.string(),
    slug: z.string(),
    type: GetDeploymentCustomEnvironmentType$outboundSchema,
    description: z.string().optional(),
    branchMatcher: z.lazy(() => GetDeploymentCustomEnvironmentBranchMatcher$outboundSchema).optional(),
    domains: z.array(z.lazy(() => GetDeploymentCustomEnvironmentDomains$outboundSchema)).optional(),
    currentDeploymentAliases: z.array(z.string()).optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentCustomEnvironment1$;
(function (GetDeploymentCustomEnvironment1$) {
    /** @deprecated use `GetDeploymentCustomEnvironment1$inboundSchema` instead. */
    GetDeploymentCustomEnvironment1$.inboundSchema = GetDeploymentCustomEnvironment1$inboundSchema;
    /** @deprecated use `GetDeploymentCustomEnvironment1$outboundSchema` instead. */
    GetDeploymentCustomEnvironment1$.outboundSchema = GetDeploymentCustomEnvironment1$outboundSchema;
})(GetDeploymentCustomEnvironment1$ || (GetDeploymentCustomEnvironment1$ = {}));
export function getDeploymentCustomEnvironment1ToJSON(getDeploymentCustomEnvironment1) {
    return JSON.stringify(GetDeploymentCustomEnvironment1$outboundSchema.parse(getDeploymentCustomEnvironment1));
}
export function getDeploymentCustomEnvironment1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentCustomEnvironment1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentCustomEnvironment1' from JSON`);
}
/** @internal */
export const ResponseBodyCustomEnvironment$inboundSchema = z.union([
    z.lazy(() => GetDeploymentCustomEnvironment1$inboundSchema),
    z.lazy(() => GetDeploymentCustomEnvironment2$inboundSchema),
]);
/** @internal */
export const ResponseBodyCustomEnvironment$outboundSchema = z.union([
    z.lazy(() => GetDeploymentCustomEnvironment1$outboundSchema),
    z.lazy(() => GetDeploymentCustomEnvironment2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyCustomEnvironment$;
(function (ResponseBodyCustomEnvironment$) {
    /** @deprecated use `ResponseBodyCustomEnvironment$inboundSchema` instead. */
    ResponseBodyCustomEnvironment$.inboundSchema = ResponseBodyCustomEnvironment$inboundSchema;
    /** @deprecated use `ResponseBodyCustomEnvironment$outboundSchema` instead. */
    ResponseBodyCustomEnvironment$.outboundSchema = ResponseBodyCustomEnvironment$outboundSchema;
})(ResponseBodyCustomEnvironment$ || (ResponseBodyCustomEnvironment$ = {}));
export function responseBodyCustomEnvironmentToJSON(responseBodyCustomEnvironment) {
    return JSON.stringify(ResponseBodyCustomEnvironment$outboundSchema.parse(responseBodyCustomEnvironment));
}
export function responseBodyCustomEnvironmentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyCustomEnvironment$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyCustomEnvironment' from JSON`);
}
/** @internal */
export const ResponseBodyOomReport$inboundSchema = z.nativeEnum(ResponseBodyOomReport);
/** @internal */
export const ResponseBodyOomReport$outboundSchema = ResponseBodyOomReport$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyOomReport$;
(function (ResponseBodyOomReport$) {
    /** @deprecated use `ResponseBodyOomReport$inboundSchema` instead. */
    ResponseBodyOomReport$.inboundSchema = ResponseBodyOomReport$inboundSchema;
    /** @deprecated use `ResponseBodyOomReport$outboundSchema` instead. */
    ResponseBodyOomReport$.outboundSchema = ResponseBodyOomReport$outboundSchema;
})(ResponseBodyOomReport$ || (ResponseBodyOomReport$ = {}));
/** @internal */
export const ResponseBodyAliasWarning$inboundSchema = z.object({
    code: z.string(),
    message: z.string(),
    link: z.string().optional(),
    action: z.string().optional(),
});
/** @internal */
export const ResponseBodyAliasWarning$outboundSchema = z.object({
    code: z.string(),
    message: z.string(),
    link: z.string().optional(),
    action: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyAliasWarning$;
(function (ResponseBodyAliasWarning$) {
    /** @deprecated use `ResponseBodyAliasWarning$inboundSchema` instead. */
    ResponseBodyAliasWarning$.inboundSchema = ResponseBodyAliasWarning$inboundSchema;
    /** @deprecated use `ResponseBodyAliasWarning$outboundSchema` instead. */
    ResponseBodyAliasWarning$.outboundSchema = ResponseBodyAliasWarning$outboundSchema;
})(ResponseBodyAliasWarning$ || (ResponseBodyAliasWarning$ = {}));
export function responseBodyAliasWarningToJSON(responseBodyAliasWarning) {
    return JSON.stringify(ResponseBodyAliasWarning$outboundSchema.parse(responseBodyAliasWarning));
}
export function responseBodyAliasWarningFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyAliasWarning$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyAliasWarning' from JSON`);
}
/** @internal */
export const GetDeploymentResponseBodyReadyState$inboundSchema = z.nativeEnum(GetDeploymentResponseBodyReadyState);
/** @internal */
export const GetDeploymentResponseBodyReadyState$outboundSchema = GetDeploymentResponseBodyReadyState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentResponseBodyReadyState$;
(function (GetDeploymentResponseBodyReadyState$) {
    /** @deprecated use `GetDeploymentResponseBodyReadyState$inboundSchema` instead. */
    GetDeploymentResponseBodyReadyState$.inboundSchema = GetDeploymentResponseBodyReadyState$inboundSchema;
    /** @deprecated use `GetDeploymentResponseBodyReadyState$outboundSchema` instead. */
    GetDeploymentResponseBodyReadyState$.outboundSchema = GetDeploymentResponseBodyReadyState$outboundSchema;
})(GetDeploymentResponseBodyReadyState$ || (GetDeploymentResponseBodyReadyState$ = {}));
/** @internal */
export const GetDeploymentResponseBodyDeploymentsType$inboundSchema = z
    .nativeEnum(GetDeploymentResponseBodyDeploymentsType);
/** @internal */
export const GetDeploymentResponseBodyDeploymentsType$outboundSchema = GetDeploymentResponseBodyDeploymentsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentResponseBodyDeploymentsType$;
(function (GetDeploymentResponseBodyDeploymentsType$) {
    /** @deprecated use `GetDeploymentResponseBodyDeploymentsType$inboundSchema` instead. */
    GetDeploymentResponseBodyDeploymentsType$.inboundSchema = GetDeploymentResponseBodyDeploymentsType$inboundSchema;
    /** @deprecated use `GetDeploymentResponseBodyDeploymentsType$outboundSchema` instead. */
    GetDeploymentResponseBodyDeploymentsType$.outboundSchema = GetDeploymentResponseBodyDeploymentsType$outboundSchema;
})(GetDeploymentResponseBodyDeploymentsType$ || (GetDeploymentResponseBodyDeploymentsType$ = {}));
/** @internal */
export const GetDeploymentResponseBodyAliasError$inboundSchema = z.object({
    code: z.string(),
    message: z.string(),
});
/** @internal */
export const GetDeploymentResponseBodyAliasError$outboundSchema = z.object({
    code: z.string(),
    message: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentResponseBodyAliasError$;
(function (GetDeploymentResponseBodyAliasError$) {
    /** @deprecated use `GetDeploymentResponseBodyAliasError$inboundSchema` instead. */
    GetDeploymentResponseBodyAliasError$.inboundSchema = GetDeploymentResponseBodyAliasError$inboundSchema;
    /** @deprecated use `GetDeploymentResponseBodyAliasError$outboundSchema` instead. */
    GetDeploymentResponseBodyAliasError$.outboundSchema = GetDeploymentResponseBodyAliasError$outboundSchema;
})(GetDeploymentResponseBodyAliasError$ || (GetDeploymentResponseBodyAliasError$ = {}));
export function getDeploymentResponseBodyAliasErrorToJSON(getDeploymentResponseBodyAliasError) {
    return JSON.stringify(GetDeploymentResponseBodyAliasError$outboundSchema.parse(getDeploymentResponseBodyAliasError));
}
export function getDeploymentResponseBodyAliasErrorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentResponseBodyAliasError$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentResponseBodyAliasError' from JSON`);
}
/** @internal */
export const GetDeploymentResponseBodyChecksState$inboundSchema = z.nativeEnum(GetDeploymentResponseBodyChecksState);
/** @internal */
export const GetDeploymentResponseBodyChecksState$outboundSchema = GetDeploymentResponseBodyChecksState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentResponseBodyChecksState$;
(function (GetDeploymentResponseBodyChecksState$) {
    /** @deprecated use `GetDeploymentResponseBodyChecksState$inboundSchema` instead. */
    GetDeploymentResponseBodyChecksState$.inboundSchema = GetDeploymentResponseBodyChecksState$inboundSchema;
    /** @deprecated use `GetDeploymentResponseBodyChecksState$outboundSchema` instead. */
    GetDeploymentResponseBodyChecksState$.outboundSchema = GetDeploymentResponseBodyChecksState$outboundSchema;
})(GetDeploymentResponseBodyChecksState$ || (GetDeploymentResponseBodyChecksState$ = {}));
/** @internal */
export const GetDeploymentResponseBodyChecksConclusion$inboundSchema = z
    .nativeEnum(GetDeploymentResponseBodyChecksConclusion);
/** @internal */
export const GetDeploymentResponseBodyChecksConclusion$outboundSchema = GetDeploymentResponseBodyChecksConclusion$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentResponseBodyChecksConclusion$;
(function (GetDeploymentResponseBodyChecksConclusion$) {
    /** @deprecated use `GetDeploymentResponseBodyChecksConclusion$inboundSchema` instead. */
    GetDeploymentResponseBodyChecksConclusion$.inboundSchema = GetDeploymentResponseBodyChecksConclusion$inboundSchema;
    /** @deprecated use `GetDeploymentResponseBodyChecksConclusion$outboundSchema` instead. */
    GetDeploymentResponseBodyChecksConclusion$.outboundSchema = GetDeploymentResponseBodyChecksConclusion$outboundSchema;
})(GetDeploymentResponseBodyChecksConclusion$ || (GetDeploymentResponseBodyChecksConclusion$ = {}));
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody215Type$inboundSchema = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody215Type);
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody215Type$outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody215Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody215Type$;
(function (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody215Type$) {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody215Type$inboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody215Type$.inboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody215Type$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody215Type$outboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody215Type$.outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody215Type$outboundSchema;
})(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody215Type$ || (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody215Type$ = {}));
/** @internal */
export const GetDeploymentGitSource15$inboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody215Type$inboundSchema,
    ref: z.string(),
    sha: z.string(),
    owner: z.string().optional(),
    slug: z.string().optional(),
    workspaceUuid: z.string(),
    repoUuid: z.string(),
});
/** @internal */
export const GetDeploymentGitSource15$outboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody215Type$outboundSchema,
    ref: z.string(),
    sha: z.string(),
    owner: z.string().optional(),
    slug: z.string().optional(),
    workspaceUuid: z.string(),
    repoUuid: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSource15$;
(function (GetDeploymentGitSource15$) {
    /** @deprecated use `GetDeploymentGitSource15$inboundSchema` instead. */
    GetDeploymentGitSource15$.inboundSchema = GetDeploymentGitSource15$inboundSchema;
    /** @deprecated use `GetDeploymentGitSource15$outboundSchema` instead. */
    GetDeploymentGitSource15$.outboundSchema = GetDeploymentGitSource15$outboundSchema;
})(GetDeploymentGitSource15$ || (GetDeploymentGitSource15$ = {}));
export function getDeploymentGitSource15ToJSON(getDeploymentGitSource15) {
    return JSON.stringify(GetDeploymentGitSource15$outboundSchema.parse(getDeploymentGitSource15));
}
export function getDeploymentGitSource15FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSource15$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSource15' from JSON`);
}
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody214Type$inboundSchema = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody214Type);
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody214Type$outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody214Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody214Type$;
(function (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody214Type$) {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody214Type$inboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody214Type$.inboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody214Type$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody214Type$outboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody214Type$.outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody214Type$outboundSchema;
})(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody214Type$ || (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody214Type$ = {}));
/** @internal */
export const GetDeploymentGitSource14$inboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody214Type$inboundSchema,
    ref: z.string(),
    sha: z.string(),
    projectId: z.number(),
});
/** @internal */
export const GetDeploymentGitSource14$outboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody214Type$outboundSchema,
    ref: z.string(),
    sha: z.string(),
    projectId: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSource14$;
(function (GetDeploymentGitSource14$) {
    /** @deprecated use `GetDeploymentGitSource14$inboundSchema` instead. */
    GetDeploymentGitSource14$.inboundSchema = GetDeploymentGitSource14$inboundSchema;
    /** @deprecated use `GetDeploymentGitSource14$outboundSchema` instead. */
    GetDeploymentGitSource14$.outboundSchema = GetDeploymentGitSource14$outboundSchema;
})(GetDeploymentGitSource14$ || (GetDeploymentGitSource14$ = {}));
export function getDeploymentGitSource14ToJSON(getDeploymentGitSource14) {
    return JSON.stringify(GetDeploymentGitSource14$outboundSchema.parse(getDeploymentGitSource14));
}
export function getDeploymentGitSource14FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSource14$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSource14' from JSON`);
}
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody213Type$inboundSchema = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody213Type);
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody213Type$outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody213Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody213Type$;
(function (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody213Type$) {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody213Type$inboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody213Type$.inboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody213Type$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody213Type$outboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody213Type$.outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody213Type$outboundSchema;
})(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody213Type$ || (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody213Type$ = {}));
/** @internal */
export const GetDeploymentGitSource13$inboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody213Type$inboundSchema,
    ref: z.string(),
    sha: z.string(),
    repoId: z.number(),
    org: z.string().optional(),
    repo: z.string().optional(),
});
/** @internal */
export const GetDeploymentGitSource13$outboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody213Type$outboundSchema,
    ref: z.string(),
    sha: z.string(),
    repoId: z.number(),
    org: z.string().optional(),
    repo: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSource13$;
(function (GetDeploymentGitSource13$) {
    /** @deprecated use `GetDeploymentGitSource13$inboundSchema` instead. */
    GetDeploymentGitSource13$.inboundSchema = GetDeploymentGitSource13$inboundSchema;
    /** @deprecated use `GetDeploymentGitSource13$outboundSchema` instead. */
    GetDeploymentGitSource13$.outboundSchema = GetDeploymentGitSource13$outboundSchema;
})(GetDeploymentGitSource13$ || (GetDeploymentGitSource13$ = {}));
export function getDeploymentGitSource13ToJSON(getDeploymentGitSource13) {
    return JSON.stringify(GetDeploymentGitSource13$outboundSchema.parse(getDeploymentGitSource13));
}
export function getDeploymentGitSource13FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSource13$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSource13' from JSON`);
}
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type$inboundSchema = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type);
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type$outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type$;
(function (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type$) {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type$inboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type$.inboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type$outboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type$.outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type$outboundSchema;
})(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type$ || (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type$ = {}));
/** @internal */
export const GetDeploymentGitSource12$inboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type$inboundSchema,
    host: z.string(),
    ref: z.string(),
    sha: z.string(),
    repoId: z.number(),
    org: z.string().optional(),
    repo: z.string().optional(),
});
/** @internal */
export const GetDeploymentGitSource12$outboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody212Type$outboundSchema,
    host: z.string(),
    ref: z.string(),
    sha: z.string(),
    repoId: z.number(),
    org: z.string().optional(),
    repo: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSource12$;
(function (GetDeploymentGitSource12$) {
    /** @deprecated use `GetDeploymentGitSource12$inboundSchema` instead. */
    GetDeploymentGitSource12$.inboundSchema = GetDeploymentGitSource12$inboundSchema;
    /** @deprecated use `GetDeploymentGitSource12$outboundSchema` instead. */
    GetDeploymentGitSource12$.outboundSchema = GetDeploymentGitSource12$outboundSchema;
})(GetDeploymentGitSource12$ || (GetDeploymentGitSource12$ = {}));
export function getDeploymentGitSource12ToJSON(getDeploymentGitSource12) {
    return JSON.stringify(GetDeploymentGitSource12$outboundSchema.parse(getDeploymentGitSource12));
}
export function getDeploymentGitSource12FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSource12$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSource12' from JSON`);
}
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type$inboundSchema = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type);
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type$outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type$;
(function (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type$) {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type$inboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type$.inboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type$outboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type$.outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type$outboundSchema;
})(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type$ || (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type$ = {}));
/** @internal */
export const GetDeploymentGitSource11$inboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type$inboundSchema,
    ref: z.string(),
    sha: z.string(),
    repoId: z.number(),
    org: z.string().optional(),
    repo: z.string().optional(),
});
/** @internal */
export const GetDeploymentGitSource11$outboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody211Type$outboundSchema,
    ref: z.string(),
    sha: z.string(),
    repoId: z.number(),
    org: z.string().optional(),
    repo: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSource11$;
(function (GetDeploymentGitSource11$) {
    /** @deprecated use `GetDeploymentGitSource11$inboundSchema` instead. */
    GetDeploymentGitSource11$.inboundSchema = GetDeploymentGitSource11$inboundSchema;
    /** @deprecated use `GetDeploymentGitSource11$outboundSchema` instead. */
    GetDeploymentGitSource11$.outboundSchema = GetDeploymentGitSource11$outboundSchema;
})(GetDeploymentGitSource11$ || (GetDeploymentGitSource11$ = {}));
export function getDeploymentGitSource11ToJSON(getDeploymentGitSource11) {
    return JSON.stringify(GetDeploymentGitSource11$outboundSchema.parse(getDeploymentGitSource11));
}
export function getDeploymentGitSource11FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSource11$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSource11' from JSON`);
}
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type$inboundSchema = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type);
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type$outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type$;
(function (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type$) {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type$inboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type$.inboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type$outboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type$.outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type$outboundSchema;
})(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type$ || (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type$ = {}));
/** @internal */
export const GetDeploymentGitSource10$inboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type$inboundSchema,
    ref: z.string(),
    sha: z.string(),
    gitUrl: z.string(),
});
/** @internal */
export const GetDeploymentGitSource10$outboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody210Type$outboundSchema,
    ref: z.string(),
    sha: z.string(),
    gitUrl: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSource10$;
(function (GetDeploymentGitSource10$) {
    /** @deprecated use `GetDeploymentGitSource10$inboundSchema` instead. */
    GetDeploymentGitSource10$.inboundSchema = GetDeploymentGitSource10$inboundSchema;
    /** @deprecated use `GetDeploymentGitSource10$outboundSchema` instead. */
    GetDeploymentGitSource10$.outboundSchema = GetDeploymentGitSource10$outboundSchema;
})(GetDeploymentGitSource10$ || (GetDeploymentGitSource10$ = {}));
export function getDeploymentGitSource10ToJSON(getDeploymentGitSource10) {
    return JSON.stringify(GetDeploymentGitSource10$outboundSchema.parse(getDeploymentGitSource10));
}
export function getDeploymentGitSource10FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSource10$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSource10' from JSON`);
}
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type$inboundSchema = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type);
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type$outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type$;
(function (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type$) {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type$inboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type$.inboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type$outboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type$.outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type$outboundSchema;
})(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type$ || (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type$ = {}));
/** @internal */
export const GetDeploymentGitSource9$inboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type$inboundSchema,
    owner: z.string(),
    slug: z.string(),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/** @internal */
export const GetDeploymentGitSource9$outboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type$outboundSchema,
    owner: z.string(),
    slug: z.string(),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSource9$;
(function (GetDeploymentGitSource9$) {
    /** @deprecated use `GetDeploymentGitSource9$inboundSchema` instead. */
    GetDeploymentGitSource9$.inboundSchema = GetDeploymentGitSource9$inboundSchema;
    /** @deprecated use `GetDeploymentGitSource9$outboundSchema` instead. */
    GetDeploymentGitSource9$.outboundSchema = GetDeploymentGitSource9$outboundSchema;
})(GetDeploymentGitSource9$ || (GetDeploymentGitSource9$ = {}));
export function getDeploymentGitSource9ToJSON(getDeploymentGitSource9) {
    return JSON.stringify(GetDeploymentGitSource9$outboundSchema.parse(getDeploymentGitSource9));
}
export function getDeploymentGitSource9FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSource9$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSource9' from JSON`);
}
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type$inboundSchema = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type);
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type$outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type$;
(function (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type$) {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type$inboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type$.inboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type$outboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type$.outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type$outboundSchema;
})(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type$ || (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type$ = {}));
/** @internal */
export const GetDeploymentGitSource8$inboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type$inboundSchema,
    workspaceUuid: z.string().optional(),
    repoUuid: z.string(),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/** @internal */
export const GetDeploymentGitSource8$outboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type$outboundSchema,
    workspaceUuid: z.string().optional(),
    repoUuid: z.string(),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSource8$;
(function (GetDeploymentGitSource8$) {
    /** @deprecated use `GetDeploymentGitSource8$inboundSchema` instead. */
    GetDeploymentGitSource8$.inboundSchema = GetDeploymentGitSource8$inboundSchema;
    /** @deprecated use `GetDeploymentGitSource8$outboundSchema` instead. */
    GetDeploymentGitSource8$.outboundSchema = GetDeploymentGitSource8$outboundSchema;
})(GetDeploymentGitSource8$ || (GetDeploymentGitSource8$ = {}));
export function getDeploymentGitSource8ToJSON(getDeploymentGitSource8) {
    return JSON.stringify(GetDeploymentGitSource8$outboundSchema.parse(getDeploymentGitSource8));
}
export function getDeploymentGitSource8FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSource8$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSource8' from JSON`);
}
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type$inboundSchema = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type);
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type$outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type$;
(function (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type$) {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type$inboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type$.inboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type$outboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type$.outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type$outboundSchema;
})(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type$ || (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type$ = {}));
/** @internal */
export const GetDeploymentGitSourceDeploymentsProjectId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const GetDeploymentGitSourceDeploymentsProjectId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeploymentsProjectId$;
(function (GetDeploymentGitSourceDeploymentsProjectId$) {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsProjectId$inboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsProjectId$.inboundSchema = GetDeploymentGitSourceDeploymentsProjectId$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsProjectId$outboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsProjectId$.outboundSchema = GetDeploymentGitSourceDeploymentsProjectId$outboundSchema;
})(GetDeploymentGitSourceDeploymentsProjectId$ || (GetDeploymentGitSourceDeploymentsProjectId$ = {}));
export function getDeploymentGitSourceDeploymentsProjectIdToJSON(getDeploymentGitSourceDeploymentsProjectId) {
    return JSON.stringify(GetDeploymentGitSourceDeploymentsProjectId$outboundSchema.parse(getDeploymentGitSourceDeploymentsProjectId));
}
export function getDeploymentGitSourceDeploymentsProjectIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSourceDeploymentsProjectId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSourceDeploymentsProjectId' from JSON`);
}
/** @internal */
export const GetDeploymentGitSource7$inboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type$inboundSchema,
    projectId: z.union([z.string(), z.number()]),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/** @internal */
export const GetDeploymentGitSource7$outboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type$outboundSchema,
    projectId: z.union([z.string(), z.number()]),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSource7$;
(function (GetDeploymentGitSource7$) {
    /** @deprecated use `GetDeploymentGitSource7$inboundSchema` instead. */
    GetDeploymentGitSource7$.inboundSchema = GetDeploymentGitSource7$inboundSchema;
    /** @deprecated use `GetDeploymentGitSource7$outboundSchema` instead. */
    GetDeploymentGitSource7$.outboundSchema = GetDeploymentGitSource7$outboundSchema;
})(GetDeploymentGitSource7$ || (GetDeploymentGitSource7$ = {}));
export function getDeploymentGitSource7ToJSON(getDeploymentGitSource7) {
    return JSON.stringify(GetDeploymentGitSource7$outboundSchema.parse(getDeploymentGitSource7));
}
export function getDeploymentGitSource7FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSource7$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSource7' from JSON`);
}
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type$inboundSchema = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type);
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type$outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type$;
(function (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type$) {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type$inboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type$.inboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type$outboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type$.outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type$outboundSchema;
})(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type$ || (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type$ = {}));
/** @internal */
export const GetDeploymentGitSource6$inboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type$inboundSchema,
    org: z.string(),
    repo: z.string(),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/** @internal */
export const GetDeploymentGitSource6$outboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type$outboundSchema,
    org: z.string(),
    repo: z.string(),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSource6$;
(function (GetDeploymentGitSource6$) {
    /** @deprecated use `GetDeploymentGitSource6$inboundSchema` instead. */
    GetDeploymentGitSource6$.inboundSchema = GetDeploymentGitSource6$inboundSchema;
    /** @deprecated use `GetDeploymentGitSource6$outboundSchema` instead. */
    GetDeploymentGitSource6$.outboundSchema = GetDeploymentGitSource6$outboundSchema;
})(GetDeploymentGitSource6$ || (GetDeploymentGitSource6$ = {}));
export function getDeploymentGitSource6ToJSON(getDeploymentGitSource6) {
    return JSON.stringify(GetDeploymentGitSource6$outboundSchema.parse(getDeploymentGitSource6));
}
export function getDeploymentGitSource6FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSource6$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSource6' from JSON`);
}
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type$inboundSchema = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type);
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type$outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type$;
(function (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type$) {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type$inboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type$.inboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type$outboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type$.outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type$outboundSchema;
})(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type$ || (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type$ = {}));
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200RepoId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200RepoId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeploymentsResponse200RepoId$;
(function (GetDeploymentGitSourceDeploymentsResponse200RepoId$) {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200RepoId$inboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200RepoId$.inboundSchema = GetDeploymentGitSourceDeploymentsResponse200RepoId$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200RepoId$outboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200RepoId$.outboundSchema = GetDeploymentGitSourceDeploymentsResponse200RepoId$outboundSchema;
})(GetDeploymentGitSourceDeploymentsResponse200RepoId$ || (GetDeploymentGitSourceDeploymentsResponse200RepoId$ = {}));
export function getDeploymentGitSourceDeploymentsResponse200RepoIdToJSON(getDeploymentGitSourceDeploymentsResponse200RepoId) {
    return JSON.stringify(GetDeploymentGitSourceDeploymentsResponse200RepoId$outboundSchema.parse(getDeploymentGitSourceDeploymentsResponse200RepoId));
}
export function getDeploymentGitSourceDeploymentsResponse200RepoIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSourceDeploymentsResponse200RepoId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSourceDeploymentsResponse200RepoId' from JSON`);
}
/** @internal */
export const GetDeploymentGitSource5$inboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type$inboundSchema,
    repoId: z.union([z.string(), z.number()]),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/** @internal */
export const GetDeploymentGitSource5$outboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type$outboundSchema,
    repoId: z.union([z.string(), z.number()]),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSource5$;
(function (GetDeploymentGitSource5$) {
    /** @deprecated use `GetDeploymentGitSource5$inboundSchema` instead. */
    GetDeploymentGitSource5$.inboundSchema = GetDeploymentGitSource5$inboundSchema;
    /** @deprecated use `GetDeploymentGitSource5$outboundSchema` instead. */
    GetDeploymentGitSource5$.outboundSchema = GetDeploymentGitSource5$outboundSchema;
})(GetDeploymentGitSource5$ || (GetDeploymentGitSource5$ = {}));
export function getDeploymentGitSource5ToJSON(getDeploymentGitSource5) {
    return JSON.stringify(GetDeploymentGitSource5$outboundSchema.parse(getDeploymentGitSource5));
}
export function getDeploymentGitSource5FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSource5$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSource5' from JSON`);
}
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type$inboundSchema = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type);
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type$outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type$;
(function (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type$) {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type$inboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type$.inboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type$outboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type$.outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type$outboundSchema;
})(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type$ || (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type$ = {}));
/** @internal */
export const GetDeploymentGitSource4$inboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type$inboundSchema,
    host: z.string(),
    org: z.string(),
    repo: z.string(),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/** @internal */
export const GetDeploymentGitSource4$outboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type$outboundSchema,
    host: z.string(),
    org: z.string(),
    repo: z.string(),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSource4$;
(function (GetDeploymentGitSource4$) {
    /** @deprecated use `GetDeploymentGitSource4$inboundSchema` instead. */
    GetDeploymentGitSource4$.inboundSchema = GetDeploymentGitSource4$inboundSchema;
    /** @deprecated use `GetDeploymentGitSource4$outboundSchema` instead. */
    GetDeploymentGitSource4$.outboundSchema = GetDeploymentGitSource4$outboundSchema;
})(GetDeploymentGitSource4$ || (GetDeploymentGitSource4$ = {}));
export function getDeploymentGitSource4ToJSON(getDeploymentGitSource4) {
    return JSON.stringify(GetDeploymentGitSource4$outboundSchema.parse(getDeploymentGitSource4));
}
export function getDeploymentGitSource4FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSource4$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSource4' from JSON`);
}
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type$inboundSchema = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type);
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type$outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type$;
(function (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type$) {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type$inboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type$.inboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type$outboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type$.outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type$outboundSchema;
})(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type$ || (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type$ = {}));
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponseRepoId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponseRepoId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeploymentsResponseRepoId$;
(function (GetDeploymentGitSourceDeploymentsResponseRepoId$) {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponseRepoId$inboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponseRepoId$.inboundSchema = GetDeploymentGitSourceDeploymentsResponseRepoId$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponseRepoId$outboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponseRepoId$.outboundSchema = GetDeploymentGitSourceDeploymentsResponseRepoId$outboundSchema;
})(GetDeploymentGitSourceDeploymentsResponseRepoId$ || (GetDeploymentGitSourceDeploymentsResponseRepoId$ = {}));
export function getDeploymentGitSourceDeploymentsResponseRepoIdToJSON(getDeploymentGitSourceDeploymentsResponseRepoId) {
    return JSON.stringify(GetDeploymentGitSourceDeploymentsResponseRepoId$outboundSchema.parse(getDeploymentGitSourceDeploymentsResponseRepoId));
}
export function getDeploymentGitSourceDeploymentsResponseRepoIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSourceDeploymentsResponseRepoId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSourceDeploymentsResponseRepoId' from JSON`);
}
/** @internal */
export const GetDeploymentGitSource3$inboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type$inboundSchema,
    host: z.string(),
    repoId: z.union([z.string(), z.number()]),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/** @internal */
export const GetDeploymentGitSource3$outboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type$outboundSchema,
    host: z.string(),
    repoId: z.union([z.string(), z.number()]),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSource3$;
(function (GetDeploymentGitSource3$) {
    /** @deprecated use `GetDeploymentGitSource3$inboundSchema` instead. */
    GetDeploymentGitSource3$.inboundSchema = GetDeploymentGitSource3$inboundSchema;
    /** @deprecated use `GetDeploymentGitSource3$outboundSchema` instead. */
    GetDeploymentGitSource3$.outboundSchema = GetDeploymentGitSource3$outboundSchema;
})(GetDeploymentGitSource3$ || (GetDeploymentGitSource3$ = {}));
export function getDeploymentGitSource3ToJSON(getDeploymentGitSource3) {
    return JSON.stringify(GetDeploymentGitSource3$outboundSchema.parse(getDeploymentGitSource3));
}
export function getDeploymentGitSource3FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSource3$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSource3' from JSON`);
}
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type$inboundSchema = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type);
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type$outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type$;
(function (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type$) {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type$inboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type$.inboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type$outboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type$.outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type$outboundSchema;
})(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type$ || (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type$ = {}));
/** @internal */
export const GetDeploymentGitSource2$inboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type$inboundSchema,
    org: z.string(),
    repo: z.string(),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/** @internal */
export const GetDeploymentGitSource2$outboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type$outboundSchema,
    org: z.string(),
    repo: z.string(),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSource2$;
(function (GetDeploymentGitSource2$) {
    /** @deprecated use `GetDeploymentGitSource2$inboundSchema` instead. */
    GetDeploymentGitSource2$.inboundSchema = GetDeploymentGitSource2$inboundSchema;
    /** @deprecated use `GetDeploymentGitSource2$outboundSchema` instead. */
    GetDeploymentGitSource2$.outboundSchema = GetDeploymentGitSource2$outboundSchema;
})(GetDeploymentGitSource2$ || (GetDeploymentGitSource2$ = {}));
export function getDeploymentGitSource2ToJSON(getDeploymentGitSource2) {
    return JSON.stringify(GetDeploymentGitSource2$outboundSchema.parse(getDeploymentGitSource2));
}
export function getDeploymentGitSource2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSource2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSource2' from JSON`);
}
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type$inboundSchema = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type);
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type$outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type$;
(function (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type$) {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type$inboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type$.inboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type$outboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type$.outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type$outboundSchema;
})(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type$ || (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type$ = {}));
/** @internal */
export const GetDeploymentGitSourceDeploymentsRepoId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const GetDeploymentGitSourceDeploymentsRepoId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeploymentsRepoId$;
(function (GetDeploymentGitSourceDeploymentsRepoId$) {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsRepoId$inboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsRepoId$.inboundSchema = GetDeploymentGitSourceDeploymentsRepoId$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsRepoId$outboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsRepoId$.outboundSchema = GetDeploymentGitSourceDeploymentsRepoId$outboundSchema;
})(GetDeploymentGitSourceDeploymentsRepoId$ || (GetDeploymentGitSourceDeploymentsRepoId$ = {}));
export function getDeploymentGitSourceDeploymentsRepoIdToJSON(getDeploymentGitSourceDeploymentsRepoId) {
    return JSON.stringify(GetDeploymentGitSourceDeploymentsRepoId$outboundSchema.parse(getDeploymentGitSourceDeploymentsRepoId));
}
export function getDeploymentGitSourceDeploymentsRepoIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSourceDeploymentsRepoId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSourceDeploymentsRepoId' from JSON`);
}
/** @internal */
export const GetDeploymentGitSource1$inboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type$inboundSchema,
    repoId: z.union([z.string(), z.number()]),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/** @internal */
export const GetDeploymentGitSource1$outboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type$outboundSchema,
    repoId: z.union([z.string(), z.number()]),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSource1$;
(function (GetDeploymentGitSource1$) {
    /** @deprecated use `GetDeploymentGitSource1$inboundSchema` instead. */
    GetDeploymentGitSource1$.inboundSchema = GetDeploymentGitSource1$inboundSchema;
    /** @deprecated use `GetDeploymentGitSource1$outboundSchema` instead. */
    GetDeploymentGitSource1$.outboundSchema = GetDeploymentGitSource1$outboundSchema;
})(GetDeploymentGitSource1$ || (GetDeploymentGitSource1$ = {}));
export function getDeploymentGitSource1ToJSON(getDeploymentGitSource1) {
    return JSON.stringify(GetDeploymentGitSource1$outboundSchema.parse(getDeploymentGitSource1));
}
export function getDeploymentGitSource1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSource1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSource1' from JSON`);
}
/** @internal */
export const ResponseBodyGitSource$inboundSchema = z.union([
    z.lazy(() => GetDeploymentGitSource12$inboundSchema),
    z.lazy(() => GetDeploymentGitSource15$inboundSchema),
    z.lazy(() => GetDeploymentGitSource4$inboundSchema),
    z.lazy(() => GetDeploymentGitSource10$inboundSchema),
    z.lazy(() => GetDeploymentGitSource11$inboundSchema),
    z.lazy(() => GetDeploymentGitSource13$inboundSchema),
    z.lazy(() => GetDeploymentGitSource14$inboundSchema),
    z.lazy(() => GetDeploymentGitSource2$inboundSchema),
    z.lazy(() => GetDeploymentGitSource3$inboundSchema),
    z.lazy(() => GetDeploymentGitSource6$inboundSchema),
    z.lazy(() => GetDeploymentGitSource9$inboundSchema),
    z.lazy(() => GetDeploymentGitSource1$inboundSchema),
    z.lazy(() => GetDeploymentGitSource5$inboundSchema),
    z.lazy(() => GetDeploymentGitSource7$inboundSchema),
    z.lazy(() => GetDeploymentGitSource8$inboundSchema),
]);
/** @internal */
export const ResponseBodyGitSource$outboundSchema = z.union([
    z.lazy(() => GetDeploymentGitSource12$outboundSchema),
    z.lazy(() => GetDeploymentGitSource15$outboundSchema),
    z.lazy(() => GetDeploymentGitSource4$outboundSchema),
    z.lazy(() => GetDeploymentGitSource10$outboundSchema),
    z.lazy(() => GetDeploymentGitSource11$outboundSchema),
    z.lazy(() => GetDeploymentGitSource13$outboundSchema),
    z.lazy(() => GetDeploymentGitSource14$outboundSchema),
    z.lazy(() => GetDeploymentGitSource2$outboundSchema),
    z.lazy(() => GetDeploymentGitSource3$outboundSchema),
    z.lazy(() => GetDeploymentGitSource6$outboundSchema),
    z.lazy(() => GetDeploymentGitSource9$outboundSchema),
    z.lazy(() => GetDeploymentGitSource1$outboundSchema),
    z.lazy(() => GetDeploymentGitSource5$outboundSchema),
    z.lazy(() => GetDeploymentGitSource7$outboundSchema),
    z.lazy(() => GetDeploymentGitSource8$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyGitSource$;
(function (ResponseBodyGitSource$) {
    /** @deprecated use `ResponseBodyGitSource$inboundSchema` instead. */
    ResponseBodyGitSource$.inboundSchema = ResponseBodyGitSource$inboundSchema;
    /** @deprecated use `ResponseBodyGitSource$outboundSchema` instead. */
    ResponseBodyGitSource$.outboundSchema = ResponseBodyGitSource$outboundSchema;
})(ResponseBodyGitSource$ || (ResponseBodyGitSource$ = {}));
export function responseBodyGitSourceToJSON(responseBodyGitSource) {
    return JSON.stringify(ResponseBodyGitSource$outboundSchema.parse(responseBodyGitSource));
}
export function responseBodyGitSourceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyGitSource$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyGitSource' from JSON`);
}
/** @internal */
export const GetDeploymentResponseBodyNodeVersion$inboundSchema = z.nativeEnum(GetDeploymentResponseBodyNodeVersion);
/** @internal */
export const GetDeploymentResponseBodyNodeVersion$outboundSchema = GetDeploymentResponseBodyNodeVersion$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentResponseBodyNodeVersion$;
(function (GetDeploymentResponseBodyNodeVersion$) {
    /** @deprecated use `GetDeploymentResponseBodyNodeVersion$inboundSchema` instead. */
    GetDeploymentResponseBodyNodeVersion$.inboundSchema = GetDeploymentResponseBodyNodeVersion$inboundSchema;
    /** @deprecated use `GetDeploymentResponseBodyNodeVersion$outboundSchema` instead. */
    GetDeploymentResponseBodyNodeVersion$.outboundSchema = GetDeploymentResponseBodyNodeVersion$outboundSchema;
})(GetDeploymentResponseBodyNodeVersion$ || (GetDeploymentResponseBodyNodeVersion$ = {}));
/** @internal */
export const GetDeploymentResponseBodyProject$inboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    framework: z.nullable(z.string()).optional(),
});
/** @internal */
export const GetDeploymentResponseBodyProject$outboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    framework: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentResponseBodyProject$;
(function (GetDeploymentResponseBodyProject$) {
    /** @deprecated use `GetDeploymentResponseBodyProject$inboundSchema` instead. */
    GetDeploymentResponseBodyProject$.inboundSchema = GetDeploymentResponseBodyProject$inboundSchema;
    /** @deprecated use `GetDeploymentResponseBodyProject$outboundSchema` instead. */
    GetDeploymentResponseBodyProject$.outboundSchema = GetDeploymentResponseBodyProject$outboundSchema;
})(GetDeploymentResponseBodyProject$ || (GetDeploymentResponseBodyProject$ = {}));
export function getDeploymentResponseBodyProjectToJSON(getDeploymentResponseBodyProject) {
    return JSON.stringify(GetDeploymentResponseBodyProject$outboundSchema.parse(getDeploymentResponseBodyProject));
}
export function getDeploymentResponseBodyProjectFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentResponseBodyProject$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentResponseBodyProject' from JSON`);
}
/** @internal */
export const GetDeploymentResponseBodyReadySubstate$inboundSchema = z.nativeEnum(GetDeploymentResponseBodyReadySubstate);
/** @internal */
export const GetDeploymentResponseBodyReadySubstate$outboundSchema = GetDeploymentResponseBodyReadySubstate$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentResponseBodyReadySubstate$;
(function (GetDeploymentResponseBodyReadySubstate$) {
    /** @deprecated use `GetDeploymentResponseBodyReadySubstate$inboundSchema` instead. */
    GetDeploymentResponseBodyReadySubstate$.inboundSchema = GetDeploymentResponseBodyReadySubstate$inboundSchema;
    /** @deprecated use `GetDeploymentResponseBodyReadySubstate$outboundSchema` instead. */
    GetDeploymentResponseBodyReadySubstate$.outboundSchema = GetDeploymentResponseBodyReadySubstate$outboundSchema;
})(GetDeploymentResponseBodyReadySubstate$ || (GetDeploymentResponseBodyReadySubstate$ = {}));
/** @internal */
export const GetDeploymentResponseBodySource$inboundSchema = z.nativeEnum(GetDeploymentResponseBodySource);
/** @internal */
export const GetDeploymentResponseBodySource$outboundSchema = GetDeploymentResponseBodySource$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentResponseBodySource$;
(function (GetDeploymentResponseBodySource$) {
    /** @deprecated use `GetDeploymentResponseBodySource$inboundSchema` instead. */
    GetDeploymentResponseBodySource$.inboundSchema = GetDeploymentResponseBodySource$inboundSchema;
    /** @deprecated use `GetDeploymentResponseBodySource$outboundSchema` instead. */
    GetDeploymentResponseBodySource$.outboundSchema = GetDeploymentResponseBodySource$outboundSchema;
})(GetDeploymentResponseBodySource$ || (GetDeploymentResponseBodySource$ = {}));
/** @internal */
export const GetDeploymentResponseBodyTarget$inboundSchema = z.nativeEnum(GetDeploymentResponseBodyTarget);
/** @internal */
export const GetDeploymentResponseBodyTarget$outboundSchema = GetDeploymentResponseBodyTarget$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentResponseBodyTarget$;
(function (GetDeploymentResponseBodyTarget$) {
    /** @deprecated use `GetDeploymentResponseBodyTarget$inboundSchema` instead. */
    GetDeploymentResponseBodyTarget$.inboundSchema = GetDeploymentResponseBodyTarget$inboundSchema;
    /** @deprecated use `GetDeploymentResponseBodyTarget$outboundSchema` instead. */
    GetDeploymentResponseBodyTarget$.outboundSchema = GetDeploymentResponseBodyTarget$outboundSchema;
})(GetDeploymentResponseBodyTarget$ || (GetDeploymentResponseBodyTarget$ = {}));
/** @internal */
export const GetDeploymentResponseBodyOidcTokenClaims$inboundSchema = z.object({
    iss: z.string(),
    sub: z.string(),
    scope: z.string(),
    aud: z.string(),
    owner: z.string(),
    owner_id: z.string(),
    project: z.string(),
    project_id: z.string(),
    environment: z.string(),
}).transform((v) => {
    return remap$(v, {
        "owner_id": "ownerId",
        "project_id": "projectId",
    });
});
/** @internal */
export const GetDeploymentResponseBodyOidcTokenClaims$outboundSchema = z.object({
    iss: z.string(),
    sub: z.string(),
    scope: z.string(),
    aud: z.string(),
    owner: z.string(),
    ownerId: z.string(),
    project: z.string(),
    projectId: z.string(),
    environment: z.string(),
}).transform((v) => {
    return remap$(v, {
        ownerId: "owner_id",
        projectId: "project_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentResponseBodyOidcTokenClaims$;
(function (GetDeploymentResponseBodyOidcTokenClaims$) {
    /** @deprecated use `GetDeploymentResponseBodyOidcTokenClaims$inboundSchema` instead. */
    GetDeploymentResponseBodyOidcTokenClaims$.inboundSchema = GetDeploymentResponseBodyOidcTokenClaims$inboundSchema;
    /** @deprecated use `GetDeploymentResponseBodyOidcTokenClaims$outboundSchema` instead. */
    GetDeploymentResponseBodyOidcTokenClaims$.outboundSchema = GetDeploymentResponseBodyOidcTokenClaims$outboundSchema;
})(GetDeploymentResponseBodyOidcTokenClaims$ || (GetDeploymentResponseBodyOidcTokenClaims$ = {}));
export function getDeploymentResponseBodyOidcTokenClaimsToJSON(getDeploymentResponseBodyOidcTokenClaims) {
    return JSON.stringify(GetDeploymentResponseBodyOidcTokenClaims$outboundSchema.parse(getDeploymentResponseBodyOidcTokenClaims));
}
export function getDeploymentResponseBodyOidcTokenClaimsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentResponseBodyOidcTokenClaims$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentResponseBodyOidcTokenClaims' from JSON`);
}
/** @internal */
export const GetDeploymentResponseBody2$inboundSchema = z.object({
    alias: z.array(z.string()).optional(),
    aliasAssigned: z.boolean(),
    bootedAt: z.number(),
    buildingAt: z.number(),
    buildContainerFinishedAt: z.number().optional(),
    buildSkipped: z.boolean(),
    creator: z.lazy(() => GetDeploymentResponseBodyCreator$inboundSchema),
    initReadyAt: z.number().optional(),
    isFirstBranchDeployment: z.boolean().optional(),
    lambdas: z.array(z.lazy(() => ResponseBodyLambdas$inboundSchema)).optional(),
    public: z.boolean(),
    ready: z.number().optional(),
    status: GetDeploymentResponseBodyStatus$inboundSchema,
    team: z.lazy(() => ResponseBodyTeam$inboundSchema).optional(),
    userAliases: z.array(z.string()).optional(),
    previewCommentsEnabled: z.boolean().optional(),
    ttyBuildLogs: z.boolean().optional(),
    customEnvironment: z.union([
        z.lazy(() => GetDeploymentCustomEnvironment1$inboundSchema),
        z.lazy(() => GetDeploymentCustomEnvironment2$inboundSchema),
    ]).optional(),
    oomReport: ResponseBodyOomReport$inboundSchema.optional(),
    aliasWarning: z.nullable(z.lazy(() => ResponseBodyAliasWarning$inboundSchema))
        .optional(),
    id: z.string(),
    createdAt: z.number(),
    readyState: GetDeploymentResponseBodyReadyState$inboundSchema,
    name: z.string(),
    type: GetDeploymentResponseBodyDeploymentsType$inboundSchema,
    aliasError: z.nullable(z.lazy(() => GetDeploymentResponseBodyAliasError$inboundSchema)).optional(),
    aliasFinal: z.nullable(z.string()).optional(),
    autoAssignCustomDomains: z.boolean().optional(),
    automaticAliases: z.array(z.string()).optional(),
    buildErrorAt: z.number().optional(),
    checksState: GetDeploymentResponseBodyChecksState$inboundSchema.optional(),
    checksConclusion: GetDeploymentResponseBodyChecksConclusion$inboundSchema
        .optional(),
    deletedAt: z.nullable(z.number()).optional(),
    defaultRoute: z.string().optional(),
    canceledAt: z.number().optional(),
    errorCode: z.string().optional(),
    errorLink: z.string().optional(),
    errorMessage: z.nullable(z.string()).optional(),
    errorStep: z.string().optional(),
    passiveRegions: z.array(z.string()).optional(),
    gitSource: z.union([
        z.lazy(() => GetDeploymentGitSource12$inboundSchema),
        z.lazy(() => GetDeploymentGitSource15$inboundSchema),
        z.lazy(() => GetDeploymentGitSource4$inboundSchema),
        z.lazy(() => GetDeploymentGitSource10$inboundSchema),
        z.lazy(() => GetDeploymentGitSource11$inboundSchema),
        z.lazy(() => GetDeploymentGitSource13$inboundSchema),
        z.lazy(() => GetDeploymentGitSource14$inboundSchema),
        z.lazy(() => GetDeploymentGitSource2$inboundSchema),
        z.lazy(() => GetDeploymentGitSource3$inboundSchema),
        z.lazy(() => GetDeploymentGitSource6$inboundSchema),
        z.lazy(() => GetDeploymentGitSource9$inboundSchema),
        z.lazy(() => GetDeploymentGitSource1$inboundSchema),
        z.lazy(() => GetDeploymentGitSource5$inboundSchema),
        z.lazy(() => GetDeploymentGitSource7$inboundSchema),
        z.lazy(() => GetDeploymentGitSource8$inboundSchema),
    ]).optional(),
    meta: z.record(z.string()),
    originCacheRegion: z.string().optional(),
    nodeVersion: GetDeploymentResponseBodyNodeVersion$inboundSchema.optional(),
    project: z.lazy(() => GetDeploymentResponseBodyProject$inboundSchema)
        .optional(),
    readySubstate: GetDeploymentResponseBodyReadySubstate$inboundSchema
        .optional(),
    regions: z.array(z.string()),
    softDeletedByRetention: z.boolean().optional(),
    source: GetDeploymentResponseBodySource$inboundSchema.optional(),
    target: z.nullable(GetDeploymentResponseBodyTarget$inboundSchema).optional(),
    undeletedAt: z.number().optional(),
    url: z.string(),
    version: z.number(),
    oidcTokenClaims: z.lazy(() => GetDeploymentResponseBodyOidcTokenClaims$inboundSchema).optional(),
});
/** @internal */
export const GetDeploymentResponseBody2$outboundSchema = z.object({
    alias: z.array(z.string()).optional(),
    aliasAssigned: z.boolean(),
    bootedAt: z.number(),
    buildingAt: z.number(),
    buildContainerFinishedAt: z.number().optional(),
    buildSkipped: z.boolean(),
    creator: z.lazy(() => GetDeploymentResponseBodyCreator$outboundSchema),
    initReadyAt: z.number().optional(),
    isFirstBranchDeployment: z.boolean().optional(),
    lambdas: z.array(z.lazy(() => ResponseBodyLambdas$outboundSchema)).optional(),
    public: z.boolean(),
    ready: z.number().optional(),
    status: GetDeploymentResponseBodyStatus$outboundSchema,
    team: z.lazy(() => ResponseBodyTeam$outboundSchema).optional(),
    userAliases: z.array(z.string()).optional(),
    previewCommentsEnabled: z.boolean().optional(),
    ttyBuildLogs: z.boolean().optional(),
    customEnvironment: z.union([
        z.lazy(() => GetDeploymentCustomEnvironment1$outboundSchema),
        z.lazy(() => GetDeploymentCustomEnvironment2$outboundSchema),
    ]).optional(),
    oomReport: ResponseBodyOomReport$outboundSchema.optional(),
    aliasWarning: z.nullable(z.lazy(() => ResponseBodyAliasWarning$outboundSchema)).optional(),
    id: z.string(),
    createdAt: z.number(),
    readyState: GetDeploymentResponseBodyReadyState$outboundSchema,
    name: z.string(),
    type: GetDeploymentResponseBodyDeploymentsType$outboundSchema,
    aliasError: z.nullable(z.lazy(() => GetDeploymentResponseBodyAliasError$outboundSchema)).optional(),
    aliasFinal: z.nullable(z.string()).optional(),
    autoAssignCustomDomains: z.boolean().optional(),
    automaticAliases: z.array(z.string()).optional(),
    buildErrorAt: z.number().optional(),
    checksState: GetDeploymentResponseBodyChecksState$outboundSchema.optional(),
    checksConclusion: GetDeploymentResponseBodyChecksConclusion$outboundSchema
        .optional(),
    deletedAt: z.nullable(z.number()).optional(),
    defaultRoute: z.string().optional(),
    canceledAt: z.number().optional(),
    errorCode: z.string().optional(),
    errorLink: z.string().optional(),
    errorMessage: z.nullable(z.string()).optional(),
    errorStep: z.string().optional(),
    passiveRegions: z.array(z.string()).optional(),
    gitSource: z.union([
        z.lazy(() => GetDeploymentGitSource12$outboundSchema),
        z.lazy(() => GetDeploymentGitSource15$outboundSchema),
        z.lazy(() => GetDeploymentGitSource4$outboundSchema),
        z.lazy(() => GetDeploymentGitSource10$outboundSchema),
        z.lazy(() => GetDeploymentGitSource11$outboundSchema),
        z.lazy(() => GetDeploymentGitSource13$outboundSchema),
        z.lazy(() => GetDeploymentGitSource14$outboundSchema),
        z.lazy(() => GetDeploymentGitSource2$outboundSchema),
        z.lazy(() => GetDeploymentGitSource3$outboundSchema),
        z.lazy(() => GetDeploymentGitSource6$outboundSchema),
        z.lazy(() => GetDeploymentGitSource9$outboundSchema),
        z.lazy(() => GetDeploymentGitSource1$outboundSchema),
        z.lazy(() => GetDeploymentGitSource5$outboundSchema),
        z.lazy(() => GetDeploymentGitSource7$outboundSchema),
        z.lazy(() => GetDeploymentGitSource8$outboundSchema),
    ]).optional(),
    meta: z.record(z.string()),
    originCacheRegion: z.string().optional(),
    nodeVersion: GetDeploymentResponseBodyNodeVersion$outboundSchema.optional(),
    project: z.lazy(() => GetDeploymentResponseBodyProject$outboundSchema)
        .optional(),
    readySubstate: GetDeploymentResponseBodyReadySubstate$outboundSchema
        .optional(),
    regions: z.array(z.string()),
    softDeletedByRetention: z.boolean().optional(),
    source: GetDeploymentResponseBodySource$outboundSchema.optional(),
    target: z.nullable(GetDeploymentResponseBodyTarget$outboundSchema).optional(),
    undeletedAt: z.number().optional(),
    url: z.string(),
    version: z.number(),
    oidcTokenClaims: z.lazy(() => GetDeploymentResponseBodyOidcTokenClaims$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentResponseBody2$;
(function (GetDeploymentResponseBody2$) {
    /** @deprecated use `GetDeploymentResponseBody2$inboundSchema` instead. */
    GetDeploymentResponseBody2$.inboundSchema = GetDeploymentResponseBody2$inboundSchema;
    /** @deprecated use `GetDeploymentResponseBody2$outboundSchema` instead. */
    GetDeploymentResponseBody2$.outboundSchema = GetDeploymentResponseBody2$outboundSchema;
})(GetDeploymentResponseBody2$ || (GetDeploymentResponseBody2$ = {}));
export function getDeploymentResponseBody2ToJSON(getDeploymentResponseBody2) {
    return JSON.stringify(GetDeploymentResponseBody2$outboundSchema.parse(getDeploymentResponseBody2));
}
export function getDeploymentResponseBody2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentResponseBody2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentResponseBody2' from JSON`);
}
/** @internal */
export const ResponseBodyAliasAssignedAt$inboundSchema = z.union([z.number(), z.boolean()]);
/** @internal */
export const ResponseBodyAliasAssignedAt$outboundSchema = z.union([z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyAliasAssignedAt$;
(function (ResponseBodyAliasAssignedAt$) {
    /** @deprecated use `ResponseBodyAliasAssignedAt$inboundSchema` instead. */
    ResponseBodyAliasAssignedAt$.inboundSchema = ResponseBodyAliasAssignedAt$inboundSchema;
    /** @deprecated use `ResponseBodyAliasAssignedAt$outboundSchema` instead. */
    ResponseBodyAliasAssignedAt$.outboundSchema = ResponseBodyAliasAssignedAt$outboundSchema;
})(ResponseBodyAliasAssignedAt$ || (ResponseBodyAliasAssignedAt$ = {}));
export function responseBodyAliasAssignedAtToJSON(responseBodyAliasAssignedAt) {
    return JSON.stringify(ResponseBodyAliasAssignedAt$outboundSchema.parse(responseBodyAliasAssignedAt));
}
export function responseBodyAliasAssignedAtFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyAliasAssignedAt$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyAliasAssignedAt' from JSON`);
}
/** @internal */
export const ResponseBodyBuild$inboundSchema = z.object({
    env: z.array(z.string()),
});
/** @internal */
export const ResponseBodyBuild$outboundSchema = z.object({
    env: z.array(z.string()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyBuild$;
(function (ResponseBodyBuild$) {
    /** @deprecated use `ResponseBodyBuild$inboundSchema` instead. */
    ResponseBodyBuild$.inboundSchema = ResponseBodyBuild$inboundSchema;
    /** @deprecated use `ResponseBodyBuild$outboundSchema` instead. */
    ResponseBodyBuild$.outboundSchema = ResponseBodyBuild$outboundSchema;
})(ResponseBodyBuild$ || (ResponseBodyBuild$ = {}));
export function responseBodyBuildToJSON(responseBodyBuild) {
    return JSON.stringify(ResponseBodyBuild$outboundSchema.parse(responseBodyBuild));
}
export function responseBodyBuildFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyBuild$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyBuild' from JSON`);
}
/** @internal */
export const ResponseBodyBuilds$inboundSchema = z.object({
    use: z.string(),
    src: z.string().optional(),
    config: z.record(z.any()).optional(),
});
/** @internal */
export const ResponseBodyBuilds$outboundSchema = z.object({
    use: z.string(),
    src: z.string().optional(),
    config: z.record(z.any()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyBuilds$;
(function (ResponseBodyBuilds$) {
    /** @deprecated use `ResponseBodyBuilds$inboundSchema` instead. */
    ResponseBodyBuilds$.inboundSchema = ResponseBodyBuilds$inboundSchema;
    /** @deprecated use `ResponseBodyBuilds$outboundSchema` instead. */
    ResponseBodyBuilds$.outboundSchema = ResponseBodyBuilds$outboundSchema;
})(ResponseBodyBuilds$ || (ResponseBodyBuilds$ = {}));
export function responseBodyBuildsToJSON(responseBodyBuilds) {
    return JSON.stringify(ResponseBodyBuilds$outboundSchema.parse(responseBodyBuilds));
}
export function responseBodyBuildsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyBuilds$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyBuilds' from JSON`);
}
/** @internal */
export const ResponseBodyFramework$inboundSchema = z.nativeEnum(ResponseBodyFramework);
/** @internal */
export const ResponseBodyFramework$outboundSchema = ResponseBodyFramework$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyFramework$;
(function (ResponseBodyFramework$) {
    /** @deprecated use `ResponseBodyFramework$inboundSchema` instead. */
    ResponseBodyFramework$.inboundSchema = ResponseBodyFramework$inboundSchema;
    /** @deprecated use `ResponseBodyFramework$outboundSchema` instead. */
    ResponseBodyFramework$.outboundSchema = ResponseBodyFramework$outboundSchema;
})(ResponseBodyFramework$ || (ResponseBodyFramework$ = {}));
/** @internal */
export const ResponseBodySpeedInsights$inboundSchema = z.object({
    id: z.string(),
    enabledAt: z.number().optional(),
    disabledAt: z.number().optional(),
    canceledAt: z.number().optional(),
    hasData: z.boolean().optional(),
    paidAt: z.number().optional(),
});
/** @internal */
export const ResponseBodySpeedInsights$outboundSchema = z.object({
    id: z.string(),
    enabledAt: z.number().optional(),
    disabledAt: z.number().optional(),
    canceledAt: z.number().optional(),
    hasData: z.boolean().optional(),
    paidAt: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodySpeedInsights$;
(function (ResponseBodySpeedInsights$) {
    /** @deprecated use `ResponseBodySpeedInsights$inboundSchema` instead. */
    ResponseBodySpeedInsights$.inboundSchema = ResponseBodySpeedInsights$inboundSchema;
    /** @deprecated use `ResponseBodySpeedInsights$outboundSchema` instead. */
    ResponseBodySpeedInsights$.outboundSchema = ResponseBodySpeedInsights$outboundSchema;
})(ResponseBodySpeedInsights$ || (ResponseBodySpeedInsights$ = {}));
export function responseBodySpeedInsightsToJSON(responseBodySpeedInsights) {
    return JSON.stringify(ResponseBodySpeedInsights$outboundSchema.parse(responseBodySpeedInsights));
}
export function responseBodySpeedInsightsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodySpeedInsights$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodySpeedInsights' from JSON`);
}
/** @internal */
export const ResponseBodyWebAnalytics$inboundSchema = z.object({
    id: z.string(),
    disabledAt: z.number().optional(),
    canceledAt: z.number().optional(),
    enabledAt: z.number().optional(),
    hasData: z.boolean().optional(),
});
/** @internal */
export const ResponseBodyWebAnalytics$outboundSchema = z.object({
    id: z.string(),
    disabledAt: z.number().optional(),
    canceledAt: z.number().optional(),
    enabledAt: z.number().optional(),
    hasData: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyWebAnalytics$;
(function (ResponseBodyWebAnalytics$) {
    /** @deprecated use `ResponseBodyWebAnalytics$inboundSchema` instead. */
    ResponseBodyWebAnalytics$.inboundSchema = ResponseBodyWebAnalytics$inboundSchema;
    /** @deprecated use `ResponseBodyWebAnalytics$outboundSchema` instead. */
    ResponseBodyWebAnalytics$.outboundSchema = ResponseBodyWebAnalytics$outboundSchema;
})(ResponseBodyWebAnalytics$ || (ResponseBodyWebAnalytics$ = {}));
export function responseBodyWebAnalyticsToJSON(responseBodyWebAnalytics) {
    return JSON.stringify(ResponseBodyWebAnalytics$outboundSchema.parse(responseBodyWebAnalytics));
}
export function responseBodyWebAnalyticsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyWebAnalytics$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyWebAnalytics' from JSON`);
}
/** @internal */
export const ResponseBodyProjectSettings$inboundSchema = z.object({
    buildCommand: z.nullable(z.string()).optional(),
    devCommand: z.nullable(z.string()).optional(),
    framework: z.nullable(ResponseBodyFramework$inboundSchema).optional(),
    commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
    installCommand: z.nullable(z.string()).optional(),
    outputDirectory: z.nullable(z.string()).optional(),
    speedInsights: z.lazy(() => ResponseBodySpeedInsights$inboundSchema)
        .optional(),
    webAnalytics: z.lazy(() => ResponseBodyWebAnalytics$inboundSchema).optional(),
});
/** @internal */
export const ResponseBodyProjectSettings$outboundSchema = z.object({
    buildCommand: z.nullable(z.string()).optional(),
    devCommand: z.nullable(z.string()).optional(),
    framework: z.nullable(ResponseBodyFramework$outboundSchema).optional(),
    commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
    installCommand: z.nullable(z.string()).optional(),
    outputDirectory: z.nullable(z.string()).optional(),
    speedInsights: z.lazy(() => ResponseBodySpeedInsights$outboundSchema)
        .optional(),
    webAnalytics: z.lazy(() => ResponseBodyWebAnalytics$outboundSchema)
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyProjectSettings$;
(function (ResponseBodyProjectSettings$) {
    /** @deprecated use `ResponseBodyProjectSettings$inboundSchema` instead. */
    ResponseBodyProjectSettings$.inboundSchema = ResponseBodyProjectSettings$inboundSchema;
    /** @deprecated use `ResponseBodyProjectSettings$outboundSchema` instead. */
    ResponseBodyProjectSettings$.outboundSchema = ResponseBodyProjectSettings$outboundSchema;
})(ResponseBodyProjectSettings$ || (ResponseBodyProjectSettings$ = {}));
export function responseBodyProjectSettingsToJSON(responseBodyProjectSettings) {
    return JSON.stringify(ResponseBodyProjectSettings$outboundSchema.parse(responseBodyProjectSettings));
}
export function responseBodyProjectSettingsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyProjectSettings$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyProjectSettings' from JSON`);
}
/** @internal */
export const GetDeploymentResponseBodyDeploymentsStatus$inboundSchema = z
    .nativeEnum(GetDeploymentResponseBodyDeploymentsStatus);
/** @internal */
export const GetDeploymentResponseBodyDeploymentsStatus$outboundSchema = GetDeploymentResponseBodyDeploymentsStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentResponseBodyDeploymentsStatus$;
(function (GetDeploymentResponseBodyDeploymentsStatus$) {
    /** @deprecated use `GetDeploymentResponseBodyDeploymentsStatus$inboundSchema` instead. */
    GetDeploymentResponseBodyDeploymentsStatus$.inboundSchema = GetDeploymentResponseBodyDeploymentsStatus$inboundSchema;
    /** @deprecated use `GetDeploymentResponseBodyDeploymentsStatus$outboundSchema` instead. */
    GetDeploymentResponseBodyDeploymentsStatus$.outboundSchema = GetDeploymentResponseBodyDeploymentsStatus$outboundSchema;
})(GetDeploymentResponseBodyDeploymentsStatus$ || (GetDeploymentResponseBodyDeploymentsStatus$ = {}));
/** @internal */
export const ResponseBodyIntegrations$inboundSchema = z.object({
    status: GetDeploymentResponseBodyDeploymentsStatus$inboundSchema,
    startedAt: z.number(),
    completedAt: z.number().optional(),
    skippedAt: z.number().optional(),
    skippedBy: z.string().optional(),
});
/** @internal */
export const ResponseBodyIntegrations$outboundSchema = z.object({
    status: GetDeploymentResponseBodyDeploymentsStatus$outboundSchema,
    startedAt: z.number(),
    completedAt: z.number().optional(),
    skippedAt: z.number().optional(),
    skippedBy: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyIntegrations$;
(function (ResponseBodyIntegrations$) {
    /** @deprecated use `ResponseBodyIntegrations$inboundSchema` instead. */
    ResponseBodyIntegrations$.inboundSchema = ResponseBodyIntegrations$inboundSchema;
    /** @deprecated use `ResponseBodyIntegrations$outboundSchema` instead. */
    ResponseBodyIntegrations$.outboundSchema = ResponseBodyIntegrations$outboundSchema;
})(ResponseBodyIntegrations$ || (ResponseBodyIntegrations$ = {}));
export function responseBodyIntegrationsToJSON(responseBodyIntegrations) {
    return JSON.stringify(ResponseBodyIntegrations$outboundSchema.parse(responseBodyIntegrations));
}
export function responseBodyIntegrationsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyIntegrations$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyIntegrations' from JSON`);
}
/** @internal */
export const ResponseBodyProtocol$inboundSchema = z.nativeEnum(ResponseBodyProtocol);
/** @internal */
export const ResponseBodyProtocol$outboundSchema = ResponseBodyProtocol$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyProtocol$;
(function (ResponseBodyProtocol$) {
    /** @deprecated use `ResponseBodyProtocol$inboundSchema` instead. */
    ResponseBodyProtocol$.inboundSchema = ResponseBodyProtocol$inboundSchema;
    /** @deprecated use `ResponseBodyProtocol$outboundSchema` instead. */
    ResponseBodyProtocol$.outboundSchema = ResponseBodyProtocol$outboundSchema;
})(ResponseBodyProtocol$ || (ResponseBodyProtocol$ = {}));
/** @internal */
export const ResponseBodyRemotePatterns$inboundSchema = z.object({
    protocol: ResponseBodyProtocol$inboundSchema.optional(),
    hostname: z.string(),
    port: z.string().optional(),
    pathname: z.string().optional(),
    search: z.string().optional(),
});
/** @internal */
export const ResponseBodyRemotePatterns$outboundSchema = z.object({
    protocol: ResponseBodyProtocol$outboundSchema.optional(),
    hostname: z.string(),
    port: z.string().optional(),
    pathname: z.string().optional(),
    search: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyRemotePatterns$;
(function (ResponseBodyRemotePatterns$) {
    /** @deprecated use `ResponseBodyRemotePatterns$inboundSchema` instead. */
    ResponseBodyRemotePatterns$.inboundSchema = ResponseBodyRemotePatterns$inboundSchema;
    /** @deprecated use `ResponseBodyRemotePatterns$outboundSchema` instead. */
    ResponseBodyRemotePatterns$.outboundSchema = ResponseBodyRemotePatterns$outboundSchema;
})(ResponseBodyRemotePatterns$ || (ResponseBodyRemotePatterns$ = {}));
export function responseBodyRemotePatternsToJSON(responseBodyRemotePatterns) {
    return JSON.stringify(ResponseBodyRemotePatterns$outboundSchema.parse(responseBodyRemotePatterns));
}
export function responseBodyRemotePatternsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyRemotePatterns$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyRemotePatterns' from JSON`);
}
/** @internal */
export const ResponseBodyLocalPatterns$inboundSchema = z.object({
    pathname: z.string().optional(),
    search: z.string().optional(),
});
/** @internal */
export const ResponseBodyLocalPatterns$outboundSchema = z.object({
    pathname: z.string().optional(),
    search: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyLocalPatterns$;
(function (ResponseBodyLocalPatterns$) {
    /** @deprecated use `ResponseBodyLocalPatterns$inboundSchema` instead. */
    ResponseBodyLocalPatterns$.inboundSchema = ResponseBodyLocalPatterns$inboundSchema;
    /** @deprecated use `ResponseBodyLocalPatterns$outboundSchema` instead. */
    ResponseBodyLocalPatterns$.outboundSchema = ResponseBodyLocalPatterns$outboundSchema;
})(ResponseBodyLocalPatterns$ || (ResponseBodyLocalPatterns$ = {}));
export function responseBodyLocalPatternsToJSON(responseBodyLocalPatterns) {
    return JSON.stringify(ResponseBodyLocalPatterns$outboundSchema.parse(responseBodyLocalPatterns));
}
export function responseBodyLocalPatternsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyLocalPatterns$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyLocalPatterns' from JSON`);
}
/** @internal */
export const ResponseBodyFormats$inboundSchema = z.nativeEnum(ResponseBodyFormats);
/** @internal */
export const ResponseBodyFormats$outboundSchema = ResponseBodyFormats$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyFormats$;
(function (ResponseBodyFormats$) {
    /** @deprecated use `ResponseBodyFormats$inboundSchema` instead. */
    ResponseBodyFormats$.inboundSchema = ResponseBodyFormats$inboundSchema;
    /** @deprecated use `ResponseBodyFormats$outboundSchema` instead. */
    ResponseBodyFormats$.outboundSchema = ResponseBodyFormats$outboundSchema;
})(ResponseBodyFormats$ || (ResponseBodyFormats$ = {}));
/** @internal */
export const ResponseBodyContentDispositionType$inboundSchema = z.nativeEnum(ResponseBodyContentDispositionType);
/** @internal */
export const ResponseBodyContentDispositionType$outboundSchema = ResponseBodyContentDispositionType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyContentDispositionType$;
(function (ResponseBodyContentDispositionType$) {
    /** @deprecated use `ResponseBodyContentDispositionType$inboundSchema` instead. */
    ResponseBodyContentDispositionType$.inboundSchema = ResponseBodyContentDispositionType$inboundSchema;
    /** @deprecated use `ResponseBodyContentDispositionType$outboundSchema` instead. */
    ResponseBodyContentDispositionType$.outboundSchema = ResponseBodyContentDispositionType$outboundSchema;
})(ResponseBodyContentDispositionType$ || (ResponseBodyContentDispositionType$ = {}));
/** @internal */
export const ResponseBodyImages$inboundSchema = z.object({
    sizes: z.array(z.number()).optional(),
    qualities: z.array(z.number()).optional(),
    domains: z.array(z.string()).optional(),
    remotePatterns: z.array(z.lazy(() => ResponseBodyRemotePatterns$inboundSchema)).optional(),
    localPatterns: z.array(z.lazy(() => ResponseBodyLocalPatterns$inboundSchema))
        .optional(),
    minimumCacheTTL: z.number().optional(),
    formats: z.array(ResponseBodyFormats$inboundSchema).optional(),
    dangerouslyAllowSVG: z.boolean().optional(),
    contentSecurityPolicy: z.string().optional(),
    contentDispositionType: ResponseBodyContentDispositionType$inboundSchema
        .optional(),
});
/** @internal */
export const ResponseBodyImages$outboundSchema = z.object({
    sizes: z.array(z.number()).optional(),
    qualities: z.array(z.number()).optional(),
    domains: z.array(z.string()).optional(),
    remotePatterns: z.array(z.lazy(() => ResponseBodyRemotePatterns$outboundSchema)).optional(),
    localPatterns: z.array(z.lazy(() => ResponseBodyLocalPatterns$outboundSchema))
        .optional(),
    minimumCacheTTL: z.number().optional(),
    formats: z.array(ResponseBodyFormats$outboundSchema).optional(),
    dangerouslyAllowSVG: z.boolean().optional(),
    contentSecurityPolicy: z.string().optional(),
    contentDispositionType: ResponseBodyContentDispositionType$outboundSchema
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyImages$;
(function (ResponseBodyImages$) {
    /** @deprecated use `ResponseBodyImages$inboundSchema` instead. */
    ResponseBodyImages$.inboundSchema = ResponseBodyImages$inboundSchema;
    /** @deprecated use `ResponseBodyImages$outboundSchema` instead. */
    ResponseBodyImages$.outboundSchema = ResponseBodyImages$outboundSchema;
})(ResponseBodyImages$ || (ResponseBodyImages$ = {}));
export function responseBodyImagesToJSON(responseBodyImages) {
    return JSON.stringify(ResponseBodyImages$outboundSchema.parse(responseBodyImages));
}
export function responseBodyImagesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyImages$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyImages' from JSON`);
}
/** @internal */
export const ResponseBodyCreator$inboundSchema = z.object({
    uid: z.string(),
    username: z.string().optional(),
    avatar: z.string().optional(),
});
/** @internal */
export const ResponseBodyCreator$outboundSchema = z.object({
    uid: z.string(),
    username: z.string().optional(),
    avatar: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyCreator$;
(function (ResponseBodyCreator$) {
    /** @deprecated use `ResponseBodyCreator$inboundSchema` instead. */
    ResponseBodyCreator$.inboundSchema = ResponseBodyCreator$inboundSchema;
    /** @deprecated use `ResponseBodyCreator$outboundSchema` instead. */
    ResponseBodyCreator$.outboundSchema = ResponseBodyCreator$outboundSchema;
})(ResponseBodyCreator$ || (ResponseBodyCreator$ = {}));
export function responseBodyCreatorToJSON(responseBodyCreator) {
    return JSON.stringify(ResponseBodyCreator$outboundSchema.parse(responseBodyCreator));
}
export function responseBodyCreatorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyCreator$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyCreator' from JSON`);
}
/** @internal */
export const GetDeploymentResponseBodyDeploymentsResponseReadyState$inboundSchema = z.nativeEnum(GetDeploymentResponseBodyDeploymentsResponseReadyState);
/** @internal */
export const GetDeploymentResponseBodyDeploymentsResponseReadyState$outboundSchema = GetDeploymentResponseBodyDeploymentsResponseReadyState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentResponseBodyDeploymentsResponseReadyState$;
(function (GetDeploymentResponseBodyDeploymentsResponseReadyState$) {
    /** @deprecated use `GetDeploymentResponseBodyDeploymentsResponseReadyState$inboundSchema` instead. */
    GetDeploymentResponseBodyDeploymentsResponseReadyState$.inboundSchema = GetDeploymentResponseBodyDeploymentsResponseReadyState$inboundSchema;
    /** @deprecated use `GetDeploymentResponseBodyDeploymentsResponseReadyState$outboundSchema` instead. */
    GetDeploymentResponseBodyDeploymentsResponseReadyState$.outboundSchema = GetDeploymentResponseBodyDeploymentsResponseReadyState$outboundSchema;
})(GetDeploymentResponseBodyDeploymentsResponseReadyState$ || (GetDeploymentResponseBodyDeploymentsResponseReadyState$ = {}));
/** @internal */
export const ResponseBodyOutput$inboundSchema = z.object({
    path: z.string(),
    functionName: z.string(),
});
/** @internal */
export const ResponseBodyOutput$outboundSchema = z.object({
    path: z.string(),
    functionName: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyOutput$;
(function (ResponseBodyOutput$) {
    /** @deprecated use `ResponseBodyOutput$inboundSchema` instead. */
    ResponseBodyOutput$.inboundSchema = ResponseBodyOutput$inboundSchema;
    /** @deprecated use `ResponseBodyOutput$outboundSchema` instead. */
    ResponseBodyOutput$.outboundSchema = ResponseBodyOutput$outboundSchema;
})(ResponseBodyOutput$ || (ResponseBodyOutput$ = {}));
export function responseBodyOutputToJSON(responseBodyOutput) {
    return JSON.stringify(ResponseBodyOutput$outboundSchema.parse(responseBodyOutput));
}
export function responseBodyOutputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyOutput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyOutput' from JSON`);
}
/** @internal */
export const GetDeploymentResponseBodyLambdas$inboundSchema = z.object({
    id: z.string(),
    createdAt: z.number().optional(),
    readyState: GetDeploymentResponseBodyDeploymentsResponseReadyState$inboundSchema
        .optional(),
    entrypoint: z.nullable(z.string()).optional(),
    readyStateAt: z.number().optional(),
    output: z.array(z.lazy(() => ResponseBodyOutput$inboundSchema)),
});
/** @internal */
export const GetDeploymentResponseBodyLambdas$outboundSchema = z.object({
    id: z.string(),
    createdAt: z.number().optional(),
    readyState: GetDeploymentResponseBodyDeploymentsResponseReadyState$outboundSchema
        .optional(),
    entrypoint: z.nullable(z.string()).optional(),
    readyStateAt: z.number().optional(),
    output: z.array(z.lazy(() => ResponseBodyOutput$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentResponseBodyLambdas$;
(function (GetDeploymentResponseBodyLambdas$) {
    /** @deprecated use `GetDeploymentResponseBodyLambdas$inboundSchema` instead. */
    GetDeploymentResponseBodyLambdas$.inboundSchema = GetDeploymentResponseBodyLambdas$inboundSchema;
    /** @deprecated use `GetDeploymentResponseBodyLambdas$outboundSchema` instead. */
    GetDeploymentResponseBodyLambdas$.outboundSchema = GetDeploymentResponseBodyLambdas$outboundSchema;
})(GetDeploymentResponseBodyLambdas$ || (GetDeploymentResponseBodyLambdas$ = {}));
export function getDeploymentResponseBodyLambdasToJSON(getDeploymentResponseBodyLambdas) {
    return JSON.stringify(GetDeploymentResponseBodyLambdas$outboundSchema.parse(getDeploymentResponseBodyLambdas));
}
export function getDeploymentResponseBodyLambdasFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentResponseBodyLambdas$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentResponseBodyLambdas' from JSON`);
}
/** @internal */
export const ResponseBodyStatus$inboundSchema = z.nativeEnum(ResponseBodyStatus);
/** @internal */
export const ResponseBodyStatus$outboundSchema = ResponseBodyStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyStatus$;
(function (ResponseBodyStatus$) {
    /** @deprecated use `ResponseBodyStatus$inboundSchema` instead. */
    ResponseBodyStatus$.inboundSchema = ResponseBodyStatus$inboundSchema;
    /** @deprecated use `ResponseBodyStatus$outboundSchema` instead. */
    ResponseBodyStatus$.outboundSchema = ResponseBodyStatus$outboundSchema;
})(ResponseBodyStatus$ || (ResponseBodyStatus$ = {}));
/** @internal */
export const GetDeploymentResponseBodyTeam$inboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    slug: z.string(),
    avatar: z.string().optional(),
});
/** @internal */
export const GetDeploymentResponseBodyTeam$outboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    slug: z.string(),
    avatar: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentResponseBodyTeam$;
(function (GetDeploymentResponseBodyTeam$) {
    /** @deprecated use `GetDeploymentResponseBodyTeam$inboundSchema` instead. */
    GetDeploymentResponseBodyTeam$.inboundSchema = GetDeploymentResponseBodyTeam$inboundSchema;
    /** @deprecated use `GetDeploymentResponseBodyTeam$outboundSchema` instead. */
    GetDeploymentResponseBodyTeam$.outboundSchema = GetDeploymentResponseBodyTeam$outboundSchema;
})(GetDeploymentResponseBodyTeam$ || (GetDeploymentResponseBodyTeam$ = {}));
export function getDeploymentResponseBodyTeamToJSON(getDeploymentResponseBodyTeam) {
    return JSON.stringify(GetDeploymentResponseBodyTeam$outboundSchema.parse(getDeploymentResponseBodyTeam));
}
export function getDeploymentResponseBodyTeamFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentResponseBodyTeam$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentResponseBodyTeam' from JSON`);
}
/** @internal */
export const GetDeploymentCustomEnvironmentDeployments2$inboundSchema = z.object({
    id: z.string(),
});
/** @internal */
export const GetDeploymentCustomEnvironmentDeployments2$outboundSchema = z.object({
    id: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentCustomEnvironmentDeployments2$;
(function (GetDeploymentCustomEnvironmentDeployments2$) {
    /** @deprecated use `GetDeploymentCustomEnvironmentDeployments2$inboundSchema` instead. */
    GetDeploymentCustomEnvironmentDeployments2$.inboundSchema = GetDeploymentCustomEnvironmentDeployments2$inboundSchema;
    /** @deprecated use `GetDeploymentCustomEnvironmentDeployments2$outboundSchema` instead. */
    GetDeploymentCustomEnvironmentDeployments2$.outboundSchema = GetDeploymentCustomEnvironmentDeployments2$outboundSchema;
})(GetDeploymentCustomEnvironmentDeployments2$ || (GetDeploymentCustomEnvironmentDeployments2$ = {}));
export function getDeploymentCustomEnvironmentDeployments2ToJSON(getDeploymentCustomEnvironmentDeployments2) {
    return JSON.stringify(GetDeploymentCustomEnvironmentDeployments2$outboundSchema.parse(getDeploymentCustomEnvironmentDeployments2));
}
export function getDeploymentCustomEnvironmentDeployments2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentCustomEnvironmentDeployments2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentCustomEnvironmentDeployments2' from JSON`);
}
/** @internal */
export const GetDeploymentCustomEnvironmentDeploymentsType$inboundSchema = z
    .nativeEnum(GetDeploymentCustomEnvironmentDeploymentsType);
/** @internal */
export const GetDeploymentCustomEnvironmentDeploymentsType$outboundSchema = GetDeploymentCustomEnvironmentDeploymentsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentCustomEnvironmentDeploymentsType$;
(function (GetDeploymentCustomEnvironmentDeploymentsType$) {
    /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsType$inboundSchema` instead. */
    GetDeploymentCustomEnvironmentDeploymentsType$.inboundSchema = GetDeploymentCustomEnvironmentDeploymentsType$inboundSchema;
    /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsType$outboundSchema` instead. */
    GetDeploymentCustomEnvironmentDeploymentsType$.outboundSchema = GetDeploymentCustomEnvironmentDeploymentsType$outboundSchema;
})(GetDeploymentCustomEnvironmentDeploymentsType$ || (GetDeploymentCustomEnvironmentDeploymentsType$ = {}));
/** @internal */
export const GetDeploymentCustomEnvironmentDeploymentsResponse200Type$inboundSchema = z.nativeEnum(GetDeploymentCustomEnvironmentDeploymentsResponse200Type);
/** @internal */
export const GetDeploymentCustomEnvironmentDeploymentsResponse200Type$outboundSchema = GetDeploymentCustomEnvironmentDeploymentsResponse200Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentCustomEnvironmentDeploymentsResponse200Type$;
(function (GetDeploymentCustomEnvironmentDeploymentsResponse200Type$) {
    /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsResponse200Type$inboundSchema` instead. */
    GetDeploymentCustomEnvironmentDeploymentsResponse200Type$.inboundSchema = GetDeploymentCustomEnvironmentDeploymentsResponse200Type$inboundSchema;
    /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsResponse200Type$outboundSchema` instead. */
    GetDeploymentCustomEnvironmentDeploymentsResponse200Type$.outboundSchema = GetDeploymentCustomEnvironmentDeploymentsResponse200Type$outboundSchema;
})(GetDeploymentCustomEnvironmentDeploymentsResponse200Type$ || (GetDeploymentCustomEnvironmentDeploymentsResponse200Type$ = {}));
/** @internal */
export const GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$inboundSchema = z.object({
    type: GetDeploymentCustomEnvironmentDeploymentsResponse200Type$inboundSchema,
    pattern: z.string(),
});
/** @internal */
export const GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$outboundSchema = z.object({
    type: GetDeploymentCustomEnvironmentDeploymentsResponse200Type$outboundSchema,
    pattern: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$;
(function (GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$) {
    /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$inboundSchema` instead. */
    GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$.inboundSchema = GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$inboundSchema;
    /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$outboundSchema` instead. */
    GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$.outboundSchema = GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$outboundSchema;
})(GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$ || (GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$ = {}));
export function getDeploymentCustomEnvironmentDeploymentsBranchMatcherToJSON(getDeploymentCustomEnvironmentDeploymentsBranchMatcher) {
    return JSON.stringify(GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$outboundSchema.parse(getDeploymentCustomEnvironmentDeploymentsBranchMatcher));
}
export function getDeploymentCustomEnvironmentDeploymentsBranchMatcherFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'GetDeploymentCustomEnvironmentDeploymentsBranchMatcher' from JSON`);
}
/** @internal */
export const GetDeploymentCustomEnvironmentDeploymentsVerification$inboundSchema = z.object({
    type: z.string(),
    domain: z.string(),
    value: z.string(),
    reason: z.string(),
});
/** @internal */
export const GetDeploymentCustomEnvironmentDeploymentsVerification$outboundSchema = z.object({
    type: z.string(),
    domain: z.string(),
    value: z.string(),
    reason: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentCustomEnvironmentDeploymentsVerification$;
(function (GetDeploymentCustomEnvironmentDeploymentsVerification$) {
    /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsVerification$inboundSchema` instead. */
    GetDeploymentCustomEnvironmentDeploymentsVerification$.inboundSchema = GetDeploymentCustomEnvironmentDeploymentsVerification$inboundSchema;
    /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsVerification$outboundSchema` instead. */
    GetDeploymentCustomEnvironmentDeploymentsVerification$.outboundSchema = GetDeploymentCustomEnvironmentDeploymentsVerification$outboundSchema;
})(GetDeploymentCustomEnvironmentDeploymentsVerification$ || (GetDeploymentCustomEnvironmentDeploymentsVerification$ = {}));
export function getDeploymentCustomEnvironmentDeploymentsVerificationToJSON(getDeploymentCustomEnvironmentDeploymentsVerification) {
    return JSON.stringify(GetDeploymentCustomEnvironmentDeploymentsVerification$outboundSchema.parse(getDeploymentCustomEnvironmentDeploymentsVerification));
}
export function getDeploymentCustomEnvironmentDeploymentsVerificationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentCustomEnvironmentDeploymentsVerification$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentCustomEnvironmentDeploymentsVerification' from JSON`);
}
/** @internal */
export const GetDeploymentCustomEnvironmentDeploymentsDomains$inboundSchema = z.object({
    name: z.string(),
    apexName: z.string(),
    projectId: z.string(),
    redirect: z.nullable(z.string()).optional(),
    redirectStatusCode: z.nullable(z.number()).optional(),
    gitBranch: z.nullable(z.string()).optional(),
    customEnvironmentId: z.nullable(z.string()).optional(),
    updatedAt: z.number().optional(),
    createdAt: z.number().optional(),
    verified: z.boolean(),
    verification: z.array(z.lazy(() => GetDeploymentCustomEnvironmentDeploymentsVerification$inboundSchema)).optional(),
});
/** @internal */
export const GetDeploymentCustomEnvironmentDeploymentsDomains$outboundSchema = z.object({
    name: z.string(),
    apexName: z.string(),
    projectId: z.string(),
    redirect: z.nullable(z.string()).optional(),
    redirectStatusCode: z.nullable(z.number()).optional(),
    gitBranch: z.nullable(z.string()).optional(),
    customEnvironmentId: z.nullable(z.string()).optional(),
    updatedAt: z.number().optional(),
    createdAt: z.number().optional(),
    verified: z.boolean(),
    verification: z.array(z.lazy(() => GetDeploymentCustomEnvironmentDeploymentsVerification$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentCustomEnvironmentDeploymentsDomains$;
(function (GetDeploymentCustomEnvironmentDeploymentsDomains$) {
    /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsDomains$inboundSchema` instead. */
    GetDeploymentCustomEnvironmentDeploymentsDomains$.inboundSchema = GetDeploymentCustomEnvironmentDeploymentsDomains$inboundSchema;
    /** @deprecated use `GetDeploymentCustomEnvironmentDeploymentsDomains$outboundSchema` instead. */
    GetDeploymentCustomEnvironmentDeploymentsDomains$.outboundSchema = GetDeploymentCustomEnvironmentDeploymentsDomains$outboundSchema;
})(GetDeploymentCustomEnvironmentDeploymentsDomains$ || (GetDeploymentCustomEnvironmentDeploymentsDomains$ = {}));
export function getDeploymentCustomEnvironmentDeploymentsDomainsToJSON(getDeploymentCustomEnvironmentDeploymentsDomains) {
    return JSON.stringify(GetDeploymentCustomEnvironmentDeploymentsDomains$outboundSchema.parse(getDeploymentCustomEnvironmentDeploymentsDomains));
}
export function getDeploymentCustomEnvironmentDeploymentsDomainsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentCustomEnvironmentDeploymentsDomains$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentCustomEnvironmentDeploymentsDomains' from JSON`);
}
/** @internal */
export const GetDeploymentCustomEnvironmentDeployments1$inboundSchema = z.object({
    id: z.string(),
    slug: z.string(),
    type: GetDeploymentCustomEnvironmentDeploymentsType$inboundSchema,
    description: z.string().optional(),
    branchMatcher: z.lazy(() => GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$inboundSchema).optional(),
    domains: z.array(z.lazy(() => GetDeploymentCustomEnvironmentDeploymentsDomains$inboundSchema)).optional(),
    currentDeploymentAliases: z.array(z.string()).optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
});
/** @internal */
export const GetDeploymentCustomEnvironmentDeployments1$outboundSchema = z.object({
    id: z.string(),
    slug: z.string(),
    type: GetDeploymentCustomEnvironmentDeploymentsType$outboundSchema,
    description: z.string().optional(),
    branchMatcher: z.lazy(() => GetDeploymentCustomEnvironmentDeploymentsBranchMatcher$outboundSchema).optional(),
    domains: z.array(z.lazy(() => GetDeploymentCustomEnvironmentDeploymentsDomains$outboundSchema)).optional(),
    currentDeploymentAliases: z.array(z.string()).optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentCustomEnvironmentDeployments1$;
(function (GetDeploymentCustomEnvironmentDeployments1$) {
    /** @deprecated use `GetDeploymentCustomEnvironmentDeployments1$inboundSchema` instead. */
    GetDeploymentCustomEnvironmentDeployments1$.inboundSchema = GetDeploymentCustomEnvironmentDeployments1$inboundSchema;
    /** @deprecated use `GetDeploymentCustomEnvironmentDeployments1$outboundSchema` instead. */
    GetDeploymentCustomEnvironmentDeployments1$.outboundSchema = GetDeploymentCustomEnvironmentDeployments1$outboundSchema;
})(GetDeploymentCustomEnvironmentDeployments1$ || (GetDeploymentCustomEnvironmentDeployments1$ = {}));
export function getDeploymentCustomEnvironmentDeployments1ToJSON(getDeploymentCustomEnvironmentDeployments1) {
    return JSON.stringify(GetDeploymentCustomEnvironmentDeployments1$outboundSchema.parse(getDeploymentCustomEnvironmentDeployments1));
}
export function getDeploymentCustomEnvironmentDeployments1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentCustomEnvironmentDeployments1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentCustomEnvironmentDeployments1' from JSON`);
}
/** @internal */
export const GetDeploymentResponseBodyCustomEnvironment$inboundSchema = z.union([
    z.lazy(() => GetDeploymentCustomEnvironmentDeployments1$inboundSchema),
    z.lazy(() => GetDeploymentCustomEnvironmentDeployments2$inboundSchema),
]);
/** @internal */
export const GetDeploymentResponseBodyCustomEnvironment$outboundSchema = z.union([
    z.lazy(() => GetDeploymentCustomEnvironmentDeployments1$outboundSchema),
    z.lazy(() => GetDeploymentCustomEnvironmentDeployments2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentResponseBodyCustomEnvironment$;
(function (GetDeploymentResponseBodyCustomEnvironment$) {
    /** @deprecated use `GetDeploymentResponseBodyCustomEnvironment$inboundSchema` instead. */
    GetDeploymentResponseBodyCustomEnvironment$.inboundSchema = GetDeploymentResponseBodyCustomEnvironment$inboundSchema;
    /** @deprecated use `GetDeploymentResponseBodyCustomEnvironment$outboundSchema` instead. */
    GetDeploymentResponseBodyCustomEnvironment$.outboundSchema = GetDeploymentResponseBodyCustomEnvironment$outboundSchema;
})(GetDeploymentResponseBodyCustomEnvironment$ || (GetDeploymentResponseBodyCustomEnvironment$ = {}));
export function getDeploymentResponseBodyCustomEnvironmentToJSON(getDeploymentResponseBodyCustomEnvironment) {
    return JSON.stringify(GetDeploymentResponseBodyCustomEnvironment$outboundSchema.parse(getDeploymentResponseBodyCustomEnvironment));
}
export function getDeploymentResponseBodyCustomEnvironmentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentResponseBodyCustomEnvironment$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentResponseBodyCustomEnvironment' from JSON`);
}
/** @internal */
export const GetDeploymentResponseBodyOomReport$inboundSchema = z.nativeEnum(GetDeploymentResponseBodyOomReport);
/** @internal */
export const GetDeploymentResponseBodyOomReport$outboundSchema = GetDeploymentResponseBodyOomReport$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentResponseBodyOomReport$;
(function (GetDeploymentResponseBodyOomReport$) {
    /** @deprecated use `GetDeploymentResponseBodyOomReport$inboundSchema` instead. */
    GetDeploymentResponseBodyOomReport$.inboundSchema = GetDeploymentResponseBodyOomReport$inboundSchema;
    /** @deprecated use `GetDeploymentResponseBodyOomReport$outboundSchema` instead. */
    GetDeploymentResponseBodyOomReport$.outboundSchema = GetDeploymentResponseBodyOomReport$outboundSchema;
})(GetDeploymentResponseBodyOomReport$ || (GetDeploymentResponseBodyOomReport$ = {}));
/** @internal */
export const GetDeploymentResponseBodyAliasWarning$inboundSchema = z.object({
    code: z.string(),
    message: z.string(),
    link: z.string().optional(),
    action: z.string().optional(),
});
/** @internal */
export const GetDeploymentResponseBodyAliasWarning$outboundSchema = z.object({
    code: z.string(),
    message: z.string(),
    link: z.string().optional(),
    action: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentResponseBodyAliasWarning$;
(function (GetDeploymentResponseBodyAliasWarning$) {
    /** @deprecated use `GetDeploymentResponseBodyAliasWarning$inboundSchema` instead. */
    GetDeploymentResponseBodyAliasWarning$.inboundSchema = GetDeploymentResponseBodyAliasWarning$inboundSchema;
    /** @deprecated use `GetDeploymentResponseBodyAliasWarning$outboundSchema` instead. */
    GetDeploymentResponseBodyAliasWarning$.outboundSchema = GetDeploymentResponseBodyAliasWarning$outboundSchema;
})(GetDeploymentResponseBodyAliasWarning$ || (GetDeploymentResponseBodyAliasWarning$ = {}));
export function getDeploymentResponseBodyAliasWarningToJSON(getDeploymentResponseBodyAliasWarning) {
    return JSON.stringify(GetDeploymentResponseBodyAliasWarning$outboundSchema.parse(getDeploymentResponseBodyAliasWarning));
}
export function getDeploymentResponseBodyAliasWarningFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentResponseBodyAliasWarning$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentResponseBodyAliasWarning' from JSON`);
}
/** @internal */
export const ResponseBodyReadyState$inboundSchema = z.nativeEnum(ResponseBodyReadyState);
/** @internal */
export const ResponseBodyReadyState$outboundSchema = ResponseBodyReadyState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyReadyState$;
(function (ResponseBodyReadyState$) {
    /** @deprecated use `ResponseBodyReadyState$inboundSchema` instead. */
    ResponseBodyReadyState$.inboundSchema = ResponseBodyReadyState$inboundSchema;
    /** @deprecated use `ResponseBodyReadyState$outboundSchema` instead. */
    ResponseBodyReadyState$.outboundSchema = ResponseBodyReadyState$outboundSchema;
})(ResponseBodyReadyState$ || (ResponseBodyReadyState$ = {}));
/** @internal */
export const GetDeploymentResponseBodyType$inboundSchema = z.nativeEnum(GetDeploymentResponseBodyType);
/** @internal */
export const GetDeploymentResponseBodyType$outboundSchema = GetDeploymentResponseBodyType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentResponseBodyType$;
(function (GetDeploymentResponseBodyType$) {
    /** @deprecated use `GetDeploymentResponseBodyType$inboundSchema` instead. */
    GetDeploymentResponseBodyType$.inboundSchema = GetDeploymentResponseBodyType$inboundSchema;
    /** @deprecated use `GetDeploymentResponseBodyType$outboundSchema` instead. */
    GetDeploymentResponseBodyType$.outboundSchema = GetDeploymentResponseBodyType$outboundSchema;
})(GetDeploymentResponseBodyType$ || (GetDeploymentResponseBodyType$ = {}));
/** @internal */
export const ResponseBodyAliasError$inboundSchema = z.object({
    code: z.string(),
    message: z.string(),
});
/** @internal */
export const ResponseBodyAliasError$outboundSchema = z.object({
    code: z.string(),
    message: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyAliasError$;
(function (ResponseBodyAliasError$) {
    /** @deprecated use `ResponseBodyAliasError$inboundSchema` instead. */
    ResponseBodyAliasError$.inboundSchema = ResponseBodyAliasError$inboundSchema;
    /** @deprecated use `ResponseBodyAliasError$outboundSchema` instead. */
    ResponseBodyAliasError$.outboundSchema = ResponseBodyAliasError$outboundSchema;
})(ResponseBodyAliasError$ || (ResponseBodyAliasError$ = {}));
export function responseBodyAliasErrorToJSON(responseBodyAliasError) {
    return JSON.stringify(ResponseBodyAliasError$outboundSchema.parse(responseBodyAliasError));
}
export function responseBodyAliasErrorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyAliasError$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyAliasError' from JSON`);
}
/** @internal */
export const ResponseBodyChecksState$inboundSchema = z.nativeEnum(ResponseBodyChecksState);
/** @internal */
export const ResponseBodyChecksState$outboundSchema = ResponseBodyChecksState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyChecksState$;
(function (ResponseBodyChecksState$) {
    /** @deprecated use `ResponseBodyChecksState$inboundSchema` instead. */
    ResponseBodyChecksState$.inboundSchema = ResponseBodyChecksState$inboundSchema;
    /** @deprecated use `ResponseBodyChecksState$outboundSchema` instead. */
    ResponseBodyChecksState$.outboundSchema = ResponseBodyChecksState$outboundSchema;
})(ResponseBodyChecksState$ || (ResponseBodyChecksState$ = {}));
/** @internal */
export const ResponseBodyChecksConclusion$inboundSchema = z.nativeEnum(ResponseBodyChecksConclusion);
/** @internal */
export const ResponseBodyChecksConclusion$outboundSchema = ResponseBodyChecksConclusion$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyChecksConclusion$;
(function (ResponseBodyChecksConclusion$) {
    /** @deprecated use `ResponseBodyChecksConclusion$inboundSchema` instead. */
    ResponseBodyChecksConclusion$.inboundSchema = ResponseBodyChecksConclusion$inboundSchema;
    /** @deprecated use `ResponseBodyChecksConclusion$outboundSchema` instead. */
    ResponseBodyChecksConclusion$.outboundSchema = ResponseBodyChecksConclusion$outboundSchema;
})(ResponseBodyChecksConclusion$ || (ResponseBodyChecksConclusion$ = {}));
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody115Type$inboundSchema = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody115Type);
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody115Type$outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody115Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody115Type$;
(function (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody115Type$) {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody115Type$inboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody115Type$.inboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody115Type$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody115Type$outboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody115Type$.outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody115Type$outboundSchema;
})(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody115Type$ || (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody115Type$ = {}));
/** @internal */
export const GetDeploymentGitSourceDeployments15$inboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody115Type$inboundSchema,
    ref: z.string(),
    sha: z.string(),
    owner: z.string().optional(),
    slug: z.string().optional(),
    workspaceUuid: z.string(),
    repoUuid: z.string(),
});
/** @internal */
export const GetDeploymentGitSourceDeployments15$outboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody115Type$outboundSchema,
    ref: z.string(),
    sha: z.string(),
    owner: z.string().optional(),
    slug: z.string().optional(),
    workspaceUuid: z.string(),
    repoUuid: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeployments15$;
(function (GetDeploymentGitSourceDeployments15$) {
    /** @deprecated use `GetDeploymentGitSourceDeployments15$inboundSchema` instead. */
    GetDeploymentGitSourceDeployments15$.inboundSchema = GetDeploymentGitSourceDeployments15$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeployments15$outboundSchema` instead. */
    GetDeploymentGitSourceDeployments15$.outboundSchema = GetDeploymentGitSourceDeployments15$outboundSchema;
})(GetDeploymentGitSourceDeployments15$ || (GetDeploymentGitSourceDeployments15$ = {}));
export function getDeploymentGitSourceDeployments15ToJSON(getDeploymentGitSourceDeployments15) {
    return JSON.stringify(GetDeploymentGitSourceDeployments15$outboundSchema.parse(getDeploymentGitSourceDeployments15));
}
export function getDeploymentGitSourceDeployments15FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSourceDeployments15$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSourceDeployments15' from JSON`);
}
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody114Type$inboundSchema = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody114Type);
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody114Type$outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody114Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody114Type$;
(function (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody114Type$) {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody114Type$inboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody114Type$.inboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody114Type$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody114Type$outboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody114Type$.outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody114Type$outboundSchema;
})(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody114Type$ || (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody114Type$ = {}));
/** @internal */
export const GetDeploymentGitSourceDeployments14$inboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody114Type$inboundSchema,
    ref: z.string(),
    sha: z.string(),
    projectId: z.number(),
});
/** @internal */
export const GetDeploymentGitSourceDeployments14$outboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody114Type$outboundSchema,
    ref: z.string(),
    sha: z.string(),
    projectId: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeployments14$;
(function (GetDeploymentGitSourceDeployments14$) {
    /** @deprecated use `GetDeploymentGitSourceDeployments14$inboundSchema` instead. */
    GetDeploymentGitSourceDeployments14$.inboundSchema = GetDeploymentGitSourceDeployments14$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeployments14$outboundSchema` instead. */
    GetDeploymentGitSourceDeployments14$.outboundSchema = GetDeploymentGitSourceDeployments14$outboundSchema;
})(GetDeploymentGitSourceDeployments14$ || (GetDeploymentGitSourceDeployments14$ = {}));
export function getDeploymentGitSourceDeployments14ToJSON(getDeploymentGitSourceDeployments14) {
    return JSON.stringify(GetDeploymentGitSourceDeployments14$outboundSchema.parse(getDeploymentGitSourceDeployments14));
}
export function getDeploymentGitSourceDeployments14FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSourceDeployments14$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSourceDeployments14' from JSON`);
}
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody113Type$inboundSchema = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody113Type);
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody113Type$outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody113Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody113Type$;
(function (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody113Type$) {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody113Type$inboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody113Type$.inboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody113Type$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody113Type$outboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody113Type$.outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody113Type$outboundSchema;
})(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody113Type$ || (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody113Type$ = {}));
/** @internal */
export const GetDeploymentGitSourceDeployments13$inboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody113Type$inboundSchema,
    ref: z.string(),
    sha: z.string(),
    repoId: z.number(),
    org: z.string().optional(),
    repo: z.string().optional(),
});
/** @internal */
export const GetDeploymentGitSourceDeployments13$outboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody113Type$outboundSchema,
    ref: z.string(),
    sha: z.string(),
    repoId: z.number(),
    org: z.string().optional(),
    repo: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeployments13$;
(function (GetDeploymentGitSourceDeployments13$) {
    /** @deprecated use `GetDeploymentGitSourceDeployments13$inboundSchema` instead. */
    GetDeploymentGitSourceDeployments13$.inboundSchema = GetDeploymentGitSourceDeployments13$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeployments13$outboundSchema` instead. */
    GetDeploymentGitSourceDeployments13$.outboundSchema = GetDeploymentGitSourceDeployments13$outboundSchema;
})(GetDeploymentGitSourceDeployments13$ || (GetDeploymentGitSourceDeployments13$ = {}));
export function getDeploymentGitSourceDeployments13ToJSON(getDeploymentGitSourceDeployments13) {
    return JSON.stringify(GetDeploymentGitSourceDeployments13$outboundSchema.parse(getDeploymentGitSourceDeployments13));
}
export function getDeploymentGitSourceDeployments13FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSourceDeployments13$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSourceDeployments13' from JSON`);
}
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type$inboundSchema = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type);
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type$outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type$;
(function (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type$) {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type$inboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type$.inboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type$outboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type$.outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type$outboundSchema;
})(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type$ || (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type$ = {}));
/** @internal */
export const GetDeploymentGitSourceDeployments12$inboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type$inboundSchema,
    host: z.string(),
    ref: z.string(),
    sha: z.string(),
    repoId: z.number(),
    org: z.string().optional(),
    repo: z.string().optional(),
});
/** @internal */
export const GetDeploymentGitSourceDeployments12$outboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody112Type$outboundSchema,
    host: z.string(),
    ref: z.string(),
    sha: z.string(),
    repoId: z.number(),
    org: z.string().optional(),
    repo: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeployments12$;
(function (GetDeploymentGitSourceDeployments12$) {
    /** @deprecated use `GetDeploymentGitSourceDeployments12$inboundSchema` instead. */
    GetDeploymentGitSourceDeployments12$.inboundSchema = GetDeploymentGitSourceDeployments12$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeployments12$outboundSchema` instead. */
    GetDeploymentGitSourceDeployments12$.outboundSchema = GetDeploymentGitSourceDeployments12$outboundSchema;
})(GetDeploymentGitSourceDeployments12$ || (GetDeploymentGitSourceDeployments12$ = {}));
export function getDeploymentGitSourceDeployments12ToJSON(getDeploymentGitSourceDeployments12) {
    return JSON.stringify(GetDeploymentGitSourceDeployments12$outboundSchema.parse(getDeploymentGitSourceDeployments12));
}
export function getDeploymentGitSourceDeployments12FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSourceDeployments12$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSourceDeployments12' from JSON`);
}
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type$inboundSchema = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type);
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type$outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type$;
(function (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type$) {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type$inboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type$.inboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type$outboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type$.outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type$outboundSchema;
})(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type$ || (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type$ = {}));
/** @internal */
export const GetDeploymentGitSourceDeployments11$inboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type$inboundSchema,
    ref: z.string(),
    sha: z.string(),
    repoId: z.number(),
    org: z.string().optional(),
    repo: z.string().optional(),
});
/** @internal */
export const GetDeploymentGitSourceDeployments11$outboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody111Type$outboundSchema,
    ref: z.string(),
    sha: z.string(),
    repoId: z.number(),
    org: z.string().optional(),
    repo: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeployments11$;
(function (GetDeploymentGitSourceDeployments11$) {
    /** @deprecated use `GetDeploymentGitSourceDeployments11$inboundSchema` instead. */
    GetDeploymentGitSourceDeployments11$.inboundSchema = GetDeploymentGitSourceDeployments11$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeployments11$outboundSchema` instead. */
    GetDeploymentGitSourceDeployments11$.outboundSchema = GetDeploymentGitSourceDeployments11$outboundSchema;
})(GetDeploymentGitSourceDeployments11$ || (GetDeploymentGitSourceDeployments11$ = {}));
export function getDeploymentGitSourceDeployments11ToJSON(getDeploymentGitSourceDeployments11) {
    return JSON.stringify(GetDeploymentGitSourceDeployments11$outboundSchema.parse(getDeploymentGitSourceDeployments11));
}
export function getDeploymentGitSourceDeployments11FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSourceDeployments11$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSourceDeployments11' from JSON`);
}
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type$inboundSchema = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type);
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type$outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type$;
(function (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type$) {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type$inboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type$.inboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type$outboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type$.outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type$outboundSchema;
})(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type$ || (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type$ = {}));
/** @internal */
export const GetDeploymentGitSourceDeployments10$inboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type$inboundSchema,
    ref: z.string(),
    sha: z.string(),
    gitUrl: z.string(),
});
/** @internal */
export const GetDeploymentGitSourceDeployments10$outboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody110Type$outboundSchema,
    ref: z.string(),
    sha: z.string(),
    gitUrl: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeployments10$;
(function (GetDeploymentGitSourceDeployments10$) {
    /** @deprecated use `GetDeploymentGitSourceDeployments10$inboundSchema` instead. */
    GetDeploymentGitSourceDeployments10$.inboundSchema = GetDeploymentGitSourceDeployments10$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeployments10$outboundSchema` instead. */
    GetDeploymentGitSourceDeployments10$.outboundSchema = GetDeploymentGitSourceDeployments10$outboundSchema;
})(GetDeploymentGitSourceDeployments10$ || (GetDeploymentGitSourceDeployments10$ = {}));
export function getDeploymentGitSourceDeployments10ToJSON(getDeploymentGitSourceDeployments10) {
    return JSON.stringify(GetDeploymentGitSourceDeployments10$outboundSchema.parse(getDeploymentGitSourceDeployments10));
}
export function getDeploymentGitSourceDeployments10FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSourceDeployments10$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSourceDeployments10' from JSON`);
}
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type$inboundSchema = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type);
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type$outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type$;
(function (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type$) {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type$inboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type$.inboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type$outboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type$.outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type$outboundSchema;
})(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type$ || (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type$ = {}));
/** @internal */
export const GetDeploymentGitSourceDeployments9$inboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type$inboundSchema,
    owner: z.string(),
    slug: z.string(),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/** @internal */
export const GetDeploymentGitSourceDeployments9$outboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type$outboundSchema,
    owner: z.string(),
    slug: z.string(),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeployments9$;
(function (GetDeploymentGitSourceDeployments9$) {
    /** @deprecated use `GetDeploymentGitSourceDeployments9$inboundSchema` instead. */
    GetDeploymentGitSourceDeployments9$.inboundSchema = GetDeploymentGitSourceDeployments9$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeployments9$outboundSchema` instead. */
    GetDeploymentGitSourceDeployments9$.outboundSchema = GetDeploymentGitSourceDeployments9$outboundSchema;
})(GetDeploymentGitSourceDeployments9$ || (GetDeploymentGitSourceDeployments9$ = {}));
export function getDeploymentGitSourceDeployments9ToJSON(getDeploymentGitSourceDeployments9) {
    return JSON.stringify(GetDeploymentGitSourceDeployments9$outboundSchema.parse(getDeploymentGitSourceDeployments9));
}
export function getDeploymentGitSourceDeployments9FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSourceDeployments9$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSourceDeployments9' from JSON`);
}
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type$inboundSchema = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type);
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type$outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type$;
(function (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type$) {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type$inboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type$.inboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type$outboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type$.outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type$outboundSchema;
})(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type$ || (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type$ = {}));
/** @internal */
export const GetDeploymentGitSourceDeployments8$inboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type$inboundSchema,
    workspaceUuid: z.string().optional(),
    repoUuid: z.string(),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/** @internal */
export const GetDeploymentGitSourceDeployments8$outboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type$outboundSchema,
    workspaceUuid: z.string().optional(),
    repoUuid: z.string(),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeployments8$;
(function (GetDeploymentGitSourceDeployments8$) {
    /** @deprecated use `GetDeploymentGitSourceDeployments8$inboundSchema` instead. */
    GetDeploymentGitSourceDeployments8$.inboundSchema = GetDeploymentGitSourceDeployments8$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeployments8$outboundSchema` instead. */
    GetDeploymentGitSourceDeployments8$.outboundSchema = GetDeploymentGitSourceDeployments8$outboundSchema;
})(GetDeploymentGitSourceDeployments8$ || (GetDeploymentGitSourceDeployments8$ = {}));
export function getDeploymentGitSourceDeployments8ToJSON(getDeploymentGitSourceDeployments8) {
    return JSON.stringify(GetDeploymentGitSourceDeployments8$outboundSchema.parse(getDeploymentGitSourceDeployments8));
}
export function getDeploymentGitSourceDeployments8FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSourceDeployments8$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSourceDeployments8' from JSON`);
}
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$inboundSchema = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType);
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$;
(function (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$) {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$.inboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$.outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$outboundSchema;
})(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$ || (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$ = {}));
/** @internal */
export const GetDeploymentGitSourceProjectId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const GetDeploymentGitSourceProjectId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceProjectId$;
(function (GetDeploymentGitSourceProjectId$) {
    /** @deprecated use `GetDeploymentGitSourceProjectId$inboundSchema` instead. */
    GetDeploymentGitSourceProjectId$.inboundSchema = GetDeploymentGitSourceProjectId$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceProjectId$outboundSchema` instead. */
    GetDeploymentGitSourceProjectId$.outboundSchema = GetDeploymentGitSourceProjectId$outboundSchema;
})(GetDeploymentGitSourceProjectId$ || (GetDeploymentGitSourceProjectId$ = {}));
export function getDeploymentGitSourceProjectIdToJSON(getDeploymentGitSourceProjectId) {
    return JSON.stringify(GetDeploymentGitSourceProjectId$outboundSchema.parse(getDeploymentGitSourceProjectId));
}
export function getDeploymentGitSourceProjectIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSourceProjectId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSourceProjectId' from JSON`);
}
/** @internal */
export const GetDeploymentGitSourceDeployments7$inboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$inboundSchema,
    projectId: z.union([z.string(), z.number()]),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/** @internal */
export const GetDeploymentGitSourceDeployments7$outboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$outboundSchema,
    projectId: z.union([z.string(), z.number()]),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeployments7$;
(function (GetDeploymentGitSourceDeployments7$) {
    /** @deprecated use `GetDeploymentGitSourceDeployments7$inboundSchema` instead. */
    GetDeploymentGitSourceDeployments7$.inboundSchema = GetDeploymentGitSourceDeployments7$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeployments7$outboundSchema` instead. */
    GetDeploymentGitSourceDeployments7$.outboundSchema = GetDeploymentGitSourceDeployments7$outboundSchema;
})(GetDeploymentGitSourceDeployments7$ || (GetDeploymentGitSourceDeployments7$ = {}));
export function getDeploymentGitSourceDeployments7ToJSON(getDeploymentGitSourceDeployments7) {
    return JSON.stringify(GetDeploymentGitSourceDeployments7$outboundSchema.parse(getDeploymentGitSourceDeployments7));
}
export function getDeploymentGitSourceDeployments7FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSourceDeployments7$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSourceDeployments7' from JSON`);
}
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$inboundSchema = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType);
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$;
(function (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$) {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$inboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$.inboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$outboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$.outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$outboundSchema;
})(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$ || (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$ = {}));
/** @internal */
export const GetDeploymentGitSourceDeployments6$inboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$inboundSchema,
    org: z.string(),
    repo: z.string(),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/** @internal */
export const GetDeploymentGitSourceDeployments6$outboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$outboundSchema,
    org: z.string(),
    repo: z.string(),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeployments6$;
(function (GetDeploymentGitSourceDeployments6$) {
    /** @deprecated use `GetDeploymentGitSourceDeployments6$inboundSchema` instead. */
    GetDeploymentGitSourceDeployments6$.inboundSchema = GetDeploymentGitSourceDeployments6$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeployments6$outboundSchema` instead. */
    GetDeploymentGitSourceDeployments6$.outboundSchema = GetDeploymentGitSourceDeployments6$outboundSchema;
})(GetDeploymentGitSourceDeployments6$ || (GetDeploymentGitSourceDeployments6$ = {}));
export function getDeploymentGitSourceDeployments6ToJSON(getDeploymentGitSourceDeployments6) {
    return JSON.stringify(GetDeploymentGitSourceDeployments6$outboundSchema.parse(getDeploymentGitSourceDeployments6));
}
export function getDeploymentGitSourceDeployments6FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSourceDeployments6$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSourceDeployments6' from JSON`);
}
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200Type$inboundSchema = z
    .nativeEnum(GetDeploymentGitSourceDeploymentsResponse200Type);
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200Type$outboundSchema = GetDeploymentGitSourceDeploymentsResponse200Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeploymentsResponse200Type$;
(function (GetDeploymentGitSourceDeploymentsResponse200Type$) {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200Type$inboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200Type$.inboundSchema = GetDeploymentGitSourceDeploymentsResponse200Type$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200Type$outboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200Type$.outboundSchema = GetDeploymentGitSourceDeploymentsResponse200Type$outboundSchema;
})(GetDeploymentGitSourceDeploymentsResponse200Type$ || (GetDeploymentGitSourceDeploymentsResponse200Type$ = {}));
/** @internal */
export const GetDeploymentGitSourceRepoId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const GetDeploymentGitSourceRepoId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceRepoId$;
(function (GetDeploymentGitSourceRepoId$) {
    /** @deprecated use `GetDeploymentGitSourceRepoId$inboundSchema` instead. */
    GetDeploymentGitSourceRepoId$.inboundSchema = GetDeploymentGitSourceRepoId$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceRepoId$outboundSchema` instead. */
    GetDeploymentGitSourceRepoId$.outboundSchema = GetDeploymentGitSourceRepoId$outboundSchema;
})(GetDeploymentGitSourceRepoId$ || (GetDeploymentGitSourceRepoId$ = {}));
export function getDeploymentGitSourceRepoIdToJSON(getDeploymentGitSourceRepoId) {
    return JSON.stringify(GetDeploymentGitSourceRepoId$outboundSchema.parse(getDeploymentGitSourceRepoId));
}
export function getDeploymentGitSourceRepoIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSourceRepoId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSourceRepoId' from JSON`);
}
/** @internal */
export const GetDeploymentGitSourceDeployments5$inboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200Type$inboundSchema,
    repoId: z.union([z.string(), z.number()]),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/** @internal */
export const GetDeploymentGitSourceDeployments5$outboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200Type$outboundSchema,
    repoId: z.union([z.string(), z.number()]),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeployments5$;
(function (GetDeploymentGitSourceDeployments5$) {
    /** @deprecated use `GetDeploymentGitSourceDeployments5$inboundSchema` instead. */
    GetDeploymentGitSourceDeployments5$.inboundSchema = GetDeploymentGitSourceDeployments5$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeployments5$outboundSchema` instead. */
    GetDeploymentGitSourceDeployments5$.outboundSchema = GetDeploymentGitSourceDeployments5$outboundSchema;
})(GetDeploymentGitSourceDeployments5$ || (GetDeploymentGitSourceDeployments5$ = {}));
export function getDeploymentGitSourceDeployments5ToJSON(getDeploymentGitSourceDeployments5) {
    return JSON.stringify(GetDeploymentGitSourceDeployments5$outboundSchema.parse(getDeploymentGitSourceDeployments5));
}
export function getDeploymentGitSourceDeployments5FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSourceDeployments5$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSourceDeployments5' from JSON`);
}
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponseType$inboundSchema = z
    .nativeEnum(GetDeploymentGitSourceDeploymentsResponseType);
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponseType$outboundSchema = GetDeploymentGitSourceDeploymentsResponseType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeploymentsResponseType$;
(function (GetDeploymentGitSourceDeploymentsResponseType$) {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponseType$inboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponseType$.inboundSchema = GetDeploymentGitSourceDeploymentsResponseType$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponseType$outboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponseType$.outboundSchema = GetDeploymentGitSourceDeploymentsResponseType$outboundSchema;
})(GetDeploymentGitSourceDeploymentsResponseType$ || (GetDeploymentGitSourceDeploymentsResponseType$ = {}));
/** @internal */
export const GetDeploymentGitSourceDeployments4$inboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponseType$inboundSchema,
    host: z.string(),
    org: z.string(),
    repo: z.string(),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/** @internal */
export const GetDeploymentGitSourceDeployments4$outboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponseType$outboundSchema,
    host: z.string(),
    org: z.string(),
    repo: z.string(),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeployments4$;
(function (GetDeploymentGitSourceDeployments4$) {
    /** @deprecated use `GetDeploymentGitSourceDeployments4$inboundSchema` instead. */
    GetDeploymentGitSourceDeployments4$.inboundSchema = GetDeploymentGitSourceDeployments4$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeployments4$outboundSchema` instead. */
    GetDeploymentGitSourceDeployments4$.outboundSchema = GetDeploymentGitSourceDeployments4$outboundSchema;
})(GetDeploymentGitSourceDeployments4$ || (GetDeploymentGitSourceDeployments4$ = {}));
export function getDeploymentGitSourceDeployments4ToJSON(getDeploymentGitSourceDeployments4) {
    return JSON.stringify(GetDeploymentGitSourceDeployments4$outboundSchema.parse(getDeploymentGitSourceDeployments4));
}
export function getDeploymentGitSourceDeployments4FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSourceDeployments4$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSourceDeployments4' from JSON`);
}
/** @internal */
export const GetDeploymentGitSourceDeploymentsType$inboundSchema = z.nativeEnum(GetDeploymentGitSourceDeploymentsType);
/** @internal */
export const GetDeploymentGitSourceDeploymentsType$outboundSchema = GetDeploymentGitSourceDeploymentsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeploymentsType$;
(function (GetDeploymentGitSourceDeploymentsType$) {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsType$inboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsType$.inboundSchema = GetDeploymentGitSourceDeploymentsType$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsType$outboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsType$.outboundSchema = GetDeploymentGitSourceDeploymentsType$outboundSchema;
})(GetDeploymentGitSourceDeploymentsType$ || (GetDeploymentGitSourceDeploymentsType$ = {}));
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId$;
(function (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId$) {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId$inboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId$.inboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId$outboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId$.outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId$outboundSchema;
})(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId$ || (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId$ = {}));
export function getDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoIdToJSON(getDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId) {
    return JSON.stringify(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId$outboundSchema
        .parse(getDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId));
}
export function getDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyRepoId' from JSON`);
}
/** @internal */
export const GetDeploymentGitSourceDeployments3$inboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsType$inboundSchema,
    host: z.string(),
    repoId: z.union([z.string(), z.number()]),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/** @internal */
export const GetDeploymentGitSourceDeployments3$outboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsType$outboundSchema,
    host: z.string(),
    repoId: z.union([z.string(), z.number()]),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeployments3$;
(function (GetDeploymentGitSourceDeployments3$) {
    /** @deprecated use `GetDeploymentGitSourceDeployments3$inboundSchema` instead. */
    GetDeploymentGitSourceDeployments3$.inboundSchema = GetDeploymentGitSourceDeployments3$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeployments3$outboundSchema` instead. */
    GetDeploymentGitSourceDeployments3$.outboundSchema = GetDeploymentGitSourceDeployments3$outboundSchema;
})(GetDeploymentGitSourceDeployments3$ || (GetDeploymentGitSourceDeployments3$ = {}));
export function getDeploymentGitSourceDeployments3ToJSON(getDeploymentGitSourceDeployments3) {
    return JSON.stringify(GetDeploymentGitSourceDeployments3$outboundSchema.parse(getDeploymentGitSourceDeployments3));
}
export function getDeploymentGitSourceDeployments3FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSourceDeployments3$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSourceDeployments3' from JSON`);
}
/** @internal */
export const GetDeploymentGitSourceType$inboundSchema = z.nativeEnum(GetDeploymentGitSourceType);
/** @internal */
export const GetDeploymentGitSourceType$outboundSchema = GetDeploymentGitSourceType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceType$;
(function (GetDeploymentGitSourceType$) {
    /** @deprecated use `GetDeploymentGitSourceType$inboundSchema` instead. */
    GetDeploymentGitSourceType$.inboundSchema = GetDeploymentGitSourceType$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceType$outboundSchema` instead. */
    GetDeploymentGitSourceType$.outboundSchema = GetDeploymentGitSourceType$outboundSchema;
})(GetDeploymentGitSourceType$ || (GetDeploymentGitSourceType$ = {}));
/** @internal */
export const GetDeploymentGitSourceDeployments2$inboundSchema = z.object({
    type: GetDeploymentGitSourceType$inboundSchema,
    org: z.string(),
    repo: z.string(),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/** @internal */
export const GetDeploymentGitSourceDeployments2$outboundSchema = z.object({
    type: GetDeploymentGitSourceType$outboundSchema,
    org: z.string(),
    repo: z.string(),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeployments2$;
(function (GetDeploymentGitSourceDeployments2$) {
    /** @deprecated use `GetDeploymentGitSourceDeployments2$inboundSchema` instead. */
    GetDeploymentGitSourceDeployments2$.inboundSchema = GetDeploymentGitSourceDeployments2$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeployments2$outboundSchema` instead. */
    GetDeploymentGitSourceDeployments2$.outboundSchema = GetDeploymentGitSourceDeployments2$outboundSchema;
})(GetDeploymentGitSourceDeployments2$ || (GetDeploymentGitSourceDeployments2$ = {}));
export function getDeploymentGitSourceDeployments2ToJSON(getDeploymentGitSourceDeployments2) {
    return JSON.stringify(GetDeploymentGitSourceDeployments2$outboundSchema.parse(getDeploymentGitSourceDeployments2));
}
export function getDeploymentGitSourceDeployments2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSourceDeployments2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSourceDeployments2' from JSON`);
}
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$inboundSchema = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type);
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$;
(function (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$) {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$inboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$.inboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$outboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$.outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$outboundSchema;
})(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$ || (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$ = {}));
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId$;
(function (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId$) {
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId$inboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId$.inboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId$outboundSchema` instead. */
    GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId$.outboundSchema = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId$outboundSchema;
})(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId$ || (GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId$ = {}));
export function getDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoIdToJSON(getDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId) {
    return JSON.stringify(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId$outboundSchema
        .parse(getDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId));
}
export function getDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONRepoId' from JSON`);
}
/** @internal */
export const GetDeploymentGitSourceDeployments1$inboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$inboundSchema,
    repoId: z.union([z.string(), z.number()]),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/** @internal */
export const GetDeploymentGitSourceDeployments1$outboundSchema = z.object({
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$outboundSchema,
    repoId: z.union([z.string(), z.number()]),
    ref: z.nullable(z.string()).optional(),
    sha: z.string().optional(),
    prId: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitSourceDeployments1$;
(function (GetDeploymentGitSourceDeployments1$) {
    /** @deprecated use `GetDeploymentGitSourceDeployments1$inboundSchema` instead. */
    GetDeploymentGitSourceDeployments1$.inboundSchema = GetDeploymentGitSourceDeployments1$inboundSchema;
    /** @deprecated use `GetDeploymentGitSourceDeployments1$outboundSchema` instead. */
    GetDeploymentGitSourceDeployments1$.outboundSchema = GetDeploymentGitSourceDeployments1$outboundSchema;
})(GetDeploymentGitSourceDeployments1$ || (GetDeploymentGitSourceDeployments1$ = {}));
export function getDeploymentGitSourceDeployments1ToJSON(getDeploymentGitSourceDeployments1) {
    return JSON.stringify(GetDeploymentGitSourceDeployments1$outboundSchema.parse(getDeploymentGitSourceDeployments1));
}
export function getDeploymentGitSourceDeployments1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitSourceDeployments1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitSourceDeployments1' from JSON`);
}
/** @internal */
export const GetDeploymentResponseBodyGitSource$inboundSchema = z.union([
    z.lazy(() => GetDeploymentGitSourceDeployments12$inboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments15$inboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments4$inboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments10$inboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments11$inboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments13$inboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments14$inboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments2$inboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments3$inboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments6$inboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments9$inboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments1$inboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments5$inboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments7$inboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments8$inboundSchema),
]);
/** @internal */
export const GetDeploymentResponseBodyGitSource$outboundSchema = z.union([
    z.lazy(() => GetDeploymentGitSourceDeployments12$outboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments15$outboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments4$outboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments10$outboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments11$outboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments13$outboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments14$outboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments2$outboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments3$outboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments6$outboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments9$outboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments1$outboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments5$outboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments7$outboundSchema),
    z.lazy(() => GetDeploymentGitSourceDeployments8$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentResponseBodyGitSource$;
(function (GetDeploymentResponseBodyGitSource$) {
    /** @deprecated use `GetDeploymentResponseBodyGitSource$inboundSchema` instead. */
    GetDeploymentResponseBodyGitSource$.inboundSchema = GetDeploymentResponseBodyGitSource$inboundSchema;
    /** @deprecated use `GetDeploymentResponseBodyGitSource$outboundSchema` instead. */
    GetDeploymentResponseBodyGitSource$.outboundSchema = GetDeploymentResponseBodyGitSource$outboundSchema;
})(GetDeploymentResponseBodyGitSource$ || (GetDeploymentResponseBodyGitSource$ = {}));
export function getDeploymentResponseBodyGitSourceToJSON(getDeploymentResponseBodyGitSource) {
    return JSON.stringify(GetDeploymentResponseBodyGitSource$outboundSchema.parse(getDeploymentResponseBodyGitSource));
}
export function getDeploymentResponseBodyGitSourceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentResponseBodyGitSource$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentResponseBodyGitSource' from JSON`);
}
/** @internal */
export const ResponseBodyNodeVersion$inboundSchema = z.nativeEnum(ResponseBodyNodeVersion);
/** @internal */
export const ResponseBodyNodeVersion$outboundSchema = ResponseBodyNodeVersion$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyNodeVersion$;
(function (ResponseBodyNodeVersion$) {
    /** @deprecated use `ResponseBodyNodeVersion$inboundSchema` instead. */
    ResponseBodyNodeVersion$.inboundSchema = ResponseBodyNodeVersion$inboundSchema;
    /** @deprecated use `ResponseBodyNodeVersion$outboundSchema` instead. */
    ResponseBodyNodeVersion$.outboundSchema = ResponseBodyNodeVersion$outboundSchema;
})(ResponseBodyNodeVersion$ || (ResponseBodyNodeVersion$ = {}));
/** @internal */
export const ResponseBodyProject$inboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    framework: z.nullable(z.string()).optional(),
});
/** @internal */
export const ResponseBodyProject$outboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    framework: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyProject$;
(function (ResponseBodyProject$) {
    /** @deprecated use `ResponseBodyProject$inboundSchema` instead. */
    ResponseBodyProject$.inboundSchema = ResponseBodyProject$inboundSchema;
    /** @deprecated use `ResponseBodyProject$outboundSchema` instead. */
    ResponseBodyProject$.outboundSchema = ResponseBodyProject$outboundSchema;
})(ResponseBodyProject$ || (ResponseBodyProject$ = {}));
export function responseBodyProjectToJSON(responseBodyProject) {
    return JSON.stringify(ResponseBodyProject$outboundSchema.parse(responseBodyProject));
}
export function responseBodyProjectFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyProject$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyProject' from JSON`);
}
/** @internal */
export const ResponseBodyReadySubstate$inboundSchema = z.nativeEnum(ResponseBodyReadySubstate);
/** @internal */
export const ResponseBodyReadySubstate$outboundSchema = ResponseBodyReadySubstate$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyReadySubstate$;
(function (ResponseBodyReadySubstate$) {
    /** @deprecated use `ResponseBodyReadySubstate$inboundSchema` instead. */
    ResponseBodyReadySubstate$.inboundSchema = ResponseBodyReadySubstate$inboundSchema;
    /** @deprecated use `ResponseBodyReadySubstate$outboundSchema` instead. */
    ResponseBodyReadySubstate$.outboundSchema = ResponseBodyReadySubstate$outboundSchema;
})(ResponseBodyReadySubstate$ || (ResponseBodyReadySubstate$ = {}));
/** @internal */
export const ResponseBodySource$inboundSchema = z.nativeEnum(ResponseBodySource);
/** @internal */
export const ResponseBodySource$outboundSchema = ResponseBodySource$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodySource$;
(function (ResponseBodySource$) {
    /** @deprecated use `ResponseBodySource$inboundSchema` instead. */
    ResponseBodySource$.inboundSchema = ResponseBodySource$inboundSchema;
    /** @deprecated use `ResponseBodySource$outboundSchema` instead. */
    ResponseBodySource$.outboundSchema = ResponseBodySource$outboundSchema;
})(ResponseBodySource$ || (ResponseBodySource$ = {}));
/** @internal */
export const ResponseBodyTarget$inboundSchema = z.nativeEnum(ResponseBodyTarget);
/** @internal */
export const ResponseBodyTarget$outboundSchema = ResponseBodyTarget$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyTarget$;
(function (ResponseBodyTarget$) {
    /** @deprecated use `ResponseBodyTarget$inboundSchema` instead. */
    ResponseBodyTarget$.inboundSchema = ResponseBodyTarget$inboundSchema;
    /** @deprecated use `ResponseBodyTarget$outboundSchema` instead. */
    ResponseBodyTarget$.outboundSchema = ResponseBodyTarget$outboundSchema;
})(ResponseBodyTarget$ || (ResponseBodyTarget$ = {}));
/** @internal */
export const ResponseBodyOidcTokenClaims$inboundSchema = z.object({
    iss: z.string(),
    sub: z.string(),
    scope: z.string(),
    aud: z.string(),
    owner: z.string(),
    owner_id: z.string(),
    project: z.string(),
    project_id: z.string(),
    environment: z.string(),
}).transform((v) => {
    return remap$(v, {
        "owner_id": "ownerId",
        "project_id": "projectId",
    });
});
/** @internal */
export const ResponseBodyOidcTokenClaims$outboundSchema = z.object({
    iss: z.string(),
    sub: z.string(),
    scope: z.string(),
    aud: z.string(),
    owner: z.string(),
    ownerId: z.string(),
    project: z.string(),
    projectId: z.string(),
    environment: z.string(),
}).transform((v) => {
    return remap$(v, {
        ownerId: "owner_id",
        projectId: "project_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyOidcTokenClaims$;
(function (ResponseBodyOidcTokenClaims$) {
    /** @deprecated use `ResponseBodyOidcTokenClaims$inboundSchema` instead. */
    ResponseBodyOidcTokenClaims$.inboundSchema = ResponseBodyOidcTokenClaims$inboundSchema;
    /** @deprecated use `ResponseBodyOidcTokenClaims$outboundSchema` instead. */
    ResponseBodyOidcTokenClaims$.outboundSchema = ResponseBodyOidcTokenClaims$outboundSchema;
})(ResponseBodyOidcTokenClaims$ || (ResponseBodyOidcTokenClaims$ = {}));
export function responseBodyOidcTokenClaimsToJSON(responseBodyOidcTokenClaims) {
    return JSON.stringify(ResponseBodyOidcTokenClaims$outboundSchema.parse(responseBodyOidcTokenClaims));
}
export function responseBodyOidcTokenClaimsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyOidcTokenClaims$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyOidcTokenClaims' from JSON`);
}
/** @internal */
export const ResponseBodyPlan$inboundSchema = z.nativeEnum(ResponseBodyPlan);
/** @internal */
export const ResponseBodyPlan$outboundSchema = ResponseBodyPlan$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyPlan$;
(function (ResponseBodyPlan$) {
    /** @deprecated use `ResponseBodyPlan$inboundSchema` instead. */
    ResponseBodyPlan$.inboundSchema = ResponseBodyPlan$inboundSchema;
    /** @deprecated use `ResponseBodyPlan$outboundSchema` instead. */
    ResponseBodyPlan$.outboundSchema = ResponseBodyPlan$outboundSchema;
})(ResponseBodyPlan$ || (ResponseBodyPlan$ = {}));
/** @internal */
export const ResponseBodyCrons$inboundSchema = z.object({
    schedule: z.string(),
    path: z.string(),
});
/** @internal */
export const ResponseBodyCrons$outboundSchema = z.object({
    schedule: z.string(),
    path: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyCrons$;
(function (ResponseBodyCrons$) {
    /** @deprecated use `ResponseBodyCrons$inboundSchema` instead. */
    ResponseBodyCrons$.inboundSchema = ResponseBodyCrons$inboundSchema;
    /** @deprecated use `ResponseBodyCrons$outboundSchema` instead. */
    ResponseBodyCrons$.outboundSchema = ResponseBodyCrons$outboundSchema;
})(ResponseBodyCrons$ || (ResponseBodyCrons$ = {}));
export function responseBodyCronsToJSON(responseBodyCrons) {
    return JSON.stringify(ResponseBodyCrons$outboundSchema.parse(responseBodyCrons));
}
export function responseBodyCronsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyCrons$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyCrons' from JSON`);
}
/** @internal */
export const ResponseBodyArchitecture$inboundSchema = z.nativeEnum(ResponseBodyArchitecture);
/** @internal */
export const ResponseBodyArchitecture$outboundSchema = ResponseBodyArchitecture$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyArchitecture$;
(function (ResponseBodyArchitecture$) {
    /** @deprecated use `ResponseBodyArchitecture$inboundSchema` instead. */
    ResponseBodyArchitecture$.inboundSchema = ResponseBodyArchitecture$inboundSchema;
    /** @deprecated use `ResponseBodyArchitecture$outboundSchema` instead. */
    ResponseBodyArchitecture$.outboundSchema = ResponseBodyArchitecture$outboundSchema;
})(ResponseBodyArchitecture$ || (ResponseBodyArchitecture$ = {}));
/** @internal */
export const GetDeploymentResponseBodyDeploymentsResponseType$inboundSchema = z
    .nativeEnum(GetDeploymentResponseBodyDeploymentsResponseType);
/** @internal */
export const GetDeploymentResponseBodyDeploymentsResponseType$outboundSchema = GetDeploymentResponseBodyDeploymentsResponseType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentResponseBodyDeploymentsResponseType$;
(function (GetDeploymentResponseBodyDeploymentsResponseType$) {
    /** @deprecated use `GetDeploymentResponseBodyDeploymentsResponseType$inboundSchema` instead. */
    GetDeploymentResponseBodyDeploymentsResponseType$.inboundSchema = GetDeploymentResponseBodyDeploymentsResponseType$inboundSchema;
    /** @deprecated use `GetDeploymentResponseBodyDeploymentsResponseType$outboundSchema` instead. */
    GetDeploymentResponseBodyDeploymentsResponseType$.outboundSchema = GetDeploymentResponseBodyDeploymentsResponseType$outboundSchema;
})(GetDeploymentResponseBodyDeploymentsResponseType$ || (GetDeploymentResponseBodyDeploymentsResponseType$ = {}));
/** @internal */
export const ResponseBodyExperimentalTriggers$inboundSchema = z.object({
    type: GetDeploymentResponseBodyDeploymentsResponseType$inboundSchema,
    topic: z.string(),
    consumer: z.string(),
    maxDeliveries: z.number().optional(),
    retryAfterSeconds: z.number().optional(),
    initialDelaySeconds: z.number().optional(),
});
/** @internal */
export const ResponseBodyExperimentalTriggers$outboundSchema = z.object({
    type: GetDeploymentResponseBodyDeploymentsResponseType$outboundSchema,
    topic: z.string(),
    consumer: z.string(),
    maxDeliveries: z.number().optional(),
    retryAfterSeconds: z.number().optional(),
    initialDelaySeconds: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyExperimentalTriggers$;
(function (ResponseBodyExperimentalTriggers$) {
    /** @deprecated use `ResponseBodyExperimentalTriggers$inboundSchema` instead. */
    ResponseBodyExperimentalTriggers$.inboundSchema = ResponseBodyExperimentalTriggers$inboundSchema;
    /** @deprecated use `ResponseBodyExperimentalTriggers$outboundSchema` instead. */
    ResponseBodyExperimentalTriggers$.outboundSchema = ResponseBodyExperimentalTriggers$outboundSchema;
})(ResponseBodyExperimentalTriggers$ || (ResponseBodyExperimentalTriggers$ = {}));
export function responseBodyExperimentalTriggersToJSON(responseBodyExperimentalTriggers) {
    return JSON.stringify(ResponseBodyExperimentalTriggers$outboundSchema.parse(responseBodyExperimentalTriggers));
}
export function responseBodyExperimentalTriggersFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyExperimentalTriggers$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyExperimentalTriggers' from JSON`);
}
/** @internal */
export const ResponseBodyFunctions$inboundSchema = z.object({
    architecture: ResponseBodyArchitecture$inboundSchema.optional(),
    memory: z.number().optional(),
    maxDuration: z.number().optional(),
    runtime: z.string().optional(),
    includeFiles: z.string().optional(),
    excludeFiles: z.string().optional(),
    experimentalTriggers: z.array(z.lazy(() => ResponseBodyExperimentalTriggers$inboundSchema)).optional(),
    supportsCancellation: z.boolean().optional(),
});
/** @internal */
export const ResponseBodyFunctions$outboundSchema = z.object({
    architecture: ResponseBodyArchitecture$outboundSchema.optional(),
    memory: z.number().optional(),
    maxDuration: z.number().optional(),
    runtime: z.string().optional(),
    includeFiles: z.string().optional(),
    excludeFiles: z.string().optional(),
    experimentalTriggers: z.array(z.lazy(() => ResponseBodyExperimentalTriggers$outboundSchema)).optional(),
    supportsCancellation: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyFunctions$;
(function (ResponseBodyFunctions$) {
    /** @deprecated use `ResponseBodyFunctions$inboundSchema` instead. */
    ResponseBodyFunctions$.inboundSchema = ResponseBodyFunctions$inboundSchema;
    /** @deprecated use `ResponseBodyFunctions$outboundSchema` instead. */
    ResponseBodyFunctions$.outboundSchema = ResponseBodyFunctions$outboundSchema;
})(ResponseBodyFunctions$ || (ResponseBodyFunctions$ = {}));
export function responseBodyFunctionsToJSON(responseBodyFunctions) {
    return JSON.stringify(ResponseBodyFunctions$outboundSchema.parse(responseBodyFunctions));
}
export function responseBodyFunctionsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyFunctions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyFunctions' from JSON`);
}
/** @internal */
export const GetDeploymentRoutes3$inboundSchema = z.object({
    src: z.string(),
    continue: z.boolean(),
    middleware: z.number(),
});
/** @internal */
export const GetDeploymentRoutes3$outboundSchema = z.object({
    src: z.string(),
    continue: z.boolean(),
    middleware: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentRoutes3$;
(function (GetDeploymentRoutes3$) {
    /** @deprecated use `GetDeploymentRoutes3$inboundSchema` instead. */
    GetDeploymentRoutes3$.inboundSchema = GetDeploymentRoutes3$inboundSchema;
    /** @deprecated use `GetDeploymentRoutes3$outboundSchema` instead. */
    GetDeploymentRoutes3$.outboundSchema = GetDeploymentRoutes3$outboundSchema;
})(GetDeploymentRoutes3$ || (GetDeploymentRoutes3$ = {}));
export function getDeploymentRoutes3ToJSON(getDeploymentRoutes3) {
    return JSON.stringify(GetDeploymentRoutes3$outboundSchema.parse(getDeploymentRoutes3));
}
export function getDeploymentRoutes3FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentRoutes3$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentRoutes3' from JSON`);
}
/** @internal */
export const GetDeploymentRoutesHandle$inboundSchema = z.nativeEnum(GetDeploymentRoutesHandle);
/** @internal */
export const GetDeploymentRoutesHandle$outboundSchema = GetDeploymentRoutesHandle$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentRoutesHandle$;
(function (GetDeploymentRoutesHandle$) {
    /** @deprecated use `GetDeploymentRoutesHandle$inboundSchema` instead. */
    GetDeploymentRoutesHandle$.inboundSchema = GetDeploymentRoutesHandle$inboundSchema;
    /** @deprecated use `GetDeploymentRoutesHandle$outboundSchema` instead. */
    GetDeploymentRoutesHandle$.outboundSchema = GetDeploymentRoutesHandle$outboundSchema;
})(GetDeploymentRoutesHandle$ || (GetDeploymentRoutesHandle$ = {}));
/** @internal */
export const GetDeploymentRoutes2$inboundSchema = z.object({
    handle: GetDeploymentRoutesHandle$inboundSchema,
    src: z.string().optional(),
    dest: z.string().optional(),
    status: z.number().optional(),
});
/** @internal */
export const GetDeploymentRoutes2$outboundSchema = z.object({
    handle: GetDeploymentRoutesHandle$outboundSchema,
    src: z.string().optional(),
    dest: z.string().optional(),
    status: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentRoutes2$;
(function (GetDeploymentRoutes2$) {
    /** @deprecated use `GetDeploymentRoutes2$inboundSchema` instead. */
    GetDeploymentRoutes2$.inboundSchema = GetDeploymentRoutes2$inboundSchema;
    /** @deprecated use `GetDeploymentRoutes2$outboundSchema` instead. */
    GetDeploymentRoutes2$.outboundSchema = GetDeploymentRoutes2$outboundSchema;
})(GetDeploymentRoutes2$ || (GetDeploymentRoutes2$ = {}));
export function getDeploymentRoutes2ToJSON(getDeploymentRoutes2) {
    return JSON.stringify(GetDeploymentRoutes2$outboundSchema.parse(getDeploymentRoutes2));
}
export function getDeploymentRoutes2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentRoutes2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentRoutes2' from JSON`);
}
/** @internal */
export const GetDeploymentHasDeploymentsType$inboundSchema = z.nativeEnum(GetDeploymentHasDeploymentsType);
/** @internal */
export const GetDeploymentHasDeploymentsType$outboundSchema = GetDeploymentHasDeploymentsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentHasDeploymentsType$;
(function (GetDeploymentHasDeploymentsType$) {
    /** @deprecated use `GetDeploymentHasDeploymentsType$inboundSchema` instead. */
    GetDeploymentHasDeploymentsType$.inboundSchema = GetDeploymentHasDeploymentsType$inboundSchema;
    /** @deprecated use `GetDeploymentHasDeploymentsType$outboundSchema` instead. */
    GetDeploymentHasDeploymentsType$.outboundSchema = GetDeploymentHasDeploymentsType$outboundSchema;
})(GetDeploymentHasDeploymentsType$ || (GetDeploymentHasDeploymentsType$ = {}));
/** @internal */
export const GetDeploymentValueDeploymentsResponse200Eq$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const GetDeploymentValueDeploymentsResponse200Eq$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentValueDeploymentsResponse200Eq$;
(function (GetDeploymentValueDeploymentsResponse200Eq$) {
    /** @deprecated use `GetDeploymentValueDeploymentsResponse200Eq$inboundSchema` instead. */
    GetDeploymentValueDeploymentsResponse200Eq$.inboundSchema = GetDeploymentValueDeploymentsResponse200Eq$inboundSchema;
    /** @deprecated use `GetDeploymentValueDeploymentsResponse200Eq$outboundSchema` instead. */
    GetDeploymentValueDeploymentsResponse200Eq$.outboundSchema = GetDeploymentValueDeploymentsResponse200Eq$outboundSchema;
})(GetDeploymentValueDeploymentsResponse200Eq$ || (GetDeploymentValueDeploymentsResponse200Eq$ = {}));
export function getDeploymentValueDeploymentsResponse200EqToJSON(getDeploymentValueDeploymentsResponse200Eq) {
    return JSON.stringify(GetDeploymentValueDeploymentsResponse200Eq$outboundSchema.parse(getDeploymentValueDeploymentsResponse200Eq));
}
export function getDeploymentValueDeploymentsResponse200EqFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentValueDeploymentsResponse200Eq$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentValueDeploymentsResponse200Eq' from JSON`);
}
/** @internal */
export const GetDeploymentValue2$inboundSchema = z.object({
    eq: z.union([z.string(), z.number()]).optional(),
    neq: z.string().optional(),
    inc: z.array(z.string()).optional(),
    ninc: z.array(z.string()).optional(),
    pre: z.string().optional(),
    suf: z.string().optional(),
    re: z.string().optional(),
    gt: z.number().optional(),
    gte: z.number().optional(),
    lt: z.number().optional(),
    lte: z.number().optional(),
});
/** @internal */
export const GetDeploymentValue2$outboundSchema = z.object({
    eq: z.union([z.string(), z.number()]).optional(),
    neq: z.string().optional(),
    inc: z.array(z.string()).optional(),
    ninc: z.array(z.string()).optional(),
    pre: z.string().optional(),
    suf: z.string().optional(),
    re: z.string().optional(),
    gt: z.number().optional(),
    gte: z.number().optional(),
    lt: z.number().optional(),
    lte: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentValue2$;
(function (GetDeploymentValue2$) {
    /** @deprecated use `GetDeploymentValue2$inboundSchema` instead. */
    GetDeploymentValue2$.inboundSchema = GetDeploymentValue2$inboundSchema;
    /** @deprecated use `GetDeploymentValue2$outboundSchema` instead. */
    GetDeploymentValue2$.outboundSchema = GetDeploymentValue2$outboundSchema;
})(GetDeploymentValue2$ || (GetDeploymentValue2$ = {}));
export function getDeploymentValue2ToJSON(getDeploymentValue2) {
    return JSON.stringify(GetDeploymentValue2$outboundSchema.parse(getDeploymentValue2));
}
export function getDeploymentValue2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentValue2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentValue2' from JSON`);
}
/** @internal */
export const GetDeploymentHasDeploymentsValue$inboundSchema = z.union([z.lazy(() => GetDeploymentValue2$inboundSchema), z.string()]);
/** @internal */
export const GetDeploymentHasDeploymentsValue$outboundSchema = z.union([z.lazy(() => GetDeploymentValue2$outboundSchema), z.string()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentHasDeploymentsValue$;
(function (GetDeploymentHasDeploymentsValue$) {
    /** @deprecated use `GetDeploymentHasDeploymentsValue$inboundSchema` instead. */
    GetDeploymentHasDeploymentsValue$.inboundSchema = GetDeploymentHasDeploymentsValue$inboundSchema;
    /** @deprecated use `GetDeploymentHasDeploymentsValue$outboundSchema` instead. */
    GetDeploymentHasDeploymentsValue$.outboundSchema = GetDeploymentHasDeploymentsValue$outboundSchema;
})(GetDeploymentHasDeploymentsValue$ || (GetDeploymentHasDeploymentsValue$ = {}));
export function getDeploymentHasDeploymentsValueToJSON(getDeploymentHasDeploymentsValue) {
    return JSON.stringify(GetDeploymentHasDeploymentsValue$outboundSchema.parse(getDeploymentHasDeploymentsValue));
}
export function getDeploymentHasDeploymentsValueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentHasDeploymentsValue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentHasDeploymentsValue' from JSON`);
}
/** @internal */
export const GetDeploymentHas2$inboundSchema = z.object({
    type: GetDeploymentHasDeploymentsType$inboundSchema,
    key: z.string(),
    value: z.union([z.lazy(() => GetDeploymentValue2$inboundSchema), z.string()])
        .optional(),
});
/** @internal */
export const GetDeploymentHas2$outboundSchema = z.object({
    type: GetDeploymentHasDeploymentsType$outboundSchema,
    key: z.string(),
    value: z.union([z.lazy(() => GetDeploymentValue2$outboundSchema), z.string()])
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentHas2$;
(function (GetDeploymentHas2$) {
    /** @deprecated use `GetDeploymentHas2$inboundSchema` instead. */
    GetDeploymentHas2$.inboundSchema = GetDeploymentHas2$inboundSchema;
    /** @deprecated use `GetDeploymentHas2$outboundSchema` instead. */
    GetDeploymentHas2$.outboundSchema = GetDeploymentHas2$outboundSchema;
})(GetDeploymentHas2$ || (GetDeploymentHas2$ = {}));
export function getDeploymentHas2ToJSON(getDeploymentHas2) {
    return JSON.stringify(GetDeploymentHas2$outboundSchema.parse(getDeploymentHas2));
}
export function getDeploymentHas2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentHas2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentHas2' from JSON`);
}
/** @internal */
export const GetDeploymentHasType$inboundSchema = z.nativeEnum(GetDeploymentHasType);
/** @internal */
export const GetDeploymentHasType$outboundSchema = GetDeploymentHasType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentHasType$;
(function (GetDeploymentHasType$) {
    /** @deprecated use `GetDeploymentHasType$inboundSchema` instead. */
    GetDeploymentHasType$.inboundSchema = GetDeploymentHasType$inboundSchema;
    /** @deprecated use `GetDeploymentHasType$outboundSchema` instead. */
    GetDeploymentHasType$.outboundSchema = GetDeploymentHasType$outboundSchema;
})(GetDeploymentHasType$ || (GetDeploymentHasType$ = {}));
/** @internal */
export const GetDeploymentValueDeploymentsResponseEq$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const GetDeploymentValueDeploymentsResponseEq$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentValueDeploymentsResponseEq$;
(function (GetDeploymentValueDeploymentsResponseEq$) {
    /** @deprecated use `GetDeploymentValueDeploymentsResponseEq$inboundSchema` instead. */
    GetDeploymentValueDeploymentsResponseEq$.inboundSchema = GetDeploymentValueDeploymentsResponseEq$inboundSchema;
    /** @deprecated use `GetDeploymentValueDeploymentsResponseEq$outboundSchema` instead. */
    GetDeploymentValueDeploymentsResponseEq$.outboundSchema = GetDeploymentValueDeploymentsResponseEq$outboundSchema;
})(GetDeploymentValueDeploymentsResponseEq$ || (GetDeploymentValueDeploymentsResponseEq$ = {}));
export function getDeploymentValueDeploymentsResponseEqToJSON(getDeploymentValueDeploymentsResponseEq) {
    return JSON.stringify(GetDeploymentValueDeploymentsResponseEq$outboundSchema.parse(getDeploymentValueDeploymentsResponseEq));
}
export function getDeploymentValueDeploymentsResponseEqFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentValueDeploymentsResponseEq$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentValueDeploymentsResponseEq' from JSON`);
}
/** @internal */
export const GetDeploymentValueDeploymentsResponse2002$inboundSchema = z.object({
    eq: z.union([z.string(), z.number()]).optional(),
    neq: z.string().optional(),
    inc: z.array(z.string()).optional(),
    ninc: z.array(z.string()).optional(),
    pre: z.string().optional(),
    suf: z.string().optional(),
    re: z.string().optional(),
    gt: z.number().optional(),
    gte: z.number().optional(),
    lt: z.number().optional(),
    lte: z.number().optional(),
});
/** @internal */
export const GetDeploymentValueDeploymentsResponse2002$outboundSchema = z.object({
    eq: z.union([z.string(), z.number()]).optional(),
    neq: z.string().optional(),
    inc: z.array(z.string()).optional(),
    ninc: z.array(z.string()).optional(),
    pre: z.string().optional(),
    suf: z.string().optional(),
    re: z.string().optional(),
    gt: z.number().optional(),
    gte: z.number().optional(),
    lt: z.number().optional(),
    lte: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentValueDeploymentsResponse2002$;
(function (GetDeploymentValueDeploymentsResponse2002$) {
    /** @deprecated use `GetDeploymentValueDeploymentsResponse2002$inboundSchema` instead. */
    GetDeploymentValueDeploymentsResponse2002$.inboundSchema = GetDeploymentValueDeploymentsResponse2002$inboundSchema;
    /** @deprecated use `GetDeploymentValueDeploymentsResponse2002$outboundSchema` instead. */
    GetDeploymentValueDeploymentsResponse2002$.outboundSchema = GetDeploymentValueDeploymentsResponse2002$outboundSchema;
})(GetDeploymentValueDeploymentsResponse2002$ || (GetDeploymentValueDeploymentsResponse2002$ = {}));
export function getDeploymentValueDeploymentsResponse2002ToJSON(getDeploymentValueDeploymentsResponse2002) {
    return JSON.stringify(GetDeploymentValueDeploymentsResponse2002$outboundSchema.parse(getDeploymentValueDeploymentsResponse2002));
}
export function getDeploymentValueDeploymentsResponse2002FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentValueDeploymentsResponse2002$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentValueDeploymentsResponse2002' from JSON`);
}
/** @internal */
export const GetDeploymentHasValue$inboundSchema = z.union([
    z.lazy(() => GetDeploymentValueDeploymentsResponse2002$inboundSchema),
    z.string(),
]);
/** @internal */
export const GetDeploymentHasValue$outboundSchema = z.union([
    z.lazy(() => GetDeploymentValueDeploymentsResponse2002$outboundSchema),
    z.string(),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentHasValue$;
(function (GetDeploymentHasValue$) {
    /** @deprecated use `GetDeploymentHasValue$inboundSchema` instead. */
    GetDeploymentHasValue$.inboundSchema = GetDeploymentHasValue$inboundSchema;
    /** @deprecated use `GetDeploymentHasValue$outboundSchema` instead. */
    GetDeploymentHasValue$.outboundSchema = GetDeploymentHasValue$outboundSchema;
})(GetDeploymentHasValue$ || (GetDeploymentHasValue$ = {}));
export function getDeploymentHasValueToJSON(getDeploymentHasValue) {
    return JSON.stringify(GetDeploymentHasValue$outboundSchema.parse(getDeploymentHasValue));
}
export function getDeploymentHasValueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentHasValue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentHasValue' from JSON`);
}
/** @internal */
export const GetDeploymentHas1$inboundSchema = z.object({
    type: GetDeploymentHasType$inboundSchema,
    value: z.union([
        z.lazy(() => GetDeploymentValueDeploymentsResponse2002$inboundSchema),
        z.string(),
    ]),
});
/** @internal */
export const GetDeploymentHas1$outboundSchema = z.object({
    type: GetDeploymentHasType$outboundSchema,
    value: z.union([
        z.lazy(() => GetDeploymentValueDeploymentsResponse2002$outboundSchema),
        z.string(),
    ]),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentHas1$;
(function (GetDeploymentHas1$) {
    /** @deprecated use `GetDeploymentHas1$inboundSchema` instead. */
    GetDeploymentHas1$.inboundSchema = GetDeploymentHas1$inboundSchema;
    /** @deprecated use `GetDeploymentHas1$outboundSchema` instead. */
    GetDeploymentHas1$.outboundSchema = GetDeploymentHas1$outboundSchema;
})(GetDeploymentHas1$ || (GetDeploymentHas1$ = {}));
export function getDeploymentHas1ToJSON(getDeploymentHas1) {
    return JSON.stringify(GetDeploymentHas1$outboundSchema.parse(getDeploymentHas1));
}
export function getDeploymentHas1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentHas1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentHas1' from JSON`);
}
/** @internal */
export const GetDeploymentRoutesHas$inboundSchema = z.union([
    z.lazy(() => GetDeploymentHas1$inboundSchema),
    z.lazy(() => GetDeploymentHas2$inboundSchema),
]);
/** @internal */
export const GetDeploymentRoutesHas$outboundSchema = z.union([
    z.lazy(() => GetDeploymentHas1$outboundSchema),
    z.lazy(() => GetDeploymentHas2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentRoutesHas$;
(function (GetDeploymentRoutesHas$) {
    /** @deprecated use `GetDeploymentRoutesHas$inboundSchema` instead. */
    GetDeploymentRoutesHas$.inboundSchema = GetDeploymentRoutesHas$inboundSchema;
    /** @deprecated use `GetDeploymentRoutesHas$outboundSchema` instead. */
    GetDeploymentRoutesHas$.outboundSchema = GetDeploymentRoutesHas$outboundSchema;
})(GetDeploymentRoutesHas$ || (GetDeploymentRoutesHas$ = {}));
export function getDeploymentRoutesHasToJSON(getDeploymentRoutesHas) {
    return JSON.stringify(GetDeploymentRoutesHas$outboundSchema.parse(getDeploymentRoutesHas));
}
export function getDeploymentRoutesHasFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentRoutesHas$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentRoutesHas' from JSON`);
}
/** @internal */
export const GetDeploymentMissingType$inboundSchema = z.nativeEnum(GetDeploymentMissingType);
/** @internal */
export const GetDeploymentMissingType$outboundSchema = GetDeploymentMissingType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentMissingType$;
(function (GetDeploymentMissingType$) {
    /** @deprecated use `GetDeploymentMissingType$inboundSchema` instead. */
    GetDeploymentMissingType$.inboundSchema = GetDeploymentMissingType$inboundSchema;
    /** @deprecated use `GetDeploymentMissingType$outboundSchema` instead. */
    GetDeploymentMissingType$.outboundSchema = GetDeploymentMissingType$outboundSchema;
})(GetDeploymentMissingType$ || (GetDeploymentMissingType$ = {}));
/** @internal */
export const GetDeploymentValueDeploymentsEq$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const GetDeploymentValueDeploymentsEq$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentValueDeploymentsEq$;
(function (GetDeploymentValueDeploymentsEq$) {
    /** @deprecated use `GetDeploymentValueDeploymentsEq$inboundSchema` instead. */
    GetDeploymentValueDeploymentsEq$.inboundSchema = GetDeploymentValueDeploymentsEq$inboundSchema;
    /** @deprecated use `GetDeploymentValueDeploymentsEq$outboundSchema` instead. */
    GetDeploymentValueDeploymentsEq$.outboundSchema = GetDeploymentValueDeploymentsEq$outboundSchema;
})(GetDeploymentValueDeploymentsEq$ || (GetDeploymentValueDeploymentsEq$ = {}));
export function getDeploymentValueDeploymentsEqToJSON(getDeploymentValueDeploymentsEq) {
    return JSON.stringify(GetDeploymentValueDeploymentsEq$outboundSchema.parse(getDeploymentValueDeploymentsEq));
}
export function getDeploymentValueDeploymentsEqFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentValueDeploymentsEq$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentValueDeploymentsEq' from JSON`);
}
/** @internal */
export const GetDeploymentValueDeploymentsResponse2$inboundSchema = z.object({
    eq: z.union([z.string(), z.number()]).optional(),
    neq: z.string().optional(),
    inc: z.array(z.string()).optional(),
    ninc: z.array(z.string()).optional(),
    pre: z.string().optional(),
    suf: z.string().optional(),
    re: z.string().optional(),
    gt: z.number().optional(),
    gte: z.number().optional(),
    lt: z.number().optional(),
    lte: z.number().optional(),
});
/** @internal */
export const GetDeploymentValueDeploymentsResponse2$outboundSchema = z.object({
    eq: z.union([z.string(), z.number()]).optional(),
    neq: z.string().optional(),
    inc: z.array(z.string()).optional(),
    ninc: z.array(z.string()).optional(),
    pre: z.string().optional(),
    suf: z.string().optional(),
    re: z.string().optional(),
    gt: z.number().optional(),
    gte: z.number().optional(),
    lt: z.number().optional(),
    lte: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentValueDeploymentsResponse2$;
(function (GetDeploymentValueDeploymentsResponse2$) {
    /** @deprecated use `GetDeploymentValueDeploymentsResponse2$inboundSchema` instead. */
    GetDeploymentValueDeploymentsResponse2$.inboundSchema = GetDeploymentValueDeploymentsResponse2$inboundSchema;
    /** @deprecated use `GetDeploymentValueDeploymentsResponse2$outboundSchema` instead. */
    GetDeploymentValueDeploymentsResponse2$.outboundSchema = GetDeploymentValueDeploymentsResponse2$outboundSchema;
})(GetDeploymentValueDeploymentsResponse2$ || (GetDeploymentValueDeploymentsResponse2$ = {}));
export function getDeploymentValueDeploymentsResponse2ToJSON(getDeploymentValueDeploymentsResponse2) {
    return JSON.stringify(GetDeploymentValueDeploymentsResponse2$outboundSchema.parse(getDeploymentValueDeploymentsResponse2));
}
export function getDeploymentValueDeploymentsResponse2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentValueDeploymentsResponse2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentValueDeploymentsResponse2' from JSON`);
}
/** @internal */
export const GetDeploymentMissingValue$inboundSchema = z.union([
    z.lazy(() => GetDeploymentValueDeploymentsResponse2$inboundSchema),
    z.string(),
]);
/** @internal */
export const GetDeploymentMissingValue$outboundSchema = z.union([
    z.lazy(() => GetDeploymentValueDeploymentsResponse2$outboundSchema),
    z.string(),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentMissingValue$;
(function (GetDeploymentMissingValue$) {
    /** @deprecated use `GetDeploymentMissingValue$inboundSchema` instead. */
    GetDeploymentMissingValue$.inboundSchema = GetDeploymentMissingValue$inboundSchema;
    /** @deprecated use `GetDeploymentMissingValue$outboundSchema` instead. */
    GetDeploymentMissingValue$.outboundSchema = GetDeploymentMissingValue$outboundSchema;
})(GetDeploymentMissingValue$ || (GetDeploymentMissingValue$ = {}));
export function getDeploymentMissingValueToJSON(getDeploymentMissingValue) {
    return JSON.stringify(GetDeploymentMissingValue$outboundSchema.parse(getDeploymentMissingValue));
}
export function getDeploymentMissingValueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentMissingValue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentMissingValue' from JSON`);
}
/** @internal */
export const GetDeploymentMissing2$inboundSchema = z.object({
    type: GetDeploymentMissingType$inboundSchema,
    key: z.string(),
    value: z.union([
        z.lazy(() => GetDeploymentValueDeploymentsResponse2$inboundSchema),
        z.string(),
    ]).optional(),
});
/** @internal */
export const GetDeploymentMissing2$outboundSchema = z.object({
    type: GetDeploymentMissingType$outboundSchema,
    key: z.string(),
    value: z.union([
        z.lazy(() => GetDeploymentValueDeploymentsResponse2$outboundSchema),
        z.string(),
    ]).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentMissing2$;
(function (GetDeploymentMissing2$) {
    /** @deprecated use `GetDeploymentMissing2$inboundSchema` instead. */
    GetDeploymentMissing2$.inboundSchema = GetDeploymentMissing2$inboundSchema;
    /** @deprecated use `GetDeploymentMissing2$outboundSchema` instead. */
    GetDeploymentMissing2$.outboundSchema = GetDeploymentMissing2$outboundSchema;
})(GetDeploymentMissing2$ || (GetDeploymentMissing2$ = {}));
export function getDeploymentMissing2ToJSON(getDeploymentMissing2) {
    return JSON.stringify(GetDeploymentMissing2$outboundSchema.parse(getDeploymentMissing2));
}
export function getDeploymentMissing2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentMissing2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentMissing2' from JSON`);
}
/** @internal */
export const GetDeploymentMissingDeploymentsType$inboundSchema = z.nativeEnum(GetDeploymentMissingDeploymentsType);
/** @internal */
export const GetDeploymentMissingDeploymentsType$outboundSchema = GetDeploymentMissingDeploymentsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentMissingDeploymentsType$;
(function (GetDeploymentMissingDeploymentsType$) {
    /** @deprecated use `GetDeploymentMissingDeploymentsType$inboundSchema` instead. */
    GetDeploymentMissingDeploymentsType$.inboundSchema = GetDeploymentMissingDeploymentsType$inboundSchema;
    /** @deprecated use `GetDeploymentMissingDeploymentsType$outboundSchema` instead. */
    GetDeploymentMissingDeploymentsType$.outboundSchema = GetDeploymentMissingDeploymentsType$outboundSchema;
})(GetDeploymentMissingDeploymentsType$ || (GetDeploymentMissingDeploymentsType$ = {}));
/** @internal */
export const GetDeploymentValueEq$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const GetDeploymentValueEq$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentValueEq$;
(function (GetDeploymentValueEq$) {
    /** @deprecated use `GetDeploymentValueEq$inboundSchema` instead. */
    GetDeploymentValueEq$.inboundSchema = GetDeploymentValueEq$inboundSchema;
    /** @deprecated use `GetDeploymentValueEq$outboundSchema` instead. */
    GetDeploymentValueEq$.outboundSchema = GetDeploymentValueEq$outboundSchema;
})(GetDeploymentValueEq$ || (GetDeploymentValueEq$ = {}));
export function getDeploymentValueEqToJSON(getDeploymentValueEq) {
    return JSON.stringify(GetDeploymentValueEq$outboundSchema.parse(getDeploymentValueEq));
}
export function getDeploymentValueEqFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentValueEq$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentValueEq' from JSON`);
}
/** @internal */
export const GetDeploymentValueDeployments2$inboundSchema = z.object({
    eq: z.union([z.string(), z.number()]).optional(),
    neq: z.string().optional(),
    inc: z.array(z.string()).optional(),
    ninc: z.array(z.string()).optional(),
    pre: z.string().optional(),
    suf: z.string().optional(),
    re: z.string().optional(),
    gt: z.number().optional(),
    gte: z.number().optional(),
    lt: z.number().optional(),
    lte: z.number().optional(),
});
/** @internal */
export const GetDeploymentValueDeployments2$outboundSchema = z.object({
    eq: z.union([z.string(), z.number()]).optional(),
    neq: z.string().optional(),
    inc: z.array(z.string()).optional(),
    ninc: z.array(z.string()).optional(),
    pre: z.string().optional(),
    suf: z.string().optional(),
    re: z.string().optional(),
    gt: z.number().optional(),
    gte: z.number().optional(),
    lt: z.number().optional(),
    lte: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentValueDeployments2$;
(function (GetDeploymentValueDeployments2$) {
    /** @deprecated use `GetDeploymentValueDeployments2$inboundSchema` instead. */
    GetDeploymentValueDeployments2$.inboundSchema = GetDeploymentValueDeployments2$inboundSchema;
    /** @deprecated use `GetDeploymentValueDeployments2$outboundSchema` instead. */
    GetDeploymentValueDeployments2$.outboundSchema = GetDeploymentValueDeployments2$outboundSchema;
})(GetDeploymentValueDeployments2$ || (GetDeploymentValueDeployments2$ = {}));
export function getDeploymentValueDeployments2ToJSON(getDeploymentValueDeployments2) {
    return JSON.stringify(GetDeploymentValueDeployments2$outboundSchema.parse(getDeploymentValueDeployments2));
}
export function getDeploymentValueDeployments2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentValueDeployments2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentValueDeployments2' from JSON`);
}
/** @internal */
export const GetDeploymentMissingDeploymentsValue$inboundSchema = z.union([
    z.lazy(() => GetDeploymentValueDeployments2$inboundSchema),
    z.string(),
]);
/** @internal */
export const GetDeploymentMissingDeploymentsValue$outboundSchema = z.union([
    z.lazy(() => GetDeploymentValueDeployments2$outboundSchema),
    z.string(),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentMissingDeploymentsValue$;
(function (GetDeploymentMissingDeploymentsValue$) {
    /** @deprecated use `GetDeploymentMissingDeploymentsValue$inboundSchema` instead. */
    GetDeploymentMissingDeploymentsValue$.inboundSchema = GetDeploymentMissingDeploymentsValue$inboundSchema;
    /** @deprecated use `GetDeploymentMissingDeploymentsValue$outboundSchema` instead. */
    GetDeploymentMissingDeploymentsValue$.outboundSchema = GetDeploymentMissingDeploymentsValue$outboundSchema;
})(GetDeploymentMissingDeploymentsValue$ || (GetDeploymentMissingDeploymentsValue$ = {}));
export function getDeploymentMissingDeploymentsValueToJSON(getDeploymentMissingDeploymentsValue) {
    return JSON.stringify(GetDeploymentMissingDeploymentsValue$outboundSchema.parse(getDeploymentMissingDeploymentsValue));
}
export function getDeploymentMissingDeploymentsValueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentMissingDeploymentsValue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentMissingDeploymentsValue' from JSON`);
}
/** @internal */
export const GetDeploymentMissing1$inboundSchema = z.object({
    type: GetDeploymentMissingDeploymentsType$inboundSchema,
    value: z.union([
        z.lazy(() => GetDeploymentValueDeployments2$inboundSchema),
        z.string(),
    ]),
});
/** @internal */
export const GetDeploymentMissing1$outboundSchema = z.object({
    type: GetDeploymentMissingDeploymentsType$outboundSchema,
    value: z.union([
        z.lazy(() => GetDeploymentValueDeployments2$outboundSchema),
        z.string(),
    ]),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentMissing1$;
(function (GetDeploymentMissing1$) {
    /** @deprecated use `GetDeploymentMissing1$inboundSchema` instead. */
    GetDeploymentMissing1$.inboundSchema = GetDeploymentMissing1$inboundSchema;
    /** @deprecated use `GetDeploymentMissing1$outboundSchema` instead. */
    GetDeploymentMissing1$.outboundSchema = GetDeploymentMissing1$outboundSchema;
})(GetDeploymentMissing1$ || (GetDeploymentMissing1$ = {}));
export function getDeploymentMissing1ToJSON(getDeploymentMissing1) {
    return JSON.stringify(GetDeploymentMissing1$outboundSchema.parse(getDeploymentMissing1));
}
export function getDeploymentMissing1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentMissing1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentMissing1' from JSON`);
}
/** @internal */
export const GetDeploymentRoutesMissing$inboundSchema = z.union([
    z.lazy(() => GetDeploymentMissing1$inboundSchema),
    z.lazy(() => GetDeploymentMissing2$inboundSchema),
]);
/** @internal */
export const GetDeploymentRoutesMissing$outboundSchema = z.union([
    z.lazy(() => GetDeploymentMissing1$outboundSchema),
    z.lazy(() => GetDeploymentMissing2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentRoutesMissing$;
(function (GetDeploymentRoutesMissing$) {
    /** @deprecated use `GetDeploymentRoutesMissing$inboundSchema` instead. */
    GetDeploymentRoutesMissing$.inboundSchema = GetDeploymentRoutesMissing$inboundSchema;
    /** @deprecated use `GetDeploymentRoutesMissing$outboundSchema` instead. */
    GetDeploymentRoutesMissing$.outboundSchema = GetDeploymentRoutesMissing$outboundSchema;
})(GetDeploymentRoutesMissing$ || (GetDeploymentRoutesMissing$ = {}));
export function getDeploymentRoutesMissingToJSON(getDeploymentRoutesMissing) {
    return JSON.stringify(GetDeploymentRoutesMissing$outboundSchema.parse(getDeploymentRoutesMissing));
}
export function getDeploymentRoutesMissingFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentRoutesMissing$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentRoutesMissing' from JSON`);
}
/** @internal */
export const GetDeploymentRoutesAction$inboundSchema = z.nativeEnum(GetDeploymentRoutesAction);
/** @internal */
export const GetDeploymentRoutesAction$outboundSchema = GetDeploymentRoutesAction$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentRoutesAction$;
(function (GetDeploymentRoutesAction$) {
    /** @deprecated use `GetDeploymentRoutesAction$inboundSchema` instead. */
    GetDeploymentRoutesAction$.inboundSchema = GetDeploymentRoutesAction$inboundSchema;
    /** @deprecated use `GetDeploymentRoutesAction$outboundSchema` instead. */
    GetDeploymentRoutesAction$.outboundSchema = GetDeploymentRoutesAction$outboundSchema;
})(GetDeploymentRoutesAction$ || (GetDeploymentRoutesAction$ = {}));
/** @internal */
export const GetDeploymentRoutesMitigate$inboundSchema = z.object({
    action: GetDeploymentRoutesAction$inboundSchema,
});
/** @internal */
export const GetDeploymentRoutesMitigate$outboundSchema = z.object({
    action: GetDeploymentRoutesAction$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentRoutesMitigate$;
(function (GetDeploymentRoutesMitigate$) {
    /** @deprecated use `GetDeploymentRoutesMitigate$inboundSchema` instead. */
    GetDeploymentRoutesMitigate$.inboundSchema = GetDeploymentRoutesMitigate$inboundSchema;
    /** @deprecated use `GetDeploymentRoutesMitigate$outboundSchema` instead. */
    GetDeploymentRoutesMitigate$.outboundSchema = GetDeploymentRoutesMitigate$outboundSchema;
})(GetDeploymentRoutesMitigate$ || (GetDeploymentRoutesMitigate$ = {}));
export function getDeploymentRoutesMitigateToJSON(getDeploymentRoutesMitigate) {
    return JSON.stringify(GetDeploymentRoutesMitigate$outboundSchema.parse(getDeploymentRoutesMitigate));
}
export function getDeploymentRoutesMitigateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentRoutesMitigate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentRoutesMitigate' from JSON`);
}
/** @internal */
export const GetDeploymentRoutesType$inboundSchema = z.nativeEnum(GetDeploymentRoutesType);
/** @internal */
export const GetDeploymentRoutesType$outboundSchema = GetDeploymentRoutesType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentRoutesType$;
(function (GetDeploymentRoutesType$) {
    /** @deprecated use `GetDeploymentRoutesType$inboundSchema` instead. */
    GetDeploymentRoutesType$.inboundSchema = GetDeploymentRoutesType$inboundSchema;
    /** @deprecated use `GetDeploymentRoutesType$outboundSchema` instead. */
    GetDeploymentRoutesType$.outboundSchema = GetDeploymentRoutesType$outboundSchema;
})(GetDeploymentRoutesType$ || (GetDeploymentRoutesType$ = {}));
/** @internal */
export const GetDeploymentRoutesOp$inboundSchema = z.nativeEnum(GetDeploymentRoutesOp);
/** @internal */
export const GetDeploymentRoutesOp$outboundSchema = GetDeploymentRoutesOp$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentRoutesOp$;
(function (GetDeploymentRoutesOp$) {
    /** @deprecated use `GetDeploymentRoutesOp$inboundSchema` instead. */
    GetDeploymentRoutesOp$.inboundSchema = GetDeploymentRoutesOp$inboundSchema;
    /** @deprecated use `GetDeploymentRoutesOp$outboundSchema` instead. */
    GetDeploymentRoutesOp$.outboundSchema = GetDeploymentRoutesOp$outboundSchema;
})(GetDeploymentRoutesOp$ || (GetDeploymentRoutesOp$ = {}));
/** @internal */
export const GetDeploymentKeyEq$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const GetDeploymentKeyEq$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentKeyEq$;
(function (GetDeploymentKeyEq$) {
    /** @deprecated use `GetDeploymentKeyEq$inboundSchema` instead. */
    GetDeploymentKeyEq$.inboundSchema = GetDeploymentKeyEq$inboundSchema;
    /** @deprecated use `GetDeploymentKeyEq$outboundSchema` instead. */
    GetDeploymentKeyEq$.outboundSchema = GetDeploymentKeyEq$outboundSchema;
})(GetDeploymentKeyEq$ || (GetDeploymentKeyEq$ = {}));
export function getDeploymentKeyEqToJSON(getDeploymentKeyEq) {
    return JSON.stringify(GetDeploymentKeyEq$outboundSchema.parse(getDeploymentKeyEq));
}
export function getDeploymentKeyEqFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentKeyEq$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentKeyEq' from JSON`);
}
/** @internal */
export const GetDeploymentKey2$inboundSchema = z.object({
    eq: z.union([z.string(), z.number()]).optional(),
    neq: z.string().optional(),
    inc: z.array(z.string()).optional(),
    ninc: z.array(z.string()).optional(),
    pre: z.string().optional(),
    suf: z.string().optional(),
    gt: z.number().optional(),
    gte: z.number().optional(),
    lt: z.number().optional(),
    lte: z.number().optional(),
});
/** @internal */
export const GetDeploymentKey2$outboundSchema = z.object({
    eq: z.union([z.string(), z.number()]).optional(),
    neq: z.string().optional(),
    inc: z.array(z.string()).optional(),
    ninc: z.array(z.string()).optional(),
    pre: z.string().optional(),
    suf: z.string().optional(),
    gt: z.number().optional(),
    gte: z.number().optional(),
    lt: z.number().optional(),
    lte: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentKey2$;
(function (GetDeploymentKey2$) {
    /** @deprecated use `GetDeploymentKey2$inboundSchema` instead. */
    GetDeploymentKey2$.inboundSchema = GetDeploymentKey2$inboundSchema;
    /** @deprecated use `GetDeploymentKey2$outboundSchema` instead. */
    GetDeploymentKey2$.outboundSchema = GetDeploymentKey2$outboundSchema;
})(GetDeploymentKey2$ || (GetDeploymentKey2$ = {}));
export function getDeploymentKey2ToJSON(getDeploymentKey2) {
    return JSON.stringify(GetDeploymentKey2$outboundSchema.parse(getDeploymentKey2));
}
export function getDeploymentKey2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentKey2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentKey2' from JSON`);
}
/** @internal */
export const GetDeploymentRoutesKey$inboundSchema = z.union([z.lazy(() => GetDeploymentKey2$inboundSchema), z.string()]);
/** @internal */
export const GetDeploymentRoutesKey$outboundSchema = z.union([z.lazy(() => GetDeploymentKey2$outboundSchema), z.string()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentRoutesKey$;
(function (GetDeploymentRoutesKey$) {
    /** @deprecated use `GetDeploymentRoutesKey$inboundSchema` instead. */
    GetDeploymentRoutesKey$.inboundSchema = GetDeploymentRoutesKey$inboundSchema;
    /** @deprecated use `GetDeploymentRoutesKey$outboundSchema` instead. */
    GetDeploymentRoutesKey$.outboundSchema = GetDeploymentRoutesKey$outboundSchema;
})(GetDeploymentRoutesKey$ || (GetDeploymentRoutesKey$ = {}));
export function getDeploymentRoutesKeyToJSON(getDeploymentRoutesKey) {
    return JSON.stringify(GetDeploymentRoutesKey$outboundSchema.parse(getDeploymentRoutesKey));
}
export function getDeploymentRoutesKeyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentRoutesKey$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentRoutesKey' from JSON`);
}
/** @internal */
export const GetDeploymentRoutesTarget$inboundSchema = z.object({
    key: z.union([z.lazy(() => GetDeploymentKey2$inboundSchema), z.string()]),
});
/** @internal */
export const GetDeploymentRoutesTarget$outboundSchema = z.object({
    key: z.union([z.lazy(() => GetDeploymentKey2$outboundSchema), z.string()]),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentRoutesTarget$;
(function (GetDeploymentRoutesTarget$) {
    /** @deprecated use `GetDeploymentRoutesTarget$inboundSchema` instead. */
    GetDeploymentRoutesTarget$.inboundSchema = GetDeploymentRoutesTarget$inboundSchema;
    /** @deprecated use `GetDeploymentRoutesTarget$outboundSchema` instead. */
    GetDeploymentRoutesTarget$.outboundSchema = GetDeploymentRoutesTarget$outboundSchema;
})(GetDeploymentRoutesTarget$ || (GetDeploymentRoutesTarget$ = {}));
export function getDeploymentRoutesTargetToJSON(getDeploymentRoutesTarget) {
    return JSON.stringify(GetDeploymentRoutesTarget$outboundSchema.parse(getDeploymentRoutesTarget));
}
export function getDeploymentRoutesTargetFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentRoutesTarget$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentRoutesTarget' from JSON`);
}
/** @internal */
export const GetDeploymentRoutesArgs$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const GetDeploymentRoutesArgs$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentRoutesArgs$;
(function (GetDeploymentRoutesArgs$) {
    /** @deprecated use `GetDeploymentRoutesArgs$inboundSchema` instead. */
    GetDeploymentRoutesArgs$.inboundSchema = GetDeploymentRoutesArgs$inboundSchema;
    /** @deprecated use `GetDeploymentRoutesArgs$outboundSchema` instead. */
    GetDeploymentRoutesArgs$.outboundSchema = GetDeploymentRoutesArgs$outboundSchema;
})(GetDeploymentRoutesArgs$ || (GetDeploymentRoutesArgs$ = {}));
export function getDeploymentRoutesArgsToJSON(getDeploymentRoutesArgs) {
    return JSON.stringify(GetDeploymentRoutesArgs$outboundSchema.parse(getDeploymentRoutesArgs));
}
export function getDeploymentRoutesArgsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentRoutesArgs$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentRoutesArgs' from JSON`);
}
/** @internal */
export const GetDeploymentRoutesTransforms$inboundSchema = z.object({
    type: GetDeploymentRoutesType$inboundSchema,
    op: GetDeploymentRoutesOp$inboundSchema,
    target: z.lazy(() => GetDeploymentRoutesTarget$inboundSchema),
    args: z.union([z.string(), z.array(z.string())]).optional(),
});
/** @internal */
export const GetDeploymentRoutesTransforms$outboundSchema = z.object({
    type: GetDeploymentRoutesType$outboundSchema,
    op: GetDeploymentRoutesOp$outboundSchema,
    target: z.lazy(() => GetDeploymentRoutesTarget$outboundSchema),
    args: z.union([z.string(), z.array(z.string())]).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentRoutesTransforms$;
(function (GetDeploymentRoutesTransforms$) {
    /** @deprecated use `GetDeploymentRoutesTransforms$inboundSchema` instead. */
    GetDeploymentRoutesTransforms$.inboundSchema = GetDeploymentRoutesTransforms$inboundSchema;
    /** @deprecated use `GetDeploymentRoutesTransforms$outboundSchema` instead. */
    GetDeploymentRoutesTransforms$.outboundSchema = GetDeploymentRoutesTransforms$outboundSchema;
})(GetDeploymentRoutesTransforms$ || (GetDeploymentRoutesTransforms$ = {}));
export function getDeploymentRoutesTransformsToJSON(getDeploymentRoutesTransforms) {
    return JSON.stringify(GetDeploymentRoutesTransforms$outboundSchema.parse(getDeploymentRoutesTransforms));
}
export function getDeploymentRoutesTransformsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentRoutesTransforms$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentRoutesTransforms' from JSON`);
}
/** @internal */
export const GetDeploymentRoutesLocale$inboundSchema = z.object({
    redirect: z.record(z.string()).optional(),
    cookie: z.string().optional(),
});
/** @internal */
export const GetDeploymentRoutesLocale$outboundSchema = z.object({
    redirect: z.record(z.string()).optional(),
    cookie: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentRoutesLocale$;
(function (GetDeploymentRoutesLocale$) {
    /** @deprecated use `GetDeploymentRoutesLocale$inboundSchema` instead. */
    GetDeploymentRoutesLocale$.inboundSchema = GetDeploymentRoutesLocale$inboundSchema;
    /** @deprecated use `GetDeploymentRoutesLocale$outboundSchema` instead. */
    GetDeploymentRoutesLocale$.outboundSchema = GetDeploymentRoutesLocale$outboundSchema;
})(GetDeploymentRoutesLocale$ || (GetDeploymentRoutesLocale$ = {}));
export function getDeploymentRoutesLocaleToJSON(getDeploymentRoutesLocale) {
    return JSON.stringify(GetDeploymentRoutesLocale$outboundSchema.parse(getDeploymentRoutesLocale));
}
export function getDeploymentRoutesLocaleFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentRoutesLocale$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentRoutesLocale' from JSON`);
}
/** @internal */
export const GetDeploymentRoutes1$inboundSchema = z.object({
    src: z.string(),
    dest: z.string().optional(),
    headers: z.record(z.string()).optional(),
    methods: z.array(z.string()).optional(),
    continue: z.boolean().optional(),
    override: z.boolean().optional(),
    caseSensitive: z.boolean().optional(),
    check: z.boolean().optional(),
    important: z.boolean().optional(),
    status: z.number().optional(),
    has: z.array(z.union([
        z.lazy(() => GetDeploymentHas1$inboundSchema),
        z.lazy(() => GetDeploymentHas2$inboundSchema),
    ])).optional(),
    missing: z.array(z.union([
        z.lazy(() => GetDeploymentMissing1$inboundSchema),
        z.lazy(() => GetDeploymentMissing2$inboundSchema),
    ])).optional(),
    mitigate: z.lazy(() => GetDeploymentRoutesMitigate$inboundSchema).optional(),
    transforms: z.array(z.lazy(() => GetDeploymentRoutesTransforms$inboundSchema))
        .optional(),
    locale: z.lazy(() => GetDeploymentRoutesLocale$inboundSchema).optional(),
    middlewarePath: z.string().optional(),
    middlewareRawSrc: z.array(z.string()).optional(),
    middleware: z.number().optional(),
});
/** @internal */
export const GetDeploymentRoutes1$outboundSchema = z.object({
    src: z.string(),
    dest: z.string().optional(),
    headers: z.record(z.string()).optional(),
    methods: z.array(z.string()).optional(),
    continue: z.boolean().optional(),
    override: z.boolean().optional(),
    caseSensitive: z.boolean().optional(),
    check: z.boolean().optional(),
    important: z.boolean().optional(),
    status: z.number().optional(),
    has: z.array(z.union([
        z.lazy(() => GetDeploymentHas1$outboundSchema),
        z.lazy(() => GetDeploymentHas2$outboundSchema),
    ])).optional(),
    missing: z.array(z.union([
        z.lazy(() => GetDeploymentMissing1$outboundSchema),
        z.lazy(() => GetDeploymentMissing2$outboundSchema),
    ])).optional(),
    mitigate: z.lazy(() => GetDeploymentRoutesMitigate$outboundSchema).optional(),
    transforms: z.array(z.lazy(() => GetDeploymentRoutesTransforms$outboundSchema)).optional(),
    locale: z.lazy(() => GetDeploymentRoutesLocale$outboundSchema).optional(),
    middlewarePath: z.string().optional(),
    middlewareRawSrc: z.array(z.string()).optional(),
    middleware: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentRoutes1$;
(function (GetDeploymentRoutes1$) {
    /** @deprecated use `GetDeploymentRoutes1$inboundSchema` instead. */
    GetDeploymentRoutes1$.inboundSchema = GetDeploymentRoutes1$inboundSchema;
    /** @deprecated use `GetDeploymentRoutes1$outboundSchema` instead. */
    GetDeploymentRoutes1$.outboundSchema = GetDeploymentRoutes1$outboundSchema;
})(GetDeploymentRoutes1$ || (GetDeploymentRoutes1$ = {}));
export function getDeploymentRoutes1ToJSON(getDeploymentRoutes1) {
    return JSON.stringify(GetDeploymentRoutes1$outboundSchema.parse(getDeploymentRoutes1));
}
export function getDeploymentRoutes1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentRoutes1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentRoutes1' from JSON`);
}
/** @internal */
export const ResponseBodyRoutes$inboundSchema = z.union([
    z.lazy(() => GetDeploymentRoutes3$inboundSchema),
    z.lazy(() => GetDeploymentRoutes1$inboundSchema),
    z.lazy(() => GetDeploymentRoutes2$inboundSchema),
]);
/** @internal */
export const ResponseBodyRoutes$outboundSchema = z.union([
    z.lazy(() => GetDeploymentRoutes3$outboundSchema),
    z.lazy(() => GetDeploymentRoutes1$outboundSchema),
    z.lazy(() => GetDeploymentRoutes2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyRoutes$;
(function (ResponseBodyRoutes$) {
    /** @deprecated use `ResponseBodyRoutes$inboundSchema` instead. */
    ResponseBodyRoutes$.inboundSchema = ResponseBodyRoutes$inboundSchema;
    /** @deprecated use `ResponseBodyRoutes$outboundSchema` instead. */
    ResponseBodyRoutes$.outboundSchema = ResponseBodyRoutes$outboundSchema;
})(ResponseBodyRoutes$ || (ResponseBodyRoutes$ = {}));
export function responseBodyRoutesToJSON(responseBodyRoutes) {
    return JSON.stringify(ResponseBodyRoutes$outboundSchema.parse(responseBodyRoutes));
}
export function responseBodyRoutesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyRoutes$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyRoutes' from JSON`);
}
/** @internal */
export const GetDeploymentGitRepoDeploymentsType$inboundSchema = z.nativeEnum(GetDeploymentGitRepoDeploymentsType);
/** @internal */
export const GetDeploymentGitRepoDeploymentsType$outboundSchema = GetDeploymentGitRepoDeploymentsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitRepoDeploymentsType$;
(function (GetDeploymentGitRepoDeploymentsType$) {
    /** @deprecated use `GetDeploymentGitRepoDeploymentsType$inboundSchema` instead. */
    GetDeploymentGitRepoDeploymentsType$.inboundSchema = GetDeploymentGitRepoDeploymentsType$inboundSchema;
    /** @deprecated use `GetDeploymentGitRepoDeploymentsType$outboundSchema` instead. */
    GetDeploymentGitRepoDeploymentsType$.outboundSchema = GetDeploymentGitRepoDeploymentsType$outboundSchema;
})(GetDeploymentGitRepoDeploymentsType$ || (GetDeploymentGitRepoDeploymentsType$ = {}));
/** @internal */
export const GetDeploymentGitRepoOwnerType$inboundSchema = z.nativeEnum(GetDeploymentGitRepoOwnerType);
/** @internal */
export const GetDeploymentGitRepoOwnerType$outboundSchema = GetDeploymentGitRepoOwnerType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitRepoOwnerType$;
(function (GetDeploymentGitRepoOwnerType$) {
    /** @deprecated use `GetDeploymentGitRepoOwnerType$inboundSchema` instead. */
    GetDeploymentGitRepoOwnerType$.inboundSchema = GetDeploymentGitRepoOwnerType$inboundSchema;
    /** @deprecated use `GetDeploymentGitRepoOwnerType$outboundSchema` instead. */
    GetDeploymentGitRepoOwnerType$.outboundSchema = GetDeploymentGitRepoOwnerType$outboundSchema;
})(GetDeploymentGitRepoOwnerType$ || (GetDeploymentGitRepoOwnerType$ = {}));
/** @internal */
export const GetDeploymentGitRepo3$inboundSchema = z.object({
    owner: z.string(),
    repoUuid: z.string(),
    slug: z.string(),
    type: GetDeploymentGitRepoDeploymentsType$inboundSchema,
    workspaceUuid: z.string(),
    path: z.string(),
    defaultBranch: z.string(),
    name: z.string(),
    private: z.boolean(),
    ownerType: GetDeploymentGitRepoOwnerType$inboundSchema,
});
/** @internal */
export const GetDeploymentGitRepo3$outboundSchema = z.object({
    owner: z.string(),
    repoUuid: z.string(),
    slug: z.string(),
    type: GetDeploymentGitRepoDeploymentsType$outboundSchema,
    workspaceUuid: z.string(),
    path: z.string(),
    defaultBranch: z.string(),
    name: z.string(),
    private: z.boolean(),
    ownerType: GetDeploymentGitRepoOwnerType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitRepo3$;
(function (GetDeploymentGitRepo3$) {
    /** @deprecated use `GetDeploymentGitRepo3$inboundSchema` instead. */
    GetDeploymentGitRepo3$.inboundSchema = GetDeploymentGitRepo3$inboundSchema;
    /** @deprecated use `GetDeploymentGitRepo3$outboundSchema` instead. */
    GetDeploymentGitRepo3$.outboundSchema = GetDeploymentGitRepo3$outboundSchema;
})(GetDeploymentGitRepo3$ || (GetDeploymentGitRepo3$ = {}));
export function getDeploymentGitRepo3ToJSON(getDeploymentGitRepo3) {
    return JSON.stringify(GetDeploymentGitRepo3$outboundSchema.parse(getDeploymentGitRepo3));
}
export function getDeploymentGitRepo3FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitRepo3$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitRepo3' from JSON`);
}
/** @internal */
export const GetDeploymentGitRepoType$inboundSchema = z.nativeEnum(GetDeploymentGitRepoType);
/** @internal */
export const GetDeploymentGitRepoType$outboundSchema = GetDeploymentGitRepoType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitRepoType$;
(function (GetDeploymentGitRepoType$) {
    /** @deprecated use `GetDeploymentGitRepoType$inboundSchema` instead. */
    GetDeploymentGitRepoType$.inboundSchema = GetDeploymentGitRepoType$inboundSchema;
    /** @deprecated use `GetDeploymentGitRepoType$outboundSchema` instead. */
    GetDeploymentGitRepoType$.outboundSchema = GetDeploymentGitRepoType$outboundSchema;
})(GetDeploymentGitRepoType$ || (GetDeploymentGitRepoType$ = {}));
/** @internal */
export const GetDeploymentGitRepoDeploymentsResponseOwnerType$inboundSchema = z
    .nativeEnum(GetDeploymentGitRepoDeploymentsResponseOwnerType);
/** @internal */
export const GetDeploymentGitRepoDeploymentsResponseOwnerType$outboundSchema = GetDeploymentGitRepoDeploymentsResponseOwnerType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitRepoDeploymentsResponseOwnerType$;
(function (GetDeploymentGitRepoDeploymentsResponseOwnerType$) {
    /** @deprecated use `GetDeploymentGitRepoDeploymentsResponseOwnerType$inboundSchema` instead. */
    GetDeploymentGitRepoDeploymentsResponseOwnerType$.inboundSchema = GetDeploymentGitRepoDeploymentsResponseOwnerType$inboundSchema;
    /** @deprecated use `GetDeploymentGitRepoDeploymentsResponseOwnerType$outboundSchema` instead. */
    GetDeploymentGitRepoDeploymentsResponseOwnerType$.outboundSchema = GetDeploymentGitRepoDeploymentsResponseOwnerType$outboundSchema;
})(GetDeploymentGitRepoDeploymentsResponseOwnerType$ || (GetDeploymentGitRepoDeploymentsResponseOwnerType$ = {}));
/** @internal */
export const GetDeploymentGitRepo2$inboundSchema = z.object({
    org: z.string(),
    repo: z.string(),
    repoId: z.number(),
    type: GetDeploymentGitRepoType$inboundSchema,
    repoOwnerId: z.number(),
    path: z.string(),
    defaultBranch: z.string(),
    name: z.string(),
    private: z.boolean(),
    ownerType: GetDeploymentGitRepoDeploymentsResponseOwnerType$inboundSchema,
});
/** @internal */
export const GetDeploymentGitRepo2$outboundSchema = z.object({
    org: z.string(),
    repo: z.string(),
    repoId: z.number(),
    type: GetDeploymentGitRepoType$outboundSchema,
    repoOwnerId: z.number(),
    path: z.string(),
    defaultBranch: z.string(),
    name: z.string(),
    private: z.boolean(),
    ownerType: GetDeploymentGitRepoDeploymentsResponseOwnerType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitRepo2$;
(function (GetDeploymentGitRepo2$) {
    /** @deprecated use `GetDeploymentGitRepo2$inboundSchema` instead. */
    GetDeploymentGitRepo2$.inboundSchema = GetDeploymentGitRepo2$inboundSchema;
    /** @deprecated use `GetDeploymentGitRepo2$outboundSchema` instead. */
    GetDeploymentGitRepo2$.outboundSchema = GetDeploymentGitRepo2$outboundSchema;
})(GetDeploymentGitRepo2$ || (GetDeploymentGitRepo2$ = {}));
export function getDeploymentGitRepo2ToJSON(getDeploymentGitRepo2) {
    return JSON.stringify(GetDeploymentGitRepo2$outboundSchema.parse(getDeploymentGitRepo2));
}
export function getDeploymentGitRepo2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitRepo2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitRepo2' from JSON`);
}
/** @internal */
export const GetDeploymentGitRepoDeploymentsResponseType$inboundSchema = z
    .nativeEnum(GetDeploymentGitRepoDeploymentsResponseType);
/** @internal */
export const GetDeploymentGitRepoDeploymentsResponseType$outboundSchema = GetDeploymentGitRepoDeploymentsResponseType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitRepoDeploymentsResponseType$;
(function (GetDeploymentGitRepoDeploymentsResponseType$) {
    /** @deprecated use `GetDeploymentGitRepoDeploymentsResponseType$inboundSchema` instead. */
    GetDeploymentGitRepoDeploymentsResponseType$.inboundSchema = GetDeploymentGitRepoDeploymentsResponseType$inboundSchema;
    /** @deprecated use `GetDeploymentGitRepoDeploymentsResponseType$outboundSchema` instead. */
    GetDeploymentGitRepoDeploymentsResponseType$.outboundSchema = GetDeploymentGitRepoDeploymentsResponseType$outboundSchema;
})(GetDeploymentGitRepoDeploymentsResponseType$ || (GetDeploymentGitRepoDeploymentsResponseType$ = {}));
/** @internal */
export const GetDeploymentGitRepoDeploymentsOwnerType$inboundSchema = z
    .nativeEnum(GetDeploymentGitRepoDeploymentsOwnerType);
/** @internal */
export const GetDeploymentGitRepoDeploymentsOwnerType$outboundSchema = GetDeploymentGitRepoDeploymentsOwnerType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitRepoDeploymentsOwnerType$;
(function (GetDeploymentGitRepoDeploymentsOwnerType$) {
    /** @deprecated use `GetDeploymentGitRepoDeploymentsOwnerType$inboundSchema` instead. */
    GetDeploymentGitRepoDeploymentsOwnerType$.inboundSchema = GetDeploymentGitRepoDeploymentsOwnerType$inboundSchema;
    /** @deprecated use `GetDeploymentGitRepoDeploymentsOwnerType$outboundSchema` instead. */
    GetDeploymentGitRepoDeploymentsOwnerType$.outboundSchema = GetDeploymentGitRepoDeploymentsOwnerType$outboundSchema;
})(GetDeploymentGitRepoDeploymentsOwnerType$ || (GetDeploymentGitRepoDeploymentsOwnerType$ = {}));
/** @internal */
export const GetDeploymentGitRepo1$inboundSchema = z.object({
    namespace: z.string(),
    projectId: z.number(),
    type: GetDeploymentGitRepoDeploymentsResponseType$inboundSchema,
    url: z.string(),
    path: z.string(),
    defaultBranch: z.string(),
    name: z.string(),
    private: z.boolean(),
    ownerType: GetDeploymentGitRepoDeploymentsOwnerType$inboundSchema,
});
/** @internal */
export const GetDeploymentGitRepo1$outboundSchema = z.object({
    namespace: z.string(),
    projectId: z.number(),
    type: GetDeploymentGitRepoDeploymentsResponseType$outboundSchema,
    url: z.string(),
    path: z.string(),
    defaultBranch: z.string(),
    name: z.string(),
    private: z.boolean(),
    ownerType: GetDeploymentGitRepoDeploymentsOwnerType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentGitRepo1$;
(function (GetDeploymentGitRepo1$) {
    /** @deprecated use `GetDeploymentGitRepo1$inboundSchema` instead. */
    GetDeploymentGitRepo1$.inboundSchema = GetDeploymentGitRepo1$inboundSchema;
    /** @deprecated use `GetDeploymentGitRepo1$outboundSchema` instead. */
    GetDeploymentGitRepo1$.outboundSchema = GetDeploymentGitRepo1$outboundSchema;
})(GetDeploymentGitRepo1$ || (GetDeploymentGitRepo1$ = {}));
export function getDeploymentGitRepo1ToJSON(getDeploymentGitRepo1) {
    return JSON.stringify(GetDeploymentGitRepo1$outboundSchema.parse(getDeploymentGitRepo1));
}
export function getDeploymentGitRepo1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentGitRepo1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentGitRepo1' from JSON`);
}
/** @internal */
export const ResponseBodyGitRepo$inboundSchema = z.union([
    z.lazy(() => GetDeploymentGitRepo2$inboundSchema),
    z.lazy(() => GetDeploymentGitRepo3$inboundSchema),
    z.lazy(() => GetDeploymentGitRepo1$inboundSchema),
]);
/** @internal */
export const ResponseBodyGitRepo$outboundSchema = z.union([
    z.lazy(() => GetDeploymentGitRepo2$outboundSchema),
    z.lazy(() => GetDeploymentGitRepo3$outboundSchema),
    z.lazy(() => GetDeploymentGitRepo1$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyGitRepo$;
(function (ResponseBodyGitRepo$) {
    /** @deprecated use `ResponseBodyGitRepo$inboundSchema` instead. */
    ResponseBodyGitRepo$.inboundSchema = ResponseBodyGitRepo$inboundSchema;
    /** @deprecated use `ResponseBodyGitRepo$outboundSchema` instead. */
    ResponseBodyGitRepo$.outboundSchema = ResponseBodyGitRepo$outboundSchema;
})(ResponseBodyGitRepo$ || (ResponseBodyGitRepo$ = {}));
export function responseBodyGitRepoToJSON(responseBodyGitRepo) {
    return JSON.stringify(ResponseBodyGitRepo$outboundSchema.parse(responseBodyGitRepo));
}
export function responseBodyGitRepoFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyGitRepo$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyGitRepo' from JSON`);
}
/** @internal */
export const GetDeploymentFlags2$inboundSchema = z.object({});
/** @internal */
export const GetDeploymentFlags2$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentFlags2$;
(function (GetDeploymentFlags2$) {
    /** @deprecated use `GetDeploymentFlags2$inboundSchema` instead. */
    GetDeploymentFlags2$.inboundSchema = GetDeploymentFlags2$inboundSchema;
    /** @deprecated use `GetDeploymentFlags2$outboundSchema` instead. */
    GetDeploymentFlags2$.outboundSchema = GetDeploymentFlags2$outboundSchema;
})(GetDeploymentFlags2$ || (GetDeploymentFlags2$ = {}));
export function getDeploymentFlags2ToJSON(getDeploymentFlags2) {
    return JSON.stringify(GetDeploymentFlags2$outboundSchema.parse(getDeploymentFlags2));
}
export function getDeploymentFlags2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentFlags2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentFlags2' from JSON`);
}
/** @internal */
export const GetDeploymentFlagsOptions$inboundSchema = z.object({
    value: z.nullable(FlagJSONValue$inboundSchema),
    label: z.string().optional(),
});
/** @internal */
export const GetDeploymentFlagsOptions$outboundSchema = z.object({
    value: z.nullable(FlagJSONValue$outboundSchema),
    label: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentFlagsOptions$;
(function (GetDeploymentFlagsOptions$) {
    /** @deprecated use `GetDeploymentFlagsOptions$inboundSchema` instead. */
    GetDeploymentFlagsOptions$.inboundSchema = GetDeploymentFlagsOptions$inboundSchema;
    /** @deprecated use `GetDeploymentFlagsOptions$outboundSchema` instead. */
    GetDeploymentFlagsOptions$.outboundSchema = GetDeploymentFlagsOptions$outboundSchema;
})(GetDeploymentFlagsOptions$ || (GetDeploymentFlagsOptions$ = {}));
export function getDeploymentFlagsOptionsToJSON(getDeploymentFlagsOptions) {
    return JSON.stringify(GetDeploymentFlagsOptions$outboundSchema.parse(getDeploymentFlagsOptions));
}
export function getDeploymentFlagsOptionsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentFlagsOptions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentFlagsOptions' from JSON`);
}
/** @internal */
export const GetDeploymentFlagsDefinitions$inboundSchema = z.object({
    options: z.array(z.lazy(() => GetDeploymentFlagsOptions$inboundSchema))
        .optional(),
    url: z.string().optional(),
    description: z.string().optional(),
});
/** @internal */
export const GetDeploymentFlagsDefinitions$outboundSchema = z.object({
    options: z.array(z.lazy(() => GetDeploymentFlagsOptions$outboundSchema))
        .optional(),
    url: z.string().optional(),
    description: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentFlagsDefinitions$;
(function (GetDeploymentFlagsDefinitions$) {
    /** @deprecated use `GetDeploymentFlagsDefinitions$inboundSchema` instead. */
    GetDeploymentFlagsDefinitions$.inboundSchema = GetDeploymentFlagsDefinitions$inboundSchema;
    /** @deprecated use `GetDeploymentFlagsDefinitions$outboundSchema` instead. */
    GetDeploymentFlagsDefinitions$.outboundSchema = GetDeploymentFlagsDefinitions$outboundSchema;
})(GetDeploymentFlagsDefinitions$ || (GetDeploymentFlagsDefinitions$ = {}));
export function getDeploymentFlagsDefinitionsToJSON(getDeploymentFlagsDefinitions) {
    return JSON.stringify(GetDeploymentFlagsDefinitions$outboundSchema.parse(getDeploymentFlagsDefinitions));
}
export function getDeploymentFlagsDefinitionsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentFlagsDefinitions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentFlagsDefinitions' from JSON`);
}
/** @internal */
export const GetDeploymentFlags1$inboundSchema = z.object({
    definitions: z.record(z.lazy(() => GetDeploymentFlagsDefinitions$inboundSchema)),
});
/** @internal */
export const GetDeploymentFlags1$outboundSchema = z.object({
    definitions: z.record(z.lazy(() => GetDeploymentFlagsDefinitions$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentFlags1$;
(function (GetDeploymentFlags1$) {
    /** @deprecated use `GetDeploymentFlags1$inboundSchema` instead. */
    GetDeploymentFlags1$.inboundSchema = GetDeploymentFlags1$inboundSchema;
    /** @deprecated use `GetDeploymentFlags1$outboundSchema` instead. */
    GetDeploymentFlags1$.outboundSchema = GetDeploymentFlags1$outboundSchema;
})(GetDeploymentFlags1$ || (GetDeploymentFlags1$ = {}));
export function getDeploymentFlags1ToJSON(getDeploymentFlags1) {
    return JSON.stringify(GetDeploymentFlags1$outboundSchema.parse(getDeploymentFlags1));
}
export function getDeploymentFlags1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentFlags1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentFlags1' from JSON`);
}
/** @internal */
export const ResponseBodyFlags$inboundSchema = z.union([
    z.lazy(() => GetDeploymentFlags1$inboundSchema),
    z.array(z.lazy(() => GetDeploymentFlags2$inboundSchema)),
]);
/** @internal */
export const ResponseBodyFlags$outboundSchema = z.union([
    z.lazy(() => GetDeploymentFlags1$outboundSchema),
    z.array(z.lazy(() => GetDeploymentFlags2$outboundSchema)),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyFlags$;
(function (ResponseBodyFlags$) {
    /** @deprecated use `ResponseBodyFlags$inboundSchema` instead. */
    ResponseBodyFlags$.inboundSchema = ResponseBodyFlags$inboundSchema;
    /** @deprecated use `ResponseBodyFlags$outboundSchema` instead. */
    ResponseBodyFlags$.outboundSchema = ResponseBodyFlags$outboundSchema;
})(ResponseBodyFlags$ || (ResponseBodyFlags$ = {}));
export function responseBodyFlagsToJSON(responseBodyFlags) {
    return JSON.stringify(ResponseBodyFlags$outboundSchema.parse(responseBodyFlags));
}
export function responseBodyFlagsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyFlags$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyFlags' from JSON`);
}
/** @internal */
export const GetDeploymentMicrofrontendsApplications$inboundSchema = z.object({
    isDefaultApp: z.boolean().optional(),
    productionHost: z.string(),
    deploymentAlias: z.string().optional(),
    deploymentHost: z.string().optional(),
});
/** @internal */
export const GetDeploymentMicrofrontendsApplications$outboundSchema = z.object({
    isDefaultApp: z.boolean().optional(),
    productionHost: z.string(),
    deploymentAlias: z.string().optional(),
    deploymentHost: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentMicrofrontendsApplications$;
(function (GetDeploymentMicrofrontendsApplications$) {
    /** @deprecated use `GetDeploymentMicrofrontendsApplications$inboundSchema` instead. */
    GetDeploymentMicrofrontendsApplications$.inboundSchema = GetDeploymentMicrofrontendsApplications$inboundSchema;
    /** @deprecated use `GetDeploymentMicrofrontendsApplications$outboundSchema` instead. */
    GetDeploymentMicrofrontendsApplications$.outboundSchema = GetDeploymentMicrofrontendsApplications$outboundSchema;
})(GetDeploymentMicrofrontendsApplications$ || (GetDeploymentMicrofrontendsApplications$ = {}));
export function getDeploymentMicrofrontendsApplicationsToJSON(getDeploymentMicrofrontendsApplications) {
    return JSON.stringify(GetDeploymentMicrofrontendsApplications$outboundSchema.parse(getDeploymentMicrofrontendsApplications));
}
export function getDeploymentMicrofrontendsApplicationsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentMicrofrontendsApplications$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentMicrofrontendsApplications' from JSON`);
}
/** @internal */
export const GetDeploymentMicrofrontendsMfeConfigUploadState$inboundSchema = z
    .nativeEnum(GetDeploymentMicrofrontendsMfeConfigUploadState);
/** @internal */
export const GetDeploymentMicrofrontendsMfeConfigUploadState$outboundSchema = GetDeploymentMicrofrontendsMfeConfigUploadState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentMicrofrontendsMfeConfigUploadState$;
(function (GetDeploymentMicrofrontendsMfeConfigUploadState$) {
    /** @deprecated use `GetDeploymentMicrofrontendsMfeConfigUploadState$inboundSchema` instead. */
    GetDeploymentMicrofrontendsMfeConfigUploadState$.inboundSchema = GetDeploymentMicrofrontendsMfeConfigUploadState$inboundSchema;
    /** @deprecated use `GetDeploymentMicrofrontendsMfeConfigUploadState$outboundSchema` instead. */
    GetDeploymentMicrofrontendsMfeConfigUploadState$.outboundSchema = GetDeploymentMicrofrontendsMfeConfigUploadState$outboundSchema;
})(GetDeploymentMicrofrontendsMfeConfigUploadState$ || (GetDeploymentMicrofrontendsMfeConfigUploadState$ = {}));
/** @internal */
export const GetDeploymentMicrofrontends2$inboundSchema = z.object({
    isDefaultApp: z.boolean(),
    applications: z.record(z.lazy(() => GetDeploymentMicrofrontendsApplications$inboundSchema)).optional(),
    mfeConfigUploadState: GetDeploymentMicrofrontendsMfeConfigUploadState$inboundSchema.optional(),
    defaultAppProjectName: z.string(),
    defaultRoute: z.string().optional(),
    groupIds: z.array(z.string()),
    microfrontendsAlias2Enabled: z.boolean().optional(),
});
/** @internal */
export const GetDeploymentMicrofrontends2$outboundSchema = z.object({
    isDefaultApp: z.boolean(),
    applications: z.record(z.lazy(() => GetDeploymentMicrofrontendsApplications$outboundSchema)).optional(),
    mfeConfigUploadState: GetDeploymentMicrofrontendsMfeConfigUploadState$outboundSchema.optional(),
    defaultAppProjectName: z.string(),
    defaultRoute: z.string().optional(),
    groupIds: z.array(z.string()),
    microfrontendsAlias2Enabled: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentMicrofrontends2$;
(function (GetDeploymentMicrofrontends2$) {
    /** @deprecated use `GetDeploymentMicrofrontends2$inboundSchema` instead. */
    GetDeploymentMicrofrontends2$.inboundSchema = GetDeploymentMicrofrontends2$inboundSchema;
    /** @deprecated use `GetDeploymentMicrofrontends2$outboundSchema` instead. */
    GetDeploymentMicrofrontends2$.outboundSchema = GetDeploymentMicrofrontends2$outboundSchema;
})(GetDeploymentMicrofrontends2$ || (GetDeploymentMicrofrontends2$ = {}));
export function getDeploymentMicrofrontends2ToJSON(getDeploymentMicrofrontends2) {
    return JSON.stringify(GetDeploymentMicrofrontends2$outboundSchema.parse(getDeploymentMicrofrontends2));
}
export function getDeploymentMicrofrontends2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentMicrofrontends2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentMicrofrontends2' from JSON`);
}
/** @internal */
export const GetDeploymentMicrofrontends1$inboundSchema = z.object({
    isDefaultApp: z.boolean().optional(),
    defaultAppProjectName: z.string(),
    defaultRoute: z.string().optional(),
    groupIds: z.array(z.string()),
    microfrontendsAlias2Enabled: z.boolean().optional(),
});
/** @internal */
export const GetDeploymentMicrofrontends1$outboundSchema = z.object({
    isDefaultApp: z.boolean().optional(),
    defaultAppProjectName: z.string(),
    defaultRoute: z.string().optional(),
    groupIds: z.array(z.string()),
    microfrontendsAlias2Enabled: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentMicrofrontends1$;
(function (GetDeploymentMicrofrontends1$) {
    /** @deprecated use `GetDeploymentMicrofrontends1$inboundSchema` instead. */
    GetDeploymentMicrofrontends1$.inboundSchema = GetDeploymentMicrofrontends1$inboundSchema;
    /** @deprecated use `GetDeploymentMicrofrontends1$outboundSchema` instead. */
    GetDeploymentMicrofrontends1$.outboundSchema = GetDeploymentMicrofrontends1$outboundSchema;
})(GetDeploymentMicrofrontends1$ || (GetDeploymentMicrofrontends1$ = {}));
export function getDeploymentMicrofrontends1ToJSON(getDeploymentMicrofrontends1) {
    return JSON.stringify(GetDeploymentMicrofrontends1$outboundSchema.parse(getDeploymentMicrofrontends1));
}
export function getDeploymentMicrofrontends1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentMicrofrontends1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentMicrofrontends1' from JSON`);
}
/** @internal */
export const ResponseBodyMicrofrontends$inboundSchema = z.union([
    z.lazy(() => GetDeploymentMicrofrontends2$inboundSchema),
    z.lazy(() => GetDeploymentMicrofrontends1$inboundSchema),
]);
/** @internal */
export const ResponseBodyMicrofrontends$outboundSchema = z.union([
    z.lazy(() => GetDeploymentMicrofrontends2$outboundSchema),
    z.lazy(() => GetDeploymentMicrofrontends1$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyMicrofrontends$;
(function (ResponseBodyMicrofrontends$) {
    /** @deprecated use `ResponseBodyMicrofrontends$inboundSchema` instead. */
    ResponseBodyMicrofrontends$.inboundSchema = ResponseBodyMicrofrontends$inboundSchema;
    /** @deprecated use `ResponseBodyMicrofrontends$outboundSchema` instead. */
    ResponseBodyMicrofrontends$.outboundSchema = ResponseBodyMicrofrontends$outboundSchema;
})(ResponseBodyMicrofrontends$ || (ResponseBodyMicrofrontends$ = {}));
export function responseBodyMicrofrontendsToJSON(responseBodyMicrofrontends) {
    return JSON.stringify(ResponseBodyMicrofrontends$outboundSchema.parse(responseBodyMicrofrontends));
}
export function responseBodyMicrofrontendsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyMicrofrontends$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyMicrofrontends' from JSON`);
}
/** @internal */
export const ResponseBodyFunctionType$inboundSchema = z.nativeEnum(ResponseBodyFunctionType);
/** @internal */
export const ResponseBodyFunctionType$outboundSchema = ResponseBodyFunctionType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyFunctionType$;
(function (ResponseBodyFunctionType$) {
    /** @deprecated use `ResponseBodyFunctionType$inboundSchema` instead. */
    ResponseBodyFunctionType$.inboundSchema = ResponseBodyFunctionType$inboundSchema;
    /** @deprecated use `ResponseBodyFunctionType$outboundSchema` instead. */
    ResponseBodyFunctionType$.outboundSchema = ResponseBodyFunctionType$outboundSchema;
})(ResponseBodyFunctionType$ || (ResponseBodyFunctionType$ = {}));
/** @internal */
export const ResponseBodyFunctionMemoryType$inboundSchema = z.nativeEnum(ResponseBodyFunctionMemoryType);
/** @internal */
export const ResponseBodyFunctionMemoryType$outboundSchema = ResponseBodyFunctionMemoryType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyFunctionMemoryType$;
(function (ResponseBodyFunctionMemoryType$) {
    /** @deprecated use `ResponseBodyFunctionMemoryType$inboundSchema` instead. */
    ResponseBodyFunctionMemoryType$.inboundSchema = ResponseBodyFunctionMemoryType$inboundSchema;
    /** @deprecated use `ResponseBodyFunctionMemoryType$outboundSchema` instead. */
    ResponseBodyFunctionMemoryType$.outboundSchema = ResponseBodyFunctionMemoryType$outboundSchema;
})(ResponseBodyFunctionMemoryType$ || (ResponseBodyFunctionMemoryType$ = {}));
/** @internal */
export const ResponseBodyConfig$inboundSchema = z.object({
    version: z.number().optional(),
    functionType: ResponseBodyFunctionType$inboundSchema,
    functionMemoryType: ResponseBodyFunctionMemoryType$inboundSchema,
    functionTimeout: z.nullable(z.number()),
    secureComputePrimaryRegion: z.nullable(z.string()),
    secureComputeFallbackRegion: z.nullable(z.string()),
    isUsingActiveCPU: z.boolean().optional(),
});
/** @internal */
export const ResponseBodyConfig$outboundSchema = z.object({
    version: z.number().optional(),
    functionType: ResponseBodyFunctionType$outboundSchema,
    functionMemoryType: ResponseBodyFunctionMemoryType$outboundSchema,
    functionTimeout: z.nullable(z.number()),
    secureComputePrimaryRegion: z.nullable(z.string()),
    secureComputeFallbackRegion: z.nullable(z.string()),
    isUsingActiveCPU: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyConfig$;
(function (ResponseBodyConfig$) {
    /** @deprecated use `ResponseBodyConfig$inboundSchema` instead. */
    ResponseBodyConfig$.inboundSchema = ResponseBodyConfig$inboundSchema;
    /** @deprecated use `ResponseBodyConfig$outboundSchema` instead. */
    ResponseBodyConfig$.outboundSchema = ResponseBodyConfig$outboundSchema;
})(ResponseBodyConfig$ || (ResponseBodyConfig$ = {}));
export function responseBodyConfigToJSON(responseBodyConfig) {
    return JSON.stringify(ResponseBodyConfig$outboundSchema.parse(responseBodyConfig));
}
export function responseBodyConfigFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyConfig$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyConfig' from JSON`);
}
/** @internal */
export const ResponseBodyState$inboundSchema = z.nativeEnum(ResponseBodyState);
/** @internal */
export const ResponseBodyState$outboundSchema = ResponseBodyState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyState$;
(function (ResponseBodyState$) {
    /** @deprecated use `ResponseBodyState$inboundSchema` instead. */
    ResponseBodyState$.inboundSchema = ResponseBodyState$inboundSchema;
    /** @deprecated use `ResponseBodyState$outboundSchema` instead. */
    ResponseBodyState$.outboundSchema = ResponseBodyState$outboundSchema;
})(ResponseBodyState$ || (ResponseBodyState$ = {}));
/** @internal */
export const ResponseBodyDeploymentAlias$inboundSchema = z.object({
    state: ResponseBodyState$inboundSchema,
    startedAt: z.number(),
    completedAt: z.number().optional(),
});
/** @internal */
export const ResponseBodyDeploymentAlias$outboundSchema = z.object({
    state: ResponseBodyState$outboundSchema,
    startedAt: z.number(),
    completedAt: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyDeploymentAlias$;
(function (ResponseBodyDeploymentAlias$) {
    /** @deprecated use `ResponseBodyDeploymentAlias$inboundSchema` instead. */
    ResponseBodyDeploymentAlias$.inboundSchema = ResponseBodyDeploymentAlias$inboundSchema;
    /** @deprecated use `ResponseBodyDeploymentAlias$outboundSchema` instead. */
    ResponseBodyDeploymentAlias$.outboundSchema = ResponseBodyDeploymentAlias$outboundSchema;
})(ResponseBodyDeploymentAlias$ || (ResponseBodyDeploymentAlias$ = {}));
export function responseBodyDeploymentAliasToJSON(responseBodyDeploymentAlias) {
    return JSON.stringify(ResponseBodyDeploymentAlias$outboundSchema.parse(responseBodyDeploymentAlias));
}
export function responseBodyDeploymentAliasFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyDeploymentAlias$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyDeploymentAlias' from JSON`);
}
/** @internal */
export const ResponseBodyChecks$inboundSchema = z.object({
    "deployment-alias": z.lazy(() => ResponseBodyDeploymentAlias$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "deployment-alias": "deploymentAlias",
    });
});
/** @internal */
export const ResponseBodyChecks$outboundSchema = z.object({
    deploymentAlias: z.lazy(() => ResponseBodyDeploymentAlias$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        deploymentAlias: "deployment-alias",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyChecks$;
(function (ResponseBodyChecks$) {
    /** @deprecated use `ResponseBodyChecks$inboundSchema` instead. */
    ResponseBodyChecks$.inboundSchema = ResponseBodyChecks$inboundSchema;
    /** @deprecated use `ResponseBodyChecks$outboundSchema` instead. */
    ResponseBodyChecks$.outboundSchema = ResponseBodyChecks$outboundSchema;
})(ResponseBodyChecks$ || (ResponseBodyChecks$ = {}));
export function responseBodyChecksToJSON(responseBodyChecks) {
    return JSON.stringify(ResponseBodyChecks$outboundSchema.parse(responseBodyChecks));
}
export function responseBodyChecksFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyChecks$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyChecks' from JSON`);
}
/** @internal */
export const GetDeploymentResponseBody1$inboundSchema = z.object({
    aliasAssignedAt: z.nullable(z.union([z.number(), z.boolean()])).optional(),
    alwaysRefuseToBuild: z.boolean().optional(),
    build: z.lazy(() => ResponseBodyBuild$inboundSchema),
    buildArtifactUrls: z.array(z.string()).optional(),
    builds: z.array(z.lazy(() => ResponseBodyBuilds$inboundSchema)).optional(),
    env: z.array(z.string()),
    inspectorUrl: z.nullable(z.string()),
    isInConcurrentBuildsQueue: z.boolean(),
    isInSystemBuildsQueue: z.boolean(),
    projectSettings: z.lazy(() => ResponseBodyProjectSettings$inboundSchema),
    readyStateReason: z.string().optional(),
    integrations: z.lazy(() => ResponseBodyIntegrations$inboundSchema).optional(),
    images: z.lazy(() => ResponseBodyImages$inboundSchema).optional(),
    alias: z.array(z.string()).optional(),
    aliasAssigned: z.boolean(),
    bootedAt: z.number(),
    buildingAt: z.number(),
    buildContainerFinishedAt: z.number().optional(),
    buildSkipped: z.boolean(),
    creator: z.lazy(() => ResponseBodyCreator$inboundSchema),
    initReadyAt: z.number().optional(),
    isFirstBranchDeployment: z.boolean().optional(),
    lambdas: z.array(z.lazy(() => GetDeploymentResponseBodyLambdas$inboundSchema))
        .optional(),
    public: z.boolean(),
    ready: z.number().optional(),
    status: ResponseBodyStatus$inboundSchema,
    team: z.lazy(() => GetDeploymentResponseBodyTeam$inboundSchema).optional(),
    userAliases: z.array(z.string()).optional(),
    previewCommentsEnabled: z.boolean().optional(),
    ttyBuildLogs: z.boolean().optional(),
    customEnvironment: z.union([
        z.lazy(() => GetDeploymentCustomEnvironmentDeployments1$inboundSchema),
        z.lazy(() => GetDeploymentCustomEnvironmentDeployments2$inboundSchema),
    ]).optional(),
    oomReport: GetDeploymentResponseBodyOomReport$inboundSchema.optional(),
    aliasWarning: z.nullable(z.lazy(() => GetDeploymentResponseBodyAliasWarning$inboundSchema)).optional(),
    id: z.string(),
    createdAt: z.number(),
    readyState: ResponseBodyReadyState$inboundSchema,
    name: z.string(),
    type: GetDeploymentResponseBodyType$inboundSchema,
    aliasError: z.nullable(z.lazy(() => ResponseBodyAliasError$inboundSchema))
        .optional(),
    aliasFinal: z.nullable(z.string()).optional(),
    autoAssignCustomDomains: z.boolean().optional(),
    automaticAliases: z.array(z.string()).optional(),
    buildErrorAt: z.number().optional(),
    checksState: ResponseBodyChecksState$inboundSchema.optional(),
    checksConclusion: ResponseBodyChecksConclusion$inboundSchema.optional(),
    deletedAt: z.nullable(z.number()).optional(),
    defaultRoute: z.string().optional(),
    canceledAt: z.number().optional(),
    errorCode: z.string().optional(),
    errorLink: z.string().optional(),
    errorMessage: z.nullable(z.string()).optional(),
    errorStep: z.string().optional(),
    passiveRegions: z.array(z.string()).optional(),
    gitSource: z.union([
        z.lazy(() => GetDeploymentGitSourceDeployments12$inboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments15$inboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments4$inboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments10$inboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments11$inboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments13$inboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments14$inboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments2$inboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments3$inboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments6$inboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments9$inboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments1$inboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments5$inboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments7$inboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments8$inboundSchema),
    ]).optional(),
    meta: z.record(z.string()),
    originCacheRegion: z.string().optional(),
    nodeVersion: ResponseBodyNodeVersion$inboundSchema.optional(),
    project: z.lazy(() => ResponseBodyProject$inboundSchema).optional(),
    readySubstate: ResponseBodyReadySubstate$inboundSchema.optional(),
    regions: z.array(z.string()),
    softDeletedByRetention: z.boolean().optional(),
    source: ResponseBodySource$inboundSchema.optional(),
    target: z.nullable(ResponseBodyTarget$inboundSchema).optional(),
    undeletedAt: z.number().optional(),
    url: z.string(),
    version: z.number(),
    oidcTokenClaims: z.lazy(() => ResponseBodyOidcTokenClaims$inboundSchema)
        .optional(),
    projectId: z.string(),
    plan: ResponseBodyPlan$inboundSchema,
    connectBuildsEnabled: z.boolean().optional(),
    connectConfigurationId: z.string().optional(),
    createdIn: z.string(),
    crons: z.array(z.lazy(() => ResponseBodyCrons$inboundSchema)).optional(),
    functions: z.nullable(z.record(z.lazy(() => ResponseBodyFunctions$inboundSchema))).optional(),
    monorepoManager: z.nullable(z.string()).optional(),
    ownerId: z.string(),
    passiveConnectConfigurationId: z.string().optional(),
    routes: z.nullable(z.array(z.union([
        z.lazy(() => GetDeploymentRoutes3$inboundSchema),
        z.lazy(() => GetDeploymentRoutes1$inboundSchema),
        z.lazy(() => GetDeploymentRoutes2$inboundSchema),
    ]))),
    gitRepo: z.nullable(z.union([
        z.lazy(() => GetDeploymentGitRepo2$inboundSchema),
        z.lazy(() => GetDeploymentGitRepo3$inboundSchema),
        z.lazy(() => GetDeploymentGitRepo1$inboundSchema),
    ])).optional(),
    flags: z.union([
        z.lazy(() => GetDeploymentFlags1$inboundSchema),
        z.array(z.lazy(() => GetDeploymentFlags2$inboundSchema)),
    ]).optional(),
    microfrontends: z.union([
        z.lazy(() => GetDeploymentMicrofrontends2$inboundSchema),
        z.lazy(() => GetDeploymentMicrofrontends1$inboundSchema),
    ]).optional(),
    config: z.lazy(() => ResponseBodyConfig$inboundSchema).optional(),
    checks: z.lazy(() => ResponseBodyChecks$inboundSchema).optional(),
});
/** @internal */
export const GetDeploymentResponseBody1$outboundSchema = z.object({
    aliasAssignedAt: z.nullable(z.union([z.number(), z.boolean()])).optional(),
    alwaysRefuseToBuild: z.boolean().optional(),
    build: z.lazy(() => ResponseBodyBuild$outboundSchema),
    buildArtifactUrls: z.array(z.string()).optional(),
    builds: z.array(z.lazy(() => ResponseBodyBuilds$outboundSchema)).optional(),
    env: z.array(z.string()),
    inspectorUrl: z.nullable(z.string()),
    isInConcurrentBuildsQueue: z.boolean(),
    isInSystemBuildsQueue: z.boolean(),
    projectSettings: z.lazy(() => ResponseBodyProjectSettings$outboundSchema),
    readyStateReason: z.string().optional(),
    integrations: z.lazy(() => ResponseBodyIntegrations$outboundSchema)
        .optional(),
    images: z.lazy(() => ResponseBodyImages$outboundSchema).optional(),
    alias: z.array(z.string()).optional(),
    aliasAssigned: z.boolean(),
    bootedAt: z.number(),
    buildingAt: z.number(),
    buildContainerFinishedAt: z.number().optional(),
    buildSkipped: z.boolean(),
    creator: z.lazy(() => ResponseBodyCreator$outboundSchema),
    initReadyAt: z.number().optional(),
    isFirstBranchDeployment: z.boolean().optional(),
    lambdas: z.array(z.lazy(() => GetDeploymentResponseBodyLambdas$outboundSchema)).optional(),
    public: z.boolean(),
    ready: z.number().optional(),
    status: ResponseBodyStatus$outboundSchema,
    team: z.lazy(() => GetDeploymentResponseBodyTeam$outboundSchema).optional(),
    userAliases: z.array(z.string()).optional(),
    previewCommentsEnabled: z.boolean().optional(),
    ttyBuildLogs: z.boolean().optional(),
    customEnvironment: z.union([
        z.lazy(() => GetDeploymentCustomEnvironmentDeployments1$outboundSchema),
        z.lazy(() => GetDeploymentCustomEnvironmentDeployments2$outboundSchema),
    ]).optional(),
    oomReport: GetDeploymentResponseBodyOomReport$outboundSchema.optional(),
    aliasWarning: z.nullable(z.lazy(() => GetDeploymentResponseBodyAliasWarning$outboundSchema)).optional(),
    id: z.string(),
    createdAt: z.number(),
    readyState: ResponseBodyReadyState$outboundSchema,
    name: z.string(),
    type: GetDeploymentResponseBodyType$outboundSchema,
    aliasError: z.nullable(z.lazy(() => ResponseBodyAliasError$outboundSchema))
        .optional(),
    aliasFinal: z.nullable(z.string()).optional(),
    autoAssignCustomDomains: z.boolean().optional(),
    automaticAliases: z.array(z.string()).optional(),
    buildErrorAt: z.number().optional(),
    checksState: ResponseBodyChecksState$outboundSchema.optional(),
    checksConclusion: ResponseBodyChecksConclusion$outboundSchema.optional(),
    deletedAt: z.nullable(z.number()).optional(),
    defaultRoute: z.string().optional(),
    canceledAt: z.number().optional(),
    errorCode: z.string().optional(),
    errorLink: z.string().optional(),
    errorMessage: z.nullable(z.string()).optional(),
    errorStep: z.string().optional(),
    passiveRegions: z.array(z.string()).optional(),
    gitSource: z.union([
        z.lazy(() => GetDeploymentGitSourceDeployments12$outboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments15$outboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments4$outboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments10$outboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments11$outboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments13$outboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments14$outboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments2$outboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments3$outboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments6$outboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments9$outboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments1$outboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments5$outboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments7$outboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments8$outboundSchema),
    ]).optional(),
    meta: z.record(z.string()),
    originCacheRegion: z.string().optional(),
    nodeVersion: ResponseBodyNodeVersion$outboundSchema.optional(),
    project: z.lazy(() => ResponseBodyProject$outboundSchema).optional(),
    readySubstate: ResponseBodyReadySubstate$outboundSchema.optional(),
    regions: z.array(z.string()),
    softDeletedByRetention: z.boolean().optional(),
    source: ResponseBodySource$outboundSchema.optional(),
    target: z.nullable(ResponseBodyTarget$outboundSchema).optional(),
    undeletedAt: z.number().optional(),
    url: z.string(),
    version: z.number(),
    oidcTokenClaims: z.lazy(() => ResponseBodyOidcTokenClaims$outboundSchema)
        .optional(),
    projectId: z.string(),
    plan: ResponseBodyPlan$outboundSchema,
    connectBuildsEnabled: z.boolean().optional(),
    connectConfigurationId: z.string().optional(),
    createdIn: z.string(),
    crons: z.array(z.lazy(() => ResponseBodyCrons$outboundSchema)).optional(),
    functions: z.nullable(z.record(z.lazy(() => ResponseBodyFunctions$outboundSchema))).optional(),
    monorepoManager: z.nullable(z.string()).optional(),
    ownerId: z.string(),
    passiveConnectConfigurationId: z.string().optional(),
    routes: z.nullable(z.array(z.union([
        z.lazy(() => GetDeploymentRoutes3$outboundSchema),
        z.lazy(() => GetDeploymentRoutes1$outboundSchema),
        z.lazy(() => GetDeploymentRoutes2$outboundSchema),
    ]))),
    gitRepo: z.nullable(z.union([
        z.lazy(() => GetDeploymentGitRepo2$outboundSchema),
        z.lazy(() => GetDeploymentGitRepo3$outboundSchema),
        z.lazy(() => GetDeploymentGitRepo1$outboundSchema),
    ])).optional(),
    flags: z.union([
        z.lazy(() => GetDeploymentFlags1$outboundSchema),
        z.array(z.lazy(() => GetDeploymentFlags2$outboundSchema)),
    ]).optional(),
    microfrontends: z.union([
        z.lazy(() => GetDeploymentMicrofrontends2$outboundSchema),
        z.lazy(() => GetDeploymentMicrofrontends1$outboundSchema),
    ]).optional(),
    config: z.lazy(() => ResponseBodyConfig$outboundSchema).optional(),
    checks: z.lazy(() => ResponseBodyChecks$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentResponseBody1$;
(function (GetDeploymentResponseBody1$) {
    /** @deprecated use `GetDeploymentResponseBody1$inboundSchema` instead. */
    GetDeploymentResponseBody1$.inboundSchema = GetDeploymentResponseBody1$inboundSchema;
    /** @deprecated use `GetDeploymentResponseBody1$outboundSchema` instead. */
    GetDeploymentResponseBody1$.outboundSchema = GetDeploymentResponseBody1$outboundSchema;
})(GetDeploymentResponseBody1$ || (GetDeploymentResponseBody1$ = {}));
export function getDeploymentResponseBody1ToJSON(getDeploymentResponseBody1) {
    return JSON.stringify(GetDeploymentResponseBody1$outboundSchema.parse(getDeploymentResponseBody1));
}
export function getDeploymentResponseBody1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentResponseBody1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentResponseBody1' from JSON`);
}
/** @internal */
export const GetDeploymentResponseBody$inboundSchema = z.union([
    z.lazy(() => GetDeploymentResponseBody1$inboundSchema),
    z.lazy(() => GetDeploymentResponseBody2$inboundSchema),
]);
/** @internal */
export const GetDeploymentResponseBody$outboundSchema = z.union([
    z.lazy(() => GetDeploymentResponseBody1$outboundSchema),
    z.lazy(() => GetDeploymentResponseBody2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentResponseBody$;
(function (GetDeploymentResponseBody$) {
    /** @deprecated use `GetDeploymentResponseBody$inboundSchema` instead. */
    GetDeploymentResponseBody$.inboundSchema = GetDeploymentResponseBody$inboundSchema;
    /** @deprecated use `GetDeploymentResponseBody$outboundSchema` instead. */
    GetDeploymentResponseBody$.outboundSchema = GetDeploymentResponseBody$outboundSchema;
})(GetDeploymentResponseBody$ || (GetDeploymentResponseBody$ = {}));
export function getDeploymentResponseBodyToJSON(getDeploymentResponseBody) {
    return JSON.stringify(GetDeploymentResponseBody$outboundSchema.parse(getDeploymentResponseBody));
}
export function getDeploymentResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentResponseBody' from JSON`);
}
//# sourceMappingURL=getdeploymentop.js.map