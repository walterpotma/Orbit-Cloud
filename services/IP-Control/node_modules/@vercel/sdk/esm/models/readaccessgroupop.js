/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
export const ReadAccessGroupTeamPermissions = {
    IntegrationManager: "IntegrationManager",
    CreateProject: "CreateProject",
    FullProductionDeployment: "FullProductionDeployment",
    UsageViewer: "UsageViewer",
    EnvVariableManager: "EnvVariableManager",
    EnvironmentManager: "EnvironmentManager",
    V0Builder: "V0Builder",
    V0Chatter: "V0Chatter",
    V0Viewer: "V0Viewer",
};
export const ReadAccessGroupEntitlements = {
    V0: "v0",
};
/** @internal */
export const ReadAccessGroupRequest$inboundSchema = z.object({
    idOrName: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/** @internal */
export const ReadAccessGroupRequest$outboundSchema = z.object({
    idOrName: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ReadAccessGroupRequest$;
(function (ReadAccessGroupRequest$) {
    /** @deprecated use `ReadAccessGroupRequest$inboundSchema` instead. */
    ReadAccessGroupRequest$.inboundSchema = ReadAccessGroupRequest$inboundSchema;
    /** @deprecated use `ReadAccessGroupRequest$outboundSchema` instead. */
    ReadAccessGroupRequest$.outboundSchema = ReadAccessGroupRequest$outboundSchema;
})(ReadAccessGroupRequest$ || (ReadAccessGroupRequest$ = {}));
export function readAccessGroupRequestToJSON(readAccessGroupRequest) {
    return JSON.stringify(ReadAccessGroupRequest$outboundSchema.parse(readAccessGroupRequest));
}
export function readAccessGroupRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ReadAccessGroupRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ReadAccessGroupRequest' from JSON`);
}
/** @internal */
export const ReadAccessGroupTeamPermissions$inboundSchema = z.nativeEnum(ReadAccessGroupTeamPermissions);
/** @internal */
export const ReadAccessGroupTeamPermissions$outboundSchema = ReadAccessGroupTeamPermissions$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ReadAccessGroupTeamPermissions$;
(function (ReadAccessGroupTeamPermissions$) {
    /** @deprecated use `ReadAccessGroupTeamPermissions$inboundSchema` instead. */
    ReadAccessGroupTeamPermissions$.inboundSchema = ReadAccessGroupTeamPermissions$inboundSchema;
    /** @deprecated use `ReadAccessGroupTeamPermissions$outboundSchema` instead. */
    ReadAccessGroupTeamPermissions$.outboundSchema = ReadAccessGroupTeamPermissions$outboundSchema;
})(ReadAccessGroupTeamPermissions$ || (ReadAccessGroupTeamPermissions$ = {}));
/** @internal */
export const ReadAccessGroupEntitlements$inboundSchema = z.nativeEnum(ReadAccessGroupEntitlements);
/** @internal */
export const ReadAccessGroupEntitlements$outboundSchema = ReadAccessGroupEntitlements$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ReadAccessGroupEntitlements$;
(function (ReadAccessGroupEntitlements$) {
    /** @deprecated use `ReadAccessGroupEntitlements$inboundSchema` instead. */
    ReadAccessGroupEntitlements$.inboundSchema = ReadAccessGroupEntitlements$inboundSchema;
    /** @deprecated use `ReadAccessGroupEntitlements$outboundSchema` instead. */
    ReadAccessGroupEntitlements$.outboundSchema = ReadAccessGroupEntitlements$outboundSchema;
})(ReadAccessGroupEntitlements$ || (ReadAccessGroupEntitlements$ = {}));
/** @internal */
export const ReadAccessGroupResponseBody$inboundSchema = z.object({
    teamPermissions: z.array(ReadAccessGroupTeamPermissions$inboundSchema)
        .optional(),
    entitlements: z.array(ReadAccessGroupEntitlements$inboundSchema).optional(),
    isDsyncManaged: z.boolean(),
    name: z.string(),
    createdAt: z.string(),
    teamId: z.string(),
    updatedAt: z.string(),
    accessGroupId: z.string(),
    membersCount: z.number(),
    projectsCount: z.number(),
    teamRoles: z.array(z.string()).optional(),
});
/** @internal */
export const ReadAccessGroupResponseBody$outboundSchema = z.object({
    teamPermissions: z.array(ReadAccessGroupTeamPermissions$outboundSchema)
        .optional(),
    entitlements: z.array(ReadAccessGroupEntitlements$outboundSchema).optional(),
    isDsyncManaged: z.boolean(),
    name: z.string(),
    createdAt: z.string(),
    teamId: z.string(),
    updatedAt: z.string(),
    accessGroupId: z.string(),
    membersCount: z.number(),
    projectsCount: z.number(),
    teamRoles: z.array(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ReadAccessGroupResponseBody$;
(function (ReadAccessGroupResponseBody$) {
    /** @deprecated use `ReadAccessGroupResponseBody$inboundSchema` instead. */
    ReadAccessGroupResponseBody$.inboundSchema = ReadAccessGroupResponseBody$inboundSchema;
    /** @deprecated use `ReadAccessGroupResponseBody$outboundSchema` instead. */
    ReadAccessGroupResponseBody$.outboundSchema = ReadAccessGroupResponseBody$outboundSchema;
})(ReadAccessGroupResponseBody$ || (ReadAccessGroupResponseBody$ = {}));
export function readAccessGroupResponseBodyToJSON(readAccessGroupResponseBody) {
    return JSON.stringify(ReadAccessGroupResponseBody$outboundSchema.parse(readAccessGroupResponseBody));
}
export function readAccessGroupResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ReadAccessGroupResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ReadAccessGroupResponseBody' from JSON`);
}
//# sourceMappingURL=readaccessgroupop.js.map