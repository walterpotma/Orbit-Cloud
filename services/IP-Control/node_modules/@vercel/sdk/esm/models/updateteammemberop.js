/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/**
 * The project role of the member that will be added. \"null\" will remove this project level role.
 */
export const UpdateTeamMemberRole = {
    Admin: "ADMIN",
    ProjectViewer: "PROJECT_VIEWER",
    ProjectDeveloper: "PROJECT_DEVELOPER",
};
/** @internal */
export const UpdateTeamMemberRole$inboundSchema = z.nativeEnum(UpdateTeamMemberRole);
/** @internal */
export const UpdateTeamMemberRole$outboundSchema = UpdateTeamMemberRole$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateTeamMemberRole$;
(function (UpdateTeamMemberRole$) {
    /** @deprecated use `UpdateTeamMemberRole$inboundSchema` instead. */
    UpdateTeamMemberRole$.inboundSchema = UpdateTeamMemberRole$inboundSchema;
    /** @deprecated use `UpdateTeamMemberRole$outboundSchema` instead. */
    UpdateTeamMemberRole$.outboundSchema = UpdateTeamMemberRole$outboundSchema;
})(UpdateTeamMemberRole$ || (UpdateTeamMemberRole$ = {}));
/** @internal */
export const UpdateTeamMemberProjects$inboundSchema = z.object({
    projectId: z.string(),
    role: z.nullable(UpdateTeamMemberRole$inboundSchema),
});
/** @internal */
export const UpdateTeamMemberProjects$outboundSchema = z.object({
    projectId: z.string(),
    role: z.nullable(UpdateTeamMemberRole$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateTeamMemberProjects$;
(function (UpdateTeamMemberProjects$) {
    /** @deprecated use `UpdateTeamMemberProjects$inboundSchema` instead. */
    UpdateTeamMemberProjects$.inboundSchema = UpdateTeamMemberProjects$inboundSchema;
    /** @deprecated use `UpdateTeamMemberProjects$outboundSchema` instead. */
    UpdateTeamMemberProjects$.outboundSchema = UpdateTeamMemberProjects$outboundSchema;
})(UpdateTeamMemberProjects$ || (UpdateTeamMemberProjects$ = {}));
export function updateTeamMemberProjectsToJSON(updateTeamMemberProjects) {
    return JSON.stringify(UpdateTeamMemberProjects$outboundSchema.parse(updateTeamMemberProjects));
}
export function updateTeamMemberProjectsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateTeamMemberProjects$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateTeamMemberProjects' from JSON`);
}
/** @internal */
export const UpdateTeamMemberJoinedFrom$inboundSchema = z.object({
    ssoUserId: z.nullable(z.any()).optional(),
});
/** @internal */
export const UpdateTeamMemberJoinedFrom$outboundSchema = z.object({
    ssoUserId: z.nullable(z.any()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateTeamMemberJoinedFrom$;
(function (UpdateTeamMemberJoinedFrom$) {
    /** @deprecated use `UpdateTeamMemberJoinedFrom$inboundSchema` instead. */
    UpdateTeamMemberJoinedFrom$.inboundSchema = UpdateTeamMemberJoinedFrom$inboundSchema;
    /** @deprecated use `UpdateTeamMemberJoinedFrom$outboundSchema` instead. */
    UpdateTeamMemberJoinedFrom$.outboundSchema = UpdateTeamMemberJoinedFrom$outboundSchema;
})(UpdateTeamMemberJoinedFrom$ || (UpdateTeamMemberJoinedFrom$ = {}));
export function updateTeamMemberJoinedFromToJSON(updateTeamMemberJoinedFrom) {
    return JSON.stringify(UpdateTeamMemberJoinedFrom$outboundSchema.parse(updateTeamMemberJoinedFrom));
}
export function updateTeamMemberJoinedFromFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateTeamMemberJoinedFrom$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateTeamMemberJoinedFrom' from JSON`);
}
/** @internal */
export const UpdateTeamMemberRequestBody$inboundSchema = z.object({
    confirmed: z.boolean().optional(),
    role: z.string().default("MEMBER"),
    projects: z.array(z.lazy(() => UpdateTeamMemberProjects$inboundSchema))
        .optional(),
    joinedFrom: z.lazy(() => UpdateTeamMemberJoinedFrom$inboundSchema).optional(),
});
/** @internal */
export const UpdateTeamMemberRequestBody$outboundSchema = z.object({
    confirmed: z.boolean().optional(),
    role: z.string().default("MEMBER"),
    projects: z.array(z.lazy(() => UpdateTeamMemberProjects$outboundSchema))
        .optional(),
    joinedFrom: z.lazy(() => UpdateTeamMemberJoinedFrom$outboundSchema)
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateTeamMemberRequestBody$;
(function (UpdateTeamMemberRequestBody$) {
    /** @deprecated use `UpdateTeamMemberRequestBody$inboundSchema` instead. */
    UpdateTeamMemberRequestBody$.inboundSchema = UpdateTeamMemberRequestBody$inboundSchema;
    /** @deprecated use `UpdateTeamMemberRequestBody$outboundSchema` instead. */
    UpdateTeamMemberRequestBody$.outboundSchema = UpdateTeamMemberRequestBody$outboundSchema;
})(UpdateTeamMemberRequestBody$ || (UpdateTeamMemberRequestBody$ = {}));
export function updateTeamMemberRequestBodyToJSON(updateTeamMemberRequestBody) {
    return JSON.stringify(UpdateTeamMemberRequestBody$outboundSchema.parse(updateTeamMemberRequestBody));
}
export function updateTeamMemberRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateTeamMemberRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateTeamMemberRequestBody' from JSON`);
}
/** @internal */
export const UpdateTeamMemberRequest$inboundSchema = z.object({
    uid: z.string(),
    teamId: z.string(),
    RequestBody: z.lazy(() => UpdateTeamMemberRequestBody$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const UpdateTeamMemberRequest$outboundSchema = z.object({
    uid: z.string(),
    teamId: z.string(),
    requestBody: z.lazy(() => UpdateTeamMemberRequestBody$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateTeamMemberRequest$;
(function (UpdateTeamMemberRequest$) {
    /** @deprecated use `UpdateTeamMemberRequest$inboundSchema` instead. */
    UpdateTeamMemberRequest$.inboundSchema = UpdateTeamMemberRequest$inboundSchema;
    /** @deprecated use `UpdateTeamMemberRequest$outboundSchema` instead. */
    UpdateTeamMemberRequest$.outboundSchema = UpdateTeamMemberRequest$outboundSchema;
})(UpdateTeamMemberRequest$ || (UpdateTeamMemberRequest$ = {}));
export function updateTeamMemberRequestToJSON(updateTeamMemberRequest) {
    return JSON.stringify(UpdateTeamMemberRequest$outboundSchema.parse(updateTeamMemberRequest));
}
export function updateTeamMemberRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateTeamMemberRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateTeamMemberRequest' from JSON`);
}
/** @internal */
export const UpdateTeamMemberResponseBody$inboundSchema = z.object({
    id: z.string(),
});
/** @internal */
export const UpdateTeamMemberResponseBody$outboundSchema = z.object({
    id: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateTeamMemberResponseBody$;
(function (UpdateTeamMemberResponseBody$) {
    /** @deprecated use `UpdateTeamMemberResponseBody$inboundSchema` instead. */
    UpdateTeamMemberResponseBody$.inboundSchema = UpdateTeamMemberResponseBody$inboundSchema;
    /** @deprecated use `UpdateTeamMemberResponseBody$outboundSchema` instead. */
    UpdateTeamMemberResponseBody$.outboundSchema = UpdateTeamMemberResponseBody$outboundSchema;
})(UpdateTeamMemberResponseBody$ || (UpdateTeamMemberResponseBody$ = {}));
export function updateTeamMemberResponseBodyToJSON(updateTeamMemberResponseBody) {
    return JSON.stringify(UpdateTeamMemberResponseBody$outboundSchema.parse(updateTeamMemberResponseBody));
}
export function updateTeamMemberResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateTeamMemberResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateTeamMemberResponseBody' from JSON`);
}
//# sourceMappingURL=updateteammemberop.js.map