import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type GetIntegrationResourcesRequest = {
    integrationConfigurationId: string;
};
/**
 * The current status of the resource
 */
export declare const GetIntegrationResourcesStatus: {
    readonly Ready: "ready";
    readonly Pending: "pending";
    readonly Suspended: "suspended";
    readonly Resumed: "resumed";
    readonly Uninstalled: "uninstalled";
    readonly Error: "error";
};
/**
 * The current status of the resource
 */
export type GetIntegrationResourcesStatus = ClosedEnum<typeof GetIntegrationResourcesStatus>;
export type GetIntegrationResourcesExperimentation = {
    edgeConfigSyncingEnabled?: boolean | undefined;
    edgeConfigId?: string | undefined;
    edgeConfigTokenId?: string | undefined;
};
/**
 * Any settings provided for the resource to support its product's protocols
 */
export type GetIntegrationResourcesProtocolSettings = {
    experimentation?: GetIntegrationResourcesExperimentation | undefined;
};
export declare const GetIntegrationResourcesLevel: {
    readonly Error: "error";
    readonly Info: "info";
    readonly Warn: "warn";
};
export type GetIntegrationResourcesLevel = ClosedEnum<typeof GetIntegrationResourcesLevel>;
/**
 * The notification, if set, displayed to the user when viewing the resource in Vercel
 */
export type GetIntegrationResourcesNotification = {
    level: GetIntegrationResourcesLevel;
    title: string;
    message?: string | undefined;
    href?: string | undefined;
};
export type GetIntegrationResourcesMetadata = string | number | boolean | Array<string> | Array<number>;
export type Resources = {
    /**
     * The ID provided by the partner for the given resource
     */
    partnerId: string;
    /**
     * The ID assigned by Vercel for the given resource
     */
    internalId: string;
    /**
     * The name of the resource as it is recorded in Vercel
     */
    name: string;
    /**
     * The current status of the resource
     */
    status?: GetIntegrationResourcesStatus | undefined;
    /**
     * The ID of the product the resource is derived from
     */
    productId: string;
    /**
     * Any settings provided for the resource to support its product's protocols
     */
    protocolSettings?: GetIntegrationResourcesProtocolSettings | undefined;
    /**
     * The notification, if set, displayed to the user when viewing the resource in Vercel
     */
    notification?: GetIntegrationResourcesNotification | undefined;
    /**
     * The ID of the billing plan the resource is subscribed to, if applicable
     */
    billingPlanId?: string | undefined;
    /**
     * The configured metadata for the resource as defined by its product's Metadata Schema
     */
    metadata?: {
        [k: string]: string | number | boolean | Array<string> | Array<number>;
    } | undefined;
};
export type GetIntegrationResourcesResponseBody = {
    resources: Array<Resources>;
};
/** @internal */
export declare const GetIntegrationResourcesRequest$inboundSchema: z.ZodType<GetIntegrationResourcesRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetIntegrationResourcesRequest$Outbound = {
    integrationConfigurationId: string;
};
/** @internal */
export declare const GetIntegrationResourcesRequest$outboundSchema: z.ZodType<GetIntegrationResourcesRequest$Outbound, z.ZodTypeDef, GetIntegrationResourcesRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetIntegrationResourcesRequest$ {
    /** @deprecated use `GetIntegrationResourcesRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetIntegrationResourcesRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetIntegrationResourcesRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetIntegrationResourcesRequest$Outbound, z.ZodTypeDef, GetIntegrationResourcesRequest>;
    /** @deprecated use `GetIntegrationResourcesRequest$Outbound` instead. */
    type Outbound = GetIntegrationResourcesRequest$Outbound;
}
export declare function getIntegrationResourcesRequestToJSON(getIntegrationResourcesRequest: GetIntegrationResourcesRequest): string;
export declare function getIntegrationResourcesRequestFromJSON(jsonString: string): SafeParseResult<GetIntegrationResourcesRequest, SDKValidationError>;
/** @internal */
export declare const GetIntegrationResourcesStatus$inboundSchema: z.ZodNativeEnum<typeof GetIntegrationResourcesStatus>;
/** @internal */
export declare const GetIntegrationResourcesStatus$outboundSchema: z.ZodNativeEnum<typeof GetIntegrationResourcesStatus>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetIntegrationResourcesStatus$ {
    /** @deprecated use `GetIntegrationResourcesStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Ready: "ready";
        readonly Pending: "pending";
        readonly Suspended: "suspended";
        readonly Resumed: "resumed";
        readonly Uninstalled: "uninstalled";
        readonly Error: "error";
    }>;
    /** @deprecated use `GetIntegrationResourcesStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Ready: "ready";
        readonly Pending: "pending";
        readonly Suspended: "suspended";
        readonly Resumed: "resumed";
        readonly Uninstalled: "uninstalled";
        readonly Error: "error";
    }>;
}
/** @internal */
export declare const GetIntegrationResourcesExperimentation$inboundSchema: z.ZodType<GetIntegrationResourcesExperimentation, z.ZodTypeDef, unknown>;
/** @internal */
export type GetIntegrationResourcesExperimentation$Outbound = {
    edgeConfigSyncingEnabled?: boolean | undefined;
    edgeConfigId?: string | undefined;
    edgeConfigTokenId?: string | undefined;
};
/** @internal */
export declare const GetIntegrationResourcesExperimentation$outboundSchema: z.ZodType<GetIntegrationResourcesExperimentation$Outbound, z.ZodTypeDef, GetIntegrationResourcesExperimentation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetIntegrationResourcesExperimentation$ {
    /** @deprecated use `GetIntegrationResourcesExperimentation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetIntegrationResourcesExperimentation, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetIntegrationResourcesExperimentation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetIntegrationResourcesExperimentation$Outbound, z.ZodTypeDef, GetIntegrationResourcesExperimentation>;
    /** @deprecated use `GetIntegrationResourcesExperimentation$Outbound` instead. */
    type Outbound = GetIntegrationResourcesExperimentation$Outbound;
}
export declare function getIntegrationResourcesExperimentationToJSON(getIntegrationResourcesExperimentation: GetIntegrationResourcesExperimentation): string;
export declare function getIntegrationResourcesExperimentationFromJSON(jsonString: string): SafeParseResult<GetIntegrationResourcesExperimentation, SDKValidationError>;
/** @internal */
export declare const GetIntegrationResourcesProtocolSettings$inboundSchema: z.ZodType<GetIntegrationResourcesProtocolSettings, z.ZodTypeDef, unknown>;
/** @internal */
export type GetIntegrationResourcesProtocolSettings$Outbound = {
    experimentation?: GetIntegrationResourcesExperimentation$Outbound | undefined;
};
/** @internal */
export declare const GetIntegrationResourcesProtocolSettings$outboundSchema: z.ZodType<GetIntegrationResourcesProtocolSettings$Outbound, z.ZodTypeDef, GetIntegrationResourcesProtocolSettings>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetIntegrationResourcesProtocolSettings$ {
    /** @deprecated use `GetIntegrationResourcesProtocolSettings$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetIntegrationResourcesProtocolSettings, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetIntegrationResourcesProtocolSettings$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetIntegrationResourcesProtocolSettings$Outbound, z.ZodTypeDef, GetIntegrationResourcesProtocolSettings>;
    /** @deprecated use `GetIntegrationResourcesProtocolSettings$Outbound` instead. */
    type Outbound = GetIntegrationResourcesProtocolSettings$Outbound;
}
export declare function getIntegrationResourcesProtocolSettingsToJSON(getIntegrationResourcesProtocolSettings: GetIntegrationResourcesProtocolSettings): string;
export declare function getIntegrationResourcesProtocolSettingsFromJSON(jsonString: string): SafeParseResult<GetIntegrationResourcesProtocolSettings, SDKValidationError>;
/** @internal */
export declare const GetIntegrationResourcesLevel$inboundSchema: z.ZodNativeEnum<typeof GetIntegrationResourcesLevel>;
/** @internal */
export declare const GetIntegrationResourcesLevel$outboundSchema: z.ZodNativeEnum<typeof GetIntegrationResourcesLevel>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetIntegrationResourcesLevel$ {
    /** @deprecated use `GetIntegrationResourcesLevel$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Error: "error";
        readonly Info: "info";
        readonly Warn: "warn";
    }>;
    /** @deprecated use `GetIntegrationResourcesLevel$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Error: "error";
        readonly Info: "info";
        readonly Warn: "warn";
    }>;
}
/** @internal */
export declare const GetIntegrationResourcesNotification$inboundSchema: z.ZodType<GetIntegrationResourcesNotification, z.ZodTypeDef, unknown>;
/** @internal */
export type GetIntegrationResourcesNotification$Outbound = {
    level: string;
    title: string;
    message?: string | undefined;
    href?: string | undefined;
};
/** @internal */
export declare const GetIntegrationResourcesNotification$outboundSchema: z.ZodType<GetIntegrationResourcesNotification$Outbound, z.ZodTypeDef, GetIntegrationResourcesNotification>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetIntegrationResourcesNotification$ {
    /** @deprecated use `GetIntegrationResourcesNotification$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetIntegrationResourcesNotification, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetIntegrationResourcesNotification$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetIntegrationResourcesNotification$Outbound, z.ZodTypeDef, GetIntegrationResourcesNotification>;
    /** @deprecated use `GetIntegrationResourcesNotification$Outbound` instead. */
    type Outbound = GetIntegrationResourcesNotification$Outbound;
}
export declare function getIntegrationResourcesNotificationToJSON(getIntegrationResourcesNotification: GetIntegrationResourcesNotification): string;
export declare function getIntegrationResourcesNotificationFromJSON(jsonString: string): SafeParseResult<GetIntegrationResourcesNotification, SDKValidationError>;
/** @internal */
export declare const GetIntegrationResourcesMetadata$inboundSchema: z.ZodType<GetIntegrationResourcesMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type GetIntegrationResourcesMetadata$Outbound = string | number | boolean | Array<string> | Array<number>;
/** @internal */
export declare const GetIntegrationResourcesMetadata$outboundSchema: z.ZodType<GetIntegrationResourcesMetadata$Outbound, z.ZodTypeDef, GetIntegrationResourcesMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetIntegrationResourcesMetadata$ {
    /** @deprecated use `GetIntegrationResourcesMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetIntegrationResourcesMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetIntegrationResourcesMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetIntegrationResourcesMetadata$Outbound, z.ZodTypeDef, GetIntegrationResourcesMetadata>;
    /** @deprecated use `GetIntegrationResourcesMetadata$Outbound` instead. */
    type Outbound = GetIntegrationResourcesMetadata$Outbound;
}
export declare function getIntegrationResourcesMetadataToJSON(getIntegrationResourcesMetadata: GetIntegrationResourcesMetadata): string;
export declare function getIntegrationResourcesMetadataFromJSON(jsonString: string): SafeParseResult<GetIntegrationResourcesMetadata, SDKValidationError>;
/** @internal */
export declare const Resources$inboundSchema: z.ZodType<Resources, z.ZodTypeDef, unknown>;
/** @internal */
export type Resources$Outbound = {
    partnerId: string;
    internalId: string;
    name: string;
    status?: string | undefined;
    productId: string;
    protocolSettings?: GetIntegrationResourcesProtocolSettings$Outbound | undefined;
    notification?: GetIntegrationResourcesNotification$Outbound | undefined;
    billingPlanId?: string | undefined;
    metadata?: {
        [k: string]: string | number | boolean | Array<string> | Array<number>;
    } | undefined;
};
/** @internal */
export declare const Resources$outboundSchema: z.ZodType<Resources$Outbound, z.ZodTypeDef, Resources>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Resources$ {
    /** @deprecated use `Resources$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Resources, z.ZodTypeDef, unknown>;
    /** @deprecated use `Resources$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Resources$Outbound, z.ZodTypeDef, Resources>;
    /** @deprecated use `Resources$Outbound` instead. */
    type Outbound = Resources$Outbound;
}
export declare function resourcesToJSON(resources: Resources): string;
export declare function resourcesFromJSON(jsonString: string): SafeParseResult<Resources, SDKValidationError>;
/** @internal */
export declare const GetIntegrationResourcesResponseBody$inboundSchema: z.ZodType<GetIntegrationResourcesResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type GetIntegrationResourcesResponseBody$Outbound = {
    resources: Array<Resources$Outbound>;
};
/** @internal */
export declare const GetIntegrationResourcesResponseBody$outboundSchema: z.ZodType<GetIntegrationResourcesResponseBody$Outbound, z.ZodTypeDef, GetIntegrationResourcesResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetIntegrationResourcesResponseBody$ {
    /** @deprecated use `GetIntegrationResourcesResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetIntegrationResourcesResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetIntegrationResourcesResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetIntegrationResourcesResponseBody$Outbound, z.ZodTypeDef, GetIntegrationResourcesResponseBody>;
    /** @deprecated use `GetIntegrationResourcesResponseBody$Outbound` instead. */
    type Outbound = GetIntegrationResourcesResponseBody$Outbound;
}
export declare function getIntegrationResourcesResponseBodyToJSON(getIntegrationResourcesResponseBody: GetIntegrationResourcesResponseBody): string;
export declare function getIntegrationResourcesResponseBodyFromJSON(jsonString: string): SafeParseResult<GetIntegrationResourcesResponseBody, SDKValidationError>;
//# sourceMappingURL=getintegrationresourcesop.d.ts.map