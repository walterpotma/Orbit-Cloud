import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type CreateCheckRequestBody = {
    /**
     * The name of the check being created
     */
    name: string;
    /**
     * Path of the page that is being checked
     */
    path?: string | undefined;
    /**
     * Whether the check should block a deployment from succeeding
     */
    blocking: boolean;
    /**
     * URL to display for further details
     */
    detailsUrl?: string | undefined;
    /**
     * An identifier that can be used as an external reference
     */
    externalId?: string | undefined;
    /**
     * Whether a user should be able to request for the check to be rerun if it fails
     */
    rerequestable?: boolean | undefined;
};
export type CreateCheckRequest = {
    /**
     * The deployment to create the check for.
     */
    deploymentId: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody: CreateCheckRequestBody;
};
export declare const CreateCheckStatus: {
    readonly Registered: "registered";
    readonly Running: "running";
    readonly Completed: "completed";
};
export type CreateCheckStatus = ClosedEnum<typeof CreateCheckStatus>;
export declare const CreateCheckConclusion: {
    readonly Canceled: "canceled";
    readonly Failed: "failed";
    readonly Neutral: "neutral";
    readonly Succeeded: "succeeded";
    readonly Skipped: "skipped";
    readonly Stale: "stale";
};
export type CreateCheckConclusion = ClosedEnum<typeof CreateCheckConclusion>;
export declare const CreateCheckSource: {
    readonly WebVitals: "web-vitals";
};
export type CreateCheckSource = ClosedEnum<typeof CreateCheckSource>;
export type CreateCheckFCP = {
    value: number | null;
    previousValue?: number | undefined;
    source: CreateCheckSource;
};
export declare const CreateCheckChecksSource: {
    readonly WebVitals: "web-vitals";
};
export type CreateCheckChecksSource = ClosedEnum<typeof CreateCheckChecksSource>;
export type CreateCheckLCP = {
    value: number | null;
    previousValue?: number | undefined;
    source: CreateCheckChecksSource;
};
export declare const CreateCheckChecksResponseSource: {
    readonly WebVitals: "web-vitals";
};
export type CreateCheckChecksResponseSource = ClosedEnum<typeof CreateCheckChecksResponseSource>;
export type CreateCheckCLS = {
    value: number | null;
    previousValue?: number | undefined;
    source: CreateCheckChecksResponseSource;
};
export declare const CreateCheckChecksResponse200Source: {
    readonly WebVitals: "web-vitals";
};
export type CreateCheckChecksResponse200Source = ClosedEnum<typeof CreateCheckChecksResponse200Source>;
export type CreateCheckTBT = {
    value: number | null;
    previousValue?: number | undefined;
    source: CreateCheckChecksResponse200Source;
};
export declare const CreateCheckChecksResponse200ApplicationJSONSource: {
    readonly WebVitals: "web-vitals";
};
export type CreateCheckChecksResponse200ApplicationJSONSource = ClosedEnum<typeof CreateCheckChecksResponse200ApplicationJSONSource>;
export type CreateCheckVirtualExperienceScore = {
    value: number | null;
    previousValue?: number | undefined;
    source: CreateCheckChecksResponse200ApplicationJSONSource;
};
export type CreateCheckMetrics = {
    fcp: CreateCheckFCP;
    lcp: CreateCheckLCP;
    cls: CreateCheckCLS;
    tbt: CreateCheckTBT;
    virtualExperienceScore?: CreateCheckVirtualExperienceScore | undefined;
};
export type CreateCheckOutput = {
    metrics?: CreateCheckMetrics | undefined;
};
export type CreateCheckResponseBody = {
    id: string;
    name: string;
    path?: string | undefined;
    status: CreateCheckStatus;
    conclusion?: CreateCheckConclusion | undefined;
    blocking: boolean;
    output?: CreateCheckOutput | undefined;
    detailsUrl?: string | undefined;
    integrationId: string;
    deploymentId: string;
    externalId?: string | undefined;
    createdAt: number;
    updatedAt: number;
    startedAt?: number | undefined;
    completedAt?: number | undefined;
    rerequestable?: boolean | undefined;
};
/** @internal */
export declare const CreateCheckRequestBody$inboundSchema: z.ZodType<CreateCheckRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateCheckRequestBody$Outbound = {
    name: string;
    path?: string | undefined;
    blocking: boolean;
    detailsUrl?: string | undefined;
    externalId?: string | undefined;
    rerequestable?: boolean | undefined;
};
/** @internal */
export declare const CreateCheckRequestBody$outboundSchema: z.ZodType<CreateCheckRequestBody$Outbound, z.ZodTypeDef, CreateCheckRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateCheckRequestBody$ {
    /** @deprecated use `CreateCheckRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateCheckRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateCheckRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateCheckRequestBody$Outbound, z.ZodTypeDef, CreateCheckRequestBody>;
    /** @deprecated use `CreateCheckRequestBody$Outbound` instead. */
    type Outbound = CreateCheckRequestBody$Outbound;
}
export declare function createCheckRequestBodyToJSON(createCheckRequestBody: CreateCheckRequestBody): string;
export declare function createCheckRequestBodyFromJSON(jsonString: string): SafeParseResult<CreateCheckRequestBody, SDKValidationError>;
/** @internal */
export declare const CreateCheckRequest$inboundSchema: z.ZodType<CreateCheckRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateCheckRequest$Outbound = {
    deploymentId: string;
    teamId?: string | undefined;
    slug?: string | undefined;
    RequestBody: CreateCheckRequestBody$Outbound;
};
/** @internal */
export declare const CreateCheckRequest$outboundSchema: z.ZodType<CreateCheckRequest$Outbound, z.ZodTypeDef, CreateCheckRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateCheckRequest$ {
    /** @deprecated use `CreateCheckRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateCheckRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateCheckRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateCheckRequest$Outbound, z.ZodTypeDef, CreateCheckRequest>;
    /** @deprecated use `CreateCheckRequest$Outbound` instead. */
    type Outbound = CreateCheckRequest$Outbound;
}
export declare function createCheckRequestToJSON(createCheckRequest: CreateCheckRequest): string;
export declare function createCheckRequestFromJSON(jsonString: string): SafeParseResult<CreateCheckRequest, SDKValidationError>;
/** @internal */
export declare const CreateCheckStatus$inboundSchema: z.ZodNativeEnum<typeof CreateCheckStatus>;
/** @internal */
export declare const CreateCheckStatus$outboundSchema: z.ZodNativeEnum<typeof CreateCheckStatus>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateCheckStatus$ {
    /** @deprecated use `CreateCheckStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Registered: "registered";
        readonly Running: "running";
        readonly Completed: "completed";
    }>;
    /** @deprecated use `CreateCheckStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Registered: "registered";
        readonly Running: "running";
        readonly Completed: "completed";
    }>;
}
/** @internal */
export declare const CreateCheckConclusion$inboundSchema: z.ZodNativeEnum<typeof CreateCheckConclusion>;
/** @internal */
export declare const CreateCheckConclusion$outboundSchema: z.ZodNativeEnum<typeof CreateCheckConclusion>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateCheckConclusion$ {
    /** @deprecated use `CreateCheckConclusion$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Canceled: "canceled";
        readonly Failed: "failed";
        readonly Neutral: "neutral";
        readonly Succeeded: "succeeded";
        readonly Skipped: "skipped";
        readonly Stale: "stale";
    }>;
    /** @deprecated use `CreateCheckConclusion$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Canceled: "canceled";
        readonly Failed: "failed";
        readonly Neutral: "neutral";
        readonly Succeeded: "succeeded";
        readonly Skipped: "skipped";
        readonly Stale: "stale";
    }>;
}
/** @internal */
export declare const CreateCheckSource$inboundSchema: z.ZodNativeEnum<typeof CreateCheckSource>;
/** @internal */
export declare const CreateCheckSource$outboundSchema: z.ZodNativeEnum<typeof CreateCheckSource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateCheckSource$ {
    /** @deprecated use `CreateCheckSource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
    /** @deprecated use `CreateCheckSource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
}
/** @internal */
export declare const CreateCheckFCP$inboundSchema: z.ZodType<CreateCheckFCP, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateCheckFCP$Outbound = {
    value: number | null;
    previousValue?: number | undefined;
    source: string;
};
/** @internal */
export declare const CreateCheckFCP$outboundSchema: z.ZodType<CreateCheckFCP$Outbound, z.ZodTypeDef, CreateCheckFCP>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateCheckFCP$ {
    /** @deprecated use `CreateCheckFCP$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateCheckFCP, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateCheckFCP$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateCheckFCP$Outbound, z.ZodTypeDef, CreateCheckFCP>;
    /** @deprecated use `CreateCheckFCP$Outbound` instead. */
    type Outbound = CreateCheckFCP$Outbound;
}
export declare function createCheckFCPToJSON(createCheckFCP: CreateCheckFCP): string;
export declare function createCheckFCPFromJSON(jsonString: string): SafeParseResult<CreateCheckFCP, SDKValidationError>;
/** @internal */
export declare const CreateCheckChecksSource$inboundSchema: z.ZodNativeEnum<typeof CreateCheckChecksSource>;
/** @internal */
export declare const CreateCheckChecksSource$outboundSchema: z.ZodNativeEnum<typeof CreateCheckChecksSource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateCheckChecksSource$ {
    /** @deprecated use `CreateCheckChecksSource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
    /** @deprecated use `CreateCheckChecksSource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
}
/** @internal */
export declare const CreateCheckLCP$inboundSchema: z.ZodType<CreateCheckLCP, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateCheckLCP$Outbound = {
    value: number | null;
    previousValue?: number | undefined;
    source: string;
};
/** @internal */
export declare const CreateCheckLCP$outboundSchema: z.ZodType<CreateCheckLCP$Outbound, z.ZodTypeDef, CreateCheckLCP>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateCheckLCP$ {
    /** @deprecated use `CreateCheckLCP$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateCheckLCP, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateCheckLCP$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateCheckLCP$Outbound, z.ZodTypeDef, CreateCheckLCP>;
    /** @deprecated use `CreateCheckLCP$Outbound` instead. */
    type Outbound = CreateCheckLCP$Outbound;
}
export declare function createCheckLCPToJSON(createCheckLCP: CreateCheckLCP): string;
export declare function createCheckLCPFromJSON(jsonString: string): SafeParseResult<CreateCheckLCP, SDKValidationError>;
/** @internal */
export declare const CreateCheckChecksResponseSource$inboundSchema: z.ZodNativeEnum<typeof CreateCheckChecksResponseSource>;
/** @internal */
export declare const CreateCheckChecksResponseSource$outboundSchema: z.ZodNativeEnum<typeof CreateCheckChecksResponseSource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateCheckChecksResponseSource$ {
    /** @deprecated use `CreateCheckChecksResponseSource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
    /** @deprecated use `CreateCheckChecksResponseSource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
}
/** @internal */
export declare const CreateCheckCLS$inboundSchema: z.ZodType<CreateCheckCLS, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateCheckCLS$Outbound = {
    value: number | null;
    previousValue?: number | undefined;
    source: string;
};
/** @internal */
export declare const CreateCheckCLS$outboundSchema: z.ZodType<CreateCheckCLS$Outbound, z.ZodTypeDef, CreateCheckCLS>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateCheckCLS$ {
    /** @deprecated use `CreateCheckCLS$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateCheckCLS, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateCheckCLS$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateCheckCLS$Outbound, z.ZodTypeDef, CreateCheckCLS>;
    /** @deprecated use `CreateCheckCLS$Outbound` instead. */
    type Outbound = CreateCheckCLS$Outbound;
}
export declare function createCheckCLSToJSON(createCheckCLS: CreateCheckCLS): string;
export declare function createCheckCLSFromJSON(jsonString: string): SafeParseResult<CreateCheckCLS, SDKValidationError>;
/** @internal */
export declare const CreateCheckChecksResponse200Source$inboundSchema: z.ZodNativeEnum<typeof CreateCheckChecksResponse200Source>;
/** @internal */
export declare const CreateCheckChecksResponse200Source$outboundSchema: z.ZodNativeEnum<typeof CreateCheckChecksResponse200Source>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateCheckChecksResponse200Source$ {
    /** @deprecated use `CreateCheckChecksResponse200Source$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
    /** @deprecated use `CreateCheckChecksResponse200Source$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
}
/** @internal */
export declare const CreateCheckTBT$inboundSchema: z.ZodType<CreateCheckTBT, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateCheckTBT$Outbound = {
    value: number | null;
    previousValue?: number | undefined;
    source: string;
};
/** @internal */
export declare const CreateCheckTBT$outboundSchema: z.ZodType<CreateCheckTBT$Outbound, z.ZodTypeDef, CreateCheckTBT>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateCheckTBT$ {
    /** @deprecated use `CreateCheckTBT$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateCheckTBT, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateCheckTBT$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateCheckTBT$Outbound, z.ZodTypeDef, CreateCheckTBT>;
    /** @deprecated use `CreateCheckTBT$Outbound` instead. */
    type Outbound = CreateCheckTBT$Outbound;
}
export declare function createCheckTBTToJSON(createCheckTBT: CreateCheckTBT): string;
export declare function createCheckTBTFromJSON(jsonString: string): SafeParseResult<CreateCheckTBT, SDKValidationError>;
/** @internal */
export declare const CreateCheckChecksResponse200ApplicationJSONSource$inboundSchema: z.ZodNativeEnum<typeof CreateCheckChecksResponse200ApplicationJSONSource>;
/** @internal */
export declare const CreateCheckChecksResponse200ApplicationJSONSource$outboundSchema: z.ZodNativeEnum<typeof CreateCheckChecksResponse200ApplicationJSONSource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateCheckChecksResponse200ApplicationJSONSource$ {
    /** @deprecated use `CreateCheckChecksResponse200ApplicationJSONSource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
    /** @deprecated use `CreateCheckChecksResponse200ApplicationJSONSource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
}
/** @internal */
export declare const CreateCheckVirtualExperienceScore$inboundSchema: z.ZodType<CreateCheckVirtualExperienceScore, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateCheckVirtualExperienceScore$Outbound = {
    value: number | null;
    previousValue?: number | undefined;
    source: string;
};
/** @internal */
export declare const CreateCheckVirtualExperienceScore$outboundSchema: z.ZodType<CreateCheckVirtualExperienceScore$Outbound, z.ZodTypeDef, CreateCheckVirtualExperienceScore>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateCheckVirtualExperienceScore$ {
    /** @deprecated use `CreateCheckVirtualExperienceScore$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateCheckVirtualExperienceScore, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateCheckVirtualExperienceScore$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateCheckVirtualExperienceScore$Outbound, z.ZodTypeDef, CreateCheckVirtualExperienceScore>;
    /** @deprecated use `CreateCheckVirtualExperienceScore$Outbound` instead. */
    type Outbound = CreateCheckVirtualExperienceScore$Outbound;
}
export declare function createCheckVirtualExperienceScoreToJSON(createCheckVirtualExperienceScore: CreateCheckVirtualExperienceScore): string;
export declare function createCheckVirtualExperienceScoreFromJSON(jsonString: string): SafeParseResult<CreateCheckVirtualExperienceScore, SDKValidationError>;
/** @internal */
export declare const CreateCheckMetrics$inboundSchema: z.ZodType<CreateCheckMetrics, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateCheckMetrics$Outbound = {
    FCP: CreateCheckFCP$Outbound;
    LCP: CreateCheckLCP$Outbound;
    CLS: CreateCheckCLS$Outbound;
    TBT: CreateCheckTBT$Outbound;
    virtualExperienceScore?: CreateCheckVirtualExperienceScore$Outbound | undefined;
};
/** @internal */
export declare const CreateCheckMetrics$outboundSchema: z.ZodType<CreateCheckMetrics$Outbound, z.ZodTypeDef, CreateCheckMetrics>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateCheckMetrics$ {
    /** @deprecated use `CreateCheckMetrics$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateCheckMetrics, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateCheckMetrics$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateCheckMetrics$Outbound, z.ZodTypeDef, CreateCheckMetrics>;
    /** @deprecated use `CreateCheckMetrics$Outbound` instead. */
    type Outbound = CreateCheckMetrics$Outbound;
}
export declare function createCheckMetricsToJSON(createCheckMetrics: CreateCheckMetrics): string;
export declare function createCheckMetricsFromJSON(jsonString: string): SafeParseResult<CreateCheckMetrics, SDKValidationError>;
/** @internal */
export declare const CreateCheckOutput$inboundSchema: z.ZodType<CreateCheckOutput, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateCheckOutput$Outbound = {
    metrics?: CreateCheckMetrics$Outbound | undefined;
};
/** @internal */
export declare const CreateCheckOutput$outboundSchema: z.ZodType<CreateCheckOutput$Outbound, z.ZodTypeDef, CreateCheckOutput>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateCheckOutput$ {
    /** @deprecated use `CreateCheckOutput$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateCheckOutput, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateCheckOutput$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateCheckOutput$Outbound, z.ZodTypeDef, CreateCheckOutput>;
    /** @deprecated use `CreateCheckOutput$Outbound` instead. */
    type Outbound = CreateCheckOutput$Outbound;
}
export declare function createCheckOutputToJSON(createCheckOutput: CreateCheckOutput): string;
export declare function createCheckOutputFromJSON(jsonString: string): SafeParseResult<CreateCheckOutput, SDKValidationError>;
/** @internal */
export declare const CreateCheckResponseBody$inboundSchema: z.ZodType<CreateCheckResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateCheckResponseBody$Outbound = {
    id: string;
    name: string;
    path?: string | undefined;
    status: string;
    conclusion?: string | undefined;
    blocking: boolean;
    output?: CreateCheckOutput$Outbound | undefined;
    detailsUrl?: string | undefined;
    integrationId: string;
    deploymentId: string;
    externalId?: string | undefined;
    createdAt: number;
    updatedAt: number;
    startedAt?: number | undefined;
    completedAt?: number | undefined;
    rerequestable?: boolean | undefined;
};
/** @internal */
export declare const CreateCheckResponseBody$outboundSchema: z.ZodType<CreateCheckResponseBody$Outbound, z.ZodTypeDef, CreateCheckResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateCheckResponseBody$ {
    /** @deprecated use `CreateCheckResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateCheckResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateCheckResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateCheckResponseBody$Outbound, z.ZodTypeDef, CreateCheckResponseBody>;
    /** @deprecated use `CreateCheckResponseBody$Outbound` instead. */
    type Outbound = CreateCheckResponseBody$Outbound;
}
export declare function createCheckResponseBodyToJSON(createCheckResponseBody: CreateCheckResponseBody): string;
export declare function createCheckResponseBodyFromJSON(jsonString: string): SafeParseResult<CreateCheckResponseBody, SDKValidationError>;
//# sourceMappingURL=createcheckop.d.ts.map