/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/**
 * One of `LOCAL` or `REMOTE`. `LOCAL` specifies that the cache event was from the user's filesystem cache. `REMOTE` specifies that the cache event is from a remote cache.
 */
export const Source = {
    Local: "LOCAL",
    Remote: "REMOTE",
};
/**
 * One of `HIT` or `MISS`. `HIT` specifies that a cached artifact for `hash` was found in the cache. `MISS` specifies that a cached artifact with `hash` was not found.
 */
export const Event = {
    Hit: "HIT",
    Miss: "MISS",
};
/** @internal */
export const Source$inboundSchema = z
    .nativeEnum(Source);
/** @internal */
export const Source$outboundSchema = Source$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Source$;
(function (Source$) {
    /** @deprecated use `Source$inboundSchema` instead. */
    Source$.inboundSchema = Source$inboundSchema;
    /** @deprecated use `Source$outboundSchema` instead. */
    Source$.outboundSchema = Source$outboundSchema;
})(Source$ || (Source$ = {}));
/** @internal */
export const Event$inboundSchema = z.nativeEnum(Event);
/** @internal */
export const Event$outboundSchema = Event$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Event$;
(function (Event$) {
    /** @deprecated use `Event$inboundSchema` instead. */
    Event$.inboundSchema = Event$inboundSchema;
    /** @deprecated use `Event$outboundSchema` instead. */
    Event$.outboundSchema = Event$outboundSchema;
})(Event$ || (Event$ = {}));
/** @internal */
export const RequestBody$inboundSchema = z.object({
    sessionId: z.string(),
    source: Source$inboundSchema,
    event: Event$inboundSchema,
    hash: z.string(),
    duration: z.number().optional(),
});
/** @internal */
export const RequestBody$outboundSchema = z.object({
    sessionId: z.string(),
    source: Source$outboundSchema,
    event: Event$outboundSchema,
    hash: z.string(),
    duration: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RequestBody$;
(function (RequestBody$) {
    /** @deprecated use `RequestBody$inboundSchema` instead. */
    RequestBody$.inboundSchema = RequestBody$inboundSchema;
    /** @deprecated use `RequestBody$outboundSchema` instead. */
    RequestBody$.outboundSchema = RequestBody$outboundSchema;
})(RequestBody$ || (RequestBody$ = {}));
export function requestBodyToJSON(requestBody) {
    return JSON.stringify(RequestBody$outboundSchema.parse(requestBody));
}
export function requestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RequestBody' from JSON`);
}
/** @internal */
export const RecordEventsRequest$inboundSchema = z.object({
    "x-artifact-client-ci": z.string().optional(),
    "x-artifact-client-interactive": z.number().int().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.array(z.lazy(() => RequestBody$inboundSchema)),
}).transform((v) => {
    return remap$(v, {
        "x-artifact-client-ci": "xArtifactClientCi",
        "x-artifact-client-interactive": "xArtifactClientInteractive",
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const RecordEventsRequest$outboundSchema = z.object({
    xArtifactClientCi: z.string().optional(),
    xArtifactClientInteractive: z.number().int().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.array(z.lazy(() => RequestBody$outboundSchema)),
}).transform((v) => {
    return remap$(v, {
        xArtifactClientCi: "x-artifact-client-ci",
        xArtifactClientInteractive: "x-artifact-client-interactive",
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RecordEventsRequest$;
(function (RecordEventsRequest$) {
    /** @deprecated use `RecordEventsRequest$inboundSchema` instead. */
    RecordEventsRequest$.inboundSchema = RecordEventsRequest$inboundSchema;
    /** @deprecated use `RecordEventsRequest$outboundSchema` instead. */
    RecordEventsRequest$.outboundSchema = RecordEventsRequest$outboundSchema;
})(RecordEventsRequest$ || (RecordEventsRequest$ = {}));
export function recordEventsRequestToJSON(recordEventsRequest) {
    return JSON.stringify(RecordEventsRequest$outboundSchema.parse(recordEventsRequest));
}
export function recordEventsRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RecordEventsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RecordEventsRequest' from JSON`);
}
//# sourceMappingURL=recordeventsop.js.map