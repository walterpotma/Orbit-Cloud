/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Pagination$inboundSchema, Pagination$outboundSchema, } from "./pagination.js";
export const ListAliasesProtectionBypassAliasesResponse200Scope = {
    EmailInvite: "email_invite",
};
export const ListAliasesProtectionBypassAliasesResponseScope = {
    AliasProtectionOverride: "alias-protection-override",
};
export const ListAliasesProtectionBypassAccess = {
    Requested: "requested",
    Granted: "granted",
};
export const ListAliasesProtectionBypassAliasesScope = {
    User: "user",
};
export const ListAliasesProtectionBypassScope = {
    ShareableLink: "shareable-link",
};
/** @internal */
export const Domain$inboundSchema = z
    .union([z.array(z.string()), z.string()]);
/** @internal */
export const Domain$outboundSchema = z.union([z.array(z.string()), z.string()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Domain$;
(function (Domain$) {
    /** @deprecated use `Domain$inboundSchema` instead. */
    Domain$.inboundSchema = Domain$inboundSchema;
    /** @deprecated use `Domain$outboundSchema` instead. */
    Domain$.outboundSchema = Domain$outboundSchema;
})(Domain$ || (Domain$ = {}));
export function domainToJSON(domain) {
    return JSON.stringify(Domain$outboundSchema.parse(domain));
}
export function domainFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Domain$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Domain' from JSON`);
}
/** @internal */
export const ListAliasesRequest$inboundSchema = z.object({
    domain: z.union([z.array(z.string()), z.string()]).optional(),
    from: z.number().optional(),
    limit: z.number().optional(),
    projectId: z.string().optional(),
    since: z.number().optional(),
    until: z.number().optional(),
    rollbackDeploymentId: z.string().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/** @internal */
export const ListAliasesRequest$outboundSchema = z.object({
    domain: z.union([z.array(z.string()), z.string()]).optional(),
    from: z.number().optional(),
    limit: z.number().optional(),
    projectId: z.string().optional(),
    since: z.number().optional(),
    until: z.number().optional(),
    rollbackDeploymentId: z.string().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ListAliasesRequest$;
(function (ListAliasesRequest$) {
    /** @deprecated use `ListAliasesRequest$inboundSchema` instead. */
    ListAliasesRequest$.inboundSchema = ListAliasesRequest$inboundSchema;
    /** @deprecated use `ListAliasesRequest$outboundSchema` instead. */
    ListAliasesRequest$.outboundSchema = ListAliasesRequest$outboundSchema;
})(ListAliasesRequest$ || (ListAliasesRequest$ = {}));
export function listAliasesRequestToJSON(listAliasesRequest) {
    return JSON.stringify(ListAliasesRequest$outboundSchema.parse(listAliasesRequest));
}
export function listAliasesRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ListAliasesRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListAliasesRequest' from JSON`);
}
/** @internal */
export const ListAliasesCreator$inboundSchema = z.object({
    uid: z.string(),
    email: z.string(),
    username: z.string(),
});
/** @internal */
export const ListAliasesCreator$outboundSchema = z.object({
    uid: z.string(),
    email: z.string(),
    username: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ListAliasesCreator$;
(function (ListAliasesCreator$) {
    /** @deprecated use `ListAliasesCreator$inboundSchema` instead. */
    ListAliasesCreator$.inboundSchema = ListAliasesCreator$inboundSchema;
    /** @deprecated use `ListAliasesCreator$outboundSchema` instead. */
    ListAliasesCreator$.outboundSchema = ListAliasesCreator$outboundSchema;
})(ListAliasesCreator$ || (ListAliasesCreator$ = {}));
export function listAliasesCreatorToJSON(listAliasesCreator) {
    return JSON.stringify(ListAliasesCreator$outboundSchema.parse(listAliasesCreator));
}
export function listAliasesCreatorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ListAliasesCreator$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListAliasesCreator' from JSON`);
}
/** @internal */
export const ListAliasesDeployment$inboundSchema = z.object({
    id: z.string(),
    url: z.string(),
    meta: z.string().optional(),
});
/** @internal */
export const ListAliasesDeployment$outboundSchema = z.object({
    id: z.string(),
    url: z.string(),
    meta: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ListAliasesDeployment$;
(function (ListAliasesDeployment$) {
    /** @deprecated use `ListAliasesDeployment$inboundSchema` instead. */
    ListAliasesDeployment$.inboundSchema = ListAliasesDeployment$inboundSchema;
    /** @deprecated use `ListAliasesDeployment$outboundSchema` instead. */
    ListAliasesDeployment$.outboundSchema = ListAliasesDeployment$outboundSchema;
})(ListAliasesDeployment$ || (ListAliasesDeployment$ = {}));
export function listAliasesDeploymentToJSON(listAliasesDeployment) {
    return JSON.stringify(ListAliasesDeployment$outboundSchema.parse(listAliasesDeployment));
}
export function listAliasesDeploymentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ListAliasesDeployment$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListAliasesDeployment' from JSON`);
}
/** @internal */
export const ListAliasesProtectionBypassAliasesResponse200Scope$inboundSchema = z
    .nativeEnum(ListAliasesProtectionBypassAliasesResponse200Scope);
/** @internal */
export const ListAliasesProtectionBypassAliasesResponse200Scope$outboundSchema = ListAliasesProtectionBypassAliasesResponse200Scope$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ListAliasesProtectionBypassAliasesResponse200Scope$;
(function (ListAliasesProtectionBypassAliasesResponse200Scope$) {
    /** @deprecated use `ListAliasesProtectionBypassAliasesResponse200Scope$inboundSchema` instead. */
    ListAliasesProtectionBypassAliasesResponse200Scope$.inboundSchema = ListAliasesProtectionBypassAliasesResponse200Scope$inboundSchema;
    /** @deprecated use `ListAliasesProtectionBypassAliasesResponse200Scope$outboundSchema` instead. */
    ListAliasesProtectionBypassAliasesResponse200Scope$.outboundSchema = ListAliasesProtectionBypassAliasesResponse200Scope$outboundSchema;
})(ListAliasesProtectionBypassAliasesResponse200Scope$ || (ListAliasesProtectionBypassAliasesResponse200Scope$ = {}));
/** @internal */
export const ListAliasesProtectionBypass4$inboundSchema = z.object({
    createdAt: z.number(),
    lastUpdatedAt: z.number(),
    lastUpdatedBy: z.string(),
    scope: ListAliasesProtectionBypassAliasesResponse200Scope$inboundSchema,
});
/** @internal */
export const ListAliasesProtectionBypass4$outboundSchema = z.object({
    createdAt: z.number(),
    lastUpdatedAt: z.number(),
    lastUpdatedBy: z.string(),
    scope: ListAliasesProtectionBypassAliasesResponse200Scope$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ListAliasesProtectionBypass4$;
(function (ListAliasesProtectionBypass4$) {
    /** @deprecated use `ListAliasesProtectionBypass4$inboundSchema` instead. */
    ListAliasesProtectionBypass4$.inboundSchema = ListAliasesProtectionBypass4$inboundSchema;
    /** @deprecated use `ListAliasesProtectionBypass4$outboundSchema` instead. */
    ListAliasesProtectionBypass4$.outboundSchema = ListAliasesProtectionBypass4$outboundSchema;
})(ListAliasesProtectionBypass4$ || (ListAliasesProtectionBypass4$ = {}));
export function listAliasesProtectionBypass4ToJSON(listAliasesProtectionBypass4) {
    return JSON.stringify(ListAliasesProtectionBypass4$outboundSchema.parse(listAliasesProtectionBypass4));
}
export function listAliasesProtectionBypass4FromJSON(jsonString) {
    return safeParse(jsonString, (x) => ListAliasesProtectionBypass4$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListAliasesProtectionBypass4' from JSON`);
}
/** @internal */
export const ListAliasesProtectionBypassAliasesResponseScope$inboundSchema = z
    .nativeEnum(ListAliasesProtectionBypassAliasesResponseScope);
/** @internal */
export const ListAliasesProtectionBypassAliasesResponseScope$outboundSchema = ListAliasesProtectionBypassAliasesResponseScope$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ListAliasesProtectionBypassAliasesResponseScope$;
(function (ListAliasesProtectionBypassAliasesResponseScope$) {
    /** @deprecated use `ListAliasesProtectionBypassAliasesResponseScope$inboundSchema` instead. */
    ListAliasesProtectionBypassAliasesResponseScope$.inboundSchema = ListAliasesProtectionBypassAliasesResponseScope$inboundSchema;
    /** @deprecated use `ListAliasesProtectionBypassAliasesResponseScope$outboundSchema` instead. */
    ListAliasesProtectionBypassAliasesResponseScope$.outboundSchema = ListAliasesProtectionBypassAliasesResponseScope$outboundSchema;
})(ListAliasesProtectionBypassAliasesResponseScope$ || (ListAliasesProtectionBypassAliasesResponseScope$ = {}));
/** @internal */
export const ListAliasesProtectionBypass3$inboundSchema = z.object({
    createdAt: z.number(),
    createdBy: z.string(),
    scope: ListAliasesProtectionBypassAliasesResponseScope$inboundSchema,
});
/** @internal */
export const ListAliasesProtectionBypass3$outboundSchema = z.object({
    createdAt: z.number(),
    createdBy: z.string(),
    scope: ListAliasesProtectionBypassAliasesResponseScope$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ListAliasesProtectionBypass3$;
(function (ListAliasesProtectionBypass3$) {
    /** @deprecated use `ListAliasesProtectionBypass3$inboundSchema` instead. */
    ListAliasesProtectionBypass3$.inboundSchema = ListAliasesProtectionBypass3$inboundSchema;
    /** @deprecated use `ListAliasesProtectionBypass3$outboundSchema` instead. */
    ListAliasesProtectionBypass3$.outboundSchema = ListAliasesProtectionBypass3$outboundSchema;
})(ListAliasesProtectionBypass3$ || (ListAliasesProtectionBypass3$ = {}));
export function listAliasesProtectionBypass3ToJSON(listAliasesProtectionBypass3) {
    return JSON.stringify(ListAliasesProtectionBypass3$outboundSchema.parse(listAliasesProtectionBypass3));
}
export function listAliasesProtectionBypass3FromJSON(jsonString) {
    return safeParse(jsonString, (x) => ListAliasesProtectionBypass3$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListAliasesProtectionBypass3' from JSON`);
}
/** @internal */
export const ListAliasesProtectionBypassAccess$inboundSchema = z.nativeEnum(ListAliasesProtectionBypassAccess);
/** @internal */
export const ListAliasesProtectionBypassAccess$outboundSchema = ListAliasesProtectionBypassAccess$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ListAliasesProtectionBypassAccess$;
(function (ListAliasesProtectionBypassAccess$) {
    /** @deprecated use `ListAliasesProtectionBypassAccess$inboundSchema` instead. */
    ListAliasesProtectionBypassAccess$.inboundSchema = ListAliasesProtectionBypassAccess$inboundSchema;
    /** @deprecated use `ListAliasesProtectionBypassAccess$outboundSchema` instead. */
    ListAliasesProtectionBypassAccess$.outboundSchema = ListAliasesProtectionBypassAccess$outboundSchema;
})(ListAliasesProtectionBypassAccess$ || (ListAliasesProtectionBypassAccess$ = {}));
/** @internal */
export const ListAliasesProtectionBypassAliasesScope$inboundSchema = z
    .nativeEnum(ListAliasesProtectionBypassAliasesScope);
/** @internal */
export const ListAliasesProtectionBypassAliasesScope$outboundSchema = ListAliasesProtectionBypassAliasesScope$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ListAliasesProtectionBypassAliasesScope$;
(function (ListAliasesProtectionBypassAliasesScope$) {
    /** @deprecated use `ListAliasesProtectionBypassAliasesScope$inboundSchema` instead. */
    ListAliasesProtectionBypassAliasesScope$.inboundSchema = ListAliasesProtectionBypassAliasesScope$inboundSchema;
    /** @deprecated use `ListAliasesProtectionBypassAliasesScope$outboundSchema` instead. */
    ListAliasesProtectionBypassAliasesScope$.outboundSchema = ListAliasesProtectionBypassAliasesScope$outboundSchema;
})(ListAliasesProtectionBypassAliasesScope$ || (ListAliasesProtectionBypassAliasesScope$ = {}));
/** @internal */
export const ListAliasesProtectionBypass2$inboundSchema = z.object({
    createdAt: z.number(),
    lastUpdatedAt: z.number(),
    lastUpdatedBy: z.string(),
    access: ListAliasesProtectionBypassAccess$inboundSchema,
    scope: ListAliasesProtectionBypassAliasesScope$inboundSchema,
});
/** @internal */
export const ListAliasesProtectionBypass2$outboundSchema = z.object({
    createdAt: z.number(),
    lastUpdatedAt: z.number(),
    lastUpdatedBy: z.string(),
    access: ListAliasesProtectionBypassAccess$outboundSchema,
    scope: ListAliasesProtectionBypassAliasesScope$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ListAliasesProtectionBypass2$;
(function (ListAliasesProtectionBypass2$) {
    /** @deprecated use `ListAliasesProtectionBypass2$inboundSchema` instead. */
    ListAliasesProtectionBypass2$.inboundSchema = ListAliasesProtectionBypass2$inboundSchema;
    /** @deprecated use `ListAliasesProtectionBypass2$outboundSchema` instead. */
    ListAliasesProtectionBypass2$.outboundSchema = ListAliasesProtectionBypass2$outboundSchema;
})(ListAliasesProtectionBypass2$ || (ListAliasesProtectionBypass2$ = {}));
export function listAliasesProtectionBypass2ToJSON(listAliasesProtectionBypass2) {
    return JSON.stringify(ListAliasesProtectionBypass2$outboundSchema.parse(listAliasesProtectionBypass2));
}
export function listAliasesProtectionBypass2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => ListAliasesProtectionBypass2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListAliasesProtectionBypass2' from JSON`);
}
/** @internal */
export const ListAliasesProtectionBypassScope$inboundSchema = z.nativeEnum(ListAliasesProtectionBypassScope);
/** @internal */
export const ListAliasesProtectionBypassScope$outboundSchema = ListAliasesProtectionBypassScope$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ListAliasesProtectionBypassScope$;
(function (ListAliasesProtectionBypassScope$) {
    /** @deprecated use `ListAliasesProtectionBypassScope$inboundSchema` instead. */
    ListAliasesProtectionBypassScope$.inboundSchema = ListAliasesProtectionBypassScope$inboundSchema;
    /** @deprecated use `ListAliasesProtectionBypassScope$outboundSchema` instead. */
    ListAliasesProtectionBypassScope$.outboundSchema = ListAliasesProtectionBypassScope$outboundSchema;
})(ListAliasesProtectionBypassScope$ || (ListAliasesProtectionBypassScope$ = {}));
/** @internal */
export const ListAliasesProtectionBypass1$inboundSchema = z.object({
    createdAt: z.number(),
    createdBy: z.string(),
    scope: ListAliasesProtectionBypassScope$inboundSchema,
    expires: z.number().optional(),
});
/** @internal */
export const ListAliasesProtectionBypass1$outboundSchema = z.object({
    createdAt: z.number(),
    createdBy: z.string(),
    scope: ListAliasesProtectionBypassScope$outboundSchema,
    expires: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ListAliasesProtectionBypass1$;
(function (ListAliasesProtectionBypass1$) {
    /** @deprecated use `ListAliasesProtectionBypass1$inboundSchema` instead. */
    ListAliasesProtectionBypass1$.inboundSchema = ListAliasesProtectionBypass1$inboundSchema;
    /** @deprecated use `ListAliasesProtectionBypass1$outboundSchema` instead. */
    ListAliasesProtectionBypass1$.outboundSchema = ListAliasesProtectionBypass1$outboundSchema;
})(ListAliasesProtectionBypass1$ || (ListAliasesProtectionBypass1$ = {}));
export function listAliasesProtectionBypass1ToJSON(listAliasesProtectionBypass1) {
    return JSON.stringify(ListAliasesProtectionBypass1$outboundSchema.parse(listAliasesProtectionBypass1));
}
export function listAliasesProtectionBypass1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => ListAliasesProtectionBypass1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListAliasesProtectionBypass1' from JSON`);
}
/** @internal */
export const ListAliasesProtectionBypass$inboundSchema = z.union([
    z.lazy(() => ListAliasesProtectionBypass2$inboundSchema),
    z.lazy(() => ListAliasesProtectionBypass4$inboundSchema),
    z.lazy(() => ListAliasesProtectionBypass1$inboundSchema),
    z.lazy(() => ListAliasesProtectionBypass3$inboundSchema),
]);
/** @internal */
export const ListAliasesProtectionBypass$outboundSchema = z.union([
    z.lazy(() => ListAliasesProtectionBypass2$outboundSchema),
    z.lazy(() => ListAliasesProtectionBypass4$outboundSchema),
    z.lazy(() => ListAliasesProtectionBypass1$outboundSchema),
    z.lazy(() => ListAliasesProtectionBypass3$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ListAliasesProtectionBypass$;
(function (ListAliasesProtectionBypass$) {
    /** @deprecated use `ListAliasesProtectionBypass$inboundSchema` instead. */
    ListAliasesProtectionBypass$.inboundSchema = ListAliasesProtectionBypass$inboundSchema;
    /** @deprecated use `ListAliasesProtectionBypass$outboundSchema` instead. */
    ListAliasesProtectionBypass$.outboundSchema = ListAliasesProtectionBypass$outboundSchema;
})(ListAliasesProtectionBypass$ || (ListAliasesProtectionBypass$ = {}));
export function listAliasesProtectionBypassToJSON(listAliasesProtectionBypass) {
    return JSON.stringify(ListAliasesProtectionBypass$outboundSchema.parse(listAliasesProtectionBypass));
}
export function listAliasesProtectionBypassFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ListAliasesProtectionBypass$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListAliasesProtectionBypass' from JSON`);
}
/** @internal */
export const ListAliasesDefaultApp$inboundSchema = z.object({
    projectId: z.string(),
});
/** @internal */
export const ListAliasesDefaultApp$outboundSchema = z.object({
    projectId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ListAliasesDefaultApp$;
(function (ListAliasesDefaultApp$) {
    /** @deprecated use `ListAliasesDefaultApp$inboundSchema` instead. */
    ListAliasesDefaultApp$.inboundSchema = ListAliasesDefaultApp$inboundSchema;
    /** @deprecated use `ListAliasesDefaultApp$outboundSchema` instead. */
    ListAliasesDefaultApp$.outboundSchema = ListAliasesDefaultApp$outboundSchema;
})(ListAliasesDefaultApp$ || (ListAliasesDefaultApp$ = {}));
export function listAliasesDefaultAppToJSON(listAliasesDefaultApp) {
    return JSON.stringify(ListAliasesDefaultApp$outboundSchema.parse(listAliasesDefaultApp));
}
export function listAliasesDefaultAppFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ListAliasesDefaultApp$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListAliasesDefaultApp' from JSON`);
}
/** @internal */
export const ListAliasesApplications3$inboundSchema = z.object({
    deploymentId: z.string().optional(),
    branchDeploymentId: z.string().optional(),
    fallbackDeploymentId: z.string().optional(),
    fallbackHost: z.string().optional(),
    branchAlias: z.string().optional(),
    projectId: z.string(),
});
/** @internal */
export const ListAliasesApplications3$outboundSchema = z.object({
    deploymentId: z.string().optional(),
    branchDeploymentId: z.string().optional(),
    fallbackDeploymentId: z.string().optional(),
    fallbackHost: z.string().optional(),
    branchAlias: z.string().optional(),
    projectId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ListAliasesApplications3$;
(function (ListAliasesApplications3$) {
    /** @deprecated use `ListAliasesApplications3$inboundSchema` instead. */
    ListAliasesApplications3$.inboundSchema = ListAliasesApplications3$inboundSchema;
    /** @deprecated use `ListAliasesApplications3$outboundSchema` instead. */
    ListAliasesApplications3$.outboundSchema = ListAliasesApplications3$outboundSchema;
})(ListAliasesApplications3$ || (ListAliasesApplications3$ = {}));
export function listAliasesApplications3ToJSON(listAliasesApplications3) {
    return JSON.stringify(ListAliasesApplications3$outboundSchema.parse(listAliasesApplications3));
}
export function listAliasesApplications3FromJSON(jsonString) {
    return safeParse(jsonString, (x) => ListAliasesApplications3$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListAliasesApplications3' from JSON`);
}
/** @internal */
export const ListAliasesApplications2$inboundSchema = z.object({
    fallbackHost: z.string(),
    branchAlias: z.string(),
    projectId: z.string(),
});
/** @internal */
export const ListAliasesApplications2$outboundSchema = z.object({
    fallbackHost: z.string(),
    branchAlias: z.string(),
    projectId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ListAliasesApplications2$;
(function (ListAliasesApplications2$) {
    /** @deprecated use `ListAliasesApplications2$inboundSchema` instead. */
    ListAliasesApplications2$.inboundSchema = ListAliasesApplications2$inboundSchema;
    /** @deprecated use `ListAliasesApplications2$outboundSchema` instead. */
    ListAliasesApplications2$.outboundSchema = ListAliasesApplications2$outboundSchema;
})(ListAliasesApplications2$ || (ListAliasesApplications2$ = {}));
export function listAliasesApplications2ToJSON(listAliasesApplications2) {
    return JSON.stringify(ListAliasesApplications2$outboundSchema.parse(listAliasesApplications2));
}
export function listAliasesApplications2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => ListAliasesApplications2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListAliasesApplications2' from JSON`);
}
/** @internal */
export const ListAliasesApplications1$inboundSchema = z.object({
    fallbackHost: z.string(),
    projectId: z.string(),
});
/** @internal */
export const ListAliasesApplications1$outboundSchema = z.object({
    fallbackHost: z.string(),
    projectId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ListAliasesApplications1$;
(function (ListAliasesApplications1$) {
    /** @deprecated use `ListAliasesApplications1$inboundSchema` instead. */
    ListAliasesApplications1$.inboundSchema = ListAliasesApplications1$inboundSchema;
    /** @deprecated use `ListAliasesApplications1$outboundSchema` instead. */
    ListAliasesApplications1$.outboundSchema = ListAliasesApplications1$outboundSchema;
})(ListAliasesApplications1$ || (ListAliasesApplications1$ = {}));
export function listAliasesApplications1ToJSON(listAliasesApplications1) {
    return JSON.stringify(ListAliasesApplications1$outboundSchema.parse(listAliasesApplications1));
}
export function listAliasesApplications1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => ListAliasesApplications1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListAliasesApplications1' from JSON`);
}
/** @internal */
export const ListAliasesApplications$inboundSchema = z.union([
    z.array(z.lazy(() => ListAliasesApplications1$inboundSchema)),
    z.array(z.lazy(() => ListAliasesApplications2$inboundSchema)),
    z.array(z.lazy(() => ListAliasesApplications3$inboundSchema)),
]);
/** @internal */
export const ListAliasesApplications$outboundSchema = z.union([
    z.array(z.lazy(() => ListAliasesApplications1$outboundSchema)),
    z.array(z.lazy(() => ListAliasesApplications2$outboundSchema)),
    z.array(z.lazy(() => ListAliasesApplications3$outboundSchema)),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ListAliasesApplications$;
(function (ListAliasesApplications$) {
    /** @deprecated use `ListAliasesApplications$inboundSchema` instead. */
    ListAliasesApplications$.inboundSchema = ListAliasesApplications$inboundSchema;
    /** @deprecated use `ListAliasesApplications$outboundSchema` instead. */
    ListAliasesApplications$.outboundSchema = ListAliasesApplications$outboundSchema;
})(ListAliasesApplications$ || (ListAliasesApplications$ = {}));
export function listAliasesApplicationsToJSON(listAliasesApplications) {
    return JSON.stringify(ListAliasesApplications$outboundSchema.parse(listAliasesApplications));
}
export function listAliasesApplicationsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ListAliasesApplications$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListAliasesApplications' from JSON`);
}
/** @internal */
export const ListAliasesMicrofrontends$inboundSchema = z.object({
    defaultApp: z.lazy(() => ListAliasesDefaultApp$inboundSchema),
    applications: z.union([
        z.array(z.lazy(() => ListAliasesApplications1$inboundSchema)),
        z.array(z.lazy(() => ListAliasesApplications2$inboundSchema)),
        z.array(z.lazy(() => ListAliasesApplications3$inboundSchema)),
    ]),
});
/** @internal */
export const ListAliasesMicrofrontends$outboundSchema = z.object({
    defaultApp: z.lazy(() => ListAliasesDefaultApp$outboundSchema),
    applications: z.union([
        z.array(z.lazy(() => ListAliasesApplications1$outboundSchema)),
        z.array(z.lazy(() => ListAliasesApplications2$outboundSchema)),
        z.array(z.lazy(() => ListAliasesApplications3$outboundSchema)),
    ]),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ListAliasesMicrofrontends$;
(function (ListAliasesMicrofrontends$) {
    /** @deprecated use `ListAliasesMicrofrontends$inboundSchema` instead. */
    ListAliasesMicrofrontends$.inboundSchema = ListAliasesMicrofrontends$inboundSchema;
    /** @deprecated use `ListAliasesMicrofrontends$outboundSchema` instead. */
    ListAliasesMicrofrontends$.outboundSchema = ListAliasesMicrofrontends$outboundSchema;
})(ListAliasesMicrofrontends$ || (ListAliasesMicrofrontends$ = {}));
export function listAliasesMicrofrontendsToJSON(listAliasesMicrofrontends) {
    return JSON.stringify(ListAliasesMicrofrontends$outboundSchema.parse(listAliasesMicrofrontends));
}
export function listAliasesMicrofrontendsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ListAliasesMicrofrontends$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListAliasesMicrofrontends' from JSON`);
}
/** @internal */
export const ListAliasesAliases$inboundSchema = z.object({
    alias: z.string(),
    created: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    createdAt: z.number().optional(),
    creator: z.lazy(() => ListAliasesCreator$inboundSchema).optional(),
    deletedAt: z.nullable(z.number()).optional(),
    deployment: z.lazy(() => ListAliasesDeployment$inboundSchema).optional(),
    deploymentId: z.nullable(z.string()),
    projectId: z.nullable(z.string()),
    redirect: z.nullable(z.string()).optional(),
    redirectStatusCode: z.nullable(z.number()).optional(),
    uid: z.string(),
    updatedAt: z.number().optional(),
    protectionBypass: z.record(z.union([
        z.lazy(() => ListAliasesProtectionBypass2$inboundSchema),
        z.lazy(() => ListAliasesProtectionBypass4$inboundSchema),
        z.lazy(() => ListAliasesProtectionBypass1$inboundSchema),
        z.lazy(() => ListAliasesProtectionBypass3$inboundSchema),
    ])).optional(),
    microfrontends: z.lazy(() => ListAliasesMicrofrontends$inboundSchema)
        .optional(),
});
/** @internal */
export const ListAliasesAliases$outboundSchema = z.object({
    alias: z.string(),
    created: z.date().transform(v => v.toISOString()),
    createdAt: z.number().optional(),
    creator: z.lazy(() => ListAliasesCreator$outboundSchema).optional(),
    deletedAt: z.nullable(z.number()).optional(),
    deployment: z.lazy(() => ListAliasesDeployment$outboundSchema).optional(),
    deploymentId: z.nullable(z.string()),
    projectId: z.nullable(z.string()),
    redirect: z.nullable(z.string()).optional(),
    redirectStatusCode: z.nullable(z.number()).optional(),
    uid: z.string(),
    updatedAt: z.number().optional(),
    protectionBypass: z.record(z.union([
        z.lazy(() => ListAliasesProtectionBypass2$outboundSchema),
        z.lazy(() => ListAliasesProtectionBypass4$outboundSchema),
        z.lazy(() => ListAliasesProtectionBypass1$outboundSchema),
        z.lazy(() => ListAliasesProtectionBypass3$outboundSchema),
    ])).optional(),
    microfrontends: z.lazy(() => ListAliasesMicrofrontends$outboundSchema)
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ListAliasesAliases$;
(function (ListAliasesAliases$) {
    /** @deprecated use `ListAliasesAliases$inboundSchema` instead. */
    ListAliasesAliases$.inboundSchema = ListAliasesAliases$inboundSchema;
    /** @deprecated use `ListAliasesAliases$outboundSchema` instead. */
    ListAliasesAliases$.outboundSchema = ListAliasesAliases$outboundSchema;
})(ListAliasesAliases$ || (ListAliasesAliases$ = {}));
export function listAliasesAliasesToJSON(listAliasesAliases) {
    return JSON.stringify(ListAliasesAliases$outboundSchema.parse(listAliasesAliases));
}
export function listAliasesAliasesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ListAliasesAliases$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListAliasesAliases' from JSON`);
}
/** @internal */
export const ListAliasesResponseBody$inboundSchema = z.object({
    aliases: z.array(z.lazy(() => ListAliasesAliases$inboundSchema)),
    pagination: Pagination$inboundSchema,
});
/** @internal */
export const ListAliasesResponseBody$outboundSchema = z.object({
    aliases: z.array(z.lazy(() => ListAliasesAliases$outboundSchema)),
    pagination: Pagination$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ListAliasesResponseBody$;
(function (ListAliasesResponseBody$) {
    /** @deprecated use `ListAliasesResponseBody$inboundSchema` instead. */
    ListAliasesResponseBody$.inboundSchema = ListAliasesResponseBody$inboundSchema;
    /** @deprecated use `ListAliasesResponseBody$outboundSchema` instead. */
    ListAliasesResponseBody$.outboundSchema = ListAliasesResponseBody$outboundSchema;
})(ListAliasesResponseBody$ || (ListAliasesResponseBody$ = {}));
export function listAliasesResponseBodyToJSON(listAliasesResponseBody) {
    return JSON.stringify(ListAliasesResponseBody$outboundSchema.parse(listAliasesResponseBody));
}
export function listAliasesResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ListAliasesResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListAliasesResponseBody' from JSON`);
}
//# sourceMappingURL=listaliasesop.js.map