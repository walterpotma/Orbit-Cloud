/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/** @internal */
export const UpdateResourceSecretsByIdEnvironmentOverrides$inboundSchema = z.object({
    development: z.string().optional(),
    preview: z.string().optional(),
    production: z.string().optional(),
});
/** @internal */
export const UpdateResourceSecretsByIdEnvironmentOverrides$outboundSchema = z.object({
    development: z.string().optional(),
    preview: z.string().optional(),
    production: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateResourceSecretsByIdEnvironmentOverrides$;
(function (UpdateResourceSecretsByIdEnvironmentOverrides$) {
    /** @deprecated use `UpdateResourceSecretsByIdEnvironmentOverrides$inboundSchema` instead. */
    UpdateResourceSecretsByIdEnvironmentOverrides$.inboundSchema = UpdateResourceSecretsByIdEnvironmentOverrides$inboundSchema;
    /** @deprecated use `UpdateResourceSecretsByIdEnvironmentOverrides$outboundSchema` instead. */
    UpdateResourceSecretsByIdEnvironmentOverrides$.outboundSchema = UpdateResourceSecretsByIdEnvironmentOverrides$outboundSchema;
})(UpdateResourceSecretsByIdEnvironmentOverrides$ || (UpdateResourceSecretsByIdEnvironmentOverrides$ = {}));
export function updateResourceSecretsByIdEnvironmentOverridesToJSON(updateResourceSecretsByIdEnvironmentOverrides) {
    return JSON.stringify(UpdateResourceSecretsByIdEnvironmentOverrides$outboundSchema.parse(updateResourceSecretsByIdEnvironmentOverrides));
}
export function updateResourceSecretsByIdEnvironmentOverridesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateResourceSecretsByIdEnvironmentOverrides$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateResourceSecretsByIdEnvironmentOverrides' from JSON`);
}
/** @internal */
export const UpdateResourceSecretsByIdSecrets$inboundSchema = z.object({
    name: z.string(),
    value: z.string(),
    prefix: z.string().optional(),
    environmentOverrides: z.lazy(() => UpdateResourceSecretsByIdEnvironmentOverrides$inboundSchema).optional(),
});
/** @internal */
export const UpdateResourceSecretsByIdSecrets$outboundSchema = z.object({
    name: z.string(),
    value: z.string(),
    prefix: z.string().optional(),
    environmentOverrides: z.lazy(() => UpdateResourceSecretsByIdEnvironmentOverrides$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateResourceSecretsByIdSecrets$;
(function (UpdateResourceSecretsByIdSecrets$) {
    /** @deprecated use `UpdateResourceSecretsByIdSecrets$inboundSchema` instead. */
    UpdateResourceSecretsByIdSecrets$.inboundSchema = UpdateResourceSecretsByIdSecrets$inboundSchema;
    /** @deprecated use `UpdateResourceSecretsByIdSecrets$outboundSchema` instead. */
    UpdateResourceSecretsByIdSecrets$.outboundSchema = UpdateResourceSecretsByIdSecrets$outboundSchema;
})(UpdateResourceSecretsByIdSecrets$ || (UpdateResourceSecretsByIdSecrets$ = {}));
export function updateResourceSecretsByIdSecretsToJSON(updateResourceSecretsByIdSecrets) {
    return JSON.stringify(UpdateResourceSecretsByIdSecrets$outboundSchema.parse(updateResourceSecretsByIdSecrets));
}
export function updateResourceSecretsByIdSecretsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateResourceSecretsByIdSecrets$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateResourceSecretsByIdSecrets' from JSON`);
}
/** @internal */
export const UpdateResourceSecretsByIdRequestBody$inboundSchema = z.object({
    secrets: z.array(z.lazy(() => UpdateResourceSecretsByIdSecrets$inboundSchema)),
    partial: z.boolean().optional(),
});
/** @internal */
export const UpdateResourceSecretsByIdRequestBody$outboundSchema = z.object({
    secrets: z.array(z.lazy(() => UpdateResourceSecretsByIdSecrets$outboundSchema)),
    partial: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateResourceSecretsByIdRequestBody$;
(function (UpdateResourceSecretsByIdRequestBody$) {
    /** @deprecated use `UpdateResourceSecretsByIdRequestBody$inboundSchema` instead. */
    UpdateResourceSecretsByIdRequestBody$.inboundSchema = UpdateResourceSecretsByIdRequestBody$inboundSchema;
    /** @deprecated use `UpdateResourceSecretsByIdRequestBody$outboundSchema` instead. */
    UpdateResourceSecretsByIdRequestBody$.outboundSchema = UpdateResourceSecretsByIdRequestBody$outboundSchema;
})(UpdateResourceSecretsByIdRequestBody$ || (UpdateResourceSecretsByIdRequestBody$ = {}));
export function updateResourceSecretsByIdRequestBodyToJSON(updateResourceSecretsByIdRequestBody) {
    return JSON.stringify(UpdateResourceSecretsByIdRequestBody$outboundSchema.parse(updateResourceSecretsByIdRequestBody));
}
export function updateResourceSecretsByIdRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateResourceSecretsByIdRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateResourceSecretsByIdRequestBody' from JSON`);
}
/** @internal */
export const UpdateResourceSecretsByIdRequest$inboundSchema = z.object({
    integrationConfigurationId: z.string(),
    resourceId: z.string(),
    RequestBody: z.lazy(() => UpdateResourceSecretsByIdRequestBody$inboundSchema)
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const UpdateResourceSecretsByIdRequest$outboundSchema = z.object({
    integrationConfigurationId: z.string(),
    resourceId: z.string(),
    requestBody: z.lazy(() => UpdateResourceSecretsByIdRequestBody$outboundSchema)
        .optional(),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateResourceSecretsByIdRequest$;
(function (UpdateResourceSecretsByIdRequest$) {
    /** @deprecated use `UpdateResourceSecretsByIdRequest$inboundSchema` instead. */
    UpdateResourceSecretsByIdRequest$.inboundSchema = UpdateResourceSecretsByIdRequest$inboundSchema;
    /** @deprecated use `UpdateResourceSecretsByIdRequest$outboundSchema` instead. */
    UpdateResourceSecretsByIdRequest$.outboundSchema = UpdateResourceSecretsByIdRequest$outboundSchema;
})(UpdateResourceSecretsByIdRequest$ || (UpdateResourceSecretsByIdRequest$ = {}));
export function updateResourceSecretsByIdRequestToJSON(updateResourceSecretsByIdRequest) {
    return JSON.stringify(UpdateResourceSecretsByIdRequest$outboundSchema.parse(updateResourceSecretsByIdRequest));
}
export function updateResourceSecretsByIdRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateResourceSecretsByIdRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateResourceSecretsByIdRequest' from JSON`);
}
//# sourceMappingURL=updateresourcesecretsbyidop.js.map