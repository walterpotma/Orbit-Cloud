/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
export const GetEdgeConfigsType = {
    Flags: "flags",
};
/** @internal */
export const GetEdgeConfigsRequest$inboundSchema = z.object({
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/** @internal */
export const GetEdgeConfigsRequest$outboundSchema = z.object({
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetEdgeConfigsRequest$;
(function (GetEdgeConfigsRequest$) {
    /** @deprecated use `GetEdgeConfigsRequest$inboundSchema` instead. */
    GetEdgeConfigsRequest$.inboundSchema = GetEdgeConfigsRequest$inboundSchema;
    /** @deprecated use `GetEdgeConfigsRequest$outboundSchema` instead. */
    GetEdgeConfigsRequest$.outboundSchema = GetEdgeConfigsRequest$outboundSchema;
})(GetEdgeConfigsRequest$ || (GetEdgeConfigsRequest$ = {}));
export function getEdgeConfigsRequestToJSON(getEdgeConfigsRequest) {
    return JSON.stringify(GetEdgeConfigsRequest$outboundSchema.parse(getEdgeConfigsRequest));
}
export function getEdgeConfigsRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetEdgeConfigsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetEdgeConfigsRequest' from JSON`);
}
/** @internal */
export const Transfer$inboundSchema = z.object({
    fromAccountId: z.string(),
    startedAt: z.number(),
    doneAt: z.nullable(z.number()),
});
/** @internal */
export const Transfer$outboundSchema = z.object({
    fromAccountId: z.string(),
    startedAt: z.number(),
    doneAt: z.nullable(z.number()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Transfer$;
(function (Transfer$) {
    /** @deprecated use `Transfer$inboundSchema` instead. */
    Transfer$.inboundSchema = Transfer$inboundSchema;
    /** @deprecated use `Transfer$outboundSchema` instead. */
    Transfer$.outboundSchema = Transfer$outboundSchema;
})(Transfer$ || (Transfer$ = {}));
export function transferToJSON(transfer) {
    return JSON.stringify(Transfer$outboundSchema.parse(transfer));
}
export function transferFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Transfer$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Transfer' from JSON`);
}
/** @internal */
export const Schema$inboundSchema = z
    .object({});
/** @internal */
export const Schema$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Schema$;
(function (Schema$) {
    /** @deprecated use `Schema$inboundSchema` instead. */
    Schema$.inboundSchema = Schema$inboundSchema;
    /** @deprecated use `Schema$outboundSchema` instead. */
    Schema$.outboundSchema = Schema$outboundSchema;
})(Schema$ || (Schema$ = {}));
export function schemaToJSON(schema) {
    return JSON.stringify(Schema$outboundSchema.parse(schema));
}
export function schemaFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Schema$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Schema' from JSON`);
}
/** @internal */
export const GetEdgeConfigsType$inboundSchema = z.nativeEnum(GetEdgeConfigsType);
/** @internal */
export const GetEdgeConfigsType$outboundSchema = GetEdgeConfigsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetEdgeConfigsType$;
(function (GetEdgeConfigsType$) {
    /** @deprecated use `GetEdgeConfigsType$inboundSchema` instead. */
    GetEdgeConfigsType$.inboundSchema = GetEdgeConfigsType$inboundSchema;
    /** @deprecated use `GetEdgeConfigsType$outboundSchema` instead. */
    GetEdgeConfigsType$.outboundSchema = GetEdgeConfigsType$outboundSchema;
})(GetEdgeConfigsType$ || (GetEdgeConfigsType$ = {}));
/** @internal */
export const Purpose$inboundSchema = z.object({
    type: GetEdgeConfigsType$inboundSchema,
    projectId: z.string(),
});
/** @internal */
export const Purpose$outboundSchema = z.object({
    type: GetEdgeConfigsType$outboundSchema,
    projectId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Purpose$;
(function (Purpose$) {
    /** @deprecated use `Purpose$inboundSchema` instead. */
    Purpose$.inboundSchema = Purpose$inboundSchema;
    /** @deprecated use `Purpose$outboundSchema` instead. */
    Purpose$.outboundSchema = Purpose$outboundSchema;
})(Purpose$ || (Purpose$ = {}));
export function purposeToJSON(purpose) {
    return JSON.stringify(Purpose$outboundSchema.parse(purpose));
}
export function purposeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Purpose$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Purpose' from JSON`);
}
/** @internal */
export const GetEdgeConfigsResponseBody$inboundSchema = z.object({
    id: z.string().optional(),
    createdAt: z.number().optional(),
    ownerId: z.string().optional(),
    slug: z.string().optional(),
    updatedAt: z.number().optional(),
    digest: z.string().optional(),
    transfer: z.lazy(() => Transfer$inboundSchema).optional(),
    schema: z.lazy(() => Schema$inboundSchema).optional(),
    purpose: z.lazy(() => Purpose$inboundSchema).optional(),
    sizeInBytes: z.number(),
    itemCount: z.number(),
});
/** @internal */
export const GetEdgeConfigsResponseBody$outboundSchema = z.object({
    id: z.string().optional(),
    createdAt: z.number().optional(),
    ownerId: z.string().optional(),
    slug: z.string().optional(),
    updatedAt: z.number().optional(),
    digest: z.string().optional(),
    transfer: z.lazy(() => Transfer$outboundSchema).optional(),
    schema: z.lazy(() => Schema$outboundSchema).optional(),
    purpose: z.lazy(() => Purpose$outboundSchema).optional(),
    sizeInBytes: z.number(),
    itemCount: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetEdgeConfigsResponseBody$;
(function (GetEdgeConfigsResponseBody$) {
    /** @deprecated use `GetEdgeConfigsResponseBody$inboundSchema` instead. */
    GetEdgeConfigsResponseBody$.inboundSchema = GetEdgeConfigsResponseBody$inboundSchema;
    /** @deprecated use `GetEdgeConfigsResponseBody$outboundSchema` instead. */
    GetEdgeConfigsResponseBody$.outboundSchema = GetEdgeConfigsResponseBody$outboundSchema;
})(GetEdgeConfigsResponseBody$ || (GetEdgeConfigsResponseBody$ = {}));
export function getEdgeConfigsResponseBodyToJSON(getEdgeConfigsResponseBody) {
    return JSON.stringify(GetEdgeConfigsResponseBody$outboundSchema.parse(getEdgeConfigsResponseBody));
}
export function getEdgeConfigsResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetEdgeConfigsResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetEdgeConfigsResponseBody' from JSON`);
}
//# sourceMappingURL=getedgeconfigsop.js.map