/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
/** @internal */
export const GetAccountInfoRequest$inboundSchema = z.object({
    integrationConfigurationId: z.string(),
});
/** @internal */
export const GetAccountInfoRequest$outboundSchema = z.object({
    integrationConfigurationId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetAccountInfoRequest$;
(function (GetAccountInfoRequest$) {
    /** @deprecated use `GetAccountInfoRequest$inboundSchema` instead. */
    GetAccountInfoRequest$.inboundSchema = GetAccountInfoRequest$inboundSchema;
    /** @deprecated use `GetAccountInfoRequest$outboundSchema` instead. */
    GetAccountInfoRequest$.outboundSchema = GetAccountInfoRequest$outboundSchema;
})(GetAccountInfoRequest$ || (GetAccountInfoRequest$ = {}));
export function getAccountInfoRequestToJSON(getAccountInfoRequest) {
    return JSON.stringify(GetAccountInfoRequest$outboundSchema.parse(getAccountInfoRequest));
}
export function getAccountInfoRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetAccountInfoRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetAccountInfoRequest' from JSON`);
}
/** @internal */
export const Contact$inboundSchema = z.object({
    email: z.string(),
    name: z.string().optional(),
});
/** @internal */
export const Contact$outboundSchema = z.object({
    email: z.string(),
    name: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Contact$;
(function (Contact$) {
    /** @deprecated use `Contact$inboundSchema` instead. */
    Contact$.inboundSchema = Contact$inboundSchema;
    /** @deprecated use `Contact$outboundSchema` instead. */
    Contact$.outboundSchema = Contact$outboundSchema;
})(Contact$ || (Contact$ = {}));
export function contactToJSON(contact) {
    return JSON.stringify(Contact$outboundSchema.parse(contact));
}
export function contactFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Contact$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Contact' from JSON`);
}
/** @internal */
export const GetAccountInfoResponseBody$inboundSchema = z.object({
    name: z.string().optional(),
    url: z.string(),
    contact: z.nullable(z.lazy(() => Contact$inboundSchema)),
});
/** @internal */
export const GetAccountInfoResponseBody$outboundSchema = z.object({
    name: z.string().optional(),
    url: z.string(),
    contact: z.nullable(z.lazy(() => Contact$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetAccountInfoResponseBody$;
(function (GetAccountInfoResponseBody$) {
    /** @deprecated use `GetAccountInfoResponseBody$inboundSchema` instead. */
    GetAccountInfoResponseBody$.inboundSchema = GetAccountInfoResponseBody$inboundSchema;
    /** @deprecated use `GetAccountInfoResponseBody$outboundSchema` instead. */
    GetAccountInfoResponseBody$.outboundSchema = GetAccountInfoResponseBody$outboundSchema;
})(GetAccountInfoResponseBody$ || (GetAccountInfoResponseBody$ = {}));
export function getAccountInfoResponseBodyToJSON(getAccountInfoResponseBody) {
    return JSON.stringify(GetAccountInfoResponseBody$outboundSchema.parse(getAccountInfoResponseBody));
}
export function getAccountInfoResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetAccountInfoResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetAccountInfoResponseBody' from JSON`);
}
//# sourceMappingURL=getaccountinfoop.js.map