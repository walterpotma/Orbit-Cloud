/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ACLAction$inboundSchema, ACLAction$outboundSchema, } from "./aclaction.js";
import { Pagination$inboundSchema, Pagination$outboundSchema, } from "./pagination.js";
/**
 * Specifies whether PRs from Git forks should require a team member's authorization before it can be deployed
 */
export const GitForkProtection = {
    One: "1",
    Zero: "0",
};
/**
 * Filter results by projects with elastic concurrency enabled
 */
export const ElasticConcurrencyEnabled = {
    One: "1",
    Zero: "0",
};
/**
 * Sort results by elastic concurrency status. desc = enabled projects first, asc = disabled projects first
 */
export const SortByElasticConcurrency = {
    Desc: "desc",
    Asc: "asc",
};
export const GetProjectsEnvId2 = {
    Preview: "preview",
    Production: "production",
};
export const GetProjectsTarget2 = {
    Production: "production",
    Preview: "preview",
    Development: "development",
};
export const GetProjectsTarget1 = {
    Production: "production",
    Preview: "preview",
    Development: "development",
};
export const GetProjectsType = {
    System: "system",
    Encrypted: "encrypted",
    Plain: "plain",
    Sensitive: "sensitive",
    Secret: "secret",
};
export const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv15Type = {
    FlagsConnectionString: "flags-connection-string",
};
export const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv14Type = {
    IntegrationStoreSecret: "integration-store-secret",
};
export const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv13Type = {
    PostgresUrlNoSsl: "postgres-url-no-ssl",
};
export const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv12Type = {
    PostgresDatabase: "postgres-database",
};
export const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv11Type = {
    PostgresPassword: "postgres-password",
};
export const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv10Type = {
    PostgresHost: "postgres-host",
};
export const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv9Type = {
    PostgresUser: "postgres-user",
};
export const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType = {
    PostgresPrismaUrl: "postgres-prisma-url",
};
export const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsType = {
    PostgresUrlNonPooling: "postgres-url-non-pooling",
};
export const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyType = {
    PostgresUrl: "postgres-url",
};
export const GetProjectsContentHintProjectsResponse200ApplicationJSONType = {
    BlobReadWriteToken: "blob-read-write-token",
};
export const GetProjectsContentHintProjectsResponse200Type = {
    RedisRestApiReadOnlyToken: "redis-rest-api-read-only-token",
};
export const GetProjectsContentHintProjectsResponseType = {
    RedisRestApiToken: "redis-rest-api-token",
};
export const GetProjectsContentHintProjectsType = {
    RedisRestApiUrl: "redis-rest-api-url",
};
export const GetProjectsContentHintType = {
    RedisUrl: "redis-url",
};
export const GetProjectsProjectsResponse200ApplicationJSONResponseBodyType = {
    FlagsSecret: "flags-secret",
};
/**
 * The type of environment (production, preview, or development)
 */
export const GetProjectsProjectsType = {
    Preview: "preview",
    Production: "production",
    Development: "development",
};
/**
 * The type of matching to perform
 */
export const GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsCustomEnvironmentsType = {
    EndsWith: "endsWith",
    StartsWith: "startsWith",
    Equals: "equals",
};
export const GetProjectsFramework = {
    Blitzjs: "blitzjs",
    Nextjs: "nextjs",
    Gatsby: "gatsby",
    Remix: "remix",
    ReactRouter: "react-router",
    Astro: "astro",
    Hexo: "hexo",
    Eleventy: "eleventy",
    Docusaurus2: "docusaurus-2",
    Docusaurus: "docusaurus",
    Preact: "preact",
    Solidstart1: "solidstart-1",
    Solidstart: "solidstart",
    Dojo: "dojo",
    Ember: "ember",
    Vue: "vue",
    Scully: "scully",
    IonicAngular: "ionic-angular",
    Angular: "angular",
    Polymer: "polymer",
    Svelte: "svelte",
    Sveltekit: "sveltekit",
    Sveltekit1: "sveltekit-1",
    IonicReact: "ionic-react",
    CreateReactApp: "create-react-app",
    Gridsome: "gridsome",
    Umijs: "umijs",
    Sapper: "sapper",
    Saber: "saber",
    Stencil: "stencil",
    Nuxtjs: "nuxtjs",
    Redwoodjs: "redwoodjs",
    Hugo: "hugo",
    Jekyll: "jekyll",
    Brunch: "brunch",
    Middleman: "middleman",
    Zola: "zola",
    Hydrogen: "hydrogen",
    Vite: "vite",
    Vitepress: "vitepress",
    Vuepress: "vuepress",
    Parcel: "parcel",
    Fastapi: "fastapi",
    Fasthtml: "fasthtml",
    SanityV3: "sanity-v3",
    Sanity: "sanity",
    Storybook: "storybook",
    Nitro: "nitro",
    Hono: "hono",
    Express: "express",
    Xmcp: "xmcp",
};
/**
 * The type of matching to perform
 */
export const GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsLatestDeploymentsType = {
    EndsWith: "endsWith",
    StartsWith: "startsWith",
    Equals: "equals",
};
export const GetProjectsChecksConclusion = {
    Succeeded: "succeeded",
    Failed: "failed",
    Skipped: "skipped",
    Canceled: "canceled",
};
export const GetProjectsChecksState = {
    Registered: "registered",
    Running: "running",
    Completed: "completed",
};
export const GetProjectsPlan = {
    Pro: "pro",
    Enterprise: "enterprise",
    Hobby: "hobby",
};
export const GetProjectsReadyState = {
    Building: "BUILDING",
    Error: "ERROR",
    Initializing: "INITIALIZING",
    Queued: "QUEUED",
    Ready: "READY",
    Canceled: "CANCELED",
};
export const GetProjectsReadySubstate = {
    Staged: "STAGED",
    Rolling: "ROLLING",
    Promoted: "PROMOTED",
};
export const GetProjectsProjectsResponseType = {
    Lambdas: "LAMBDAS",
};
export const GetProjectsLinkProjectsResponse200ApplicationJSONType = {
    Bitbucket: "bitbucket",
};
export const GetProjectsLinkProjectsResponse200Type = {
    Gitlab: "gitlab",
};
export const GetProjectsLinkProjectsResponseType = {
    GithubCustomHost: "github-custom-host",
};
export const GetProjectsLinkProjectsType = {
    GithubLimited: "github-limited",
};
export const GetProjectsLinkType = {
    Github: "github",
};
export const GetProjectsNodeVersion = {
    TwentyTwoDotX: "22.x",
    TwentyDotX: "20.x",
    EighteenDotX: "18.x",
    SixteenDotX: "16.x",
    FourteenDotX: "14.x",
    TwelveDotX: "12.x",
    TenDotX: "10.x",
    EightDot10DotX: "8.10.x",
};
export const GetProjectsFunctionDefaultMemoryType = {
    StandardLegacy: "standard_legacy",
    Standard: "standard",
    Performance: "performance",
};
export const GetProjectsBuildMachineType = {
    Enhanced: "enhanced",
    Turbo: "turbo",
};
export const GetProjectsProjectsFunctionDefaultMemoryType = {
    StandardLegacy: "standard_legacy",
    Standard: "standard",
    Performance: "performance",
};
export const GetProjectsProjectsBuildMachineType = {
    Enhanced: "enhanced",
    Turbo: "turbo",
};
export const GetProjectsDeploymentType = {
    Preview: "preview",
    All: "all",
    ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews",
    AllExceptCustomDomains: "all_except_custom_domains",
};
/**
 * The type of matching to perform
 */
export const GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsType = {
    EndsWith: "endsWith",
    StartsWith: "startsWith",
    Equals: "equals",
};
export const GetProjectsProjectsChecksConclusion = {
    Succeeded: "succeeded",
    Failed: "failed",
    Skipped: "skipped",
    Canceled: "canceled",
};
export const GetProjectsProjectsChecksState = {
    Registered: "registered",
    Running: "running",
    Completed: "completed",
};
export const GetProjectsProjectsPlan = {
    Pro: "pro",
    Enterprise: "enterprise",
    Hobby: "hobby",
};
export const GetProjectsProjectsReadyState = {
    Building: "BUILDING",
    Error: "ERROR",
    Initializing: "INITIALIZING",
    Queued: "QUEUED",
    Ready: "READY",
    Canceled: "CANCELED",
};
export const GetProjectsProjectsReadySubstate = {
    Staged: "STAGED",
    Rolling: "ROLLING",
    Promoted: "PROMOTED",
};
export const GetProjectsProjectsResponse200Type = {
    Lambdas: "LAMBDAS",
};
export const GetProjectsJobStatus = {
    Succeeded: "succeeded",
    Failed: "failed",
    Skipped: "skipped",
    Pending: "pending",
    InProgress: "in-progress",
};
export const GetProjectsProjectsResponse200ApplicationJSONType = {
    Promote: "promote",
    Rollback: "rollback",
};
export const GetProjectsProtectionBypassProjectsScope = {
    AutomationBypass: "automation-bypass",
};
export const GetProjectsProtectionBypassScope = {
    IntegrationAutomationBypass: "integration-automation-bypass",
};
export const GetProjectsTrustedIpsProjectsDeploymentType = {
    Preview: "preview",
    Production: "production",
    All: "all",
    ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews",
    AllExceptCustomDomains: "all_except_custom_domains",
};
export const GetProjectsTrustedIpsDeploymentType = {
    Preview: "preview",
    Production: "production",
    All: "all",
    ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews",
    AllExceptCustomDomains: "all_except_custom_domains",
};
export const GetProjectsTrustedIpsProtectionMode = {
    Additional: "additional",
    Exclusive: "exclusive",
};
/**
 * Whether the Vercel bot should automatically create GitHub deployments https://docs.github.com/en/rest/deployments/deployments#about-deployments NOTE: repository-dispatch events should be used instead
 */
export const GetProjectsCreateDeployments = {
    Enabled: "enabled",
    Disabled: "disabled",
};
export const GetProjectsProjectsResponse200Action = {
    Log: "log",
    Challenge: "challenge",
    Deny: "deny",
};
export const GetProjectsProjectsAction = {
    Log: "log",
    Challenge: "challenge",
    Deny: "deny",
};
export const GetProjectsProjectsResponseAction = {
    Log: "log",
    Challenge: "challenge",
    Deny: "deny",
};
/**
 * - team: `https://oidc.vercel.com/[team_slug]` - global: `https://oidc.vercel.com`
 */
export const GetProjectsIssuerMode = {
    Team: "team",
    Global: "global",
};
export const GetProjectsTier = {
    Standard: "standard",
    Advanced: "advanced",
    Critical: "critical",
};
export const GetProjectsAction = {
    Blocked: "blocked",
};
export const GetProjectsBlockHistoryProjectsResponse200Action = {
    RouteUnblocked: "route-unblocked",
};
export const GetProjectsHasProjectsResponse200Type = {
    Host: "host",
};
export const GetProjectsHasProjectsResponseType = {
    Header: "header",
};
export const GetProjectsHasProjectsKey = {
    XVercelIpCountry: "x-vercel-ip-country",
};
export const GetProjectsRouteProjectsAction = {
    BlockLegalCwc: "block_legal_cwc",
};
export const GetProjectsBlockHistoryProjectsResponseAction = {
    RouteBlocked: "route-blocked",
};
export const GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyType = {
    Host: "host",
};
export const GetProjectsHasProjectsResponse200ApplicationJSONType = {
    Header: "header",
};
export const GetProjectsHasProjectsResponseKey = {
    XVercelIpCountry: "x-vercel-ip-country",
};
export const GetProjectsRouteAction = {
    BlockLegalCwc: "block_legal_cwc",
};
export const GetProjectsBlockHistoryProjectsAction = {
    Unblocked: "unblocked",
};
export const GetProjectsBlockHistoryAction = {
    Blocked: "blocked",
};
export const GetProjectsHasProjectsType = {
    Host: "host",
};
export const GetProjectsHasType = {
    Header: "header",
};
export const GetProjectsHasKey = {
    XVercelIpCountry: "x-vercel-ip-country",
};
export const GetProjectsInternalRoutesAction = {
    BlockLegalCwc: "block_legal_cwc",
};
/** @internal */
export const GitForkProtection$inboundSchema = z.nativeEnum(GitForkProtection);
/** @internal */
export const GitForkProtection$outboundSchema = GitForkProtection$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GitForkProtection$;
(function (GitForkProtection$) {
    /** @deprecated use `GitForkProtection$inboundSchema` instead. */
    GitForkProtection$.inboundSchema = GitForkProtection$inboundSchema;
    /** @deprecated use `GitForkProtection$outboundSchema` instead. */
    GitForkProtection$.outboundSchema = GitForkProtection$outboundSchema;
})(GitForkProtection$ || (GitForkProtection$ = {}));
/** @internal */
export const ElasticConcurrencyEnabled$inboundSchema = z.nativeEnum(ElasticConcurrencyEnabled);
/** @internal */
export const ElasticConcurrencyEnabled$outboundSchema = ElasticConcurrencyEnabled$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ElasticConcurrencyEnabled$;
(function (ElasticConcurrencyEnabled$) {
    /** @deprecated use `ElasticConcurrencyEnabled$inboundSchema` instead. */
    ElasticConcurrencyEnabled$.inboundSchema = ElasticConcurrencyEnabled$inboundSchema;
    /** @deprecated use `ElasticConcurrencyEnabled$outboundSchema` instead. */
    ElasticConcurrencyEnabled$.outboundSchema = ElasticConcurrencyEnabled$outboundSchema;
})(ElasticConcurrencyEnabled$ || (ElasticConcurrencyEnabled$ = {}));
/** @internal */
export const SortByElasticConcurrency$inboundSchema = z.nativeEnum(SortByElasticConcurrency);
/** @internal */
export const SortByElasticConcurrency$outboundSchema = SortByElasticConcurrency$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SortByElasticConcurrency$;
(function (SortByElasticConcurrency$) {
    /** @deprecated use `SortByElasticConcurrency$inboundSchema` instead. */
    SortByElasticConcurrency$.inboundSchema = SortByElasticConcurrency$inboundSchema;
    /** @deprecated use `SortByElasticConcurrency$outboundSchema` instead. */
    SortByElasticConcurrency$.outboundSchema = SortByElasticConcurrency$outboundSchema;
})(SortByElasticConcurrency$ || (SortByElasticConcurrency$ = {}));
/** @internal */
export const GetProjectsRequest$inboundSchema = z.object({
    from: z.string().optional(),
    gitForkProtection: GitForkProtection$inboundSchema.optional(),
    limit: z.string().optional(),
    search: z.string().optional(),
    repo: z.string().optional(),
    repoId: z.string().optional(),
    repoUrl: z.string().optional(),
    excludeRepos: z.string().optional(),
    edgeConfigId: z.string().optional(),
    edgeConfigTokenId: z.string().optional(),
    deprecated: z.boolean().optional(),
    elasticConcurrencyEnabled: ElasticConcurrencyEnabled$inboundSchema.optional(),
    sortByElasticConcurrency: SortByElasticConcurrency$inboundSchema.optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/** @internal */
export const GetProjectsRequest$outboundSchema = z.object({
    from: z.string().optional(),
    gitForkProtection: GitForkProtection$outboundSchema.optional(),
    limit: z.string().optional(),
    search: z.string().optional(),
    repo: z.string().optional(),
    repoId: z.string().optional(),
    repoUrl: z.string().optional(),
    excludeRepos: z.string().optional(),
    edgeConfigId: z.string().optional(),
    edgeConfigTokenId: z.string().optional(),
    deprecated: z.boolean().optional(),
    elasticConcurrencyEnabled: ElasticConcurrencyEnabled$outboundSchema
        .optional(),
    sortByElasticConcurrency: SortByElasticConcurrency$outboundSchema.optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsRequest$;
(function (GetProjectsRequest$) {
    /** @deprecated use `GetProjectsRequest$inboundSchema` instead. */
    GetProjectsRequest$.inboundSchema = GetProjectsRequest$inboundSchema;
    /** @deprecated use `GetProjectsRequest$outboundSchema` instead. */
    GetProjectsRequest$.outboundSchema = GetProjectsRequest$outboundSchema;
})(GetProjectsRequest$ || (GetProjectsRequest$ = {}));
export function getProjectsRequestToJSON(getProjectsRequest) {
    return JSON.stringify(GetProjectsRequest$outboundSchema.parse(getProjectsRequest));
}
export function getProjectsRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsRequest' from JSON`);
}
/** @internal */
export const GetProjectsAnalytics$inboundSchema = z.object({
    id: z.string(),
    canceledAt: z.nullable(z.number()).optional(),
    disabledAt: z.number(),
    enabledAt: z.number(),
    paidAt: z.number().optional(),
    sampleRatePercent: z.nullable(z.number()).optional(),
    spendLimitInDollars: z.nullable(z.number()).optional(),
});
/** @internal */
export const GetProjectsAnalytics$outboundSchema = z.object({
    id: z.string(),
    canceledAt: z.nullable(z.number()).optional(),
    disabledAt: z.number(),
    enabledAt: z.number(),
    paidAt: z.number().optional(),
    sampleRatePercent: z.nullable(z.number()).optional(),
    spendLimitInDollars: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsAnalytics$;
(function (GetProjectsAnalytics$) {
    /** @deprecated use `GetProjectsAnalytics$inboundSchema` instead. */
    GetProjectsAnalytics$.inboundSchema = GetProjectsAnalytics$inboundSchema;
    /** @deprecated use `GetProjectsAnalytics$outboundSchema` instead. */
    GetProjectsAnalytics$.outboundSchema = GetProjectsAnalytics$outboundSchema;
})(GetProjectsAnalytics$ || (GetProjectsAnalytics$ = {}));
export function getProjectsAnalyticsToJSON(getProjectsAnalytics) {
    return JSON.stringify(GetProjectsAnalytics$outboundSchema.parse(getProjectsAnalytics));
}
export function getProjectsAnalyticsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsAnalytics$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsAnalytics' from JSON`);
}
/** @internal */
export const GetProjectsSpeedInsights$inboundSchema = z.object({
    id: z.string(),
    enabledAt: z.number().optional(),
    disabledAt: z.number().optional(),
    canceledAt: z.number().optional(),
    hasData: z.boolean().optional(),
    paidAt: z.number().optional(),
});
/** @internal */
export const GetProjectsSpeedInsights$outboundSchema = z.object({
    id: z.string(),
    enabledAt: z.number().optional(),
    disabledAt: z.number().optional(),
    canceledAt: z.number().optional(),
    hasData: z.boolean().optional(),
    paidAt: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsSpeedInsights$;
(function (GetProjectsSpeedInsights$) {
    /** @deprecated use `GetProjectsSpeedInsights$inboundSchema` instead. */
    GetProjectsSpeedInsights$.inboundSchema = GetProjectsSpeedInsights$inboundSchema;
    /** @deprecated use `GetProjectsSpeedInsights$outboundSchema` instead. */
    GetProjectsSpeedInsights$.outboundSchema = GetProjectsSpeedInsights$outboundSchema;
})(GetProjectsSpeedInsights$ || (GetProjectsSpeedInsights$ = {}));
export function getProjectsSpeedInsightsToJSON(getProjectsSpeedInsights) {
    return JSON.stringify(GetProjectsSpeedInsights$outboundSchema.parse(getProjectsSpeedInsights));
}
export function getProjectsSpeedInsightsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsSpeedInsights$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsSpeedInsights' from JSON`);
}
/** @internal */
export const GetProjectsEnvId2$inboundSchema = z.nativeEnum(GetProjectsEnvId2);
/** @internal */
export const GetProjectsEnvId2$outboundSchema = GetProjectsEnvId2$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsEnvId2$;
(function (GetProjectsEnvId2$) {
    /** @deprecated use `GetProjectsEnvId2$inboundSchema` instead. */
    GetProjectsEnvId2$.inboundSchema = GetProjectsEnvId2$inboundSchema;
    /** @deprecated use `GetProjectsEnvId2$outboundSchema` instead. */
    GetProjectsEnvId2$.outboundSchema = GetProjectsEnvId2$outboundSchema;
})(GetProjectsEnvId2$ || (GetProjectsEnvId2$ = {}));
/** @internal */
export const GetProjectsEnvId$inboundSchema = z.union([z.string(), GetProjectsEnvId2$inboundSchema]);
/** @internal */
export const GetProjectsEnvId$outboundSchema = z.union([z.string(), GetProjectsEnvId2$outboundSchema]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsEnvId$;
(function (GetProjectsEnvId$) {
    /** @deprecated use `GetProjectsEnvId$inboundSchema` instead. */
    GetProjectsEnvId$.inboundSchema = GetProjectsEnvId$inboundSchema;
    /** @deprecated use `GetProjectsEnvId$outboundSchema` instead. */
    GetProjectsEnvId$.outboundSchema = GetProjectsEnvId$outboundSchema;
})(GetProjectsEnvId$ || (GetProjectsEnvId$ = {}));
export function getProjectsEnvIdToJSON(getProjectsEnvId) {
    return JSON.stringify(GetProjectsEnvId$outboundSchema.parse(getProjectsEnvId));
}
export function getProjectsEnvIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsEnvId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsEnvId' from JSON`);
}
/** @internal */
export const GetProjectsAws$inboundSchema = z.object({
    subnetIds: z.array(z.string()),
    securityGroupId: z.string(),
});
/** @internal */
export const GetProjectsAws$outboundSchema = z.object({
    subnetIds: z.array(z.string()),
    securityGroupId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsAws$;
(function (GetProjectsAws$) {
    /** @deprecated use `GetProjectsAws$inboundSchema` instead. */
    GetProjectsAws$.inboundSchema = GetProjectsAws$inboundSchema;
    /** @deprecated use `GetProjectsAws$outboundSchema` instead. */
    GetProjectsAws$.outboundSchema = GetProjectsAws$outboundSchema;
})(GetProjectsAws$ || (GetProjectsAws$ = {}));
export function getProjectsAwsToJSON(getProjectsAws) {
    return JSON.stringify(GetProjectsAws$outboundSchema.parse(getProjectsAws));
}
export function getProjectsAwsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsAws$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsAws' from JSON`);
}
/** @internal */
export const GetProjectsConnectConfigurations$inboundSchema = z.object({
    envId: z.union([z.string(), GetProjectsEnvId2$inboundSchema]),
    connectConfigurationId: z.string(),
    dc: z.string().optional(),
    passive: z.boolean(),
    buildsEnabled: z.boolean(),
    aws: z.lazy(() => GetProjectsAws$inboundSchema).optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
});
/** @internal */
export const GetProjectsConnectConfigurations$outboundSchema = z.object({
    envId: z.union([z.string(), GetProjectsEnvId2$outboundSchema]),
    connectConfigurationId: z.string(),
    dc: z.string().optional(),
    passive: z.boolean(),
    buildsEnabled: z.boolean(),
    aws: z.lazy(() => GetProjectsAws$outboundSchema).optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsConnectConfigurations$;
(function (GetProjectsConnectConfigurations$) {
    /** @deprecated use `GetProjectsConnectConfigurations$inboundSchema` instead. */
    GetProjectsConnectConfigurations$.inboundSchema = GetProjectsConnectConfigurations$inboundSchema;
    /** @deprecated use `GetProjectsConnectConfigurations$outboundSchema` instead. */
    GetProjectsConnectConfigurations$.outboundSchema = GetProjectsConnectConfigurations$outboundSchema;
})(GetProjectsConnectConfigurations$ || (GetProjectsConnectConfigurations$ = {}));
export function getProjectsConnectConfigurationsToJSON(getProjectsConnectConfigurations) {
    return JSON.stringify(GetProjectsConnectConfigurations$outboundSchema.parse(getProjectsConnectConfigurations));
}
export function getProjectsConnectConfigurationsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsConnectConfigurations$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsConnectConfigurations' from JSON`);
}
/** @internal */
export const GetProjectsDefinitions$inboundSchema = z.object({
    host: z.string(),
    path: z.string(),
    schedule: z.string(),
});
/** @internal */
export const GetProjectsDefinitions$outboundSchema = z.object({
    host: z.string(),
    path: z.string(),
    schedule: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsDefinitions$;
(function (GetProjectsDefinitions$) {
    /** @deprecated use `GetProjectsDefinitions$inboundSchema` instead. */
    GetProjectsDefinitions$.inboundSchema = GetProjectsDefinitions$inboundSchema;
    /** @deprecated use `GetProjectsDefinitions$outboundSchema` instead. */
    GetProjectsDefinitions$.outboundSchema = GetProjectsDefinitions$outboundSchema;
})(GetProjectsDefinitions$ || (GetProjectsDefinitions$ = {}));
export function getProjectsDefinitionsToJSON(getProjectsDefinitions) {
    return JSON.stringify(GetProjectsDefinitions$outboundSchema.parse(getProjectsDefinitions));
}
export function getProjectsDefinitionsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsDefinitions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsDefinitions' from JSON`);
}
/** @internal */
export const GetProjectsCrons$inboundSchema = z.object({
    enabledAt: z.number(),
    disabledAt: z.nullable(z.number()),
    updatedAt: z.number(),
    deploymentId: z.nullable(z.string()),
    definitions: z.array(z.lazy(() => GetProjectsDefinitions$inboundSchema)),
});
/** @internal */
export const GetProjectsCrons$outboundSchema = z.object({
    enabledAt: z.number(),
    disabledAt: z.nullable(z.number()),
    updatedAt: z.number(),
    deploymentId: z.nullable(z.string()),
    definitions: z.array(z.lazy(() => GetProjectsDefinitions$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsCrons$;
(function (GetProjectsCrons$) {
    /** @deprecated use `GetProjectsCrons$inboundSchema` instead. */
    GetProjectsCrons$.inboundSchema = GetProjectsCrons$inboundSchema;
    /** @deprecated use `GetProjectsCrons$outboundSchema` instead. */
    GetProjectsCrons$.outboundSchema = GetProjectsCrons$outboundSchema;
})(GetProjectsCrons$ || (GetProjectsCrons$ = {}));
export function getProjectsCronsToJSON(getProjectsCrons) {
    return JSON.stringify(GetProjectsCrons$outboundSchema.parse(getProjectsCrons));
}
export function getProjectsCronsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsCrons$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsCrons' from JSON`);
}
/** @internal */
export const GetProjectsDataCache$inboundSchema = z.object({
    userDisabled: z.boolean(),
    storageSizeBytes: z.nullable(z.number()).optional(),
    unlimited: z.boolean().optional(),
});
/** @internal */
export const GetProjectsDataCache$outboundSchema = z.object({
    userDisabled: z.boolean(),
    storageSizeBytes: z.nullable(z.number()).optional(),
    unlimited: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsDataCache$;
(function (GetProjectsDataCache$) {
    /** @deprecated use `GetProjectsDataCache$inboundSchema` instead. */
    GetProjectsDataCache$.inboundSchema = GetProjectsDataCache$inboundSchema;
    /** @deprecated use `GetProjectsDataCache$outboundSchema` instead. */
    GetProjectsDataCache$.outboundSchema = GetProjectsDataCache$outboundSchema;
})(GetProjectsDataCache$ || (GetProjectsDataCache$ = {}));
export function getProjectsDataCacheToJSON(getProjectsDataCache) {
    return JSON.stringify(GetProjectsDataCache$outboundSchema.parse(getProjectsDataCache));
}
export function getProjectsDataCacheFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsDataCache$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsDataCache' from JSON`);
}
/** @internal */
export const GetProjectsDeploymentExpiration$inboundSchema = z.object({
    expirationDays: z.number().optional(),
    expirationDaysProduction: z.number().optional(),
    expirationDaysCanceled: z.number().optional(),
    expirationDaysErrored: z.number().optional(),
    deploymentsToKeep: z.number().optional(),
});
/** @internal */
export const GetProjectsDeploymentExpiration$outboundSchema = z.object({
    expirationDays: z.number().optional(),
    expirationDaysProduction: z.number().optional(),
    expirationDaysCanceled: z.number().optional(),
    expirationDaysErrored: z.number().optional(),
    deploymentsToKeep: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsDeploymentExpiration$;
(function (GetProjectsDeploymentExpiration$) {
    /** @deprecated use `GetProjectsDeploymentExpiration$inboundSchema` instead. */
    GetProjectsDeploymentExpiration$.inboundSchema = GetProjectsDeploymentExpiration$inboundSchema;
    /** @deprecated use `GetProjectsDeploymentExpiration$outboundSchema` instead. */
    GetProjectsDeploymentExpiration$.outboundSchema = GetProjectsDeploymentExpiration$outboundSchema;
})(GetProjectsDeploymentExpiration$ || (GetProjectsDeploymentExpiration$ = {}));
export function getProjectsDeploymentExpirationToJSON(getProjectsDeploymentExpiration) {
    return JSON.stringify(GetProjectsDeploymentExpiration$outboundSchema.parse(getProjectsDeploymentExpiration));
}
export function getProjectsDeploymentExpirationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsDeploymentExpiration$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsDeploymentExpiration' from JSON`);
}
/** @internal */
export const GetProjectsTarget2$inboundSchema = z.nativeEnum(GetProjectsTarget2);
/** @internal */
export const GetProjectsTarget2$outboundSchema = GetProjectsTarget2$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsTarget2$;
(function (GetProjectsTarget2$) {
    /** @deprecated use `GetProjectsTarget2$inboundSchema` instead. */
    GetProjectsTarget2$.inboundSchema = GetProjectsTarget2$inboundSchema;
    /** @deprecated use `GetProjectsTarget2$outboundSchema` instead. */
    GetProjectsTarget2$.outboundSchema = GetProjectsTarget2$outboundSchema;
})(GetProjectsTarget2$ || (GetProjectsTarget2$ = {}));
/** @internal */
export const GetProjectsTarget1$inboundSchema = z.nativeEnum(GetProjectsTarget1);
/** @internal */
export const GetProjectsTarget1$outboundSchema = GetProjectsTarget1$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsTarget1$;
(function (GetProjectsTarget1$) {
    /** @deprecated use `GetProjectsTarget1$inboundSchema` instead. */
    GetProjectsTarget1$.inboundSchema = GetProjectsTarget1$inboundSchema;
    /** @deprecated use `GetProjectsTarget1$outboundSchema` instead. */
    GetProjectsTarget1$.outboundSchema = GetProjectsTarget1$outboundSchema;
})(GetProjectsTarget1$ || (GetProjectsTarget1$ = {}));
/** @internal */
export const GetProjectsTarget$inboundSchema = z.union([
    z.array(GetProjectsTarget1$inboundSchema),
    GetProjectsTarget2$inboundSchema,
]);
/** @internal */
export const GetProjectsTarget$outboundSchema = z.union([
    z.array(GetProjectsTarget1$outboundSchema),
    GetProjectsTarget2$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsTarget$;
(function (GetProjectsTarget$) {
    /** @deprecated use `GetProjectsTarget$inboundSchema` instead. */
    GetProjectsTarget$.inboundSchema = GetProjectsTarget$inboundSchema;
    /** @deprecated use `GetProjectsTarget$outboundSchema` instead. */
    GetProjectsTarget$.outboundSchema = GetProjectsTarget$outboundSchema;
})(GetProjectsTarget$ || (GetProjectsTarget$ = {}));
export function getProjectsTargetToJSON(getProjectsTarget) {
    return JSON.stringify(GetProjectsTarget$outboundSchema.parse(getProjectsTarget));
}
export function getProjectsTargetFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsTarget$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsTarget' from JSON`);
}
/** @internal */
export const GetProjectsType$inboundSchema = z.nativeEnum(GetProjectsType);
/** @internal */
export const GetProjectsType$outboundSchema = GetProjectsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsType$;
(function (GetProjectsType$) {
    /** @deprecated use `GetProjectsType$inboundSchema` instead. */
    GetProjectsType$.inboundSchema = GetProjectsType$inboundSchema;
    /** @deprecated use `GetProjectsType$outboundSchema` instead. */
    GetProjectsType$.outboundSchema = GetProjectsType$outboundSchema;
})(GetProjectsType$ || (GetProjectsType$ = {}));
/** @internal */
export const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv15Type$inboundSchema = z.nativeEnum(GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv15Type);
/** @internal */
export const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv15Type$outboundSchema = GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv15Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv15Type$;
(function (GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv15Type$) {
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv15Type$inboundSchema` instead. */
    GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv15Type$.inboundSchema = GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv15Type$inboundSchema;
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv15Type$outboundSchema` instead. */
    GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv15Type$.outboundSchema = GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv15Type$outboundSchema;
})(GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv15Type$ || (GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv15Type$ = {}));
/** @internal */
export const GetProjectsContentHint15$inboundSchema = z.object({
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv15Type$inboundSchema,
    projectId: z.string(),
});
/** @internal */
export const GetProjectsContentHint15$outboundSchema = z.object({
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv15Type$outboundSchema,
    projectId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsContentHint15$;
(function (GetProjectsContentHint15$) {
    /** @deprecated use `GetProjectsContentHint15$inboundSchema` instead. */
    GetProjectsContentHint15$.inboundSchema = GetProjectsContentHint15$inboundSchema;
    /** @deprecated use `GetProjectsContentHint15$outboundSchema` instead. */
    GetProjectsContentHint15$.outboundSchema = GetProjectsContentHint15$outboundSchema;
})(GetProjectsContentHint15$ || (GetProjectsContentHint15$ = {}));
export function getProjectsContentHint15ToJSON(getProjectsContentHint15) {
    return JSON.stringify(GetProjectsContentHint15$outboundSchema.parse(getProjectsContentHint15));
}
export function getProjectsContentHint15FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsContentHint15$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsContentHint15' from JSON`);
}
/** @internal */
export const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv14Type$inboundSchema = z.nativeEnum(GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv14Type);
/** @internal */
export const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv14Type$outboundSchema = GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv14Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv14Type$;
(function (GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv14Type$) {
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv14Type$inboundSchema` instead. */
    GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv14Type$.inboundSchema = GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv14Type$inboundSchema;
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv14Type$outboundSchema` instead. */
    GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv14Type$.outboundSchema = GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv14Type$outboundSchema;
})(GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv14Type$ || (GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv14Type$ = {}));
/** @internal */
export const GetProjectsContentHint14$inboundSchema = z.object({
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv14Type$inboundSchema,
    storeId: z.string(),
    integrationId: z.string(),
    integrationProductId: z.string(),
    integrationConfigurationId: z.string(),
});
/** @internal */
export const GetProjectsContentHint14$outboundSchema = z.object({
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv14Type$outboundSchema,
    storeId: z.string(),
    integrationId: z.string(),
    integrationProductId: z.string(),
    integrationConfigurationId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsContentHint14$;
(function (GetProjectsContentHint14$) {
    /** @deprecated use `GetProjectsContentHint14$inboundSchema` instead. */
    GetProjectsContentHint14$.inboundSchema = GetProjectsContentHint14$inboundSchema;
    /** @deprecated use `GetProjectsContentHint14$outboundSchema` instead. */
    GetProjectsContentHint14$.outboundSchema = GetProjectsContentHint14$outboundSchema;
})(GetProjectsContentHint14$ || (GetProjectsContentHint14$ = {}));
export function getProjectsContentHint14ToJSON(getProjectsContentHint14) {
    return JSON.stringify(GetProjectsContentHint14$outboundSchema.parse(getProjectsContentHint14));
}
export function getProjectsContentHint14FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsContentHint14$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsContentHint14' from JSON`);
}
/** @internal */
export const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv13Type$inboundSchema = z.nativeEnum(GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv13Type);
/** @internal */
export const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv13Type$outboundSchema = GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv13Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv13Type$;
(function (GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv13Type$) {
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv13Type$inboundSchema` instead. */
    GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv13Type$.inboundSchema = GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv13Type$inboundSchema;
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv13Type$outboundSchema` instead. */
    GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv13Type$.outboundSchema = GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv13Type$outboundSchema;
})(GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv13Type$ || (GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv13Type$ = {}));
/** @internal */
export const GetProjectsContentHint13$inboundSchema = z.object({
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv13Type$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const GetProjectsContentHint13$outboundSchema = z.object({
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv13Type$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsContentHint13$;
(function (GetProjectsContentHint13$) {
    /** @deprecated use `GetProjectsContentHint13$inboundSchema` instead. */
    GetProjectsContentHint13$.inboundSchema = GetProjectsContentHint13$inboundSchema;
    /** @deprecated use `GetProjectsContentHint13$outboundSchema` instead. */
    GetProjectsContentHint13$.outboundSchema = GetProjectsContentHint13$outboundSchema;
})(GetProjectsContentHint13$ || (GetProjectsContentHint13$ = {}));
export function getProjectsContentHint13ToJSON(getProjectsContentHint13) {
    return JSON.stringify(GetProjectsContentHint13$outboundSchema.parse(getProjectsContentHint13));
}
export function getProjectsContentHint13FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsContentHint13$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsContentHint13' from JSON`);
}
/** @internal */
export const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv12Type$inboundSchema = z.nativeEnum(GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv12Type);
/** @internal */
export const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv12Type$outboundSchema = GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv12Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv12Type$;
(function (GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv12Type$) {
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv12Type$inboundSchema` instead. */
    GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv12Type$.inboundSchema = GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv12Type$inboundSchema;
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv12Type$outboundSchema` instead. */
    GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv12Type$.outboundSchema = GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv12Type$outboundSchema;
})(GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv12Type$ || (GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv12Type$ = {}));
/** @internal */
export const GetProjectsContentHint12$inboundSchema = z.object({
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv12Type$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const GetProjectsContentHint12$outboundSchema = z.object({
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv12Type$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsContentHint12$;
(function (GetProjectsContentHint12$) {
    /** @deprecated use `GetProjectsContentHint12$inboundSchema` instead. */
    GetProjectsContentHint12$.inboundSchema = GetProjectsContentHint12$inboundSchema;
    /** @deprecated use `GetProjectsContentHint12$outboundSchema` instead. */
    GetProjectsContentHint12$.outboundSchema = GetProjectsContentHint12$outboundSchema;
})(GetProjectsContentHint12$ || (GetProjectsContentHint12$ = {}));
export function getProjectsContentHint12ToJSON(getProjectsContentHint12) {
    return JSON.stringify(GetProjectsContentHint12$outboundSchema.parse(getProjectsContentHint12));
}
export function getProjectsContentHint12FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsContentHint12$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsContentHint12' from JSON`);
}
/** @internal */
export const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv11Type$inboundSchema = z.nativeEnum(GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv11Type);
/** @internal */
export const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv11Type$outboundSchema = GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv11Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv11Type$;
(function (GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv11Type$) {
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv11Type$inboundSchema` instead. */
    GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv11Type$.inboundSchema = GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv11Type$inboundSchema;
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv11Type$outboundSchema` instead. */
    GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv11Type$.outboundSchema = GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv11Type$outboundSchema;
})(GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv11Type$ || (GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv11Type$ = {}));
/** @internal */
export const GetProjectsContentHint11$inboundSchema = z.object({
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv11Type$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const GetProjectsContentHint11$outboundSchema = z.object({
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv11Type$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsContentHint11$;
(function (GetProjectsContentHint11$) {
    /** @deprecated use `GetProjectsContentHint11$inboundSchema` instead. */
    GetProjectsContentHint11$.inboundSchema = GetProjectsContentHint11$inboundSchema;
    /** @deprecated use `GetProjectsContentHint11$outboundSchema` instead. */
    GetProjectsContentHint11$.outboundSchema = GetProjectsContentHint11$outboundSchema;
})(GetProjectsContentHint11$ || (GetProjectsContentHint11$ = {}));
export function getProjectsContentHint11ToJSON(getProjectsContentHint11) {
    return JSON.stringify(GetProjectsContentHint11$outboundSchema.parse(getProjectsContentHint11));
}
export function getProjectsContentHint11FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsContentHint11$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsContentHint11' from JSON`);
}
/** @internal */
export const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv10Type$inboundSchema = z.nativeEnum(GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv10Type);
/** @internal */
export const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv10Type$outboundSchema = GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv10Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv10Type$;
(function (GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv10Type$) {
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv10Type$inboundSchema` instead. */
    GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv10Type$.inboundSchema = GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv10Type$inboundSchema;
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv10Type$outboundSchema` instead. */
    GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv10Type$.outboundSchema = GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv10Type$outboundSchema;
})(GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv10Type$ || (GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv10Type$ = {}));
/** @internal */
export const GetProjectsContentHint10$inboundSchema = z.object({
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv10Type$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const GetProjectsContentHint10$outboundSchema = z.object({
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv10Type$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsContentHint10$;
(function (GetProjectsContentHint10$) {
    /** @deprecated use `GetProjectsContentHint10$inboundSchema` instead. */
    GetProjectsContentHint10$.inboundSchema = GetProjectsContentHint10$inboundSchema;
    /** @deprecated use `GetProjectsContentHint10$outboundSchema` instead. */
    GetProjectsContentHint10$.outboundSchema = GetProjectsContentHint10$outboundSchema;
})(GetProjectsContentHint10$ || (GetProjectsContentHint10$ = {}));
export function getProjectsContentHint10ToJSON(getProjectsContentHint10) {
    return JSON.stringify(GetProjectsContentHint10$outboundSchema.parse(getProjectsContentHint10));
}
export function getProjectsContentHint10FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsContentHint10$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsContentHint10' from JSON`);
}
/** @internal */
export const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv9Type$inboundSchema = z.nativeEnum(GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv9Type);
/** @internal */
export const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv9Type$outboundSchema = GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv9Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv9Type$;
(function (GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv9Type$) {
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv9Type$inboundSchema` instead. */
    GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv9Type$.inboundSchema = GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv9Type$inboundSchema;
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv9Type$outboundSchema` instead. */
    GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv9Type$.outboundSchema = GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv9Type$outboundSchema;
})(GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv9Type$ || (GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv9Type$ = {}));
/** @internal */
export const GetProjectsContentHint9$inboundSchema = z.object({
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv9Type$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const GetProjectsContentHint9$outboundSchema = z.object({
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv9Type$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsContentHint9$;
(function (GetProjectsContentHint9$) {
    /** @deprecated use `GetProjectsContentHint9$inboundSchema` instead. */
    GetProjectsContentHint9$.inboundSchema = GetProjectsContentHint9$inboundSchema;
    /** @deprecated use `GetProjectsContentHint9$outboundSchema` instead. */
    GetProjectsContentHint9$.outboundSchema = GetProjectsContentHint9$outboundSchema;
})(GetProjectsContentHint9$ || (GetProjectsContentHint9$ = {}));
export function getProjectsContentHint9ToJSON(getProjectsContentHint9) {
    return JSON.stringify(GetProjectsContentHint9$outboundSchema.parse(getProjectsContentHint9));
}
export function getProjectsContentHint9FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsContentHint9$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsContentHint9' from JSON`);
}
/** @internal */
export const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType$inboundSchema = z.nativeEnum(GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType);
/** @internal */
export const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType$outboundSchema = GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType$;
(function (GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType$) {
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType$inboundSchema` instead. */
    GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType$.inboundSchema = GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType$inboundSchema;
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType$outboundSchema` instead. */
    GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType$.outboundSchema = GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType$outboundSchema;
})(GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType$ || (GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType$ = {}));
/** @internal */
export const GetProjectsContentHint8$inboundSchema = z.object({
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const GetProjectsContentHint8$outboundSchema = z.object({
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsContentHint8$;
(function (GetProjectsContentHint8$) {
    /** @deprecated use `GetProjectsContentHint8$inboundSchema` instead. */
    GetProjectsContentHint8$.inboundSchema = GetProjectsContentHint8$inboundSchema;
    /** @deprecated use `GetProjectsContentHint8$outboundSchema` instead. */
    GetProjectsContentHint8$.outboundSchema = GetProjectsContentHint8$outboundSchema;
})(GetProjectsContentHint8$ || (GetProjectsContentHint8$ = {}));
export function getProjectsContentHint8ToJSON(getProjectsContentHint8) {
    return JSON.stringify(GetProjectsContentHint8$outboundSchema.parse(getProjectsContentHint8));
}
export function getProjectsContentHint8FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsContentHint8$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsContentHint8' from JSON`);
}
/** @internal */
export const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsType$inboundSchema = z.nativeEnum(GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsType);
/** @internal */
export const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsType$outboundSchema = GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsType$;
(function (GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsType$) {
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsType$inboundSchema` instead. */
    GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsType$.inboundSchema = GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsType$inboundSchema;
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsType$outboundSchema` instead. */
    GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsType$.outboundSchema = GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsType$outboundSchema;
})(GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsType$ || (GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsType$ = {}));
/** @internal */
export const GetProjectsContentHint7$inboundSchema = z.object({
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsType$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const GetProjectsContentHint7$outboundSchema = z.object({
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsType$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsContentHint7$;
(function (GetProjectsContentHint7$) {
    /** @deprecated use `GetProjectsContentHint7$inboundSchema` instead. */
    GetProjectsContentHint7$.inboundSchema = GetProjectsContentHint7$inboundSchema;
    /** @deprecated use `GetProjectsContentHint7$outboundSchema` instead. */
    GetProjectsContentHint7$.outboundSchema = GetProjectsContentHint7$outboundSchema;
})(GetProjectsContentHint7$ || (GetProjectsContentHint7$ = {}));
export function getProjectsContentHint7ToJSON(getProjectsContentHint7) {
    return JSON.stringify(GetProjectsContentHint7$outboundSchema.parse(getProjectsContentHint7));
}
export function getProjectsContentHint7FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsContentHint7$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsContentHint7' from JSON`);
}
/** @internal */
export const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema = z.nativeEnum(GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyType);
/** @internal */
export const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema = GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyType$;
(function (GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyType$) {
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
    GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyType$.inboundSchema = GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema;
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
    GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyType$.outboundSchema = GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema;
})(GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyType$ || (GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyType$ = {}));
/** @internal */
export const GetProjectsContentHint6$inboundSchema = z.object({
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const GetProjectsContentHint6$outboundSchema = z.object({
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsContentHint6$;
(function (GetProjectsContentHint6$) {
    /** @deprecated use `GetProjectsContentHint6$inboundSchema` instead. */
    GetProjectsContentHint6$.inboundSchema = GetProjectsContentHint6$inboundSchema;
    /** @deprecated use `GetProjectsContentHint6$outboundSchema` instead. */
    GetProjectsContentHint6$.outboundSchema = GetProjectsContentHint6$outboundSchema;
})(GetProjectsContentHint6$ || (GetProjectsContentHint6$ = {}));
export function getProjectsContentHint6ToJSON(getProjectsContentHint6) {
    return JSON.stringify(GetProjectsContentHint6$outboundSchema.parse(getProjectsContentHint6));
}
export function getProjectsContentHint6FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsContentHint6$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsContentHint6' from JSON`);
}
/** @internal */
export const GetProjectsContentHintProjectsResponse200ApplicationJSONType$inboundSchema = z.nativeEnum(GetProjectsContentHintProjectsResponse200ApplicationJSONType);
/** @internal */
export const GetProjectsContentHintProjectsResponse200ApplicationJSONType$outboundSchema = GetProjectsContentHintProjectsResponse200ApplicationJSONType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsContentHintProjectsResponse200ApplicationJSONType$;
(function (GetProjectsContentHintProjectsResponse200ApplicationJSONType$) {
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONType$inboundSchema` instead. */
    GetProjectsContentHintProjectsResponse200ApplicationJSONType$.inboundSchema = GetProjectsContentHintProjectsResponse200ApplicationJSONType$inboundSchema;
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONType$outboundSchema` instead. */
    GetProjectsContentHintProjectsResponse200ApplicationJSONType$.outboundSchema = GetProjectsContentHintProjectsResponse200ApplicationJSONType$outboundSchema;
})(GetProjectsContentHintProjectsResponse200ApplicationJSONType$ || (GetProjectsContentHintProjectsResponse200ApplicationJSONType$ = {}));
/** @internal */
export const GetProjectsContentHint5$inboundSchema = z.object({
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONType$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const GetProjectsContentHint5$outboundSchema = z.object({
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONType$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsContentHint5$;
(function (GetProjectsContentHint5$) {
    /** @deprecated use `GetProjectsContentHint5$inboundSchema` instead. */
    GetProjectsContentHint5$.inboundSchema = GetProjectsContentHint5$inboundSchema;
    /** @deprecated use `GetProjectsContentHint5$outboundSchema` instead. */
    GetProjectsContentHint5$.outboundSchema = GetProjectsContentHint5$outboundSchema;
})(GetProjectsContentHint5$ || (GetProjectsContentHint5$ = {}));
export function getProjectsContentHint5ToJSON(getProjectsContentHint5) {
    return JSON.stringify(GetProjectsContentHint5$outboundSchema.parse(getProjectsContentHint5));
}
export function getProjectsContentHint5FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsContentHint5$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsContentHint5' from JSON`);
}
/** @internal */
export const GetProjectsContentHintProjectsResponse200Type$inboundSchema = z
    .nativeEnum(GetProjectsContentHintProjectsResponse200Type);
/** @internal */
export const GetProjectsContentHintProjectsResponse200Type$outboundSchema = GetProjectsContentHintProjectsResponse200Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsContentHintProjectsResponse200Type$;
(function (GetProjectsContentHintProjectsResponse200Type$) {
    /** @deprecated use `GetProjectsContentHintProjectsResponse200Type$inboundSchema` instead. */
    GetProjectsContentHintProjectsResponse200Type$.inboundSchema = GetProjectsContentHintProjectsResponse200Type$inboundSchema;
    /** @deprecated use `GetProjectsContentHintProjectsResponse200Type$outboundSchema` instead. */
    GetProjectsContentHintProjectsResponse200Type$.outboundSchema = GetProjectsContentHintProjectsResponse200Type$outboundSchema;
})(GetProjectsContentHintProjectsResponse200Type$ || (GetProjectsContentHintProjectsResponse200Type$ = {}));
/** @internal */
export const GetProjectsContentHint4$inboundSchema = z.object({
    type: GetProjectsContentHintProjectsResponse200Type$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const GetProjectsContentHint4$outboundSchema = z.object({
    type: GetProjectsContentHintProjectsResponse200Type$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsContentHint4$;
(function (GetProjectsContentHint4$) {
    /** @deprecated use `GetProjectsContentHint4$inboundSchema` instead. */
    GetProjectsContentHint4$.inboundSchema = GetProjectsContentHint4$inboundSchema;
    /** @deprecated use `GetProjectsContentHint4$outboundSchema` instead. */
    GetProjectsContentHint4$.outboundSchema = GetProjectsContentHint4$outboundSchema;
})(GetProjectsContentHint4$ || (GetProjectsContentHint4$ = {}));
export function getProjectsContentHint4ToJSON(getProjectsContentHint4) {
    return JSON.stringify(GetProjectsContentHint4$outboundSchema.parse(getProjectsContentHint4));
}
export function getProjectsContentHint4FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsContentHint4$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsContentHint4' from JSON`);
}
/** @internal */
export const GetProjectsContentHintProjectsResponseType$inboundSchema = z
    .nativeEnum(GetProjectsContentHintProjectsResponseType);
/** @internal */
export const GetProjectsContentHintProjectsResponseType$outboundSchema = GetProjectsContentHintProjectsResponseType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsContentHintProjectsResponseType$;
(function (GetProjectsContentHintProjectsResponseType$) {
    /** @deprecated use `GetProjectsContentHintProjectsResponseType$inboundSchema` instead. */
    GetProjectsContentHintProjectsResponseType$.inboundSchema = GetProjectsContentHintProjectsResponseType$inboundSchema;
    /** @deprecated use `GetProjectsContentHintProjectsResponseType$outboundSchema` instead. */
    GetProjectsContentHintProjectsResponseType$.outboundSchema = GetProjectsContentHintProjectsResponseType$outboundSchema;
})(GetProjectsContentHintProjectsResponseType$ || (GetProjectsContentHintProjectsResponseType$ = {}));
/** @internal */
export const GetProjectsContentHint3$inboundSchema = z.object({
    type: GetProjectsContentHintProjectsResponseType$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const GetProjectsContentHint3$outboundSchema = z.object({
    type: GetProjectsContentHintProjectsResponseType$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsContentHint3$;
(function (GetProjectsContentHint3$) {
    /** @deprecated use `GetProjectsContentHint3$inboundSchema` instead. */
    GetProjectsContentHint3$.inboundSchema = GetProjectsContentHint3$inboundSchema;
    /** @deprecated use `GetProjectsContentHint3$outboundSchema` instead. */
    GetProjectsContentHint3$.outboundSchema = GetProjectsContentHint3$outboundSchema;
})(GetProjectsContentHint3$ || (GetProjectsContentHint3$ = {}));
export function getProjectsContentHint3ToJSON(getProjectsContentHint3) {
    return JSON.stringify(GetProjectsContentHint3$outboundSchema.parse(getProjectsContentHint3));
}
export function getProjectsContentHint3FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsContentHint3$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsContentHint3' from JSON`);
}
/** @internal */
export const GetProjectsContentHintProjectsType$inboundSchema = z.nativeEnum(GetProjectsContentHintProjectsType);
/** @internal */
export const GetProjectsContentHintProjectsType$outboundSchema = GetProjectsContentHintProjectsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsContentHintProjectsType$;
(function (GetProjectsContentHintProjectsType$) {
    /** @deprecated use `GetProjectsContentHintProjectsType$inboundSchema` instead. */
    GetProjectsContentHintProjectsType$.inboundSchema = GetProjectsContentHintProjectsType$inboundSchema;
    /** @deprecated use `GetProjectsContentHintProjectsType$outboundSchema` instead. */
    GetProjectsContentHintProjectsType$.outboundSchema = GetProjectsContentHintProjectsType$outboundSchema;
})(GetProjectsContentHintProjectsType$ || (GetProjectsContentHintProjectsType$ = {}));
/** @internal */
export const GetProjectsContentHint2$inboundSchema = z.object({
    type: GetProjectsContentHintProjectsType$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const GetProjectsContentHint2$outboundSchema = z.object({
    type: GetProjectsContentHintProjectsType$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsContentHint2$;
(function (GetProjectsContentHint2$) {
    /** @deprecated use `GetProjectsContentHint2$inboundSchema` instead. */
    GetProjectsContentHint2$.inboundSchema = GetProjectsContentHint2$inboundSchema;
    /** @deprecated use `GetProjectsContentHint2$outboundSchema` instead. */
    GetProjectsContentHint2$.outboundSchema = GetProjectsContentHint2$outboundSchema;
})(GetProjectsContentHint2$ || (GetProjectsContentHint2$ = {}));
export function getProjectsContentHint2ToJSON(getProjectsContentHint2) {
    return JSON.stringify(GetProjectsContentHint2$outboundSchema.parse(getProjectsContentHint2));
}
export function getProjectsContentHint2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsContentHint2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsContentHint2' from JSON`);
}
/** @internal */
export const GetProjectsContentHintType$inboundSchema = z.nativeEnum(GetProjectsContentHintType);
/** @internal */
export const GetProjectsContentHintType$outboundSchema = GetProjectsContentHintType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsContentHintType$;
(function (GetProjectsContentHintType$) {
    /** @deprecated use `GetProjectsContentHintType$inboundSchema` instead. */
    GetProjectsContentHintType$.inboundSchema = GetProjectsContentHintType$inboundSchema;
    /** @deprecated use `GetProjectsContentHintType$outboundSchema` instead. */
    GetProjectsContentHintType$.outboundSchema = GetProjectsContentHintType$outboundSchema;
})(GetProjectsContentHintType$ || (GetProjectsContentHintType$ = {}));
/** @internal */
export const GetProjectsContentHint1$inboundSchema = z.object({
    type: GetProjectsContentHintType$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const GetProjectsContentHint1$outboundSchema = z.object({
    type: GetProjectsContentHintType$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsContentHint1$;
(function (GetProjectsContentHint1$) {
    /** @deprecated use `GetProjectsContentHint1$inboundSchema` instead. */
    GetProjectsContentHint1$.inboundSchema = GetProjectsContentHint1$inboundSchema;
    /** @deprecated use `GetProjectsContentHint1$outboundSchema` instead. */
    GetProjectsContentHint1$.outboundSchema = GetProjectsContentHint1$outboundSchema;
})(GetProjectsContentHint1$ || (GetProjectsContentHint1$ = {}));
export function getProjectsContentHint1ToJSON(getProjectsContentHint1) {
    return JSON.stringify(GetProjectsContentHint1$outboundSchema.parse(getProjectsContentHint1));
}
export function getProjectsContentHint1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsContentHint1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsContentHint1' from JSON`);
}
/** @internal */
export const GetProjectsContentHint$inboundSchema = z.union([
    z.lazy(() => GetProjectsContentHint14$inboundSchema),
    z.lazy(() => GetProjectsContentHint1$inboundSchema),
    z.lazy(() => GetProjectsContentHint2$inboundSchema),
    z.lazy(() => GetProjectsContentHint3$inboundSchema),
    z.lazy(() => GetProjectsContentHint4$inboundSchema),
    z.lazy(() => GetProjectsContentHint5$inboundSchema),
    z.lazy(() => GetProjectsContentHint6$inboundSchema),
    z.lazy(() => GetProjectsContentHint7$inboundSchema),
    z.lazy(() => GetProjectsContentHint8$inboundSchema),
    z.lazy(() => GetProjectsContentHint9$inboundSchema),
    z.lazy(() => GetProjectsContentHint10$inboundSchema),
    z.lazy(() => GetProjectsContentHint11$inboundSchema),
    z.lazy(() => GetProjectsContentHint12$inboundSchema),
    z.lazy(() => GetProjectsContentHint13$inboundSchema),
    z.lazy(() => GetProjectsContentHint15$inboundSchema),
]);
/** @internal */
export const GetProjectsContentHint$outboundSchema = z.union([
    z.lazy(() => GetProjectsContentHint14$outboundSchema),
    z.lazy(() => GetProjectsContentHint1$outboundSchema),
    z.lazy(() => GetProjectsContentHint2$outboundSchema),
    z.lazy(() => GetProjectsContentHint3$outboundSchema),
    z.lazy(() => GetProjectsContentHint4$outboundSchema),
    z.lazy(() => GetProjectsContentHint5$outboundSchema),
    z.lazy(() => GetProjectsContentHint6$outboundSchema),
    z.lazy(() => GetProjectsContentHint7$outboundSchema),
    z.lazy(() => GetProjectsContentHint8$outboundSchema),
    z.lazy(() => GetProjectsContentHint9$outboundSchema),
    z.lazy(() => GetProjectsContentHint10$outboundSchema),
    z.lazy(() => GetProjectsContentHint11$outboundSchema),
    z.lazy(() => GetProjectsContentHint12$outboundSchema),
    z.lazy(() => GetProjectsContentHint13$outboundSchema),
    z.lazy(() => GetProjectsContentHint15$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsContentHint$;
(function (GetProjectsContentHint$) {
    /** @deprecated use `GetProjectsContentHint$inboundSchema` instead. */
    GetProjectsContentHint$.inboundSchema = GetProjectsContentHint$inboundSchema;
    /** @deprecated use `GetProjectsContentHint$outboundSchema` instead. */
    GetProjectsContentHint$.outboundSchema = GetProjectsContentHint$outboundSchema;
})(GetProjectsContentHint$ || (GetProjectsContentHint$ = {}));
export function getProjectsContentHintToJSON(getProjectsContentHint) {
    return JSON.stringify(GetProjectsContentHint$outboundSchema.parse(getProjectsContentHint));
}
export function getProjectsContentHintFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsContentHint$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsContentHint' from JSON`);
}
/** @internal */
export const GetProjectsProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema = z.nativeEnum(GetProjectsProjectsResponse200ApplicationJSONResponseBodyType);
/** @internal */
export const GetProjectsProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema = GetProjectsProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsProjectsResponse200ApplicationJSONResponseBodyType$;
(function (GetProjectsProjectsResponse200ApplicationJSONResponseBodyType$) {
    /** @deprecated use `GetProjectsProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
    GetProjectsProjectsResponse200ApplicationJSONResponseBodyType$.inboundSchema = GetProjectsProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema;
    /** @deprecated use `GetProjectsProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
    GetProjectsProjectsResponse200ApplicationJSONResponseBodyType$.outboundSchema = GetProjectsProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema;
})(GetProjectsProjectsResponse200ApplicationJSONResponseBodyType$ || (GetProjectsProjectsResponse200ApplicationJSONResponseBodyType$ = {}));
/** @internal */
export const GetProjectsInternalContentHint$inboundSchema = z.object({
    type: GetProjectsProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema,
    encryptedValue: z.string(),
});
/** @internal */
export const GetProjectsInternalContentHint$outboundSchema = z.object({
    type: GetProjectsProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema,
    encryptedValue: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsInternalContentHint$;
(function (GetProjectsInternalContentHint$) {
    /** @deprecated use `GetProjectsInternalContentHint$inboundSchema` instead. */
    GetProjectsInternalContentHint$.inboundSchema = GetProjectsInternalContentHint$inboundSchema;
    /** @deprecated use `GetProjectsInternalContentHint$outboundSchema` instead. */
    GetProjectsInternalContentHint$.outboundSchema = GetProjectsInternalContentHint$outboundSchema;
})(GetProjectsInternalContentHint$ || (GetProjectsInternalContentHint$ = {}));
export function getProjectsInternalContentHintToJSON(getProjectsInternalContentHint) {
    return JSON.stringify(GetProjectsInternalContentHint$outboundSchema.parse(getProjectsInternalContentHint));
}
export function getProjectsInternalContentHintFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsInternalContentHint$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsInternalContentHint' from JSON`);
}
/** @internal */
export const GetProjectsEnv$inboundSchema = z.object({
    target: z.union([
        z.array(GetProjectsTarget1$inboundSchema),
        GetProjectsTarget2$inboundSchema,
    ]).optional(),
    type: GetProjectsType$inboundSchema,
    sunsetSecretId: z.string().optional(),
    decrypted: z.boolean().optional(),
    value: z.string(),
    vsmValue: z.string().optional(),
    id: z.string().optional(),
    key: z.string(),
    configurationId: z.nullable(z.string()).optional(),
    createdAt: z.number().optional(),
    updatedAt: z.number().optional(),
    createdBy: z.nullable(z.string()).optional(),
    updatedBy: z.nullable(z.string()).optional(),
    gitBranch: z.string().optional(),
    edgeConfigId: z.nullable(z.string()).optional(),
    edgeConfigTokenId: z.nullable(z.string()).optional(),
    contentHint: z.nullable(z.union([
        z.lazy(() => GetProjectsContentHint14$inboundSchema),
        z.lazy(() => GetProjectsContentHint1$inboundSchema),
        z.lazy(() => GetProjectsContentHint2$inboundSchema),
        z.lazy(() => GetProjectsContentHint3$inboundSchema),
        z.lazy(() => GetProjectsContentHint4$inboundSchema),
        z.lazy(() => GetProjectsContentHint5$inboundSchema),
        z.lazy(() => GetProjectsContentHint6$inboundSchema),
        z.lazy(() => GetProjectsContentHint7$inboundSchema),
        z.lazy(() => GetProjectsContentHint8$inboundSchema),
        z.lazy(() => GetProjectsContentHint9$inboundSchema),
        z.lazy(() => GetProjectsContentHint10$inboundSchema),
        z.lazy(() => GetProjectsContentHint11$inboundSchema),
        z.lazy(() => GetProjectsContentHint12$inboundSchema),
        z.lazy(() => GetProjectsContentHint13$inboundSchema),
        z.lazy(() => GetProjectsContentHint15$inboundSchema),
    ])).optional(),
    internalContentHint: z.nullable(z.lazy(() => GetProjectsInternalContentHint$inboundSchema)).optional(),
    comment: z.string().optional(),
    customEnvironmentIds: z.array(z.string()).optional(),
});
/** @internal */
export const GetProjectsEnv$outboundSchema = z.object({
    target: z.union([
        z.array(GetProjectsTarget1$outboundSchema),
        GetProjectsTarget2$outboundSchema,
    ]).optional(),
    type: GetProjectsType$outboundSchema,
    sunsetSecretId: z.string().optional(),
    decrypted: z.boolean().optional(),
    value: z.string(),
    vsmValue: z.string().optional(),
    id: z.string().optional(),
    key: z.string(),
    configurationId: z.nullable(z.string()).optional(),
    createdAt: z.number().optional(),
    updatedAt: z.number().optional(),
    createdBy: z.nullable(z.string()).optional(),
    updatedBy: z.nullable(z.string()).optional(),
    gitBranch: z.string().optional(),
    edgeConfigId: z.nullable(z.string()).optional(),
    edgeConfigTokenId: z.nullable(z.string()).optional(),
    contentHint: z.nullable(z.union([
        z.lazy(() => GetProjectsContentHint14$outboundSchema),
        z.lazy(() => GetProjectsContentHint1$outboundSchema),
        z.lazy(() => GetProjectsContentHint2$outboundSchema),
        z.lazy(() => GetProjectsContentHint3$outboundSchema),
        z.lazy(() => GetProjectsContentHint4$outboundSchema),
        z.lazy(() => GetProjectsContentHint5$outboundSchema),
        z.lazy(() => GetProjectsContentHint6$outboundSchema),
        z.lazy(() => GetProjectsContentHint7$outboundSchema),
        z.lazy(() => GetProjectsContentHint8$outboundSchema),
        z.lazy(() => GetProjectsContentHint9$outboundSchema),
        z.lazy(() => GetProjectsContentHint10$outboundSchema),
        z.lazy(() => GetProjectsContentHint11$outboundSchema),
        z.lazy(() => GetProjectsContentHint12$outboundSchema),
        z.lazy(() => GetProjectsContentHint13$outboundSchema),
        z.lazy(() => GetProjectsContentHint15$outboundSchema),
    ])).optional(),
    internalContentHint: z.nullable(z.lazy(() => GetProjectsInternalContentHint$outboundSchema)).optional(),
    comment: z.string().optional(),
    customEnvironmentIds: z.array(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsEnv$;
(function (GetProjectsEnv$) {
    /** @deprecated use `GetProjectsEnv$inboundSchema` instead. */
    GetProjectsEnv$.inboundSchema = GetProjectsEnv$inboundSchema;
    /** @deprecated use `GetProjectsEnv$outboundSchema` instead. */
    GetProjectsEnv$.outboundSchema = GetProjectsEnv$outboundSchema;
})(GetProjectsEnv$ || (GetProjectsEnv$ = {}));
export function getProjectsEnvToJSON(getProjectsEnv) {
    return JSON.stringify(GetProjectsEnv$outboundSchema.parse(getProjectsEnv));
}
export function getProjectsEnvFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsEnv$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsEnv' from JSON`);
}
/** @internal */
export const GetProjectsProjectsType$inboundSchema = z.nativeEnum(GetProjectsProjectsType);
/** @internal */
export const GetProjectsProjectsType$outboundSchema = GetProjectsProjectsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsProjectsType$;
(function (GetProjectsProjectsType$) {
    /** @deprecated use `GetProjectsProjectsType$inboundSchema` instead. */
    GetProjectsProjectsType$.inboundSchema = GetProjectsProjectsType$inboundSchema;
    /** @deprecated use `GetProjectsProjectsType$outboundSchema` instead. */
    GetProjectsProjectsType$.outboundSchema = GetProjectsProjectsType$outboundSchema;
})(GetProjectsProjectsType$ || (GetProjectsProjectsType$ = {}));
/** @internal */
export const GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsCustomEnvironmentsType$inboundSchema = z.nativeEnum(GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsCustomEnvironmentsType);
/** @internal */
export const GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsCustomEnvironmentsType$outboundSchema = GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsCustomEnvironmentsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsCustomEnvironmentsType$;
(function (GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsCustomEnvironmentsType$) {
    /** @deprecated use `GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsCustomEnvironmentsType$inboundSchema` instead. */
    GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsCustomEnvironmentsType$.inboundSchema = GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsCustomEnvironmentsType$inboundSchema;
    /** @deprecated use `GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsCustomEnvironmentsType$outboundSchema` instead. */
    GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsCustomEnvironmentsType$.outboundSchema = GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsCustomEnvironmentsType$outboundSchema;
})(GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsCustomEnvironmentsType$ || (GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsCustomEnvironmentsType$ = {}));
/** @internal */
export const GetProjectsBranchMatcher$inboundSchema = z.object({
    type: GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsCustomEnvironmentsType$inboundSchema,
    pattern: z.string(),
});
/** @internal */
export const GetProjectsBranchMatcher$outboundSchema = z.object({
    type: GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsCustomEnvironmentsType$outboundSchema,
    pattern: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsBranchMatcher$;
(function (GetProjectsBranchMatcher$) {
    /** @deprecated use `GetProjectsBranchMatcher$inboundSchema` instead. */
    GetProjectsBranchMatcher$.inboundSchema = GetProjectsBranchMatcher$inboundSchema;
    /** @deprecated use `GetProjectsBranchMatcher$outboundSchema` instead. */
    GetProjectsBranchMatcher$.outboundSchema = GetProjectsBranchMatcher$outboundSchema;
})(GetProjectsBranchMatcher$ || (GetProjectsBranchMatcher$ = {}));
export function getProjectsBranchMatcherToJSON(getProjectsBranchMatcher) {
    return JSON.stringify(GetProjectsBranchMatcher$outboundSchema.parse(getProjectsBranchMatcher));
}
export function getProjectsBranchMatcherFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsBranchMatcher$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsBranchMatcher' from JSON`);
}
/** @internal */
export const GetProjectsVerification$inboundSchema = z.object({
    type: z.string(),
    domain: z.string(),
    value: z.string(),
    reason: z.string(),
});
/** @internal */
export const GetProjectsVerification$outboundSchema = z.object({
    type: z.string(),
    domain: z.string(),
    value: z.string(),
    reason: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsVerification$;
(function (GetProjectsVerification$) {
    /** @deprecated use `GetProjectsVerification$inboundSchema` instead. */
    GetProjectsVerification$.inboundSchema = GetProjectsVerification$inboundSchema;
    /** @deprecated use `GetProjectsVerification$outboundSchema` instead. */
    GetProjectsVerification$.outboundSchema = GetProjectsVerification$outboundSchema;
})(GetProjectsVerification$ || (GetProjectsVerification$ = {}));
export function getProjectsVerificationToJSON(getProjectsVerification) {
    return JSON.stringify(GetProjectsVerification$outboundSchema.parse(getProjectsVerification));
}
export function getProjectsVerificationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsVerification$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsVerification' from JSON`);
}
/** @internal */
export const GetProjectsDomains$inboundSchema = z.object({
    name: z.string(),
    apexName: z.string(),
    projectId: z.string(),
    redirect: z.nullable(z.string()).optional(),
    redirectStatusCode: z.nullable(z.number()).optional(),
    gitBranch: z.nullable(z.string()).optional(),
    customEnvironmentId: z.nullable(z.string()).optional(),
    updatedAt: z.number().optional(),
    createdAt: z.number().optional(),
    verified: z.boolean(),
    verification: z.array(z.lazy(() => GetProjectsVerification$inboundSchema))
        .optional(),
});
/** @internal */
export const GetProjectsDomains$outboundSchema = z.object({
    name: z.string(),
    apexName: z.string(),
    projectId: z.string(),
    redirect: z.nullable(z.string()).optional(),
    redirectStatusCode: z.nullable(z.number()).optional(),
    gitBranch: z.nullable(z.string()).optional(),
    customEnvironmentId: z.nullable(z.string()).optional(),
    updatedAt: z.number().optional(),
    createdAt: z.number().optional(),
    verified: z.boolean(),
    verification: z.array(z.lazy(() => GetProjectsVerification$outboundSchema))
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsDomains$;
(function (GetProjectsDomains$) {
    /** @deprecated use `GetProjectsDomains$inboundSchema` instead. */
    GetProjectsDomains$.inboundSchema = GetProjectsDomains$inboundSchema;
    /** @deprecated use `GetProjectsDomains$outboundSchema` instead. */
    GetProjectsDomains$.outboundSchema = GetProjectsDomains$outboundSchema;
})(GetProjectsDomains$ || (GetProjectsDomains$ = {}));
export function getProjectsDomainsToJSON(getProjectsDomains) {
    return JSON.stringify(GetProjectsDomains$outboundSchema.parse(getProjectsDomains));
}
export function getProjectsDomainsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsDomains$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsDomains' from JSON`);
}
/** @internal */
export const GetProjectsCustomEnvironments$inboundSchema = z.object({
    id: z.string(),
    slug: z.string(),
    type: GetProjectsProjectsType$inboundSchema,
    description: z.string().optional(),
    branchMatcher: z.lazy(() => GetProjectsBranchMatcher$inboundSchema)
        .optional(),
    domains: z.array(z.lazy(() => GetProjectsDomains$inboundSchema)).optional(),
    currentDeploymentAliases: z.array(z.string()).optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
});
/** @internal */
export const GetProjectsCustomEnvironments$outboundSchema = z.object({
    id: z.string(),
    slug: z.string(),
    type: GetProjectsProjectsType$outboundSchema,
    description: z.string().optional(),
    branchMatcher: z.lazy(() => GetProjectsBranchMatcher$outboundSchema)
        .optional(),
    domains: z.array(z.lazy(() => GetProjectsDomains$outboundSchema)).optional(),
    currentDeploymentAliases: z.array(z.string()).optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsCustomEnvironments$;
(function (GetProjectsCustomEnvironments$) {
    /** @deprecated use `GetProjectsCustomEnvironments$inboundSchema` instead. */
    GetProjectsCustomEnvironments$.inboundSchema = GetProjectsCustomEnvironments$inboundSchema;
    /** @deprecated use `GetProjectsCustomEnvironments$outboundSchema` instead. */
    GetProjectsCustomEnvironments$.outboundSchema = GetProjectsCustomEnvironments$outboundSchema;
})(GetProjectsCustomEnvironments$ || (GetProjectsCustomEnvironments$ = {}));
export function getProjectsCustomEnvironmentsToJSON(getProjectsCustomEnvironments) {
    return JSON.stringify(GetProjectsCustomEnvironments$outboundSchema.parse(getProjectsCustomEnvironments));
}
export function getProjectsCustomEnvironmentsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsCustomEnvironments$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsCustomEnvironments' from JSON`);
}
/** @internal */
export const GetProjectsFramework$inboundSchema = z.nativeEnum(GetProjectsFramework);
/** @internal */
export const GetProjectsFramework$outboundSchema = GetProjectsFramework$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsFramework$;
(function (GetProjectsFramework$) {
    /** @deprecated use `GetProjectsFramework$inboundSchema` instead. */
    GetProjectsFramework$.inboundSchema = GetProjectsFramework$inboundSchema;
    /** @deprecated use `GetProjectsFramework$outboundSchema` instead. */
    GetProjectsFramework$.outboundSchema = GetProjectsFramework$outboundSchema;
})(GetProjectsFramework$ || (GetProjectsFramework$ = {}));
/** @internal */
export const GetProjectsIpBuckets$inboundSchema = z.object({
    bucket: z.string(),
    supportUntil: z.number().optional(),
});
/** @internal */
export const GetProjectsIpBuckets$outboundSchema = z.object({
    bucket: z.string(),
    supportUntil: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsIpBuckets$;
(function (GetProjectsIpBuckets$) {
    /** @deprecated use `GetProjectsIpBuckets$inboundSchema` instead. */
    GetProjectsIpBuckets$.inboundSchema = GetProjectsIpBuckets$inboundSchema;
    /** @deprecated use `GetProjectsIpBuckets$outboundSchema` instead. */
    GetProjectsIpBuckets$.outboundSchema = GetProjectsIpBuckets$outboundSchema;
})(GetProjectsIpBuckets$ || (GetProjectsIpBuckets$ = {}));
export function getProjectsIpBucketsToJSON(getProjectsIpBuckets) {
    return JSON.stringify(GetProjectsIpBuckets$outboundSchema.parse(getProjectsIpBuckets));
}
export function getProjectsIpBucketsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsIpBuckets$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsIpBuckets' from JSON`);
}
/** @internal */
export const GetProjectsAliasAssigned$inboundSchema = z.union([z.number(), z.boolean()]);
/** @internal */
export const GetProjectsAliasAssigned$outboundSchema = z.union([z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsAliasAssigned$;
(function (GetProjectsAliasAssigned$) {
    /** @deprecated use `GetProjectsAliasAssigned$inboundSchema` instead. */
    GetProjectsAliasAssigned$.inboundSchema = GetProjectsAliasAssigned$inboundSchema;
    /** @deprecated use `GetProjectsAliasAssigned$outboundSchema` instead. */
    GetProjectsAliasAssigned$.outboundSchema = GetProjectsAliasAssigned$outboundSchema;
})(GetProjectsAliasAssigned$ || (GetProjectsAliasAssigned$ = {}));
export function getProjectsAliasAssignedToJSON(getProjectsAliasAssigned) {
    return JSON.stringify(GetProjectsAliasAssigned$outboundSchema.parse(getProjectsAliasAssigned));
}
export function getProjectsAliasAssignedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsAliasAssigned$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsAliasAssigned' from JSON`);
}
/** @internal */
export const GetProjectsAliasError$inboundSchema = z.object({
    code: z.string(),
    message: z.string(),
});
/** @internal */
export const GetProjectsAliasError$outboundSchema = z.object({
    code: z.string(),
    message: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsAliasError$;
(function (GetProjectsAliasError$) {
    /** @deprecated use `GetProjectsAliasError$inboundSchema` instead. */
    GetProjectsAliasError$.inboundSchema = GetProjectsAliasError$inboundSchema;
    /** @deprecated use `GetProjectsAliasError$outboundSchema` instead. */
    GetProjectsAliasError$.outboundSchema = GetProjectsAliasError$outboundSchema;
})(GetProjectsAliasError$ || (GetProjectsAliasError$ = {}));
export function getProjectsAliasErrorToJSON(getProjectsAliasError) {
    return JSON.stringify(GetProjectsAliasError$outboundSchema.parse(getProjectsAliasError));
}
export function getProjectsAliasErrorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsAliasError$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsAliasError' from JSON`);
}
/** @internal */
export const GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsLatestDeploymentsType$inboundSchema = z.nativeEnum(GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsLatestDeploymentsType);
/** @internal */
export const GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsLatestDeploymentsType$outboundSchema = GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsLatestDeploymentsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsLatestDeploymentsType$;
(function (GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsLatestDeploymentsType$) {
    /** @deprecated use `GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsLatestDeploymentsType$inboundSchema` instead. */
    GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsLatestDeploymentsType$.inboundSchema = GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsLatestDeploymentsType$inboundSchema;
    /** @deprecated use `GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsLatestDeploymentsType$outboundSchema` instead. */
    GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsLatestDeploymentsType$.outboundSchema = GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsLatestDeploymentsType$outboundSchema;
})(GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsLatestDeploymentsType$ || (GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsLatestDeploymentsType$ = {}));
/** @internal */
export const GetProjectsProjectsBranchMatcher$inboundSchema = z.object({
    type: GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsLatestDeploymentsType$inboundSchema,
    pattern: z.string(),
});
/** @internal */
export const GetProjectsProjectsBranchMatcher$outboundSchema = z.object({
    type: GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsLatestDeploymentsType$outboundSchema,
    pattern: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsProjectsBranchMatcher$;
(function (GetProjectsProjectsBranchMatcher$) {
    /** @deprecated use `GetProjectsProjectsBranchMatcher$inboundSchema` instead. */
    GetProjectsProjectsBranchMatcher$.inboundSchema = GetProjectsProjectsBranchMatcher$inboundSchema;
    /** @deprecated use `GetProjectsProjectsBranchMatcher$outboundSchema` instead. */
    GetProjectsProjectsBranchMatcher$.outboundSchema = GetProjectsProjectsBranchMatcher$outboundSchema;
})(GetProjectsProjectsBranchMatcher$ || (GetProjectsProjectsBranchMatcher$ = {}));
export function getProjectsProjectsBranchMatcherToJSON(getProjectsProjectsBranchMatcher) {
    return JSON.stringify(GetProjectsProjectsBranchMatcher$outboundSchema.parse(getProjectsProjectsBranchMatcher));
}
export function getProjectsProjectsBranchMatcherFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsProjectsBranchMatcher$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsProjectsBranchMatcher' from JSON`);
}
/** @internal */
export const GetProjectsBuilds$inboundSchema = z.object({
    use: z.string(),
    src: z.string().optional(),
    dest: z.string().optional(),
});
/** @internal */
export const GetProjectsBuilds$outboundSchema = z.object({
    use: z.string(),
    src: z.string().optional(),
    dest: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsBuilds$;
(function (GetProjectsBuilds$) {
    /** @deprecated use `GetProjectsBuilds$inboundSchema` instead. */
    GetProjectsBuilds$.inboundSchema = GetProjectsBuilds$inboundSchema;
    /** @deprecated use `GetProjectsBuilds$outboundSchema` instead. */
    GetProjectsBuilds$.outboundSchema = GetProjectsBuilds$outboundSchema;
})(GetProjectsBuilds$ || (GetProjectsBuilds$ = {}));
export function getProjectsBuildsToJSON(getProjectsBuilds) {
    return JSON.stringify(GetProjectsBuilds$outboundSchema.parse(getProjectsBuilds));
}
export function getProjectsBuildsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsBuilds$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsBuilds' from JSON`);
}
/** @internal */
export const GetProjectsChecksConclusion$inboundSchema = z.nativeEnum(GetProjectsChecksConclusion);
/** @internal */
export const GetProjectsChecksConclusion$outboundSchema = GetProjectsChecksConclusion$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsChecksConclusion$;
(function (GetProjectsChecksConclusion$) {
    /** @deprecated use `GetProjectsChecksConclusion$inboundSchema` instead. */
    GetProjectsChecksConclusion$.inboundSchema = GetProjectsChecksConclusion$inboundSchema;
    /** @deprecated use `GetProjectsChecksConclusion$outboundSchema` instead. */
    GetProjectsChecksConclusion$.outboundSchema = GetProjectsChecksConclusion$outboundSchema;
})(GetProjectsChecksConclusion$ || (GetProjectsChecksConclusion$ = {}));
/** @internal */
export const GetProjectsChecksState$inboundSchema = z.nativeEnum(GetProjectsChecksState);
/** @internal */
export const GetProjectsChecksState$outboundSchema = GetProjectsChecksState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsChecksState$;
(function (GetProjectsChecksState$) {
    /** @deprecated use `GetProjectsChecksState$inboundSchema` instead. */
    GetProjectsChecksState$.inboundSchema = GetProjectsChecksState$inboundSchema;
    /** @deprecated use `GetProjectsChecksState$outboundSchema` instead. */
    GetProjectsChecksState$.outboundSchema = GetProjectsChecksState$outboundSchema;
})(GetProjectsChecksState$ || (GetProjectsChecksState$ = {}));
/** @internal */
export const GetProjectsCreator$inboundSchema = z.object({
    email: z.string(),
    githubLogin: z.string().optional(),
    gitlabLogin: z.string().optional(),
    uid: z.string(),
    username: z.string(),
});
/** @internal */
export const GetProjectsCreator$outboundSchema = z.object({
    email: z.string(),
    githubLogin: z.string().optional(),
    gitlabLogin: z.string().optional(),
    uid: z.string(),
    username: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsCreator$;
(function (GetProjectsCreator$) {
    /** @deprecated use `GetProjectsCreator$inboundSchema` instead. */
    GetProjectsCreator$.inboundSchema = GetProjectsCreator$inboundSchema;
    /** @deprecated use `GetProjectsCreator$outboundSchema` instead. */
    GetProjectsCreator$.outboundSchema = GetProjectsCreator$outboundSchema;
})(GetProjectsCreator$ || (GetProjectsCreator$ = {}));
export function getProjectsCreatorToJSON(getProjectsCreator) {
    return JSON.stringify(GetProjectsCreator$outboundSchema.parse(getProjectsCreator));
}
export function getProjectsCreatorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsCreator$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsCreator' from JSON`);
}
/** @internal */
export const GetProjectsOidcTokenClaims$inboundSchema = z.object({
    iss: z.string(),
    sub: z.string(),
    scope: z.string(),
    aud: z.string(),
    owner: z.string(),
    owner_id: z.string(),
    project: z.string(),
    project_id: z.string(),
    environment: z.string(),
}).transform((v) => {
    return remap$(v, {
        "owner_id": "ownerId",
        "project_id": "projectId",
    });
});
/** @internal */
export const GetProjectsOidcTokenClaims$outboundSchema = z.object({
    iss: z.string(),
    sub: z.string(),
    scope: z.string(),
    aud: z.string(),
    owner: z.string(),
    ownerId: z.string(),
    project: z.string(),
    projectId: z.string(),
    environment: z.string(),
}).transform((v) => {
    return remap$(v, {
        ownerId: "owner_id",
        projectId: "project_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsOidcTokenClaims$;
(function (GetProjectsOidcTokenClaims$) {
    /** @deprecated use `GetProjectsOidcTokenClaims$inboundSchema` instead. */
    GetProjectsOidcTokenClaims$.inboundSchema = GetProjectsOidcTokenClaims$inboundSchema;
    /** @deprecated use `GetProjectsOidcTokenClaims$outboundSchema` instead. */
    GetProjectsOidcTokenClaims$.outboundSchema = GetProjectsOidcTokenClaims$outboundSchema;
})(GetProjectsOidcTokenClaims$ || (GetProjectsOidcTokenClaims$ = {}));
export function getProjectsOidcTokenClaimsToJSON(getProjectsOidcTokenClaims) {
    return JSON.stringify(GetProjectsOidcTokenClaims$outboundSchema.parse(getProjectsOidcTokenClaims));
}
export function getProjectsOidcTokenClaimsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsOidcTokenClaims$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsOidcTokenClaims' from JSON`);
}
/** @internal */
export const GetProjectsPlan$inboundSchema = z.nativeEnum(GetProjectsPlan);
/** @internal */
export const GetProjectsPlan$outboundSchema = GetProjectsPlan$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsPlan$;
(function (GetProjectsPlan$) {
    /** @deprecated use `GetProjectsPlan$inboundSchema` instead. */
    GetProjectsPlan$.inboundSchema = GetProjectsPlan$inboundSchema;
    /** @deprecated use `GetProjectsPlan$outboundSchema` instead. */
    GetProjectsPlan$.outboundSchema = GetProjectsPlan$outboundSchema;
})(GetProjectsPlan$ || (GetProjectsPlan$ = {}));
/** @internal */
export const GetProjectsReadyState$inboundSchema = z.nativeEnum(GetProjectsReadyState);
/** @internal */
export const GetProjectsReadyState$outboundSchema = GetProjectsReadyState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsReadyState$;
(function (GetProjectsReadyState$) {
    /** @deprecated use `GetProjectsReadyState$inboundSchema` instead. */
    GetProjectsReadyState$.inboundSchema = GetProjectsReadyState$inboundSchema;
    /** @deprecated use `GetProjectsReadyState$outboundSchema` instead. */
    GetProjectsReadyState$.outboundSchema = GetProjectsReadyState$outboundSchema;
})(GetProjectsReadyState$ || (GetProjectsReadyState$ = {}));
/** @internal */
export const GetProjectsReadySubstate$inboundSchema = z.nativeEnum(GetProjectsReadySubstate);
/** @internal */
export const GetProjectsReadySubstate$outboundSchema = GetProjectsReadySubstate$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsReadySubstate$;
(function (GetProjectsReadySubstate$) {
    /** @deprecated use `GetProjectsReadySubstate$inboundSchema` instead. */
    GetProjectsReadySubstate$.inboundSchema = GetProjectsReadySubstate$inboundSchema;
    /** @deprecated use `GetProjectsReadySubstate$outboundSchema` instead. */
    GetProjectsReadySubstate$.outboundSchema = GetProjectsReadySubstate$outboundSchema;
})(GetProjectsReadySubstate$ || (GetProjectsReadySubstate$ = {}));
/** @internal */
export const GetProjectsProjectsResponseType$inboundSchema = z.nativeEnum(GetProjectsProjectsResponseType);
/** @internal */
export const GetProjectsProjectsResponseType$outboundSchema = GetProjectsProjectsResponseType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsProjectsResponseType$;
(function (GetProjectsProjectsResponseType$) {
    /** @deprecated use `GetProjectsProjectsResponseType$inboundSchema` instead. */
    GetProjectsProjectsResponseType$.inboundSchema = GetProjectsProjectsResponseType$inboundSchema;
    /** @deprecated use `GetProjectsProjectsResponseType$outboundSchema` instead. */
    GetProjectsProjectsResponseType$.outboundSchema = GetProjectsProjectsResponseType$outboundSchema;
})(GetProjectsProjectsResponseType$ || (GetProjectsProjectsResponseType$ = {}));
/** @internal */
export const GetProjectsLatestDeployments$inboundSchema = z.object({
    id: z.string(),
    alias: z.array(z.string()).optional(),
    aliasAssigned: z.nullable(z.union([z.number(), z.boolean()])).optional(),
    aliasError: z.nullable(z.lazy(() => GetProjectsAliasError$inboundSchema))
        .optional(),
    aliasFinal: z.nullable(z.string()).optional(),
    automaticAliases: z.array(z.string()).optional(),
    branchMatcher: z.lazy(() => GetProjectsProjectsBranchMatcher$inboundSchema)
        .optional(),
    buildingAt: z.number().optional(),
    builds: z.array(z.lazy(() => GetProjectsBuilds$inboundSchema)).optional(),
    checksConclusion: GetProjectsChecksConclusion$inboundSchema.optional(),
    checksState: GetProjectsChecksState$inboundSchema.optional(),
    connectBuildsEnabled: z.boolean().optional(),
    connectConfigurationId: z.string().optional(),
    createdAt: z.number(),
    createdIn: z.string(),
    creator: z.nullable(z.lazy(() => GetProjectsCreator$inboundSchema)),
    deletedAt: z.number().optional(),
    deploymentHostname: z.string(),
    forced: z.boolean().optional(),
    name: z.string(),
    meta: z.record(z.string()).optional(),
    monorepoManager: z.nullable(z.string()).optional(),
    oidcTokenClaims: z.lazy(() => GetProjectsOidcTokenClaims$inboundSchema)
        .optional(),
    plan: GetProjectsPlan$inboundSchema,
    previewCommentsEnabled: z.boolean().optional(),
    private: z.boolean(),
    readyAt: z.number().optional(),
    readyState: GetProjectsReadyState$inboundSchema,
    readySubstate: GetProjectsReadySubstate$inboundSchema.optional(),
    requestedAt: z.number().optional(),
    target: z.nullable(z.string()).optional(),
    teamId: z.nullable(z.string()).optional(),
    type: GetProjectsProjectsResponseType$inboundSchema,
    url: z.string(),
    userId: z.string(),
    withCache: z.boolean().optional(),
});
/** @internal */
export const GetProjectsLatestDeployments$outboundSchema = z.object({
    id: z.string(),
    alias: z.array(z.string()).optional(),
    aliasAssigned: z.nullable(z.union([z.number(), z.boolean()])).optional(),
    aliasError: z.nullable(z.lazy(() => GetProjectsAliasError$outboundSchema))
        .optional(),
    aliasFinal: z.nullable(z.string()).optional(),
    automaticAliases: z.array(z.string()).optional(),
    branchMatcher: z.lazy(() => GetProjectsProjectsBranchMatcher$outboundSchema)
        .optional(),
    buildingAt: z.number().optional(),
    builds: z.array(z.lazy(() => GetProjectsBuilds$outboundSchema)).optional(),
    checksConclusion: GetProjectsChecksConclusion$outboundSchema.optional(),
    checksState: GetProjectsChecksState$outboundSchema.optional(),
    connectBuildsEnabled: z.boolean().optional(),
    connectConfigurationId: z.string().optional(),
    createdAt: z.number(),
    createdIn: z.string(),
    creator: z.nullable(z.lazy(() => GetProjectsCreator$outboundSchema)),
    deletedAt: z.number().optional(),
    deploymentHostname: z.string(),
    forced: z.boolean().optional(),
    name: z.string(),
    meta: z.record(z.string()).optional(),
    monorepoManager: z.nullable(z.string()).optional(),
    oidcTokenClaims: z.lazy(() => GetProjectsOidcTokenClaims$outboundSchema)
        .optional(),
    plan: GetProjectsPlan$outboundSchema,
    previewCommentsEnabled: z.boolean().optional(),
    private: z.boolean(),
    readyAt: z.number().optional(),
    readyState: GetProjectsReadyState$outboundSchema,
    readySubstate: GetProjectsReadySubstate$outboundSchema.optional(),
    requestedAt: z.number().optional(),
    target: z.nullable(z.string()).optional(),
    teamId: z.nullable(z.string()).optional(),
    type: GetProjectsProjectsResponseType$outboundSchema,
    url: z.string(),
    userId: z.string(),
    withCache: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsLatestDeployments$;
(function (GetProjectsLatestDeployments$) {
    /** @deprecated use `GetProjectsLatestDeployments$inboundSchema` instead. */
    GetProjectsLatestDeployments$.inboundSchema = GetProjectsLatestDeployments$inboundSchema;
    /** @deprecated use `GetProjectsLatestDeployments$outboundSchema` instead. */
    GetProjectsLatestDeployments$.outboundSchema = GetProjectsLatestDeployments$outboundSchema;
})(GetProjectsLatestDeployments$ || (GetProjectsLatestDeployments$ = {}));
export function getProjectsLatestDeploymentsToJSON(getProjectsLatestDeployments) {
    return JSON.stringify(GetProjectsLatestDeployments$outboundSchema.parse(getProjectsLatestDeployments));
}
export function getProjectsLatestDeploymentsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsLatestDeployments$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsLatestDeployments' from JSON`);
}
/** @internal */
export const GetProjectsLinkProjectsResponse200ApplicationJSONType$inboundSchema = z.nativeEnum(GetProjectsLinkProjectsResponse200ApplicationJSONType);
/** @internal */
export const GetProjectsLinkProjectsResponse200ApplicationJSONType$outboundSchema = GetProjectsLinkProjectsResponse200ApplicationJSONType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsLinkProjectsResponse200ApplicationJSONType$;
(function (GetProjectsLinkProjectsResponse200ApplicationJSONType$) {
    /** @deprecated use `GetProjectsLinkProjectsResponse200ApplicationJSONType$inboundSchema` instead. */
    GetProjectsLinkProjectsResponse200ApplicationJSONType$.inboundSchema = GetProjectsLinkProjectsResponse200ApplicationJSONType$inboundSchema;
    /** @deprecated use `GetProjectsLinkProjectsResponse200ApplicationJSONType$outboundSchema` instead. */
    GetProjectsLinkProjectsResponse200ApplicationJSONType$.outboundSchema = GetProjectsLinkProjectsResponse200ApplicationJSONType$outboundSchema;
})(GetProjectsLinkProjectsResponse200ApplicationJSONType$ || (GetProjectsLinkProjectsResponse200ApplicationJSONType$ = {}));
/** @internal */
export const GetProjectsLinkProjectsResponse200ApplicationJSONDeployHooks$inboundSchema = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
});
/** @internal */
export const GetProjectsLinkProjectsResponse200ApplicationJSONDeployHooks$outboundSchema = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsLinkProjectsResponse200ApplicationJSONDeployHooks$;
(function (GetProjectsLinkProjectsResponse200ApplicationJSONDeployHooks$) {
    /** @deprecated use `GetProjectsLinkProjectsResponse200ApplicationJSONDeployHooks$inboundSchema` instead. */
    GetProjectsLinkProjectsResponse200ApplicationJSONDeployHooks$.inboundSchema = GetProjectsLinkProjectsResponse200ApplicationJSONDeployHooks$inboundSchema;
    /** @deprecated use `GetProjectsLinkProjectsResponse200ApplicationJSONDeployHooks$outboundSchema` instead. */
    GetProjectsLinkProjectsResponse200ApplicationJSONDeployHooks$.outboundSchema = GetProjectsLinkProjectsResponse200ApplicationJSONDeployHooks$outboundSchema;
})(GetProjectsLinkProjectsResponse200ApplicationJSONDeployHooks$ || (GetProjectsLinkProjectsResponse200ApplicationJSONDeployHooks$ = {}));
export function getProjectsLinkProjectsResponse200ApplicationJSONDeployHooksToJSON(getProjectsLinkProjectsResponse200ApplicationJSONDeployHooks) {
    return JSON.stringify(GetProjectsLinkProjectsResponse200ApplicationJSONDeployHooks$outboundSchema
        .parse(getProjectsLinkProjectsResponse200ApplicationJSONDeployHooks));
}
export function getProjectsLinkProjectsResponse200ApplicationJSONDeployHooksFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsLinkProjectsResponse200ApplicationJSONDeployHooks$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'GetProjectsLinkProjectsResponse200ApplicationJSONDeployHooks' from JSON`);
}
/** @internal */
export const GetProjectsLink5$inboundSchema = z.object({
    name: z.string(),
    slug: z.string(),
    owner: z.string(),
    type: GetProjectsLinkProjectsResponse200ApplicationJSONType$inboundSchema,
    uuid: z.string(),
    workspaceUuid: z.string(),
    createdAt: z.number().optional(),
    deployHooks: z.array(z.lazy(() => GetProjectsLinkProjectsResponse200ApplicationJSONDeployHooks$inboundSchema)),
    gitCredentialId: z.string(),
    updatedAt: z.number().optional(),
    sourceless: z.boolean().optional(),
    productionBranch: z.string(),
});
/** @internal */
export const GetProjectsLink5$outboundSchema = z.object({
    name: z.string(),
    slug: z.string(),
    owner: z.string(),
    type: GetProjectsLinkProjectsResponse200ApplicationJSONType$outboundSchema,
    uuid: z.string(),
    workspaceUuid: z.string(),
    createdAt: z.number().optional(),
    deployHooks: z.array(z.lazy(() => GetProjectsLinkProjectsResponse200ApplicationJSONDeployHooks$outboundSchema)),
    gitCredentialId: z.string(),
    updatedAt: z.number().optional(),
    sourceless: z.boolean().optional(),
    productionBranch: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsLink5$;
(function (GetProjectsLink5$) {
    /** @deprecated use `GetProjectsLink5$inboundSchema` instead. */
    GetProjectsLink5$.inboundSchema = GetProjectsLink5$inboundSchema;
    /** @deprecated use `GetProjectsLink5$outboundSchema` instead. */
    GetProjectsLink5$.outboundSchema = GetProjectsLink5$outboundSchema;
})(GetProjectsLink5$ || (GetProjectsLink5$ = {}));
export function getProjectsLink5ToJSON(getProjectsLink5) {
    return JSON.stringify(GetProjectsLink5$outboundSchema.parse(getProjectsLink5));
}
export function getProjectsLink5FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsLink5$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsLink5' from JSON`);
}
/** @internal */
export const GetProjectsLinkProjectsResponse200Type$inboundSchema = z.nativeEnum(GetProjectsLinkProjectsResponse200Type);
/** @internal */
export const GetProjectsLinkProjectsResponse200Type$outboundSchema = GetProjectsLinkProjectsResponse200Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsLinkProjectsResponse200Type$;
(function (GetProjectsLinkProjectsResponse200Type$) {
    /** @deprecated use `GetProjectsLinkProjectsResponse200Type$inboundSchema` instead. */
    GetProjectsLinkProjectsResponse200Type$.inboundSchema = GetProjectsLinkProjectsResponse200Type$inboundSchema;
    /** @deprecated use `GetProjectsLinkProjectsResponse200Type$outboundSchema` instead. */
    GetProjectsLinkProjectsResponse200Type$.outboundSchema = GetProjectsLinkProjectsResponse200Type$outboundSchema;
})(GetProjectsLinkProjectsResponse200Type$ || (GetProjectsLinkProjectsResponse200Type$ = {}));
/** @internal */
export const GetProjectsLinkProjectsResponse200DeployHooks$inboundSchema = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
});
/** @internal */
export const GetProjectsLinkProjectsResponse200DeployHooks$outboundSchema = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsLinkProjectsResponse200DeployHooks$;
(function (GetProjectsLinkProjectsResponse200DeployHooks$) {
    /** @deprecated use `GetProjectsLinkProjectsResponse200DeployHooks$inboundSchema` instead. */
    GetProjectsLinkProjectsResponse200DeployHooks$.inboundSchema = GetProjectsLinkProjectsResponse200DeployHooks$inboundSchema;
    /** @deprecated use `GetProjectsLinkProjectsResponse200DeployHooks$outboundSchema` instead. */
    GetProjectsLinkProjectsResponse200DeployHooks$.outboundSchema = GetProjectsLinkProjectsResponse200DeployHooks$outboundSchema;
})(GetProjectsLinkProjectsResponse200DeployHooks$ || (GetProjectsLinkProjectsResponse200DeployHooks$ = {}));
export function getProjectsLinkProjectsResponse200DeployHooksToJSON(getProjectsLinkProjectsResponse200DeployHooks) {
    return JSON.stringify(GetProjectsLinkProjectsResponse200DeployHooks$outboundSchema.parse(getProjectsLinkProjectsResponse200DeployHooks));
}
export function getProjectsLinkProjectsResponse200DeployHooksFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsLinkProjectsResponse200DeployHooks$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsLinkProjectsResponse200DeployHooks' from JSON`);
}
/** @internal */
export const GetProjectsLink4$inboundSchema = z.object({
    projectId: z.string(),
    projectName: z.string(),
    projectNameWithNamespace: z.string(),
    projectNamespace: z.string(),
    projectOwnerId: z.number().optional(),
    projectUrl: z.string(),
    type: GetProjectsLinkProjectsResponse200Type$inboundSchema,
    createdAt: z.number().optional(),
    deployHooks: z.array(z.lazy(() => GetProjectsLinkProjectsResponse200DeployHooks$inboundSchema)),
    gitCredentialId: z.string(),
    updatedAt: z.number().optional(),
    sourceless: z.boolean().optional(),
    productionBranch: z.string(),
});
/** @internal */
export const GetProjectsLink4$outboundSchema = z.object({
    projectId: z.string(),
    projectName: z.string(),
    projectNameWithNamespace: z.string(),
    projectNamespace: z.string(),
    projectOwnerId: z.number().optional(),
    projectUrl: z.string(),
    type: GetProjectsLinkProjectsResponse200Type$outboundSchema,
    createdAt: z.number().optional(),
    deployHooks: z.array(z.lazy(() => GetProjectsLinkProjectsResponse200DeployHooks$outboundSchema)),
    gitCredentialId: z.string(),
    updatedAt: z.number().optional(),
    sourceless: z.boolean().optional(),
    productionBranch: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsLink4$;
(function (GetProjectsLink4$) {
    /** @deprecated use `GetProjectsLink4$inboundSchema` instead. */
    GetProjectsLink4$.inboundSchema = GetProjectsLink4$inboundSchema;
    /** @deprecated use `GetProjectsLink4$outboundSchema` instead. */
    GetProjectsLink4$.outboundSchema = GetProjectsLink4$outboundSchema;
})(GetProjectsLink4$ || (GetProjectsLink4$ = {}));
export function getProjectsLink4ToJSON(getProjectsLink4) {
    return JSON.stringify(GetProjectsLink4$outboundSchema.parse(getProjectsLink4));
}
export function getProjectsLink4FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsLink4$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsLink4' from JSON`);
}
/** @internal */
export const GetProjectsLinkProjectsResponseType$inboundSchema = z.nativeEnum(GetProjectsLinkProjectsResponseType);
/** @internal */
export const GetProjectsLinkProjectsResponseType$outboundSchema = GetProjectsLinkProjectsResponseType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsLinkProjectsResponseType$;
(function (GetProjectsLinkProjectsResponseType$) {
    /** @deprecated use `GetProjectsLinkProjectsResponseType$inboundSchema` instead. */
    GetProjectsLinkProjectsResponseType$.inboundSchema = GetProjectsLinkProjectsResponseType$inboundSchema;
    /** @deprecated use `GetProjectsLinkProjectsResponseType$outboundSchema` instead. */
    GetProjectsLinkProjectsResponseType$.outboundSchema = GetProjectsLinkProjectsResponseType$outboundSchema;
})(GetProjectsLinkProjectsResponseType$ || (GetProjectsLinkProjectsResponseType$ = {}));
/** @internal */
export const GetProjectsLinkProjectsResponseDeployHooks$inboundSchema = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
});
/** @internal */
export const GetProjectsLinkProjectsResponseDeployHooks$outboundSchema = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsLinkProjectsResponseDeployHooks$;
(function (GetProjectsLinkProjectsResponseDeployHooks$) {
    /** @deprecated use `GetProjectsLinkProjectsResponseDeployHooks$inboundSchema` instead. */
    GetProjectsLinkProjectsResponseDeployHooks$.inboundSchema = GetProjectsLinkProjectsResponseDeployHooks$inboundSchema;
    /** @deprecated use `GetProjectsLinkProjectsResponseDeployHooks$outboundSchema` instead. */
    GetProjectsLinkProjectsResponseDeployHooks$.outboundSchema = GetProjectsLinkProjectsResponseDeployHooks$outboundSchema;
})(GetProjectsLinkProjectsResponseDeployHooks$ || (GetProjectsLinkProjectsResponseDeployHooks$ = {}));
export function getProjectsLinkProjectsResponseDeployHooksToJSON(getProjectsLinkProjectsResponseDeployHooks) {
    return JSON.stringify(GetProjectsLinkProjectsResponseDeployHooks$outboundSchema.parse(getProjectsLinkProjectsResponseDeployHooks));
}
export function getProjectsLinkProjectsResponseDeployHooksFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsLinkProjectsResponseDeployHooks$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsLinkProjectsResponseDeployHooks' from JSON`);
}
/** @internal */
export const GetProjectsLink3$inboundSchema = z.object({
    org: z.string(),
    repoOwnerId: z.number().optional(),
    repo: z.string().optional(),
    repoId: z.number().optional(),
    type: GetProjectsLinkProjectsResponseType$inboundSchema,
    host: z.string(),
    createdAt: z.number().optional(),
    deployHooks: z.array(z.lazy(() => GetProjectsLinkProjectsResponseDeployHooks$inboundSchema)),
    gitCredentialId: z.string(),
    updatedAt: z.number().optional(),
    sourceless: z.boolean().optional(),
    productionBranch: z.string(),
});
/** @internal */
export const GetProjectsLink3$outboundSchema = z.object({
    org: z.string(),
    repoOwnerId: z.number().optional(),
    repo: z.string().optional(),
    repoId: z.number().optional(),
    type: GetProjectsLinkProjectsResponseType$outboundSchema,
    host: z.string(),
    createdAt: z.number().optional(),
    deployHooks: z.array(z.lazy(() => GetProjectsLinkProjectsResponseDeployHooks$outboundSchema)),
    gitCredentialId: z.string(),
    updatedAt: z.number().optional(),
    sourceless: z.boolean().optional(),
    productionBranch: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsLink3$;
(function (GetProjectsLink3$) {
    /** @deprecated use `GetProjectsLink3$inboundSchema` instead. */
    GetProjectsLink3$.inboundSchema = GetProjectsLink3$inboundSchema;
    /** @deprecated use `GetProjectsLink3$outboundSchema` instead. */
    GetProjectsLink3$.outboundSchema = GetProjectsLink3$outboundSchema;
})(GetProjectsLink3$ || (GetProjectsLink3$ = {}));
export function getProjectsLink3ToJSON(getProjectsLink3) {
    return JSON.stringify(GetProjectsLink3$outboundSchema.parse(getProjectsLink3));
}
export function getProjectsLink3FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsLink3$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsLink3' from JSON`);
}
/** @internal */
export const GetProjectsLinkProjectsType$inboundSchema = z.nativeEnum(GetProjectsLinkProjectsType);
/** @internal */
export const GetProjectsLinkProjectsType$outboundSchema = GetProjectsLinkProjectsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsLinkProjectsType$;
(function (GetProjectsLinkProjectsType$) {
    /** @deprecated use `GetProjectsLinkProjectsType$inboundSchema` instead. */
    GetProjectsLinkProjectsType$.inboundSchema = GetProjectsLinkProjectsType$inboundSchema;
    /** @deprecated use `GetProjectsLinkProjectsType$outboundSchema` instead. */
    GetProjectsLinkProjectsType$.outboundSchema = GetProjectsLinkProjectsType$outboundSchema;
})(GetProjectsLinkProjectsType$ || (GetProjectsLinkProjectsType$ = {}));
/** @internal */
export const GetProjectsLinkProjectsDeployHooks$inboundSchema = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
});
/** @internal */
export const GetProjectsLinkProjectsDeployHooks$outboundSchema = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsLinkProjectsDeployHooks$;
(function (GetProjectsLinkProjectsDeployHooks$) {
    /** @deprecated use `GetProjectsLinkProjectsDeployHooks$inboundSchema` instead. */
    GetProjectsLinkProjectsDeployHooks$.inboundSchema = GetProjectsLinkProjectsDeployHooks$inboundSchema;
    /** @deprecated use `GetProjectsLinkProjectsDeployHooks$outboundSchema` instead. */
    GetProjectsLinkProjectsDeployHooks$.outboundSchema = GetProjectsLinkProjectsDeployHooks$outboundSchema;
})(GetProjectsLinkProjectsDeployHooks$ || (GetProjectsLinkProjectsDeployHooks$ = {}));
export function getProjectsLinkProjectsDeployHooksToJSON(getProjectsLinkProjectsDeployHooks) {
    return JSON.stringify(GetProjectsLinkProjectsDeployHooks$outboundSchema.parse(getProjectsLinkProjectsDeployHooks));
}
export function getProjectsLinkProjectsDeployHooksFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsLinkProjectsDeployHooks$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsLinkProjectsDeployHooks' from JSON`);
}
/** @internal */
export const GetProjectsLink2$inboundSchema = z.object({
    type: GetProjectsLinkProjectsType$inboundSchema,
    repo: z.string().optional(),
    repoId: z.number().optional(),
    updatedAt: z.number().optional(),
    createdAt: z.number().optional(),
    org: z.string(),
    repoOwnerId: z.number().optional(),
    deployHooks: z.array(z.lazy(() => GetProjectsLinkProjectsDeployHooks$inboundSchema)),
    gitCredentialId: z.string(),
    sourceless: z.boolean().optional(),
    productionBranch: z.string(),
});
/** @internal */
export const GetProjectsLink2$outboundSchema = z.object({
    type: GetProjectsLinkProjectsType$outboundSchema,
    repo: z.string().optional(),
    repoId: z.number().optional(),
    updatedAt: z.number().optional(),
    createdAt: z.number().optional(),
    org: z.string(),
    repoOwnerId: z.number().optional(),
    deployHooks: z.array(z.lazy(() => GetProjectsLinkProjectsDeployHooks$outboundSchema)),
    gitCredentialId: z.string(),
    sourceless: z.boolean().optional(),
    productionBranch: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsLink2$;
(function (GetProjectsLink2$) {
    /** @deprecated use `GetProjectsLink2$inboundSchema` instead. */
    GetProjectsLink2$.inboundSchema = GetProjectsLink2$inboundSchema;
    /** @deprecated use `GetProjectsLink2$outboundSchema` instead. */
    GetProjectsLink2$.outboundSchema = GetProjectsLink2$outboundSchema;
})(GetProjectsLink2$ || (GetProjectsLink2$ = {}));
export function getProjectsLink2ToJSON(getProjectsLink2) {
    return JSON.stringify(GetProjectsLink2$outboundSchema.parse(getProjectsLink2));
}
export function getProjectsLink2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsLink2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsLink2' from JSON`);
}
/** @internal */
export const GetProjectsLinkType$inboundSchema = z.nativeEnum(GetProjectsLinkType);
/** @internal */
export const GetProjectsLinkType$outboundSchema = GetProjectsLinkType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsLinkType$;
(function (GetProjectsLinkType$) {
    /** @deprecated use `GetProjectsLinkType$inboundSchema` instead. */
    GetProjectsLinkType$.inboundSchema = GetProjectsLinkType$inboundSchema;
    /** @deprecated use `GetProjectsLinkType$outboundSchema` instead. */
    GetProjectsLinkType$.outboundSchema = GetProjectsLinkType$outboundSchema;
})(GetProjectsLinkType$ || (GetProjectsLinkType$ = {}));
/** @internal */
export const GetProjectsLinkDeployHooks$inboundSchema = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
});
/** @internal */
export const GetProjectsLinkDeployHooks$outboundSchema = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsLinkDeployHooks$;
(function (GetProjectsLinkDeployHooks$) {
    /** @deprecated use `GetProjectsLinkDeployHooks$inboundSchema` instead. */
    GetProjectsLinkDeployHooks$.inboundSchema = GetProjectsLinkDeployHooks$inboundSchema;
    /** @deprecated use `GetProjectsLinkDeployHooks$outboundSchema` instead. */
    GetProjectsLinkDeployHooks$.outboundSchema = GetProjectsLinkDeployHooks$outboundSchema;
})(GetProjectsLinkDeployHooks$ || (GetProjectsLinkDeployHooks$ = {}));
export function getProjectsLinkDeployHooksToJSON(getProjectsLinkDeployHooks) {
    return JSON.stringify(GetProjectsLinkDeployHooks$outboundSchema.parse(getProjectsLinkDeployHooks));
}
export function getProjectsLinkDeployHooksFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsLinkDeployHooks$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsLinkDeployHooks' from JSON`);
}
/** @internal */
export const GetProjectsLink1$inboundSchema = z.object({
    org: z.string(),
    repoOwnerId: z.number().optional(),
    repo: z.string().optional(),
    repoId: z.number().optional(),
    type: GetProjectsLinkType$inboundSchema,
    createdAt: z.number().optional(),
    deployHooks: z.array(z.lazy(() => GetProjectsLinkDeployHooks$inboundSchema)),
    gitCredentialId: z.string(),
    updatedAt: z.number().optional(),
    sourceless: z.boolean().optional(),
    productionBranch: z.string(),
});
/** @internal */
export const GetProjectsLink1$outboundSchema = z.object({
    org: z.string(),
    repoOwnerId: z.number().optional(),
    repo: z.string().optional(),
    repoId: z.number().optional(),
    type: GetProjectsLinkType$outboundSchema,
    createdAt: z.number().optional(),
    deployHooks: z.array(z.lazy(() => GetProjectsLinkDeployHooks$outboundSchema)),
    gitCredentialId: z.string(),
    updatedAt: z.number().optional(),
    sourceless: z.boolean().optional(),
    productionBranch: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsLink1$;
(function (GetProjectsLink1$) {
    /** @deprecated use `GetProjectsLink1$inboundSchema` instead. */
    GetProjectsLink1$.inboundSchema = GetProjectsLink1$inboundSchema;
    /** @deprecated use `GetProjectsLink1$outboundSchema` instead. */
    GetProjectsLink1$.outboundSchema = GetProjectsLink1$outboundSchema;
})(GetProjectsLink1$ || (GetProjectsLink1$ = {}));
export function getProjectsLink1ToJSON(getProjectsLink1) {
    return JSON.stringify(GetProjectsLink1$outboundSchema.parse(getProjectsLink1));
}
export function getProjectsLink1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsLink1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsLink1' from JSON`);
}
/** @internal */
export const GetProjectsLink$inboundSchema = z.union([
    z.lazy(() => GetProjectsLink4$inboundSchema),
    z.lazy(() => GetProjectsLink5$inboundSchema),
    z.lazy(() => GetProjectsLink3$inboundSchema),
    z.lazy(() => GetProjectsLink1$inboundSchema),
    z.lazy(() => GetProjectsLink2$inboundSchema),
]);
/** @internal */
export const GetProjectsLink$outboundSchema = z.union([
    z.lazy(() => GetProjectsLink4$outboundSchema),
    z.lazy(() => GetProjectsLink5$outboundSchema),
    z.lazy(() => GetProjectsLink3$outboundSchema),
    z.lazy(() => GetProjectsLink1$outboundSchema),
    z.lazy(() => GetProjectsLink2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsLink$;
(function (GetProjectsLink$) {
    /** @deprecated use `GetProjectsLink$inboundSchema` instead. */
    GetProjectsLink$.inboundSchema = GetProjectsLink$inboundSchema;
    /** @deprecated use `GetProjectsLink$outboundSchema` instead. */
    GetProjectsLink$.outboundSchema = GetProjectsLink$outboundSchema;
})(GetProjectsLink$ || (GetProjectsLink$ = {}));
export function getProjectsLinkToJSON(getProjectsLink) {
    return JSON.stringify(GetProjectsLink$outboundSchema.parse(getProjectsLink));
}
export function getProjectsLinkFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsLink$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsLink' from JSON`);
}
/** @internal */
export const GetProjectsMicrofrontends2$inboundSchema = z.object({
    updatedAt: z.number(),
    groupIds: z.array(z.any()),
    enabled: z.boolean(),
});
/** @internal */
export const GetProjectsMicrofrontends2$outboundSchema = z.object({
    updatedAt: z.number(),
    groupIds: z.array(z.any()),
    enabled: z.boolean(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsMicrofrontends2$;
(function (GetProjectsMicrofrontends2$) {
    /** @deprecated use `GetProjectsMicrofrontends2$inboundSchema` instead. */
    GetProjectsMicrofrontends2$.inboundSchema = GetProjectsMicrofrontends2$inboundSchema;
    /** @deprecated use `GetProjectsMicrofrontends2$outboundSchema` instead. */
    GetProjectsMicrofrontends2$.outboundSchema = GetProjectsMicrofrontends2$outboundSchema;
})(GetProjectsMicrofrontends2$ || (GetProjectsMicrofrontends2$ = {}));
export function getProjectsMicrofrontends2ToJSON(getProjectsMicrofrontends2) {
    return JSON.stringify(GetProjectsMicrofrontends2$outboundSchema.parse(getProjectsMicrofrontends2));
}
export function getProjectsMicrofrontends2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsMicrofrontends2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsMicrofrontends2' from JSON`);
}
/** @internal */
export const GetProjectsMicrofrontends1$inboundSchema = z.object({
    updatedAt: z.number(),
    groupIds: z.array(z.string()),
    enabled: z.boolean(),
    isDefaultApp: z.boolean().optional(),
    defaultRoute: z.string().optional(),
    routeObservabilityToThisProject: z.boolean().optional(),
});
/** @internal */
export const GetProjectsMicrofrontends1$outboundSchema = z.object({
    updatedAt: z.number(),
    groupIds: z.array(z.string()),
    enabled: z.boolean(),
    isDefaultApp: z.boolean().optional(),
    defaultRoute: z.string().optional(),
    routeObservabilityToThisProject: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsMicrofrontends1$;
(function (GetProjectsMicrofrontends1$) {
    /** @deprecated use `GetProjectsMicrofrontends1$inboundSchema` instead. */
    GetProjectsMicrofrontends1$.inboundSchema = GetProjectsMicrofrontends1$inboundSchema;
    /** @deprecated use `GetProjectsMicrofrontends1$outboundSchema` instead. */
    GetProjectsMicrofrontends1$.outboundSchema = GetProjectsMicrofrontends1$outboundSchema;
})(GetProjectsMicrofrontends1$ || (GetProjectsMicrofrontends1$ = {}));
export function getProjectsMicrofrontends1ToJSON(getProjectsMicrofrontends1) {
    return JSON.stringify(GetProjectsMicrofrontends1$outboundSchema.parse(getProjectsMicrofrontends1));
}
export function getProjectsMicrofrontends1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsMicrofrontends1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsMicrofrontends1' from JSON`);
}
/** @internal */
export const GetProjectsMicrofrontends$inboundSchema = z.union([
    z.lazy(() => GetProjectsMicrofrontends1$inboundSchema),
    z.lazy(() => GetProjectsMicrofrontends2$inboundSchema),
]);
/** @internal */
export const GetProjectsMicrofrontends$outboundSchema = z.union([
    z.lazy(() => GetProjectsMicrofrontends1$outboundSchema),
    z.lazy(() => GetProjectsMicrofrontends2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsMicrofrontends$;
(function (GetProjectsMicrofrontends$) {
    /** @deprecated use `GetProjectsMicrofrontends$inboundSchema` instead. */
    GetProjectsMicrofrontends$.inboundSchema = GetProjectsMicrofrontends$inboundSchema;
    /** @deprecated use `GetProjectsMicrofrontends$outboundSchema` instead. */
    GetProjectsMicrofrontends$.outboundSchema = GetProjectsMicrofrontends$outboundSchema;
})(GetProjectsMicrofrontends$ || (GetProjectsMicrofrontends$ = {}));
export function getProjectsMicrofrontendsToJSON(getProjectsMicrofrontends) {
    return JSON.stringify(GetProjectsMicrofrontends$outboundSchema.parse(getProjectsMicrofrontends));
}
export function getProjectsMicrofrontendsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsMicrofrontends$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsMicrofrontends' from JSON`);
}
/** @internal */
export const GetProjectsNodeVersion$inboundSchema = z.nativeEnum(GetProjectsNodeVersion);
/** @internal */
export const GetProjectsNodeVersion$outboundSchema = GetProjectsNodeVersion$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsNodeVersion$;
(function (GetProjectsNodeVersion$) {
    /** @deprecated use `GetProjectsNodeVersion$inboundSchema` instead. */
    GetProjectsNodeVersion$.inboundSchema = GetProjectsNodeVersion$inboundSchema;
    /** @deprecated use `GetProjectsNodeVersion$outboundSchema` instead. */
    GetProjectsNodeVersion$.outboundSchema = GetProjectsNodeVersion$outboundSchema;
})(GetProjectsNodeVersion$ || (GetProjectsNodeVersion$ = {}));
/** @internal */
export const GetProjectsPaths$inboundSchema = z.object({
    value: z.string(),
});
/** @internal */
export const GetProjectsPaths$outboundSchema = z.object({
    value: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsPaths$;
(function (GetProjectsPaths$) {
    /** @deprecated use `GetProjectsPaths$inboundSchema` instead. */
    GetProjectsPaths$.inboundSchema = GetProjectsPaths$inboundSchema;
    /** @deprecated use `GetProjectsPaths$outboundSchema` instead. */
    GetProjectsPaths$.outboundSchema = GetProjectsPaths$outboundSchema;
})(GetProjectsPaths$ || (GetProjectsPaths$ = {}));
export function getProjectsPathsToJSON(getProjectsPaths) {
    return JSON.stringify(GetProjectsPaths$outboundSchema.parse(getProjectsPaths));
}
export function getProjectsPathsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsPaths$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsPaths' from JSON`);
}
/** @internal */
export const GetProjectsOptionsAllowlist$inboundSchema = z.object({
    paths: z.array(z.lazy(() => GetProjectsPaths$inboundSchema)),
});
/** @internal */
export const GetProjectsOptionsAllowlist$outboundSchema = z.object({
    paths: z.array(z.lazy(() => GetProjectsPaths$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsOptionsAllowlist$;
(function (GetProjectsOptionsAllowlist$) {
    /** @deprecated use `GetProjectsOptionsAllowlist$inboundSchema` instead. */
    GetProjectsOptionsAllowlist$.inboundSchema = GetProjectsOptionsAllowlist$inboundSchema;
    /** @deprecated use `GetProjectsOptionsAllowlist$outboundSchema` instead. */
    GetProjectsOptionsAllowlist$.outboundSchema = GetProjectsOptionsAllowlist$outboundSchema;
})(GetProjectsOptionsAllowlist$ || (GetProjectsOptionsAllowlist$ = {}));
export function getProjectsOptionsAllowlistToJSON(getProjectsOptionsAllowlist) {
    return JSON.stringify(GetProjectsOptionsAllowlist$outboundSchema.parse(getProjectsOptionsAllowlist));
}
export function getProjectsOptionsAllowlistFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsOptionsAllowlist$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsOptionsAllowlist' from JSON`);
}
/** @internal */
export const GetProjectsPasswordProtection$inboundSchema = z.object({});
/** @internal */
export const GetProjectsPasswordProtection$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsPasswordProtection$;
(function (GetProjectsPasswordProtection$) {
    /** @deprecated use `GetProjectsPasswordProtection$inboundSchema` instead. */
    GetProjectsPasswordProtection$.inboundSchema = GetProjectsPasswordProtection$inboundSchema;
    /** @deprecated use `GetProjectsPasswordProtection$outboundSchema` instead. */
    GetProjectsPasswordProtection$.outboundSchema = GetProjectsPasswordProtection$outboundSchema;
})(GetProjectsPasswordProtection$ || (GetProjectsPasswordProtection$ = {}));
export function getProjectsPasswordProtectionToJSON(getProjectsPasswordProtection) {
    return JSON.stringify(GetProjectsPasswordProtection$outboundSchema.parse(getProjectsPasswordProtection));
}
export function getProjectsPasswordProtectionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsPasswordProtection$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsPasswordProtection' from JSON`);
}
/** @internal */
export const GetProjectsFunctionDefaultMemoryType$inboundSchema = z.nativeEnum(GetProjectsFunctionDefaultMemoryType);
/** @internal */
export const GetProjectsFunctionDefaultMemoryType$outboundSchema = GetProjectsFunctionDefaultMemoryType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsFunctionDefaultMemoryType$;
(function (GetProjectsFunctionDefaultMemoryType$) {
    /** @deprecated use `GetProjectsFunctionDefaultMemoryType$inboundSchema` instead. */
    GetProjectsFunctionDefaultMemoryType$.inboundSchema = GetProjectsFunctionDefaultMemoryType$inboundSchema;
    /** @deprecated use `GetProjectsFunctionDefaultMemoryType$outboundSchema` instead. */
    GetProjectsFunctionDefaultMemoryType$.outboundSchema = GetProjectsFunctionDefaultMemoryType$outboundSchema;
})(GetProjectsFunctionDefaultMemoryType$ || (GetProjectsFunctionDefaultMemoryType$ = {}));
/** @internal */
export const GetProjectsBuildMachineType$inboundSchema = z.nativeEnum(GetProjectsBuildMachineType);
/** @internal */
export const GetProjectsBuildMachineType$outboundSchema = GetProjectsBuildMachineType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsBuildMachineType$;
(function (GetProjectsBuildMachineType$) {
    /** @deprecated use `GetProjectsBuildMachineType$inboundSchema` instead. */
    GetProjectsBuildMachineType$.inboundSchema = GetProjectsBuildMachineType$inboundSchema;
    /** @deprecated use `GetProjectsBuildMachineType$outboundSchema` instead. */
    GetProjectsBuildMachineType$.outboundSchema = GetProjectsBuildMachineType$outboundSchema;
})(GetProjectsBuildMachineType$ || (GetProjectsBuildMachineType$ = {}));
/** @internal */
export const GetProjectsResourceConfig$inboundSchema = z.object({
    elasticConcurrencyEnabled: z.boolean().optional(),
    fluid: z.boolean().optional(),
    functionDefaultRegions: z.array(z.string()),
    functionDefaultTimeout: z.number().optional(),
    functionDefaultMemoryType: GetProjectsFunctionDefaultMemoryType$inboundSchema
        .optional(),
    functionZeroConfigFailover: z.boolean().optional(),
    buildMachineType: GetProjectsBuildMachineType$inboundSchema.optional(),
    isNSNBDisabled: z.boolean().optional(),
});
/** @internal */
export const GetProjectsResourceConfig$outboundSchema = z.object({
    elasticConcurrencyEnabled: z.boolean().optional(),
    fluid: z.boolean().optional(),
    functionDefaultRegions: z.array(z.string()),
    functionDefaultTimeout: z.number().optional(),
    functionDefaultMemoryType: GetProjectsFunctionDefaultMemoryType$outboundSchema
        .optional(),
    functionZeroConfigFailover: z.boolean().optional(),
    buildMachineType: GetProjectsBuildMachineType$outboundSchema.optional(),
    isNSNBDisabled: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsResourceConfig$;
(function (GetProjectsResourceConfig$) {
    /** @deprecated use `GetProjectsResourceConfig$inboundSchema` instead. */
    GetProjectsResourceConfig$.inboundSchema = GetProjectsResourceConfig$inboundSchema;
    /** @deprecated use `GetProjectsResourceConfig$outboundSchema` instead. */
    GetProjectsResourceConfig$.outboundSchema = GetProjectsResourceConfig$outboundSchema;
})(GetProjectsResourceConfig$ || (GetProjectsResourceConfig$ = {}));
export function getProjectsResourceConfigToJSON(getProjectsResourceConfig) {
    return JSON.stringify(GetProjectsResourceConfig$outboundSchema.parse(getProjectsResourceConfig));
}
export function getProjectsResourceConfigFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsResourceConfig$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsResourceConfig' from JSON`);
}
/** @internal */
export const GetProjectsRollbackDescription$inboundSchema = z.object({
    userId: z.string(),
    username: z.string(),
    description: z.string(),
    createdAt: z.number(),
});
/** @internal */
export const GetProjectsRollbackDescription$outboundSchema = z.object({
    userId: z.string(),
    username: z.string(),
    description: z.string(),
    createdAt: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsRollbackDescription$;
(function (GetProjectsRollbackDescription$) {
    /** @deprecated use `GetProjectsRollbackDescription$inboundSchema` instead. */
    GetProjectsRollbackDescription$.inboundSchema = GetProjectsRollbackDescription$inboundSchema;
    /** @deprecated use `GetProjectsRollbackDescription$outboundSchema` instead. */
    GetProjectsRollbackDescription$.outboundSchema = GetProjectsRollbackDescription$outboundSchema;
})(GetProjectsRollbackDescription$ || (GetProjectsRollbackDescription$ = {}));
export function getProjectsRollbackDescriptionToJSON(getProjectsRollbackDescription) {
    return JSON.stringify(GetProjectsRollbackDescription$outboundSchema.parse(getProjectsRollbackDescription));
}
export function getProjectsRollbackDescriptionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsRollbackDescription$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsRollbackDescription' from JSON`);
}
/** @internal */
export const GetProjectsStages$inboundSchema = z.object({
    targetPercentage: z.number(),
    requireApproval: z.boolean().optional(),
    duration: z.number().optional(),
});
/** @internal */
export const GetProjectsStages$outboundSchema = z.object({
    targetPercentage: z.number(),
    requireApproval: z.boolean().optional(),
    duration: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsStages$;
(function (GetProjectsStages$) {
    /** @deprecated use `GetProjectsStages$inboundSchema` instead. */
    GetProjectsStages$.inboundSchema = GetProjectsStages$inboundSchema;
    /** @deprecated use `GetProjectsStages$outboundSchema` instead. */
    GetProjectsStages$.outboundSchema = GetProjectsStages$outboundSchema;
})(GetProjectsStages$ || (GetProjectsStages$ = {}));
export function getProjectsStagesToJSON(getProjectsStages) {
    return JSON.stringify(GetProjectsStages$outboundSchema.parse(getProjectsStages));
}
export function getProjectsStagesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsStages$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsStages' from JSON`);
}
/** @internal */
export const GetProjectsRollingRelease$inboundSchema = z.object({
    target: z.string(),
    stages: z.nullable(z.array(z.lazy(() => GetProjectsStages$inboundSchema)))
        .optional(),
    canaryResponseHeader: z.boolean().optional(),
});
/** @internal */
export const GetProjectsRollingRelease$outboundSchema = z.object({
    target: z.string(),
    stages: z.nullable(z.array(z.lazy(() => GetProjectsStages$outboundSchema)))
        .optional(),
    canaryResponseHeader: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsRollingRelease$;
(function (GetProjectsRollingRelease$) {
    /** @deprecated use `GetProjectsRollingRelease$inboundSchema` instead. */
    GetProjectsRollingRelease$.inboundSchema = GetProjectsRollingRelease$inboundSchema;
    /** @deprecated use `GetProjectsRollingRelease$outboundSchema` instead. */
    GetProjectsRollingRelease$.outboundSchema = GetProjectsRollingRelease$outboundSchema;
})(GetProjectsRollingRelease$ || (GetProjectsRollingRelease$ = {}));
export function getProjectsRollingReleaseToJSON(getProjectsRollingRelease) {
    return JSON.stringify(GetProjectsRollingRelease$outboundSchema.parse(getProjectsRollingRelease));
}
export function getProjectsRollingReleaseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsRollingRelease$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsRollingRelease' from JSON`);
}
/** @internal */
export const GetProjectsProjectsFunctionDefaultMemoryType$inboundSchema = z
    .nativeEnum(GetProjectsProjectsFunctionDefaultMemoryType);
/** @internal */
export const GetProjectsProjectsFunctionDefaultMemoryType$outboundSchema = GetProjectsProjectsFunctionDefaultMemoryType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsProjectsFunctionDefaultMemoryType$;
(function (GetProjectsProjectsFunctionDefaultMemoryType$) {
    /** @deprecated use `GetProjectsProjectsFunctionDefaultMemoryType$inboundSchema` instead. */
    GetProjectsProjectsFunctionDefaultMemoryType$.inboundSchema = GetProjectsProjectsFunctionDefaultMemoryType$inboundSchema;
    /** @deprecated use `GetProjectsProjectsFunctionDefaultMemoryType$outboundSchema` instead. */
    GetProjectsProjectsFunctionDefaultMemoryType$.outboundSchema = GetProjectsProjectsFunctionDefaultMemoryType$outboundSchema;
})(GetProjectsProjectsFunctionDefaultMemoryType$ || (GetProjectsProjectsFunctionDefaultMemoryType$ = {}));
/** @internal */
export const GetProjectsProjectsBuildMachineType$inboundSchema = z.nativeEnum(GetProjectsProjectsBuildMachineType);
/** @internal */
export const GetProjectsProjectsBuildMachineType$outboundSchema = GetProjectsProjectsBuildMachineType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsProjectsBuildMachineType$;
(function (GetProjectsProjectsBuildMachineType$) {
    /** @deprecated use `GetProjectsProjectsBuildMachineType$inboundSchema` instead. */
    GetProjectsProjectsBuildMachineType$.inboundSchema = GetProjectsProjectsBuildMachineType$inboundSchema;
    /** @deprecated use `GetProjectsProjectsBuildMachineType$outboundSchema` instead. */
    GetProjectsProjectsBuildMachineType$.outboundSchema = GetProjectsProjectsBuildMachineType$outboundSchema;
})(GetProjectsProjectsBuildMachineType$ || (GetProjectsProjectsBuildMachineType$ = {}));
/** @internal */
export const GetProjectsDefaultResourceConfig$inboundSchema = z.object({
    elasticConcurrencyEnabled: z.boolean().optional(),
    fluid: z.boolean().optional(),
    functionDefaultRegions: z.array(z.string()),
    functionDefaultTimeout: z.number().optional(),
    functionDefaultMemoryType: GetProjectsProjectsFunctionDefaultMemoryType$inboundSchema.optional(),
    functionZeroConfigFailover: z.boolean().optional(),
    buildMachineType: GetProjectsProjectsBuildMachineType$inboundSchema
        .optional(),
    isNSNBDisabled: z.boolean().optional(),
});
/** @internal */
export const GetProjectsDefaultResourceConfig$outboundSchema = z.object({
    elasticConcurrencyEnabled: z.boolean().optional(),
    fluid: z.boolean().optional(),
    functionDefaultRegions: z.array(z.string()),
    functionDefaultTimeout: z.number().optional(),
    functionDefaultMemoryType: GetProjectsProjectsFunctionDefaultMemoryType$outboundSchema.optional(),
    functionZeroConfigFailover: z.boolean().optional(),
    buildMachineType: GetProjectsProjectsBuildMachineType$outboundSchema
        .optional(),
    isNSNBDisabled: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsDefaultResourceConfig$;
(function (GetProjectsDefaultResourceConfig$) {
    /** @deprecated use `GetProjectsDefaultResourceConfig$inboundSchema` instead. */
    GetProjectsDefaultResourceConfig$.inboundSchema = GetProjectsDefaultResourceConfig$inboundSchema;
    /** @deprecated use `GetProjectsDefaultResourceConfig$outboundSchema` instead. */
    GetProjectsDefaultResourceConfig$.outboundSchema = GetProjectsDefaultResourceConfig$outboundSchema;
})(GetProjectsDefaultResourceConfig$ || (GetProjectsDefaultResourceConfig$ = {}));
export function getProjectsDefaultResourceConfigToJSON(getProjectsDefaultResourceConfig) {
    return JSON.stringify(GetProjectsDefaultResourceConfig$outboundSchema.parse(getProjectsDefaultResourceConfig));
}
export function getProjectsDefaultResourceConfigFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsDefaultResourceConfig$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsDefaultResourceConfig' from JSON`);
}
/** @internal */
export const GetProjectsDeploymentType$inboundSchema = z.nativeEnum(GetProjectsDeploymentType);
/** @internal */
export const GetProjectsDeploymentType$outboundSchema = GetProjectsDeploymentType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsDeploymentType$;
(function (GetProjectsDeploymentType$) {
    /** @deprecated use `GetProjectsDeploymentType$inboundSchema` instead. */
    GetProjectsDeploymentType$.inboundSchema = GetProjectsDeploymentType$inboundSchema;
    /** @deprecated use `GetProjectsDeploymentType$outboundSchema` instead. */
    GetProjectsDeploymentType$.outboundSchema = GetProjectsDeploymentType$outboundSchema;
})(GetProjectsDeploymentType$ || (GetProjectsDeploymentType$ = {}));
/** @internal */
export const GetProjectsSsoProtection$inboundSchema = z.object({
    deploymentType: GetProjectsDeploymentType$inboundSchema,
});
/** @internal */
export const GetProjectsSsoProtection$outboundSchema = z.object({
    deploymentType: GetProjectsDeploymentType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsSsoProtection$;
(function (GetProjectsSsoProtection$) {
    /** @deprecated use `GetProjectsSsoProtection$inboundSchema` instead. */
    GetProjectsSsoProtection$.inboundSchema = GetProjectsSsoProtection$inboundSchema;
    /** @deprecated use `GetProjectsSsoProtection$outboundSchema` instead. */
    GetProjectsSsoProtection$.outboundSchema = GetProjectsSsoProtection$outboundSchema;
})(GetProjectsSsoProtection$ || (GetProjectsSsoProtection$ = {}));
export function getProjectsSsoProtectionToJSON(getProjectsSsoProtection) {
    return JSON.stringify(GetProjectsSsoProtection$outboundSchema.parse(getProjectsSsoProtection));
}
export function getProjectsSsoProtectionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsSsoProtection$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsSsoProtection' from JSON`);
}
/** @internal */
export const GetProjectsProjectsAliasAssigned$inboundSchema = z.union([z.number(), z.boolean()]);
/** @internal */
export const GetProjectsProjectsAliasAssigned$outboundSchema = z.union([z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsProjectsAliasAssigned$;
(function (GetProjectsProjectsAliasAssigned$) {
    /** @deprecated use `GetProjectsProjectsAliasAssigned$inboundSchema` instead. */
    GetProjectsProjectsAliasAssigned$.inboundSchema = GetProjectsProjectsAliasAssigned$inboundSchema;
    /** @deprecated use `GetProjectsProjectsAliasAssigned$outboundSchema` instead. */
    GetProjectsProjectsAliasAssigned$.outboundSchema = GetProjectsProjectsAliasAssigned$outboundSchema;
})(GetProjectsProjectsAliasAssigned$ || (GetProjectsProjectsAliasAssigned$ = {}));
export function getProjectsProjectsAliasAssignedToJSON(getProjectsProjectsAliasAssigned) {
    return JSON.stringify(GetProjectsProjectsAliasAssigned$outboundSchema.parse(getProjectsProjectsAliasAssigned));
}
export function getProjectsProjectsAliasAssignedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsProjectsAliasAssigned$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsProjectsAliasAssigned' from JSON`);
}
/** @internal */
export const GetProjectsProjectsAliasError$inboundSchema = z.object({
    code: z.string(),
    message: z.string(),
});
/** @internal */
export const GetProjectsProjectsAliasError$outboundSchema = z.object({
    code: z.string(),
    message: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsProjectsAliasError$;
(function (GetProjectsProjectsAliasError$) {
    /** @deprecated use `GetProjectsProjectsAliasError$inboundSchema` instead. */
    GetProjectsProjectsAliasError$.inboundSchema = GetProjectsProjectsAliasError$inboundSchema;
    /** @deprecated use `GetProjectsProjectsAliasError$outboundSchema` instead. */
    GetProjectsProjectsAliasError$.outboundSchema = GetProjectsProjectsAliasError$outboundSchema;
})(GetProjectsProjectsAliasError$ || (GetProjectsProjectsAliasError$ = {}));
export function getProjectsProjectsAliasErrorToJSON(getProjectsProjectsAliasError) {
    return JSON.stringify(GetProjectsProjectsAliasError$outboundSchema.parse(getProjectsProjectsAliasError));
}
export function getProjectsProjectsAliasErrorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsProjectsAliasError$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsProjectsAliasError' from JSON`);
}
/** @internal */
export const GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsType$inboundSchema = z.nativeEnum(GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsType);
/** @internal */
export const GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsType$outboundSchema = GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsType$;
(function (GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsType$) {
    /** @deprecated use `GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsType$inboundSchema` instead. */
    GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsType$.inboundSchema = GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsType$inboundSchema;
    /** @deprecated use `GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsType$outboundSchema` instead. */
    GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsType$.outboundSchema = GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsType$outboundSchema;
})(GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsType$ || (GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsType$ = {}));
/** @internal */
export const GetProjectsProjectsResponseBranchMatcher$inboundSchema = z.object({
    type: GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsType$inboundSchema,
    pattern: z.string(),
});
/** @internal */
export const GetProjectsProjectsResponseBranchMatcher$outboundSchema = z.object({
    type: GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsType$outboundSchema,
    pattern: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsProjectsResponseBranchMatcher$;
(function (GetProjectsProjectsResponseBranchMatcher$) {
    /** @deprecated use `GetProjectsProjectsResponseBranchMatcher$inboundSchema` instead. */
    GetProjectsProjectsResponseBranchMatcher$.inboundSchema = GetProjectsProjectsResponseBranchMatcher$inboundSchema;
    /** @deprecated use `GetProjectsProjectsResponseBranchMatcher$outboundSchema` instead. */
    GetProjectsProjectsResponseBranchMatcher$.outboundSchema = GetProjectsProjectsResponseBranchMatcher$outboundSchema;
})(GetProjectsProjectsResponseBranchMatcher$ || (GetProjectsProjectsResponseBranchMatcher$ = {}));
export function getProjectsProjectsResponseBranchMatcherToJSON(getProjectsProjectsResponseBranchMatcher) {
    return JSON.stringify(GetProjectsProjectsResponseBranchMatcher$outboundSchema.parse(getProjectsProjectsResponseBranchMatcher));
}
export function getProjectsProjectsResponseBranchMatcherFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsProjectsResponseBranchMatcher$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsProjectsResponseBranchMatcher' from JSON`);
}
/** @internal */
export const GetProjectsProjectsBuilds$inboundSchema = z.object({
    use: z.string(),
    src: z.string().optional(),
    dest: z.string().optional(),
});
/** @internal */
export const GetProjectsProjectsBuilds$outboundSchema = z.object({
    use: z.string(),
    src: z.string().optional(),
    dest: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsProjectsBuilds$;
(function (GetProjectsProjectsBuilds$) {
    /** @deprecated use `GetProjectsProjectsBuilds$inboundSchema` instead. */
    GetProjectsProjectsBuilds$.inboundSchema = GetProjectsProjectsBuilds$inboundSchema;
    /** @deprecated use `GetProjectsProjectsBuilds$outboundSchema` instead. */
    GetProjectsProjectsBuilds$.outboundSchema = GetProjectsProjectsBuilds$outboundSchema;
})(GetProjectsProjectsBuilds$ || (GetProjectsProjectsBuilds$ = {}));
export function getProjectsProjectsBuildsToJSON(getProjectsProjectsBuilds) {
    return JSON.stringify(GetProjectsProjectsBuilds$outboundSchema.parse(getProjectsProjectsBuilds));
}
export function getProjectsProjectsBuildsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsProjectsBuilds$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsProjectsBuilds' from JSON`);
}
/** @internal */
export const GetProjectsProjectsChecksConclusion$inboundSchema = z.nativeEnum(GetProjectsProjectsChecksConclusion);
/** @internal */
export const GetProjectsProjectsChecksConclusion$outboundSchema = GetProjectsProjectsChecksConclusion$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsProjectsChecksConclusion$;
(function (GetProjectsProjectsChecksConclusion$) {
    /** @deprecated use `GetProjectsProjectsChecksConclusion$inboundSchema` instead. */
    GetProjectsProjectsChecksConclusion$.inboundSchema = GetProjectsProjectsChecksConclusion$inboundSchema;
    /** @deprecated use `GetProjectsProjectsChecksConclusion$outboundSchema` instead. */
    GetProjectsProjectsChecksConclusion$.outboundSchema = GetProjectsProjectsChecksConclusion$outboundSchema;
})(GetProjectsProjectsChecksConclusion$ || (GetProjectsProjectsChecksConclusion$ = {}));
/** @internal */
export const GetProjectsProjectsChecksState$inboundSchema = z.nativeEnum(GetProjectsProjectsChecksState);
/** @internal */
export const GetProjectsProjectsChecksState$outboundSchema = GetProjectsProjectsChecksState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsProjectsChecksState$;
(function (GetProjectsProjectsChecksState$) {
    /** @deprecated use `GetProjectsProjectsChecksState$inboundSchema` instead. */
    GetProjectsProjectsChecksState$.inboundSchema = GetProjectsProjectsChecksState$inboundSchema;
    /** @deprecated use `GetProjectsProjectsChecksState$outboundSchema` instead. */
    GetProjectsProjectsChecksState$.outboundSchema = GetProjectsProjectsChecksState$outboundSchema;
})(GetProjectsProjectsChecksState$ || (GetProjectsProjectsChecksState$ = {}));
/** @internal */
export const GetProjectsProjectsCreator$inboundSchema = z.object({
    email: z.string(),
    githubLogin: z.string().optional(),
    gitlabLogin: z.string().optional(),
    uid: z.string(),
    username: z.string(),
});
/** @internal */
export const GetProjectsProjectsCreator$outboundSchema = z.object({
    email: z.string(),
    githubLogin: z.string().optional(),
    gitlabLogin: z.string().optional(),
    uid: z.string(),
    username: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsProjectsCreator$;
(function (GetProjectsProjectsCreator$) {
    /** @deprecated use `GetProjectsProjectsCreator$inboundSchema` instead. */
    GetProjectsProjectsCreator$.inboundSchema = GetProjectsProjectsCreator$inboundSchema;
    /** @deprecated use `GetProjectsProjectsCreator$outboundSchema` instead. */
    GetProjectsProjectsCreator$.outboundSchema = GetProjectsProjectsCreator$outboundSchema;
})(GetProjectsProjectsCreator$ || (GetProjectsProjectsCreator$ = {}));
export function getProjectsProjectsCreatorToJSON(getProjectsProjectsCreator) {
    return JSON.stringify(GetProjectsProjectsCreator$outboundSchema.parse(getProjectsProjectsCreator));
}
export function getProjectsProjectsCreatorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsProjectsCreator$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsProjectsCreator' from JSON`);
}
/** @internal */
export const GetProjectsProjectsOidcTokenClaims$inboundSchema = z.object({
    iss: z.string(),
    sub: z.string(),
    scope: z.string(),
    aud: z.string(),
    owner: z.string(),
    owner_id: z.string(),
    project: z.string(),
    project_id: z.string(),
    environment: z.string(),
}).transform((v) => {
    return remap$(v, {
        "owner_id": "ownerId",
        "project_id": "projectId",
    });
});
/** @internal */
export const GetProjectsProjectsOidcTokenClaims$outboundSchema = z.object({
    iss: z.string(),
    sub: z.string(),
    scope: z.string(),
    aud: z.string(),
    owner: z.string(),
    ownerId: z.string(),
    project: z.string(),
    projectId: z.string(),
    environment: z.string(),
}).transform((v) => {
    return remap$(v, {
        ownerId: "owner_id",
        projectId: "project_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsProjectsOidcTokenClaims$;
(function (GetProjectsProjectsOidcTokenClaims$) {
    /** @deprecated use `GetProjectsProjectsOidcTokenClaims$inboundSchema` instead. */
    GetProjectsProjectsOidcTokenClaims$.inboundSchema = GetProjectsProjectsOidcTokenClaims$inboundSchema;
    /** @deprecated use `GetProjectsProjectsOidcTokenClaims$outboundSchema` instead. */
    GetProjectsProjectsOidcTokenClaims$.outboundSchema = GetProjectsProjectsOidcTokenClaims$outboundSchema;
})(GetProjectsProjectsOidcTokenClaims$ || (GetProjectsProjectsOidcTokenClaims$ = {}));
export function getProjectsProjectsOidcTokenClaimsToJSON(getProjectsProjectsOidcTokenClaims) {
    return JSON.stringify(GetProjectsProjectsOidcTokenClaims$outboundSchema.parse(getProjectsProjectsOidcTokenClaims));
}
export function getProjectsProjectsOidcTokenClaimsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsProjectsOidcTokenClaims$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsProjectsOidcTokenClaims' from JSON`);
}
/** @internal */
export const GetProjectsProjectsPlan$inboundSchema = z.nativeEnum(GetProjectsProjectsPlan);
/** @internal */
export const GetProjectsProjectsPlan$outboundSchema = GetProjectsProjectsPlan$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsProjectsPlan$;
(function (GetProjectsProjectsPlan$) {
    /** @deprecated use `GetProjectsProjectsPlan$inboundSchema` instead. */
    GetProjectsProjectsPlan$.inboundSchema = GetProjectsProjectsPlan$inboundSchema;
    /** @deprecated use `GetProjectsProjectsPlan$outboundSchema` instead. */
    GetProjectsProjectsPlan$.outboundSchema = GetProjectsProjectsPlan$outboundSchema;
})(GetProjectsProjectsPlan$ || (GetProjectsProjectsPlan$ = {}));
/** @internal */
export const GetProjectsProjectsReadyState$inboundSchema = z.nativeEnum(GetProjectsProjectsReadyState);
/** @internal */
export const GetProjectsProjectsReadyState$outboundSchema = GetProjectsProjectsReadyState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsProjectsReadyState$;
(function (GetProjectsProjectsReadyState$) {
    /** @deprecated use `GetProjectsProjectsReadyState$inboundSchema` instead. */
    GetProjectsProjectsReadyState$.inboundSchema = GetProjectsProjectsReadyState$inboundSchema;
    /** @deprecated use `GetProjectsProjectsReadyState$outboundSchema` instead. */
    GetProjectsProjectsReadyState$.outboundSchema = GetProjectsProjectsReadyState$outboundSchema;
})(GetProjectsProjectsReadyState$ || (GetProjectsProjectsReadyState$ = {}));
/** @internal */
export const GetProjectsProjectsReadySubstate$inboundSchema = z.nativeEnum(GetProjectsProjectsReadySubstate);
/** @internal */
export const GetProjectsProjectsReadySubstate$outboundSchema = GetProjectsProjectsReadySubstate$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsProjectsReadySubstate$;
(function (GetProjectsProjectsReadySubstate$) {
    /** @deprecated use `GetProjectsProjectsReadySubstate$inboundSchema` instead. */
    GetProjectsProjectsReadySubstate$.inboundSchema = GetProjectsProjectsReadySubstate$inboundSchema;
    /** @deprecated use `GetProjectsProjectsReadySubstate$outboundSchema` instead. */
    GetProjectsProjectsReadySubstate$.outboundSchema = GetProjectsProjectsReadySubstate$outboundSchema;
})(GetProjectsProjectsReadySubstate$ || (GetProjectsProjectsReadySubstate$ = {}));
/** @internal */
export const GetProjectsProjectsResponse200Type$inboundSchema = z.nativeEnum(GetProjectsProjectsResponse200Type);
/** @internal */
export const GetProjectsProjectsResponse200Type$outboundSchema = GetProjectsProjectsResponse200Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsProjectsResponse200Type$;
(function (GetProjectsProjectsResponse200Type$) {
    /** @deprecated use `GetProjectsProjectsResponse200Type$inboundSchema` instead. */
    GetProjectsProjectsResponse200Type$.inboundSchema = GetProjectsProjectsResponse200Type$inboundSchema;
    /** @deprecated use `GetProjectsProjectsResponse200Type$outboundSchema` instead. */
    GetProjectsProjectsResponse200Type$.outboundSchema = GetProjectsProjectsResponse200Type$outboundSchema;
})(GetProjectsProjectsResponse200Type$ || (GetProjectsProjectsResponse200Type$ = {}));
/** @internal */
export const GetProjectsTargets$inboundSchema = z.object({
    id: z.string(),
    alias: z.array(z.string()).optional(),
    aliasAssigned: z.nullable(z.union([z.number(), z.boolean()])).optional(),
    aliasError: z.nullable(z.lazy(() => GetProjectsProjectsAliasError$inboundSchema)).optional(),
    aliasFinal: z.nullable(z.string()).optional(),
    automaticAliases: z.array(z.string()).optional(),
    branchMatcher: z.lazy(() => GetProjectsProjectsResponseBranchMatcher$inboundSchema).optional(),
    buildingAt: z.number().optional(),
    builds: z.array(z.lazy(() => GetProjectsProjectsBuilds$inboundSchema))
        .optional(),
    checksConclusion: GetProjectsProjectsChecksConclusion$inboundSchema
        .optional(),
    checksState: GetProjectsProjectsChecksState$inboundSchema.optional(),
    connectBuildsEnabled: z.boolean().optional(),
    connectConfigurationId: z.string().optional(),
    createdAt: z.number(),
    createdIn: z.string(),
    creator: z.nullable(z.lazy(() => GetProjectsProjectsCreator$inboundSchema)),
    deletedAt: z.number().optional(),
    deploymentHostname: z.string(),
    forced: z.boolean().optional(),
    name: z.string(),
    meta: z.record(z.string()).optional(),
    monorepoManager: z.nullable(z.string()).optional(),
    oidcTokenClaims: z.lazy(() => GetProjectsProjectsOidcTokenClaims$inboundSchema).optional(),
    plan: GetProjectsProjectsPlan$inboundSchema,
    previewCommentsEnabled: z.boolean().optional(),
    private: z.boolean(),
    readyAt: z.number().optional(),
    readyState: GetProjectsProjectsReadyState$inboundSchema,
    readySubstate: GetProjectsProjectsReadySubstate$inboundSchema.optional(),
    requestedAt: z.number().optional(),
    target: z.nullable(z.string()).optional(),
    teamId: z.nullable(z.string()).optional(),
    type: GetProjectsProjectsResponse200Type$inboundSchema,
    url: z.string(),
    userId: z.string(),
    withCache: z.boolean().optional(),
});
/** @internal */
export const GetProjectsTargets$outboundSchema = z.object({
    id: z.string(),
    alias: z.array(z.string()).optional(),
    aliasAssigned: z.nullable(z.union([z.number(), z.boolean()])).optional(),
    aliasError: z.nullable(z.lazy(() => GetProjectsProjectsAliasError$outboundSchema)).optional(),
    aliasFinal: z.nullable(z.string()).optional(),
    automaticAliases: z.array(z.string()).optional(),
    branchMatcher: z.lazy(() => GetProjectsProjectsResponseBranchMatcher$outboundSchema).optional(),
    buildingAt: z.number().optional(),
    builds: z.array(z.lazy(() => GetProjectsProjectsBuilds$outboundSchema))
        .optional(),
    checksConclusion: GetProjectsProjectsChecksConclusion$outboundSchema
        .optional(),
    checksState: GetProjectsProjectsChecksState$outboundSchema.optional(),
    connectBuildsEnabled: z.boolean().optional(),
    connectConfigurationId: z.string().optional(),
    createdAt: z.number(),
    createdIn: z.string(),
    creator: z.nullable(z.lazy(() => GetProjectsProjectsCreator$outboundSchema)),
    deletedAt: z.number().optional(),
    deploymentHostname: z.string(),
    forced: z.boolean().optional(),
    name: z.string(),
    meta: z.record(z.string()).optional(),
    monorepoManager: z.nullable(z.string()).optional(),
    oidcTokenClaims: z.lazy(() => GetProjectsProjectsOidcTokenClaims$outboundSchema).optional(),
    plan: GetProjectsProjectsPlan$outboundSchema,
    previewCommentsEnabled: z.boolean().optional(),
    private: z.boolean(),
    readyAt: z.number().optional(),
    readyState: GetProjectsProjectsReadyState$outboundSchema,
    readySubstate: GetProjectsProjectsReadySubstate$outboundSchema.optional(),
    requestedAt: z.number().optional(),
    target: z.nullable(z.string()).optional(),
    teamId: z.nullable(z.string()).optional(),
    type: GetProjectsProjectsResponse200Type$outboundSchema,
    url: z.string(),
    userId: z.string(),
    withCache: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsTargets$;
(function (GetProjectsTargets$) {
    /** @deprecated use `GetProjectsTargets$inboundSchema` instead. */
    GetProjectsTargets$.inboundSchema = GetProjectsTargets$inboundSchema;
    /** @deprecated use `GetProjectsTargets$outboundSchema` instead. */
    GetProjectsTargets$.outboundSchema = GetProjectsTargets$outboundSchema;
})(GetProjectsTargets$ || (GetProjectsTargets$ = {}));
export function getProjectsTargetsToJSON(getProjectsTargets) {
    return JSON.stringify(GetProjectsTargets$outboundSchema.parse(getProjectsTargets));
}
export function getProjectsTargetsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsTargets$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsTargets' from JSON`);
}
/** @internal */
export const GetProjectsPermissions$inboundSchema = z.object({
    aliasProject: z.array(ACLAction$inboundSchema).optional(),
    aliasProtectionBypass: z.array(ACLAction$inboundSchema).optional(),
    buildMachine: z.array(ACLAction$inboundSchema).optional(),
    productionAliasProtectionBypass: z.array(ACLAction$inboundSchema).optional(),
    connectConfigurationLink: z.array(ACLAction$inboundSchema).optional(),
    dataCacheNamespace: z.array(ACLAction$inboundSchema).optional(),
    deployment: z.array(ACLAction$inboundSchema).optional(),
    deploymentBuildLogs: z.array(ACLAction$inboundSchema).optional(),
    deploymentCheck: z.array(ACLAction$inboundSchema).optional(),
    deploymentCheckPreview: z.array(ACLAction$inboundSchema).optional(),
    deploymentCheckReRunFromProductionBranch: z.array(ACLAction$inboundSchema)
        .optional(),
    deploymentProductionGit: z.array(ACLAction$inboundSchema).optional(),
    deploymentV0: z.array(ACLAction$inboundSchema).optional(),
    deploymentPreview: z.array(ACLAction$inboundSchema).optional(),
    deploymentPrivate: z.array(ACLAction$inboundSchema).optional(),
    deploymentPromote: z.array(ACLAction$inboundSchema).optional(),
    deploymentRollback: z.array(ACLAction$inboundSchema).optional(),
    edgeCacheNamespace: z.array(ACLAction$inboundSchema).optional(),
    environments: z.array(ACLAction$inboundSchema).optional(),
    logs: z.array(ACLAction$inboundSchema).optional(),
    logsPreset: z.array(ACLAction$inboundSchema).optional(),
    passwordProtection: z.array(ACLAction$inboundSchema).optional(),
    optionsAllowlist: z.array(ACLAction$inboundSchema).optional(),
    job: z.array(ACLAction$inboundSchema).optional(),
    observabilityData: z.array(ACLAction$inboundSchema).optional(),
    onDemandBuild: z.array(ACLAction$inboundSchema).optional(),
    onDemandConcurrency: z.array(ACLAction$inboundSchema).optional(),
    project: z.array(ACLAction$inboundSchema).optional(),
    projectFromV0: z.array(ACLAction$inboundSchema).optional(),
    projectAccessGroup: z.array(ACLAction$inboundSchema).optional(),
    projectAnalyticsSampling: z.array(ACLAction$inboundSchema).optional(),
    projectCheck: z.array(ACLAction$inboundSchema).optional(),
    projectCheckRun: z.array(ACLAction$inboundSchema).optional(),
    projectDeploymentHook: z.array(ACLAction$inboundSchema).optional(),
    projectDomain: z.array(ACLAction$inboundSchema).optional(),
    projectDomainMove: z.array(ACLAction$inboundSchema).optional(),
    projectDomainCheckConfig: z.array(ACLAction$inboundSchema).optional(),
    projectEnvVars: z.array(ACLAction$inboundSchema).optional(),
    projectEnvVarsProduction: z.array(ACLAction$inboundSchema).optional(),
    projectEnvVarsUnownedByIntegration: z.array(ACLAction$inboundSchema)
        .optional(),
    projectFlags: z.array(ACLAction$inboundSchema).optional(),
    projectId: z.array(ACLAction$inboundSchema).optional(),
    projectIntegrationConfiguration: z.array(ACLAction$inboundSchema).optional(),
    projectLink: z.array(ACLAction$inboundSchema).optional(),
    projectMember: z.array(ACLAction$inboundSchema).optional(),
    projectMonitoring: z.array(ACLAction$inboundSchema).optional(),
    projectPermissions: z.array(ACLAction$inboundSchema).optional(),
    projectProductionBranch: z.array(ACLAction$inboundSchema).optional(),
    projectTransfer: z.array(ACLAction$inboundSchema).optional(),
    projectTransferOut: z.array(ACLAction$inboundSchema).optional(),
    projectProtectionBypass: z.array(ACLAction$inboundSchema).optional(),
    projectUsage: z.array(ACLAction$inboundSchema).optional(),
    projectAnalyticsUsage: z.array(ACLAction$inboundSchema).optional(),
    projectSupportCase: z.array(ACLAction$inboundSchema).optional(),
    projectSupportCaseComment: z.array(ACLAction$inboundSchema).optional(),
    projectDeploymentExpiration: z.array(ACLAction$inboundSchema).optional(),
    projectRollingRelease: z.array(ACLAction$inboundSchema).optional(),
    projectTier: z.array(ACLAction$inboundSchema).optional(),
    projectOIDCToken: z.array(ACLAction$inboundSchema).optional(),
    seawallConfig: z.array(ACLAction$inboundSchema).optional(),
    skewProtection: z.array(ACLAction$inboundSchema).optional(),
    analytics: z.array(ACLAction$inboundSchema).optional(),
    trustedIps: z.array(ACLAction$inboundSchema).optional(),
    v0Chat: z.array(ACLAction$inboundSchema).optional(),
    webAnalytics: z.array(ACLAction$inboundSchema).optional(),
    sharedEnvVarConnection: z.array(ACLAction$inboundSchema).optional(),
    sonar: z.array(ACLAction$inboundSchema).optional(),
    oauth2Connection: z.array(ACLAction$inboundSchema).optional(),
    user: z.array(ACLAction$inboundSchema).optional(),
    userConnection: z.array(ACLAction$inboundSchema).optional(),
    userSudo: z.array(ACLAction$inboundSchema).optional(),
    webAuthn: z.array(ACLAction$inboundSchema).optional(),
    accessGroup: z.array(ACLAction$inboundSchema).optional(),
    aliasGlobal: z.array(ACLAction$inboundSchema).optional(),
    analyticsSampling: z.array(ACLAction$inboundSchema).optional(),
    analyticsUsage: z.array(ACLAction$inboundSchema).optional(),
    auditLog: z.array(ACLAction$inboundSchema).optional(),
    billingAddress: z.array(ACLAction$inboundSchema).optional(),
    billingInformation: z.array(ACLAction$inboundSchema).optional(),
    billingInvoice: z.array(ACLAction$inboundSchema).optional(),
    billingInvoiceEmailRecipient: z.array(ACLAction$inboundSchema).optional(),
    billingInvoiceLanguage: z.array(ACLAction$inboundSchema).optional(),
    billingPlan: z.array(ACLAction$inboundSchema).optional(),
    billingPurchaseOrder: z.array(ACLAction$inboundSchema).optional(),
    billingRefund: z.array(ACLAction$inboundSchema).optional(),
    billingTaxId: z.array(ACLAction$inboundSchema).optional(),
    blob: z.array(ACLAction$inboundSchema).optional(),
    budget: z.array(ACLAction$inboundSchema).optional(),
    cacheArtifact: z.array(ACLAction$inboundSchema).optional(),
    cacheArtifactUsageEvent: z.array(ACLAction$inboundSchema).optional(),
    codeChecks: z.array(ACLAction$inboundSchema).optional(),
    concurrentBuilds: z.array(ACLAction$inboundSchema).optional(),
    connect: z.array(ACLAction$inboundSchema).optional(),
    connectConfiguration: z.array(ACLAction$inboundSchema).optional(),
    defaultDeploymentProtection: z.array(ACLAction$inboundSchema).optional(),
    domain: z.array(ACLAction$inboundSchema).optional(),
    domainAcceptDelegation: z.array(ACLAction$inboundSchema).optional(),
    domainAuthCodes: z.array(ACLAction$inboundSchema).optional(),
    domainCertificate: z.array(ACLAction$inboundSchema).optional(),
    domainCheckConfig: z.array(ACLAction$inboundSchema).optional(),
    domainMove: z.array(ACLAction$inboundSchema).optional(),
    domainPurchase: z.array(ACLAction$inboundSchema).optional(),
    domainRecord: z.array(ACLAction$inboundSchema).optional(),
    domainTransferIn: z.array(ACLAction$inboundSchema).optional(),
    event: z.array(ACLAction$inboundSchema).optional(),
    ownEvent: z.array(ACLAction$inboundSchema).optional(),
    sensitiveEnvironmentVariablePolicy: z.array(ACLAction$inboundSchema)
        .optional(),
    fileUpload: z.array(ACLAction$inboundSchema).optional(),
    flagsExplorerSubscription: z.array(ACLAction$inboundSchema).optional(),
    gitRepository: z.array(ACLAction$inboundSchema).optional(),
    ipBlocking: z.array(ACLAction$inboundSchema).optional(),
    imageOptimizationNewPrice: z.array(ACLAction$inboundSchema).optional(),
    integration: z.array(ACLAction$inboundSchema).optional(),
    integrationAccount: z.array(ACLAction$inboundSchema).optional(),
    integrationConfiguration: z.array(ACLAction$inboundSchema).optional(),
    integrationConfigurationTransfer: z.array(ACLAction$inboundSchema).optional(),
    integrationConfigurationProjects: z.array(ACLAction$inboundSchema).optional(),
    integrationVercelConfigurationOverride: z.array(ACLAction$inboundSchema)
        .optional(),
    integrationConfigurationRole: z.array(ACLAction$inboundSchema).optional(),
    integrationSSOSession: z.array(ACLAction$inboundSchema).optional(),
    integrationResource: z.array(ACLAction$inboundSchema).optional(),
    integrationEvent: z.array(ACLAction$inboundSchema).optional(),
    integrationResourceSecrets: z.array(ACLAction$inboundSchema).optional(),
    integrationDeploymentAction: z.array(ACLAction$inboundSchema).optional(),
    marketplaceInstallationMember: z.array(ACLAction$inboundSchema).optional(),
    marketplaceBillingData: z.array(ACLAction$inboundSchema).optional(),
    marketplaceInvoice: z.array(ACLAction$inboundSchema).optional(),
    marketplaceSettings: z.array(ACLAction$inboundSchema).optional(),
    marketplaceExperimentationItem: z.array(ACLAction$inboundSchema).optional(),
    marketplaceExperimentationEdgeConfigData: z.array(ACLAction$inboundSchema)
        .optional(),
    jobGlobal: z.array(ACLAction$inboundSchema).optional(),
    drain: z.array(ACLAction$inboundSchema).optional(),
    logDrain: z.array(ACLAction$inboundSchema).optional(),
    traceDrain: z.array(ACLAction$inboundSchema).optional(),
    Monitoring: z.array(ACLAction$inboundSchema).optional(),
    monitoringSettings: z.array(ACLAction$inboundSchema).optional(),
    monitoringQuery: z.array(ACLAction$inboundSchema).optional(),
    monitoringChart: z.array(ACLAction$inboundSchema).optional(),
    monitoringAlert: z.array(ACLAction$inboundSchema).optional(),
    notificationDeploymentFailed: z.array(ACLAction$inboundSchema).optional(),
    notificationDomainConfiguration: z.array(ACLAction$inboundSchema).optional(),
    notificationDomainExpire: z.array(ACLAction$inboundSchema).optional(),
    notificationDomainMoved: z.array(ACLAction$inboundSchema).optional(),
    notificationDomainPurchase: z.array(ACLAction$inboundSchema).optional(),
    notificationDomainRenewal: z.array(ACLAction$inboundSchema).optional(),
    notificationDomainTransfer: z.array(ACLAction$inboundSchema).optional(),
    notificationDomainUnverified: z.array(ACLAction$inboundSchema).optional(),
    NotificationMonitoringAlert: z.array(ACLAction$inboundSchema).optional(),
    notificationPaymentFailed: z.array(ACLAction$inboundSchema).optional(),
    notificationUsageAlert: z.array(ACLAction$inboundSchema).optional(),
    notificationPreferences: z.array(ACLAction$inboundSchema).optional(),
    notificationCustomerBudget: z.array(ACLAction$inboundSchema).optional(),
    notificationStatementOfReasons: z.array(ACLAction$inboundSchema).optional(),
    observabilityConfiguration: z.array(ACLAction$inboundSchema).optional(),
    alerts: z.array(ACLAction$inboundSchema).optional(),
    observabilityNotebook: z.array(ACLAction$inboundSchema).optional(),
    observabilityFunnel: z.array(ACLAction$inboundSchema).optional(),
    openTelemetryEndpoint: z.array(ACLAction$inboundSchema).optional(),
    vercelAppInstallation: z.array(ACLAction$inboundSchema).optional(),
    vercelAppInstallationRequest: z.array(ACLAction$inboundSchema).optional(),
    paymentMethod: z.array(ACLAction$inboundSchema).optional(),
    permissions: z.array(ACLAction$inboundSchema).optional(),
    postgres: z.array(ACLAction$inboundSchema).optional(),
    previewDeploymentSuffix: z.array(ACLAction$inboundSchema).optional(),
    proTrialOnboarding: z.array(ACLAction$inboundSchema).optional(),
    sharedEnvVars: z.array(ACLAction$inboundSchema).optional(),
    sharedEnvVarsProduction: z.array(ACLAction$inboundSchema).optional(),
    space: z.array(ACLAction$inboundSchema).optional(),
    spaceRun: z.array(ACLAction$inboundSchema).optional(),
    passwordProtectionInvoiceItem: z.array(ACLAction$inboundSchema).optional(),
    rateLimit: z.array(ACLAction$inboundSchema).optional(),
    redis: z.array(ACLAction$inboundSchema).optional(),
    repository: z.array(ACLAction$inboundSchema).optional(),
    remoteCaching: z.array(ACLAction$inboundSchema).optional(),
    samlConfig: z.array(ACLAction$inboundSchema).optional(),
    secret: z.array(ACLAction$inboundSchema).optional(),
    redisStoreTokenSet: z.array(ACLAction$inboundSchema).optional(),
    blobStoreTokenSet: z.array(ACLAction$inboundSchema).optional(),
    postgresStoreTokenSet: z.array(ACLAction$inboundSchema).optional(),
    integrationStoreTokenSet: z.array(ACLAction$inboundSchema).optional(),
    integrationResourceReplCommand: z.array(ACLAction$inboundSchema).optional(),
    storeTransfer: z.array(ACLAction$inboundSchema).optional(),
    supportCase: z.array(ACLAction$inboundSchema).optional(),
    supportCaseComment: z.array(ACLAction$inboundSchema).optional(),
    dataCacheBillingSettings: z.array(ACLAction$inboundSchema).optional(),
    team: z.array(ACLAction$inboundSchema).optional(),
    teamAccessRequest: z.array(ACLAction$inboundSchema).optional(),
    teamFellowMembership: z.array(ACLAction$inboundSchema).optional(),
    teamGitExclusivity: z.array(ACLAction$inboundSchema).optional(),
    teamInvite: z.array(ACLAction$inboundSchema).optional(),
    teamInviteCode: z.array(ACLAction$inboundSchema).optional(),
    teamJoin: z.array(ACLAction$inboundSchema).optional(),
    teamMemberMfaStatus: z.array(ACLAction$inboundSchema).optional(),
    teamMicrofrontends: z.array(ACLAction$inboundSchema).optional(),
    teamOwnMembership: z.array(ACLAction$inboundSchema).optional(),
    teamOwnMembershipDisconnectSAML: z.array(ACLAction$inboundSchema).optional(),
    token: z.array(ACLAction$inboundSchema).optional(),
    usage: z.array(ACLAction$inboundSchema).optional(),
    usageCycle: z.array(ACLAction$inboundSchema).optional(),
    vpcPeeringConnection: z.array(ACLAction$inboundSchema).optional(),
    webAnalyticsPlan: z.array(ACLAction$inboundSchema).optional(),
    edgeConfig: z.array(ACLAction$inboundSchema).optional(),
    edgeConfigItem: z.array(ACLAction$inboundSchema).optional(),
    edgeConfigSchema: z.array(ACLAction$inboundSchema).optional(),
    edgeConfigToken: z.array(ACLAction$inboundSchema).optional(),
    webhook: z.array(ACLAction$inboundSchema).optional(),
    "webhook-event": z.array(ACLAction$inboundSchema).optional(),
    endpointVerification: z.array(ACLAction$inboundSchema).optional(),
    projectTransferIn: z.array(ACLAction$inboundSchema).optional(),
    oauth2Application: z.array(ACLAction$inboundSchema).optional(),
    vercelRun: z.array(ACLAction$inboundSchema).optional(),
    vercelRunExec: z.array(ACLAction$inboundSchema).optional(),
    apiKey: z.array(ACLAction$inboundSchema).optional(),
    apiKeyOwnedBySelf: z.array(ACLAction$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "Monitoring": "monitoring",
        "NotificationMonitoringAlert": "notificationMonitoringAlert",
        "webhook-event": "webhookEvent",
    });
});
/** @internal */
export const GetProjectsPermissions$outboundSchema = z.object({
    aliasProject: z.array(ACLAction$outboundSchema).optional(),
    aliasProtectionBypass: z.array(ACLAction$outboundSchema).optional(),
    buildMachine: z.array(ACLAction$outboundSchema).optional(),
    productionAliasProtectionBypass: z.array(ACLAction$outboundSchema).optional(),
    connectConfigurationLink: z.array(ACLAction$outboundSchema).optional(),
    dataCacheNamespace: z.array(ACLAction$outboundSchema).optional(),
    deployment: z.array(ACLAction$outboundSchema).optional(),
    deploymentBuildLogs: z.array(ACLAction$outboundSchema).optional(),
    deploymentCheck: z.array(ACLAction$outboundSchema).optional(),
    deploymentCheckPreview: z.array(ACLAction$outboundSchema).optional(),
    deploymentCheckReRunFromProductionBranch: z.array(ACLAction$outboundSchema)
        .optional(),
    deploymentProductionGit: z.array(ACLAction$outboundSchema).optional(),
    deploymentV0: z.array(ACLAction$outboundSchema).optional(),
    deploymentPreview: z.array(ACLAction$outboundSchema).optional(),
    deploymentPrivate: z.array(ACLAction$outboundSchema).optional(),
    deploymentPromote: z.array(ACLAction$outboundSchema).optional(),
    deploymentRollback: z.array(ACLAction$outboundSchema).optional(),
    edgeCacheNamespace: z.array(ACLAction$outboundSchema).optional(),
    environments: z.array(ACLAction$outboundSchema).optional(),
    logs: z.array(ACLAction$outboundSchema).optional(),
    logsPreset: z.array(ACLAction$outboundSchema).optional(),
    passwordProtection: z.array(ACLAction$outboundSchema).optional(),
    optionsAllowlist: z.array(ACLAction$outboundSchema).optional(),
    job: z.array(ACLAction$outboundSchema).optional(),
    observabilityData: z.array(ACLAction$outboundSchema).optional(),
    onDemandBuild: z.array(ACLAction$outboundSchema).optional(),
    onDemandConcurrency: z.array(ACLAction$outboundSchema).optional(),
    project: z.array(ACLAction$outboundSchema).optional(),
    projectFromV0: z.array(ACLAction$outboundSchema).optional(),
    projectAccessGroup: z.array(ACLAction$outboundSchema).optional(),
    projectAnalyticsSampling: z.array(ACLAction$outboundSchema).optional(),
    projectCheck: z.array(ACLAction$outboundSchema).optional(),
    projectCheckRun: z.array(ACLAction$outboundSchema).optional(),
    projectDeploymentHook: z.array(ACLAction$outboundSchema).optional(),
    projectDomain: z.array(ACLAction$outboundSchema).optional(),
    projectDomainMove: z.array(ACLAction$outboundSchema).optional(),
    projectDomainCheckConfig: z.array(ACLAction$outboundSchema).optional(),
    projectEnvVars: z.array(ACLAction$outboundSchema).optional(),
    projectEnvVarsProduction: z.array(ACLAction$outboundSchema).optional(),
    projectEnvVarsUnownedByIntegration: z.array(ACLAction$outboundSchema)
        .optional(),
    projectFlags: z.array(ACLAction$outboundSchema).optional(),
    projectId: z.array(ACLAction$outboundSchema).optional(),
    projectIntegrationConfiguration: z.array(ACLAction$outboundSchema).optional(),
    projectLink: z.array(ACLAction$outboundSchema).optional(),
    projectMember: z.array(ACLAction$outboundSchema).optional(),
    projectMonitoring: z.array(ACLAction$outboundSchema).optional(),
    projectPermissions: z.array(ACLAction$outboundSchema).optional(),
    projectProductionBranch: z.array(ACLAction$outboundSchema).optional(),
    projectTransfer: z.array(ACLAction$outboundSchema).optional(),
    projectTransferOut: z.array(ACLAction$outboundSchema).optional(),
    projectProtectionBypass: z.array(ACLAction$outboundSchema).optional(),
    projectUsage: z.array(ACLAction$outboundSchema).optional(),
    projectAnalyticsUsage: z.array(ACLAction$outboundSchema).optional(),
    projectSupportCase: z.array(ACLAction$outboundSchema).optional(),
    projectSupportCaseComment: z.array(ACLAction$outboundSchema).optional(),
    projectDeploymentExpiration: z.array(ACLAction$outboundSchema).optional(),
    projectRollingRelease: z.array(ACLAction$outboundSchema).optional(),
    projectTier: z.array(ACLAction$outboundSchema).optional(),
    projectOIDCToken: z.array(ACLAction$outboundSchema).optional(),
    seawallConfig: z.array(ACLAction$outboundSchema).optional(),
    skewProtection: z.array(ACLAction$outboundSchema).optional(),
    analytics: z.array(ACLAction$outboundSchema).optional(),
    trustedIps: z.array(ACLAction$outboundSchema).optional(),
    v0Chat: z.array(ACLAction$outboundSchema).optional(),
    webAnalytics: z.array(ACLAction$outboundSchema).optional(),
    sharedEnvVarConnection: z.array(ACLAction$outboundSchema).optional(),
    sonar: z.array(ACLAction$outboundSchema).optional(),
    oauth2Connection: z.array(ACLAction$outboundSchema).optional(),
    user: z.array(ACLAction$outboundSchema).optional(),
    userConnection: z.array(ACLAction$outboundSchema).optional(),
    userSudo: z.array(ACLAction$outboundSchema).optional(),
    webAuthn: z.array(ACLAction$outboundSchema).optional(),
    accessGroup: z.array(ACLAction$outboundSchema).optional(),
    aliasGlobal: z.array(ACLAction$outboundSchema).optional(),
    analyticsSampling: z.array(ACLAction$outboundSchema).optional(),
    analyticsUsage: z.array(ACLAction$outboundSchema).optional(),
    auditLog: z.array(ACLAction$outboundSchema).optional(),
    billingAddress: z.array(ACLAction$outboundSchema).optional(),
    billingInformation: z.array(ACLAction$outboundSchema).optional(),
    billingInvoice: z.array(ACLAction$outboundSchema).optional(),
    billingInvoiceEmailRecipient: z.array(ACLAction$outboundSchema).optional(),
    billingInvoiceLanguage: z.array(ACLAction$outboundSchema).optional(),
    billingPlan: z.array(ACLAction$outboundSchema).optional(),
    billingPurchaseOrder: z.array(ACLAction$outboundSchema).optional(),
    billingRefund: z.array(ACLAction$outboundSchema).optional(),
    billingTaxId: z.array(ACLAction$outboundSchema).optional(),
    blob: z.array(ACLAction$outboundSchema).optional(),
    budget: z.array(ACLAction$outboundSchema).optional(),
    cacheArtifact: z.array(ACLAction$outboundSchema).optional(),
    cacheArtifactUsageEvent: z.array(ACLAction$outboundSchema).optional(),
    codeChecks: z.array(ACLAction$outboundSchema).optional(),
    concurrentBuilds: z.array(ACLAction$outboundSchema).optional(),
    connect: z.array(ACLAction$outboundSchema).optional(),
    connectConfiguration: z.array(ACLAction$outboundSchema).optional(),
    defaultDeploymentProtection: z.array(ACLAction$outboundSchema).optional(),
    domain: z.array(ACLAction$outboundSchema).optional(),
    domainAcceptDelegation: z.array(ACLAction$outboundSchema).optional(),
    domainAuthCodes: z.array(ACLAction$outboundSchema).optional(),
    domainCertificate: z.array(ACLAction$outboundSchema).optional(),
    domainCheckConfig: z.array(ACLAction$outboundSchema).optional(),
    domainMove: z.array(ACLAction$outboundSchema).optional(),
    domainPurchase: z.array(ACLAction$outboundSchema).optional(),
    domainRecord: z.array(ACLAction$outboundSchema).optional(),
    domainTransferIn: z.array(ACLAction$outboundSchema).optional(),
    event: z.array(ACLAction$outboundSchema).optional(),
    ownEvent: z.array(ACLAction$outboundSchema).optional(),
    sensitiveEnvironmentVariablePolicy: z.array(ACLAction$outboundSchema)
        .optional(),
    fileUpload: z.array(ACLAction$outboundSchema).optional(),
    flagsExplorerSubscription: z.array(ACLAction$outboundSchema).optional(),
    gitRepository: z.array(ACLAction$outboundSchema).optional(),
    ipBlocking: z.array(ACLAction$outboundSchema).optional(),
    imageOptimizationNewPrice: z.array(ACLAction$outboundSchema).optional(),
    integration: z.array(ACLAction$outboundSchema).optional(),
    integrationAccount: z.array(ACLAction$outboundSchema).optional(),
    integrationConfiguration: z.array(ACLAction$outboundSchema).optional(),
    integrationConfigurationTransfer: z.array(ACLAction$outboundSchema)
        .optional(),
    integrationConfigurationProjects: z.array(ACLAction$outboundSchema)
        .optional(),
    integrationVercelConfigurationOverride: z.array(ACLAction$outboundSchema)
        .optional(),
    integrationConfigurationRole: z.array(ACLAction$outboundSchema).optional(),
    integrationSSOSession: z.array(ACLAction$outboundSchema).optional(),
    integrationResource: z.array(ACLAction$outboundSchema).optional(),
    integrationEvent: z.array(ACLAction$outboundSchema).optional(),
    integrationResourceSecrets: z.array(ACLAction$outboundSchema).optional(),
    integrationDeploymentAction: z.array(ACLAction$outboundSchema).optional(),
    marketplaceInstallationMember: z.array(ACLAction$outboundSchema).optional(),
    marketplaceBillingData: z.array(ACLAction$outboundSchema).optional(),
    marketplaceInvoice: z.array(ACLAction$outboundSchema).optional(),
    marketplaceSettings: z.array(ACLAction$outboundSchema).optional(),
    marketplaceExperimentationItem: z.array(ACLAction$outboundSchema).optional(),
    marketplaceExperimentationEdgeConfigData: z.array(ACLAction$outboundSchema)
        .optional(),
    jobGlobal: z.array(ACLAction$outboundSchema).optional(),
    drain: z.array(ACLAction$outboundSchema).optional(),
    logDrain: z.array(ACLAction$outboundSchema).optional(),
    traceDrain: z.array(ACLAction$outboundSchema).optional(),
    monitoring: z.array(ACLAction$outboundSchema).optional(),
    monitoringSettings: z.array(ACLAction$outboundSchema).optional(),
    monitoringQuery: z.array(ACLAction$outboundSchema).optional(),
    monitoringChart: z.array(ACLAction$outboundSchema).optional(),
    monitoringAlert: z.array(ACLAction$outboundSchema).optional(),
    notificationDeploymentFailed: z.array(ACLAction$outboundSchema).optional(),
    notificationDomainConfiguration: z.array(ACLAction$outboundSchema).optional(),
    notificationDomainExpire: z.array(ACLAction$outboundSchema).optional(),
    notificationDomainMoved: z.array(ACLAction$outboundSchema).optional(),
    notificationDomainPurchase: z.array(ACLAction$outboundSchema).optional(),
    notificationDomainRenewal: z.array(ACLAction$outboundSchema).optional(),
    notificationDomainTransfer: z.array(ACLAction$outboundSchema).optional(),
    notificationDomainUnverified: z.array(ACLAction$outboundSchema).optional(),
    notificationMonitoringAlert: z.array(ACLAction$outboundSchema).optional(),
    notificationPaymentFailed: z.array(ACLAction$outboundSchema).optional(),
    notificationUsageAlert: z.array(ACLAction$outboundSchema).optional(),
    notificationPreferences: z.array(ACLAction$outboundSchema).optional(),
    notificationCustomerBudget: z.array(ACLAction$outboundSchema).optional(),
    notificationStatementOfReasons: z.array(ACLAction$outboundSchema).optional(),
    observabilityConfiguration: z.array(ACLAction$outboundSchema).optional(),
    alerts: z.array(ACLAction$outboundSchema).optional(),
    observabilityNotebook: z.array(ACLAction$outboundSchema).optional(),
    observabilityFunnel: z.array(ACLAction$outboundSchema).optional(),
    openTelemetryEndpoint: z.array(ACLAction$outboundSchema).optional(),
    vercelAppInstallation: z.array(ACLAction$outboundSchema).optional(),
    vercelAppInstallationRequest: z.array(ACLAction$outboundSchema).optional(),
    paymentMethod: z.array(ACLAction$outboundSchema).optional(),
    permissions: z.array(ACLAction$outboundSchema).optional(),
    postgres: z.array(ACLAction$outboundSchema).optional(),
    previewDeploymentSuffix: z.array(ACLAction$outboundSchema).optional(),
    proTrialOnboarding: z.array(ACLAction$outboundSchema).optional(),
    sharedEnvVars: z.array(ACLAction$outboundSchema).optional(),
    sharedEnvVarsProduction: z.array(ACLAction$outboundSchema).optional(),
    space: z.array(ACLAction$outboundSchema).optional(),
    spaceRun: z.array(ACLAction$outboundSchema).optional(),
    passwordProtectionInvoiceItem: z.array(ACLAction$outboundSchema).optional(),
    rateLimit: z.array(ACLAction$outboundSchema).optional(),
    redis: z.array(ACLAction$outboundSchema).optional(),
    repository: z.array(ACLAction$outboundSchema).optional(),
    remoteCaching: z.array(ACLAction$outboundSchema).optional(),
    samlConfig: z.array(ACLAction$outboundSchema).optional(),
    secret: z.array(ACLAction$outboundSchema).optional(),
    redisStoreTokenSet: z.array(ACLAction$outboundSchema).optional(),
    blobStoreTokenSet: z.array(ACLAction$outboundSchema).optional(),
    postgresStoreTokenSet: z.array(ACLAction$outboundSchema).optional(),
    integrationStoreTokenSet: z.array(ACLAction$outboundSchema).optional(),
    integrationResourceReplCommand: z.array(ACLAction$outboundSchema).optional(),
    storeTransfer: z.array(ACLAction$outboundSchema).optional(),
    supportCase: z.array(ACLAction$outboundSchema).optional(),
    supportCaseComment: z.array(ACLAction$outboundSchema).optional(),
    dataCacheBillingSettings: z.array(ACLAction$outboundSchema).optional(),
    team: z.array(ACLAction$outboundSchema).optional(),
    teamAccessRequest: z.array(ACLAction$outboundSchema).optional(),
    teamFellowMembership: z.array(ACLAction$outboundSchema).optional(),
    teamGitExclusivity: z.array(ACLAction$outboundSchema).optional(),
    teamInvite: z.array(ACLAction$outboundSchema).optional(),
    teamInviteCode: z.array(ACLAction$outboundSchema).optional(),
    teamJoin: z.array(ACLAction$outboundSchema).optional(),
    teamMemberMfaStatus: z.array(ACLAction$outboundSchema).optional(),
    teamMicrofrontends: z.array(ACLAction$outboundSchema).optional(),
    teamOwnMembership: z.array(ACLAction$outboundSchema).optional(),
    teamOwnMembershipDisconnectSAML: z.array(ACLAction$outboundSchema).optional(),
    token: z.array(ACLAction$outboundSchema).optional(),
    usage: z.array(ACLAction$outboundSchema).optional(),
    usageCycle: z.array(ACLAction$outboundSchema).optional(),
    vpcPeeringConnection: z.array(ACLAction$outboundSchema).optional(),
    webAnalyticsPlan: z.array(ACLAction$outboundSchema).optional(),
    edgeConfig: z.array(ACLAction$outboundSchema).optional(),
    edgeConfigItem: z.array(ACLAction$outboundSchema).optional(),
    edgeConfigSchema: z.array(ACLAction$outboundSchema).optional(),
    edgeConfigToken: z.array(ACLAction$outboundSchema).optional(),
    webhook: z.array(ACLAction$outboundSchema).optional(),
    webhookEvent: z.array(ACLAction$outboundSchema).optional(),
    endpointVerification: z.array(ACLAction$outboundSchema).optional(),
    projectTransferIn: z.array(ACLAction$outboundSchema).optional(),
    oauth2Application: z.array(ACLAction$outboundSchema).optional(),
    vercelRun: z.array(ACLAction$outboundSchema).optional(),
    vercelRunExec: z.array(ACLAction$outboundSchema).optional(),
    apiKey: z.array(ACLAction$outboundSchema).optional(),
    apiKeyOwnedBySelf: z.array(ACLAction$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        monitoring: "Monitoring",
        notificationMonitoringAlert: "NotificationMonitoringAlert",
        webhookEvent: "webhook-event",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsPermissions$;
(function (GetProjectsPermissions$) {
    /** @deprecated use `GetProjectsPermissions$inboundSchema` instead. */
    GetProjectsPermissions$.inboundSchema = GetProjectsPermissions$inboundSchema;
    /** @deprecated use `GetProjectsPermissions$outboundSchema` instead. */
    GetProjectsPermissions$.outboundSchema = GetProjectsPermissions$outboundSchema;
})(GetProjectsPermissions$ || (GetProjectsPermissions$ = {}));
export function getProjectsPermissionsToJSON(getProjectsPermissions) {
    return JSON.stringify(GetProjectsPermissions$outboundSchema.parse(getProjectsPermissions));
}
export function getProjectsPermissionsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsPermissions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsPermissions' from JSON`);
}
/** @internal */
export const GetProjectsLastRollbackTarget$inboundSchema = z.object({});
/** @internal */
export const GetProjectsLastRollbackTarget$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsLastRollbackTarget$;
(function (GetProjectsLastRollbackTarget$) {
    /** @deprecated use `GetProjectsLastRollbackTarget$inboundSchema` instead. */
    GetProjectsLastRollbackTarget$.inboundSchema = GetProjectsLastRollbackTarget$inboundSchema;
    /** @deprecated use `GetProjectsLastRollbackTarget$outboundSchema` instead. */
    GetProjectsLastRollbackTarget$.outboundSchema = GetProjectsLastRollbackTarget$outboundSchema;
})(GetProjectsLastRollbackTarget$ || (GetProjectsLastRollbackTarget$ = {}));
export function getProjectsLastRollbackTargetToJSON(getProjectsLastRollbackTarget) {
    return JSON.stringify(GetProjectsLastRollbackTarget$outboundSchema.parse(getProjectsLastRollbackTarget));
}
export function getProjectsLastRollbackTargetFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsLastRollbackTarget$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsLastRollbackTarget' from JSON`);
}
/** @internal */
export const GetProjectsJobStatus$inboundSchema = z.nativeEnum(GetProjectsJobStatus);
/** @internal */
export const GetProjectsJobStatus$outboundSchema = GetProjectsJobStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsJobStatus$;
(function (GetProjectsJobStatus$) {
    /** @deprecated use `GetProjectsJobStatus$inboundSchema` instead. */
    GetProjectsJobStatus$.inboundSchema = GetProjectsJobStatus$inboundSchema;
    /** @deprecated use `GetProjectsJobStatus$outboundSchema` instead. */
    GetProjectsJobStatus$.outboundSchema = GetProjectsJobStatus$outboundSchema;
})(GetProjectsJobStatus$ || (GetProjectsJobStatus$ = {}));
/** @internal */
export const GetProjectsProjectsResponse200ApplicationJSONType$inboundSchema = z
    .nativeEnum(GetProjectsProjectsResponse200ApplicationJSONType);
/** @internal */
export const GetProjectsProjectsResponse200ApplicationJSONType$outboundSchema = GetProjectsProjectsResponse200ApplicationJSONType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsProjectsResponse200ApplicationJSONType$;
(function (GetProjectsProjectsResponse200ApplicationJSONType$) {
    /** @deprecated use `GetProjectsProjectsResponse200ApplicationJSONType$inboundSchema` instead. */
    GetProjectsProjectsResponse200ApplicationJSONType$.inboundSchema = GetProjectsProjectsResponse200ApplicationJSONType$inboundSchema;
    /** @deprecated use `GetProjectsProjectsResponse200ApplicationJSONType$outboundSchema` instead. */
    GetProjectsProjectsResponse200ApplicationJSONType$.outboundSchema = GetProjectsProjectsResponse200ApplicationJSONType$outboundSchema;
})(GetProjectsProjectsResponse200ApplicationJSONType$ || (GetProjectsProjectsResponse200ApplicationJSONType$ = {}));
/** @internal */
export const GetProjectsLastAliasRequest$inboundSchema = z.object({
    fromDeploymentId: z.string(),
    toDeploymentId: z.string(),
    fromRollingReleaseId: z.string().optional(),
    jobStatus: GetProjectsJobStatus$inboundSchema,
    requestedAt: z.number(),
    type: GetProjectsProjectsResponse200ApplicationJSONType$inboundSchema,
});
/** @internal */
export const GetProjectsLastAliasRequest$outboundSchema = z.object({
    fromDeploymentId: z.string(),
    toDeploymentId: z.string(),
    fromRollingReleaseId: z.string().optional(),
    jobStatus: GetProjectsJobStatus$outboundSchema,
    requestedAt: z.number(),
    type: GetProjectsProjectsResponse200ApplicationJSONType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsLastAliasRequest$;
(function (GetProjectsLastAliasRequest$) {
    /** @deprecated use `GetProjectsLastAliasRequest$inboundSchema` instead. */
    GetProjectsLastAliasRequest$.inboundSchema = GetProjectsLastAliasRequest$inboundSchema;
    /** @deprecated use `GetProjectsLastAliasRequest$outboundSchema` instead. */
    GetProjectsLastAliasRequest$.outboundSchema = GetProjectsLastAliasRequest$outboundSchema;
})(GetProjectsLastAliasRequest$ || (GetProjectsLastAliasRequest$ = {}));
export function getProjectsLastAliasRequestToJSON(getProjectsLastAliasRequest) {
    return JSON.stringify(GetProjectsLastAliasRequest$outboundSchema.parse(getProjectsLastAliasRequest));
}
export function getProjectsLastAliasRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsLastAliasRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsLastAliasRequest' from JSON`);
}
/** @internal */
export const GetProjectsProtectionBypassProjectsScope$inboundSchema = z
    .nativeEnum(GetProjectsProtectionBypassProjectsScope);
/** @internal */
export const GetProjectsProtectionBypassProjectsScope$outboundSchema = GetProjectsProtectionBypassProjectsScope$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsProtectionBypassProjectsScope$;
(function (GetProjectsProtectionBypassProjectsScope$) {
    /** @deprecated use `GetProjectsProtectionBypassProjectsScope$inboundSchema` instead. */
    GetProjectsProtectionBypassProjectsScope$.inboundSchema = GetProjectsProtectionBypassProjectsScope$inboundSchema;
    /** @deprecated use `GetProjectsProtectionBypassProjectsScope$outboundSchema` instead. */
    GetProjectsProtectionBypassProjectsScope$.outboundSchema = GetProjectsProtectionBypassProjectsScope$outboundSchema;
})(GetProjectsProtectionBypassProjectsScope$ || (GetProjectsProtectionBypassProjectsScope$ = {}));
/** @internal */
export const GetProjectsProtectionBypass2$inboundSchema = z.object({
    createdAt: z.number(),
    createdBy: z.string(),
    scope: GetProjectsProtectionBypassProjectsScope$inboundSchema,
});
/** @internal */
export const GetProjectsProtectionBypass2$outboundSchema = z.object({
    createdAt: z.number(),
    createdBy: z.string(),
    scope: GetProjectsProtectionBypassProjectsScope$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsProtectionBypass2$;
(function (GetProjectsProtectionBypass2$) {
    /** @deprecated use `GetProjectsProtectionBypass2$inboundSchema` instead. */
    GetProjectsProtectionBypass2$.inboundSchema = GetProjectsProtectionBypass2$inboundSchema;
    /** @deprecated use `GetProjectsProtectionBypass2$outboundSchema` instead. */
    GetProjectsProtectionBypass2$.outboundSchema = GetProjectsProtectionBypass2$outboundSchema;
})(GetProjectsProtectionBypass2$ || (GetProjectsProtectionBypass2$ = {}));
export function getProjectsProtectionBypass2ToJSON(getProjectsProtectionBypass2) {
    return JSON.stringify(GetProjectsProtectionBypass2$outboundSchema.parse(getProjectsProtectionBypass2));
}
export function getProjectsProtectionBypass2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsProtectionBypass2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsProtectionBypass2' from JSON`);
}
/** @internal */
export const GetProjectsProtectionBypassScope$inboundSchema = z.nativeEnum(GetProjectsProtectionBypassScope);
/** @internal */
export const GetProjectsProtectionBypassScope$outboundSchema = GetProjectsProtectionBypassScope$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsProtectionBypassScope$;
(function (GetProjectsProtectionBypassScope$) {
    /** @deprecated use `GetProjectsProtectionBypassScope$inboundSchema` instead. */
    GetProjectsProtectionBypassScope$.inboundSchema = GetProjectsProtectionBypassScope$inboundSchema;
    /** @deprecated use `GetProjectsProtectionBypassScope$outboundSchema` instead. */
    GetProjectsProtectionBypassScope$.outboundSchema = GetProjectsProtectionBypassScope$outboundSchema;
})(GetProjectsProtectionBypassScope$ || (GetProjectsProtectionBypassScope$ = {}));
/** @internal */
export const GetProjectsProtectionBypass1$inboundSchema = z.object({
    createdAt: z.number(),
    createdBy: z.string(),
    scope: GetProjectsProtectionBypassScope$inboundSchema,
    integrationId: z.string(),
    configurationId: z.string(),
});
/** @internal */
export const GetProjectsProtectionBypass1$outboundSchema = z.object({
    createdAt: z.number(),
    createdBy: z.string(),
    scope: GetProjectsProtectionBypassScope$outboundSchema,
    integrationId: z.string(),
    configurationId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsProtectionBypass1$;
(function (GetProjectsProtectionBypass1$) {
    /** @deprecated use `GetProjectsProtectionBypass1$inboundSchema` instead. */
    GetProjectsProtectionBypass1$.inboundSchema = GetProjectsProtectionBypass1$inboundSchema;
    /** @deprecated use `GetProjectsProtectionBypass1$outboundSchema` instead. */
    GetProjectsProtectionBypass1$.outboundSchema = GetProjectsProtectionBypass1$outboundSchema;
})(GetProjectsProtectionBypass1$ || (GetProjectsProtectionBypass1$ = {}));
export function getProjectsProtectionBypass1ToJSON(getProjectsProtectionBypass1) {
    return JSON.stringify(GetProjectsProtectionBypass1$outboundSchema.parse(getProjectsProtectionBypass1));
}
export function getProjectsProtectionBypass1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsProtectionBypass1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsProtectionBypass1' from JSON`);
}
/** @internal */
export const GetProjectsProtectionBypass$inboundSchema = z.union([
    z.lazy(() => GetProjectsProtectionBypass1$inboundSchema),
    z.lazy(() => GetProjectsProtectionBypass2$inboundSchema),
]);
/** @internal */
export const GetProjectsProtectionBypass$outboundSchema = z.union([
    z.lazy(() => GetProjectsProtectionBypass1$outboundSchema),
    z.lazy(() => GetProjectsProtectionBypass2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsProtectionBypass$;
(function (GetProjectsProtectionBypass$) {
    /** @deprecated use `GetProjectsProtectionBypass$inboundSchema` instead. */
    GetProjectsProtectionBypass$.inboundSchema = GetProjectsProtectionBypass$inboundSchema;
    /** @deprecated use `GetProjectsProtectionBypass$outboundSchema` instead. */
    GetProjectsProtectionBypass$.outboundSchema = GetProjectsProtectionBypass$outboundSchema;
})(GetProjectsProtectionBypass$ || (GetProjectsProtectionBypass$ = {}));
export function getProjectsProtectionBypassToJSON(getProjectsProtectionBypass) {
    return JSON.stringify(GetProjectsProtectionBypass$outboundSchema.parse(getProjectsProtectionBypass));
}
export function getProjectsProtectionBypassFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsProtectionBypass$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsProtectionBypass' from JSON`);
}
/** @internal */
export const GetProjectsTrustedIpsProjectsDeploymentType$inboundSchema = z
    .nativeEnum(GetProjectsTrustedIpsProjectsDeploymentType);
/** @internal */
export const GetProjectsTrustedIpsProjectsDeploymentType$outboundSchema = GetProjectsTrustedIpsProjectsDeploymentType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsTrustedIpsProjectsDeploymentType$;
(function (GetProjectsTrustedIpsProjectsDeploymentType$) {
    /** @deprecated use `GetProjectsTrustedIpsProjectsDeploymentType$inboundSchema` instead. */
    GetProjectsTrustedIpsProjectsDeploymentType$.inboundSchema = GetProjectsTrustedIpsProjectsDeploymentType$inboundSchema;
    /** @deprecated use `GetProjectsTrustedIpsProjectsDeploymentType$outboundSchema` instead. */
    GetProjectsTrustedIpsProjectsDeploymentType$.outboundSchema = GetProjectsTrustedIpsProjectsDeploymentType$outboundSchema;
})(GetProjectsTrustedIpsProjectsDeploymentType$ || (GetProjectsTrustedIpsProjectsDeploymentType$ = {}));
/** @internal */
export const GetProjectsTrustedIps2$inboundSchema = z.object({
    deploymentType: GetProjectsTrustedIpsProjectsDeploymentType$inboundSchema,
});
/** @internal */
export const GetProjectsTrustedIps2$outboundSchema = z.object({
    deploymentType: GetProjectsTrustedIpsProjectsDeploymentType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsTrustedIps2$;
(function (GetProjectsTrustedIps2$) {
    /** @deprecated use `GetProjectsTrustedIps2$inboundSchema` instead. */
    GetProjectsTrustedIps2$.inboundSchema = GetProjectsTrustedIps2$inboundSchema;
    /** @deprecated use `GetProjectsTrustedIps2$outboundSchema` instead. */
    GetProjectsTrustedIps2$.outboundSchema = GetProjectsTrustedIps2$outboundSchema;
})(GetProjectsTrustedIps2$ || (GetProjectsTrustedIps2$ = {}));
export function getProjectsTrustedIps2ToJSON(getProjectsTrustedIps2) {
    return JSON.stringify(GetProjectsTrustedIps2$outboundSchema.parse(getProjectsTrustedIps2));
}
export function getProjectsTrustedIps2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsTrustedIps2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsTrustedIps2' from JSON`);
}
/** @internal */
export const GetProjectsTrustedIpsDeploymentType$inboundSchema = z.nativeEnum(GetProjectsTrustedIpsDeploymentType);
/** @internal */
export const GetProjectsTrustedIpsDeploymentType$outboundSchema = GetProjectsTrustedIpsDeploymentType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsTrustedIpsDeploymentType$;
(function (GetProjectsTrustedIpsDeploymentType$) {
    /** @deprecated use `GetProjectsTrustedIpsDeploymentType$inboundSchema` instead. */
    GetProjectsTrustedIpsDeploymentType$.inboundSchema = GetProjectsTrustedIpsDeploymentType$inboundSchema;
    /** @deprecated use `GetProjectsTrustedIpsDeploymentType$outboundSchema` instead. */
    GetProjectsTrustedIpsDeploymentType$.outboundSchema = GetProjectsTrustedIpsDeploymentType$outboundSchema;
})(GetProjectsTrustedIpsDeploymentType$ || (GetProjectsTrustedIpsDeploymentType$ = {}));
/** @internal */
export const GetProjectsTrustedIpsAddresses$inboundSchema = z.object({
    value: z.string(),
    note: z.string().optional(),
});
/** @internal */
export const GetProjectsTrustedIpsAddresses$outboundSchema = z.object({
    value: z.string(),
    note: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsTrustedIpsAddresses$;
(function (GetProjectsTrustedIpsAddresses$) {
    /** @deprecated use `GetProjectsTrustedIpsAddresses$inboundSchema` instead. */
    GetProjectsTrustedIpsAddresses$.inboundSchema = GetProjectsTrustedIpsAddresses$inboundSchema;
    /** @deprecated use `GetProjectsTrustedIpsAddresses$outboundSchema` instead. */
    GetProjectsTrustedIpsAddresses$.outboundSchema = GetProjectsTrustedIpsAddresses$outboundSchema;
})(GetProjectsTrustedIpsAddresses$ || (GetProjectsTrustedIpsAddresses$ = {}));
export function getProjectsTrustedIpsAddressesToJSON(getProjectsTrustedIpsAddresses) {
    return JSON.stringify(GetProjectsTrustedIpsAddresses$outboundSchema.parse(getProjectsTrustedIpsAddresses));
}
export function getProjectsTrustedIpsAddressesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsTrustedIpsAddresses$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsTrustedIpsAddresses' from JSON`);
}
/** @internal */
export const GetProjectsTrustedIpsProtectionMode$inboundSchema = z.nativeEnum(GetProjectsTrustedIpsProtectionMode);
/** @internal */
export const GetProjectsTrustedIpsProtectionMode$outboundSchema = GetProjectsTrustedIpsProtectionMode$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsTrustedIpsProtectionMode$;
(function (GetProjectsTrustedIpsProtectionMode$) {
    /** @deprecated use `GetProjectsTrustedIpsProtectionMode$inboundSchema` instead. */
    GetProjectsTrustedIpsProtectionMode$.inboundSchema = GetProjectsTrustedIpsProtectionMode$inboundSchema;
    /** @deprecated use `GetProjectsTrustedIpsProtectionMode$outboundSchema` instead. */
    GetProjectsTrustedIpsProtectionMode$.outboundSchema = GetProjectsTrustedIpsProtectionMode$outboundSchema;
})(GetProjectsTrustedIpsProtectionMode$ || (GetProjectsTrustedIpsProtectionMode$ = {}));
/** @internal */
export const GetProjectsTrustedIps1$inboundSchema = z.object({
    deploymentType: GetProjectsTrustedIpsDeploymentType$inboundSchema,
    addresses: z.array(z.lazy(() => GetProjectsTrustedIpsAddresses$inboundSchema)),
    protectionMode: GetProjectsTrustedIpsProtectionMode$inboundSchema,
});
/** @internal */
export const GetProjectsTrustedIps1$outboundSchema = z.object({
    deploymentType: GetProjectsTrustedIpsDeploymentType$outboundSchema,
    addresses: z.array(z.lazy(() => GetProjectsTrustedIpsAddresses$outboundSchema)),
    protectionMode: GetProjectsTrustedIpsProtectionMode$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsTrustedIps1$;
(function (GetProjectsTrustedIps1$) {
    /** @deprecated use `GetProjectsTrustedIps1$inboundSchema` instead. */
    GetProjectsTrustedIps1$.inboundSchema = GetProjectsTrustedIps1$inboundSchema;
    /** @deprecated use `GetProjectsTrustedIps1$outboundSchema` instead. */
    GetProjectsTrustedIps1$.outboundSchema = GetProjectsTrustedIps1$outboundSchema;
})(GetProjectsTrustedIps1$ || (GetProjectsTrustedIps1$ = {}));
export function getProjectsTrustedIps1ToJSON(getProjectsTrustedIps1) {
    return JSON.stringify(GetProjectsTrustedIps1$outboundSchema.parse(getProjectsTrustedIps1));
}
export function getProjectsTrustedIps1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsTrustedIps1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsTrustedIps1' from JSON`);
}
/** @internal */
export const GetProjectsTrustedIps$inboundSchema = z.union([
    z.lazy(() => GetProjectsTrustedIps1$inboundSchema),
    z.lazy(() => GetProjectsTrustedIps2$inboundSchema),
]);
/** @internal */
export const GetProjectsTrustedIps$outboundSchema = z.union([
    z.lazy(() => GetProjectsTrustedIps1$outboundSchema),
    z.lazy(() => GetProjectsTrustedIps2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsTrustedIps$;
(function (GetProjectsTrustedIps$) {
    /** @deprecated use `GetProjectsTrustedIps$inboundSchema` instead. */
    GetProjectsTrustedIps$.inboundSchema = GetProjectsTrustedIps$inboundSchema;
    /** @deprecated use `GetProjectsTrustedIps$outboundSchema` instead. */
    GetProjectsTrustedIps$.outboundSchema = GetProjectsTrustedIps$outboundSchema;
})(GetProjectsTrustedIps$ || (GetProjectsTrustedIps$ = {}));
export function getProjectsTrustedIpsToJSON(getProjectsTrustedIps) {
    return JSON.stringify(GetProjectsTrustedIps$outboundSchema.parse(getProjectsTrustedIps));
}
export function getProjectsTrustedIpsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsTrustedIps$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsTrustedIps' from JSON`);
}
/** @internal */
export const GetProjectsGitComments$inboundSchema = z.object({
    onPullRequest: z.boolean(),
    onCommit: z.boolean(),
});
/** @internal */
export const GetProjectsGitComments$outboundSchema = z.object({
    onPullRequest: z.boolean(),
    onCommit: z.boolean(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsGitComments$;
(function (GetProjectsGitComments$) {
    /** @deprecated use `GetProjectsGitComments$inboundSchema` instead. */
    GetProjectsGitComments$.inboundSchema = GetProjectsGitComments$inboundSchema;
    /** @deprecated use `GetProjectsGitComments$outboundSchema` instead. */
    GetProjectsGitComments$.outboundSchema = GetProjectsGitComments$outboundSchema;
})(GetProjectsGitComments$ || (GetProjectsGitComments$ = {}));
export function getProjectsGitCommentsToJSON(getProjectsGitComments) {
    return JSON.stringify(GetProjectsGitComments$outboundSchema.parse(getProjectsGitComments));
}
export function getProjectsGitCommentsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsGitComments$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsGitComments' from JSON`);
}
/** @internal */
export const GetProjectsCreateDeployments$inboundSchema = z.nativeEnum(GetProjectsCreateDeployments);
/** @internal */
export const GetProjectsCreateDeployments$outboundSchema = GetProjectsCreateDeployments$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsCreateDeployments$;
(function (GetProjectsCreateDeployments$) {
    /** @deprecated use `GetProjectsCreateDeployments$inboundSchema` instead. */
    GetProjectsCreateDeployments$.inboundSchema = GetProjectsCreateDeployments$inboundSchema;
    /** @deprecated use `GetProjectsCreateDeployments$outboundSchema` instead. */
    GetProjectsCreateDeployments$.outboundSchema = GetProjectsCreateDeployments$outboundSchema;
})(GetProjectsCreateDeployments$ || (GetProjectsCreateDeployments$ = {}));
/** @internal */
export const GetProjectsGitProviderOptions$inboundSchema = z.object({
    createDeployments: GetProjectsCreateDeployments$inboundSchema,
    disableRepositoryDispatchEvents: z.boolean().optional(),
});
/** @internal */
export const GetProjectsGitProviderOptions$outboundSchema = z.object({
    createDeployments: GetProjectsCreateDeployments$outboundSchema,
    disableRepositoryDispatchEvents: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsGitProviderOptions$;
(function (GetProjectsGitProviderOptions$) {
    /** @deprecated use `GetProjectsGitProviderOptions$inboundSchema` instead. */
    GetProjectsGitProviderOptions$.inboundSchema = GetProjectsGitProviderOptions$inboundSchema;
    /** @deprecated use `GetProjectsGitProviderOptions$outboundSchema` instead. */
    GetProjectsGitProviderOptions$.outboundSchema = GetProjectsGitProviderOptions$outboundSchema;
})(GetProjectsGitProviderOptions$ || (GetProjectsGitProviderOptions$ = {}));
export function getProjectsGitProviderOptionsToJSON(getProjectsGitProviderOptions) {
    return JSON.stringify(GetProjectsGitProviderOptions$outboundSchema.parse(getProjectsGitProviderOptions));
}
export function getProjectsGitProviderOptionsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsGitProviderOptions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsGitProviderOptions' from JSON`);
}
/** @internal */
export const GetProjectsWebAnalytics$inboundSchema = z.object({
    id: z.string(),
    disabledAt: z.number().optional(),
    canceledAt: z.number().optional(),
    enabledAt: z.number().optional(),
    hasData: z.boolean().optional(),
});
/** @internal */
export const GetProjectsWebAnalytics$outboundSchema = z.object({
    id: z.string(),
    disabledAt: z.number().optional(),
    canceledAt: z.number().optional(),
    enabledAt: z.number().optional(),
    hasData: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsWebAnalytics$;
(function (GetProjectsWebAnalytics$) {
    /** @deprecated use `GetProjectsWebAnalytics$inboundSchema` instead. */
    GetProjectsWebAnalytics$.inboundSchema = GetProjectsWebAnalytics$inboundSchema;
    /** @deprecated use `GetProjectsWebAnalytics$outboundSchema` instead. */
    GetProjectsWebAnalytics$.outboundSchema = GetProjectsWebAnalytics$outboundSchema;
})(GetProjectsWebAnalytics$ || (GetProjectsWebAnalytics$ = {}));
export function getProjectsWebAnalyticsToJSON(getProjectsWebAnalytics) {
    return JSON.stringify(GetProjectsWebAnalytics$outboundSchema.parse(getProjectsWebAnalytics));
}
export function getProjectsWebAnalyticsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsWebAnalytics$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsWebAnalytics' from JSON`);
}
/** @internal */
export const GetProjectsProjectsResponse200Action$inboundSchema = z.nativeEnum(GetProjectsProjectsResponse200Action);
/** @internal */
export const GetProjectsProjectsResponse200Action$outboundSchema = GetProjectsProjectsResponse200Action$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsProjectsResponse200Action$;
(function (GetProjectsProjectsResponse200Action$) {
    /** @deprecated use `GetProjectsProjectsResponse200Action$inboundSchema` instead. */
    GetProjectsProjectsResponse200Action$.inboundSchema = GetProjectsProjectsResponse200Action$inboundSchema;
    /** @deprecated use `GetProjectsProjectsResponse200Action$outboundSchema` instead. */
    GetProjectsProjectsResponse200Action$.outboundSchema = GetProjectsProjectsResponse200Action$outboundSchema;
})(GetProjectsProjectsResponse200Action$ || (GetProjectsProjectsResponse200Action$ = {}));
/** @internal */
export const GetProjectsBotFilter$inboundSchema = z.object({
    active: z.boolean(),
    action: GetProjectsProjectsResponse200Action$inboundSchema.optional(),
});
/** @internal */
export const GetProjectsBotFilter$outboundSchema = z.object({
    active: z.boolean(),
    action: GetProjectsProjectsResponse200Action$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsBotFilter$;
(function (GetProjectsBotFilter$) {
    /** @deprecated use `GetProjectsBotFilter$inboundSchema` instead. */
    GetProjectsBotFilter$.inboundSchema = GetProjectsBotFilter$inboundSchema;
    /** @deprecated use `GetProjectsBotFilter$outboundSchema` instead. */
    GetProjectsBotFilter$.outboundSchema = GetProjectsBotFilter$outboundSchema;
})(GetProjectsBotFilter$ || (GetProjectsBotFilter$ = {}));
export function getProjectsBotFilterToJSON(getProjectsBotFilter) {
    return JSON.stringify(GetProjectsBotFilter$outboundSchema.parse(getProjectsBotFilter));
}
export function getProjectsBotFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsBotFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsBotFilter' from JSON`);
}
/** @internal */
export const GetProjectsProjectsAction$inboundSchema = z.nativeEnum(GetProjectsProjectsAction);
/** @internal */
export const GetProjectsProjectsAction$outboundSchema = GetProjectsProjectsAction$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsProjectsAction$;
(function (GetProjectsProjectsAction$) {
    /** @deprecated use `GetProjectsProjectsAction$inboundSchema` instead. */
    GetProjectsProjectsAction$.inboundSchema = GetProjectsProjectsAction$inboundSchema;
    /** @deprecated use `GetProjectsProjectsAction$outboundSchema` instead. */
    GetProjectsProjectsAction$.outboundSchema = GetProjectsProjectsAction$outboundSchema;
})(GetProjectsProjectsAction$ || (GetProjectsProjectsAction$ = {}));
/** @internal */
export const GetProjectsAiBots$inboundSchema = z.object({
    active: z.boolean(),
    action: GetProjectsProjectsAction$inboundSchema.optional(),
});
/** @internal */
export const GetProjectsAiBots$outboundSchema = z.object({
    active: z.boolean(),
    action: GetProjectsProjectsAction$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsAiBots$;
(function (GetProjectsAiBots$) {
    /** @deprecated use `GetProjectsAiBots$inboundSchema` instead. */
    GetProjectsAiBots$.inboundSchema = GetProjectsAiBots$inboundSchema;
    /** @deprecated use `GetProjectsAiBots$outboundSchema` instead. */
    GetProjectsAiBots$.outboundSchema = GetProjectsAiBots$outboundSchema;
})(GetProjectsAiBots$ || (GetProjectsAiBots$ = {}));
export function getProjectsAiBotsToJSON(getProjectsAiBots) {
    return JSON.stringify(GetProjectsAiBots$outboundSchema.parse(getProjectsAiBots));
}
export function getProjectsAiBotsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsAiBots$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsAiBots' from JSON`);
}
/** @internal */
export const GetProjectsProjectsResponseAction$inboundSchema = z.nativeEnum(GetProjectsProjectsResponseAction);
/** @internal */
export const GetProjectsProjectsResponseAction$outboundSchema = GetProjectsProjectsResponseAction$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsProjectsResponseAction$;
(function (GetProjectsProjectsResponseAction$) {
    /** @deprecated use `GetProjectsProjectsResponseAction$inboundSchema` instead. */
    GetProjectsProjectsResponseAction$.inboundSchema = GetProjectsProjectsResponseAction$inboundSchema;
    /** @deprecated use `GetProjectsProjectsResponseAction$outboundSchema` instead. */
    GetProjectsProjectsResponseAction$.outboundSchema = GetProjectsProjectsResponseAction$outboundSchema;
})(GetProjectsProjectsResponseAction$ || (GetProjectsProjectsResponseAction$ = {}));
/** @internal */
export const GetProjectsOwasp$inboundSchema = z.object({
    active: z.boolean(),
    action: GetProjectsProjectsResponseAction$inboundSchema.optional(),
});
/** @internal */
export const GetProjectsOwasp$outboundSchema = z.object({
    active: z.boolean(),
    action: GetProjectsProjectsResponseAction$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsOwasp$;
(function (GetProjectsOwasp$) {
    /** @deprecated use `GetProjectsOwasp$inboundSchema` instead. */
    GetProjectsOwasp$.inboundSchema = GetProjectsOwasp$inboundSchema;
    /** @deprecated use `GetProjectsOwasp$outboundSchema` instead. */
    GetProjectsOwasp$.outboundSchema = GetProjectsOwasp$outboundSchema;
})(GetProjectsOwasp$ || (GetProjectsOwasp$ = {}));
export function getProjectsOwaspToJSON(getProjectsOwasp) {
    return JSON.stringify(GetProjectsOwasp$outboundSchema.parse(getProjectsOwasp));
}
export function getProjectsOwaspFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsOwasp$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsOwasp' from JSON`);
}
/** @internal */
export const GetProjectsManagedRules$inboundSchema = z.object({
    bot_filter: z.lazy(() => GetProjectsBotFilter$inboundSchema),
    ai_bots: z.lazy(() => GetProjectsAiBots$inboundSchema),
    owasp: z.lazy(() => GetProjectsOwasp$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "bot_filter": "botFilter",
        "ai_bots": "aiBots",
    });
});
/** @internal */
export const GetProjectsManagedRules$outboundSchema = z.object({
    botFilter: z.lazy(() => GetProjectsBotFilter$outboundSchema),
    aiBots: z.lazy(() => GetProjectsAiBots$outboundSchema),
    owasp: z.lazy(() => GetProjectsOwasp$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        botFilter: "bot_filter",
        aiBots: "ai_bots",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsManagedRules$;
(function (GetProjectsManagedRules$) {
    /** @deprecated use `GetProjectsManagedRules$inboundSchema` instead. */
    GetProjectsManagedRules$.inboundSchema = GetProjectsManagedRules$inboundSchema;
    /** @deprecated use `GetProjectsManagedRules$outboundSchema` instead. */
    GetProjectsManagedRules$.outboundSchema = GetProjectsManagedRules$outboundSchema;
})(GetProjectsManagedRules$ || (GetProjectsManagedRules$ = {}));
export function getProjectsManagedRulesToJSON(getProjectsManagedRules) {
    return JSON.stringify(GetProjectsManagedRules$outboundSchema.parse(getProjectsManagedRules));
}
export function getProjectsManagedRulesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsManagedRules$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsManagedRules' from JSON`);
}
/** @internal */
export const GetProjectsSecurity$inboundSchema = z.object({
    attackModeEnabled: z.boolean().optional(),
    attackModeUpdatedAt: z.number().optional(),
    firewallEnabled: z.boolean().optional(),
    firewallUpdatedAt: z.number().optional(),
    attackModeActiveUntil: z.nullable(z.number()).optional(),
    firewallConfigVersion: z.number().optional(),
    firewallSeawallEnabled: z.boolean().optional(),
    ja3Enabled: z.boolean().optional(),
    ja4Enabled: z.boolean().optional(),
    firewallBypassIps: z.array(z.string()).optional(),
    managedRules: z.nullable(z.lazy(() => GetProjectsManagedRules$inboundSchema))
        .optional(),
    botIdEnabled: z.boolean().optional(),
});
/** @internal */
export const GetProjectsSecurity$outboundSchema = z.object({
    attackModeEnabled: z.boolean().optional(),
    attackModeUpdatedAt: z.number().optional(),
    firewallEnabled: z.boolean().optional(),
    firewallUpdatedAt: z.number().optional(),
    attackModeActiveUntil: z.nullable(z.number()).optional(),
    firewallConfigVersion: z.number().optional(),
    firewallSeawallEnabled: z.boolean().optional(),
    ja3Enabled: z.boolean().optional(),
    ja4Enabled: z.boolean().optional(),
    firewallBypassIps: z.array(z.string()).optional(),
    managedRules: z.nullable(z.lazy(() => GetProjectsManagedRules$outboundSchema))
        .optional(),
    botIdEnabled: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsSecurity$;
(function (GetProjectsSecurity$) {
    /** @deprecated use `GetProjectsSecurity$inboundSchema` instead. */
    GetProjectsSecurity$.inboundSchema = GetProjectsSecurity$inboundSchema;
    /** @deprecated use `GetProjectsSecurity$outboundSchema` instead. */
    GetProjectsSecurity$.outboundSchema = GetProjectsSecurity$outboundSchema;
})(GetProjectsSecurity$ || (GetProjectsSecurity$ = {}));
export function getProjectsSecurityToJSON(getProjectsSecurity) {
    return JSON.stringify(GetProjectsSecurity$outboundSchema.parse(getProjectsSecurity));
}
export function getProjectsSecurityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsSecurity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsSecurity' from JSON`);
}
/** @internal */
export const GetProjectsIssuerMode$inboundSchema = z.nativeEnum(GetProjectsIssuerMode);
/** @internal */
export const GetProjectsIssuerMode$outboundSchema = GetProjectsIssuerMode$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsIssuerMode$;
(function (GetProjectsIssuerMode$) {
    /** @deprecated use `GetProjectsIssuerMode$inboundSchema` instead. */
    GetProjectsIssuerMode$.inboundSchema = GetProjectsIssuerMode$inboundSchema;
    /** @deprecated use `GetProjectsIssuerMode$outboundSchema` instead. */
    GetProjectsIssuerMode$.outboundSchema = GetProjectsIssuerMode$outboundSchema;
})(GetProjectsIssuerMode$ || (GetProjectsIssuerMode$ = {}));
/** @internal */
export const GetProjectsOidcTokenConfig$inboundSchema = z.object({
    enabled: z.boolean().optional(),
    issuerMode: GetProjectsIssuerMode$inboundSchema.optional(),
});
/** @internal */
export const GetProjectsOidcTokenConfig$outboundSchema = z.object({
    enabled: z.boolean().optional(),
    issuerMode: GetProjectsIssuerMode$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsOidcTokenConfig$;
(function (GetProjectsOidcTokenConfig$) {
    /** @deprecated use `GetProjectsOidcTokenConfig$inboundSchema` instead. */
    GetProjectsOidcTokenConfig$.inboundSchema = GetProjectsOidcTokenConfig$inboundSchema;
    /** @deprecated use `GetProjectsOidcTokenConfig$outboundSchema` instead. */
    GetProjectsOidcTokenConfig$.outboundSchema = GetProjectsOidcTokenConfig$outboundSchema;
})(GetProjectsOidcTokenConfig$ || (GetProjectsOidcTokenConfig$ = {}));
export function getProjectsOidcTokenConfigToJSON(getProjectsOidcTokenConfig) {
    return JSON.stringify(GetProjectsOidcTokenConfig$outboundSchema.parse(getProjectsOidcTokenConfig));
}
export function getProjectsOidcTokenConfigFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsOidcTokenConfig$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsOidcTokenConfig' from JSON`);
}
/** @internal */
export const GetProjectsTier$inboundSchema = z.nativeEnum(GetProjectsTier);
/** @internal */
export const GetProjectsTier$outboundSchema = GetProjectsTier$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsTier$;
(function (GetProjectsTier$) {
    /** @deprecated use `GetProjectsTier$inboundSchema` instead. */
    GetProjectsTier$.inboundSchema = GetProjectsTier$inboundSchema;
    /** @deprecated use `GetProjectsTier$outboundSchema` instead. */
    GetProjectsTier$.outboundSchema = GetProjectsTier$outboundSchema;
})(GetProjectsTier$ || (GetProjectsTier$ = {}));
/** @internal */
export const GetProjectsFeatures$inboundSchema = z.object({
    webAnalytics: z.boolean().optional(),
});
/** @internal */
export const GetProjectsFeatures$outboundSchema = z.object({
    webAnalytics: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsFeatures$;
(function (GetProjectsFeatures$) {
    /** @deprecated use `GetProjectsFeatures$inboundSchema` instead. */
    GetProjectsFeatures$.inboundSchema = GetProjectsFeatures$inboundSchema;
    /** @deprecated use `GetProjectsFeatures$outboundSchema` instead. */
    GetProjectsFeatures$.outboundSchema = GetProjectsFeatures$outboundSchema;
})(GetProjectsFeatures$ || (GetProjectsFeatures$ = {}));
export function getProjectsFeaturesToJSON(getProjectsFeatures) {
    return JSON.stringify(GetProjectsFeatures$outboundSchema.parse(getProjectsFeatures));
}
export function getProjectsFeaturesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsFeatures$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsFeatures' from JSON`);
}
/** @internal */
export const GetProjectsHistory$inboundSchema = z.object({
    scanner: z.string(),
    reason: z.string(),
    by: z.string(),
    byId: z.string(),
    at: z.number(),
});
/** @internal */
export const GetProjectsHistory$outboundSchema = z.object({
    scanner: z.string(),
    reason: z.string(),
    by: z.string(),
    byId: z.string(),
    at: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsHistory$;
(function (GetProjectsHistory$) {
    /** @deprecated use `GetProjectsHistory$inboundSchema` instead. */
    GetProjectsHistory$.inboundSchema = GetProjectsHistory$inboundSchema;
    /** @deprecated use `GetProjectsHistory$outboundSchema` instead. */
    GetProjectsHistory$.outboundSchema = GetProjectsHistory$outboundSchema;
})(GetProjectsHistory$ || (GetProjectsHistory$ = {}));
export function getProjectsHistoryToJSON(getProjectsHistory) {
    return JSON.stringify(GetProjectsHistory$outboundSchema.parse(getProjectsHistory));
}
export function getProjectsHistoryFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsHistory$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsHistory' from JSON`);
}
/** @internal */
export const GetProjectsAction$inboundSchema = z.nativeEnum(GetProjectsAction);
/** @internal */
export const GetProjectsAction$outboundSchema = GetProjectsAction$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsAction$;
(function (GetProjectsAction$) {
    /** @deprecated use `GetProjectsAction$inboundSchema` instead. */
    GetProjectsAction$.inboundSchema = GetProjectsAction$inboundSchema;
    /** @deprecated use `GetProjectsAction$outboundSchema` instead. */
    GetProjectsAction$.outboundSchema = GetProjectsAction$outboundSchema;
})(GetProjectsAction$ || (GetProjectsAction$ = {}));
/** @internal */
export const GetProjectsBlock$inboundSchema = z.object({
    action: GetProjectsAction$inboundSchema,
    reason: z.string(),
    statusCode: z.number(),
    createdAt: z.number(),
    caseId: z.string().optional(),
    actor: z.string().optional(),
    comment: z.string().optional(),
    isCascading: z.boolean().optional(),
});
/** @internal */
export const GetProjectsBlock$outboundSchema = z.object({
    action: GetProjectsAction$outboundSchema,
    reason: z.string(),
    statusCode: z.number(),
    createdAt: z.number(),
    caseId: z.string().optional(),
    actor: z.string().optional(),
    comment: z.string().optional(),
    isCascading: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsBlock$;
(function (GetProjectsBlock$) {
    /** @deprecated use `GetProjectsBlock$inboundSchema` instead. */
    GetProjectsBlock$.inboundSchema = GetProjectsBlock$inboundSchema;
    /** @deprecated use `GetProjectsBlock$outboundSchema` instead. */
    GetProjectsBlock$.outboundSchema = GetProjectsBlock$outboundSchema;
})(GetProjectsBlock$ || (GetProjectsBlock$ = {}));
export function getProjectsBlockToJSON(getProjectsBlock) {
    return JSON.stringify(GetProjectsBlock$outboundSchema.parse(getProjectsBlock));
}
export function getProjectsBlockFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsBlock$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsBlock' from JSON`);
}
/** @internal */
export const GetProjectsBlockHistoryProjectsResponse200Action$inboundSchema = z
    .nativeEnum(GetProjectsBlockHistoryProjectsResponse200Action);
/** @internal */
export const GetProjectsBlockHistoryProjectsResponse200Action$outboundSchema = GetProjectsBlockHistoryProjectsResponse200Action$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsBlockHistoryProjectsResponse200Action$;
(function (GetProjectsBlockHistoryProjectsResponse200Action$) {
    /** @deprecated use `GetProjectsBlockHistoryProjectsResponse200Action$inboundSchema` instead. */
    GetProjectsBlockHistoryProjectsResponse200Action$.inboundSchema = GetProjectsBlockHistoryProjectsResponse200Action$inboundSchema;
    /** @deprecated use `GetProjectsBlockHistoryProjectsResponse200Action$outboundSchema` instead. */
    GetProjectsBlockHistoryProjectsResponse200Action$.outboundSchema = GetProjectsBlockHistoryProjectsResponse200Action$outboundSchema;
})(GetProjectsBlockHistoryProjectsResponse200Action$ || (GetProjectsBlockHistoryProjectsResponse200Action$ = {}));
/** @internal */
export const GetProjectsHasProjectsResponse200Type$inboundSchema = z.nativeEnum(GetProjectsHasProjectsResponse200Type);
/** @internal */
export const GetProjectsHasProjectsResponse200Type$outboundSchema = GetProjectsHasProjectsResponse200Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsHasProjectsResponse200Type$;
(function (GetProjectsHasProjectsResponse200Type$) {
    /** @deprecated use `GetProjectsHasProjectsResponse200Type$inboundSchema` instead. */
    GetProjectsHasProjectsResponse200Type$.inboundSchema = GetProjectsHasProjectsResponse200Type$inboundSchema;
    /** @deprecated use `GetProjectsHasProjectsResponse200Type$outboundSchema` instead. */
    GetProjectsHasProjectsResponse200Type$.outboundSchema = GetProjectsHasProjectsResponse200Type$outboundSchema;
})(GetProjectsHasProjectsResponse200Type$ || (GetProjectsHasProjectsResponse200Type$ = {}));
/** @internal */
export const GetProjectsHasProjectsResponse200Value$inboundSchema = z.object({
    eq: z.string(),
});
/** @internal */
export const GetProjectsHasProjectsResponse200Value$outboundSchema = z.object({
    eq: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsHasProjectsResponse200Value$;
(function (GetProjectsHasProjectsResponse200Value$) {
    /** @deprecated use `GetProjectsHasProjectsResponse200Value$inboundSchema` instead. */
    GetProjectsHasProjectsResponse200Value$.inboundSchema = GetProjectsHasProjectsResponse200Value$inboundSchema;
    /** @deprecated use `GetProjectsHasProjectsResponse200Value$outboundSchema` instead. */
    GetProjectsHasProjectsResponse200Value$.outboundSchema = GetProjectsHasProjectsResponse200Value$outboundSchema;
})(GetProjectsHasProjectsResponse200Value$ || (GetProjectsHasProjectsResponse200Value$ = {}));
export function getProjectsHasProjectsResponse200ValueToJSON(getProjectsHasProjectsResponse200Value) {
    return JSON.stringify(GetProjectsHasProjectsResponse200Value$outboundSchema.parse(getProjectsHasProjectsResponse200Value));
}
export function getProjectsHasProjectsResponse200ValueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsHasProjectsResponse200Value$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsHasProjectsResponse200Value' from JSON`);
}
/** @internal */
export const GetProjectsHasProjects2$inboundSchema = z.object({
    type: GetProjectsHasProjectsResponse200Type$inboundSchema,
    value: z.lazy(() => GetProjectsHasProjectsResponse200Value$inboundSchema),
});
/** @internal */
export const GetProjectsHasProjects2$outboundSchema = z.object({
    type: GetProjectsHasProjectsResponse200Type$outboundSchema,
    value: z.lazy(() => GetProjectsHasProjectsResponse200Value$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsHasProjects2$;
(function (GetProjectsHasProjects2$) {
    /** @deprecated use `GetProjectsHasProjects2$inboundSchema` instead. */
    GetProjectsHasProjects2$.inboundSchema = GetProjectsHasProjects2$inboundSchema;
    /** @deprecated use `GetProjectsHasProjects2$outboundSchema` instead. */
    GetProjectsHasProjects2$.outboundSchema = GetProjectsHasProjects2$outboundSchema;
})(GetProjectsHasProjects2$ || (GetProjectsHasProjects2$ = {}));
export function getProjectsHasProjects2ToJSON(getProjectsHasProjects2) {
    return JSON.stringify(GetProjectsHasProjects2$outboundSchema.parse(getProjectsHasProjects2));
}
export function getProjectsHasProjects2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsHasProjects2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsHasProjects2' from JSON`);
}
/** @internal */
export const GetProjectsHasProjectsResponseType$inboundSchema = z.nativeEnum(GetProjectsHasProjectsResponseType);
/** @internal */
export const GetProjectsHasProjectsResponseType$outboundSchema = GetProjectsHasProjectsResponseType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsHasProjectsResponseType$;
(function (GetProjectsHasProjectsResponseType$) {
    /** @deprecated use `GetProjectsHasProjectsResponseType$inboundSchema` instead. */
    GetProjectsHasProjectsResponseType$.inboundSchema = GetProjectsHasProjectsResponseType$inboundSchema;
    /** @deprecated use `GetProjectsHasProjectsResponseType$outboundSchema` instead. */
    GetProjectsHasProjectsResponseType$.outboundSchema = GetProjectsHasProjectsResponseType$outboundSchema;
})(GetProjectsHasProjectsResponseType$ || (GetProjectsHasProjectsResponseType$ = {}));
/** @internal */
export const GetProjectsHasProjectsKey$inboundSchema = z.nativeEnum(GetProjectsHasProjectsKey);
/** @internal */
export const GetProjectsHasProjectsKey$outboundSchema = GetProjectsHasProjectsKey$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsHasProjectsKey$;
(function (GetProjectsHasProjectsKey$) {
    /** @deprecated use `GetProjectsHasProjectsKey$inboundSchema` instead. */
    GetProjectsHasProjectsKey$.inboundSchema = GetProjectsHasProjectsKey$inboundSchema;
    /** @deprecated use `GetProjectsHasProjectsKey$outboundSchema` instead. */
    GetProjectsHasProjectsKey$.outboundSchema = GetProjectsHasProjectsKey$outboundSchema;
})(GetProjectsHasProjectsKey$ || (GetProjectsHasProjectsKey$ = {}));
/** @internal */
export const GetProjectsHasProjectsResponseValue$inboundSchema = z.object({
    eq: z.string(),
});
/** @internal */
export const GetProjectsHasProjectsResponseValue$outboundSchema = z.object({
    eq: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsHasProjectsResponseValue$;
(function (GetProjectsHasProjectsResponseValue$) {
    /** @deprecated use `GetProjectsHasProjectsResponseValue$inboundSchema` instead. */
    GetProjectsHasProjectsResponseValue$.inboundSchema = GetProjectsHasProjectsResponseValue$inboundSchema;
    /** @deprecated use `GetProjectsHasProjectsResponseValue$outboundSchema` instead. */
    GetProjectsHasProjectsResponseValue$.outboundSchema = GetProjectsHasProjectsResponseValue$outboundSchema;
})(GetProjectsHasProjectsResponseValue$ || (GetProjectsHasProjectsResponseValue$ = {}));
export function getProjectsHasProjectsResponseValueToJSON(getProjectsHasProjectsResponseValue) {
    return JSON.stringify(GetProjectsHasProjectsResponseValue$outboundSchema.parse(getProjectsHasProjectsResponseValue));
}
export function getProjectsHasProjectsResponseValueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsHasProjectsResponseValue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsHasProjectsResponseValue' from JSON`);
}
/** @internal */
export const GetProjectsHasProjects1$inboundSchema = z.object({
    type: GetProjectsHasProjectsResponseType$inboundSchema,
    key: GetProjectsHasProjectsKey$inboundSchema,
    value: z.lazy(() => GetProjectsHasProjectsResponseValue$inboundSchema),
});
/** @internal */
export const GetProjectsHasProjects1$outboundSchema = z.object({
    type: GetProjectsHasProjectsResponseType$outboundSchema,
    key: GetProjectsHasProjectsKey$outboundSchema,
    value: z.lazy(() => GetProjectsHasProjectsResponseValue$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsHasProjects1$;
(function (GetProjectsHasProjects1$) {
    /** @deprecated use `GetProjectsHasProjects1$inboundSchema` instead. */
    GetProjectsHasProjects1$.inboundSchema = GetProjectsHasProjects1$inboundSchema;
    /** @deprecated use `GetProjectsHasProjects1$outboundSchema` instead. */
    GetProjectsHasProjects1$.outboundSchema = GetProjectsHasProjects1$outboundSchema;
})(GetProjectsHasProjects1$ || (GetProjectsHasProjects1$ = {}));
export function getProjectsHasProjects1ToJSON(getProjectsHasProjects1) {
    return JSON.stringify(GetProjectsHasProjects1$outboundSchema.parse(getProjectsHasProjects1));
}
export function getProjectsHasProjects1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsHasProjects1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsHasProjects1' from JSON`);
}
/** @internal */
export const GetProjectsRouteProjectsHas$inboundSchema = z.union([
    z.lazy(() => GetProjectsHasProjects1$inboundSchema),
    z.lazy(() => GetProjectsHasProjects2$inboundSchema),
]);
/** @internal */
export const GetProjectsRouteProjectsHas$outboundSchema = z.union([
    z.lazy(() => GetProjectsHasProjects1$outboundSchema),
    z.lazy(() => GetProjectsHasProjects2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsRouteProjectsHas$;
(function (GetProjectsRouteProjectsHas$) {
    /** @deprecated use `GetProjectsRouteProjectsHas$inboundSchema` instead. */
    GetProjectsRouteProjectsHas$.inboundSchema = GetProjectsRouteProjectsHas$inboundSchema;
    /** @deprecated use `GetProjectsRouteProjectsHas$outboundSchema` instead. */
    GetProjectsRouteProjectsHas$.outboundSchema = GetProjectsRouteProjectsHas$outboundSchema;
})(GetProjectsRouteProjectsHas$ || (GetProjectsRouteProjectsHas$ = {}));
export function getProjectsRouteProjectsHasToJSON(getProjectsRouteProjectsHas) {
    return JSON.stringify(GetProjectsRouteProjectsHas$outboundSchema.parse(getProjectsRouteProjectsHas));
}
export function getProjectsRouteProjectsHasFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsRouteProjectsHas$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsRouteProjectsHas' from JSON`);
}
/** @internal */
export const GetProjectsRouteProjectsAction$inboundSchema = z.nativeEnum(GetProjectsRouteProjectsAction);
/** @internal */
export const GetProjectsRouteProjectsAction$outboundSchema = GetProjectsRouteProjectsAction$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsRouteProjectsAction$;
(function (GetProjectsRouteProjectsAction$) {
    /** @deprecated use `GetProjectsRouteProjectsAction$inboundSchema` instead. */
    GetProjectsRouteProjectsAction$.inboundSchema = GetProjectsRouteProjectsAction$inboundSchema;
    /** @deprecated use `GetProjectsRouteProjectsAction$outboundSchema` instead. */
    GetProjectsRouteProjectsAction$.outboundSchema = GetProjectsRouteProjectsAction$outboundSchema;
})(GetProjectsRouteProjectsAction$ || (GetProjectsRouteProjectsAction$ = {}));
/** @internal */
export const GetProjectsRouteProjectsMitigate$inboundSchema = z.object({
    action: GetProjectsRouteProjectsAction$inboundSchema,
});
/** @internal */
export const GetProjectsRouteProjectsMitigate$outboundSchema = z.object({
    action: GetProjectsRouteProjectsAction$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsRouteProjectsMitigate$;
(function (GetProjectsRouteProjectsMitigate$) {
    /** @deprecated use `GetProjectsRouteProjectsMitigate$inboundSchema` instead. */
    GetProjectsRouteProjectsMitigate$.inboundSchema = GetProjectsRouteProjectsMitigate$inboundSchema;
    /** @deprecated use `GetProjectsRouteProjectsMitigate$outboundSchema` instead. */
    GetProjectsRouteProjectsMitigate$.outboundSchema = GetProjectsRouteProjectsMitigate$outboundSchema;
})(GetProjectsRouteProjectsMitigate$ || (GetProjectsRouteProjectsMitigate$ = {}));
export function getProjectsRouteProjectsMitigateToJSON(getProjectsRouteProjectsMitigate) {
    return JSON.stringify(GetProjectsRouteProjectsMitigate$outboundSchema.parse(getProjectsRouteProjectsMitigate));
}
export function getProjectsRouteProjectsMitigateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsRouteProjectsMitigate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsRouteProjectsMitigate' from JSON`);
}
/** @internal */
export const GetProjectsRouteProjects2$inboundSchema = z.object({
    has: z.array(z.union([
        z.lazy(() => GetProjectsHasProjects1$inboundSchema),
        z.lazy(() => GetProjectsHasProjects2$inboundSchema),
    ])),
    mitigate: z.lazy(() => GetProjectsRouteProjectsMitigate$inboundSchema),
    src: z.string().optional(),
});
/** @internal */
export const GetProjectsRouteProjects2$outboundSchema = z.object({
    has: z.array(z.union([
        z.lazy(() => GetProjectsHasProjects1$outboundSchema),
        z.lazy(() => GetProjectsHasProjects2$outboundSchema),
    ])),
    mitigate: z.lazy(() => GetProjectsRouteProjectsMitigate$outboundSchema),
    src: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsRouteProjects2$;
(function (GetProjectsRouteProjects2$) {
    /** @deprecated use `GetProjectsRouteProjects2$inboundSchema` instead. */
    GetProjectsRouteProjects2$.inboundSchema = GetProjectsRouteProjects2$inboundSchema;
    /** @deprecated use `GetProjectsRouteProjects2$outboundSchema` instead. */
    GetProjectsRouteProjects2$.outboundSchema = GetProjectsRouteProjects2$outboundSchema;
})(GetProjectsRouteProjects2$ || (GetProjectsRouteProjects2$ = {}));
export function getProjectsRouteProjects2ToJSON(getProjectsRouteProjects2) {
    return JSON.stringify(GetProjectsRouteProjects2$outboundSchema.parse(getProjectsRouteProjects2));
}
export function getProjectsRouteProjects2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsRouteProjects2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsRouteProjects2' from JSON`);
}
/** @internal */
export const GetProjectsRouteProjects1$inboundSchema = z.object({
    src: z.string(),
    status: z.number(),
});
/** @internal */
export const GetProjectsRouteProjects1$outboundSchema = z.object({
    src: z.string(),
    status: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsRouteProjects1$;
(function (GetProjectsRouteProjects1$) {
    /** @deprecated use `GetProjectsRouteProjects1$inboundSchema` instead. */
    GetProjectsRouteProjects1$.inboundSchema = GetProjectsRouteProjects1$inboundSchema;
    /** @deprecated use `GetProjectsRouteProjects1$outboundSchema` instead. */
    GetProjectsRouteProjects1$.outboundSchema = GetProjectsRouteProjects1$outboundSchema;
})(GetProjectsRouteProjects1$ || (GetProjectsRouteProjects1$ = {}));
export function getProjectsRouteProjects1ToJSON(getProjectsRouteProjects1) {
    return JSON.stringify(GetProjectsRouteProjects1$outboundSchema.parse(getProjectsRouteProjects1));
}
export function getProjectsRouteProjects1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsRouteProjects1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsRouteProjects1' from JSON`);
}
/** @internal */
export const GetProjectsBlockHistoryProjectsRoute$inboundSchema = z.union([
    z.lazy(() => GetProjectsRouteProjects1$inboundSchema),
    z.lazy(() => GetProjectsRouteProjects2$inboundSchema),
]);
/** @internal */
export const GetProjectsBlockHistoryProjectsRoute$outboundSchema = z.union([
    z.lazy(() => GetProjectsRouteProjects1$outboundSchema),
    z.lazy(() => GetProjectsRouteProjects2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsBlockHistoryProjectsRoute$;
(function (GetProjectsBlockHistoryProjectsRoute$) {
    /** @deprecated use `GetProjectsBlockHistoryProjectsRoute$inboundSchema` instead. */
    GetProjectsBlockHistoryProjectsRoute$.inboundSchema = GetProjectsBlockHistoryProjectsRoute$inboundSchema;
    /** @deprecated use `GetProjectsBlockHistoryProjectsRoute$outboundSchema` instead. */
    GetProjectsBlockHistoryProjectsRoute$.outboundSchema = GetProjectsBlockHistoryProjectsRoute$outboundSchema;
})(GetProjectsBlockHistoryProjectsRoute$ || (GetProjectsBlockHistoryProjectsRoute$ = {}));
export function getProjectsBlockHistoryProjectsRouteToJSON(getProjectsBlockHistoryProjectsRoute) {
    return JSON.stringify(GetProjectsBlockHistoryProjectsRoute$outboundSchema.parse(getProjectsBlockHistoryProjectsRoute));
}
export function getProjectsBlockHistoryProjectsRouteFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsBlockHistoryProjectsRoute$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsBlockHistoryProjectsRoute' from JSON`);
}
/** @internal */
export const GetProjectsBlockHistory4$inboundSchema = z.object({
    action: GetProjectsBlockHistoryProjectsResponse200Action$inboundSchema,
    route: z.union([
        z.lazy(() => GetProjectsRouteProjects1$inboundSchema),
        z.lazy(() => GetProjectsRouteProjects2$inboundSchema),
    ]),
    statusCode: z.number().optional(),
    createdAt: z.number(),
    caseId: z.string().optional(),
    actor: z.string().optional(),
    comment: z.string().optional(),
    isCascading: z.boolean().optional(),
});
/** @internal */
export const GetProjectsBlockHistory4$outboundSchema = z.object({
    action: GetProjectsBlockHistoryProjectsResponse200Action$outboundSchema,
    route: z.union([
        z.lazy(() => GetProjectsRouteProjects1$outboundSchema),
        z.lazy(() => GetProjectsRouteProjects2$outboundSchema),
    ]),
    statusCode: z.number().optional(),
    createdAt: z.number(),
    caseId: z.string().optional(),
    actor: z.string().optional(),
    comment: z.string().optional(),
    isCascading: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsBlockHistory4$;
(function (GetProjectsBlockHistory4$) {
    /** @deprecated use `GetProjectsBlockHistory4$inboundSchema` instead. */
    GetProjectsBlockHistory4$.inboundSchema = GetProjectsBlockHistory4$inboundSchema;
    /** @deprecated use `GetProjectsBlockHistory4$outboundSchema` instead. */
    GetProjectsBlockHistory4$.outboundSchema = GetProjectsBlockHistory4$outboundSchema;
})(GetProjectsBlockHistory4$ || (GetProjectsBlockHistory4$ = {}));
export function getProjectsBlockHistory4ToJSON(getProjectsBlockHistory4) {
    return JSON.stringify(GetProjectsBlockHistory4$outboundSchema.parse(getProjectsBlockHistory4));
}
export function getProjectsBlockHistory4FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsBlockHistory4$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsBlockHistory4' from JSON`);
}
/** @internal */
export const GetProjectsBlockHistoryProjectsResponseAction$inboundSchema = z
    .nativeEnum(GetProjectsBlockHistoryProjectsResponseAction);
/** @internal */
export const GetProjectsBlockHistoryProjectsResponseAction$outboundSchema = GetProjectsBlockHistoryProjectsResponseAction$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsBlockHistoryProjectsResponseAction$;
(function (GetProjectsBlockHistoryProjectsResponseAction$) {
    /** @deprecated use `GetProjectsBlockHistoryProjectsResponseAction$inboundSchema` instead. */
    GetProjectsBlockHistoryProjectsResponseAction$.inboundSchema = GetProjectsBlockHistoryProjectsResponseAction$inboundSchema;
    /** @deprecated use `GetProjectsBlockHistoryProjectsResponseAction$outboundSchema` instead. */
    GetProjectsBlockHistoryProjectsResponseAction$.outboundSchema = GetProjectsBlockHistoryProjectsResponseAction$outboundSchema;
})(GetProjectsBlockHistoryProjectsResponseAction$ || (GetProjectsBlockHistoryProjectsResponseAction$ = {}));
/** @internal */
export const GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema = z.nativeEnum(GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyType);
/** @internal */
export const GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema = GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyType$;
(function (GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyType$) {
    /** @deprecated use `GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
    GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyType$.inboundSchema = GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema;
    /** @deprecated use `GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
    GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyType$.outboundSchema = GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema;
})(GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyType$ || (GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyType$ = {}));
/** @internal */
export const GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue$inboundSchema = z.object({
    eq: z.string(),
});
/** @internal */
export const GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue$outboundSchema = z.object({
    eq: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue$;
(function (GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue$) {
    /** @deprecated use `GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue$inboundSchema` instead. */
    GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue$.inboundSchema = GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue$inboundSchema;
    /** @deprecated use `GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue$outboundSchema` instead. */
    GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue$.outboundSchema = GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue$outboundSchema;
})(GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue$ || (GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue$ = {}));
export function getProjectsHasProjectsResponse200ApplicationJSONResponseBodyValueToJSON(getProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue) {
    return JSON.stringify(GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue$outboundSchema
        .parse(getProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue));
}
export function getProjectsHasProjectsResponse200ApplicationJSONResponseBodyValueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue' from JSON`);
}
/** @internal */
export const GetProjectsHasProjectsResponse2$inboundSchema = z.object({
    type: GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema,
    value: z.lazy(() => GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue$inboundSchema),
});
/** @internal */
export const GetProjectsHasProjectsResponse2$outboundSchema = z.object({
    type: GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema,
    value: z.lazy(() => GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsHasProjectsResponse2$;
(function (GetProjectsHasProjectsResponse2$) {
    /** @deprecated use `GetProjectsHasProjectsResponse2$inboundSchema` instead. */
    GetProjectsHasProjectsResponse2$.inboundSchema = GetProjectsHasProjectsResponse2$inboundSchema;
    /** @deprecated use `GetProjectsHasProjectsResponse2$outboundSchema` instead. */
    GetProjectsHasProjectsResponse2$.outboundSchema = GetProjectsHasProjectsResponse2$outboundSchema;
})(GetProjectsHasProjectsResponse2$ || (GetProjectsHasProjectsResponse2$ = {}));
export function getProjectsHasProjectsResponse2ToJSON(getProjectsHasProjectsResponse2) {
    return JSON.stringify(GetProjectsHasProjectsResponse2$outboundSchema.parse(getProjectsHasProjectsResponse2));
}
export function getProjectsHasProjectsResponse2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsHasProjectsResponse2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsHasProjectsResponse2' from JSON`);
}
/** @internal */
export const GetProjectsHasProjectsResponse200ApplicationJSONType$inboundSchema = z.nativeEnum(GetProjectsHasProjectsResponse200ApplicationJSONType);
/** @internal */
export const GetProjectsHasProjectsResponse200ApplicationJSONType$outboundSchema = GetProjectsHasProjectsResponse200ApplicationJSONType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsHasProjectsResponse200ApplicationJSONType$;
(function (GetProjectsHasProjectsResponse200ApplicationJSONType$) {
    /** @deprecated use `GetProjectsHasProjectsResponse200ApplicationJSONType$inboundSchema` instead. */
    GetProjectsHasProjectsResponse200ApplicationJSONType$.inboundSchema = GetProjectsHasProjectsResponse200ApplicationJSONType$inboundSchema;
    /** @deprecated use `GetProjectsHasProjectsResponse200ApplicationJSONType$outboundSchema` instead. */
    GetProjectsHasProjectsResponse200ApplicationJSONType$.outboundSchema = GetProjectsHasProjectsResponse200ApplicationJSONType$outboundSchema;
})(GetProjectsHasProjectsResponse200ApplicationJSONType$ || (GetProjectsHasProjectsResponse200ApplicationJSONType$ = {}));
/** @internal */
export const GetProjectsHasProjectsResponseKey$inboundSchema = z.nativeEnum(GetProjectsHasProjectsResponseKey);
/** @internal */
export const GetProjectsHasProjectsResponseKey$outboundSchema = GetProjectsHasProjectsResponseKey$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsHasProjectsResponseKey$;
(function (GetProjectsHasProjectsResponseKey$) {
    /** @deprecated use `GetProjectsHasProjectsResponseKey$inboundSchema` instead. */
    GetProjectsHasProjectsResponseKey$.inboundSchema = GetProjectsHasProjectsResponseKey$inboundSchema;
    /** @deprecated use `GetProjectsHasProjectsResponseKey$outboundSchema` instead. */
    GetProjectsHasProjectsResponseKey$.outboundSchema = GetProjectsHasProjectsResponseKey$outboundSchema;
})(GetProjectsHasProjectsResponseKey$ || (GetProjectsHasProjectsResponseKey$ = {}));
/** @internal */
export const GetProjectsHasProjectsResponse200ApplicationJSONValue$inboundSchema = z.object({
    eq: z.string(),
});
/** @internal */
export const GetProjectsHasProjectsResponse200ApplicationJSONValue$outboundSchema = z.object({
    eq: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsHasProjectsResponse200ApplicationJSONValue$;
(function (GetProjectsHasProjectsResponse200ApplicationJSONValue$) {
    /** @deprecated use `GetProjectsHasProjectsResponse200ApplicationJSONValue$inboundSchema` instead. */
    GetProjectsHasProjectsResponse200ApplicationJSONValue$.inboundSchema = GetProjectsHasProjectsResponse200ApplicationJSONValue$inboundSchema;
    /** @deprecated use `GetProjectsHasProjectsResponse200ApplicationJSONValue$outboundSchema` instead. */
    GetProjectsHasProjectsResponse200ApplicationJSONValue$.outboundSchema = GetProjectsHasProjectsResponse200ApplicationJSONValue$outboundSchema;
})(GetProjectsHasProjectsResponse200ApplicationJSONValue$ || (GetProjectsHasProjectsResponse200ApplicationJSONValue$ = {}));
export function getProjectsHasProjectsResponse200ApplicationJSONValueToJSON(getProjectsHasProjectsResponse200ApplicationJSONValue) {
    return JSON.stringify(GetProjectsHasProjectsResponse200ApplicationJSONValue$outboundSchema.parse(getProjectsHasProjectsResponse200ApplicationJSONValue));
}
export function getProjectsHasProjectsResponse200ApplicationJSONValueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsHasProjectsResponse200ApplicationJSONValue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsHasProjectsResponse200ApplicationJSONValue' from JSON`);
}
/** @internal */
export const GetProjectsHasProjectsResponse1$inboundSchema = z.object({
    type: GetProjectsHasProjectsResponse200ApplicationJSONType$inboundSchema,
    key: GetProjectsHasProjectsResponseKey$inboundSchema,
    value: z.lazy(() => GetProjectsHasProjectsResponse200ApplicationJSONValue$inboundSchema),
});
/** @internal */
export const GetProjectsHasProjectsResponse1$outboundSchema = z.object({
    type: GetProjectsHasProjectsResponse200ApplicationJSONType$outboundSchema,
    key: GetProjectsHasProjectsResponseKey$outboundSchema,
    value: z.lazy(() => GetProjectsHasProjectsResponse200ApplicationJSONValue$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsHasProjectsResponse1$;
(function (GetProjectsHasProjectsResponse1$) {
    /** @deprecated use `GetProjectsHasProjectsResponse1$inboundSchema` instead. */
    GetProjectsHasProjectsResponse1$.inboundSchema = GetProjectsHasProjectsResponse1$inboundSchema;
    /** @deprecated use `GetProjectsHasProjectsResponse1$outboundSchema` instead. */
    GetProjectsHasProjectsResponse1$.outboundSchema = GetProjectsHasProjectsResponse1$outboundSchema;
})(GetProjectsHasProjectsResponse1$ || (GetProjectsHasProjectsResponse1$ = {}));
export function getProjectsHasProjectsResponse1ToJSON(getProjectsHasProjectsResponse1) {
    return JSON.stringify(GetProjectsHasProjectsResponse1$outboundSchema.parse(getProjectsHasProjectsResponse1));
}
export function getProjectsHasProjectsResponse1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsHasProjectsResponse1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsHasProjectsResponse1' from JSON`);
}
/** @internal */
export const GetProjectsRouteHas$inboundSchema = z.union([
    z.lazy(() => GetProjectsHasProjectsResponse1$inboundSchema),
    z.lazy(() => GetProjectsHasProjectsResponse2$inboundSchema),
]);
/** @internal */
export const GetProjectsRouteHas$outboundSchema = z.union([
    z.lazy(() => GetProjectsHasProjectsResponse1$outboundSchema),
    z.lazy(() => GetProjectsHasProjectsResponse2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsRouteHas$;
(function (GetProjectsRouteHas$) {
    /** @deprecated use `GetProjectsRouteHas$inboundSchema` instead. */
    GetProjectsRouteHas$.inboundSchema = GetProjectsRouteHas$inboundSchema;
    /** @deprecated use `GetProjectsRouteHas$outboundSchema` instead. */
    GetProjectsRouteHas$.outboundSchema = GetProjectsRouteHas$outboundSchema;
})(GetProjectsRouteHas$ || (GetProjectsRouteHas$ = {}));
export function getProjectsRouteHasToJSON(getProjectsRouteHas) {
    return JSON.stringify(GetProjectsRouteHas$outboundSchema.parse(getProjectsRouteHas));
}
export function getProjectsRouteHasFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsRouteHas$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsRouteHas' from JSON`);
}
/** @internal */
export const GetProjectsRouteAction$inboundSchema = z.nativeEnum(GetProjectsRouteAction);
/** @internal */
export const GetProjectsRouteAction$outboundSchema = GetProjectsRouteAction$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsRouteAction$;
(function (GetProjectsRouteAction$) {
    /** @deprecated use `GetProjectsRouteAction$inboundSchema` instead. */
    GetProjectsRouteAction$.inboundSchema = GetProjectsRouteAction$inboundSchema;
    /** @deprecated use `GetProjectsRouteAction$outboundSchema` instead. */
    GetProjectsRouteAction$.outboundSchema = GetProjectsRouteAction$outboundSchema;
})(GetProjectsRouteAction$ || (GetProjectsRouteAction$ = {}));
/** @internal */
export const GetProjectsRouteMitigate$inboundSchema = z.object({
    action: GetProjectsRouteAction$inboundSchema,
});
/** @internal */
export const GetProjectsRouteMitigate$outboundSchema = z.object({
    action: GetProjectsRouteAction$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsRouteMitigate$;
(function (GetProjectsRouteMitigate$) {
    /** @deprecated use `GetProjectsRouteMitigate$inboundSchema` instead. */
    GetProjectsRouteMitigate$.inboundSchema = GetProjectsRouteMitigate$inboundSchema;
    /** @deprecated use `GetProjectsRouteMitigate$outboundSchema` instead. */
    GetProjectsRouteMitigate$.outboundSchema = GetProjectsRouteMitigate$outboundSchema;
})(GetProjectsRouteMitigate$ || (GetProjectsRouteMitigate$ = {}));
export function getProjectsRouteMitigateToJSON(getProjectsRouteMitigate) {
    return JSON.stringify(GetProjectsRouteMitigate$outboundSchema.parse(getProjectsRouteMitigate));
}
export function getProjectsRouteMitigateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsRouteMitigate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsRouteMitigate' from JSON`);
}
/** @internal */
export const GetProjectsRoute2$inboundSchema = z.object({
    has: z.array(z.union([
        z.lazy(() => GetProjectsHasProjectsResponse1$inboundSchema),
        z.lazy(() => GetProjectsHasProjectsResponse2$inboundSchema),
    ])),
    mitigate: z.lazy(() => GetProjectsRouteMitigate$inboundSchema),
    src: z.string().optional(),
});
/** @internal */
export const GetProjectsRoute2$outboundSchema = z.object({
    has: z.array(z.union([
        z.lazy(() => GetProjectsHasProjectsResponse1$outboundSchema),
        z.lazy(() => GetProjectsHasProjectsResponse2$outboundSchema),
    ])),
    mitigate: z.lazy(() => GetProjectsRouteMitigate$outboundSchema),
    src: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsRoute2$;
(function (GetProjectsRoute2$) {
    /** @deprecated use `GetProjectsRoute2$inboundSchema` instead. */
    GetProjectsRoute2$.inboundSchema = GetProjectsRoute2$inboundSchema;
    /** @deprecated use `GetProjectsRoute2$outboundSchema` instead. */
    GetProjectsRoute2$.outboundSchema = GetProjectsRoute2$outboundSchema;
})(GetProjectsRoute2$ || (GetProjectsRoute2$ = {}));
export function getProjectsRoute2ToJSON(getProjectsRoute2) {
    return JSON.stringify(GetProjectsRoute2$outboundSchema.parse(getProjectsRoute2));
}
export function getProjectsRoute2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsRoute2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsRoute2' from JSON`);
}
/** @internal */
export const GetProjectsRoute1$inboundSchema = z.object({
    src: z.string(),
    status: z.number(),
});
/** @internal */
export const GetProjectsRoute1$outboundSchema = z.object({
    src: z.string(),
    status: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsRoute1$;
(function (GetProjectsRoute1$) {
    /** @deprecated use `GetProjectsRoute1$inboundSchema` instead. */
    GetProjectsRoute1$.inboundSchema = GetProjectsRoute1$inboundSchema;
    /** @deprecated use `GetProjectsRoute1$outboundSchema` instead. */
    GetProjectsRoute1$.outboundSchema = GetProjectsRoute1$outboundSchema;
})(GetProjectsRoute1$ || (GetProjectsRoute1$ = {}));
export function getProjectsRoute1ToJSON(getProjectsRoute1) {
    return JSON.stringify(GetProjectsRoute1$outboundSchema.parse(getProjectsRoute1));
}
export function getProjectsRoute1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsRoute1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsRoute1' from JSON`);
}
/** @internal */
export const GetProjectsBlockHistoryRoute$inboundSchema = z.union([
    z.lazy(() => GetProjectsRoute1$inboundSchema),
    z.lazy(() => GetProjectsRoute2$inboundSchema),
]);
/** @internal */
export const GetProjectsBlockHistoryRoute$outboundSchema = z.union([
    z.lazy(() => GetProjectsRoute1$outboundSchema),
    z.lazy(() => GetProjectsRoute2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsBlockHistoryRoute$;
(function (GetProjectsBlockHistoryRoute$) {
    /** @deprecated use `GetProjectsBlockHistoryRoute$inboundSchema` instead. */
    GetProjectsBlockHistoryRoute$.inboundSchema = GetProjectsBlockHistoryRoute$inboundSchema;
    /** @deprecated use `GetProjectsBlockHistoryRoute$outboundSchema` instead. */
    GetProjectsBlockHistoryRoute$.outboundSchema = GetProjectsBlockHistoryRoute$outboundSchema;
})(GetProjectsBlockHistoryRoute$ || (GetProjectsBlockHistoryRoute$ = {}));
export function getProjectsBlockHistoryRouteToJSON(getProjectsBlockHistoryRoute) {
    return JSON.stringify(GetProjectsBlockHistoryRoute$outboundSchema.parse(getProjectsBlockHistoryRoute));
}
export function getProjectsBlockHistoryRouteFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsBlockHistoryRoute$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsBlockHistoryRoute' from JSON`);
}
/** @internal */
export const GetProjectsBlockHistory3$inboundSchema = z.object({
    action: GetProjectsBlockHistoryProjectsResponseAction$inboundSchema,
    route: z.union([
        z.lazy(() => GetProjectsRoute1$inboundSchema),
        z.lazy(() => GetProjectsRoute2$inboundSchema),
    ]),
    reason: z.string(),
    createdAt: z.number(),
    caseId: z.string().optional(),
    actor: z.string().optional(),
    comment: z.string().optional(),
    isCascading: z.boolean().optional(),
});
/** @internal */
export const GetProjectsBlockHistory3$outboundSchema = z.object({
    action: GetProjectsBlockHistoryProjectsResponseAction$outboundSchema,
    route: z.union([
        z.lazy(() => GetProjectsRoute1$outboundSchema),
        z.lazy(() => GetProjectsRoute2$outboundSchema),
    ]),
    reason: z.string(),
    createdAt: z.number(),
    caseId: z.string().optional(),
    actor: z.string().optional(),
    comment: z.string().optional(),
    isCascading: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsBlockHistory3$;
(function (GetProjectsBlockHistory3$) {
    /** @deprecated use `GetProjectsBlockHistory3$inboundSchema` instead. */
    GetProjectsBlockHistory3$.inboundSchema = GetProjectsBlockHistory3$inboundSchema;
    /** @deprecated use `GetProjectsBlockHistory3$outboundSchema` instead. */
    GetProjectsBlockHistory3$.outboundSchema = GetProjectsBlockHistory3$outboundSchema;
})(GetProjectsBlockHistory3$ || (GetProjectsBlockHistory3$ = {}));
export function getProjectsBlockHistory3ToJSON(getProjectsBlockHistory3) {
    return JSON.stringify(GetProjectsBlockHistory3$outboundSchema.parse(getProjectsBlockHistory3));
}
export function getProjectsBlockHistory3FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsBlockHistory3$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsBlockHistory3' from JSON`);
}
/** @internal */
export const GetProjectsBlockHistoryProjectsAction$inboundSchema = z.nativeEnum(GetProjectsBlockHistoryProjectsAction);
/** @internal */
export const GetProjectsBlockHistoryProjectsAction$outboundSchema = GetProjectsBlockHistoryProjectsAction$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsBlockHistoryProjectsAction$;
(function (GetProjectsBlockHistoryProjectsAction$) {
    /** @deprecated use `GetProjectsBlockHistoryProjectsAction$inboundSchema` instead. */
    GetProjectsBlockHistoryProjectsAction$.inboundSchema = GetProjectsBlockHistoryProjectsAction$inboundSchema;
    /** @deprecated use `GetProjectsBlockHistoryProjectsAction$outboundSchema` instead. */
    GetProjectsBlockHistoryProjectsAction$.outboundSchema = GetProjectsBlockHistoryProjectsAction$outboundSchema;
})(GetProjectsBlockHistoryProjectsAction$ || (GetProjectsBlockHistoryProjectsAction$ = {}));
/** @internal */
export const GetProjectsBlockHistory2$inboundSchema = z.object({
    action: GetProjectsBlockHistoryProjectsAction$inboundSchema,
    createdAt: z.number(),
    caseId: z.string().optional(),
    actor: z.string().optional(),
    comment: z.string().optional(),
    isCascading: z.boolean().optional(),
});
/** @internal */
export const GetProjectsBlockHistory2$outboundSchema = z.object({
    action: GetProjectsBlockHistoryProjectsAction$outboundSchema,
    createdAt: z.number(),
    caseId: z.string().optional(),
    actor: z.string().optional(),
    comment: z.string().optional(),
    isCascading: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsBlockHistory2$;
(function (GetProjectsBlockHistory2$) {
    /** @deprecated use `GetProjectsBlockHistory2$inboundSchema` instead. */
    GetProjectsBlockHistory2$.inboundSchema = GetProjectsBlockHistory2$inboundSchema;
    /** @deprecated use `GetProjectsBlockHistory2$outboundSchema` instead. */
    GetProjectsBlockHistory2$.outboundSchema = GetProjectsBlockHistory2$outboundSchema;
})(GetProjectsBlockHistory2$ || (GetProjectsBlockHistory2$ = {}));
export function getProjectsBlockHistory2ToJSON(getProjectsBlockHistory2) {
    return JSON.stringify(GetProjectsBlockHistory2$outboundSchema.parse(getProjectsBlockHistory2));
}
export function getProjectsBlockHistory2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsBlockHistory2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsBlockHistory2' from JSON`);
}
/** @internal */
export const GetProjectsBlockHistoryAction$inboundSchema = z.nativeEnum(GetProjectsBlockHistoryAction);
/** @internal */
export const GetProjectsBlockHistoryAction$outboundSchema = GetProjectsBlockHistoryAction$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsBlockHistoryAction$;
(function (GetProjectsBlockHistoryAction$) {
    /** @deprecated use `GetProjectsBlockHistoryAction$inboundSchema` instead. */
    GetProjectsBlockHistoryAction$.inboundSchema = GetProjectsBlockHistoryAction$inboundSchema;
    /** @deprecated use `GetProjectsBlockHistoryAction$outboundSchema` instead. */
    GetProjectsBlockHistoryAction$.outboundSchema = GetProjectsBlockHistoryAction$outboundSchema;
})(GetProjectsBlockHistoryAction$ || (GetProjectsBlockHistoryAction$ = {}));
/** @internal */
export const GetProjectsBlockHistory1$inboundSchema = z.object({
    action: GetProjectsBlockHistoryAction$inboundSchema,
    reason: z.string(),
    statusCode: z.number(),
    createdAt: z.number(),
    caseId: z.string().optional(),
    actor: z.string().optional(),
    comment: z.string().optional(),
    isCascading: z.boolean().optional(),
});
/** @internal */
export const GetProjectsBlockHistory1$outboundSchema = z.object({
    action: GetProjectsBlockHistoryAction$outboundSchema,
    reason: z.string(),
    statusCode: z.number(),
    createdAt: z.number(),
    caseId: z.string().optional(),
    actor: z.string().optional(),
    comment: z.string().optional(),
    isCascading: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsBlockHistory1$;
(function (GetProjectsBlockHistory1$) {
    /** @deprecated use `GetProjectsBlockHistory1$inboundSchema` instead. */
    GetProjectsBlockHistory1$.inboundSchema = GetProjectsBlockHistory1$inboundSchema;
    /** @deprecated use `GetProjectsBlockHistory1$outboundSchema` instead. */
    GetProjectsBlockHistory1$.outboundSchema = GetProjectsBlockHistory1$outboundSchema;
})(GetProjectsBlockHistory1$ || (GetProjectsBlockHistory1$ = {}));
export function getProjectsBlockHistory1ToJSON(getProjectsBlockHistory1) {
    return JSON.stringify(GetProjectsBlockHistory1$outboundSchema.parse(getProjectsBlockHistory1));
}
export function getProjectsBlockHistory1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsBlockHistory1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsBlockHistory1' from JSON`);
}
/** @internal */
export const GetProjectsBlockHistory$inboundSchema = z.union([
    z.lazy(() => GetProjectsBlockHistory1$inboundSchema),
    z.lazy(() => GetProjectsBlockHistory3$inboundSchema),
    z.lazy(() => GetProjectsBlockHistory4$inboundSchema),
    z.lazy(() => GetProjectsBlockHistory2$inboundSchema),
]);
/** @internal */
export const GetProjectsBlockHistory$outboundSchema = z.union([
    z.lazy(() => GetProjectsBlockHistory1$outboundSchema),
    z.lazy(() => GetProjectsBlockHistory3$outboundSchema),
    z.lazy(() => GetProjectsBlockHistory4$outboundSchema),
    z.lazy(() => GetProjectsBlockHistory2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsBlockHistory$;
(function (GetProjectsBlockHistory$) {
    /** @deprecated use `GetProjectsBlockHistory$inboundSchema` instead. */
    GetProjectsBlockHistory$.inboundSchema = GetProjectsBlockHistory$inboundSchema;
    /** @deprecated use `GetProjectsBlockHistory$outboundSchema` instead. */
    GetProjectsBlockHistory$.outboundSchema = GetProjectsBlockHistory$outboundSchema;
})(GetProjectsBlockHistory$ || (GetProjectsBlockHistory$ = {}));
export function getProjectsBlockHistoryToJSON(getProjectsBlockHistory) {
    return JSON.stringify(GetProjectsBlockHistory$outboundSchema.parse(getProjectsBlockHistory));
}
export function getProjectsBlockHistoryFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsBlockHistory$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsBlockHistory' from JSON`);
}
/** @internal */
export const GetProjectsAbuse$inboundSchema = z.object({
    scanner: z.string().optional(),
    history: z.array(z.lazy(() => GetProjectsHistory$inboundSchema)),
    updatedAt: z.number(),
    block: z.lazy(() => GetProjectsBlock$inboundSchema).optional(),
    blockHistory: z.array(z.union([
        z.lazy(() => GetProjectsBlockHistory1$inboundSchema),
        z.lazy(() => GetProjectsBlockHistory3$inboundSchema),
        z.lazy(() => GetProjectsBlockHistory4$inboundSchema),
        z.lazy(() => GetProjectsBlockHistory2$inboundSchema),
    ])).optional(),
});
/** @internal */
export const GetProjectsAbuse$outboundSchema = z.object({
    scanner: z.string().optional(),
    history: z.array(z.lazy(() => GetProjectsHistory$outboundSchema)),
    updatedAt: z.number(),
    block: z.lazy(() => GetProjectsBlock$outboundSchema).optional(),
    blockHistory: z.array(z.union([
        z.lazy(() => GetProjectsBlockHistory1$outboundSchema),
        z.lazy(() => GetProjectsBlockHistory3$outboundSchema),
        z.lazy(() => GetProjectsBlockHistory4$outboundSchema),
        z.lazy(() => GetProjectsBlockHistory2$outboundSchema),
    ])).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsAbuse$;
(function (GetProjectsAbuse$) {
    /** @deprecated use `GetProjectsAbuse$inboundSchema` instead. */
    GetProjectsAbuse$.inboundSchema = GetProjectsAbuse$inboundSchema;
    /** @deprecated use `GetProjectsAbuse$outboundSchema` instead. */
    GetProjectsAbuse$.outboundSchema = GetProjectsAbuse$outboundSchema;
})(GetProjectsAbuse$ || (GetProjectsAbuse$ = {}));
export function getProjectsAbuseToJSON(getProjectsAbuse) {
    return JSON.stringify(GetProjectsAbuse$outboundSchema.parse(getProjectsAbuse));
}
export function getProjectsAbuseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsAbuse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsAbuse' from JSON`);
}
/** @internal */
export const GetProjectsHasProjectsType$inboundSchema = z.nativeEnum(GetProjectsHasProjectsType);
/** @internal */
export const GetProjectsHasProjectsType$outboundSchema = GetProjectsHasProjectsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsHasProjectsType$;
(function (GetProjectsHasProjectsType$) {
    /** @deprecated use `GetProjectsHasProjectsType$inboundSchema` instead. */
    GetProjectsHasProjectsType$.inboundSchema = GetProjectsHasProjectsType$inboundSchema;
    /** @deprecated use `GetProjectsHasProjectsType$outboundSchema` instead. */
    GetProjectsHasProjectsType$.outboundSchema = GetProjectsHasProjectsType$outboundSchema;
})(GetProjectsHasProjectsType$ || (GetProjectsHasProjectsType$ = {}));
/** @internal */
export const GetProjectsHasProjectsValue$inboundSchema = z.object({
    eq: z.string(),
});
/** @internal */
export const GetProjectsHasProjectsValue$outboundSchema = z.object({
    eq: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsHasProjectsValue$;
(function (GetProjectsHasProjectsValue$) {
    /** @deprecated use `GetProjectsHasProjectsValue$inboundSchema` instead. */
    GetProjectsHasProjectsValue$.inboundSchema = GetProjectsHasProjectsValue$inboundSchema;
    /** @deprecated use `GetProjectsHasProjectsValue$outboundSchema` instead. */
    GetProjectsHasProjectsValue$.outboundSchema = GetProjectsHasProjectsValue$outboundSchema;
})(GetProjectsHasProjectsValue$ || (GetProjectsHasProjectsValue$ = {}));
export function getProjectsHasProjectsValueToJSON(getProjectsHasProjectsValue) {
    return JSON.stringify(GetProjectsHasProjectsValue$outboundSchema.parse(getProjectsHasProjectsValue));
}
export function getProjectsHasProjectsValueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsHasProjectsValue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsHasProjectsValue' from JSON`);
}
/** @internal */
export const GetProjectsHas2$inboundSchema = z.object({
    type: GetProjectsHasProjectsType$inboundSchema,
    value: z.lazy(() => GetProjectsHasProjectsValue$inboundSchema),
});
/** @internal */
export const GetProjectsHas2$outboundSchema = z.object({
    type: GetProjectsHasProjectsType$outboundSchema,
    value: z.lazy(() => GetProjectsHasProjectsValue$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsHas2$;
(function (GetProjectsHas2$) {
    /** @deprecated use `GetProjectsHas2$inboundSchema` instead. */
    GetProjectsHas2$.inboundSchema = GetProjectsHas2$inboundSchema;
    /** @deprecated use `GetProjectsHas2$outboundSchema` instead. */
    GetProjectsHas2$.outboundSchema = GetProjectsHas2$outboundSchema;
})(GetProjectsHas2$ || (GetProjectsHas2$ = {}));
export function getProjectsHas2ToJSON(getProjectsHas2) {
    return JSON.stringify(GetProjectsHas2$outboundSchema.parse(getProjectsHas2));
}
export function getProjectsHas2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsHas2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsHas2' from JSON`);
}
/** @internal */
export const GetProjectsHasType$inboundSchema = z.nativeEnum(GetProjectsHasType);
/** @internal */
export const GetProjectsHasType$outboundSchema = GetProjectsHasType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsHasType$;
(function (GetProjectsHasType$) {
    /** @deprecated use `GetProjectsHasType$inboundSchema` instead. */
    GetProjectsHasType$.inboundSchema = GetProjectsHasType$inboundSchema;
    /** @deprecated use `GetProjectsHasType$outboundSchema` instead. */
    GetProjectsHasType$.outboundSchema = GetProjectsHasType$outboundSchema;
})(GetProjectsHasType$ || (GetProjectsHasType$ = {}));
/** @internal */
export const GetProjectsHasKey$inboundSchema = z.nativeEnum(GetProjectsHasKey);
/** @internal */
export const GetProjectsHasKey$outboundSchema = GetProjectsHasKey$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsHasKey$;
(function (GetProjectsHasKey$) {
    /** @deprecated use `GetProjectsHasKey$inboundSchema` instead. */
    GetProjectsHasKey$.inboundSchema = GetProjectsHasKey$inboundSchema;
    /** @deprecated use `GetProjectsHasKey$outboundSchema` instead. */
    GetProjectsHasKey$.outboundSchema = GetProjectsHasKey$outboundSchema;
})(GetProjectsHasKey$ || (GetProjectsHasKey$ = {}));
/** @internal */
export const GetProjectsHasValue$inboundSchema = z.object({
    eq: z.string(),
});
/** @internal */
export const GetProjectsHasValue$outboundSchema = z.object({
    eq: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsHasValue$;
(function (GetProjectsHasValue$) {
    /** @deprecated use `GetProjectsHasValue$inboundSchema` instead. */
    GetProjectsHasValue$.inboundSchema = GetProjectsHasValue$inboundSchema;
    /** @deprecated use `GetProjectsHasValue$outboundSchema` instead. */
    GetProjectsHasValue$.outboundSchema = GetProjectsHasValue$outboundSchema;
})(GetProjectsHasValue$ || (GetProjectsHasValue$ = {}));
export function getProjectsHasValueToJSON(getProjectsHasValue) {
    return JSON.stringify(GetProjectsHasValue$outboundSchema.parse(getProjectsHasValue));
}
export function getProjectsHasValueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsHasValue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsHasValue' from JSON`);
}
/** @internal */
export const GetProjectsHas1$inboundSchema = z.object({
    type: GetProjectsHasType$inboundSchema,
    key: GetProjectsHasKey$inboundSchema,
    value: z.lazy(() => GetProjectsHasValue$inboundSchema),
});
/** @internal */
export const GetProjectsHas1$outboundSchema = z.object({
    type: GetProjectsHasType$outboundSchema,
    key: GetProjectsHasKey$outboundSchema,
    value: z.lazy(() => GetProjectsHasValue$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsHas1$;
(function (GetProjectsHas1$) {
    /** @deprecated use `GetProjectsHas1$inboundSchema` instead. */
    GetProjectsHas1$.inboundSchema = GetProjectsHas1$inboundSchema;
    /** @deprecated use `GetProjectsHas1$outboundSchema` instead. */
    GetProjectsHas1$.outboundSchema = GetProjectsHas1$outboundSchema;
})(GetProjectsHas1$ || (GetProjectsHas1$ = {}));
export function getProjectsHas1ToJSON(getProjectsHas1) {
    return JSON.stringify(GetProjectsHas1$outboundSchema.parse(getProjectsHas1));
}
export function getProjectsHas1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsHas1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsHas1' from JSON`);
}
/** @internal */
export const GetProjectsInternalRoutesHas$inboundSchema = z.union([
    z.lazy(() => GetProjectsHas1$inboundSchema),
    z.lazy(() => GetProjectsHas2$inboundSchema),
]);
/** @internal */
export const GetProjectsInternalRoutesHas$outboundSchema = z.union([
    z.lazy(() => GetProjectsHas1$outboundSchema),
    z.lazy(() => GetProjectsHas2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsInternalRoutesHas$;
(function (GetProjectsInternalRoutesHas$) {
    /** @deprecated use `GetProjectsInternalRoutesHas$inboundSchema` instead. */
    GetProjectsInternalRoutesHas$.inboundSchema = GetProjectsInternalRoutesHas$inboundSchema;
    /** @deprecated use `GetProjectsInternalRoutesHas$outboundSchema` instead. */
    GetProjectsInternalRoutesHas$.outboundSchema = GetProjectsInternalRoutesHas$outboundSchema;
})(GetProjectsInternalRoutesHas$ || (GetProjectsInternalRoutesHas$ = {}));
export function getProjectsInternalRoutesHasToJSON(getProjectsInternalRoutesHas) {
    return JSON.stringify(GetProjectsInternalRoutesHas$outboundSchema.parse(getProjectsInternalRoutesHas));
}
export function getProjectsInternalRoutesHasFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsInternalRoutesHas$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsInternalRoutesHas' from JSON`);
}
/** @internal */
export const GetProjectsInternalRoutesAction$inboundSchema = z.nativeEnum(GetProjectsInternalRoutesAction);
/** @internal */
export const GetProjectsInternalRoutesAction$outboundSchema = GetProjectsInternalRoutesAction$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsInternalRoutesAction$;
(function (GetProjectsInternalRoutesAction$) {
    /** @deprecated use `GetProjectsInternalRoutesAction$inboundSchema` instead. */
    GetProjectsInternalRoutesAction$.inboundSchema = GetProjectsInternalRoutesAction$inboundSchema;
    /** @deprecated use `GetProjectsInternalRoutesAction$outboundSchema` instead. */
    GetProjectsInternalRoutesAction$.outboundSchema = GetProjectsInternalRoutesAction$outboundSchema;
})(GetProjectsInternalRoutesAction$ || (GetProjectsInternalRoutesAction$ = {}));
/** @internal */
export const GetProjectsInternalRoutesMitigate$inboundSchema = z.object({
    action: GetProjectsInternalRoutesAction$inboundSchema,
});
/** @internal */
export const GetProjectsInternalRoutesMitigate$outboundSchema = z.object({
    action: GetProjectsInternalRoutesAction$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsInternalRoutesMitigate$;
(function (GetProjectsInternalRoutesMitigate$) {
    /** @deprecated use `GetProjectsInternalRoutesMitigate$inboundSchema` instead. */
    GetProjectsInternalRoutesMitigate$.inboundSchema = GetProjectsInternalRoutesMitigate$inboundSchema;
    /** @deprecated use `GetProjectsInternalRoutesMitigate$outboundSchema` instead. */
    GetProjectsInternalRoutesMitigate$.outboundSchema = GetProjectsInternalRoutesMitigate$outboundSchema;
})(GetProjectsInternalRoutesMitigate$ || (GetProjectsInternalRoutesMitigate$ = {}));
export function getProjectsInternalRoutesMitigateToJSON(getProjectsInternalRoutesMitigate) {
    return JSON.stringify(GetProjectsInternalRoutesMitigate$outboundSchema.parse(getProjectsInternalRoutesMitigate));
}
export function getProjectsInternalRoutesMitigateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsInternalRoutesMitigate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsInternalRoutesMitigate' from JSON`);
}
/** @internal */
export const GetProjectsInternalRoutes2$inboundSchema = z.object({
    has: z.array(z.union([
        z.lazy(() => GetProjectsHas1$inboundSchema),
        z.lazy(() => GetProjectsHas2$inboundSchema),
    ])),
    mitigate: z.lazy(() => GetProjectsInternalRoutesMitigate$inboundSchema),
    src: z.string().optional(),
});
/** @internal */
export const GetProjectsInternalRoutes2$outboundSchema = z.object({
    has: z.array(z.union([
        z.lazy(() => GetProjectsHas1$outboundSchema),
        z.lazy(() => GetProjectsHas2$outboundSchema),
    ])),
    mitigate: z.lazy(() => GetProjectsInternalRoutesMitigate$outboundSchema),
    src: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsInternalRoutes2$;
(function (GetProjectsInternalRoutes2$) {
    /** @deprecated use `GetProjectsInternalRoutes2$inboundSchema` instead. */
    GetProjectsInternalRoutes2$.inboundSchema = GetProjectsInternalRoutes2$inboundSchema;
    /** @deprecated use `GetProjectsInternalRoutes2$outboundSchema` instead. */
    GetProjectsInternalRoutes2$.outboundSchema = GetProjectsInternalRoutes2$outboundSchema;
})(GetProjectsInternalRoutes2$ || (GetProjectsInternalRoutes2$ = {}));
export function getProjectsInternalRoutes2ToJSON(getProjectsInternalRoutes2) {
    return JSON.stringify(GetProjectsInternalRoutes2$outboundSchema.parse(getProjectsInternalRoutes2));
}
export function getProjectsInternalRoutes2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsInternalRoutes2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsInternalRoutes2' from JSON`);
}
/** @internal */
export const GetProjectsInternalRoutes1$inboundSchema = z.object({
    src: z.string(),
    status: z.number(),
});
/** @internal */
export const GetProjectsInternalRoutes1$outboundSchema = z.object({
    src: z.string(),
    status: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsInternalRoutes1$;
(function (GetProjectsInternalRoutes1$) {
    /** @deprecated use `GetProjectsInternalRoutes1$inboundSchema` instead. */
    GetProjectsInternalRoutes1$.inboundSchema = GetProjectsInternalRoutes1$inboundSchema;
    /** @deprecated use `GetProjectsInternalRoutes1$outboundSchema` instead. */
    GetProjectsInternalRoutes1$.outboundSchema = GetProjectsInternalRoutes1$outboundSchema;
})(GetProjectsInternalRoutes1$ || (GetProjectsInternalRoutes1$ = {}));
export function getProjectsInternalRoutes1ToJSON(getProjectsInternalRoutes1) {
    return JSON.stringify(GetProjectsInternalRoutes1$outboundSchema.parse(getProjectsInternalRoutes1));
}
export function getProjectsInternalRoutes1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsInternalRoutes1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsInternalRoutes1' from JSON`);
}
/** @internal */
export const GetProjectsInternalRoutes$inboundSchema = z.union([
    z.lazy(() => GetProjectsInternalRoutes1$inboundSchema),
    z.lazy(() => GetProjectsInternalRoutes2$inboundSchema),
]);
/** @internal */
export const GetProjectsInternalRoutes$outboundSchema = z.union([
    z.lazy(() => GetProjectsInternalRoutes1$outboundSchema),
    z.lazy(() => GetProjectsInternalRoutes2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsInternalRoutes$;
(function (GetProjectsInternalRoutes$) {
    /** @deprecated use `GetProjectsInternalRoutes$inboundSchema` instead. */
    GetProjectsInternalRoutes$.inboundSchema = GetProjectsInternalRoutes$inboundSchema;
    /** @deprecated use `GetProjectsInternalRoutes$outboundSchema` instead. */
    GetProjectsInternalRoutes$.outboundSchema = GetProjectsInternalRoutes$outboundSchema;
})(GetProjectsInternalRoutes$ || (GetProjectsInternalRoutes$ = {}));
export function getProjectsInternalRoutesToJSON(getProjectsInternalRoutes) {
    return JSON.stringify(GetProjectsInternalRoutes$outboundSchema.parse(getProjectsInternalRoutes));
}
export function getProjectsInternalRoutesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsInternalRoutes$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsInternalRoutes' from JSON`);
}
/** @internal */
export const GetProjectsProjects$inboundSchema = z.object({
    accountId: z.string(),
    analytics: z.lazy(() => GetProjectsAnalytics$inboundSchema).optional(),
    speedInsights: z.lazy(() => GetProjectsSpeedInsights$inboundSchema)
        .optional(),
    autoExposeSystemEnvs: z.boolean().optional(),
    autoAssignCustomDomains: z.boolean().optional(),
    autoAssignCustomDomainsUpdatedBy: z.string().optional(),
    buildCommand: z.nullable(z.string()).optional(),
    commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
    connectConfigurations: z.nullable(z.array(z.lazy(() => GetProjectsConnectConfigurations$inboundSchema))).optional(),
    connectConfigurationId: z.nullable(z.string()).optional(),
    connectBuildsEnabled: z.boolean().optional(),
    passiveConnectConfigurationId: z.nullable(z.string()).optional(),
    createdAt: z.number().optional(),
    customerSupportCodeVisibility: z.boolean().optional(),
    crons: z.lazy(() => GetProjectsCrons$inboundSchema).optional(),
    dataCache: z.lazy(() => GetProjectsDataCache$inboundSchema).optional(),
    deploymentExpiration: z.nullable(z.lazy(() => GetProjectsDeploymentExpiration$inboundSchema)).optional(),
    devCommand: z.nullable(z.string()).optional(),
    directoryListing: z.boolean(),
    installCommand: z.nullable(z.string()).optional(),
    env: z.array(z.lazy(() => GetProjectsEnv$inboundSchema)).optional(),
    customEnvironments: z.array(z.lazy(() => GetProjectsCustomEnvironments$inboundSchema)).optional(),
    framework: z.nullable(GetProjectsFramework$inboundSchema).optional(),
    gitForkProtection: z.boolean().optional(),
    gitLFS: z.boolean().optional(),
    id: z.string(),
    ipBuckets: z.array(z.lazy(() => GetProjectsIpBuckets$inboundSchema))
        .optional(),
    latestDeployments: z.array(z.lazy(() => GetProjectsLatestDeployments$inboundSchema)).optional(),
    link: z.union([
        z.lazy(() => GetProjectsLink4$inboundSchema),
        z.lazy(() => GetProjectsLink5$inboundSchema),
        z.lazy(() => GetProjectsLink3$inboundSchema),
        z.lazy(() => GetProjectsLink1$inboundSchema),
        z.lazy(() => GetProjectsLink2$inboundSchema),
    ]).optional(),
    microfrontends: z.union([
        z.lazy(() => GetProjectsMicrofrontends1$inboundSchema),
        z.lazy(() => GetProjectsMicrofrontends2$inboundSchema),
    ]).optional(),
    name: z.string(),
    nodeVersion: GetProjectsNodeVersion$inboundSchema,
    optionsAllowlist: z.nullable(z.lazy(() => GetProjectsOptionsAllowlist$inboundSchema)).optional(),
    outputDirectory: z.nullable(z.string()).optional(),
    passwordProtection: z.nullable(z.lazy(() => GetProjectsPasswordProtection$inboundSchema)).optional(),
    productionDeploymentsFastLane: z.boolean().optional(),
    publicSource: z.nullable(z.boolean()).optional(),
    resourceConfig: z.lazy(() => GetProjectsResourceConfig$inboundSchema),
    rollbackDescription: z.lazy(() => GetProjectsRollbackDescription$inboundSchema).optional(),
    rollingRelease: z.nullable(z.lazy(() => GetProjectsRollingRelease$inboundSchema)).optional(),
    defaultResourceConfig: z.lazy(() => GetProjectsDefaultResourceConfig$inboundSchema),
    rootDirectory: z.nullable(z.string()).optional(),
    serverlessFunctionZeroConfigFailover: z.boolean().optional(),
    skewProtectionBoundaryAt: z.number().optional(),
    skewProtectionMaxAge: z.number().optional(),
    skipGitConnectDuringLink: z.boolean().optional(),
    sourceFilesOutsideRootDirectory: z.boolean().optional(),
    enableAffectedProjectsDeployments: z.boolean().optional(),
    ssoProtection: z.nullable(z.lazy(() => GetProjectsSsoProtection$inboundSchema)).optional(),
    targets: z.record(z.nullable(z.lazy(() => GetProjectsTargets$inboundSchema)))
        .optional(),
    transferCompletedAt: z.number().optional(),
    transferStartedAt: z.number().optional(),
    transferToAccountId: z.string().optional(),
    transferredFromAccountId: z.string().optional(),
    updatedAt: z.number().optional(),
    live: z.boolean().optional(),
    enablePreviewFeedback: z.nullable(z.boolean()).optional(),
    enableProductionFeedback: z.nullable(z.boolean()).optional(),
    permissions: z.lazy(() => GetProjectsPermissions$inboundSchema).optional(),
    lastRollbackTarget: z.nullable(z.lazy(() => GetProjectsLastRollbackTarget$inboundSchema)).optional(),
    lastAliasRequest: z.nullable(z.lazy(() => GetProjectsLastAliasRequest$inboundSchema)).optional(),
    protectionBypass: z.record(z.union([
        z.lazy(() => GetProjectsProtectionBypass1$inboundSchema),
        z.lazy(() => GetProjectsProtectionBypass2$inboundSchema),
    ])).optional(),
    hasActiveBranches: z.boolean().optional(),
    trustedIps: z.nullable(z.union([
        z.lazy(() => GetProjectsTrustedIps1$inboundSchema),
        z.lazy(() => GetProjectsTrustedIps2$inboundSchema),
    ])).optional(),
    gitComments: z.lazy(() => GetProjectsGitComments$inboundSchema).optional(),
    gitProviderOptions: z.lazy(() => GetProjectsGitProviderOptions$inboundSchema)
        .optional(),
    paused: z.boolean().optional(),
    concurrencyBucketName: z.string().optional(),
    webAnalytics: z.lazy(() => GetProjectsWebAnalytics$inboundSchema).optional(),
    security: z.lazy(() => GetProjectsSecurity$inboundSchema).optional(),
    oidcTokenConfig: z.lazy(() => GetProjectsOidcTokenConfig$inboundSchema)
        .optional(),
    tier: GetProjectsTier$inboundSchema.optional(),
    features: z.lazy(() => GetProjectsFeatures$inboundSchema).optional(),
    v0: z.boolean().optional(),
    abuse: z.lazy(() => GetProjectsAbuse$inboundSchema).optional(),
    internalRoutes: z.array(z.union([
        z.lazy(() => GetProjectsInternalRoutes1$inboundSchema),
        z.lazy(() => GetProjectsInternalRoutes2$inboundSchema),
    ])).optional(),
});
/** @internal */
export const GetProjectsProjects$outboundSchema = z.object({
    accountId: z.string(),
    analytics: z.lazy(() => GetProjectsAnalytics$outboundSchema).optional(),
    speedInsights: z.lazy(() => GetProjectsSpeedInsights$outboundSchema)
        .optional(),
    autoExposeSystemEnvs: z.boolean().optional(),
    autoAssignCustomDomains: z.boolean().optional(),
    autoAssignCustomDomainsUpdatedBy: z.string().optional(),
    buildCommand: z.nullable(z.string()).optional(),
    commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
    connectConfigurations: z.nullable(z.array(z.lazy(() => GetProjectsConnectConfigurations$outboundSchema))).optional(),
    connectConfigurationId: z.nullable(z.string()).optional(),
    connectBuildsEnabled: z.boolean().optional(),
    passiveConnectConfigurationId: z.nullable(z.string()).optional(),
    createdAt: z.number().optional(),
    customerSupportCodeVisibility: z.boolean().optional(),
    crons: z.lazy(() => GetProjectsCrons$outboundSchema).optional(),
    dataCache: z.lazy(() => GetProjectsDataCache$outboundSchema).optional(),
    deploymentExpiration: z.nullable(z.lazy(() => GetProjectsDeploymentExpiration$outboundSchema)).optional(),
    devCommand: z.nullable(z.string()).optional(),
    directoryListing: z.boolean(),
    installCommand: z.nullable(z.string()).optional(),
    env: z.array(z.lazy(() => GetProjectsEnv$outboundSchema)).optional(),
    customEnvironments: z.array(z.lazy(() => GetProjectsCustomEnvironments$outboundSchema)).optional(),
    framework: z.nullable(GetProjectsFramework$outboundSchema).optional(),
    gitForkProtection: z.boolean().optional(),
    gitLFS: z.boolean().optional(),
    id: z.string(),
    ipBuckets: z.array(z.lazy(() => GetProjectsIpBuckets$outboundSchema))
        .optional(),
    latestDeployments: z.array(z.lazy(() => GetProjectsLatestDeployments$outboundSchema)).optional(),
    link: z.union([
        z.lazy(() => GetProjectsLink4$outboundSchema),
        z.lazy(() => GetProjectsLink5$outboundSchema),
        z.lazy(() => GetProjectsLink3$outboundSchema),
        z.lazy(() => GetProjectsLink1$outboundSchema),
        z.lazy(() => GetProjectsLink2$outboundSchema),
    ]).optional(),
    microfrontends: z.union([
        z.lazy(() => GetProjectsMicrofrontends1$outboundSchema),
        z.lazy(() => GetProjectsMicrofrontends2$outboundSchema),
    ]).optional(),
    name: z.string(),
    nodeVersion: GetProjectsNodeVersion$outboundSchema,
    optionsAllowlist: z.nullable(z.lazy(() => GetProjectsOptionsAllowlist$outboundSchema)).optional(),
    outputDirectory: z.nullable(z.string()).optional(),
    passwordProtection: z.nullable(z.lazy(() => GetProjectsPasswordProtection$outboundSchema)).optional(),
    productionDeploymentsFastLane: z.boolean().optional(),
    publicSource: z.nullable(z.boolean()).optional(),
    resourceConfig: z.lazy(() => GetProjectsResourceConfig$outboundSchema),
    rollbackDescription: z.lazy(() => GetProjectsRollbackDescription$outboundSchema).optional(),
    rollingRelease: z.nullable(z.lazy(() => GetProjectsRollingRelease$outboundSchema)).optional(),
    defaultResourceConfig: z.lazy(() => GetProjectsDefaultResourceConfig$outboundSchema),
    rootDirectory: z.nullable(z.string()).optional(),
    serverlessFunctionZeroConfigFailover: z.boolean().optional(),
    skewProtectionBoundaryAt: z.number().optional(),
    skewProtectionMaxAge: z.number().optional(),
    skipGitConnectDuringLink: z.boolean().optional(),
    sourceFilesOutsideRootDirectory: z.boolean().optional(),
    enableAffectedProjectsDeployments: z.boolean().optional(),
    ssoProtection: z.nullable(z.lazy(() => GetProjectsSsoProtection$outboundSchema)).optional(),
    targets: z.record(z.nullable(z.lazy(() => GetProjectsTargets$outboundSchema)))
        .optional(),
    transferCompletedAt: z.number().optional(),
    transferStartedAt: z.number().optional(),
    transferToAccountId: z.string().optional(),
    transferredFromAccountId: z.string().optional(),
    updatedAt: z.number().optional(),
    live: z.boolean().optional(),
    enablePreviewFeedback: z.nullable(z.boolean()).optional(),
    enableProductionFeedback: z.nullable(z.boolean()).optional(),
    permissions: z.lazy(() => GetProjectsPermissions$outboundSchema).optional(),
    lastRollbackTarget: z.nullable(z.lazy(() => GetProjectsLastRollbackTarget$outboundSchema)).optional(),
    lastAliasRequest: z.nullable(z.lazy(() => GetProjectsLastAliasRequest$outboundSchema)).optional(),
    protectionBypass: z.record(z.union([
        z.lazy(() => GetProjectsProtectionBypass1$outboundSchema),
        z.lazy(() => GetProjectsProtectionBypass2$outboundSchema),
    ])).optional(),
    hasActiveBranches: z.boolean().optional(),
    trustedIps: z.nullable(z.union([
        z.lazy(() => GetProjectsTrustedIps1$outboundSchema),
        z.lazy(() => GetProjectsTrustedIps2$outboundSchema),
    ])).optional(),
    gitComments: z.lazy(() => GetProjectsGitComments$outboundSchema).optional(),
    gitProviderOptions: z.lazy(() => GetProjectsGitProviderOptions$outboundSchema)
        .optional(),
    paused: z.boolean().optional(),
    concurrencyBucketName: z.string().optional(),
    webAnalytics: z.lazy(() => GetProjectsWebAnalytics$outboundSchema).optional(),
    security: z.lazy(() => GetProjectsSecurity$outboundSchema).optional(),
    oidcTokenConfig: z.lazy(() => GetProjectsOidcTokenConfig$outboundSchema)
        .optional(),
    tier: GetProjectsTier$outboundSchema.optional(),
    features: z.lazy(() => GetProjectsFeatures$outboundSchema).optional(),
    v0: z.boolean().optional(),
    abuse: z.lazy(() => GetProjectsAbuse$outboundSchema).optional(),
    internalRoutes: z.array(z.union([
        z.lazy(() => GetProjectsInternalRoutes1$outboundSchema),
        z.lazy(() => GetProjectsInternalRoutes2$outboundSchema),
    ])).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsProjects$;
(function (GetProjectsProjects$) {
    /** @deprecated use `GetProjectsProjects$inboundSchema` instead. */
    GetProjectsProjects$.inboundSchema = GetProjectsProjects$inboundSchema;
    /** @deprecated use `GetProjectsProjects$outboundSchema` instead. */
    GetProjectsProjects$.outboundSchema = GetProjectsProjects$outboundSchema;
})(GetProjectsProjects$ || (GetProjectsProjects$ = {}));
export function getProjectsProjectsToJSON(getProjectsProjects) {
    return JSON.stringify(GetProjectsProjects$outboundSchema.parse(getProjectsProjects));
}
export function getProjectsProjectsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsProjects$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsProjects' from JSON`);
}
/** @internal */
export const GetProjectsResponseBody$inboundSchema = z.object({
    projects: z.array(z.lazy(() => GetProjectsProjects$inboundSchema)),
    pagination: Pagination$inboundSchema,
});
/** @internal */
export const GetProjectsResponseBody$outboundSchema = z.object({
    projects: z.array(z.lazy(() => GetProjectsProjects$outboundSchema)),
    pagination: Pagination$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetProjectsResponseBody$;
(function (GetProjectsResponseBody$) {
    /** @deprecated use `GetProjectsResponseBody$inboundSchema` instead. */
    GetProjectsResponseBody$.inboundSchema = GetProjectsResponseBody$inboundSchema;
    /** @deprecated use `GetProjectsResponseBody$outboundSchema` instead. */
    GetProjectsResponseBody$.outboundSchema = GetProjectsResponseBody$outboundSchema;
})(GetProjectsResponseBody$ || (GetProjectsResponseBody$ = {}));
export function getProjectsResponseBodyToJSON(getProjectsResponseBody) {
    return JSON.stringify(GetProjectsResponseBody$outboundSchema.parse(getProjectsResponseBody));
}
export function getProjectsResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetProjectsResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetProjectsResponseBody' from JSON`);
}
//# sourceMappingURL=getprojectsop.js.map