/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
export const GetAllChecksConclusion = {
    Canceled: "canceled",
    Failed: "failed",
    Neutral: "neutral",
    Succeeded: "succeeded",
    Skipped: "skipped",
    Stale: "stale",
};
export const GetAllChecksSource = {
    WebVitals: "web-vitals",
};
export const GetAllChecksChecksSource = {
    WebVitals: "web-vitals",
};
export const GetAllChecksChecksResponseSource = {
    WebVitals: "web-vitals",
};
export const GetAllChecksChecksResponse200Source = {
    WebVitals: "web-vitals",
};
export const GetAllChecksChecksResponse200ApplicationJSONSource = {
    WebVitals: "web-vitals",
};
export const GetAllChecksStatus = {
    Registered: "registered",
    Running: "running",
    Completed: "completed",
};
/** @internal */
export const GetAllChecksRequest$inboundSchema = z.object({
    deploymentId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/** @internal */
export const GetAllChecksRequest$outboundSchema = z.object({
    deploymentId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetAllChecksRequest$;
(function (GetAllChecksRequest$) {
    /** @deprecated use `GetAllChecksRequest$inboundSchema` instead. */
    GetAllChecksRequest$.inboundSchema = GetAllChecksRequest$inboundSchema;
    /** @deprecated use `GetAllChecksRequest$outboundSchema` instead. */
    GetAllChecksRequest$.outboundSchema = GetAllChecksRequest$outboundSchema;
})(GetAllChecksRequest$ || (GetAllChecksRequest$ = {}));
export function getAllChecksRequestToJSON(getAllChecksRequest) {
    return JSON.stringify(GetAllChecksRequest$outboundSchema.parse(getAllChecksRequest));
}
export function getAllChecksRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetAllChecksRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetAllChecksRequest' from JSON`);
}
/** @internal */
export const GetAllChecksConclusion$inboundSchema = z.nativeEnum(GetAllChecksConclusion);
/** @internal */
export const GetAllChecksConclusion$outboundSchema = GetAllChecksConclusion$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetAllChecksConclusion$;
(function (GetAllChecksConclusion$) {
    /** @deprecated use `GetAllChecksConclusion$inboundSchema` instead. */
    GetAllChecksConclusion$.inboundSchema = GetAllChecksConclusion$inboundSchema;
    /** @deprecated use `GetAllChecksConclusion$outboundSchema` instead. */
    GetAllChecksConclusion$.outboundSchema = GetAllChecksConclusion$outboundSchema;
})(GetAllChecksConclusion$ || (GetAllChecksConclusion$ = {}));
/** @internal */
export const GetAllChecksSource$inboundSchema = z.nativeEnum(GetAllChecksSource);
/** @internal */
export const GetAllChecksSource$outboundSchema = GetAllChecksSource$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetAllChecksSource$;
(function (GetAllChecksSource$) {
    /** @deprecated use `GetAllChecksSource$inboundSchema` instead. */
    GetAllChecksSource$.inboundSchema = GetAllChecksSource$inboundSchema;
    /** @deprecated use `GetAllChecksSource$outboundSchema` instead. */
    GetAllChecksSource$.outboundSchema = GetAllChecksSource$outboundSchema;
})(GetAllChecksSource$ || (GetAllChecksSource$ = {}));
/** @internal */
export const GetAllChecksFCP$inboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: GetAllChecksSource$inboundSchema,
});
/** @internal */
export const GetAllChecksFCP$outboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: GetAllChecksSource$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetAllChecksFCP$;
(function (GetAllChecksFCP$) {
    /** @deprecated use `GetAllChecksFCP$inboundSchema` instead. */
    GetAllChecksFCP$.inboundSchema = GetAllChecksFCP$inboundSchema;
    /** @deprecated use `GetAllChecksFCP$outboundSchema` instead. */
    GetAllChecksFCP$.outboundSchema = GetAllChecksFCP$outboundSchema;
})(GetAllChecksFCP$ || (GetAllChecksFCP$ = {}));
export function getAllChecksFCPToJSON(getAllChecksFCP) {
    return JSON.stringify(GetAllChecksFCP$outboundSchema.parse(getAllChecksFCP));
}
export function getAllChecksFCPFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetAllChecksFCP$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetAllChecksFCP' from JSON`);
}
/** @internal */
export const GetAllChecksChecksSource$inboundSchema = z.nativeEnum(GetAllChecksChecksSource);
/** @internal */
export const GetAllChecksChecksSource$outboundSchema = GetAllChecksChecksSource$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetAllChecksChecksSource$;
(function (GetAllChecksChecksSource$) {
    /** @deprecated use `GetAllChecksChecksSource$inboundSchema` instead. */
    GetAllChecksChecksSource$.inboundSchema = GetAllChecksChecksSource$inboundSchema;
    /** @deprecated use `GetAllChecksChecksSource$outboundSchema` instead. */
    GetAllChecksChecksSource$.outboundSchema = GetAllChecksChecksSource$outboundSchema;
})(GetAllChecksChecksSource$ || (GetAllChecksChecksSource$ = {}));
/** @internal */
export const GetAllChecksLCP$inboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: GetAllChecksChecksSource$inboundSchema,
});
/** @internal */
export const GetAllChecksLCP$outboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: GetAllChecksChecksSource$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetAllChecksLCP$;
(function (GetAllChecksLCP$) {
    /** @deprecated use `GetAllChecksLCP$inboundSchema` instead. */
    GetAllChecksLCP$.inboundSchema = GetAllChecksLCP$inboundSchema;
    /** @deprecated use `GetAllChecksLCP$outboundSchema` instead. */
    GetAllChecksLCP$.outboundSchema = GetAllChecksLCP$outboundSchema;
})(GetAllChecksLCP$ || (GetAllChecksLCP$ = {}));
export function getAllChecksLCPToJSON(getAllChecksLCP) {
    return JSON.stringify(GetAllChecksLCP$outboundSchema.parse(getAllChecksLCP));
}
export function getAllChecksLCPFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetAllChecksLCP$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetAllChecksLCP' from JSON`);
}
/** @internal */
export const GetAllChecksChecksResponseSource$inboundSchema = z.nativeEnum(GetAllChecksChecksResponseSource);
/** @internal */
export const GetAllChecksChecksResponseSource$outboundSchema = GetAllChecksChecksResponseSource$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetAllChecksChecksResponseSource$;
(function (GetAllChecksChecksResponseSource$) {
    /** @deprecated use `GetAllChecksChecksResponseSource$inboundSchema` instead. */
    GetAllChecksChecksResponseSource$.inboundSchema = GetAllChecksChecksResponseSource$inboundSchema;
    /** @deprecated use `GetAllChecksChecksResponseSource$outboundSchema` instead. */
    GetAllChecksChecksResponseSource$.outboundSchema = GetAllChecksChecksResponseSource$outboundSchema;
})(GetAllChecksChecksResponseSource$ || (GetAllChecksChecksResponseSource$ = {}));
/** @internal */
export const GetAllChecksCLS$inboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: GetAllChecksChecksResponseSource$inboundSchema,
});
/** @internal */
export const GetAllChecksCLS$outboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: GetAllChecksChecksResponseSource$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetAllChecksCLS$;
(function (GetAllChecksCLS$) {
    /** @deprecated use `GetAllChecksCLS$inboundSchema` instead. */
    GetAllChecksCLS$.inboundSchema = GetAllChecksCLS$inboundSchema;
    /** @deprecated use `GetAllChecksCLS$outboundSchema` instead. */
    GetAllChecksCLS$.outboundSchema = GetAllChecksCLS$outboundSchema;
})(GetAllChecksCLS$ || (GetAllChecksCLS$ = {}));
export function getAllChecksCLSToJSON(getAllChecksCLS) {
    return JSON.stringify(GetAllChecksCLS$outboundSchema.parse(getAllChecksCLS));
}
export function getAllChecksCLSFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetAllChecksCLS$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetAllChecksCLS' from JSON`);
}
/** @internal */
export const GetAllChecksChecksResponse200Source$inboundSchema = z.nativeEnum(GetAllChecksChecksResponse200Source);
/** @internal */
export const GetAllChecksChecksResponse200Source$outboundSchema = GetAllChecksChecksResponse200Source$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetAllChecksChecksResponse200Source$;
(function (GetAllChecksChecksResponse200Source$) {
    /** @deprecated use `GetAllChecksChecksResponse200Source$inboundSchema` instead. */
    GetAllChecksChecksResponse200Source$.inboundSchema = GetAllChecksChecksResponse200Source$inboundSchema;
    /** @deprecated use `GetAllChecksChecksResponse200Source$outboundSchema` instead. */
    GetAllChecksChecksResponse200Source$.outboundSchema = GetAllChecksChecksResponse200Source$outboundSchema;
})(GetAllChecksChecksResponse200Source$ || (GetAllChecksChecksResponse200Source$ = {}));
/** @internal */
export const GetAllChecksTBT$inboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: GetAllChecksChecksResponse200Source$inboundSchema,
});
/** @internal */
export const GetAllChecksTBT$outboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: GetAllChecksChecksResponse200Source$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetAllChecksTBT$;
(function (GetAllChecksTBT$) {
    /** @deprecated use `GetAllChecksTBT$inboundSchema` instead. */
    GetAllChecksTBT$.inboundSchema = GetAllChecksTBT$inboundSchema;
    /** @deprecated use `GetAllChecksTBT$outboundSchema` instead. */
    GetAllChecksTBT$.outboundSchema = GetAllChecksTBT$outboundSchema;
})(GetAllChecksTBT$ || (GetAllChecksTBT$ = {}));
export function getAllChecksTBTToJSON(getAllChecksTBT) {
    return JSON.stringify(GetAllChecksTBT$outboundSchema.parse(getAllChecksTBT));
}
export function getAllChecksTBTFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetAllChecksTBT$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetAllChecksTBT' from JSON`);
}
/** @internal */
export const GetAllChecksChecksResponse200ApplicationJSONSource$inboundSchema = z
    .nativeEnum(GetAllChecksChecksResponse200ApplicationJSONSource);
/** @internal */
export const GetAllChecksChecksResponse200ApplicationJSONSource$outboundSchema = GetAllChecksChecksResponse200ApplicationJSONSource$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetAllChecksChecksResponse200ApplicationJSONSource$;
(function (GetAllChecksChecksResponse200ApplicationJSONSource$) {
    /** @deprecated use `GetAllChecksChecksResponse200ApplicationJSONSource$inboundSchema` instead. */
    GetAllChecksChecksResponse200ApplicationJSONSource$.inboundSchema = GetAllChecksChecksResponse200ApplicationJSONSource$inboundSchema;
    /** @deprecated use `GetAllChecksChecksResponse200ApplicationJSONSource$outboundSchema` instead. */
    GetAllChecksChecksResponse200ApplicationJSONSource$.outboundSchema = GetAllChecksChecksResponse200ApplicationJSONSource$outboundSchema;
})(GetAllChecksChecksResponse200ApplicationJSONSource$ || (GetAllChecksChecksResponse200ApplicationJSONSource$ = {}));
/** @internal */
export const GetAllChecksVirtualExperienceScore$inboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: GetAllChecksChecksResponse200ApplicationJSONSource$inboundSchema,
});
/** @internal */
export const GetAllChecksVirtualExperienceScore$outboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: GetAllChecksChecksResponse200ApplicationJSONSource$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetAllChecksVirtualExperienceScore$;
(function (GetAllChecksVirtualExperienceScore$) {
    /** @deprecated use `GetAllChecksVirtualExperienceScore$inboundSchema` instead. */
    GetAllChecksVirtualExperienceScore$.inboundSchema = GetAllChecksVirtualExperienceScore$inboundSchema;
    /** @deprecated use `GetAllChecksVirtualExperienceScore$outboundSchema` instead. */
    GetAllChecksVirtualExperienceScore$.outboundSchema = GetAllChecksVirtualExperienceScore$outboundSchema;
})(GetAllChecksVirtualExperienceScore$ || (GetAllChecksVirtualExperienceScore$ = {}));
export function getAllChecksVirtualExperienceScoreToJSON(getAllChecksVirtualExperienceScore) {
    return JSON.stringify(GetAllChecksVirtualExperienceScore$outboundSchema.parse(getAllChecksVirtualExperienceScore));
}
export function getAllChecksVirtualExperienceScoreFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetAllChecksVirtualExperienceScore$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetAllChecksVirtualExperienceScore' from JSON`);
}
/** @internal */
export const GetAllChecksMetrics$inboundSchema = z.object({
    FCP: z.lazy(() => GetAllChecksFCP$inboundSchema),
    LCP: z.lazy(() => GetAllChecksLCP$inboundSchema),
    CLS: z.lazy(() => GetAllChecksCLS$inboundSchema),
    TBT: z.lazy(() => GetAllChecksTBT$inboundSchema),
    virtualExperienceScore: z.lazy(() => GetAllChecksVirtualExperienceScore$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "FCP": "fcp",
        "LCP": "lcp",
        "CLS": "cls",
        "TBT": "tbt",
    });
});
/** @internal */
export const GetAllChecksMetrics$outboundSchema = z.object({
    fcp: z.lazy(() => GetAllChecksFCP$outboundSchema),
    lcp: z.lazy(() => GetAllChecksLCP$outboundSchema),
    cls: z.lazy(() => GetAllChecksCLS$outboundSchema),
    tbt: z.lazy(() => GetAllChecksTBT$outboundSchema),
    virtualExperienceScore: z.lazy(() => GetAllChecksVirtualExperienceScore$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        fcp: "FCP",
        lcp: "LCP",
        cls: "CLS",
        tbt: "TBT",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetAllChecksMetrics$;
(function (GetAllChecksMetrics$) {
    /** @deprecated use `GetAllChecksMetrics$inboundSchema` instead. */
    GetAllChecksMetrics$.inboundSchema = GetAllChecksMetrics$inboundSchema;
    /** @deprecated use `GetAllChecksMetrics$outboundSchema` instead. */
    GetAllChecksMetrics$.outboundSchema = GetAllChecksMetrics$outboundSchema;
})(GetAllChecksMetrics$ || (GetAllChecksMetrics$ = {}));
export function getAllChecksMetricsToJSON(getAllChecksMetrics) {
    return JSON.stringify(GetAllChecksMetrics$outboundSchema.parse(getAllChecksMetrics));
}
export function getAllChecksMetricsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetAllChecksMetrics$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetAllChecksMetrics' from JSON`);
}
/** @internal */
export const GetAllChecksOutput$inboundSchema = z.object({
    metrics: z.lazy(() => GetAllChecksMetrics$inboundSchema).optional(),
});
/** @internal */
export const GetAllChecksOutput$outboundSchema = z.object({
    metrics: z.lazy(() => GetAllChecksMetrics$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetAllChecksOutput$;
(function (GetAllChecksOutput$) {
    /** @deprecated use `GetAllChecksOutput$inboundSchema` instead. */
    GetAllChecksOutput$.inboundSchema = GetAllChecksOutput$inboundSchema;
    /** @deprecated use `GetAllChecksOutput$outboundSchema` instead. */
    GetAllChecksOutput$.outboundSchema = GetAllChecksOutput$outboundSchema;
})(GetAllChecksOutput$ || (GetAllChecksOutput$ = {}));
export function getAllChecksOutputToJSON(getAllChecksOutput) {
    return JSON.stringify(GetAllChecksOutput$outboundSchema.parse(getAllChecksOutput));
}
export function getAllChecksOutputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetAllChecksOutput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetAllChecksOutput' from JSON`);
}
/** @internal */
export const GetAllChecksStatus$inboundSchema = z.nativeEnum(GetAllChecksStatus);
/** @internal */
export const GetAllChecksStatus$outboundSchema = GetAllChecksStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetAllChecksStatus$;
(function (GetAllChecksStatus$) {
    /** @deprecated use `GetAllChecksStatus$inboundSchema` instead. */
    GetAllChecksStatus$.inboundSchema = GetAllChecksStatus$inboundSchema;
    /** @deprecated use `GetAllChecksStatus$outboundSchema` instead. */
    GetAllChecksStatus$.outboundSchema = GetAllChecksStatus$outboundSchema;
})(GetAllChecksStatus$ || (GetAllChecksStatus$ = {}));
/** @internal */
export const Checks$inboundSchema = z
    .object({
    completedAt: z.number().optional(),
    conclusion: GetAllChecksConclusion$inboundSchema.optional(),
    createdAt: z.number(),
    detailsUrl: z.string().optional(),
    id: z.string(),
    integrationId: z.string(),
    name: z.string(),
    output: z.lazy(() => GetAllChecksOutput$inboundSchema).optional(),
    path: z.string().optional(),
    rerequestable: z.boolean(),
    blocking: z.boolean(),
    startedAt: z.number().optional(),
    status: GetAllChecksStatus$inboundSchema,
    updatedAt: z.number(),
});
/** @internal */
export const Checks$outboundSchema = z.object({
    completedAt: z.number().optional(),
    conclusion: GetAllChecksConclusion$outboundSchema.optional(),
    createdAt: z.number(),
    detailsUrl: z.string().optional(),
    id: z.string(),
    integrationId: z.string(),
    name: z.string(),
    output: z.lazy(() => GetAllChecksOutput$outboundSchema).optional(),
    path: z.string().optional(),
    rerequestable: z.boolean(),
    blocking: z.boolean(),
    startedAt: z.number().optional(),
    status: GetAllChecksStatus$outboundSchema,
    updatedAt: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Checks$;
(function (Checks$) {
    /** @deprecated use `Checks$inboundSchema` instead. */
    Checks$.inboundSchema = Checks$inboundSchema;
    /** @deprecated use `Checks$outboundSchema` instead. */
    Checks$.outboundSchema = Checks$outboundSchema;
})(Checks$ || (Checks$ = {}));
export function checksToJSON(checks) {
    return JSON.stringify(Checks$outboundSchema.parse(checks));
}
export function checksFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Checks$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Checks' from JSON`);
}
/** @internal */
export const GetAllChecksResponseBody$inboundSchema = z.object({
    checks: z.array(z.lazy(() => Checks$inboundSchema)),
});
/** @internal */
export const GetAllChecksResponseBody$outboundSchema = z.object({
    checks: z.array(z.lazy(() => Checks$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetAllChecksResponseBody$;
(function (GetAllChecksResponseBody$) {
    /** @deprecated use `GetAllChecksResponseBody$inboundSchema` instead. */
    GetAllChecksResponseBody$.inboundSchema = GetAllChecksResponseBody$inboundSchema;
    /** @deprecated use `GetAllChecksResponseBody$outboundSchema` instead. */
    GetAllChecksResponseBody$.outboundSchema = GetAllChecksResponseBody$outboundSchema;
})(GetAllChecksResponseBody$ || (GetAllChecksResponseBody$ = {}));
export function getAllChecksResponseBodyToJSON(getAllChecksResponseBody) {
    return JSON.stringify(GetAllChecksResponseBody$outboundSchema.parse(getAllChecksResponseBody));
}
export function getAllChecksResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetAllChecksResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetAllChecksResponseBody' from JSON`);
}
//# sourceMappingURL=getallchecksop.js.map