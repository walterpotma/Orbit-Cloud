/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/** @internal */
export const MoveProjectDomainRequestBody$inboundSchema = z.object({
    projectId: z.string(),
});
/** @internal */
export const MoveProjectDomainRequestBody$outboundSchema = z.object({
    projectId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MoveProjectDomainRequestBody$;
(function (MoveProjectDomainRequestBody$) {
    /** @deprecated use `MoveProjectDomainRequestBody$inboundSchema` instead. */
    MoveProjectDomainRequestBody$.inboundSchema = MoveProjectDomainRequestBody$inboundSchema;
    /** @deprecated use `MoveProjectDomainRequestBody$outboundSchema` instead. */
    MoveProjectDomainRequestBody$.outboundSchema = MoveProjectDomainRequestBody$outboundSchema;
})(MoveProjectDomainRequestBody$ || (MoveProjectDomainRequestBody$ = {}));
export function moveProjectDomainRequestBodyToJSON(moveProjectDomainRequestBody) {
    return JSON.stringify(MoveProjectDomainRequestBody$outboundSchema.parse(moveProjectDomainRequestBody));
}
export function moveProjectDomainRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MoveProjectDomainRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MoveProjectDomainRequestBody' from JSON`);
}
/** @internal */
export const MoveProjectDomainRequest$inboundSchema = z.object({
    idOrName: z.string(),
    domain: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => MoveProjectDomainRequestBody$inboundSchema)
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const MoveProjectDomainRequest$outboundSchema = z.object({
    idOrName: z.string(),
    domain: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => MoveProjectDomainRequestBody$outboundSchema)
        .optional(),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MoveProjectDomainRequest$;
(function (MoveProjectDomainRequest$) {
    /** @deprecated use `MoveProjectDomainRequest$inboundSchema` instead. */
    MoveProjectDomainRequest$.inboundSchema = MoveProjectDomainRequest$inboundSchema;
    /** @deprecated use `MoveProjectDomainRequest$outboundSchema` instead. */
    MoveProjectDomainRequest$.outboundSchema = MoveProjectDomainRequest$outboundSchema;
})(MoveProjectDomainRequest$ || (MoveProjectDomainRequest$ = {}));
export function moveProjectDomainRequestToJSON(moveProjectDomainRequest) {
    return JSON.stringify(MoveProjectDomainRequest$outboundSchema.parse(moveProjectDomainRequest));
}
export function moveProjectDomainRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MoveProjectDomainRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MoveProjectDomainRequest' from JSON`);
}
/** @internal */
export const MoveProjectDomainVerification$inboundSchema = z.object({
    type: z.string(),
    domain: z.string(),
    value: z.string(),
    reason: z.string(),
});
/** @internal */
export const MoveProjectDomainVerification$outboundSchema = z.object({
    type: z.string(),
    domain: z.string(),
    value: z.string(),
    reason: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MoveProjectDomainVerification$;
(function (MoveProjectDomainVerification$) {
    /** @deprecated use `MoveProjectDomainVerification$inboundSchema` instead. */
    MoveProjectDomainVerification$.inboundSchema = MoveProjectDomainVerification$inboundSchema;
    /** @deprecated use `MoveProjectDomainVerification$outboundSchema` instead. */
    MoveProjectDomainVerification$.outboundSchema = MoveProjectDomainVerification$outboundSchema;
})(MoveProjectDomainVerification$ || (MoveProjectDomainVerification$ = {}));
export function moveProjectDomainVerificationToJSON(moveProjectDomainVerification) {
    return JSON.stringify(MoveProjectDomainVerification$outboundSchema.parse(moveProjectDomainVerification));
}
export function moveProjectDomainVerificationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MoveProjectDomainVerification$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MoveProjectDomainVerification' from JSON`);
}
/** @internal */
export const MoveProjectDomainResponseBody$inboundSchema = z.object({
    name: z.string(),
    apexName: z.string(),
    projectId: z.string(),
    redirect: z.nullable(z.string()).optional(),
    redirectStatusCode: z.nullable(z.number()).optional(),
    gitBranch: z.nullable(z.string()).optional(),
    customEnvironmentId: z.nullable(z.string()).optional(),
    updatedAt: z.number().optional(),
    createdAt: z.number().optional(),
    verified: z.boolean(),
    verification: z.array(z.lazy(() => MoveProjectDomainVerification$inboundSchema)).optional(),
});
/** @internal */
export const MoveProjectDomainResponseBody$outboundSchema = z.object({
    name: z.string(),
    apexName: z.string(),
    projectId: z.string(),
    redirect: z.nullable(z.string()).optional(),
    redirectStatusCode: z.nullable(z.number()).optional(),
    gitBranch: z.nullable(z.string()).optional(),
    customEnvironmentId: z.nullable(z.string()).optional(),
    updatedAt: z.number().optional(),
    createdAt: z.number().optional(),
    verified: z.boolean(),
    verification: z.array(z.lazy(() => MoveProjectDomainVerification$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MoveProjectDomainResponseBody$;
(function (MoveProjectDomainResponseBody$) {
    /** @deprecated use `MoveProjectDomainResponseBody$inboundSchema` instead. */
    MoveProjectDomainResponseBody$.inboundSchema = MoveProjectDomainResponseBody$inboundSchema;
    /** @deprecated use `MoveProjectDomainResponseBody$outboundSchema` instead. */
    MoveProjectDomainResponseBody$.outboundSchema = MoveProjectDomainResponseBody$outboundSchema;
})(MoveProjectDomainResponseBody$ || (MoveProjectDomainResponseBody$ = {}));
export function moveProjectDomainResponseBodyToJSON(moveProjectDomainResponseBody) {
    return JSON.stringify(MoveProjectDomainResponseBody$outboundSchema.parse(moveProjectDomainResponseBody));
}
export function moveProjectDomainResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MoveProjectDomainResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MoveProjectDomainResponseBody' from JSON`);
}
//# sourceMappingURL=moveprojectdomainop.js.map