/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/**
 * The project role of the member that will be added.
 */
export const AddProjectMemberRequestBodyProjectMembersRole = {
    Admin: "ADMIN",
    ProjectDeveloper: "PROJECT_DEVELOPER",
    ProjectViewer: "PROJECT_VIEWER",
};
/**
 * The project role of the member that will be added.
 */
export const AddProjectMemberRequestBodyRole = {
    Admin: "ADMIN",
    ProjectDeveloper: "PROJECT_DEVELOPER",
    ProjectViewer: "PROJECT_VIEWER",
};
/**
 * The project role of the member that will be added.
 */
export const RequestBodyRole = {
    Admin: "ADMIN",
    ProjectDeveloper: "PROJECT_DEVELOPER",
    ProjectViewer: "PROJECT_VIEWER",
};
/** @internal */
export const AddProjectMemberRequestBodyProjectMembersRole$inboundSchema = z
    .nativeEnum(AddProjectMemberRequestBodyProjectMembersRole);
/** @internal */
export const AddProjectMemberRequestBodyProjectMembersRole$outboundSchema = AddProjectMemberRequestBodyProjectMembersRole$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AddProjectMemberRequestBodyProjectMembersRole$;
(function (AddProjectMemberRequestBodyProjectMembersRole$) {
    /** @deprecated use `AddProjectMemberRequestBodyProjectMembersRole$inboundSchema` instead. */
    AddProjectMemberRequestBodyProjectMembersRole$.inboundSchema = AddProjectMemberRequestBodyProjectMembersRole$inboundSchema;
    /** @deprecated use `AddProjectMemberRequestBodyProjectMembersRole$outboundSchema` instead. */
    AddProjectMemberRequestBodyProjectMembersRole$.outboundSchema = AddProjectMemberRequestBodyProjectMembersRole$outboundSchema;
})(AddProjectMemberRequestBodyProjectMembersRole$ || (AddProjectMemberRequestBodyProjectMembersRole$ = {}));
/** @internal */
export const AddProjectMemberRequestBody3$inboundSchema = z.object({
    uid: z.string().optional(),
    username: z.string().optional(),
    email: z.string(),
    role: AddProjectMemberRequestBodyProjectMembersRole$inboundSchema,
});
/** @internal */
export const AddProjectMemberRequestBody3$outboundSchema = z.object({
    uid: z.string().optional(),
    username: z.string().optional(),
    email: z.string(),
    role: AddProjectMemberRequestBodyProjectMembersRole$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AddProjectMemberRequestBody3$;
(function (AddProjectMemberRequestBody3$) {
    /** @deprecated use `AddProjectMemberRequestBody3$inboundSchema` instead. */
    AddProjectMemberRequestBody3$.inboundSchema = AddProjectMemberRequestBody3$inboundSchema;
    /** @deprecated use `AddProjectMemberRequestBody3$outboundSchema` instead. */
    AddProjectMemberRequestBody3$.outboundSchema = AddProjectMemberRequestBody3$outboundSchema;
})(AddProjectMemberRequestBody3$ || (AddProjectMemberRequestBody3$ = {}));
export function addProjectMemberRequestBody3ToJSON(addProjectMemberRequestBody3) {
    return JSON.stringify(AddProjectMemberRequestBody3$outboundSchema.parse(addProjectMemberRequestBody3));
}
export function addProjectMemberRequestBody3FromJSON(jsonString) {
    return safeParse(jsonString, (x) => AddProjectMemberRequestBody3$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AddProjectMemberRequestBody3' from JSON`);
}
/** @internal */
export const AddProjectMemberRequestBodyRole$inboundSchema = z.nativeEnum(AddProjectMemberRequestBodyRole);
/** @internal */
export const AddProjectMemberRequestBodyRole$outboundSchema = AddProjectMemberRequestBodyRole$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AddProjectMemberRequestBodyRole$;
(function (AddProjectMemberRequestBodyRole$) {
    /** @deprecated use `AddProjectMemberRequestBodyRole$inboundSchema` instead. */
    AddProjectMemberRequestBodyRole$.inboundSchema = AddProjectMemberRequestBodyRole$inboundSchema;
    /** @deprecated use `AddProjectMemberRequestBodyRole$outboundSchema` instead. */
    AddProjectMemberRequestBodyRole$.outboundSchema = AddProjectMemberRequestBodyRole$outboundSchema;
})(AddProjectMemberRequestBodyRole$ || (AddProjectMemberRequestBodyRole$ = {}));
/** @internal */
export const AddProjectMemberRequestBody2$inboundSchema = z.object({
    uid: z.string().optional(),
    username: z.string(),
    email: z.string().optional(),
    role: AddProjectMemberRequestBodyRole$inboundSchema,
});
/** @internal */
export const AddProjectMemberRequestBody2$outboundSchema = z.object({
    uid: z.string().optional(),
    username: z.string(),
    email: z.string().optional(),
    role: AddProjectMemberRequestBodyRole$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AddProjectMemberRequestBody2$;
(function (AddProjectMemberRequestBody2$) {
    /** @deprecated use `AddProjectMemberRequestBody2$inboundSchema` instead. */
    AddProjectMemberRequestBody2$.inboundSchema = AddProjectMemberRequestBody2$inboundSchema;
    /** @deprecated use `AddProjectMemberRequestBody2$outboundSchema` instead. */
    AddProjectMemberRequestBody2$.outboundSchema = AddProjectMemberRequestBody2$outboundSchema;
})(AddProjectMemberRequestBody2$ || (AddProjectMemberRequestBody2$ = {}));
export function addProjectMemberRequestBody2ToJSON(addProjectMemberRequestBody2) {
    return JSON.stringify(AddProjectMemberRequestBody2$outboundSchema.parse(addProjectMemberRequestBody2));
}
export function addProjectMemberRequestBody2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => AddProjectMemberRequestBody2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AddProjectMemberRequestBody2' from JSON`);
}
/** @internal */
export const RequestBodyRole$inboundSchema = z.nativeEnum(RequestBodyRole);
/** @internal */
export const RequestBodyRole$outboundSchema = RequestBodyRole$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RequestBodyRole$;
(function (RequestBodyRole$) {
    /** @deprecated use `RequestBodyRole$inboundSchema` instead. */
    RequestBodyRole$.inboundSchema = RequestBodyRole$inboundSchema;
    /** @deprecated use `RequestBodyRole$outboundSchema` instead. */
    RequestBodyRole$.outboundSchema = RequestBodyRole$outboundSchema;
})(RequestBodyRole$ || (RequestBodyRole$ = {}));
/** @internal */
export const AddProjectMemberRequestBody1$inboundSchema = z.object({
    uid: z.string(),
    username: z.string().optional(),
    email: z.string().optional(),
    role: RequestBodyRole$inboundSchema,
});
/** @internal */
export const AddProjectMemberRequestBody1$outboundSchema = z.object({
    uid: z.string(),
    username: z.string().optional(),
    email: z.string().optional(),
    role: RequestBodyRole$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AddProjectMemberRequestBody1$;
(function (AddProjectMemberRequestBody1$) {
    /** @deprecated use `AddProjectMemberRequestBody1$inboundSchema` instead. */
    AddProjectMemberRequestBody1$.inboundSchema = AddProjectMemberRequestBody1$inboundSchema;
    /** @deprecated use `AddProjectMemberRequestBody1$outboundSchema` instead. */
    AddProjectMemberRequestBody1$.outboundSchema = AddProjectMemberRequestBody1$outboundSchema;
})(AddProjectMemberRequestBody1$ || (AddProjectMemberRequestBody1$ = {}));
export function addProjectMemberRequestBody1ToJSON(addProjectMemberRequestBody1) {
    return JSON.stringify(AddProjectMemberRequestBody1$outboundSchema.parse(addProjectMemberRequestBody1));
}
export function addProjectMemberRequestBody1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => AddProjectMemberRequestBody1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AddProjectMemberRequestBody1' from JSON`);
}
/** @internal */
export const AddProjectMemberRequestBody$inboundSchema = z.union([
    z.lazy(() => AddProjectMemberRequestBody1$inboundSchema),
    z.lazy(() => AddProjectMemberRequestBody2$inboundSchema),
    z.lazy(() => AddProjectMemberRequestBody3$inboundSchema),
]);
/** @internal */
export const AddProjectMemberRequestBody$outboundSchema = z.union([
    z.lazy(() => AddProjectMemberRequestBody1$outboundSchema),
    z.lazy(() => AddProjectMemberRequestBody2$outboundSchema),
    z.lazy(() => AddProjectMemberRequestBody3$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AddProjectMemberRequestBody$;
(function (AddProjectMemberRequestBody$) {
    /** @deprecated use `AddProjectMemberRequestBody$inboundSchema` instead. */
    AddProjectMemberRequestBody$.inboundSchema = AddProjectMemberRequestBody$inboundSchema;
    /** @deprecated use `AddProjectMemberRequestBody$outboundSchema` instead. */
    AddProjectMemberRequestBody$.outboundSchema = AddProjectMemberRequestBody$outboundSchema;
})(AddProjectMemberRequestBody$ || (AddProjectMemberRequestBody$ = {}));
export function addProjectMemberRequestBodyToJSON(addProjectMemberRequestBody) {
    return JSON.stringify(AddProjectMemberRequestBody$outboundSchema.parse(addProjectMemberRequestBody));
}
export function addProjectMemberRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AddProjectMemberRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AddProjectMemberRequestBody' from JSON`);
}
/** @internal */
export const AddProjectMemberRequest$inboundSchema = z.object({
    idOrName: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.union([
        z.lazy(() => AddProjectMemberRequestBody1$inboundSchema),
        z.lazy(() => AddProjectMemberRequestBody2$inboundSchema),
        z.lazy(() => AddProjectMemberRequestBody3$inboundSchema),
    ]),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const AddProjectMemberRequest$outboundSchema = z.object({
    idOrName: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.union([
        z.lazy(() => AddProjectMemberRequestBody1$outboundSchema),
        z.lazy(() => AddProjectMemberRequestBody2$outboundSchema),
        z.lazy(() => AddProjectMemberRequestBody3$outboundSchema),
    ]),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AddProjectMemberRequest$;
(function (AddProjectMemberRequest$) {
    /** @deprecated use `AddProjectMemberRequest$inboundSchema` instead. */
    AddProjectMemberRequest$.inboundSchema = AddProjectMemberRequest$inboundSchema;
    /** @deprecated use `AddProjectMemberRequest$outboundSchema` instead. */
    AddProjectMemberRequest$.outboundSchema = AddProjectMemberRequest$outboundSchema;
})(AddProjectMemberRequest$ || (AddProjectMemberRequest$ = {}));
export function addProjectMemberRequestToJSON(addProjectMemberRequest) {
    return JSON.stringify(AddProjectMemberRequest$outboundSchema.parse(addProjectMemberRequest));
}
export function addProjectMemberRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AddProjectMemberRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AddProjectMemberRequest' from JSON`);
}
/** @internal */
export const AddProjectMemberResponseBody$inboundSchema = z.object({
    id: z.string(),
});
/** @internal */
export const AddProjectMemberResponseBody$outboundSchema = z.object({
    id: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AddProjectMemberResponseBody$;
(function (AddProjectMemberResponseBody$) {
    /** @deprecated use `AddProjectMemberResponseBody$inboundSchema` instead. */
    AddProjectMemberResponseBody$.inboundSchema = AddProjectMemberResponseBody$inboundSchema;
    /** @deprecated use `AddProjectMemberResponseBody$outboundSchema` instead. */
    AddProjectMemberResponseBody$.outboundSchema = AddProjectMemberResponseBody$outboundSchema;
})(AddProjectMemberResponseBody$ || (AddProjectMemberResponseBody$ = {}));
export function addProjectMemberResponseBodyToJSON(addProjectMemberResponseBody) {
    return JSON.stringify(AddProjectMemberResponseBody$outboundSchema.parse(addProjectMemberResponseBody));
}
export function addProjectMemberResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AddProjectMemberResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AddProjectMemberResponseBody' from JSON`);
}
//# sourceMappingURL=addprojectmemberop.js.map