import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
/**
 * Subscription period for this billing cycle.
 */
export type SubmitInvoicePeriod = {
    start: Date;
    end: Date;
};
export type SubmitInvoiceItems = {
    /**
     * Partner's resource ID.
     */
    resourceId?: string | undefined;
    /**
     * Partner's billing plan ID.
     */
    billingPlanId: string;
    /**
     * Start and end are only needed if different from the period's start/end.
     */
    start?: Date | undefined;
    /**
     * Start and end are only needed if different from the period's start/end.
     */
    end?: Date | undefined;
    name: string;
    details?: string | undefined;
    /**
     * Currency amount as a decimal string.
     */
    price: string;
    quantity: number;
    units: string;
    /**
     * Currency amount as a decimal string.
     */
    total: string;
};
export type SubmitInvoiceDiscounts = {
    /**
     * Partner's resource ID.
     */
    resourceId?: string | undefined;
    /**
     * Partner's billing plan ID.
     */
    billingPlanId: string;
    /**
     * Start and end are only needed if different from the period's start/end.
     */
    start?: Date | undefined;
    /**
     * Start and end are only needed if different from the period's start/end.
     */
    end?: Date | undefined;
    name: string;
    details?: string | undefined;
    /**
     * Currency amount as a decimal string.
     */
    amount: string;
};
export declare const Result: {
    readonly Paid: "paid";
    readonly Notpaid: "notpaid";
};
export type Result = ClosedEnum<typeof Result>;
/**
 * Test mode
 */
export type Test = {
    validate?: boolean | undefined;
    result?: Result | undefined;
};
export type SubmitInvoiceRequestBody = {
    externalId?: string | undefined;
    /**
     * Invoice date. Must be within the period's start and end.
     */
    invoiceDate: Date;
    /**
     * Additional memo for the invoice.
     */
    memo?: string | undefined;
    /**
     * Subscription period for this billing cycle.
     */
    period: SubmitInvoicePeriod;
    items: Array<SubmitInvoiceItems>;
    discounts?: Array<SubmitInvoiceDiscounts> | undefined;
    /**
     * Test mode
     */
    test?: Test | undefined;
};
export type SubmitInvoiceRequest = {
    integrationConfigurationId: string;
    requestBody: SubmitInvoiceRequestBody;
};
export type SubmitInvoiceResponseBody = {
    invoiceId?: string | undefined;
    test?: boolean | undefined;
    validationErrors?: Array<string> | undefined;
};
/** @internal */
export declare const SubmitInvoicePeriod$inboundSchema: z.ZodType<SubmitInvoicePeriod, z.ZodTypeDef, unknown>;
/** @internal */
export type SubmitInvoicePeriod$Outbound = {
    start: string;
    end: string;
};
/** @internal */
export declare const SubmitInvoicePeriod$outboundSchema: z.ZodType<SubmitInvoicePeriod$Outbound, z.ZodTypeDef, SubmitInvoicePeriod>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SubmitInvoicePeriod$ {
    /** @deprecated use `SubmitInvoicePeriod$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SubmitInvoicePeriod, z.ZodTypeDef, unknown>;
    /** @deprecated use `SubmitInvoicePeriod$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SubmitInvoicePeriod$Outbound, z.ZodTypeDef, SubmitInvoicePeriod>;
    /** @deprecated use `SubmitInvoicePeriod$Outbound` instead. */
    type Outbound = SubmitInvoicePeriod$Outbound;
}
export declare function submitInvoicePeriodToJSON(submitInvoicePeriod: SubmitInvoicePeriod): string;
export declare function submitInvoicePeriodFromJSON(jsonString: string): SafeParseResult<SubmitInvoicePeriod, SDKValidationError>;
/** @internal */
export declare const SubmitInvoiceItems$inboundSchema: z.ZodType<SubmitInvoiceItems, z.ZodTypeDef, unknown>;
/** @internal */
export type SubmitInvoiceItems$Outbound = {
    resourceId?: string | undefined;
    billingPlanId: string;
    start?: string | undefined;
    end?: string | undefined;
    name: string;
    details?: string | undefined;
    price: string;
    quantity: number;
    units: string;
    total: string;
};
/** @internal */
export declare const SubmitInvoiceItems$outboundSchema: z.ZodType<SubmitInvoiceItems$Outbound, z.ZodTypeDef, SubmitInvoiceItems>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SubmitInvoiceItems$ {
    /** @deprecated use `SubmitInvoiceItems$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SubmitInvoiceItems, z.ZodTypeDef, unknown>;
    /** @deprecated use `SubmitInvoiceItems$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SubmitInvoiceItems$Outbound, z.ZodTypeDef, SubmitInvoiceItems>;
    /** @deprecated use `SubmitInvoiceItems$Outbound` instead. */
    type Outbound = SubmitInvoiceItems$Outbound;
}
export declare function submitInvoiceItemsToJSON(submitInvoiceItems: SubmitInvoiceItems): string;
export declare function submitInvoiceItemsFromJSON(jsonString: string): SafeParseResult<SubmitInvoiceItems, SDKValidationError>;
/** @internal */
export declare const SubmitInvoiceDiscounts$inboundSchema: z.ZodType<SubmitInvoiceDiscounts, z.ZodTypeDef, unknown>;
/** @internal */
export type SubmitInvoiceDiscounts$Outbound = {
    resourceId?: string | undefined;
    billingPlanId: string;
    start?: string | undefined;
    end?: string | undefined;
    name: string;
    details?: string | undefined;
    amount: string;
};
/** @internal */
export declare const SubmitInvoiceDiscounts$outboundSchema: z.ZodType<SubmitInvoiceDiscounts$Outbound, z.ZodTypeDef, SubmitInvoiceDiscounts>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SubmitInvoiceDiscounts$ {
    /** @deprecated use `SubmitInvoiceDiscounts$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SubmitInvoiceDiscounts, z.ZodTypeDef, unknown>;
    /** @deprecated use `SubmitInvoiceDiscounts$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SubmitInvoiceDiscounts$Outbound, z.ZodTypeDef, SubmitInvoiceDiscounts>;
    /** @deprecated use `SubmitInvoiceDiscounts$Outbound` instead. */
    type Outbound = SubmitInvoiceDiscounts$Outbound;
}
export declare function submitInvoiceDiscountsToJSON(submitInvoiceDiscounts: SubmitInvoiceDiscounts): string;
export declare function submitInvoiceDiscountsFromJSON(jsonString: string): SafeParseResult<SubmitInvoiceDiscounts, SDKValidationError>;
/** @internal */
export declare const Result$inboundSchema: z.ZodNativeEnum<typeof Result>;
/** @internal */
export declare const Result$outboundSchema: z.ZodNativeEnum<typeof Result>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Result$ {
    /** @deprecated use `Result$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Paid: "paid";
        readonly Notpaid: "notpaid";
    }>;
    /** @deprecated use `Result$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Paid: "paid";
        readonly Notpaid: "notpaid";
    }>;
}
/** @internal */
export declare const Test$inboundSchema: z.ZodType<Test, z.ZodTypeDef, unknown>;
/** @internal */
export type Test$Outbound = {
    validate?: boolean | undefined;
    result?: string | undefined;
};
/** @internal */
export declare const Test$outboundSchema: z.ZodType<Test$Outbound, z.ZodTypeDef, Test>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Test$ {
    /** @deprecated use `Test$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Test, z.ZodTypeDef, unknown>;
    /** @deprecated use `Test$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Test$Outbound, z.ZodTypeDef, Test>;
    /** @deprecated use `Test$Outbound` instead. */
    type Outbound = Test$Outbound;
}
export declare function testToJSON(test: Test): string;
export declare function testFromJSON(jsonString: string): SafeParseResult<Test, SDKValidationError>;
/** @internal */
export declare const SubmitInvoiceRequestBody$inboundSchema: z.ZodType<SubmitInvoiceRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type SubmitInvoiceRequestBody$Outbound = {
    externalId?: string | undefined;
    invoiceDate: string;
    memo?: string | undefined;
    period: SubmitInvoicePeriod$Outbound;
    items: Array<SubmitInvoiceItems$Outbound>;
    discounts?: Array<SubmitInvoiceDiscounts$Outbound> | undefined;
    test?: Test$Outbound | undefined;
};
/** @internal */
export declare const SubmitInvoiceRequestBody$outboundSchema: z.ZodType<SubmitInvoiceRequestBody$Outbound, z.ZodTypeDef, SubmitInvoiceRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SubmitInvoiceRequestBody$ {
    /** @deprecated use `SubmitInvoiceRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SubmitInvoiceRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `SubmitInvoiceRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SubmitInvoiceRequestBody$Outbound, z.ZodTypeDef, SubmitInvoiceRequestBody>;
    /** @deprecated use `SubmitInvoiceRequestBody$Outbound` instead. */
    type Outbound = SubmitInvoiceRequestBody$Outbound;
}
export declare function submitInvoiceRequestBodyToJSON(submitInvoiceRequestBody: SubmitInvoiceRequestBody): string;
export declare function submitInvoiceRequestBodyFromJSON(jsonString: string): SafeParseResult<SubmitInvoiceRequestBody, SDKValidationError>;
/** @internal */
export declare const SubmitInvoiceRequest$inboundSchema: z.ZodType<SubmitInvoiceRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type SubmitInvoiceRequest$Outbound = {
    integrationConfigurationId: string;
    RequestBody: SubmitInvoiceRequestBody$Outbound;
};
/** @internal */
export declare const SubmitInvoiceRequest$outboundSchema: z.ZodType<SubmitInvoiceRequest$Outbound, z.ZodTypeDef, SubmitInvoiceRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SubmitInvoiceRequest$ {
    /** @deprecated use `SubmitInvoiceRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SubmitInvoiceRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `SubmitInvoiceRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SubmitInvoiceRequest$Outbound, z.ZodTypeDef, SubmitInvoiceRequest>;
    /** @deprecated use `SubmitInvoiceRequest$Outbound` instead. */
    type Outbound = SubmitInvoiceRequest$Outbound;
}
export declare function submitInvoiceRequestToJSON(submitInvoiceRequest: SubmitInvoiceRequest): string;
export declare function submitInvoiceRequestFromJSON(jsonString: string): SafeParseResult<SubmitInvoiceRequest, SDKValidationError>;
/** @internal */
export declare const SubmitInvoiceResponseBody$inboundSchema: z.ZodType<SubmitInvoiceResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type SubmitInvoiceResponseBody$Outbound = {
    invoiceId?: string | undefined;
    test?: boolean | undefined;
    validationErrors?: Array<string> | undefined;
};
/** @internal */
export declare const SubmitInvoiceResponseBody$outboundSchema: z.ZodType<SubmitInvoiceResponseBody$Outbound, z.ZodTypeDef, SubmitInvoiceResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SubmitInvoiceResponseBody$ {
    /** @deprecated use `SubmitInvoiceResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SubmitInvoiceResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `SubmitInvoiceResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SubmitInvoiceResponseBody$Outbound, z.ZodTypeDef, SubmitInvoiceResponseBody>;
    /** @deprecated use `SubmitInvoiceResponseBody$Outbound` instead. */
    type Outbound = SubmitInvoiceResponseBody$Outbound;
}
export declare function submitInvoiceResponseBodyToJSON(submitInvoiceResponseBody: SubmitInvoiceResponseBody): string;
export declare function submitInvoiceResponseBodyFromJSON(jsonString: string): SafeParseResult<SubmitInvoiceResponseBody, SDKValidationError>;
//# sourceMappingURL=submitinvoiceop.d.ts.map