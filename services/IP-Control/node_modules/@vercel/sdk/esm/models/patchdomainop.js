/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/** @internal */
export const PatchDomainRequestBody2$inboundSchema = z.object({
    op: z.string().optional(),
    destination: z.string().optional(),
});
/** @internal */
export const PatchDomainRequestBody2$outboundSchema = z.object({
    op: z.string().optional(),
    destination: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PatchDomainRequestBody2$;
(function (PatchDomainRequestBody2$) {
    /** @deprecated use `PatchDomainRequestBody2$inboundSchema` instead. */
    PatchDomainRequestBody2$.inboundSchema = PatchDomainRequestBody2$inboundSchema;
    /** @deprecated use `PatchDomainRequestBody2$outboundSchema` instead. */
    PatchDomainRequestBody2$.outboundSchema = PatchDomainRequestBody2$outboundSchema;
})(PatchDomainRequestBody2$ || (PatchDomainRequestBody2$ = {}));
export function patchDomainRequestBody2ToJSON(patchDomainRequestBody2) {
    return JSON.stringify(PatchDomainRequestBody2$outboundSchema.parse(patchDomainRequestBody2));
}
export function patchDomainRequestBody2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => PatchDomainRequestBody2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PatchDomainRequestBody2' from JSON`);
}
/** @internal */
export const PatchDomainRequestBody1$inboundSchema = z.object({
    op: z.string().optional(),
    renew: z.boolean().optional(),
    customNameservers: z.array(z.string()).optional(),
    zone: z.boolean().optional(),
});
/** @internal */
export const PatchDomainRequestBody1$outboundSchema = z.object({
    op: z.string().optional(),
    renew: z.boolean().optional(),
    customNameservers: z.array(z.string()).optional(),
    zone: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PatchDomainRequestBody1$;
(function (PatchDomainRequestBody1$) {
    /** @deprecated use `PatchDomainRequestBody1$inboundSchema` instead. */
    PatchDomainRequestBody1$.inboundSchema = PatchDomainRequestBody1$inboundSchema;
    /** @deprecated use `PatchDomainRequestBody1$outboundSchema` instead. */
    PatchDomainRequestBody1$.outboundSchema = PatchDomainRequestBody1$outboundSchema;
})(PatchDomainRequestBody1$ || (PatchDomainRequestBody1$ = {}));
export function patchDomainRequestBody1ToJSON(patchDomainRequestBody1) {
    return JSON.stringify(PatchDomainRequestBody1$outboundSchema.parse(patchDomainRequestBody1));
}
export function patchDomainRequestBody1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => PatchDomainRequestBody1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PatchDomainRequestBody1' from JSON`);
}
/** @internal */
export const PatchDomainRequestBody$inboundSchema = z.union([
    z.lazy(() => PatchDomainRequestBody1$inboundSchema),
    z.lazy(() => PatchDomainRequestBody2$inboundSchema),
]);
/** @internal */
export const PatchDomainRequestBody$outboundSchema = z.union([
    z.lazy(() => PatchDomainRequestBody1$outboundSchema),
    z.lazy(() => PatchDomainRequestBody2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PatchDomainRequestBody$;
(function (PatchDomainRequestBody$) {
    /** @deprecated use `PatchDomainRequestBody$inboundSchema` instead. */
    PatchDomainRequestBody$.inboundSchema = PatchDomainRequestBody$inboundSchema;
    /** @deprecated use `PatchDomainRequestBody$outboundSchema` instead. */
    PatchDomainRequestBody$.outboundSchema = PatchDomainRequestBody$outboundSchema;
})(PatchDomainRequestBody$ || (PatchDomainRequestBody$ = {}));
export function patchDomainRequestBodyToJSON(patchDomainRequestBody) {
    return JSON.stringify(PatchDomainRequestBody$outboundSchema.parse(patchDomainRequestBody));
}
export function patchDomainRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PatchDomainRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PatchDomainRequestBody' from JSON`);
}
/** @internal */
export const PatchDomainRequest$inboundSchema = z.object({
    domain: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.union([
        z.lazy(() => PatchDomainRequestBody1$inboundSchema),
        z.lazy(() => PatchDomainRequestBody2$inboundSchema),
    ]),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const PatchDomainRequest$outboundSchema = z.object({
    domain: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.union([
        z.lazy(() => PatchDomainRequestBody1$outboundSchema),
        z.lazy(() => PatchDomainRequestBody2$outboundSchema),
    ]),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PatchDomainRequest$;
(function (PatchDomainRequest$) {
    /** @deprecated use `PatchDomainRequest$inboundSchema` instead. */
    PatchDomainRequest$.inboundSchema = PatchDomainRequest$inboundSchema;
    /** @deprecated use `PatchDomainRequest$outboundSchema` instead. */
    PatchDomainRequest$.outboundSchema = PatchDomainRequest$outboundSchema;
})(PatchDomainRequest$ || (PatchDomainRequest$ = {}));
export function patchDomainRequestToJSON(patchDomainRequest) {
    return JSON.stringify(PatchDomainRequest$outboundSchema.parse(patchDomainRequest));
}
export function patchDomainRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PatchDomainRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PatchDomainRequest' from JSON`);
}
/** @internal */
export const PatchDomainResponseBody3$inboundSchema = z.object({
    renew: z.boolean().optional(),
    customNameservers: z.array(z.string()).optional(),
    zone: z.boolean().optional(),
});
/** @internal */
export const PatchDomainResponseBody3$outboundSchema = z.object({
    renew: z.boolean().optional(),
    customNameservers: z.array(z.string()).optional(),
    zone: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PatchDomainResponseBody3$;
(function (PatchDomainResponseBody3$) {
    /** @deprecated use `PatchDomainResponseBody3$inboundSchema` instead. */
    PatchDomainResponseBody3$.inboundSchema = PatchDomainResponseBody3$inboundSchema;
    /** @deprecated use `PatchDomainResponseBody3$outboundSchema` instead. */
    PatchDomainResponseBody3$.outboundSchema = PatchDomainResponseBody3$outboundSchema;
})(PatchDomainResponseBody3$ || (PatchDomainResponseBody3$ = {}));
export function patchDomainResponseBody3ToJSON(patchDomainResponseBody3) {
    return JSON.stringify(PatchDomainResponseBody3$outboundSchema.parse(patchDomainResponseBody3));
}
export function patchDomainResponseBody3FromJSON(jsonString) {
    return safeParse(jsonString, (x) => PatchDomainResponseBody3$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PatchDomainResponseBody3' from JSON`);
}
/** @internal */
export const PatchDomainResponseBody2$inboundSchema = z.object({
    moved: z.boolean(),
    token: z.string(),
});
/** @internal */
export const PatchDomainResponseBody2$outboundSchema = z.object({
    moved: z.boolean(),
    token: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PatchDomainResponseBody2$;
(function (PatchDomainResponseBody2$) {
    /** @deprecated use `PatchDomainResponseBody2$inboundSchema` instead. */
    PatchDomainResponseBody2$.inboundSchema = PatchDomainResponseBody2$inboundSchema;
    /** @deprecated use `PatchDomainResponseBody2$outboundSchema` instead. */
    PatchDomainResponseBody2$.outboundSchema = PatchDomainResponseBody2$outboundSchema;
})(PatchDomainResponseBody2$ || (PatchDomainResponseBody2$ = {}));
export function patchDomainResponseBody2ToJSON(patchDomainResponseBody2) {
    return JSON.stringify(PatchDomainResponseBody2$outboundSchema.parse(patchDomainResponseBody2));
}
export function patchDomainResponseBody2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => PatchDomainResponseBody2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PatchDomainResponseBody2' from JSON`);
}
/** @internal */
export const PatchDomainResponseBody1$inboundSchema = z.object({
    moved: z.boolean(),
});
/** @internal */
export const PatchDomainResponseBody1$outboundSchema = z.object({
    moved: z.boolean(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PatchDomainResponseBody1$;
(function (PatchDomainResponseBody1$) {
    /** @deprecated use `PatchDomainResponseBody1$inboundSchema` instead. */
    PatchDomainResponseBody1$.inboundSchema = PatchDomainResponseBody1$inboundSchema;
    /** @deprecated use `PatchDomainResponseBody1$outboundSchema` instead. */
    PatchDomainResponseBody1$.outboundSchema = PatchDomainResponseBody1$outboundSchema;
})(PatchDomainResponseBody1$ || (PatchDomainResponseBody1$ = {}));
export function patchDomainResponseBody1ToJSON(patchDomainResponseBody1) {
    return JSON.stringify(PatchDomainResponseBody1$outboundSchema.parse(patchDomainResponseBody1));
}
export function patchDomainResponseBody1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => PatchDomainResponseBody1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PatchDomainResponseBody1' from JSON`);
}
/** @internal */
export const PatchDomainResponseBody$inboundSchema = z.union([
    z.lazy(() => PatchDomainResponseBody2$inboundSchema),
    z.lazy(() => PatchDomainResponseBody1$inboundSchema),
    z.lazy(() => PatchDomainResponseBody3$inboundSchema),
]);
/** @internal */
export const PatchDomainResponseBody$outboundSchema = z.union([
    z.lazy(() => PatchDomainResponseBody2$outboundSchema),
    z.lazy(() => PatchDomainResponseBody1$outboundSchema),
    z.lazy(() => PatchDomainResponseBody3$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PatchDomainResponseBody$;
(function (PatchDomainResponseBody$) {
    /** @deprecated use `PatchDomainResponseBody$inboundSchema` instead. */
    PatchDomainResponseBody$.inboundSchema = PatchDomainResponseBody$inboundSchema;
    /** @deprecated use `PatchDomainResponseBody$outboundSchema` instead. */
    PatchDomainResponseBody$.outboundSchema = PatchDomainResponseBody$outboundSchema;
})(PatchDomainResponseBody$ || (PatchDomainResponseBody$ = {}));
export function patchDomainResponseBodyToJSON(patchDomainResponseBody) {
    return JSON.stringify(PatchDomainResponseBody$outboundSchema.parse(patchDomainResponseBody));
}
export function patchDomainResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PatchDomainResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PatchDomainResponseBody' from JSON`);
}
//# sourceMappingURL=patchdomainop.js.map