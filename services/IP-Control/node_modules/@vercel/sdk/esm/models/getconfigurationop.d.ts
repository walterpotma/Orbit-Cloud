import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type GetConfigurationRequest = {
    /**
     * ID of the configuration to check
     */
    id: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};
/**
 * A string representing the permission for projects. Possible values are `all` or `selected`.
 */
export declare const ProjectSelection: {
    readonly Selected: "selected";
    readonly All: "all";
};
/**
 * A string representing the permission for projects. Possible values are `all` or `selected`.
 */
export type ProjectSelection = ClosedEnum<typeof ProjectSelection>;
export declare const GetConfigurationResponseBodyLevel: {
    readonly Info: "info";
    readonly Warn: "warn";
    readonly Error: "error";
};
export type GetConfigurationResponseBodyLevel = ClosedEnum<typeof GetConfigurationResponseBodyLevel>;
export type ResponseBodyNotification = {
    level: GetConfigurationResponseBodyLevel;
    title: string;
    message?: string | undefined;
    href?: string | undefined;
};
export declare const TransferRequestKind: {
    readonly TransferFromMarketplace: "transfer-from-marketplace";
};
export type TransferRequestKind = ClosedEnum<typeof TransferRequestKind>;
export type TransferRequestRequester = {
    name: string;
    email?: string | undefined;
};
export type TransferRequest2 = {
    kind: TransferRequestKind;
    requestId: string;
    transferId: string;
    requester: TransferRequestRequester;
    createdAt: number;
    expiresAt: number;
    discardedAt?: number | undefined;
    discardedBy?: string | undefined;
    approvedAt?: number | undefined;
    approvedBy?: string | undefined;
    authorizationId?: string | undefined;
};
export declare const Kind: {
    readonly TransferToMarketplace: "transfer-to-marketplace";
};
export type Kind = ClosedEnum<typeof Kind>;
export declare const TransferRequestType: {
    readonly Subscription: "subscription";
    readonly Prepayment: "prepayment";
};
export type TransferRequestType = ClosedEnum<typeof TransferRequestType>;
export declare const TransferRequestScope: {
    readonly Installation: "installation";
    readonly Resource: "resource";
};
export type TransferRequestScope = ClosedEnum<typeof TransferRequestScope>;
export type TransferRequestBillingPlan = {
    id: string;
    type: TransferRequestType;
    scope?: TransferRequestScope | undefined;
    name: string;
    description: string;
    paymentMethodRequired?: boolean | undefined;
    preauthorizationAmount?: number | undefined;
};
export type Requester = {
    name: string;
    email?: string | undefined;
};
export type TransferRequest1 = {
    kind: Kind;
    metadata?: {
        [k: string]: any;
    } | undefined;
    billingPlan?: TransferRequestBillingPlan | undefined;
    requestId: string;
    transferId: string;
    requester: Requester;
    createdAt: number;
    expiresAt: number;
    discardedAt?: number | undefined;
    discardedBy?: string | undefined;
    approvedAt?: number | undefined;
    approvedBy?: string | undefined;
    authorizationId?: string | undefined;
};
export type TransferRequest = TransferRequest1 | TransferRequest2;
/**
 * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
 */
export declare const GetConfigurationResponseBodyIntegrationsSource: {
    readonly Marketplace: "marketplace";
    readonly DeployButton: "deploy-button";
    readonly External: "external";
    readonly V0: "v0";
    readonly ResourceClaims: "resource-claims";
};
/**
 * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
 */
export type GetConfigurationResponseBodyIntegrationsSource = ClosedEnum<typeof GetConfigurationResponseBodyIntegrationsSource>;
export declare const GetConfigurationResponseBodyIntegrationsType: {
    readonly IntegrationConfiguration: "integration-configuration";
};
export type GetConfigurationResponseBodyIntegrationsType = ClosedEnum<typeof GetConfigurationResponseBodyIntegrationsType>;
export declare const GetConfigurationResponseBodyIntegrationsDisabledReason: {
    readonly DisabledByOwner: "disabled-by-owner";
    readonly FeatureNotAvailable: "feature-not-available";
    readonly DisabledByAdmin: "disabled-by-admin";
    readonly OriginalOwnerLeftTheTeam: "original-owner-left-the-team";
    readonly AccountPlanDowngrade: "account-plan-downgrade";
    readonly OriginalOwnerRoleDowngraded: "original-owner-role-downgraded";
};
export type GetConfigurationResponseBodyIntegrationsDisabledReason = ClosedEnum<typeof GetConfigurationResponseBodyIntegrationsDisabledReason>;
/**
 * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
 */
export declare const GetConfigurationResponseBodyIntegrationsInstallationType: {
    readonly Marketplace: "marketplace";
    readonly External: "external";
};
/**
 * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
 */
export type GetConfigurationResponseBodyIntegrationsInstallationType = ClosedEnum<typeof GetConfigurationResponseBodyIntegrationsInstallationType>;
export type GetConfigurationResponseBody2 = {
    /**
     * A string representing the permission for projects. Possible values are `all` or `selected`.
     */
    projectSelection: ProjectSelection;
    notification: ResponseBodyNotification;
    transferRequest: TransferRequest1 | TransferRequest2;
    /**
     * When a configuration is limited to access certain projects, this will contain each of the project ID it is allowed to access. If it is not defined, the configuration has full access.
     */
    projects?: Array<string> | undefined;
    /**
     * A timestamp that tells you when the configuration was installed successfully
     */
    completedAt?: number | undefined;
    /**
     * A timestamp that tells you when the configuration was created
     */
    createdAt: number;
    /**
     * The unique identifier of the configuration
     */
    id: string;
    /**
     * The unique identifier of the app the configuration was created for
     */
    integrationId: string;
    /**
     * The user or team ID that owns the configuration
     */
    ownerId: string;
    /**
     * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
     */
    source?: GetConfigurationResponseBodyIntegrationsSource | undefined;
    /**
     * The slug of the integration the configuration is created for.
     */
    slug: string;
    /**
     * When the configuration was created for a team, this will show the ID of the team.
     */
    teamId?: string | null | undefined;
    type: GetConfigurationResponseBodyIntegrationsType;
    /**
     * A timestamp that tells you when the configuration was updated.
     */
    updatedAt: number;
    /**
     * The ID of the user that created the configuration.
     */
    userId: string;
    /**
     * The resources that are allowed to be accessed by the configuration.
     */
    scopes: Array<string>;
    /**
     * A timestamp that tells you when the configuration was disabled. Note: Configurations can be disabled when the associated user loses access to a team. They do not function during this time until the configuration is 'transferred', meaning the associated user is changed to one with access to the team.
     */
    disabledAt?: number | undefined;
    /**
     * A timestamp that tells you when the configuration was deleted.
     */
    deletedAt?: number | null | undefined;
    /**
     * A timestamp that tells you when the configuration deletion has been started for cases when the deletion needs to be settled/approved by partners, such as when marketplace invoices have been paid.
     */
    deleteRequestedAt?: number | null | undefined;
    disabledReason?: GetConfigurationResponseBodyIntegrationsDisabledReason | undefined;
    /**
     * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
     */
    installationType?: GetConfigurationResponseBodyIntegrationsInstallationType | undefined;
    canConfigureOpenTelemetry?: boolean | undefined;
};
/**
 * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
 */
export declare const GetConfigurationResponseBodySource: {
    readonly Marketplace: "marketplace";
    readonly DeployButton: "deploy-button";
    readonly External: "external";
    readonly V0: "v0";
    readonly ResourceClaims: "resource-claims";
};
/**
 * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
 */
export type GetConfigurationResponseBodySource = ClosedEnum<typeof GetConfigurationResponseBodySource>;
export declare const GetConfigurationResponseBodyType: {
    readonly IntegrationConfiguration: "integration-configuration";
};
export type GetConfigurationResponseBodyType = ClosedEnum<typeof GetConfigurationResponseBodyType>;
export declare const GetConfigurationResponseBodyDisabledReason: {
    readonly DisabledByOwner: "disabled-by-owner";
    readonly FeatureNotAvailable: "feature-not-available";
    readonly DisabledByAdmin: "disabled-by-admin";
    readonly OriginalOwnerLeftTheTeam: "original-owner-left-the-team";
    readonly AccountPlanDowngrade: "account-plan-downgrade";
    readonly OriginalOwnerRoleDowngraded: "original-owner-role-downgraded";
};
export type GetConfigurationResponseBodyDisabledReason = ClosedEnum<typeof GetConfigurationResponseBodyDisabledReason>;
/**
 * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
 */
export declare const GetConfigurationResponseBodyInstallationType: {
    readonly Marketplace: "marketplace";
    readonly External: "external";
};
/**
 * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
 */
export type GetConfigurationResponseBodyInstallationType = ClosedEnum<typeof GetConfigurationResponseBodyInstallationType>;
/**
 * The configuration with the provided id
 */
export type GetConfigurationResponseBody1 = {
    /**
     * A timestamp that tells you when the configuration was installed successfully
     */
    completedAt?: number | undefined;
    /**
     * A timestamp that tells you when the configuration was created
     */
    createdAt: number;
    /**
     * The unique identifier of the configuration
     */
    id: string;
    /**
     * The unique identifier of the app the configuration was created for
     */
    integrationId: string;
    /**
     * The user or team ID that owns the configuration
     */
    ownerId: string;
    /**
     * When a configuration is limited to access certain projects, this will contain each of the project ID it is allowed to access. If it is not defined, the configuration has full access.
     */
    projects?: Array<string> | undefined;
    /**
     * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
     */
    source?: GetConfigurationResponseBodySource | undefined;
    /**
     * The slug of the integration the configuration is created for.
     */
    slug: string;
    /**
     * When the configuration was created for a team, this will show the ID of the team.
     */
    teamId?: string | null | undefined;
    type: GetConfigurationResponseBodyType;
    /**
     * A timestamp that tells you when the configuration was updated.
     */
    updatedAt: number;
    /**
     * The ID of the user that created the configuration.
     */
    userId: string;
    /**
     * The resources that are allowed to be accessed by the configuration.
     */
    scopes: Array<string>;
    /**
     * A timestamp that tells you when the configuration was disabled. Note: Configurations can be disabled when the associated user loses access to a team. They do not function during this time until the configuration is 'transferred', meaning the associated user is changed to one with access to the team.
     */
    disabledAt?: number | undefined;
    /**
     * A timestamp that tells you when the configuration was deleted.
     */
    deletedAt?: number | null | undefined;
    /**
     * A timestamp that tells you when the configuration deletion has been started for cases when the deletion needs to be settled/approved by partners, such as when marketplace invoices have been paid.
     */
    deleteRequestedAt?: number | null | undefined;
    disabledReason?: GetConfigurationResponseBodyDisabledReason | undefined;
    /**
     * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
     */
    installationType?: GetConfigurationResponseBodyInstallationType | undefined;
};
/**
 * The configuration with the provided id
 */
export type GetConfigurationResponseBody = GetConfigurationResponseBody2 | GetConfigurationResponseBody1;
/** @internal */
export declare const GetConfigurationRequest$inboundSchema: z.ZodType<GetConfigurationRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetConfigurationRequest$Outbound = {
    id: string;
    teamId?: string | undefined;
    slug?: string | undefined;
};
/** @internal */
export declare const GetConfigurationRequest$outboundSchema: z.ZodType<GetConfigurationRequest$Outbound, z.ZodTypeDef, GetConfigurationRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetConfigurationRequest$ {
    /** @deprecated use `GetConfigurationRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetConfigurationRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetConfigurationRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetConfigurationRequest$Outbound, z.ZodTypeDef, GetConfigurationRequest>;
    /** @deprecated use `GetConfigurationRequest$Outbound` instead. */
    type Outbound = GetConfigurationRequest$Outbound;
}
export declare function getConfigurationRequestToJSON(getConfigurationRequest: GetConfigurationRequest): string;
export declare function getConfigurationRequestFromJSON(jsonString: string): SafeParseResult<GetConfigurationRequest, SDKValidationError>;
/** @internal */
export declare const ProjectSelection$inboundSchema: z.ZodNativeEnum<typeof ProjectSelection>;
/** @internal */
export declare const ProjectSelection$outboundSchema: z.ZodNativeEnum<typeof ProjectSelection>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ProjectSelection$ {
    /** @deprecated use `ProjectSelection$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Selected: "selected";
        readonly All: "all";
    }>;
    /** @deprecated use `ProjectSelection$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Selected: "selected";
        readonly All: "all";
    }>;
}
/** @internal */
export declare const GetConfigurationResponseBodyLevel$inboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodyLevel>;
/** @internal */
export declare const GetConfigurationResponseBodyLevel$outboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodyLevel>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetConfigurationResponseBodyLevel$ {
    /** @deprecated use `GetConfigurationResponseBodyLevel$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Info: "info";
        readonly Warn: "warn";
        readonly Error: "error";
    }>;
    /** @deprecated use `GetConfigurationResponseBodyLevel$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Info: "info";
        readonly Warn: "warn";
        readonly Error: "error";
    }>;
}
/** @internal */
export declare const ResponseBodyNotification$inboundSchema: z.ZodType<ResponseBodyNotification, z.ZodTypeDef, unknown>;
/** @internal */
export type ResponseBodyNotification$Outbound = {
    level: string;
    title: string;
    message?: string | undefined;
    href?: string | undefined;
};
/** @internal */
export declare const ResponseBodyNotification$outboundSchema: z.ZodType<ResponseBodyNotification$Outbound, z.ZodTypeDef, ResponseBodyNotification>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyNotification$ {
    /** @deprecated use `ResponseBodyNotification$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseBodyNotification, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseBodyNotification$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseBodyNotification$Outbound, z.ZodTypeDef, ResponseBodyNotification>;
    /** @deprecated use `ResponseBodyNotification$Outbound` instead. */
    type Outbound = ResponseBodyNotification$Outbound;
}
export declare function responseBodyNotificationToJSON(responseBodyNotification: ResponseBodyNotification): string;
export declare function responseBodyNotificationFromJSON(jsonString: string): SafeParseResult<ResponseBodyNotification, SDKValidationError>;
/** @internal */
export declare const TransferRequestKind$inboundSchema: z.ZodNativeEnum<typeof TransferRequestKind>;
/** @internal */
export declare const TransferRequestKind$outboundSchema: z.ZodNativeEnum<typeof TransferRequestKind>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TransferRequestKind$ {
    /** @deprecated use `TransferRequestKind$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly TransferFromMarketplace: "transfer-from-marketplace";
    }>;
    /** @deprecated use `TransferRequestKind$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly TransferFromMarketplace: "transfer-from-marketplace";
    }>;
}
/** @internal */
export declare const TransferRequestRequester$inboundSchema: z.ZodType<TransferRequestRequester, z.ZodTypeDef, unknown>;
/** @internal */
export type TransferRequestRequester$Outbound = {
    name: string;
    email?: string | undefined;
};
/** @internal */
export declare const TransferRequestRequester$outboundSchema: z.ZodType<TransferRequestRequester$Outbound, z.ZodTypeDef, TransferRequestRequester>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TransferRequestRequester$ {
    /** @deprecated use `TransferRequestRequester$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TransferRequestRequester, z.ZodTypeDef, unknown>;
    /** @deprecated use `TransferRequestRequester$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TransferRequestRequester$Outbound, z.ZodTypeDef, TransferRequestRequester>;
    /** @deprecated use `TransferRequestRequester$Outbound` instead. */
    type Outbound = TransferRequestRequester$Outbound;
}
export declare function transferRequestRequesterToJSON(transferRequestRequester: TransferRequestRequester): string;
export declare function transferRequestRequesterFromJSON(jsonString: string): SafeParseResult<TransferRequestRequester, SDKValidationError>;
/** @internal */
export declare const TransferRequest2$inboundSchema: z.ZodType<TransferRequest2, z.ZodTypeDef, unknown>;
/** @internal */
export type TransferRequest2$Outbound = {
    kind: string;
    requestId: string;
    transferId: string;
    requester: TransferRequestRequester$Outbound;
    createdAt: number;
    expiresAt: number;
    discardedAt?: number | undefined;
    discardedBy?: string | undefined;
    approvedAt?: number | undefined;
    approvedBy?: string | undefined;
    authorizationId?: string | undefined;
};
/** @internal */
export declare const TransferRequest2$outboundSchema: z.ZodType<TransferRequest2$Outbound, z.ZodTypeDef, TransferRequest2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TransferRequest2$ {
    /** @deprecated use `TransferRequest2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TransferRequest2, z.ZodTypeDef, unknown>;
    /** @deprecated use `TransferRequest2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TransferRequest2$Outbound, z.ZodTypeDef, TransferRequest2>;
    /** @deprecated use `TransferRequest2$Outbound` instead. */
    type Outbound = TransferRequest2$Outbound;
}
export declare function transferRequest2ToJSON(transferRequest2: TransferRequest2): string;
export declare function transferRequest2FromJSON(jsonString: string): SafeParseResult<TransferRequest2, SDKValidationError>;
/** @internal */
export declare const Kind$inboundSchema: z.ZodNativeEnum<typeof Kind>;
/** @internal */
export declare const Kind$outboundSchema: z.ZodNativeEnum<typeof Kind>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Kind$ {
    /** @deprecated use `Kind$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly TransferToMarketplace: "transfer-to-marketplace";
    }>;
    /** @deprecated use `Kind$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly TransferToMarketplace: "transfer-to-marketplace";
    }>;
}
/** @internal */
export declare const TransferRequestType$inboundSchema: z.ZodNativeEnum<typeof TransferRequestType>;
/** @internal */
export declare const TransferRequestType$outboundSchema: z.ZodNativeEnum<typeof TransferRequestType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TransferRequestType$ {
    /** @deprecated use `TransferRequestType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Subscription: "subscription";
        readonly Prepayment: "prepayment";
    }>;
    /** @deprecated use `TransferRequestType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Subscription: "subscription";
        readonly Prepayment: "prepayment";
    }>;
}
/** @internal */
export declare const TransferRequestScope$inboundSchema: z.ZodNativeEnum<typeof TransferRequestScope>;
/** @internal */
export declare const TransferRequestScope$outboundSchema: z.ZodNativeEnum<typeof TransferRequestScope>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TransferRequestScope$ {
    /** @deprecated use `TransferRequestScope$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Installation: "installation";
        readonly Resource: "resource";
    }>;
    /** @deprecated use `TransferRequestScope$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Installation: "installation";
        readonly Resource: "resource";
    }>;
}
/** @internal */
export declare const TransferRequestBillingPlan$inboundSchema: z.ZodType<TransferRequestBillingPlan, z.ZodTypeDef, unknown>;
/** @internal */
export type TransferRequestBillingPlan$Outbound = {
    id: string;
    type: string;
    scope?: string | undefined;
    name: string;
    description: string;
    paymentMethodRequired?: boolean | undefined;
    preauthorizationAmount?: number | undefined;
};
/** @internal */
export declare const TransferRequestBillingPlan$outboundSchema: z.ZodType<TransferRequestBillingPlan$Outbound, z.ZodTypeDef, TransferRequestBillingPlan>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TransferRequestBillingPlan$ {
    /** @deprecated use `TransferRequestBillingPlan$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TransferRequestBillingPlan, z.ZodTypeDef, unknown>;
    /** @deprecated use `TransferRequestBillingPlan$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TransferRequestBillingPlan$Outbound, z.ZodTypeDef, TransferRequestBillingPlan>;
    /** @deprecated use `TransferRequestBillingPlan$Outbound` instead. */
    type Outbound = TransferRequestBillingPlan$Outbound;
}
export declare function transferRequestBillingPlanToJSON(transferRequestBillingPlan: TransferRequestBillingPlan): string;
export declare function transferRequestBillingPlanFromJSON(jsonString: string): SafeParseResult<TransferRequestBillingPlan, SDKValidationError>;
/** @internal */
export declare const Requester$inboundSchema: z.ZodType<Requester, z.ZodTypeDef, unknown>;
/** @internal */
export type Requester$Outbound = {
    name: string;
    email?: string | undefined;
};
/** @internal */
export declare const Requester$outboundSchema: z.ZodType<Requester$Outbound, z.ZodTypeDef, Requester>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Requester$ {
    /** @deprecated use `Requester$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Requester, z.ZodTypeDef, unknown>;
    /** @deprecated use `Requester$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Requester$Outbound, z.ZodTypeDef, Requester>;
    /** @deprecated use `Requester$Outbound` instead. */
    type Outbound = Requester$Outbound;
}
export declare function requesterToJSON(requester: Requester): string;
export declare function requesterFromJSON(jsonString: string): SafeParseResult<Requester, SDKValidationError>;
/** @internal */
export declare const TransferRequest1$inboundSchema: z.ZodType<TransferRequest1, z.ZodTypeDef, unknown>;
/** @internal */
export type TransferRequest1$Outbound = {
    kind: string;
    metadata?: {
        [k: string]: any;
    } | undefined;
    billingPlan?: TransferRequestBillingPlan$Outbound | undefined;
    requestId: string;
    transferId: string;
    requester: Requester$Outbound;
    createdAt: number;
    expiresAt: number;
    discardedAt?: number | undefined;
    discardedBy?: string | undefined;
    approvedAt?: number | undefined;
    approvedBy?: string | undefined;
    authorizationId?: string | undefined;
};
/** @internal */
export declare const TransferRequest1$outboundSchema: z.ZodType<TransferRequest1$Outbound, z.ZodTypeDef, TransferRequest1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TransferRequest1$ {
    /** @deprecated use `TransferRequest1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TransferRequest1, z.ZodTypeDef, unknown>;
    /** @deprecated use `TransferRequest1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TransferRequest1$Outbound, z.ZodTypeDef, TransferRequest1>;
    /** @deprecated use `TransferRequest1$Outbound` instead. */
    type Outbound = TransferRequest1$Outbound;
}
export declare function transferRequest1ToJSON(transferRequest1: TransferRequest1): string;
export declare function transferRequest1FromJSON(jsonString: string): SafeParseResult<TransferRequest1, SDKValidationError>;
/** @internal */
export declare const TransferRequest$inboundSchema: z.ZodType<TransferRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type TransferRequest$Outbound = TransferRequest1$Outbound | TransferRequest2$Outbound;
/** @internal */
export declare const TransferRequest$outboundSchema: z.ZodType<TransferRequest$Outbound, z.ZodTypeDef, TransferRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TransferRequest$ {
    /** @deprecated use `TransferRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TransferRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `TransferRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TransferRequest$Outbound, z.ZodTypeDef, TransferRequest>;
    /** @deprecated use `TransferRequest$Outbound` instead. */
    type Outbound = TransferRequest$Outbound;
}
export declare function transferRequestToJSON(transferRequest: TransferRequest): string;
export declare function transferRequestFromJSON(jsonString: string): SafeParseResult<TransferRequest, SDKValidationError>;
/** @internal */
export declare const GetConfigurationResponseBodyIntegrationsSource$inboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodyIntegrationsSource>;
/** @internal */
export declare const GetConfigurationResponseBodyIntegrationsSource$outboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodyIntegrationsSource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetConfigurationResponseBodyIntegrationsSource$ {
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsSource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Marketplace: "marketplace";
        readonly DeployButton: "deploy-button";
        readonly External: "external";
        readonly V0: "v0";
        readonly ResourceClaims: "resource-claims";
    }>;
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsSource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Marketplace: "marketplace";
        readonly DeployButton: "deploy-button";
        readonly External: "external";
        readonly V0: "v0";
        readonly ResourceClaims: "resource-claims";
    }>;
}
/** @internal */
export declare const GetConfigurationResponseBodyIntegrationsType$inboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodyIntegrationsType>;
/** @internal */
export declare const GetConfigurationResponseBodyIntegrationsType$outboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodyIntegrationsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetConfigurationResponseBodyIntegrationsType$ {
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly IntegrationConfiguration: "integration-configuration";
    }>;
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly IntegrationConfiguration: "integration-configuration";
    }>;
}
/** @internal */
export declare const GetConfigurationResponseBodyIntegrationsDisabledReason$inboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodyIntegrationsDisabledReason>;
/** @internal */
export declare const GetConfigurationResponseBodyIntegrationsDisabledReason$outboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodyIntegrationsDisabledReason>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetConfigurationResponseBodyIntegrationsDisabledReason$ {
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsDisabledReason$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly DisabledByOwner: "disabled-by-owner";
        readonly FeatureNotAvailable: "feature-not-available";
        readonly DisabledByAdmin: "disabled-by-admin";
        readonly OriginalOwnerLeftTheTeam: "original-owner-left-the-team";
        readonly AccountPlanDowngrade: "account-plan-downgrade";
        readonly OriginalOwnerRoleDowngraded: "original-owner-role-downgraded";
    }>;
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsDisabledReason$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly DisabledByOwner: "disabled-by-owner";
        readonly FeatureNotAvailable: "feature-not-available";
        readonly DisabledByAdmin: "disabled-by-admin";
        readonly OriginalOwnerLeftTheTeam: "original-owner-left-the-team";
        readonly AccountPlanDowngrade: "account-plan-downgrade";
        readonly OriginalOwnerRoleDowngraded: "original-owner-role-downgraded";
    }>;
}
/** @internal */
export declare const GetConfigurationResponseBodyIntegrationsInstallationType$inboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodyIntegrationsInstallationType>;
/** @internal */
export declare const GetConfigurationResponseBodyIntegrationsInstallationType$outboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodyIntegrationsInstallationType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetConfigurationResponseBodyIntegrationsInstallationType$ {
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsInstallationType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Marketplace: "marketplace";
        readonly External: "external";
    }>;
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsInstallationType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Marketplace: "marketplace";
        readonly External: "external";
    }>;
}
/** @internal */
export declare const GetConfigurationResponseBody2$inboundSchema: z.ZodType<GetConfigurationResponseBody2, z.ZodTypeDef, unknown>;
/** @internal */
export type GetConfigurationResponseBody2$Outbound = {
    projectSelection: string;
    notification: ResponseBodyNotification$Outbound;
    transferRequest: TransferRequest1$Outbound | TransferRequest2$Outbound;
    projects?: Array<string> | undefined;
    completedAt?: number | undefined;
    createdAt: number;
    id: string;
    integrationId: string;
    ownerId: string;
    source?: string | undefined;
    slug: string;
    teamId?: string | null | undefined;
    type: string;
    updatedAt: number;
    userId: string;
    scopes: Array<string>;
    disabledAt?: number | undefined;
    deletedAt?: number | null | undefined;
    deleteRequestedAt?: number | null | undefined;
    disabledReason?: string | undefined;
    installationType?: string | undefined;
    canConfigureOpenTelemetry?: boolean | undefined;
};
/** @internal */
export declare const GetConfigurationResponseBody2$outboundSchema: z.ZodType<GetConfigurationResponseBody2$Outbound, z.ZodTypeDef, GetConfigurationResponseBody2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetConfigurationResponseBody2$ {
    /** @deprecated use `GetConfigurationResponseBody2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetConfigurationResponseBody2, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetConfigurationResponseBody2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetConfigurationResponseBody2$Outbound, z.ZodTypeDef, GetConfigurationResponseBody2>;
    /** @deprecated use `GetConfigurationResponseBody2$Outbound` instead. */
    type Outbound = GetConfigurationResponseBody2$Outbound;
}
export declare function getConfigurationResponseBody2ToJSON(getConfigurationResponseBody2: GetConfigurationResponseBody2): string;
export declare function getConfigurationResponseBody2FromJSON(jsonString: string): SafeParseResult<GetConfigurationResponseBody2, SDKValidationError>;
/** @internal */
export declare const GetConfigurationResponseBodySource$inboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodySource>;
/** @internal */
export declare const GetConfigurationResponseBodySource$outboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodySource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetConfigurationResponseBodySource$ {
    /** @deprecated use `GetConfigurationResponseBodySource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Marketplace: "marketplace";
        readonly DeployButton: "deploy-button";
        readonly External: "external";
        readonly V0: "v0";
        readonly ResourceClaims: "resource-claims";
    }>;
    /** @deprecated use `GetConfigurationResponseBodySource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Marketplace: "marketplace";
        readonly DeployButton: "deploy-button";
        readonly External: "external";
        readonly V0: "v0";
        readonly ResourceClaims: "resource-claims";
    }>;
}
/** @internal */
export declare const GetConfigurationResponseBodyType$inboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodyType>;
/** @internal */
export declare const GetConfigurationResponseBodyType$outboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodyType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetConfigurationResponseBodyType$ {
    /** @deprecated use `GetConfigurationResponseBodyType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly IntegrationConfiguration: "integration-configuration";
    }>;
    /** @deprecated use `GetConfigurationResponseBodyType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly IntegrationConfiguration: "integration-configuration";
    }>;
}
/** @internal */
export declare const GetConfigurationResponseBodyDisabledReason$inboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodyDisabledReason>;
/** @internal */
export declare const GetConfigurationResponseBodyDisabledReason$outboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodyDisabledReason>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetConfigurationResponseBodyDisabledReason$ {
    /** @deprecated use `GetConfigurationResponseBodyDisabledReason$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly DisabledByOwner: "disabled-by-owner";
        readonly FeatureNotAvailable: "feature-not-available";
        readonly DisabledByAdmin: "disabled-by-admin";
        readonly OriginalOwnerLeftTheTeam: "original-owner-left-the-team";
        readonly AccountPlanDowngrade: "account-plan-downgrade";
        readonly OriginalOwnerRoleDowngraded: "original-owner-role-downgraded";
    }>;
    /** @deprecated use `GetConfigurationResponseBodyDisabledReason$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly DisabledByOwner: "disabled-by-owner";
        readonly FeatureNotAvailable: "feature-not-available";
        readonly DisabledByAdmin: "disabled-by-admin";
        readonly OriginalOwnerLeftTheTeam: "original-owner-left-the-team";
        readonly AccountPlanDowngrade: "account-plan-downgrade";
        readonly OriginalOwnerRoleDowngraded: "original-owner-role-downgraded";
    }>;
}
/** @internal */
export declare const GetConfigurationResponseBodyInstallationType$inboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodyInstallationType>;
/** @internal */
export declare const GetConfigurationResponseBodyInstallationType$outboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodyInstallationType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetConfigurationResponseBodyInstallationType$ {
    /** @deprecated use `GetConfigurationResponseBodyInstallationType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Marketplace: "marketplace";
        readonly External: "external";
    }>;
    /** @deprecated use `GetConfigurationResponseBodyInstallationType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Marketplace: "marketplace";
        readonly External: "external";
    }>;
}
/** @internal */
export declare const GetConfigurationResponseBody1$inboundSchema: z.ZodType<GetConfigurationResponseBody1, z.ZodTypeDef, unknown>;
/** @internal */
export type GetConfigurationResponseBody1$Outbound = {
    completedAt?: number | undefined;
    createdAt: number;
    id: string;
    integrationId: string;
    ownerId: string;
    projects?: Array<string> | undefined;
    source?: string | undefined;
    slug: string;
    teamId?: string | null | undefined;
    type: string;
    updatedAt: number;
    userId: string;
    scopes: Array<string>;
    disabledAt?: number | undefined;
    deletedAt?: number | null | undefined;
    deleteRequestedAt?: number | null | undefined;
    disabledReason?: string | undefined;
    installationType?: string | undefined;
};
/** @internal */
export declare const GetConfigurationResponseBody1$outboundSchema: z.ZodType<GetConfigurationResponseBody1$Outbound, z.ZodTypeDef, GetConfigurationResponseBody1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetConfigurationResponseBody1$ {
    /** @deprecated use `GetConfigurationResponseBody1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetConfigurationResponseBody1, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetConfigurationResponseBody1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetConfigurationResponseBody1$Outbound, z.ZodTypeDef, GetConfigurationResponseBody1>;
    /** @deprecated use `GetConfigurationResponseBody1$Outbound` instead. */
    type Outbound = GetConfigurationResponseBody1$Outbound;
}
export declare function getConfigurationResponseBody1ToJSON(getConfigurationResponseBody1: GetConfigurationResponseBody1): string;
export declare function getConfigurationResponseBody1FromJSON(jsonString: string): SafeParseResult<GetConfigurationResponseBody1, SDKValidationError>;
/** @internal */
export declare const GetConfigurationResponseBody$inboundSchema: z.ZodType<GetConfigurationResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type GetConfigurationResponseBody$Outbound = GetConfigurationResponseBody2$Outbound | GetConfigurationResponseBody1$Outbound;
/** @internal */
export declare const GetConfigurationResponseBody$outboundSchema: z.ZodType<GetConfigurationResponseBody$Outbound, z.ZodTypeDef, GetConfigurationResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetConfigurationResponseBody$ {
    /** @deprecated use `GetConfigurationResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetConfigurationResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetConfigurationResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetConfigurationResponseBody$Outbound, z.ZodTypeDef, GetConfigurationResponseBody>;
    /** @deprecated use `GetConfigurationResponseBody$Outbound` instead. */
    type Outbound = GetConfigurationResponseBody$Outbound;
}
export declare function getConfigurationResponseBodyToJSON(getConfigurationResponseBody: GetConfigurationResponseBody): string;
export declare function getConfigurationResponseBodyFromJSON(jsonString: string): SafeParseResult<GetConfigurationResponseBody, SDKValidationError>;
//# sourceMappingURL=getconfigurationop.d.ts.map