import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type GetV9ProjectsIdOrNameCustomEnvironmentsRequest = {
    /**
     * The unique project identifier or the project name
     */
    idOrName: string;
    /**
     * Fetch custom environments for a specific git branch
     */
    gitBranch?: string | undefined;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};
/**
 * The maximum number of custom environments allowed either by the team's plan type or a custom override.
 */
export type AccountLimit = {
    total: number;
};
/**
 * The type of environment (production, preview, or development)
 */
export declare const GetV9ProjectsIdOrNameCustomEnvironmentsType: {
    readonly Preview: "preview";
    readonly Production: "production";
    readonly Development: "development";
};
/**
 * The type of environment (production, preview, or development)
 */
export type GetV9ProjectsIdOrNameCustomEnvironmentsType = ClosedEnum<typeof GetV9ProjectsIdOrNameCustomEnvironmentsType>;
/**
 * The type of matching to perform
 */
export declare const GetV9ProjectsIdOrNameCustomEnvironmentsEnvironmentType: {
    readonly EndsWith: "endsWith";
    readonly StartsWith: "startsWith";
    readonly Equals: "equals";
};
/**
 * The type of matching to perform
 */
export type GetV9ProjectsIdOrNameCustomEnvironmentsEnvironmentType = ClosedEnum<typeof GetV9ProjectsIdOrNameCustomEnvironmentsEnvironmentType>;
/**
 * Configuration for matching git branches to this environment
 */
export type GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher = {
    /**
     * The type of matching to perform
     */
    type: GetV9ProjectsIdOrNameCustomEnvironmentsEnvironmentType;
    /**
     * The pattern to match against branch names
     */
    pattern: string;
};
/**
 * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
 */
export type GetV9ProjectsIdOrNameCustomEnvironmentsVerification = {
    type: string;
    domain: string;
    value: string;
    reason: string;
};
/**
 * List of domains associated with this environment
 */
export type GetV9ProjectsIdOrNameCustomEnvironmentsDomains = {
    name: string;
    apexName: string;
    projectId: string;
    redirect?: string | null | undefined;
    redirectStatusCode?: number | null | undefined;
    gitBranch?: string | null | undefined;
    customEnvironmentId?: string | null | undefined;
    updatedAt?: number | undefined;
    createdAt?: number | undefined;
    /**
     * `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.
     */
    verified: boolean;
    /**
     * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
     */
    verification?: Array<GetV9ProjectsIdOrNameCustomEnvironmentsVerification> | undefined;
};
export type GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments = {
    /**
     * Unique identifier for the custom environment (format: env_*)
     */
    id: string;
    /**
     * URL-friendly name of the environment
     */
    slug: string;
    /**
     * The type of environment (production, preview, or development)
     */
    type: GetV9ProjectsIdOrNameCustomEnvironmentsType;
    /**
     * Optional description of the environment's purpose
     */
    description?: string | undefined;
    /**
     * Configuration for matching git branches to this environment
     */
    branchMatcher?: GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher | undefined;
    /**
     * List of domains associated with this environment
     */
    domains?: Array<GetV9ProjectsIdOrNameCustomEnvironmentsDomains> | undefined;
    /**
     * List of aliases for the current deployment
     */
    currentDeploymentAliases?: Array<string> | undefined;
    /**
     * Timestamp when the environment was created
     */
    createdAt: number;
    /**
     * Timestamp when the environment was last updated
     */
    updatedAt: number;
};
export type GetV9ProjectsIdOrNameCustomEnvironmentsResponseBody = {
    /**
     * The maximum number of custom environments allowed either by the team's plan type or a custom override.
     */
    accountLimit: AccountLimit;
    environments: Array<GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments>;
};
/** @internal */
export declare const GetV9ProjectsIdOrNameCustomEnvironmentsRequest$inboundSchema: z.ZodType<GetV9ProjectsIdOrNameCustomEnvironmentsRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetV9ProjectsIdOrNameCustomEnvironmentsRequest$Outbound = {
    idOrName: string;
    gitBranch?: string | undefined;
    teamId?: string | undefined;
    slug?: string | undefined;
};
/** @internal */
export declare const GetV9ProjectsIdOrNameCustomEnvironmentsRequest$outboundSchema: z.ZodType<GetV9ProjectsIdOrNameCustomEnvironmentsRequest$Outbound, z.ZodTypeDef, GetV9ProjectsIdOrNameCustomEnvironmentsRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetV9ProjectsIdOrNameCustomEnvironmentsRequest$ {
    /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetV9ProjectsIdOrNameCustomEnvironmentsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetV9ProjectsIdOrNameCustomEnvironmentsRequest$Outbound, z.ZodTypeDef, GetV9ProjectsIdOrNameCustomEnvironmentsRequest>;
    /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsRequest$Outbound` instead. */
    type Outbound = GetV9ProjectsIdOrNameCustomEnvironmentsRequest$Outbound;
}
export declare function getV9ProjectsIdOrNameCustomEnvironmentsRequestToJSON(getV9ProjectsIdOrNameCustomEnvironmentsRequest: GetV9ProjectsIdOrNameCustomEnvironmentsRequest): string;
export declare function getV9ProjectsIdOrNameCustomEnvironmentsRequestFromJSON(jsonString: string): SafeParseResult<GetV9ProjectsIdOrNameCustomEnvironmentsRequest, SDKValidationError>;
/** @internal */
export declare const AccountLimit$inboundSchema: z.ZodType<AccountLimit, z.ZodTypeDef, unknown>;
/** @internal */
export type AccountLimit$Outbound = {
    total: number;
};
/** @internal */
export declare const AccountLimit$outboundSchema: z.ZodType<AccountLimit$Outbound, z.ZodTypeDef, AccountLimit>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AccountLimit$ {
    /** @deprecated use `AccountLimit$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AccountLimit, z.ZodTypeDef, unknown>;
    /** @deprecated use `AccountLimit$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AccountLimit$Outbound, z.ZodTypeDef, AccountLimit>;
    /** @deprecated use `AccountLimit$Outbound` instead. */
    type Outbound = AccountLimit$Outbound;
}
export declare function accountLimitToJSON(accountLimit: AccountLimit): string;
export declare function accountLimitFromJSON(jsonString: string): SafeParseResult<AccountLimit, SDKValidationError>;
/** @internal */
export declare const GetV9ProjectsIdOrNameCustomEnvironmentsType$inboundSchema: z.ZodNativeEnum<typeof GetV9ProjectsIdOrNameCustomEnvironmentsType>;
/** @internal */
export declare const GetV9ProjectsIdOrNameCustomEnvironmentsType$outboundSchema: z.ZodNativeEnum<typeof GetV9ProjectsIdOrNameCustomEnvironmentsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetV9ProjectsIdOrNameCustomEnvironmentsType$ {
    /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Preview: "preview";
        readonly Production: "production";
        readonly Development: "development";
    }>;
    /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Preview: "preview";
        readonly Production: "production";
        readonly Development: "development";
    }>;
}
/** @internal */
export declare const GetV9ProjectsIdOrNameCustomEnvironmentsEnvironmentType$inboundSchema: z.ZodNativeEnum<typeof GetV9ProjectsIdOrNameCustomEnvironmentsEnvironmentType>;
/** @internal */
export declare const GetV9ProjectsIdOrNameCustomEnvironmentsEnvironmentType$outboundSchema: z.ZodNativeEnum<typeof GetV9ProjectsIdOrNameCustomEnvironmentsEnvironmentType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetV9ProjectsIdOrNameCustomEnvironmentsEnvironmentType$ {
    /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsEnvironmentType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly EndsWith: "endsWith";
        readonly StartsWith: "startsWith";
        readonly Equals: "equals";
    }>;
    /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsEnvironmentType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly EndsWith: "endsWith";
        readonly StartsWith: "startsWith";
        readonly Equals: "equals";
    }>;
}
/** @internal */
export declare const GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher$inboundSchema: z.ZodType<GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher, z.ZodTypeDef, unknown>;
/** @internal */
export type GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher$Outbound = {
    type: string;
    pattern: string;
};
/** @internal */
export declare const GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher$outboundSchema: z.ZodType<GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher$Outbound, z.ZodTypeDef, GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher$ {
    /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher$Outbound, z.ZodTypeDef, GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher>;
    /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher$Outbound` instead. */
    type Outbound = GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher$Outbound;
}
export declare function getV9ProjectsIdOrNameCustomEnvironmentsBranchMatcherToJSON(getV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher: GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher): string;
export declare function getV9ProjectsIdOrNameCustomEnvironmentsBranchMatcherFromJSON(jsonString: string): SafeParseResult<GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher, SDKValidationError>;
/** @internal */
export declare const GetV9ProjectsIdOrNameCustomEnvironmentsVerification$inboundSchema: z.ZodType<GetV9ProjectsIdOrNameCustomEnvironmentsVerification, z.ZodTypeDef, unknown>;
/** @internal */
export type GetV9ProjectsIdOrNameCustomEnvironmentsVerification$Outbound = {
    type: string;
    domain: string;
    value: string;
    reason: string;
};
/** @internal */
export declare const GetV9ProjectsIdOrNameCustomEnvironmentsVerification$outboundSchema: z.ZodType<GetV9ProjectsIdOrNameCustomEnvironmentsVerification$Outbound, z.ZodTypeDef, GetV9ProjectsIdOrNameCustomEnvironmentsVerification>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetV9ProjectsIdOrNameCustomEnvironmentsVerification$ {
    /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsVerification$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetV9ProjectsIdOrNameCustomEnvironmentsVerification, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsVerification$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetV9ProjectsIdOrNameCustomEnvironmentsVerification$Outbound, z.ZodTypeDef, GetV9ProjectsIdOrNameCustomEnvironmentsVerification>;
    /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsVerification$Outbound` instead. */
    type Outbound = GetV9ProjectsIdOrNameCustomEnvironmentsVerification$Outbound;
}
export declare function getV9ProjectsIdOrNameCustomEnvironmentsVerificationToJSON(getV9ProjectsIdOrNameCustomEnvironmentsVerification: GetV9ProjectsIdOrNameCustomEnvironmentsVerification): string;
export declare function getV9ProjectsIdOrNameCustomEnvironmentsVerificationFromJSON(jsonString: string): SafeParseResult<GetV9ProjectsIdOrNameCustomEnvironmentsVerification, SDKValidationError>;
/** @internal */
export declare const GetV9ProjectsIdOrNameCustomEnvironmentsDomains$inboundSchema: z.ZodType<GetV9ProjectsIdOrNameCustomEnvironmentsDomains, z.ZodTypeDef, unknown>;
/** @internal */
export type GetV9ProjectsIdOrNameCustomEnvironmentsDomains$Outbound = {
    name: string;
    apexName: string;
    projectId: string;
    redirect?: string | null | undefined;
    redirectStatusCode?: number | null | undefined;
    gitBranch?: string | null | undefined;
    customEnvironmentId?: string | null | undefined;
    updatedAt?: number | undefined;
    createdAt?: number | undefined;
    verified: boolean;
    verification?: Array<GetV9ProjectsIdOrNameCustomEnvironmentsVerification$Outbound> | undefined;
};
/** @internal */
export declare const GetV9ProjectsIdOrNameCustomEnvironmentsDomains$outboundSchema: z.ZodType<GetV9ProjectsIdOrNameCustomEnvironmentsDomains$Outbound, z.ZodTypeDef, GetV9ProjectsIdOrNameCustomEnvironmentsDomains>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetV9ProjectsIdOrNameCustomEnvironmentsDomains$ {
    /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsDomains$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetV9ProjectsIdOrNameCustomEnvironmentsDomains, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsDomains$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetV9ProjectsIdOrNameCustomEnvironmentsDomains$Outbound, z.ZodTypeDef, GetV9ProjectsIdOrNameCustomEnvironmentsDomains>;
    /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsDomains$Outbound` instead. */
    type Outbound = GetV9ProjectsIdOrNameCustomEnvironmentsDomains$Outbound;
}
export declare function getV9ProjectsIdOrNameCustomEnvironmentsDomainsToJSON(getV9ProjectsIdOrNameCustomEnvironmentsDomains: GetV9ProjectsIdOrNameCustomEnvironmentsDomains): string;
export declare function getV9ProjectsIdOrNameCustomEnvironmentsDomainsFromJSON(jsonString: string): SafeParseResult<GetV9ProjectsIdOrNameCustomEnvironmentsDomains, SDKValidationError>;
/** @internal */
export declare const GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments$inboundSchema: z.ZodType<GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments, z.ZodTypeDef, unknown>;
/** @internal */
export type GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments$Outbound = {
    id: string;
    slug: string;
    type: string;
    description?: string | undefined;
    branchMatcher?: GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher$Outbound | undefined;
    domains?: Array<GetV9ProjectsIdOrNameCustomEnvironmentsDomains$Outbound> | undefined;
    currentDeploymentAliases?: Array<string> | undefined;
    createdAt: number;
    updatedAt: number;
};
/** @internal */
export declare const GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments$outboundSchema: z.ZodType<GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments$Outbound, z.ZodTypeDef, GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments$ {
    /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments$Outbound, z.ZodTypeDef, GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments>;
    /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments$Outbound` instead. */
    type Outbound = GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments$Outbound;
}
export declare function getV9ProjectsIdOrNameCustomEnvironmentsEnvironmentsToJSON(getV9ProjectsIdOrNameCustomEnvironmentsEnvironments: GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments): string;
export declare function getV9ProjectsIdOrNameCustomEnvironmentsEnvironmentsFromJSON(jsonString: string): SafeParseResult<GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments, SDKValidationError>;
/** @internal */
export declare const GetV9ProjectsIdOrNameCustomEnvironmentsResponseBody$inboundSchema: z.ZodType<GetV9ProjectsIdOrNameCustomEnvironmentsResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type GetV9ProjectsIdOrNameCustomEnvironmentsResponseBody$Outbound = {
    accountLimit: AccountLimit$Outbound;
    environments: Array<GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments$Outbound>;
};
/** @internal */
export declare const GetV9ProjectsIdOrNameCustomEnvironmentsResponseBody$outboundSchema: z.ZodType<GetV9ProjectsIdOrNameCustomEnvironmentsResponseBody$Outbound, z.ZodTypeDef, GetV9ProjectsIdOrNameCustomEnvironmentsResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetV9ProjectsIdOrNameCustomEnvironmentsResponseBody$ {
    /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetV9ProjectsIdOrNameCustomEnvironmentsResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetV9ProjectsIdOrNameCustomEnvironmentsResponseBody$Outbound, z.ZodTypeDef, GetV9ProjectsIdOrNameCustomEnvironmentsResponseBody>;
    /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsResponseBody$Outbound` instead. */
    type Outbound = GetV9ProjectsIdOrNameCustomEnvironmentsResponseBody$Outbound;
}
export declare function getV9ProjectsIdOrNameCustomEnvironmentsResponseBodyToJSON(getV9ProjectsIdOrNameCustomEnvironmentsResponseBody: GetV9ProjectsIdOrNameCustomEnvironmentsResponseBody): string;
export declare function getV9ProjectsIdOrNameCustomEnvironmentsResponseBodyFromJSON(jsonString: string): SafeParseResult<GetV9ProjectsIdOrNameCustomEnvironmentsResponseBody, SDKValidationError>;
//# sourceMappingURL=getv9projectsidornamecustomenvironmentsop.d.ts.map