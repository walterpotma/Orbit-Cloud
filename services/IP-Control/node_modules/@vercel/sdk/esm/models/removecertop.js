/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
/** @internal */
export const RemoveCertRequest$inboundSchema = z.object({
    id: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/** @internal */
export const RemoveCertRequest$outboundSchema = z.object({
    id: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RemoveCertRequest$;
(function (RemoveCertRequest$) {
    /** @deprecated use `RemoveCertRequest$inboundSchema` instead. */
    RemoveCertRequest$.inboundSchema = RemoveCertRequest$inboundSchema;
    /** @deprecated use `RemoveCertRequest$outboundSchema` instead. */
    RemoveCertRequest$.outboundSchema = RemoveCertRequest$outboundSchema;
})(RemoveCertRequest$ || (RemoveCertRequest$ = {}));
export function removeCertRequestToJSON(removeCertRequest) {
    return JSON.stringify(RemoveCertRequest$outboundSchema.parse(removeCertRequest));
}
export function removeCertRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RemoveCertRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RemoveCertRequest' from JSON`);
}
/** @internal */
export const RemoveCertResponseBody$inboundSchema = z.object({});
/** @internal */
export const RemoveCertResponseBody$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RemoveCertResponseBody$;
(function (RemoveCertResponseBody$) {
    /** @deprecated use `RemoveCertResponseBody$inboundSchema` instead. */
    RemoveCertResponseBody$.inboundSchema = RemoveCertResponseBody$inboundSchema;
    /** @deprecated use `RemoveCertResponseBody$outboundSchema` instead. */
    RemoveCertResponseBody$.outboundSchema = RemoveCertResponseBody$outboundSchema;
})(RemoveCertResponseBody$ || (RemoveCertResponseBody$ = {}));
export function removeCertResponseBodyToJSON(removeCertResponseBody) {
    return JSON.stringify(RemoveCertResponseBody$outboundSchema.parse(removeCertResponseBody));
}
export function removeCertResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RemoveCertResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RemoveCertResponseBody' from JSON`);
}
//# sourceMappingURL=removecertop.js.map