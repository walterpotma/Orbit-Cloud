import * as z from "zod";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type BuyDomainRequestBody = {
    /**
     * The domain name to purchase.
     */
    name: string;
    /**
     * The price you expect to be charged for the purchase.
     */
    expectedPrice?: number | undefined;
    /**
     * Indicates whether the domain should be automatically renewed.
     */
    renew?: boolean | undefined;
    /**
     * The country of the domain registrant
     */
    country: string;
    /**
     * The company name of the domain registrant
     */
    orgName?: string | undefined;
    /**
     * The first name of the domain registrant
     */
    firstName: string;
    /**
     * The last name of the domain registrant
     */
    lastName: string;
    /**
     * The street address of the domain registrant
     */
    address1: string;
    /**
     * The city of the domain registrant
     */
    city: string;
    /**
     * The state of the domain registrant
     */
    state: string;
    /**
     * The postal code of the domain registrant
     */
    postalCode: string;
    /**
     * The phone number of the domain registrant
     */
    phone: string;
    /**
     * The email of the domain registrant
     */
    email: string;
};
export type BuyDomainRequest = {
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody: BuyDomainRequestBody;
};
export type BuyDomainDomain = {
    uid: string;
    ns: Array<string>;
    verified: boolean;
    created: number;
    pending: boolean;
};
export type BuyDomainDomainsResponseBody = {
    domain: BuyDomainDomain;
};
export type BuyDomainDomainsDomain = {
    uid: string;
    ns: Array<string>;
    verified: boolean;
    created: number;
    pending: boolean;
};
export type BuyDomainResponseBody = {
    domain: BuyDomainDomainsDomain;
};
export type BuyDomainResponse = BuyDomainResponseBody | BuyDomainDomainsResponseBody;
/** @internal */
export declare const BuyDomainRequestBody$inboundSchema: z.ZodType<BuyDomainRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type BuyDomainRequestBody$Outbound = {
    name: string;
    expectedPrice?: number | undefined;
    renew?: boolean | undefined;
    country: string;
    orgName?: string | undefined;
    firstName: string;
    lastName: string;
    address1: string;
    city: string;
    state: string;
    postalCode: string;
    phone: string;
    email: string;
};
/** @internal */
export declare const BuyDomainRequestBody$outboundSchema: z.ZodType<BuyDomainRequestBody$Outbound, z.ZodTypeDef, BuyDomainRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BuyDomainRequestBody$ {
    /** @deprecated use `BuyDomainRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BuyDomainRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `BuyDomainRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BuyDomainRequestBody$Outbound, z.ZodTypeDef, BuyDomainRequestBody>;
    /** @deprecated use `BuyDomainRequestBody$Outbound` instead. */
    type Outbound = BuyDomainRequestBody$Outbound;
}
export declare function buyDomainRequestBodyToJSON(buyDomainRequestBody: BuyDomainRequestBody): string;
export declare function buyDomainRequestBodyFromJSON(jsonString: string): SafeParseResult<BuyDomainRequestBody, SDKValidationError>;
/** @internal */
export declare const BuyDomainRequest$inboundSchema: z.ZodType<BuyDomainRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type BuyDomainRequest$Outbound = {
    teamId?: string | undefined;
    slug?: string | undefined;
    RequestBody: BuyDomainRequestBody$Outbound;
};
/** @internal */
export declare const BuyDomainRequest$outboundSchema: z.ZodType<BuyDomainRequest$Outbound, z.ZodTypeDef, BuyDomainRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BuyDomainRequest$ {
    /** @deprecated use `BuyDomainRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BuyDomainRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `BuyDomainRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BuyDomainRequest$Outbound, z.ZodTypeDef, BuyDomainRequest>;
    /** @deprecated use `BuyDomainRequest$Outbound` instead. */
    type Outbound = BuyDomainRequest$Outbound;
}
export declare function buyDomainRequestToJSON(buyDomainRequest: BuyDomainRequest): string;
export declare function buyDomainRequestFromJSON(jsonString: string): SafeParseResult<BuyDomainRequest, SDKValidationError>;
/** @internal */
export declare const BuyDomainDomain$inboundSchema: z.ZodType<BuyDomainDomain, z.ZodTypeDef, unknown>;
/** @internal */
export type BuyDomainDomain$Outbound = {
    uid: string;
    ns: Array<string>;
    verified: boolean;
    created: number;
    pending: boolean;
};
/** @internal */
export declare const BuyDomainDomain$outboundSchema: z.ZodType<BuyDomainDomain$Outbound, z.ZodTypeDef, BuyDomainDomain>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BuyDomainDomain$ {
    /** @deprecated use `BuyDomainDomain$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BuyDomainDomain, z.ZodTypeDef, unknown>;
    /** @deprecated use `BuyDomainDomain$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BuyDomainDomain$Outbound, z.ZodTypeDef, BuyDomainDomain>;
    /** @deprecated use `BuyDomainDomain$Outbound` instead. */
    type Outbound = BuyDomainDomain$Outbound;
}
export declare function buyDomainDomainToJSON(buyDomainDomain: BuyDomainDomain): string;
export declare function buyDomainDomainFromJSON(jsonString: string): SafeParseResult<BuyDomainDomain, SDKValidationError>;
/** @internal */
export declare const BuyDomainDomainsResponseBody$inboundSchema: z.ZodType<BuyDomainDomainsResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type BuyDomainDomainsResponseBody$Outbound = {
    domain: BuyDomainDomain$Outbound;
};
/** @internal */
export declare const BuyDomainDomainsResponseBody$outboundSchema: z.ZodType<BuyDomainDomainsResponseBody$Outbound, z.ZodTypeDef, BuyDomainDomainsResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BuyDomainDomainsResponseBody$ {
    /** @deprecated use `BuyDomainDomainsResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BuyDomainDomainsResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `BuyDomainDomainsResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BuyDomainDomainsResponseBody$Outbound, z.ZodTypeDef, BuyDomainDomainsResponseBody>;
    /** @deprecated use `BuyDomainDomainsResponseBody$Outbound` instead. */
    type Outbound = BuyDomainDomainsResponseBody$Outbound;
}
export declare function buyDomainDomainsResponseBodyToJSON(buyDomainDomainsResponseBody: BuyDomainDomainsResponseBody): string;
export declare function buyDomainDomainsResponseBodyFromJSON(jsonString: string): SafeParseResult<BuyDomainDomainsResponseBody, SDKValidationError>;
/** @internal */
export declare const BuyDomainDomainsDomain$inboundSchema: z.ZodType<BuyDomainDomainsDomain, z.ZodTypeDef, unknown>;
/** @internal */
export type BuyDomainDomainsDomain$Outbound = {
    uid: string;
    ns: Array<string>;
    verified: boolean;
    created: number;
    pending: boolean;
};
/** @internal */
export declare const BuyDomainDomainsDomain$outboundSchema: z.ZodType<BuyDomainDomainsDomain$Outbound, z.ZodTypeDef, BuyDomainDomainsDomain>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BuyDomainDomainsDomain$ {
    /** @deprecated use `BuyDomainDomainsDomain$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BuyDomainDomainsDomain, z.ZodTypeDef, unknown>;
    /** @deprecated use `BuyDomainDomainsDomain$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BuyDomainDomainsDomain$Outbound, z.ZodTypeDef, BuyDomainDomainsDomain>;
    /** @deprecated use `BuyDomainDomainsDomain$Outbound` instead. */
    type Outbound = BuyDomainDomainsDomain$Outbound;
}
export declare function buyDomainDomainsDomainToJSON(buyDomainDomainsDomain: BuyDomainDomainsDomain): string;
export declare function buyDomainDomainsDomainFromJSON(jsonString: string): SafeParseResult<BuyDomainDomainsDomain, SDKValidationError>;
/** @internal */
export declare const BuyDomainResponseBody$inboundSchema: z.ZodType<BuyDomainResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type BuyDomainResponseBody$Outbound = {
    domain: BuyDomainDomainsDomain$Outbound;
};
/** @internal */
export declare const BuyDomainResponseBody$outboundSchema: z.ZodType<BuyDomainResponseBody$Outbound, z.ZodTypeDef, BuyDomainResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BuyDomainResponseBody$ {
    /** @deprecated use `BuyDomainResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BuyDomainResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `BuyDomainResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BuyDomainResponseBody$Outbound, z.ZodTypeDef, BuyDomainResponseBody>;
    /** @deprecated use `BuyDomainResponseBody$Outbound` instead. */
    type Outbound = BuyDomainResponseBody$Outbound;
}
export declare function buyDomainResponseBodyToJSON(buyDomainResponseBody: BuyDomainResponseBody): string;
export declare function buyDomainResponseBodyFromJSON(jsonString: string): SafeParseResult<BuyDomainResponseBody, SDKValidationError>;
/** @internal */
export declare const BuyDomainResponse$inboundSchema: z.ZodType<BuyDomainResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type BuyDomainResponse$Outbound = BuyDomainResponseBody$Outbound | BuyDomainDomainsResponseBody$Outbound;
/** @internal */
export declare const BuyDomainResponse$outboundSchema: z.ZodType<BuyDomainResponse$Outbound, z.ZodTypeDef, BuyDomainResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BuyDomainResponse$ {
    /** @deprecated use `BuyDomainResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BuyDomainResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `BuyDomainResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BuyDomainResponse$Outbound, z.ZodTypeDef, BuyDomainResponse>;
    /** @deprecated use `BuyDomainResponse$Outbound` instead. */
    type Outbound = BuyDomainResponse$Outbound;
}
export declare function buyDomainResponseToJSON(buyDomainResponse: BuyDomainResponse): string;
export declare function buyDomainResponseFromJSON(jsonString: string): SafeParseResult<BuyDomainResponse, SDKValidationError>;
//# sourceMappingURL=buydomainop.d.ts.map