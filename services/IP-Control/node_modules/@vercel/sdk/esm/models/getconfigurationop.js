/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
/**
 * A string representing the permission for projects. Possible values are `all` or `selected`.
 */
export const ProjectSelection = {
    Selected: "selected",
    All: "all",
};
export const GetConfigurationResponseBodyLevel = {
    Info: "info",
    Warn: "warn",
    Error: "error",
};
export const TransferRequestKind = {
    TransferFromMarketplace: "transfer-from-marketplace",
};
export const Kind = {
    TransferToMarketplace: "transfer-to-marketplace",
};
export const TransferRequestType = {
    Subscription: "subscription",
    Prepayment: "prepayment",
};
export const TransferRequestScope = {
    Installation: "installation",
    Resource: "resource",
};
/**
 * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
 */
export const GetConfigurationResponseBodyIntegrationsSource = {
    Marketplace: "marketplace",
    DeployButton: "deploy-button",
    External: "external",
    V0: "v0",
    ResourceClaims: "resource-claims",
};
export const GetConfigurationResponseBodyIntegrationsType = {
    IntegrationConfiguration: "integration-configuration",
};
export const GetConfigurationResponseBodyIntegrationsDisabledReason = {
    DisabledByOwner: "disabled-by-owner",
    FeatureNotAvailable: "feature-not-available",
    DisabledByAdmin: "disabled-by-admin",
    OriginalOwnerLeftTheTeam: "original-owner-left-the-team",
    AccountPlanDowngrade: "account-plan-downgrade",
    OriginalOwnerRoleDowngraded: "original-owner-role-downgraded",
};
/**
 * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
 */
export const GetConfigurationResponseBodyIntegrationsInstallationType = {
    Marketplace: "marketplace",
    External: "external",
};
/**
 * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
 */
export const GetConfigurationResponseBodySource = {
    Marketplace: "marketplace",
    DeployButton: "deploy-button",
    External: "external",
    V0: "v0",
    ResourceClaims: "resource-claims",
};
export const GetConfigurationResponseBodyType = {
    IntegrationConfiguration: "integration-configuration",
};
export const GetConfigurationResponseBodyDisabledReason = {
    DisabledByOwner: "disabled-by-owner",
    FeatureNotAvailable: "feature-not-available",
    DisabledByAdmin: "disabled-by-admin",
    OriginalOwnerLeftTheTeam: "original-owner-left-the-team",
    AccountPlanDowngrade: "account-plan-downgrade",
    OriginalOwnerRoleDowngraded: "original-owner-role-downgraded",
};
/**
 * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
 */
export const GetConfigurationResponseBodyInstallationType = {
    Marketplace: "marketplace",
    External: "external",
};
/** @internal */
export const GetConfigurationRequest$inboundSchema = z.object({
    id: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/** @internal */
export const GetConfigurationRequest$outboundSchema = z.object({
    id: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetConfigurationRequest$;
(function (GetConfigurationRequest$) {
    /** @deprecated use `GetConfigurationRequest$inboundSchema` instead. */
    GetConfigurationRequest$.inboundSchema = GetConfigurationRequest$inboundSchema;
    /** @deprecated use `GetConfigurationRequest$outboundSchema` instead. */
    GetConfigurationRequest$.outboundSchema = GetConfigurationRequest$outboundSchema;
})(GetConfigurationRequest$ || (GetConfigurationRequest$ = {}));
export function getConfigurationRequestToJSON(getConfigurationRequest) {
    return JSON.stringify(GetConfigurationRequest$outboundSchema.parse(getConfigurationRequest));
}
export function getConfigurationRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetConfigurationRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetConfigurationRequest' from JSON`);
}
/** @internal */
export const ProjectSelection$inboundSchema = z.nativeEnum(ProjectSelection);
/** @internal */
export const ProjectSelection$outboundSchema = ProjectSelection$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ProjectSelection$;
(function (ProjectSelection$) {
    /** @deprecated use `ProjectSelection$inboundSchema` instead. */
    ProjectSelection$.inboundSchema = ProjectSelection$inboundSchema;
    /** @deprecated use `ProjectSelection$outboundSchema` instead. */
    ProjectSelection$.outboundSchema = ProjectSelection$outboundSchema;
})(ProjectSelection$ || (ProjectSelection$ = {}));
/** @internal */
export const GetConfigurationResponseBodyLevel$inboundSchema = z.nativeEnum(GetConfigurationResponseBodyLevel);
/** @internal */
export const GetConfigurationResponseBodyLevel$outboundSchema = GetConfigurationResponseBodyLevel$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetConfigurationResponseBodyLevel$;
(function (GetConfigurationResponseBodyLevel$) {
    /** @deprecated use `GetConfigurationResponseBodyLevel$inboundSchema` instead. */
    GetConfigurationResponseBodyLevel$.inboundSchema = GetConfigurationResponseBodyLevel$inboundSchema;
    /** @deprecated use `GetConfigurationResponseBodyLevel$outboundSchema` instead. */
    GetConfigurationResponseBodyLevel$.outboundSchema = GetConfigurationResponseBodyLevel$outboundSchema;
})(GetConfigurationResponseBodyLevel$ || (GetConfigurationResponseBodyLevel$ = {}));
/** @internal */
export const ResponseBodyNotification$inboundSchema = z.object({
    level: GetConfigurationResponseBodyLevel$inboundSchema,
    title: z.string(),
    message: z.string().optional(),
    href: z.string().optional(),
});
/** @internal */
export const ResponseBodyNotification$outboundSchema = z.object({
    level: GetConfigurationResponseBodyLevel$outboundSchema,
    title: z.string(),
    message: z.string().optional(),
    href: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyNotification$;
(function (ResponseBodyNotification$) {
    /** @deprecated use `ResponseBodyNotification$inboundSchema` instead. */
    ResponseBodyNotification$.inboundSchema = ResponseBodyNotification$inboundSchema;
    /** @deprecated use `ResponseBodyNotification$outboundSchema` instead. */
    ResponseBodyNotification$.outboundSchema = ResponseBodyNotification$outboundSchema;
})(ResponseBodyNotification$ || (ResponseBodyNotification$ = {}));
export function responseBodyNotificationToJSON(responseBodyNotification) {
    return JSON.stringify(ResponseBodyNotification$outboundSchema.parse(responseBodyNotification));
}
export function responseBodyNotificationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyNotification$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyNotification' from JSON`);
}
/** @internal */
export const TransferRequestKind$inboundSchema = z.nativeEnum(TransferRequestKind);
/** @internal */
export const TransferRequestKind$outboundSchema = TransferRequestKind$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransferRequestKind$;
(function (TransferRequestKind$) {
    /** @deprecated use `TransferRequestKind$inboundSchema` instead. */
    TransferRequestKind$.inboundSchema = TransferRequestKind$inboundSchema;
    /** @deprecated use `TransferRequestKind$outboundSchema` instead. */
    TransferRequestKind$.outboundSchema = TransferRequestKind$outboundSchema;
})(TransferRequestKind$ || (TransferRequestKind$ = {}));
/** @internal */
export const TransferRequestRequester$inboundSchema = z.object({
    name: z.string(),
    email: z.string().optional(),
});
/** @internal */
export const TransferRequestRequester$outboundSchema = z.object({
    name: z.string(),
    email: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransferRequestRequester$;
(function (TransferRequestRequester$) {
    /** @deprecated use `TransferRequestRequester$inboundSchema` instead. */
    TransferRequestRequester$.inboundSchema = TransferRequestRequester$inboundSchema;
    /** @deprecated use `TransferRequestRequester$outboundSchema` instead. */
    TransferRequestRequester$.outboundSchema = TransferRequestRequester$outboundSchema;
})(TransferRequestRequester$ || (TransferRequestRequester$ = {}));
export function transferRequestRequesterToJSON(transferRequestRequester) {
    return JSON.stringify(TransferRequestRequester$outboundSchema.parse(transferRequestRequester));
}
export function transferRequestRequesterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TransferRequestRequester$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TransferRequestRequester' from JSON`);
}
/** @internal */
export const TransferRequest2$inboundSchema = z.object({
    kind: TransferRequestKind$inboundSchema,
    requestId: z.string(),
    transferId: z.string(),
    requester: z.lazy(() => TransferRequestRequester$inboundSchema),
    createdAt: z.number(),
    expiresAt: z.number(),
    discardedAt: z.number().optional(),
    discardedBy: z.string().optional(),
    approvedAt: z.number().optional(),
    approvedBy: z.string().optional(),
    authorizationId: z.string().optional(),
});
/** @internal */
export const TransferRequest2$outboundSchema = z.object({
    kind: TransferRequestKind$outboundSchema,
    requestId: z.string(),
    transferId: z.string(),
    requester: z.lazy(() => TransferRequestRequester$outboundSchema),
    createdAt: z.number(),
    expiresAt: z.number(),
    discardedAt: z.number().optional(),
    discardedBy: z.string().optional(),
    approvedAt: z.number().optional(),
    approvedBy: z.string().optional(),
    authorizationId: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransferRequest2$;
(function (TransferRequest2$) {
    /** @deprecated use `TransferRequest2$inboundSchema` instead. */
    TransferRequest2$.inboundSchema = TransferRequest2$inboundSchema;
    /** @deprecated use `TransferRequest2$outboundSchema` instead. */
    TransferRequest2$.outboundSchema = TransferRequest2$outboundSchema;
})(TransferRequest2$ || (TransferRequest2$ = {}));
export function transferRequest2ToJSON(transferRequest2) {
    return JSON.stringify(TransferRequest2$outboundSchema.parse(transferRequest2));
}
export function transferRequest2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => TransferRequest2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TransferRequest2' from JSON`);
}
/** @internal */
export const Kind$inboundSchema = z.nativeEnum(Kind);
/** @internal */
export const Kind$outboundSchema = Kind$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Kind$;
(function (Kind$) {
    /** @deprecated use `Kind$inboundSchema` instead. */
    Kind$.inboundSchema = Kind$inboundSchema;
    /** @deprecated use `Kind$outboundSchema` instead. */
    Kind$.outboundSchema = Kind$outboundSchema;
})(Kind$ || (Kind$ = {}));
/** @internal */
export const TransferRequestType$inboundSchema = z.nativeEnum(TransferRequestType);
/** @internal */
export const TransferRequestType$outboundSchema = TransferRequestType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransferRequestType$;
(function (TransferRequestType$) {
    /** @deprecated use `TransferRequestType$inboundSchema` instead. */
    TransferRequestType$.inboundSchema = TransferRequestType$inboundSchema;
    /** @deprecated use `TransferRequestType$outboundSchema` instead. */
    TransferRequestType$.outboundSchema = TransferRequestType$outboundSchema;
})(TransferRequestType$ || (TransferRequestType$ = {}));
/** @internal */
export const TransferRequestScope$inboundSchema = z.nativeEnum(TransferRequestScope);
/** @internal */
export const TransferRequestScope$outboundSchema = TransferRequestScope$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransferRequestScope$;
(function (TransferRequestScope$) {
    /** @deprecated use `TransferRequestScope$inboundSchema` instead. */
    TransferRequestScope$.inboundSchema = TransferRequestScope$inboundSchema;
    /** @deprecated use `TransferRequestScope$outboundSchema` instead. */
    TransferRequestScope$.outboundSchema = TransferRequestScope$outboundSchema;
})(TransferRequestScope$ || (TransferRequestScope$ = {}));
/** @internal */
export const TransferRequestBillingPlan$inboundSchema = z.object({
    id: z.string(),
    type: TransferRequestType$inboundSchema,
    scope: TransferRequestScope$inboundSchema.optional(),
    name: z.string(),
    description: z.string(),
    paymentMethodRequired: z.boolean().optional(),
    preauthorizationAmount: z.number().optional(),
});
/** @internal */
export const TransferRequestBillingPlan$outboundSchema = z.object({
    id: z.string(),
    type: TransferRequestType$outboundSchema,
    scope: TransferRequestScope$outboundSchema.optional(),
    name: z.string(),
    description: z.string(),
    paymentMethodRequired: z.boolean().optional(),
    preauthorizationAmount: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransferRequestBillingPlan$;
(function (TransferRequestBillingPlan$) {
    /** @deprecated use `TransferRequestBillingPlan$inboundSchema` instead. */
    TransferRequestBillingPlan$.inboundSchema = TransferRequestBillingPlan$inboundSchema;
    /** @deprecated use `TransferRequestBillingPlan$outboundSchema` instead. */
    TransferRequestBillingPlan$.outboundSchema = TransferRequestBillingPlan$outboundSchema;
})(TransferRequestBillingPlan$ || (TransferRequestBillingPlan$ = {}));
export function transferRequestBillingPlanToJSON(transferRequestBillingPlan) {
    return JSON.stringify(TransferRequestBillingPlan$outboundSchema.parse(transferRequestBillingPlan));
}
export function transferRequestBillingPlanFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TransferRequestBillingPlan$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TransferRequestBillingPlan' from JSON`);
}
/** @internal */
export const Requester$inboundSchema = z.object({
    name: z.string(),
    email: z.string().optional(),
});
/** @internal */
export const Requester$outboundSchema = z.object({
    name: z.string(),
    email: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Requester$;
(function (Requester$) {
    /** @deprecated use `Requester$inboundSchema` instead. */
    Requester$.inboundSchema = Requester$inboundSchema;
    /** @deprecated use `Requester$outboundSchema` instead. */
    Requester$.outboundSchema = Requester$outboundSchema;
})(Requester$ || (Requester$ = {}));
export function requesterToJSON(requester) {
    return JSON.stringify(Requester$outboundSchema.parse(requester));
}
export function requesterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Requester$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Requester' from JSON`);
}
/** @internal */
export const TransferRequest1$inboundSchema = z.object({
    kind: Kind$inboundSchema,
    metadata: z.record(z.any()).optional(),
    billingPlan: z.lazy(() => TransferRequestBillingPlan$inboundSchema)
        .optional(),
    requestId: z.string(),
    transferId: z.string(),
    requester: z.lazy(() => Requester$inboundSchema),
    createdAt: z.number(),
    expiresAt: z.number(),
    discardedAt: z.number().optional(),
    discardedBy: z.string().optional(),
    approvedAt: z.number().optional(),
    approvedBy: z.string().optional(),
    authorizationId: z.string().optional(),
});
/** @internal */
export const TransferRequest1$outboundSchema = z.object({
    kind: Kind$outboundSchema,
    metadata: z.record(z.any()).optional(),
    billingPlan: z.lazy(() => TransferRequestBillingPlan$outboundSchema)
        .optional(),
    requestId: z.string(),
    transferId: z.string(),
    requester: z.lazy(() => Requester$outboundSchema),
    createdAt: z.number(),
    expiresAt: z.number(),
    discardedAt: z.number().optional(),
    discardedBy: z.string().optional(),
    approvedAt: z.number().optional(),
    approvedBy: z.string().optional(),
    authorizationId: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransferRequest1$;
(function (TransferRequest1$) {
    /** @deprecated use `TransferRequest1$inboundSchema` instead. */
    TransferRequest1$.inboundSchema = TransferRequest1$inboundSchema;
    /** @deprecated use `TransferRequest1$outboundSchema` instead. */
    TransferRequest1$.outboundSchema = TransferRequest1$outboundSchema;
})(TransferRequest1$ || (TransferRequest1$ = {}));
export function transferRequest1ToJSON(transferRequest1) {
    return JSON.stringify(TransferRequest1$outboundSchema.parse(transferRequest1));
}
export function transferRequest1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => TransferRequest1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TransferRequest1' from JSON`);
}
/** @internal */
export const TransferRequest$inboundSchema = z.union([
    z.lazy(() => TransferRequest1$inboundSchema),
    z.lazy(() => TransferRequest2$inboundSchema),
]);
/** @internal */
export const TransferRequest$outboundSchema = z.union([
    z.lazy(() => TransferRequest1$outboundSchema),
    z.lazy(() => TransferRequest2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransferRequest$;
(function (TransferRequest$) {
    /** @deprecated use `TransferRequest$inboundSchema` instead. */
    TransferRequest$.inboundSchema = TransferRequest$inboundSchema;
    /** @deprecated use `TransferRequest$outboundSchema` instead. */
    TransferRequest$.outboundSchema = TransferRequest$outboundSchema;
})(TransferRequest$ || (TransferRequest$ = {}));
export function transferRequestToJSON(transferRequest) {
    return JSON.stringify(TransferRequest$outboundSchema.parse(transferRequest));
}
export function transferRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TransferRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TransferRequest' from JSON`);
}
/** @internal */
export const GetConfigurationResponseBodyIntegrationsSource$inboundSchema = z
    .nativeEnum(GetConfigurationResponseBodyIntegrationsSource);
/** @internal */
export const GetConfigurationResponseBodyIntegrationsSource$outboundSchema = GetConfigurationResponseBodyIntegrationsSource$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetConfigurationResponseBodyIntegrationsSource$;
(function (GetConfigurationResponseBodyIntegrationsSource$) {
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsSource$inboundSchema` instead. */
    GetConfigurationResponseBodyIntegrationsSource$.inboundSchema = GetConfigurationResponseBodyIntegrationsSource$inboundSchema;
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsSource$outboundSchema` instead. */
    GetConfigurationResponseBodyIntegrationsSource$.outboundSchema = GetConfigurationResponseBodyIntegrationsSource$outboundSchema;
})(GetConfigurationResponseBodyIntegrationsSource$ || (GetConfigurationResponseBodyIntegrationsSource$ = {}));
/** @internal */
export const GetConfigurationResponseBodyIntegrationsType$inboundSchema = z
    .nativeEnum(GetConfigurationResponseBodyIntegrationsType);
/** @internal */
export const GetConfigurationResponseBodyIntegrationsType$outboundSchema = GetConfigurationResponseBodyIntegrationsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetConfigurationResponseBodyIntegrationsType$;
(function (GetConfigurationResponseBodyIntegrationsType$) {
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsType$inboundSchema` instead. */
    GetConfigurationResponseBodyIntegrationsType$.inboundSchema = GetConfigurationResponseBodyIntegrationsType$inboundSchema;
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsType$outboundSchema` instead. */
    GetConfigurationResponseBodyIntegrationsType$.outboundSchema = GetConfigurationResponseBodyIntegrationsType$outboundSchema;
})(GetConfigurationResponseBodyIntegrationsType$ || (GetConfigurationResponseBodyIntegrationsType$ = {}));
/** @internal */
export const GetConfigurationResponseBodyIntegrationsDisabledReason$inboundSchema = z.nativeEnum(GetConfigurationResponseBodyIntegrationsDisabledReason);
/** @internal */
export const GetConfigurationResponseBodyIntegrationsDisabledReason$outboundSchema = GetConfigurationResponseBodyIntegrationsDisabledReason$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetConfigurationResponseBodyIntegrationsDisabledReason$;
(function (GetConfigurationResponseBodyIntegrationsDisabledReason$) {
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsDisabledReason$inboundSchema` instead. */
    GetConfigurationResponseBodyIntegrationsDisabledReason$.inboundSchema = GetConfigurationResponseBodyIntegrationsDisabledReason$inboundSchema;
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsDisabledReason$outboundSchema` instead. */
    GetConfigurationResponseBodyIntegrationsDisabledReason$.outboundSchema = GetConfigurationResponseBodyIntegrationsDisabledReason$outboundSchema;
})(GetConfigurationResponseBodyIntegrationsDisabledReason$ || (GetConfigurationResponseBodyIntegrationsDisabledReason$ = {}));
/** @internal */
export const GetConfigurationResponseBodyIntegrationsInstallationType$inboundSchema = z.nativeEnum(GetConfigurationResponseBodyIntegrationsInstallationType);
/** @internal */
export const GetConfigurationResponseBodyIntegrationsInstallationType$outboundSchema = GetConfigurationResponseBodyIntegrationsInstallationType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetConfigurationResponseBodyIntegrationsInstallationType$;
(function (GetConfigurationResponseBodyIntegrationsInstallationType$) {
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsInstallationType$inboundSchema` instead. */
    GetConfigurationResponseBodyIntegrationsInstallationType$.inboundSchema = GetConfigurationResponseBodyIntegrationsInstallationType$inboundSchema;
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsInstallationType$outboundSchema` instead. */
    GetConfigurationResponseBodyIntegrationsInstallationType$.outboundSchema = GetConfigurationResponseBodyIntegrationsInstallationType$outboundSchema;
})(GetConfigurationResponseBodyIntegrationsInstallationType$ || (GetConfigurationResponseBodyIntegrationsInstallationType$ = {}));
/** @internal */
export const GetConfigurationResponseBody2$inboundSchema = z.object({
    projectSelection: ProjectSelection$inboundSchema,
    notification: z.lazy(() => ResponseBodyNotification$inboundSchema),
    transferRequest: z.union([
        z.lazy(() => TransferRequest1$inboundSchema),
        z.lazy(() => TransferRequest2$inboundSchema),
    ]),
    projects: z.array(z.string()).optional(),
    completedAt: z.number().optional(),
    createdAt: z.number(),
    id: z.string(),
    integrationId: z.string(),
    ownerId: z.string(),
    source: GetConfigurationResponseBodyIntegrationsSource$inboundSchema
        .optional(),
    slug: z.string(),
    teamId: z.nullable(z.string()).optional(),
    type: GetConfigurationResponseBodyIntegrationsType$inboundSchema,
    updatedAt: z.number(),
    userId: z.string(),
    scopes: z.array(z.string()),
    disabledAt: z.number().optional(),
    deletedAt: z.nullable(z.number()).optional(),
    deleteRequestedAt: z.nullable(z.number()).optional(),
    disabledReason: GetConfigurationResponseBodyIntegrationsDisabledReason$inboundSchema
        .optional(),
    installationType: GetConfigurationResponseBodyIntegrationsInstallationType$inboundSchema
        .optional(),
    canConfigureOpenTelemetry: z.boolean().optional(),
});
/** @internal */
export const GetConfigurationResponseBody2$outboundSchema = z.object({
    projectSelection: ProjectSelection$outboundSchema,
    notification: z.lazy(() => ResponseBodyNotification$outboundSchema),
    transferRequest: z.union([
        z.lazy(() => TransferRequest1$outboundSchema),
        z.lazy(() => TransferRequest2$outboundSchema),
    ]),
    projects: z.array(z.string()).optional(),
    completedAt: z.number().optional(),
    createdAt: z.number(),
    id: z.string(),
    integrationId: z.string(),
    ownerId: z.string(),
    source: GetConfigurationResponseBodyIntegrationsSource$outboundSchema
        .optional(),
    slug: z.string(),
    teamId: z.nullable(z.string()).optional(),
    type: GetConfigurationResponseBodyIntegrationsType$outboundSchema,
    updatedAt: z.number(),
    userId: z.string(),
    scopes: z.array(z.string()),
    disabledAt: z.number().optional(),
    deletedAt: z.nullable(z.number()).optional(),
    deleteRequestedAt: z.nullable(z.number()).optional(),
    disabledReason: GetConfigurationResponseBodyIntegrationsDisabledReason$outboundSchema
        .optional(),
    installationType: GetConfigurationResponseBodyIntegrationsInstallationType$outboundSchema
        .optional(),
    canConfigureOpenTelemetry: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetConfigurationResponseBody2$;
(function (GetConfigurationResponseBody2$) {
    /** @deprecated use `GetConfigurationResponseBody2$inboundSchema` instead. */
    GetConfigurationResponseBody2$.inboundSchema = GetConfigurationResponseBody2$inboundSchema;
    /** @deprecated use `GetConfigurationResponseBody2$outboundSchema` instead. */
    GetConfigurationResponseBody2$.outboundSchema = GetConfigurationResponseBody2$outboundSchema;
})(GetConfigurationResponseBody2$ || (GetConfigurationResponseBody2$ = {}));
export function getConfigurationResponseBody2ToJSON(getConfigurationResponseBody2) {
    return JSON.stringify(GetConfigurationResponseBody2$outboundSchema.parse(getConfigurationResponseBody2));
}
export function getConfigurationResponseBody2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetConfigurationResponseBody2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetConfigurationResponseBody2' from JSON`);
}
/** @internal */
export const GetConfigurationResponseBodySource$inboundSchema = z.nativeEnum(GetConfigurationResponseBodySource);
/** @internal */
export const GetConfigurationResponseBodySource$outboundSchema = GetConfigurationResponseBodySource$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetConfigurationResponseBodySource$;
(function (GetConfigurationResponseBodySource$) {
    /** @deprecated use `GetConfigurationResponseBodySource$inboundSchema` instead. */
    GetConfigurationResponseBodySource$.inboundSchema = GetConfigurationResponseBodySource$inboundSchema;
    /** @deprecated use `GetConfigurationResponseBodySource$outboundSchema` instead. */
    GetConfigurationResponseBodySource$.outboundSchema = GetConfigurationResponseBodySource$outboundSchema;
})(GetConfigurationResponseBodySource$ || (GetConfigurationResponseBodySource$ = {}));
/** @internal */
export const GetConfigurationResponseBodyType$inboundSchema = z.nativeEnum(GetConfigurationResponseBodyType);
/** @internal */
export const GetConfigurationResponseBodyType$outboundSchema = GetConfigurationResponseBodyType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetConfigurationResponseBodyType$;
(function (GetConfigurationResponseBodyType$) {
    /** @deprecated use `GetConfigurationResponseBodyType$inboundSchema` instead. */
    GetConfigurationResponseBodyType$.inboundSchema = GetConfigurationResponseBodyType$inboundSchema;
    /** @deprecated use `GetConfigurationResponseBodyType$outboundSchema` instead. */
    GetConfigurationResponseBodyType$.outboundSchema = GetConfigurationResponseBodyType$outboundSchema;
})(GetConfigurationResponseBodyType$ || (GetConfigurationResponseBodyType$ = {}));
/** @internal */
export const GetConfigurationResponseBodyDisabledReason$inboundSchema = z
    .nativeEnum(GetConfigurationResponseBodyDisabledReason);
/** @internal */
export const GetConfigurationResponseBodyDisabledReason$outboundSchema = GetConfigurationResponseBodyDisabledReason$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetConfigurationResponseBodyDisabledReason$;
(function (GetConfigurationResponseBodyDisabledReason$) {
    /** @deprecated use `GetConfigurationResponseBodyDisabledReason$inboundSchema` instead. */
    GetConfigurationResponseBodyDisabledReason$.inboundSchema = GetConfigurationResponseBodyDisabledReason$inboundSchema;
    /** @deprecated use `GetConfigurationResponseBodyDisabledReason$outboundSchema` instead. */
    GetConfigurationResponseBodyDisabledReason$.outboundSchema = GetConfigurationResponseBodyDisabledReason$outboundSchema;
})(GetConfigurationResponseBodyDisabledReason$ || (GetConfigurationResponseBodyDisabledReason$ = {}));
/** @internal */
export const GetConfigurationResponseBodyInstallationType$inboundSchema = z
    .nativeEnum(GetConfigurationResponseBodyInstallationType);
/** @internal */
export const GetConfigurationResponseBodyInstallationType$outboundSchema = GetConfigurationResponseBodyInstallationType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetConfigurationResponseBodyInstallationType$;
(function (GetConfigurationResponseBodyInstallationType$) {
    /** @deprecated use `GetConfigurationResponseBodyInstallationType$inboundSchema` instead. */
    GetConfigurationResponseBodyInstallationType$.inboundSchema = GetConfigurationResponseBodyInstallationType$inboundSchema;
    /** @deprecated use `GetConfigurationResponseBodyInstallationType$outboundSchema` instead. */
    GetConfigurationResponseBodyInstallationType$.outboundSchema = GetConfigurationResponseBodyInstallationType$outboundSchema;
})(GetConfigurationResponseBodyInstallationType$ || (GetConfigurationResponseBodyInstallationType$ = {}));
/** @internal */
export const GetConfigurationResponseBody1$inboundSchema = z.object({
    completedAt: z.number().optional(),
    createdAt: z.number(),
    id: z.string(),
    integrationId: z.string(),
    ownerId: z.string(),
    projects: z.array(z.string()).optional(),
    source: GetConfigurationResponseBodySource$inboundSchema.optional(),
    slug: z.string(),
    teamId: z.nullable(z.string()).optional(),
    type: GetConfigurationResponseBodyType$inboundSchema,
    updatedAt: z.number(),
    userId: z.string(),
    scopes: z.array(z.string()),
    disabledAt: z.number().optional(),
    deletedAt: z.nullable(z.number()).optional(),
    deleteRequestedAt: z.nullable(z.number()).optional(),
    disabledReason: GetConfigurationResponseBodyDisabledReason$inboundSchema
        .optional(),
    installationType: GetConfigurationResponseBodyInstallationType$inboundSchema
        .optional(),
});
/** @internal */
export const GetConfigurationResponseBody1$outboundSchema = z.object({
    completedAt: z.number().optional(),
    createdAt: z.number(),
    id: z.string(),
    integrationId: z.string(),
    ownerId: z.string(),
    projects: z.array(z.string()).optional(),
    source: GetConfigurationResponseBodySource$outboundSchema.optional(),
    slug: z.string(),
    teamId: z.nullable(z.string()).optional(),
    type: GetConfigurationResponseBodyType$outboundSchema,
    updatedAt: z.number(),
    userId: z.string(),
    scopes: z.array(z.string()),
    disabledAt: z.number().optional(),
    deletedAt: z.nullable(z.number()).optional(),
    deleteRequestedAt: z.nullable(z.number()).optional(),
    disabledReason: GetConfigurationResponseBodyDisabledReason$outboundSchema
        .optional(),
    installationType: GetConfigurationResponseBodyInstallationType$outboundSchema
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetConfigurationResponseBody1$;
(function (GetConfigurationResponseBody1$) {
    /** @deprecated use `GetConfigurationResponseBody1$inboundSchema` instead. */
    GetConfigurationResponseBody1$.inboundSchema = GetConfigurationResponseBody1$inboundSchema;
    /** @deprecated use `GetConfigurationResponseBody1$outboundSchema` instead. */
    GetConfigurationResponseBody1$.outboundSchema = GetConfigurationResponseBody1$outboundSchema;
})(GetConfigurationResponseBody1$ || (GetConfigurationResponseBody1$ = {}));
export function getConfigurationResponseBody1ToJSON(getConfigurationResponseBody1) {
    return JSON.stringify(GetConfigurationResponseBody1$outboundSchema.parse(getConfigurationResponseBody1));
}
export function getConfigurationResponseBody1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetConfigurationResponseBody1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetConfigurationResponseBody1' from JSON`);
}
/** @internal */
export const GetConfigurationResponseBody$inboundSchema = z.union([
    z.lazy(() => GetConfigurationResponseBody2$inboundSchema),
    z.lazy(() => GetConfigurationResponseBody1$inboundSchema),
]);
/** @internal */
export const GetConfigurationResponseBody$outboundSchema = z.union([
    z.lazy(() => GetConfigurationResponseBody2$outboundSchema),
    z.lazy(() => GetConfigurationResponseBody1$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetConfigurationResponseBody$;
(function (GetConfigurationResponseBody$) {
    /** @deprecated use `GetConfigurationResponseBody$inboundSchema` instead. */
    GetConfigurationResponseBody$.inboundSchema = GetConfigurationResponseBody$inboundSchema;
    /** @deprecated use `GetConfigurationResponseBody$outboundSchema` instead. */
    GetConfigurationResponseBody$.outboundSchema = GetConfigurationResponseBody$outboundSchema;
})(GetConfigurationResponseBody$ || (GetConfigurationResponseBody$ = {}));
export function getConfigurationResponseBodyToJSON(getConfigurationResponseBody) {
    return JSON.stringify(GetConfigurationResponseBody$outboundSchema.parse(getConfigurationResponseBody));
}
export function getConfigurationResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetConfigurationResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetConfigurationResponseBody' from JSON`);
}
//# sourceMappingURL=getconfigurationop.js.map