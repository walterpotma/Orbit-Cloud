/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
export const GetEdgeConfigPurposeEdgeConfigType = {
    Experimentation: "experimentation",
};
export const GetEdgeConfigPurposeType = {
    Flags: "flags",
};
/** @internal */
export const GetEdgeConfigRequest$inboundSchema = z.object({
    edgeConfigId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/** @internal */
export const GetEdgeConfigRequest$outboundSchema = z.object({
    edgeConfigId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetEdgeConfigRequest$;
(function (GetEdgeConfigRequest$) {
    /** @deprecated use `GetEdgeConfigRequest$inboundSchema` instead. */
    GetEdgeConfigRequest$.inboundSchema = GetEdgeConfigRequest$inboundSchema;
    /** @deprecated use `GetEdgeConfigRequest$outboundSchema` instead. */
    GetEdgeConfigRequest$.outboundSchema = GetEdgeConfigRequest$outboundSchema;
})(GetEdgeConfigRequest$ || (GetEdgeConfigRequest$ = {}));
export function getEdgeConfigRequestToJSON(getEdgeConfigRequest) {
    return JSON.stringify(GetEdgeConfigRequest$outboundSchema.parse(getEdgeConfigRequest));
}
export function getEdgeConfigRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetEdgeConfigRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetEdgeConfigRequest' from JSON`);
}
/** @internal */
export const GetEdgeConfigTransfer$inboundSchema = z.object({
    fromAccountId: z.string(),
    startedAt: z.number(),
    doneAt: z.nullable(z.number()),
});
/** @internal */
export const GetEdgeConfigTransfer$outboundSchema = z.object({
    fromAccountId: z.string(),
    startedAt: z.number(),
    doneAt: z.nullable(z.number()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetEdgeConfigTransfer$;
(function (GetEdgeConfigTransfer$) {
    /** @deprecated use `GetEdgeConfigTransfer$inboundSchema` instead. */
    GetEdgeConfigTransfer$.inboundSchema = GetEdgeConfigTransfer$inboundSchema;
    /** @deprecated use `GetEdgeConfigTransfer$outboundSchema` instead. */
    GetEdgeConfigTransfer$.outboundSchema = GetEdgeConfigTransfer$outboundSchema;
})(GetEdgeConfigTransfer$ || (GetEdgeConfigTransfer$ = {}));
export function getEdgeConfigTransferToJSON(getEdgeConfigTransfer) {
    return JSON.stringify(GetEdgeConfigTransfer$outboundSchema.parse(getEdgeConfigTransfer));
}
export function getEdgeConfigTransferFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetEdgeConfigTransfer$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetEdgeConfigTransfer' from JSON`);
}
/** @internal */
export const GetEdgeConfigSchema$inboundSchema = z.object({});
/** @internal */
export const GetEdgeConfigSchema$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetEdgeConfigSchema$;
(function (GetEdgeConfigSchema$) {
    /** @deprecated use `GetEdgeConfigSchema$inboundSchema` instead. */
    GetEdgeConfigSchema$.inboundSchema = GetEdgeConfigSchema$inboundSchema;
    /** @deprecated use `GetEdgeConfigSchema$outboundSchema` instead. */
    GetEdgeConfigSchema$.outboundSchema = GetEdgeConfigSchema$outboundSchema;
})(GetEdgeConfigSchema$ || (GetEdgeConfigSchema$ = {}));
export function getEdgeConfigSchemaToJSON(getEdgeConfigSchema) {
    return JSON.stringify(GetEdgeConfigSchema$outboundSchema.parse(getEdgeConfigSchema));
}
export function getEdgeConfigSchemaFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetEdgeConfigSchema$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetEdgeConfigSchema' from JSON`);
}
/** @internal */
export const GetEdgeConfigPurposeEdgeConfigType$inboundSchema = z.nativeEnum(GetEdgeConfigPurposeEdgeConfigType);
/** @internal */
export const GetEdgeConfigPurposeEdgeConfigType$outboundSchema = GetEdgeConfigPurposeEdgeConfigType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetEdgeConfigPurposeEdgeConfigType$;
(function (GetEdgeConfigPurposeEdgeConfigType$) {
    /** @deprecated use `GetEdgeConfigPurposeEdgeConfigType$inboundSchema` instead. */
    GetEdgeConfigPurposeEdgeConfigType$.inboundSchema = GetEdgeConfigPurposeEdgeConfigType$inboundSchema;
    /** @deprecated use `GetEdgeConfigPurposeEdgeConfigType$outboundSchema` instead. */
    GetEdgeConfigPurposeEdgeConfigType$.outboundSchema = GetEdgeConfigPurposeEdgeConfigType$outboundSchema;
})(GetEdgeConfigPurposeEdgeConfigType$ || (GetEdgeConfigPurposeEdgeConfigType$ = {}));
/** @internal */
export const GetEdgeConfigPurpose2$inboundSchema = z.object({
    type: GetEdgeConfigPurposeEdgeConfigType$inboundSchema,
    resourceId: z.string(),
});
/** @internal */
export const GetEdgeConfigPurpose2$outboundSchema = z.object({
    type: GetEdgeConfigPurposeEdgeConfigType$outboundSchema,
    resourceId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetEdgeConfigPurpose2$;
(function (GetEdgeConfigPurpose2$) {
    /** @deprecated use `GetEdgeConfigPurpose2$inboundSchema` instead. */
    GetEdgeConfigPurpose2$.inboundSchema = GetEdgeConfigPurpose2$inboundSchema;
    /** @deprecated use `GetEdgeConfigPurpose2$outboundSchema` instead. */
    GetEdgeConfigPurpose2$.outboundSchema = GetEdgeConfigPurpose2$outboundSchema;
})(GetEdgeConfigPurpose2$ || (GetEdgeConfigPurpose2$ = {}));
export function getEdgeConfigPurpose2ToJSON(getEdgeConfigPurpose2) {
    return JSON.stringify(GetEdgeConfigPurpose2$outboundSchema.parse(getEdgeConfigPurpose2));
}
export function getEdgeConfigPurpose2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetEdgeConfigPurpose2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetEdgeConfigPurpose2' from JSON`);
}
/** @internal */
export const GetEdgeConfigPurposeType$inboundSchema = z.nativeEnum(GetEdgeConfigPurposeType);
/** @internal */
export const GetEdgeConfigPurposeType$outboundSchema = GetEdgeConfigPurposeType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetEdgeConfigPurposeType$;
(function (GetEdgeConfigPurposeType$) {
    /** @deprecated use `GetEdgeConfigPurposeType$inboundSchema` instead. */
    GetEdgeConfigPurposeType$.inboundSchema = GetEdgeConfigPurposeType$inboundSchema;
    /** @deprecated use `GetEdgeConfigPurposeType$outboundSchema` instead. */
    GetEdgeConfigPurposeType$.outboundSchema = GetEdgeConfigPurposeType$outboundSchema;
})(GetEdgeConfigPurposeType$ || (GetEdgeConfigPurposeType$ = {}));
/** @internal */
export const GetEdgeConfigPurpose1$inboundSchema = z.object({
    type: GetEdgeConfigPurposeType$inboundSchema,
    projectId: z.string(),
});
/** @internal */
export const GetEdgeConfigPurpose1$outboundSchema = z.object({
    type: GetEdgeConfigPurposeType$outboundSchema,
    projectId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetEdgeConfigPurpose1$;
(function (GetEdgeConfigPurpose1$) {
    /** @deprecated use `GetEdgeConfigPurpose1$inboundSchema` instead. */
    GetEdgeConfigPurpose1$.inboundSchema = GetEdgeConfigPurpose1$inboundSchema;
    /** @deprecated use `GetEdgeConfigPurpose1$outboundSchema` instead. */
    GetEdgeConfigPurpose1$.outboundSchema = GetEdgeConfigPurpose1$outboundSchema;
})(GetEdgeConfigPurpose1$ || (GetEdgeConfigPurpose1$ = {}));
export function getEdgeConfigPurpose1ToJSON(getEdgeConfigPurpose1) {
    return JSON.stringify(GetEdgeConfigPurpose1$outboundSchema.parse(getEdgeConfigPurpose1));
}
export function getEdgeConfigPurpose1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetEdgeConfigPurpose1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetEdgeConfigPurpose1' from JSON`);
}
/** @internal */
export const GetEdgeConfigPurpose$inboundSchema = z.union([
    z.lazy(() => GetEdgeConfigPurpose1$inboundSchema),
    z.lazy(() => GetEdgeConfigPurpose2$inboundSchema),
]);
/** @internal */
export const GetEdgeConfigPurpose$outboundSchema = z.union([
    z.lazy(() => GetEdgeConfigPurpose1$outboundSchema),
    z.lazy(() => GetEdgeConfigPurpose2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetEdgeConfigPurpose$;
(function (GetEdgeConfigPurpose$) {
    /** @deprecated use `GetEdgeConfigPurpose$inboundSchema` instead. */
    GetEdgeConfigPurpose$.inboundSchema = GetEdgeConfigPurpose$inboundSchema;
    /** @deprecated use `GetEdgeConfigPurpose$outboundSchema` instead. */
    GetEdgeConfigPurpose$.outboundSchema = GetEdgeConfigPurpose$outboundSchema;
})(GetEdgeConfigPurpose$ || (GetEdgeConfigPurpose$ = {}));
export function getEdgeConfigPurposeToJSON(getEdgeConfigPurpose) {
    return JSON.stringify(GetEdgeConfigPurpose$outboundSchema.parse(getEdgeConfigPurpose));
}
export function getEdgeConfigPurposeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetEdgeConfigPurpose$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetEdgeConfigPurpose' from JSON`);
}
/** @internal */
export const GetEdgeConfigResponseBody$inboundSchema = z.object({
    createdAt: z.number(),
    updatedAt: z.number(),
    deletedAt: z.number().optional(),
    id: z.string(),
    slug: z.string(),
    ownerId: z.string(),
    digest: z.string(),
    transfer: z.lazy(() => GetEdgeConfigTransfer$inboundSchema).optional(),
    schema: z.lazy(() => GetEdgeConfigSchema$inboundSchema).optional(),
    purpose: z.union([
        z.lazy(() => GetEdgeConfigPurpose1$inboundSchema),
        z.lazy(() => GetEdgeConfigPurpose2$inboundSchema),
    ]).optional(),
    syncedToDynamoAt: z.number().optional(),
    sizeInBytes: z.number(),
    itemCount: z.number(),
});
/** @internal */
export const GetEdgeConfigResponseBody$outboundSchema = z.object({
    createdAt: z.number(),
    updatedAt: z.number(),
    deletedAt: z.number().optional(),
    id: z.string(),
    slug: z.string(),
    ownerId: z.string(),
    digest: z.string(),
    transfer: z.lazy(() => GetEdgeConfigTransfer$outboundSchema).optional(),
    schema: z.lazy(() => GetEdgeConfigSchema$outboundSchema).optional(),
    purpose: z.union([
        z.lazy(() => GetEdgeConfigPurpose1$outboundSchema),
        z.lazy(() => GetEdgeConfigPurpose2$outboundSchema),
    ]).optional(),
    syncedToDynamoAt: z.number().optional(),
    sizeInBytes: z.number(),
    itemCount: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetEdgeConfigResponseBody$;
(function (GetEdgeConfigResponseBody$) {
    /** @deprecated use `GetEdgeConfigResponseBody$inboundSchema` instead. */
    GetEdgeConfigResponseBody$.inboundSchema = GetEdgeConfigResponseBody$inboundSchema;
    /** @deprecated use `GetEdgeConfigResponseBody$outboundSchema` instead. */
    GetEdgeConfigResponseBody$.outboundSchema = GetEdgeConfigResponseBody$outboundSchema;
})(GetEdgeConfigResponseBody$ || (GetEdgeConfigResponseBody$ = {}));
export function getEdgeConfigResponseBodyToJSON(getEdgeConfigResponseBody) {
    return JSON.stringify(GetEdgeConfigResponseBody$outboundSchema.parse(getEdgeConfigResponseBody));
}
export function getEdgeConfigResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetEdgeConfigResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetEdgeConfigResponseBody' from JSON`);
}
//# sourceMappingURL=getedgeconfigop.js.map