/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/**
 * The type of entity.
 */
export const UserEventType = {
    Author: "author",
    BitbucketLogin: "bitbucket_login",
    Bold: "bold",
    DeploymentHost: "deployment_host",
    DnsRecord: "dns_record",
    GitLink: "git_link",
    GithubLogin: "github_login",
    GitlabLogin: "gitlab_login",
    HookName: "hook_name",
    Integration: "integration",
    EdgeConfig: "edge-config",
    Flag: "flag",
    FlagsSegment: "flags-segment",
    FlagsSettings: "flags-settings",
    Link: "link",
    ProjectName: "project_name",
    ScalingRules: "scaling_rules",
    EnvVarName: "env_var_name",
    Target: "target",
    Store: "store",
    System: "system",
};
export const UserEventPrincipalType = {
    App: "app",
};
export const PrincipalType = {
    User: "user",
};
export const UserEventViaType = {
    App: "app",
};
export const ViaType = {
    User: "user",
};
export const GrantType = {
    AuthorizationCode: "authorization_code",
    RefreshToken: "refresh_token",
    UrnIetfParamsOauthGrantTypeDeviceCode: "urn:ietf:params:oauth:grant-type:device_code",
    ClientCredentials: "client_credentials",
};
export const AuthMethod = {
    Email: "email",
    Saml: "saml",
    App: "app",
    Github: "github",
    Gitlab: "gitlab",
    Bitbucket: "bitbucket",
    Manual: "manual",
    Passkey: "passkey",
    Otp: "otp",
    Sms: "sms",
    Invite: "invite",
    Google: "google",
};
export const Tier = {
    Pro: "pro",
    Plus: "plus",
};
export const UserEventPayload144Action = {
    Enable: "enable",
    Disable: "disable",
};
export const UserEventPayload138Role = {
    Admin: "ADMIN",
    ProjectDeveloper: "PROJECT_DEVELOPER",
    ProjectViewer: "PROJECT_VIEWER",
};
export const UserEventPayload137Role = {
    Admin: "ADMIN",
    ProjectDeveloper: "PROJECT_DEVELOPER",
    ProjectViewer: "PROJECT_VIEWER",
};
export const PayloadPreviousRole = {
    Admin: "ADMIN",
    ProjectDeveloper: "PROJECT_DEVELOPER",
    ProjectViewer: "PROJECT_VIEWER",
};
export const UserEventPayloadRole = {
    Admin: "ADMIN",
    ProjectDeveloper: "PROJECT_DEVELOPER",
    ProjectViewer: "PROJECT_VIEWER",
};
export const PayloadRole = {
    Admin: "ADMIN",
    ProjectDeveloper: "PROJECT_DEVELOPER",
    ProjectViewer: "PROJECT_VIEWER",
};
export const StoreType = {
    Redis: "redis",
    Postgres: "postgres",
};
export const UserEventPayloadType = {
    Redis: "redis",
    Postgres: "postgres",
    EdgeConfig: "edge-config",
    Blob: "blob",
    Integration: "integration",
};
/**
 * The budget type
 */
export const UserEventPayload104Type = {
    Fixed: "fixed",
};
/**
 * The acive pricing plan the team is billed with
 */
export const PayloadPricingPlan = {
    Plus: "plus",
    Legacy: "legacy",
    Unbundled: "unbundled",
};
/**
 * The budget type
 */
export const UserEventPayload103Type = {
    Fixed: "fixed",
};
/**
 * The acive pricing plan the team is billed with
 */
export const PricingPlan = {
    Plus: "plus",
    Legacy: "legacy",
    Unbundled: "unbundled",
};
export const EnvId2 = {
    Preview: "preview",
    Production: "production",
};
export const UserEventEnvId2 = {
    Preview: "preview",
    Production: "production",
};
export const UserEventPayload85Action = {
    Enabled: "enabled",
    Disabled: "disabled",
    Regenerated: "regenerated",
};
export const TrustedIps = {
    All: "all",
    Preview: "preview",
    ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews",
    AllExceptCustomDomains: "all_except_custom_domains",
    Production: "production",
};
export const OldTrustedIps = {
    All: "all",
    Preview: "preview",
    ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews",
    AllExceptCustomDomains: "all_except_custom_domains",
    Production: "production",
};
export const PasswordProtection2 = {
    All: "all",
    Preview: "preview",
    ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews",
    AllExceptCustomDomains: "all_except_custom_domains",
};
export const PasswordProtectionDeploymentType = {
    All: "all",
    Preview: "preview",
    ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews",
    AllExceptCustomDomains: "all_except_custom_domains",
};
export const OldPasswordProtection2 = {
    All: "all",
    Preview: "preview",
    ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews",
    AllExceptCustomDomains: "all_except_custom_domains",
};
export const OldPasswordProtectionDeploymentType = {
    All: "all",
    Preview: "preview",
    ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews",
    AllExceptCustomDomains: "all_except_custom_domains",
};
export const SsoProtection2 = {
    All: "all",
    Preview: "preview",
    ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews",
    AllExceptCustomDomains: "all_except_custom_domains",
};
export const DeploymentType = {
    All: "all",
    Preview: "preview",
    ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews",
    AllExceptCustomDomains: "all_except_custom_domains",
};
export const OldSsoProtection2 = {
    All: "all",
    Preview: "preview",
    ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews",
    AllExceptCustomDomains: "all_except_custom_domains",
};
export const OldSsoProtectionDeploymentType = {
    All: "all",
    Preview: "preview",
    ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews",
    AllExceptCustomDomains: "all_except_custom_domains",
};
export const UserEventPayload76Role = {
    Owner: "OWNER",
    Member: "MEMBER",
    Developer: "DEVELOPER",
    Security: "SECURITY",
    Billing: "BILLING",
    Viewer: "VIEWER",
    ViewerForPlus: "VIEWER_FOR_PLUS",
    Contributor: "CONTRIBUTOR",
};
export const PayloadOrigin = {
    Teams: "teams",
    Saml: "saml",
    Link: "link",
    Github: "github",
    Gitlab: "gitlab",
    Bitbucket: "bitbucket",
    Mail: "mail",
    Import: "import",
    Dsync: "dsync",
    Feedback: "feedback",
    OrganizationTeams: "organization-teams",
};
export const PayloadName = {
    Iphone: "iphone",
    Ipad: "ipad",
    Ipod: "ipod",
    Chrome: "chrome",
    Firefox: "firefox",
    Mozilla: "mozilla",
    Unknown: "unknown",
};
export const UserEventPayloadName = {
    Unknown: "unknown",
    Darwin: "darwin",
    Win32: "win32",
    Win: "win",
    Windows: "windows",
    Linux: "linux",
    Freebsd: "freebsd",
    Sunos: "sunos",
    Mac: "mac",
    Ios: "ios",
    Android: "android",
    MacOS: "Mac OS",
    OsX: "OS X",
};
export const UserEventPayload64Action = {
    HardBlocked: "hard-blocked",
    SoftBlocked: "soft-blocked",
    Unblocked: "unblocked",
};
export const Plan = {
    Pro: "pro",
    Enterprise: "enterprise",
    Hobby: "hobby",
};
export const UserEventCredentialsType = {
    GithubOauthCustomHost: "github-oauth-custom-host",
};
export const CredentialsType = {
    Gitlab: "gitlab",
    Bitbucket: "bitbucket",
    Google: "google",
    GithubOauth: "github-oauth",
    GithubOauthLimited: "github-oauth-limited",
};
export const PayloadImportFlowGitProvider = {
    Github: "github",
    Gitlab: "gitlab",
    Bitbucket: "bitbucket",
    GithubLimited: "github-limited",
    GithubCustomHost: "github-custom-host",
};
export const PayloadPurchaseType = {
    Enhanced: "enhanced",
    Turbo: "turbo",
};
export const PayloadViewPreference = {
    Cards: "cards",
    List: "list",
};
export const PayloadFavoritesViewPreference = {
    Open: "open",
    Closed: "closed",
};
export const PayloadRecentsViewPreference = {
    Open: "open",
    Closed: "closed",
};
export const UserEventPayload64Name = {
    String: "string",
};
export const PayloadReason = {
    SubscriptionCanceled: "SUBSCRIPTION_CANCELED",
    SubscriptionExpired: "SUBSCRIPTION_EXPIRED",
    UnpaidInvoice: "UNPAID_INVOICE",
    EnterpriseTrialEnded: "ENTERPRISE_TRIAL_ENDED",
    FairUseLimitsExceeded: "FAIR_USE_LIMITS_EXCEEDED",
    BlockedForPlatformAbuse: "BLOCKED_FOR_PLATFORM_ABUSE",
};
export const PayloadBlockedDueToOverageType = {
    AnalyticsUsage: "analyticsUsage",
    Artifacts: "artifacts",
    Bandwidth: "bandwidth",
    BlobTotalAdvancedRequests: "blobTotalAdvancedRequests",
    BlobTotalAvgSizeInBytes: "blobTotalAvgSizeInBytes",
    BlobTotalGetResponseObjectSizeInBytes: "blobTotalGetResponseObjectSizeInBytes",
    BlobTotalSimpleRequests: "blobTotalSimpleRequests",
    ConnectDataTransfer: "connectDataTransfer",
    DataCacheRead: "dataCacheRead",
    DataCacheWrite: "dataCacheWrite",
    EdgeConfigRead: "edgeConfigRead",
    EdgeConfigWrite: "edgeConfigWrite",
    EdgeFunctionExecutionUnits: "edgeFunctionExecutionUnits",
    EdgeMiddlewareInvocations: "edgeMiddlewareInvocations",
    EdgeRequestAdditionalCpuDuration: "edgeRequestAdditionalCpuDuration",
    EdgeRequest: "edgeRequest",
    ElasticConcurrencyBuildSlots: "elasticConcurrencyBuildSlots",
    FastDataTransfer: "fastDataTransfer",
    FastOriginTransfer: "fastOriginTransfer",
    FluidCpuDuration: "fluidCpuDuration",
    FluidDuration: "fluidDuration",
    FunctionDuration: "functionDuration",
    FunctionInvocation: "functionInvocation",
    ImageOptimizationCacheRead: "imageOptimizationCacheRead",
    ImageOptimizationCacheWrite: "imageOptimizationCacheWrite",
    ImageOptimizationTransformation: "imageOptimizationTransformation",
    LogDrainsVolume: "logDrainsVolume",
    MonitoringMetric: "monitoringMetric",
    BlobDataTransfer: "blobDataTransfer",
    ObservabilityEvent: "observabilityEvent",
    OnDemandConcurrencyMinutes: "onDemandConcurrencyMinutes",
    RuntimeCacheRead: "runtimeCacheRead",
    RuntimeCacheWrite: "runtimeCacheWrite",
    ServerlessFunctionExecution: "serverlessFunctionExecution",
    SourceImages: "sourceImages",
    WafOwaspExcessBytes: "wafOwaspExcessBytes",
    WafOwaspRequests: "wafOwaspRequests",
    WafRateLimitRequest: "wafRateLimitRequest",
    WebAnalyticsEvent: "webAnalyticsEvent",
};
export const UserEventPayload64Role = {
    Owner: "OWNER",
    Member: "MEMBER",
    Developer: "DEVELOPER",
    Security: "SECURITY",
    Billing: "BILLING",
    Viewer: "VIEWER",
    ViewerForPlus: "VIEWER_FOR_PLUS",
    Contributor: "CONTRIBUTOR",
};
export const PayloadTeamRoles = {
    Owner: "OWNER",
    Member: "MEMBER",
    Developer: "DEVELOPER",
    Security: "SECURITY",
    Billing: "BILLING",
    Viewer: "VIEWER",
    ViewerForPlus: "VIEWER_FOR_PLUS",
    Contributor: "CONTRIBUTOR",
};
export const PayloadTeamPermissions = {
    IntegrationManager: "IntegrationManager",
    CreateProject: "CreateProject",
    FullProductionDeployment: "FullProductionDeployment",
    UsageViewer: "UsageViewer",
    EnvVariableManager: "EnvVariableManager",
    EnvironmentManager: "EnvironmentManager",
    V0Builder: "V0Builder",
    V0Chatter: "V0Chatter",
    V0Viewer: "V0Viewer",
};
export const UserEventPayloadOrigin = {
    Teams: "teams",
    Saml: "saml",
    Link: "link",
    Github: "github",
    Gitlab: "gitlab",
    Bitbucket: "bitbucket",
    Mail: "mail",
    Import: "import",
    Dsync: "dsync",
    Feedback: "feedback",
    OrganizationTeams: "organization-teams",
};
export const UserEventPayload64Type = {
    User: "user",
};
/**
 * Whether the Vercel Toolbar is enabled for preview deployments.
 */
export const PayloadEnablePreviewFeedback = {
    Default: "default",
    On: "on",
    Off: "off",
    OnForce: "on-force",
    OffForce: "off-force",
    DefaultForce: "default-force",
};
export const BlockReason = {
    AdminOverride: "admin_override",
    LimitsExceeded: "limits_exceeded",
};
export const PayloadBlockReason = {
    AdminOverride: "admin_override",
    LimitsExceeded: "limits_exceeded",
};
export const BlockType = {
    Soft: "soft",
    Hard: "hard",
};
export const UserEventPayloadBlockReason = {
    AdminOverride: "admin_override",
    LimitsExceeded: "limits_exceeded",
};
export const PayloadBlockType = {
    Soft: "soft",
    Hard: "hard",
};
export const UserEventPayload64BlockReason = {
    AdminOverride: "admin_override",
    LimitsExceeded: "limits_exceeded",
};
export const UserEventPayload64NewOwnerBlockReason = {
    AdminOverride: "admin_override",
    LimitsExceeded: "limits_exceeded",
};
export const UserEventPayload64NewOwnerFeatureBlocksBlockReason = {
    AdminOverride: "admin_override",
    LimitsExceeded: "limits_exceeded",
};
export const UserEventPayload64NewOwnerFeatureBlocksBlobBlockReason = {
    AdminOverride: "admin_override",
    LimitsExceeded: "limits_exceeded",
};
export const OverageReason = {
    AnalyticsUsage: "analyticsUsage",
    Artifacts: "artifacts",
    Bandwidth: "bandwidth",
    BlobTotalAdvancedRequests: "blobTotalAdvancedRequests",
    BlobTotalAvgSizeInBytes: "blobTotalAvgSizeInBytes",
    BlobTotalGetResponseObjectSizeInBytes: "blobTotalGetResponseObjectSizeInBytes",
    BlobTotalSimpleRequests: "blobTotalSimpleRequests",
    ConnectDataTransfer: "connectDataTransfer",
    DataCacheRead: "dataCacheRead",
    DataCacheWrite: "dataCacheWrite",
    EdgeConfigRead: "edgeConfigRead",
    EdgeConfigWrite: "edgeConfigWrite",
    EdgeFunctionExecutionUnits: "edgeFunctionExecutionUnits",
    EdgeMiddlewareInvocations: "edgeMiddlewareInvocations",
    EdgeRequestAdditionalCpuDuration: "edgeRequestAdditionalCpuDuration",
    EdgeRequest: "edgeRequest",
    ElasticConcurrencyBuildSlots: "elasticConcurrencyBuildSlots",
    FastDataTransfer: "fastDataTransfer",
    FastOriginTransfer: "fastOriginTransfer",
    FluidCpuDuration: "fluidCpuDuration",
    FluidDuration: "fluidDuration",
    FunctionDuration: "functionDuration",
    FunctionInvocation: "functionInvocation",
    ImageOptimizationCacheRead: "imageOptimizationCacheRead",
    ImageOptimizationCacheWrite: "imageOptimizationCacheWrite",
    ImageOptimizationTransformation: "imageOptimizationTransformation",
    LogDrainsVolume: "logDrainsVolume",
    MonitoringMetric: "monitoringMetric",
    BlobDataTransfer: "blobDataTransfer",
    ObservabilityEvent: "observabilityEvent",
    OnDemandConcurrencyMinutes: "onDemandConcurrencyMinutes",
    RuntimeCacheRead: "runtimeCacheRead",
    RuntimeCacheWrite: "runtimeCacheWrite",
    ServerlessFunctionExecution: "serverlessFunctionExecution",
    SourceImages: "sourceImages",
    WafOwaspExcessBytes: "wafOwaspExcessBytes",
    WafOwaspRequests: "wafOwaspRequests",
    WafRateLimitRequest: "wafRateLimitRequest",
    WebAnalyticsEvent: "webAnalyticsEvent",
};
export const UserEventPayload64NewOwnerFeatureBlocksPostgresBlockReason = {
    AdminOverride: "admin_override",
    LimitsExceeded: "limits_exceeded",
};
export const PayloadOverageReason = {
    AnalyticsUsage: "analyticsUsage",
    Artifacts: "artifacts",
    Bandwidth: "bandwidth",
    BlobTotalAdvancedRequests: "blobTotalAdvancedRequests",
    BlobTotalAvgSizeInBytes: "blobTotalAvgSizeInBytes",
    BlobTotalGetResponseObjectSizeInBytes: "blobTotalGetResponseObjectSizeInBytes",
    BlobTotalSimpleRequests: "blobTotalSimpleRequests",
    ConnectDataTransfer: "connectDataTransfer",
    DataCacheRead: "dataCacheRead",
    DataCacheWrite: "dataCacheWrite",
    EdgeConfigRead: "edgeConfigRead",
    EdgeConfigWrite: "edgeConfigWrite",
    EdgeFunctionExecutionUnits: "edgeFunctionExecutionUnits",
    EdgeMiddlewareInvocations: "edgeMiddlewareInvocations",
    EdgeRequestAdditionalCpuDuration: "edgeRequestAdditionalCpuDuration",
    EdgeRequest: "edgeRequest",
    ElasticConcurrencyBuildSlots: "elasticConcurrencyBuildSlots",
    FastDataTransfer: "fastDataTransfer",
    FastOriginTransfer: "fastOriginTransfer",
    FluidCpuDuration: "fluidCpuDuration",
    FluidDuration: "fluidDuration",
    FunctionDuration: "functionDuration",
    FunctionInvocation: "functionInvocation",
    ImageOptimizationCacheRead: "imageOptimizationCacheRead",
    ImageOptimizationCacheWrite: "imageOptimizationCacheWrite",
    ImageOptimizationTransformation: "imageOptimizationTransformation",
    LogDrainsVolume: "logDrainsVolume",
    MonitoringMetric: "monitoringMetric",
    BlobDataTransfer: "blobDataTransfer",
    ObservabilityEvent: "observabilityEvent",
    OnDemandConcurrencyMinutes: "onDemandConcurrencyMinutes",
    RuntimeCacheRead: "runtimeCacheRead",
    RuntimeCacheWrite: "runtimeCacheWrite",
    ServerlessFunctionExecution: "serverlessFunctionExecution",
    SourceImages: "sourceImages",
    WafOwaspExcessBytes: "wafOwaspExcessBytes",
    WafOwaspRequests: "wafOwaspRequests",
    WafRateLimitRequest: "wafRateLimitRequest",
    WebAnalyticsEvent: "webAnalyticsEvent",
};
export const UserEventPayload64NewOwnerFeatureBlocksRedisBlockReason = {
    AdminOverride: "admin_override",
    LimitsExceeded: "limits_exceeded",
};
export const UserEventPayloadOverageReason = {
    AnalyticsUsage: "analyticsUsage",
    Artifacts: "artifacts",
    Bandwidth: "bandwidth",
    BlobTotalAdvancedRequests: "blobTotalAdvancedRequests",
    BlobTotalAvgSizeInBytes: "blobTotalAvgSizeInBytes",
    BlobTotalGetResponseObjectSizeInBytes: "blobTotalGetResponseObjectSizeInBytes",
    BlobTotalSimpleRequests: "blobTotalSimpleRequests",
    ConnectDataTransfer: "connectDataTransfer",
    DataCacheRead: "dataCacheRead",
    DataCacheWrite: "dataCacheWrite",
    EdgeConfigRead: "edgeConfigRead",
    EdgeConfigWrite: "edgeConfigWrite",
    EdgeFunctionExecutionUnits: "edgeFunctionExecutionUnits",
    EdgeMiddlewareInvocations: "edgeMiddlewareInvocations",
    EdgeRequestAdditionalCpuDuration: "edgeRequestAdditionalCpuDuration",
    EdgeRequest: "edgeRequest",
    ElasticConcurrencyBuildSlots: "elasticConcurrencyBuildSlots",
    FastDataTransfer: "fastDataTransfer",
    FastOriginTransfer: "fastOriginTransfer",
    FluidCpuDuration: "fluidCpuDuration",
    FluidDuration: "fluidDuration",
    FunctionDuration: "functionDuration",
    FunctionInvocation: "functionInvocation",
    ImageOptimizationCacheRead: "imageOptimizationCacheRead",
    ImageOptimizationCacheWrite: "imageOptimizationCacheWrite",
    ImageOptimizationTransformation: "imageOptimizationTransformation",
    LogDrainsVolume: "logDrainsVolume",
    MonitoringMetric: "monitoringMetric",
    BlobDataTransfer: "blobDataTransfer",
    ObservabilityEvent: "observabilityEvent",
    OnDemandConcurrencyMinutes: "onDemandConcurrencyMinutes",
    RuntimeCacheRead: "runtimeCacheRead",
    RuntimeCacheWrite: "runtimeCacheWrite",
    ServerlessFunctionExecution: "serverlessFunctionExecution",
    SourceImages: "sourceImages",
    WafOwaspExcessBytes: "wafOwaspExcessBytes",
    WafOwaspRequests: "wafOwaspRequests",
    WafRateLimitRequest: "wafRateLimitRequest",
    WebAnalyticsEvent: "webAnalyticsEvent",
};
export const Version = {
    Northstar: "northstar",
};
export const UserEventPayload61Action = {
    Log: "log",
    Challenge: "challenge",
    Deny: "deny",
};
export const UserEventPayloadAction = {
    Log: "log",
    Challenge: "challenge",
    Deny: "deny",
};
/**
 * The type of this cosmos doc instance, if blank, assume secret.
 */
export const UserEventPayload57OldEnvVarType = {
    System: "system",
    Encrypted: "encrypted",
    Plain: "plain",
    Sensitive: "sensitive",
};
/**
 * environments this env variable targets
 */
export const UserEventPayloadTarget = {
    Production: "production",
    Preview: "preview",
    Development: "development",
};
/**
 * The type of this cosmos doc instance, if blank, assume secret.
 */
export const UserEventPayload57Type = {
    System: "system",
    Encrypted: "encrypted",
    Plain: "plain",
    Sensitive: "sensitive",
};
/**
 * environments this env variable targets
 */
export const UserEventPayload57Target = {
    Production: "production",
    Preview: "preview",
    Development: "development",
};
export const OldTarget = {
    Production: "production",
    Preview: "preview",
    Development: "development",
};
export const NewTarget = {
    Production: "production",
    Preview: "preview",
    Development: "development",
};
/**
 * The type of this cosmos doc instance, if blank, assume secret.
 */
export const PayloadType = {
    System: "system",
    Encrypted: "encrypted",
    Plain: "plain",
    Sensitive: "sensitive",
};
/**
 * environments this env variable targets
 */
export const PayloadTarget = {
    Production: "production",
    Preview: "preview",
    Development: "development",
};
export const PayloadAction = {
    Created: "created",
    Removed: "removed",
};
export const NextRole = {
    Admin: "ADMIN",
    ProjectDeveloper: "PROJECT_DEVELOPER",
    ProjectViewer: "PROJECT_VIEWER",
};
export const PreviousRole = {
    Admin: "ADMIN",
    ProjectDeveloper: "PROJECT_DEVELOPER",
    ProjectViewer: "PROJECT_VIEWER",
};
export const Action = {
    Created: "created",
    Updated: "updated",
    Deleted: "deleted",
    Archived: "archived",
    Unarchived: "unarchived",
};
/** @internal */
export const UserEventType$inboundSchema = z.nativeEnum(UserEventType);
/** @internal */
export const UserEventType$outboundSchema = UserEventType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventType$;
(function (UserEventType$) {
    /** @deprecated use `UserEventType$inboundSchema` instead. */
    UserEventType$.inboundSchema = UserEventType$inboundSchema;
    /** @deprecated use `UserEventType$outboundSchema` instead. */
    UserEventType$.outboundSchema = UserEventType$outboundSchema;
})(UserEventType$ || (UserEventType$ = {}));
/** @internal */
export const Entities$inboundSchema = z.object({
    type: UserEventType$inboundSchema,
    start: z.number(),
    end: z.number(),
});
/** @internal */
export const Entities$outboundSchema = z.object({
    type: UserEventType$outboundSchema,
    start: z.number(),
    end: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Entities$;
(function (Entities$) {
    /** @deprecated use `Entities$inboundSchema` instead. */
    Entities$.inboundSchema = Entities$inboundSchema;
    /** @deprecated use `Entities$outboundSchema` instead. */
    Entities$.outboundSchema = Entities$outboundSchema;
})(Entities$ || (Entities$ = {}));
export function entitiesToJSON(entities) {
    return JSON.stringify(Entities$outboundSchema.parse(entities));
}
export function entitiesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Entities$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Entities' from JSON`);
}
/** @internal */
export const User$inboundSchema = z
    .object({
    username: z.string(),
    avatar: z.string(),
    email: z.string(),
    slug: z.string().optional(),
    uid: z.string(),
});
/** @internal */
export const User$outboundSchema = z.object({
    username: z.string(),
    avatar: z.string(),
    email: z.string(),
    slug: z.string().optional(),
    uid: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var User$;
(function (User$) {
    /** @deprecated use `User$inboundSchema` instead. */
    User$.inboundSchema = User$inboundSchema;
    /** @deprecated use `User$outboundSchema` instead. */
    User$.outboundSchema = User$outboundSchema;
})(User$ || (User$ = {}));
export function userToJSON(user) {
    return JSON.stringify(User$outboundSchema.parse(user));
}
export function userFromJSON(jsonString) {
    return safeParse(jsonString, (x) => User$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'User' from JSON`);
}
/** @internal */
export const UserEventPrincipalType$inboundSchema = z.nativeEnum(UserEventPrincipalType);
/** @internal */
export const UserEventPrincipalType$outboundSchema = UserEventPrincipalType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPrincipalType$;
(function (UserEventPrincipalType$) {
    /** @deprecated use `UserEventPrincipalType$inboundSchema` instead. */
    UserEventPrincipalType$.inboundSchema = UserEventPrincipalType$inboundSchema;
    /** @deprecated use `UserEventPrincipalType$outboundSchema` instead. */
    UserEventPrincipalType$.outboundSchema = UserEventPrincipalType$outboundSchema;
})(UserEventPrincipalType$ || (UserEventPrincipalType$ = {}));
/** @internal */
export const Two$inboundSchema = z
    .object({
    type: UserEventPrincipalType$inboundSchema,
    clientId: z.string(),
    name: z.string(),
});
/** @internal */
export const Two$outboundSchema = z
    .object({
    type: UserEventPrincipalType$outboundSchema,
    clientId: z.string(),
    name: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Two$;
(function (Two$) {
    /** @deprecated use `Two$inboundSchema` instead. */
    Two$.inboundSchema = Two$inboundSchema;
    /** @deprecated use `Two$outboundSchema` instead. */
    Two$.outboundSchema = Two$outboundSchema;
})(Two$ || (Two$ = {}));
export function twoToJSON(two) {
    return JSON.stringify(Two$outboundSchema.parse(two));
}
export function twoFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Two$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Two' from JSON`);
}
/** @internal */
export const PrincipalType$inboundSchema = z.nativeEnum(PrincipalType);
/** @internal */
export const PrincipalType$outboundSchema = PrincipalType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PrincipalType$;
(function (PrincipalType$) {
    /** @deprecated use `PrincipalType$inboundSchema` instead. */
    PrincipalType$.inboundSchema = PrincipalType$inboundSchema;
    /** @deprecated use `PrincipalType$outboundSchema` instead. */
    PrincipalType$.outboundSchema = PrincipalType$outboundSchema;
})(PrincipalType$ || (PrincipalType$ = {}));
/** @internal */
export const One$inboundSchema = z
    .object({
    type: PrincipalType$inboundSchema.optional(),
    avatar: z.string(),
    email: z.string(),
    slug: z.string().optional(),
    uid: z.string(),
    username: z.string(),
});
/** @internal */
export const One$outboundSchema = z
    .object({
    type: PrincipalType$outboundSchema.optional(),
    avatar: z.string(),
    email: z.string(),
    slug: z.string().optional(),
    uid: z.string(),
    username: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var One$;
(function (One$) {
    /** @deprecated use `One$inboundSchema` instead. */
    One$.inboundSchema = One$inboundSchema;
    /** @deprecated use `One$outboundSchema` instead. */
    One$.outboundSchema = One$outboundSchema;
})(One$ || (One$ = {}));
export function oneToJSON(one) {
    return JSON.stringify(One$outboundSchema.parse(one));
}
export function oneFromJSON(jsonString) {
    return safeParse(jsonString, (x) => One$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'One' from JSON`);
}
/** @internal */
export const Principal$inboundSchema = z.union([z.lazy(() => One$inboundSchema), z.lazy(() => Two$inboundSchema)]);
/** @internal */
export const Principal$outboundSchema = z.union([
    z.lazy(() => One$outboundSchema),
    z.lazy(() => Two$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Principal$;
(function (Principal$) {
    /** @deprecated use `Principal$inboundSchema` instead. */
    Principal$.inboundSchema = Principal$inboundSchema;
    /** @deprecated use `Principal$outboundSchema` instead. */
    Principal$.outboundSchema = Principal$outboundSchema;
})(Principal$ || (Principal$ = {}));
export function principalToJSON(principal) {
    return JSON.stringify(Principal$outboundSchema.parse(principal));
}
export function principalFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Principal$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Principal' from JSON`);
}
/** @internal */
export const UserEventViaType$inboundSchema = z.nativeEnum(UserEventViaType);
/** @internal */
export const UserEventViaType$outboundSchema = UserEventViaType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventViaType$;
(function (UserEventViaType$) {
    /** @deprecated use `UserEventViaType$inboundSchema` instead. */
    UserEventViaType$.inboundSchema = UserEventViaType$inboundSchema;
    /** @deprecated use `UserEventViaType$outboundSchema` instead. */
    UserEventViaType$.outboundSchema = UserEventViaType$outboundSchema;
})(UserEventViaType$ || (UserEventViaType$ = {}));
/** @internal */
export const Via2$inboundSchema = z
    .object({
    type: UserEventViaType$inboundSchema,
    clientId: z.string(),
    name: z.string(),
});
/** @internal */
export const Via2$outboundSchema = z.object({
    type: UserEventViaType$outboundSchema,
    clientId: z.string(),
    name: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Via2$;
(function (Via2$) {
    /** @deprecated use `Via2$inboundSchema` instead. */
    Via2$.inboundSchema = Via2$inboundSchema;
    /** @deprecated use `Via2$outboundSchema` instead. */
    Via2$.outboundSchema = Via2$outboundSchema;
})(Via2$ || (Via2$ = {}));
export function via2ToJSON(via2) {
    return JSON.stringify(Via2$outboundSchema.parse(via2));
}
export function via2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Via2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Via2' from JSON`);
}
/** @internal */
export const ViaType$inboundSchema = z
    .nativeEnum(ViaType);
/** @internal */
export const ViaType$outboundSchema = ViaType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ViaType$;
(function (ViaType$) {
    /** @deprecated use `ViaType$inboundSchema` instead. */
    ViaType$.inboundSchema = ViaType$inboundSchema;
    /** @deprecated use `ViaType$outboundSchema` instead. */
    ViaType$.outboundSchema = ViaType$outboundSchema;
})(ViaType$ || (ViaType$ = {}));
/** @internal */
export const Via1$inboundSchema = z
    .object({
    type: ViaType$inboundSchema.optional(),
    avatar: z.string(),
    email: z.string(),
    slug: z.string().optional(),
    uid: z.string(),
    username: z.string(),
});
/** @internal */
export const Via1$outboundSchema = z.object({
    type: ViaType$outboundSchema.optional(),
    avatar: z.string(),
    email: z.string(),
    slug: z.string().optional(),
    uid: z.string(),
    username: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Via1$;
(function (Via1$) {
    /** @deprecated use `Via1$inboundSchema` instead. */
    Via1$.inboundSchema = Via1$inboundSchema;
    /** @deprecated use `Via1$outboundSchema` instead. */
    Via1$.outboundSchema = Via1$outboundSchema;
})(Via1$ || (Via1$ = {}));
export function via1ToJSON(via1) {
    return JSON.stringify(Via1$outboundSchema.parse(via1));
}
export function via1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Via1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Via1' from JSON`);
}
/** @internal */
export const Via$inboundSchema = z.union([z.lazy(() => Via1$inboundSchema), z.lazy(() => Via2$inboundSchema)]);
/** @internal */
export const Via$outboundSchema = z
    .union([
    z.lazy(() => Via1$outboundSchema),
    z.lazy(() => Via2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Via$;
(function (Via$) {
    /** @deprecated use `Via$inboundSchema` instead. */
    Via$.inboundSchema = Via$inboundSchema;
    /** @deprecated use `Via$outboundSchema` instead. */
    Via$.outboundSchema = Via$outboundSchema;
})(Via$ || (Via$ = {}));
export function viaToJSON(via) {
    return JSON.stringify(Via$outboundSchema.parse(via));
}
export function viaFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Via$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Via' from JSON`);
}
/** @internal */
export const GrantType$inboundSchema = z
    .nativeEnum(GrantType);
/** @internal */
export const GrantType$outboundSchema = GrantType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GrantType$;
(function (GrantType$) {
    /** @deprecated use `GrantType$inboundSchema` instead. */
    GrantType$.inboundSchema = GrantType$inboundSchema;
    /** @deprecated use `GrantType$outboundSchema` instead. */
    GrantType$.outboundSchema = GrantType$outboundSchema;
})(GrantType$ || (GrantType$ = {}));
/** @internal */
export const AuthMethod$inboundSchema = z
    .nativeEnum(AuthMethod);
/** @internal */
export const AuthMethod$outboundSchema = AuthMethod$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AuthMethod$;
(function (AuthMethod$) {
    /** @deprecated use `AuthMethod$inboundSchema` instead. */
    AuthMethod$.inboundSchema = AuthMethod$inboundSchema;
    /** @deprecated use `AuthMethod$outboundSchema` instead. */
    AuthMethod$.outboundSchema = AuthMethod$outboundSchema;
})(AuthMethod$ || (AuthMethod$ = {}));
/** @internal */
export const OneHundredAndSixtyOne$inboundSchema = z.object({
    grantType: GrantType$inboundSchema,
    appName: z.string(),
    atTTL: z.number(),
    rtTTL: z.number().optional(),
    scope: z.string(),
    authMethod: AuthMethod$inboundSchema,
});
/** @internal */
export const OneHundredAndSixtyOne$outboundSchema = z.object({
    grantType: GrantType$outboundSchema,
    appName: z.string(),
    atTTL: z.number(),
    rtTTL: z.number().optional(),
    scope: z.string(),
    authMethod: AuthMethod$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndSixtyOne$;
(function (OneHundredAndSixtyOne$) {
    /** @deprecated use `OneHundredAndSixtyOne$inboundSchema` instead. */
    OneHundredAndSixtyOne$.inboundSchema = OneHundredAndSixtyOne$inboundSchema;
    /** @deprecated use `OneHundredAndSixtyOne$outboundSchema` instead. */
    OneHundredAndSixtyOne$.outboundSchema = OneHundredAndSixtyOne$outboundSchema;
})(OneHundredAndSixtyOne$ || (OneHundredAndSixtyOne$ = {}));
export function oneHundredAndSixtyOneToJSON(oneHundredAndSixtyOne) {
    return JSON.stringify(OneHundredAndSixtyOne$outboundSchema.parse(oneHundredAndSixtyOne));
}
export function oneHundredAndSixtyOneFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndSixtyOne$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndSixtyOne' from JSON`);
}
/** @internal */
export const UserEventPayload160Team$inboundSchema = z.object({
    id: z.string(),
    name: z.string(),
});
/** @internal */
export const UserEventPayload160Team$outboundSchema = z.object({
    id: z.string(),
    name: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload160Team$;
(function (UserEventPayload160Team$) {
    /** @deprecated use `UserEventPayload160Team$inboundSchema` instead. */
    UserEventPayload160Team$.inboundSchema = UserEventPayload160Team$inboundSchema;
    /** @deprecated use `UserEventPayload160Team$outboundSchema` instead. */
    UserEventPayload160Team$.outboundSchema = UserEventPayload160Team$outboundSchema;
})(UserEventPayload160Team$ || (UserEventPayload160Team$ = {}));
export function userEventPayload160TeamToJSON(userEventPayload160Team) {
    return JSON.stringify(UserEventPayload160Team$outboundSchema.parse(userEventPayload160Team));
}
export function userEventPayload160TeamFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayload160Team$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayload160Team' from JSON`);
}
/** @internal */
export const UserEventPayload160Configuration$inboundSchema = z.object({
    id: z.string(),
    name: z.string().optional(),
});
/** @internal */
export const UserEventPayload160Configuration$outboundSchema = z.object({
    id: z.string(),
    name: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload160Configuration$;
(function (UserEventPayload160Configuration$) {
    /** @deprecated use `UserEventPayload160Configuration$inboundSchema` instead. */
    UserEventPayload160Configuration$.inboundSchema = UserEventPayload160Configuration$inboundSchema;
    /** @deprecated use `UserEventPayload160Configuration$outboundSchema` instead. */
    UserEventPayload160Configuration$.outboundSchema = UserEventPayload160Configuration$outboundSchema;
})(UserEventPayload160Configuration$ || (UserEventPayload160Configuration$ = {}));
export function userEventPayload160ConfigurationToJSON(userEventPayload160Configuration) {
    return JSON.stringify(UserEventPayload160Configuration$outboundSchema.parse(userEventPayload160Configuration));
}
export function userEventPayload160ConfigurationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayload160Configuration$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayload160Configuration' from JSON`);
}
/** @internal */
export const UserEventPayloadPeering$inboundSchema = z.object({
    id: z.string(),
    name: z.string().optional(),
});
/** @internal */
export const UserEventPayloadPeering$outboundSchema = z.object({
    id: z.string(),
    name: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayloadPeering$;
(function (UserEventPayloadPeering$) {
    /** @deprecated use `UserEventPayloadPeering$inboundSchema` instead. */
    UserEventPayloadPeering$.inboundSchema = UserEventPayloadPeering$inboundSchema;
    /** @deprecated use `UserEventPayloadPeering$outboundSchema` instead. */
    UserEventPayloadPeering$.outboundSchema = UserEventPayloadPeering$outboundSchema;
})(UserEventPayloadPeering$ || (UserEventPayloadPeering$ = {}));
export function userEventPayloadPeeringToJSON(userEventPayloadPeering) {
    return JSON.stringify(UserEventPayloadPeering$outboundSchema.parse(userEventPayloadPeering));
}
export function userEventPayloadPeeringFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayloadPeering$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayloadPeering' from JSON`);
}
/** @internal */
export const OneHundredAndSixty$inboundSchema = z.object({
    team: z.lazy(() => UserEventPayload160Team$inboundSchema),
    configuration: z.lazy(() => UserEventPayload160Configuration$inboundSchema),
    peering: z.lazy(() => UserEventPayloadPeering$inboundSchema),
    newName: z.string().optional(),
});
/** @internal */
export const OneHundredAndSixty$outboundSchema = z.object({
    team: z.lazy(() => UserEventPayload160Team$outboundSchema),
    configuration: z.lazy(() => UserEventPayload160Configuration$outboundSchema),
    peering: z.lazy(() => UserEventPayloadPeering$outboundSchema),
    newName: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndSixty$;
(function (OneHundredAndSixty$) {
    /** @deprecated use `OneHundredAndSixty$inboundSchema` instead. */
    OneHundredAndSixty$.inboundSchema = OneHundredAndSixty$inboundSchema;
    /** @deprecated use `OneHundredAndSixty$outboundSchema` instead. */
    OneHundredAndSixty$.outboundSchema = OneHundredAndSixty$outboundSchema;
})(OneHundredAndSixty$ || (OneHundredAndSixty$ = {}));
export function oneHundredAndSixtyToJSON(oneHundredAndSixty) {
    return JSON.stringify(OneHundredAndSixty$outboundSchema.parse(oneHundredAndSixty));
}
export function oneHundredAndSixtyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndSixty$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndSixty' from JSON`);
}
/** @internal */
export const UserEventPayload159Team$inboundSchema = z.object({
    id: z.string(),
    name: z.string(),
});
/** @internal */
export const UserEventPayload159Team$outboundSchema = z.object({
    id: z.string(),
    name: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload159Team$;
(function (UserEventPayload159Team$) {
    /** @deprecated use `UserEventPayload159Team$inboundSchema` instead. */
    UserEventPayload159Team$.inboundSchema = UserEventPayload159Team$inboundSchema;
    /** @deprecated use `UserEventPayload159Team$outboundSchema` instead. */
    UserEventPayload159Team$.outboundSchema = UserEventPayload159Team$outboundSchema;
})(UserEventPayload159Team$ || (UserEventPayload159Team$ = {}));
export function userEventPayload159TeamToJSON(userEventPayload159Team) {
    return JSON.stringify(UserEventPayload159Team$outboundSchema.parse(userEventPayload159Team));
}
export function userEventPayload159TeamFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayload159Team$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayload159Team' from JSON`);
}
/** @internal */
export const UserEventPayload159Configuration$inboundSchema = z.object({
    id: z.string(),
    name: z.string().optional(),
});
/** @internal */
export const UserEventPayload159Configuration$outboundSchema = z.object({
    id: z.string(),
    name: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload159Configuration$;
(function (UserEventPayload159Configuration$) {
    /** @deprecated use `UserEventPayload159Configuration$inboundSchema` instead. */
    UserEventPayload159Configuration$.inboundSchema = UserEventPayload159Configuration$inboundSchema;
    /** @deprecated use `UserEventPayload159Configuration$outboundSchema` instead. */
    UserEventPayload159Configuration$.outboundSchema = UserEventPayload159Configuration$outboundSchema;
})(UserEventPayload159Configuration$ || (UserEventPayload159Configuration$ = {}));
export function userEventPayload159ConfigurationToJSON(userEventPayload159Configuration) {
    return JSON.stringify(UserEventPayload159Configuration$outboundSchema.parse(userEventPayload159Configuration));
}
export function userEventPayload159ConfigurationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayload159Configuration$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayload159Configuration' from JSON`);
}
/** @internal */
export const PayloadPeering$inboundSchema = z.object({
    id: z.string(),
    name: z.string().optional(),
});
/** @internal */
export const PayloadPeering$outboundSchema = z.object({
    id: z.string(),
    name: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadPeering$;
(function (PayloadPeering$) {
    /** @deprecated use `PayloadPeering$inboundSchema` instead. */
    PayloadPeering$.inboundSchema = PayloadPeering$inboundSchema;
    /** @deprecated use `PayloadPeering$outboundSchema` instead. */
    PayloadPeering$.outboundSchema = PayloadPeering$outboundSchema;
})(PayloadPeering$ || (PayloadPeering$ = {}));
export function payloadPeeringToJSON(payloadPeering) {
    return JSON.stringify(PayloadPeering$outboundSchema.parse(payloadPeering));
}
export function payloadPeeringFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadPeering$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadPeering' from JSON`);
}
/** @internal */
export const OneHundredAndFiftyNine$inboundSchema = z.object({
    team: z.lazy(() => UserEventPayload159Team$inboundSchema),
    configuration: z.lazy(() => UserEventPayload159Configuration$inboundSchema),
    peering: z.lazy(() => PayloadPeering$inboundSchema),
});
/** @internal */
export const OneHundredAndFiftyNine$outboundSchema = z.object({
    team: z.lazy(() => UserEventPayload159Team$outboundSchema),
    configuration: z.lazy(() => UserEventPayload159Configuration$outboundSchema),
    peering: z.lazy(() => PayloadPeering$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndFiftyNine$;
(function (OneHundredAndFiftyNine$) {
    /** @deprecated use `OneHundredAndFiftyNine$inboundSchema` instead. */
    OneHundredAndFiftyNine$.inboundSchema = OneHundredAndFiftyNine$inboundSchema;
    /** @deprecated use `OneHundredAndFiftyNine$outboundSchema` instead. */
    OneHundredAndFiftyNine$.outboundSchema = OneHundredAndFiftyNine$outboundSchema;
})(OneHundredAndFiftyNine$ || (OneHundredAndFiftyNine$ = {}));
export function oneHundredAndFiftyNineToJSON(oneHundredAndFiftyNine) {
    return JSON.stringify(OneHundredAndFiftyNine$outboundSchema.parse(oneHundredAndFiftyNine));
}
export function oneHundredAndFiftyNineFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndFiftyNine$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndFiftyNine' from JSON`);
}
/** @internal */
export const UserEventPayload158Team$inboundSchema = z.object({
    id: z.string(),
    name: z.string(),
});
/** @internal */
export const UserEventPayload158Team$outboundSchema = z.object({
    id: z.string(),
    name: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload158Team$;
(function (UserEventPayload158Team$) {
    /** @deprecated use `UserEventPayload158Team$inboundSchema` instead. */
    UserEventPayload158Team$.inboundSchema = UserEventPayload158Team$inboundSchema;
    /** @deprecated use `UserEventPayload158Team$outboundSchema` instead. */
    UserEventPayload158Team$.outboundSchema = UserEventPayload158Team$outboundSchema;
})(UserEventPayload158Team$ || (UserEventPayload158Team$ = {}));
export function userEventPayload158TeamToJSON(userEventPayload158Team) {
    return JSON.stringify(UserEventPayload158Team$outboundSchema.parse(userEventPayload158Team));
}
export function userEventPayload158TeamFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayload158Team$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayload158Team' from JSON`);
}
/** @internal */
export const UserEventPayload158Configuration$inboundSchema = z.object({
    id: z.string(),
    name: z.string().optional(),
});
/** @internal */
export const UserEventPayload158Configuration$outboundSchema = z.object({
    id: z.string(),
    name: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload158Configuration$;
(function (UserEventPayload158Configuration$) {
    /** @deprecated use `UserEventPayload158Configuration$inboundSchema` instead. */
    UserEventPayload158Configuration$.inboundSchema = UserEventPayload158Configuration$inboundSchema;
    /** @deprecated use `UserEventPayload158Configuration$outboundSchema` instead. */
    UserEventPayload158Configuration$.outboundSchema = UserEventPayload158Configuration$outboundSchema;
})(UserEventPayload158Configuration$ || (UserEventPayload158Configuration$ = {}));
export function userEventPayload158ConfigurationToJSON(userEventPayload158Configuration) {
    return JSON.stringify(UserEventPayload158Configuration$outboundSchema.parse(userEventPayload158Configuration));
}
export function userEventPayload158ConfigurationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayload158Configuration$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayload158Configuration' from JSON`);
}
/** @internal */
export const Peering$inboundSchema = z.object({
    id: z.string(),
    accountId: z.string(),
    region: z.string(),
    vpcId: z.string(),
});
/** @internal */
export const Peering$outboundSchema = z.object({
    id: z.string(),
    accountId: z.string(),
    region: z.string(),
    vpcId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Peering$;
(function (Peering$) {
    /** @deprecated use `Peering$inboundSchema` instead. */
    Peering$.inboundSchema = Peering$inboundSchema;
    /** @deprecated use `Peering$outboundSchema` instead. */
    Peering$.outboundSchema = Peering$outboundSchema;
})(Peering$ || (Peering$ = {}));
export function peeringToJSON(peering) {
    return JSON.stringify(Peering$outboundSchema.parse(peering));
}
export function peeringFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Peering$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Peering' from JSON`);
}
/** @internal */
export const OneHundredAndFiftyEight$inboundSchema = z.object({
    team: z.lazy(() => UserEventPayload158Team$inboundSchema),
    configuration: z.lazy(() => UserEventPayload158Configuration$inboundSchema),
    peering: z.lazy(() => Peering$inboundSchema),
});
/** @internal */
export const OneHundredAndFiftyEight$outboundSchema = z.object({
    team: z.lazy(() => UserEventPayload158Team$outboundSchema),
    configuration: z.lazy(() => UserEventPayload158Configuration$outboundSchema),
    peering: z.lazy(() => Peering$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndFiftyEight$;
(function (OneHundredAndFiftyEight$) {
    /** @deprecated use `OneHundredAndFiftyEight$inboundSchema` instead. */
    OneHundredAndFiftyEight$.inboundSchema = OneHundredAndFiftyEight$inboundSchema;
    /** @deprecated use `OneHundredAndFiftyEight$outboundSchema` instead. */
    OneHundredAndFiftyEight$.outboundSchema = OneHundredAndFiftyEight$outboundSchema;
})(OneHundredAndFiftyEight$ || (OneHundredAndFiftyEight$ = {}));
export function oneHundredAndFiftyEightToJSON(oneHundredAndFiftyEight) {
    return JSON.stringify(OneHundredAndFiftyEight$outboundSchema.parse(oneHundredAndFiftyEight));
}
export function oneHundredAndFiftyEightFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndFiftyEight$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndFiftyEight' from JSON`);
}
/** @internal */
export const OneHundredAndFiftySeven$inboundSchema = z.object({
    appName: z.string(),
    appId: z.string().optional(),
    installationId: z.string().optional(),
});
/** @internal */
export const OneHundredAndFiftySeven$outboundSchema = z.object({
    appName: z.string(),
    appId: z.string().optional(),
    installationId: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndFiftySeven$;
(function (OneHundredAndFiftySeven$) {
    /** @deprecated use `OneHundredAndFiftySeven$inboundSchema` instead. */
    OneHundredAndFiftySeven$.inboundSchema = OneHundredAndFiftySeven$inboundSchema;
    /** @deprecated use `OneHundredAndFiftySeven$outboundSchema` instead. */
    OneHundredAndFiftySeven$.outboundSchema = OneHundredAndFiftySeven$outboundSchema;
})(OneHundredAndFiftySeven$ || (OneHundredAndFiftySeven$ = {}));
export function oneHundredAndFiftySevenToJSON(oneHundredAndFiftySeven) {
    return JSON.stringify(OneHundredAndFiftySeven$outboundSchema.parse(oneHundredAndFiftySeven));
}
export function oneHundredAndFiftySevenFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndFiftySeven$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndFiftySeven' from JSON`);
}
/** @internal */
export const OneHundredAndFiftySix$inboundSchema = z.object({
    appName: z.string(),
    appId: z.string().optional(),
});
/** @internal */
export const OneHundredAndFiftySix$outboundSchema = z.object({
    appName: z.string(),
    appId: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndFiftySix$;
(function (OneHundredAndFiftySix$) {
    /** @deprecated use `OneHundredAndFiftySix$inboundSchema` instead. */
    OneHundredAndFiftySix$.inboundSchema = OneHundredAndFiftySix$inboundSchema;
    /** @deprecated use `OneHundredAndFiftySix$outboundSchema` instead. */
    OneHundredAndFiftySix$.outboundSchema = OneHundredAndFiftySix$outboundSchema;
})(OneHundredAndFiftySix$ || (OneHundredAndFiftySix$ = {}));
export function oneHundredAndFiftySixToJSON(oneHundredAndFiftySix) {
    return JSON.stringify(OneHundredAndFiftySix$outboundSchema.parse(oneHundredAndFiftySix));
}
export function oneHundredAndFiftySixFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndFiftySix$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndFiftySix' from JSON`);
}
/** @internal */
export const OneHundredAndFiftyFive$inboundSchema = z.object({
    appName: z.string(),
    appId: z.string(),
});
/** @internal */
export const OneHundredAndFiftyFive$outboundSchema = z.object({
    appName: z.string(),
    appId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndFiftyFive$;
(function (OneHundredAndFiftyFive$) {
    /** @deprecated use `OneHundredAndFiftyFive$inboundSchema` instead. */
    OneHundredAndFiftyFive$.inboundSchema = OneHundredAndFiftyFive$inboundSchema;
    /** @deprecated use `OneHundredAndFiftyFive$outboundSchema` instead. */
    OneHundredAndFiftyFive$.outboundSchema = OneHundredAndFiftyFive$outboundSchema;
})(OneHundredAndFiftyFive$ || (OneHundredAndFiftyFive$ = {}));
export function oneHundredAndFiftyFiveToJSON(oneHundredAndFiftyFive) {
    return JSON.stringify(OneHundredAndFiftyFive$outboundSchema.parse(oneHundredAndFiftyFive));
}
export function oneHundredAndFiftyFiveFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndFiftyFive$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndFiftyFive' from JSON`);
}
/** @internal */
export const OneHundredAndFiftyFour$inboundSchema = z.object({
    appName: z.string(),
});
/** @internal */
export const OneHundredAndFiftyFour$outboundSchema = z.object({
    appName: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndFiftyFour$;
(function (OneHundredAndFiftyFour$) {
    /** @deprecated use `OneHundredAndFiftyFour$inboundSchema` instead. */
    OneHundredAndFiftyFour$.inboundSchema = OneHundredAndFiftyFour$inboundSchema;
    /** @deprecated use `OneHundredAndFiftyFour$outboundSchema` instead. */
    OneHundredAndFiftyFour$.outboundSchema = OneHundredAndFiftyFour$outboundSchema;
})(OneHundredAndFiftyFour$ || (OneHundredAndFiftyFour$ = {}));
export function oneHundredAndFiftyFourToJSON(oneHundredAndFiftyFour) {
    return JSON.stringify(OneHundredAndFiftyFour$outboundSchema.parse(oneHundredAndFiftyFour));
}
export function oneHundredAndFiftyFourFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndFiftyFour$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndFiftyFour' from JSON`);
}
/** @internal */
export const OneHundredAndFiftyThree$inboundSchema = z.object({
    appName: z.string(),
    nextScopes: z.array(z.string()),
});
/** @internal */
export const OneHundredAndFiftyThree$outboundSchema = z.object({
    appName: z.string(),
    nextScopes: z.array(z.string()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndFiftyThree$;
(function (OneHundredAndFiftyThree$) {
    /** @deprecated use `OneHundredAndFiftyThree$inboundSchema` instead. */
    OneHundredAndFiftyThree$.inboundSchema = OneHundredAndFiftyThree$inboundSchema;
    /** @deprecated use `OneHundredAndFiftyThree$outboundSchema` instead. */
    OneHundredAndFiftyThree$.outboundSchema = OneHundredAndFiftyThree$outboundSchema;
})(OneHundredAndFiftyThree$ || (OneHundredAndFiftyThree$ = {}));
export function oneHundredAndFiftyThreeToJSON(oneHundredAndFiftyThree) {
    return JSON.stringify(OneHundredAndFiftyThree$outboundSchema.parse(oneHundredAndFiftyThree));
}
export function oneHundredAndFiftyThreeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndFiftyThree$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndFiftyThree' from JSON`);
}
/** @internal */
export const OneHundredAndFiftyTwo$inboundSchema = z.object({
    appName: z.string(),
    scopes: z.array(z.string()),
});
/** @internal */
export const OneHundredAndFiftyTwo$outboundSchema = z.object({
    appName: z.string(),
    scopes: z.array(z.string()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndFiftyTwo$;
(function (OneHundredAndFiftyTwo$) {
    /** @deprecated use `OneHundredAndFiftyTwo$inboundSchema` instead. */
    OneHundredAndFiftyTwo$.inboundSchema = OneHundredAndFiftyTwo$inboundSchema;
    /** @deprecated use `OneHundredAndFiftyTwo$outboundSchema` instead. */
    OneHundredAndFiftyTwo$.outboundSchema = OneHundredAndFiftyTwo$outboundSchema;
})(OneHundredAndFiftyTwo$ || (OneHundredAndFiftyTwo$ = {}));
export function oneHundredAndFiftyTwoToJSON(oneHundredAndFiftyTwo) {
    return JSON.stringify(OneHundredAndFiftyTwo$outboundSchema.parse(oneHundredAndFiftyTwo));
}
export function oneHundredAndFiftyTwoFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndFiftyTwo$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndFiftyTwo' from JSON`);
}
/** @internal */
export const OneHundredAndFiftyOne$inboundSchema = z.object({
    oldName: z.string(),
    newName: z.string(),
});
/** @internal */
export const OneHundredAndFiftyOne$outboundSchema = z.object({
    oldName: z.string(),
    newName: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndFiftyOne$;
(function (OneHundredAndFiftyOne$) {
    /** @deprecated use `OneHundredAndFiftyOne$inboundSchema` instead. */
    OneHundredAndFiftyOne$.inboundSchema = OneHundredAndFiftyOne$inboundSchema;
    /** @deprecated use `OneHundredAndFiftyOne$outboundSchema` instead. */
    OneHundredAndFiftyOne$.outboundSchema = OneHundredAndFiftyOne$outboundSchema;
})(OneHundredAndFiftyOne$ || (OneHundredAndFiftyOne$ = {}));
export function oneHundredAndFiftyOneToJSON(oneHundredAndFiftyOne) {
    return JSON.stringify(OneHundredAndFiftyOne$outboundSchema.parse(oneHundredAndFiftyOne));
}
export function oneHundredAndFiftyOneFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndFiftyOne$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndFiftyOne' from JSON`);
}
/** @internal */
export const Tier$inboundSchema = z.nativeEnum(Tier);
/** @internal */
export const Tier$outboundSchema = Tier$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Tier$;
(function (Tier$) {
    /** @deprecated use `Tier$inboundSchema` instead. */
    Tier$.inboundSchema = Tier$inboundSchema;
    /** @deprecated use `Tier$outboundSchema` instead. */
    Tier$.outboundSchema = Tier$outboundSchema;
})(Tier$ || (Tier$ = {}));
/** @internal */
export const OneHundredAndFifty$inboundSchema = z.object({
    tier: Tier$inboundSchema,
});
/** @internal */
export const OneHundredAndFifty$outboundSchema = z.object({
    tier: Tier$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndFifty$;
(function (OneHundredAndFifty$) {
    /** @deprecated use `OneHundredAndFifty$inboundSchema` instead. */
    OneHundredAndFifty$.inboundSchema = OneHundredAndFifty$inboundSchema;
    /** @deprecated use `OneHundredAndFifty$outboundSchema` instead. */
    OneHundredAndFifty$.outboundSchema = OneHundredAndFifty$outboundSchema;
})(OneHundredAndFifty$ || (OneHundredAndFifty$ = {}));
export function oneHundredAndFiftyToJSON(oneHundredAndFifty) {
    return JSON.stringify(OneHundredAndFifty$outboundSchema.parse(oneHundredAndFifty));
}
export function oneHundredAndFiftyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndFifty$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndFifty' from JSON`);
}
/** @internal */
export const ProjectWebAnalytics$inboundSchema = z.object({
    id: z.string(),
    disabledAt: z.number().optional(),
    canceledAt: z.number().optional(),
    enabledAt: z.number().optional(),
    hasData: z.boolean().optional(),
});
/** @internal */
export const ProjectWebAnalytics$outboundSchema = z.object({
    id: z.string(),
    disabledAt: z.number().optional(),
    canceledAt: z.number().optional(),
    enabledAt: z.number().optional(),
    hasData: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ProjectWebAnalytics$;
(function (ProjectWebAnalytics$) {
    /** @deprecated use `ProjectWebAnalytics$inboundSchema` instead. */
    ProjectWebAnalytics$.inboundSchema = ProjectWebAnalytics$inboundSchema;
    /** @deprecated use `ProjectWebAnalytics$outboundSchema` instead. */
    ProjectWebAnalytics$.outboundSchema = ProjectWebAnalytics$outboundSchema;
})(ProjectWebAnalytics$ || (ProjectWebAnalytics$ = {}));
export function projectWebAnalyticsToJSON(projectWebAnalytics) {
    return JSON.stringify(ProjectWebAnalytics$outboundSchema.parse(projectWebAnalytics));
}
export function projectWebAnalyticsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ProjectWebAnalytics$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ProjectWebAnalytics' from JSON`);
}
/** @internal */
export const PrevProjectWebAnalytics$inboundSchema = z.object({
    id: z.string(),
    disabledAt: z.number().optional(),
    canceledAt: z.number().optional(),
    enabledAt: z.number().optional(),
    hasData: z.boolean().optional(),
});
/** @internal */
export const PrevProjectWebAnalytics$outboundSchema = z.object({
    id: z.string(),
    disabledAt: z.number().optional(),
    canceledAt: z.number().optional(),
    enabledAt: z.number().optional(),
    hasData: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PrevProjectWebAnalytics$;
(function (PrevProjectWebAnalytics$) {
    /** @deprecated use `PrevProjectWebAnalytics$inboundSchema` instead. */
    PrevProjectWebAnalytics$.inboundSchema = PrevProjectWebAnalytics$inboundSchema;
    /** @deprecated use `PrevProjectWebAnalytics$outboundSchema` instead. */
    PrevProjectWebAnalytics$.outboundSchema = PrevProjectWebAnalytics$outboundSchema;
})(PrevProjectWebAnalytics$ || (PrevProjectWebAnalytics$ = {}));
export function prevProjectWebAnalyticsToJSON(prevProjectWebAnalytics) {
    return JSON.stringify(PrevProjectWebAnalytics$outboundSchema.parse(prevProjectWebAnalytics));
}
export function prevProjectWebAnalyticsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PrevProjectWebAnalytics$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PrevProjectWebAnalytics' from JSON`);
}
/** @internal */
export const OneHundredAndFortyNine$inboundSchema = z.object({
    projectId: z.string(),
    projectName: z.string(),
    projectWebAnalytics: z.lazy(() => ProjectWebAnalytics$inboundSchema)
        .optional(),
    prevProjectWebAnalytics: z.nullable(z.lazy(() => PrevProjectWebAnalytics$inboundSchema)).optional(),
});
/** @internal */
export const OneHundredAndFortyNine$outboundSchema = z.object({
    projectId: z.string(),
    projectName: z.string(),
    projectWebAnalytics: z.lazy(() => ProjectWebAnalytics$outboundSchema)
        .optional(),
    prevProjectWebAnalytics: z.nullable(z.lazy(() => PrevProjectWebAnalytics$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndFortyNine$;
(function (OneHundredAndFortyNine$) {
    /** @deprecated use `OneHundredAndFortyNine$inboundSchema` instead. */
    OneHundredAndFortyNine$.inboundSchema = OneHundredAndFortyNine$inboundSchema;
    /** @deprecated use `OneHundredAndFortyNine$outboundSchema` instead. */
    OneHundredAndFortyNine$.outboundSchema = OneHundredAndFortyNine$outboundSchema;
})(OneHundredAndFortyNine$ || (OneHundredAndFortyNine$ = {}));
export function oneHundredAndFortyNineToJSON(oneHundredAndFortyNine) {
    return JSON.stringify(OneHundredAndFortyNine$outboundSchema.parse(oneHundredAndFortyNine));
}
export function oneHundredAndFortyNineFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndFortyNine$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndFortyNine' from JSON`);
}
/** @internal */
export const Microfrontends2$inboundSchema = z.object({
    updatedAt: z.number(),
    groupIds: z.array(z.any()),
    enabled: z.boolean(),
});
/** @internal */
export const Microfrontends2$outboundSchema = z.object({
    updatedAt: z.number(),
    groupIds: z.array(z.any()),
    enabled: z.boolean(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Microfrontends2$;
(function (Microfrontends2$) {
    /** @deprecated use `Microfrontends2$inboundSchema` instead. */
    Microfrontends2$.inboundSchema = Microfrontends2$inboundSchema;
    /** @deprecated use `Microfrontends2$outboundSchema` instead. */
    Microfrontends2$.outboundSchema = Microfrontends2$outboundSchema;
})(Microfrontends2$ || (Microfrontends2$ = {}));
export function microfrontends2ToJSON(microfrontends2) {
    return JSON.stringify(Microfrontends2$outboundSchema.parse(microfrontends2));
}
export function microfrontends2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Microfrontends2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Microfrontends2' from JSON`);
}
/** @internal */
export const Microfrontends1$inboundSchema = z.object({
    updatedAt: z.number(),
    groupIds: z.array(z.string()),
    enabled: z.boolean(),
    isDefaultApp: z.boolean().optional(),
    defaultRoute: z.string().optional(),
    routeObservabilityToThisProject: z.boolean().optional(),
});
/** @internal */
export const Microfrontends1$outboundSchema = z.object({
    updatedAt: z.number(),
    groupIds: z.array(z.string()),
    enabled: z.boolean(),
    isDefaultApp: z.boolean().optional(),
    defaultRoute: z.string().optional(),
    routeObservabilityToThisProject: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Microfrontends1$;
(function (Microfrontends1$) {
    /** @deprecated use `Microfrontends1$inboundSchema` instead. */
    Microfrontends1$.inboundSchema = Microfrontends1$inboundSchema;
    /** @deprecated use `Microfrontends1$outboundSchema` instead. */
    Microfrontends1$.outboundSchema = Microfrontends1$outboundSchema;
})(Microfrontends1$ || (Microfrontends1$ = {}));
export function microfrontends1ToJSON(microfrontends1) {
    return JSON.stringify(Microfrontends1$outboundSchema.parse(microfrontends1));
}
export function microfrontends1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Microfrontends1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Microfrontends1' from JSON`);
}
/** @internal */
export const Microfrontends$inboundSchema = z.union([
    z.lazy(() => Microfrontends1$inboundSchema),
    z.lazy(() => Microfrontends2$inboundSchema),
]);
/** @internal */
export const Microfrontends$outboundSchema = z.union([
    z.lazy(() => Microfrontends1$outboundSchema),
    z.lazy(() => Microfrontends2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Microfrontends$;
(function (Microfrontends$) {
    /** @deprecated use `Microfrontends$inboundSchema` instead. */
    Microfrontends$.inboundSchema = Microfrontends$inboundSchema;
    /** @deprecated use `Microfrontends$outboundSchema` instead. */
    Microfrontends$.outboundSchema = Microfrontends$outboundSchema;
})(Microfrontends$ || (Microfrontends$ = {}));
export function microfrontendsToJSON(microfrontends) {
    return JSON.stringify(Microfrontends$outboundSchema.parse(microfrontends));
}
export function microfrontendsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Microfrontends$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Microfrontends' from JSON`);
}
/** @internal */
export const UserEventPayload148Project$inboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    microfrontends: z.union([
        z.lazy(() => Microfrontends1$inboundSchema),
        z.lazy(() => Microfrontends2$inboundSchema),
    ]).optional(),
});
/** @internal */
export const UserEventPayload148Project$outboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    microfrontends: z.union([
        z.lazy(() => Microfrontends1$outboundSchema),
        z.lazy(() => Microfrontends2$outboundSchema),
    ]).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload148Project$;
(function (UserEventPayload148Project$) {
    /** @deprecated use `UserEventPayload148Project$inboundSchema` instead. */
    UserEventPayload148Project$.inboundSchema = UserEventPayload148Project$inboundSchema;
    /** @deprecated use `UserEventPayload148Project$outboundSchema` instead. */
    UserEventPayload148Project$.outboundSchema = UserEventPayload148Project$outboundSchema;
})(UserEventPayload148Project$ || (UserEventPayload148Project$ = {}));
export function userEventPayload148ProjectToJSON(userEventPayload148Project) {
    return JSON.stringify(UserEventPayload148Project$outboundSchema.parse(userEventPayload148Project));
}
export function userEventPayload148ProjectFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayload148Project$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayload148Project' from JSON`);
}
/** @internal */
export const UserEventMicrofrontends2$inboundSchema = z.object({
    updatedAt: z.number(),
    groupIds: z.array(z.any()),
    enabled: z.boolean(),
});
/** @internal */
export const UserEventMicrofrontends2$outboundSchema = z.object({
    updatedAt: z.number(),
    groupIds: z.array(z.any()),
    enabled: z.boolean(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventMicrofrontends2$;
(function (UserEventMicrofrontends2$) {
    /** @deprecated use `UserEventMicrofrontends2$inboundSchema` instead. */
    UserEventMicrofrontends2$.inboundSchema = UserEventMicrofrontends2$inboundSchema;
    /** @deprecated use `UserEventMicrofrontends2$outboundSchema` instead. */
    UserEventMicrofrontends2$.outboundSchema = UserEventMicrofrontends2$outboundSchema;
})(UserEventMicrofrontends2$ || (UserEventMicrofrontends2$ = {}));
export function userEventMicrofrontends2ToJSON(userEventMicrofrontends2) {
    return JSON.stringify(UserEventMicrofrontends2$outboundSchema.parse(userEventMicrofrontends2));
}
export function userEventMicrofrontends2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventMicrofrontends2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventMicrofrontends2' from JSON`);
}
/** @internal */
export const UserEventMicrofrontends1$inboundSchema = z.object({
    updatedAt: z.number(),
    groupIds: z.array(z.string()),
    enabled: z.boolean(),
    isDefaultApp: z.boolean().optional(),
    defaultRoute: z.string().optional(),
    routeObservabilityToThisProject: z.boolean().optional(),
});
/** @internal */
export const UserEventMicrofrontends1$outboundSchema = z.object({
    updatedAt: z.number(),
    groupIds: z.array(z.string()),
    enabled: z.boolean(),
    isDefaultApp: z.boolean().optional(),
    defaultRoute: z.string().optional(),
    routeObservabilityToThisProject: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventMicrofrontends1$;
(function (UserEventMicrofrontends1$) {
    /** @deprecated use `UserEventMicrofrontends1$inboundSchema` instead. */
    UserEventMicrofrontends1$.inboundSchema = UserEventMicrofrontends1$inboundSchema;
    /** @deprecated use `UserEventMicrofrontends1$outboundSchema` instead. */
    UserEventMicrofrontends1$.outboundSchema = UserEventMicrofrontends1$outboundSchema;
})(UserEventMicrofrontends1$ || (UserEventMicrofrontends1$ = {}));
export function userEventMicrofrontends1ToJSON(userEventMicrofrontends1) {
    return JSON.stringify(UserEventMicrofrontends1$outboundSchema.parse(userEventMicrofrontends1));
}
export function userEventMicrofrontends1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventMicrofrontends1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventMicrofrontends1' from JSON`);
}
/** @internal */
export const PayloadMicrofrontends$inboundSchema = z.union([
    z.lazy(() => UserEventMicrofrontends1$inboundSchema),
    z.lazy(() => UserEventMicrofrontends2$inboundSchema),
]);
/** @internal */
export const PayloadMicrofrontends$outboundSchema = z.union([
    z.lazy(() => UserEventMicrofrontends1$outboundSchema),
    z.lazy(() => UserEventMicrofrontends2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadMicrofrontends$;
(function (PayloadMicrofrontends$) {
    /** @deprecated use `PayloadMicrofrontends$inboundSchema` instead. */
    PayloadMicrofrontends$.inboundSchema = PayloadMicrofrontends$inboundSchema;
    /** @deprecated use `PayloadMicrofrontends$outboundSchema` instead. */
    PayloadMicrofrontends$.outboundSchema = PayloadMicrofrontends$outboundSchema;
})(PayloadMicrofrontends$ || (PayloadMicrofrontends$ = {}));
export function payloadMicrofrontendsToJSON(payloadMicrofrontends) {
    return JSON.stringify(PayloadMicrofrontends$outboundSchema.parse(payloadMicrofrontends));
}
export function payloadMicrofrontendsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadMicrofrontends$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadMicrofrontends' from JSON`);
}
/** @internal */
export const UserEventPayload148PrevProject$inboundSchema = z.object({
    microfrontends: z.union([
        z.lazy(() => UserEventMicrofrontends1$inboundSchema),
        z.lazy(() => UserEventMicrofrontends2$inboundSchema),
    ]).optional(),
});
/** @internal */
export const UserEventPayload148PrevProject$outboundSchema = z.object({
    microfrontends: z.union([
        z.lazy(() => UserEventMicrofrontends1$outboundSchema),
        z.lazy(() => UserEventMicrofrontends2$outboundSchema),
    ]).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload148PrevProject$;
(function (UserEventPayload148PrevProject$) {
    /** @deprecated use `UserEventPayload148PrevProject$inboundSchema` instead. */
    UserEventPayload148PrevProject$.inboundSchema = UserEventPayload148PrevProject$inboundSchema;
    /** @deprecated use `UserEventPayload148PrevProject$outboundSchema` instead. */
    UserEventPayload148PrevProject$.outboundSchema = UserEventPayload148PrevProject$outboundSchema;
})(UserEventPayload148PrevProject$ || (UserEventPayload148PrevProject$ = {}));
export function userEventPayload148PrevProjectToJSON(userEventPayload148PrevProject) {
    return JSON.stringify(UserEventPayload148PrevProject$outboundSchema.parse(userEventPayload148PrevProject));
}
export function userEventPayload148PrevProjectFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayload148PrevProject$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayload148PrevProject' from JSON`);
}
/** @internal */
export const PayloadPrev$inboundSchema = z.object({
    project: z.lazy(() => UserEventPayload148PrevProject$inboundSchema),
});
/** @internal */
export const PayloadPrev$outboundSchema = z.object({
    project: z.lazy(() => UserEventPayload148PrevProject$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadPrev$;
(function (PayloadPrev$) {
    /** @deprecated use `PayloadPrev$inboundSchema` instead. */
    PayloadPrev$.inboundSchema = PayloadPrev$inboundSchema;
    /** @deprecated use `PayloadPrev$outboundSchema` instead. */
    PayloadPrev$.outboundSchema = PayloadPrev$outboundSchema;
})(PayloadPrev$ || (PayloadPrev$ = {}));
export function payloadPrevToJSON(payloadPrev) {
    return JSON.stringify(PayloadPrev$outboundSchema.parse(payloadPrev));
}
export function payloadPrevFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadPrev$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadPrev' from JSON`);
}
/** @internal */
export const PayloadGroup$inboundSchema = z.object({
    id: z.string(),
    slug: z.string(),
    name: z.string(),
});
/** @internal */
export const PayloadGroup$outboundSchema = z.object({
    id: z.string(),
    slug: z.string(),
    name: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadGroup$;
(function (PayloadGroup$) {
    /** @deprecated use `PayloadGroup$inboundSchema` instead. */
    PayloadGroup$.inboundSchema = PayloadGroup$inboundSchema;
    /** @deprecated use `PayloadGroup$outboundSchema` instead. */
    PayloadGroup$.outboundSchema = PayloadGroup$outboundSchema;
})(PayloadGroup$ || (PayloadGroup$ = {}));
export function payloadGroupToJSON(payloadGroup) {
    return JSON.stringify(PayloadGroup$outboundSchema.parse(payloadGroup));
}
export function payloadGroupFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadGroup$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadGroup' from JSON`);
}
/** @internal */
export const OneHundredAndFortyEight$inboundSchema = z.object({
    project: z.lazy(() => UserEventPayload148Project$inboundSchema),
    prev: z.lazy(() => PayloadPrev$inboundSchema),
    group: z.lazy(() => PayloadGroup$inboundSchema),
});
/** @internal */
export const OneHundredAndFortyEight$outboundSchema = z.object({
    project: z.lazy(() => UserEventPayload148Project$outboundSchema),
    prev: z.lazy(() => PayloadPrev$outboundSchema),
    group: z.lazy(() => PayloadGroup$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndFortyEight$;
(function (OneHundredAndFortyEight$) {
    /** @deprecated use `OneHundredAndFortyEight$inboundSchema` instead. */
    OneHundredAndFortyEight$.inboundSchema = OneHundredAndFortyEight$inboundSchema;
    /** @deprecated use `OneHundredAndFortyEight$outboundSchema` instead. */
    OneHundredAndFortyEight$.outboundSchema = OneHundredAndFortyEight$outboundSchema;
})(OneHundredAndFortyEight$ || (OneHundredAndFortyEight$ = {}));
export function oneHundredAndFortyEightToJSON(oneHundredAndFortyEight) {
    return JSON.stringify(OneHundredAndFortyEight$outboundSchema.parse(oneHundredAndFortyEight));
}
export function oneHundredAndFortyEightFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndFortyEight$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndFortyEight' from JSON`);
}
/** @internal */
export const UserEventPayload147Project$inboundSchema = z.object({
    id: z.string(),
    name: z.string(),
});
/** @internal */
export const UserEventPayload147Project$outboundSchema = z.object({
    id: z.string(),
    name: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload147Project$;
(function (UserEventPayload147Project$) {
    /** @deprecated use `UserEventPayload147Project$inboundSchema` instead. */
    UserEventPayload147Project$.inboundSchema = UserEventPayload147Project$inboundSchema;
    /** @deprecated use `UserEventPayload147Project$outboundSchema` instead. */
    UserEventPayload147Project$.outboundSchema = UserEventPayload147Project$outboundSchema;
})(UserEventPayload147Project$ || (UserEventPayload147Project$ = {}));
export function userEventPayload147ProjectToJSON(userEventPayload147Project) {
    return JSON.stringify(UserEventPayload147Project$outboundSchema.parse(userEventPayload147Project));
}
export function userEventPayload147ProjectFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayload147Project$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayload147Project' from JSON`);
}
/** @internal */
export const Group$inboundSchema = z
    .object({
    id: z.string(),
    slug: z.string(),
    name: z.string(),
});
/** @internal */
export const Group$outboundSchema = z.object({
    id: z.string(),
    slug: z.string(),
    name: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Group$;
(function (Group$) {
    /** @deprecated use `Group$inboundSchema` instead. */
    Group$.inboundSchema = Group$inboundSchema;
    /** @deprecated use `Group$outboundSchema` instead. */
    Group$.outboundSchema = Group$outboundSchema;
})(Group$ || (Group$ = {}));
export function groupToJSON(group) {
    return JSON.stringify(Group$outboundSchema.parse(group));
}
export function groupFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Group$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Group' from JSON`);
}
/** @internal */
export const OneHundredAndFortySeven$inboundSchema = z.object({
    project: z.lazy(() => UserEventPayload147Project$inboundSchema),
    group: z.lazy(() => Group$inboundSchema),
});
/** @internal */
export const OneHundredAndFortySeven$outboundSchema = z.object({
    project: z.lazy(() => UserEventPayload147Project$outboundSchema),
    group: z.lazy(() => Group$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndFortySeven$;
(function (OneHundredAndFortySeven$) {
    /** @deprecated use `OneHundredAndFortySeven$inboundSchema` instead. */
    OneHundredAndFortySeven$.inboundSchema = OneHundredAndFortySeven$inboundSchema;
    /** @deprecated use `OneHundredAndFortySeven$outboundSchema` instead. */
    OneHundredAndFortySeven$.outboundSchema = OneHundredAndFortySeven$outboundSchema;
})(OneHundredAndFortySeven$ || (OneHundredAndFortySeven$ = {}));
export function oneHundredAndFortySevenToJSON(oneHundredAndFortySeven) {
    return JSON.stringify(OneHundredAndFortySeven$outboundSchema.parse(oneHundredAndFortySeven));
}
export function oneHundredAndFortySevenFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndFortySeven$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndFortySeven' from JSON`);
}
/** @internal */
export const Prev$inboundSchema = z
    .object({
    name: z.string(),
    slug: z.string(),
    fallbackEnvironment: z.string(),
});
/** @internal */
export const Prev$outboundSchema = z.object({
    name: z.string(),
    slug: z.string(),
    fallbackEnvironment: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Prev$;
(function (Prev$) {
    /** @deprecated use `Prev$inboundSchema` instead. */
    Prev$.inboundSchema = Prev$inboundSchema;
    /** @deprecated use `Prev$outboundSchema` instead. */
    Prev$.outboundSchema = Prev$outboundSchema;
})(Prev$ || (Prev$ = {}));
export function prevToJSON(prev) {
    return JSON.stringify(Prev$outboundSchema.parse(prev));
}
export function prevFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Prev$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Prev' from JSON`);
}
/** @internal */
export const OneHundredAndFortySix$inboundSchema = z.object({
    id: z.string(),
    slug: z.string().optional(),
    name: z.string().optional(),
    fallbackEnvironment: z.string().optional(),
    prev: z.lazy(() => Prev$inboundSchema),
});
/** @internal */
export const OneHundredAndFortySix$outboundSchema = z.object({
    id: z.string(),
    slug: z.string().optional(),
    name: z.string().optional(),
    fallbackEnvironment: z.string().optional(),
    prev: z.lazy(() => Prev$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndFortySix$;
(function (OneHundredAndFortySix$) {
    /** @deprecated use `OneHundredAndFortySix$inboundSchema` instead. */
    OneHundredAndFortySix$.inboundSchema = OneHundredAndFortySix$inboundSchema;
    /** @deprecated use `OneHundredAndFortySix$outboundSchema` instead. */
    OneHundredAndFortySix$.outboundSchema = OneHundredAndFortySix$outboundSchema;
})(OneHundredAndFortySix$ || (OneHundredAndFortySix$ = {}));
export function oneHundredAndFortySixToJSON(oneHundredAndFortySix) {
    return JSON.stringify(OneHundredAndFortySix$outboundSchema.parse(oneHundredAndFortySix));
}
export function oneHundredAndFortySixFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndFortySix$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndFortySix' from JSON`);
}
/** @internal */
export const OneHundredAndFortyFive$inboundSchema = z.object({
    id: z.string(),
    slug: z.string(),
    name: z.string(),
});
/** @internal */
export const OneHundredAndFortyFive$outboundSchema = z.object({
    id: z.string(),
    slug: z.string(),
    name: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndFortyFive$;
(function (OneHundredAndFortyFive$) {
    /** @deprecated use `OneHundredAndFortyFive$inboundSchema` instead. */
    OneHundredAndFortyFive$.inboundSchema = OneHundredAndFortyFive$inboundSchema;
    /** @deprecated use `OneHundredAndFortyFive$outboundSchema` instead. */
    OneHundredAndFortyFive$.outboundSchema = OneHundredAndFortyFive$outboundSchema;
})(OneHundredAndFortyFive$ || (OneHundredAndFortyFive$ = {}));
export function oneHundredAndFortyFiveToJSON(oneHundredAndFortyFive) {
    return JSON.stringify(OneHundredAndFortyFive$outboundSchema.parse(oneHundredAndFortyFive));
}
export function oneHundredAndFortyFiveFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndFortyFive$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndFortyFive' from JSON`);
}
/** @internal */
export const UserEventPayload144Action$inboundSchema = z.nativeEnum(UserEventPayload144Action);
/** @internal */
export const UserEventPayload144Action$outboundSchema = UserEventPayload144Action$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload144Action$;
(function (UserEventPayload144Action$) {
    /** @deprecated use `UserEventPayload144Action$inboundSchema` instead. */
    UserEventPayload144Action$.inboundSchema = UserEventPayload144Action$inboundSchema;
    /** @deprecated use `UserEventPayload144Action$outboundSchema` instead. */
    UserEventPayload144Action$.outboundSchema = UserEventPayload144Action$outboundSchema;
})(UserEventPayload144Action$ || (UserEventPayload144Action$ = {}));
/** @internal */
export const OneHundredAndFortyFour$inboundSchema = z.object({
    action: UserEventPayload144Action$inboundSchema,
});
/** @internal */
export const OneHundredAndFortyFour$outboundSchema = z.object({
    action: UserEventPayload144Action$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndFortyFour$;
(function (OneHundredAndFortyFour$) {
    /** @deprecated use `OneHundredAndFortyFour$inboundSchema` instead. */
    OneHundredAndFortyFour$.inboundSchema = OneHundredAndFortyFour$inboundSchema;
    /** @deprecated use `OneHundredAndFortyFour$outboundSchema` instead. */
    OneHundredAndFortyFour$.outboundSchema = OneHundredAndFortyFour$outboundSchema;
})(OneHundredAndFortyFour$ || (OneHundredAndFortyFour$ = {}));
export function oneHundredAndFortyFourToJSON(oneHundredAndFortyFour) {
    return JSON.stringify(OneHundredAndFortyFour$outboundSchema.parse(oneHundredAndFortyFour));
}
export function oneHundredAndFortyFourFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndFortyFour$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndFortyFour' from JSON`);
}
/** @internal */
export const OneHundredAndFortyThree$inboundSchema = z.object({
    edgeConfigId: z.string(),
    edgeConfigSlug: z.string(),
    edgeConfigTokenIds: z.array(z.string()),
});
/** @internal */
export const OneHundredAndFortyThree$outboundSchema = z.object({
    edgeConfigId: z.string(),
    edgeConfigSlug: z.string(),
    edgeConfigTokenIds: z.array(z.string()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndFortyThree$;
(function (OneHundredAndFortyThree$) {
    /** @deprecated use `OneHundredAndFortyThree$inboundSchema` instead. */
    OneHundredAndFortyThree$.inboundSchema = OneHundredAndFortyThree$inboundSchema;
    /** @deprecated use `OneHundredAndFortyThree$outboundSchema` instead. */
    OneHundredAndFortyThree$.outboundSchema = OneHundredAndFortyThree$outboundSchema;
})(OneHundredAndFortyThree$ || (OneHundredAndFortyThree$ = {}));
export function oneHundredAndFortyThreeToJSON(oneHundredAndFortyThree) {
    return JSON.stringify(OneHundredAndFortyThree$outboundSchema.parse(oneHundredAndFortyThree));
}
export function oneHundredAndFortyThreeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndFortyThree$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndFortyThree' from JSON`);
}
/** @internal */
export const OneHundredAndFortyTwo$inboundSchema = z.object({
    edgeConfigId: z.string(),
    edgeConfigSlug: z.string(),
    edgeConfigTokenId: z.string(),
    label: z.string(),
});
/** @internal */
export const OneHundredAndFortyTwo$outboundSchema = z.object({
    edgeConfigId: z.string(),
    edgeConfigSlug: z.string(),
    edgeConfigTokenId: z.string(),
    label: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndFortyTwo$;
(function (OneHundredAndFortyTwo$) {
    /** @deprecated use `OneHundredAndFortyTwo$inboundSchema` instead. */
    OneHundredAndFortyTwo$.inboundSchema = OneHundredAndFortyTwo$inboundSchema;
    /** @deprecated use `OneHundredAndFortyTwo$outboundSchema` instead. */
    OneHundredAndFortyTwo$.outboundSchema = OneHundredAndFortyTwo$outboundSchema;
})(OneHundredAndFortyTwo$ || (OneHundredAndFortyTwo$ = {}));
export function oneHundredAndFortyTwoToJSON(oneHundredAndFortyTwo) {
    return JSON.stringify(OneHundredAndFortyTwo$outboundSchema.parse(oneHundredAndFortyTwo));
}
export function oneHundredAndFortyTwoFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndFortyTwo$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndFortyTwo' from JSON`);
}
/** @internal */
export const OneHundredAndFortyOne$inboundSchema = z.object({
    edgeConfigId: z.string(),
    edgeConfigSlug: z.string(),
    edgeConfigDigest: z.string(),
});
/** @internal */
export const OneHundredAndFortyOne$outboundSchema = z.object({
    edgeConfigId: z.string(),
    edgeConfigSlug: z.string(),
    edgeConfigDigest: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndFortyOne$;
(function (OneHundredAndFortyOne$) {
    /** @deprecated use `OneHundredAndFortyOne$inboundSchema` instead. */
    OneHundredAndFortyOne$.inboundSchema = OneHundredAndFortyOne$inboundSchema;
    /** @deprecated use `OneHundredAndFortyOne$outboundSchema` instead. */
    OneHundredAndFortyOne$.outboundSchema = OneHundredAndFortyOne$outboundSchema;
})(OneHundredAndFortyOne$ || (OneHundredAndFortyOne$ = {}));
export function oneHundredAndFortyOneToJSON(oneHundredAndFortyOne) {
    return JSON.stringify(OneHundredAndFortyOne$outboundSchema.parse(oneHundredAndFortyOne));
}
export function oneHundredAndFortyOneFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndFortyOne$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndFortyOne' from JSON`);
}
/** @internal */
export const OneHundredAndForty$inboundSchema = z.object({
    projectName: z.string(),
    urls: z.array(z.string()),
});
/** @internal */
export const OneHundredAndForty$outboundSchema = z.object({
    projectName: z.string(),
    urls: z.array(z.string()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndForty$;
(function (OneHundredAndForty$) {
    /** @deprecated use `OneHundredAndForty$inboundSchema` instead. */
    OneHundredAndForty$.inboundSchema = OneHundredAndForty$inboundSchema;
    /** @deprecated use `OneHundredAndForty$outboundSchema` instead. */
    OneHundredAndForty$.outboundSchema = OneHundredAndForty$outboundSchema;
})(OneHundredAndForty$ || (OneHundredAndForty$ = {}));
export function oneHundredAndFortyToJSON(oneHundredAndForty) {
    return JSON.stringify(OneHundredAndForty$outboundSchema.parse(oneHundredAndForty));
}
export function oneHundredAndFortyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndForty$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndForty' from JSON`);
}
/** @internal */
export const OneHundredAndThirtyNine$inboundSchema = z.object({
    projectName: z.string(),
    tags: z.array(z.string()),
    target: z.string().optional(),
});
/** @internal */
export const OneHundredAndThirtyNine$outboundSchema = z.object({
    projectName: z.string(),
    tags: z.array(z.string()),
    target: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndThirtyNine$;
(function (OneHundredAndThirtyNine$) {
    /** @deprecated use `OneHundredAndThirtyNine$inboundSchema` instead. */
    OneHundredAndThirtyNine$.inboundSchema = OneHundredAndThirtyNine$inboundSchema;
    /** @deprecated use `OneHundredAndThirtyNine$outboundSchema` instead. */
    OneHundredAndThirtyNine$.outboundSchema = OneHundredAndThirtyNine$outboundSchema;
})(OneHundredAndThirtyNine$ || (OneHundredAndThirtyNine$ = {}));
export function oneHundredAndThirtyNineToJSON(oneHundredAndThirtyNine) {
    return JSON.stringify(OneHundredAndThirtyNine$outboundSchema.parse(oneHundredAndThirtyNine));
}
export function oneHundredAndThirtyNineFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndThirtyNine$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndThirtyNine' from JSON`);
}
/** @internal */
export const UserEventPayload138Role$inboundSchema = z.nativeEnum(UserEventPayload138Role);
/** @internal */
export const UserEventPayload138Role$outboundSchema = UserEventPayload138Role$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload138Role$;
(function (UserEventPayload138Role$) {
    /** @deprecated use `UserEventPayload138Role$inboundSchema` instead. */
    UserEventPayload138Role$.inboundSchema = UserEventPayload138Role$inboundSchema;
    /** @deprecated use `UserEventPayload138Role$outboundSchema` instead. */
    UserEventPayload138Role$.outboundSchema = UserEventPayload138Role$outboundSchema;
})(UserEventPayload138Role$ || (UserEventPayload138Role$ = {}));
/** @internal */
export const UserEventPayload138Project$inboundSchema = z.object({
    name: z.string(),
    role: UserEventPayload138Role$inboundSchema,
    invitedUserName: z.string(),
    id: z.string().optional(),
    invitedUserId: z.string().optional(),
});
/** @internal */
export const UserEventPayload138Project$outboundSchema = z.object({
    name: z.string(),
    role: UserEventPayload138Role$outboundSchema,
    invitedUserName: z.string(),
    id: z.string().optional(),
    invitedUserId: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload138Project$;
(function (UserEventPayload138Project$) {
    /** @deprecated use `UserEventPayload138Project$inboundSchema` instead. */
    UserEventPayload138Project$.inboundSchema = UserEventPayload138Project$inboundSchema;
    /** @deprecated use `UserEventPayload138Project$outboundSchema` instead. */
    UserEventPayload138Project$.outboundSchema = UserEventPayload138Project$outboundSchema;
})(UserEventPayload138Project$ || (UserEventPayload138Project$ = {}));
export function userEventPayload138ProjectToJSON(userEventPayload138Project) {
    return JSON.stringify(UserEventPayload138Project$outboundSchema.parse(userEventPayload138Project));
}
export function userEventPayload138ProjectFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayload138Project$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayload138Project' from JSON`);
}
/** @internal */
export const OneHundredAndThirtyEight$inboundSchema = z.object({
    project: z.lazy(() => UserEventPayload138Project$inboundSchema),
});
/** @internal */
export const OneHundredAndThirtyEight$outboundSchema = z.object({
    project: z.lazy(() => UserEventPayload138Project$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndThirtyEight$;
(function (OneHundredAndThirtyEight$) {
    /** @deprecated use `OneHundredAndThirtyEight$inboundSchema` instead. */
    OneHundredAndThirtyEight$.inboundSchema = OneHundredAndThirtyEight$inboundSchema;
    /** @deprecated use `OneHundredAndThirtyEight$outboundSchema` instead. */
    OneHundredAndThirtyEight$.outboundSchema = OneHundredAndThirtyEight$outboundSchema;
})(OneHundredAndThirtyEight$ || (OneHundredAndThirtyEight$ = {}));
export function oneHundredAndThirtyEightToJSON(oneHundredAndThirtyEight) {
    return JSON.stringify(OneHundredAndThirtyEight$outboundSchema.parse(oneHundredAndThirtyEight));
}
export function oneHundredAndThirtyEightFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndThirtyEight$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndThirtyEight' from JSON`);
}
/** @internal */
export const UserEventPayload137Project$inboundSchema = z.object({
    id: z.string(),
    name: z.string(),
});
/** @internal */
export const UserEventPayload137Project$outboundSchema = z.object({
    id: z.string(),
    name: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload137Project$;
(function (UserEventPayload137Project$) {
    /** @deprecated use `UserEventPayload137Project$inboundSchema` instead. */
    UserEventPayload137Project$.inboundSchema = UserEventPayload137Project$inboundSchema;
    /** @deprecated use `UserEventPayload137Project$outboundSchema` instead. */
    UserEventPayload137Project$.outboundSchema = UserEventPayload137Project$outboundSchema;
})(UserEventPayload137Project$ || (UserEventPayload137Project$ = {}));
export function userEventPayload137ProjectToJSON(userEventPayload137Project) {
    return JSON.stringify(UserEventPayload137Project$outboundSchema.parse(userEventPayload137Project));
}
export function userEventPayload137ProjectFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayload137Project$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayload137Project' from JSON`);
}
/** @internal */
export const UserEventPayload137Role$inboundSchema = z.nativeEnum(UserEventPayload137Role);
/** @internal */
export const UserEventPayload137Role$outboundSchema = UserEventPayload137Role$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload137Role$;
(function (UserEventPayload137Role$) {
    /** @deprecated use `UserEventPayload137Role$inboundSchema` instead. */
    UserEventPayload137Role$.inboundSchema = UserEventPayload137Role$inboundSchema;
    /** @deprecated use `UserEventPayload137Role$outboundSchema` instead. */
    UserEventPayload137Role$.outboundSchema = UserEventPayload137Role$outboundSchema;
})(UserEventPayload137Role$ || (UserEventPayload137Role$ = {}));
/** @internal */
export const PayloadPreviousRole$inboundSchema = z.nativeEnum(PayloadPreviousRole);
/** @internal */
export const PayloadPreviousRole$outboundSchema = PayloadPreviousRole$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadPreviousRole$;
(function (PayloadPreviousRole$) {
    /** @deprecated use `PayloadPreviousRole$inboundSchema` instead. */
    PayloadPreviousRole$.inboundSchema = PayloadPreviousRole$inboundSchema;
    /** @deprecated use `PayloadPreviousRole$outboundSchema` instead. */
    PayloadPreviousRole$.outboundSchema = PayloadPreviousRole$outboundSchema;
})(PayloadPreviousRole$ || (PayloadPreviousRole$ = {}));
/** @internal */
export const PayloadProjectMembership$inboundSchema = z.object({
    role: UserEventPayload137Role$inboundSchema.optional(),
    uid: z.string().optional(),
    createdAt: z.number().optional(),
    username: z.string().optional(),
    previousRole: PayloadPreviousRole$inboundSchema.optional(),
});
/** @internal */
export const PayloadProjectMembership$outboundSchema = z.object({
    role: UserEventPayload137Role$outboundSchema.optional(),
    uid: z.string().optional(),
    createdAt: z.number().optional(),
    username: z.string().optional(),
    previousRole: PayloadPreviousRole$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadProjectMembership$;
(function (PayloadProjectMembership$) {
    /** @deprecated use `PayloadProjectMembership$inboundSchema` instead. */
    PayloadProjectMembership$.inboundSchema = PayloadProjectMembership$inboundSchema;
    /** @deprecated use `PayloadProjectMembership$outboundSchema` instead. */
    PayloadProjectMembership$.outboundSchema = PayloadProjectMembership$outboundSchema;
})(PayloadProjectMembership$ || (PayloadProjectMembership$ = {}));
export function payloadProjectMembershipToJSON(payloadProjectMembership) {
    return JSON.stringify(PayloadProjectMembership$outboundSchema.parse(payloadProjectMembership));
}
export function payloadProjectMembershipFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadProjectMembership$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadProjectMembership' from JSON`);
}
/** @internal */
export const OneHundredAndThirtySeven$inboundSchema = z.object({
    project: z.lazy(() => UserEventPayload137Project$inboundSchema),
    projectMembership: z.lazy(() => PayloadProjectMembership$inboundSchema),
});
/** @internal */
export const OneHundredAndThirtySeven$outboundSchema = z.object({
    project: z.lazy(() => UserEventPayload137Project$outboundSchema),
    projectMembership: z.lazy(() => PayloadProjectMembership$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndThirtySeven$;
(function (OneHundredAndThirtySeven$) {
    /** @deprecated use `OneHundredAndThirtySeven$inboundSchema` instead. */
    OneHundredAndThirtySeven$.inboundSchema = OneHundredAndThirtySeven$inboundSchema;
    /** @deprecated use `OneHundredAndThirtySeven$outboundSchema` instead. */
    OneHundredAndThirtySeven$.outboundSchema = OneHundredAndThirtySeven$outboundSchema;
})(OneHundredAndThirtySeven$ || (OneHundredAndThirtySeven$ = {}));
export function oneHundredAndThirtySevenToJSON(oneHundredAndThirtySeven) {
    return JSON.stringify(OneHundredAndThirtySeven$outboundSchema.parse(oneHundredAndThirtySeven));
}
export function oneHundredAndThirtySevenFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndThirtySeven$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndThirtySeven' from JSON`);
}
/** @internal */
export const UserEventPayload136Project$inboundSchema = z.object({
    name: z.string(),
    id: z.string().optional(),
});
/** @internal */
export const UserEventPayload136Project$outboundSchema = z.object({
    name: z.string(),
    id: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload136Project$;
(function (UserEventPayload136Project$) {
    /** @deprecated use `UserEventPayload136Project$inboundSchema` instead. */
    UserEventPayload136Project$.inboundSchema = UserEventPayload136Project$inboundSchema;
    /** @deprecated use `UserEventPayload136Project$outboundSchema` instead. */
    UserEventPayload136Project$.outboundSchema = UserEventPayload136Project$outboundSchema;
})(UserEventPayload136Project$ || (UserEventPayload136Project$ = {}));
export function userEventPayload136ProjectToJSON(userEventPayload136Project) {
    return JSON.stringify(UserEventPayload136Project$outboundSchema.parse(userEventPayload136Project));
}
export function userEventPayload136ProjectFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayload136Project$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayload136Project' from JSON`);
}
/** @internal */
export const UserEventPayloadRole$inboundSchema = z.nativeEnum(UserEventPayloadRole);
/** @internal */
export const UserEventPayloadRole$outboundSchema = UserEventPayloadRole$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayloadRole$;
(function (UserEventPayloadRole$) {
    /** @deprecated use `UserEventPayloadRole$inboundSchema` instead. */
    UserEventPayloadRole$.inboundSchema = UserEventPayloadRole$inboundSchema;
    /** @deprecated use `UserEventPayloadRole$outboundSchema` instead. */
    UserEventPayloadRole$.outboundSchema = UserEventPayloadRole$outboundSchema;
})(UserEventPayloadRole$ || (UserEventPayloadRole$ = {}));
/** @internal */
export const RemovedMembership$inboundSchema = z.object({
    role: UserEventPayloadRole$inboundSchema,
    uid: z.string(),
    createdAt: z.number(),
    username: z.string().optional(),
});
/** @internal */
export const RemovedMembership$outboundSchema = z.object({
    role: UserEventPayloadRole$outboundSchema,
    uid: z.string(),
    createdAt: z.number(),
    username: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RemovedMembership$;
(function (RemovedMembership$) {
    /** @deprecated use `RemovedMembership$inboundSchema` instead. */
    RemovedMembership$.inboundSchema = RemovedMembership$inboundSchema;
    /** @deprecated use `RemovedMembership$outboundSchema` instead. */
    RemovedMembership$.outboundSchema = RemovedMembership$outboundSchema;
})(RemovedMembership$ || (RemovedMembership$ = {}));
export function removedMembershipToJSON(removedMembership) {
    return JSON.stringify(RemovedMembership$outboundSchema.parse(removedMembership));
}
export function removedMembershipFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RemovedMembership$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RemovedMembership' from JSON`);
}
/** @internal */
export const OneHundredAndThirtySix$inboundSchema = z.object({
    project: z.lazy(() => UserEventPayload136Project$inboundSchema),
    removedMembership: z.lazy(() => RemovedMembership$inboundSchema),
});
/** @internal */
export const OneHundredAndThirtySix$outboundSchema = z.object({
    project: z.lazy(() => UserEventPayload136Project$outboundSchema),
    removedMembership: z.lazy(() => RemovedMembership$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndThirtySix$;
(function (OneHundredAndThirtySix$) {
    /** @deprecated use `OneHundredAndThirtySix$inboundSchema` instead. */
    OneHundredAndThirtySix$.inboundSchema = OneHundredAndThirtySix$inboundSchema;
    /** @deprecated use `OneHundredAndThirtySix$outboundSchema` instead. */
    OneHundredAndThirtySix$.outboundSchema = OneHundredAndThirtySix$outboundSchema;
})(OneHundredAndThirtySix$ || (OneHundredAndThirtySix$ = {}));
export function oneHundredAndThirtySixToJSON(oneHundredAndThirtySix) {
    return JSON.stringify(OneHundredAndThirtySix$outboundSchema.parse(oneHundredAndThirtySix));
}
export function oneHundredAndThirtySixFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndThirtySix$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndThirtySix' from JSON`);
}
/** @internal */
export const UserEventPayload135Project$inboundSchema = z.object({
    name: z.string(),
    id: z.string().optional(),
});
/** @internal */
export const UserEventPayload135Project$outboundSchema = z.object({
    name: z.string(),
    id: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload135Project$;
(function (UserEventPayload135Project$) {
    /** @deprecated use `UserEventPayload135Project$inboundSchema` instead. */
    UserEventPayload135Project$.inboundSchema = UserEventPayload135Project$inboundSchema;
    /** @deprecated use `UserEventPayload135Project$outboundSchema` instead. */
    UserEventPayload135Project$.outboundSchema = UserEventPayload135Project$outboundSchema;
})(UserEventPayload135Project$ || (UserEventPayload135Project$ = {}));
export function userEventPayload135ProjectToJSON(userEventPayload135Project) {
    return JSON.stringify(UserEventPayload135Project$outboundSchema.parse(userEventPayload135Project));
}
export function userEventPayload135ProjectFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayload135Project$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayload135Project' from JSON`);
}
/** @internal */
export const PayloadRole$inboundSchema = z
    .nativeEnum(PayloadRole);
/** @internal */
export const PayloadRole$outboundSchema = PayloadRole$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadRole$;
(function (PayloadRole$) {
    /** @deprecated use `PayloadRole$inboundSchema` instead. */
    PayloadRole$.inboundSchema = PayloadRole$inboundSchema;
    /** @deprecated use `PayloadRole$outboundSchema` instead. */
    PayloadRole$.outboundSchema = PayloadRole$outboundSchema;
})(PayloadRole$ || (PayloadRole$ = {}));
/** @internal */
export const ProjectMembership$inboundSchema = z.object({
    role: PayloadRole$inboundSchema,
    uid: z.string(),
    createdAt: z.number(),
    username: z.string().optional(),
});
/** @internal */
export const ProjectMembership$outboundSchema = z.object({
    role: PayloadRole$outboundSchema,
    uid: z.string(),
    createdAt: z.number(),
    username: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ProjectMembership$;
(function (ProjectMembership$) {
    /** @deprecated use `ProjectMembership$inboundSchema` instead. */
    ProjectMembership$.inboundSchema = ProjectMembership$inboundSchema;
    /** @deprecated use `ProjectMembership$outboundSchema` instead. */
    ProjectMembership$.outboundSchema = ProjectMembership$outboundSchema;
})(ProjectMembership$ || (ProjectMembership$ = {}));
export function projectMembershipToJSON(projectMembership) {
    return JSON.stringify(ProjectMembership$outboundSchema.parse(projectMembership));
}
export function projectMembershipFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ProjectMembership$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ProjectMembership' from JSON`);
}
/** @internal */
export const OneHundredAndThirtyFive$inboundSchema = z.object({
    project: z.lazy(() => UserEventPayload135Project$inboundSchema),
    projectMembership: z.nullable(z.lazy(() => ProjectMembership$inboundSchema)),
});
/** @internal */
export const OneHundredAndThirtyFive$outboundSchema = z.object({
    project: z.lazy(() => UserEventPayload135Project$outboundSchema),
    projectMembership: z.nullable(z.lazy(() => ProjectMembership$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndThirtyFive$;
(function (OneHundredAndThirtyFive$) {
    /** @deprecated use `OneHundredAndThirtyFive$inboundSchema` instead. */
    OneHundredAndThirtyFive$.inboundSchema = OneHundredAndThirtyFive$inboundSchema;
    /** @deprecated use `OneHundredAndThirtyFive$outboundSchema` instead. */
    OneHundredAndThirtyFive$.outboundSchema = OneHundredAndThirtyFive$outboundSchema;
})(OneHundredAndThirtyFive$ || (OneHundredAndThirtyFive$ = {}));
export function oneHundredAndThirtyFiveToJSON(oneHundredAndThirtyFive) {
    return JSON.stringify(OneHundredAndThirtyFive$outboundSchema.parse(oneHundredAndThirtyFive));
}
export function oneHundredAndThirtyFiveFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndThirtyFive$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndThirtyFive' from JSON`);
}
/** @internal */
export const OneHundredAndThirtyFour$inboundSchema = z.object({
    previousProjectName: z.string(),
    newProjectName: z.string(),
    originAccountName: z.string(),
    transferId: z.string().optional(),
});
/** @internal */
export const OneHundredAndThirtyFour$outboundSchema = z.object({
    previousProjectName: z.string(),
    newProjectName: z.string(),
    originAccountName: z.string(),
    transferId: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndThirtyFour$;
(function (OneHundredAndThirtyFour$) {
    /** @deprecated use `OneHundredAndThirtyFour$inboundSchema` instead. */
    OneHundredAndThirtyFour$.inboundSchema = OneHundredAndThirtyFour$inboundSchema;
    /** @deprecated use `OneHundredAndThirtyFour$outboundSchema` instead. */
    OneHundredAndThirtyFour$.outboundSchema = OneHundredAndThirtyFour$outboundSchema;
})(OneHundredAndThirtyFour$ || (OneHundredAndThirtyFour$ = {}));
export function oneHundredAndThirtyFourToJSON(oneHundredAndThirtyFour) {
    return JSON.stringify(OneHundredAndThirtyFour$outboundSchema.parse(oneHundredAndThirtyFour));
}
export function oneHundredAndThirtyFourFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndThirtyFour$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndThirtyFour' from JSON`);
}
/** @internal */
export const OneHundredAndThirtyThree$inboundSchema = z.object({
    previousProjectName: z.string(),
    newProjectName: z.string(),
    destinationAccountName: z.string(),
    transferId: z.string().optional(),
});
/** @internal */
export const OneHundredAndThirtyThree$outboundSchema = z.object({
    previousProjectName: z.string(),
    newProjectName: z.string(),
    destinationAccountName: z.string(),
    transferId: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndThirtyThree$;
(function (OneHundredAndThirtyThree$) {
    /** @deprecated use `OneHundredAndThirtyThree$inboundSchema` instead. */
    OneHundredAndThirtyThree$.inboundSchema = OneHundredAndThirtyThree$inboundSchema;
    /** @deprecated use `OneHundredAndThirtyThree$outboundSchema` instead. */
    OneHundredAndThirtyThree$.outboundSchema = OneHundredAndThirtyThree$outboundSchema;
})(OneHundredAndThirtyThree$ || (OneHundredAndThirtyThree$ = {}));
export function oneHundredAndThirtyThreeToJSON(oneHundredAndThirtyThree) {
    return JSON.stringify(OneHundredAndThirtyThree$outboundSchema.parse(oneHundredAndThirtyThree));
}
export function oneHundredAndThirtyThreeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndThirtyThree$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndThirtyThree' from JSON`);
}
/** @internal */
export const OneHundredAndThirtyTwo$inboundSchema = z.object({
    projectName: z.string(),
    destinationAccountName: z.nullable(z.string()),
    transferId: z.string().optional(),
});
/** @internal */
export const OneHundredAndThirtyTwo$outboundSchema = z.object({
    projectName: z.string(),
    destinationAccountName: z.nullable(z.string()),
    transferId: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndThirtyTwo$;
(function (OneHundredAndThirtyTwo$) {
    /** @deprecated use `OneHundredAndThirtyTwo$inboundSchema` instead. */
    OneHundredAndThirtyTwo$.inboundSchema = OneHundredAndThirtyTwo$inboundSchema;
    /** @deprecated use `OneHundredAndThirtyTwo$outboundSchema` instead. */
    OneHundredAndThirtyTwo$.outboundSchema = OneHundredAndThirtyTwo$outboundSchema;
})(OneHundredAndThirtyTwo$ || (OneHundredAndThirtyTwo$ = {}));
export function oneHundredAndThirtyTwoToJSON(oneHundredAndThirtyTwo) {
    return JSON.stringify(OneHundredAndThirtyTwo$outboundSchema.parse(oneHundredAndThirtyTwo));
}
export function oneHundredAndThirtyTwoFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndThirtyTwo$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndThirtyTwo' from JSON`);
}
/** @internal */
export const OneHundredAndThirtyOne$inboundSchema = z.object({
    projectId: z.string(),
    projectName: z.string(),
    originAccountName: z.string(),
    destinationAccountName: z.string(),
    destinationAccountId: z.string(),
    transferId: z.string().optional(),
});
/** @internal */
export const OneHundredAndThirtyOne$outboundSchema = z.object({
    projectId: z.string(),
    projectName: z.string(),
    originAccountName: z.string(),
    destinationAccountName: z.string(),
    destinationAccountId: z.string(),
    transferId: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndThirtyOne$;
(function (OneHundredAndThirtyOne$) {
    /** @deprecated use `OneHundredAndThirtyOne$inboundSchema` instead. */
    OneHundredAndThirtyOne$.inboundSchema = OneHundredAndThirtyOne$inboundSchema;
    /** @deprecated use `OneHundredAndThirtyOne$outboundSchema` instead. */
    OneHundredAndThirtyOne$.outboundSchema = OneHundredAndThirtyOne$outboundSchema;
})(OneHundredAndThirtyOne$ || (OneHundredAndThirtyOne$ = {}));
export function oneHundredAndThirtyOneToJSON(oneHundredAndThirtyOne) {
    return JSON.stringify(OneHundredAndThirtyOne$outboundSchema.parse(oneHundredAndThirtyOne));
}
export function oneHundredAndThirtyOneFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndThirtyOne$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndThirtyOne' from JSON`);
}
/** @internal */
export const OneHundredAndThirty$inboundSchema = z.object({
    requestedTeamName: z.string(),
    requestedUserName: z.string().optional(),
    gitUsername: z.string().optional(),
    githubUsername: z.string().optional(),
    gitlabUsername: z.string().optional(),
    bitbucketUsername: z.string().optional(),
});
/** @internal */
export const OneHundredAndThirty$outboundSchema = z.object({
    requestedTeamName: z.string(),
    requestedUserName: z.string().optional(),
    gitUsername: z.string().optional(),
    githubUsername: z.string().optional(),
    gitlabUsername: z.string().optional(),
    bitbucketUsername: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndThirty$;
(function (OneHundredAndThirty$) {
    /** @deprecated use `OneHundredAndThirty$inboundSchema` instead. */
    OneHundredAndThirty$.inboundSchema = OneHundredAndThirty$inboundSchema;
    /** @deprecated use `OneHundredAndThirty$outboundSchema` instead. */
    OneHundredAndThirty$.outboundSchema = OneHundredAndThirty$outboundSchema;
})(OneHundredAndThirty$ || (OneHundredAndThirty$ = {}));
export function oneHundredAndThirtyToJSON(oneHundredAndThirty) {
    return JSON.stringify(OneHundredAndThirty$outboundSchema.parse(oneHundredAndThirty));
}
export function oneHundredAndThirtyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndThirty$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndThirty' from JSON`);
}
/** @internal */
export const OneHundredAndTwentyNine$inboundSchema = z.object({
    teamName: z.string(),
    username: z.string().optional(),
    gitUsername: z.nullable(z.string()).optional(),
    githubUsername: z.nullable(z.string()).optional(),
    gitlabUsername: z.nullable(z.string()).optional(),
    bitbucketUsername: z.nullable(z.string()).optional(),
});
/** @internal */
export const OneHundredAndTwentyNine$outboundSchema = z.object({
    teamName: z.string(),
    username: z.string().optional(),
    gitUsername: z.nullable(z.string()).optional(),
    githubUsername: z.nullable(z.string()).optional(),
    gitlabUsername: z.nullable(z.string()).optional(),
    bitbucketUsername: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndTwentyNine$;
(function (OneHundredAndTwentyNine$) {
    /** @deprecated use `OneHundredAndTwentyNine$inboundSchema` instead. */
    OneHundredAndTwentyNine$.inboundSchema = OneHundredAndTwentyNine$inboundSchema;
    /** @deprecated use `OneHundredAndTwentyNine$outboundSchema` instead. */
    OneHundredAndTwentyNine$.outboundSchema = OneHundredAndTwentyNine$outboundSchema;
})(OneHundredAndTwentyNine$ || (OneHundredAndTwentyNine$ = {}));
export function oneHundredAndTwentyNineToJSON(oneHundredAndTwentyNine) {
    return JSON.stringify(OneHundredAndTwentyNine$outboundSchema.parse(oneHundredAndTwentyNine));
}
export function oneHundredAndTwentyNineFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndTwentyNine$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndTwentyNine' from JSON`);
}
/** @internal */
export const OneHundredAndTwentyEight$inboundSchema = z.object({
    teamName: z.string(),
    username: z.string().optional(),
    gitUsername: z.string().optional(),
    githubUsername: z.nullable(z.string()).optional(),
    gitlabUsername: z.nullable(z.string()).optional(),
    bitbucketUsername: z.nullable(z.string()).optional(),
    updatedUid: z.string().optional(),
    teamId: z.string().optional(),
});
/** @internal */
export const OneHundredAndTwentyEight$outboundSchema = z.object({
    teamName: z.string(),
    username: z.string().optional(),
    gitUsername: z.string().optional(),
    githubUsername: z.nullable(z.string()).optional(),
    gitlabUsername: z.nullable(z.string()).optional(),
    bitbucketUsername: z.nullable(z.string()).optional(),
    updatedUid: z.string().optional(),
    teamId: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndTwentyEight$;
(function (OneHundredAndTwentyEight$) {
    /** @deprecated use `OneHundredAndTwentyEight$inboundSchema` instead. */
    OneHundredAndTwentyEight$.inboundSchema = OneHundredAndTwentyEight$inboundSchema;
    /** @deprecated use `OneHundredAndTwentyEight$outboundSchema` instead. */
    OneHundredAndTwentyEight$.outboundSchema = OneHundredAndTwentyEight$outboundSchema;
})(OneHundredAndTwentyEight$ || (OneHundredAndTwentyEight$ = {}));
export function oneHundredAndTwentyEightToJSON(oneHundredAndTwentyEight) {
    return JSON.stringify(OneHundredAndTwentyEight$outboundSchema.parse(oneHundredAndTwentyEight));
}
export function oneHundredAndTwentyEightFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndTwentyEight$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndTwentyEight' from JSON`);
}
/** @internal */
export const OneHundredAndTwentySeven$inboundSchema = z.object({
    price: z.number().optional(),
    currency: z.string().optional(),
});
/** @internal */
export const OneHundredAndTwentySeven$outboundSchema = z.object({
    price: z.number().optional(),
    currency: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndTwentySeven$;
(function (OneHundredAndTwentySeven$) {
    /** @deprecated use `OneHundredAndTwentySeven$inboundSchema` instead. */
    OneHundredAndTwentySeven$.inboundSchema = OneHundredAndTwentySeven$inboundSchema;
    /** @deprecated use `OneHundredAndTwentySeven$outboundSchema` instead. */
    OneHundredAndTwentySeven$.outboundSchema = OneHundredAndTwentySeven$outboundSchema;
})(OneHundredAndTwentySeven$ || (OneHundredAndTwentySeven$ = {}));
export function oneHundredAndTwentySevenToJSON(oneHundredAndTwentySeven) {
    return JSON.stringify(OneHundredAndTwentySeven$outboundSchema.parse(oneHundredAndTwentySeven));
}
export function oneHundredAndTwentySevenFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndTwentySeven$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndTwentySeven' from JSON`);
}
/** @internal */
export const OneHundredAndTwentySix$inboundSchema = z.object({
    previewDeploymentSuffix: z.nullable(z.string()).optional(),
    previousPreviewDeploymentSuffix: z.nullable(z.string()).optional(),
});
/** @internal */
export const OneHundredAndTwentySix$outboundSchema = z.object({
    previewDeploymentSuffix: z.nullable(z.string()).optional(),
    previousPreviewDeploymentSuffix: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndTwentySix$;
(function (OneHundredAndTwentySix$) {
    /** @deprecated use `OneHundredAndTwentySix$inboundSchema` instead. */
    OneHundredAndTwentySix$.inboundSchema = OneHundredAndTwentySix$inboundSchema;
    /** @deprecated use `OneHundredAndTwentySix$outboundSchema` instead. */
    OneHundredAndTwentySix$.outboundSchema = OneHundredAndTwentySix$outboundSchema;
})(OneHundredAndTwentySix$ || (OneHundredAndTwentySix$ = {}));
export function oneHundredAndTwentySixToJSON(oneHundredAndTwentySix) {
    return JSON.stringify(OneHundredAndTwentySix$outboundSchema.parse(oneHundredAndTwentySix));
}
export function oneHundredAndTwentySixFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndTwentySix$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndTwentySix' from JSON`);
}
/** @internal */
export const OneHundredAndTwentyFive$inboundSchema = z.object({
    price: z.number().optional(),
    currency: z.string().optional(),
    enabled: z.boolean().optional(),
});
/** @internal */
export const OneHundredAndTwentyFive$outboundSchema = z.object({
    price: z.number().optional(),
    currency: z.string().optional(),
    enabled: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndTwentyFive$;
(function (OneHundredAndTwentyFive$) {
    /** @deprecated use `OneHundredAndTwentyFive$inboundSchema` instead. */
    OneHundredAndTwentyFive$.inboundSchema = OneHundredAndTwentyFive$inboundSchema;
    /** @deprecated use `OneHundredAndTwentyFive$outboundSchema` instead. */
    OneHundredAndTwentyFive$.outboundSchema = OneHundredAndTwentyFive$outboundSchema;
})(OneHundredAndTwentyFive$ || (OneHundredAndTwentyFive$ = {}));
export function oneHundredAndTwentyFiveToJSON(oneHundredAndTwentyFive) {
    return JSON.stringify(OneHundredAndTwentyFive$outboundSchema.parse(oneHundredAndTwentyFive));
}
export function oneHundredAndTwentyFiveFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndTwentyFive$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndTwentyFive' from JSON`);
}
/** @internal */
export const OneHundredAndTwentyFour$inboundSchema = z.object({
    username: z.string(),
});
/** @internal */
export const OneHundredAndTwentyFour$outboundSchema = z.object({
    username: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndTwentyFour$;
(function (OneHundredAndTwentyFour$) {
    /** @deprecated use `OneHundredAndTwentyFour$inboundSchema` instead. */
    OneHundredAndTwentyFour$.inboundSchema = OneHundredAndTwentyFour$inboundSchema;
    /** @deprecated use `OneHundredAndTwentyFour$outboundSchema` instead. */
    OneHundredAndTwentyFour$.outboundSchema = OneHundredAndTwentyFour$outboundSchema;
})(OneHundredAndTwentyFour$ || (OneHundredAndTwentyFour$ = {}));
export function oneHundredAndTwentyFourToJSON(oneHundredAndTwentyFour) {
    return JSON.stringify(OneHundredAndTwentyFour$outboundSchema.parse(oneHundredAndTwentyFour));
}
export function oneHundredAndTwentyFourFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndTwentyFour$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndTwentyFour' from JSON`);
}
/** @internal */
export const OneHundredAndTwentyThree$inboundSchema = z.object({
    email: z.string(),
    prevEmail: z.string(),
});
/** @internal */
export const OneHundredAndTwentyThree$outboundSchema = z.object({
    email: z.string(),
    prevEmail: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndTwentyThree$;
(function (OneHundredAndTwentyThree$) {
    /** @deprecated use `OneHundredAndTwentyThree$inboundSchema` instead. */
    OneHundredAndTwentyThree$.inboundSchema = OneHundredAndTwentyThree$inboundSchema;
    /** @deprecated use `OneHundredAndTwentyThree$outboundSchema` instead. */
    OneHundredAndTwentyThree$.outboundSchema = OneHundredAndTwentyThree$outboundSchema;
})(OneHundredAndTwentyThree$ || (OneHundredAndTwentyThree$ = {}));
export function oneHundredAndTwentyThreeToJSON(oneHundredAndTwentyThree) {
    return JSON.stringify(OneHundredAndTwentyThree$outboundSchema.parse(oneHundredAndTwentyThree));
}
export function oneHundredAndTwentyThreeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndTwentyThree$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndTwentyThree' from JSON`);
}
/** @internal */
export const OneHundredAndTwentyTwo$inboundSchema = z.object({
    mfaEnabled: z.boolean(),
});
/** @internal */
export const OneHundredAndTwentyTwo$outboundSchema = z.object({
    mfaEnabled: z.boolean(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndTwentyTwo$;
(function (OneHundredAndTwentyTwo$) {
    /** @deprecated use `OneHundredAndTwentyTwo$inboundSchema` instead. */
    OneHundredAndTwentyTwo$.inboundSchema = OneHundredAndTwentyTwo$inboundSchema;
    /** @deprecated use `OneHundredAndTwentyTwo$outboundSchema` instead. */
    OneHundredAndTwentyTwo$.outboundSchema = OneHundredAndTwentyTwo$outboundSchema;
})(OneHundredAndTwentyTwo$ || (OneHundredAndTwentyTwo$ = {}));
export function oneHundredAndTwentyTwoToJSON(oneHundredAndTwentyTwo) {
    return JSON.stringify(OneHundredAndTwentyTwo$outboundSchema.parse(oneHundredAndTwentyTwo));
}
export function oneHundredAndTwentyTwoFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndTwentyTwo$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndTwentyTwo' from JSON`);
}
/** @internal */
export const OneHundredAndTwentyOne$inboundSchema = z.object({
    enabled: z.boolean(),
    totpVerified: z.boolean(),
});
/** @internal */
export const OneHundredAndTwentyOne$outboundSchema = z.object({
    enabled: z.boolean(),
    totpVerified: z.boolean(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndTwentyOne$;
(function (OneHundredAndTwentyOne$) {
    /** @deprecated use `OneHundredAndTwentyOne$inboundSchema` instead. */
    OneHundredAndTwentyOne$.inboundSchema = OneHundredAndTwentyOne$inboundSchema;
    /** @deprecated use `OneHundredAndTwentyOne$outboundSchema` instead. */
    OneHundredAndTwentyOne$.outboundSchema = OneHundredAndTwentyOne$outboundSchema;
})(OneHundredAndTwentyOne$ || (OneHundredAndTwentyOne$ = {}));
export function oneHundredAndTwentyOneToJSON(oneHundredAndTwentyOne) {
    return JSON.stringify(OneHundredAndTwentyOne$outboundSchema.parse(oneHundredAndTwentyOne));
}
export function oneHundredAndTwentyOneFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndTwentyOne$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndTwentyOne' from JSON`);
}
/** @internal */
export const Previous$inboundSchema = z.object({
    enabled: z.boolean(),
    totpVerified: z.boolean(),
});
/** @internal */
export const Previous$outboundSchema = z.object({
    enabled: z.boolean(),
    totpVerified: z.boolean(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Previous$;
(function (Previous$) {
    /** @deprecated use `Previous$inboundSchema` instead. */
    Previous$.inboundSchema = Previous$inboundSchema;
    /** @deprecated use `Previous$outboundSchema` instead. */
    Previous$.outboundSchema = Previous$outboundSchema;
})(Previous$ || (Previous$ = {}));
export function previousToJSON(previous) {
    return JSON.stringify(Previous$outboundSchema.parse(previous));
}
export function previousFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Previous$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Previous' from JSON`);
}
/** @internal */
export const Next$inboundSchema = z
    .object({
    enabled: z.boolean(),
    totpVerified: z.boolean(),
});
/** @internal */
export const Next$outboundSchema = z.object({
    enabled: z.boolean(),
    totpVerified: z.boolean(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Next$;
(function (Next$) {
    /** @deprecated use `Next$inboundSchema` instead. */
    Next$.inboundSchema = Next$inboundSchema;
    /** @deprecated use `Next$outboundSchema` instead. */
    Next$.outboundSchema = Next$outboundSchema;
})(Next$ || (Next$ = {}));
export function nextToJSON(next) {
    return JSON.stringify(Next$outboundSchema.parse(next));
}
export function nextFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Next$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Next' from JSON`);
}
/** @internal */
export const OneHundredAndTwenty$inboundSchema = z.object({
    previous: z.lazy(() => Previous$inboundSchema),
    next: z.lazy(() => Next$inboundSchema),
});
/** @internal */
export const OneHundredAndTwenty$outboundSchema = z.object({
    previous: z.lazy(() => Previous$outboundSchema),
    next: z.lazy(() => Next$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndTwenty$;
(function (OneHundredAndTwenty$) {
    /** @deprecated use `OneHundredAndTwenty$inboundSchema` instead. */
    OneHundredAndTwenty$.inboundSchema = OneHundredAndTwenty$inboundSchema;
    /** @deprecated use `OneHundredAndTwenty$outboundSchema` instead. */
    OneHundredAndTwenty$.outboundSchema = OneHundredAndTwenty$outboundSchema;
})(OneHundredAndTwenty$ || (OneHundredAndTwenty$ = {}));
export function oneHundredAndTwentyToJSON(oneHundredAndTwenty) {
    return JSON.stringify(OneHundredAndTwenty$outboundSchema.parse(oneHundredAndTwenty));
}
export function oneHundredAndTwentyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndTwenty$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndTwenty' from JSON`);
}
/** @internal */
export const PayloadRemoteCaching$inboundSchema = z.object({
    enabled: z.boolean().optional(),
});
/** @internal */
export const PayloadRemoteCaching$outboundSchema = z.object({
    enabled: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadRemoteCaching$;
(function (PayloadRemoteCaching$) {
    /** @deprecated use `PayloadRemoteCaching$inboundSchema` instead. */
    PayloadRemoteCaching$.inboundSchema = PayloadRemoteCaching$inboundSchema;
    /** @deprecated use `PayloadRemoteCaching$outboundSchema` instead. */
    PayloadRemoteCaching$.outboundSchema = PayloadRemoteCaching$outboundSchema;
})(PayloadRemoteCaching$ || (PayloadRemoteCaching$ = {}));
export function payloadRemoteCachingToJSON(payloadRemoteCaching) {
    return JSON.stringify(PayloadRemoteCaching$outboundSchema.parse(payloadRemoteCaching));
}
export function payloadRemoteCachingFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadRemoteCaching$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadRemoteCaching' from JSON`);
}
/** @internal */
export const OneHundredAndNineteen$inboundSchema = z.object({
    remoteCaching: z.lazy(() => PayloadRemoteCaching$inboundSchema).optional(),
});
/** @internal */
export const OneHundredAndNineteen$outboundSchema = z.object({
    remoteCaching: z.lazy(() => PayloadRemoteCaching$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndNineteen$;
(function (OneHundredAndNineteen$) {
    /** @deprecated use `OneHundredAndNineteen$inboundSchema` instead. */
    OneHundredAndNineteen$.inboundSchema = OneHundredAndNineteen$inboundSchema;
    /** @deprecated use `OneHundredAndNineteen$outboundSchema` instead. */
    OneHundredAndNineteen$.outboundSchema = OneHundredAndNineteen$outboundSchema;
})(OneHundredAndNineteen$ || (OneHundredAndNineteen$ = {}));
export function oneHundredAndNineteenToJSON(oneHundredAndNineteen) {
    return JSON.stringify(OneHundredAndNineteen$outboundSchema.parse(oneHundredAndNineteen));
}
export function oneHundredAndNineteenFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndNineteen$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndNineteen' from JSON`);
}
/** @internal */
export const OneHundredAndEighteen$inboundSchema = z.object({
    slug: z.string().optional(),
});
/** @internal */
export const OneHundredAndEighteen$outboundSchema = z.object({
    slug: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndEighteen$;
(function (OneHundredAndEighteen$) {
    /** @deprecated use `OneHundredAndEighteen$inboundSchema` instead. */
    OneHundredAndEighteen$.inboundSchema = OneHundredAndEighteen$inboundSchema;
    /** @deprecated use `OneHundredAndEighteen$outboundSchema` instead. */
    OneHundredAndEighteen$.outboundSchema = OneHundredAndEighteen$outboundSchema;
})(OneHundredAndEighteen$ || (OneHundredAndEighteen$ = {}));
export function oneHundredAndEighteenToJSON(oneHundredAndEighteen) {
    return JSON.stringify(OneHundredAndEighteen$outboundSchema.parse(oneHundredAndEighteen));
}
export function oneHundredAndEighteenFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndEighteen$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndEighteen' from JSON`);
}
/** @internal */
export const OneHundredAndSeventeen$inboundSchema = z.object({
    name: z.string().optional(),
});
/** @internal */
export const OneHundredAndSeventeen$outboundSchema = z.object({
    name: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndSeventeen$;
(function (OneHundredAndSeventeen$) {
    /** @deprecated use `OneHundredAndSeventeen$inboundSchema` instead. */
    OneHundredAndSeventeen$.inboundSchema = OneHundredAndSeventeen$inboundSchema;
    /** @deprecated use `OneHundredAndSeventeen$outboundSchema` instead. */
    OneHundredAndSeventeen$.outboundSchema = OneHundredAndSeventeen$outboundSchema;
})(OneHundredAndSeventeen$ || (OneHundredAndSeventeen$ = {}));
export function oneHundredAndSeventeenToJSON(oneHundredAndSeventeen) {
    return JSON.stringify(OneHundredAndSeventeen$outboundSchema.parse(oneHundredAndSeventeen));
}
export function oneHundredAndSeventeenFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndSeventeen$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndSeventeen' from JSON`);
}
/** @internal */
export const OneHundredAndSixteen$inboundSchema = z.object({
    enforced: z.boolean(),
});
/** @internal */
export const OneHundredAndSixteen$outboundSchema = z.object({
    enforced: z.boolean(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndSixteen$;
(function (OneHundredAndSixteen$) {
    /** @deprecated use `OneHundredAndSixteen$inboundSchema` instead. */
    OneHundredAndSixteen$.inboundSchema = OneHundredAndSixteen$inboundSchema;
    /** @deprecated use `OneHundredAndSixteen$outboundSchema` instead. */
    OneHundredAndSixteen$.outboundSchema = OneHundredAndSixteen$outboundSchema;
})(OneHundredAndSixteen$ || (OneHundredAndSixteen$ = {}));
export function oneHundredAndSixteenToJSON(oneHundredAndSixteen) {
    return JSON.stringify(OneHundredAndSixteen$outboundSchema.parse(oneHundredAndSixteen));
}
export function oneHundredAndSixteenFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndSixteen$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndSixteen' from JSON`);
}
/** @internal */
export const UserEventPayload115User$inboundSchema = z.object({
    id: z.string(),
    username: z.string(),
});
/** @internal */
export const UserEventPayload115User$outboundSchema = z.object({
    id: z.string(),
    username: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload115User$;
(function (UserEventPayload115User$) {
    /** @deprecated use `UserEventPayload115User$inboundSchema` instead. */
    UserEventPayload115User$.inboundSchema = UserEventPayload115User$inboundSchema;
    /** @deprecated use `UserEventPayload115User$outboundSchema` instead. */
    UserEventPayload115User$.outboundSchema = UserEventPayload115User$outboundSchema;
})(UserEventPayload115User$ || (UserEventPayload115User$ = {}));
export function userEventPayload115UserToJSON(userEventPayload115User) {
    return JSON.stringify(UserEventPayload115User$outboundSchema.parse(userEventPayload115User));
}
export function userEventPayload115UserFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayload115User$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayload115User' from JSON`);
}
/** @internal */
export const OneHundredAndFifteen$inboundSchema = z.object({
    entitlement: z.string(),
    user: z.lazy(() => UserEventPayload115User$inboundSchema),
    previousCanceledAt: z.string().optional(),
});
/** @internal */
export const OneHundredAndFifteen$outboundSchema = z.object({
    entitlement: z.string(),
    user: z.lazy(() => UserEventPayload115User$outboundSchema),
    previousCanceledAt: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndFifteen$;
(function (OneHundredAndFifteen$) {
    /** @deprecated use `OneHundredAndFifteen$inboundSchema` instead. */
    OneHundredAndFifteen$.inboundSchema = OneHundredAndFifteen$inboundSchema;
    /** @deprecated use `OneHundredAndFifteen$outboundSchema` instead. */
    OneHundredAndFifteen$.outboundSchema = OneHundredAndFifteen$outboundSchema;
})(OneHundredAndFifteen$ || (OneHundredAndFifteen$ = {}));
export function oneHundredAndFifteenToJSON(oneHundredAndFifteen) {
    return JSON.stringify(OneHundredAndFifteen$outboundSchema.parse(oneHundredAndFifteen));
}
export function oneHundredAndFifteenFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndFifteen$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndFifteen' from JSON`);
}
/** @internal */
export const UserEventPayloadUser$inboundSchema = z.object({
    id: z.string(),
    username: z.string(),
});
/** @internal */
export const UserEventPayloadUser$outboundSchema = z.object({
    id: z.string(),
    username: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayloadUser$;
(function (UserEventPayloadUser$) {
    /** @deprecated use `UserEventPayloadUser$inboundSchema` instead. */
    UserEventPayloadUser$.inboundSchema = UserEventPayloadUser$inboundSchema;
    /** @deprecated use `UserEventPayloadUser$outboundSchema` instead. */
    UserEventPayloadUser$.outboundSchema = UserEventPayloadUser$outboundSchema;
})(UserEventPayloadUser$ || (UserEventPayloadUser$ = {}));
export function userEventPayloadUserToJSON(userEventPayloadUser) {
    return JSON.stringify(UserEventPayloadUser$outboundSchema.parse(userEventPayloadUser));
}
export function userEventPayloadUserFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayloadUser$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayloadUser' from JSON`);
}
/** @internal */
export const OneHundredAndFourteen$inboundSchema = z.object({
    entitlement: z.string(),
    user: z.lazy(() => UserEventPayloadUser$inboundSchema),
});
/** @internal */
export const OneHundredAndFourteen$outboundSchema = z.object({
    entitlement: z.string(),
    user: z.lazy(() => UserEventPayloadUser$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndFourteen$;
(function (OneHundredAndFourteen$) {
    /** @deprecated use `OneHundredAndFourteen$inboundSchema` instead. */
    OneHundredAndFourteen$.inboundSchema = OneHundredAndFourteen$inboundSchema;
    /** @deprecated use `OneHundredAndFourteen$outboundSchema` instead. */
    OneHundredAndFourteen$.outboundSchema = OneHundredAndFourteen$outboundSchema;
})(OneHundredAndFourteen$ || (OneHundredAndFourteen$ = {}));
export function oneHundredAndFourteenToJSON(oneHundredAndFourteen) {
    return JSON.stringify(OneHundredAndFourteen$outboundSchema.parse(oneHundredAndFourteen));
}
export function oneHundredAndFourteenFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndFourteen$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndFourteen' from JSON`);
}
/** @internal */
export const UpdatedUser$inboundSchema = z.object({
    username: z.string(),
    email: z.string(),
});
/** @internal */
export const UpdatedUser$outboundSchema = z.object({
    username: z.string(),
    email: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdatedUser$;
(function (UpdatedUser$) {
    /** @deprecated use `UpdatedUser$inboundSchema` instead. */
    UpdatedUser$.inboundSchema = UpdatedUser$inboundSchema;
    /** @deprecated use `UpdatedUser$outboundSchema` instead. */
    UpdatedUser$.outboundSchema = UpdatedUser$outboundSchema;
})(UpdatedUser$ || (UpdatedUser$ = {}));
export function updatedUserToJSON(updatedUser) {
    return JSON.stringify(UpdatedUser$outboundSchema.parse(updatedUser));
}
export function updatedUserFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdatedUser$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdatedUser' from JSON`);
}
/** @internal */
export const OneHundredAndThirteen$inboundSchema = z.object({
    directoryType: z.string().optional(),
    updatedUser: z.lazy(() => UpdatedUser$inboundSchema).optional(),
    role: z.string().optional(),
    previousRole: z.string(),
    updatedUid: z.string().optional(),
});
/** @internal */
export const OneHundredAndThirteen$outboundSchema = z.object({
    directoryType: z.string().optional(),
    updatedUser: z.lazy(() => UpdatedUser$outboundSchema).optional(),
    role: z.string().optional(),
    previousRole: z.string(),
    updatedUid: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndThirteen$;
(function (OneHundredAndThirteen$) {
    /** @deprecated use `OneHundredAndThirteen$inboundSchema` instead. */
    OneHundredAndThirteen$.inboundSchema = OneHundredAndThirteen$inboundSchema;
    /** @deprecated use `OneHundredAndThirteen$outboundSchema` instead. */
    OneHundredAndThirteen$.outboundSchema = OneHundredAndThirteen$outboundSchema;
})(OneHundredAndThirteen$ || (OneHundredAndThirteen$ = {}));
export function oneHundredAndThirteenToJSON(oneHundredAndThirteen) {
    return JSON.stringify(OneHundredAndThirteen$outboundSchema.parse(oneHundredAndThirteen));
}
export function oneHundredAndThirteenFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndThirteen$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndThirteen' from JSON`);
}
/** @internal */
export const OneHundredAndTwelve$inboundSchema = z.object({
    role: z.string().optional(),
    uid: z.string(),
    origin: z.string().optional(),
    teamRoles: z.array(z.string()).optional(),
    teamPermissions: z.array(z.string()).optional(),
    entitlements: z.array(z.string()).optional(),
});
/** @internal */
export const OneHundredAndTwelve$outboundSchema = z.object({
    role: z.string().optional(),
    uid: z.string(),
    origin: z.string().optional(),
    teamRoles: z.array(z.string()).optional(),
    teamPermissions: z.array(z.string()).optional(),
    entitlements: z.array(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndTwelve$;
(function (OneHundredAndTwelve$) {
    /** @deprecated use `OneHundredAndTwelve$inboundSchema` instead. */
    OneHundredAndTwelve$.inboundSchema = OneHundredAndTwelve$inboundSchema;
    /** @deprecated use `OneHundredAndTwelve$outboundSchema` instead. */
    OneHundredAndTwelve$.outboundSchema = OneHundredAndTwelve$outboundSchema;
})(OneHundredAndTwelve$ || (OneHundredAndTwelve$ = {}));
export function oneHundredAndTwelveToJSON(oneHundredAndTwelve) {
    return JSON.stringify(OneHundredAndTwelve$outboundSchema.parse(oneHundredAndTwelve));
}
export function oneHundredAndTwelveFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndTwelve$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndTwelve' from JSON`);
}
/** @internal */
export const DeletedUser$inboundSchema = z.object({
    username: z.string(),
    email: z.string(),
});
/** @internal */
export const DeletedUser$outboundSchema = z.object({
    username: z.string(),
    email: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DeletedUser$;
(function (DeletedUser$) {
    /** @deprecated use `DeletedUser$inboundSchema` instead. */
    DeletedUser$.inboundSchema = DeletedUser$inboundSchema;
    /** @deprecated use `DeletedUser$outboundSchema` instead. */
    DeletedUser$.outboundSchema = DeletedUser$outboundSchema;
})(DeletedUser$ || (DeletedUser$ = {}));
export function deletedUserToJSON(deletedUser) {
    return JSON.stringify(DeletedUser$outboundSchema.parse(deletedUser));
}
export function deletedUserFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DeletedUser$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeletedUser' from JSON`);
}
/** @internal */
export const OneHundredAndEleven$inboundSchema = z.object({
    deletedUser: z.lazy(() => DeletedUser$inboundSchema).optional(),
    deletedUid: z.string().optional(),
    githubUsername: z.nullable(z.string()).optional(),
    gitlabUsername: z.nullable(z.string()).optional(),
    bitbucketUsername: z.nullable(z.string()).optional(),
    directoryType: z.string().optional(),
});
/** @internal */
export const OneHundredAndEleven$outboundSchema = z.object({
    deletedUser: z.lazy(() => DeletedUser$outboundSchema).optional(),
    deletedUid: z.string().optional(),
    githubUsername: z.nullable(z.string()).optional(),
    gitlabUsername: z.nullable(z.string()).optional(),
    bitbucketUsername: z.nullable(z.string()).optional(),
    directoryType: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndEleven$;
(function (OneHundredAndEleven$) {
    /** @deprecated use `OneHundredAndEleven$inboundSchema` instead. */
    OneHundredAndEleven$.inboundSchema = OneHundredAndEleven$inboundSchema;
    /** @deprecated use `OneHundredAndEleven$outboundSchema` instead. */
    OneHundredAndEleven$.outboundSchema = OneHundredAndEleven$outboundSchema;
})(OneHundredAndEleven$ || (OneHundredAndEleven$ = {}));
export function oneHundredAndElevenToJSON(oneHundredAndEleven) {
    return JSON.stringify(OneHundredAndEleven$outboundSchema.parse(oneHundredAndEleven));
}
export function oneHundredAndElevenFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndEleven$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndEleven' from JSON`);
}
/** @internal */
export const InvitedUser$inboundSchema = z.object({
    username: z.string(),
    email: z.string(),
});
/** @internal */
export const InvitedUser$outboundSchema = z.object({
    username: z.string(),
    email: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InvitedUser$;
(function (InvitedUser$) {
    /** @deprecated use `InvitedUser$inboundSchema` instead. */
    InvitedUser$.inboundSchema = InvitedUser$inboundSchema;
    /** @deprecated use `InvitedUser$outboundSchema` instead. */
    InvitedUser$.outboundSchema = InvitedUser$outboundSchema;
})(InvitedUser$ || (InvitedUser$ = {}));
export function invitedUserToJSON(invitedUser) {
    return JSON.stringify(InvitedUser$outboundSchema.parse(invitedUser));
}
export function invitedUserFromJSON(jsonString) {
    return safeParse(jsonString, (x) => InvitedUser$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InvitedUser' from JSON`);
}
/** @internal */
export const OneHundredAndTen$inboundSchema = z.object({
    directoryType: z.string().optional(),
    ssoType: z.string().optional(),
    invitedUser: z.lazy(() => InvitedUser$inboundSchema).optional(),
    invitedEmail: z.string().optional(),
    invitationRole: z.string().optional(),
    entitlements: z.array(z.string()).optional(),
    invitedUid: z.string().optional(),
});
/** @internal */
export const OneHundredAndTen$outboundSchema = z.object({
    directoryType: z.string().optional(),
    ssoType: z.string().optional(),
    invitedUser: z.lazy(() => InvitedUser$outboundSchema).optional(),
    invitedEmail: z.string().optional(),
    invitationRole: z.string().optional(),
    entitlements: z.array(z.string()).optional(),
    invitedUid: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndTen$;
(function (OneHundredAndTen$) {
    /** @deprecated use `OneHundredAndTen$inboundSchema` instead. */
    OneHundredAndTen$.inboundSchema = OneHundredAndTen$inboundSchema;
    /** @deprecated use `OneHundredAndTen$outboundSchema` instead. */
    OneHundredAndTen$.outboundSchema = OneHundredAndTen$outboundSchema;
})(OneHundredAndTen$ || (OneHundredAndTen$ = {}));
export function oneHundredAndTenToJSON(oneHundredAndTen) {
    return JSON.stringify(OneHundredAndTen$outboundSchema.parse(oneHundredAndTen));
}
export function oneHundredAndTenFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndTen$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndTen' from JSON`);
}
/** @internal */
export const Reasons$inboundSchema = z.object({
    slug: z.string(),
    description: z.string(),
});
/** @internal */
export const Reasons$outboundSchema = z.object({
    slug: z.string(),
    description: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Reasons$;
(function (Reasons$) {
    /** @deprecated use `Reasons$inboundSchema` instead. */
    Reasons$.inboundSchema = Reasons$inboundSchema;
    /** @deprecated use `Reasons$outboundSchema` instead. */
    Reasons$.outboundSchema = Reasons$outboundSchema;
})(Reasons$ || (Reasons$ = {}));
export function reasonsToJSON(reasons) {
    return JSON.stringify(Reasons$outboundSchema.parse(reasons));
}
export function reasonsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Reasons$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Reasons' from JSON`);
}
/** @internal */
export const OneHundredAndNine$inboundSchema = z.object({
    slug: z.string(),
    teamId: z.string(),
    by: z.string(),
    reasons: z.array(z.lazy(() => Reasons$inboundSchema)).optional(),
});
/** @internal */
export const OneHundredAndNine$outboundSchema = z.object({
    slug: z.string(),
    teamId: z.string(),
    by: z.string(),
    reasons: z.array(z.lazy(() => Reasons$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndNine$;
(function (OneHundredAndNine$) {
    /** @deprecated use `OneHundredAndNine$inboundSchema` instead. */
    OneHundredAndNine$.inboundSchema = OneHundredAndNine$inboundSchema;
    /** @deprecated use `OneHundredAndNine$outboundSchema` instead. */
    OneHundredAndNine$.outboundSchema = OneHundredAndNine$outboundSchema;
})(OneHundredAndNine$ || (OneHundredAndNine$ = {}));
export function oneHundredAndNineToJSON(oneHundredAndNine) {
    return JSON.stringify(OneHundredAndNine$outboundSchema.parse(oneHundredAndNine));
}
export function oneHundredAndNineFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndNine$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndNine' from JSON`);
}
/** @internal */
export const OneHundredAndEight$inboundSchema = z.object({
    slug: z.string(),
});
/** @internal */
export const OneHundredAndEight$outboundSchema = z.object({
    slug: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndEight$;
(function (OneHundredAndEight$) {
    /** @deprecated use `OneHundredAndEight$inboundSchema` instead. */
    OneHundredAndEight$.inboundSchema = OneHundredAndEight$inboundSchema;
    /** @deprecated use `OneHundredAndEight$outboundSchema` instead. */
    OneHundredAndEight$.outboundSchema = OneHundredAndEight$outboundSchema;
})(OneHundredAndEight$ || (OneHundredAndEight$ = {}));
export function oneHundredAndEightToJSON(oneHundredAndEight) {
    return JSON.stringify(OneHundredAndEight$outboundSchema.parse(oneHundredAndEight));
}
export function oneHundredAndEightFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndEight$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndEight' from JSON`);
}
/** @internal */
export const Store$inboundSchema = z
    .object({
    name: z.string(),
    id: z.string(),
});
/** @internal */
export const Store$outboundSchema = z.object({
    name: z.string(),
    id: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Store$;
(function (Store$) {
    /** @deprecated use `Store$inboundSchema` instead. */
    Store$.inboundSchema = Store$inboundSchema;
    /** @deprecated use `Store$outboundSchema` instead. */
    Store$.outboundSchema = Store$outboundSchema;
})(Store$ || (Store$ = {}));
export function storeToJSON(store) {
    return JSON.stringify(Store$outboundSchema.parse(store));
}
export function storeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Store$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Store' from JSON`);
}
/** @internal */
export const OneHundredAndSeven$inboundSchema = z.object({
    store: z.lazy(() => Store$inboundSchema),
    ownerId: z.string().optional(),
});
/** @internal */
export const OneHundredAndSeven$outboundSchema = z.object({
    store: z.lazy(() => Store$outboundSchema),
    ownerId: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndSeven$;
(function (OneHundredAndSeven$) {
    /** @deprecated use `OneHundredAndSeven$inboundSchema` instead. */
    OneHundredAndSeven$.inboundSchema = OneHundredAndSeven$inboundSchema;
    /** @deprecated use `OneHundredAndSeven$outboundSchema` instead. */
    OneHundredAndSeven$.outboundSchema = OneHundredAndSeven$outboundSchema;
})(OneHundredAndSeven$ || (OneHundredAndSeven$ = {}));
export function oneHundredAndSevenToJSON(oneHundredAndSeven) {
    return JSON.stringify(OneHundredAndSeven$outboundSchema.parse(oneHundredAndSeven));
}
export function oneHundredAndSevenFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndSeven$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndSeven' from JSON`);
}
/** @internal */
export const StoreType$inboundSchema = z
    .nativeEnum(StoreType);
/** @internal */
export const StoreType$outboundSchema = StoreType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var StoreType$;
(function (StoreType$) {
    /** @deprecated use `StoreType$inboundSchema` instead. */
    StoreType$.inboundSchema = StoreType$inboundSchema;
    /** @deprecated use `StoreType$outboundSchema` instead. */
    StoreType$.outboundSchema = StoreType$outboundSchema;
})(StoreType$ || (StoreType$ = {}));
/** @internal */
export const OneHundredAndSix$inboundSchema = z.object({
    storeType: StoreType$inboundSchema,
});
/** @internal */
export const OneHundredAndSix$outboundSchema = z.object({
    storeType: StoreType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndSix$;
(function (OneHundredAndSix$) {
    /** @deprecated use `OneHundredAndSix$inboundSchema` instead. */
    OneHundredAndSix$.inboundSchema = OneHundredAndSix$inboundSchema;
    /** @deprecated use `OneHundredAndSix$outboundSchema` instead. */
    OneHundredAndSix$.outboundSchema = OneHundredAndSix$outboundSchema;
})(OneHundredAndSix$ || (OneHundredAndSix$ = {}));
export function oneHundredAndSixToJSON(oneHundredAndSix) {
    return JSON.stringify(OneHundredAndSix$outboundSchema.parse(oneHundredAndSix));
}
export function oneHundredAndSixFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndSix$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndSix' from JSON`);
}
/** @internal */
export const UserEventPayloadType$inboundSchema = z.nativeEnum(UserEventPayloadType);
/** @internal */
export const UserEventPayloadType$outboundSchema = UserEventPayloadType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayloadType$;
(function (UserEventPayloadType$) {
    /** @deprecated use `UserEventPayloadType$inboundSchema` instead. */
    UserEventPayloadType$.inboundSchema = UserEventPayloadType$inboundSchema;
    /** @deprecated use `UserEventPayloadType$outboundSchema` instead. */
    UserEventPayloadType$.outboundSchema = UserEventPayloadType$outboundSchema;
})(UserEventPayloadType$ || (UserEventPayloadType$ = {}));
/** @internal */
export const OneHundredAndFive$inboundSchema = z.object({
    id: z.string(),
    name: z.string().optional(),
    computeUnitsMax: z.number().optional(),
    computeUnitsMin: z.number().optional(),
    suspendTimeoutSeconds: z.number().optional(),
    type: UserEventPayloadType$inboundSchema,
});
/** @internal */
export const OneHundredAndFive$outboundSchema = z.object({
    id: z.string(),
    name: z.string().optional(),
    computeUnitsMax: z.number().optional(),
    computeUnitsMin: z.number().optional(),
    suspendTimeoutSeconds: z.number().optional(),
    type: UserEventPayloadType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndFive$;
(function (OneHundredAndFive$) {
    /** @deprecated use `OneHundredAndFive$inboundSchema` instead. */
    OneHundredAndFive$.inboundSchema = OneHundredAndFive$inboundSchema;
    /** @deprecated use `OneHundredAndFive$outboundSchema` instead. */
    OneHundredAndFive$.outboundSchema = OneHundredAndFive$outboundSchema;
})(OneHundredAndFive$ || (OneHundredAndFive$ = {}));
export function oneHundredAndFiveToJSON(oneHundredAndFive) {
    return JSON.stringify(OneHundredAndFive$outboundSchema.parse(oneHundredAndFive));
}
export function oneHundredAndFiveFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndFive$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndFive' from JSON`);
}
/** @internal */
export const UserEventPayload104Type$inboundSchema = z.nativeEnum(UserEventPayload104Type);
/** @internal */
export const UserEventPayload104Type$outboundSchema = UserEventPayload104Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload104Type$;
(function (UserEventPayload104Type$) {
    /** @deprecated use `UserEventPayload104Type$inboundSchema` instead. */
    UserEventPayload104Type$.inboundSchema = UserEventPayload104Type$inboundSchema;
    /** @deprecated use `UserEventPayload104Type$outboundSchema` instead. */
    UserEventPayload104Type$.outboundSchema = UserEventPayload104Type$outboundSchema;
})(UserEventPayload104Type$ || (UserEventPayload104Type$ = {}));
/** @internal */
export const PayloadPricingPlan$inboundSchema = z.nativeEnum(PayloadPricingPlan);
/** @internal */
export const PayloadPricingPlan$outboundSchema = PayloadPricingPlan$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadPricingPlan$;
(function (PayloadPricingPlan$) {
    /** @deprecated use `PayloadPricingPlan$inboundSchema` instead. */
    PayloadPricingPlan$.inboundSchema = PayloadPricingPlan$inboundSchema;
    /** @deprecated use `PayloadPricingPlan$outboundSchema` instead. */
    PayloadPricingPlan$.outboundSchema = PayloadPricingPlan$outboundSchema;
})(PayloadPricingPlan$ || (PayloadPricingPlan$ = {}));
/** @internal */
export const BudgetItem$inboundSchema = z.object({
    type: UserEventPayload104Type$inboundSchema,
    fixedBudget: z.number(),
    previousSpend: z.array(z.number()),
    notifiedAt: z.array(z.number()),
    webhookId: z.string().optional(),
    webhookNotified: z.boolean().optional(),
    createdAt: z.number(),
    updatedAt: z.number().optional(),
    isActive: z.boolean(),
    pauseProjects: z.boolean().optional(),
    pricingPlan: PayloadPricingPlan$inboundSchema.optional(),
    teamId: z.string(),
    id: z.string(),
});
/** @internal */
export const BudgetItem$outboundSchema = z.object({
    type: UserEventPayload104Type$outboundSchema,
    fixedBudget: z.number(),
    previousSpend: z.array(z.number()),
    notifiedAt: z.array(z.number()),
    webhookId: z.string().optional(),
    webhookNotified: z.boolean().optional(),
    createdAt: z.number(),
    updatedAt: z.number().optional(),
    isActive: z.boolean(),
    pauseProjects: z.boolean().optional(),
    pricingPlan: PayloadPricingPlan$outboundSchema.optional(),
    teamId: z.string(),
    id: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BudgetItem$;
(function (BudgetItem$) {
    /** @deprecated use `BudgetItem$inboundSchema` instead. */
    BudgetItem$.inboundSchema = BudgetItem$inboundSchema;
    /** @deprecated use `BudgetItem$outboundSchema` instead. */
    BudgetItem$.outboundSchema = BudgetItem$outboundSchema;
})(BudgetItem$ || (BudgetItem$ = {}));
export function budgetItemToJSON(budgetItem) {
    return JSON.stringify(BudgetItem$outboundSchema.parse(budgetItem));
}
export function budgetItemFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BudgetItem$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BudgetItem' from JSON`);
}
/** @internal */
export const PayloadBudget$inboundSchema = z.object({
    budgetItem: z.lazy(() => BudgetItem$inboundSchema),
});
/** @internal */
export const PayloadBudget$outboundSchema = z.object({
    budgetItem: z.lazy(() => BudgetItem$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadBudget$;
(function (PayloadBudget$) {
    /** @deprecated use `PayloadBudget$inboundSchema` instead. */
    PayloadBudget$.inboundSchema = PayloadBudget$inboundSchema;
    /** @deprecated use `PayloadBudget$outboundSchema` instead. */
    PayloadBudget$.outboundSchema = PayloadBudget$outboundSchema;
})(PayloadBudget$ || (PayloadBudget$ = {}));
export function payloadBudgetToJSON(payloadBudget) {
    return JSON.stringify(PayloadBudget$outboundSchema.parse(payloadBudget));
}
export function payloadBudgetFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadBudget$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadBudget' from JSON`);
}
/** @internal */
export const OneHundredAndFour$inboundSchema = z.object({
    budget: z.lazy(() => PayloadBudget$inboundSchema),
});
/** @internal */
export const OneHundredAndFour$outboundSchema = z.object({
    budget: z.lazy(() => PayloadBudget$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndFour$;
(function (OneHundredAndFour$) {
    /** @deprecated use `OneHundredAndFour$inboundSchema` instead. */
    OneHundredAndFour$.inboundSchema = OneHundredAndFour$inboundSchema;
    /** @deprecated use `OneHundredAndFour$outboundSchema` instead. */
    OneHundredAndFour$.outboundSchema = OneHundredAndFour$outboundSchema;
})(OneHundredAndFour$ || (OneHundredAndFour$ = {}));
export function oneHundredAndFourToJSON(oneHundredAndFour) {
    return JSON.stringify(OneHundredAndFour$outboundSchema.parse(oneHundredAndFour));
}
export function oneHundredAndFourFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndFour$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndFour' from JSON`);
}
/** @internal */
export const UserEventPayload103Type$inboundSchema = z.nativeEnum(UserEventPayload103Type);
/** @internal */
export const UserEventPayload103Type$outboundSchema = UserEventPayload103Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload103Type$;
(function (UserEventPayload103Type$) {
    /** @deprecated use `UserEventPayload103Type$inboundSchema` instead. */
    UserEventPayload103Type$.inboundSchema = UserEventPayload103Type$inboundSchema;
    /** @deprecated use `UserEventPayload103Type$outboundSchema` instead. */
    UserEventPayload103Type$.outboundSchema = UserEventPayload103Type$outboundSchema;
})(UserEventPayload103Type$ || (UserEventPayload103Type$ = {}));
/** @internal */
export const PricingPlan$inboundSchema = z
    .nativeEnum(PricingPlan);
/** @internal */
export const PricingPlan$outboundSchema = PricingPlan$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PricingPlan$;
(function (PricingPlan$) {
    /** @deprecated use `PricingPlan$inboundSchema` instead. */
    PricingPlan$.inboundSchema = PricingPlan$inboundSchema;
    /** @deprecated use `PricingPlan$outboundSchema` instead. */
    PricingPlan$.outboundSchema = PricingPlan$outboundSchema;
})(PricingPlan$ || (PricingPlan$ = {}));
/** @internal */
export const Budget$inboundSchema = z
    .object({
    type: UserEventPayload103Type$inboundSchema,
    fixedBudget: z.number(),
    previousSpend: z.array(z.number()),
    notifiedAt: z.array(z.number()),
    webhookId: z.string().optional(),
    webhookNotified: z.boolean().optional(),
    createdAt: z.number(),
    updatedAt: z.number().optional(),
    isActive: z.boolean(),
    pauseProjects: z.boolean().optional(),
    pricingPlan: PricingPlan$inboundSchema.optional(),
    teamId: z.string(),
    id: z.string(),
});
/** @internal */
export const Budget$outboundSchema = z.object({
    type: UserEventPayload103Type$outboundSchema,
    fixedBudget: z.number(),
    previousSpend: z.array(z.number()),
    notifiedAt: z.array(z.number()),
    webhookId: z.string().optional(),
    webhookNotified: z.boolean().optional(),
    createdAt: z.number(),
    updatedAt: z.number().optional(),
    isActive: z.boolean(),
    pauseProjects: z.boolean().optional(),
    pricingPlan: PricingPlan$outboundSchema.optional(),
    teamId: z.string(),
    id: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Budget$;
(function (Budget$) {
    /** @deprecated use `Budget$inboundSchema` instead. */
    Budget$.inboundSchema = Budget$inboundSchema;
    /** @deprecated use `Budget$outboundSchema` instead. */
    Budget$.outboundSchema = Budget$outboundSchema;
})(Budget$ || (Budget$ = {}));
export function budgetToJSON(budget) {
    return JSON.stringify(Budget$outboundSchema.parse(budget));
}
export function budgetFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Budget$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Budget' from JSON`);
}
/** @internal */
export const OneHundredAndThree$inboundSchema = z.object({
    budget: z.lazy(() => Budget$inboundSchema),
});
/** @internal */
export const OneHundredAndThree$outboundSchema = z.object({
    budget: z.lazy(() => Budget$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndThree$;
(function (OneHundredAndThree$) {
    /** @deprecated use `OneHundredAndThree$inboundSchema` instead. */
    OneHundredAndThree$.inboundSchema = OneHundredAndThree$inboundSchema;
    /** @deprecated use `OneHundredAndThree$outboundSchema` instead. */
    OneHundredAndThree$.outboundSchema = OneHundredAndThree$outboundSchema;
})(OneHundredAndThree$ || (OneHundredAndThree$ = {}));
export function oneHundredAndThreeToJSON(oneHundredAndThree) {
    return JSON.stringify(OneHundredAndThree$outboundSchema.parse(oneHundredAndThree));
}
export function oneHundredAndThreeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndThree$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndThree' from JSON`);
}
/** @internal */
export const OneHundredAndTwo$inboundSchema = z.object({
    webhookUrl: z.string().optional(),
});
/** @internal */
export const OneHundredAndTwo$outboundSchema = z.object({
    webhookUrl: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndTwo$;
(function (OneHundredAndTwo$) {
    /** @deprecated use `OneHundredAndTwo$inboundSchema` instead. */
    OneHundredAndTwo$.inboundSchema = OneHundredAndTwo$inboundSchema;
    /** @deprecated use `OneHundredAndTwo$outboundSchema` instead. */
    OneHundredAndTwo$.outboundSchema = OneHundredAndTwo$outboundSchema;
})(OneHundredAndTwo$ || (OneHundredAndTwo$ = {}));
export function oneHundredAndTwoToJSON(oneHundredAndTwo) {
    return JSON.stringify(OneHundredAndTwo$outboundSchema.parse(oneHundredAndTwo));
}
export function oneHundredAndTwoFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndTwo$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndTwo' from JSON`);
}
/** @internal */
export const ScalingRules$inboundSchema = z.object({
    min: z.number(),
    max: z.number(),
});
/** @internal */
export const ScalingRules$outboundSchema = z.object({
    min: z.number(),
    max: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ScalingRules$;
(function (ScalingRules$) {
    /** @deprecated use `ScalingRules$inboundSchema` instead. */
    ScalingRules$.inboundSchema = ScalingRules$inboundSchema;
    /** @deprecated use `ScalingRules$outboundSchema` instead. */
    ScalingRules$.outboundSchema = ScalingRules$outboundSchema;
})(ScalingRules$ || (ScalingRules$ = {}));
export function scalingRulesToJSON(scalingRules) {
    return JSON.stringify(ScalingRules$outboundSchema.parse(scalingRules));
}
export function scalingRulesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ScalingRules$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ScalingRules' from JSON`);
}
/** @internal */
export const OneHundredAndOne$inboundSchema = z.object({
    scalingRules: z.record(z.lazy(() => ScalingRules$inboundSchema)),
    min: z.number(),
    max: z.number(),
    url: z.string(),
});
/** @internal */
export const OneHundredAndOne$outboundSchema = z.object({
    scalingRules: z.record(z.lazy(() => ScalingRules$outboundSchema)),
    min: z.number(),
    max: z.number(),
    url: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundredAndOne$;
(function (OneHundredAndOne$) {
    /** @deprecated use `OneHundredAndOne$inboundSchema` instead. */
    OneHundredAndOne$.inboundSchema = OneHundredAndOne$inboundSchema;
    /** @deprecated use `OneHundredAndOne$outboundSchema` instead. */
    OneHundredAndOne$.outboundSchema = OneHundredAndOne$outboundSchema;
})(OneHundredAndOne$ || (OneHundredAndOne$ = {}));
export function oneHundredAndOneToJSON(oneHundredAndOne) {
    return JSON.stringify(OneHundredAndOne$outboundSchema.parse(oneHundredAndOne));
}
export function oneHundredAndOneFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundredAndOne$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundredAndOne' from JSON`);
}
/** @internal */
export const OneHundred$inboundSchema = z.object({
    bio: z.string(),
});
/** @internal */
export const OneHundred$outboundSchema = z.object({
    bio: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneHundred$;
(function (OneHundred$) {
    /** @deprecated use `OneHundred$inboundSchema` instead. */
    OneHundred$.inboundSchema = OneHundred$inboundSchema;
    /** @deprecated use `OneHundred$outboundSchema` instead. */
    OneHundred$.outboundSchema = OneHundred$outboundSchema;
})(OneHundred$ || (OneHundred$ = {}));
export function oneHundredToJSON(oneHundred) {
    return JSON.stringify(OneHundred$outboundSchema.parse(oneHundred));
}
export function oneHundredFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneHundred$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneHundred' from JSON`);
}
/** @internal */
export const NinetyNine$inboundSchema = z.object({
    oldName: z.string(),
    newName: z.string(),
    uid: z.string().optional(),
});
/** @internal */
export const NinetyNine$outboundSchema = z.object({
    oldName: z.string(),
    newName: z.string(),
    uid: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NinetyNine$;
(function (NinetyNine$) {
    /** @deprecated use `NinetyNine$inboundSchema` instead. */
    NinetyNine$.inboundSchema = NinetyNine$inboundSchema;
    /** @deprecated use `NinetyNine$outboundSchema` instead. */
    NinetyNine$.outboundSchema = NinetyNine$outboundSchema;
})(NinetyNine$ || (NinetyNine$ = {}));
export function ninetyNineToJSON(ninetyNine) {
    return JSON.stringify(NinetyNine$outboundSchema.parse(ninetyNine));
}
export function ninetyNineFromJSON(jsonString) {
    return safeParse(jsonString, (x) => NinetyNine$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NinetyNine' from JSON`);
}
/** @internal */
export const Name2$inboundSchema = z
    .object({
    name: z.string(),
});
/** @internal */
export const Name2$outboundSchema = z.object({
    name: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Name2$;
(function (Name2$) {
    /** @deprecated use `Name2$inboundSchema` instead. */
    Name2$.inboundSchema = Name2$inboundSchema;
    /** @deprecated use `Name2$outboundSchema` instead. */
    Name2$.outboundSchema = Name2$outboundSchema;
})(Name2$ || (Name2$ = {}));
export function name2ToJSON(name2) {
    return JSON.stringify(Name2$outboundSchema.parse(name2));
}
export function name2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Name2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Name2' from JSON`);
}
/** @internal */
export const Name$inboundSchema = z
    .union([z.lazy(() => Name2$inboundSchema), z.string()]);
/** @internal */
export const Name$outboundSchema = z.union([z.lazy(() => Name2$outboundSchema), z.string()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Name$;
(function (Name$) {
    /** @deprecated use `Name$inboundSchema` instead. */
    Name$.inboundSchema = Name$inboundSchema;
    /** @deprecated use `Name$outboundSchema` instead. */
    Name$.outboundSchema = Name$outboundSchema;
})(Name$ || (Name$ = {}));
export function nameToJSON(name) {
    return JSON.stringify(Name$outboundSchema.parse(name));
}
export function nameFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Name$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Name' from JSON`);
}
/** @internal */
export const NinetyEight$inboundSchema = z.object({
    uid: z.string(),
    name: z.union([z.lazy(() => Name2$inboundSchema), z.string()]),
});
/** @internal */
export const NinetyEight$outboundSchema = z.object({
    uid: z.string(),
    name: z.union([z.lazy(() => Name2$outboundSchema), z.string()]),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NinetyEight$;
(function (NinetyEight$) {
    /** @deprecated use `NinetyEight$inboundSchema` instead. */
    NinetyEight$.inboundSchema = NinetyEight$inboundSchema;
    /** @deprecated use `NinetyEight$outboundSchema` instead. */
    NinetyEight$.outboundSchema = NinetyEight$outboundSchema;
})(NinetyEight$ || (NinetyEight$ = {}));
export function ninetyEightToJSON(ninetyEight) {
    return JSON.stringify(NinetyEight$outboundSchema.parse(ninetyEight));
}
export function ninetyEightFromJSON(jsonString) {
    return safeParse(jsonString, (x) => NinetyEight$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NinetyEight' from JSON`);
}
/** @internal */
export const UserEventPayload97Team$inboundSchema = z.object({
    id: z.string(),
    name: z.string().optional(),
});
/** @internal */
export const UserEventPayload97Team$outboundSchema = z.object({
    id: z.string(),
    name: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload97Team$;
(function (UserEventPayload97Team$) {
    /** @deprecated use `UserEventPayload97Team$inboundSchema` instead. */
    UserEventPayload97Team$.inboundSchema = UserEventPayload97Team$inboundSchema;
    /** @deprecated use `UserEventPayload97Team$outboundSchema` instead. */
    UserEventPayload97Team$.outboundSchema = UserEventPayload97Team$outboundSchema;
})(UserEventPayload97Team$ || (UserEventPayload97Team$ = {}));
export function userEventPayload97TeamToJSON(userEventPayload97Team) {
    return JSON.stringify(UserEventPayload97Team$outboundSchema.parse(userEventPayload97Team));
}
export function userEventPayload97TeamFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayload97Team$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayload97Team' from JSON`);
}
/** @internal */
export const PayloadPreviousRule$inboundSchema = z.object({
    email: z.string(),
});
/** @internal */
export const PayloadPreviousRule$outboundSchema = z.object({
    email: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadPreviousRule$;
(function (PayloadPreviousRule$) {
    /** @deprecated use `PayloadPreviousRule$inboundSchema` instead. */
    PayloadPreviousRule$.inboundSchema = PayloadPreviousRule$inboundSchema;
    /** @deprecated use `PayloadPreviousRule$outboundSchema` instead. */
    PayloadPreviousRule$.outboundSchema = PayloadPreviousRule$outboundSchema;
})(PayloadPreviousRule$ || (PayloadPreviousRule$ = {}));
export function payloadPreviousRuleToJSON(payloadPreviousRule) {
    return JSON.stringify(PayloadPreviousRule$outboundSchema.parse(payloadPreviousRule));
}
export function payloadPreviousRuleFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadPreviousRule$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadPreviousRule' from JSON`);
}
/** @internal */
export const NinetySeven$inboundSchema = z.object({
    team: z.lazy(() => UserEventPayload97Team$inboundSchema),
    previousRule: z.lazy(() => PayloadPreviousRule$inboundSchema),
});
/** @internal */
export const NinetySeven$outboundSchema = z.object({
    team: z.lazy(() => UserEventPayload97Team$outboundSchema),
    previousRule: z.lazy(() => PayloadPreviousRule$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NinetySeven$;
(function (NinetySeven$) {
    /** @deprecated use `NinetySeven$inboundSchema` instead. */
    NinetySeven$.inboundSchema = NinetySeven$inboundSchema;
    /** @deprecated use `NinetySeven$outboundSchema` instead. */
    NinetySeven$.outboundSchema = NinetySeven$outboundSchema;
})(NinetySeven$ || (NinetySeven$ = {}));
export function ninetySevenToJSON(ninetySeven) {
    return JSON.stringify(NinetySeven$outboundSchema.parse(ninetySeven));
}
export function ninetySevenFromJSON(jsonString) {
    return safeParse(jsonString, (x) => NinetySeven$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NinetySeven' from JSON`);
}
/** @internal */
export const UserEventPayload96Team$inboundSchema = z.object({
    id: z.string(),
    name: z.string().optional(),
});
/** @internal */
export const UserEventPayload96Team$outboundSchema = z.object({
    id: z.string(),
    name: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload96Team$;
(function (UserEventPayload96Team$) {
    /** @deprecated use `UserEventPayload96Team$inboundSchema` instead. */
    UserEventPayload96Team$.inboundSchema = UserEventPayload96Team$inboundSchema;
    /** @deprecated use `UserEventPayload96Team$outboundSchema` instead. */
    UserEventPayload96Team$.outboundSchema = UserEventPayload96Team$outboundSchema;
})(UserEventPayload96Team$ || (UserEventPayload96Team$ = {}));
export function userEventPayload96TeamToJSON(userEventPayload96Team) {
    return JSON.stringify(UserEventPayload96Team$outboundSchema.parse(userEventPayload96Team));
}
export function userEventPayload96TeamFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayload96Team$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayload96Team' from JSON`);
}
/** @internal */
export const PreviousRule$inboundSchema = z.object({
    email: z.string(),
});
/** @internal */
export const PreviousRule$outboundSchema = z.object({
    email: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PreviousRule$;
(function (PreviousRule$) {
    /** @deprecated use `PreviousRule$inboundSchema` instead. */
    PreviousRule$.inboundSchema = PreviousRule$inboundSchema;
    /** @deprecated use `PreviousRule$outboundSchema` instead. */
    PreviousRule$.outboundSchema = PreviousRule$outboundSchema;
})(PreviousRule$ || (PreviousRule$ = {}));
export function previousRuleToJSON(previousRule) {
    return JSON.stringify(PreviousRule$outboundSchema.parse(previousRule));
}
export function previousRuleFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PreviousRule$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PreviousRule' from JSON`);
}
/** @internal */
export const NextRule$inboundSchema = z.object({
    email: z.string(),
});
/** @internal */
export const NextRule$outboundSchema = z.object({
    email: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NextRule$;
(function (NextRule$) {
    /** @deprecated use `NextRule$inboundSchema` instead. */
    NextRule$.inboundSchema = NextRule$inboundSchema;
    /** @deprecated use `NextRule$outboundSchema` instead. */
    NextRule$.outboundSchema = NextRule$outboundSchema;
})(NextRule$ || (NextRule$ = {}));
export function nextRuleToJSON(nextRule) {
    return JSON.stringify(NextRule$outboundSchema.parse(nextRule));
}
export function nextRuleFromJSON(jsonString) {
    return safeParse(jsonString, (x) => NextRule$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NextRule' from JSON`);
}
/** @internal */
export const NinetySix$inboundSchema = z.object({
    team: z.lazy(() => UserEventPayload96Team$inboundSchema),
    previousRule: z.lazy(() => PreviousRule$inboundSchema).optional(),
    nextRule: z.lazy(() => NextRule$inboundSchema).optional(),
});
/** @internal */
export const NinetySix$outboundSchema = z.object({
    team: z.lazy(() => UserEventPayload96Team$outboundSchema),
    previousRule: z.lazy(() => PreviousRule$outboundSchema).optional(),
    nextRule: z.lazy(() => NextRule$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NinetySix$;
(function (NinetySix$) {
    /** @deprecated use `NinetySix$inboundSchema` instead. */
    NinetySix$.inboundSchema = NinetySix$inboundSchema;
    /** @deprecated use `NinetySix$outboundSchema` instead. */
    NinetySix$.outboundSchema = NinetySix$outboundSchema;
})(NinetySix$ || (NinetySix$ = {}));
export function ninetySixToJSON(ninetySix) {
    return JSON.stringify(NinetySix$outboundSchema.parse(ninetySix));
}
export function ninetySixFromJSON(jsonString) {
    return safeParse(jsonString, (x) => NinetySix$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NinetySix' from JSON`);
}
/** @internal */
export const NinetyFive$inboundSchema = z.object({
    email: z.string(),
});
/** @internal */
export const NinetyFive$outboundSchema = z.object({
    email: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NinetyFive$;
(function (NinetyFive$) {
    /** @deprecated use `NinetyFive$inboundSchema` instead. */
    NinetyFive$.inboundSchema = NinetyFive$inboundSchema;
    /** @deprecated use `NinetyFive$outboundSchema` instead. */
    NinetyFive$.outboundSchema = NinetyFive$outboundSchema;
})(NinetyFive$ || (NinetyFive$ = {}));
export function ninetyFiveToJSON(ninetyFive) {
    return JSON.stringify(NinetyFive$outboundSchema.parse(ninetyFive));
}
export function ninetyFiveFromJSON(jsonString) {
    return safeParse(jsonString, (x) => NinetyFive$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NinetyFive' from JSON`);
}
/** @internal */
export const NinetyFour$inboundSchema = z.object({
    email: z.string(),
    verified: z.boolean(),
});
/** @internal */
export const NinetyFour$outboundSchema = z.object({
    email: z.string(),
    verified: z.boolean(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NinetyFour$;
(function (NinetyFour$) {
    /** @deprecated use `NinetyFour$inboundSchema` instead. */
    NinetyFour$.inboundSchema = NinetyFour$inboundSchema;
    /** @deprecated use `NinetyFour$outboundSchema` instead. */
    NinetyFour$.outboundSchema = NinetyFour$outboundSchema;
})(NinetyFour$ || (NinetyFour$ = {}));
export function ninetyFourToJSON(ninetyFour) {
    return JSON.stringify(NinetyFour$outboundSchema.parse(ninetyFour));
}
export function ninetyFourFromJSON(jsonString) {
    return safeParse(jsonString, (x) => NinetyFour$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NinetyFour' from JSON`);
}
/** @internal */
export const NinetyThree$inboundSchema = z.object({
    instances: z.number(),
    url: z.string(),
});
/** @internal */
export const NinetyThree$outboundSchema = z.object({
    instances: z.number(),
    url: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NinetyThree$;
(function (NinetyThree$) {
    /** @deprecated use `NinetyThree$inboundSchema` instead. */
    NinetyThree$.inboundSchema = NinetyThree$inboundSchema;
    /** @deprecated use `NinetyThree$outboundSchema` instead. */
    NinetyThree$.outboundSchema = NinetyThree$outboundSchema;
})(NinetyThree$ || (NinetyThree$ = {}));
export function ninetyThreeToJSON(ninetyThree) {
    return JSON.stringify(NinetyThree$outboundSchema.parse(ninetyThree));
}
export function ninetyThreeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => NinetyThree$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NinetyThree' from JSON`);
}
/** @internal */
export const NinetyTwo$inboundSchema = z.object({
    gitProvider: z.string(),
    gitProviderGroupDescriptor: z.string(),
    gitScope: z.string(),
});
/** @internal */
export const NinetyTwo$outboundSchema = z.object({
    gitProvider: z.string(),
    gitProviderGroupDescriptor: z.string(),
    gitScope: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NinetyTwo$;
(function (NinetyTwo$) {
    /** @deprecated use `NinetyTwo$inboundSchema` instead. */
    NinetyTwo$.inboundSchema = NinetyTwo$inboundSchema;
    /** @deprecated use `NinetyTwo$outboundSchema` instead. */
    NinetyTwo$.outboundSchema = NinetyTwo$outboundSchema;
})(NinetyTwo$ || (NinetyTwo$ = {}));
export function ninetyTwoToJSON(ninetyTwo) {
    return JSON.stringify(NinetyTwo$outboundSchema.parse(ninetyTwo));
}
export function ninetyTwoFromJSON(jsonString) {
    return safeParse(jsonString, (x) => NinetyTwo$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NinetyTwo' from JSON`);
}
/** @internal */
export const NinetyOne$inboundSchema = z.object({
    projectId: z.string(),
    projectName: z.string(),
    newTargetPercentage: z.number().optional(),
});
/** @internal */
export const NinetyOne$outboundSchema = z.object({
    projectId: z.string(),
    projectName: z.string(),
    newTargetPercentage: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NinetyOne$;
(function (NinetyOne$) {
    /** @deprecated use `NinetyOne$inboundSchema` instead. */
    NinetyOne$.inboundSchema = NinetyOne$inboundSchema;
    /** @deprecated use `NinetyOne$outboundSchema` instead. */
    NinetyOne$.outboundSchema = NinetyOne$outboundSchema;
})(NinetyOne$ || (NinetyOne$ = {}));
export function ninetyOneToJSON(ninetyOne) {
    return JSON.stringify(NinetyOne$outboundSchema.parse(ninetyOne));
}
export function ninetyOneFromJSON(jsonString) {
    return safeParse(jsonString, (x) => NinetyOne$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NinetyOne' from JSON`);
}
/** @internal */
export const Ninety$inboundSchema = z
    .object({
    projectId: z.string(),
    projectName: z.string(),
});
/** @internal */
export const Ninety$outboundSchema = z.object({
    projectId: z.string(),
    projectName: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Ninety$;
(function (Ninety$) {
    /** @deprecated use `Ninety$inboundSchema` instead. */
    Ninety$.inboundSchema = Ninety$inboundSchema;
    /** @deprecated use `Ninety$outboundSchema` instead. */
    Ninety$.outboundSchema = Ninety$outboundSchema;
})(Ninety$ || (Ninety$ = {}));
export function ninetyToJSON(ninety) {
    return JSON.stringify(Ninety$outboundSchema.parse(ninety));
}
export function ninetyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Ninety$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Ninety' from JSON`);
}
/** @internal */
export const EightyNine$inboundSchema = z.object({
    source: z.string(),
    projectId: z.string(),
});
/** @internal */
export const EightyNine$outboundSchema = z.object({
    source: z.string(),
    projectId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EightyNine$;
(function (EightyNine$) {
    /** @deprecated use `EightyNine$inboundSchema` instead. */
    EightyNine$.inboundSchema = EightyNine$inboundSchema;
    /** @deprecated use `EightyNine$outboundSchema` instead. */
    EightyNine$.outboundSchema = EightyNine$outboundSchema;
})(EightyNine$ || (EightyNine$ = {}));
export function eightyNineToJSON(eightyNine) {
    return JSON.stringify(EightyNine$outboundSchema.parse(eightyNine));
}
export function eightyNineFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EightyNine$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EightyNine' from JSON`);
}
/** @internal */
export const EightyEight$inboundSchema = z.object({
    projectId: z.string(),
});
/** @internal */
export const EightyEight$outboundSchema = z.object({
    projectId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EightyEight$;
(function (EightyEight$) {
    /** @deprecated use `EightyEight$inboundSchema` instead. */
    EightyEight$.inboundSchema = EightyEight$inboundSchema;
    /** @deprecated use `EightyEight$outboundSchema` instead. */
    EightyEight$.outboundSchema = EightyEight$outboundSchema;
})(EightyEight$ || (EightyEight$ = {}));
export function eightyEightToJSON(eightyEight) {
    return JSON.stringify(EightyEight$outboundSchema.parse(eightyEight));
}
export function eightyEightFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EightyEight$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EightyEight' from JSON`);
}
/** @internal */
export const UserEventPayload87Team$inboundSchema = z.object({
    id: z.string(),
    name: z.string(),
});
/** @internal */
export const UserEventPayload87Team$outboundSchema = z.object({
    id: z.string(),
    name: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload87Team$;
(function (UserEventPayload87Team$) {
    /** @deprecated use `UserEventPayload87Team$inboundSchema` instead. */
    UserEventPayload87Team$.inboundSchema = UserEventPayload87Team$inboundSchema;
    /** @deprecated use `UserEventPayload87Team$outboundSchema` instead. */
    UserEventPayload87Team$.outboundSchema = UserEventPayload87Team$outboundSchema;
})(UserEventPayload87Team$ || (UserEventPayload87Team$ = {}));
export function userEventPayload87TeamToJSON(userEventPayload87Team) {
    return JSON.stringify(UserEventPayload87Team$outboundSchema.parse(userEventPayload87Team));
}
export function userEventPayload87TeamFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayload87Team$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayload87Team' from JSON`);
}
/** @internal */
export const EnvId2$inboundSchema = z
    .nativeEnum(EnvId2);
/** @internal */
export const EnvId2$outboundSchema = EnvId2$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnvId2$;
(function (EnvId2$) {
    /** @deprecated use `EnvId2$inboundSchema` instead. */
    EnvId2$.inboundSchema = EnvId2$inboundSchema;
    /** @deprecated use `EnvId2$outboundSchema` instead. */
    EnvId2$.outboundSchema = EnvId2$outboundSchema;
})(EnvId2$ || (EnvId2$ = {}));
/** @internal */
export const EnvId$inboundSchema = z
    .union([z.string(), EnvId2$inboundSchema]);
/** @internal */
export const EnvId$outboundSchema = z.union([z.string(), EnvId2$outboundSchema]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnvId$;
(function (EnvId$) {
    /** @deprecated use `EnvId$inboundSchema` instead. */
    EnvId$.inboundSchema = EnvId$inboundSchema;
    /** @deprecated use `EnvId$outboundSchema` instead. */
    EnvId$.outboundSchema = EnvId$outboundSchema;
})(EnvId$ || (EnvId$ = {}));
export function envIdToJSON(envId) {
    return JSON.stringify(EnvId$outboundSchema.parse(envId));
}
export function envIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EnvId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EnvId' from JSON`);
}
/** @internal */
export const Aws$inboundSchema = z
    .object({
    subnetIds: z.array(z.string()),
    securityGroupId: z.string(),
});
/** @internal */
export const Aws$outboundSchema = z
    .object({
    subnetIds: z.array(z.string()),
    securityGroupId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Aws$;
(function (Aws$) {
    /** @deprecated use `Aws$inboundSchema` instead. */
    Aws$.inboundSchema = Aws$inboundSchema;
    /** @deprecated use `Aws$outboundSchema` instead. */
    Aws$.outboundSchema = Aws$outboundSchema;
})(Aws$ || (Aws$ = {}));
export function awsToJSON(aws) {
    return JSON.stringify(Aws$outboundSchema.parse(aws));
}
export function awsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Aws$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Aws' from JSON`);
}
/** @internal */
export const OldConnectConfigurations$inboundSchema = z.object({
    envId: z.union([z.string(), EnvId2$inboundSchema]),
    connectConfigurationId: z.string(),
    dc: z.string().optional(),
    passive: z.boolean(),
    buildsEnabled: z.boolean(),
    aws: z.lazy(() => Aws$inboundSchema).optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
});
/** @internal */
export const OldConnectConfigurations$outboundSchema = z.object({
    envId: z.union([z.string(), EnvId2$outboundSchema]),
    connectConfigurationId: z.string(),
    dc: z.string().optional(),
    passive: z.boolean(),
    buildsEnabled: z.boolean(),
    aws: z.lazy(() => Aws$outboundSchema).optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OldConnectConfigurations$;
(function (OldConnectConfigurations$) {
    /** @deprecated use `OldConnectConfigurations$inboundSchema` instead. */
    OldConnectConfigurations$.inboundSchema = OldConnectConfigurations$inboundSchema;
    /** @deprecated use `OldConnectConfigurations$outboundSchema` instead. */
    OldConnectConfigurations$.outboundSchema = OldConnectConfigurations$outboundSchema;
})(OldConnectConfigurations$ || (OldConnectConfigurations$ = {}));
export function oldConnectConfigurationsToJSON(oldConnectConfigurations) {
    return JSON.stringify(OldConnectConfigurations$outboundSchema.parse(oldConnectConfigurations));
}
export function oldConnectConfigurationsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OldConnectConfigurations$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OldConnectConfigurations' from JSON`);
}
/** @internal */
export const UserEventEnvId2$inboundSchema = z.nativeEnum(UserEventEnvId2);
/** @internal */
export const UserEventEnvId2$outboundSchema = UserEventEnvId2$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventEnvId2$;
(function (UserEventEnvId2$) {
    /** @deprecated use `UserEventEnvId2$inboundSchema` instead. */
    UserEventEnvId2$.inboundSchema = UserEventEnvId2$inboundSchema;
    /** @deprecated use `UserEventEnvId2$outboundSchema` instead. */
    UserEventEnvId2$.outboundSchema = UserEventEnvId2$outboundSchema;
})(UserEventEnvId2$ || (UserEventEnvId2$ = {}));
/** @internal */
export const PayloadEnvId$inboundSchema = z.union([z.string(), UserEventEnvId2$inboundSchema]);
/** @internal */
export const PayloadEnvId$outboundSchema = z.union([z.string(), UserEventEnvId2$outboundSchema]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadEnvId$;
(function (PayloadEnvId$) {
    /** @deprecated use `PayloadEnvId$inboundSchema` instead. */
    PayloadEnvId$.inboundSchema = PayloadEnvId$inboundSchema;
    /** @deprecated use `PayloadEnvId$outboundSchema` instead. */
    PayloadEnvId$.outboundSchema = PayloadEnvId$outboundSchema;
})(PayloadEnvId$ || (PayloadEnvId$ = {}));
export function payloadEnvIdToJSON(payloadEnvId) {
    return JSON.stringify(PayloadEnvId$outboundSchema.parse(payloadEnvId));
}
export function payloadEnvIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadEnvId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadEnvId' from JSON`);
}
/** @internal */
export const PayloadAws$inboundSchema = z.object({
    subnetIds: z.array(z.string()),
    securityGroupId: z.string(),
});
/** @internal */
export const PayloadAws$outboundSchema = z.object({
    subnetIds: z.array(z.string()),
    securityGroupId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadAws$;
(function (PayloadAws$) {
    /** @deprecated use `PayloadAws$inboundSchema` instead. */
    PayloadAws$.inboundSchema = PayloadAws$inboundSchema;
    /** @deprecated use `PayloadAws$outboundSchema` instead. */
    PayloadAws$.outboundSchema = PayloadAws$outboundSchema;
})(PayloadAws$ || (PayloadAws$ = {}));
export function payloadAwsToJSON(payloadAws) {
    return JSON.stringify(PayloadAws$outboundSchema.parse(payloadAws));
}
export function payloadAwsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadAws$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadAws' from JSON`);
}
/** @internal */
export const NewConnectConfigurations$inboundSchema = z.object({
    envId: z.union([z.string(), UserEventEnvId2$inboundSchema]),
    connectConfigurationId: z.string(),
    dc: z.string().optional(),
    passive: z.boolean(),
    buildsEnabled: z.boolean(),
    aws: z.lazy(() => PayloadAws$inboundSchema).optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
});
/** @internal */
export const NewConnectConfigurations$outboundSchema = z.object({
    envId: z.union([z.string(), UserEventEnvId2$outboundSchema]),
    connectConfigurationId: z.string(),
    dc: z.string().optional(),
    passive: z.boolean(),
    buildsEnabled: z.boolean(),
    aws: z.lazy(() => PayloadAws$outboundSchema).optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NewConnectConfigurations$;
(function (NewConnectConfigurations$) {
    /** @deprecated use `NewConnectConfigurations$inboundSchema` instead. */
    NewConnectConfigurations$.inboundSchema = NewConnectConfigurations$inboundSchema;
    /** @deprecated use `NewConnectConfigurations$outboundSchema` instead. */
    NewConnectConfigurations$.outboundSchema = NewConnectConfigurations$outboundSchema;
})(NewConnectConfigurations$ || (NewConnectConfigurations$ = {}));
export function newConnectConfigurationsToJSON(newConnectConfigurations) {
    return JSON.stringify(NewConnectConfigurations$outboundSchema.parse(newConnectConfigurations));
}
export function newConnectConfigurationsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => NewConnectConfigurations$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NewConnectConfigurations' from JSON`);
}
/** @internal */
export const UserEventPayload87Project$inboundSchema = z.object({
    id: z.string(),
    name: z.string().optional(),
    oldConnectConfigurations: z.nullable(z.array(z.lazy(() => OldConnectConfigurations$inboundSchema))),
    newConnectConfigurations: z.nullable(z.array(z.lazy(() => NewConnectConfigurations$inboundSchema))),
});
/** @internal */
export const UserEventPayload87Project$outboundSchema = z.object({
    id: z.string(),
    name: z.string().optional(),
    oldConnectConfigurations: z.nullable(z.array(z.lazy(() => OldConnectConfigurations$outboundSchema))),
    newConnectConfigurations: z.nullable(z.array(z.lazy(() => NewConnectConfigurations$outboundSchema))),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload87Project$;
(function (UserEventPayload87Project$) {
    /** @deprecated use `UserEventPayload87Project$inboundSchema` instead. */
    UserEventPayload87Project$.inboundSchema = UserEventPayload87Project$inboundSchema;
    /** @deprecated use `UserEventPayload87Project$outboundSchema` instead. */
    UserEventPayload87Project$.outboundSchema = UserEventPayload87Project$outboundSchema;
})(UserEventPayload87Project$ || (UserEventPayload87Project$ = {}));
export function userEventPayload87ProjectToJSON(userEventPayload87Project) {
    return JSON.stringify(UserEventPayload87Project$outboundSchema.parse(userEventPayload87Project));
}
export function userEventPayload87ProjectFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayload87Project$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayload87Project' from JSON`);
}
/** @internal */
export const EightySeven$inboundSchema = z.object({
    team: z.lazy(() => UserEventPayload87Team$inboundSchema),
    project: z.lazy(() => UserEventPayload87Project$inboundSchema),
});
/** @internal */
export const EightySeven$outboundSchema = z.object({
    team: z.lazy(() => UserEventPayload87Team$outboundSchema),
    project: z.lazy(() => UserEventPayload87Project$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EightySeven$;
(function (EightySeven$) {
    /** @deprecated use `EightySeven$inboundSchema` instead. */
    EightySeven$.inboundSchema = EightySeven$inboundSchema;
    /** @deprecated use `EightySeven$outboundSchema` instead. */
    EightySeven$.outboundSchema = EightySeven$outboundSchema;
})(EightySeven$ || (EightySeven$ = {}));
export function eightySevenToJSON(eightySeven) {
    return JSON.stringify(EightySeven$outboundSchema.parse(eightySeven));
}
export function eightySevenFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EightySeven$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EightySeven' from JSON`);
}
/** @internal */
export const EightySix$inboundSchema = z.object({
    name: z.string(),
    ownerId: z.string(),
});
/** @internal */
export const EightySix$outboundSchema = z.object({
    name: z.string(),
    ownerId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EightySix$;
(function (EightySix$) {
    /** @deprecated use `EightySix$inboundSchema` instead. */
    EightySix$.inboundSchema = EightySix$inboundSchema;
    /** @deprecated use `EightySix$outboundSchema` instead. */
    EightySix$.outboundSchema = EightySix$outboundSchema;
})(EightySix$ || (EightySix$ = {}));
export function eightySixToJSON(eightySix) {
    return JSON.stringify(EightySix$outboundSchema.parse(eightySix));
}
export function eightySixFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EightySix$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EightySix' from JSON`);
}
/** @internal */
export const UserEventPayload85Action$inboundSchema = z.nativeEnum(UserEventPayload85Action);
/** @internal */
export const UserEventPayload85Action$outboundSchema = UserEventPayload85Action$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload85Action$;
(function (UserEventPayload85Action$) {
    /** @deprecated use `UserEventPayload85Action$inboundSchema` instead. */
    UserEventPayload85Action$.inboundSchema = UserEventPayload85Action$inboundSchema;
    /** @deprecated use `UserEventPayload85Action$outboundSchema` instead. */
    UserEventPayload85Action$.outboundSchema = UserEventPayload85Action$outboundSchema;
})(UserEventPayload85Action$ || (UserEventPayload85Action$ = {}));
/** @internal */
export const EightyFive$inboundSchema = z.object({
    projectName: z.string(),
    action: UserEventPayload85Action$inboundSchema,
});
/** @internal */
export const EightyFive$outboundSchema = z.object({
    projectName: z.string(),
    action: UserEventPayload85Action$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EightyFive$;
(function (EightyFive$) {
    /** @deprecated use `EightyFive$inboundSchema` instead. */
    EightyFive$.inboundSchema = EightyFive$inboundSchema;
    /** @deprecated use `EightyFive$outboundSchema` instead. */
    EightyFive$.outboundSchema = EightyFive$outboundSchema;
})(EightyFive$ || (EightyFive$ = {}));
export function eightyFiveToJSON(eightyFive) {
    return JSON.stringify(EightyFive$outboundSchema.parse(eightyFive));
}
export function eightyFiveFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EightyFive$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EightyFive' from JSON`);
}
/** @internal */
export const Paths$inboundSchema = z
    .object({
    value: z.string(),
});
/** @internal */
export const Paths$outboundSchema = z.object({
    value: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Paths$;
(function (Paths$) {
    /** @deprecated use `Paths$inboundSchema` instead. */
    Paths$.inboundSchema = Paths$inboundSchema;
    /** @deprecated use `Paths$outboundSchema` instead. */
    Paths$.outboundSchema = Paths$outboundSchema;
})(Paths$ || (Paths$ = {}));
export function pathsToJSON(paths) {
    return JSON.stringify(Paths$outboundSchema.parse(paths));
}
export function pathsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Paths$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Paths' from JSON`);
}
/** @internal */
export const OptionsAllowlist$inboundSchema = z.object({
    paths: z.array(z.lazy(() => Paths$inboundSchema)),
});
/** @internal */
export const OptionsAllowlist$outboundSchema = z.object({
    paths: z.array(z.lazy(() => Paths$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OptionsAllowlist$;
(function (OptionsAllowlist$) {
    /** @deprecated use `OptionsAllowlist$inboundSchema` instead. */
    OptionsAllowlist$.inboundSchema = OptionsAllowlist$inboundSchema;
    /** @deprecated use `OptionsAllowlist$outboundSchema` instead. */
    OptionsAllowlist$.outboundSchema = OptionsAllowlist$outboundSchema;
})(OptionsAllowlist$ || (OptionsAllowlist$ = {}));
export function optionsAllowlistToJSON(optionsAllowlist) {
    return JSON.stringify(OptionsAllowlist$outboundSchema.parse(optionsAllowlist));
}
export function optionsAllowlistFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OptionsAllowlist$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OptionsAllowlist' from JSON`);
}
/** @internal */
export const PayloadPaths$inboundSchema = z.object({
    value: z.string(),
});
/** @internal */
export const PayloadPaths$outboundSchema = z.object({
    value: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadPaths$;
(function (PayloadPaths$) {
    /** @deprecated use `PayloadPaths$inboundSchema` instead. */
    PayloadPaths$.inboundSchema = PayloadPaths$inboundSchema;
    /** @deprecated use `PayloadPaths$outboundSchema` instead. */
    PayloadPaths$.outboundSchema = PayloadPaths$outboundSchema;
})(PayloadPaths$ || (PayloadPaths$ = {}));
export function payloadPathsToJSON(payloadPaths) {
    return JSON.stringify(PayloadPaths$outboundSchema.parse(payloadPaths));
}
export function payloadPathsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadPaths$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadPaths' from JSON`);
}
/** @internal */
export const OldOptionsAllowlist$inboundSchema = z.object({
    paths: z.array(z.lazy(() => PayloadPaths$inboundSchema)),
});
/** @internal */
export const OldOptionsAllowlist$outboundSchema = z.object({
    paths: z.array(z.lazy(() => PayloadPaths$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OldOptionsAllowlist$;
(function (OldOptionsAllowlist$) {
    /** @deprecated use `OldOptionsAllowlist$inboundSchema` instead. */
    OldOptionsAllowlist$.inboundSchema = OldOptionsAllowlist$inboundSchema;
    /** @deprecated use `OldOptionsAllowlist$outboundSchema` instead. */
    OldOptionsAllowlist$.outboundSchema = OldOptionsAllowlist$outboundSchema;
})(OldOptionsAllowlist$ || (OldOptionsAllowlist$ = {}));
export function oldOptionsAllowlistToJSON(oldOptionsAllowlist) {
    return JSON.stringify(OldOptionsAllowlist$outboundSchema.parse(oldOptionsAllowlist));
}
export function oldOptionsAllowlistFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OldOptionsAllowlist$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OldOptionsAllowlist' from JSON`);
}
/** @internal */
export const EightyFour$inboundSchema = z.object({
    projectName: z.string(),
    optionsAllowlist: z.nullable(z.lazy(() => OptionsAllowlist$inboundSchema))
        .optional(),
    oldOptionsAllowlist: z.nullable(z.lazy(() => OldOptionsAllowlist$inboundSchema)).optional(),
});
/** @internal */
export const EightyFour$outboundSchema = z.object({
    projectName: z.string(),
    optionsAllowlist: z.nullable(z.lazy(() => OptionsAllowlist$outboundSchema))
        .optional(),
    oldOptionsAllowlist: z.nullable(z.lazy(() => OldOptionsAllowlist$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EightyFour$;
(function (EightyFour$) {
    /** @deprecated use `EightyFour$inboundSchema` instead. */
    EightyFour$.inboundSchema = EightyFour$inboundSchema;
    /** @deprecated use `EightyFour$outboundSchema` instead. */
    EightyFour$.outboundSchema = EightyFour$outboundSchema;
})(EightyFour$ || (EightyFour$ = {}));
export function eightyFourToJSON(eightyFour) {
    return JSON.stringify(EightyFour$outboundSchema.parse(eightyFour));
}
export function eightyFourFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EightyFour$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EightyFour' from JSON`);
}
/** @internal */
export const TrustedIps$inboundSchema = z
    .nativeEnum(TrustedIps);
/** @internal */
export const TrustedIps$outboundSchema = TrustedIps$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TrustedIps$;
(function (TrustedIps$) {
    /** @deprecated use `TrustedIps$inboundSchema` instead. */
    TrustedIps$.inboundSchema = TrustedIps$inboundSchema;
    /** @deprecated use `TrustedIps$outboundSchema` instead. */
    TrustedIps$.outboundSchema = TrustedIps$outboundSchema;
})(TrustedIps$ || (TrustedIps$ = {}));
/** @internal */
export const OldTrustedIps$inboundSchema = z.nativeEnum(OldTrustedIps);
/** @internal */
export const OldTrustedIps$outboundSchema = OldTrustedIps$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OldTrustedIps$;
(function (OldTrustedIps$) {
    /** @deprecated use `OldTrustedIps$inboundSchema` instead. */
    OldTrustedIps$.inboundSchema = OldTrustedIps$inboundSchema;
    /** @deprecated use `OldTrustedIps$outboundSchema` instead. */
    OldTrustedIps$.outboundSchema = OldTrustedIps$outboundSchema;
})(OldTrustedIps$ || (OldTrustedIps$ = {}));
/** @internal */
export const EightyThree$inboundSchema = z.object({
    projectName: z.string(),
    trustedIps: z.nullable(TrustedIps$inboundSchema).optional(),
    oldTrustedIps: z.nullable(OldTrustedIps$inboundSchema).optional(),
    addedAddresses: z.nullable(z.array(z.string())).optional(),
    removedAddresses: z.nullable(z.array(z.string())).optional(),
});
/** @internal */
export const EightyThree$outboundSchema = z.object({
    projectName: z.string(),
    trustedIps: z.nullable(TrustedIps$outboundSchema).optional(),
    oldTrustedIps: z.nullable(OldTrustedIps$outboundSchema).optional(),
    addedAddresses: z.nullable(z.array(z.string())).optional(),
    removedAddresses: z.nullable(z.array(z.string())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EightyThree$;
(function (EightyThree$) {
    /** @deprecated use `EightyThree$inboundSchema` instead. */
    EightyThree$.inboundSchema = EightyThree$inboundSchema;
    /** @deprecated use `EightyThree$outboundSchema` instead. */
    EightyThree$.outboundSchema = EightyThree$outboundSchema;
})(EightyThree$ || (EightyThree$ = {}));
export function eightyThreeToJSON(eightyThree) {
    return JSON.stringify(EightyThree$outboundSchema.parse(eightyThree));
}
export function eightyThreeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EightyThree$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EightyThree' from JSON`);
}
/** @internal */
export const PasswordProtection2$inboundSchema = z.nativeEnum(PasswordProtection2);
/** @internal */
export const PasswordProtection2$outboundSchema = PasswordProtection2$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PasswordProtection2$;
(function (PasswordProtection2$) {
    /** @deprecated use `PasswordProtection2$inboundSchema` instead. */
    PasswordProtection2$.inboundSchema = PasswordProtection2$inboundSchema;
    /** @deprecated use `PasswordProtection2$outboundSchema` instead. */
    PasswordProtection2$.outboundSchema = PasswordProtection2$outboundSchema;
})(PasswordProtection2$ || (PasswordProtection2$ = {}));
/** @internal */
export const PasswordProtectionDeploymentType$inboundSchema = z.nativeEnum(PasswordProtectionDeploymentType);
/** @internal */
export const PasswordProtectionDeploymentType$outboundSchema = PasswordProtectionDeploymentType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PasswordProtectionDeploymentType$;
(function (PasswordProtectionDeploymentType$) {
    /** @deprecated use `PasswordProtectionDeploymentType$inboundSchema` instead. */
    PasswordProtectionDeploymentType$.inboundSchema = PasswordProtectionDeploymentType$inboundSchema;
    /** @deprecated use `PasswordProtectionDeploymentType$outboundSchema` instead. */
    PasswordProtectionDeploymentType$.outboundSchema = PasswordProtectionDeploymentType$outboundSchema;
})(PasswordProtectionDeploymentType$ || (PasswordProtectionDeploymentType$ = {}));
/** @internal */
export const PasswordProtection1$inboundSchema = z.object({
    deploymentType: PasswordProtectionDeploymentType$inboundSchema,
});
/** @internal */
export const PasswordProtection1$outboundSchema = z.object({
    deploymentType: PasswordProtectionDeploymentType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PasswordProtection1$;
(function (PasswordProtection1$) {
    /** @deprecated use `PasswordProtection1$inboundSchema` instead. */
    PasswordProtection1$.inboundSchema = PasswordProtection1$inboundSchema;
    /** @deprecated use `PasswordProtection1$outboundSchema` instead. */
    PasswordProtection1$.outboundSchema = PasswordProtection1$outboundSchema;
})(PasswordProtection1$ || (PasswordProtection1$ = {}));
export function passwordProtection1ToJSON(passwordProtection1) {
    return JSON.stringify(PasswordProtection1$outboundSchema.parse(passwordProtection1));
}
export function passwordProtection1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => PasswordProtection1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PasswordProtection1' from JSON`);
}
/** @internal */
export const PayloadPasswordProtection$inboundSchema = z.union([
    z.lazy(() => PasswordProtection1$inboundSchema),
    PasswordProtection2$inboundSchema,
]);
/** @internal */
export const PayloadPasswordProtection$outboundSchema = z.union([
    z.lazy(() => PasswordProtection1$outboundSchema),
    PasswordProtection2$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadPasswordProtection$;
(function (PayloadPasswordProtection$) {
    /** @deprecated use `PayloadPasswordProtection$inboundSchema` instead. */
    PayloadPasswordProtection$.inboundSchema = PayloadPasswordProtection$inboundSchema;
    /** @deprecated use `PayloadPasswordProtection$outboundSchema` instead. */
    PayloadPasswordProtection$.outboundSchema = PayloadPasswordProtection$outboundSchema;
})(PayloadPasswordProtection$ || (PayloadPasswordProtection$ = {}));
export function payloadPasswordProtectionToJSON(payloadPasswordProtection) {
    return JSON.stringify(PayloadPasswordProtection$outboundSchema.parse(payloadPasswordProtection));
}
export function payloadPasswordProtectionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadPasswordProtection$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadPasswordProtection' from JSON`);
}
/** @internal */
export const OldPasswordProtection2$inboundSchema = z.nativeEnum(OldPasswordProtection2);
/** @internal */
export const OldPasswordProtection2$outboundSchema = OldPasswordProtection2$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OldPasswordProtection2$;
(function (OldPasswordProtection2$) {
    /** @deprecated use `OldPasswordProtection2$inboundSchema` instead. */
    OldPasswordProtection2$.inboundSchema = OldPasswordProtection2$inboundSchema;
    /** @deprecated use `OldPasswordProtection2$outboundSchema` instead. */
    OldPasswordProtection2$.outboundSchema = OldPasswordProtection2$outboundSchema;
})(OldPasswordProtection2$ || (OldPasswordProtection2$ = {}));
/** @internal */
export const OldPasswordProtectionDeploymentType$inboundSchema = z.nativeEnum(OldPasswordProtectionDeploymentType);
/** @internal */
export const OldPasswordProtectionDeploymentType$outboundSchema = OldPasswordProtectionDeploymentType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OldPasswordProtectionDeploymentType$;
(function (OldPasswordProtectionDeploymentType$) {
    /** @deprecated use `OldPasswordProtectionDeploymentType$inboundSchema` instead. */
    OldPasswordProtectionDeploymentType$.inboundSchema = OldPasswordProtectionDeploymentType$inboundSchema;
    /** @deprecated use `OldPasswordProtectionDeploymentType$outboundSchema` instead. */
    OldPasswordProtectionDeploymentType$.outboundSchema = OldPasswordProtectionDeploymentType$outboundSchema;
})(OldPasswordProtectionDeploymentType$ || (OldPasswordProtectionDeploymentType$ = {}));
/** @internal */
export const OldPasswordProtection1$inboundSchema = z.object({
    deploymentType: OldPasswordProtectionDeploymentType$inboundSchema,
});
/** @internal */
export const OldPasswordProtection1$outboundSchema = z.object({
    deploymentType: OldPasswordProtectionDeploymentType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OldPasswordProtection1$;
(function (OldPasswordProtection1$) {
    /** @deprecated use `OldPasswordProtection1$inboundSchema` instead. */
    OldPasswordProtection1$.inboundSchema = OldPasswordProtection1$inboundSchema;
    /** @deprecated use `OldPasswordProtection1$outboundSchema` instead. */
    OldPasswordProtection1$.outboundSchema = OldPasswordProtection1$outboundSchema;
})(OldPasswordProtection1$ || (OldPasswordProtection1$ = {}));
export function oldPasswordProtection1ToJSON(oldPasswordProtection1) {
    return JSON.stringify(OldPasswordProtection1$outboundSchema.parse(oldPasswordProtection1));
}
export function oldPasswordProtection1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => OldPasswordProtection1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OldPasswordProtection1' from JSON`);
}
/** @internal */
export const OldPasswordProtection$inboundSchema = z.union([
    z.lazy(() => OldPasswordProtection1$inboundSchema),
    OldPasswordProtection2$inboundSchema,
]);
/** @internal */
export const OldPasswordProtection$outboundSchema = z.union([
    z.lazy(() => OldPasswordProtection1$outboundSchema),
    OldPasswordProtection2$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OldPasswordProtection$;
(function (OldPasswordProtection$) {
    /** @deprecated use `OldPasswordProtection$inboundSchema` instead. */
    OldPasswordProtection$.inboundSchema = OldPasswordProtection$inboundSchema;
    /** @deprecated use `OldPasswordProtection$outboundSchema` instead. */
    OldPasswordProtection$.outboundSchema = OldPasswordProtection$outboundSchema;
})(OldPasswordProtection$ || (OldPasswordProtection$ = {}));
export function oldPasswordProtectionToJSON(oldPasswordProtection) {
    return JSON.stringify(OldPasswordProtection$outboundSchema.parse(oldPasswordProtection));
}
export function oldPasswordProtectionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OldPasswordProtection$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OldPasswordProtection' from JSON`);
}
/** @internal */
export const EightyTwo$inboundSchema = z.object({
    projectName: z.string(),
    passwordProtection: z.nullable(z.union([
        z.lazy(() => PasswordProtection1$inboundSchema),
        PasswordProtection2$inboundSchema,
    ])),
    oldPasswordProtection: z.nullable(z.union([
        z.lazy(() => OldPasswordProtection1$inboundSchema),
        OldPasswordProtection2$inboundSchema,
    ])),
});
/** @internal */
export const EightyTwo$outboundSchema = z.object({
    projectName: z.string(),
    passwordProtection: z.nullable(z.union([
        z.lazy(() => PasswordProtection1$outboundSchema),
        PasswordProtection2$outboundSchema,
    ])),
    oldPasswordProtection: z.nullable(z.union([
        z.lazy(() => OldPasswordProtection1$outboundSchema),
        OldPasswordProtection2$outboundSchema,
    ])),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EightyTwo$;
(function (EightyTwo$) {
    /** @deprecated use `EightyTwo$inboundSchema` instead. */
    EightyTwo$.inboundSchema = EightyTwo$inboundSchema;
    /** @deprecated use `EightyTwo$outboundSchema` instead. */
    EightyTwo$.outboundSchema = EightyTwo$outboundSchema;
})(EightyTwo$ || (EightyTwo$ = {}));
export function eightyTwoToJSON(eightyTwo) {
    return JSON.stringify(EightyTwo$outboundSchema.parse(eightyTwo));
}
export function eightyTwoFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EightyTwo$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EightyTwo' from JSON`);
}
/** @internal */
export const SsoProtection2$inboundSchema = z.nativeEnum(SsoProtection2);
/** @internal */
export const SsoProtection2$outboundSchema = SsoProtection2$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SsoProtection2$;
(function (SsoProtection2$) {
    /** @deprecated use `SsoProtection2$inboundSchema` instead. */
    SsoProtection2$.inboundSchema = SsoProtection2$inboundSchema;
    /** @deprecated use `SsoProtection2$outboundSchema` instead. */
    SsoProtection2$.outboundSchema = SsoProtection2$outboundSchema;
})(SsoProtection2$ || (SsoProtection2$ = {}));
/** @internal */
export const DeploymentType$inboundSchema = z.nativeEnum(DeploymentType);
/** @internal */
export const DeploymentType$outboundSchema = DeploymentType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DeploymentType$;
(function (DeploymentType$) {
    /** @deprecated use `DeploymentType$inboundSchema` instead. */
    DeploymentType$.inboundSchema = DeploymentType$inboundSchema;
    /** @deprecated use `DeploymentType$outboundSchema` instead. */
    DeploymentType$.outboundSchema = DeploymentType$outboundSchema;
})(DeploymentType$ || (DeploymentType$ = {}));
/** @internal */
export const SsoProtection1$inboundSchema = z.object({
    deploymentType: DeploymentType$inboundSchema,
});
/** @internal */
export const SsoProtection1$outboundSchema = z.object({
    deploymentType: DeploymentType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SsoProtection1$;
(function (SsoProtection1$) {
    /** @deprecated use `SsoProtection1$inboundSchema` instead. */
    SsoProtection1$.inboundSchema = SsoProtection1$inboundSchema;
    /** @deprecated use `SsoProtection1$outboundSchema` instead. */
    SsoProtection1$.outboundSchema = SsoProtection1$outboundSchema;
})(SsoProtection1$ || (SsoProtection1$ = {}));
export function ssoProtection1ToJSON(ssoProtection1) {
    return JSON.stringify(SsoProtection1$outboundSchema.parse(ssoProtection1));
}
export function ssoProtection1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => SsoProtection1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SsoProtection1' from JSON`);
}
/** @internal */
export const PayloadSsoProtection$inboundSchema = z.union([
    z.lazy(() => SsoProtection1$inboundSchema),
    SsoProtection2$inboundSchema,
]);
/** @internal */
export const PayloadSsoProtection$outboundSchema = z.union([
    z.lazy(() => SsoProtection1$outboundSchema),
    SsoProtection2$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadSsoProtection$;
(function (PayloadSsoProtection$) {
    /** @deprecated use `PayloadSsoProtection$inboundSchema` instead. */
    PayloadSsoProtection$.inboundSchema = PayloadSsoProtection$inboundSchema;
    /** @deprecated use `PayloadSsoProtection$outboundSchema` instead. */
    PayloadSsoProtection$.outboundSchema = PayloadSsoProtection$outboundSchema;
})(PayloadSsoProtection$ || (PayloadSsoProtection$ = {}));
export function payloadSsoProtectionToJSON(payloadSsoProtection) {
    return JSON.stringify(PayloadSsoProtection$outboundSchema.parse(payloadSsoProtection));
}
export function payloadSsoProtectionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadSsoProtection$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadSsoProtection' from JSON`);
}
/** @internal */
export const OldSsoProtection2$inboundSchema = z.nativeEnum(OldSsoProtection2);
/** @internal */
export const OldSsoProtection2$outboundSchema = OldSsoProtection2$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OldSsoProtection2$;
(function (OldSsoProtection2$) {
    /** @deprecated use `OldSsoProtection2$inboundSchema` instead. */
    OldSsoProtection2$.inboundSchema = OldSsoProtection2$inboundSchema;
    /** @deprecated use `OldSsoProtection2$outboundSchema` instead. */
    OldSsoProtection2$.outboundSchema = OldSsoProtection2$outboundSchema;
})(OldSsoProtection2$ || (OldSsoProtection2$ = {}));
/** @internal */
export const OldSsoProtectionDeploymentType$inboundSchema = z.nativeEnum(OldSsoProtectionDeploymentType);
/** @internal */
export const OldSsoProtectionDeploymentType$outboundSchema = OldSsoProtectionDeploymentType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OldSsoProtectionDeploymentType$;
(function (OldSsoProtectionDeploymentType$) {
    /** @deprecated use `OldSsoProtectionDeploymentType$inboundSchema` instead. */
    OldSsoProtectionDeploymentType$.inboundSchema = OldSsoProtectionDeploymentType$inboundSchema;
    /** @deprecated use `OldSsoProtectionDeploymentType$outboundSchema` instead. */
    OldSsoProtectionDeploymentType$.outboundSchema = OldSsoProtectionDeploymentType$outboundSchema;
})(OldSsoProtectionDeploymentType$ || (OldSsoProtectionDeploymentType$ = {}));
/** @internal */
export const OldSsoProtection1$inboundSchema = z.object({
    deploymentType: OldSsoProtectionDeploymentType$inboundSchema,
});
/** @internal */
export const OldSsoProtection1$outboundSchema = z.object({
    deploymentType: OldSsoProtectionDeploymentType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OldSsoProtection1$;
(function (OldSsoProtection1$) {
    /** @deprecated use `OldSsoProtection1$inboundSchema` instead. */
    OldSsoProtection1$.inboundSchema = OldSsoProtection1$inboundSchema;
    /** @deprecated use `OldSsoProtection1$outboundSchema` instead. */
    OldSsoProtection1$.outboundSchema = OldSsoProtection1$outboundSchema;
})(OldSsoProtection1$ || (OldSsoProtection1$ = {}));
export function oldSsoProtection1ToJSON(oldSsoProtection1) {
    return JSON.stringify(OldSsoProtection1$outboundSchema.parse(oldSsoProtection1));
}
export function oldSsoProtection1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => OldSsoProtection1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OldSsoProtection1' from JSON`);
}
/** @internal */
export const OldSsoProtection$inboundSchema = z.union([
    z.lazy(() => OldSsoProtection1$inboundSchema),
    OldSsoProtection2$inboundSchema,
]);
/** @internal */
export const OldSsoProtection$outboundSchema = z.union([
    z.lazy(() => OldSsoProtection1$outboundSchema),
    OldSsoProtection2$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OldSsoProtection$;
(function (OldSsoProtection$) {
    /** @deprecated use `OldSsoProtection$inboundSchema` instead. */
    OldSsoProtection$.inboundSchema = OldSsoProtection$inboundSchema;
    /** @deprecated use `OldSsoProtection$outboundSchema` instead. */
    OldSsoProtection$.outboundSchema = OldSsoProtection$outboundSchema;
})(OldSsoProtection$ || (OldSsoProtection$ = {}));
export function oldSsoProtectionToJSON(oldSsoProtection) {
    return JSON.stringify(OldSsoProtection$outboundSchema.parse(oldSsoProtection));
}
export function oldSsoProtectionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OldSsoProtection$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OldSsoProtection' from JSON`);
}
/** @internal */
export const EightyOne$inboundSchema = z.object({
    projectName: z.string(),
    ssoProtection: z.nullable(z.union([
        z.lazy(() => SsoProtection1$inboundSchema),
        SsoProtection2$inboundSchema,
    ])),
    oldSsoProtection: z.nullable(z.union([
        z.lazy(() => OldSsoProtection1$inboundSchema),
        OldSsoProtection2$inboundSchema,
    ])),
});
/** @internal */
export const EightyOne$outboundSchema = z.object({
    projectName: z.string(),
    ssoProtection: z.nullable(z.union([
        z.lazy(() => SsoProtection1$outboundSchema),
        SsoProtection2$outboundSchema,
    ])),
    oldSsoProtection: z.nullable(z.union([
        z.lazy(() => OldSsoProtection1$outboundSchema),
        OldSsoProtection2$outboundSchema,
    ])),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EightyOne$;
(function (EightyOne$) {
    /** @deprecated use `EightyOne$inboundSchema` instead. */
    EightyOne$.inboundSchema = EightyOne$inboundSchema;
    /** @deprecated use `EightyOne$outboundSchema` instead. */
    EightyOne$.outboundSchema = EightyOne$outboundSchema;
})(EightyOne$ || (EightyOne$ = {}));
export function eightyOneToJSON(eightyOne) {
    return JSON.stringify(EightyOne$outboundSchema.parse(eightyOne));
}
export function eightyOneFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EightyOne$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EightyOne' from JSON`);
}
/** @internal */
export const Eighty$inboundSchema = z
    .object({
    projectName: z.string().optional(),
    projectId: z.string(),
});
/** @internal */
export const Eighty$outboundSchema = z.object({
    projectName: z.string().optional(),
    projectId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Eighty$;
(function (Eighty$) {
    /** @deprecated use `Eighty$inboundSchema` instead. */
    Eighty$.inboundSchema = Eighty$inboundSchema;
    /** @deprecated use `Eighty$outboundSchema` instead. */
    Eighty$.outboundSchema = Eighty$outboundSchema;
})(Eighty$ || (Eighty$ = {}));
export function eightyToJSON(eighty) {
    return JSON.stringify(Eighty$outboundSchema.parse(eighty));
}
export function eightyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Eighty$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Eighty' from JSON`);
}
/** @internal */
export const SeventyNine$inboundSchema = z.object({
    projectName: z.string().optional(),
    projectId: z.string(),
    projectAnalytics: z.record(z.any()).optional(),
    prevProjectAnalytics: z.nullable(z.record(z.any())).optional(),
});
/** @internal */
export const SeventyNine$outboundSchema = z.object({
    projectName: z.string().optional(),
    projectId: z.string(),
    projectAnalytics: z.record(z.any()).optional(),
    prevProjectAnalytics: z.nullable(z.record(z.any())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SeventyNine$;
(function (SeventyNine$) {
    /** @deprecated use `SeventyNine$inboundSchema` instead. */
    SeventyNine$.inboundSchema = SeventyNine$inboundSchema;
    /** @deprecated use `SeventyNine$outboundSchema` instead. */
    SeventyNine$.outboundSchema = SeventyNine$outboundSchema;
})(SeventyNine$ || (SeventyNine$ = {}));
export function seventyNineToJSON(seventyNine) {
    return JSON.stringify(SeventyNine$outboundSchema.parse(seventyNine));
}
export function seventyNineFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SeventyNine$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SeventyNine' from JSON`);
}
/** @internal */
export const ProjectAnalytics$inboundSchema = z.object({
    id: z.string(),
    canceledAt: z.nullable(z.number()).optional(),
    disabledAt: z.number(),
    enabledAt: z.number(),
    paidAt: z.number().optional(),
    sampleRatePercent: z.nullable(z.number()).optional(),
    spendLimitInDollars: z.nullable(z.number()).optional(),
});
/** @internal */
export const ProjectAnalytics$outboundSchema = z.object({
    id: z.string(),
    canceledAt: z.nullable(z.number()).optional(),
    disabledAt: z.number(),
    enabledAt: z.number(),
    paidAt: z.number().optional(),
    sampleRatePercent: z.nullable(z.number()).optional(),
    spendLimitInDollars: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ProjectAnalytics$;
(function (ProjectAnalytics$) {
    /** @deprecated use `ProjectAnalytics$inboundSchema` instead. */
    ProjectAnalytics$.inboundSchema = ProjectAnalytics$inboundSchema;
    /** @deprecated use `ProjectAnalytics$outboundSchema` instead. */
    ProjectAnalytics$.outboundSchema = ProjectAnalytics$outboundSchema;
})(ProjectAnalytics$ || (ProjectAnalytics$ = {}));
export function projectAnalyticsToJSON(projectAnalytics) {
    return JSON.stringify(ProjectAnalytics$outboundSchema.parse(projectAnalytics));
}
export function projectAnalyticsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ProjectAnalytics$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ProjectAnalytics' from JSON`);
}
/** @internal */
export const PrevProjectAnalytics$inboundSchema = z.object({
    id: z.string(),
    canceledAt: z.nullable(z.number()).optional(),
    disabledAt: z.number(),
    enabledAt: z.number(),
    paidAt: z.number().optional(),
    sampleRatePercent: z.nullable(z.number()).optional(),
    spendLimitInDollars: z.nullable(z.number()).optional(),
});
/** @internal */
export const PrevProjectAnalytics$outboundSchema = z.object({
    id: z.string(),
    canceledAt: z.nullable(z.number()).optional(),
    disabledAt: z.number(),
    enabledAt: z.number(),
    paidAt: z.number().optional(),
    sampleRatePercent: z.nullable(z.number()).optional(),
    spendLimitInDollars: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PrevProjectAnalytics$;
(function (PrevProjectAnalytics$) {
    /** @deprecated use `PrevProjectAnalytics$inboundSchema` instead. */
    PrevProjectAnalytics$.inboundSchema = PrevProjectAnalytics$inboundSchema;
    /** @deprecated use `PrevProjectAnalytics$outboundSchema` instead. */
    PrevProjectAnalytics$.outboundSchema = PrevProjectAnalytics$outboundSchema;
})(PrevProjectAnalytics$ || (PrevProjectAnalytics$ = {}));
export function prevProjectAnalyticsToJSON(prevProjectAnalytics) {
    return JSON.stringify(PrevProjectAnalytics$outboundSchema.parse(prevProjectAnalytics));
}
export function prevProjectAnalyticsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PrevProjectAnalytics$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PrevProjectAnalytics' from JSON`);
}
/** @internal */
export const SeventyEight$inboundSchema = z.object({
    projectName: z.string().optional(),
    projectId: z.string(),
    projectAnalytics: z.nullable(z.lazy(() => ProjectAnalytics$inboundSchema)),
    prevProjectAnalytics: z.nullable(z.lazy(() => PrevProjectAnalytics$inboundSchema)),
});
/** @internal */
export const SeventyEight$outboundSchema = z.object({
    projectName: z.string().optional(),
    projectId: z.string(),
    projectAnalytics: z.nullable(z.lazy(() => ProjectAnalytics$outboundSchema)),
    prevProjectAnalytics: z.nullable(z.lazy(() => PrevProjectAnalytics$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SeventyEight$;
(function (SeventyEight$) {
    /** @deprecated use `SeventyEight$inboundSchema` instead. */
    SeventyEight$.inboundSchema = SeventyEight$inboundSchema;
    /** @deprecated use `SeventyEight$outboundSchema` instead. */
    SeventyEight$.outboundSchema = SeventyEight$outboundSchema;
})(SeventyEight$ || (SeventyEight$ = {}));
export function seventyEightToJSON(seventyEight) {
    return JSON.stringify(SeventyEight$outboundSchema.parse(seventyEight));
}
export function seventyEightFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SeventyEight$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SeventyEight' from JSON`);
}
/** @internal */
export const SeventySeven$inboundSchema = z.object({
    projectName: z.string(),
    branch: z.string(),
});
/** @internal */
export const SeventySeven$outboundSchema = z.object({
    projectName: z.string(),
    branch: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SeventySeven$;
(function (SeventySeven$) {
    /** @deprecated use `SeventySeven$inboundSchema` instead. */
    SeventySeven$.inboundSchema = SeventySeven$inboundSchema;
    /** @deprecated use `SeventySeven$outboundSchema` instead. */
    SeventySeven$.outboundSchema = SeventySeven$outboundSchema;
})(SeventySeven$ || (SeventySeven$ = {}));
export function seventySevenToJSON(seventySeven) {
    return JSON.stringify(SeventySeven$outboundSchema.parse(seventySeven));
}
export function seventySevenFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SeventySeven$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SeventySeven' from JSON`);
}
/** @internal */
export const UserEventPayload76Role$inboundSchema = z.nativeEnum(UserEventPayload76Role);
/** @internal */
export const UserEventPayload76Role$outboundSchema = UserEventPayload76Role$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload76Role$;
(function (UserEventPayload76Role$) {
    /** @deprecated use `UserEventPayload76Role$inboundSchema` instead. */
    UserEventPayload76Role$.inboundSchema = UserEventPayload76Role$inboundSchema;
    /** @deprecated use `UserEventPayload76Role$outboundSchema` instead. */
    UserEventPayload76Role$.outboundSchema = UserEventPayload76Role$outboundSchema;
})(UserEventPayload76Role$ || (UserEventPayload76Role$ = {}));
/** @internal */
export const PayloadOrigin$inboundSchema = z.nativeEnum(PayloadOrigin);
/** @internal */
export const PayloadOrigin$outboundSchema = PayloadOrigin$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadOrigin$;
(function (PayloadOrigin$) {
    /** @deprecated use `PayloadOrigin$inboundSchema` instead. */
    PayloadOrigin$.inboundSchema = PayloadOrigin$inboundSchema;
    /** @deprecated use `PayloadOrigin$outboundSchema` instead. */
    PayloadOrigin$.outboundSchema = PayloadOrigin$outboundSchema;
})(PayloadOrigin$ || (PayloadOrigin$ = {}));
/** @internal */
export const PayloadGitUserId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const PayloadGitUserId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadGitUserId$;
(function (PayloadGitUserId$) {
    /** @deprecated use `PayloadGitUserId$inboundSchema` instead. */
    PayloadGitUserId$.inboundSchema = PayloadGitUserId$inboundSchema;
    /** @deprecated use `PayloadGitUserId$outboundSchema` instead. */
    PayloadGitUserId$.outboundSchema = PayloadGitUserId$outboundSchema;
})(PayloadGitUserId$ || (PayloadGitUserId$ = {}));
export function payloadGitUserIdToJSON(payloadGitUserId) {
    return JSON.stringify(PayloadGitUserId$outboundSchema.parse(payloadGitUserId));
}
export function payloadGitUserIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadGitUserId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadGitUserId' from JSON`);
}
/** @internal */
export const PayloadJoinedFrom$inboundSchema = z.object({
    origin: PayloadOrigin$inboundSchema,
    commitId: z.string().optional(),
    repoId: z.string().optional(),
    repoPath: z.string().optional(),
    gitUserId: z.union([z.string(), z.number()]).optional(),
    gitUserLogin: z.string().optional(),
    ssoUserId: z.string().optional(),
    ssoConnectedAt: z.number().optional(),
    idpUserId: z.string().optional(),
    dsyncUserId: z.string().optional(),
    dsyncConnectedAt: z.number().optional(),
});
/** @internal */
export const PayloadJoinedFrom$outboundSchema = z.object({
    origin: PayloadOrigin$outboundSchema,
    commitId: z.string().optional(),
    repoId: z.string().optional(),
    repoPath: z.string().optional(),
    gitUserId: z.union([z.string(), z.number()]).optional(),
    gitUserLogin: z.string().optional(),
    ssoUserId: z.string().optional(),
    ssoConnectedAt: z.number().optional(),
    idpUserId: z.string().optional(),
    dsyncUserId: z.string().optional(),
    dsyncConnectedAt: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadJoinedFrom$;
(function (PayloadJoinedFrom$) {
    /** @deprecated use `PayloadJoinedFrom$inboundSchema` instead. */
    PayloadJoinedFrom$.inboundSchema = PayloadJoinedFrom$inboundSchema;
    /** @deprecated use `PayloadJoinedFrom$outboundSchema` instead. */
    PayloadJoinedFrom$.outboundSchema = PayloadJoinedFrom$outboundSchema;
})(PayloadJoinedFrom$ || (PayloadJoinedFrom$ = {}));
export function payloadJoinedFromToJSON(payloadJoinedFrom) {
    return JSON.stringify(PayloadJoinedFrom$outboundSchema.parse(payloadJoinedFrom));
}
export function payloadJoinedFromFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadJoinedFrom$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadJoinedFrom' from JSON`);
}
/** @internal */
export const RemovedUsers$inboundSchema = z.object({
    role: UserEventPayload76Role$inboundSchema,
    confirmed: z.boolean(),
    confirmedAt: z.number().optional(),
    joinedFrom: z.lazy(() => PayloadJoinedFrom$inboundSchema).optional(),
});
/** @internal */
export const RemovedUsers$outboundSchema = z.object({
    role: UserEventPayload76Role$outboundSchema,
    confirmed: z.boolean(),
    confirmedAt: z.number().optional(),
    joinedFrom: z.lazy(() => PayloadJoinedFrom$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RemovedUsers$;
(function (RemovedUsers$) {
    /** @deprecated use `RemovedUsers$inboundSchema` instead. */
    RemovedUsers$.inboundSchema = RemovedUsers$inboundSchema;
    /** @deprecated use `RemovedUsers$outboundSchema` instead. */
    RemovedUsers$.outboundSchema = RemovedUsers$outboundSchema;
})(RemovedUsers$ || (RemovedUsers$ = {}));
export function removedUsersToJSON(removedUsers) {
    return JSON.stringify(RemovedUsers$outboundSchema.parse(removedUsers));
}
export function removedUsersFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RemovedUsers$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RemovedUsers' from JSON`);
}
/** @internal */
export const SeventySix$inboundSchema = z.object({
    plan: z.string(),
    removedUsers: z.record(z.lazy(() => RemovedUsers$inboundSchema)).optional(),
    priorPlan: z.string().optional(),
    isDowngrade: z.boolean().optional(),
    userAgent: z.string().optional(),
    isReactivate: z.boolean().optional(),
    isTrialUpgrade: z.boolean().optional(),
});
/** @internal */
export const SeventySix$outboundSchema = z.object({
    plan: z.string(),
    removedUsers: z.record(z.lazy(() => RemovedUsers$outboundSchema)).optional(),
    priorPlan: z.string().optional(),
    isDowngrade: z.boolean().optional(),
    userAgent: z.string().optional(),
    isReactivate: z.boolean().optional(),
    isTrialUpgrade: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SeventySix$;
(function (SeventySix$) {
    /** @deprecated use `SeventySix$inboundSchema` instead. */
    SeventySix$.inboundSchema = SeventySix$inboundSchema;
    /** @deprecated use `SeventySix$outboundSchema` instead. */
    SeventySix$.outboundSchema = SeventySix$outboundSchema;
})(SeventySix$ || (SeventySix$ = {}));
export function seventySixToJSON(seventySix) {
    return JSON.stringify(SeventySix$outboundSchema.parse(seventySix));
}
export function seventySixFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SeventySix$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SeventySix' from JSON`);
}
/** @internal */
export const SeventyFive$inboundSchema = z.object({
    projectName: z.string(),
});
/** @internal */
export const SeventyFive$outboundSchema = z.object({
    projectName: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SeventyFive$;
(function (SeventyFive$) {
    /** @deprecated use `SeventyFive$inboundSchema` instead. */
    SeventyFive$.inboundSchema = SeventyFive$inboundSchema;
    /** @deprecated use `SeventyFive$outboundSchema` instead. */
    SeventyFive$.outboundSchema = SeventyFive$outboundSchema;
})(SeventyFive$ || (SeventyFive$ = {}));
export function seventyFiveToJSON(seventyFive) {
    return JSON.stringify(SeventyFive$outboundSchema.parse(seventyFive));
}
export function seventyFiveFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SeventyFive$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SeventyFive' from JSON`);
}
/** @internal */
export const SeventyFour$inboundSchema = z.object({
    projectId: z.string(),
    toDeploymentId: z.string(),
    projectName: z.string(),
});
/** @internal */
export const SeventyFour$outboundSchema = z.object({
    projectId: z.string(),
    toDeploymentId: z.string(),
    projectName: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SeventyFour$;
(function (SeventyFour$) {
    /** @deprecated use `SeventyFour$inboundSchema` instead. */
    SeventyFour$.inboundSchema = SeventyFour$inboundSchema;
    /** @deprecated use `SeventyFour$outboundSchema` instead. */
    SeventyFour$.outboundSchema = SeventyFour$outboundSchema;
})(SeventyFour$ || (SeventyFour$ = {}));
export function seventyFourToJSON(seventyFour) {
    return JSON.stringify(SeventyFour$outboundSchema.parse(seventyFour));
}
export function seventyFourFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SeventyFour$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SeventyFour' from JSON`);
}
/** @internal */
export const SeventyThree$inboundSchema = z.object({
    drainUrl: z.nullable(z.string()),
    integrationName: z.string().optional(),
});
/** @internal */
export const SeventyThree$outboundSchema = z.object({
    drainUrl: z.nullable(z.string()),
    integrationName: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SeventyThree$;
(function (SeventyThree$) {
    /** @deprecated use `SeventyThree$inboundSchema` instead. */
    SeventyThree$.inboundSchema = SeventyThree$inboundSchema;
    /** @deprecated use `SeventyThree$outboundSchema` instead. */
    SeventyThree$.outboundSchema = SeventyThree$outboundSchema;
})(SeventyThree$ || (SeventyThree$ = {}));
export function seventyThreeToJSON(seventyThree) {
    return JSON.stringify(SeventyThree$outboundSchema.parse(seventyThree));
}
export function seventyThreeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SeventyThree$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SeventyThree' from JSON`);
}
/** @internal */
export const SeventyTwo$inboundSchema = z.object({
    logDrainUrl: z.string(),
    integrationName: z.string().optional(),
});
/** @internal */
export const SeventyTwo$outboundSchema = z.object({
    logDrainUrl: z.string(),
    integrationName: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SeventyTwo$;
(function (SeventyTwo$) {
    /** @deprecated use `SeventyTwo$inboundSchema` instead. */
    SeventyTwo$.inboundSchema = SeventyTwo$inboundSchema;
    /** @deprecated use `SeventyTwo$outboundSchema` instead. */
    SeventyTwo$.outboundSchema = SeventyTwo$outboundSchema;
})(SeventyTwo$ || (SeventyTwo$ = {}));
export function seventyTwoToJSON(seventyTwo) {
    return JSON.stringify(SeventyTwo$outboundSchema.parse(seventyTwo));
}
export function seventyTwoFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SeventyTwo$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SeventyTwo' from JSON`);
}
/** @internal */
export const SeventyOne$inboundSchema = z.object({
    logDrainUrl: z.nullable(z.string()),
    integrationName: z.string().optional(),
});
/** @internal */
export const SeventyOne$outboundSchema = z.object({
    logDrainUrl: z.nullable(z.string()),
    integrationName: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SeventyOne$;
(function (SeventyOne$) {
    /** @deprecated use `SeventyOne$inboundSchema` instead. */
    SeventyOne$.inboundSchema = SeventyOne$inboundSchema;
    /** @deprecated use `SeventyOne$outboundSchema` instead. */
    SeventyOne$.outboundSchema = SeventyOne$outboundSchema;
})(SeventyOne$ || (SeventyOne$ = {}));
export function seventyOneToJSON(seventyOne) {
    return JSON.stringify(SeventyOne$outboundSchema.parse(seventyOne));
}
export function seventyOneFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SeventyOne$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SeventyOne' from JSON`);
}
/** @internal */
export const PayloadName$inboundSchema = z
    .nativeEnum(PayloadName);
/** @internal */
export const PayloadName$outboundSchema = PayloadName$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadName$;
(function (PayloadName$) {
    /** @deprecated use `PayloadName$inboundSchema` instead. */
    PayloadName$.inboundSchema = PayloadName$inboundSchema;
    /** @deprecated use `PayloadName$outboundSchema` instead. */
    PayloadName$.outboundSchema = PayloadName$outboundSchema;
})(PayloadName$ || (PayloadName$ = {}));
/** @internal */
export const Browser$inboundSchema = z.object({
    name: PayloadName$inboundSchema,
});
/** @internal */
export const Browser$outboundSchema = z.object({
    name: PayloadName$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Browser$;
(function (Browser$) {
    /** @deprecated use `Browser$inboundSchema` instead. */
    Browser$.inboundSchema = Browser$inboundSchema;
    /** @deprecated use `Browser$outboundSchema` instead. */
    Browser$.outboundSchema = Browser$outboundSchema;
})(Browser$ || (Browser$ = {}));
export function browserToJSON(browser) {
    return JSON.stringify(Browser$outboundSchema.parse(browser));
}
export function browserFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Browser$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Browser' from JSON`);
}
/** @internal */
export const UserEventPayloadName$inboundSchema = z.nativeEnum(UserEventPayloadName);
/** @internal */
export const UserEventPayloadName$outboundSchema = UserEventPayloadName$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayloadName$;
(function (UserEventPayloadName$) {
    /** @deprecated use `UserEventPayloadName$inboundSchema` instead. */
    UserEventPayloadName$.inboundSchema = UserEventPayloadName$inboundSchema;
    /** @deprecated use `UserEventPayloadName$outboundSchema` instead. */
    UserEventPayloadName$.outboundSchema = UserEventPayloadName$outboundSchema;
})(UserEventPayloadName$ || (UserEventPayloadName$ = {}));
/** @internal */
export const Os$inboundSchema = z.object({
    name: UserEventPayloadName$inboundSchema,
});
/** @internal */
export const Os$outboundSchema = z
    .object({
    name: UserEventPayloadName$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Os$;
(function (Os$) {
    /** @deprecated use `Os$inboundSchema` instead. */
    Os$.inboundSchema = Os$inboundSchema;
    /** @deprecated use `Os$outboundSchema` instead. */
    Os$.outboundSchema = Os$outboundSchema;
})(Os$ || (Os$ = {}));
export function osToJSON(os) {
    return JSON.stringify(Os$outboundSchema.parse(os));
}
export function osFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Os$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Os' from JSON`);
}
/** @internal */
export const UserAgent$inboundSchema = z.object({
    browser: z.lazy(() => Browser$inboundSchema),
    ua: z.string(),
    program: z.string(),
    os: z.lazy(() => Os$inboundSchema),
});
/** @internal */
export const UserAgent$outboundSchema = z.object({
    browser: z.lazy(() => Browser$outboundSchema),
    ua: z.string(),
    program: z.string(),
    os: z.lazy(() => Os$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserAgent$;
(function (UserAgent$) {
    /** @deprecated use `UserAgent$inboundSchema` instead. */
    UserAgent$.inboundSchema = UserAgent$inboundSchema;
    /** @deprecated use `UserAgent$outboundSchema` instead. */
    UserAgent$.outboundSchema = UserAgent$outboundSchema;
})(UserAgent$ || (UserAgent$ = {}));
export function userAgentToJSON(userAgent) {
    return JSON.stringify(UserAgent$outboundSchema.parse(userAgent));
}
export function userAgentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserAgent$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserAgent' from JSON`);
}
/** @internal */
export const Names$inboundSchema = z
    .object({
    en: z.string(),
});
/** @internal */
export const Names$outboundSchema = z.object({
    en: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Names$;
(function (Names$) {
    /** @deprecated use `Names$inboundSchema` instead. */
    Names$.inboundSchema = Names$inboundSchema;
    /** @deprecated use `Names$outboundSchema` instead. */
    Names$.outboundSchema = Names$outboundSchema;
})(Names$ || (Names$ = {}));
export function namesToJSON(names) {
    return JSON.stringify(Names$outboundSchema.parse(names));
}
export function namesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Names$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Names' from JSON`);
}
/** @internal */
export const City$inboundSchema = z
    .object({
    names: z.lazy(() => Names$inboundSchema),
});
/** @internal */
export const City$outboundSchema = z.object({
    names: z.lazy(() => Names$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var City$;
(function (City$) {
    /** @deprecated use `City$inboundSchema` instead. */
    City$.inboundSchema = City$inboundSchema;
    /** @deprecated use `City$outboundSchema` instead. */
    City$.outboundSchema = City$outboundSchema;
})(City$ || (City$ = {}));
export function cityToJSON(city) {
    return JSON.stringify(City$outboundSchema.parse(city));
}
export function cityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => City$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'City' from JSON`);
}
/** @internal */
export const PayloadNames$inboundSchema = z.object({
    en: z.string(),
});
/** @internal */
export const PayloadNames$outboundSchema = z.object({
    en: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadNames$;
(function (PayloadNames$) {
    /** @deprecated use `PayloadNames$inboundSchema` instead. */
    PayloadNames$.inboundSchema = PayloadNames$inboundSchema;
    /** @deprecated use `PayloadNames$outboundSchema` instead. */
    PayloadNames$.outboundSchema = PayloadNames$outboundSchema;
})(PayloadNames$ || (PayloadNames$ = {}));
export function payloadNamesToJSON(payloadNames) {
    return JSON.stringify(PayloadNames$outboundSchema.parse(payloadNames));
}
export function payloadNamesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadNames$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadNames' from JSON`);
}
/** @internal */
export const Country$inboundSchema = z.object({
    names: z.lazy(() => PayloadNames$inboundSchema),
});
/** @internal */
export const Country$outboundSchema = z.object({
    names: z.lazy(() => PayloadNames$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Country$;
(function (Country$) {
    /** @deprecated use `Country$inboundSchema` instead. */
    Country$.inboundSchema = Country$inboundSchema;
    /** @deprecated use `Country$outboundSchema` instead. */
    Country$.outboundSchema = Country$outboundSchema;
})(Country$ || (Country$ = {}));
export function countryToJSON(country) {
    return JSON.stringify(Country$outboundSchema.parse(country));
}
export function countryFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Country$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Country' from JSON`);
}
/** @internal */
export const UserEventPayloadNames$inboundSchema = z.object({
    en: z.string(),
});
/** @internal */
export const UserEventPayloadNames$outboundSchema = z.object({
    en: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayloadNames$;
(function (UserEventPayloadNames$) {
    /** @deprecated use `UserEventPayloadNames$inboundSchema` instead. */
    UserEventPayloadNames$.inboundSchema = UserEventPayloadNames$inboundSchema;
    /** @deprecated use `UserEventPayloadNames$outboundSchema` instead. */
    UserEventPayloadNames$.outboundSchema = UserEventPayloadNames$outboundSchema;
})(UserEventPayloadNames$ || (UserEventPayloadNames$ = {}));
export function userEventPayloadNamesToJSON(userEventPayloadNames) {
    return JSON.stringify(UserEventPayloadNames$outboundSchema.parse(userEventPayloadNames));
}
export function userEventPayloadNamesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayloadNames$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayloadNames' from JSON`);
}
/** @internal */
export const MostSpecificSubdivision$inboundSchema = z.object({
    names: z.lazy(() => UserEventPayloadNames$inboundSchema),
});
/** @internal */
export const MostSpecificSubdivision$outboundSchema = z.object({
    names: z.lazy(() => UserEventPayloadNames$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MostSpecificSubdivision$;
(function (MostSpecificSubdivision$) {
    /** @deprecated use `MostSpecificSubdivision$inboundSchema` instead. */
    MostSpecificSubdivision$.inboundSchema = MostSpecificSubdivision$inboundSchema;
    /** @deprecated use `MostSpecificSubdivision$outboundSchema` instead. */
    MostSpecificSubdivision$.outboundSchema = MostSpecificSubdivision$outboundSchema;
})(MostSpecificSubdivision$ || (MostSpecificSubdivision$ = {}));
export function mostSpecificSubdivisionToJSON(mostSpecificSubdivision) {
    return JSON.stringify(MostSpecificSubdivision$outboundSchema.parse(mostSpecificSubdivision));
}
export function mostSpecificSubdivisionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MostSpecificSubdivision$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MostSpecificSubdivision' from JSON`);
}
/** @internal */
export const Geolocation$inboundSchema = z.object({
    city: z.lazy(() => City$inboundSchema).optional(),
    country: z.lazy(() => Country$inboundSchema),
    most_specific_subdivision: z.lazy(() => MostSpecificSubdivision$inboundSchema)
        .optional(),
    regionName: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "most_specific_subdivision": "mostSpecificSubdivision",
    });
});
/** @internal */
export const Geolocation$outboundSchema = z.object({
    city: z.lazy(() => City$outboundSchema).optional(),
    country: z.lazy(() => Country$outboundSchema),
    mostSpecificSubdivision: z.lazy(() => MostSpecificSubdivision$outboundSchema)
        .optional(),
    regionName: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        mostSpecificSubdivision: "most_specific_subdivision",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Geolocation$;
(function (Geolocation$) {
    /** @deprecated use `Geolocation$inboundSchema` instead. */
    Geolocation$.inboundSchema = Geolocation$inboundSchema;
    /** @deprecated use `Geolocation$outboundSchema` instead. */
    Geolocation$.outboundSchema = Geolocation$outboundSchema;
})(Geolocation$ || (Geolocation$ = {}));
export function geolocationToJSON(geolocation) {
    return JSON.stringify(Geolocation$outboundSchema.parse(geolocation));
}
export function geolocationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Geolocation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Geolocation' from JSON`);
}
/** @internal */
export const Seventy$inboundSchema = z.object({
    userAgent: z.lazy(() => UserAgent$inboundSchema).optional(),
    geolocation: z.nullable(z.lazy(() => Geolocation$inboundSchema)).optional(),
    viaGithub: z.boolean(),
    viaGitlab: z.boolean(),
    viaBitbucket: z.boolean(),
    viaGoogle: z.boolean(),
    viaSamlSso: z.boolean(),
    viaPasskey: z.boolean(),
    ssoType: z.string().optional(),
    env: z.string().optional(),
    os: z.string().optional(),
    username: z.string().optional(),
});
/** @internal */
export const Seventy$outboundSchema = z.object({
    userAgent: z.lazy(() => UserAgent$outboundSchema).optional(),
    geolocation: z.nullable(z.lazy(() => Geolocation$outboundSchema)).optional(),
    viaGithub: z.boolean(),
    viaGitlab: z.boolean(),
    viaBitbucket: z.boolean(),
    viaGoogle: z.boolean(),
    viaSamlSso: z.boolean(),
    viaPasskey: z.boolean(),
    ssoType: z.string().optional(),
    env: z.string().optional(),
    os: z.string().optional(),
    username: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Seventy$;
(function (Seventy$) {
    /** @deprecated use `Seventy$inboundSchema` instead. */
    Seventy$.inboundSchema = Seventy$inboundSchema;
    /** @deprecated use `Seventy$outboundSchema` instead. */
    Seventy$.outboundSchema = Seventy$outboundSchema;
})(Seventy$ || (Seventy$ = {}));
export function seventyToJSON(seventy) {
    return JSON.stringify(Seventy$outboundSchema.parse(seventy));
}
export function seventyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Seventy$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Seventy' from JSON`);
}
/** @internal */
export const SixtyNine$inboundSchema = z.object({
    integrationId: z.string(),
    configurationId: z.string(),
    integrationSlug: z.string(),
    integrationName: z.string(),
    ownerId: z.string(),
    projectIds: z.array(z.string()).optional(),
    confirmedScopes: z.array(z.string()),
});
/** @internal */
export const SixtyNine$outboundSchema = z.object({
    integrationId: z.string(),
    configurationId: z.string(),
    integrationSlug: z.string(),
    integrationName: z.string(),
    ownerId: z.string(),
    projectIds: z.array(z.string()).optional(),
    confirmedScopes: z.array(z.string()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SixtyNine$;
(function (SixtyNine$) {
    /** @deprecated use `SixtyNine$inboundSchema` instead. */
    SixtyNine$.inboundSchema = SixtyNine$inboundSchema;
    /** @deprecated use `SixtyNine$outboundSchema` instead. */
    SixtyNine$.outboundSchema = SixtyNine$outboundSchema;
})(SixtyNine$ || (SixtyNine$ = {}));
export function sixtyNineToJSON(sixtyNine) {
    return JSON.stringify(SixtyNine$outboundSchema.parse(sixtyNine));
}
export function sixtyNineFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SixtyNine$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SixtyNine' from JSON`);
}
/** @internal */
export const SixtyEight$inboundSchema = z.object({
    projectId: z.string(),
    fromDeploymentId: z.string(),
    toDeploymentId: z.string(),
    projectName: z.string(),
    reason: z.string().optional(),
});
/** @internal */
export const SixtyEight$outboundSchema = z.object({
    projectId: z.string(),
    fromDeploymentId: z.string(),
    toDeploymentId: z.string(),
    projectName: z.string(),
    reason: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SixtyEight$;
(function (SixtyEight$) {
    /** @deprecated use `SixtyEight$inboundSchema` instead. */
    SixtyEight$.inboundSchema = SixtyEight$inboundSchema;
    /** @deprecated use `SixtyEight$outboundSchema` instead. */
    SixtyEight$.outboundSchema = SixtyEight$outboundSchema;
})(SixtyEight$ || (SixtyEight$ = {}));
export function sixtyEightToJSON(sixtyEight) {
    return JSON.stringify(SixtyEight$outboundSchema.parse(sixtyEight));
}
export function sixtyEightFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SixtyEight$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SixtyEight' from JSON`);
}
/** @internal */
export const SixtySeven$inboundSchema = z.object({
    integrationId: z.string(),
    configurationId: z.string(),
    integrationSlug: z.string(),
    integrationName: z.string(),
    ownerId: z.string(),
    projectIds: z.array(z.string()).optional(),
});
/** @internal */
export const SixtySeven$outboundSchema = z.object({
    integrationId: z.string(),
    configurationId: z.string(),
    integrationSlug: z.string(),
    integrationName: z.string(),
    ownerId: z.string(),
    projectIds: z.array(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SixtySeven$;
(function (SixtySeven$) {
    /** @deprecated use `SixtySeven$inboundSchema` instead. */
    SixtySeven$.inboundSchema = SixtySeven$inboundSchema;
    /** @deprecated use `SixtySeven$outboundSchema` instead. */
    SixtySeven$.outboundSchema = SixtySeven$outboundSchema;
})(SixtySeven$ || (SixtySeven$ = {}));
export function sixtySevenToJSON(sixtySeven) {
    return JSON.stringify(SixtySeven$outboundSchema.parse(sixtySeven));
}
export function sixtySevenFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SixtySeven$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SixtySeven' from JSON`);
}
/** @internal */
export const SixtySix$inboundSchema = z.object({
    integrationId: z.string(),
    configurationId: z.string(),
    integrationSlug: z.string(),
    integrationName: z.string(),
    ownerId: z.string(),
    billingPlanId: z.string(),
    billingPlanName: z.string().optional(),
});
/** @internal */
export const SixtySix$outboundSchema = z.object({
    integrationId: z.string(),
    configurationId: z.string(),
    integrationSlug: z.string(),
    integrationName: z.string(),
    ownerId: z.string(),
    billingPlanId: z.string(),
    billingPlanName: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SixtySix$;
(function (SixtySix$) {
    /** @deprecated use `SixtySix$inboundSchema` instead. */
    SixtySix$.inboundSchema = SixtySix$inboundSchema;
    /** @deprecated use `SixtySix$outboundSchema` instead. */
    SixtySix$.outboundSchema = SixtySix$outboundSchema;
})(SixtySix$ || (SixtySix$ = {}));
export function sixtySixToJSON(sixtySix) {
    return JSON.stringify(SixtySix$outboundSchema.parse(sixtySix));
}
export function sixtySixFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SixtySix$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SixtySix' from JSON`);
}
/** @internal */
export const Configurations$inboundSchema = z.object({
    integrationId: z.string(),
    configurationId: z.string(),
    integrationSlug: z.string(),
    integrationName: z.string().optional(),
});
/** @internal */
export const Configurations$outboundSchema = z.object({
    integrationId: z.string(),
    configurationId: z.string(),
    integrationSlug: z.string(),
    integrationName: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Configurations$;
(function (Configurations$) {
    /** @deprecated use `Configurations$inboundSchema` instead. */
    Configurations$.inboundSchema = Configurations$inboundSchema;
    /** @deprecated use `Configurations$outboundSchema` instead. */
    Configurations$.outboundSchema = Configurations$outboundSchema;
})(Configurations$ || (Configurations$ = {}));
export function configurationsToJSON(configurations) {
    return JSON.stringify(Configurations$outboundSchema.parse(configurations));
}
export function configurationsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Configurations$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Configurations' from JSON`);
}
/** @internal */
export const SixtyFive$inboundSchema = z.object({
    configurations: z.array(z.lazy(() => Configurations$inboundSchema)),
    ownerId: z.string(),
});
/** @internal */
export const SixtyFive$outboundSchema = z.object({
    configurations: z.array(z.lazy(() => Configurations$outboundSchema)),
    ownerId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SixtyFive$;
(function (SixtyFive$) {
    /** @deprecated use `SixtyFive$inboundSchema` instead. */
    SixtyFive$.inboundSchema = SixtyFive$inboundSchema;
    /** @deprecated use `SixtyFive$outboundSchema` instead. */
    SixtyFive$.outboundSchema = SixtyFive$outboundSchema;
})(SixtyFive$ || (SixtyFive$ = {}));
export function sixtyFiveToJSON(sixtyFive) {
    return JSON.stringify(SixtyFive$outboundSchema.parse(sixtyFive));
}
export function sixtyFiveFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SixtyFive$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SixtyFive' from JSON`);
}
/** @internal */
export const UserEventPayload64Action$inboundSchema = z.nativeEnum(UserEventPayload64Action);
/** @internal */
export const UserEventPayload64Action$outboundSchema = UserEventPayload64Action$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload64Action$;
(function (UserEventPayload64Action$) {
    /** @deprecated use `UserEventPayload64Action$inboundSchema` instead. */
    UserEventPayload64Action$.inboundSchema = UserEventPayload64Action$inboundSchema;
    /** @deprecated use `UserEventPayload64Action$outboundSchema` instead. */
    UserEventPayload64Action$.outboundSchema = UserEventPayload64Action$outboundSchema;
})(UserEventPayload64Action$ || (UserEventPayload64Action$ = {}));
/** @internal */
export const BlockHistory$inboundSchema = z.object({
    action: UserEventPayload64Action$inboundSchema,
    createdAt: z.number(),
    caseId: z.string().optional(),
    reason: z.string(),
    actor: z.string().optional(),
    statusCode: z.number().optional(),
    comment: z.string().optional(),
});
/** @internal */
export const BlockHistory$outboundSchema = z.object({
    action: UserEventPayload64Action$outboundSchema,
    createdAt: z.number(),
    caseId: z.string().optional(),
    reason: z.string(),
    actor: z.string().optional(),
    statusCode: z.number().optional(),
    comment: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BlockHistory$;
(function (BlockHistory$) {
    /** @deprecated use `BlockHistory$inboundSchema` instead. */
    BlockHistory$.inboundSchema = BlockHistory$inboundSchema;
    /** @deprecated use `BlockHistory$outboundSchema` instead. */
    BlockHistory$.outboundSchema = BlockHistory$outboundSchema;
})(BlockHistory$ || (BlockHistory$ = {}));
export function blockHistoryToJSON(blockHistory) {
    return JSON.stringify(BlockHistory$outboundSchema.parse(blockHistory));
}
export function blockHistoryFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BlockHistory$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BlockHistory' from JSON`);
}
/** @internal */
export const History$inboundSchema = z.object({
    scanner: z.string(),
    reason: z.string(),
    by: z.string(),
    byId: z.string(),
    at: z.number(),
});
/** @internal */
export const History$outboundSchema = z.object({
    scanner: z.string(),
    reason: z.string(),
    by: z.string(),
    byId: z.string(),
    at: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var History$;
(function (History$) {
    /** @deprecated use `History$inboundSchema` instead. */
    History$.inboundSchema = History$inboundSchema;
    /** @deprecated use `History$outboundSchema` instead. */
    History$.outboundSchema = History$outboundSchema;
})(History$ || (History$ = {}));
export function historyToJSON(history) {
    return JSON.stringify(History$outboundSchema.parse(history));
}
export function historyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => History$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'History' from JSON`);
}
/** @internal */
export const Abuse$inboundSchema = z
    .object({
    blockHistory: z.array(z.lazy(() => BlockHistory$inboundSchema)).optional(),
    gitAuthHistory: z.array(z.string()).optional(),
    history: z.array(z.lazy(() => History$inboundSchema)).optional(),
    gitLineageBlocks: z.number().optional(),
    gitLineageBlocksDry: z.number().optional(),
    scanner: z.string().optional(),
    updatedAt: z.number(),
    creationUserAgent: z.string().optional(),
    creationIp: z.string().optional(),
    removedPhoneNumbers: z.string().optional(),
});
/** @internal */
export const Abuse$outboundSchema = z.object({
    blockHistory: z.array(z.lazy(() => BlockHistory$outboundSchema)).optional(),
    gitAuthHistory: z.array(z.string()).optional(),
    history: z.array(z.lazy(() => History$outboundSchema)).optional(),
    gitLineageBlocks: z.number().optional(),
    gitLineageBlocksDry: z.number().optional(),
    scanner: z.string().optional(),
    updatedAt: z.number(),
    creationUserAgent: z.string().optional(),
    creationIp: z.string().optional(),
    removedPhoneNumbers: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Abuse$;
(function (Abuse$) {
    /** @deprecated use `Abuse$inboundSchema` instead. */
    Abuse$.inboundSchema = Abuse$inboundSchema;
    /** @deprecated use `Abuse$outboundSchema` instead. */
    Abuse$.outboundSchema = Abuse$outboundSchema;
})(Abuse$ || (Abuse$ = {}));
export function abuseToJSON(abuse) {
    return JSON.stringify(Abuse$outboundSchema.parse(abuse));
}
export function abuseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Abuse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Abuse' from JSON`);
}
/** @internal */
export const Plan$inboundSchema = z.nativeEnum(Plan);
/** @internal */
export const Plan$outboundSchema = Plan$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Plan$;
(function (Plan$) {
    /** @deprecated use `Plan$inboundSchema` instead. */
    Plan$.inboundSchema = Plan$inboundSchema;
    /** @deprecated use `Plan$outboundSchema` instead. */
    Plan$.outboundSchema = Plan$outboundSchema;
})(Plan$ || (Plan$ = {}));
/** @internal */
export const PayloadBilling$inboundSchema = z.object({
    plan: Plan$inboundSchema,
});
/** @internal */
export const PayloadBilling$outboundSchema = z.object({
    plan: Plan$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadBilling$;
(function (PayloadBilling$) {
    /** @deprecated use `PayloadBilling$inboundSchema` instead. */
    PayloadBilling$.inboundSchema = PayloadBilling$inboundSchema;
    /** @deprecated use `PayloadBilling$outboundSchema` instead. */
    PayloadBilling$.outboundSchema = PayloadBilling$outboundSchema;
})(PayloadBilling$ || (PayloadBilling$ = {}));
export function payloadBillingToJSON(payloadBilling) {
    return JSON.stringify(PayloadBilling$outboundSchema.parse(payloadBilling));
}
export function payloadBillingFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadBilling$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadBilling' from JSON`);
}
/** @internal */
export const UserEventCredentialsType$inboundSchema = z.nativeEnum(UserEventCredentialsType);
/** @internal */
export const UserEventCredentialsType$outboundSchema = UserEventCredentialsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventCredentialsType$;
(function (UserEventCredentialsType$) {
    /** @deprecated use `UserEventCredentialsType$inboundSchema` instead. */
    UserEventCredentialsType$.inboundSchema = UserEventCredentialsType$inboundSchema;
    /** @deprecated use `UserEventCredentialsType$outboundSchema` instead. */
    UserEventCredentialsType$.outboundSchema = UserEventCredentialsType$outboundSchema;
})(UserEventCredentialsType$ || (UserEventCredentialsType$ = {}));
/** @internal */
export const Credentials2$inboundSchema = z.object({
    type: UserEventCredentialsType$inboundSchema,
    host: z.string(),
    id: z.string(),
});
/** @internal */
export const Credentials2$outboundSchema = z.object({
    type: UserEventCredentialsType$outboundSchema,
    host: z.string(),
    id: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Credentials2$;
(function (Credentials2$) {
    /** @deprecated use `Credentials2$inboundSchema` instead. */
    Credentials2$.inboundSchema = Credentials2$inboundSchema;
    /** @deprecated use `Credentials2$outboundSchema` instead. */
    Credentials2$.outboundSchema = Credentials2$outboundSchema;
})(Credentials2$ || (Credentials2$ = {}));
export function credentials2ToJSON(credentials2) {
    return JSON.stringify(Credentials2$outboundSchema.parse(credentials2));
}
export function credentials2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Credentials2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Credentials2' from JSON`);
}
/** @internal */
export const CredentialsType$inboundSchema = z.nativeEnum(CredentialsType);
/** @internal */
export const CredentialsType$outboundSchema = CredentialsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CredentialsType$;
(function (CredentialsType$) {
    /** @deprecated use `CredentialsType$inboundSchema` instead. */
    CredentialsType$.inboundSchema = CredentialsType$inboundSchema;
    /** @deprecated use `CredentialsType$outboundSchema` instead. */
    CredentialsType$.outboundSchema = CredentialsType$outboundSchema;
})(CredentialsType$ || (CredentialsType$ = {}));
/** @internal */
export const Credentials1$inboundSchema = z.object({
    type: CredentialsType$inboundSchema,
    id: z.string(),
});
/** @internal */
export const Credentials1$outboundSchema = z.object({
    type: CredentialsType$outboundSchema,
    id: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Credentials1$;
(function (Credentials1$) {
    /** @deprecated use `Credentials1$inboundSchema` instead. */
    Credentials1$.inboundSchema = Credentials1$inboundSchema;
    /** @deprecated use `Credentials1$outboundSchema` instead. */
    Credentials1$.outboundSchema = Credentials1$outboundSchema;
})(Credentials1$ || (Credentials1$ = {}));
export function credentials1ToJSON(credentials1) {
    return JSON.stringify(Credentials1$outboundSchema.parse(credentials1));
}
export function credentials1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Credentials1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Credentials1' from JSON`);
}
/** @internal */
export const Credentials$inboundSchema = z.union([
    z.lazy(() => Credentials2$inboundSchema),
    z.lazy(() => Credentials1$inboundSchema),
]);
/** @internal */
export const Credentials$outboundSchema = z.union([
    z.lazy(() => Credentials2$outboundSchema),
    z.lazy(() => Credentials1$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Credentials$;
(function (Credentials$) {
    /** @deprecated use `Credentials$inboundSchema` instead. */
    Credentials$.inboundSchema = Credentials$inboundSchema;
    /** @deprecated use `Credentials$outboundSchema` instead. */
    Credentials$.outboundSchema = Credentials$outboundSchema;
})(Credentials$ || (Credentials$ = {}));
export function credentialsToJSON(credentials) {
    return JSON.stringify(Credentials$outboundSchema.parse(credentials));
}
export function credentialsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Credentials$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Credentials' from JSON`);
}
/** @internal */
export const PayloadDataCache$inboundSchema = z.object({
    excessBillingEnabled: z.boolean().optional(),
});
/** @internal */
export const PayloadDataCache$outboundSchema = z.object({
    excessBillingEnabled: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadDataCache$;
(function (PayloadDataCache$) {
    /** @deprecated use `PayloadDataCache$inboundSchema` instead. */
    PayloadDataCache$.inboundSchema = PayloadDataCache$inboundSchema;
    /** @deprecated use `PayloadDataCache$outboundSchema` instead. */
    PayloadDataCache$.outboundSchema = PayloadDataCache$outboundSchema;
})(PayloadDataCache$ || (PayloadDataCache$ = {}));
export function payloadDataCacheToJSON(payloadDataCache) {
    return JSON.stringify(PayloadDataCache$outboundSchema.parse(payloadDataCache));
}
export function payloadDataCacheFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadDataCache$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadDataCache' from JSON`);
}
/** @internal */
export const PayloadDismissals$inboundSchema = z.object({
    scopeId: z.string(),
    createdAt: z.number(),
});
/** @internal */
export const PayloadDismissals$outboundSchema = z.object({
    scopeId: z.string(),
    createdAt: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadDismissals$;
(function (PayloadDismissals$) {
    /** @deprecated use `PayloadDismissals$inboundSchema` instead. */
    PayloadDismissals$.inboundSchema = PayloadDismissals$inboundSchema;
    /** @deprecated use `PayloadDismissals$outboundSchema` instead. */
    PayloadDismissals$.outboundSchema = PayloadDismissals$outboundSchema;
})(PayloadDismissals$ || (PayloadDismissals$ = {}));
export function payloadDismissalsToJSON(payloadDismissals) {
    return JSON.stringify(PayloadDismissals$outboundSchema.parse(payloadDismissals));
}
export function payloadDismissalsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadDismissals$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadDismissals' from JSON`);
}
/** @internal */
export const PayloadDismissedToasts$inboundSchema = z.object({
    name: z.string(),
    dismissals: z.array(z.lazy(() => PayloadDismissals$inboundSchema)),
});
/** @internal */
export const PayloadDismissedToasts$outboundSchema = z.object({
    name: z.string(),
    dismissals: z.array(z.lazy(() => PayloadDismissals$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadDismissedToasts$;
(function (PayloadDismissedToasts$) {
    /** @deprecated use `PayloadDismissedToasts$inboundSchema` instead. */
    PayloadDismissedToasts$.inboundSchema = PayloadDismissedToasts$inboundSchema;
    /** @deprecated use `PayloadDismissedToasts$outboundSchema` instead. */
    PayloadDismissedToasts$.outboundSchema = PayloadDismissedToasts$outboundSchema;
})(PayloadDismissedToasts$ || (PayloadDismissedToasts$ = {}));
export function payloadDismissedToastsToJSON(payloadDismissedToasts) {
    return JSON.stringify(PayloadDismissedToasts$outboundSchema.parse(payloadDismissedToasts));
}
export function payloadDismissedToastsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadDismissedToasts$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadDismissedToasts' from JSON`);
}
/** @internal */
export const PayloadFavoriteProjectsAndSpaces$inboundSchema = z.object({
    teamId: z.string(),
    projectId: z.string(),
});
/** @internal */
export const PayloadFavoriteProjectsAndSpaces$outboundSchema = z.object({
    teamId: z.string(),
    projectId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadFavoriteProjectsAndSpaces$;
(function (PayloadFavoriteProjectsAndSpaces$) {
    /** @deprecated use `PayloadFavoriteProjectsAndSpaces$inboundSchema` instead. */
    PayloadFavoriteProjectsAndSpaces$.inboundSchema = PayloadFavoriteProjectsAndSpaces$inboundSchema;
    /** @deprecated use `PayloadFavoriteProjectsAndSpaces$outboundSchema` instead. */
    PayloadFavoriteProjectsAndSpaces$.outboundSchema = PayloadFavoriteProjectsAndSpaces$outboundSchema;
})(PayloadFavoriteProjectsAndSpaces$ || (PayloadFavoriteProjectsAndSpaces$ = {}));
export function payloadFavoriteProjectsAndSpacesToJSON(payloadFavoriteProjectsAndSpaces) {
    return JSON.stringify(PayloadFavoriteProjectsAndSpaces$outboundSchema.parse(payloadFavoriteProjectsAndSpaces));
}
export function payloadFavoriteProjectsAndSpacesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadFavoriteProjectsAndSpaces$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadFavoriteProjectsAndSpaces' from JSON`);
}
/** @internal */
export const PayloadImportFlowGitNamespace$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const PayloadImportFlowGitNamespace$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadImportFlowGitNamespace$;
(function (PayloadImportFlowGitNamespace$) {
    /** @deprecated use `PayloadImportFlowGitNamespace$inboundSchema` instead. */
    PayloadImportFlowGitNamespace$.inboundSchema = PayloadImportFlowGitNamespace$inboundSchema;
    /** @deprecated use `PayloadImportFlowGitNamespace$outboundSchema` instead. */
    PayloadImportFlowGitNamespace$.outboundSchema = PayloadImportFlowGitNamespace$outboundSchema;
})(PayloadImportFlowGitNamespace$ || (PayloadImportFlowGitNamespace$ = {}));
export function payloadImportFlowGitNamespaceToJSON(payloadImportFlowGitNamespace) {
    return JSON.stringify(PayloadImportFlowGitNamespace$outboundSchema.parse(payloadImportFlowGitNamespace));
}
export function payloadImportFlowGitNamespaceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadImportFlowGitNamespace$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadImportFlowGitNamespace' from JSON`);
}
/** @internal */
export const PayloadImportFlowGitNamespaceId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const PayloadImportFlowGitNamespaceId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadImportFlowGitNamespaceId$;
(function (PayloadImportFlowGitNamespaceId$) {
    /** @deprecated use `PayloadImportFlowGitNamespaceId$inboundSchema` instead. */
    PayloadImportFlowGitNamespaceId$.inboundSchema = PayloadImportFlowGitNamespaceId$inboundSchema;
    /** @deprecated use `PayloadImportFlowGitNamespaceId$outboundSchema` instead. */
    PayloadImportFlowGitNamespaceId$.outboundSchema = PayloadImportFlowGitNamespaceId$outboundSchema;
})(PayloadImportFlowGitNamespaceId$ || (PayloadImportFlowGitNamespaceId$ = {}));
export function payloadImportFlowGitNamespaceIdToJSON(payloadImportFlowGitNamespaceId) {
    return JSON.stringify(PayloadImportFlowGitNamespaceId$outboundSchema.parse(payloadImportFlowGitNamespaceId));
}
export function payloadImportFlowGitNamespaceIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadImportFlowGitNamespaceId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadImportFlowGitNamespaceId' from JSON`);
}
/** @internal */
export const PayloadImportFlowGitProvider$inboundSchema = z.nativeEnum(PayloadImportFlowGitProvider);
/** @internal */
export const PayloadImportFlowGitProvider$outboundSchema = PayloadImportFlowGitProvider$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadImportFlowGitProvider$;
(function (PayloadImportFlowGitProvider$) {
    /** @deprecated use `PayloadImportFlowGitProvider$inboundSchema` instead. */
    PayloadImportFlowGitProvider$.inboundSchema = PayloadImportFlowGitProvider$inboundSchema;
    /** @deprecated use `PayloadImportFlowGitProvider$outboundSchema` instead. */
    PayloadImportFlowGitProvider$.outboundSchema = PayloadImportFlowGitProvider$outboundSchema;
})(PayloadImportFlowGitProvider$ || (PayloadImportFlowGitProvider$ = {}));
/** @internal */
export const PayloadGitNamespaceId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const PayloadGitNamespaceId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadGitNamespaceId$;
(function (PayloadGitNamespaceId$) {
    /** @deprecated use `PayloadGitNamespaceId$inboundSchema` instead. */
    PayloadGitNamespaceId$.inboundSchema = PayloadGitNamespaceId$inboundSchema;
    /** @deprecated use `PayloadGitNamespaceId$outboundSchema` instead. */
    PayloadGitNamespaceId$.outboundSchema = PayloadGitNamespaceId$outboundSchema;
})(PayloadGitNamespaceId$ || (PayloadGitNamespaceId$ = {}));
export function payloadGitNamespaceIdToJSON(payloadGitNamespaceId) {
    return JSON.stringify(PayloadGitNamespaceId$outboundSchema.parse(payloadGitNamespaceId));
}
export function payloadGitNamespaceIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadGitNamespaceId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadGitNamespaceId' from JSON`);
}
/** @internal */
export const PayloadPreferredScopesAndGitNamespaces$inboundSchema = z.object({
    scopeId: z.string(),
    gitNamespaceId: z.nullable(z.union([z.string(), z.number()])),
});
/** @internal */
export const PayloadPreferredScopesAndGitNamespaces$outboundSchema = z.object({
    scopeId: z.string(),
    gitNamespaceId: z.nullable(z.union([z.string(), z.number()])),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadPreferredScopesAndGitNamespaces$;
(function (PayloadPreferredScopesAndGitNamespaces$) {
    /** @deprecated use `PayloadPreferredScopesAndGitNamespaces$inboundSchema` instead. */
    PayloadPreferredScopesAndGitNamespaces$.inboundSchema = PayloadPreferredScopesAndGitNamespaces$inboundSchema;
    /** @deprecated use `PayloadPreferredScopesAndGitNamespaces$outboundSchema` instead. */
    PayloadPreferredScopesAndGitNamespaces$.outboundSchema = PayloadPreferredScopesAndGitNamespaces$outboundSchema;
})(PayloadPreferredScopesAndGitNamespaces$ || (PayloadPreferredScopesAndGitNamespaces$ = {}));
export function payloadPreferredScopesAndGitNamespacesToJSON(payloadPreferredScopesAndGitNamespaces) {
    return JSON.stringify(PayloadPreferredScopesAndGitNamespaces$outboundSchema.parse(payloadPreferredScopesAndGitNamespaces));
}
export function payloadPreferredScopesAndGitNamespacesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadPreferredScopesAndGitNamespaces$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadPreferredScopesAndGitNamespaces' from JSON`);
}
/** @internal */
export const PreventAutoBlocking$inboundSchema = z.union([z.number(), z.boolean()]);
/** @internal */
export const PreventAutoBlocking$outboundSchema = z.union([z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PreventAutoBlocking$;
(function (PreventAutoBlocking$) {
    /** @deprecated use `PreventAutoBlocking$inboundSchema` instead. */
    PreventAutoBlocking$.inboundSchema = PreventAutoBlocking$inboundSchema;
    /** @deprecated use `PreventAutoBlocking$outboundSchema` instead. */
    PreventAutoBlocking$.outboundSchema = PreventAutoBlocking$outboundSchema;
})(PreventAutoBlocking$ || (PreventAutoBlocking$ = {}));
export function preventAutoBlockingToJSON(preventAutoBlocking) {
    return JSON.stringify(PreventAutoBlocking$outboundSchema.parse(preventAutoBlocking));
}
export function preventAutoBlockingFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PreventAutoBlocking$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PreventAutoBlocking' from JSON`);
}
/** @internal */
export const UserEventPayloadRemoteCaching$inboundSchema = z.object({
    enabled: z.boolean().optional(),
});
/** @internal */
export const UserEventPayloadRemoteCaching$outboundSchema = z.object({
    enabled: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayloadRemoteCaching$;
(function (UserEventPayloadRemoteCaching$) {
    /** @deprecated use `UserEventPayloadRemoteCaching$inboundSchema` instead. */
    UserEventPayloadRemoteCaching$.inboundSchema = UserEventPayloadRemoteCaching$inboundSchema;
    /** @deprecated use `UserEventPayloadRemoteCaching$outboundSchema` instead. */
    UserEventPayloadRemoteCaching$.outboundSchema = UserEventPayloadRemoteCaching$outboundSchema;
})(UserEventPayloadRemoteCaching$ || (UserEventPayloadRemoteCaching$ = {}));
export function userEventPayloadRemoteCachingToJSON(userEventPayloadRemoteCaching) {
    return JSON.stringify(UserEventPayloadRemoteCaching$outboundSchema.parse(userEventPayloadRemoteCaching));
}
export function userEventPayloadRemoteCachingFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayloadRemoteCaching$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayloadRemoteCaching' from JSON`);
}
/** @internal */
export const PayloadBuildEntitlements$inboundSchema = z.object({
    enhancedBuilds: z.boolean().optional(),
});
/** @internal */
export const PayloadBuildEntitlements$outboundSchema = z.object({
    enhancedBuilds: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadBuildEntitlements$;
(function (PayloadBuildEntitlements$) {
    /** @deprecated use `PayloadBuildEntitlements$inboundSchema` instead. */
    PayloadBuildEntitlements$.inboundSchema = PayloadBuildEntitlements$inboundSchema;
    /** @deprecated use `PayloadBuildEntitlements$outboundSchema` instead. */
    PayloadBuildEntitlements$.outboundSchema = PayloadBuildEntitlements$outboundSchema;
})(PayloadBuildEntitlements$ || (PayloadBuildEntitlements$ = {}));
export function payloadBuildEntitlementsToJSON(payloadBuildEntitlements) {
    return JSON.stringify(PayloadBuildEntitlements$outboundSchema.parse(payloadBuildEntitlements));
}
export function payloadBuildEntitlementsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadBuildEntitlements$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadBuildEntitlements' from JSON`);
}
/** @internal */
export const PayloadPurchaseType$inboundSchema = z.nativeEnum(PayloadPurchaseType);
/** @internal */
export const PayloadPurchaseType$outboundSchema = PayloadPurchaseType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadPurchaseType$;
(function (PayloadPurchaseType$) {
    /** @deprecated use `PayloadPurchaseType$inboundSchema` instead. */
    PayloadPurchaseType$.inboundSchema = PayloadPurchaseType$inboundSchema;
    /** @deprecated use `PayloadPurchaseType$outboundSchema` instead. */
    PayloadPurchaseType$.outboundSchema = PayloadPurchaseType$outboundSchema;
})(PayloadPurchaseType$ || (PayloadPurchaseType$ = {}));
/** @internal */
export const PayloadBuildMachine$inboundSchema = z.object({
    purchaseType: PayloadPurchaseType$inboundSchema.optional(),
    isDefaultBuildMachine: z.boolean().optional(),
    cores: z.number().optional(),
    memory: z.number().optional(),
});
/** @internal */
export const PayloadBuildMachine$outboundSchema = z.object({
    purchaseType: PayloadPurchaseType$outboundSchema.optional(),
    isDefaultBuildMachine: z.boolean().optional(),
    cores: z.number().optional(),
    memory: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadBuildMachine$;
(function (PayloadBuildMachine$) {
    /** @deprecated use `PayloadBuildMachine$inboundSchema` instead. */
    PayloadBuildMachine$.inboundSchema = PayloadBuildMachine$inboundSchema;
    /** @deprecated use `PayloadBuildMachine$outboundSchema` instead. */
    PayloadBuildMachine$.outboundSchema = PayloadBuildMachine$outboundSchema;
})(PayloadBuildMachine$ || (PayloadBuildMachine$ = {}));
export function payloadBuildMachineToJSON(payloadBuildMachine) {
    return JSON.stringify(PayloadBuildMachine$outboundSchema.parse(payloadBuildMachine));
}
export function payloadBuildMachineFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadBuildMachine$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadBuildMachine' from JSON`);
}
/** @internal */
export const PayloadSecurity$inboundSchema = z.object({
    customRules: z.number().optional(),
    ipBlocks: z.number().optional(),
    ipBypass: z.number().optional(),
    rateLimit: z.number().optional(),
});
/** @internal */
export const PayloadSecurity$outboundSchema = z.object({
    customRules: z.number().optional(),
    ipBlocks: z.number().optional(),
    ipBypass: z.number().optional(),
    rateLimit: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadSecurity$;
(function (PayloadSecurity$) {
    /** @deprecated use `PayloadSecurity$inboundSchema` instead. */
    PayloadSecurity$.inboundSchema = PayloadSecurity$inboundSchema;
    /** @deprecated use `PayloadSecurity$outboundSchema` instead. */
    PayloadSecurity$.outboundSchema = PayloadSecurity$outboundSchema;
})(PayloadSecurity$ || (PayloadSecurity$ = {}));
export function payloadSecurityToJSON(payloadSecurity) {
    return JSON.stringify(PayloadSecurity$outboundSchema.parse(payloadSecurity));
}
export function payloadSecurityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadSecurity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadSecurity' from JSON`);
}
/** @internal */
export const PayloadResourceConfig$inboundSchema = z.object({
    nodeType: z.string().optional(),
    concurrentBuilds: z.number().optional(),
    elasticConcurrencyEnabled: z.boolean().optional(),
    buildEntitlements: z.lazy(() => PayloadBuildEntitlements$inboundSchema)
        .optional(),
    awsAccountType: z.string().optional(),
    awsAccountIds: z.array(z.string()).optional(),
    cfZoneName: z.string().optional(),
    imageOptimizationType: z.string().optional(),
    edgeConfigs: z.number().optional(),
    edgeConfigSize: z.number().optional(),
    edgeFunctionMaxSizeBytes: z.number().optional(),
    edgeFunctionExecutionTimeoutMs: z.number().optional(),
    serverlessFunctionMaxMemorySize: z.number().optional(),
    kvDatabases: z.number().optional(),
    postgresDatabases: z.number().optional(),
    blobStores: z.number().optional(),
    integrationStores: z.number().optional(),
    cronJobs: z.number().optional(),
    cronJobsPerProject: z.number().optional(),
    microfrontendGroupsPerTeam: z.number().optional(),
    microfrontendProjectsPerGroup: z.number().optional(),
    flagsExplorerOverridesThreshold: z.number().optional(),
    flagsExplorerUnlimitedOverrides: z.boolean().optional(),
    customEnvironmentsPerProject: z.number().optional(),
    buildMachine: z.lazy(() => PayloadBuildMachine$inboundSchema).optional(),
    security: z.lazy(() => PayloadSecurity$inboundSchema).optional(),
});
/** @internal */
export const PayloadResourceConfig$outboundSchema = z.object({
    nodeType: z.string().optional(),
    concurrentBuilds: z.number().optional(),
    elasticConcurrencyEnabled: z.boolean().optional(),
    buildEntitlements: z.lazy(() => PayloadBuildEntitlements$outboundSchema)
        .optional(),
    awsAccountType: z.string().optional(),
    awsAccountIds: z.array(z.string()).optional(),
    cfZoneName: z.string().optional(),
    imageOptimizationType: z.string().optional(),
    edgeConfigs: z.number().optional(),
    edgeConfigSize: z.number().optional(),
    edgeFunctionMaxSizeBytes: z.number().optional(),
    edgeFunctionExecutionTimeoutMs: z.number().optional(),
    serverlessFunctionMaxMemorySize: z.number().optional(),
    kvDatabases: z.number().optional(),
    postgresDatabases: z.number().optional(),
    blobStores: z.number().optional(),
    integrationStores: z.number().optional(),
    cronJobs: z.number().optional(),
    cronJobsPerProject: z.number().optional(),
    microfrontendGroupsPerTeam: z.number().optional(),
    microfrontendProjectsPerGroup: z.number().optional(),
    flagsExplorerOverridesThreshold: z.number().optional(),
    flagsExplorerUnlimitedOverrides: z.boolean().optional(),
    customEnvironmentsPerProject: z.number().optional(),
    buildMachine: z.lazy(() => PayloadBuildMachine$outboundSchema).optional(),
    security: z.lazy(() => PayloadSecurity$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadResourceConfig$;
(function (PayloadResourceConfig$) {
    /** @deprecated use `PayloadResourceConfig$inboundSchema` instead. */
    PayloadResourceConfig$.inboundSchema = PayloadResourceConfig$inboundSchema;
    /** @deprecated use `PayloadResourceConfig$outboundSchema` instead. */
    PayloadResourceConfig$.outboundSchema = PayloadResourceConfig$outboundSchema;
})(PayloadResourceConfig$ || (PayloadResourceConfig$ = {}));
export function payloadResourceConfigToJSON(payloadResourceConfig) {
    return JSON.stringify(PayloadResourceConfig$outboundSchema.parse(payloadResourceConfig));
}
export function payloadResourceConfigFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadResourceConfig$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadResourceConfig' from JSON`);
}
/** @internal */
export const ResourceLimits$inboundSchema = z.object({
    max: z.number(),
    duration: z.number(),
});
/** @internal */
export const ResourceLimits$outboundSchema = z.object({
    max: z.number(),
    duration: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResourceLimits$;
(function (ResourceLimits$) {
    /** @deprecated use `ResourceLimits$inboundSchema` instead. */
    ResourceLimits$.inboundSchema = ResourceLimits$inboundSchema;
    /** @deprecated use `ResourceLimits$outboundSchema` instead. */
    ResourceLimits$.outboundSchema = ResourceLimits$outboundSchema;
})(ResourceLimits$ || (ResourceLimits$ = {}));
export function resourceLimitsToJSON(resourceLimits) {
    return JSON.stringify(ResourceLimits$outboundSchema.parse(resourceLimits));
}
export function resourceLimitsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResourceLimits$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResourceLimits' from JSON`);
}
/** @internal */
export const PayloadViewPreference$inboundSchema = z.nativeEnum(PayloadViewPreference);
/** @internal */
export const PayloadViewPreference$outboundSchema = PayloadViewPreference$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadViewPreference$;
(function (PayloadViewPreference$) {
    /** @deprecated use `PayloadViewPreference$inboundSchema` instead. */
    PayloadViewPreference$.inboundSchema = PayloadViewPreference$inboundSchema;
    /** @deprecated use `PayloadViewPreference$outboundSchema` instead. */
    PayloadViewPreference$.outboundSchema = PayloadViewPreference$outboundSchema;
})(PayloadViewPreference$ || (PayloadViewPreference$ = {}));
/** @internal */
export const PayloadFavoritesViewPreference$inboundSchema = z.nativeEnum(PayloadFavoritesViewPreference);
/** @internal */
export const PayloadFavoritesViewPreference$outboundSchema = PayloadFavoritesViewPreference$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadFavoritesViewPreference$;
(function (PayloadFavoritesViewPreference$) {
    /** @deprecated use `PayloadFavoritesViewPreference$inboundSchema` instead. */
    PayloadFavoritesViewPreference$.inboundSchema = PayloadFavoritesViewPreference$inboundSchema;
    /** @deprecated use `PayloadFavoritesViewPreference$outboundSchema` instead. */
    PayloadFavoritesViewPreference$.outboundSchema = PayloadFavoritesViewPreference$outboundSchema;
})(PayloadFavoritesViewPreference$ || (PayloadFavoritesViewPreference$ = {}));
/** @internal */
export const PayloadRecentsViewPreference$inboundSchema = z.nativeEnum(PayloadRecentsViewPreference);
/** @internal */
export const PayloadRecentsViewPreference$outboundSchema = PayloadRecentsViewPreference$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadRecentsViewPreference$;
(function (PayloadRecentsViewPreference$) {
    /** @deprecated use `PayloadRecentsViewPreference$inboundSchema` instead. */
    PayloadRecentsViewPreference$.inboundSchema = PayloadRecentsViewPreference$inboundSchema;
    /** @deprecated use `PayloadRecentsViewPreference$outboundSchema` instead. */
    PayloadRecentsViewPreference$.outboundSchema = PayloadRecentsViewPreference$outboundSchema;
})(PayloadRecentsViewPreference$ || (PayloadRecentsViewPreference$ = {}));
/** @internal */
export const PayloadActiveDashboardViews$inboundSchema = z.object({
    scopeId: z.string(),
    viewPreference: z.nullable(PayloadViewPreference$inboundSchema).optional(),
    favoritesViewPreference: z.nullable(PayloadFavoritesViewPreference$inboundSchema).optional(),
    recentsViewPreference: z.nullable(PayloadRecentsViewPreference$inboundSchema)
        .optional(),
});
/** @internal */
export const PayloadActiveDashboardViews$outboundSchema = z.object({
    scopeId: z.string(),
    viewPreference: z.nullable(PayloadViewPreference$outboundSchema).optional(),
    favoritesViewPreference: z.nullable(PayloadFavoritesViewPreference$outboundSchema).optional(),
    recentsViewPreference: z.nullable(PayloadRecentsViewPreference$outboundSchema)
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadActiveDashboardViews$;
(function (PayloadActiveDashboardViews$) {
    /** @deprecated use `PayloadActiveDashboardViews$inboundSchema` instead. */
    PayloadActiveDashboardViews$.inboundSchema = PayloadActiveDashboardViews$inboundSchema;
    /** @deprecated use `PayloadActiveDashboardViews$outboundSchema` instead. */
    PayloadActiveDashboardViews$.outboundSchema = PayloadActiveDashboardViews$outboundSchema;
})(PayloadActiveDashboardViews$ || (PayloadActiveDashboardViews$ = {}));
export function payloadActiveDashboardViewsToJSON(payloadActiveDashboardViews) {
    return JSON.stringify(PayloadActiveDashboardViews$outboundSchema.parse(payloadActiveDashboardViews));
}
export function payloadActiveDashboardViewsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadActiveDashboardViews$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadActiveDashboardViews' from JSON`);
}
/** @internal */
export const SecondaryEmails$inboundSchema = z.object({
    email: z.string(),
    verified: z.boolean(),
});
/** @internal */
export const SecondaryEmails$outboundSchema = z.object({
    email: z.string(),
    verified: z.boolean(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SecondaryEmails$;
(function (SecondaryEmails$) {
    /** @deprecated use `SecondaryEmails$inboundSchema` instead. */
    SecondaryEmails$.inboundSchema = SecondaryEmails$inboundSchema;
    /** @deprecated use `SecondaryEmails$outboundSchema` instead. */
    SecondaryEmails$.outboundSchema = SecondaryEmails$outboundSchema;
})(SecondaryEmails$ || (SecondaryEmails$ = {}));
export function secondaryEmailsToJSON(secondaryEmails) {
    return JSON.stringify(SecondaryEmails$outboundSchema.parse(secondaryEmails));
}
export function secondaryEmailsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SecondaryEmails$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SecondaryEmails' from JSON`);
}
/** @internal */
export const Rules$inboundSchema = z
    .object({
    email: z.string(),
});
/** @internal */
export const Rules$outboundSchema = z.object({
    email: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Rules$;
(function (Rules$) {
    /** @deprecated use `Rules$inboundSchema` instead. */
    Rules$.inboundSchema = Rules$inboundSchema;
    /** @deprecated use `Rules$outboundSchema` instead. */
    Rules$.outboundSchema = Rules$outboundSchema;
})(Rules$ || (Rules$ = {}));
export function rulesToJSON(rules) {
    return JSON.stringify(Rules$outboundSchema.parse(rules));
}
export function rulesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Rules$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Rules' from JSON`);
}
/** @internal */
export const EmailNotifications$inboundSchema = z.object({
    rules: z.record(z.lazy(() => Rules$inboundSchema)).optional(),
});
/** @internal */
export const EmailNotifications$outboundSchema = z.object({
    rules: z.record(z.lazy(() => Rules$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EmailNotifications$;
(function (EmailNotifications$) {
    /** @deprecated use `EmailNotifications$inboundSchema` instead. */
    EmailNotifications$.inboundSchema = EmailNotifications$inboundSchema;
    /** @deprecated use `EmailNotifications$outboundSchema` instead. */
    EmailNotifications$.outboundSchema = EmailNotifications$outboundSchema;
})(EmailNotifications$ || (EmailNotifications$ = {}));
export function emailNotificationsToJSON(emailNotifications) {
    return JSON.stringify(EmailNotifications$outboundSchema.parse(emailNotifications));
}
export function emailNotificationsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EmailNotifications$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EmailNotifications' from JSON`);
}
/** @internal */
export const PayloadReasons$inboundSchema = z.object({
    name: z.string(),
    value: z.string(),
});
/** @internal */
export const PayloadReasons$outboundSchema = z.object({
    name: z.string(),
    value: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadReasons$;
(function (PayloadReasons$) {
    /** @deprecated use `PayloadReasons$inboundSchema` instead. */
    PayloadReasons$.inboundSchema = PayloadReasons$inboundSchema;
    /** @deprecated use `PayloadReasons$outboundSchema` instead. */
    PayloadReasons$.outboundSchema = PayloadReasons$outboundSchema;
})(PayloadReasons$ || (PayloadReasons$ = {}));
export function payloadReasonsToJSON(payloadReasons) {
    return JSON.stringify(PayloadReasons$outboundSchema.parse(payloadReasons));
}
export function payloadReasonsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadReasons$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadReasons' from JSON`);
}
/** @internal */
export const SiftScores$inboundSchema = z.object({
    score: z.number(),
    reasons: z.array(z.lazy(() => PayloadReasons$inboundSchema)),
});
/** @internal */
export const SiftScores$outboundSchema = z.object({
    score: z.number(),
    reasons: z.array(z.lazy(() => PayloadReasons$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SiftScores$;
(function (SiftScores$) {
    /** @deprecated use `SiftScores$inboundSchema` instead. */
    SiftScores$.inboundSchema = SiftScores$inboundSchema;
    /** @deprecated use `SiftScores$outboundSchema` instead. */
    SiftScores$.outboundSchema = SiftScores$outboundSchema;
})(SiftScores$ || (SiftScores$ = {}));
export function siftScoresToJSON(siftScores) {
    return JSON.stringify(SiftScores$outboundSchema.parse(siftScores));
}
export function siftScoresFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SiftScores$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SiftScores' from JSON`);
}
/** @internal */
export const UserEventPayload64Name$inboundSchema = z.nativeEnum(UserEventPayload64Name);
/** @internal */
export const UserEventPayload64Name$outboundSchema = UserEventPayload64Name$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload64Name$;
(function (UserEventPayload64Name$) {
    /** @deprecated use `UserEventPayload64Name$inboundSchema` instead. */
    UserEventPayload64Name$.inboundSchema = UserEventPayload64Name$inboundSchema;
    /** @deprecated use `UserEventPayload64Name$outboundSchema` instead. */
    UserEventPayload64Name$.outboundSchema = UserEventPayload64Name$outboundSchema;
})(UserEventPayload64Name$ || (UserEventPayload64Name$ = {}));
/** @internal */
export const SiftRoute$inboundSchema = z.object({
    name: UserEventPayload64Name$inboundSchema,
});
/** @internal */
export const SiftRoute$outboundSchema = z.object({
    name: UserEventPayload64Name$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SiftRoute$;
(function (SiftRoute$) {
    /** @deprecated use `SiftRoute$inboundSchema` instead. */
    SiftRoute$.inboundSchema = SiftRoute$inboundSchema;
    /** @deprecated use `SiftRoute$outboundSchema` instead. */
    SiftRoute$.outboundSchema = SiftRoute$outboundSchema;
})(SiftRoute$ || (SiftRoute$ = {}));
export function siftRouteToJSON(siftRoute) {
    return JSON.stringify(SiftRoute$outboundSchema.parse(siftRoute));
}
export function siftRouteFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SiftRoute$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SiftRoute' from JSON`);
}
/** @internal */
export const PayloadReason$inboundSchema = z.nativeEnum(PayloadReason);
/** @internal */
export const PayloadReason$outboundSchema = PayloadReason$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadReason$;
(function (PayloadReason$) {
    /** @deprecated use `PayloadReason$inboundSchema` instead. */
    PayloadReason$.inboundSchema = PayloadReason$inboundSchema;
    /** @deprecated use `PayloadReason$outboundSchema` instead. */
    PayloadReason$.outboundSchema = PayloadReason$outboundSchema;
})(PayloadReason$ || (PayloadReason$ = {}));
/** @internal */
export const PayloadBlockedDueToOverageType$inboundSchema = z.nativeEnum(PayloadBlockedDueToOverageType);
/** @internal */
export const PayloadBlockedDueToOverageType$outboundSchema = PayloadBlockedDueToOverageType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadBlockedDueToOverageType$;
(function (PayloadBlockedDueToOverageType$) {
    /** @deprecated use `PayloadBlockedDueToOverageType$inboundSchema` instead. */
    PayloadBlockedDueToOverageType$.inboundSchema = PayloadBlockedDueToOverageType$inboundSchema;
    /** @deprecated use `PayloadBlockedDueToOverageType$outboundSchema` instead. */
    PayloadBlockedDueToOverageType$.outboundSchema = PayloadBlockedDueToOverageType$outboundSchema;
})(PayloadBlockedDueToOverageType$ || (PayloadBlockedDueToOverageType$ = {}));
/** @internal */
export const PayloadSoftBlock$inboundSchema = z.object({
    blockedAt: z.number(),
    reason: PayloadReason$inboundSchema,
    blockedDueToOverageType: PayloadBlockedDueToOverageType$inboundSchema
        .optional(),
});
/** @internal */
export const PayloadSoftBlock$outboundSchema = z.object({
    blockedAt: z.number(),
    reason: PayloadReason$outboundSchema,
    blockedDueToOverageType: PayloadBlockedDueToOverageType$outboundSchema
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadSoftBlock$;
(function (PayloadSoftBlock$) {
    /** @deprecated use `PayloadSoftBlock$inboundSchema` instead. */
    PayloadSoftBlock$.inboundSchema = PayloadSoftBlock$inboundSchema;
    /** @deprecated use `PayloadSoftBlock$outboundSchema` instead. */
    PayloadSoftBlock$.outboundSchema = PayloadSoftBlock$outboundSchema;
})(PayloadSoftBlock$ || (PayloadSoftBlock$ = {}));
export function payloadSoftBlockToJSON(payloadSoftBlock) {
    return JSON.stringify(PayloadSoftBlock$outboundSchema.parse(payloadSoftBlock));
}
export function payloadSoftBlockFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadSoftBlock$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadSoftBlock' from JSON`);
}
/** @internal */
export const UserEventPayload64Role$inboundSchema = z.nativeEnum(UserEventPayload64Role);
/** @internal */
export const UserEventPayload64Role$outboundSchema = UserEventPayload64Role$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload64Role$;
(function (UserEventPayload64Role$) {
    /** @deprecated use `UserEventPayload64Role$inboundSchema` instead. */
    UserEventPayload64Role$.inboundSchema = UserEventPayload64Role$inboundSchema;
    /** @deprecated use `UserEventPayload64Role$outboundSchema` instead. */
    UserEventPayload64Role$.outboundSchema = UserEventPayload64Role$outboundSchema;
})(UserEventPayload64Role$ || (UserEventPayload64Role$ = {}));
/** @internal */
export const PayloadTeamRoles$inboundSchema = z.nativeEnum(PayloadTeamRoles);
/** @internal */
export const PayloadTeamRoles$outboundSchema = PayloadTeamRoles$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadTeamRoles$;
(function (PayloadTeamRoles$) {
    /** @deprecated use `PayloadTeamRoles$inboundSchema` instead. */
    PayloadTeamRoles$.inboundSchema = PayloadTeamRoles$inboundSchema;
    /** @deprecated use `PayloadTeamRoles$outboundSchema` instead. */
    PayloadTeamRoles$.outboundSchema = PayloadTeamRoles$outboundSchema;
})(PayloadTeamRoles$ || (PayloadTeamRoles$ = {}));
/** @internal */
export const PayloadTeamPermissions$inboundSchema = z.nativeEnum(PayloadTeamPermissions);
/** @internal */
export const PayloadTeamPermissions$outboundSchema = PayloadTeamPermissions$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadTeamPermissions$;
(function (PayloadTeamPermissions$) {
    /** @deprecated use `PayloadTeamPermissions$inboundSchema` instead. */
    PayloadTeamPermissions$.inboundSchema = PayloadTeamPermissions$inboundSchema;
    /** @deprecated use `PayloadTeamPermissions$outboundSchema` instead. */
    PayloadTeamPermissions$.outboundSchema = PayloadTeamPermissions$outboundSchema;
})(PayloadTeamPermissions$ || (PayloadTeamPermissions$ = {}));
/** @internal */
export const UserEventPayloadOrigin$inboundSchema = z.nativeEnum(UserEventPayloadOrigin);
/** @internal */
export const UserEventPayloadOrigin$outboundSchema = UserEventPayloadOrigin$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayloadOrigin$;
(function (UserEventPayloadOrigin$) {
    /** @deprecated use `UserEventPayloadOrigin$inboundSchema` instead. */
    UserEventPayloadOrigin$.inboundSchema = UserEventPayloadOrigin$inboundSchema;
    /** @deprecated use `UserEventPayloadOrigin$outboundSchema` instead. */
    UserEventPayloadOrigin$.outboundSchema = UserEventPayloadOrigin$outboundSchema;
})(UserEventPayloadOrigin$ || (UserEventPayloadOrigin$ = {}));
/** @internal */
export const UserEventPayloadGitUserId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const UserEventPayloadGitUserId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayloadGitUserId$;
(function (UserEventPayloadGitUserId$) {
    /** @deprecated use `UserEventPayloadGitUserId$inboundSchema` instead. */
    UserEventPayloadGitUserId$.inboundSchema = UserEventPayloadGitUserId$inboundSchema;
    /** @deprecated use `UserEventPayloadGitUserId$outboundSchema` instead. */
    UserEventPayloadGitUserId$.outboundSchema = UserEventPayloadGitUserId$outboundSchema;
})(UserEventPayloadGitUserId$ || (UserEventPayloadGitUserId$ = {}));
export function userEventPayloadGitUserIdToJSON(userEventPayloadGitUserId) {
    return JSON.stringify(UserEventPayloadGitUserId$outboundSchema.parse(userEventPayloadGitUserId));
}
export function userEventPayloadGitUserIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayloadGitUserId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayloadGitUserId' from JSON`);
}
/** @internal */
export const UserEventPayloadJoinedFrom$inboundSchema = z.object({
    origin: UserEventPayloadOrigin$inboundSchema,
    commitId: z.string().optional(),
    repoId: z.string().optional(),
    repoPath: z.string().optional(),
    gitUserId: z.union([z.string(), z.number()]).optional(),
    gitUserLogin: z.string().optional(),
    ssoUserId: z.string().optional(),
    ssoConnectedAt: z.number().optional(),
    idpUserId: z.string().optional(),
    dsyncUserId: z.string().optional(),
    dsyncConnectedAt: z.number().optional(),
});
/** @internal */
export const UserEventPayloadJoinedFrom$outboundSchema = z.object({
    origin: UserEventPayloadOrigin$outboundSchema,
    commitId: z.string().optional(),
    repoId: z.string().optional(),
    repoPath: z.string().optional(),
    gitUserId: z.union([z.string(), z.number()]).optional(),
    gitUserLogin: z.string().optional(),
    ssoUserId: z.string().optional(),
    ssoConnectedAt: z.number().optional(),
    idpUserId: z.string().optional(),
    dsyncUserId: z.string().optional(),
    dsyncConnectedAt: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayloadJoinedFrom$;
(function (UserEventPayloadJoinedFrom$) {
    /** @deprecated use `UserEventPayloadJoinedFrom$inboundSchema` instead. */
    UserEventPayloadJoinedFrom$.inboundSchema = UserEventPayloadJoinedFrom$inboundSchema;
    /** @deprecated use `UserEventPayloadJoinedFrom$outboundSchema` instead. */
    UserEventPayloadJoinedFrom$.outboundSchema = UserEventPayloadJoinedFrom$outboundSchema;
})(UserEventPayloadJoinedFrom$ || (UserEventPayloadJoinedFrom$ = {}));
export function userEventPayloadJoinedFromToJSON(userEventPayloadJoinedFrom) {
    return JSON.stringify(UserEventPayloadJoinedFrom$outboundSchema.parse(userEventPayloadJoinedFrom));
}
export function userEventPayloadJoinedFromFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayloadJoinedFrom$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayloadJoinedFrom' from JSON`);
}
/** @internal */
export const Teams$inboundSchema = z
    .object({
    created: z.number(),
    createdAt: z.number(),
    teamId: z.string(),
    role: UserEventPayload64Role$inboundSchema,
    confirmed: z.boolean(),
    confirmedAt: z.number(),
    accessRequestedAt: z.number().optional(),
    teamRoles: z.array(PayloadTeamRoles$inboundSchema).optional(),
    teamPermissions: z.array(PayloadTeamPermissions$inboundSchema).optional(),
    joinedFrom: z.lazy(() => UserEventPayloadJoinedFrom$inboundSchema)
        .optional(),
});
/** @internal */
export const Teams$outboundSchema = z.object({
    created: z.number(),
    createdAt: z.number(),
    teamId: z.string(),
    role: UserEventPayload64Role$outboundSchema,
    confirmed: z.boolean(),
    confirmedAt: z.number(),
    accessRequestedAt: z.number().optional(),
    teamRoles: z.array(PayloadTeamRoles$outboundSchema).optional(),
    teamPermissions: z.array(PayloadTeamPermissions$outboundSchema).optional(),
    joinedFrom: z.lazy(() => UserEventPayloadJoinedFrom$outboundSchema)
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Teams$;
(function (Teams$) {
    /** @deprecated use `Teams$inboundSchema` instead. */
    Teams$.inboundSchema = Teams$inboundSchema;
    /** @deprecated use `Teams$outboundSchema` instead. */
    Teams$.outboundSchema = Teams$outboundSchema;
})(Teams$ || (Teams$ = {}));
export function teamsToJSON(teams) {
    return JSON.stringify(Teams$outboundSchema.parse(teams));
}
export function teamsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Teams$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Teams' from JSON`);
}
/** @internal */
export const UserEventPayload64Type$inboundSchema = z.nativeEnum(UserEventPayload64Type);
/** @internal */
export const UserEventPayload64Type$outboundSchema = UserEventPayload64Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload64Type$;
(function (UserEventPayload64Type$) {
    /** @deprecated use `UserEventPayload64Type$inboundSchema` instead. */
    UserEventPayload64Type$.inboundSchema = UserEventPayload64Type$inboundSchema;
    /** @deprecated use `UserEventPayload64Type$outboundSchema` instead. */
    UserEventPayload64Type$.outboundSchema = UserEventPayload64Type$outboundSchema;
})(UserEventPayload64Type$ || (UserEventPayload64Type$ = {}));
/** @internal */
export const UsageAlerts$inboundSchema = z.object({
    warningAt: z.nullable(z.number()).optional(),
    blockingAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const UsageAlerts$outboundSchema = z.object({
    warningAt: z.nullable(z.number()).optional(),
    blockingAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UsageAlerts$;
(function (UsageAlerts$) {
    /** @deprecated use `UsageAlerts$inboundSchema` instead. */
    UsageAlerts$.inboundSchema = UsageAlerts$inboundSchema;
    /** @deprecated use `UsageAlerts$outboundSchema` instead. */
    UsageAlerts$.outboundSchema = UsageAlerts$outboundSchema;
})(UsageAlerts$ || (UsageAlerts$ = {}));
export function usageAlertsToJSON(usageAlerts) {
    return JSON.stringify(UsageAlerts$outboundSchema.parse(usageAlerts));
}
export function usageAlertsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UsageAlerts$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UsageAlerts' from JSON`);
}
/** @internal */
export const AnalyticsUsage$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const AnalyticsUsage$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AnalyticsUsage$;
(function (AnalyticsUsage$) {
    /** @deprecated use `AnalyticsUsage$inboundSchema` instead. */
    AnalyticsUsage$.inboundSchema = AnalyticsUsage$inboundSchema;
    /** @deprecated use `AnalyticsUsage$outboundSchema` instead. */
    AnalyticsUsage$.outboundSchema = AnalyticsUsage$outboundSchema;
})(AnalyticsUsage$ || (AnalyticsUsage$ = {}));
export function analyticsUsageToJSON(analyticsUsage) {
    return JSON.stringify(AnalyticsUsage$outboundSchema.parse(analyticsUsage));
}
export function analyticsUsageFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AnalyticsUsage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AnalyticsUsage' from JSON`);
}
/** @internal */
export const Artifacts$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const Artifacts$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Artifacts$;
(function (Artifacts$) {
    /** @deprecated use `Artifacts$inboundSchema` instead. */
    Artifacts$.inboundSchema = Artifacts$inboundSchema;
    /** @deprecated use `Artifacts$outboundSchema` instead. */
    Artifacts$.outboundSchema = Artifacts$outboundSchema;
})(Artifacts$ || (Artifacts$ = {}));
export function artifactsToJSON(artifacts) {
    return JSON.stringify(Artifacts$outboundSchema.parse(artifacts));
}
export function artifactsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Artifacts$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Artifacts' from JSON`);
}
/** @internal */
export const Bandwidth$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const Bandwidth$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Bandwidth$;
(function (Bandwidth$) {
    /** @deprecated use `Bandwidth$inboundSchema` instead. */
    Bandwidth$.inboundSchema = Bandwidth$inboundSchema;
    /** @deprecated use `Bandwidth$outboundSchema` instead. */
    Bandwidth$.outboundSchema = Bandwidth$outboundSchema;
})(Bandwidth$ || (Bandwidth$ = {}));
export function bandwidthToJSON(bandwidth) {
    return JSON.stringify(Bandwidth$outboundSchema.parse(bandwidth));
}
export function bandwidthFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Bandwidth$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Bandwidth' from JSON`);
}
/** @internal */
export const BlobTotalAdvancedRequests$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const BlobTotalAdvancedRequests$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BlobTotalAdvancedRequests$;
(function (BlobTotalAdvancedRequests$) {
    /** @deprecated use `BlobTotalAdvancedRequests$inboundSchema` instead. */
    BlobTotalAdvancedRequests$.inboundSchema = BlobTotalAdvancedRequests$inboundSchema;
    /** @deprecated use `BlobTotalAdvancedRequests$outboundSchema` instead. */
    BlobTotalAdvancedRequests$.outboundSchema = BlobTotalAdvancedRequests$outboundSchema;
})(BlobTotalAdvancedRequests$ || (BlobTotalAdvancedRequests$ = {}));
export function blobTotalAdvancedRequestsToJSON(blobTotalAdvancedRequests) {
    return JSON.stringify(BlobTotalAdvancedRequests$outboundSchema.parse(blobTotalAdvancedRequests));
}
export function blobTotalAdvancedRequestsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BlobTotalAdvancedRequests$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BlobTotalAdvancedRequests' from JSON`);
}
/** @internal */
export const BlobTotalAvgSizeInBytes$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const BlobTotalAvgSizeInBytes$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BlobTotalAvgSizeInBytes$;
(function (BlobTotalAvgSizeInBytes$) {
    /** @deprecated use `BlobTotalAvgSizeInBytes$inboundSchema` instead. */
    BlobTotalAvgSizeInBytes$.inboundSchema = BlobTotalAvgSizeInBytes$inboundSchema;
    /** @deprecated use `BlobTotalAvgSizeInBytes$outboundSchema` instead. */
    BlobTotalAvgSizeInBytes$.outboundSchema = BlobTotalAvgSizeInBytes$outboundSchema;
})(BlobTotalAvgSizeInBytes$ || (BlobTotalAvgSizeInBytes$ = {}));
export function blobTotalAvgSizeInBytesToJSON(blobTotalAvgSizeInBytes) {
    return JSON.stringify(BlobTotalAvgSizeInBytes$outboundSchema.parse(blobTotalAvgSizeInBytes));
}
export function blobTotalAvgSizeInBytesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BlobTotalAvgSizeInBytes$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BlobTotalAvgSizeInBytes' from JSON`);
}
/** @internal */
export const BlobTotalGetResponseObjectSizeInBytes$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const BlobTotalGetResponseObjectSizeInBytes$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BlobTotalGetResponseObjectSizeInBytes$;
(function (BlobTotalGetResponseObjectSizeInBytes$) {
    /** @deprecated use `BlobTotalGetResponseObjectSizeInBytes$inboundSchema` instead. */
    BlobTotalGetResponseObjectSizeInBytes$.inboundSchema = BlobTotalGetResponseObjectSizeInBytes$inboundSchema;
    /** @deprecated use `BlobTotalGetResponseObjectSizeInBytes$outboundSchema` instead. */
    BlobTotalGetResponseObjectSizeInBytes$.outboundSchema = BlobTotalGetResponseObjectSizeInBytes$outboundSchema;
})(BlobTotalGetResponseObjectSizeInBytes$ || (BlobTotalGetResponseObjectSizeInBytes$ = {}));
export function blobTotalGetResponseObjectSizeInBytesToJSON(blobTotalGetResponseObjectSizeInBytes) {
    return JSON.stringify(BlobTotalGetResponseObjectSizeInBytes$outboundSchema.parse(blobTotalGetResponseObjectSizeInBytes));
}
export function blobTotalGetResponseObjectSizeInBytesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BlobTotalGetResponseObjectSizeInBytes$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BlobTotalGetResponseObjectSizeInBytes' from JSON`);
}
/** @internal */
export const BlobTotalSimpleRequests$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const BlobTotalSimpleRequests$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BlobTotalSimpleRequests$;
(function (BlobTotalSimpleRequests$) {
    /** @deprecated use `BlobTotalSimpleRequests$inboundSchema` instead. */
    BlobTotalSimpleRequests$.inboundSchema = BlobTotalSimpleRequests$inboundSchema;
    /** @deprecated use `BlobTotalSimpleRequests$outboundSchema` instead. */
    BlobTotalSimpleRequests$.outboundSchema = BlobTotalSimpleRequests$outboundSchema;
})(BlobTotalSimpleRequests$ || (BlobTotalSimpleRequests$ = {}));
export function blobTotalSimpleRequestsToJSON(blobTotalSimpleRequests) {
    return JSON.stringify(BlobTotalSimpleRequests$outboundSchema.parse(blobTotalSimpleRequests));
}
export function blobTotalSimpleRequestsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BlobTotalSimpleRequests$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BlobTotalSimpleRequests' from JSON`);
}
/** @internal */
export const ConnectDataTransfer$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const ConnectDataTransfer$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ConnectDataTransfer$;
(function (ConnectDataTransfer$) {
    /** @deprecated use `ConnectDataTransfer$inboundSchema` instead. */
    ConnectDataTransfer$.inboundSchema = ConnectDataTransfer$inboundSchema;
    /** @deprecated use `ConnectDataTransfer$outboundSchema` instead. */
    ConnectDataTransfer$.outboundSchema = ConnectDataTransfer$outboundSchema;
})(ConnectDataTransfer$ || (ConnectDataTransfer$ = {}));
export function connectDataTransferToJSON(connectDataTransfer) {
    return JSON.stringify(ConnectDataTransfer$outboundSchema.parse(connectDataTransfer));
}
export function connectDataTransferFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ConnectDataTransfer$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ConnectDataTransfer' from JSON`);
}
/** @internal */
export const DataCacheRead$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const DataCacheRead$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DataCacheRead$;
(function (DataCacheRead$) {
    /** @deprecated use `DataCacheRead$inboundSchema` instead. */
    DataCacheRead$.inboundSchema = DataCacheRead$inboundSchema;
    /** @deprecated use `DataCacheRead$outboundSchema` instead. */
    DataCacheRead$.outboundSchema = DataCacheRead$outboundSchema;
})(DataCacheRead$ || (DataCacheRead$ = {}));
export function dataCacheReadToJSON(dataCacheRead) {
    return JSON.stringify(DataCacheRead$outboundSchema.parse(dataCacheRead));
}
export function dataCacheReadFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DataCacheRead$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DataCacheRead' from JSON`);
}
/** @internal */
export const DataCacheWrite$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const DataCacheWrite$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DataCacheWrite$;
(function (DataCacheWrite$) {
    /** @deprecated use `DataCacheWrite$inboundSchema` instead. */
    DataCacheWrite$.inboundSchema = DataCacheWrite$inboundSchema;
    /** @deprecated use `DataCacheWrite$outboundSchema` instead. */
    DataCacheWrite$.outboundSchema = DataCacheWrite$outboundSchema;
})(DataCacheWrite$ || (DataCacheWrite$ = {}));
export function dataCacheWriteToJSON(dataCacheWrite) {
    return JSON.stringify(DataCacheWrite$outboundSchema.parse(dataCacheWrite));
}
export function dataCacheWriteFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DataCacheWrite$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DataCacheWrite' from JSON`);
}
/** @internal */
export const EdgeConfigRead$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const EdgeConfigRead$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EdgeConfigRead$;
(function (EdgeConfigRead$) {
    /** @deprecated use `EdgeConfigRead$inboundSchema` instead. */
    EdgeConfigRead$.inboundSchema = EdgeConfigRead$inboundSchema;
    /** @deprecated use `EdgeConfigRead$outboundSchema` instead. */
    EdgeConfigRead$.outboundSchema = EdgeConfigRead$outboundSchema;
})(EdgeConfigRead$ || (EdgeConfigRead$ = {}));
export function edgeConfigReadToJSON(edgeConfigRead) {
    return JSON.stringify(EdgeConfigRead$outboundSchema.parse(edgeConfigRead));
}
export function edgeConfigReadFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EdgeConfigRead$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EdgeConfigRead' from JSON`);
}
/** @internal */
export const EdgeConfigWrite$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const EdgeConfigWrite$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EdgeConfigWrite$;
(function (EdgeConfigWrite$) {
    /** @deprecated use `EdgeConfigWrite$inboundSchema` instead. */
    EdgeConfigWrite$.inboundSchema = EdgeConfigWrite$inboundSchema;
    /** @deprecated use `EdgeConfigWrite$outboundSchema` instead. */
    EdgeConfigWrite$.outboundSchema = EdgeConfigWrite$outboundSchema;
})(EdgeConfigWrite$ || (EdgeConfigWrite$ = {}));
export function edgeConfigWriteToJSON(edgeConfigWrite) {
    return JSON.stringify(EdgeConfigWrite$outboundSchema.parse(edgeConfigWrite));
}
export function edgeConfigWriteFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EdgeConfigWrite$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EdgeConfigWrite' from JSON`);
}
/** @internal */
export const EdgeFunctionExecutionUnits$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const EdgeFunctionExecutionUnits$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EdgeFunctionExecutionUnits$;
(function (EdgeFunctionExecutionUnits$) {
    /** @deprecated use `EdgeFunctionExecutionUnits$inboundSchema` instead. */
    EdgeFunctionExecutionUnits$.inboundSchema = EdgeFunctionExecutionUnits$inboundSchema;
    /** @deprecated use `EdgeFunctionExecutionUnits$outboundSchema` instead. */
    EdgeFunctionExecutionUnits$.outboundSchema = EdgeFunctionExecutionUnits$outboundSchema;
})(EdgeFunctionExecutionUnits$ || (EdgeFunctionExecutionUnits$ = {}));
export function edgeFunctionExecutionUnitsToJSON(edgeFunctionExecutionUnits) {
    return JSON.stringify(EdgeFunctionExecutionUnits$outboundSchema.parse(edgeFunctionExecutionUnits));
}
export function edgeFunctionExecutionUnitsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EdgeFunctionExecutionUnits$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EdgeFunctionExecutionUnits' from JSON`);
}
/** @internal */
export const EdgeMiddlewareInvocations$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const EdgeMiddlewareInvocations$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EdgeMiddlewareInvocations$;
(function (EdgeMiddlewareInvocations$) {
    /** @deprecated use `EdgeMiddlewareInvocations$inboundSchema` instead. */
    EdgeMiddlewareInvocations$.inboundSchema = EdgeMiddlewareInvocations$inboundSchema;
    /** @deprecated use `EdgeMiddlewareInvocations$outboundSchema` instead. */
    EdgeMiddlewareInvocations$.outboundSchema = EdgeMiddlewareInvocations$outboundSchema;
})(EdgeMiddlewareInvocations$ || (EdgeMiddlewareInvocations$ = {}));
export function edgeMiddlewareInvocationsToJSON(edgeMiddlewareInvocations) {
    return JSON.stringify(EdgeMiddlewareInvocations$outboundSchema.parse(edgeMiddlewareInvocations));
}
export function edgeMiddlewareInvocationsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EdgeMiddlewareInvocations$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EdgeMiddlewareInvocations' from JSON`);
}
/** @internal */
export const EdgeRequestAdditionalCpuDuration$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const EdgeRequestAdditionalCpuDuration$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EdgeRequestAdditionalCpuDuration$;
(function (EdgeRequestAdditionalCpuDuration$) {
    /** @deprecated use `EdgeRequestAdditionalCpuDuration$inboundSchema` instead. */
    EdgeRequestAdditionalCpuDuration$.inboundSchema = EdgeRequestAdditionalCpuDuration$inboundSchema;
    /** @deprecated use `EdgeRequestAdditionalCpuDuration$outboundSchema` instead. */
    EdgeRequestAdditionalCpuDuration$.outboundSchema = EdgeRequestAdditionalCpuDuration$outboundSchema;
})(EdgeRequestAdditionalCpuDuration$ || (EdgeRequestAdditionalCpuDuration$ = {}));
export function edgeRequestAdditionalCpuDurationToJSON(edgeRequestAdditionalCpuDuration) {
    return JSON.stringify(EdgeRequestAdditionalCpuDuration$outboundSchema.parse(edgeRequestAdditionalCpuDuration));
}
export function edgeRequestAdditionalCpuDurationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EdgeRequestAdditionalCpuDuration$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EdgeRequestAdditionalCpuDuration' from JSON`);
}
/** @internal */
export const EdgeRequest$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const EdgeRequest$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EdgeRequest$;
(function (EdgeRequest$) {
    /** @deprecated use `EdgeRequest$inboundSchema` instead. */
    EdgeRequest$.inboundSchema = EdgeRequest$inboundSchema;
    /** @deprecated use `EdgeRequest$outboundSchema` instead. */
    EdgeRequest$.outboundSchema = EdgeRequest$outboundSchema;
})(EdgeRequest$ || (EdgeRequest$ = {}));
export function edgeRequestToJSON(edgeRequest) {
    return JSON.stringify(EdgeRequest$outboundSchema.parse(edgeRequest));
}
export function edgeRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EdgeRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EdgeRequest' from JSON`);
}
/** @internal */
export const ElasticConcurrencyBuildSlots$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const ElasticConcurrencyBuildSlots$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ElasticConcurrencyBuildSlots$;
(function (ElasticConcurrencyBuildSlots$) {
    /** @deprecated use `ElasticConcurrencyBuildSlots$inboundSchema` instead. */
    ElasticConcurrencyBuildSlots$.inboundSchema = ElasticConcurrencyBuildSlots$inboundSchema;
    /** @deprecated use `ElasticConcurrencyBuildSlots$outboundSchema` instead. */
    ElasticConcurrencyBuildSlots$.outboundSchema = ElasticConcurrencyBuildSlots$outboundSchema;
})(ElasticConcurrencyBuildSlots$ || (ElasticConcurrencyBuildSlots$ = {}));
export function elasticConcurrencyBuildSlotsToJSON(elasticConcurrencyBuildSlots) {
    return JSON.stringify(ElasticConcurrencyBuildSlots$outboundSchema.parse(elasticConcurrencyBuildSlots));
}
export function elasticConcurrencyBuildSlotsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ElasticConcurrencyBuildSlots$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ElasticConcurrencyBuildSlots' from JSON`);
}
/** @internal */
export const FastDataTransfer$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const FastDataTransfer$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FastDataTransfer$;
(function (FastDataTransfer$) {
    /** @deprecated use `FastDataTransfer$inboundSchema` instead. */
    FastDataTransfer$.inboundSchema = FastDataTransfer$inboundSchema;
    /** @deprecated use `FastDataTransfer$outboundSchema` instead. */
    FastDataTransfer$.outboundSchema = FastDataTransfer$outboundSchema;
})(FastDataTransfer$ || (FastDataTransfer$ = {}));
export function fastDataTransferToJSON(fastDataTransfer) {
    return JSON.stringify(FastDataTransfer$outboundSchema.parse(fastDataTransfer));
}
export function fastDataTransferFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FastDataTransfer$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FastDataTransfer' from JSON`);
}
/** @internal */
export const FastOriginTransfer$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const FastOriginTransfer$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FastOriginTransfer$;
(function (FastOriginTransfer$) {
    /** @deprecated use `FastOriginTransfer$inboundSchema` instead. */
    FastOriginTransfer$.inboundSchema = FastOriginTransfer$inboundSchema;
    /** @deprecated use `FastOriginTransfer$outboundSchema` instead. */
    FastOriginTransfer$.outboundSchema = FastOriginTransfer$outboundSchema;
})(FastOriginTransfer$ || (FastOriginTransfer$ = {}));
export function fastOriginTransferToJSON(fastOriginTransfer) {
    return JSON.stringify(FastOriginTransfer$outboundSchema.parse(fastOriginTransfer));
}
export function fastOriginTransferFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FastOriginTransfer$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FastOriginTransfer' from JSON`);
}
/** @internal */
export const FluidCpuDuration$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const FluidCpuDuration$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FluidCpuDuration$;
(function (FluidCpuDuration$) {
    /** @deprecated use `FluidCpuDuration$inboundSchema` instead. */
    FluidCpuDuration$.inboundSchema = FluidCpuDuration$inboundSchema;
    /** @deprecated use `FluidCpuDuration$outboundSchema` instead. */
    FluidCpuDuration$.outboundSchema = FluidCpuDuration$outboundSchema;
})(FluidCpuDuration$ || (FluidCpuDuration$ = {}));
export function fluidCpuDurationToJSON(fluidCpuDuration) {
    return JSON.stringify(FluidCpuDuration$outboundSchema.parse(fluidCpuDuration));
}
export function fluidCpuDurationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FluidCpuDuration$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FluidCpuDuration' from JSON`);
}
/** @internal */
export const FluidDuration$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const FluidDuration$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FluidDuration$;
(function (FluidDuration$) {
    /** @deprecated use `FluidDuration$inboundSchema` instead. */
    FluidDuration$.inboundSchema = FluidDuration$inboundSchema;
    /** @deprecated use `FluidDuration$outboundSchema` instead. */
    FluidDuration$.outboundSchema = FluidDuration$outboundSchema;
})(FluidDuration$ || (FluidDuration$ = {}));
export function fluidDurationToJSON(fluidDuration) {
    return JSON.stringify(FluidDuration$outboundSchema.parse(fluidDuration));
}
export function fluidDurationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FluidDuration$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FluidDuration' from JSON`);
}
/** @internal */
export const FunctionDuration$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const FunctionDuration$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FunctionDuration$;
(function (FunctionDuration$) {
    /** @deprecated use `FunctionDuration$inboundSchema` instead. */
    FunctionDuration$.inboundSchema = FunctionDuration$inboundSchema;
    /** @deprecated use `FunctionDuration$outboundSchema` instead. */
    FunctionDuration$.outboundSchema = FunctionDuration$outboundSchema;
})(FunctionDuration$ || (FunctionDuration$ = {}));
export function functionDurationToJSON(functionDuration) {
    return JSON.stringify(FunctionDuration$outboundSchema.parse(functionDuration));
}
export function functionDurationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FunctionDuration$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FunctionDuration' from JSON`);
}
/** @internal */
export const FunctionInvocation$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const FunctionInvocation$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FunctionInvocation$;
(function (FunctionInvocation$) {
    /** @deprecated use `FunctionInvocation$inboundSchema` instead. */
    FunctionInvocation$.inboundSchema = FunctionInvocation$inboundSchema;
    /** @deprecated use `FunctionInvocation$outboundSchema` instead. */
    FunctionInvocation$.outboundSchema = FunctionInvocation$outboundSchema;
})(FunctionInvocation$ || (FunctionInvocation$ = {}));
export function functionInvocationToJSON(functionInvocation) {
    return JSON.stringify(FunctionInvocation$outboundSchema.parse(functionInvocation));
}
export function functionInvocationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FunctionInvocation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FunctionInvocation' from JSON`);
}
/** @internal */
export const ImageOptimizationCacheRead$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const ImageOptimizationCacheRead$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ImageOptimizationCacheRead$;
(function (ImageOptimizationCacheRead$) {
    /** @deprecated use `ImageOptimizationCacheRead$inboundSchema` instead. */
    ImageOptimizationCacheRead$.inboundSchema = ImageOptimizationCacheRead$inboundSchema;
    /** @deprecated use `ImageOptimizationCacheRead$outboundSchema` instead. */
    ImageOptimizationCacheRead$.outboundSchema = ImageOptimizationCacheRead$outboundSchema;
})(ImageOptimizationCacheRead$ || (ImageOptimizationCacheRead$ = {}));
export function imageOptimizationCacheReadToJSON(imageOptimizationCacheRead) {
    return JSON.stringify(ImageOptimizationCacheRead$outboundSchema.parse(imageOptimizationCacheRead));
}
export function imageOptimizationCacheReadFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ImageOptimizationCacheRead$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ImageOptimizationCacheRead' from JSON`);
}
/** @internal */
export const ImageOptimizationCacheWrite$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const ImageOptimizationCacheWrite$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ImageOptimizationCacheWrite$;
(function (ImageOptimizationCacheWrite$) {
    /** @deprecated use `ImageOptimizationCacheWrite$inboundSchema` instead. */
    ImageOptimizationCacheWrite$.inboundSchema = ImageOptimizationCacheWrite$inboundSchema;
    /** @deprecated use `ImageOptimizationCacheWrite$outboundSchema` instead. */
    ImageOptimizationCacheWrite$.outboundSchema = ImageOptimizationCacheWrite$outboundSchema;
})(ImageOptimizationCacheWrite$ || (ImageOptimizationCacheWrite$ = {}));
export function imageOptimizationCacheWriteToJSON(imageOptimizationCacheWrite) {
    return JSON.stringify(ImageOptimizationCacheWrite$outboundSchema.parse(imageOptimizationCacheWrite));
}
export function imageOptimizationCacheWriteFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ImageOptimizationCacheWrite$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ImageOptimizationCacheWrite' from JSON`);
}
/** @internal */
export const ImageOptimizationTransformation$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const ImageOptimizationTransformation$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ImageOptimizationTransformation$;
(function (ImageOptimizationTransformation$) {
    /** @deprecated use `ImageOptimizationTransformation$inboundSchema` instead. */
    ImageOptimizationTransformation$.inboundSchema = ImageOptimizationTransformation$inboundSchema;
    /** @deprecated use `ImageOptimizationTransformation$outboundSchema` instead. */
    ImageOptimizationTransformation$.outboundSchema = ImageOptimizationTransformation$outboundSchema;
})(ImageOptimizationTransformation$ || (ImageOptimizationTransformation$ = {}));
export function imageOptimizationTransformationToJSON(imageOptimizationTransformation) {
    return JSON.stringify(ImageOptimizationTransformation$outboundSchema.parse(imageOptimizationTransformation));
}
export function imageOptimizationTransformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ImageOptimizationTransformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ImageOptimizationTransformation' from JSON`);
}
/** @internal */
export const LogDrainsVolume$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const LogDrainsVolume$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LogDrainsVolume$;
(function (LogDrainsVolume$) {
    /** @deprecated use `LogDrainsVolume$inboundSchema` instead. */
    LogDrainsVolume$.inboundSchema = LogDrainsVolume$inboundSchema;
    /** @deprecated use `LogDrainsVolume$outboundSchema` instead. */
    LogDrainsVolume$.outboundSchema = LogDrainsVolume$outboundSchema;
})(LogDrainsVolume$ || (LogDrainsVolume$ = {}));
export function logDrainsVolumeToJSON(logDrainsVolume) {
    return JSON.stringify(LogDrainsVolume$outboundSchema.parse(logDrainsVolume));
}
export function logDrainsVolumeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LogDrainsVolume$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LogDrainsVolume' from JSON`);
}
/** @internal */
export const MonitoringMetric$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const MonitoringMetric$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MonitoringMetric$;
(function (MonitoringMetric$) {
    /** @deprecated use `MonitoringMetric$inboundSchema` instead. */
    MonitoringMetric$.inboundSchema = MonitoringMetric$inboundSchema;
    /** @deprecated use `MonitoringMetric$outboundSchema` instead. */
    MonitoringMetric$.outboundSchema = MonitoringMetric$outboundSchema;
})(MonitoringMetric$ || (MonitoringMetric$ = {}));
export function monitoringMetricToJSON(monitoringMetric) {
    return JSON.stringify(MonitoringMetric$outboundSchema.parse(monitoringMetric));
}
export function monitoringMetricFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MonitoringMetric$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MonitoringMetric' from JSON`);
}
/** @internal */
export const BlobDataTransfer$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const BlobDataTransfer$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BlobDataTransfer$;
(function (BlobDataTransfer$) {
    /** @deprecated use `BlobDataTransfer$inboundSchema` instead. */
    BlobDataTransfer$.inboundSchema = BlobDataTransfer$inboundSchema;
    /** @deprecated use `BlobDataTransfer$outboundSchema` instead. */
    BlobDataTransfer$.outboundSchema = BlobDataTransfer$outboundSchema;
})(BlobDataTransfer$ || (BlobDataTransfer$ = {}));
export function blobDataTransferToJSON(blobDataTransfer) {
    return JSON.stringify(BlobDataTransfer$outboundSchema.parse(blobDataTransfer));
}
export function blobDataTransferFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BlobDataTransfer$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BlobDataTransfer' from JSON`);
}
/** @internal */
export const ObservabilityEvent$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const ObservabilityEvent$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ObservabilityEvent$;
(function (ObservabilityEvent$) {
    /** @deprecated use `ObservabilityEvent$inboundSchema` instead. */
    ObservabilityEvent$.inboundSchema = ObservabilityEvent$inboundSchema;
    /** @deprecated use `ObservabilityEvent$outboundSchema` instead. */
    ObservabilityEvent$.outboundSchema = ObservabilityEvent$outboundSchema;
})(ObservabilityEvent$ || (ObservabilityEvent$ = {}));
export function observabilityEventToJSON(observabilityEvent) {
    return JSON.stringify(ObservabilityEvent$outboundSchema.parse(observabilityEvent));
}
export function observabilityEventFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ObservabilityEvent$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ObservabilityEvent' from JSON`);
}
/** @internal */
export const OnDemandConcurrencyMinutes$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const OnDemandConcurrencyMinutes$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OnDemandConcurrencyMinutes$;
(function (OnDemandConcurrencyMinutes$) {
    /** @deprecated use `OnDemandConcurrencyMinutes$inboundSchema` instead. */
    OnDemandConcurrencyMinutes$.inboundSchema = OnDemandConcurrencyMinutes$inboundSchema;
    /** @deprecated use `OnDemandConcurrencyMinutes$outboundSchema` instead. */
    OnDemandConcurrencyMinutes$.outboundSchema = OnDemandConcurrencyMinutes$outboundSchema;
})(OnDemandConcurrencyMinutes$ || (OnDemandConcurrencyMinutes$ = {}));
export function onDemandConcurrencyMinutesToJSON(onDemandConcurrencyMinutes) {
    return JSON.stringify(OnDemandConcurrencyMinutes$outboundSchema.parse(onDemandConcurrencyMinutes));
}
export function onDemandConcurrencyMinutesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OnDemandConcurrencyMinutes$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OnDemandConcurrencyMinutes' from JSON`);
}
/** @internal */
export const RuntimeCacheRead$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const RuntimeCacheRead$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RuntimeCacheRead$;
(function (RuntimeCacheRead$) {
    /** @deprecated use `RuntimeCacheRead$inboundSchema` instead. */
    RuntimeCacheRead$.inboundSchema = RuntimeCacheRead$inboundSchema;
    /** @deprecated use `RuntimeCacheRead$outboundSchema` instead. */
    RuntimeCacheRead$.outboundSchema = RuntimeCacheRead$outboundSchema;
})(RuntimeCacheRead$ || (RuntimeCacheRead$ = {}));
export function runtimeCacheReadToJSON(runtimeCacheRead) {
    return JSON.stringify(RuntimeCacheRead$outboundSchema.parse(runtimeCacheRead));
}
export function runtimeCacheReadFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RuntimeCacheRead$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RuntimeCacheRead' from JSON`);
}
/** @internal */
export const RuntimeCacheWrite$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const RuntimeCacheWrite$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RuntimeCacheWrite$;
(function (RuntimeCacheWrite$) {
    /** @deprecated use `RuntimeCacheWrite$inboundSchema` instead. */
    RuntimeCacheWrite$.inboundSchema = RuntimeCacheWrite$inboundSchema;
    /** @deprecated use `RuntimeCacheWrite$outboundSchema` instead. */
    RuntimeCacheWrite$.outboundSchema = RuntimeCacheWrite$outboundSchema;
})(RuntimeCacheWrite$ || (RuntimeCacheWrite$ = {}));
export function runtimeCacheWriteToJSON(runtimeCacheWrite) {
    return JSON.stringify(RuntimeCacheWrite$outboundSchema.parse(runtimeCacheWrite));
}
export function runtimeCacheWriteFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RuntimeCacheWrite$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RuntimeCacheWrite' from JSON`);
}
/** @internal */
export const ServerlessFunctionExecution$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const ServerlessFunctionExecution$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ServerlessFunctionExecution$;
(function (ServerlessFunctionExecution$) {
    /** @deprecated use `ServerlessFunctionExecution$inboundSchema` instead. */
    ServerlessFunctionExecution$.inboundSchema = ServerlessFunctionExecution$inboundSchema;
    /** @deprecated use `ServerlessFunctionExecution$outboundSchema` instead. */
    ServerlessFunctionExecution$.outboundSchema = ServerlessFunctionExecution$outboundSchema;
})(ServerlessFunctionExecution$ || (ServerlessFunctionExecution$ = {}));
export function serverlessFunctionExecutionToJSON(serverlessFunctionExecution) {
    return JSON.stringify(ServerlessFunctionExecution$outboundSchema.parse(serverlessFunctionExecution));
}
export function serverlessFunctionExecutionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ServerlessFunctionExecution$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ServerlessFunctionExecution' from JSON`);
}
/** @internal */
export const SourceImages$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const SourceImages$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SourceImages$;
(function (SourceImages$) {
    /** @deprecated use `SourceImages$inboundSchema` instead. */
    SourceImages$.inboundSchema = SourceImages$inboundSchema;
    /** @deprecated use `SourceImages$outboundSchema` instead. */
    SourceImages$.outboundSchema = SourceImages$outboundSchema;
})(SourceImages$ || (SourceImages$ = {}));
export function sourceImagesToJSON(sourceImages) {
    return JSON.stringify(SourceImages$outboundSchema.parse(sourceImages));
}
export function sourceImagesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SourceImages$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SourceImages' from JSON`);
}
/** @internal */
export const WafOwaspExcessBytes$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const WafOwaspExcessBytes$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WafOwaspExcessBytes$;
(function (WafOwaspExcessBytes$) {
    /** @deprecated use `WafOwaspExcessBytes$inboundSchema` instead. */
    WafOwaspExcessBytes$.inboundSchema = WafOwaspExcessBytes$inboundSchema;
    /** @deprecated use `WafOwaspExcessBytes$outboundSchema` instead. */
    WafOwaspExcessBytes$.outboundSchema = WafOwaspExcessBytes$outboundSchema;
})(WafOwaspExcessBytes$ || (WafOwaspExcessBytes$ = {}));
export function wafOwaspExcessBytesToJSON(wafOwaspExcessBytes) {
    return JSON.stringify(WafOwaspExcessBytes$outboundSchema.parse(wafOwaspExcessBytes));
}
export function wafOwaspExcessBytesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WafOwaspExcessBytes$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WafOwaspExcessBytes' from JSON`);
}
/** @internal */
export const WafOwaspRequests$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const WafOwaspRequests$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WafOwaspRequests$;
(function (WafOwaspRequests$) {
    /** @deprecated use `WafOwaspRequests$inboundSchema` instead. */
    WafOwaspRequests$.inboundSchema = WafOwaspRequests$inboundSchema;
    /** @deprecated use `WafOwaspRequests$outboundSchema` instead. */
    WafOwaspRequests$.outboundSchema = WafOwaspRequests$outboundSchema;
})(WafOwaspRequests$ || (WafOwaspRequests$ = {}));
export function wafOwaspRequestsToJSON(wafOwaspRequests) {
    return JSON.stringify(WafOwaspRequests$outboundSchema.parse(wafOwaspRequests));
}
export function wafOwaspRequestsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WafOwaspRequests$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WafOwaspRequests' from JSON`);
}
/** @internal */
export const WafRateLimitRequest$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const WafRateLimitRequest$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WafRateLimitRequest$;
(function (WafRateLimitRequest$) {
    /** @deprecated use `WafRateLimitRequest$inboundSchema` instead. */
    WafRateLimitRequest$.inboundSchema = WafRateLimitRequest$inboundSchema;
    /** @deprecated use `WafRateLimitRequest$outboundSchema` instead. */
    WafRateLimitRequest$.outboundSchema = WafRateLimitRequest$outboundSchema;
})(WafRateLimitRequest$ || (WafRateLimitRequest$ = {}));
export function wafRateLimitRequestToJSON(wafRateLimitRequest) {
    return JSON.stringify(WafRateLimitRequest$outboundSchema.parse(wafRateLimitRequest));
}
export function wafRateLimitRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WafRateLimitRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WafRateLimitRequest' from JSON`);
}
/** @internal */
export const WebAnalyticsEvent$inboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/** @internal */
export const WebAnalyticsEvent$outboundSchema = z.object({
    currentThreshold: z.number(),
    warningAt: z.nullable(z.number()).optional(),
    blockedAt: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WebAnalyticsEvent$;
(function (WebAnalyticsEvent$) {
    /** @deprecated use `WebAnalyticsEvent$inboundSchema` instead. */
    WebAnalyticsEvent$.inboundSchema = WebAnalyticsEvent$inboundSchema;
    /** @deprecated use `WebAnalyticsEvent$outboundSchema` instead. */
    WebAnalyticsEvent$.outboundSchema = WebAnalyticsEvent$outboundSchema;
})(WebAnalyticsEvent$ || (WebAnalyticsEvent$ = {}));
export function webAnalyticsEventToJSON(webAnalyticsEvent) {
    return JSON.stringify(WebAnalyticsEvent$outboundSchema.parse(webAnalyticsEvent));
}
export function webAnalyticsEventFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WebAnalyticsEvent$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WebAnalyticsEvent' from JSON`);
}
/** @internal */
export const OverageUsageAlerts$inboundSchema = z.object({
    analyticsUsage: z.lazy(() => AnalyticsUsage$inboundSchema).optional(),
    artifacts: z.lazy(() => Artifacts$inboundSchema).optional(),
    bandwidth: z.lazy(() => Bandwidth$inboundSchema).optional(),
    blobTotalAdvancedRequests: z.lazy(() => BlobTotalAdvancedRequests$inboundSchema).optional(),
    blobTotalAvgSizeInBytes: z.lazy(() => BlobTotalAvgSizeInBytes$inboundSchema)
        .optional(),
    blobTotalGetResponseObjectSizeInBytes: z.lazy(() => BlobTotalGetResponseObjectSizeInBytes$inboundSchema).optional(),
    blobTotalSimpleRequests: z.lazy(() => BlobTotalSimpleRequests$inboundSchema)
        .optional(),
    connectDataTransfer: z.lazy(() => ConnectDataTransfer$inboundSchema)
        .optional(),
    dataCacheRead: z.lazy(() => DataCacheRead$inboundSchema).optional(),
    dataCacheWrite: z.lazy(() => DataCacheWrite$inboundSchema).optional(),
    edgeConfigRead: z.lazy(() => EdgeConfigRead$inboundSchema).optional(),
    edgeConfigWrite: z.lazy(() => EdgeConfigWrite$inboundSchema).optional(),
    edgeFunctionExecutionUnits: z.lazy(() => EdgeFunctionExecutionUnits$inboundSchema).optional(),
    edgeMiddlewareInvocations: z.lazy(() => EdgeMiddlewareInvocations$inboundSchema).optional(),
    edgeRequestAdditionalCpuDuration: z.lazy(() => EdgeRequestAdditionalCpuDuration$inboundSchema).optional(),
    edgeRequest: z.lazy(() => EdgeRequest$inboundSchema).optional(),
    elasticConcurrencyBuildSlots: z.lazy(() => ElasticConcurrencyBuildSlots$inboundSchema).optional(),
    fastDataTransfer: z.lazy(() => FastDataTransfer$inboundSchema).optional(),
    fastOriginTransfer: z.lazy(() => FastOriginTransfer$inboundSchema).optional(),
    fluidCpuDuration: z.lazy(() => FluidCpuDuration$inboundSchema).optional(),
    fluidDuration: z.lazy(() => FluidDuration$inboundSchema).optional(),
    functionDuration: z.lazy(() => FunctionDuration$inboundSchema).optional(),
    functionInvocation: z.lazy(() => FunctionInvocation$inboundSchema).optional(),
    imageOptimizationCacheRead: z.lazy(() => ImageOptimizationCacheRead$inboundSchema).optional(),
    imageOptimizationCacheWrite: z.lazy(() => ImageOptimizationCacheWrite$inboundSchema).optional(),
    imageOptimizationTransformation: z.lazy(() => ImageOptimizationTransformation$inboundSchema).optional(),
    logDrainsVolume: z.lazy(() => LogDrainsVolume$inboundSchema).optional(),
    monitoringMetric: z.lazy(() => MonitoringMetric$inboundSchema).optional(),
    blobDataTransfer: z.lazy(() => BlobDataTransfer$inboundSchema).optional(),
    observabilityEvent: z.lazy(() => ObservabilityEvent$inboundSchema).optional(),
    onDemandConcurrencyMinutes: z.lazy(() => OnDemandConcurrencyMinutes$inboundSchema).optional(),
    runtimeCacheRead: z.lazy(() => RuntimeCacheRead$inboundSchema).optional(),
    runtimeCacheWrite: z.lazy(() => RuntimeCacheWrite$inboundSchema).optional(),
    serverlessFunctionExecution: z.lazy(() => ServerlessFunctionExecution$inboundSchema).optional(),
    sourceImages: z.lazy(() => SourceImages$inboundSchema).optional(),
    wafOwaspExcessBytes: z.lazy(() => WafOwaspExcessBytes$inboundSchema)
        .optional(),
    wafOwaspRequests: z.lazy(() => WafOwaspRequests$inboundSchema).optional(),
    wafRateLimitRequest: z.lazy(() => WafRateLimitRequest$inboundSchema)
        .optional(),
    webAnalyticsEvent: z.lazy(() => WebAnalyticsEvent$inboundSchema).optional(),
});
/** @internal */
export const OverageUsageAlerts$outboundSchema = z.object({
    analyticsUsage: z.lazy(() => AnalyticsUsage$outboundSchema).optional(),
    artifacts: z.lazy(() => Artifacts$outboundSchema).optional(),
    bandwidth: z.lazy(() => Bandwidth$outboundSchema).optional(),
    blobTotalAdvancedRequests: z.lazy(() => BlobTotalAdvancedRequests$outboundSchema).optional(),
    blobTotalAvgSizeInBytes: z.lazy(() => BlobTotalAvgSizeInBytes$outboundSchema)
        .optional(),
    blobTotalGetResponseObjectSizeInBytes: z.lazy(() => BlobTotalGetResponseObjectSizeInBytes$outboundSchema).optional(),
    blobTotalSimpleRequests: z.lazy(() => BlobTotalSimpleRequests$outboundSchema)
        .optional(),
    connectDataTransfer: z.lazy(() => ConnectDataTransfer$outboundSchema)
        .optional(),
    dataCacheRead: z.lazy(() => DataCacheRead$outboundSchema).optional(),
    dataCacheWrite: z.lazy(() => DataCacheWrite$outboundSchema).optional(),
    edgeConfigRead: z.lazy(() => EdgeConfigRead$outboundSchema).optional(),
    edgeConfigWrite: z.lazy(() => EdgeConfigWrite$outboundSchema).optional(),
    edgeFunctionExecutionUnits: z.lazy(() => EdgeFunctionExecutionUnits$outboundSchema).optional(),
    edgeMiddlewareInvocations: z.lazy(() => EdgeMiddlewareInvocations$outboundSchema).optional(),
    edgeRequestAdditionalCpuDuration: z.lazy(() => EdgeRequestAdditionalCpuDuration$outboundSchema).optional(),
    edgeRequest: z.lazy(() => EdgeRequest$outboundSchema).optional(),
    elasticConcurrencyBuildSlots: z.lazy(() => ElasticConcurrencyBuildSlots$outboundSchema).optional(),
    fastDataTransfer: z.lazy(() => FastDataTransfer$outboundSchema).optional(),
    fastOriginTransfer: z.lazy(() => FastOriginTransfer$outboundSchema)
        .optional(),
    fluidCpuDuration: z.lazy(() => FluidCpuDuration$outboundSchema).optional(),
    fluidDuration: z.lazy(() => FluidDuration$outboundSchema).optional(),
    functionDuration: z.lazy(() => FunctionDuration$outboundSchema).optional(),
    functionInvocation: z.lazy(() => FunctionInvocation$outboundSchema)
        .optional(),
    imageOptimizationCacheRead: z.lazy(() => ImageOptimizationCacheRead$outboundSchema).optional(),
    imageOptimizationCacheWrite: z.lazy(() => ImageOptimizationCacheWrite$outboundSchema).optional(),
    imageOptimizationTransformation: z.lazy(() => ImageOptimizationTransformation$outboundSchema).optional(),
    logDrainsVolume: z.lazy(() => LogDrainsVolume$outboundSchema).optional(),
    monitoringMetric: z.lazy(() => MonitoringMetric$outboundSchema).optional(),
    blobDataTransfer: z.lazy(() => BlobDataTransfer$outboundSchema).optional(),
    observabilityEvent: z.lazy(() => ObservabilityEvent$outboundSchema)
        .optional(),
    onDemandConcurrencyMinutes: z.lazy(() => OnDemandConcurrencyMinutes$outboundSchema).optional(),
    runtimeCacheRead: z.lazy(() => RuntimeCacheRead$outboundSchema).optional(),
    runtimeCacheWrite: z.lazy(() => RuntimeCacheWrite$outboundSchema).optional(),
    serverlessFunctionExecution: z.lazy(() => ServerlessFunctionExecution$outboundSchema).optional(),
    sourceImages: z.lazy(() => SourceImages$outboundSchema).optional(),
    wafOwaspExcessBytes: z.lazy(() => WafOwaspExcessBytes$outboundSchema)
        .optional(),
    wafOwaspRequests: z.lazy(() => WafOwaspRequests$outboundSchema).optional(),
    wafRateLimitRequest: z.lazy(() => WafRateLimitRequest$outboundSchema)
        .optional(),
    webAnalyticsEvent: z.lazy(() => WebAnalyticsEvent$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OverageUsageAlerts$;
(function (OverageUsageAlerts$) {
    /** @deprecated use `OverageUsageAlerts$inboundSchema` instead. */
    OverageUsageAlerts$.inboundSchema = OverageUsageAlerts$inboundSchema;
    /** @deprecated use `OverageUsageAlerts$outboundSchema` instead. */
    OverageUsageAlerts$.outboundSchema = OverageUsageAlerts$outboundSchema;
})(OverageUsageAlerts$ || (OverageUsageAlerts$ = {}));
export function overageUsageAlertsToJSON(overageUsageAlerts) {
    return JSON.stringify(OverageUsageAlerts$outboundSchema.parse(overageUsageAlerts));
}
export function overageUsageAlertsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OverageUsageAlerts$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OverageUsageAlerts' from JSON`);
}
/** @internal */
export const OverageMetadata$inboundSchema = z.object({
    firstTimeOnDemandNotificationSentAt: z.number().optional(),
    dailyOverageSummaryEmailSentAt: z.number().optional(),
    weeklyOverageSummaryEmailSentAt: z.number().optional(),
    overageSummaryExpiresAt: z.number().optional(),
    increasedOnDemandEmailSentAt: z.number().optional(),
    increasedOnDemandEmailAttemptedAt: z.number().optional(),
});
/** @internal */
export const OverageMetadata$outboundSchema = z.object({
    firstTimeOnDemandNotificationSentAt: z.number().optional(),
    dailyOverageSummaryEmailSentAt: z.number().optional(),
    weeklyOverageSummaryEmailSentAt: z.number().optional(),
    overageSummaryExpiresAt: z.number().optional(),
    increasedOnDemandEmailSentAt: z.number().optional(),
    increasedOnDemandEmailAttemptedAt: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OverageMetadata$;
(function (OverageMetadata$) {
    /** @deprecated use `OverageMetadata$inboundSchema` instead. */
    OverageMetadata$.inboundSchema = OverageMetadata$inboundSchema;
    /** @deprecated use `OverageMetadata$outboundSchema` instead. */
    OverageMetadata$.outboundSchema = OverageMetadata$outboundSchema;
})(OverageMetadata$ || (OverageMetadata$ = {}));
export function overageMetadataToJSON(overageMetadata) {
    return JSON.stringify(OverageMetadata$outboundSchema.parse(overageMetadata));
}
export function overageMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OverageMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OverageMetadata' from JSON`);
}
/** @internal */
export const PayloadEnablePreviewFeedback$inboundSchema = z.nativeEnum(PayloadEnablePreviewFeedback);
/** @internal */
export const PayloadEnablePreviewFeedback$outboundSchema = PayloadEnablePreviewFeedback$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadEnablePreviewFeedback$;
(function (PayloadEnablePreviewFeedback$) {
    /** @deprecated use `PayloadEnablePreviewFeedback$inboundSchema` instead. */
    PayloadEnablePreviewFeedback$.inboundSchema = PayloadEnablePreviewFeedback$inboundSchema;
    /** @deprecated use `PayloadEnablePreviewFeedback$outboundSchema` instead. */
    PayloadEnablePreviewFeedback$.outboundSchema = PayloadEnablePreviewFeedback$outboundSchema;
})(PayloadEnablePreviewFeedback$ || (PayloadEnablePreviewFeedback$ = {}));
/** @internal */
export const BlockReason$inboundSchema = z
    .nativeEnum(BlockReason);
/** @internal */
export const BlockReason$outboundSchema = BlockReason$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BlockReason$;
(function (BlockReason$) {
    /** @deprecated use `BlockReason$inboundSchema` instead. */
    BlockReason$.inboundSchema = BlockReason$inboundSchema;
    /** @deprecated use `BlockReason$outboundSchema` instead. */
    BlockReason$.outboundSchema = BlockReason$outboundSchema;
})(BlockReason$ || (BlockReason$ = {}));
/** @internal */
export const PayloadWebAnalytics$inboundSchema = z.object({
    updatedAt: z.number(),
    blockedFrom: z.number().optional(),
    blockedUntil: z.number().optional(),
    blockReason: BlockReason$inboundSchema,
    graceEmailSentAt: z.number().optional(),
});
/** @internal */
export const PayloadWebAnalytics$outboundSchema = z.object({
    updatedAt: z.number(),
    blockedFrom: z.number().optional(),
    blockedUntil: z.number().optional(),
    blockReason: BlockReason$outboundSchema,
    graceEmailSentAt: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadWebAnalytics$;
(function (PayloadWebAnalytics$) {
    /** @deprecated use `PayloadWebAnalytics$inboundSchema` instead. */
    PayloadWebAnalytics$.inboundSchema = PayloadWebAnalytics$inboundSchema;
    /** @deprecated use `PayloadWebAnalytics$outboundSchema` instead. */
    PayloadWebAnalytics$.outboundSchema = PayloadWebAnalytics$outboundSchema;
})(PayloadWebAnalytics$ || (PayloadWebAnalytics$ = {}));
export function payloadWebAnalyticsToJSON(payloadWebAnalytics) {
    return JSON.stringify(PayloadWebAnalytics$outboundSchema.parse(payloadWebAnalytics));
}
export function payloadWebAnalyticsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadWebAnalytics$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadWebAnalytics' from JSON`);
}
/** @internal */
export const PayloadBlockReason$inboundSchema = z.nativeEnum(PayloadBlockReason);
/** @internal */
export const PayloadBlockReason$outboundSchema = PayloadBlockReason$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadBlockReason$;
(function (PayloadBlockReason$) {
    /** @deprecated use `PayloadBlockReason$inboundSchema` instead. */
    PayloadBlockReason$.inboundSchema = PayloadBlockReason$inboundSchema;
    /** @deprecated use `PayloadBlockReason$outboundSchema` instead. */
    PayloadBlockReason$.outboundSchema = PayloadBlockReason$outboundSchema;
})(PayloadBlockReason$ || (PayloadBlockReason$ = {}));
/** @internal */
export const BlockType$inboundSchema = z
    .nativeEnum(BlockType);
/** @internal */
export const BlockType$outboundSchema = BlockType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BlockType$;
(function (BlockType$) {
    /** @deprecated use `BlockType$inboundSchema` instead. */
    BlockType$.inboundSchema = BlockType$inboundSchema;
    /** @deprecated use `BlockType$outboundSchema` instead. */
    BlockType$.outboundSchema = BlockType$outboundSchema;
})(BlockType$ || (BlockType$ = {}));
/** @internal */
export const Monitoring$inboundSchema = z.object({
    updatedAt: z.number(),
    blockedFrom: z.number().optional(),
    blockedUntil: z.number().optional(),
    blockReason: PayloadBlockReason$inboundSchema,
    blockType: BlockType$inboundSchema,
});
/** @internal */
export const Monitoring$outboundSchema = z.object({
    updatedAt: z.number(),
    blockedFrom: z.number().optional(),
    blockedUntil: z.number().optional(),
    blockReason: PayloadBlockReason$outboundSchema,
    blockType: BlockType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Monitoring$;
(function (Monitoring$) {
    /** @deprecated use `Monitoring$inboundSchema` instead. */
    Monitoring$.inboundSchema = Monitoring$inboundSchema;
    /** @deprecated use `Monitoring$outboundSchema` instead. */
    Monitoring$.outboundSchema = Monitoring$outboundSchema;
})(Monitoring$ || (Monitoring$ = {}));
export function monitoringToJSON(monitoring) {
    return JSON.stringify(Monitoring$outboundSchema.parse(monitoring));
}
export function monitoringFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Monitoring$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Monitoring' from JSON`);
}
/** @internal */
export const UserEventPayloadBlockReason$inboundSchema = z.nativeEnum(UserEventPayloadBlockReason);
/** @internal */
export const UserEventPayloadBlockReason$outboundSchema = UserEventPayloadBlockReason$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayloadBlockReason$;
(function (UserEventPayloadBlockReason$) {
    /** @deprecated use `UserEventPayloadBlockReason$inboundSchema` instead. */
    UserEventPayloadBlockReason$.inboundSchema = UserEventPayloadBlockReason$inboundSchema;
    /** @deprecated use `UserEventPayloadBlockReason$outboundSchema` instead. */
    UserEventPayloadBlockReason$.outboundSchema = UserEventPayloadBlockReason$outboundSchema;
})(UserEventPayloadBlockReason$ || (UserEventPayloadBlockReason$ = {}));
/** @internal */
export const PayloadBlockType$inboundSchema = z.nativeEnum(PayloadBlockType);
/** @internal */
export const PayloadBlockType$outboundSchema = PayloadBlockType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadBlockType$;
(function (PayloadBlockType$) {
    /** @deprecated use `PayloadBlockType$inboundSchema` instead. */
    PayloadBlockType$.inboundSchema = PayloadBlockType$inboundSchema;
    /** @deprecated use `PayloadBlockType$outboundSchema` instead. */
    PayloadBlockType$.outboundSchema = PayloadBlockType$outboundSchema;
})(PayloadBlockType$ || (PayloadBlockType$ = {}));
/** @internal */
export const ObservabilityPlus$inboundSchema = z.object({
    updatedAt: z.number(),
    blockedFrom: z.number().optional(),
    blockedUntil: z.number().optional(),
    blockReason: UserEventPayloadBlockReason$inboundSchema,
    blockType: PayloadBlockType$inboundSchema,
});
/** @internal */
export const ObservabilityPlus$outboundSchema = z.object({
    updatedAt: z.number(),
    blockedFrom: z.number().optional(),
    blockedUntil: z.number().optional(),
    blockReason: UserEventPayloadBlockReason$outboundSchema,
    blockType: PayloadBlockType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ObservabilityPlus$;
(function (ObservabilityPlus$) {
    /** @deprecated use `ObservabilityPlus$inboundSchema` instead. */
    ObservabilityPlus$.inboundSchema = ObservabilityPlus$inboundSchema;
    /** @deprecated use `ObservabilityPlus$outboundSchema` instead. */
    ObservabilityPlus$.outboundSchema = ObservabilityPlus$outboundSchema;
})(ObservabilityPlus$ || (ObservabilityPlus$ = {}));
export function observabilityPlusToJSON(observabilityPlus) {
    return JSON.stringify(ObservabilityPlus$outboundSchema.parse(observabilityPlus));
}
export function observabilityPlusFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ObservabilityPlus$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ObservabilityPlus' from JSON`);
}
/** @internal */
export const UserEventPayload64BlockReason$inboundSchema = z.nativeEnum(UserEventPayload64BlockReason);
/** @internal */
export const UserEventPayload64BlockReason$outboundSchema = UserEventPayload64BlockReason$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload64BlockReason$;
(function (UserEventPayload64BlockReason$) {
    /** @deprecated use `UserEventPayload64BlockReason$inboundSchema` instead. */
    UserEventPayload64BlockReason$.inboundSchema = UserEventPayload64BlockReason$inboundSchema;
    /** @deprecated use `UserEventPayload64BlockReason$outboundSchema` instead. */
    UserEventPayload64BlockReason$.outboundSchema = UserEventPayload64BlockReason$outboundSchema;
})(UserEventPayload64BlockReason$ || (UserEventPayload64BlockReason$ = {}));
/** @internal */
export const UserEventPayloadDataCache$inboundSchema = z.object({
    updatedAt: z.number(),
    blockedFrom: z.number().optional(),
    blockedUntil: z.number().optional(),
    blockReason: UserEventPayload64BlockReason$inboundSchema,
});
/** @internal */
export const UserEventPayloadDataCache$outboundSchema = z.object({
    updatedAt: z.number(),
    blockedFrom: z.number().optional(),
    blockedUntil: z.number().optional(),
    blockReason: UserEventPayload64BlockReason$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayloadDataCache$;
(function (UserEventPayloadDataCache$) {
    /** @deprecated use `UserEventPayloadDataCache$inboundSchema` instead. */
    UserEventPayloadDataCache$.inboundSchema = UserEventPayloadDataCache$inboundSchema;
    /** @deprecated use `UserEventPayloadDataCache$outboundSchema` instead. */
    UserEventPayloadDataCache$.outboundSchema = UserEventPayloadDataCache$outboundSchema;
})(UserEventPayloadDataCache$ || (UserEventPayloadDataCache$ = {}));
export function userEventPayloadDataCacheToJSON(userEventPayloadDataCache) {
    return JSON.stringify(UserEventPayloadDataCache$outboundSchema.parse(userEventPayloadDataCache));
}
export function userEventPayloadDataCacheFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayloadDataCache$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayloadDataCache' from JSON`);
}
/** @internal */
export const UserEventPayload64NewOwnerBlockReason$inboundSchema = z.nativeEnum(UserEventPayload64NewOwnerBlockReason);
/** @internal */
export const UserEventPayload64NewOwnerBlockReason$outboundSchema = UserEventPayload64NewOwnerBlockReason$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload64NewOwnerBlockReason$;
(function (UserEventPayload64NewOwnerBlockReason$) {
    /** @deprecated use `UserEventPayload64NewOwnerBlockReason$inboundSchema` instead. */
    UserEventPayload64NewOwnerBlockReason$.inboundSchema = UserEventPayload64NewOwnerBlockReason$inboundSchema;
    /** @deprecated use `UserEventPayload64NewOwnerBlockReason$outboundSchema` instead. */
    UserEventPayload64NewOwnerBlockReason$.outboundSchema = UserEventPayload64NewOwnerBlockReason$outboundSchema;
})(UserEventPayload64NewOwnerBlockReason$ || (UserEventPayload64NewOwnerBlockReason$ = {}));
/** @internal */
export const PayloadImageOptimizationTransformation$inboundSchema = z.object({
    updatedAt: z.number(),
    blockedFrom: z.number().optional(),
    blockedUntil: z.number().optional(),
    blockReason: UserEventPayload64NewOwnerBlockReason$inboundSchema,
});
/** @internal */
export const PayloadImageOptimizationTransformation$outboundSchema = z.object({
    updatedAt: z.number(),
    blockedFrom: z.number().optional(),
    blockedUntil: z.number().optional(),
    blockReason: UserEventPayload64NewOwnerBlockReason$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadImageOptimizationTransformation$;
(function (PayloadImageOptimizationTransformation$) {
    /** @deprecated use `PayloadImageOptimizationTransformation$inboundSchema` instead. */
    PayloadImageOptimizationTransformation$.inboundSchema = PayloadImageOptimizationTransformation$inboundSchema;
    /** @deprecated use `PayloadImageOptimizationTransformation$outboundSchema` instead. */
    PayloadImageOptimizationTransformation$.outboundSchema = PayloadImageOptimizationTransformation$outboundSchema;
})(PayloadImageOptimizationTransformation$ || (PayloadImageOptimizationTransformation$ = {}));
export function payloadImageOptimizationTransformationToJSON(payloadImageOptimizationTransformation) {
    return JSON.stringify(PayloadImageOptimizationTransformation$outboundSchema.parse(payloadImageOptimizationTransformation));
}
export function payloadImageOptimizationTransformationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadImageOptimizationTransformation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadImageOptimizationTransformation' from JSON`);
}
/** @internal */
export const UserEventPayload64NewOwnerFeatureBlocksBlockReason$inboundSchema = z
    .nativeEnum(UserEventPayload64NewOwnerFeatureBlocksBlockReason);
/** @internal */
export const UserEventPayload64NewOwnerFeatureBlocksBlockReason$outboundSchema = UserEventPayload64NewOwnerFeatureBlocksBlockReason$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload64NewOwnerFeatureBlocksBlockReason$;
(function (UserEventPayload64NewOwnerFeatureBlocksBlockReason$) {
    /** @deprecated use `UserEventPayload64NewOwnerFeatureBlocksBlockReason$inboundSchema` instead. */
    UserEventPayload64NewOwnerFeatureBlocksBlockReason$.inboundSchema = UserEventPayload64NewOwnerFeatureBlocksBlockReason$inboundSchema;
    /** @deprecated use `UserEventPayload64NewOwnerFeatureBlocksBlockReason$outboundSchema` instead. */
    UserEventPayload64NewOwnerFeatureBlocksBlockReason$.outboundSchema = UserEventPayload64NewOwnerFeatureBlocksBlockReason$outboundSchema;
})(UserEventPayload64NewOwnerFeatureBlocksBlockReason$ || (UserEventPayload64NewOwnerFeatureBlocksBlockReason$ = {}));
/** @internal */
export const PayloadSourceImages$inboundSchema = z.object({
    updatedAt: z.number(),
    blockedFrom: z.number().optional(),
    blockedUntil: z.number().optional(),
    blockReason: UserEventPayload64NewOwnerFeatureBlocksBlockReason$inboundSchema,
});
/** @internal */
export const PayloadSourceImages$outboundSchema = z.object({
    updatedAt: z.number(),
    blockedFrom: z.number().optional(),
    blockedUntil: z.number().optional(),
    blockReason: UserEventPayload64NewOwnerFeatureBlocksBlockReason$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadSourceImages$;
(function (PayloadSourceImages$) {
    /** @deprecated use `PayloadSourceImages$inboundSchema` instead. */
    PayloadSourceImages$.inboundSchema = PayloadSourceImages$inboundSchema;
    /** @deprecated use `PayloadSourceImages$outboundSchema` instead. */
    PayloadSourceImages$.outboundSchema = PayloadSourceImages$outboundSchema;
})(PayloadSourceImages$ || (PayloadSourceImages$ = {}));
export function payloadSourceImagesToJSON(payloadSourceImages) {
    return JSON.stringify(PayloadSourceImages$outboundSchema.parse(payloadSourceImages));
}
export function payloadSourceImagesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadSourceImages$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadSourceImages' from JSON`);
}
/** @internal */
export const UserEventPayload64NewOwnerFeatureBlocksBlobBlockReason$inboundSchema = z.nativeEnum(UserEventPayload64NewOwnerFeatureBlocksBlobBlockReason);
/** @internal */
export const UserEventPayload64NewOwnerFeatureBlocksBlobBlockReason$outboundSchema = UserEventPayload64NewOwnerFeatureBlocksBlobBlockReason$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload64NewOwnerFeatureBlocksBlobBlockReason$;
(function (UserEventPayload64NewOwnerFeatureBlocksBlobBlockReason$) {
    /** @deprecated use `UserEventPayload64NewOwnerFeatureBlocksBlobBlockReason$inboundSchema` instead. */
    UserEventPayload64NewOwnerFeatureBlocksBlobBlockReason$.inboundSchema = UserEventPayload64NewOwnerFeatureBlocksBlobBlockReason$inboundSchema;
    /** @deprecated use `UserEventPayload64NewOwnerFeatureBlocksBlobBlockReason$outboundSchema` instead. */
    UserEventPayload64NewOwnerFeatureBlocksBlobBlockReason$.outboundSchema = UserEventPayload64NewOwnerFeatureBlocksBlobBlockReason$outboundSchema;
})(UserEventPayload64NewOwnerFeatureBlocksBlobBlockReason$ || (UserEventPayload64NewOwnerFeatureBlocksBlobBlockReason$ = {}));
/** @internal */
export const OverageReason$inboundSchema = z.nativeEnum(OverageReason);
/** @internal */
export const OverageReason$outboundSchema = OverageReason$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OverageReason$;
(function (OverageReason$) {
    /** @deprecated use `OverageReason$inboundSchema` instead. */
    OverageReason$.inboundSchema = OverageReason$inboundSchema;
    /** @deprecated use `OverageReason$outboundSchema` instead. */
    OverageReason$.outboundSchema = OverageReason$outboundSchema;
})(OverageReason$ || (OverageReason$ = {}));
/** @internal */
export const BlobT$inboundSchema = z
    .object({
    updatedAt: z.number(),
    blockedFrom: z.number().optional(),
    blockedUntil: z.number().optional(),
    blockReason: UserEventPayload64NewOwnerFeatureBlocksBlobBlockReason$inboundSchema,
    overageReason: OverageReason$inboundSchema,
});
/** @internal */
export const BlobT$outboundSchema = z.object({
    updatedAt: z.number(),
    blockedFrom: z.number().optional(),
    blockedUntil: z.number().optional(),
    blockReason: UserEventPayload64NewOwnerFeatureBlocksBlobBlockReason$outboundSchema,
    overageReason: OverageReason$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BlobT$;
(function (BlobT$) {
    /** @deprecated use `BlobT$inboundSchema` instead. */
    BlobT$.inboundSchema = BlobT$inboundSchema;
    /** @deprecated use `BlobT$outboundSchema` instead. */
    BlobT$.outboundSchema = BlobT$outboundSchema;
})(BlobT$ || (BlobT$ = {}));
export function blobToJSON(blobT) {
    return JSON.stringify(BlobT$outboundSchema.parse(blobT));
}
export function blobFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BlobT$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BlobT' from JSON`);
}
/** @internal */
export const UserEventPayload64NewOwnerFeatureBlocksPostgresBlockReason$inboundSchema = z.nativeEnum(UserEventPayload64NewOwnerFeatureBlocksPostgresBlockReason);
/** @internal */
export const UserEventPayload64NewOwnerFeatureBlocksPostgresBlockReason$outboundSchema = UserEventPayload64NewOwnerFeatureBlocksPostgresBlockReason$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload64NewOwnerFeatureBlocksPostgresBlockReason$;
(function (UserEventPayload64NewOwnerFeatureBlocksPostgresBlockReason$) {
    /** @deprecated use `UserEventPayload64NewOwnerFeatureBlocksPostgresBlockReason$inboundSchema` instead. */
    UserEventPayload64NewOwnerFeatureBlocksPostgresBlockReason$.inboundSchema = UserEventPayload64NewOwnerFeatureBlocksPostgresBlockReason$inboundSchema;
    /** @deprecated use `UserEventPayload64NewOwnerFeatureBlocksPostgresBlockReason$outboundSchema` instead. */
    UserEventPayload64NewOwnerFeatureBlocksPostgresBlockReason$.outboundSchema = UserEventPayload64NewOwnerFeatureBlocksPostgresBlockReason$outboundSchema;
})(UserEventPayload64NewOwnerFeatureBlocksPostgresBlockReason$ || (UserEventPayload64NewOwnerFeatureBlocksPostgresBlockReason$ = {}));
/** @internal */
export const PayloadOverageReason$inboundSchema = z.nativeEnum(PayloadOverageReason);
/** @internal */
export const PayloadOverageReason$outboundSchema = PayloadOverageReason$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadOverageReason$;
(function (PayloadOverageReason$) {
    /** @deprecated use `PayloadOverageReason$inboundSchema` instead. */
    PayloadOverageReason$.inboundSchema = PayloadOverageReason$inboundSchema;
    /** @deprecated use `PayloadOverageReason$outboundSchema` instead. */
    PayloadOverageReason$.outboundSchema = PayloadOverageReason$outboundSchema;
})(PayloadOverageReason$ || (PayloadOverageReason$ = {}));
/** @internal */
export const Postgres$inboundSchema = z.object({
    updatedAt: z.number(),
    blockedFrom: z.number().optional(),
    blockedUntil: z.number().optional(),
    blockReason: UserEventPayload64NewOwnerFeatureBlocksPostgresBlockReason$inboundSchema,
    overageReason: PayloadOverageReason$inboundSchema,
});
/** @internal */
export const Postgres$outboundSchema = z.object({
    updatedAt: z.number(),
    blockedFrom: z.number().optional(),
    blockedUntil: z.number().optional(),
    blockReason: UserEventPayload64NewOwnerFeatureBlocksPostgresBlockReason$outboundSchema,
    overageReason: PayloadOverageReason$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Postgres$;
(function (Postgres$) {
    /** @deprecated use `Postgres$inboundSchema` instead. */
    Postgres$.inboundSchema = Postgres$inboundSchema;
    /** @deprecated use `Postgres$outboundSchema` instead. */
    Postgres$.outboundSchema = Postgres$outboundSchema;
})(Postgres$ || (Postgres$ = {}));
export function postgresToJSON(postgres) {
    return JSON.stringify(Postgres$outboundSchema.parse(postgres));
}
export function postgresFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Postgres$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Postgres' from JSON`);
}
/** @internal */
export const UserEventPayload64NewOwnerFeatureBlocksRedisBlockReason$inboundSchema = z.nativeEnum(UserEventPayload64NewOwnerFeatureBlocksRedisBlockReason);
/** @internal */
export const UserEventPayload64NewOwnerFeatureBlocksRedisBlockReason$outboundSchema = UserEventPayload64NewOwnerFeatureBlocksRedisBlockReason$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload64NewOwnerFeatureBlocksRedisBlockReason$;
(function (UserEventPayload64NewOwnerFeatureBlocksRedisBlockReason$) {
    /** @deprecated use `UserEventPayload64NewOwnerFeatureBlocksRedisBlockReason$inboundSchema` instead. */
    UserEventPayload64NewOwnerFeatureBlocksRedisBlockReason$.inboundSchema = UserEventPayload64NewOwnerFeatureBlocksRedisBlockReason$inboundSchema;
    /** @deprecated use `UserEventPayload64NewOwnerFeatureBlocksRedisBlockReason$outboundSchema` instead. */
    UserEventPayload64NewOwnerFeatureBlocksRedisBlockReason$.outboundSchema = UserEventPayload64NewOwnerFeatureBlocksRedisBlockReason$outboundSchema;
})(UserEventPayload64NewOwnerFeatureBlocksRedisBlockReason$ || (UserEventPayload64NewOwnerFeatureBlocksRedisBlockReason$ = {}));
/** @internal */
export const UserEventPayloadOverageReason$inboundSchema = z.nativeEnum(UserEventPayloadOverageReason);
/** @internal */
export const UserEventPayloadOverageReason$outboundSchema = UserEventPayloadOverageReason$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayloadOverageReason$;
(function (UserEventPayloadOverageReason$) {
    /** @deprecated use `UserEventPayloadOverageReason$inboundSchema` instead. */
    UserEventPayloadOverageReason$.inboundSchema = UserEventPayloadOverageReason$inboundSchema;
    /** @deprecated use `UserEventPayloadOverageReason$outboundSchema` instead. */
    UserEventPayloadOverageReason$.outboundSchema = UserEventPayloadOverageReason$outboundSchema;
})(UserEventPayloadOverageReason$ || (UserEventPayloadOverageReason$ = {}));
/** @internal */
export const Redis$inboundSchema = z
    .object({
    updatedAt: z.number(),
    blockedFrom: z.number().optional(),
    blockedUntil: z.number().optional(),
    blockReason: UserEventPayload64NewOwnerFeatureBlocksRedisBlockReason$inboundSchema,
    overageReason: UserEventPayloadOverageReason$inboundSchema,
});
/** @internal */
export const Redis$outboundSchema = z.object({
    updatedAt: z.number(),
    blockedFrom: z.number().optional(),
    blockedUntil: z.number().optional(),
    blockReason: UserEventPayload64NewOwnerFeatureBlocksRedisBlockReason$outboundSchema,
    overageReason: UserEventPayloadOverageReason$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Redis$;
(function (Redis$) {
    /** @deprecated use `Redis$inboundSchema` instead. */
    Redis$.inboundSchema = Redis$inboundSchema;
    /** @deprecated use `Redis$outboundSchema` instead. */
    Redis$.outboundSchema = Redis$outboundSchema;
})(Redis$ || (Redis$ = {}));
export function redisToJSON(redis) {
    return JSON.stringify(Redis$outboundSchema.parse(redis));
}
export function redisFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Redis$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Redis' from JSON`);
}
/** @internal */
export const PayloadFeatureBlocks$inboundSchema = z.object({
    webAnalytics: z.lazy(() => PayloadWebAnalytics$inboundSchema).optional(),
    monitoring: z.lazy(() => Monitoring$inboundSchema).optional(),
    observabilityPlus: z.lazy(() => ObservabilityPlus$inboundSchema).optional(),
    dataCache: z.lazy(() => UserEventPayloadDataCache$inboundSchema).optional(),
    imageOptimizationTransformation: z.lazy(() => PayloadImageOptimizationTransformation$inboundSchema).optional(),
    sourceImages: z.lazy(() => PayloadSourceImages$inboundSchema).optional(),
    blob: z.lazy(() => BlobT$inboundSchema).optional(),
    postgres: z.lazy(() => Postgres$inboundSchema).optional(),
    redis: z.lazy(() => Redis$inboundSchema).optional(),
});
/** @internal */
export const PayloadFeatureBlocks$outboundSchema = z.object({
    webAnalytics: z.lazy(() => PayloadWebAnalytics$outboundSchema).optional(),
    monitoring: z.lazy(() => Monitoring$outboundSchema).optional(),
    observabilityPlus: z.lazy(() => ObservabilityPlus$outboundSchema).optional(),
    dataCache: z.lazy(() => UserEventPayloadDataCache$outboundSchema).optional(),
    imageOptimizationTransformation: z.lazy(() => PayloadImageOptimizationTransformation$outboundSchema).optional(),
    sourceImages: z.lazy(() => PayloadSourceImages$outboundSchema).optional(),
    blob: z.lazy(() => BlobT$outboundSchema).optional(),
    postgres: z.lazy(() => Postgres$outboundSchema).optional(),
    redis: z.lazy(() => Redis$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadFeatureBlocks$;
(function (PayloadFeatureBlocks$) {
    /** @deprecated use `PayloadFeatureBlocks$inboundSchema` instead. */
    PayloadFeatureBlocks$.inboundSchema = PayloadFeatureBlocks$inboundSchema;
    /** @deprecated use `PayloadFeatureBlocks$outboundSchema` instead. */
    PayloadFeatureBlocks$.outboundSchema = PayloadFeatureBlocks$outboundSchema;
})(PayloadFeatureBlocks$ || (PayloadFeatureBlocks$ = {}));
export function payloadFeatureBlocksToJSON(payloadFeatureBlocks) {
    return JSON.stringify(PayloadFeatureBlocks$outboundSchema.parse(payloadFeatureBlocks));
}
export function payloadFeatureBlocksFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadFeatureBlocks$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadFeatureBlocks' from JSON`);
}
/** @internal */
export const Version$inboundSchema = z
    .nativeEnum(Version);
/** @internal */
export const Version$outboundSchema = Version$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Version$;
(function (Version$) {
    /** @deprecated use `Version$inboundSchema` instead. */
    Version$.inboundSchema = Version$inboundSchema;
    /** @deprecated use `Version$outboundSchema` instead. */
    Version$.outboundSchema = Version$outboundSchema;
})(Version$ || (Version$ = {}));
/** @internal */
export const NorthstarMigration$inboundSchema = z.object({
    teamId: z.string(),
    projects: z.number(),
    stores: z.number(),
    integrationConfigurations: z.number(),
    integrationClients: z.number(),
    startTime: z.number(),
    endTime: z.number(),
});
/** @internal */
export const NorthstarMigration$outboundSchema = z.object({
    teamId: z.string(),
    projects: z.number(),
    stores: z.number(),
    integrationConfigurations: z.number(),
    integrationClients: z.number(),
    startTime: z.number(),
    endTime: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NorthstarMigration$;
(function (NorthstarMigration$) {
    /** @deprecated use `NorthstarMigration$inboundSchema` instead. */
    NorthstarMigration$.inboundSchema = NorthstarMigration$inboundSchema;
    /** @deprecated use `NorthstarMigration$outboundSchema` instead. */
    NorthstarMigration$.outboundSchema = NorthstarMigration$outboundSchema;
})(NorthstarMigration$ || (NorthstarMigration$ = {}));
export function northstarMigrationToJSON(northstarMigration) {
    return JSON.stringify(NorthstarMigration$outboundSchema.parse(northstarMigration));
}
export function northstarMigrationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => NorthstarMigration$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NorthstarMigration' from JSON`);
}
/** @internal */
export const Totp$inboundSchema = z
    .object({
    secret: z.string(),
    createdAt: z.number(),
});
/** @internal */
export const Totp$outboundSchema = z.object({
    secret: z.string(),
    createdAt: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Totp$;
(function (Totp$) {
    /** @deprecated use `Totp$inboundSchema` instead. */
    Totp$.inboundSchema = Totp$inboundSchema;
    /** @deprecated use `Totp$outboundSchema` instead. */
    Totp$.outboundSchema = Totp$outboundSchema;
})(Totp$ || (Totp$ = {}));
export function totpToJSON(totp) {
    return JSON.stringify(Totp$outboundSchema.parse(totp));
}
export function totpFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Totp$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Totp' from JSON`);
}
/** @internal */
export const MfaConfiguration$inboundSchema = z.object({
    enabled: z.boolean(),
    enabledAt: z.number().optional(),
    recoveryCodes: z.array(z.string()),
    totp: z.lazy(() => Totp$inboundSchema).optional(),
});
/** @internal */
export const MfaConfiguration$outboundSchema = z.object({
    enabled: z.boolean(),
    enabledAt: z.number().optional(),
    recoveryCodes: z.array(z.string()),
    totp: z.lazy(() => Totp$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MfaConfiguration$;
(function (MfaConfiguration$) {
    /** @deprecated use `MfaConfiguration$inboundSchema` instead. */
    MfaConfiguration$.inboundSchema = MfaConfiguration$inboundSchema;
    /** @deprecated use `MfaConfiguration$outboundSchema` instead. */
    MfaConfiguration$.outboundSchema = MfaConfiguration$outboundSchema;
})(MfaConfiguration$ || (MfaConfiguration$ = {}));
export function mfaConfigurationToJSON(mfaConfiguration) {
    return JSON.stringify(MfaConfiguration$outboundSchema.parse(mfaConfiguration));
}
export function mfaConfigurationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MfaConfiguration$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MfaConfiguration' from JSON`);
}
/** @internal */
export const NewOwner$inboundSchema = z.object({
    abuse: z.lazy(() => Abuse$inboundSchema).optional(),
    acceptanceState: z.string().optional(),
    acceptedAt: z.number().optional(),
    avatar: z.string().optional(),
    billing: z.lazy(() => PayloadBilling$inboundSchema),
    blocked: z.nullable(z.number()),
    blockReason: z.string().optional(),
    created: z.number().optional(),
    createdAt: z.number(),
    credentials: z.array(z.union([
        z.lazy(() => Credentials2$inboundSchema),
        z.lazy(() => Credentials1$inboundSchema),
    ])).optional(),
    customerId: z.nullable(z.string()).optional(),
    orbCustomerId: z.nullable(z.string()).optional(),
    dataCache: z.lazy(() => PayloadDataCache$inboundSchema).optional(),
    deletedAt: z.nullable(z.number()).optional(),
    deploymentSecret: z.string(),
    dismissedTeams: z.array(z.string()).optional(),
    dismissedToasts: z.array(z.lazy(() => PayloadDismissedToasts$inboundSchema))
        .optional(),
    favoriteProjectsAndSpaces: z.array(z.lazy(() => PayloadFavoriteProjectsAndSpaces$inboundSchema)).optional(),
    email: z.string(),
    id: z.string(),
    importFlowGitNamespace: z.nullable(z.union([z.string(), z.number()]))
        .optional(),
    importFlowGitNamespaceId: z.nullable(z.union([z.string(), z.number()]))
        .optional(),
    importFlowGitProvider: z.nullable(PayloadImportFlowGitProvider$inboundSchema)
        .optional(),
    preferredScopesAndGitNamespaces: z.array(z.lazy(() => PayloadPreferredScopesAndGitNamespaces$inboundSchema)).optional(),
    isDomainReseller: z.boolean().optional(),
    isZeitPub: z.boolean().optional(),
    maxActiveSlots: z.number().optional(),
    name: z.string().optional(),
    phoneNumber: z.string().optional(),
    platformVersion: z.nullable(z.number()),
    preventAutoBlocking: z.union([z.number(), z.boolean()]).optional(),
    projectDomainsLimit: z.number().optional(),
    remoteCaching: z.lazy(() => UserEventPayloadRemoteCaching$inboundSchema)
        .optional(),
    removedAliasesAt: z.number().optional(),
    removedBillingSubscriptionAt: z.number().optional(),
    removedConfigurationsAt: z.number().optional(),
    removedDeploymentsAt: z.number().optional(),
    removedDomiansAt: z.number().optional(),
    removedEventsAt: z.number().optional(),
    removedProjectsAt: z.number().optional(),
    removedSecretsAt: z.number().optional(),
    removedSharedEnvVarsAt: z.number().optional(),
    removedEdgeConfigsAt: z.number().optional(),
    resourceConfig: z.lazy(() => PayloadResourceConfig$inboundSchema).optional(),
    resourceLimits: z.record(z.lazy(() => ResourceLimits$inboundSchema))
        .optional(),
    activeDashboardViews: z.array(z.lazy(() => PayloadActiveDashboardViews$inboundSchema)).optional(),
    secondaryEmails: z.array(z.lazy(() => SecondaryEmails$inboundSchema))
        .optional(),
    emailNotifications: z.lazy(() => EmailNotifications$inboundSchema).optional(),
    siftScore: z.number().optional(),
    siftScores: z.record(z.lazy(() => SiftScores$inboundSchema)).optional(),
    siftRoute: z.lazy(() => SiftRoute$inboundSchema).optional(),
    sfdcId: z.string().optional(),
    softBlock: z.nullable(z.lazy(() => PayloadSoftBlock$inboundSchema))
        .optional(),
    stagingPrefix: z.string(),
    sysToken: z.string(),
    teams: z.array(z.lazy(() => Teams$inboundSchema)).optional(),
    trialTeamIds: z.array(z.string()).optional(),
    maxTrials: z.number().optional(),
    trialTeamId: z.string().optional(),
    type: UserEventPayload64Type$inboundSchema,
    usageAlerts: z.nullable(z.lazy(() => UsageAlerts$inboundSchema)).optional(),
    overageUsageAlerts: z.lazy(() => OverageUsageAlerts$inboundSchema).optional(),
    overageMetadata: z.lazy(() => OverageMetadata$inboundSchema).optional(),
    username: z.string(),
    updatedAt: z.number(),
    enablePreviewFeedback: PayloadEnablePreviewFeedback$inboundSchema.optional(),
    featureBlocks: z.lazy(() => PayloadFeatureBlocks$inboundSchema).optional(),
    defaultTeamId: z.string().optional(),
    version: Version$inboundSchema,
    northstarMigration: z.lazy(() => NorthstarMigration$inboundSchema).optional(),
    opportunityId: z.string().optional(),
    mfaConfiguration: z.lazy(() => MfaConfiguration$inboundSchema).optional(),
});
/** @internal */
export const NewOwner$outboundSchema = z.object({
    abuse: z.lazy(() => Abuse$outboundSchema).optional(),
    acceptanceState: z.string().optional(),
    acceptedAt: z.number().optional(),
    avatar: z.string().optional(),
    billing: z.lazy(() => PayloadBilling$outboundSchema),
    blocked: z.nullable(z.number()),
    blockReason: z.string().optional(),
    created: z.number().optional(),
    createdAt: z.number(),
    credentials: z.array(z.union([
        z.lazy(() => Credentials2$outboundSchema),
        z.lazy(() => Credentials1$outboundSchema),
    ])).optional(),
    customerId: z.nullable(z.string()).optional(),
    orbCustomerId: z.nullable(z.string()).optional(),
    dataCache: z.lazy(() => PayloadDataCache$outboundSchema).optional(),
    deletedAt: z.nullable(z.number()).optional(),
    deploymentSecret: z.string(),
    dismissedTeams: z.array(z.string()).optional(),
    dismissedToasts: z.array(z.lazy(() => PayloadDismissedToasts$outboundSchema))
        .optional(),
    favoriteProjectsAndSpaces: z.array(z.lazy(() => PayloadFavoriteProjectsAndSpaces$outboundSchema)).optional(),
    email: z.string(),
    id: z.string(),
    importFlowGitNamespace: z.nullable(z.union([z.string(), z.number()]))
        .optional(),
    importFlowGitNamespaceId: z.nullable(z.union([z.string(), z.number()]))
        .optional(),
    importFlowGitProvider: z.nullable(PayloadImportFlowGitProvider$outboundSchema)
        .optional(),
    preferredScopesAndGitNamespaces: z.array(z.lazy(() => PayloadPreferredScopesAndGitNamespaces$outboundSchema)).optional(),
    isDomainReseller: z.boolean().optional(),
    isZeitPub: z.boolean().optional(),
    maxActiveSlots: z.number().optional(),
    name: z.string().optional(),
    phoneNumber: z.string().optional(),
    platformVersion: z.nullable(z.number()),
    preventAutoBlocking: z.union([z.number(), z.boolean()]).optional(),
    projectDomainsLimit: z.number().optional(),
    remoteCaching: z.lazy(() => UserEventPayloadRemoteCaching$outboundSchema)
        .optional(),
    removedAliasesAt: z.number().optional(),
    removedBillingSubscriptionAt: z.number().optional(),
    removedConfigurationsAt: z.number().optional(),
    removedDeploymentsAt: z.number().optional(),
    removedDomiansAt: z.number().optional(),
    removedEventsAt: z.number().optional(),
    removedProjectsAt: z.number().optional(),
    removedSecretsAt: z.number().optional(),
    removedSharedEnvVarsAt: z.number().optional(),
    removedEdgeConfigsAt: z.number().optional(),
    resourceConfig: z.lazy(() => PayloadResourceConfig$outboundSchema).optional(),
    resourceLimits: z.record(z.lazy(() => ResourceLimits$outboundSchema))
        .optional(),
    activeDashboardViews: z.array(z.lazy(() => PayloadActiveDashboardViews$outboundSchema)).optional(),
    secondaryEmails: z.array(z.lazy(() => SecondaryEmails$outboundSchema))
        .optional(),
    emailNotifications: z.lazy(() => EmailNotifications$outboundSchema)
        .optional(),
    siftScore: z.number().optional(),
    siftScores: z.record(z.lazy(() => SiftScores$outboundSchema)).optional(),
    siftRoute: z.lazy(() => SiftRoute$outboundSchema).optional(),
    sfdcId: z.string().optional(),
    softBlock: z.nullable(z.lazy(() => PayloadSoftBlock$outboundSchema))
        .optional(),
    stagingPrefix: z.string(),
    sysToken: z.string(),
    teams: z.array(z.lazy(() => Teams$outboundSchema)).optional(),
    trialTeamIds: z.array(z.string()).optional(),
    maxTrials: z.number().optional(),
    trialTeamId: z.string().optional(),
    type: UserEventPayload64Type$outboundSchema,
    usageAlerts: z.nullable(z.lazy(() => UsageAlerts$outboundSchema)).optional(),
    overageUsageAlerts: z.lazy(() => OverageUsageAlerts$outboundSchema)
        .optional(),
    overageMetadata: z.lazy(() => OverageMetadata$outboundSchema).optional(),
    username: z.string(),
    updatedAt: z.number(),
    enablePreviewFeedback: PayloadEnablePreviewFeedback$outboundSchema.optional(),
    featureBlocks: z.lazy(() => PayloadFeatureBlocks$outboundSchema).optional(),
    defaultTeamId: z.string().optional(),
    version: Version$outboundSchema,
    northstarMigration: z.lazy(() => NorthstarMigration$outboundSchema)
        .optional(),
    opportunityId: z.string().optional(),
    mfaConfiguration: z.lazy(() => MfaConfiguration$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NewOwner$;
(function (NewOwner$) {
    /** @deprecated use `NewOwner$inboundSchema` instead. */
    NewOwner$.inboundSchema = NewOwner$inboundSchema;
    /** @deprecated use `NewOwner$outboundSchema` instead. */
    NewOwner$.outboundSchema = NewOwner$outboundSchema;
})(NewOwner$ || (NewOwner$ = {}));
export function newOwnerToJSON(newOwner) {
    return JSON.stringify(NewOwner$outboundSchema.parse(newOwner));
}
export function newOwnerFromJSON(jsonString) {
    return safeParse(jsonString, (x) => NewOwner$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NewOwner' from JSON`);
}
/** @internal */
export const SixtyFour$inboundSchema = z.object({
    userId: z.string(),
    integrationId: z.string(),
    configurationId: z.string(),
    integrationSlug: z.string(),
    integrationName: z.string().optional(),
    newOwner: z.nullable(z.lazy(() => NewOwner$inboundSchema)),
});
/** @internal */
export const SixtyFour$outboundSchema = z.object({
    userId: z.string(),
    integrationId: z.string(),
    configurationId: z.string(),
    integrationSlug: z.string(),
    integrationName: z.string().optional(),
    newOwner: z.nullable(z.lazy(() => NewOwner$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SixtyFour$;
(function (SixtyFour$) {
    /** @deprecated use `SixtyFour$inboundSchema` instead. */
    SixtyFour$.inboundSchema = SixtyFour$inboundSchema;
    /** @deprecated use `SixtyFour$outboundSchema` instead. */
    SixtyFour$.outboundSchema = SixtyFour$outboundSchema;
})(SixtyFour$ || (SixtyFour$ = {}));
export function sixtyFourToJSON(sixtyFour) {
    return JSON.stringify(SixtyFour$outboundSchema.parse(sixtyFour));
}
export function sixtyFourFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SixtyFour$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SixtyFour' from JSON`);
}
/** @internal */
export const SixtyThree$inboundSchema = z.object({
    integrationId: z.string(),
    integrationSlug: z.string(),
    integrationName: z.string(),
});
/** @internal */
export const SixtyThree$outboundSchema = z.object({
    integrationId: z.string(),
    integrationSlug: z.string(),
    integrationName: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SixtyThree$;
(function (SixtyThree$) {
    /** @deprecated use `SixtyThree$inboundSchema` instead. */
    SixtyThree$.inboundSchema = SixtyThree$inboundSchema;
    /** @deprecated use `SixtyThree$outboundSchema` instead. */
    SixtyThree$.outboundSchema = SixtyThree$outboundSchema;
})(SixtyThree$ || (SixtyThree$ = {}));
export function sixtyThreeToJSON(sixtyThree) {
    return JSON.stringify(SixtyThree$outboundSchema.parse(sixtyThree));
}
export function sixtyThreeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SixtyThree$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SixtyThree' from JSON`);
}
/** @internal */
export const SixtyTwo$inboundSchema = z.object({
    projectId: z.string(),
    prevAttackModeEnabled: z.boolean().optional(),
    prevAttackModeActiveUntil: z.nullable(z.number()).optional(),
    attackModeEnabled: z.boolean(),
    attackModeActiveUntil: z.nullable(z.number()).optional(),
});
/** @internal */
export const SixtyTwo$outboundSchema = z.object({
    projectId: z.string(),
    prevAttackModeEnabled: z.boolean().optional(),
    prevAttackModeActiveUntil: z.nullable(z.number()).optional(),
    attackModeEnabled: z.boolean(),
    attackModeActiveUntil: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SixtyTwo$;
(function (SixtyTwo$) {
    /** @deprecated use `SixtyTwo$inboundSchema` instead. */
    SixtyTwo$.inboundSchema = SixtyTwo$inboundSchema;
    /** @deprecated use `SixtyTwo$outboundSchema` instead. */
    SixtyTwo$.outboundSchema = SixtyTwo$outboundSchema;
})(SixtyTwo$ || (SixtyTwo$ = {}));
export function sixtyTwoToJSON(sixtyTwo) {
    return JSON.stringify(SixtyTwo$outboundSchema.parse(sixtyTwo));
}
export function sixtyTwoFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SixtyTwo$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SixtyTwo' from JSON`);
}
/** @internal */
export const UserEventPayload61Action$inboundSchema = z.nativeEnum(UserEventPayload61Action);
/** @internal */
export const UserEventPayload61Action$outboundSchema = UserEventPayload61Action$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload61Action$;
(function (UserEventPayload61Action$) {
    /** @deprecated use `UserEventPayload61Action$inboundSchema` instead. */
    UserEventPayload61Action$.inboundSchema = UserEventPayload61Action$inboundSchema;
    /** @deprecated use `UserEventPayload61Action$outboundSchema` instead. */
    UserEventPayload61Action$.outboundSchema = UserEventPayload61Action$outboundSchema;
})(UserEventPayload61Action$ || (UserEventPayload61Action$ = {}));
/** @internal */
export const RuleGroups$inboundSchema = z.object({
    active: z.boolean(),
    action: UserEventPayload61Action$inboundSchema.optional(),
});
/** @internal */
export const RuleGroups$outboundSchema = z.object({
    active: z.boolean(),
    action: UserEventPayload61Action$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RuleGroups$;
(function (RuleGroups$) {
    /** @deprecated use `RuleGroups$inboundSchema` instead. */
    RuleGroups$.inboundSchema = RuleGroups$inboundSchema;
    /** @deprecated use `RuleGroups$outboundSchema` instead. */
    RuleGroups$.outboundSchema = RuleGroups$outboundSchema;
})(RuleGroups$ || (RuleGroups$ = {}));
export function ruleGroupsToJSON(ruleGroups) {
    return JSON.stringify(RuleGroups$outboundSchema.parse(ruleGroups));
}
export function ruleGroupsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RuleGroups$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RuleGroups' from JSON`);
}
/** @internal */
export const SixtyOne$inboundSchema = z.object({
    projectId: z.string(),
    rulesetName: z.string(),
    ruleGroups: z.record(z.lazy(() => RuleGroups$inboundSchema)),
});
/** @internal */
export const SixtyOne$outboundSchema = z.object({
    projectId: z.string(),
    rulesetName: z.string(),
    ruleGroups: z.record(z.lazy(() => RuleGroups$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SixtyOne$;
(function (SixtyOne$) {
    /** @deprecated use `SixtyOne$inboundSchema` instead. */
    SixtyOne$.inboundSchema = SixtyOne$inboundSchema;
    /** @deprecated use `SixtyOne$outboundSchema` instead. */
    SixtyOne$.outboundSchema = SixtyOne$outboundSchema;
})(SixtyOne$ || (SixtyOne$ = {}));
export function sixtyOneToJSON(sixtyOne) {
    return JSON.stringify(SixtyOne$outboundSchema.parse(sixtyOne));
}
export function sixtyOneFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SixtyOne$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SixtyOne' from JSON`);
}
/** @internal */
export const UserEventPayloadAction$inboundSchema = z.nativeEnum(UserEventPayloadAction);
/** @internal */
export const UserEventPayloadAction$outboundSchema = UserEventPayloadAction$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayloadAction$;
(function (UserEventPayloadAction$) {
    /** @deprecated use `UserEventPayloadAction$inboundSchema` instead. */
    UserEventPayloadAction$.inboundSchema = UserEventPayloadAction$inboundSchema;
    /** @deprecated use `UserEventPayloadAction$outboundSchema` instead. */
    UserEventPayloadAction$.outboundSchema = UserEventPayloadAction$outboundSchema;
})(UserEventPayloadAction$ || (UserEventPayloadAction$ = {}));
/** @internal */
export const Sixty$inboundSchema = z
    .object({
    projectId: z.string(),
    rulesetName: z.string(),
    active: z.boolean(),
    action: UserEventPayloadAction$inboundSchema.optional(),
});
/** @internal */
export const Sixty$outboundSchema = z.object({
    projectId: z.string(),
    rulesetName: z.string(),
    active: z.boolean(),
    action: UserEventPayloadAction$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Sixty$;
(function (Sixty$) {
    /** @deprecated use `Sixty$inboundSchema` instead. */
    Sixty$.inboundSchema = Sixty$inboundSchema;
    /** @deprecated use `Sixty$outboundSchema` instead. */
    Sixty$.outboundSchema = Sixty$outboundSchema;
})(Sixty$ || (Sixty$ = {}));
export function sixtyToJSON(sixty) {
    return JSON.stringify(Sixty$outboundSchema.parse(sixty));
}
export function sixtyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Sixty$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Sixty' from JSON`);
}
/** @internal */
export const FiftyNine$inboundSchema = z.object({
    projectId: z.string(),
    scope: z.string(),
    source: z.string(),
});
/** @internal */
export const FiftyNine$outboundSchema = z.object({
    projectId: z.string(),
    scope: z.string(),
    source: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FiftyNine$;
(function (FiftyNine$) {
    /** @deprecated use `FiftyNine$inboundSchema` instead. */
    FiftyNine$.inboundSchema = FiftyNine$inboundSchema;
    /** @deprecated use `FiftyNine$outboundSchema` instead. */
    FiftyNine$.outboundSchema = FiftyNine$outboundSchema;
})(FiftyNine$ || (FiftyNine$ = {}));
export function fiftyNineToJSON(fiftyNine) {
    return JSON.stringify(FiftyNine$outboundSchema.parse(fiftyNine));
}
export function fiftyNineFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FiftyNine$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FiftyNine' from JSON`);
}
/** @internal */
export const ConfigChanges$inboundSchema = z.object({});
/** @internal */
export const ConfigChanges$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ConfigChanges$;
(function (ConfigChanges$) {
    /** @deprecated use `ConfigChanges$inboundSchema` instead. */
    ConfigChanges$.inboundSchema = ConfigChanges$inboundSchema;
    /** @deprecated use `ConfigChanges$outboundSchema` instead. */
    ConfigChanges$.outboundSchema = ConfigChanges$outboundSchema;
})(ConfigChanges$ || (ConfigChanges$ = {}));
export function configChangesToJSON(configChanges) {
    return JSON.stringify(ConfigChanges$outboundSchema.parse(configChanges));
}
export function configChangesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ConfigChanges$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ConfigChanges' from JSON`);
}
/** @internal */
export const FiftyEight$inboundSchema = z.object({
    projectId: z.string(),
    restore: z.boolean(),
    configVersion: z.number(),
    configChangeCount: z.number(),
    configChanges: z.array(z.lazy(() => ConfigChanges$inboundSchema)),
});
/** @internal */
export const FiftyEight$outboundSchema = z.object({
    projectId: z.string(),
    restore: z.boolean(),
    configVersion: z.number(),
    configChangeCount: z.number(),
    configChanges: z.array(z.lazy(() => ConfigChanges$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FiftyEight$;
(function (FiftyEight$) {
    /** @deprecated use `FiftyEight$inboundSchema` instead. */
    FiftyEight$.inboundSchema = FiftyEight$inboundSchema;
    /** @deprecated use `FiftyEight$outboundSchema` instead. */
    FiftyEight$.outboundSchema = FiftyEight$outboundSchema;
})(FiftyEight$ || (FiftyEight$ = {}));
export function fiftyEightToJSON(fiftyEight) {
    return JSON.stringify(FiftyEight$outboundSchema.parse(fiftyEight));
}
export function fiftyEightFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FiftyEight$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FiftyEight' from JSON`);
}
/** @internal */
export const UserEventPayload57OldEnvVarType$inboundSchema = z.nativeEnum(UserEventPayload57OldEnvVarType);
/** @internal */
export const UserEventPayload57OldEnvVarType$outboundSchema = UserEventPayload57OldEnvVarType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload57OldEnvVarType$;
(function (UserEventPayload57OldEnvVarType$) {
    /** @deprecated use `UserEventPayload57OldEnvVarType$inboundSchema` instead. */
    UserEventPayload57OldEnvVarType$.inboundSchema = UserEventPayload57OldEnvVarType$inboundSchema;
    /** @deprecated use `UserEventPayload57OldEnvVarType$outboundSchema` instead. */
    UserEventPayload57OldEnvVarType$.outboundSchema = UserEventPayload57OldEnvVarType$outboundSchema;
})(UserEventPayload57OldEnvVarType$ || (UserEventPayload57OldEnvVarType$ = {}));
/** @internal */
export const UserEventPayloadTarget$inboundSchema = z.nativeEnum(UserEventPayloadTarget);
/** @internal */
export const UserEventPayloadTarget$outboundSchema = UserEventPayloadTarget$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayloadTarget$;
(function (UserEventPayloadTarget$) {
    /** @deprecated use `UserEventPayloadTarget$inboundSchema` instead. */
    UserEventPayloadTarget$.inboundSchema = UserEventPayloadTarget$inboundSchema;
    /** @deprecated use `UserEventPayloadTarget$outboundSchema` instead. */
    UserEventPayloadTarget$.outboundSchema = UserEventPayloadTarget$outboundSchema;
})(UserEventPayloadTarget$ || (UserEventPayloadTarget$ = {}));
/** @internal */
export const OldEnvVar$inboundSchema = z.object({
    created: z.string().datetime({ offset: true }).transform(v => new Date(v))
        .optional(),
    key: z.string().optional(),
    ownerId: z.nullable(z.string()).optional(),
    id: z.string().optional(),
    createdBy: z.nullable(z.string()).optional(),
    deletedBy: z.nullable(z.string()).optional(),
    updatedBy: z.nullable(z.string()).optional(),
    createdAt: z.number().optional(),
    deletedAt: z.number().optional(),
    updatedAt: z.number().optional(),
    value: z.string().optional(),
    projectId: z.array(z.string()).optional(),
    type: UserEventPayload57OldEnvVarType$inboundSchema.optional(),
    target: z.array(UserEventPayloadTarget$inboundSchema).optional(),
    applyToAllCustomEnvironments: z.boolean().optional(),
    decrypted: z.boolean().optional(),
    comment: z.string().optional(),
    lastEditedByDisplayName: z.string().optional(),
});
/** @internal */
export const OldEnvVar$outboundSchema = z.object({
    created: z.date().transform(v => v.toISOString()).optional(),
    key: z.string().optional(),
    ownerId: z.nullable(z.string()).optional(),
    id: z.string().optional(),
    createdBy: z.nullable(z.string()).optional(),
    deletedBy: z.nullable(z.string()).optional(),
    updatedBy: z.nullable(z.string()).optional(),
    createdAt: z.number().optional(),
    deletedAt: z.number().optional(),
    updatedAt: z.number().optional(),
    value: z.string().optional(),
    projectId: z.array(z.string()).optional(),
    type: UserEventPayload57OldEnvVarType$outboundSchema.optional(),
    target: z.array(UserEventPayloadTarget$outboundSchema).optional(),
    applyToAllCustomEnvironments: z.boolean().optional(),
    decrypted: z.boolean().optional(),
    comment: z.string().optional(),
    lastEditedByDisplayName: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OldEnvVar$;
(function (OldEnvVar$) {
    /** @deprecated use `OldEnvVar$inboundSchema` instead. */
    OldEnvVar$.inboundSchema = OldEnvVar$inboundSchema;
    /** @deprecated use `OldEnvVar$outboundSchema` instead. */
    OldEnvVar$.outboundSchema = OldEnvVar$outboundSchema;
})(OldEnvVar$ || (OldEnvVar$ = {}));
export function oldEnvVarToJSON(oldEnvVar) {
    return JSON.stringify(OldEnvVar$outboundSchema.parse(oldEnvVar));
}
export function oldEnvVarFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OldEnvVar$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OldEnvVar' from JSON`);
}
/** @internal */
export const UserEventPayload57Type$inboundSchema = z.nativeEnum(UserEventPayload57Type);
/** @internal */
export const UserEventPayload57Type$outboundSchema = UserEventPayload57Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload57Type$;
(function (UserEventPayload57Type$) {
    /** @deprecated use `UserEventPayload57Type$inboundSchema` instead. */
    UserEventPayload57Type$.inboundSchema = UserEventPayload57Type$inboundSchema;
    /** @deprecated use `UserEventPayload57Type$outboundSchema` instead. */
    UserEventPayload57Type$.outboundSchema = UserEventPayload57Type$outboundSchema;
})(UserEventPayload57Type$ || (UserEventPayload57Type$ = {}));
/** @internal */
export const UserEventPayload57Target$inboundSchema = z.nativeEnum(UserEventPayload57Target);
/** @internal */
export const UserEventPayload57Target$outboundSchema = UserEventPayload57Target$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload57Target$;
(function (UserEventPayload57Target$) {
    /** @deprecated use `UserEventPayload57Target$inboundSchema` instead. */
    UserEventPayload57Target$.inboundSchema = UserEventPayload57Target$inboundSchema;
    /** @deprecated use `UserEventPayload57Target$outboundSchema` instead. */
    UserEventPayload57Target$.outboundSchema = UserEventPayload57Target$outboundSchema;
})(UserEventPayload57Target$ || (UserEventPayload57Target$ = {}));
/** @internal */
export const NewEnvVar$inboundSchema = z.object({
    created: z.string().datetime({ offset: true }).transform(v => new Date(v))
        .optional(),
    key: z.string().optional(),
    ownerId: z.nullable(z.string()).optional(),
    id: z.string().optional(),
    createdBy: z.nullable(z.string()).optional(),
    deletedBy: z.nullable(z.string()).optional(),
    updatedBy: z.nullable(z.string()).optional(),
    createdAt: z.number().optional(),
    deletedAt: z.number().optional(),
    updatedAt: z.number().optional(),
    value: z.string().optional(),
    projectId: z.array(z.string()).optional(),
    type: UserEventPayload57Type$inboundSchema.optional(),
    target: z.array(UserEventPayload57Target$inboundSchema).optional(),
    applyToAllCustomEnvironments: z.boolean().optional(),
    decrypted: z.boolean().optional(),
    comment: z.string().optional(),
    lastEditedByDisplayName: z.string().optional(),
});
/** @internal */
export const NewEnvVar$outboundSchema = z.object({
    created: z.date().transform(v => v.toISOString()).optional(),
    key: z.string().optional(),
    ownerId: z.nullable(z.string()).optional(),
    id: z.string().optional(),
    createdBy: z.nullable(z.string()).optional(),
    deletedBy: z.nullable(z.string()).optional(),
    updatedBy: z.nullable(z.string()).optional(),
    createdAt: z.number().optional(),
    deletedAt: z.number().optional(),
    updatedAt: z.number().optional(),
    value: z.string().optional(),
    projectId: z.array(z.string()).optional(),
    type: UserEventPayload57Type$outboundSchema.optional(),
    target: z.array(UserEventPayload57Target$outboundSchema).optional(),
    applyToAllCustomEnvironments: z.boolean().optional(),
    decrypted: z.boolean().optional(),
    comment: z.string().optional(),
    lastEditedByDisplayName: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NewEnvVar$;
(function (NewEnvVar$) {
    /** @deprecated use `NewEnvVar$inboundSchema` instead. */
    NewEnvVar$.inboundSchema = NewEnvVar$inboundSchema;
    /** @deprecated use `NewEnvVar$outboundSchema` instead. */
    NewEnvVar$.outboundSchema = NewEnvVar$outboundSchema;
})(NewEnvVar$ || (NewEnvVar$ = {}));
export function newEnvVarToJSON(newEnvVar) {
    return JSON.stringify(NewEnvVar$outboundSchema.parse(newEnvVar));
}
export function newEnvVarFromJSON(jsonString) {
    return safeParse(jsonString, (x) => NewEnvVar$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NewEnvVar' from JSON`);
}
/** @internal */
export const OldTarget$inboundSchema = z
    .nativeEnum(OldTarget);
/** @internal */
export const OldTarget$outboundSchema = OldTarget$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OldTarget$;
(function (OldTarget$) {
    /** @deprecated use `OldTarget$inboundSchema` instead. */
    OldTarget$.inboundSchema = OldTarget$inboundSchema;
    /** @deprecated use `OldTarget$outboundSchema` instead. */
    OldTarget$.outboundSchema = OldTarget$outboundSchema;
})(OldTarget$ || (OldTarget$ = {}));
/** @internal */
export const NewTarget$inboundSchema = z
    .nativeEnum(NewTarget);
/** @internal */
export const NewTarget$outboundSchema = NewTarget$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NewTarget$;
(function (NewTarget$) {
    /** @deprecated use `NewTarget$inboundSchema` instead. */
    NewTarget$.inboundSchema = NewTarget$inboundSchema;
    /** @deprecated use `NewTarget$outboundSchema` instead. */
    NewTarget$.outboundSchema = NewTarget$outboundSchema;
})(NewTarget$ || (NewTarget$ = {}));
/** @internal */
export const OldProjects$inboundSchema = z.object({
    projectName: z.string().optional(),
    projectId: z.string(),
});
/** @internal */
export const OldProjects$outboundSchema = z.object({
    projectName: z.string().optional(),
    projectId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OldProjects$;
(function (OldProjects$) {
    /** @deprecated use `OldProjects$inboundSchema` instead. */
    OldProjects$.inboundSchema = OldProjects$inboundSchema;
    /** @deprecated use `OldProjects$outboundSchema` instead. */
    OldProjects$.outboundSchema = OldProjects$outboundSchema;
})(OldProjects$ || (OldProjects$ = {}));
export function oldProjectsToJSON(oldProjects) {
    return JSON.stringify(OldProjects$outboundSchema.parse(oldProjects));
}
export function oldProjectsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OldProjects$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OldProjects' from JSON`);
}
/** @internal */
export const NewProjects$inboundSchema = z.object({
    projectName: z.string().optional(),
    projectId: z.string(),
});
/** @internal */
export const NewProjects$outboundSchema = z.object({
    projectName: z.string().optional(),
    projectId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NewProjects$;
(function (NewProjects$) {
    /** @deprecated use `NewProjects$inboundSchema` instead. */
    NewProjects$.inboundSchema = NewProjects$inboundSchema;
    /** @deprecated use `NewProjects$outboundSchema` instead. */
    NewProjects$.outboundSchema = NewProjects$outboundSchema;
})(NewProjects$ || (NewProjects$ = {}));
export function newProjectsToJSON(newProjects) {
    return JSON.stringify(NewProjects$outboundSchema.parse(newProjects));
}
export function newProjectsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => NewProjects$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NewProjects' from JSON`);
}
/** @internal */
export const UpdateDiff$inboundSchema = z.object({
    id: z.string(),
    key: z.string().optional(),
    newKey: z.string().optional(),
    oldTarget: z.array(OldTarget$inboundSchema).optional(),
    newTarget: z.array(NewTarget$inboundSchema).optional(),
    oldType: z.string().optional(),
    newType: z.string().optional(),
    oldProjects: z.array(z.lazy(() => OldProjects$inboundSchema)).optional(),
    newProjects: z.array(z.lazy(() => NewProjects$inboundSchema)).optional(),
    changedValue: z.boolean(),
});
/** @internal */
export const UpdateDiff$outboundSchema = z.object({
    id: z.string(),
    key: z.string().optional(),
    newKey: z.string().optional(),
    oldTarget: z.array(OldTarget$outboundSchema).optional(),
    newTarget: z.array(NewTarget$outboundSchema).optional(),
    oldType: z.string().optional(),
    newType: z.string().optional(),
    oldProjects: z.array(z.lazy(() => OldProjects$outboundSchema)).optional(),
    newProjects: z.array(z.lazy(() => NewProjects$outboundSchema)).optional(),
    changedValue: z.boolean(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateDiff$;
(function (UpdateDiff$) {
    /** @deprecated use `UpdateDiff$inboundSchema` instead. */
    UpdateDiff$.inboundSchema = UpdateDiff$inboundSchema;
    /** @deprecated use `UpdateDiff$outboundSchema` instead. */
    UpdateDiff$.outboundSchema = UpdateDiff$outboundSchema;
})(UpdateDiff$ || (UpdateDiff$ = {}));
export function updateDiffToJSON(updateDiff) {
    return JSON.stringify(UpdateDiff$outboundSchema.parse(updateDiff));
}
export function updateDiffFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateDiff$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateDiff' from JSON`);
}
/** @internal */
export const FiftySeven$inboundSchema = z.object({
    oldEnvVar: z.lazy(() => OldEnvVar$inboundSchema).optional(),
    newEnvVar: z.lazy(() => NewEnvVar$inboundSchema).optional(),
    updateDiff: z.lazy(() => UpdateDiff$inboundSchema).optional(),
});
/** @internal */
export const FiftySeven$outboundSchema = z.object({
    oldEnvVar: z.lazy(() => OldEnvVar$outboundSchema).optional(),
    newEnvVar: z.lazy(() => NewEnvVar$outboundSchema).optional(),
    updateDiff: z.lazy(() => UpdateDiff$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FiftySeven$;
(function (FiftySeven$) {
    /** @deprecated use `FiftySeven$inboundSchema` instead. */
    FiftySeven$.inboundSchema = FiftySeven$inboundSchema;
    /** @deprecated use `FiftySeven$outboundSchema` instead. */
    FiftySeven$.outboundSchema = FiftySeven$outboundSchema;
})(FiftySeven$ || (FiftySeven$ = {}));
export function fiftySevenToJSON(fiftySeven) {
    return JSON.stringify(FiftySeven$outboundSchema.parse(fiftySeven));
}
export function fiftySevenFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FiftySeven$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FiftySeven' from JSON`);
}
/** @internal */
export const PayloadType$inboundSchema = z
    .nativeEnum(PayloadType);
/** @internal */
export const PayloadType$outboundSchema = PayloadType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadType$;
(function (PayloadType$) {
    /** @deprecated use `PayloadType$inboundSchema` instead. */
    PayloadType$.inboundSchema = PayloadType$inboundSchema;
    /** @deprecated use `PayloadType$outboundSchema` instead. */
    PayloadType$.outboundSchema = PayloadType$outboundSchema;
})(PayloadType$ || (PayloadType$ = {}));
/** @internal */
export const PayloadTarget$inboundSchema = z.nativeEnum(PayloadTarget);
/** @internal */
export const PayloadTarget$outboundSchema = PayloadTarget$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadTarget$;
(function (PayloadTarget$) {
    /** @deprecated use `PayloadTarget$inboundSchema` instead. */
    PayloadTarget$.inboundSchema = PayloadTarget$inboundSchema;
    /** @deprecated use `PayloadTarget$outboundSchema` instead. */
    PayloadTarget$.outboundSchema = PayloadTarget$outboundSchema;
})(PayloadTarget$ || (PayloadTarget$ = {}));
/** @internal */
export const FiftySix$inboundSchema = z.object({
    created: z.string().datetime({ offset: true }).transform(v => new Date(v))
        .optional(),
    key: z.string().optional(),
    ownerId: z.nullable(z.string()).optional(),
    id: z.string().optional(),
    createdBy: z.nullable(z.string()).optional(),
    deletedBy: z.nullable(z.string()).optional(),
    updatedBy: z.nullable(z.string()).optional(),
    createdAt: z.number().optional(),
    deletedAt: z.number().optional(),
    updatedAt: z.number().optional(),
    value: z.string().optional(),
    projectId: z.array(z.string()).optional(),
    type: PayloadType$inboundSchema.optional(),
    target: z.array(PayloadTarget$inboundSchema).optional(),
    applyToAllCustomEnvironments: z.boolean().optional(),
    decrypted: z.boolean().optional(),
    comment: z.string().optional(),
    lastEditedByDisplayName: z.string().optional(),
    projectNames: z.array(z.string()).optional(),
});
/** @internal */
export const FiftySix$outboundSchema = z.object({
    created: z.date().transform(v => v.toISOString()).optional(),
    key: z.string().optional(),
    ownerId: z.nullable(z.string()).optional(),
    id: z.string().optional(),
    createdBy: z.nullable(z.string()).optional(),
    deletedBy: z.nullable(z.string()).optional(),
    updatedBy: z.nullable(z.string()).optional(),
    createdAt: z.number().optional(),
    deletedAt: z.number().optional(),
    updatedAt: z.number().optional(),
    value: z.string().optional(),
    projectId: z.array(z.string()).optional(),
    type: PayloadType$outboundSchema.optional(),
    target: z.array(PayloadTarget$outboundSchema).optional(),
    applyToAllCustomEnvironments: z.boolean().optional(),
    decrypted: z.boolean().optional(),
    comment: z.string().optional(),
    lastEditedByDisplayName: z.string().optional(),
    projectNames: z.array(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FiftySix$;
(function (FiftySix$) {
    /** @deprecated use `FiftySix$inboundSchema` instead. */
    FiftySix$.inboundSchema = FiftySix$inboundSchema;
    /** @deprecated use `FiftySix$outboundSchema` instead. */
    FiftySix$.outboundSchema = FiftySix$outboundSchema;
})(FiftySix$ || (FiftySix$ = {}));
export function fiftySixToJSON(fiftySix) {
    return JSON.stringify(FiftySix$outboundSchema.parse(fiftySix));
}
export function fiftySixFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FiftySix$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FiftySix' from JSON`);
}
/** @internal */
export const Target$inboundSchema = z
    .union([z.string(), z.array(z.string())]);
/** @internal */
export const Target$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Target$;
(function (Target$) {
    /** @deprecated use `Target$inboundSchema` instead. */
    Target$.inboundSchema = Target$inboundSchema;
    /** @deprecated use `Target$outboundSchema` instead. */
    Target$.outboundSchema = Target$outboundSchema;
})(Target$ || (Target$ = {}));
export function targetToJSON(target) {
    return JSON.stringify(Target$outboundSchema.parse(target));
}
export function targetFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Target$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Target' from JSON`);
}
/** @internal */
export const FiftyFive$inboundSchema = z.object({
    key: z.string().optional(),
    projectId: z.string().optional(),
    projectName: z.string().optional(),
    target: z.union([z.string(), z.array(z.string())]).optional(),
    id: z.string().optional(),
    gitBranch: z.string().optional(),
    edgeConfigId: z.nullable(z.string()).optional(),
    edgeConfigTokenId: z.nullable(z.string()).optional(),
    source: z.string().optional(),
});
/** @internal */
export const FiftyFive$outboundSchema = z.object({
    key: z.string().optional(),
    projectId: z.string().optional(),
    projectName: z.string().optional(),
    target: z.union([z.string(), z.array(z.string())]).optional(),
    id: z.string().optional(),
    gitBranch: z.string().optional(),
    edgeConfigId: z.nullable(z.string()).optional(),
    edgeConfigTokenId: z.nullable(z.string()).optional(),
    source: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FiftyFive$;
(function (FiftyFive$) {
    /** @deprecated use `FiftyFive$inboundSchema` instead. */
    FiftyFive$.inboundSchema = FiftyFive$inboundSchema;
    /** @deprecated use `FiftyFive$outboundSchema` instead. */
    FiftyFive$.outboundSchema = FiftyFive$outboundSchema;
})(FiftyFive$ || (FiftyFive$ = {}));
export function fiftyFiveToJSON(fiftyFive) {
    return JSON.stringify(FiftyFive$outboundSchema.parse(fiftyFive));
}
export function fiftyFiveFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FiftyFive$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FiftyFive' from JSON`);
}
/** @internal */
export const FiftyFour$inboundSchema = z.object({
    email: z.string(),
    name: z.string(),
});
/** @internal */
export const FiftyFour$outboundSchema = z.object({
    email: z.string(),
    name: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FiftyFour$;
(function (FiftyFour$) {
    /** @deprecated use `FiftyFour$inboundSchema` instead. */
    FiftyFour$.inboundSchema = FiftyFour$inboundSchema;
    /** @deprecated use `FiftyFour$outboundSchema` instead. */
    FiftyFour$.outboundSchema = FiftyFour$outboundSchema;
})(FiftyFour$ || (FiftyFour$ = {}));
export function fiftyFourToJSON(fiftyFour) {
    return JSON.stringify(FiftyFour$outboundSchema.parse(fiftyFour));
}
export function fiftyFourFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FiftyFour$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FiftyFour' from JSON`);
}
/** @internal */
export const FiftyThree$inboundSchema = z.object({
    sha: z.string(),
    gitUserPlatform: z.string(),
    projectName: z.string(),
});
/** @internal */
export const FiftyThree$outboundSchema = z.object({
    sha: z.string(),
    gitUserPlatform: z.string(),
    projectName: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FiftyThree$;
(function (FiftyThree$) {
    /** @deprecated use `FiftyThree$inboundSchema` instead. */
    FiftyThree$.inboundSchema = FiftyThree$inboundSchema;
    /** @deprecated use `FiftyThree$outboundSchema` instead. */
    FiftyThree$.outboundSchema = FiftyThree$outboundSchema;
})(FiftyThree$ || (FiftyThree$ = {}));
export function fiftyThreeToJSON(fiftyThree) {
    return JSON.stringify(FiftyThree$outboundSchema.parse(fiftyThree));
}
export function fiftyThreeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FiftyThree$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FiftyThree' from JSON`);
}
/** @internal */
export const FiftyTwo$inboundSchema = z.object({
    name: z.string(),
    price: z.number().optional(),
    currency: z.string().optional(),
});
/** @internal */
export const FiftyTwo$outboundSchema = z.object({
    name: z.string(),
    price: z.number().optional(),
    currency: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FiftyTwo$;
(function (FiftyTwo$) {
    /** @deprecated use `FiftyTwo$inboundSchema` instead. */
    FiftyTwo$.inboundSchema = FiftyTwo$inboundSchema;
    /** @deprecated use `FiftyTwo$outboundSchema` instead. */
    FiftyTwo$.outboundSchema = FiftyTwo$outboundSchema;
})(FiftyTwo$ || (FiftyTwo$ = {}));
export function fiftyTwoToJSON(fiftyTwo) {
    return JSON.stringify(FiftyTwo$outboundSchema.parse(fiftyTwo));
}
export function fiftyTwoFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FiftyTwo$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FiftyTwo' from JSON`);
}
/** @internal */
export const FiftyOne$inboundSchema = z.object({
    renew: z.boolean().optional(),
    domain: z.string(),
});
/** @internal */
export const FiftyOne$outboundSchema = z.object({
    renew: z.boolean().optional(),
    domain: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FiftyOne$;
(function (FiftyOne$) {
    /** @deprecated use `FiftyOne$inboundSchema` instead. */
    FiftyOne$.inboundSchema = FiftyOne$inboundSchema;
    /** @deprecated use `FiftyOne$outboundSchema` instead. */
    FiftyOne$.outboundSchema = FiftyOne$outboundSchema;
})(FiftyOne$ || (FiftyOne$ = {}));
export function fiftyOneToJSON(fiftyOne) {
    return JSON.stringify(FiftyOne$outboundSchema.parse(fiftyOne));
}
export function fiftyOneFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FiftyOne$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FiftyOne' from JSON`);
}
/** @internal */
export const Fifty$inboundSchema = z
    .object({
    name: z.string(),
    destinationId: z.string(),
    destinationName: z.string(),
});
/** @internal */
export const Fifty$outboundSchema = z.object({
    name: z.string(),
    destinationId: z.string(),
    destinationName: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Fifty$;
(function (Fifty$) {
    /** @deprecated use `Fifty$inboundSchema` instead. */
    Fifty$.inboundSchema = Fifty$inboundSchema;
    /** @deprecated use `Fifty$outboundSchema` instead. */
    Fifty$.outboundSchema = Fifty$outboundSchema;
})(Fifty$ || (Fifty$ = {}));
export function fiftyToJSON(fifty) {
    return JSON.stringify(Fifty$outboundSchema.parse(fifty));
}
export function fiftyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Fifty$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Fifty' from JSON`);
}
/** @internal */
export const FortyNine$inboundSchema = z.object({
    name: z.string(),
    destinationId: z.nullable(z.string()),
    destinationName: z.nullable(z.string()),
});
/** @internal */
export const FortyNine$outboundSchema = z.object({
    name: z.string(),
    destinationId: z.nullable(z.string()),
    destinationName: z.nullable(z.string()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FortyNine$;
(function (FortyNine$) {
    /** @deprecated use `FortyNine$inboundSchema` instead. */
    FortyNine$.inboundSchema = FortyNine$inboundSchema;
    /** @deprecated use `FortyNine$outboundSchema` instead. */
    FortyNine$.outboundSchema = FortyNine$outboundSchema;
})(FortyNine$ || (FortyNine$ = {}));
export function fortyNineToJSON(fortyNine) {
    return JSON.stringify(FortyNine$outboundSchema.parse(fortyNine));
}
export function fortyNineFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FortyNine$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FortyNine' from JSON`);
}
/** @internal */
export const FortyEight$inboundSchema = z.object({
    name: z.string(),
    fromId: z.nullable(z.string()),
    fromName: z.nullable(z.string()),
});
/** @internal */
export const FortyEight$outboundSchema = z.object({
    name: z.string(),
    fromId: z.nullable(z.string()),
    fromName: z.nullable(z.string()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FortyEight$;
(function (FortyEight$) {
    /** @deprecated use `FortyEight$inboundSchema` instead. */
    FortyEight$.inboundSchema = FortyEight$inboundSchema;
    /** @deprecated use `FortyEight$outboundSchema` instead. */
    FortyEight$.outboundSchema = FortyEight$outboundSchema;
})(FortyEight$ || (FortyEight$ = {}));
export function fortyEightToJSON(fortyEight) {
    return JSON.stringify(FortyEight$outboundSchema.parse(fortyEight));
}
export function fortyEightFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FortyEight$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FortyEight' from JSON`);
}
/** @internal */
export const FortySeven$inboundSchema = z.object({
    domainId: z.string(),
    name: z.string(),
});
/** @internal */
export const FortySeven$outboundSchema = z.object({
    domainId: z.string(),
    name: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FortySeven$;
(function (FortySeven$) {
    /** @deprecated use `FortySeven$inboundSchema` instead. */
    FortySeven$.inboundSchema = FortySeven$inboundSchema;
    /** @deprecated use `FortySeven$outboundSchema` instead. */
    FortySeven$.outboundSchema = FortySeven$outboundSchema;
})(FortySeven$ || (FortySeven$ = {}));
export function fortySevenToJSON(fortySeven) {
    return JSON.stringify(FortySeven$outboundSchema.parse(fortySeven));
}
export function fortySevenFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FortySeven$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FortySeven' from JSON`);
}
/** @internal */
export const UserEventPayload46OldTeam$inboundSchema = z.object({
    name: z.string(),
});
/** @internal */
export const UserEventPayload46OldTeam$outboundSchema = z.object({
    name: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload46OldTeam$;
(function (UserEventPayload46OldTeam$) {
    /** @deprecated use `UserEventPayload46OldTeam$inboundSchema` instead. */
    UserEventPayload46OldTeam$.inboundSchema = UserEventPayload46OldTeam$inboundSchema;
    /** @deprecated use `UserEventPayload46OldTeam$outboundSchema` instead. */
    UserEventPayload46OldTeam$.outboundSchema = UserEventPayload46OldTeam$outboundSchema;
})(UserEventPayload46OldTeam$ || (UserEventPayload46OldTeam$ = {}));
export function userEventPayload46OldTeamToJSON(userEventPayload46OldTeam) {
    return JSON.stringify(UserEventPayload46OldTeam$outboundSchema.parse(userEventPayload46OldTeam));
}
export function userEventPayload46OldTeamFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayload46OldTeam$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayload46OldTeam' from JSON`);
}
/** @internal */
export const UserEventPayload46NewTeam$inboundSchema = z.object({
    name: z.string(),
});
/** @internal */
export const UserEventPayload46NewTeam$outboundSchema = z.object({
    name: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload46NewTeam$;
(function (UserEventPayload46NewTeam$) {
    /** @deprecated use `UserEventPayload46NewTeam$inboundSchema` instead. */
    UserEventPayload46NewTeam$.inboundSchema = UserEventPayload46NewTeam$inboundSchema;
    /** @deprecated use `UserEventPayload46NewTeam$outboundSchema` instead. */
    UserEventPayload46NewTeam$.outboundSchema = UserEventPayload46NewTeam$outboundSchema;
})(UserEventPayload46NewTeam$ || (UserEventPayload46NewTeam$ = {}));
export function userEventPayload46NewTeamToJSON(userEventPayload46NewTeam) {
    return JSON.stringify(UserEventPayload46NewTeam$outboundSchema.parse(userEventPayload46NewTeam));
}
export function userEventPayload46NewTeamFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayload46NewTeam$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayload46NewTeam' from JSON`);
}
/** @internal */
export const FortySix$inboundSchema = z.object({
    name: z.string(),
    oldTeam: z.lazy(() => UserEventPayload46OldTeam$inboundSchema).optional(),
    newTeam: z.lazy(() => UserEventPayload46NewTeam$inboundSchema).optional(),
});
/** @internal */
export const FortySix$outboundSchema = z.object({
    name: z.string(),
    oldTeam: z.lazy(() => UserEventPayload46OldTeam$outboundSchema).optional(),
    newTeam: z.lazy(() => UserEventPayload46NewTeam$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FortySix$;
(function (FortySix$) {
    /** @deprecated use `FortySix$inboundSchema` instead. */
    FortySix$.inboundSchema = FortySix$inboundSchema;
    /** @deprecated use `FortySix$outboundSchema` instead. */
    FortySix$.outboundSchema = FortySix$outboundSchema;
})(FortySix$ || (FortySix$ = {}));
export function fortySixToJSON(fortySix) {
    return JSON.stringify(FortySix$outboundSchema.parse(fortySix));
}
export function fortySixFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FortySix$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FortySix' from JSON`);
}
/** @internal */
export const FortyFive$inboundSchema = z.object({
    name: z.string(),
    userId: z.string(),
    teamId: z.string(),
    ownerName: z.string(),
});
/** @internal */
export const FortyFive$outboundSchema = z.object({
    name: z.string(),
    userId: z.string(),
    teamId: z.string(),
    ownerName: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FortyFive$;
(function (FortyFive$) {
    /** @deprecated use `FortyFive$inboundSchema` instead. */
    FortyFive$.inboundSchema = FortyFive$inboundSchema;
    /** @deprecated use `FortyFive$outboundSchema` instead. */
    FortyFive$.outboundSchema = FortyFive$outboundSchema;
})(FortyFive$ || (FortyFive$ = {}));
export function fortyFiveToJSON(fortyFive) {
    return JSON.stringify(FortyFive$outboundSchema.parse(fortyFive));
}
export function fortyFiveFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FortyFive$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FortyFive' from JSON`);
}
/** @internal */
export const FortyFour$inboundSchema = z.object({
    name: z.string(),
    cdnEnabled: z.boolean(),
});
/** @internal */
export const FortyFour$outboundSchema = z.object({
    name: z.string(),
    cdnEnabled: z.boolean(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FortyFour$;
(function (FortyFour$) {
    /** @deprecated use `FortyFour$inboundSchema` instead. */
    FortyFour$.inboundSchema = FortyFour$inboundSchema;
    /** @deprecated use `FortyFour$outboundSchema` instead. */
    FortyFour$.outboundSchema = FortyFour$outboundSchema;
})(FortyFour$ || (FortyFour$ = {}));
export function fortyFourToJSON(fortyFour) {
    return JSON.stringify(FortyFour$outboundSchema.parse(fortyFour));
}
export function fortyFourFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FortyFour$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FortyFour' from JSON`);
}
/** @internal */
export const FortyThree$inboundSchema = z.object({
    name: z.string(),
    price: z.number(),
    currency: z.string().optional(),
});
/** @internal */
export const FortyThree$outboundSchema = z.object({
    name: z.string(),
    price: z.number(),
    currency: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FortyThree$;
(function (FortyThree$) {
    /** @deprecated use `FortyThree$inboundSchema` instead. */
    FortyThree$.inboundSchema = FortyThree$inboundSchema;
    /** @deprecated use `FortyThree$outboundSchema` instead. */
    FortyThree$.outboundSchema = FortyThree$outboundSchema;
})(FortyThree$ || (FortyThree$ = {}));
export function fortyThreeToJSON(fortyThree) {
    return JSON.stringify(FortyThree$outboundSchema.parse(fortyThree));
}
export function fortyThreeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FortyThree$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FortyThree' from JSON`);
}
/** @internal */
export const FortyTwo$inboundSchema = z.object({
    name: z.string(),
});
/** @internal */
export const FortyTwo$outboundSchema = z.object({
    name: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FortyTwo$;
(function (FortyTwo$) {
    /** @deprecated use `FortyTwo$inboundSchema` instead. */
    FortyTwo$.inboundSchema = FortyTwo$inboundSchema;
    /** @deprecated use `FortyTwo$outboundSchema` instead. */
    FortyTwo$.outboundSchema = FortyTwo$outboundSchema;
})(FortyTwo$ || (FortyTwo$ = {}));
export function fortyTwoToJSON(fortyTwo) {
    return JSON.stringify(FortyTwo$outboundSchema.parse(fortyTwo));
}
export function fortyTwoFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FortyTwo$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FortyTwo' from JSON`);
}
/** @internal */
export const FortyOne$inboundSchema = z.object({
    id: z.string(),
    value: z.string(),
    name: z.string(),
    domain: z.string(),
    type: z.string(),
});
/** @internal */
export const FortyOne$outboundSchema = z.object({
    id: z.string(),
    value: z.string(),
    name: z.string(),
    domain: z.string(),
    type: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FortyOne$;
(function (FortyOne$) {
    /** @deprecated use `FortyOne$inboundSchema` instead. */
    FortyOne$.inboundSchema = FortyOne$inboundSchema;
    /** @deprecated use `FortyOne$outboundSchema` instead. */
    FortyOne$.outboundSchema = FortyOne$outboundSchema;
})(FortyOne$ || (FortyOne$ = {}));
export function fortyOneToJSON(fortyOne) {
    return JSON.stringify(FortyOne$outboundSchema.parse(fortyOne));
}
export function fortyOneFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FortyOne$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FortyOne' from JSON`);
}
/** @internal */
export const Forty$inboundSchema = z
    .object({
    id: z.string(),
    value: z.string(),
    name: z.string(),
    domain: z.string(),
    type: z.string(),
    mxPriority: z.number().optional(),
});
/** @internal */
export const Forty$outboundSchema = z.object({
    id: z.string(),
    value: z.string(),
    name: z.string(),
    domain: z.string(),
    type: z.string(),
    mxPriority: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Forty$;
(function (Forty$) {
    /** @deprecated use `Forty$inboundSchema` instead. */
    Forty$.inboundSchema = Forty$inboundSchema;
    /** @deprecated use `Forty$outboundSchema` instead. */
    Forty$.outboundSchema = Forty$outboundSchema;
})(Forty$ || (Forty$ = {}));
export function fortyToJSON(forty) {
    return JSON.stringify(Forty$outboundSchema.parse(forty));
}
export function fortyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Forty$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Forty' from JSON`);
}
/** @internal */
export const UserEventPayloadDeployment$inboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    url: z.string(),
    meta: z.record(z.string()),
});
/** @internal */
export const UserEventPayloadDeployment$outboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    url: z.string(),
    meta: z.record(z.string()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayloadDeployment$;
(function (UserEventPayloadDeployment$) {
    /** @deprecated use `UserEventPayloadDeployment$inboundSchema` instead. */
    UserEventPayloadDeployment$.inboundSchema = UserEventPayloadDeployment$inboundSchema;
    /** @deprecated use `UserEventPayloadDeployment$outboundSchema` instead. */
    UserEventPayloadDeployment$.outboundSchema = UserEventPayloadDeployment$outboundSchema;
})(UserEventPayloadDeployment$ || (UserEventPayloadDeployment$ = {}));
export function userEventPayloadDeploymentToJSON(userEventPayloadDeployment) {
    return JSON.stringify(UserEventPayloadDeployment$outboundSchema.parse(userEventPayloadDeployment));
}
export function userEventPayloadDeploymentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayloadDeployment$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayloadDeployment' from JSON`);
}
/** @internal */
export const ThirtyNine$inboundSchema = z.object({
    deployment: z.lazy(() => UserEventPayloadDeployment$inboundSchema),
    deploymentId: z.string(),
    url: z.string(),
});
/** @internal */
export const ThirtyNine$outboundSchema = z.object({
    deployment: z.lazy(() => UserEventPayloadDeployment$outboundSchema),
    deploymentId: z.string(),
    url: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ThirtyNine$;
(function (ThirtyNine$) {
    /** @deprecated use `ThirtyNine$inboundSchema` instead. */
    ThirtyNine$.inboundSchema = ThirtyNine$inboundSchema;
    /** @deprecated use `ThirtyNine$outboundSchema` instead. */
    ThirtyNine$.outboundSchema = ThirtyNine$outboundSchema;
})(ThirtyNine$ || (ThirtyNine$ = {}));
export function thirtyNineToJSON(thirtyNine) {
    return JSON.stringify(ThirtyNine$outboundSchema.parse(thirtyNine));
}
export function thirtyNineFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ThirtyNine$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ThirtyNine' from JSON`);
}
/** @internal */
export const UserEventPayloadOldTeam$inboundSchema = z.object({
    name: z.string(),
});
/** @internal */
export const UserEventPayloadOldTeam$outboundSchema = z.object({
    name: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayloadOldTeam$;
(function (UserEventPayloadOldTeam$) {
    /** @deprecated use `UserEventPayloadOldTeam$inboundSchema` instead. */
    UserEventPayloadOldTeam$.inboundSchema = UserEventPayloadOldTeam$inboundSchema;
    /** @deprecated use `UserEventPayloadOldTeam$outboundSchema` instead. */
    UserEventPayloadOldTeam$.outboundSchema = UserEventPayloadOldTeam$outboundSchema;
})(UserEventPayloadOldTeam$ || (UserEventPayloadOldTeam$ = {}));
export function userEventPayloadOldTeamToJSON(userEventPayloadOldTeam) {
    return JSON.stringify(UserEventPayloadOldTeam$outboundSchema.parse(userEventPayloadOldTeam));
}
export function userEventPayloadOldTeamFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayloadOldTeam$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayloadOldTeam' from JSON`);
}
/** @internal */
export const UserEventPayloadNewTeam$inboundSchema = z.object({
    name: z.string(),
});
/** @internal */
export const UserEventPayloadNewTeam$outboundSchema = z.object({
    name: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayloadNewTeam$;
(function (UserEventPayloadNewTeam$) {
    /** @deprecated use `UserEventPayloadNewTeam$inboundSchema` instead. */
    UserEventPayloadNewTeam$.inboundSchema = UserEventPayloadNewTeam$inboundSchema;
    /** @deprecated use `UserEventPayloadNewTeam$outboundSchema` instead. */
    UserEventPayloadNewTeam$.outboundSchema = UserEventPayloadNewTeam$outboundSchema;
})(UserEventPayloadNewTeam$ || (UserEventPayloadNewTeam$ = {}));
export function userEventPayloadNewTeamToJSON(userEventPayloadNewTeam) {
    return JSON.stringify(UserEventPayloadNewTeam$outboundSchema.parse(userEventPayloadNewTeam));
}
export function userEventPayloadNewTeamFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayloadNewTeam$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayloadNewTeam' from JSON`);
}
/** @internal */
export const ThirtyEight$inboundSchema = z.object({
    url: z.string(),
    oldTeam: z.lazy(() => UserEventPayloadOldTeam$inboundSchema).optional(),
    newTeam: z.lazy(() => UserEventPayloadNewTeam$inboundSchema).optional(),
});
/** @internal */
export const ThirtyEight$outboundSchema = z.object({
    url: z.string(),
    oldTeam: z.lazy(() => UserEventPayloadOldTeam$outboundSchema).optional(),
    newTeam: z.lazy(() => UserEventPayloadNewTeam$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ThirtyEight$;
(function (ThirtyEight$) {
    /** @deprecated use `ThirtyEight$inboundSchema` instead. */
    ThirtyEight$.inboundSchema = ThirtyEight$inboundSchema;
    /** @deprecated use `ThirtyEight$outboundSchema` instead. */
    ThirtyEight$.outboundSchema = ThirtyEight$outboundSchema;
})(ThirtyEight$ || (ThirtyEight$ = {}));
export function thirtyEightToJSON(thirtyEight) {
    return JSON.stringify(ThirtyEight$outboundSchema.parse(thirtyEight));
}
export function thirtyEightFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ThirtyEight$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ThirtyEight' from JSON`);
}
/** @internal */
export const PayloadDeployment$inboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    url: z.string(),
    meta: z.record(z.string()),
});
/** @internal */
export const PayloadDeployment$outboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    url: z.string(),
    meta: z.record(z.string()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadDeployment$;
(function (PayloadDeployment$) {
    /** @deprecated use `PayloadDeployment$inboundSchema` instead. */
    PayloadDeployment$.inboundSchema = PayloadDeployment$inboundSchema;
    /** @deprecated use `PayloadDeployment$outboundSchema` instead. */
    PayloadDeployment$.outboundSchema = PayloadDeployment$outboundSchema;
})(PayloadDeployment$ || (PayloadDeployment$ = {}));
export function payloadDeploymentToJSON(payloadDeployment) {
    return JSON.stringify(PayloadDeployment$outboundSchema.parse(payloadDeployment));
}
export function payloadDeploymentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadDeployment$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadDeployment' from JSON`);
}
/** @internal */
export const ThirtySeven$inboundSchema = z.object({
    name: z.string().optional(),
    alias: z.array(z.string()).optional(),
    target: z.nullable(z.string()).optional(),
    deployment: z.nullable(z.lazy(() => PayloadDeployment$inboundSchema))
        .optional(),
    url: z.string(),
    forced: z.boolean().optional(),
    deploymentId: z.string().optional(),
    plan: z.string().optional(),
    project: z.string().optional(),
    projectId: z.string().optional(),
    regions: z.array(z.string()).optional(),
    type: z.string().optional(),
});
/** @internal */
export const ThirtySeven$outboundSchema = z.object({
    name: z.string().optional(),
    alias: z.array(z.string()).optional(),
    target: z.nullable(z.string()).optional(),
    deployment: z.nullable(z.lazy(() => PayloadDeployment$outboundSchema))
        .optional(),
    url: z.string(),
    forced: z.boolean().optional(),
    deploymentId: z.string().optional(),
    plan: z.string().optional(),
    project: z.string().optional(),
    projectId: z.string().optional(),
    regions: z.array(z.string()).optional(),
    type: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ThirtySeven$;
(function (ThirtySeven$) {
    /** @deprecated use `ThirtySeven$inboundSchema` instead. */
    ThirtySeven$.inboundSchema = ThirtySeven$inboundSchema;
    /** @deprecated use `ThirtySeven$outboundSchema` instead. */
    ThirtySeven$.outboundSchema = ThirtySeven$outboundSchema;
})(ThirtySeven$ || (ThirtySeven$ = {}));
export function thirtySevenToJSON(thirtySeven) {
    return JSON.stringify(ThirtySeven$outboundSchema.parse(thirtySeven));
}
export function thirtySevenFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ThirtySeven$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ThirtySeven' from JSON`);
}
/** @internal */
export const UserEventPayload36Project$inboundSchema = z.object({
    name: z.string(),
});
/** @internal */
export const UserEventPayload36Project$outboundSchema = z.object({
    name: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload36Project$;
(function (UserEventPayload36Project$) {
    /** @deprecated use `UserEventPayload36Project$inboundSchema` instead. */
    UserEventPayload36Project$.inboundSchema = UserEventPayload36Project$inboundSchema;
    /** @deprecated use `UserEventPayload36Project$outboundSchema` instead. */
    UserEventPayload36Project$.outboundSchema = UserEventPayload36Project$outboundSchema;
})(UserEventPayload36Project$ || (UserEventPayload36Project$ = {}));
export function userEventPayload36ProjectToJSON(userEventPayload36Project) {
    return JSON.stringify(UserEventPayload36Project$outboundSchema.parse(userEventPayload36Project));
}
export function userEventPayload36ProjectFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayload36Project$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayload36Project' from JSON`);
}
/** @internal */
export const DeployHook$inboundSchema = z.object({
    createdAt: z.number(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
});
/** @internal */
export const DeployHook$outboundSchema = z.object({
    createdAt: z.number(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DeployHook$;
(function (DeployHook$) {
    /** @deprecated use `DeployHook$inboundSchema` instead. */
    DeployHook$.inboundSchema = DeployHook$inboundSchema;
    /** @deprecated use `DeployHook$outboundSchema` instead. */
    DeployHook$.outboundSchema = DeployHook$outboundSchema;
})(DeployHook$ || (DeployHook$ = {}));
export function deployHookToJSON(deployHook) {
    return JSON.stringify(DeployHook$outboundSchema.parse(deployHook));
}
export function deployHookFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DeployHook$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeployHook' from JSON`);
}
/** @internal */
export const Job$inboundSchema = z
    .object({
    deployHook: z.lazy(() => DeployHook$inboundSchema),
    state: z.string(),
});
/** @internal */
export const Job$outboundSchema = z
    .object({
    deployHook: z.lazy(() => DeployHook$outboundSchema),
    state: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Job$;
(function (Job$) {
    /** @deprecated use `Job$inboundSchema` instead. */
    Job$.inboundSchema = Job$inboundSchema;
    /** @deprecated use `Job$outboundSchema` instead. */
    Job$.outboundSchema = Job$outboundSchema;
})(Job$ || (Job$ = {}));
export function jobToJSON(job) {
    return JSON.stringify(Job$outboundSchema.parse(job));
}
export function jobFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Job$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Job' from JSON`);
}
/** @internal */
export const ThirtySix$inboundSchema = z.object({
    project: z.lazy(() => UserEventPayload36Project$inboundSchema),
    job: z.lazy(() => Job$inboundSchema),
});
/** @internal */
export const ThirtySix$outboundSchema = z.object({
    project: z.lazy(() => UserEventPayload36Project$outboundSchema),
    job: z.lazy(() => Job$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ThirtySix$;
(function (ThirtySix$) {
    /** @deprecated use `ThirtySix$inboundSchema` instead. */
    ThirtySix$.inboundSchema = ThirtySix$inboundSchema;
    /** @deprecated use `ThirtySix$outboundSchema` instead. */
    ThirtySix$.outboundSchema = ThirtySix$outboundSchema;
})(ThirtySix$ || (ThirtySix$ = {}));
export function thirtySixToJSON(thirtySix) {
    return JSON.stringify(ThirtySix$outboundSchema.parse(thirtySix));
}
export function thirtySixFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ThirtySix$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ThirtySix' from JSON`);
}
/** @internal */
export const ThirtyFive$inboundSchema = z.object({
    bitbucketEmail: z.string(),
    bitbucketLogin: z.string(),
    bitbucketName: z.string().optional(),
});
/** @internal */
export const ThirtyFive$outboundSchema = z.object({
    bitbucketEmail: z.string(),
    bitbucketLogin: z.string(),
    bitbucketName: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ThirtyFive$;
(function (ThirtyFive$) {
    /** @deprecated use `ThirtyFive$inboundSchema` instead. */
    ThirtyFive$.inboundSchema = ThirtyFive$inboundSchema;
    /** @deprecated use `ThirtyFive$outboundSchema` instead. */
    ThirtyFive$.outboundSchema = ThirtyFive$outboundSchema;
})(ThirtyFive$ || (ThirtyFive$ = {}));
export function thirtyFiveToJSON(thirtyFive) {
    return JSON.stringify(ThirtyFive$outboundSchema.parse(thirtyFive));
}
export function thirtyFiveFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ThirtyFive$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ThirtyFive' from JSON`);
}
/** @internal */
export const ThirtyFour$inboundSchema = z.object({
    gitlabLogin: z.string(),
    gitlabEmail: z.string(),
    gitlabName: z.string().optional(),
});
/** @internal */
export const ThirtyFour$outboundSchema = z.object({
    gitlabLogin: z.string(),
    gitlabEmail: z.string(),
    gitlabName: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ThirtyFour$;
(function (ThirtyFour$) {
    /** @deprecated use `ThirtyFour$inboundSchema` instead. */
    ThirtyFour$.inboundSchema = ThirtyFour$inboundSchema;
    /** @deprecated use `ThirtyFour$outboundSchema` instead. */
    ThirtyFour$.outboundSchema = ThirtyFour$outboundSchema;
})(ThirtyFour$ || (ThirtyFour$ = {}));
export function thirtyFourToJSON(thirtyFour) {
    return JSON.stringify(ThirtyFour$outboundSchema.parse(thirtyFour));
}
export function thirtyFourFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ThirtyFour$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ThirtyFour' from JSON`);
}
/** @internal */
export const ThirtyThree$inboundSchema = z.object({
    githubLogin: z.string(),
});
/** @internal */
export const ThirtyThree$outboundSchema = z.object({
    githubLogin: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ThirtyThree$;
(function (ThirtyThree$) {
    /** @deprecated use `ThirtyThree$inboundSchema` instead. */
    ThirtyThree$.inboundSchema = ThirtyThree$inboundSchema;
    /** @deprecated use `ThirtyThree$outboundSchema` instead. */
    ThirtyThree$.outboundSchema = ThirtyThree$outboundSchema;
})(ThirtyThree$ || (ThirtyThree$ = {}));
export function thirtyThreeToJSON(thirtyThree) {
    return JSON.stringify(ThirtyThree$outboundSchema.parse(thirtyThree));
}
export function thirtyThreeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ThirtyThree$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ThirtyThree' from JSON`);
}
/** @internal */
export const UserEventPayload32Team$inboundSchema = z.object({
    id: z.string(),
    name: z.string(),
});
/** @internal */
export const UserEventPayload32Team$outboundSchema = z.object({
    id: z.string(),
    name: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload32Team$;
(function (UserEventPayload32Team$) {
    /** @deprecated use `UserEventPayload32Team$inboundSchema` instead. */
    UserEventPayload32Team$.inboundSchema = UserEventPayload32Team$inboundSchema;
    /** @deprecated use `UserEventPayload32Team$outboundSchema` instead. */
    UserEventPayload32Team$.outboundSchema = UserEventPayload32Team$outboundSchema;
})(UserEventPayload32Team$ || (UserEventPayload32Team$ = {}));
export function userEventPayload32TeamToJSON(userEventPayload32Team) {
    return JSON.stringify(UserEventPayload32Team$outboundSchema.parse(userEventPayload32Team));
}
export function userEventPayload32TeamFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayload32Team$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayload32Team' from JSON`);
}
/** @internal */
export const UserEventPayload32Configuration$inboundSchema = z.object({
    id: z.string(),
    name: z.string().optional(),
});
/** @internal */
export const UserEventPayload32Configuration$outboundSchema = z.object({
    id: z.string(),
    name: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload32Configuration$;
(function (UserEventPayload32Configuration$) {
    /** @deprecated use `UserEventPayload32Configuration$inboundSchema` instead. */
    UserEventPayload32Configuration$.inboundSchema = UserEventPayload32Configuration$inboundSchema;
    /** @deprecated use `UserEventPayload32Configuration$outboundSchema` instead. */
    UserEventPayload32Configuration$.outboundSchema = UserEventPayload32Configuration$outboundSchema;
})(UserEventPayload32Configuration$ || (UserEventPayload32Configuration$ = {}));
export function userEventPayload32ConfigurationToJSON(userEventPayload32Configuration) {
    return JSON.stringify(UserEventPayload32Configuration$outboundSchema.parse(userEventPayload32Configuration));
}
export function userEventPayload32ConfigurationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayload32Configuration$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayload32Configuration' from JSON`);
}
/** @internal */
export const ThirtyTwo$inboundSchema = z.object({
    team: z.lazy(() => UserEventPayload32Team$inboundSchema),
    configuration: z.lazy(() => UserEventPayload32Configuration$inboundSchema),
    newName: z.string(),
});
/** @internal */
export const ThirtyTwo$outboundSchema = z.object({
    team: z.lazy(() => UserEventPayload32Team$outboundSchema),
    configuration: z.lazy(() => UserEventPayload32Configuration$outboundSchema),
    newName: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ThirtyTwo$;
(function (ThirtyTwo$) {
    /** @deprecated use `ThirtyTwo$inboundSchema` instead. */
    ThirtyTwo$.inboundSchema = ThirtyTwo$inboundSchema;
    /** @deprecated use `ThirtyTwo$outboundSchema` instead. */
    ThirtyTwo$.outboundSchema = ThirtyTwo$outboundSchema;
})(ThirtyTwo$ || (ThirtyTwo$ = {}));
export function thirtyTwoToJSON(thirtyTwo) {
    return JSON.stringify(ThirtyTwo$outboundSchema.parse(thirtyTwo));
}
export function thirtyTwoFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ThirtyTwo$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ThirtyTwo' from JSON`);
}
/** @internal */
export const UserEventPayloadTeam$inboundSchema = z.object({
    id: z.string(),
    name: z.string(),
});
/** @internal */
export const UserEventPayloadTeam$outboundSchema = z.object({
    id: z.string(),
    name: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayloadTeam$;
(function (UserEventPayloadTeam$) {
    /** @deprecated use `UserEventPayloadTeam$inboundSchema` instead. */
    UserEventPayloadTeam$.inboundSchema = UserEventPayloadTeam$inboundSchema;
    /** @deprecated use `UserEventPayloadTeam$outboundSchema` instead. */
    UserEventPayloadTeam$.outboundSchema = UserEventPayloadTeam$outboundSchema;
})(UserEventPayloadTeam$ || (UserEventPayloadTeam$ = {}));
export function userEventPayloadTeamToJSON(userEventPayloadTeam) {
    return JSON.stringify(UserEventPayloadTeam$outboundSchema.parse(userEventPayloadTeam));
}
export function userEventPayloadTeamFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayloadTeam$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayloadTeam' from JSON`);
}
/** @internal */
export const UserEventPayloadConfiguration$inboundSchema = z.object({
    id: z.string(),
    name: z.string().optional(),
});
/** @internal */
export const UserEventPayloadConfiguration$outboundSchema = z.object({
    id: z.string(),
    name: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayloadConfiguration$;
(function (UserEventPayloadConfiguration$) {
    /** @deprecated use `UserEventPayloadConfiguration$inboundSchema` instead. */
    UserEventPayloadConfiguration$.inboundSchema = UserEventPayloadConfiguration$inboundSchema;
    /** @deprecated use `UserEventPayloadConfiguration$outboundSchema` instead. */
    UserEventPayloadConfiguration$.outboundSchema = UserEventPayloadConfiguration$outboundSchema;
})(UserEventPayloadConfiguration$ || (UserEventPayloadConfiguration$ = {}));
export function userEventPayloadConfigurationToJSON(userEventPayloadConfiguration) {
    return JSON.stringify(UserEventPayloadConfiguration$outboundSchema.parse(userEventPayloadConfiguration));
}
export function userEventPayloadConfigurationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayloadConfiguration$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayloadConfiguration' from JSON`);
}
/** @internal */
export const UserEventPayload31Project$inboundSchema = z.object({
    id: z.string(),
    name: z.string().optional(),
});
/** @internal */
export const UserEventPayload31Project$outboundSchema = z.object({
    id: z.string(),
    name: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload31Project$;
(function (UserEventPayload31Project$) {
    /** @deprecated use `UserEventPayload31Project$inboundSchema` instead. */
    UserEventPayload31Project$.inboundSchema = UserEventPayload31Project$inboundSchema;
    /** @deprecated use `UserEventPayload31Project$outboundSchema` instead. */
    UserEventPayload31Project$.outboundSchema = UserEventPayload31Project$outboundSchema;
})(UserEventPayload31Project$ || (UserEventPayload31Project$ = {}));
export function userEventPayload31ProjectToJSON(userEventPayload31Project) {
    return JSON.stringify(UserEventPayload31Project$outboundSchema.parse(userEventPayload31Project));
}
export function userEventPayload31ProjectFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayload31Project$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayload31Project' from JSON`);
}
/** @internal */
export const ThirtyOne$inboundSchema = z.object({
    team: z.lazy(() => UserEventPayloadTeam$inboundSchema),
    configuration: z.lazy(() => UserEventPayloadConfiguration$inboundSchema),
    project: z.lazy(() => UserEventPayload31Project$inboundSchema),
});
/** @internal */
export const ThirtyOne$outboundSchema = z.object({
    team: z.lazy(() => UserEventPayloadTeam$outboundSchema),
    configuration: z.lazy(() => UserEventPayloadConfiguration$outboundSchema),
    project: z.lazy(() => UserEventPayload31Project$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ThirtyOne$;
(function (ThirtyOne$) {
    /** @deprecated use `ThirtyOne$inboundSchema` instead. */
    ThirtyOne$.inboundSchema = ThirtyOne$inboundSchema;
    /** @deprecated use `ThirtyOne$outboundSchema` instead. */
    ThirtyOne$.outboundSchema = ThirtyOne$outboundSchema;
})(ThirtyOne$ || (ThirtyOne$ = {}));
export function thirtyOneToJSON(thirtyOne) {
    return JSON.stringify(ThirtyOne$outboundSchema.parse(thirtyOne));
}
export function thirtyOneFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ThirtyOne$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ThirtyOne' from JSON`);
}
/** @internal */
export const PayloadTeam$inboundSchema = z.object({
    id: z.string(),
    name: z.string(),
});
/** @internal */
export const PayloadTeam$outboundSchema = z.object({
    id: z.string(),
    name: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadTeam$;
(function (PayloadTeam$) {
    /** @deprecated use `PayloadTeam$inboundSchema` instead. */
    PayloadTeam$.inboundSchema = PayloadTeam$inboundSchema;
    /** @deprecated use `PayloadTeam$outboundSchema` instead. */
    PayloadTeam$.outboundSchema = PayloadTeam$outboundSchema;
})(PayloadTeam$ || (PayloadTeam$ = {}));
export function payloadTeamToJSON(payloadTeam) {
    return JSON.stringify(PayloadTeam$outboundSchema.parse(payloadTeam));
}
export function payloadTeamFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadTeam$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadTeam' from JSON`);
}
/** @internal */
export const PayloadConfiguration$inboundSchema = z.object({
    id: z.string(),
    name: z.string().optional(),
});
/** @internal */
export const PayloadConfiguration$outboundSchema = z.object({
    id: z.string(),
    name: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadConfiguration$;
(function (PayloadConfiguration$) {
    /** @deprecated use `PayloadConfiguration$inboundSchema` instead. */
    PayloadConfiguration$.inboundSchema = PayloadConfiguration$inboundSchema;
    /** @deprecated use `PayloadConfiguration$outboundSchema` instead. */
    PayloadConfiguration$.outboundSchema = PayloadConfiguration$outboundSchema;
})(PayloadConfiguration$ || (PayloadConfiguration$ = {}));
export function payloadConfigurationToJSON(payloadConfiguration) {
    return JSON.stringify(PayloadConfiguration$outboundSchema.parse(payloadConfiguration));
}
export function payloadConfigurationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadConfiguration$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadConfiguration' from JSON`);
}
/** @internal */
export const UserEventPayloadProject$inboundSchema = z.object({
    id: z.string(),
    name: z.string().optional(),
});
/** @internal */
export const UserEventPayloadProject$outboundSchema = z.object({
    id: z.string(),
    name: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayloadProject$;
(function (UserEventPayloadProject$) {
    /** @deprecated use `UserEventPayloadProject$inboundSchema` instead. */
    UserEventPayloadProject$.inboundSchema = UserEventPayloadProject$inboundSchema;
    /** @deprecated use `UserEventPayloadProject$outboundSchema` instead. */
    UserEventPayloadProject$.outboundSchema = UserEventPayloadProject$outboundSchema;
})(UserEventPayloadProject$ || (UserEventPayloadProject$ = {}));
export function userEventPayloadProjectToJSON(userEventPayloadProject) {
    return JSON.stringify(UserEventPayloadProject$outboundSchema.parse(userEventPayloadProject));
}
export function userEventPayloadProjectFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayloadProject$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayloadProject' from JSON`);
}
/** @internal */
export const Thirty$inboundSchema = z
    .object({
    team: z.lazy(() => PayloadTeam$inboundSchema),
    configuration: z.lazy(() => PayloadConfiguration$inboundSchema),
    project: z.lazy(() => UserEventPayloadProject$inboundSchema),
    buildsEnabled: z.boolean().optional(),
    passive: z.boolean().optional(),
});
/** @internal */
export const Thirty$outboundSchema = z.object({
    team: z.lazy(() => PayloadTeam$outboundSchema),
    configuration: z.lazy(() => PayloadConfiguration$outboundSchema),
    project: z.lazy(() => UserEventPayloadProject$outboundSchema),
    buildsEnabled: z.boolean().optional(),
    passive: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Thirty$;
(function (Thirty$) {
    /** @deprecated use `Thirty$inboundSchema` instead. */
    Thirty$.inboundSchema = Thirty$inboundSchema;
    /** @deprecated use `Thirty$outboundSchema` instead. */
    Thirty$.outboundSchema = Thirty$outboundSchema;
})(Thirty$ || (Thirty$ = {}));
export function thirtyToJSON(thirty) {
    return JSON.stringify(Thirty$outboundSchema.parse(thirty));
}
export function thirtyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Thirty$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Thirty' from JSON`);
}
/** @internal */
export const UserEventPayload29Team$inboundSchema = z.object({
    id: z.string(),
    name: z.string(),
});
/** @internal */
export const UserEventPayload29Team$outboundSchema = z.object({
    id: z.string(),
    name: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload29Team$;
(function (UserEventPayload29Team$) {
    /** @deprecated use `UserEventPayload29Team$inboundSchema` instead. */
    UserEventPayload29Team$.inboundSchema = UserEventPayload29Team$inboundSchema;
    /** @deprecated use `UserEventPayload29Team$outboundSchema` instead. */
    UserEventPayload29Team$.outboundSchema = UserEventPayload29Team$outboundSchema;
})(UserEventPayload29Team$ || (UserEventPayload29Team$ = {}));
export function userEventPayload29TeamToJSON(userEventPayload29Team) {
    return JSON.stringify(UserEventPayload29Team$outboundSchema.parse(userEventPayload29Team));
}
export function userEventPayload29TeamFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayload29Team$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayload29Team' from JSON`);
}
/** @internal */
export const Configuration$inboundSchema = z.object({
    id: z.string(),
    name: z.string().optional(),
});
/** @internal */
export const Configuration$outboundSchema = z.object({
    id: z.string(),
    name: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Configuration$;
(function (Configuration$) {
    /** @deprecated use `Configuration$inboundSchema` instead. */
    Configuration$.inboundSchema = Configuration$inboundSchema;
    /** @deprecated use `Configuration$outboundSchema` instead. */
    Configuration$.outboundSchema = Configuration$outboundSchema;
})(Configuration$ || (Configuration$ = {}));
export function configurationToJSON(configuration) {
    return JSON.stringify(Configuration$outboundSchema.parse(configuration));
}
export function configurationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Configuration$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Configuration' from JSON`);
}
/** @internal */
export const PayloadProject$inboundSchema = z.object({
    id: z.string(),
    name: z.string().optional(),
});
/** @internal */
export const PayloadProject$outboundSchema = z.object({
    id: z.string(),
    name: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadProject$;
(function (PayloadProject$) {
    /** @deprecated use `PayloadProject$inboundSchema` instead. */
    PayloadProject$.inboundSchema = PayloadProject$inboundSchema;
    /** @deprecated use `PayloadProject$outboundSchema` instead. */
    PayloadProject$.outboundSchema = PayloadProject$outboundSchema;
})(PayloadProject$ || (PayloadProject$ = {}));
export function payloadProjectToJSON(payloadProject) {
    return JSON.stringify(PayloadProject$outboundSchema.parse(payloadProject));
}
export function payloadProjectFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadProject$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadProject' from JSON`);
}
/** @internal */
export const TwentyNine$inboundSchema = z.object({
    team: z.lazy(() => UserEventPayload29Team$inboundSchema),
    configuration: z.lazy(() => Configuration$inboundSchema),
    project: z.lazy(() => PayloadProject$inboundSchema),
    buildsEnabled: z.boolean().optional(),
});
/** @internal */
export const TwentyNine$outboundSchema = z.object({
    team: z.lazy(() => UserEventPayload29Team$outboundSchema),
    configuration: z.lazy(() => Configuration$outboundSchema),
    project: z.lazy(() => PayloadProject$outboundSchema),
    buildsEnabled: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TwentyNine$;
(function (TwentyNine$) {
    /** @deprecated use `TwentyNine$inboundSchema` instead. */
    TwentyNine$.inboundSchema = TwentyNine$inboundSchema;
    /** @deprecated use `TwentyNine$outboundSchema` instead. */
    TwentyNine$.outboundSchema = TwentyNine$outboundSchema;
})(TwentyNine$ || (TwentyNine$ = {}));
export function twentyNineToJSON(twentyNine) {
    return JSON.stringify(TwentyNine$outboundSchema.parse(twentyNine));
}
export function twentyNineFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TwentyNine$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TwentyNine' from JSON`);
}
/** @internal */
export const TwentyEight$inboundSchema = z.object({
    suffix: z.string(),
});
/** @internal */
export const TwentyEight$outboundSchema = z.object({
    suffix: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TwentyEight$;
(function (TwentyEight$) {
    /** @deprecated use `TwentyEight$inboundSchema` instead. */
    TwentyEight$.inboundSchema = TwentyEight$inboundSchema;
    /** @deprecated use `TwentyEight$outboundSchema` instead. */
    TwentyEight$.outboundSchema = TwentyEight$outboundSchema;
})(TwentyEight$ || (TwentyEight$ = {}));
export function twentyEightToJSON(twentyEight) {
    return JSON.stringify(TwentyEight$outboundSchema.parse(twentyEight));
}
export function twentyEightFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TwentyEight$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TwentyEight' from JSON`);
}
/** @internal */
export const TwentySeven$inboundSchema = z.object({
    status: z.string(),
    suffix: z.string(),
});
/** @internal */
export const TwentySeven$outboundSchema = z.object({
    status: z.string(),
    suffix: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TwentySeven$;
(function (TwentySeven$) {
    /** @deprecated use `TwentySeven$inboundSchema` instead. */
    TwentySeven$.inboundSchema = TwentySeven$inboundSchema;
    /** @deprecated use `TwentySeven$outboundSchema` instead. */
    TwentySeven$.outboundSchema = TwentySeven$outboundSchema;
})(TwentySeven$ || (TwentySeven$ = {}));
export function twentySevenToJSON(twentySeven) {
    return JSON.stringify(TwentySeven$outboundSchema.parse(twentySeven));
}
export function twentySevenFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TwentySeven$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TwentySeven' from JSON`);
}
/** @internal */
export const TwentySix$inboundSchema = z.object({
    reason: z.string().optional(),
    suffix: z.string(),
});
/** @internal */
export const TwentySix$outboundSchema = z.object({
    reason: z.string().optional(),
    suffix: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TwentySix$;
(function (TwentySix$) {
    /** @deprecated use `TwentySix$inboundSchema` instead. */
    TwentySix$.inboundSchema = TwentySix$inboundSchema;
    /** @deprecated use `TwentySix$outboundSchema` instead. */
    TwentySix$.outboundSchema = TwentySix$outboundSchema;
})(TwentySix$ || (TwentySix$ = {}));
export function twentySixToJSON(twentySix) {
    return JSON.stringify(TwentySix$outboundSchema.parse(twentySix));
}
export function twentySixFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TwentySix$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TwentySix' from JSON`);
}
/** @internal */
export const TwentyFive$inboundSchema = z.object({
    cn: z.string().optional(),
    cns: z.array(z.string()).optional(),
});
/** @internal */
export const TwentyFive$outboundSchema = z.object({
    cn: z.string().optional(),
    cns: z.array(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TwentyFive$;
(function (TwentyFive$) {
    /** @deprecated use `TwentyFive$inboundSchema` instead. */
    TwentyFive$.inboundSchema = TwentyFive$inboundSchema;
    /** @deprecated use `TwentyFive$outboundSchema` instead. */
    TwentyFive$.outboundSchema = TwentyFive$outboundSchema;
})(TwentyFive$ || (TwentyFive$ = {}));
export function twentyFiveToJSON(twentyFive) {
    return JSON.stringify(TwentyFive$outboundSchema.parse(twentyFive));
}
export function twentyFiveFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TwentyFive$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TwentyFive' from JSON`);
}
/** @internal */
export const TwentyFour$inboundSchema = z.object({
    id: z.string(),
    cn: z.string().optional(),
    cns: z.array(z.string()).optional(),
});
/** @internal */
export const TwentyFour$outboundSchema = z.object({
    id: z.string(),
    cn: z.string().optional(),
    cns: z.array(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TwentyFour$;
(function (TwentyFour$) {
    /** @deprecated use `TwentyFour$inboundSchema` instead. */
    TwentyFour$.inboundSchema = TwentyFour$inboundSchema;
    /** @deprecated use `TwentyFour$outboundSchema` instead. */
    TwentyFour$.outboundSchema = TwentyFour$outboundSchema;
})(TwentyFour$ || (TwentyFour$ = {}));
export function twentyFourToJSON(twentyFour) {
    return JSON.stringify(TwentyFour$outboundSchema.parse(twentyFour));
}
export function twentyFourFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TwentyFour$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TwentyFour' from JSON`);
}
/** @internal */
export const TwentyThree$inboundSchema = z.object({
    src: z.string(),
    dst: z.string(),
});
/** @internal */
export const TwentyThree$outboundSchema = z.object({
    src: z.string(),
    dst: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TwentyThree$;
(function (TwentyThree$) {
    /** @deprecated use `TwentyThree$inboundSchema` instead. */
    TwentyThree$.inboundSchema = TwentyThree$inboundSchema;
    /** @deprecated use `TwentyThree$outboundSchema` instead. */
    TwentyThree$.outboundSchema = TwentyThree$outboundSchema;
})(TwentyThree$ || (TwentyThree$ = {}));
export function twentyThreeToJSON(twentyThree) {
    return JSON.stringify(TwentyThree$outboundSchema.parse(twentyThree));
}
export function twentyThreeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TwentyThree$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TwentyThree' from JSON`);
}
/** @internal */
export const PayloadOldTeam$inboundSchema = z.object({
    name: z.string(),
});
/** @internal */
export const PayloadOldTeam$outboundSchema = z.object({
    name: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadOldTeam$;
(function (PayloadOldTeam$) {
    /** @deprecated use `PayloadOldTeam$inboundSchema` instead. */
    PayloadOldTeam$.inboundSchema = PayloadOldTeam$inboundSchema;
    /** @deprecated use `PayloadOldTeam$outboundSchema` instead. */
    PayloadOldTeam$.outboundSchema = PayloadOldTeam$outboundSchema;
})(PayloadOldTeam$ || (PayloadOldTeam$ = {}));
export function payloadOldTeamToJSON(payloadOldTeam) {
    return JSON.stringify(PayloadOldTeam$outboundSchema.parse(payloadOldTeam));
}
export function payloadOldTeamFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadOldTeam$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadOldTeam' from JSON`);
}
/** @internal */
export const PayloadNewTeam$inboundSchema = z.object({
    name: z.string(),
});
/** @internal */
export const PayloadNewTeam$outboundSchema = z.object({
    name: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadNewTeam$;
(function (PayloadNewTeam$) {
    /** @deprecated use `PayloadNewTeam$inboundSchema` instead. */
    PayloadNewTeam$.inboundSchema = PayloadNewTeam$inboundSchema;
    /** @deprecated use `PayloadNewTeam$outboundSchema` instead. */
    PayloadNewTeam$.outboundSchema = PayloadNewTeam$outboundSchema;
})(PayloadNewTeam$ || (PayloadNewTeam$ = {}));
export function payloadNewTeamToJSON(payloadNewTeam) {
    return JSON.stringify(PayloadNewTeam$outboundSchema.parse(payloadNewTeam));
}
export function payloadNewTeamFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadNewTeam$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadNewTeam' from JSON`);
}
/** @internal */
export const TwentyTwo$inboundSchema = z.object({
    id: z.string(),
    oldTeam: z.lazy(() => PayloadOldTeam$inboundSchema).optional(),
    newTeam: z.lazy(() => PayloadNewTeam$inboundSchema).optional(),
});
/** @internal */
export const TwentyTwo$outboundSchema = z.object({
    id: z.string(),
    oldTeam: z.lazy(() => PayloadOldTeam$outboundSchema).optional(),
    newTeam: z.lazy(() => PayloadNewTeam$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TwentyTwo$;
(function (TwentyTwo$) {
    /** @deprecated use `TwentyTwo$inboundSchema` instead. */
    TwentyTwo$.inboundSchema = TwentyTwo$inboundSchema;
    /** @deprecated use `TwentyTwo$outboundSchema` instead. */
    TwentyTwo$.outboundSchema = TwentyTwo$outboundSchema;
})(TwentyTwo$ || (TwentyTwo$ = {}));
export function twentyTwoToJSON(twentyTwo) {
    return JSON.stringify(TwentyTwo$outboundSchema.parse(twentyTwo));
}
export function twentyTwoFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TwentyTwo$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TwentyTwo' from JSON`);
}
/** @internal */
export const TwentyOne$inboundSchema = z.object({
    cn: z.string().optional(),
    cns: z.array(z.string()).optional(),
    id: z.string().optional(),
});
/** @internal */
export const TwentyOne$outboundSchema = z.object({
    cn: z.string().optional(),
    cns: z.array(z.string()).optional(),
    id: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TwentyOne$;
(function (TwentyOne$) {
    /** @deprecated use `TwentyOne$inboundSchema` instead. */
    TwentyOne$.inboundSchema = TwentyOne$inboundSchema;
    /** @deprecated use `TwentyOne$outboundSchema` instead. */
    TwentyOne$.outboundSchema = TwentyOne$outboundSchema;
})(TwentyOne$ || (TwentyOne$ = {}));
export function twentyOneToJSON(twentyOne) {
    return JSON.stringify(TwentyOne$outboundSchema.parse(twentyOne));
}
export function twentyOneFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TwentyOne$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TwentyOne' from JSON`);
}
/** @internal */
export const Twenty$inboundSchema = z
    .object({
    cn: z.string().optional(),
    cns: z.array(z.string()).optional(),
    custom: z.boolean(),
    id: z.string().optional(),
});
/** @internal */
export const Twenty$outboundSchema = z.object({
    cn: z.string().optional(),
    cns: z.array(z.string()).optional(),
    custom: z.boolean(),
    id: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Twenty$;
(function (Twenty$) {
    /** @deprecated use `Twenty$inboundSchema` instead. */
    Twenty$.inboundSchema = Twenty$inboundSchema;
    /** @deprecated use `Twenty$outboundSchema` instead. */
    Twenty$.outboundSchema = Twenty$outboundSchema;
})(Twenty$ || (Twenty$ = {}));
export function twentyToJSON(twenty) {
    return JSON.stringify(Twenty$outboundSchema.parse(twenty));
}
export function twentyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Twenty$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Twenty' from JSON`);
}
/** @internal */
export const Nineteen$inboundSchema = z.object({
    avatar: z.string().optional(),
});
/** @internal */
export const Nineteen$outboundSchema = z.object({
    avatar: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Nineteen$;
(function (Nineteen$) {
    /** @deprecated use `Nineteen$inboundSchema` instead. */
    Nineteen$.inboundSchema = Nineteen$inboundSchema;
    /** @deprecated use `Nineteen$outboundSchema` instead. */
    Nineteen$.outboundSchema = Nineteen$outboundSchema;
})(Nineteen$ || (Nineteen$ = {}));
export function nineteenToJSON(nineteen) {
    return JSON.stringify(Nineteen$outboundSchema.parse(nineteen));
}
export function nineteenFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Nineteen$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Nineteen' from JSON`);
}
/** @internal */
export const Eighteen$inboundSchema = z.object({
    projectName: z.string(),
    autoExposeSystemEnvs: z.boolean(),
});
/** @internal */
export const Eighteen$outboundSchema = z.object({
    projectName: z.string(),
    autoExposeSystemEnvs: z.boolean(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Eighteen$;
(function (Eighteen$) {
    /** @deprecated use `Eighteen$inboundSchema` instead. */
    Eighteen$.inboundSchema = Eighteen$inboundSchema;
    /** @deprecated use `Eighteen$outboundSchema` instead. */
    Eighteen$.outboundSchema = Eighteen$outboundSchema;
})(Eighteen$ || (Eighteen$ = {}));
export function eighteenToJSON(eighteen) {
    return JSON.stringify(Eighteen$outboundSchema.parse(eighteen));
}
export function eighteenFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Eighteen$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Eighteen' from JSON`);
}
/** @internal */
export const Seventeen$inboundSchema = z.object({
    alias: z.string(),
    deploymentUrl: z.string(),
});
/** @internal */
export const Seventeen$outboundSchema = z.object({
    alias: z.string(),
    deploymentUrl: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Seventeen$;
(function (Seventeen$) {
    /** @deprecated use `Seventeen$inboundSchema` instead. */
    Seventeen$.inboundSchema = Seventeen$inboundSchema;
    /** @deprecated use `Seventeen$outboundSchema` instead. */
    Seventeen$.outboundSchema = Seventeen$outboundSchema;
})(Seventeen$ || (Seventeen$ = {}));
export function seventeenToJSON(seventeen) {
    return JSON.stringify(Seventeen$outboundSchema.parse(seventeen));
}
export function seventeenFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Seventeen$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Seventeen' from JSON`);
}
/** @internal */
export const Sixteen$inboundSchema = z.object({
    name: z.string().optional(),
    alias: z.string(),
    aliasId: z.string(),
    deploymentId: z.nullable(z.string()),
});
/** @internal */
export const Sixteen$outboundSchema = z.object({
    name: z.string().optional(),
    alias: z.string(),
    aliasId: z.string(),
    deploymentId: z.nullable(z.string()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Sixteen$;
(function (Sixteen$) {
    /** @deprecated use `Sixteen$inboundSchema` instead. */
    Sixteen$.inboundSchema = Sixteen$inboundSchema;
    /** @deprecated use `Sixteen$outboundSchema` instead. */
    Sixteen$.outboundSchema = Sixteen$outboundSchema;
})(Sixteen$ || (Sixteen$ = {}));
export function sixteenToJSON(sixteen) {
    return JSON.stringify(Sixteen$outboundSchema.parse(sixteen));
}
export function sixteenFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Sixteen$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Sixteen' from JSON`);
}
/** @internal */
export const OldTeam$inboundSchema = z.object({
    name: z.string(),
});
/** @internal */
export const OldTeam$outboundSchema = z.object({
    name: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OldTeam$;
(function (OldTeam$) {
    /** @deprecated use `OldTeam$inboundSchema` instead. */
    OldTeam$.inboundSchema = OldTeam$inboundSchema;
    /** @deprecated use `OldTeam$outboundSchema` instead. */
    OldTeam$.outboundSchema = OldTeam$outboundSchema;
})(OldTeam$ || (OldTeam$ = {}));
export function oldTeamToJSON(oldTeam) {
    return JSON.stringify(OldTeam$outboundSchema.parse(oldTeam));
}
export function oldTeamFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OldTeam$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OldTeam' from JSON`);
}
/** @internal */
export const NewTeam$inboundSchema = z.object({
    name: z.string(),
});
/** @internal */
export const NewTeam$outboundSchema = z.object({
    name: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NewTeam$;
(function (NewTeam$) {
    /** @deprecated use `NewTeam$inboundSchema` instead. */
    NewTeam$.inboundSchema = NewTeam$inboundSchema;
    /** @deprecated use `NewTeam$outboundSchema` instead. */
    NewTeam$.outboundSchema = NewTeam$outboundSchema;
})(NewTeam$ || (NewTeam$ = {}));
export function newTeamToJSON(newTeam) {
    return JSON.stringify(NewTeam$outboundSchema.parse(newTeam));
}
export function newTeamFromJSON(jsonString) {
    return safeParse(jsonString, (x) => NewTeam$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NewTeam' from JSON`);
}
/** @internal */
export const Fifteen$inboundSchema = z.object({
    name: z.string().optional(),
    alias: z.string(),
    oldTeam: z.lazy(() => OldTeam$inboundSchema).optional(),
    newTeam: z.lazy(() => NewTeam$inboundSchema).optional(),
});
/** @internal */
export const Fifteen$outboundSchema = z.object({
    name: z.string().optional(),
    alias: z.string(),
    oldTeam: z.lazy(() => OldTeam$outboundSchema).optional(),
    newTeam: z.lazy(() => NewTeam$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Fifteen$;
(function (Fifteen$) {
    /** @deprecated use `Fifteen$inboundSchema` instead. */
    Fifteen$.inboundSchema = Fifteen$inboundSchema;
    /** @deprecated use `Fifteen$outboundSchema` instead. */
    Fifteen$.outboundSchema = Fifteen$outboundSchema;
})(Fifteen$ || (Fifteen$ = {}));
export function fifteenToJSON(fifteen) {
    return JSON.stringify(Fifteen$outboundSchema.parse(fifteen));
}
export function fifteenFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Fifteen$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Fifteen' from JSON`);
}
/** @internal */
export const Fourteen$inboundSchema = z.object({
    alias: z.string().optional(),
    email: z.string().optional(),
});
/** @internal */
export const Fourteen$outboundSchema = z.object({
    alias: z.string().optional(),
    email: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Fourteen$;
(function (Fourteen$) {
    /** @deprecated use `Fourteen$inboundSchema` instead. */
    Fourteen$.inboundSchema = Fourteen$inboundSchema;
    /** @deprecated use `Fourteen$outboundSchema` instead. */
    Fourteen$.outboundSchema = Fourteen$outboundSchema;
})(Fourteen$ || (Fourteen$ = {}));
export function fourteenToJSON(fourteen) {
    return JSON.stringify(Fourteen$outboundSchema.parse(fourteen));
}
export function fourteenFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Fourteen$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Fourteen' from JSON`);
}
/** @internal */
export const Thirteen$inboundSchema = z.object({
    alias: z.string().optional(),
    email: z.string().optional(),
    username: z.string().optional(),
});
/** @internal */
export const Thirteen$outboundSchema = z.object({
    alias: z.string().optional(),
    email: z.string().optional(),
    username: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Thirteen$;
(function (Thirteen$) {
    /** @deprecated use `Thirteen$inboundSchema` instead. */
    Thirteen$.inboundSchema = Thirteen$inboundSchema;
    /** @deprecated use `Thirteen$outboundSchema` instead. */
    Thirteen$.outboundSchema = Thirteen$outboundSchema;
})(Thirteen$ || (Thirteen$ = {}));
export function thirteenToJSON(thirteen) {
    return JSON.stringify(Thirteen$outboundSchema.parse(thirteen));
}
export function thirteenFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Thirteen$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Thirteen' from JSON`);
}
/** @internal */
export const PayloadAction$inboundSchema = z.nativeEnum(PayloadAction);
/** @internal */
export const PayloadAction$outboundSchema = PayloadAction$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadAction$;
(function (PayloadAction$) {
    /** @deprecated use `PayloadAction$inboundSchema` instead. */
    PayloadAction$.inboundSchema = PayloadAction$inboundSchema;
    /** @deprecated use `PayloadAction$outboundSchema` instead. */
    PayloadAction$.outboundSchema = PayloadAction$outboundSchema;
})(PayloadAction$ || (PayloadAction$ = {}));
/** @internal */
export const Twelve$inboundSchema = z
    .object({
    projectName: z.string(),
    alias: z.string(),
    action: PayloadAction$inboundSchema,
});
/** @internal */
export const Twelve$outboundSchema = z.object({
    projectName: z.string(),
    alias: z.string(),
    action: PayloadAction$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Twelve$;
(function (Twelve$) {
    /** @deprecated use `Twelve$inboundSchema` instead. */
    Twelve$.inboundSchema = Twelve$inboundSchema;
    /** @deprecated use `Twelve$outboundSchema` instead. */
    Twelve$.outboundSchema = Twelve$outboundSchema;
})(Twelve$ || (Twelve$ = {}));
export function twelveToJSON(twelve) {
    return JSON.stringify(Twelve$outboundSchema.parse(twelve));
}
export function twelveFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Twelve$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Twelve' from JSON`);
}
/** @internal */
export const Eleven$inboundSchema = z
    .object({
    alias: z.string().optional(),
    aliasId: z.string().optional(),
    userId: z.string().optional(),
    username: z.string().optional(),
});
/** @internal */
export const Eleven$outboundSchema = z.object({
    alias: z.string().optional(),
    aliasId: z.string().optional(),
    userId: z.string().optional(),
    username: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Eleven$;
(function (Eleven$) {
    /** @deprecated use `Eleven$inboundSchema` instead. */
    Eleven$.inboundSchema = Eleven$inboundSchema;
    /** @deprecated use `Eleven$outboundSchema` instead. */
    Eleven$.outboundSchema = Eleven$outboundSchema;
})(Eleven$ || (Eleven$ = {}));
export function elevenToJSON(eleven) {
    return JSON.stringify(Eleven$outboundSchema.parse(eleven));
}
export function elevenFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Eleven$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Eleven' from JSON`);
}
/** @internal */
export const Ten$inboundSchema = z
    .object({
    alias: z.string().optional(),
    userId: z.string().optional(),
    username: z.string().optional(),
});
/** @internal */
export const Ten$outboundSchema = z
    .object({
    alias: z.string().optional(),
    userId: z.string().optional(),
    username: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Ten$;
(function (Ten$) {
    /** @deprecated use `Ten$inboundSchema` instead. */
    Ten$.inboundSchema = Ten$inboundSchema;
    /** @deprecated use `Ten$outboundSchema` instead. */
    Ten$.outboundSchema = Ten$outboundSchema;
})(Ten$ || (Ten$ = {}));
export function tenToJSON(ten) {
    return JSON.stringify(Ten$outboundSchema.parse(ten));
}
export function tenFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Ten$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Ten' from JSON`);
}
/** @internal */
export const Nine$inboundSchema = z
    .object({
    alias: z.string().optional(),
});
/** @internal */
export const Nine$outboundSchema = z.object({
    alias: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Nine$;
(function (Nine$) {
    /** @deprecated use `Nine$inboundSchema` instead. */
    Nine$.inboundSchema = Nine$inboundSchema;
    /** @deprecated use `Nine$outboundSchema` instead. */
    Nine$.outboundSchema = Nine$outboundSchema;
})(Nine$ || (Nine$ = {}));
export function nineToJSON(nine) {
    return JSON.stringify(Nine$outboundSchema.parse(nine));
}
export function nineFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Nine$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Nine' from JSON`);
}
/** @internal */
export const Eight$inboundSchema = z
    .object({
    aliasId: z.string().optional(),
    alias: z.string().optional(),
    projectName: z.string().optional(),
});
/** @internal */
export const Eight$outboundSchema = z.object({
    aliasId: z.string().optional(),
    alias: z.string().optional(),
    projectName: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Eight$;
(function (Eight$) {
    /** @deprecated use `Eight$inboundSchema` instead. */
    Eight$.inboundSchema = Eight$inboundSchema;
    /** @deprecated use `Eight$outboundSchema` instead. */
    Eight$.outboundSchema = Eight$outboundSchema;
})(Eight$ || (Eight$ = {}));
export function eightToJSON(eight) {
    return JSON.stringify(Eight$outboundSchema.parse(eight));
}
export function eightFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Eight$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Eight' from JSON`);
}
/** @internal */
export const Deployment$inboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    url: z.string(),
    meta: z.record(z.string()),
});
/** @internal */
export const Deployment$outboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    url: z.string(),
    meta: z.record(z.string()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Deployment$;
(function (Deployment$) {
    /** @deprecated use `Deployment$inboundSchema` instead. */
    Deployment$.inboundSchema = Deployment$inboundSchema;
    /** @deprecated use `Deployment$outboundSchema` instead. */
    Deployment$.outboundSchema = Deployment$outboundSchema;
})(Deployment$ || (Deployment$ = {}));
export function deploymentToJSON(deployment) {
    return JSON.stringify(Deployment$outboundSchema.parse(deployment));
}
export function deploymentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Deployment$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Deployment' from JSON`);
}
/** @internal */
export const Seven$inboundSchema = z
    .object({
    alias: z.string().optional(),
    deployment: z.nullable(z.lazy(() => Deployment$inboundSchema)).optional(),
    ruleCount: z.number().optional(),
    deploymentUrl: z.string().optional(),
    aliasId: z.string().optional(),
    deploymentId: z.nullable(z.string()).optional(),
    oldDeploymentId: z.nullable(z.string()).optional(),
    redirect: z.string().optional(),
    redirectStatusCode: z.nullable(z.number()).optional(),
    target: z.nullable(z.string()).optional(),
    system: z.boolean().optional(),
    aliasUpdatedAt: z.number().optional(),
});
/** @internal */
export const Seven$outboundSchema = z.object({
    alias: z.string().optional(),
    deployment: z.nullable(z.lazy(() => Deployment$outboundSchema)).optional(),
    ruleCount: z.number().optional(),
    deploymentUrl: z.string().optional(),
    aliasId: z.string().optional(),
    deploymentId: z.nullable(z.string()).optional(),
    oldDeploymentId: z.nullable(z.string()).optional(),
    redirect: z.string().optional(),
    redirectStatusCode: z.nullable(z.number()).optional(),
    target: z.nullable(z.string()).optional(),
    system: z.boolean().optional(),
    aliasUpdatedAt: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Seven$;
(function (Seven$) {
    /** @deprecated use `Seven$inboundSchema` instead. */
    Seven$.inboundSchema = Seven$inboundSchema;
    /** @deprecated use `Seven$outboundSchema` instead. */
    Seven$.outboundSchema = Seven$outboundSchema;
})(Seven$ || (Seven$ = {}));
export function sevenToJSON(seven) {
    return JSON.stringify(Seven$outboundSchema.parse(seven));
}
export function sevenFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Seven$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Seven' from JSON`);
}
/** @internal */
export const UserEventPayload6AccessGroup$inboundSchema = z.object({
    id: z.string(),
    name: z.string(),
});
/** @internal */
export const UserEventPayload6AccessGroup$outboundSchema = z.object({
    id: z.string(),
    name: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayload6AccessGroup$;
(function (UserEventPayload6AccessGroup$) {
    /** @deprecated use `UserEventPayload6AccessGroup$inboundSchema` instead. */
    UserEventPayload6AccessGroup$.inboundSchema = UserEventPayload6AccessGroup$inboundSchema;
    /** @deprecated use `UserEventPayload6AccessGroup$outboundSchema` instead. */
    UserEventPayload6AccessGroup$.outboundSchema = UserEventPayload6AccessGroup$outboundSchema;
})(UserEventPayload6AccessGroup$ || (UserEventPayload6AccessGroup$ = {}));
export function userEventPayload6AccessGroupToJSON(userEventPayload6AccessGroup) {
    return JSON.stringify(UserEventPayload6AccessGroup$outboundSchema.parse(userEventPayload6AccessGroup));
}
export function userEventPayload6AccessGroupFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayload6AccessGroup$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayload6AccessGroup' from JSON`);
}
/** @internal */
export const Project$inboundSchema = z.object({
    id: z.string(),
    name: z.string().optional(),
});
/** @internal */
export const Project$outboundSchema = z.object({
    id: z.string(),
    name: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Project$;
(function (Project$) {
    /** @deprecated use `Project$inboundSchema` instead. */
    Project$.inboundSchema = Project$inboundSchema;
    /** @deprecated use `Project$outboundSchema` instead. */
    Project$.outboundSchema = Project$outboundSchema;
})(Project$ || (Project$ = {}));
export function projectToJSON(project) {
    return JSON.stringify(Project$outboundSchema.parse(project));
}
export function projectFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Project$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Project' from JSON`);
}
/** @internal */
export const NextRole$inboundSchema = z
    .nativeEnum(NextRole);
/** @internal */
export const NextRole$outboundSchema = NextRole$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NextRole$;
(function (NextRole$) {
    /** @deprecated use `NextRole$inboundSchema` instead. */
    NextRole$.inboundSchema = NextRole$inboundSchema;
    /** @deprecated use `NextRole$outboundSchema` instead. */
    NextRole$.outboundSchema = NextRole$outboundSchema;
})(NextRole$ || (NextRole$ = {}));
/** @internal */
export const PreviousRole$inboundSchema = z.nativeEnum(PreviousRole);
/** @internal */
export const PreviousRole$outboundSchema = PreviousRole$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PreviousRole$;
(function (PreviousRole$) {
    /** @deprecated use `PreviousRole$inboundSchema` instead. */
    PreviousRole$.inboundSchema = PreviousRole$inboundSchema;
    /** @deprecated use `PreviousRole$outboundSchema` instead. */
    PreviousRole$.outboundSchema = PreviousRole$outboundSchema;
})(PreviousRole$ || (PreviousRole$ = {}));
/** @internal */
export const Six$inboundSchema = z
    .object({
    accessGroup: z.lazy(() => UserEventPayload6AccessGroup$inboundSchema),
    project: z.lazy(() => Project$inboundSchema),
    next_role: z.nullable(NextRole$inboundSchema).optional(),
    previous_role: PreviousRole$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "next_role": "nextRole",
        "previous_role": "previousRole",
    });
});
/** @internal */
export const Six$outboundSchema = z
    .object({
    accessGroup: z.lazy(() => UserEventPayload6AccessGroup$outboundSchema),
    project: z.lazy(() => Project$outboundSchema),
    nextRole: z.nullable(NextRole$outboundSchema).optional(),
    previousRole: PreviousRole$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        nextRole: "next_role",
        previousRole: "previous_role",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Six$;
(function (Six$) {
    /** @deprecated use `Six$inboundSchema` instead. */
    Six$.inboundSchema = Six$inboundSchema;
    /** @deprecated use `Six$outboundSchema` instead. */
    Six$.outboundSchema = Six$outboundSchema;
})(Six$ || (Six$ = {}));
export function sixToJSON(six) {
    return JSON.stringify(Six$outboundSchema.parse(six));
}
export function sixFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Six$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Six' from JSON`);
}
/** @internal */
export const UserEventPayloadAccessGroup$inboundSchema = z.object({
    id: z.string(),
    name: z.string().optional(),
});
/** @internal */
export const UserEventPayloadAccessGroup$outboundSchema = z.object({
    id: z.string(),
    name: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventPayloadAccessGroup$;
(function (UserEventPayloadAccessGroup$) {
    /** @deprecated use `UserEventPayloadAccessGroup$inboundSchema` instead. */
    UserEventPayloadAccessGroup$.inboundSchema = UserEventPayloadAccessGroup$inboundSchema;
    /** @deprecated use `UserEventPayloadAccessGroup$outboundSchema` instead. */
    UserEventPayloadAccessGroup$.outboundSchema = UserEventPayloadAccessGroup$outboundSchema;
})(UserEventPayloadAccessGroup$ || (UserEventPayloadAccessGroup$ = {}));
export function userEventPayloadAccessGroupToJSON(userEventPayloadAccessGroup) {
    return JSON.stringify(UserEventPayloadAccessGroup$outboundSchema.parse(userEventPayloadAccessGroup));
}
export function userEventPayloadAccessGroupFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventPayloadAccessGroup$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventPayloadAccessGroup' from JSON`);
}
/** @internal */
export const PayloadUser$inboundSchema = z.object({
    id: z.string(),
    username: z.string().optional(),
});
/** @internal */
export const PayloadUser$outboundSchema = z.object({
    id: z.string(),
    username: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadUser$;
(function (PayloadUser$) {
    /** @deprecated use `PayloadUser$inboundSchema` instead. */
    PayloadUser$.inboundSchema = PayloadUser$inboundSchema;
    /** @deprecated use `PayloadUser$outboundSchema` instead. */
    PayloadUser$.outboundSchema = PayloadUser$outboundSchema;
})(PayloadUser$ || (PayloadUser$ = {}));
export function payloadUserToJSON(payloadUser) {
    return JSON.stringify(PayloadUser$outboundSchema.parse(payloadUser));
}
export function payloadUserFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadUser$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadUser' from JSON`);
}
/** @internal */
export const Five$inboundSchema = z
    .object({
    accessGroup: z.lazy(() => UserEventPayloadAccessGroup$inboundSchema),
    user: z.lazy(() => PayloadUser$inboundSchema),
    directoryType: z.string().optional(),
});
/** @internal */
export const Five$outboundSchema = z.object({
    accessGroup: z.lazy(() => UserEventPayloadAccessGroup$outboundSchema),
    user: z.lazy(() => PayloadUser$outboundSchema),
    directoryType: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Five$;
(function (Five$) {
    /** @deprecated use `Five$inboundSchema` instead. */
    Five$.inboundSchema = Five$inboundSchema;
    /** @deprecated use `Five$outboundSchema` instead. */
    Five$.outboundSchema = Five$outboundSchema;
})(Five$ || (Five$ = {}));
export function fiveToJSON(five) {
    return JSON.stringify(Five$outboundSchema.parse(five));
}
export function fiveFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Five$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Five' from JSON`);
}
/** @internal */
export const PayloadAccessGroup$inboundSchema = z.object({
    id: z.string(),
    name: z.string(),
});
/** @internal */
export const PayloadAccessGroup$outboundSchema = z.object({
    id: z.string(),
    name: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PayloadAccessGroup$;
(function (PayloadAccessGroup$) {
    /** @deprecated use `PayloadAccessGroup$inboundSchema` instead. */
    PayloadAccessGroup$.inboundSchema = PayloadAccessGroup$inboundSchema;
    /** @deprecated use `PayloadAccessGroup$outboundSchema` instead. */
    PayloadAccessGroup$.outboundSchema = PayloadAccessGroup$outboundSchema;
})(PayloadAccessGroup$ || (PayloadAccessGroup$ = {}));
export function payloadAccessGroupToJSON(payloadAccessGroup) {
    return JSON.stringify(PayloadAccessGroup$outboundSchema.parse(payloadAccessGroup));
}
export function payloadAccessGroupFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PayloadAccessGroup$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PayloadAccessGroup' from JSON`);
}
/** @internal */
export const Four$inboundSchema = z
    .object({
    author: z.string(),
    accessGroup: z.lazy(() => PayloadAccessGroup$inboundSchema),
});
/** @internal */
export const Four$outboundSchema = z.object({
    author: z.string(),
    accessGroup: z.lazy(() => PayloadAccessGroup$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Four$;
(function (Four$) {
    /** @deprecated use `Four$inboundSchema` instead. */
    Four$.inboundSchema = Four$inboundSchema;
    /** @deprecated use `Four$outboundSchema` instead. */
    Four$.outboundSchema = Four$outboundSchema;
})(Four$ || (Four$ = {}));
export function fourToJSON(four) {
    return JSON.stringify(Four$outboundSchema.parse(four));
}
export function fourFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Four$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Four' from JSON`);
}
/** @internal */
export const AccessGroup$inboundSchema = z.object({
    id: z.string(),
    name: z.string(),
});
/** @internal */
export const AccessGroup$outboundSchema = z.object({
    id: z.string(),
    name: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccessGroup$;
(function (AccessGroup$) {
    /** @deprecated use `AccessGroup$inboundSchema` instead. */
    AccessGroup$.inboundSchema = AccessGroup$inboundSchema;
    /** @deprecated use `AccessGroup$outboundSchema` instead. */
    AccessGroup$.outboundSchema = AccessGroup$outboundSchema;
})(AccessGroup$ || (AccessGroup$ = {}));
export function accessGroupToJSON(accessGroup) {
    return JSON.stringify(AccessGroup$outboundSchema.parse(accessGroup));
}
export function accessGroupFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccessGroup$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccessGroup' from JSON`);
}
/** @internal */
export const Three$inboundSchema = z
    .object({
    accessGroup: z.lazy(() => AccessGroup$inboundSchema),
});
/** @internal */
export const Three$outboundSchema = z.object({
    accessGroup: z.lazy(() => AccessGroup$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Three$;
(function (Three$) {
    /** @deprecated use `Three$inboundSchema` instead. */
    Three$.inboundSchema = Three$inboundSchema;
    /** @deprecated use `Three$outboundSchema` instead. */
    Three$.outboundSchema = Three$outboundSchema;
})(Three$ || (Three$ = {}));
export function threeToJSON(three) {
    return JSON.stringify(Three$outboundSchema.parse(three));
}
export function threeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Three$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Three' from JSON`);
}
/** @internal */
export const Action$inboundSchema = z
    .nativeEnum(Action);
/** @internal */
export const Action$outboundSchema = Action$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Action$;
(function (Action$) {
    /** @deprecated use `Action$inboundSchema` instead. */
    Action$.inboundSchema = Action$inboundSchema;
    /** @deprecated use `Action$outboundSchema` instead. */
    Action$.outboundSchema = Action$outboundSchema;
})(Action$ || (Action$ = {}));
/** @internal */
export const Payload2$inboundSchema = z.object({
    action: Action$inboundSchema,
    id: z.string(),
    slug: z.string(),
    projectId: z.string(),
});
/** @internal */
export const Payload2$outboundSchema = z.object({
    action: Action$outboundSchema,
    id: z.string(),
    slug: z.string(),
    projectId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Payload2$;
(function (Payload2$) {
    /** @deprecated use `Payload2$inboundSchema` instead. */
    Payload2$.inboundSchema = Payload2$inboundSchema;
    /** @deprecated use `Payload2$outboundSchema` instead. */
    Payload2$.outboundSchema = Payload2$outboundSchema;
})(Payload2$ || (Payload2$ = {}));
export function payload2ToJSON(payload2) {
    return JSON.stringify(Payload2$outboundSchema.parse(payload2));
}
export function payload2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Payload2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Payload2' from JSON`);
}
/** @internal */
export const Payload1$inboundSchema = z.object({});
/** @internal */
export const Payload1$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Payload1$;
(function (Payload1$) {
    /** @deprecated use `Payload1$inboundSchema` instead. */
    Payload1$.inboundSchema = Payload1$inboundSchema;
    /** @deprecated use `Payload1$outboundSchema` instead. */
    Payload1$.outboundSchema = Payload1$outboundSchema;
})(Payload1$ || (Payload1$ = {}));
export function payload1ToJSON(payload1) {
    return JSON.stringify(Payload1$outboundSchema.parse(payload1));
}
export function payload1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Payload1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Payload1' from JSON`);
}
/** @internal */
export const Payload$inboundSchema = z.union([
    z.lazy(() => SixtySix$inboundSchema),
    z.lazy(() => SixtyNine$inboundSchema),
    z.lazy(() => Seventy$inboundSchema),
    z.lazy(() => Forty$inboundSchema),
    z.lazy(() => FortyOne$inboundSchema),
    z.lazy(() => FiftyEight$inboundSchema),
    z.lazy(() => SixtyFour$inboundSchema),
    z.lazy(() => SixtySeven$inboundSchema),
    z.lazy(() => OneHundredAndThirtyOne$inboundSchema),
    z.lazy(() => OneHundredAndSixtyOne$inboundSchema),
    z.lazy(() => Payload2$inboundSchema),
    z.lazy(() => FortyFive$inboundSchema),
    z.lazy(() => SixtyEight$inboundSchema),
    z.lazy(() => OneHundredAndOne$inboundSchema),
    z.lazy(() => OneHundredAndFortyTwo$inboundSchema),
    z.lazy(() => Twelve$inboundSchema),
    z.lazy(() => Sixteen$inboundSchema),
    z.lazy(() => TwentyNine$inboundSchema),
    z.lazy(() => Thirty$inboundSchema),
    z.lazy(() => ThirtyOne$inboundSchema),
    z.lazy(() => ThirtyTwo$inboundSchema),
    z.lazy(() => ThirtyNine$inboundSchema),
    z.lazy(() => FortyEight$inboundSchema),
    z.lazy(() => FortyNine$inboundSchema),
    z.lazy(() => Fifty$inboundSchema),
    z.lazy(() => FiftyThree$inboundSchema),
    z.lazy(() => FiftyNine$inboundSchema),
    z.lazy(() => Sixty$inboundSchema),
    z.lazy(() => SixtyOne$inboundSchema),
    z.lazy(() => SixtyThree$inboundSchema),
    z.lazy(() => SeventyFour$inboundSchema),
    z.lazy(() => SeventyEight$inboundSchema),
    z.lazy(() => EightyOne$inboundSchema),
    z.lazy(() => EightyTwo$inboundSchema),
    z.lazy(() => NinetyTwo$inboundSchema),
    z.lazy(() => OneHundredAndNine$inboundSchema),
    z.lazy(() => OneHundredAndThirtyThree$inboundSchema),
    z.lazy(() => OneHundredAndThirtyFour$inboundSchema),
    z.lazy(() => OneHundredAndFortyOne$inboundSchema),
    z.lazy(() => OneHundredAndFortyThree$inboundSchema),
    z.lazy(() => OneHundredAndFortyFive$inboundSchema),
    z.lazy(() => OneHundredAndFortyEight$inboundSchema),
    z.lazy(() => OneHundredAndFiftyEight$inboundSchema),
    z.lazy(() => OneHundredAndFiftyNine$inboundSchema),
    z.lazy(() => OneHundredAndSixty$inboundSchema),
    z.lazy(() => Four$inboundSchema),
    z.lazy(() => Five$inboundSchema),
    z.lazy(() => Six$inboundSchema),
    z.lazy(() => Seventeen$inboundSchema),
    z.lazy(() => Eighteen$inboundSchema),
    z.lazy(() => TwentyThree$inboundSchema),
    z.lazy(() => TwentySeven$inboundSchema),
    z.lazy(() => ThirtyFour$inboundSchema),
    z.lazy(() => ThirtyFive$inboundSchema),
    z.lazy(() => ThirtySix$inboundSchema),
    z.lazy(() => FortyThree$inboundSchema),
    z.lazy(() => FortyFour$inboundSchema),
    z.lazy(() => FortySeven$inboundSchema),
    z.lazy(() => FiftyFour$inboundSchema),
    z.lazy(() => SixtyTwo$inboundSchema),
    z.lazy(() => SixtyFive$inboundSchema),
    z.lazy(() => SeventySeven$inboundSchema),
    z.lazy(() => EightyFive$inboundSchema),
    z.lazy(() => EightySix$inboundSchema),
    z.lazy(() => EightySeven$inboundSchema),
    z.lazy(() => EightyNine$inboundSchema),
    z.lazy(() => Ninety$inboundSchema),
    z.lazy(() => NinetyOne$inboundSchema),
    z.lazy(() => NinetyThree$inboundSchema),
    z.lazy(() => NinetyFour$inboundSchema),
    z.lazy(() => NinetySeven$inboundSchema),
    z.lazy(() => NinetyEight$inboundSchema),
    z.lazy(() => NinetyNine$inboundSchema),
    z.lazy(() => OneHundredAndFive$inboundSchema),
    z.lazy(() => OneHundredAndFourteen$inboundSchema),
    z.lazy(() => OneHundredAndFifteen$inboundSchema),
    z.lazy(() => OneHundredAndTwenty$inboundSchema),
    z.lazy(() => OneHundredAndTwentyOne$inboundSchema),
    z.lazy(() => OneHundredAndTwentyThree$inboundSchema),
    z.lazy(() => OneHundredAndThirtyTwo$inboundSchema),
    z.lazy(() => OneHundredAndThirtyFive$inboundSchema),
    z.lazy(() => OneHundredAndThirtySix$inboundSchema),
    z.lazy(() => OneHundredAndThirtySeven$inboundSchema),
    z.lazy(() => OneHundredAndThirtyNine$inboundSchema),
    z.lazy(() => OneHundredAndForty$inboundSchema),
    z.lazy(() => OneHundredAndFortySix$inboundSchema),
    z.lazy(() => OneHundredAndFortySeven$inboundSchema),
    z.lazy(() => OneHundredAndFortyNine$inboundSchema),
    z.lazy(() => OneHundredAndFiftyOne$inboundSchema),
    z.lazy(() => OneHundredAndFiftyTwo$inboundSchema),
    z.lazy(() => OneHundredAndFiftyThree$inboundSchema),
    z.lazy(() => OneHundredAndFiftyFive$inboundSchema),
    z.lazy(() => Three$inboundSchema),
    z.lazy(() => Fifteen$inboundSchema),
    z.lazy(() => Twenty$inboundSchema),
    z.lazy(() => TwentyTwo$inboundSchema),
    z.lazy(() => TwentyFour$inboundSchema),
    z.lazy(() => TwentySix$inboundSchema),
    z.lazy(() => TwentyEight$inboundSchema),
    z.lazy(() => ThirtyThree$inboundSchema),
    z.lazy(() => ThirtySeven$inboundSchema),
    z.lazy(() => ThirtyEight$inboundSchema),
    z.lazy(() => FortyTwo$inboundSchema),
    z.lazy(() => FortySix$inboundSchema),
    z.lazy(() => FiftyOne$inboundSchema),
    z.lazy(() => FiftyTwo$inboundSchema),
    z.lazy(() => SeventyOne$inboundSchema),
    z.lazy(() => SeventyTwo$inboundSchema),
    z.lazy(() => SeventyThree$inboundSchema),
    z.lazy(() => SeventyFive$inboundSchema),
    z.lazy(() => SeventySix$inboundSchema),
    z.lazy(() => SeventyNine$inboundSchema),
    z.lazy(() => Eighty$inboundSchema),
    z.lazy(() => EightyThree$inboundSchema),
    z.lazy(() => EightyFour$inboundSchema),
    z.lazy(() => EightyEight$inboundSchema),
    z.lazy(() => NinetyFive$inboundSchema),
    z.lazy(() => NinetySix$inboundSchema),
    z.lazy(() => OneHundred$inboundSchema),
    z.lazy(() => OneHundredAndThree$inboundSchema),
    z.lazy(() => OneHundredAndFour$inboundSchema),
    z.lazy(() => OneHundredAndSix$inboundSchema),
    z.lazy(() => OneHundredAndSeven$inboundSchema),
    z.lazy(() => OneHundredAndEight$inboundSchema),
    z.lazy(() => OneHundredAndTwelve$inboundSchema),
    z.lazy(() => OneHundredAndThirteen$inboundSchema),
    z.lazy(() => OneHundredAndSixteen$inboundSchema),
    z.lazy(() => OneHundredAndTwentyTwo$inboundSchema),
    z.lazy(() => OneHundredAndTwentyFour$inboundSchema),
    z.lazy(() => OneHundredAndTwentyEight$inboundSchema),
    z.lazy(() => OneHundredAndTwentyNine$inboundSchema),
    z.lazy(() => OneHundredAndThirty$inboundSchema),
    z.lazy(() => OneHundredAndThirtyEight$inboundSchema),
    z.lazy(() => OneHundredAndFortyFour$inboundSchema),
    z.lazy(() => OneHundredAndFifty$inboundSchema),
    z.lazy(() => OneHundredAndFiftyFour$inboundSchema),
    z.lazy(() => OneHundredAndFiftySix$inboundSchema),
    z.lazy(() => OneHundredAndFiftySeven$inboundSchema),
    z.lazy(() => Payload1$inboundSchema),
    z.lazy(() => Seven$inboundSchema),
    z.lazy(() => Eight$inboundSchema),
    z.lazy(() => Nine$inboundSchema),
    z.lazy(() => Ten$inboundSchema),
    z.lazy(() => Eleven$inboundSchema),
    z.lazy(() => Thirteen$inboundSchema),
    z.lazy(() => Fourteen$inboundSchema),
    z.lazy(() => Nineteen$inboundSchema),
    z.lazy(() => TwentyOne$inboundSchema),
    z.lazy(() => TwentyFive$inboundSchema),
    z.lazy(() => FiftyFive$inboundSchema),
    z.lazy(() => FiftySix$inboundSchema),
    z.lazy(() => FiftySeven$inboundSchema),
    z.lazy(() => OneHundredAndTwo$inboundSchema),
    z.lazy(() => OneHundredAndTen$inboundSchema),
    z.lazy(() => OneHundredAndEleven$inboundSchema),
    z.lazy(() => OneHundredAndSeventeen$inboundSchema),
    z.lazy(() => OneHundredAndEighteen$inboundSchema),
    z.lazy(() => OneHundredAndNineteen$inboundSchema),
    z.lazy(() => OneHundredAndTwentyFive$inboundSchema),
    z.lazy(() => OneHundredAndTwentySix$inboundSchema),
    z.lazy(() => OneHundredAndTwentySeven$inboundSchema),
]);
/** @internal */
export const Payload$outboundSchema = z.union([
    z.lazy(() => SixtySix$outboundSchema),
    z.lazy(() => SixtyNine$outboundSchema),
    z.lazy(() => Seventy$outboundSchema),
    z.lazy(() => Forty$outboundSchema),
    z.lazy(() => FortyOne$outboundSchema),
    z.lazy(() => FiftyEight$outboundSchema),
    z.lazy(() => SixtyFour$outboundSchema),
    z.lazy(() => SixtySeven$outboundSchema),
    z.lazy(() => OneHundredAndThirtyOne$outboundSchema),
    z.lazy(() => OneHundredAndSixtyOne$outboundSchema),
    z.lazy(() => Payload2$outboundSchema),
    z.lazy(() => FortyFive$outboundSchema),
    z.lazy(() => SixtyEight$outboundSchema),
    z.lazy(() => OneHundredAndOne$outboundSchema),
    z.lazy(() => OneHundredAndFortyTwo$outboundSchema),
    z.lazy(() => Twelve$outboundSchema),
    z.lazy(() => Sixteen$outboundSchema),
    z.lazy(() => TwentyNine$outboundSchema),
    z.lazy(() => Thirty$outboundSchema),
    z.lazy(() => ThirtyOne$outboundSchema),
    z.lazy(() => ThirtyTwo$outboundSchema),
    z.lazy(() => ThirtyNine$outboundSchema),
    z.lazy(() => FortyEight$outboundSchema),
    z.lazy(() => FortyNine$outboundSchema),
    z.lazy(() => Fifty$outboundSchema),
    z.lazy(() => FiftyThree$outboundSchema),
    z.lazy(() => FiftyNine$outboundSchema),
    z.lazy(() => Sixty$outboundSchema),
    z.lazy(() => SixtyOne$outboundSchema),
    z.lazy(() => SixtyThree$outboundSchema),
    z.lazy(() => SeventyFour$outboundSchema),
    z.lazy(() => SeventyEight$outboundSchema),
    z.lazy(() => EightyOne$outboundSchema),
    z.lazy(() => EightyTwo$outboundSchema),
    z.lazy(() => NinetyTwo$outboundSchema),
    z.lazy(() => OneHundredAndNine$outboundSchema),
    z.lazy(() => OneHundredAndThirtyThree$outboundSchema),
    z.lazy(() => OneHundredAndThirtyFour$outboundSchema),
    z.lazy(() => OneHundredAndFortyOne$outboundSchema),
    z.lazy(() => OneHundredAndFortyThree$outboundSchema),
    z.lazy(() => OneHundredAndFortyFive$outboundSchema),
    z.lazy(() => OneHundredAndFortyEight$outboundSchema),
    z.lazy(() => OneHundredAndFiftyEight$outboundSchema),
    z.lazy(() => OneHundredAndFiftyNine$outboundSchema),
    z.lazy(() => OneHundredAndSixty$outboundSchema),
    z.lazy(() => Four$outboundSchema),
    z.lazy(() => Five$outboundSchema),
    z.lazy(() => Six$outboundSchema),
    z.lazy(() => Seventeen$outboundSchema),
    z.lazy(() => Eighteen$outboundSchema),
    z.lazy(() => TwentyThree$outboundSchema),
    z.lazy(() => TwentySeven$outboundSchema),
    z.lazy(() => ThirtyFour$outboundSchema),
    z.lazy(() => ThirtyFive$outboundSchema),
    z.lazy(() => ThirtySix$outboundSchema),
    z.lazy(() => FortyThree$outboundSchema),
    z.lazy(() => FortyFour$outboundSchema),
    z.lazy(() => FortySeven$outboundSchema),
    z.lazy(() => FiftyFour$outboundSchema),
    z.lazy(() => SixtyTwo$outboundSchema),
    z.lazy(() => SixtyFive$outboundSchema),
    z.lazy(() => SeventySeven$outboundSchema),
    z.lazy(() => EightyFive$outboundSchema),
    z.lazy(() => EightySix$outboundSchema),
    z.lazy(() => EightySeven$outboundSchema),
    z.lazy(() => EightyNine$outboundSchema),
    z.lazy(() => Ninety$outboundSchema),
    z.lazy(() => NinetyOne$outboundSchema),
    z.lazy(() => NinetyThree$outboundSchema),
    z.lazy(() => NinetyFour$outboundSchema),
    z.lazy(() => NinetySeven$outboundSchema),
    z.lazy(() => NinetyEight$outboundSchema),
    z.lazy(() => NinetyNine$outboundSchema),
    z.lazy(() => OneHundredAndFive$outboundSchema),
    z.lazy(() => OneHundredAndFourteen$outboundSchema),
    z.lazy(() => OneHundredAndFifteen$outboundSchema),
    z.lazy(() => OneHundredAndTwenty$outboundSchema),
    z.lazy(() => OneHundredAndTwentyOne$outboundSchema),
    z.lazy(() => OneHundredAndTwentyThree$outboundSchema),
    z.lazy(() => OneHundredAndThirtyTwo$outboundSchema),
    z.lazy(() => OneHundredAndThirtyFive$outboundSchema),
    z.lazy(() => OneHundredAndThirtySix$outboundSchema),
    z.lazy(() => OneHundredAndThirtySeven$outboundSchema),
    z.lazy(() => OneHundredAndThirtyNine$outboundSchema),
    z.lazy(() => OneHundredAndForty$outboundSchema),
    z.lazy(() => OneHundredAndFortySix$outboundSchema),
    z.lazy(() => OneHundredAndFortySeven$outboundSchema),
    z.lazy(() => OneHundredAndFortyNine$outboundSchema),
    z.lazy(() => OneHundredAndFiftyOne$outboundSchema),
    z.lazy(() => OneHundredAndFiftyTwo$outboundSchema),
    z.lazy(() => OneHundredAndFiftyThree$outboundSchema),
    z.lazy(() => OneHundredAndFiftyFive$outboundSchema),
    z.lazy(() => Three$outboundSchema),
    z.lazy(() => Fifteen$outboundSchema),
    z.lazy(() => Twenty$outboundSchema),
    z.lazy(() => TwentyTwo$outboundSchema),
    z.lazy(() => TwentyFour$outboundSchema),
    z.lazy(() => TwentySix$outboundSchema),
    z.lazy(() => TwentyEight$outboundSchema),
    z.lazy(() => ThirtyThree$outboundSchema),
    z.lazy(() => ThirtySeven$outboundSchema),
    z.lazy(() => ThirtyEight$outboundSchema),
    z.lazy(() => FortyTwo$outboundSchema),
    z.lazy(() => FortySix$outboundSchema),
    z.lazy(() => FiftyOne$outboundSchema),
    z.lazy(() => FiftyTwo$outboundSchema),
    z.lazy(() => SeventyOne$outboundSchema),
    z.lazy(() => SeventyTwo$outboundSchema),
    z.lazy(() => SeventyThree$outboundSchema),
    z.lazy(() => SeventyFive$outboundSchema),
    z.lazy(() => SeventySix$outboundSchema),
    z.lazy(() => SeventyNine$outboundSchema),
    z.lazy(() => Eighty$outboundSchema),
    z.lazy(() => EightyThree$outboundSchema),
    z.lazy(() => EightyFour$outboundSchema),
    z.lazy(() => EightyEight$outboundSchema),
    z.lazy(() => NinetyFive$outboundSchema),
    z.lazy(() => NinetySix$outboundSchema),
    z.lazy(() => OneHundred$outboundSchema),
    z.lazy(() => OneHundredAndThree$outboundSchema),
    z.lazy(() => OneHundredAndFour$outboundSchema),
    z.lazy(() => OneHundredAndSix$outboundSchema),
    z.lazy(() => OneHundredAndSeven$outboundSchema),
    z.lazy(() => OneHundredAndEight$outboundSchema),
    z.lazy(() => OneHundredAndTwelve$outboundSchema),
    z.lazy(() => OneHundredAndThirteen$outboundSchema),
    z.lazy(() => OneHundredAndSixteen$outboundSchema),
    z.lazy(() => OneHundredAndTwentyTwo$outboundSchema),
    z.lazy(() => OneHundredAndTwentyFour$outboundSchema),
    z.lazy(() => OneHundredAndTwentyEight$outboundSchema),
    z.lazy(() => OneHundredAndTwentyNine$outboundSchema),
    z.lazy(() => OneHundredAndThirty$outboundSchema),
    z.lazy(() => OneHundredAndThirtyEight$outboundSchema),
    z.lazy(() => OneHundredAndFortyFour$outboundSchema),
    z.lazy(() => OneHundredAndFifty$outboundSchema),
    z.lazy(() => OneHundredAndFiftyFour$outboundSchema),
    z.lazy(() => OneHundredAndFiftySix$outboundSchema),
    z.lazy(() => OneHundredAndFiftySeven$outboundSchema),
    z.lazy(() => Payload1$outboundSchema),
    z.lazy(() => Seven$outboundSchema),
    z.lazy(() => Eight$outboundSchema),
    z.lazy(() => Nine$outboundSchema),
    z.lazy(() => Ten$outboundSchema),
    z.lazy(() => Eleven$outboundSchema),
    z.lazy(() => Thirteen$outboundSchema),
    z.lazy(() => Fourteen$outboundSchema),
    z.lazy(() => Nineteen$outboundSchema),
    z.lazy(() => TwentyOne$outboundSchema),
    z.lazy(() => TwentyFive$outboundSchema),
    z.lazy(() => FiftyFive$outboundSchema),
    z.lazy(() => FiftySix$outboundSchema),
    z.lazy(() => FiftySeven$outboundSchema),
    z.lazy(() => OneHundredAndTwo$outboundSchema),
    z.lazy(() => OneHundredAndTen$outboundSchema),
    z.lazy(() => OneHundredAndEleven$outboundSchema),
    z.lazy(() => OneHundredAndSeventeen$outboundSchema),
    z.lazy(() => OneHundredAndEighteen$outboundSchema),
    z.lazy(() => OneHundredAndNineteen$outboundSchema),
    z.lazy(() => OneHundredAndTwentyFive$outboundSchema),
    z.lazy(() => OneHundredAndTwentySix$outboundSchema),
    z.lazy(() => OneHundredAndTwentySeven$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Payload$;
(function (Payload$) {
    /** @deprecated use `Payload$inboundSchema` instead. */
    Payload$.inboundSchema = Payload$inboundSchema;
    /** @deprecated use `Payload$outboundSchema` instead. */
    Payload$.outboundSchema = Payload$outboundSchema;
})(Payload$ || (Payload$ = {}));
export function payloadToJSON(payload) {
    return JSON.stringify(Payload$outboundSchema.parse(payload));
}
export function payloadFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Payload$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Payload' from JSON`);
}
/** @internal */
export const UserEvent$inboundSchema = z.object({
    id: z.string(),
    text: z.string(),
    entities: z.array(z.lazy(() => Entities$inboundSchema)),
    createdAt: z.number(),
    user: z.lazy(() => User$inboundSchema).optional(),
    principal: z.union([
        z.lazy(() => One$inboundSchema),
        z.lazy(() => Two$inboundSchema),
    ]).optional(),
    via: z.array(z.union([
        z.lazy(() => Via1$inboundSchema),
        z.lazy(() => Via2$inboundSchema),
    ])).optional(),
    userId: z.string(),
    principalId: z.string(),
    viaIds: z.array(z.string()).optional(),
    payload: z.union([
        z.lazy(() => SixtySix$inboundSchema),
        z.lazy(() => SixtyNine$inboundSchema),
        z.lazy(() => Seventy$inboundSchema),
        z.lazy(() => Forty$inboundSchema),
        z.lazy(() => FortyOne$inboundSchema),
        z.lazy(() => FiftyEight$inboundSchema),
        z.lazy(() => SixtyFour$inboundSchema),
        z.lazy(() => SixtySeven$inboundSchema),
        z.lazy(() => OneHundredAndThirtyOne$inboundSchema),
        z.lazy(() => OneHundredAndSixtyOne$inboundSchema),
        z.lazy(() => Payload2$inboundSchema),
        z.lazy(() => FortyFive$inboundSchema),
        z.lazy(() => SixtyEight$inboundSchema),
        z.lazy(() => OneHundredAndOne$inboundSchema),
        z.lazy(() => OneHundredAndFortyTwo$inboundSchema),
        z.lazy(() => Twelve$inboundSchema),
        z.lazy(() => Sixteen$inboundSchema),
        z.lazy(() => TwentyNine$inboundSchema),
        z.lazy(() => Thirty$inboundSchema),
        z.lazy(() => ThirtyOne$inboundSchema),
        z.lazy(() => ThirtyTwo$inboundSchema),
        z.lazy(() => ThirtyNine$inboundSchema),
        z.lazy(() => FortyEight$inboundSchema),
        z.lazy(() => FortyNine$inboundSchema),
        z.lazy(() => Fifty$inboundSchema),
        z.lazy(() => FiftyThree$inboundSchema),
        z.lazy(() => FiftyNine$inboundSchema),
        z.lazy(() => Sixty$inboundSchema),
        z.lazy(() => SixtyOne$inboundSchema),
        z.lazy(() => SixtyThree$inboundSchema),
        z.lazy(() => SeventyFour$inboundSchema),
        z.lazy(() => SeventyEight$inboundSchema),
        z.lazy(() => EightyOne$inboundSchema),
        z.lazy(() => EightyTwo$inboundSchema),
        z.lazy(() => NinetyTwo$inboundSchema),
        z.lazy(() => OneHundredAndNine$inboundSchema),
        z.lazy(() => OneHundredAndThirtyThree$inboundSchema),
        z.lazy(() => OneHundredAndThirtyFour$inboundSchema),
        z.lazy(() => OneHundredAndFortyOne$inboundSchema),
        z.lazy(() => OneHundredAndFortyThree$inboundSchema),
        z.lazy(() => OneHundredAndFortyFive$inboundSchema),
        z.lazy(() => OneHundredAndFortyEight$inboundSchema),
        z.lazy(() => OneHundredAndFiftyEight$inboundSchema),
        z.lazy(() => OneHundredAndFiftyNine$inboundSchema),
        z.lazy(() => OneHundredAndSixty$inboundSchema),
        z.lazy(() => Four$inboundSchema),
        z.lazy(() => Five$inboundSchema),
        z.lazy(() => Six$inboundSchema),
        z.lazy(() => Seventeen$inboundSchema),
        z.lazy(() => Eighteen$inboundSchema),
        z.lazy(() => TwentyThree$inboundSchema),
        z.lazy(() => TwentySeven$inboundSchema),
        z.lazy(() => ThirtyFour$inboundSchema),
        z.lazy(() => ThirtyFive$inboundSchema),
        z.lazy(() => ThirtySix$inboundSchema),
        z.lazy(() => FortyThree$inboundSchema),
        z.lazy(() => FortyFour$inboundSchema),
        z.lazy(() => FortySeven$inboundSchema),
        z.lazy(() => FiftyFour$inboundSchema),
        z.lazy(() => SixtyTwo$inboundSchema),
        z.lazy(() => SixtyFive$inboundSchema),
        z.lazy(() => SeventySeven$inboundSchema),
        z.lazy(() => EightyFive$inboundSchema),
        z.lazy(() => EightySix$inboundSchema),
        z.lazy(() => EightySeven$inboundSchema),
        z.lazy(() => EightyNine$inboundSchema),
        z.lazy(() => Ninety$inboundSchema),
        z.lazy(() => NinetyOne$inboundSchema),
        z.lazy(() => NinetyThree$inboundSchema),
        z.lazy(() => NinetyFour$inboundSchema),
        z.lazy(() => NinetySeven$inboundSchema),
        z.lazy(() => NinetyEight$inboundSchema),
        z.lazy(() => NinetyNine$inboundSchema),
        z.lazy(() => OneHundredAndFive$inboundSchema),
        z.lazy(() => OneHundredAndFourteen$inboundSchema),
        z.lazy(() => OneHundredAndFifteen$inboundSchema),
        z.lazy(() => OneHundredAndTwenty$inboundSchema),
        z.lazy(() => OneHundredAndTwentyOne$inboundSchema),
        z.lazy(() => OneHundredAndTwentyThree$inboundSchema),
        z.lazy(() => OneHundredAndThirtyTwo$inboundSchema),
        z.lazy(() => OneHundredAndThirtyFive$inboundSchema),
        z.lazy(() => OneHundredAndThirtySix$inboundSchema),
        z.lazy(() => OneHundredAndThirtySeven$inboundSchema),
        z.lazy(() => OneHundredAndThirtyNine$inboundSchema),
        z.lazy(() => OneHundredAndForty$inboundSchema),
        z.lazy(() => OneHundredAndFortySix$inboundSchema),
        z.lazy(() => OneHundredAndFortySeven$inboundSchema),
        z.lazy(() => OneHundredAndFortyNine$inboundSchema),
        z.lazy(() => OneHundredAndFiftyOne$inboundSchema),
        z.lazy(() => OneHundredAndFiftyTwo$inboundSchema),
        z.lazy(() => OneHundredAndFiftyThree$inboundSchema),
        z.lazy(() => OneHundredAndFiftyFive$inboundSchema),
        z.lazy(() => Three$inboundSchema),
        z.lazy(() => Fifteen$inboundSchema),
        z.lazy(() => Twenty$inboundSchema),
        z.lazy(() => TwentyTwo$inboundSchema),
        z.lazy(() => TwentyFour$inboundSchema),
        z.lazy(() => TwentySix$inboundSchema),
        z.lazy(() => TwentyEight$inboundSchema),
        z.lazy(() => ThirtyThree$inboundSchema),
        z.lazy(() => ThirtySeven$inboundSchema),
        z.lazy(() => ThirtyEight$inboundSchema),
        z.lazy(() => FortyTwo$inboundSchema),
        z.lazy(() => FortySix$inboundSchema),
        z.lazy(() => FiftyOne$inboundSchema),
        z.lazy(() => FiftyTwo$inboundSchema),
        z.lazy(() => SeventyOne$inboundSchema),
        z.lazy(() => SeventyTwo$inboundSchema),
        z.lazy(() => SeventyThree$inboundSchema),
        z.lazy(() => SeventyFive$inboundSchema),
        z.lazy(() => SeventySix$inboundSchema),
        z.lazy(() => SeventyNine$inboundSchema),
        z.lazy(() => Eighty$inboundSchema),
        z.lazy(() => EightyThree$inboundSchema),
        z.lazy(() => EightyFour$inboundSchema),
        z.lazy(() => EightyEight$inboundSchema),
        z.lazy(() => NinetyFive$inboundSchema),
        z.lazy(() => NinetySix$inboundSchema),
        z.lazy(() => OneHundred$inboundSchema),
        z.lazy(() => OneHundredAndThree$inboundSchema),
        z.lazy(() => OneHundredAndFour$inboundSchema),
        z.lazy(() => OneHundredAndSix$inboundSchema),
        z.lazy(() => OneHundredAndSeven$inboundSchema),
        z.lazy(() => OneHundredAndEight$inboundSchema),
        z.lazy(() => OneHundredAndTwelve$inboundSchema),
        z.lazy(() => OneHundredAndThirteen$inboundSchema),
        z.lazy(() => OneHundredAndSixteen$inboundSchema),
        z.lazy(() => OneHundredAndTwentyTwo$inboundSchema),
        z.lazy(() => OneHundredAndTwentyFour$inboundSchema),
        z.lazy(() => OneHundredAndTwentyEight$inboundSchema),
        z.lazy(() => OneHundredAndTwentyNine$inboundSchema),
        z.lazy(() => OneHundredAndThirty$inboundSchema),
        z.lazy(() => OneHundredAndThirtyEight$inboundSchema),
        z.lazy(() => OneHundredAndFortyFour$inboundSchema),
        z.lazy(() => OneHundredAndFifty$inboundSchema),
        z.lazy(() => OneHundredAndFiftyFour$inboundSchema),
        z.lazy(() => OneHundredAndFiftySix$inboundSchema),
        z.lazy(() => OneHundredAndFiftySeven$inboundSchema),
        z.lazy(() => Payload1$inboundSchema),
        z.lazy(() => Seven$inboundSchema),
        z.lazy(() => Eight$inboundSchema),
        z.lazy(() => Nine$inboundSchema),
        z.lazy(() => Ten$inboundSchema),
        z.lazy(() => Eleven$inboundSchema),
        z.lazy(() => Thirteen$inboundSchema),
        z.lazy(() => Fourteen$inboundSchema),
        z.lazy(() => Nineteen$inboundSchema),
        z.lazy(() => TwentyOne$inboundSchema),
        z.lazy(() => TwentyFive$inboundSchema),
        z.lazy(() => FiftyFive$inboundSchema),
        z.lazy(() => FiftySix$inboundSchema),
        z.lazy(() => FiftySeven$inboundSchema),
        z.lazy(() => OneHundredAndTwo$inboundSchema),
        z.lazy(() => OneHundredAndTen$inboundSchema),
        z.lazy(() => OneHundredAndEleven$inboundSchema),
        z.lazy(() => OneHundredAndSeventeen$inboundSchema),
        z.lazy(() => OneHundredAndEighteen$inboundSchema),
        z.lazy(() => OneHundredAndNineteen$inboundSchema),
        z.lazy(() => OneHundredAndTwentyFive$inboundSchema),
        z.lazy(() => OneHundredAndTwentySix$inboundSchema),
        z.lazy(() => OneHundredAndTwentySeven$inboundSchema),
    ]).optional(),
});
/** @internal */
export const UserEvent$outboundSchema = z.object({
    id: z.string(),
    text: z.string(),
    entities: z.array(z.lazy(() => Entities$outboundSchema)),
    createdAt: z.number(),
    user: z.lazy(() => User$outboundSchema).optional(),
    principal: z.union([
        z.lazy(() => One$outboundSchema),
        z.lazy(() => Two$outboundSchema),
    ]).optional(),
    via: z.array(z.union([
        z.lazy(() => Via1$outboundSchema),
        z.lazy(() => Via2$outboundSchema),
    ])).optional(),
    userId: z.string(),
    principalId: z.string(),
    viaIds: z.array(z.string()).optional(),
    payload: z.union([
        z.lazy(() => SixtySix$outboundSchema),
        z.lazy(() => SixtyNine$outboundSchema),
        z.lazy(() => Seventy$outboundSchema),
        z.lazy(() => Forty$outboundSchema),
        z.lazy(() => FortyOne$outboundSchema),
        z.lazy(() => FiftyEight$outboundSchema),
        z.lazy(() => SixtyFour$outboundSchema),
        z.lazy(() => SixtySeven$outboundSchema),
        z.lazy(() => OneHundredAndThirtyOne$outboundSchema),
        z.lazy(() => OneHundredAndSixtyOne$outboundSchema),
        z.lazy(() => Payload2$outboundSchema),
        z.lazy(() => FortyFive$outboundSchema),
        z.lazy(() => SixtyEight$outboundSchema),
        z.lazy(() => OneHundredAndOne$outboundSchema),
        z.lazy(() => OneHundredAndFortyTwo$outboundSchema),
        z.lazy(() => Twelve$outboundSchema),
        z.lazy(() => Sixteen$outboundSchema),
        z.lazy(() => TwentyNine$outboundSchema),
        z.lazy(() => Thirty$outboundSchema),
        z.lazy(() => ThirtyOne$outboundSchema),
        z.lazy(() => ThirtyTwo$outboundSchema),
        z.lazy(() => ThirtyNine$outboundSchema),
        z.lazy(() => FortyEight$outboundSchema),
        z.lazy(() => FortyNine$outboundSchema),
        z.lazy(() => Fifty$outboundSchema),
        z.lazy(() => FiftyThree$outboundSchema),
        z.lazy(() => FiftyNine$outboundSchema),
        z.lazy(() => Sixty$outboundSchema),
        z.lazy(() => SixtyOne$outboundSchema),
        z.lazy(() => SixtyThree$outboundSchema),
        z.lazy(() => SeventyFour$outboundSchema),
        z.lazy(() => SeventyEight$outboundSchema),
        z.lazy(() => EightyOne$outboundSchema),
        z.lazy(() => EightyTwo$outboundSchema),
        z.lazy(() => NinetyTwo$outboundSchema),
        z.lazy(() => OneHundredAndNine$outboundSchema),
        z.lazy(() => OneHundredAndThirtyThree$outboundSchema),
        z.lazy(() => OneHundredAndThirtyFour$outboundSchema),
        z.lazy(() => OneHundredAndFortyOne$outboundSchema),
        z.lazy(() => OneHundredAndFortyThree$outboundSchema),
        z.lazy(() => OneHundredAndFortyFive$outboundSchema),
        z.lazy(() => OneHundredAndFortyEight$outboundSchema),
        z.lazy(() => OneHundredAndFiftyEight$outboundSchema),
        z.lazy(() => OneHundredAndFiftyNine$outboundSchema),
        z.lazy(() => OneHundredAndSixty$outboundSchema),
        z.lazy(() => Four$outboundSchema),
        z.lazy(() => Five$outboundSchema),
        z.lazy(() => Six$outboundSchema),
        z.lazy(() => Seventeen$outboundSchema),
        z.lazy(() => Eighteen$outboundSchema),
        z.lazy(() => TwentyThree$outboundSchema),
        z.lazy(() => TwentySeven$outboundSchema),
        z.lazy(() => ThirtyFour$outboundSchema),
        z.lazy(() => ThirtyFive$outboundSchema),
        z.lazy(() => ThirtySix$outboundSchema),
        z.lazy(() => FortyThree$outboundSchema),
        z.lazy(() => FortyFour$outboundSchema),
        z.lazy(() => FortySeven$outboundSchema),
        z.lazy(() => FiftyFour$outboundSchema),
        z.lazy(() => SixtyTwo$outboundSchema),
        z.lazy(() => SixtyFive$outboundSchema),
        z.lazy(() => SeventySeven$outboundSchema),
        z.lazy(() => EightyFive$outboundSchema),
        z.lazy(() => EightySix$outboundSchema),
        z.lazy(() => EightySeven$outboundSchema),
        z.lazy(() => EightyNine$outboundSchema),
        z.lazy(() => Ninety$outboundSchema),
        z.lazy(() => NinetyOne$outboundSchema),
        z.lazy(() => NinetyThree$outboundSchema),
        z.lazy(() => NinetyFour$outboundSchema),
        z.lazy(() => NinetySeven$outboundSchema),
        z.lazy(() => NinetyEight$outboundSchema),
        z.lazy(() => NinetyNine$outboundSchema),
        z.lazy(() => OneHundredAndFive$outboundSchema),
        z.lazy(() => OneHundredAndFourteen$outboundSchema),
        z.lazy(() => OneHundredAndFifteen$outboundSchema),
        z.lazy(() => OneHundredAndTwenty$outboundSchema),
        z.lazy(() => OneHundredAndTwentyOne$outboundSchema),
        z.lazy(() => OneHundredAndTwentyThree$outboundSchema),
        z.lazy(() => OneHundredAndThirtyTwo$outboundSchema),
        z.lazy(() => OneHundredAndThirtyFive$outboundSchema),
        z.lazy(() => OneHundredAndThirtySix$outboundSchema),
        z.lazy(() => OneHundredAndThirtySeven$outboundSchema),
        z.lazy(() => OneHundredAndThirtyNine$outboundSchema),
        z.lazy(() => OneHundredAndForty$outboundSchema),
        z.lazy(() => OneHundredAndFortySix$outboundSchema),
        z.lazy(() => OneHundredAndFortySeven$outboundSchema),
        z.lazy(() => OneHundredAndFortyNine$outboundSchema),
        z.lazy(() => OneHundredAndFiftyOne$outboundSchema),
        z.lazy(() => OneHundredAndFiftyTwo$outboundSchema),
        z.lazy(() => OneHundredAndFiftyThree$outboundSchema),
        z.lazy(() => OneHundredAndFiftyFive$outboundSchema),
        z.lazy(() => Three$outboundSchema),
        z.lazy(() => Fifteen$outboundSchema),
        z.lazy(() => Twenty$outboundSchema),
        z.lazy(() => TwentyTwo$outboundSchema),
        z.lazy(() => TwentyFour$outboundSchema),
        z.lazy(() => TwentySix$outboundSchema),
        z.lazy(() => TwentyEight$outboundSchema),
        z.lazy(() => ThirtyThree$outboundSchema),
        z.lazy(() => ThirtySeven$outboundSchema),
        z.lazy(() => ThirtyEight$outboundSchema),
        z.lazy(() => FortyTwo$outboundSchema),
        z.lazy(() => FortySix$outboundSchema),
        z.lazy(() => FiftyOne$outboundSchema),
        z.lazy(() => FiftyTwo$outboundSchema),
        z.lazy(() => SeventyOne$outboundSchema),
        z.lazy(() => SeventyTwo$outboundSchema),
        z.lazy(() => SeventyThree$outboundSchema),
        z.lazy(() => SeventyFive$outboundSchema),
        z.lazy(() => SeventySix$outboundSchema),
        z.lazy(() => SeventyNine$outboundSchema),
        z.lazy(() => Eighty$outboundSchema),
        z.lazy(() => EightyThree$outboundSchema),
        z.lazy(() => EightyFour$outboundSchema),
        z.lazy(() => EightyEight$outboundSchema),
        z.lazy(() => NinetyFive$outboundSchema),
        z.lazy(() => NinetySix$outboundSchema),
        z.lazy(() => OneHundred$outboundSchema),
        z.lazy(() => OneHundredAndThree$outboundSchema),
        z.lazy(() => OneHundredAndFour$outboundSchema),
        z.lazy(() => OneHundredAndSix$outboundSchema),
        z.lazy(() => OneHundredAndSeven$outboundSchema),
        z.lazy(() => OneHundredAndEight$outboundSchema),
        z.lazy(() => OneHundredAndTwelve$outboundSchema),
        z.lazy(() => OneHundredAndThirteen$outboundSchema),
        z.lazy(() => OneHundredAndSixteen$outboundSchema),
        z.lazy(() => OneHundredAndTwentyTwo$outboundSchema),
        z.lazy(() => OneHundredAndTwentyFour$outboundSchema),
        z.lazy(() => OneHundredAndTwentyEight$outboundSchema),
        z.lazy(() => OneHundredAndTwentyNine$outboundSchema),
        z.lazy(() => OneHundredAndThirty$outboundSchema),
        z.lazy(() => OneHundredAndThirtyEight$outboundSchema),
        z.lazy(() => OneHundredAndFortyFour$outboundSchema),
        z.lazy(() => OneHundredAndFifty$outboundSchema),
        z.lazy(() => OneHundredAndFiftyFour$outboundSchema),
        z.lazy(() => OneHundredAndFiftySix$outboundSchema),
        z.lazy(() => OneHundredAndFiftySeven$outboundSchema),
        z.lazy(() => Payload1$outboundSchema),
        z.lazy(() => Seven$outboundSchema),
        z.lazy(() => Eight$outboundSchema),
        z.lazy(() => Nine$outboundSchema),
        z.lazy(() => Ten$outboundSchema),
        z.lazy(() => Eleven$outboundSchema),
        z.lazy(() => Thirteen$outboundSchema),
        z.lazy(() => Fourteen$outboundSchema),
        z.lazy(() => Nineteen$outboundSchema),
        z.lazy(() => TwentyOne$outboundSchema),
        z.lazy(() => TwentyFive$outboundSchema),
        z.lazy(() => FiftyFive$outboundSchema),
        z.lazy(() => FiftySix$outboundSchema),
        z.lazy(() => FiftySeven$outboundSchema),
        z.lazy(() => OneHundredAndTwo$outboundSchema),
        z.lazy(() => OneHundredAndTen$outboundSchema),
        z.lazy(() => OneHundredAndEleven$outboundSchema),
        z.lazy(() => OneHundredAndSeventeen$outboundSchema),
        z.lazy(() => OneHundredAndEighteen$outboundSchema),
        z.lazy(() => OneHundredAndNineteen$outboundSchema),
        z.lazy(() => OneHundredAndTwentyFive$outboundSchema),
        z.lazy(() => OneHundredAndTwentySix$outboundSchema),
        z.lazy(() => OneHundredAndTwentySeven$outboundSchema),
    ]).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEvent$;
(function (UserEvent$) {
    /** @deprecated use `UserEvent$inboundSchema` instead. */
    UserEvent$.inboundSchema = UserEvent$inboundSchema;
    /** @deprecated use `UserEvent$outboundSchema` instead. */
    UserEvent$.outboundSchema = UserEvent$outboundSchema;
})(UserEvent$ || (UserEvent$ = {}));
export function userEventToJSON(userEvent) {
    return JSON.stringify(UserEvent$outboundSchema.parse(userEvent));
}
export function userEventFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEvent$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEvent' from JSON`);
}
//# sourceMappingURL=userevent.js.map