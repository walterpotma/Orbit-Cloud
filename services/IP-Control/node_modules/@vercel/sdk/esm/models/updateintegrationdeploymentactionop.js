/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
export const UpdateIntegrationDeploymentActionStatus = {
    Running: "running",
    Succeeded: "succeeded",
    Failed: "failed",
};
/** @internal */
export const UpdateIntegrationDeploymentActionStatus$inboundSchema = z
    .nativeEnum(UpdateIntegrationDeploymentActionStatus);
/** @internal */
export const UpdateIntegrationDeploymentActionStatus$outboundSchema = UpdateIntegrationDeploymentActionStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateIntegrationDeploymentActionStatus$;
(function (UpdateIntegrationDeploymentActionStatus$) {
    /** @deprecated use `UpdateIntegrationDeploymentActionStatus$inboundSchema` instead. */
    UpdateIntegrationDeploymentActionStatus$.inboundSchema = UpdateIntegrationDeploymentActionStatus$inboundSchema;
    /** @deprecated use `UpdateIntegrationDeploymentActionStatus$outboundSchema` instead. */
    UpdateIntegrationDeploymentActionStatus$.outboundSchema = UpdateIntegrationDeploymentActionStatus$outboundSchema;
})(UpdateIntegrationDeploymentActionStatus$ || (UpdateIntegrationDeploymentActionStatus$ = {}));
/** @internal */
export const Secrets$inboundSchema = z.object({
    name: z.string(),
    value: z.string(),
});
/** @internal */
export const Secrets$outboundSchema = z.object({
    name: z.string(),
    value: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Secrets$;
(function (Secrets$) {
    /** @deprecated use `Secrets$inboundSchema` instead. */
    Secrets$.inboundSchema = Secrets$inboundSchema;
    /** @deprecated use `Secrets$outboundSchema` instead. */
    Secrets$.outboundSchema = Secrets$outboundSchema;
})(Secrets$ || (Secrets$ = {}));
export function secretsToJSON(secrets) {
    return JSON.stringify(Secrets$outboundSchema.parse(secrets));
}
export function secretsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Secrets$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Secrets' from JSON`);
}
/** @internal */
export const Outcomes1$inboundSchema = z.object({
    kind: z.string(),
    secrets: z.array(z.lazy(() => Secrets$inboundSchema)),
});
/** @internal */
export const Outcomes1$outboundSchema = z.object({
    kind: z.string(),
    secrets: z.array(z.lazy(() => Secrets$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Outcomes1$;
(function (Outcomes1$) {
    /** @deprecated use `Outcomes1$inboundSchema` instead. */
    Outcomes1$.inboundSchema = Outcomes1$inboundSchema;
    /** @deprecated use `Outcomes1$outboundSchema` instead. */
    Outcomes1$.outboundSchema = Outcomes1$outboundSchema;
})(Outcomes1$ || (Outcomes1$ = {}));
export function outcomes1ToJSON(outcomes1) {
    return JSON.stringify(Outcomes1$outboundSchema.parse(outcomes1));
}
export function outcomes1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Outcomes1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Outcomes1' from JSON`);
}
/** @internal */
export const Outcomes$inboundSchema = z.lazy(() => Outcomes1$inboundSchema);
/** @internal */
export const Outcomes$outboundSchema = z.lazy(() => Outcomes1$outboundSchema);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Outcomes$;
(function (Outcomes$) {
    /** @deprecated use `Outcomes$inboundSchema` instead. */
    Outcomes$.inboundSchema = Outcomes$inboundSchema;
    /** @deprecated use `Outcomes$outboundSchema` instead. */
    Outcomes$.outboundSchema = Outcomes$outboundSchema;
})(Outcomes$ || (Outcomes$ = {}));
export function outcomesToJSON(outcomes) {
    return JSON.stringify(Outcomes$outboundSchema.parse(outcomes));
}
export function outcomesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Outcomes$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Outcomes' from JSON`);
}
/** @internal */
export const UpdateIntegrationDeploymentActionRequestBody$inboundSchema = z.object({
    status: UpdateIntegrationDeploymentActionStatus$inboundSchema.optional(),
    statusText: z.string().optional(),
    statusUrl: z.string().optional(),
    outcomes: z.array(z.lazy(() => Outcomes1$inboundSchema)).optional(),
});
/** @internal */
export const UpdateIntegrationDeploymentActionRequestBody$outboundSchema = z.object({
    status: UpdateIntegrationDeploymentActionStatus$outboundSchema.optional(),
    statusText: z.string().optional(),
    statusUrl: z.string().optional(),
    outcomes: z.array(z.lazy(() => Outcomes1$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateIntegrationDeploymentActionRequestBody$;
(function (UpdateIntegrationDeploymentActionRequestBody$) {
    /** @deprecated use `UpdateIntegrationDeploymentActionRequestBody$inboundSchema` instead. */
    UpdateIntegrationDeploymentActionRequestBody$.inboundSchema = UpdateIntegrationDeploymentActionRequestBody$inboundSchema;
    /** @deprecated use `UpdateIntegrationDeploymentActionRequestBody$outboundSchema` instead. */
    UpdateIntegrationDeploymentActionRequestBody$.outboundSchema = UpdateIntegrationDeploymentActionRequestBody$outboundSchema;
})(UpdateIntegrationDeploymentActionRequestBody$ || (UpdateIntegrationDeploymentActionRequestBody$ = {}));
export function updateIntegrationDeploymentActionRequestBodyToJSON(updateIntegrationDeploymentActionRequestBody) {
    return JSON.stringify(UpdateIntegrationDeploymentActionRequestBody$outboundSchema.parse(updateIntegrationDeploymentActionRequestBody));
}
export function updateIntegrationDeploymentActionRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateIntegrationDeploymentActionRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateIntegrationDeploymentActionRequestBody' from JSON`);
}
/** @internal */
export const UpdateIntegrationDeploymentActionRequest$inboundSchema = z.object({
    deploymentId: z.string(),
    integrationConfigurationId: z.string(),
    resourceId: z.string(),
    action: z.string(),
    RequestBody: z.lazy(() => UpdateIntegrationDeploymentActionRequestBody$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const UpdateIntegrationDeploymentActionRequest$outboundSchema = z.object({
    deploymentId: z.string(),
    integrationConfigurationId: z.string(),
    resourceId: z.string(),
    action: z.string(),
    requestBody: z.lazy(() => UpdateIntegrationDeploymentActionRequestBody$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateIntegrationDeploymentActionRequest$;
(function (UpdateIntegrationDeploymentActionRequest$) {
    /** @deprecated use `UpdateIntegrationDeploymentActionRequest$inboundSchema` instead. */
    UpdateIntegrationDeploymentActionRequest$.inboundSchema = UpdateIntegrationDeploymentActionRequest$inboundSchema;
    /** @deprecated use `UpdateIntegrationDeploymentActionRequest$outboundSchema` instead. */
    UpdateIntegrationDeploymentActionRequest$.outboundSchema = UpdateIntegrationDeploymentActionRequest$outboundSchema;
})(UpdateIntegrationDeploymentActionRequest$ || (UpdateIntegrationDeploymentActionRequest$ = {}));
export function updateIntegrationDeploymentActionRequestToJSON(updateIntegrationDeploymentActionRequest) {
    return JSON.stringify(UpdateIntegrationDeploymentActionRequest$outboundSchema.parse(updateIntegrationDeploymentActionRequest));
}
export function updateIntegrationDeploymentActionRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateIntegrationDeploymentActionRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateIntegrationDeploymentActionRequest' from JSON`);
}
//# sourceMappingURL=updateintegrationdeploymentactionop.js.map