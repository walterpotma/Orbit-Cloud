/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
/**
 * The domain's transfer policy (depends on TLD requirements). `charge-and-renew`: transfer will charge for renewal and will renew the existing domain's registration. `no-charge-no-change`: transfer will have no change to registration period and does not require charge. `no-change`: transfer charge is required, but no change in registration period. `new-term`: transfer charge is required and a new registry term is set based on the transfer date. `not-supported`: transfers are not supported for this domain or TLD. `null`: This TLD is not supported by Vercel's Registrar.
 */
export const TransferPolicy = {
    ChargeAndRenew: "charge-and-renew",
    NoChargeNoChange: "no-charge-no-change",
    NoChange: "no-change",
    NewTerm: "new-term",
    NotSupported: "not-supported",
};
/**
 * The current state of an ongoing transfer. `pending_owner`: Awaiting approval by domain's admin contact (every transfer begins with this status). If approval is not given within five days, the transfer is cancelled. `pending_admin`: Waiting for approval by Vercel Registrar admin. `pending_registry`: Awaiting registry approval (the transfer completes after 7 days unless it is declined by the current registrar). `completed`: The transfer completed successfully. `cancelled`: The transfer was cancelled. `undef`: No transfer exists for this domain. `unknown`: This TLD is not supported by Vercel's Registrar.
 */
export const GetDomainTransferStatus = {
    PendingOwner: "pending_owner",
    PendingAdmin: "pending_admin",
    PendingRegistry: "pending_registry",
    Completed: "completed",
    Cancelled: "cancelled",
    Undef: "undef",
    Unknown: "unknown",
};
/** @internal */
export const GetDomainTransferRequest$inboundSchema = z.object({
    teamId: z.string().optional(),
    slug: z.string().optional(),
    domain: z.string(),
});
/** @internal */
export const GetDomainTransferRequest$outboundSchema = z.object({
    teamId: z.string().optional(),
    slug: z.string().optional(),
    domain: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDomainTransferRequest$;
(function (GetDomainTransferRequest$) {
    /** @deprecated use `GetDomainTransferRequest$inboundSchema` instead. */
    GetDomainTransferRequest$.inboundSchema = GetDomainTransferRequest$inboundSchema;
    /** @deprecated use `GetDomainTransferRequest$outboundSchema` instead. */
    GetDomainTransferRequest$.outboundSchema = GetDomainTransferRequest$outboundSchema;
})(GetDomainTransferRequest$ || (GetDomainTransferRequest$ = {}));
export function getDomainTransferRequestToJSON(getDomainTransferRequest) {
    return JSON.stringify(GetDomainTransferRequest$outboundSchema.parse(getDomainTransferRequest));
}
export function getDomainTransferRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDomainTransferRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDomainTransferRequest' from JSON`);
}
/** @internal */
export const TransferPolicy$inboundSchema = z.nativeEnum(TransferPolicy);
/** @internal */
export const TransferPolicy$outboundSchema = TransferPolicy$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransferPolicy$;
(function (TransferPolicy$) {
    /** @deprecated use `TransferPolicy$inboundSchema` instead. */
    TransferPolicy$.inboundSchema = TransferPolicy$inboundSchema;
    /** @deprecated use `TransferPolicy$outboundSchema` instead. */
    TransferPolicy$.outboundSchema = TransferPolicy$outboundSchema;
})(TransferPolicy$ || (TransferPolicy$ = {}));
/** @internal */
export const GetDomainTransferStatus$inboundSchema = z.nativeEnum(GetDomainTransferStatus);
/** @internal */
export const GetDomainTransferStatus$outboundSchema = GetDomainTransferStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDomainTransferStatus$;
(function (GetDomainTransferStatus$) {
    /** @deprecated use `GetDomainTransferStatus$inboundSchema` instead. */
    GetDomainTransferStatus$.inboundSchema = GetDomainTransferStatus$inboundSchema;
    /** @deprecated use `GetDomainTransferStatus$outboundSchema` instead. */
    GetDomainTransferStatus$.outboundSchema = GetDomainTransferStatus$outboundSchema;
})(GetDomainTransferStatus$ || (GetDomainTransferStatus$ = {}));
/** @internal */
export const GetDomainTransferResponseBody$inboundSchema = z.object({
    transferable: z.boolean(),
    transferPolicy: z.nullable(TransferPolicy$inboundSchema),
    reason: z.string(),
    status: GetDomainTransferStatus$inboundSchema,
});
/** @internal */
export const GetDomainTransferResponseBody$outboundSchema = z.object({
    transferable: z.boolean(),
    transferPolicy: z.nullable(TransferPolicy$outboundSchema),
    reason: z.string(),
    status: GetDomainTransferStatus$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDomainTransferResponseBody$;
(function (GetDomainTransferResponseBody$) {
    /** @deprecated use `GetDomainTransferResponseBody$inboundSchema` instead. */
    GetDomainTransferResponseBody$.inboundSchema = GetDomainTransferResponseBody$inboundSchema;
    /** @deprecated use `GetDomainTransferResponseBody$outboundSchema` instead. */
    GetDomainTransferResponseBody$.outboundSchema = GetDomainTransferResponseBody$outboundSchema;
})(GetDomainTransferResponseBody$ || (GetDomainTransferResponseBody$ = {}));
export function getDomainTransferResponseBodyToJSON(getDomainTransferResponseBody) {
    return JSON.stringify(GetDomainTransferResponseBody$outboundSchema.parse(getDomainTransferResponseBody));
}
export function getDomainTransferResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDomainTransferResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDomainTransferResponseBody' from JSON`);
}
//# sourceMappingURL=getdomaintransferop.js.map