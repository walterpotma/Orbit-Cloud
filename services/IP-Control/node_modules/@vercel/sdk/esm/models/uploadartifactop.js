/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/** @internal */
export const UploadArtifactRequest$inboundSchema = z.object({
    "Content-Length": z.number(),
    "x-artifact-duration": z.number().optional(),
    "x-artifact-client-ci": z.string().optional(),
    "x-artifact-client-interactive": z.number().int().optional(),
    "x-artifact-tag": z.string().optional(),
    hash: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.union([
        z.instanceof((ReadableStream)),
        z.instanceof(Blob),
        z.instanceof(ArrayBuffer),
        z.instanceof(Uint8Array),
    ]),
}).transform((v) => {
    return remap$(v, {
        "Content-Length": "contentLength",
        "x-artifact-duration": "xArtifactDuration",
        "x-artifact-client-ci": "xArtifactClientCi",
        "x-artifact-client-interactive": "xArtifactClientInteractive",
        "x-artifact-tag": "xArtifactTag",
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const UploadArtifactRequest$outboundSchema = z.object({
    contentLength: z.number(),
    xArtifactDuration: z.number().optional(),
    xArtifactClientCi: z.string().optional(),
    xArtifactClientInteractive: z.number().int().optional(),
    xArtifactTag: z.string().optional(),
    hash: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.union([
        z.instanceof((ReadableStream)),
        z.instanceof(Blob),
        z.instanceof(ArrayBuffer),
        z.instanceof(Uint8Array),
    ]),
}).transform((v) => {
    return remap$(v, {
        contentLength: "Content-Length",
        xArtifactDuration: "x-artifact-duration",
        xArtifactClientCi: "x-artifact-client-ci",
        xArtifactClientInteractive: "x-artifact-client-interactive",
        xArtifactTag: "x-artifact-tag",
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UploadArtifactRequest$;
(function (UploadArtifactRequest$) {
    /** @deprecated use `UploadArtifactRequest$inboundSchema` instead. */
    UploadArtifactRequest$.inboundSchema = UploadArtifactRequest$inboundSchema;
    /** @deprecated use `UploadArtifactRequest$outboundSchema` instead. */
    UploadArtifactRequest$.outboundSchema = UploadArtifactRequest$outboundSchema;
})(UploadArtifactRequest$ || (UploadArtifactRequest$ = {}));
export function uploadArtifactRequestToJSON(uploadArtifactRequest) {
    return JSON.stringify(UploadArtifactRequest$outboundSchema.parse(uploadArtifactRequest));
}
export function uploadArtifactRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UploadArtifactRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UploadArtifactRequest' from JSON`);
}
/** @internal */
export const UploadArtifactResponseBody$inboundSchema = z.object({
    urls: z.array(z.string()),
});
/** @internal */
export const UploadArtifactResponseBody$outboundSchema = z.object({
    urls: z.array(z.string()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UploadArtifactResponseBody$;
(function (UploadArtifactResponseBody$) {
    /** @deprecated use `UploadArtifactResponseBody$inboundSchema` instead. */
    UploadArtifactResponseBody$.inboundSchema = UploadArtifactResponseBody$inboundSchema;
    /** @deprecated use `UploadArtifactResponseBody$outboundSchema` instead. */
    UploadArtifactResponseBody$.outboundSchema = UploadArtifactResponseBody$outboundSchema;
})(UploadArtifactResponseBody$ || (UploadArtifactResponseBody$ = {}));
export function uploadArtifactResponseBodyToJSON(uploadArtifactResponseBody) {
    return JSON.stringify(UploadArtifactResponseBody$outboundSchema.parse(uploadArtifactResponseBody));
}
export function uploadArtifactResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UploadArtifactResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UploadArtifactResponseBody' from JSON`);
}
//# sourceMappingURL=uploadartifactop.js.map