/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
export const Result = {
    Paid: "paid",
    Notpaid: "notpaid",
};
/** @internal */
export const SubmitInvoicePeriod$inboundSchema = z.object({
    start: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    end: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});
/** @internal */
export const SubmitInvoicePeriod$outboundSchema = z.object({
    start: z.date().transform(v => v.toISOString()),
    end: z.date().transform(v => v.toISOString()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SubmitInvoicePeriod$;
(function (SubmitInvoicePeriod$) {
    /** @deprecated use `SubmitInvoicePeriod$inboundSchema` instead. */
    SubmitInvoicePeriod$.inboundSchema = SubmitInvoicePeriod$inboundSchema;
    /** @deprecated use `SubmitInvoicePeriod$outboundSchema` instead. */
    SubmitInvoicePeriod$.outboundSchema = SubmitInvoicePeriod$outboundSchema;
})(SubmitInvoicePeriod$ || (SubmitInvoicePeriod$ = {}));
export function submitInvoicePeriodToJSON(submitInvoicePeriod) {
    return JSON.stringify(SubmitInvoicePeriod$outboundSchema.parse(submitInvoicePeriod));
}
export function submitInvoicePeriodFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SubmitInvoicePeriod$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SubmitInvoicePeriod' from JSON`);
}
/** @internal */
export const SubmitInvoiceItems$inboundSchema = z.object({
    resourceId: z.string().optional(),
    billingPlanId: z.string(),
    start: z.string().datetime({ offset: true }).transform(v => new Date(v))
        .optional(),
    end: z.string().datetime({ offset: true }).transform(v => new Date(v))
        .optional(),
    name: z.string(),
    details: z.string().optional(),
    price: z.string(),
    quantity: z.number(),
    units: z.string(),
    total: z.string(),
});
/** @internal */
export const SubmitInvoiceItems$outboundSchema = z.object({
    resourceId: z.string().optional(),
    billingPlanId: z.string(),
    start: z.date().transform(v => v.toISOString()).optional(),
    end: z.date().transform(v => v.toISOString()).optional(),
    name: z.string(),
    details: z.string().optional(),
    price: z.string(),
    quantity: z.number(),
    units: z.string(),
    total: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SubmitInvoiceItems$;
(function (SubmitInvoiceItems$) {
    /** @deprecated use `SubmitInvoiceItems$inboundSchema` instead. */
    SubmitInvoiceItems$.inboundSchema = SubmitInvoiceItems$inboundSchema;
    /** @deprecated use `SubmitInvoiceItems$outboundSchema` instead. */
    SubmitInvoiceItems$.outboundSchema = SubmitInvoiceItems$outboundSchema;
})(SubmitInvoiceItems$ || (SubmitInvoiceItems$ = {}));
export function submitInvoiceItemsToJSON(submitInvoiceItems) {
    return JSON.stringify(SubmitInvoiceItems$outboundSchema.parse(submitInvoiceItems));
}
export function submitInvoiceItemsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SubmitInvoiceItems$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SubmitInvoiceItems' from JSON`);
}
/** @internal */
export const SubmitInvoiceDiscounts$inboundSchema = z.object({
    resourceId: z.string().optional(),
    billingPlanId: z.string(),
    start: z.string().datetime({ offset: true }).transform(v => new Date(v))
        .optional(),
    end: z.string().datetime({ offset: true }).transform(v => new Date(v))
        .optional(),
    name: z.string(),
    details: z.string().optional(),
    amount: z.string(),
});
/** @internal */
export const SubmitInvoiceDiscounts$outboundSchema = z.object({
    resourceId: z.string().optional(),
    billingPlanId: z.string(),
    start: z.date().transform(v => v.toISOString()).optional(),
    end: z.date().transform(v => v.toISOString()).optional(),
    name: z.string(),
    details: z.string().optional(),
    amount: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SubmitInvoiceDiscounts$;
(function (SubmitInvoiceDiscounts$) {
    /** @deprecated use `SubmitInvoiceDiscounts$inboundSchema` instead. */
    SubmitInvoiceDiscounts$.inboundSchema = SubmitInvoiceDiscounts$inboundSchema;
    /** @deprecated use `SubmitInvoiceDiscounts$outboundSchema` instead. */
    SubmitInvoiceDiscounts$.outboundSchema = SubmitInvoiceDiscounts$outboundSchema;
})(SubmitInvoiceDiscounts$ || (SubmitInvoiceDiscounts$ = {}));
export function submitInvoiceDiscountsToJSON(submitInvoiceDiscounts) {
    return JSON.stringify(SubmitInvoiceDiscounts$outboundSchema.parse(submitInvoiceDiscounts));
}
export function submitInvoiceDiscountsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SubmitInvoiceDiscounts$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SubmitInvoiceDiscounts' from JSON`);
}
/** @internal */
export const Result$inboundSchema = z
    .nativeEnum(Result);
/** @internal */
export const Result$outboundSchema = Result$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Result$;
(function (Result$) {
    /** @deprecated use `Result$inboundSchema` instead. */
    Result$.inboundSchema = Result$inboundSchema;
    /** @deprecated use `Result$outboundSchema` instead. */
    Result$.outboundSchema = Result$outboundSchema;
})(Result$ || (Result$ = {}));
/** @internal */
export const Test$inboundSchema = z
    .object({
    validate: z.boolean().optional(),
    result: Result$inboundSchema.optional(),
});
/** @internal */
export const Test$outboundSchema = z.object({
    validate: z.boolean().optional(),
    result: Result$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Test$;
(function (Test$) {
    /** @deprecated use `Test$inboundSchema` instead. */
    Test$.inboundSchema = Test$inboundSchema;
    /** @deprecated use `Test$outboundSchema` instead. */
    Test$.outboundSchema = Test$outboundSchema;
})(Test$ || (Test$ = {}));
export function testToJSON(test) {
    return JSON.stringify(Test$outboundSchema.parse(test));
}
export function testFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Test$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Test' from JSON`);
}
/** @internal */
export const SubmitInvoiceRequestBody$inboundSchema = z.object({
    externalId: z.string().optional(),
    invoiceDate: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    memo: z.string().optional(),
    period: z.lazy(() => SubmitInvoicePeriod$inboundSchema),
    items: z.array(z.lazy(() => SubmitInvoiceItems$inboundSchema)),
    discounts: z.array(z.lazy(() => SubmitInvoiceDiscounts$inboundSchema))
        .optional(),
    test: z.lazy(() => Test$inboundSchema).optional(),
});
/** @internal */
export const SubmitInvoiceRequestBody$outboundSchema = z.object({
    externalId: z.string().optional(),
    invoiceDate: z.date().transform(v => v.toISOString()),
    memo: z.string().optional(),
    period: z.lazy(() => SubmitInvoicePeriod$outboundSchema),
    items: z.array(z.lazy(() => SubmitInvoiceItems$outboundSchema)),
    discounts: z.array(z.lazy(() => SubmitInvoiceDiscounts$outboundSchema))
        .optional(),
    test: z.lazy(() => Test$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SubmitInvoiceRequestBody$;
(function (SubmitInvoiceRequestBody$) {
    /** @deprecated use `SubmitInvoiceRequestBody$inboundSchema` instead. */
    SubmitInvoiceRequestBody$.inboundSchema = SubmitInvoiceRequestBody$inboundSchema;
    /** @deprecated use `SubmitInvoiceRequestBody$outboundSchema` instead. */
    SubmitInvoiceRequestBody$.outboundSchema = SubmitInvoiceRequestBody$outboundSchema;
})(SubmitInvoiceRequestBody$ || (SubmitInvoiceRequestBody$ = {}));
export function submitInvoiceRequestBodyToJSON(submitInvoiceRequestBody) {
    return JSON.stringify(SubmitInvoiceRequestBody$outboundSchema.parse(submitInvoiceRequestBody));
}
export function submitInvoiceRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SubmitInvoiceRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SubmitInvoiceRequestBody' from JSON`);
}
/** @internal */
export const SubmitInvoiceRequest$inboundSchema = z.object({
    integrationConfigurationId: z.string(),
    RequestBody: z.lazy(() => SubmitInvoiceRequestBody$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const SubmitInvoiceRequest$outboundSchema = z.object({
    integrationConfigurationId: z.string(),
    requestBody: z.lazy(() => SubmitInvoiceRequestBody$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SubmitInvoiceRequest$;
(function (SubmitInvoiceRequest$) {
    /** @deprecated use `SubmitInvoiceRequest$inboundSchema` instead. */
    SubmitInvoiceRequest$.inboundSchema = SubmitInvoiceRequest$inboundSchema;
    /** @deprecated use `SubmitInvoiceRequest$outboundSchema` instead. */
    SubmitInvoiceRequest$.outboundSchema = SubmitInvoiceRequest$outboundSchema;
})(SubmitInvoiceRequest$ || (SubmitInvoiceRequest$ = {}));
export function submitInvoiceRequestToJSON(submitInvoiceRequest) {
    return JSON.stringify(SubmitInvoiceRequest$outboundSchema.parse(submitInvoiceRequest));
}
export function submitInvoiceRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SubmitInvoiceRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SubmitInvoiceRequest' from JSON`);
}
/** @internal */
export const SubmitInvoiceResponseBody$inboundSchema = z.object({
    invoiceId: z.string().optional(),
    test: z.boolean().optional(),
    validationErrors: z.array(z.string()).optional(),
});
/** @internal */
export const SubmitInvoiceResponseBody$outboundSchema = z.object({
    invoiceId: z.string().optional(),
    test: z.boolean().optional(),
    validationErrors: z.array(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SubmitInvoiceResponseBody$;
(function (SubmitInvoiceResponseBody$) {
    /** @deprecated use `SubmitInvoiceResponseBody$inboundSchema` instead. */
    SubmitInvoiceResponseBody$.inboundSchema = SubmitInvoiceResponseBody$inboundSchema;
    /** @deprecated use `SubmitInvoiceResponseBody$outboundSchema` instead. */
    SubmitInvoiceResponseBody$.outboundSchema = SubmitInvoiceResponseBody$outboundSchema;
})(SubmitInvoiceResponseBody$ || (SubmitInvoiceResponseBody$ = {}));
export function submitInvoiceResponseBodyToJSON(submitInvoiceResponseBody) {
    return JSON.stringify(SubmitInvoiceResponseBody$outboundSchema.parse(submitInvoiceResponseBody));
}
export function submitInvoiceResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SubmitInvoiceResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SubmitInvoiceResponseBody' from JSON`);
}
//# sourceMappingURL=submitinvoiceop.js.map