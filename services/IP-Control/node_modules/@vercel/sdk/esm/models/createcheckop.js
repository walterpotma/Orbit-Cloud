/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
export const CreateCheckStatus = {
    Registered: "registered",
    Running: "running",
    Completed: "completed",
};
export const CreateCheckConclusion = {
    Canceled: "canceled",
    Failed: "failed",
    Neutral: "neutral",
    Succeeded: "succeeded",
    Skipped: "skipped",
    Stale: "stale",
};
export const CreateCheckSource = {
    WebVitals: "web-vitals",
};
export const CreateCheckChecksSource = {
    WebVitals: "web-vitals",
};
export const CreateCheckChecksResponseSource = {
    WebVitals: "web-vitals",
};
export const CreateCheckChecksResponse200Source = {
    WebVitals: "web-vitals",
};
export const CreateCheckChecksResponse200ApplicationJSONSource = {
    WebVitals: "web-vitals",
};
/** @internal */
export const CreateCheckRequestBody$inboundSchema = z.object({
    name: z.string(),
    path: z.string().optional(),
    blocking: z.boolean(),
    detailsUrl: z.string().optional(),
    externalId: z.string().optional(),
    rerequestable: z.boolean().optional(),
});
/** @internal */
export const CreateCheckRequestBody$outboundSchema = z.object({
    name: z.string(),
    path: z.string().optional(),
    blocking: z.boolean(),
    detailsUrl: z.string().optional(),
    externalId: z.string().optional(),
    rerequestable: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateCheckRequestBody$;
(function (CreateCheckRequestBody$) {
    /** @deprecated use `CreateCheckRequestBody$inboundSchema` instead. */
    CreateCheckRequestBody$.inboundSchema = CreateCheckRequestBody$inboundSchema;
    /** @deprecated use `CreateCheckRequestBody$outboundSchema` instead. */
    CreateCheckRequestBody$.outboundSchema = CreateCheckRequestBody$outboundSchema;
})(CreateCheckRequestBody$ || (CreateCheckRequestBody$ = {}));
export function createCheckRequestBodyToJSON(createCheckRequestBody) {
    return JSON.stringify(CreateCheckRequestBody$outboundSchema.parse(createCheckRequestBody));
}
export function createCheckRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateCheckRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateCheckRequestBody' from JSON`);
}
/** @internal */
export const CreateCheckRequest$inboundSchema = z.object({
    deploymentId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => CreateCheckRequestBody$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const CreateCheckRequest$outboundSchema = z.object({
    deploymentId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => CreateCheckRequestBody$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateCheckRequest$;
(function (CreateCheckRequest$) {
    /** @deprecated use `CreateCheckRequest$inboundSchema` instead. */
    CreateCheckRequest$.inboundSchema = CreateCheckRequest$inboundSchema;
    /** @deprecated use `CreateCheckRequest$outboundSchema` instead. */
    CreateCheckRequest$.outboundSchema = CreateCheckRequest$outboundSchema;
})(CreateCheckRequest$ || (CreateCheckRequest$ = {}));
export function createCheckRequestToJSON(createCheckRequest) {
    return JSON.stringify(CreateCheckRequest$outboundSchema.parse(createCheckRequest));
}
export function createCheckRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateCheckRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateCheckRequest' from JSON`);
}
/** @internal */
export const CreateCheckStatus$inboundSchema = z.nativeEnum(CreateCheckStatus);
/** @internal */
export const CreateCheckStatus$outboundSchema = CreateCheckStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateCheckStatus$;
(function (CreateCheckStatus$) {
    /** @deprecated use `CreateCheckStatus$inboundSchema` instead. */
    CreateCheckStatus$.inboundSchema = CreateCheckStatus$inboundSchema;
    /** @deprecated use `CreateCheckStatus$outboundSchema` instead. */
    CreateCheckStatus$.outboundSchema = CreateCheckStatus$outboundSchema;
})(CreateCheckStatus$ || (CreateCheckStatus$ = {}));
/** @internal */
export const CreateCheckConclusion$inboundSchema = z.nativeEnum(CreateCheckConclusion);
/** @internal */
export const CreateCheckConclusion$outboundSchema = CreateCheckConclusion$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateCheckConclusion$;
(function (CreateCheckConclusion$) {
    /** @deprecated use `CreateCheckConclusion$inboundSchema` instead. */
    CreateCheckConclusion$.inboundSchema = CreateCheckConclusion$inboundSchema;
    /** @deprecated use `CreateCheckConclusion$outboundSchema` instead. */
    CreateCheckConclusion$.outboundSchema = CreateCheckConclusion$outboundSchema;
})(CreateCheckConclusion$ || (CreateCheckConclusion$ = {}));
/** @internal */
export const CreateCheckSource$inboundSchema = z.nativeEnum(CreateCheckSource);
/** @internal */
export const CreateCheckSource$outboundSchema = CreateCheckSource$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateCheckSource$;
(function (CreateCheckSource$) {
    /** @deprecated use `CreateCheckSource$inboundSchema` instead. */
    CreateCheckSource$.inboundSchema = CreateCheckSource$inboundSchema;
    /** @deprecated use `CreateCheckSource$outboundSchema` instead. */
    CreateCheckSource$.outboundSchema = CreateCheckSource$outboundSchema;
})(CreateCheckSource$ || (CreateCheckSource$ = {}));
/** @internal */
export const CreateCheckFCP$inboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: CreateCheckSource$inboundSchema,
});
/** @internal */
export const CreateCheckFCP$outboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: CreateCheckSource$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateCheckFCP$;
(function (CreateCheckFCP$) {
    /** @deprecated use `CreateCheckFCP$inboundSchema` instead. */
    CreateCheckFCP$.inboundSchema = CreateCheckFCP$inboundSchema;
    /** @deprecated use `CreateCheckFCP$outboundSchema` instead. */
    CreateCheckFCP$.outboundSchema = CreateCheckFCP$outboundSchema;
})(CreateCheckFCP$ || (CreateCheckFCP$ = {}));
export function createCheckFCPToJSON(createCheckFCP) {
    return JSON.stringify(CreateCheckFCP$outboundSchema.parse(createCheckFCP));
}
export function createCheckFCPFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateCheckFCP$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateCheckFCP' from JSON`);
}
/** @internal */
export const CreateCheckChecksSource$inboundSchema = z.nativeEnum(CreateCheckChecksSource);
/** @internal */
export const CreateCheckChecksSource$outboundSchema = CreateCheckChecksSource$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateCheckChecksSource$;
(function (CreateCheckChecksSource$) {
    /** @deprecated use `CreateCheckChecksSource$inboundSchema` instead. */
    CreateCheckChecksSource$.inboundSchema = CreateCheckChecksSource$inboundSchema;
    /** @deprecated use `CreateCheckChecksSource$outboundSchema` instead. */
    CreateCheckChecksSource$.outboundSchema = CreateCheckChecksSource$outboundSchema;
})(CreateCheckChecksSource$ || (CreateCheckChecksSource$ = {}));
/** @internal */
export const CreateCheckLCP$inboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: CreateCheckChecksSource$inboundSchema,
});
/** @internal */
export const CreateCheckLCP$outboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: CreateCheckChecksSource$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateCheckLCP$;
(function (CreateCheckLCP$) {
    /** @deprecated use `CreateCheckLCP$inboundSchema` instead. */
    CreateCheckLCP$.inboundSchema = CreateCheckLCP$inboundSchema;
    /** @deprecated use `CreateCheckLCP$outboundSchema` instead. */
    CreateCheckLCP$.outboundSchema = CreateCheckLCP$outboundSchema;
})(CreateCheckLCP$ || (CreateCheckLCP$ = {}));
export function createCheckLCPToJSON(createCheckLCP) {
    return JSON.stringify(CreateCheckLCP$outboundSchema.parse(createCheckLCP));
}
export function createCheckLCPFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateCheckLCP$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateCheckLCP' from JSON`);
}
/** @internal */
export const CreateCheckChecksResponseSource$inboundSchema = z.nativeEnum(CreateCheckChecksResponseSource);
/** @internal */
export const CreateCheckChecksResponseSource$outboundSchema = CreateCheckChecksResponseSource$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateCheckChecksResponseSource$;
(function (CreateCheckChecksResponseSource$) {
    /** @deprecated use `CreateCheckChecksResponseSource$inboundSchema` instead. */
    CreateCheckChecksResponseSource$.inboundSchema = CreateCheckChecksResponseSource$inboundSchema;
    /** @deprecated use `CreateCheckChecksResponseSource$outboundSchema` instead. */
    CreateCheckChecksResponseSource$.outboundSchema = CreateCheckChecksResponseSource$outboundSchema;
})(CreateCheckChecksResponseSource$ || (CreateCheckChecksResponseSource$ = {}));
/** @internal */
export const CreateCheckCLS$inboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: CreateCheckChecksResponseSource$inboundSchema,
});
/** @internal */
export const CreateCheckCLS$outboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: CreateCheckChecksResponseSource$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateCheckCLS$;
(function (CreateCheckCLS$) {
    /** @deprecated use `CreateCheckCLS$inboundSchema` instead. */
    CreateCheckCLS$.inboundSchema = CreateCheckCLS$inboundSchema;
    /** @deprecated use `CreateCheckCLS$outboundSchema` instead. */
    CreateCheckCLS$.outboundSchema = CreateCheckCLS$outboundSchema;
})(CreateCheckCLS$ || (CreateCheckCLS$ = {}));
export function createCheckCLSToJSON(createCheckCLS) {
    return JSON.stringify(CreateCheckCLS$outboundSchema.parse(createCheckCLS));
}
export function createCheckCLSFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateCheckCLS$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateCheckCLS' from JSON`);
}
/** @internal */
export const CreateCheckChecksResponse200Source$inboundSchema = z.nativeEnum(CreateCheckChecksResponse200Source);
/** @internal */
export const CreateCheckChecksResponse200Source$outboundSchema = CreateCheckChecksResponse200Source$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateCheckChecksResponse200Source$;
(function (CreateCheckChecksResponse200Source$) {
    /** @deprecated use `CreateCheckChecksResponse200Source$inboundSchema` instead. */
    CreateCheckChecksResponse200Source$.inboundSchema = CreateCheckChecksResponse200Source$inboundSchema;
    /** @deprecated use `CreateCheckChecksResponse200Source$outboundSchema` instead. */
    CreateCheckChecksResponse200Source$.outboundSchema = CreateCheckChecksResponse200Source$outboundSchema;
})(CreateCheckChecksResponse200Source$ || (CreateCheckChecksResponse200Source$ = {}));
/** @internal */
export const CreateCheckTBT$inboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: CreateCheckChecksResponse200Source$inboundSchema,
});
/** @internal */
export const CreateCheckTBT$outboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: CreateCheckChecksResponse200Source$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateCheckTBT$;
(function (CreateCheckTBT$) {
    /** @deprecated use `CreateCheckTBT$inboundSchema` instead. */
    CreateCheckTBT$.inboundSchema = CreateCheckTBT$inboundSchema;
    /** @deprecated use `CreateCheckTBT$outboundSchema` instead. */
    CreateCheckTBT$.outboundSchema = CreateCheckTBT$outboundSchema;
})(CreateCheckTBT$ || (CreateCheckTBT$ = {}));
export function createCheckTBTToJSON(createCheckTBT) {
    return JSON.stringify(CreateCheckTBT$outboundSchema.parse(createCheckTBT));
}
export function createCheckTBTFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateCheckTBT$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateCheckTBT' from JSON`);
}
/** @internal */
export const CreateCheckChecksResponse200ApplicationJSONSource$inboundSchema = z
    .nativeEnum(CreateCheckChecksResponse200ApplicationJSONSource);
/** @internal */
export const CreateCheckChecksResponse200ApplicationJSONSource$outboundSchema = CreateCheckChecksResponse200ApplicationJSONSource$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateCheckChecksResponse200ApplicationJSONSource$;
(function (CreateCheckChecksResponse200ApplicationJSONSource$) {
    /** @deprecated use `CreateCheckChecksResponse200ApplicationJSONSource$inboundSchema` instead. */
    CreateCheckChecksResponse200ApplicationJSONSource$.inboundSchema = CreateCheckChecksResponse200ApplicationJSONSource$inboundSchema;
    /** @deprecated use `CreateCheckChecksResponse200ApplicationJSONSource$outboundSchema` instead. */
    CreateCheckChecksResponse200ApplicationJSONSource$.outboundSchema = CreateCheckChecksResponse200ApplicationJSONSource$outboundSchema;
})(CreateCheckChecksResponse200ApplicationJSONSource$ || (CreateCheckChecksResponse200ApplicationJSONSource$ = {}));
/** @internal */
export const CreateCheckVirtualExperienceScore$inboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: CreateCheckChecksResponse200ApplicationJSONSource$inboundSchema,
});
/** @internal */
export const CreateCheckVirtualExperienceScore$outboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: CreateCheckChecksResponse200ApplicationJSONSource$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateCheckVirtualExperienceScore$;
(function (CreateCheckVirtualExperienceScore$) {
    /** @deprecated use `CreateCheckVirtualExperienceScore$inboundSchema` instead. */
    CreateCheckVirtualExperienceScore$.inboundSchema = CreateCheckVirtualExperienceScore$inboundSchema;
    /** @deprecated use `CreateCheckVirtualExperienceScore$outboundSchema` instead. */
    CreateCheckVirtualExperienceScore$.outboundSchema = CreateCheckVirtualExperienceScore$outboundSchema;
})(CreateCheckVirtualExperienceScore$ || (CreateCheckVirtualExperienceScore$ = {}));
export function createCheckVirtualExperienceScoreToJSON(createCheckVirtualExperienceScore) {
    return JSON.stringify(CreateCheckVirtualExperienceScore$outboundSchema.parse(createCheckVirtualExperienceScore));
}
export function createCheckVirtualExperienceScoreFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateCheckVirtualExperienceScore$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateCheckVirtualExperienceScore' from JSON`);
}
/** @internal */
export const CreateCheckMetrics$inboundSchema = z.object({
    FCP: z.lazy(() => CreateCheckFCP$inboundSchema),
    LCP: z.lazy(() => CreateCheckLCP$inboundSchema),
    CLS: z.lazy(() => CreateCheckCLS$inboundSchema),
    TBT: z.lazy(() => CreateCheckTBT$inboundSchema),
    virtualExperienceScore: z.lazy(() => CreateCheckVirtualExperienceScore$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "FCP": "fcp",
        "LCP": "lcp",
        "CLS": "cls",
        "TBT": "tbt",
    });
});
/** @internal */
export const CreateCheckMetrics$outboundSchema = z.object({
    fcp: z.lazy(() => CreateCheckFCP$outboundSchema),
    lcp: z.lazy(() => CreateCheckLCP$outboundSchema),
    cls: z.lazy(() => CreateCheckCLS$outboundSchema),
    tbt: z.lazy(() => CreateCheckTBT$outboundSchema),
    virtualExperienceScore: z.lazy(() => CreateCheckVirtualExperienceScore$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        fcp: "FCP",
        lcp: "LCP",
        cls: "CLS",
        tbt: "TBT",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateCheckMetrics$;
(function (CreateCheckMetrics$) {
    /** @deprecated use `CreateCheckMetrics$inboundSchema` instead. */
    CreateCheckMetrics$.inboundSchema = CreateCheckMetrics$inboundSchema;
    /** @deprecated use `CreateCheckMetrics$outboundSchema` instead. */
    CreateCheckMetrics$.outboundSchema = CreateCheckMetrics$outboundSchema;
})(CreateCheckMetrics$ || (CreateCheckMetrics$ = {}));
export function createCheckMetricsToJSON(createCheckMetrics) {
    return JSON.stringify(CreateCheckMetrics$outboundSchema.parse(createCheckMetrics));
}
export function createCheckMetricsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateCheckMetrics$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateCheckMetrics' from JSON`);
}
/** @internal */
export const CreateCheckOutput$inboundSchema = z.object({
    metrics: z.lazy(() => CreateCheckMetrics$inboundSchema).optional(),
});
/** @internal */
export const CreateCheckOutput$outboundSchema = z.object({
    metrics: z.lazy(() => CreateCheckMetrics$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateCheckOutput$;
(function (CreateCheckOutput$) {
    /** @deprecated use `CreateCheckOutput$inboundSchema` instead. */
    CreateCheckOutput$.inboundSchema = CreateCheckOutput$inboundSchema;
    /** @deprecated use `CreateCheckOutput$outboundSchema` instead. */
    CreateCheckOutput$.outboundSchema = CreateCheckOutput$outboundSchema;
})(CreateCheckOutput$ || (CreateCheckOutput$ = {}));
export function createCheckOutputToJSON(createCheckOutput) {
    return JSON.stringify(CreateCheckOutput$outboundSchema.parse(createCheckOutput));
}
export function createCheckOutputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateCheckOutput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateCheckOutput' from JSON`);
}
/** @internal */
export const CreateCheckResponseBody$inboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    path: z.string().optional(),
    status: CreateCheckStatus$inboundSchema,
    conclusion: CreateCheckConclusion$inboundSchema.optional(),
    blocking: z.boolean(),
    output: z.lazy(() => CreateCheckOutput$inboundSchema).optional(),
    detailsUrl: z.string().optional(),
    integrationId: z.string(),
    deploymentId: z.string(),
    externalId: z.string().optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
    startedAt: z.number().optional(),
    completedAt: z.number().optional(),
    rerequestable: z.boolean().optional(),
});
/** @internal */
export const CreateCheckResponseBody$outboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    path: z.string().optional(),
    status: CreateCheckStatus$outboundSchema,
    conclusion: CreateCheckConclusion$outboundSchema.optional(),
    blocking: z.boolean(),
    output: z.lazy(() => CreateCheckOutput$outboundSchema).optional(),
    detailsUrl: z.string().optional(),
    integrationId: z.string(),
    deploymentId: z.string(),
    externalId: z.string().optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
    startedAt: z.number().optional(),
    completedAt: z.number().optional(),
    rerequestable: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateCheckResponseBody$;
(function (CreateCheckResponseBody$) {
    /** @deprecated use `CreateCheckResponseBody$inboundSchema` instead. */
    CreateCheckResponseBody$.inboundSchema = CreateCheckResponseBody$inboundSchema;
    /** @deprecated use `CreateCheckResponseBody$outboundSchema` instead. */
    CreateCheckResponseBody$.outboundSchema = CreateCheckResponseBody$outboundSchema;
})(CreateCheckResponseBody$ || (CreateCheckResponseBody$ = {}));
export function createCheckResponseBodyToJSON(createCheckResponseBody) {
    return JSON.stringify(CreateCheckResponseBody$outboundSchema.parse(createCheckResponseBody));
}
export function createCheckResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateCheckResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateCheckResponseBody' from JSON`);
}
//# sourceMappingURL=createcheckop.js.map