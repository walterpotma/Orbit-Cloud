import * as z from "zod";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type VerifyProjectDomainRequest = {
    /**
     * The unique project identifier or the project name
     */
    idOrName: string;
    /**
     * The domain name you want to verify
     */
    domain: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};
/**
 * The project domain was verified successfully
 *
 * @remarks
 * Domain is already verified
 */
export type VerifyProjectDomainResponseBody = {
    name: string;
    apexName: string;
    projectId: string;
    redirect?: string | null | undefined;
    redirectStatusCode?: number | null | undefined;
    gitBranch?: string | null | undefined;
    customEnvironmentId?: string | null | undefined;
    updatedAt?: number | undefined;
    createdAt?: number | undefined;
    /**
     * `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.
     */
    verified: boolean;
};
/** @internal */
export declare const VerifyProjectDomainRequest$inboundSchema: z.ZodType<VerifyProjectDomainRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type VerifyProjectDomainRequest$Outbound = {
    idOrName: string;
    domain: string;
    teamId?: string | undefined;
    slug?: string | undefined;
};
/** @internal */
export declare const VerifyProjectDomainRequest$outboundSchema: z.ZodType<VerifyProjectDomainRequest$Outbound, z.ZodTypeDef, VerifyProjectDomainRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace VerifyProjectDomainRequest$ {
    /** @deprecated use `VerifyProjectDomainRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<VerifyProjectDomainRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `VerifyProjectDomainRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<VerifyProjectDomainRequest$Outbound, z.ZodTypeDef, VerifyProjectDomainRequest>;
    /** @deprecated use `VerifyProjectDomainRequest$Outbound` instead. */
    type Outbound = VerifyProjectDomainRequest$Outbound;
}
export declare function verifyProjectDomainRequestToJSON(verifyProjectDomainRequest: VerifyProjectDomainRequest): string;
export declare function verifyProjectDomainRequestFromJSON(jsonString: string): SafeParseResult<VerifyProjectDomainRequest, SDKValidationError>;
/** @internal */
export declare const VerifyProjectDomainResponseBody$inboundSchema: z.ZodType<VerifyProjectDomainResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type VerifyProjectDomainResponseBody$Outbound = {
    name: string;
    apexName: string;
    projectId: string;
    redirect?: string | null | undefined;
    redirectStatusCode?: number | null | undefined;
    gitBranch?: string | null | undefined;
    customEnvironmentId?: string | null | undefined;
    updatedAt?: number | undefined;
    createdAt?: number | undefined;
    verified: boolean;
};
/** @internal */
export declare const VerifyProjectDomainResponseBody$outboundSchema: z.ZodType<VerifyProjectDomainResponseBody$Outbound, z.ZodTypeDef, VerifyProjectDomainResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace VerifyProjectDomainResponseBody$ {
    /** @deprecated use `VerifyProjectDomainResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<VerifyProjectDomainResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `VerifyProjectDomainResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<VerifyProjectDomainResponseBody$Outbound, z.ZodTypeDef, VerifyProjectDomainResponseBody>;
    /** @deprecated use `VerifyProjectDomainResponseBody$Outbound` instead. */
    type Outbound = VerifyProjectDomainResponseBody$Outbound;
}
export declare function verifyProjectDomainResponseBodyToJSON(verifyProjectDomainResponseBody: VerifyProjectDomainResponseBody): string;
export declare function verifyProjectDomainResponseBodyFromJSON(jsonString: string): SafeParseResult<VerifyProjectDomainResponseBody, SDKValidationError>;
//# sourceMappingURL=verifyprojectdomainop.d.ts.map