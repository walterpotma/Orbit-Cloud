/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/**
 * \n              Type of the metric.\n              - total: measured total value, such as Database size\n              - interval: usage during the period, such as i/o or number of queries.\n              - rate: rate of usage, such as queries per second.\n
 */
export const SubmitBillingDataType = {
    Total: "total",
    Interval: "interval",
    Rate: "rate",
};
/** @internal */
export const Period$inboundSchema = z
    .object({
    start: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    end: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});
/** @internal */
export const Period$outboundSchema = z.object({
    start: z.date().transform(v => v.toISOString()),
    end: z.date().transform(v => v.toISOString()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Period$;
(function (Period$) {
    /** @deprecated use `Period$inboundSchema` instead. */
    Period$.inboundSchema = Period$inboundSchema;
    /** @deprecated use `Period$outboundSchema` instead. */
    Period$.outboundSchema = Period$outboundSchema;
})(Period$ || (Period$ = {}));
export function periodToJSON(period) {
    return JSON.stringify(Period$outboundSchema.parse(period));
}
export function periodFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Period$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Period' from JSON`);
}
/** @internal */
export const BillingItems$inboundSchema = z.object({
    billingPlanId: z.string(),
    resourceId: z.string().optional(),
    start: z.string().datetime({ offset: true }).transform(v => new Date(v))
        .optional(),
    end: z.string().datetime({ offset: true }).transform(v => new Date(v))
        .optional(),
    name: z.string(),
    details: z.string().optional(),
    price: z.string(),
    quantity: z.number(),
    units: z.string(),
    total: z.string(),
});
/** @internal */
export const BillingItems$outboundSchema = z.object({
    billingPlanId: z.string(),
    resourceId: z.string().optional(),
    start: z.date().transform(v => v.toISOString()).optional(),
    end: z.date().transform(v => v.toISOString()).optional(),
    name: z.string(),
    details: z.string().optional(),
    price: z.string(),
    quantity: z.number(),
    units: z.string(),
    total: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BillingItems$;
(function (BillingItems$) {
    /** @deprecated use `BillingItems$inboundSchema` instead. */
    BillingItems$.inboundSchema = BillingItems$inboundSchema;
    /** @deprecated use `BillingItems$outboundSchema` instead. */
    BillingItems$.outboundSchema = BillingItems$outboundSchema;
})(BillingItems$ || (BillingItems$ = {}));
export function billingItemsToJSON(billingItems) {
    return JSON.stringify(BillingItems$outboundSchema.parse(billingItems));
}
export function billingItemsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BillingItems$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BillingItems' from JSON`);
}
/** @internal */
export const Discounts$inboundSchema = z.object({
    billingPlanId: z.string(),
    resourceId: z.string().optional(),
    start: z.string().datetime({ offset: true }).transform(v => new Date(v))
        .optional(),
    end: z.string().datetime({ offset: true }).transform(v => new Date(v))
        .optional(),
    name: z.string(),
    details: z.string().optional(),
    amount: z.string(),
});
/** @internal */
export const Discounts$outboundSchema = z.object({
    billingPlanId: z.string(),
    resourceId: z.string().optional(),
    start: z.date().transform(v => v.toISOString()).optional(),
    end: z.date().transform(v => v.toISOString()).optional(),
    name: z.string(),
    details: z.string().optional(),
    amount: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Discounts$;
(function (Discounts$) {
    /** @deprecated use `Discounts$inboundSchema` instead. */
    Discounts$.inboundSchema = Discounts$inboundSchema;
    /** @deprecated use `Discounts$outboundSchema` instead. */
    Discounts$.outboundSchema = Discounts$outboundSchema;
})(Discounts$ || (Discounts$ = {}));
export function discountsToJSON(discounts) {
    return JSON.stringify(Discounts$outboundSchema.parse(discounts));
}
export function discountsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Discounts$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Discounts' from JSON`);
}
/** @internal */
export const Billing2$inboundSchema = z.object({
    items: z.array(z.lazy(() => BillingItems$inboundSchema)),
    discounts: z.array(z.lazy(() => Discounts$inboundSchema)).optional(),
});
/** @internal */
export const Billing2$outboundSchema = z.object({
    items: z.array(z.lazy(() => BillingItems$outboundSchema)),
    discounts: z.array(z.lazy(() => Discounts$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Billing2$;
(function (Billing2$) {
    /** @deprecated use `Billing2$inboundSchema` instead. */
    Billing2$.inboundSchema = Billing2$inboundSchema;
    /** @deprecated use `Billing2$outboundSchema` instead. */
    Billing2$.outboundSchema = Billing2$outboundSchema;
})(Billing2$ || (Billing2$ = {}));
export function billing2ToJSON(billing2) {
    return JSON.stringify(Billing2$outboundSchema.parse(billing2));
}
export function billing2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Billing2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Billing2' from JSON`);
}
/** @internal */
export const Billing1$inboundSchema = z.object({
    billingPlanId: z.string(),
    resourceId: z.string().optional(),
    start: z.string().datetime({ offset: true }).transform(v => new Date(v))
        .optional(),
    end: z.string().datetime({ offset: true }).transform(v => new Date(v))
        .optional(),
    name: z.string(),
    details: z.string().optional(),
    price: z.string(),
    quantity: z.number(),
    units: z.string(),
    total: z.string(),
});
/** @internal */
export const Billing1$outboundSchema = z.object({
    billingPlanId: z.string(),
    resourceId: z.string().optional(),
    start: z.date().transform(v => v.toISOString()).optional(),
    end: z.date().transform(v => v.toISOString()).optional(),
    name: z.string(),
    details: z.string().optional(),
    price: z.string(),
    quantity: z.number(),
    units: z.string(),
    total: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Billing1$;
(function (Billing1$) {
    /** @deprecated use `Billing1$inboundSchema` instead. */
    Billing1$.inboundSchema = Billing1$inboundSchema;
    /** @deprecated use `Billing1$outboundSchema` instead. */
    Billing1$.outboundSchema = Billing1$outboundSchema;
})(Billing1$ || (Billing1$ = {}));
export function billing1ToJSON(billing1) {
    return JSON.stringify(Billing1$outboundSchema.parse(billing1));
}
export function billing1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Billing1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Billing1' from JSON`);
}
/** @internal */
export const SubmitBillingDataBilling$inboundSchema = z.union([
    z.lazy(() => Billing2$inboundSchema),
    z.array(z.lazy(() => Billing1$inboundSchema)),
]);
/** @internal */
export const SubmitBillingDataBilling$outboundSchema = z.union([
    z.lazy(() => Billing2$outboundSchema),
    z.array(z.lazy(() => Billing1$outboundSchema)),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SubmitBillingDataBilling$;
(function (SubmitBillingDataBilling$) {
    /** @deprecated use `SubmitBillingDataBilling$inboundSchema` instead. */
    SubmitBillingDataBilling$.inboundSchema = SubmitBillingDataBilling$inboundSchema;
    /** @deprecated use `SubmitBillingDataBilling$outboundSchema` instead. */
    SubmitBillingDataBilling$.outboundSchema = SubmitBillingDataBilling$outboundSchema;
})(SubmitBillingDataBilling$ || (SubmitBillingDataBilling$ = {}));
export function submitBillingDataBillingToJSON(submitBillingDataBilling) {
    return JSON.stringify(SubmitBillingDataBilling$outboundSchema.parse(submitBillingDataBilling));
}
export function submitBillingDataBillingFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SubmitBillingDataBilling$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SubmitBillingDataBilling' from JSON`);
}
/** @internal */
export const SubmitBillingDataType$inboundSchema = z.nativeEnum(SubmitBillingDataType);
/** @internal */
export const SubmitBillingDataType$outboundSchema = SubmitBillingDataType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SubmitBillingDataType$;
(function (SubmitBillingDataType$) {
    /** @deprecated use `SubmitBillingDataType$inboundSchema` instead. */
    SubmitBillingDataType$.inboundSchema = SubmitBillingDataType$inboundSchema;
    /** @deprecated use `SubmitBillingDataType$outboundSchema` instead. */
    SubmitBillingDataType$.outboundSchema = SubmitBillingDataType$outboundSchema;
})(SubmitBillingDataType$ || (SubmitBillingDataType$ = {}));
/** @internal */
export const Usage$inboundSchema = z
    .object({
    resourceId: z.string().optional(),
    name: z.string(),
    type: SubmitBillingDataType$inboundSchema,
    units: z.string(),
    dayValue: z.number(),
    periodValue: z.number(),
    planValue: z.number().optional(),
});
/** @internal */
export const Usage$outboundSchema = z.object({
    resourceId: z.string().optional(),
    name: z.string(),
    type: SubmitBillingDataType$outboundSchema,
    units: z.string(),
    dayValue: z.number(),
    periodValue: z.number(),
    planValue: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Usage$;
(function (Usage$) {
    /** @deprecated use `Usage$inboundSchema` instead. */
    Usage$.inboundSchema = Usage$inboundSchema;
    /** @deprecated use `Usage$outboundSchema` instead. */
    Usage$.outboundSchema = Usage$outboundSchema;
})(Usage$ || (Usage$ = {}));
export function usageToJSON(usage) {
    return JSON.stringify(Usage$outboundSchema.parse(usage));
}
export function usageFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Usage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Usage' from JSON`);
}
/** @internal */
export const SubmitBillingDataRequestBody$inboundSchema = z.object({
    timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    eod: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    period: z.lazy(() => Period$inboundSchema),
    billing: z.union([
        z.lazy(() => Billing2$inboundSchema),
        z.array(z.lazy(() => Billing1$inboundSchema)),
    ]),
    usage: z.array(z.lazy(() => Usage$inboundSchema)),
});
/** @internal */
export const SubmitBillingDataRequestBody$outboundSchema = z.object({
    timestamp: z.date().transform(v => v.toISOString()),
    eod: z.date().transform(v => v.toISOString()),
    period: z.lazy(() => Period$outboundSchema),
    billing: z.union([
        z.lazy(() => Billing2$outboundSchema),
        z.array(z.lazy(() => Billing1$outboundSchema)),
    ]),
    usage: z.array(z.lazy(() => Usage$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SubmitBillingDataRequestBody$;
(function (SubmitBillingDataRequestBody$) {
    /** @deprecated use `SubmitBillingDataRequestBody$inboundSchema` instead. */
    SubmitBillingDataRequestBody$.inboundSchema = SubmitBillingDataRequestBody$inboundSchema;
    /** @deprecated use `SubmitBillingDataRequestBody$outboundSchema` instead. */
    SubmitBillingDataRequestBody$.outboundSchema = SubmitBillingDataRequestBody$outboundSchema;
})(SubmitBillingDataRequestBody$ || (SubmitBillingDataRequestBody$ = {}));
export function submitBillingDataRequestBodyToJSON(submitBillingDataRequestBody) {
    return JSON.stringify(SubmitBillingDataRequestBody$outboundSchema.parse(submitBillingDataRequestBody));
}
export function submitBillingDataRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SubmitBillingDataRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SubmitBillingDataRequestBody' from JSON`);
}
/** @internal */
export const SubmitBillingDataRequest$inboundSchema = z.object({
    integrationConfigurationId: z.string(),
    RequestBody: z.lazy(() => SubmitBillingDataRequestBody$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const SubmitBillingDataRequest$outboundSchema = z.object({
    integrationConfigurationId: z.string(),
    requestBody: z.lazy(() => SubmitBillingDataRequestBody$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SubmitBillingDataRequest$;
(function (SubmitBillingDataRequest$) {
    /** @deprecated use `SubmitBillingDataRequest$inboundSchema` instead. */
    SubmitBillingDataRequest$.inboundSchema = SubmitBillingDataRequest$inboundSchema;
    /** @deprecated use `SubmitBillingDataRequest$outboundSchema` instead. */
    SubmitBillingDataRequest$.outboundSchema = SubmitBillingDataRequest$outboundSchema;
})(SubmitBillingDataRequest$ || (SubmitBillingDataRequest$ = {}));
export function submitBillingDataRequestToJSON(submitBillingDataRequest) {
    return JSON.stringify(SubmitBillingDataRequest$outboundSchema.parse(submitBillingDataRequest));
}
export function submitBillingDataRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SubmitBillingDataRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SubmitBillingDataRequest' from JSON`);
}
//# sourceMappingURL=submitbillingdataop.js.map