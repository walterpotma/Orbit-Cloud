/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
/**
 * A constant with the final state of the deployment.
 */
export const DeleteDeploymentState = {
    Deleted: "DELETED",
};
/** @internal */
export const DeleteDeploymentRequest$inboundSchema = z.object({
    id: z.string(),
    url: z.string().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/** @internal */
export const DeleteDeploymentRequest$outboundSchema = z.object({
    id: z.string(),
    url: z.string().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DeleteDeploymentRequest$;
(function (DeleteDeploymentRequest$) {
    /** @deprecated use `DeleteDeploymentRequest$inboundSchema` instead. */
    DeleteDeploymentRequest$.inboundSchema = DeleteDeploymentRequest$inboundSchema;
    /** @deprecated use `DeleteDeploymentRequest$outboundSchema` instead. */
    DeleteDeploymentRequest$.outboundSchema = DeleteDeploymentRequest$outboundSchema;
})(DeleteDeploymentRequest$ || (DeleteDeploymentRequest$ = {}));
export function deleteDeploymentRequestToJSON(deleteDeploymentRequest) {
    return JSON.stringify(DeleteDeploymentRequest$outboundSchema.parse(deleteDeploymentRequest));
}
export function deleteDeploymentRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DeleteDeploymentRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteDeploymentRequest' from JSON`);
}
/** @internal */
export const DeleteDeploymentState$inboundSchema = z.nativeEnum(DeleteDeploymentState);
/** @internal */
export const DeleteDeploymentState$outboundSchema = DeleteDeploymentState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DeleteDeploymentState$;
(function (DeleteDeploymentState$) {
    /** @deprecated use `DeleteDeploymentState$inboundSchema` instead. */
    DeleteDeploymentState$.inboundSchema = DeleteDeploymentState$inboundSchema;
    /** @deprecated use `DeleteDeploymentState$outboundSchema` instead. */
    DeleteDeploymentState$.outboundSchema = DeleteDeploymentState$outboundSchema;
})(DeleteDeploymentState$ || (DeleteDeploymentState$ = {}));
/** @internal */
export const DeleteDeploymentResponseBody$inboundSchema = z.object({
    uid: z.string(),
    state: DeleteDeploymentState$inboundSchema,
});
/** @internal */
export const DeleteDeploymentResponseBody$outboundSchema = z.object({
    uid: z.string(),
    state: DeleteDeploymentState$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DeleteDeploymentResponseBody$;
(function (DeleteDeploymentResponseBody$) {
    /** @deprecated use `DeleteDeploymentResponseBody$inboundSchema` instead. */
    DeleteDeploymentResponseBody$.inboundSchema = DeleteDeploymentResponseBody$inboundSchema;
    /** @deprecated use `DeleteDeploymentResponseBody$outboundSchema` instead. */
    DeleteDeploymentResponseBody$.outboundSchema = DeleteDeploymentResponseBody$outboundSchema;
})(DeleteDeploymentResponseBody$ || (DeleteDeploymentResponseBody$ = {}));
export function deleteDeploymentResponseBodyToJSON(deleteDeploymentResponseBody) {
    return JSON.stringify(DeleteDeploymentResponseBody$outboundSchema.parse(deleteDeploymentResponseBody));
}
export function deleteDeploymentResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DeleteDeploymentResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteDeploymentResponseBody' from JSON`);
}
//# sourceMappingURL=deletedeploymentop.js.map