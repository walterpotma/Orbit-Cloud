import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export declare const Reason: {
    readonly SubscriptionCanceled: "SUBSCRIPTION_CANCELED";
    readonly SubscriptionExpired: "SUBSCRIPTION_EXPIRED";
    readonly UnpaidInvoice: "UNPAID_INVOICE";
    readonly EnterpriseTrialEnded: "ENTERPRISE_TRIAL_ENDED";
    readonly FairUseLimitsExceeded: "FAIR_USE_LIMITS_EXCEEDED";
    readonly BlockedForPlatformAbuse: "BLOCKED_FOR_PLATFORM_ABUSE";
};
export type Reason = ClosedEnum<typeof Reason>;
export declare const BlockedDueToOverageType: {
    readonly AnalyticsUsage: "analyticsUsage";
    readonly Artifacts: "artifacts";
    readonly Bandwidth: "bandwidth";
    readonly BlobTotalAdvancedRequests: "blobTotalAdvancedRequests";
    readonly BlobTotalAvgSizeInBytes: "blobTotalAvgSizeInBytes";
    readonly BlobTotalGetResponseObjectSizeInBytes: "blobTotalGetResponseObjectSizeInBytes";
    readonly BlobTotalSimpleRequests: "blobTotalSimpleRequests";
    readonly ConnectDataTransfer: "connectDataTransfer";
    readonly DataCacheRead: "dataCacheRead";
    readonly DataCacheWrite: "dataCacheWrite";
    readonly EdgeConfigRead: "edgeConfigRead";
    readonly EdgeConfigWrite: "edgeConfigWrite";
    readonly EdgeFunctionExecutionUnits: "edgeFunctionExecutionUnits";
    readonly EdgeMiddlewareInvocations: "edgeMiddlewareInvocations";
    readonly EdgeRequestAdditionalCpuDuration: "edgeRequestAdditionalCpuDuration";
    readonly EdgeRequest: "edgeRequest";
    readonly ElasticConcurrencyBuildSlots: "elasticConcurrencyBuildSlots";
    readonly FastDataTransfer: "fastDataTransfer";
    readonly FastOriginTransfer: "fastOriginTransfer";
    readonly FluidCpuDuration: "fluidCpuDuration";
    readonly FluidDuration: "fluidDuration";
    readonly FunctionDuration: "functionDuration";
    readonly FunctionInvocation: "functionInvocation";
    readonly ImageOptimizationCacheRead: "imageOptimizationCacheRead";
    readonly ImageOptimizationCacheWrite: "imageOptimizationCacheWrite";
    readonly ImageOptimizationTransformation: "imageOptimizationTransformation";
    readonly LogDrainsVolume: "logDrainsVolume";
    readonly MonitoringMetric: "monitoringMetric";
    readonly BlobDataTransfer: "blobDataTransfer";
    readonly ObservabilityEvent: "observabilityEvent";
    readonly OnDemandConcurrencyMinutes: "onDemandConcurrencyMinutes";
    readonly RuntimeCacheRead: "runtimeCacheRead";
    readonly RuntimeCacheWrite: "runtimeCacheWrite";
    readonly ServerlessFunctionExecution: "serverlessFunctionExecution";
    readonly SourceImages: "sourceImages";
    readonly WafOwaspExcessBytes: "wafOwaspExcessBytes";
    readonly WafOwaspRequests: "wafOwaspRequests";
    readonly WafRateLimitRequest: "wafRateLimitRequest";
    readonly WebAnalyticsEvent: "webAnalyticsEvent";
};
export type BlockedDueToOverageType = ClosedEnum<typeof BlockedDueToOverageType>;
/**
 * When the User account has been "soft blocked", this property will contain the date when the restriction was enacted, and the identifier for why.
 */
export type SoftBlock = {
    blockedAt: number;
    reason: Reason;
    blockedDueToOverageType?: BlockedDueToOverageType | undefined;
};
/**
 * An object containing billing infomation associated with the User account.
 */
export type Billing = {};
/**
 * An object containing infomation related to the amount of platform resources may be allocated to the User account.
 */
export type AuthUserBuildEntitlements = {
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    enhancedBuilds?: boolean | undefined;
};
/**
 * An object containing infomation related to the amount of platform resources may be allocated to the User account.
 */
export declare const PurchaseType: {
    readonly Enhanced: "enhanced";
    readonly Turbo: "turbo";
};
/**
 * An object containing infomation related to the amount of platform resources may be allocated to the User account.
 */
export type PurchaseType = ClosedEnum<typeof PurchaseType>;
/**
 * An object containing infomation related to the amount of platform resources may be allocated to the User account.
 */
export type BuildMachine = {
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    purchaseType?: PurchaseType | undefined;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    isDefaultBuildMachine?: boolean | undefined;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    cores?: number | undefined;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    memory?: number | undefined;
};
/**
 * An object containing infomation related to the amount of platform resources may be allocated to the User account.
 */
export type AuthUserSecurity = {
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    customRules?: number | undefined;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    ipBlocks?: number | undefined;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    ipBypass?: number | undefined;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    rateLimit?: number | undefined;
};
/**
 * An object containing infomation related to the amount of platform resources may be allocated to the User account.
 */
export type AuthUserResourceConfig = {
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    nodeType?: string | undefined;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    concurrentBuilds?: number | undefined;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    elasticConcurrencyEnabled?: boolean | undefined;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    buildEntitlements?: AuthUserBuildEntitlements | undefined;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    awsAccountType?: string | undefined;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    awsAccountIds?: Array<string> | undefined;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    cfZoneName?: string | undefined;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    imageOptimizationType?: string | undefined;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    edgeConfigs?: number | undefined;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    edgeConfigSize?: number | undefined;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    edgeFunctionMaxSizeBytes?: number | undefined;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    edgeFunctionExecutionTimeoutMs?: number | undefined;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    serverlessFunctionMaxMemorySize?: number | undefined;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    kvDatabases?: number | undefined;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    postgresDatabases?: number | undefined;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    blobStores?: number | undefined;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    integrationStores?: number | undefined;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    cronJobs?: number | undefined;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    cronJobsPerProject?: number | undefined;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    microfrontendGroupsPerTeam?: number | undefined;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    microfrontendProjectsPerGroup?: number | undefined;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    flagsExplorerOverridesThreshold?: number | undefined;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    flagsExplorerUnlimitedOverrides?: boolean | undefined;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    customEnvironmentsPerProject?: number | undefined;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    buildMachine?: BuildMachine | undefined;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    security?: AuthUserSecurity | undefined;
};
export declare const ViewPreference: {
    readonly List: "list";
    readonly Cards: "cards";
};
export type ViewPreference = ClosedEnum<typeof ViewPreference>;
export declare const FavoritesViewPreference: {
    readonly Open: "open";
    readonly Closed: "closed";
};
export type FavoritesViewPreference = ClosedEnum<typeof FavoritesViewPreference>;
export declare const RecentsViewPreference: {
    readonly Open: "open";
    readonly Closed: "closed";
};
export type RecentsViewPreference = ClosedEnum<typeof RecentsViewPreference>;
/**
 * set of dashboard view preferences (cards or list) per scopeId
 */
export type ActiveDashboardViews = {
    scopeId: string;
    viewPreference?: ViewPreference | null | undefined;
    favoritesViewPreference?: FavoritesViewPreference | null | undefined;
    recentsViewPreference?: RecentsViewPreference | null | undefined;
};
export type ImportFlowGitNamespace = string | number;
export type ImportFlowGitNamespaceId = string | number;
export declare const ImportFlowGitProvider: {
    readonly Gitlab: "gitlab";
    readonly Bitbucket: "bitbucket";
    readonly Github: "github";
    readonly GithubLimited: "github-limited";
    readonly GithubCustomHost: "github-custom-host";
};
export type ImportFlowGitProvider = ClosedEnum<typeof ImportFlowGitProvider>;
export type GitNamespaceId = string | number;
export type PreferredScopesAndGitNamespaces = {
    scopeId: string;
    gitNamespaceId: string | number | null;
};
export type Dismissals = {
    scopeId: string;
    createdAt: number;
};
/**
 * A record of when, under a certain scopeId, a toast was dismissed
 */
export type DismissedToasts = {
    name: string;
    dismissals: Array<Dismissals>;
};
/**
 * A list of projects and spaces across teams that a user has marked as a favorite.
 */
export type FavoriteProjectsAndSpaces = {
    teamId: string;
    projectId: string;
};
/**
 * remote caching settings
 */
export type AuthUserRemoteCaching = {
    enabled?: boolean | undefined;
};
/**
 * data cache settings
 */
export type DataCache = {
    excessBillingEnabled?: boolean | undefined;
};
export type WebAnalytics = {
    blockedFrom?: number | undefined;
    blockedUntil?: number | undefined;
    isCurrentlyBlocked: boolean;
};
/**
 * Feature blocks for the user
 */
export type FeatureBlocks = {
    webAnalytics?: WebAnalytics | undefined;
};
/**
 * Data for the currently authenticated User.
 */
export type AuthUser = {
    /**
     * UNIX timestamp (in milliseconds) when the User account was created.
     */
    createdAt: number;
    /**
     * When the User account has been "soft blocked", this property will contain the date when the restriction was enacted, and the identifier for why.
     */
    softBlock: SoftBlock | null;
    /**
     * An object containing billing infomation associated with the User account.
     */
    billing: Billing | null;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    resourceConfig: AuthUserResourceConfig;
    /**
     * Prefix that will be used in the URL of "Preview" deployments created by the User account.
     */
    stagingPrefix: string;
    /**
     * set of dashboard view preferences (cards or list) per scopeId
     */
    activeDashboardViews?: Array<ActiveDashboardViews> | undefined;
    importFlowGitNamespace?: string | number | null | undefined;
    importFlowGitNamespaceId?: string | number | null | undefined;
    importFlowGitProvider?: ImportFlowGitProvider | null | undefined;
    preferredScopesAndGitNamespaces?: Array<PreferredScopesAndGitNamespaces> | undefined;
    /**
     * A record of when, under a certain scopeId, a toast was dismissed
     */
    dismissedToasts?: Array<DismissedToasts> | undefined;
    /**
     * A list of projects and spaces across teams that a user has marked as a favorite.
     */
    favoriteProjectsAndSpaces?: Array<FavoriteProjectsAndSpaces> | undefined;
    /**
     * Whether the user has a trial available for a paid plan subscription.
     */
    hasTrialAvailable: boolean;
    /**
     * remote caching settings
     */
    remoteCaching?: AuthUserRemoteCaching | undefined;
    /**
     * data cache settings
     */
    dataCache?: DataCache | undefined;
    /**
     * Feature blocks for the user
     */
    featureBlocks?: FeatureBlocks | undefined;
    /**
     * The User's unique identifier.
     */
    id: string;
    /**
     * Email address associated with the User account.
     */
    email: string;
    /**
     * Name associated with the User account, or `null` if none has been provided.
     */
    name: string | null;
    /**
     * Unique username associated with the User account.
     */
    username: string;
    /**
     * SHA1 hash of the avatar for the User account. Can be used in conjuction with the ... endpoint to retrieve the avatar image.
     */
    avatar: string | null;
    /**
     * The user's default team.
     */
    defaultTeamId: string | null;
};
/** @internal */
export declare const Reason$inboundSchema: z.ZodNativeEnum<typeof Reason>;
/** @internal */
export declare const Reason$outboundSchema: z.ZodNativeEnum<typeof Reason>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Reason$ {
    /** @deprecated use `Reason$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly SubscriptionCanceled: "SUBSCRIPTION_CANCELED";
        readonly SubscriptionExpired: "SUBSCRIPTION_EXPIRED";
        readonly UnpaidInvoice: "UNPAID_INVOICE";
        readonly EnterpriseTrialEnded: "ENTERPRISE_TRIAL_ENDED";
        readonly FairUseLimitsExceeded: "FAIR_USE_LIMITS_EXCEEDED";
        readonly BlockedForPlatformAbuse: "BLOCKED_FOR_PLATFORM_ABUSE";
    }>;
    /** @deprecated use `Reason$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly SubscriptionCanceled: "SUBSCRIPTION_CANCELED";
        readonly SubscriptionExpired: "SUBSCRIPTION_EXPIRED";
        readonly UnpaidInvoice: "UNPAID_INVOICE";
        readonly EnterpriseTrialEnded: "ENTERPRISE_TRIAL_ENDED";
        readonly FairUseLimitsExceeded: "FAIR_USE_LIMITS_EXCEEDED";
        readonly BlockedForPlatformAbuse: "BLOCKED_FOR_PLATFORM_ABUSE";
    }>;
}
/** @internal */
export declare const BlockedDueToOverageType$inboundSchema: z.ZodNativeEnum<typeof BlockedDueToOverageType>;
/** @internal */
export declare const BlockedDueToOverageType$outboundSchema: z.ZodNativeEnum<typeof BlockedDueToOverageType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BlockedDueToOverageType$ {
    /** @deprecated use `BlockedDueToOverageType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly AnalyticsUsage: "analyticsUsage";
        readonly Artifacts: "artifacts";
        readonly Bandwidth: "bandwidth";
        readonly BlobTotalAdvancedRequests: "blobTotalAdvancedRequests";
        readonly BlobTotalAvgSizeInBytes: "blobTotalAvgSizeInBytes";
        readonly BlobTotalGetResponseObjectSizeInBytes: "blobTotalGetResponseObjectSizeInBytes";
        readonly BlobTotalSimpleRequests: "blobTotalSimpleRequests";
        readonly ConnectDataTransfer: "connectDataTransfer";
        readonly DataCacheRead: "dataCacheRead";
        readonly DataCacheWrite: "dataCacheWrite";
        readonly EdgeConfigRead: "edgeConfigRead";
        readonly EdgeConfigWrite: "edgeConfigWrite";
        readonly EdgeFunctionExecutionUnits: "edgeFunctionExecutionUnits";
        readonly EdgeMiddlewareInvocations: "edgeMiddlewareInvocations";
        readonly EdgeRequestAdditionalCpuDuration: "edgeRequestAdditionalCpuDuration";
        readonly EdgeRequest: "edgeRequest";
        readonly ElasticConcurrencyBuildSlots: "elasticConcurrencyBuildSlots";
        readonly FastDataTransfer: "fastDataTransfer";
        readonly FastOriginTransfer: "fastOriginTransfer";
        readonly FluidCpuDuration: "fluidCpuDuration";
        readonly FluidDuration: "fluidDuration";
        readonly FunctionDuration: "functionDuration";
        readonly FunctionInvocation: "functionInvocation";
        readonly ImageOptimizationCacheRead: "imageOptimizationCacheRead";
        readonly ImageOptimizationCacheWrite: "imageOptimizationCacheWrite";
        readonly ImageOptimizationTransformation: "imageOptimizationTransformation";
        readonly LogDrainsVolume: "logDrainsVolume";
        readonly MonitoringMetric: "monitoringMetric";
        readonly BlobDataTransfer: "blobDataTransfer";
        readonly ObservabilityEvent: "observabilityEvent";
        readonly OnDemandConcurrencyMinutes: "onDemandConcurrencyMinutes";
        readonly RuntimeCacheRead: "runtimeCacheRead";
        readonly RuntimeCacheWrite: "runtimeCacheWrite";
        readonly ServerlessFunctionExecution: "serverlessFunctionExecution";
        readonly SourceImages: "sourceImages";
        readonly WafOwaspExcessBytes: "wafOwaspExcessBytes";
        readonly WafOwaspRequests: "wafOwaspRequests";
        readonly WafRateLimitRequest: "wafRateLimitRequest";
        readonly WebAnalyticsEvent: "webAnalyticsEvent";
    }>;
    /** @deprecated use `BlockedDueToOverageType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly AnalyticsUsage: "analyticsUsage";
        readonly Artifacts: "artifacts";
        readonly Bandwidth: "bandwidth";
        readonly BlobTotalAdvancedRequests: "blobTotalAdvancedRequests";
        readonly BlobTotalAvgSizeInBytes: "blobTotalAvgSizeInBytes";
        readonly BlobTotalGetResponseObjectSizeInBytes: "blobTotalGetResponseObjectSizeInBytes";
        readonly BlobTotalSimpleRequests: "blobTotalSimpleRequests";
        readonly ConnectDataTransfer: "connectDataTransfer";
        readonly DataCacheRead: "dataCacheRead";
        readonly DataCacheWrite: "dataCacheWrite";
        readonly EdgeConfigRead: "edgeConfigRead";
        readonly EdgeConfigWrite: "edgeConfigWrite";
        readonly EdgeFunctionExecutionUnits: "edgeFunctionExecutionUnits";
        readonly EdgeMiddlewareInvocations: "edgeMiddlewareInvocations";
        readonly EdgeRequestAdditionalCpuDuration: "edgeRequestAdditionalCpuDuration";
        readonly EdgeRequest: "edgeRequest";
        readonly ElasticConcurrencyBuildSlots: "elasticConcurrencyBuildSlots";
        readonly FastDataTransfer: "fastDataTransfer";
        readonly FastOriginTransfer: "fastOriginTransfer";
        readonly FluidCpuDuration: "fluidCpuDuration";
        readonly FluidDuration: "fluidDuration";
        readonly FunctionDuration: "functionDuration";
        readonly FunctionInvocation: "functionInvocation";
        readonly ImageOptimizationCacheRead: "imageOptimizationCacheRead";
        readonly ImageOptimizationCacheWrite: "imageOptimizationCacheWrite";
        readonly ImageOptimizationTransformation: "imageOptimizationTransformation";
        readonly LogDrainsVolume: "logDrainsVolume";
        readonly MonitoringMetric: "monitoringMetric";
        readonly BlobDataTransfer: "blobDataTransfer";
        readonly ObservabilityEvent: "observabilityEvent";
        readonly OnDemandConcurrencyMinutes: "onDemandConcurrencyMinutes";
        readonly RuntimeCacheRead: "runtimeCacheRead";
        readonly RuntimeCacheWrite: "runtimeCacheWrite";
        readonly ServerlessFunctionExecution: "serverlessFunctionExecution";
        readonly SourceImages: "sourceImages";
        readonly WafOwaspExcessBytes: "wafOwaspExcessBytes";
        readonly WafOwaspRequests: "wafOwaspRequests";
        readonly WafRateLimitRequest: "wafRateLimitRequest";
        readonly WebAnalyticsEvent: "webAnalyticsEvent";
    }>;
}
/** @internal */
export declare const SoftBlock$inboundSchema: z.ZodType<SoftBlock, z.ZodTypeDef, unknown>;
/** @internal */
export type SoftBlock$Outbound = {
    blockedAt: number;
    reason: string;
    blockedDueToOverageType?: string | undefined;
};
/** @internal */
export declare const SoftBlock$outboundSchema: z.ZodType<SoftBlock$Outbound, z.ZodTypeDef, SoftBlock>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SoftBlock$ {
    /** @deprecated use `SoftBlock$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SoftBlock, z.ZodTypeDef, unknown>;
    /** @deprecated use `SoftBlock$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SoftBlock$Outbound, z.ZodTypeDef, SoftBlock>;
    /** @deprecated use `SoftBlock$Outbound` instead. */
    type Outbound = SoftBlock$Outbound;
}
export declare function softBlockToJSON(softBlock: SoftBlock): string;
export declare function softBlockFromJSON(jsonString: string): SafeParseResult<SoftBlock, SDKValidationError>;
/** @internal */
export declare const Billing$inboundSchema: z.ZodType<Billing, z.ZodTypeDef, unknown>;
/** @internal */
export type Billing$Outbound = {};
/** @internal */
export declare const Billing$outboundSchema: z.ZodType<Billing$Outbound, z.ZodTypeDef, Billing>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Billing$ {
    /** @deprecated use `Billing$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Billing, z.ZodTypeDef, unknown>;
    /** @deprecated use `Billing$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Billing$Outbound, z.ZodTypeDef, Billing>;
    /** @deprecated use `Billing$Outbound` instead. */
    type Outbound = Billing$Outbound;
}
export declare function billingToJSON(billing: Billing): string;
export declare function billingFromJSON(jsonString: string): SafeParseResult<Billing, SDKValidationError>;
/** @internal */
export declare const AuthUserBuildEntitlements$inboundSchema: z.ZodType<AuthUserBuildEntitlements, z.ZodTypeDef, unknown>;
/** @internal */
export type AuthUserBuildEntitlements$Outbound = {
    enhancedBuilds?: boolean | undefined;
};
/** @internal */
export declare const AuthUserBuildEntitlements$outboundSchema: z.ZodType<AuthUserBuildEntitlements$Outbound, z.ZodTypeDef, AuthUserBuildEntitlements>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AuthUserBuildEntitlements$ {
    /** @deprecated use `AuthUserBuildEntitlements$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AuthUserBuildEntitlements, z.ZodTypeDef, unknown>;
    /** @deprecated use `AuthUserBuildEntitlements$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AuthUserBuildEntitlements$Outbound, z.ZodTypeDef, AuthUserBuildEntitlements>;
    /** @deprecated use `AuthUserBuildEntitlements$Outbound` instead. */
    type Outbound = AuthUserBuildEntitlements$Outbound;
}
export declare function authUserBuildEntitlementsToJSON(authUserBuildEntitlements: AuthUserBuildEntitlements): string;
export declare function authUserBuildEntitlementsFromJSON(jsonString: string): SafeParseResult<AuthUserBuildEntitlements, SDKValidationError>;
/** @internal */
export declare const PurchaseType$inboundSchema: z.ZodNativeEnum<typeof PurchaseType>;
/** @internal */
export declare const PurchaseType$outboundSchema: z.ZodNativeEnum<typeof PurchaseType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PurchaseType$ {
    /** @deprecated use `PurchaseType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Enhanced: "enhanced";
        readonly Turbo: "turbo";
    }>;
    /** @deprecated use `PurchaseType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Enhanced: "enhanced";
        readonly Turbo: "turbo";
    }>;
}
/** @internal */
export declare const BuildMachine$inboundSchema: z.ZodType<BuildMachine, z.ZodTypeDef, unknown>;
/** @internal */
export type BuildMachine$Outbound = {
    purchaseType?: string | undefined;
    isDefaultBuildMachine?: boolean | undefined;
    cores?: number | undefined;
    memory?: number | undefined;
};
/** @internal */
export declare const BuildMachine$outboundSchema: z.ZodType<BuildMachine$Outbound, z.ZodTypeDef, BuildMachine>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BuildMachine$ {
    /** @deprecated use `BuildMachine$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BuildMachine, z.ZodTypeDef, unknown>;
    /** @deprecated use `BuildMachine$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BuildMachine$Outbound, z.ZodTypeDef, BuildMachine>;
    /** @deprecated use `BuildMachine$Outbound` instead. */
    type Outbound = BuildMachine$Outbound;
}
export declare function buildMachineToJSON(buildMachine: BuildMachine): string;
export declare function buildMachineFromJSON(jsonString: string): SafeParseResult<BuildMachine, SDKValidationError>;
/** @internal */
export declare const AuthUserSecurity$inboundSchema: z.ZodType<AuthUserSecurity, z.ZodTypeDef, unknown>;
/** @internal */
export type AuthUserSecurity$Outbound = {
    customRules?: number | undefined;
    ipBlocks?: number | undefined;
    ipBypass?: number | undefined;
    rateLimit?: number | undefined;
};
/** @internal */
export declare const AuthUserSecurity$outboundSchema: z.ZodType<AuthUserSecurity$Outbound, z.ZodTypeDef, AuthUserSecurity>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AuthUserSecurity$ {
    /** @deprecated use `AuthUserSecurity$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AuthUserSecurity, z.ZodTypeDef, unknown>;
    /** @deprecated use `AuthUserSecurity$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AuthUserSecurity$Outbound, z.ZodTypeDef, AuthUserSecurity>;
    /** @deprecated use `AuthUserSecurity$Outbound` instead. */
    type Outbound = AuthUserSecurity$Outbound;
}
export declare function authUserSecurityToJSON(authUserSecurity: AuthUserSecurity): string;
export declare function authUserSecurityFromJSON(jsonString: string): SafeParseResult<AuthUserSecurity, SDKValidationError>;
/** @internal */
export declare const AuthUserResourceConfig$inboundSchema: z.ZodType<AuthUserResourceConfig, z.ZodTypeDef, unknown>;
/** @internal */
export type AuthUserResourceConfig$Outbound = {
    nodeType?: string | undefined;
    concurrentBuilds?: number | undefined;
    elasticConcurrencyEnabled?: boolean | undefined;
    buildEntitlements?: AuthUserBuildEntitlements$Outbound | undefined;
    awsAccountType?: string | undefined;
    awsAccountIds?: Array<string> | undefined;
    cfZoneName?: string | undefined;
    imageOptimizationType?: string | undefined;
    edgeConfigs?: number | undefined;
    edgeConfigSize?: number | undefined;
    edgeFunctionMaxSizeBytes?: number | undefined;
    edgeFunctionExecutionTimeoutMs?: number | undefined;
    serverlessFunctionMaxMemorySize?: number | undefined;
    kvDatabases?: number | undefined;
    postgresDatabases?: number | undefined;
    blobStores?: number | undefined;
    integrationStores?: number | undefined;
    cronJobs?: number | undefined;
    cronJobsPerProject?: number | undefined;
    microfrontendGroupsPerTeam?: number | undefined;
    microfrontendProjectsPerGroup?: number | undefined;
    flagsExplorerOverridesThreshold?: number | undefined;
    flagsExplorerUnlimitedOverrides?: boolean | undefined;
    customEnvironmentsPerProject?: number | undefined;
    buildMachine?: BuildMachine$Outbound | undefined;
    security?: AuthUserSecurity$Outbound | undefined;
};
/** @internal */
export declare const AuthUserResourceConfig$outboundSchema: z.ZodType<AuthUserResourceConfig$Outbound, z.ZodTypeDef, AuthUserResourceConfig>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AuthUserResourceConfig$ {
    /** @deprecated use `AuthUserResourceConfig$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AuthUserResourceConfig, z.ZodTypeDef, unknown>;
    /** @deprecated use `AuthUserResourceConfig$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AuthUserResourceConfig$Outbound, z.ZodTypeDef, AuthUserResourceConfig>;
    /** @deprecated use `AuthUserResourceConfig$Outbound` instead. */
    type Outbound = AuthUserResourceConfig$Outbound;
}
export declare function authUserResourceConfigToJSON(authUserResourceConfig: AuthUserResourceConfig): string;
export declare function authUserResourceConfigFromJSON(jsonString: string): SafeParseResult<AuthUserResourceConfig, SDKValidationError>;
/** @internal */
export declare const ViewPreference$inboundSchema: z.ZodNativeEnum<typeof ViewPreference>;
/** @internal */
export declare const ViewPreference$outboundSchema: z.ZodNativeEnum<typeof ViewPreference>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ViewPreference$ {
    /** @deprecated use `ViewPreference$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly List: "list";
        readonly Cards: "cards";
    }>;
    /** @deprecated use `ViewPreference$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly List: "list";
        readonly Cards: "cards";
    }>;
}
/** @internal */
export declare const FavoritesViewPreference$inboundSchema: z.ZodNativeEnum<typeof FavoritesViewPreference>;
/** @internal */
export declare const FavoritesViewPreference$outboundSchema: z.ZodNativeEnum<typeof FavoritesViewPreference>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FavoritesViewPreference$ {
    /** @deprecated use `FavoritesViewPreference$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Open: "open";
        readonly Closed: "closed";
    }>;
    /** @deprecated use `FavoritesViewPreference$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Open: "open";
        readonly Closed: "closed";
    }>;
}
/** @internal */
export declare const RecentsViewPreference$inboundSchema: z.ZodNativeEnum<typeof RecentsViewPreference>;
/** @internal */
export declare const RecentsViewPreference$outboundSchema: z.ZodNativeEnum<typeof RecentsViewPreference>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RecentsViewPreference$ {
    /** @deprecated use `RecentsViewPreference$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Open: "open";
        readonly Closed: "closed";
    }>;
    /** @deprecated use `RecentsViewPreference$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Open: "open";
        readonly Closed: "closed";
    }>;
}
/** @internal */
export declare const ActiveDashboardViews$inboundSchema: z.ZodType<ActiveDashboardViews, z.ZodTypeDef, unknown>;
/** @internal */
export type ActiveDashboardViews$Outbound = {
    scopeId: string;
    viewPreference?: string | null | undefined;
    favoritesViewPreference?: string | null | undefined;
    recentsViewPreference?: string | null | undefined;
};
/** @internal */
export declare const ActiveDashboardViews$outboundSchema: z.ZodType<ActiveDashboardViews$Outbound, z.ZodTypeDef, ActiveDashboardViews>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActiveDashboardViews$ {
    /** @deprecated use `ActiveDashboardViews$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActiveDashboardViews, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActiveDashboardViews$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActiveDashboardViews$Outbound, z.ZodTypeDef, ActiveDashboardViews>;
    /** @deprecated use `ActiveDashboardViews$Outbound` instead. */
    type Outbound = ActiveDashboardViews$Outbound;
}
export declare function activeDashboardViewsToJSON(activeDashboardViews: ActiveDashboardViews): string;
export declare function activeDashboardViewsFromJSON(jsonString: string): SafeParseResult<ActiveDashboardViews, SDKValidationError>;
/** @internal */
export declare const ImportFlowGitNamespace$inboundSchema: z.ZodType<ImportFlowGitNamespace, z.ZodTypeDef, unknown>;
/** @internal */
export type ImportFlowGitNamespace$Outbound = string | number;
/** @internal */
export declare const ImportFlowGitNamespace$outboundSchema: z.ZodType<ImportFlowGitNamespace$Outbound, z.ZodTypeDef, ImportFlowGitNamespace>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ImportFlowGitNamespace$ {
    /** @deprecated use `ImportFlowGitNamespace$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ImportFlowGitNamespace, z.ZodTypeDef, unknown>;
    /** @deprecated use `ImportFlowGitNamespace$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ImportFlowGitNamespace$Outbound, z.ZodTypeDef, ImportFlowGitNamespace>;
    /** @deprecated use `ImportFlowGitNamespace$Outbound` instead. */
    type Outbound = ImportFlowGitNamespace$Outbound;
}
export declare function importFlowGitNamespaceToJSON(importFlowGitNamespace: ImportFlowGitNamespace): string;
export declare function importFlowGitNamespaceFromJSON(jsonString: string): SafeParseResult<ImportFlowGitNamespace, SDKValidationError>;
/** @internal */
export declare const ImportFlowGitNamespaceId$inboundSchema: z.ZodType<ImportFlowGitNamespaceId, z.ZodTypeDef, unknown>;
/** @internal */
export type ImportFlowGitNamespaceId$Outbound = string | number;
/** @internal */
export declare const ImportFlowGitNamespaceId$outboundSchema: z.ZodType<ImportFlowGitNamespaceId$Outbound, z.ZodTypeDef, ImportFlowGitNamespaceId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ImportFlowGitNamespaceId$ {
    /** @deprecated use `ImportFlowGitNamespaceId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ImportFlowGitNamespaceId, z.ZodTypeDef, unknown>;
    /** @deprecated use `ImportFlowGitNamespaceId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ImportFlowGitNamespaceId$Outbound, z.ZodTypeDef, ImportFlowGitNamespaceId>;
    /** @deprecated use `ImportFlowGitNamespaceId$Outbound` instead. */
    type Outbound = ImportFlowGitNamespaceId$Outbound;
}
export declare function importFlowGitNamespaceIdToJSON(importFlowGitNamespaceId: ImportFlowGitNamespaceId): string;
export declare function importFlowGitNamespaceIdFromJSON(jsonString: string): SafeParseResult<ImportFlowGitNamespaceId, SDKValidationError>;
/** @internal */
export declare const ImportFlowGitProvider$inboundSchema: z.ZodNativeEnum<typeof ImportFlowGitProvider>;
/** @internal */
export declare const ImportFlowGitProvider$outboundSchema: z.ZodNativeEnum<typeof ImportFlowGitProvider>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ImportFlowGitProvider$ {
    /** @deprecated use `ImportFlowGitProvider$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Gitlab: "gitlab";
        readonly Bitbucket: "bitbucket";
        readonly Github: "github";
        readonly GithubLimited: "github-limited";
        readonly GithubCustomHost: "github-custom-host";
    }>;
    /** @deprecated use `ImportFlowGitProvider$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Gitlab: "gitlab";
        readonly Bitbucket: "bitbucket";
        readonly Github: "github";
        readonly GithubLimited: "github-limited";
        readonly GithubCustomHost: "github-custom-host";
    }>;
}
/** @internal */
export declare const GitNamespaceId$inboundSchema: z.ZodType<GitNamespaceId, z.ZodTypeDef, unknown>;
/** @internal */
export type GitNamespaceId$Outbound = string | number;
/** @internal */
export declare const GitNamespaceId$outboundSchema: z.ZodType<GitNamespaceId$Outbound, z.ZodTypeDef, GitNamespaceId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GitNamespaceId$ {
    /** @deprecated use `GitNamespaceId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GitNamespaceId, z.ZodTypeDef, unknown>;
    /** @deprecated use `GitNamespaceId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GitNamespaceId$Outbound, z.ZodTypeDef, GitNamespaceId>;
    /** @deprecated use `GitNamespaceId$Outbound` instead. */
    type Outbound = GitNamespaceId$Outbound;
}
export declare function gitNamespaceIdToJSON(gitNamespaceId: GitNamespaceId): string;
export declare function gitNamespaceIdFromJSON(jsonString: string): SafeParseResult<GitNamespaceId, SDKValidationError>;
/** @internal */
export declare const PreferredScopesAndGitNamespaces$inboundSchema: z.ZodType<PreferredScopesAndGitNamespaces, z.ZodTypeDef, unknown>;
/** @internal */
export type PreferredScopesAndGitNamespaces$Outbound = {
    scopeId: string;
    gitNamespaceId: string | number | null;
};
/** @internal */
export declare const PreferredScopesAndGitNamespaces$outboundSchema: z.ZodType<PreferredScopesAndGitNamespaces$Outbound, z.ZodTypeDef, PreferredScopesAndGitNamespaces>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PreferredScopesAndGitNamespaces$ {
    /** @deprecated use `PreferredScopesAndGitNamespaces$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PreferredScopesAndGitNamespaces, z.ZodTypeDef, unknown>;
    /** @deprecated use `PreferredScopesAndGitNamespaces$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PreferredScopesAndGitNamespaces$Outbound, z.ZodTypeDef, PreferredScopesAndGitNamespaces>;
    /** @deprecated use `PreferredScopesAndGitNamespaces$Outbound` instead. */
    type Outbound = PreferredScopesAndGitNamespaces$Outbound;
}
export declare function preferredScopesAndGitNamespacesToJSON(preferredScopesAndGitNamespaces: PreferredScopesAndGitNamespaces): string;
export declare function preferredScopesAndGitNamespacesFromJSON(jsonString: string): SafeParseResult<PreferredScopesAndGitNamespaces, SDKValidationError>;
/** @internal */
export declare const Dismissals$inboundSchema: z.ZodType<Dismissals, z.ZodTypeDef, unknown>;
/** @internal */
export type Dismissals$Outbound = {
    scopeId: string;
    createdAt: number;
};
/** @internal */
export declare const Dismissals$outboundSchema: z.ZodType<Dismissals$Outbound, z.ZodTypeDef, Dismissals>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Dismissals$ {
    /** @deprecated use `Dismissals$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Dismissals, z.ZodTypeDef, unknown>;
    /** @deprecated use `Dismissals$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Dismissals$Outbound, z.ZodTypeDef, Dismissals>;
    /** @deprecated use `Dismissals$Outbound` instead. */
    type Outbound = Dismissals$Outbound;
}
export declare function dismissalsToJSON(dismissals: Dismissals): string;
export declare function dismissalsFromJSON(jsonString: string): SafeParseResult<Dismissals, SDKValidationError>;
/** @internal */
export declare const DismissedToasts$inboundSchema: z.ZodType<DismissedToasts, z.ZodTypeDef, unknown>;
/** @internal */
export type DismissedToasts$Outbound = {
    name: string;
    dismissals: Array<Dismissals$Outbound>;
};
/** @internal */
export declare const DismissedToasts$outboundSchema: z.ZodType<DismissedToasts$Outbound, z.ZodTypeDef, DismissedToasts>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace DismissedToasts$ {
    /** @deprecated use `DismissedToasts$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DismissedToasts, z.ZodTypeDef, unknown>;
    /** @deprecated use `DismissedToasts$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DismissedToasts$Outbound, z.ZodTypeDef, DismissedToasts>;
    /** @deprecated use `DismissedToasts$Outbound` instead. */
    type Outbound = DismissedToasts$Outbound;
}
export declare function dismissedToastsToJSON(dismissedToasts: DismissedToasts): string;
export declare function dismissedToastsFromJSON(jsonString: string): SafeParseResult<DismissedToasts, SDKValidationError>;
/** @internal */
export declare const FavoriteProjectsAndSpaces$inboundSchema: z.ZodType<FavoriteProjectsAndSpaces, z.ZodTypeDef, unknown>;
/** @internal */
export type FavoriteProjectsAndSpaces$Outbound = {
    teamId: string;
    projectId: string;
};
/** @internal */
export declare const FavoriteProjectsAndSpaces$outboundSchema: z.ZodType<FavoriteProjectsAndSpaces$Outbound, z.ZodTypeDef, FavoriteProjectsAndSpaces>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FavoriteProjectsAndSpaces$ {
    /** @deprecated use `FavoriteProjectsAndSpaces$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FavoriteProjectsAndSpaces, z.ZodTypeDef, unknown>;
    /** @deprecated use `FavoriteProjectsAndSpaces$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FavoriteProjectsAndSpaces$Outbound, z.ZodTypeDef, FavoriteProjectsAndSpaces>;
    /** @deprecated use `FavoriteProjectsAndSpaces$Outbound` instead. */
    type Outbound = FavoriteProjectsAndSpaces$Outbound;
}
export declare function favoriteProjectsAndSpacesToJSON(favoriteProjectsAndSpaces: FavoriteProjectsAndSpaces): string;
export declare function favoriteProjectsAndSpacesFromJSON(jsonString: string): SafeParseResult<FavoriteProjectsAndSpaces, SDKValidationError>;
/** @internal */
export declare const AuthUserRemoteCaching$inboundSchema: z.ZodType<AuthUserRemoteCaching, z.ZodTypeDef, unknown>;
/** @internal */
export type AuthUserRemoteCaching$Outbound = {
    enabled?: boolean | undefined;
};
/** @internal */
export declare const AuthUserRemoteCaching$outboundSchema: z.ZodType<AuthUserRemoteCaching$Outbound, z.ZodTypeDef, AuthUserRemoteCaching>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AuthUserRemoteCaching$ {
    /** @deprecated use `AuthUserRemoteCaching$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AuthUserRemoteCaching, z.ZodTypeDef, unknown>;
    /** @deprecated use `AuthUserRemoteCaching$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AuthUserRemoteCaching$Outbound, z.ZodTypeDef, AuthUserRemoteCaching>;
    /** @deprecated use `AuthUserRemoteCaching$Outbound` instead. */
    type Outbound = AuthUserRemoteCaching$Outbound;
}
export declare function authUserRemoteCachingToJSON(authUserRemoteCaching: AuthUserRemoteCaching): string;
export declare function authUserRemoteCachingFromJSON(jsonString: string): SafeParseResult<AuthUserRemoteCaching, SDKValidationError>;
/** @internal */
export declare const DataCache$inboundSchema: z.ZodType<DataCache, z.ZodTypeDef, unknown>;
/** @internal */
export type DataCache$Outbound = {
    excessBillingEnabled?: boolean | undefined;
};
/** @internal */
export declare const DataCache$outboundSchema: z.ZodType<DataCache$Outbound, z.ZodTypeDef, DataCache>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace DataCache$ {
    /** @deprecated use `DataCache$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DataCache, z.ZodTypeDef, unknown>;
    /** @deprecated use `DataCache$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DataCache$Outbound, z.ZodTypeDef, DataCache>;
    /** @deprecated use `DataCache$Outbound` instead. */
    type Outbound = DataCache$Outbound;
}
export declare function dataCacheToJSON(dataCache: DataCache): string;
export declare function dataCacheFromJSON(jsonString: string): SafeParseResult<DataCache, SDKValidationError>;
/** @internal */
export declare const WebAnalytics$inboundSchema: z.ZodType<WebAnalytics, z.ZodTypeDef, unknown>;
/** @internal */
export type WebAnalytics$Outbound = {
    blockedFrom?: number | undefined;
    blockedUntil?: number | undefined;
    isCurrentlyBlocked: boolean;
};
/** @internal */
export declare const WebAnalytics$outboundSchema: z.ZodType<WebAnalytics$Outbound, z.ZodTypeDef, WebAnalytics>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace WebAnalytics$ {
    /** @deprecated use `WebAnalytics$inboundSchema` instead. */
    const inboundSchema: z.ZodType<WebAnalytics, z.ZodTypeDef, unknown>;
    /** @deprecated use `WebAnalytics$outboundSchema` instead. */
    const outboundSchema: z.ZodType<WebAnalytics$Outbound, z.ZodTypeDef, WebAnalytics>;
    /** @deprecated use `WebAnalytics$Outbound` instead. */
    type Outbound = WebAnalytics$Outbound;
}
export declare function webAnalyticsToJSON(webAnalytics: WebAnalytics): string;
export declare function webAnalyticsFromJSON(jsonString: string): SafeParseResult<WebAnalytics, SDKValidationError>;
/** @internal */
export declare const FeatureBlocks$inboundSchema: z.ZodType<FeatureBlocks, z.ZodTypeDef, unknown>;
/** @internal */
export type FeatureBlocks$Outbound = {
    webAnalytics?: WebAnalytics$Outbound | undefined;
};
/** @internal */
export declare const FeatureBlocks$outboundSchema: z.ZodType<FeatureBlocks$Outbound, z.ZodTypeDef, FeatureBlocks>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FeatureBlocks$ {
    /** @deprecated use `FeatureBlocks$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FeatureBlocks, z.ZodTypeDef, unknown>;
    /** @deprecated use `FeatureBlocks$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FeatureBlocks$Outbound, z.ZodTypeDef, FeatureBlocks>;
    /** @deprecated use `FeatureBlocks$Outbound` instead. */
    type Outbound = FeatureBlocks$Outbound;
}
export declare function featureBlocksToJSON(featureBlocks: FeatureBlocks): string;
export declare function featureBlocksFromJSON(jsonString: string): SafeParseResult<FeatureBlocks, SDKValidationError>;
/** @internal */
export declare const AuthUser$inboundSchema: z.ZodType<AuthUser, z.ZodTypeDef, unknown>;
/** @internal */
export type AuthUser$Outbound = {
    createdAt: number;
    softBlock: SoftBlock$Outbound | null;
    billing: Billing$Outbound | null;
    resourceConfig: AuthUserResourceConfig$Outbound;
    stagingPrefix: string;
    activeDashboardViews?: Array<ActiveDashboardViews$Outbound> | undefined;
    importFlowGitNamespace?: string | number | null | undefined;
    importFlowGitNamespaceId?: string | number | null | undefined;
    importFlowGitProvider?: string | null | undefined;
    preferredScopesAndGitNamespaces?: Array<PreferredScopesAndGitNamespaces$Outbound> | undefined;
    dismissedToasts?: Array<DismissedToasts$Outbound> | undefined;
    favoriteProjectsAndSpaces?: Array<FavoriteProjectsAndSpaces$Outbound> | undefined;
    hasTrialAvailable: boolean;
    remoteCaching?: AuthUserRemoteCaching$Outbound | undefined;
    dataCache?: DataCache$Outbound | undefined;
    featureBlocks?: FeatureBlocks$Outbound | undefined;
    id: string;
    email: string;
    name: string | null;
    username: string;
    avatar: string | null;
    defaultTeamId: string | null;
};
/** @internal */
export declare const AuthUser$outboundSchema: z.ZodType<AuthUser$Outbound, z.ZodTypeDef, AuthUser>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AuthUser$ {
    /** @deprecated use `AuthUser$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AuthUser, z.ZodTypeDef, unknown>;
    /** @deprecated use `AuthUser$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AuthUser$Outbound, z.ZodTypeDef, AuthUser>;
    /** @deprecated use `AuthUser$Outbound` instead. */
    type Outbound = AuthUser$Outbound;
}
export declare function authUserToJSON(authUser: AuthUser): string;
export declare function authUserFromJSON(jsonString: string): SafeParseResult<AuthUser, SDKValidationError>;
//# sourceMappingURL=authuser.d.ts.map