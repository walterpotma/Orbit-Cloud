import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
/**
 * transfer-in
 */
export type CreateOrTransferDomainRequestBody3 = {
    /**
     * The domain name you want to add.
     */
    name: string;
    /**
     * The domain operation to perform. It can be either `add` or `transfer-in`.
     */
    method: string;
    /**
     * The authorization code assigned to the domain.
     */
    authCode?: string | undefined;
    /**
     * The price you expect to be charged for the required 1 year renewal.
     */
    expectedPrice?: number | undefined;
};
/**
 * move-in
 */
export type CreateOrTransferDomainRequestBody2 = {
    /**
     * The domain name you want to add.
     */
    name: string;
    /**
     * The domain operation to perform. It can be either `add` or `transfer-in`.
     */
    method: string;
    /**
     * The move-in token from Move Requested email.
     */
    token?: string | undefined;
};
/**
 * add
 */
export type CreateOrTransferDomainRequestBody1 = {
    /**
     * The domain name you want to add.
     */
    name: string;
    /**
     * Whether the domain has the Vercel Edge Network enabled or not.
     */
    cdnEnabled?: boolean | undefined;
    zone?: boolean | undefined;
    /**
     * The domain operation to perform. It can be either `add` or `transfer-in`.
     */
    method?: string | undefined;
};
export type CreateOrTransferDomainRequestBody = CreateOrTransferDomainRequestBody2 | CreateOrTransferDomainRequestBody3 | CreateOrTransferDomainRequestBody1;
export type CreateOrTransferDomainRequest = {
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody?: CreateOrTransferDomainRequestBody2 | CreateOrTransferDomainRequestBody3 | CreateOrTransferDomainRequestBody1 | undefined;
};
/**
 * An object containing information of the domain creator, including the user's id, username, and email.
 */
export type CreateOrTransferDomainCreator = {
    username: string;
    email: string;
    customerId?: string | null | undefined;
    isDomainReseller?: boolean | undefined;
    id: string;
};
/**
 * Whether or not the domain is registered with Name.com. If set to `true`, the domain is registered with Name.com.
 */
export declare const CreateOrTransferDomainRegistrar: {
    readonly New: "new";
};
/**
 * Whether or not the domain is registered with Name.com. If set to `true`, the domain is registered with Name.com.
 */
export type CreateOrTransferDomainRegistrar = ClosedEnum<typeof CreateOrTransferDomainRegistrar>;
/**
 * The type of service the domain is handled by. `external` if the DNS is externally handled, `zeit.world` if handled with Vercel, or `na` if the service is not available.
 */
export declare const CreateOrTransferDomainServiceType: {
    readonly ZeitWorld: "zeit.world";
    readonly External: "external";
    readonly Na: "na";
};
/**
 * The type of service the domain is handled by. `external` if the DNS is externally handled, `zeit.world` if handled with Vercel, or `na` if the service is not available.
 */
export type CreateOrTransferDomainServiceType = ClosedEnum<typeof CreateOrTransferDomainServiceType>;
export type CreateOrTransferDomainDomain = {
    /**
     * If the domain has the ownership verified.
     */
    verified: boolean;
    /**
     * A list of the current nameservers of the domain.
     */
    nameservers: Array<string>;
    /**
     * A list of the intended nameservers for the domain to point to Vercel DNS.
     */
    intendedNameservers: Array<string>;
    /**
     * A list of custom nameservers for the domain to point to. Only applies to domains purchased with Vercel.
     */
    customNameservers?: Array<string> | undefined;
    /**
     * An object containing information of the domain creator, including the user's id, username, and email.
     */
    creator: CreateOrTransferDomainCreator;
    /**
     * Whether or not the domain is registered with Name.com. If set to `true`, the domain is registered with Name.com.
     */
    registrar?: CreateOrTransferDomainRegistrar | undefined;
    /**
     * The domain name.
     */
    name: string;
    /**
     * If it was purchased through Vercel, the timestamp in milliseconds when it was purchased.
     */
    boughtAt: number | null;
    /**
     * Timestamp in milliseconds when the domain was created in the registry.
     */
    createdAt: number;
    /**
     * Timestamp in milliseconds at which the domain is set to expire. `null` if not bought with Vercel.
     */
    expiresAt: number | null;
    /**
     * The unique identifier of the domain.
     */
    id: string;
    /**
     * Timestamp in milliseconds at which the domain was ordered.
     */
    orderedAt?: number | undefined;
    /**
     * Indicates whether the domain is set to automatically renew.
     */
    renew?: boolean | undefined;
    /**
     * The type of service the domain is handled by. `external` if the DNS is externally handled, `zeit.world` if handled with Vercel, or `na` if the service is not available.
     */
    serviceType: CreateOrTransferDomainServiceType;
    /**
     * Timestamp in milliseconds at which the domain was successfully transferred into Vercel. `null` if the transfer is still processing or was never transferred in.
     */
    transferredAt?: number | null | undefined;
    /**
     * If transferred into Vercel, timestamp in milliseconds when the domain transfer was initiated.
     */
    transferStartedAt?: number | undefined;
    userId: string;
    teamId: string | null;
};
export type CreateOrTransferDomainResponseBody = {
    domain: CreateOrTransferDomainDomain;
};
/** @internal */
export declare const CreateOrTransferDomainRequestBody3$inboundSchema: z.ZodType<CreateOrTransferDomainRequestBody3, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateOrTransferDomainRequestBody3$Outbound = {
    name: string;
    method: string;
    authCode?: string | undefined;
    expectedPrice?: number | undefined;
};
/** @internal */
export declare const CreateOrTransferDomainRequestBody3$outboundSchema: z.ZodType<CreateOrTransferDomainRequestBody3$Outbound, z.ZodTypeDef, CreateOrTransferDomainRequestBody3>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateOrTransferDomainRequestBody3$ {
    /** @deprecated use `CreateOrTransferDomainRequestBody3$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateOrTransferDomainRequestBody3, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateOrTransferDomainRequestBody3$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateOrTransferDomainRequestBody3$Outbound, z.ZodTypeDef, CreateOrTransferDomainRequestBody3>;
    /** @deprecated use `CreateOrTransferDomainRequestBody3$Outbound` instead. */
    type Outbound = CreateOrTransferDomainRequestBody3$Outbound;
}
export declare function createOrTransferDomainRequestBody3ToJSON(createOrTransferDomainRequestBody3: CreateOrTransferDomainRequestBody3): string;
export declare function createOrTransferDomainRequestBody3FromJSON(jsonString: string): SafeParseResult<CreateOrTransferDomainRequestBody3, SDKValidationError>;
/** @internal */
export declare const CreateOrTransferDomainRequestBody2$inboundSchema: z.ZodType<CreateOrTransferDomainRequestBody2, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateOrTransferDomainRequestBody2$Outbound = {
    name: string;
    method: string;
    token?: string | undefined;
};
/** @internal */
export declare const CreateOrTransferDomainRequestBody2$outboundSchema: z.ZodType<CreateOrTransferDomainRequestBody2$Outbound, z.ZodTypeDef, CreateOrTransferDomainRequestBody2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateOrTransferDomainRequestBody2$ {
    /** @deprecated use `CreateOrTransferDomainRequestBody2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateOrTransferDomainRequestBody2, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateOrTransferDomainRequestBody2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateOrTransferDomainRequestBody2$Outbound, z.ZodTypeDef, CreateOrTransferDomainRequestBody2>;
    /** @deprecated use `CreateOrTransferDomainRequestBody2$Outbound` instead. */
    type Outbound = CreateOrTransferDomainRequestBody2$Outbound;
}
export declare function createOrTransferDomainRequestBody2ToJSON(createOrTransferDomainRequestBody2: CreateOrTransferDomainRequestBody2): string;
export declare function createOrTransferDomainRequestBody2FromJSON(jsonString: string): SafeParseResult<CreateOrTransferDomainRequestBody2, SDKValidationError>;
/** @internal */
export declare const CreateOrTransferDomainRequestBody1$inboundSchema: z.ZodType<CreateOrTransferDomainRequestBody1, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateOrTransferDomainRequestBody1$Outbound = {
    name: string;
    cdnEnabled?: boolean | undefined;
    zone?: boolean | undefined;
    method?: string | undefined;
};
/** @internal */
export declare const CreateOrTransferDomainRequestBody1$outboundSchema: z.ZodType<CreateOrTransferDomainRequestBody1$Outbound, z.ZodTypeDef, CreateOrTransferDomainRequestBody1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateOrTransferDomainRequestBody1$ {
    /** @deprecated use `CreateOrTransferDomainRequestBody1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateOrTransferDomainRequestBody1, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateOrTransferDomainRequestBody1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateOrTransferDomainRequestBody1$Outbound, z.ZodTypeDef, CreateOrTransferDomainRequestBody1>;
    /** @deprecated use `CreateOrTransferDomainRequestBody1$Outbound` instead. */
    type Outbound = CreateOrTransferDomainRequestBody1$Outbound;
}
export declare function createOrTransferDomainRequestBody1ToJSON(createOrTransferDomainRequestBody1: CreateOrTransferDomainRequestBody1): string;
export declare function createOrTransferDomainRequestBody1FromJSON(jsonString: string): SafeParseResult<CreateOrTransferDomainRequestBody1, SDKValidationError>;
/** @internal */
export declare const CreateOrTransferDomainRequestBody$inboundSchema: z.ZodType<CreateOrTransferDomainRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateOrTransferDomainRequestBody$Outbound = CreateOrTransferDomainRequestBody2$Outbound | CreateOrTransferDomainRequestBody3$Outbound | CreateOrTransferDomainRequestBody1$Outbound;
/** @internal */
export declare const CreateOrTransferDomainRequestBody$outboundSchema: z.ZodType<CreateOrTransferDomainRequestBody$Outbound, z.ZodTypeDef, CreateOrTransferDomainRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateOrTransferDomainRequestBody$ {
    /** @deprecated use `CreateOrTransferDomainRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateOrTransferDomainRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateOrTransferDomainRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateOrTransferDomainRequestBody$Outbound, z.ZodTypeDef, CreateOrTransferDomainRequestBody>;
    /** @deprecated use `CreateOrTransferDomainRequestBody$Outbound` instead. */
    type Outbound = CreateOrTransferDomainRequestBody$Outbound;
}
export declare function createOrTransferDomainRequestBodyToJSON(createOrTransferDomainRequestBody: CreateOrTransferDomainRequestBody): string;
export declare function createOrTransferDomainRequestBodyFromJSON(jsonString: string): SafeParseResult<CreateOrTransferDomainRequestBody, SDKValidationError>;
/** @internal */
export declare const CreateOrTransferDomainRequest$inboundSchema: z.ZodType<CreateOrTransferDomainRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateOrTransferDomainRequest$Outbound = {
    teamId?: string | undefined;
    slug?: string | undefined;
    RequestBody?: CreateOrTransferDomainRequestBody2$Outbound | CreateOrTransferDomainRequestBody3$Outbound | CreateOrTransferDomainRequestBody1$Outbound | undefined;
};
/** @internal */
export declare const CreateOrTransferDomainRequest$outboundSchema: z.ZodType<CreateOrTransferDomainRequest$Outbound, z.ZodTypeDef, CreateOrTransferDomainRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateOrTransferDomainRequest$ {
    /** @deprecated use `CreateOrTransferDomainRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateOrTransferDomainRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateOrTransferDomainRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateOrTransferDomainRequest$Outbound, z.ZodTypeDef, CreateOrTransferDomainRequest>;
    /** @deprecated use `CreateOrTransferDomainRequest$Outbound` instead. */
    type Outbound = CreateOrTransferDomainRequest$Outbound;
}
export declare function createOrTransferDomainRequestToJSON(createOrTransferDomainRequest: CreateOrTransferDomainRequest): string;
export declare function createOrTransferDomainRequestFromJSON(jsonString: string): SafeParseResult<CreateOrTransferDomainRequest, SDKValidationError>;
/** @internal */
export declare const CreateOrTransferDomainCreator$inboundSchema: z.ZodType<CreateOrTransferDomainCreator, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateOrTransferDomainCreator$Outbound = {
    username: string;
    email: string;
    customerId?: string | null | undefined;
    isDomainReseller?: boolean | undefined;
    id: string;
};
/** @internal */
export declare const CreateOrTransferDomainCreator$outboundSchema: z.ZodType<CreateOrTransferDomainCreator$Outbound, z.ZodTypeDef, CreateOrTransferDomainCreator>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateOrTransferDomainCreator$ {
    /** @deprecated use `CreateOrTransferDomainCreator$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateOrTransferDomainCreator, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateOrTransferDomainCreator$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateOrTransferDomainCreator$Outbound, z.ZodTypeDef, CreateOrTransferDomainCreator>;
    /** @deprecated use `CreateOrTransferDomainCreator$Outbound` instead. */
    type Outbound = CreateOrTransferDomainCreator$Outbound;
}
export declare function createOrTransferDomainCreatorToJSON(createOrTransferDomainCreator: CreateOrTransferDomainCreator): string;
export declare function createOrTransferDomainCreatorFromJSON(jsonString: string): SafeParseResult<CreateOrTransferDomainCreator, SDKValidationError>;
/** @internal */
export declare const CreateOrTransferDomainRegistrar$inboundSchema: z.ZodNativeEnum<typeof CreateOrTransferDomainRegistrar>;
/** @internal */
export declare const CreateOrTransferDomainRegistrar$outboundSchema: z.ZodNativeEnum<typeof CreateOrTransferDomainRegistrar>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateOrTransferDomainRegistrar$ {
    /** @deprecated use `CreateOrTransferDomainRegistrar$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly New: "new";
    }>;
    /** @deprecated use `CreateOrTransferDomainRegistrar$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly New: "new";
    }>;
}
/** @internal */
export declare const CreateOrTransferDomainServiceType$inboundSchema: z.ZodNativeEnum<typeof CreateOrTransferDomainServiceType>;
/** @internal */
export declare const CreateOrTransferDomainServiceType$outboundSchema: z.ZodNativeEnum<typeof CreateOrTransferDomainServiceType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateOrTransferDomainServiceType$ {
    /** @deprecated use `CreateOrTransferDomainServiceType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly ZeitWorld: "zeit.world";
        readonly External: "external";
        readonly Na: "na";
    }>;
    /** @deprecated use `CreateOrTransferDomainServiceType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly ZeitWorld: "zeit.world";
        readonly External: "external";
        readonly Na: "na";
    }>;
}
/** @internal */
export declare const CreateOrTransferDomainDomain$inboundSchema: z.ZodType<CreateOrTransferDomainDomain, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateOrTransferDomainDomain$Outbound = {
    verified: boolean;
    nameservers: Array<string>;
    intendedNameservers: Array<string>;
    customNameservers?: Array<string> | undefined;
    creator: CreateOrTransferDomainCreator$Outbound;
    registrar?: string | undefined;
    name: string;
    boughtAt: number | null;
    createdAt: number;
    expiresAt: number | null;
    id: string;
    orderedAt?: number | undefined;
    renew?: boolean | undefined;
    serviceType: string;
    transferredAt?: number | null | undefined;
    transferStartedAt?: number | undefined;
    userId: string;
    teamId: string | null;
};
/** @internal */
export declare const CreateOrTransferDomainDomain$outboundSchema: z.ZodType<CreateOrTransferDomainDomain$Outbound, z.ZodTypeDef, CreateOrTransferDomainDomain>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateOrTransferDomainDomain$ {
    /** @deprecated use `CreateOrTransferDomainDomain$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateOrTransferDomainDomain, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateOrTransferDomainDomain$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateOrTransferDomainDomain$Outbound, z.ZodTypeDef, CreateOrTransferDomainDomain>;
    /** @deprecated use `CreateOrTransferDomainDomain$Outbound` instead. */
    type Outbound = CreateOrTransferDomainDomain$Outbound;
}
export declare function createOrTransferDomainDomainToJSON(createOrTransferDomainDomain: CreateOrTransferDomainDomain): string;
export declare function createOrTransferDomainDomainFromJSON(jsonString: string): SafeParseResult<CreateOrTransferDomainDomain, SDKValidationError>;
/** @internal */
export declare const CreateOrTransferDomainResponseBody$inboundSchema: z.ZodType<CreateOrTransferDomainResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateOrTransferDomainResponseBody$Outbound = {
    domain: CreateOrTransferDomainDomain$Outbound;
};
/** @internal */
export declare const CreateOrTransferDomainResponseBody$outboundSchema: z.ZodType<CreateOrTransferDomainResponseBody$Outbound, z.ZodTypeDef, CreateOrTransferDomainResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateOrTransferDomainResponseBody$ {
    /** @deprecated use `CreateOrTransferDomainResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateOrTransferDomainResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateOrTransferDomainResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateOrTransferDomainResponseBody$Outbound, z.ZodTypeDef, CreateOrTransferDomainResponseBody>;
    /** @deprecated use `CreateOrTransferDomainResponseBody$Outbound` instead. */
    type Outbound = CreateOrTransferDomainResponseBody$Outbound;
}
export declare function createOrTransferDomainResponseBodyToJSON(createOrTransferDomainResponseBody: CreateOrTransferDomainResponseBody): string;
export declare function createOrTransferDomainResponseBodyFromJSON(jsonString: string): SafeParseResult<CreateOrTransferDomainResponseBody, SDKValidationError>;
//# sourceMappingURL=createortransferdomainop.d.ts.map