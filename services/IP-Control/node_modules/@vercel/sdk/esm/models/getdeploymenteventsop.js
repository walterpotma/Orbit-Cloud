/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
/**
 * Order of the returned events based on the timestamp.
 */
export const Direction = {
    Backward: "backward",
    Forward: "forward",
};
export const GetDeploymentEventsResponseBodyDeploymentsResponseType = {
    Delimiter: "delimiter",
    Command: "command",
    Stdout: "stdout",
    Stderr: "stderr",
    Exit: "exit",
    DeploymentState: "deployment-state",
    Middleware: "middleware",
    MiddlewareInvocation: "middleware-invocation",
    EdgeFunctionInvocation: "edge-function-invocation",
    Metric: "metric",
    Report: "report",
    Fatal: "fatal",
};
export const ResponseBodyLevel = {
    Error: "error",
    Warning: "warning",
};
export const GetDeploymentEventsResponseBodyDeploymentsType = {
    Delimiter: "delimiter",
    Command: "command",
    Stdout: "stdout",
    Stderr: "stderr",
    Exit: "exit",
    DeploymentState: "deployment-state",
    Middleware: "middleware",
    MiddlewareInvocation: "middleware-invocation",
    EdgeFunctionInvocation: "edge-function-invocation",
    Metric: "metric",
    Report: "report",
    Fatal: "fatal",
};
export const ResponseBodyVercelCache = {
    Miss: "MISS",
    Hit: "HIT",
    Stale: "STALE",
    Bypass: "BYPASS",
    Prerender: "PRERENDER",
    Revalidated: "REVALIDATED",
};
export const ResponseBodyWafAction = {
    Log: "log",
    Challenge: "challenge",
    Deny: "deny",
    Bypass: "bypass",
    RateLimit: "rate_limit",
};
export const GetDeploymentEventsResponseBodyType = {
    Delimiter: "delimiter",
    Command: "command",
    Stdout: "stdout",
    Stderr: "stderr",
    Exit: "exit",
    DeploymentState: "deployment-state",
    Middleware: "middleware",
    MiddlewareInvocation: "middleware-invocation",
    EdgeFunctionInvocation: "edge-function-invocation",
    Metric: "metric",
    Report: "report",
    Fatal: "fatal",
};
export const GetDeploymentEventsResponseBodyLevel = {
    Error: "error",
    Warning: "warning",
};
export const ResponseBodyType = {
    Delimiter: "delimiter",
    Command: "command",
    Stdout: "stdout",
    Stderr: "stderr",
    Exit: "exit",
    DeploymentState: "deployment-state",
    Middleware: "middleware",
    MiddlewareInvocation: "middleware-invocation",
    EdgeFunctionInvocation: "edge-function-invocation",
    Metric: "metric",
    Report: "report",
    Fatal: "fatal",
};
export const VercelCache = {
    Miss: "MISS",
    Hit: "HIT",
    Stale: "STALE",
    Bypass: "BYPASS",
    Prerender: "PRERENDER",
    Revalidated: "REVALIDATED",
};
export const WafAction = {
    Log: "log",
    Challenge: "challenge",
    Deny: "deny",
    Bypass: "bypass",
    RateLimit: "rate_limit",
};
/** @internal */
export const Direction$inboundSchema = z
    .nativeEnum(Direction);
/** @internal */
export const Direction$outboundSchema = Direction$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Direction$;
(function (Direction$) {
    /** @deprecated use `Direction$inboundSchema` instead. */
    Direction$.inboundSchema = Direction$inboundSchema;
    /** @deprecated use `Direction$outboundSchema` instead. */
    Direction$.outboundSchema = Direction$outboundSchema;
})(Direction$ || (Direction$ = {}));
/** @internal */
export const StatusCode$inboundSchema = z.union([z.number(), z.string()]);
/** @internal */
export const StatusCode$outboundSchema = z.union([z.number(), z.string()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var StatusCode$;
(function (StatusCode$) {
    /** @deprecated use `StatusCode$inboundSchema` instead. */
    StatusCode$.inboundSchema = StatusCode$inboundSchema;
    /** @deprecated use `StatusCode$outboundSchema` instead. */
    StatusCode$.outboundSchema = StatusCode$outboundSchema;
})(StatusCode$ || (StatusCode$ = {}));
export function statusCodeToJSON(statusCode) {
    return JSON.stringify(StatusCode$outboundSchema.parse(statusCode));
}
export function statusCodeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => StatusCode$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'StatusCode' from JSON`);
}
/** @internal */
export const GetDeploymentEventsRequest$inboundSchema = z.object({
    idOrUrl: z.string(),
    direction: Direction$inboundSchema.default("forward"),
    follow: z.number().optional(),
    limit: z.number().optional(),
    name: z.string().optional(),
    since: z.number().optional(),
    until: z.number().optional(),
    statusCode: z.union([z.number(), z.string()]).optional(),
    delimiter: z.number().optional(),
    builds: z.number().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/** @internal */
export const GetDeploymentEventsRequest$outboundSchema = z.object({
    idOrUrl: z.string(),
    direction: Direction$outboundSchema.default("forward"),
    follow: z.number().optional(),
    limit: z.number().optional(),
    name: z.string().optional(),
    since: z.number().optional(),
    until: z.number().optional(),
    statusCode: z.union([z.number(), z.string()]).optional(),
    delimiter: z.number().optional(),
    builds: z.number().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentEventsRequest$;
(function (GetDeploymentEventsRequest$) {
    /** @deprecated use `GetDeploymentEventsRequest$inboundSchema` instead. */
    GetDeploymentEventsRequest$.inboundSchema = GetDeploymentEventsRequest$inboundSchema;
    /** @deprecated use `GetDeploymentEventsRequest$outboundSchema` instead. */
    GetDeploymentEventsRequest$.outboundSchema = GetDeploymentEventsRequest$outboundSchema;
})(GetDeploymentEventsRequest$ || (GetDeploymentEventsRequest$ = {}));
export function getDeploymentEventsRequestToJSON(getDeploymentEventsRequest) {
    return JSON.stringify(GetDeploymentEventsRequest$outboundSchema.parse(getDeploymentEventsRequest));
}
export function getDeploymentEventsRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentEventsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentEventsRequest' from JSON`);
}
/** @internal */
export const ResponseBodyInfo$inboundSchema = z.object({
    type: z.string(),
    name: z.string(),
    entrypoint: z.string().optional(),
    path: z.string().optional(),
    step: z.string().optional(),
    readyState: z.string().optional(),
});
/** @internal */
export const ResponseBodyInfo$outboundSchema = z.object({
    type: z.string(),
    name: z.string(),
    entrypoint: z.string().optional(),
    path: z.string().optional(),
    step: z.string().optional(),
    readyState: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyInfo$;
(function (ResponseBodyInfo$) {
    /** @deprecated use `ResponseBodyInfo$inboundSchema` instead. */
    ResponseBodyInfo$.inboundSchema = ResponseBodyInfo$inboundSchema;
    /** @deprecated use `ResponseBodyInfo$outboundSchema` instead. */
    ResponseBodyInfo$.outboundSchema = ResponseBodyInfo$outboundSchema;
})(ResponseBodyInfo$ || (ResponseBodyInfo$ = {}));
export function responseBodyInfoToJSON(responseBodyInfo) {
    return JSON.stringify(ResponseBodyInfo$outboundSchema.parse(responseBodyInfo));
}
export function responseBodyInfoFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyInfo$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyInfo' from JSON`);
}
/** @internal */
export const GetDeploymentEventsResponseBodyDeploymentsResponseType$inboundSchema = z.nativeEnum(GetDeploymentEventsResponseBodyDeploymentsResponseType);
/** @internal */
export const GetDeploymentEventsResponseBodyDeploymentsResponseType$outboundSchema = GetDeploymentEventsResponseBodyDeploymentsResponseType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentEventsResponseBodyDeploymentsResponseType$;
(function (GetDeploymentEventsResponseBodyDeploymentsResponseType$) {
    /** @deprecated use `GetDeploymentEventsResponseBodyDeploymentsResponseType$inboundSchema` instead. */
    GetDeploymentEventsResponseBodyDeploymentsResponseType$.inboundSchema = GetDeploymentEventsResponseBodyDeploymentsResponseType$inboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBodyDeploymentsResponseType$outboundSchema` instead. */
    GetDeploymentEventsResponseBodyDeploymentsResponseType$.outboundSchema = GetDeploymentEventsResponseBodyDeploymentsResponseType$outboundSchema;
})(GetDeploymentEventsResponseBodyDeploymentsResponseType$ || (GetDeploymentEventsResponseBodyDeploymentsResponseType$ = {}));
/** @internal */
export const ResponseBodyLevel$inboundSchema = z.nativeEnum(ResponseBodyLevel);
/** @internal */
export const ResponseBodyLevel$outboundSchema = ResponseBodyLevel$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyLevel$;
(function (ResponseBodyLevel$) {
    /** @deprecated use `ResponseBodyLevel$inboundSchema` instead. */
    ResponseBodyLevel$.inboundSchema = ResponseBodyLevel$inboundSchema;
    /** @deprecated use `ResponseBodyLevel$outboundSchema` instead. */
    ResponseBodyLevel$.outboundSchema = ResponseBodyLevel$outboundSchema;
})(ResponseBodyLevel$ || (ResponseBodyLevel$ = {}));
/** @internal */
export const GetDeploymentEventsResponseBodyDeployments2$inboundSchema = z.object({
    created: z.number(),
    date: z.number(),
    deploymentId: z.string(),
    id: z.string(),
    info: z.lazy(() => ResponseBodyInfo$inboundSchema),
    serial: z.string(),
    text: z.string().optional(),
    type: GetDeploymentEventsResponseBodyDeploymentsResponseType$inboundSchema,
    level: ResponseBodyLevel$inboundSchema.optional(),
});
/** @internal */
export const GetDeploymentEventsResponseBodyDeployments2$outboundSchema = z.object({
    created: z.number(),
    date: z.number(),
    deploymentId: z.string(),
    id: z.string(),
    info: z.lazy(() => ResponseBodyInfo$outboundSchema),
    serial: z.string(),
    text: z.string().optional(),
    type: GetDeploymentEventsResponseBodyDeploymentsResponseType$outboundSchema,
    level: ResponseBodyLevel$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentEventsResponseBodyDeployments2$;
(function (GetDeploymentEventsResponseBodyDeployments2$) {
    /** @deprecated use `GetDeploymentEventsResponseBodyDeployments2$inboundSchema` instead. */
    GetDeploymentEventsResponseBodyDeployments2$.inboundSchema = GetDeploymentEventsResponseBodyDeployments2$inboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBodyDeployments2$outboundSchema` instead. */
    GetDeploymentEventsResponseBodyDeployments2$.outboundSchema = GetDeploymentEventsResponseBodyDeployments2$outboundSchema;
})(GetDeploymentEventsResponseBodyDeployments2$ || (GetDeploymentEventsResponseBodyDeployments2$ = {}));
export function getDeploymentEventsResponseBodyDeployments2ToJSON(getDeploymentEventsResponseBodyDeployments2) {
    return JSON.stringify(GetDeploymentEventsResponseBodyDeployments2$outboundSchema.parse(getDeploymentEventsResponseBodyDeployments2));
}
export function getDeploymentEventsResponseBodyDeployments2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentEventsResponseBodyDeployments2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentEventsResponseBodyDeployments2' from JSON`);
}
/** @internal */
export const GetDeploymentEventsResponseBodyDeploymentsType$inboundSchema = z
    .nativeEnum(GetDeploymentEventsResponseBodyDeploymentsType);
/** @internal */
export const GetDeploymentEventsResponseBodyDeploymentsType$outboundSchema = GetDeploymentEventsResponseBodyDeploymentsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentEventsResponseBodyDeploymentsType$;
(function (GetDeploymentEventsResponseBodyDeploymentsType$) {
    /** @deprecated use `GetDeploymentEventsResponseBodyDeploymentsType$inboundSchema` instead. */
    GetDeploymentEventsResponseBodyDeploymentsType$.inboundSchema = GetDeploymentEventsResponseBodyDeploymentsType$inboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBodyDeploymentsType$outboundSchema` instead. */
    GetDeploymentEventsResponseBodyDeploymentsType$.outboundSchema = GetDeploymentEventsResponseBodyDeploymentsType$outboundSchema;
})(GetDeploymentEventsResponseBodyDeploymentsType$ || (GetDeploymentEventsResponseBodyDeploymentsType$ = {}));
/** @internal */
export const GetDeploymentEventsResponseBodyInfo$inboundSchema = z.object({
    type: z.string(),
    name: z.string(),
    entrypoint: z.string().optional(),
    path: z.string().optional(),
    step: z.string().optional(),
    readyState: z.string().optional(),
});
/** @internal */
export const GetDeploymentEventsResponseBodyInfo$outboundSchema = z.object({
    type: z.string(),
    name: z.string(),
    entrypoint: z.string().optional(),
    path: z.string().optional(),
    step: z.string().optional(),
    readyState: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentEventsResponseBodyInfo$;
(function (GetDeploymentEventsResponseBodyInfo$) {
    /** @deprecated use `GetDeploymentEventsResponseBodyInfo$inboundSchema` instead. */
    GetDeploymentEventsResponseBodyInfo$.inboundSchema = GetDeploymentEventsResponseBodyInfo$inboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBodyInfo$outboundSchema` instead. */
    GetDeploymentEventsResponseBodyInfo$.outboundSchema = GetDeploymentEventsResponseBodyInfo$outboundSchema;
})(GetDeploymentEventsResponseBodyInfo$ || (GetDeploymentEventsResponseBodyInfo$ = {}));
export function getDeploymentEventsResponseBodyInfoToJSON(getDeploymentEventsResponseBodyInfo) {
    return JSON.stringify(GetDeploymentEventsResponseBodyInfo$outboundSchema.parse(getDeploymentEventsResponseBodyInfo));
}
export function getDeploymentEventsResponseBodyInfoFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentEventsResponseBodyInfo$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentEventsResponseBodyInfo' from JSON`);
}
/** @internal */
export const ResponseBodyVercelCache$inboundSchema = z.nativeEnum(ResponseBodyVercelCache);
/** @internal */
export const ResponseBodyVercelCache$outboundSchema = ResponseBodyVercelCache$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyVercelCache$;
(function (ResponseBodyVercelCache$) {
    /** @deprecated use `ResponseBodyVercelCache$inboundSchema` instead. */
    ResponseBodyVercelCache$.inboundSchema = ResponseBodyVercelCache$inboundSchema;
    /** @deprecated use `ResponseBodyVercelCache$outboundSchema` instead. */
    ResponseBodyVercelCache$.outboundSchema = ResponseBodyVercelCache$outboundSchema;
})(ResponseBodyVercelCache$ || (ResponseBodyVercelCache$ = {}));
/** @internal */
export const ResponseBodyWafAction$inboundSchema = z.nativeEnum(ResponseBodyWafAction);
/** @internal */
export const ResponseBodyWafAction$outboundSchema = ResponseBodyWafAction$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyWafAction$;
(function (ResponseBodyWafAction$) {
    /** @deprecated use `ResponseBodyWafAction$inboundSchema` instead. */
    ResponseBodyWafAction$.inboundSchema = ResponseBodyWafAction$inboundSchema;
    /** @deprecated use `ResponseBodyWafAction$outboundSchema` instead. */
    ResponseBodyWafAction$.outboundSchema = ResponseBodyWafAction$outboundSchema;
})(ResponseBodyWafAction$ || (ResponseBodyWafAction$ = {}));
/** @internal */
export const ResponseBodyProxy$inboundSchema = z.object({
    timestamp: z.number(),
    method: z.string(),
    host: z.string(),
    path: z.string(),
    statusCode: z.number().optional(),
    userAgent: z.array(z.string()),
    referer: z.string(),
    clientIp: z.string().optional(),
    region: z.string(),
    scheme: z.string().optional(),
    responseByteSize: z.number().optional(),
    cacheId: z.string().optional(),
    pathType: z.string().optional(),
    pathTypeVariant: z.string().optional(),
    vercelId: z.string().optional(),
    vercelCache: ResponseBodyVercelCache$inboundSchema.optional(),
    lambdaRegion: z.string().optional(),
    wafAction: ResponseBodyWafAction$inboundSchema.optional(),
    wafRuleId: z.string().optional(),
});
/** @internal */
export const ResponseBodyProxy$outboundSchema = z.object({
    timestamp: z.number(),
    method: z.string(),
    host: z.string(),
    path: z.string(),
    statusCode: z.number().optional(),
    userAgent: z.array(z.string()),
    referer: z.string(),
    clientIp: z.string().optional(),
    region: z.string(),
    scheme: z.string().optional(),
    responseByteSize: z.number().optional(),
    cacheId: z.string().optional(),
    pathType: z.string().optional(),
    pathTypeVariant: z.string().optional(),
    vercelId: z.string().optional(),
    vercelCache: ResponseBodyVercelCache$outboundSchema.optional(),
    lambdaRegion: z.string().optional(),
    wafAction: ResponseBodyWafAction$outboundSchema.optional(),
    wafRuleId: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyProxy$;
(function (ResponseBodyProxy$) {
    /** @deprecated use `ResponseBodyProxy$inboundSchema` instead. */
    ResponseBodyProxy$.inboundSchema = ResponseBodyProxy$inboundSchema;
    /** @deprecated use `ResponseBodyProxy$outboundSchema` instead. */
    ResponseBodyProxy$.outboundSchema = ResponseBodyProxy$outboundSchema;
})(ResponseBodyProxy$ || (ResponseBodyProxy$ = {}));
export function responseBodyProxyToJSON(responseBodyProxy) {
    return JSON.stringify(ResponseBodyProxy$outboundSchema.parse(responseBodyProxy));
}
export function responseBodyProxyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyProxy$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyProxy' from JSON`);
}
/** @internal */
export const ResponseBodyPayload$inboundSchema = z.object({
    deploymentId: z.string(),
    info: z.lazy(() => GetDeploymentEventsResponseBodyInfo$inboundSchema)
        .optional(),
    text: z.string().optional(),
    id: z.string(),
    date: z.number(),
    serial: z.string(),
    created: z.number().optional(),
    statusCode: z.number().optional(),
    requestId: z.string().optional(),
    proxy: z.lazy(() => ResponseBodyProxy$inboundSchema).optional(),
});
/** @internal */
export const ResponseBodyPayload$outboundSchema = z.object({
    deploymentId: z.string(),
    info: z.lazy(() => GetDeploymentEventsResponseBodyInfo$outboundSchema)
        .optional(),
    text: z.string().optional(),
    id: z.string(),
    date: z.number(),
    serial: z.string(),
    created: z.number().optional(),
    statusCode: z.number().optional(),
    requestId: z.string().optional(),
    proxy: z.lazy(() => ResponseBodyProxy$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyPayload$;
(function (ResponseBodyPayload$) {
    /** @deprecated use `ResponseBodyPayload$inboundSchema` instead. */
    ResponseBodyPayload$.inboundSchema = ResponseBodyPayload$inboundSchema;
    /** @deprecated use `ResponseBodyPayload$outboundSchema` instead. */
    ResponseBodyPayload$.outboundSchema = ResponseBodyPayload$outboundSchema;
})(ResponseBodyPayload$ || (ResponseBodyPayload$ = {}));
export function responseBodyPayloadToJSON(responseBodyPayload) {
    return JSON.stringify(ResponseBodyPayload$outboundSchema.parse(responseBodyPayload));
}
export function responseBodyPayloadFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyPayload$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyPayload' from JSON`);
}
/** @internal */
export const GetDeploymentEventsResponseBodyDeployments1$inboundSchema = z.object({
    type: GetDeploymentEventsResponseBodyDeploymentsType$inboundSchema,
    created: z.number(),
    payload: z.lazy(() => ResponseBodyPayload$inboundSchema),
});
/** @internal */
export const GetDeploymentEventsResponseBodyDeployments1$outboundSchema = z.object({
    type: GetDeploymentEventsResponseBodyDeploymentsType$outboundSchema,
    created: z.number(),
    payload: z.lazy(() => ResponseBodyPayload$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentEventsResponseBodyDeployments1$;
(function (GetDeploymentEventsResponseBodyDeployments1$) {
    /** @deprecated use `GetDeploymentEventsResponseBodyDeployments1$inboundSchema` instead. */
    GetDeploymentEventsResponseBodyDeployments1$.inboundSchema = GetDeploymentEventsResponseBodyDeployments1$inboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBodyDeployments1$outboundSchema` instead. */
    GetDeploymentEventsResponseBodyDeployments1$.outboundSchema = GetDeploymentEventsResponseBodyDeployments1$outboundSchema;
})(GetDeploymentEventsResponseBodyDeployments1$ || (GetDeploymentEventsResponseBodyDeployments1$ = {}));
export function getDeploymentEventsResponseBodyDeployments1ToJSON(getDeploymentEventsResponseBodyDeployments1) {
    return JSON.stringify(GetDeploymentEventsResponseBodyDeployments1$outboundSchema.parse(getDeploymentEventsResponseBodyDeployments1));
}
export function getDeploymentEventsResponseBodyDeployments1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentEventsResponseBodyDeployments1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentEventsResponseBodyDeployments1' from JSON`);
}
/** @internal */
export const GetDeploymentEventsResponseBody$inboundSchema = z.union([
    z.lazy(() => GetDeploymentEventsResponseBodyDeployments2$inboundSchema),
    z.lazy(() => GetDeploymentEventsResponseBodyDeployments1$inboundSchema),
]);
/** @internal */
export const GetDeploymentEventsResponseBody$outboundSchema = z.union([
    z.lazy(() => GetDeploymentEventsResponseBodyDeployments2$outboundSchema),
    z.lazy(() => GetDeploymentEventsResponseBodyDeployments1$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentEventsResponseBody$;
(function (GetDeploymentEventsResponseBody$) {
    /** @deprecated use `GetDeploymentEventsResponseBody$inboundSchema` instead. */
    GetDeploymentEventsResponseBody$.inboundSchema = GetDeploymentEventsResponseBody$inboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBody$outboundSchema` instead. */
    GetDeploymentEventsResponseBody$.outboundSchema = GetDeploymentEventsResponseBody$outboundSchema;
})(GetDeploymentEventsResponseBody$ || (GetDeploymentEventsResponseBody$ = {}));
export function getDeploymentEventsResponseBodyToJSON(getDeploymentEventsResponseBody) {
    return JSON.stringify(GetDeploymentEventsResponseBody$outboundSchema.parse(getDeploymentEventsResponseBody));
}
export function getDeploymentEventsResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentEventsResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentEventsResponseBody' from JSON`);
}
/** @internal */
export const Info$inboundSchema = z
    .object({
    type: z.string(),
    name: z.string(),
    entrypoint: z.string().optional(),
    path: z.string().optional(),
    step: z.string().optional(),
    readyState: z.string().optional(),
});
/** @internal */
export const Info$outboundSchema = z.object({
    type: z.string(),
    name: z.string(),
    entrypoint: z.string().optional(),
    path: z.string().optional(),
    step: z.string().optional(),
    readyState: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Info$;
(function (Info$) {
    /** @deprecated use `Info$inboundSchema` instead. */
    Info$.inboundSchema = Info$inboundSchema;
    /** @deprecated use `Info$outboundSchema` instead. */
    Info$.outboundSchema = Info$outboundSchema;
})(Info$ || (Info$ = {}));
export function infoToJSON(info) {
    return JSON.stringify(Info$outboundSchema.parse(info));
}
export function infoFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Info$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Info' from JSON`);
}
/** @internal */
export const GetDeploymentEventsResponseBodyType$inboundSchema = z.nativeEnum(GetDeploymentEventsResponseBodyType);
/** @internal */
export const GetDeploymentEventsResponseBodyType$outboundSchema = GetDeploymentEventsResponseBodyType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentEventsResponseBodyType$;
(function (GetDeploymentEventsResponseBodyType$) {
    /** @deprecated use `GetDeploymentEventsResponseBodyType$inboundSchema` instead. */
    GetDeploymentEventsResponseBodyType$.inboundSchema = GetDeploymentEventsResponseBodyType$inboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBodyType$outboundSchema` instead. */
    GetDeploymentEventsResponseBodyType$.outboundSchema = GetDeploymentEventsResponseBodyType$outboundSchema;
})(GetDeploymentEventsResponseBodyType$ || (GetDeploymentEventsResponseBodyType$ = {}));
/** @internal */
export const GetDeploymentEventsResponseBodyLevel$inboundSchema = z.nativeEnum(GetDeploymentEventsResponseBodyLevel);
/** @internal */
export const GetDeploymentEventsResponseBodyLevel$outboundSchema = GetDeploymentEventsResponseBodyLevel$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentEventsResponseBodyLevel$;
(function (GetDeploymentEventsResponseBodyLevel$) {
    /** @deprecated use `GetDeploymentEventsResponseBodyLevel$inboundSchema` instead. */
    GetDeploymentEventsResponseBodyLevel$.inboundSchema = GetDeploymentEventsResponseBodyLevel$inboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBodyLevel$outboundSchema` instead. */
    GetDeploymentEventsResponseBodyLevel$.outboundSchema = GetDeploymentEventsResponseBodyLevel$outboundSchema;
})(GetDeploymentEventsResponseBodyLevel$ || (GetDeploymentEventsResponseBodyLevel$ = {}));
/** @internal */
export const GetDeploymentEventsResponseBody2$inboundSchema = z.object({
    created: z.number(),
    date: z.number(),
    deploymentId: z.string(),
    id: z.string(),
    info: z.lazy(() => Info$inboundSchema),
    serial: z.string(),
    text: z.string().optional(),
    type: GetDeploymentEventsResponseBodyType$inboundSchema,
    level: GetDeploymentEventsResponseBodyLevel$inboundSchema.optional(),
});
/** @internal */
export const GetDeploymentEventsResponseBody2$outboundSchema = z.object({
    created: z.number(),
    date: z.number(),
    deploymentId: z.string(),
    id: z.string(),
    info: z.lazy(() => Info$outboundSchema),
    serial: z.string(),
    text: z.string().optional(),
    type: GetDeploymentEventsResponseBodyType$outboundSchema,
    level: GetDeploymentEventsResponseBodyLevel$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentEventsResponseBody2$;
(function (GetDeploymentEventsResponseBody2$) {
    /** @deprecated use `GetDeploymentEventsResponseBody2$inboundSchema` instead. */
    GetDeploymentEventsResponseBody2$.inboundSchema = GetDeploymentEventsResponseBody2$inboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBody2$outboundSchema` instead. */
    GetDeploymentEventsResponseBody2$.outboundSchema = GetDeploymentEventsResponseBody2$outboundSchema;
})(GetDeploymentEventsResponseBody2$ || (GetDeploymentEventsResponseBody2$ = {}));
export function getDeploymentEventsResponseBody2ToJSON(getDeploymentEventsResponseBody2) {
    return JSON.stringify(GetDeploymentEventsResponseBody2$outboundSchema.parse(getDeploymentEventsResponseBody2));
}
export function getDeploymentEventsResponseBody2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentEventsResponseBody2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentEventsResponseBody2' from JSON`);
}
/** @internal */
export const ResponseBodyType$inboundSchema = z.nativeEnum(ResponseBodyType);
/** @internal */
export const ResponseBodyType$outboundSchema = ResponseBodyType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyType$;
(function (ResponseBodyType$) {
    /** @deprecated use `ResponseBodyType$inboundSchema` instead. */
    ResponseBodyType$.inboundSchema = ResponseBodyType$inboundSchema;
    /** @deprecated use `ResponseBodyType$outboundSchema` instead. */
    ResponseBodyType$.outboundSchema = ResponseBodyType$outboundSchema;
})(ResponseBodyType$ || (ResponseBodyType$ = {}));
/** @internal */
export const GetDeploymentEventsResponseBodyDeploymentsInfo$inboundSchema = z.object({
    type: z.string(),
    name: z.string(),
    entrypoint: z.string().optional(),
    path: z.string().optional(),
    step: z.string().optional(),
    readyState: z.string().optional(),
});
/** @internal */
export const GetDeploymentEventsResponseBodyDeploymentsInfo$outboundSchema = z.object({
    type: z.string(),
    name: z.string(),
    entrypoint: z.string().optional(),
    path: z.string().optional(),
    step: z.string().optional(),
    readyState: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentEventsResponseBodyDeploymentsInfo$;
(function (GetDeploymentEventsResponseBodyDeploymentsInfo$) {
    /** @deprecated use `GetDeploymentEventsResponseBodyDeploymentsInfo$inboundSchema` instead. */
    GetDeploymentEventsResponseBodyDeploymentsInfo$.inboundSchema = GetDeploymentEventsResponseBodyDeploymentsInfo$inboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBodyDeploymentsInfo$outboundSchema` instead. */
    GetDeploymentEventsResponseBodyDeploymentsInfo$.outboundSchema = GetDeploymentEventsResponseBodyDeploymentsInfo$outboundSchema;
})(GetDeploymentEventsResponseBodyDeploymentsInfo$ || (GetDeploymentEventsResponseBodyDeploymentsInfo$ = {}));
export function getDeploymentEventsResponseBodyDeploymentsInfoToJSON(getDeploymentEventsResponseBodyDeploymentsInfo) {
    return JSON.stringify(GetDeploymentEventsResponseBodyDeploymentsInfo$outboundSchema.parse(getDeploymentEventsResponseBodyDeploymentsInfo));
}
export function getDeploymentEventsResponseBodyDeploymentsInfoFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentEventsResponseBodyDeploymentsInfo$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentEventsResponseBodyDeploymentsInfo' from JSON`);
}
/** @internal */
export const VercelCache$inboundSchema = z
    .nativeEnum(VercelCache);
/** @internal */
export const VercelCache$outboundSchema = VercelCache$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var VercelCache$;
(function (VercelCache$) {
    /** @deprecated use `VercelCache$inboundSchema` instead. */
    VercelCache$.inboundSchema = VercelCache$inboundSchema;
    /** @deprecated use `VercelCache$outboundSchema` instead. */
    VercelCache$.outboundSchema = VercelCache$outboundSchema;
})(VercelCache$ || (VercelCache$ = {}));
/** @internal */
export const WafAction$inboundSchema = z
    .nativeEnum(WafAction);
/** @internal */
export const WafAction$outboundSchema = WafAction$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WafAction$;
(function (WafAction$) {
    /** @deprecated use `WafAction$inboundSchema` instead. */
    WafAction$.inboundSchema = WafAction$inboundSchema;
    /** @deprecated use `WafAction$outboundSchema` instead. */
    WafAction$.outboundSchema = WafAction$outboundSchema;
})(WafAction$ || (WafAction$ = {}));
/** @internal */
export const Proxy$inboundSchema = z
    .object({
    timestamp: z.number(),
    method: z.string(),
    host: z.string(),
    path: z.string(),
    statusCode: z.number().optional(),
    userAgent: z.array(z.string()),
    referer: z.string(),
    clientIp: z.string().optional(),
    region: z.string(),
    scheme: z.string().optional(),
    responseByteSize: z.number().optional(),
    cacheId: z.string().optional(),
    pathType: z.string().optional(),
    pathTypeVariant: z.string().optional(),
    vercelId: z.string().optional(),
    vercelCache: VercelCache$inboundSchema.optional(),
    lambdaRegion: z.string().optional(),
    wafAction: WafAction$inboundSchema.optional(),
    wafRuleId: z.string().optional(),
});
/** @internal */
export const Proxy$outboundSchema = z.object({
    timestamp: z.number(),
    method: z.string(),
    host: z.string(),
    path: z.string(),
    statusCode: z.number().optional(),
    userAgent: z.array(z.string()),
    referer: z.string(),
    clientIp: z.string().optional(),
    region: z.string(),
    scheme: z.string().optional(),
    responseByteSize: z.number().optional(),
    cacheId: z.string().optional(),
    pathType: z.string().optional(),
    pathTypeVariant: z.string().optional(),
    vercelId: z.string().optional(),
    vercelCache: VercelCache$outboundSchema.optional(),
    lambdaRegion: z.string().optional(),
    wafAction: WafAction$outboundSchema.optional(),
    wafRuleId: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Proxy$;
(function (Proxy$) {
    /** @deprecated use `Proxy$inboundSchema` instead. */
    Proxy$.inboundSchema = Proxy$inboundSchema;
    /** @deprecated use `Proxy$outboundSchema` instead. */
    Proxy$.outboundSchema = Proxy$outboundSchema;
})(Proxy$ || (Proxy$ = {}));
export function proxyToJSON(proxy) {
    return JSON.stringify(Proxy$outboundSchema.parse(proxy));
}
export function proxyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Proxy$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Proxy' from JSON`);
}
/** @internal */
export const GetDeploymentEventsResponseBodyPayload$inboundSchema = z.object({
    deploymentId: z.string(),
    info: z.lazy(() => GetDeploymentEventsResponseBodyDeploymentsInfo$inboundSchema).optional(),
    text: z.string().optional(),
    id: z.string(),
    date: z.number(),
    serial: z.string(),
    created: z.number().optional(),
    statusCode: z.number().optional(),
    requestId: z.string().optional(),
    proxy: z.lazy(() => Proxy$inboundSchema).optional(),
});
/** @internal */
export const GetDeploymentEventsResponseBodyPayload$outboundSchema = z.object({
    deploymentId: z.string(),
    info: z.lazy(() => GetDeploymentEventsResponseBodyDeploymentsInfo$outboundSchema).optional(),
    text: z.string().optional(),
    id: z.string(),
    date: z.number(),
    serial: z.string(),
    created: z.number().optional(),
    statusCode: z.number().optional(),
    requestId: z.string().optional(),
    proxy: z.lazy(() => Proxy$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentEventsResponseBodyPayload$;
(function (GetDeploymentEventsResponseBodyPayload$) {
    /** @deprecated use `GetDeploymentEventsResponseBodyPayload$inboundSchema` instead. */
    GetDeploymentEventsResponseBodyPayload$.inboundSchema = GetDeploymentEventsResponseBodyPayload$inboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBodyPayload$outboundSchema` instead. */
    GetDeploymentEventsResponseBodyPayload$.outboundSchema = GetDeploymentEventsResponseBodyPayload$outboundSchema;
})(GetDeploymentEventsResponseBodyPayload$ || (GetDeploymentEventsResponseBodyPayload$ = {}));
export function getDeploymentEventsResponseBodyPayloadToJSON(getDeploymentEventsResponseBodyPayload) {
    return JSON.stringify(GetDeploymentEventsResponseBodyPayload$outboundSchema.parse(getDeploymentEventsResponseBodyPayload));
}
export function getDeploymentEventsResponseBodyPayloadFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentEventsResponseBodyPayload$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentEventsResponseBodyPayload' from JSON`);
}
/** @internal */
export const GetDeploymentEventsResponseBody1$inboundSchema = z.object({
    type: ResponseBodyType$inboundSchema,
    created: z.number(),
    payload: z.lazy(() => GetDeploymentEventsResponseBodyPayload$inboundSchema),
});
/** @internal */
export const GetDeploymentEventsResponseBody1$outboundSchema = z.object({
    type: ResponseBodyType$outboundSchema,
    created: z.number(),
    payload: z.lazy(() => GetDeploymentEventsResponseBodyPayload$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentEventsResponseBody1$;
(function (GetDeploymentEventsResponseBody1$) {
    /** @deprecated use `GetDeploymentEventsResponseBody1$inboundSchema` instead. */
    GetDeploymentEventsResponseBody1$.inboundSchema = GetDeploymentEventsResponseBody1$inboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBody1$outboundSchema` instead. */
    GetDeploymentEventsResponseBody1$.outboundSchema = GetDeploymentEventsResponseBody1$outboundSchema;
})(GetDeploymentEventsResponseBody1$ || (GetDeploymentEventsResponseBody1$ = {}));
export function getDeploymentEventsResponseBody1ToJSON(getDeploymentEventsResponseBody1) {
    return JSON.stringify(GetDeploymentEventsResponseBody1$outboundSchema.parse(getDeploymentEventsResponseBody1));
}
export function getDeploymentEventsResponseBody1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentEventsResponseBody1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentEventsResponseBody1' from JSON`);
}
/** @internal */
export const GetDeploymentEventsDeploymentsResponseBody$inboundSchema = z.union([
    z.lazy(() => GetDeploymentEventsResponseBody2$inboundSchema),
    z.lazy(() => GetDeploymentEventsResponseBody1$inboundSchema),
]);
/** @internal */
export const GetDeploymentEventsDeploymentsResponseBody$outboundSchema = z.union([
    z.lazy(() => GetDeploymentEventsResponseBody2$outboundSchema),
    z.lazy(() => GetDeploymentEventsResponseBody1$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentEventsDeploymentsResponseBody$;
(function (GetDeploymentEventsDeploymentsResponseBody$) {
    /** @deprecated use `GetDeploymentEventsDeploymentsResponseBody$inboundSchema` instead. */
    GetDeploymentEventsDeploymentsResponseBody$.inboundSchema = GetDeploymentEventsDeploymentsResponseBody$inboundSchema;
    /** @deprecated use `GetDeploymentEventsDeploymentsResponseBody$outboundSchema` instead. */
    GetDeploymentEventsDeploymentsResponseBody$.outboundSchema = GetDeploymentEventsDeploymentsResponseBody$outboundSchema;
})(GetDeploymentEventsDeploymentsResponseBody$ || (GetDeploymentEventsDeploymentsResponseBody$ = {}));
export function getDeploymentEventsDeploymentsResponseBodyToJSON(getDeploymentEventsDeploymentsResponseBody) {
    return JSON.stringify(GetDeploymentEventsDeploymentsResponseBody$outboundSchema.parse(getDeploymentEventsDeploymentsResponseBody));
}
export function getDeploymentEventsDeploymentsResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentEventsDeploymentsResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentEventsDeploymentsResponseBody' from JSON`);
}
/** @internal */
export const GetDeploymentEventsResponse$inboundSchema = z.union([
    z.array(z.nullable(z.union([
        z.lazy(() => GetDeploymentEventsResponseBody2$inboundSchema),
        z.lazy(() => GetDeploymentEventsResponseBody1$inboundSchema),
    ]))),
    z.union([
        z.lazy(() => GetDeploymentEventsResponseBodyDeployments2$inboundSchema),
        z.lazy(() => GetDeploymentEventsResponseBodyDeployments1$inboundSchema),
    ]),
]);
/** @internal */
export const GetDeploymentEventsResponse$outboundSchema = z.union([
    z.array(z.nullable(z.union([
        z.lazy(() => GetDeploymentEventsResponseBody2$outboundSchema),
        z.lazy(() => GetDeploymentEventsResponseBody1$outboundSchema),
    ]))),
    z.union([
        z.lazy(() => GetDeploymentEventsResponseBodyDeployments2$outboundSchema),
        z.lazy(() => GetDeploymentEventsResponseBodyDeployments1$outboundSchema),
    ]),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentEventsResponse$;
(function (GetDeploymentEventsResponse$) {
    /** @deprecated use `GetDeploymentEventsResponse$inboundSchema` instead. */
    GetDeploymentEventsResponse$.inboundSchema = GetDeploymentEventsResponse$inboundSchema;
    /** @deprecated use `GetDeploymentEventsResponse$outboundSchema` instead. */
    GetDeploymentEventsResponse$.outboundSchema = GetDeploymentEventsResponse$outboundSchema;
})(GetDeploymentEventsResponse$ || (GetDeploymentEventsResponse$ = {}));
export function getDeploymentEventsResponseToJSON(getDeploymentEventsResponse) {
    return JSON.stringify(GetDeploymentEventsResponse$outboundSchema.parse(getDeploymentEventsResponse));
}
export function getDeploymentEventsResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentEventsResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentEventsResponse' from JSON`);
}
//# sourceMappingURL=getdeploymenteventsop.js.map