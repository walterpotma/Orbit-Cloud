/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/**
 * The project role that will be added to this Access Group.
 */
export const CreateAccessGroupProjectRole = {
    Admin: "ADMIN",
    ProjectViewer: "PROJECT_VIEWER",
    ProjectDeveloper: "PROJECT_DEVELOPER",
};
export const CreateAccessGroupProjectAccessGroupsRole = {
    Admin: "ADMIN",
    ProjectDeveloper: "PROJECT_DEVELOPER",
    ProjectViewer: "PROJECT_VIEWER",
};
/** @internal */
export const CreateAccessGroupProjectRole$inboundSchema = z.nativeEnum(CreateAccessGroupProjectRole);
/** @internal */
export const CreateAccessGroupProjectRole$outboundSchema = CreateAccessGroupProjectRole$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateAccessGroupProjectRole$;
(function (CreateAccessGroupProjectRole$) {
    /** @deprecated use `CreateAccessGroupProjectRole$inboundSchema` instead. */
    CreateAccessGroupProjectRole$.inboundSchema = CreateAccessGroupProjectRole$inboundSchema;
    /** @deprecated use `CreateAccessGroupProjectRole$outboundSchema` instead. */
    CreateAccessGroupProjectRole$.outboundSchema = CreateAccessGroupProjectRole$outboundSchema;
})(CreateAccessGroupProjectRole$ || (CreateAccessGroupProjectRole$ = {}));
/** @internal */
export const CreateAccessGroupProjectRequestBody$inboundSchema = z.object({
    projectId: z.string(),
    role: CreateAccessGroupProjectRole$inboundSchema,
});
/** @internal */
export const CreateAccessGroupProjectRequestBody$outboundSchema = z.object({
    projectId: z.string(),
    role: CreateAccessGroupProjectRole$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateAccessGroupProjectRequestBody$;
(function (CreateAccessGroupProjectRequestBody$) {
    /** @deprecated use `CreateAccessGroupProjectRequestBody$inboundSchema` instead. */
    CreateAccessGroupProjectRequestBody$.inboundSchema = CreateAccessGroupProjectRequestBody$inboundSchema;
    /** @deprecated use `CreateAccessGroupProjectRequestBody$outboundSchema` instead. */
    CreateAccessGroupProjectRequestBody$.outboundSchema = CreateAccessGroupProjectRequestBody$outboundSchema;
})(CreateAccessGroupProjectRequestBody$ || (CreateAccessGroupProjectRequestBody$ = {}));
export function createAccessGroupProjectRequestBodyToJSON(createAccessGroupProjectRequestBody) {
    return JSON.stringify(CreateAccessGroupProjectRequestBody$outboundSchema.parse(createAccessGroupProjectRequestBody));
}
export function createAccessGroupProjectRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateAccessGroupProjectRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateAccessGroupProjectRequestBody' from JSON`);
}
/** @internal */
export const CreateAccessGroupProjectRequest$inboundSchema = z.object({
    accessGroupIdOrName: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => CreateAccessGroupProjectRequestBody$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const CreateAccessGroupProjectRequest$outboundSchema = z.object({
    accessGroupIdOrName: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => CreateAccessGroupProjectRequestBody$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateAccessGroupProjectRequest$;
(function (CreateAccessGroupProjectRequest$) {
    /** @deprecated use `CreateAccessGroupProjectRequest$inboundSchema` instead. */
    CreateAccessGroupProjectRequest$.inboundSchema = CreateAccessGroupProjectRequest$inboundSchema;
    /** @deprecated use `CreateAccessGroupProjectRequest$outboundSchema` instead. */
    CreateAccessGroupProjectRequest$.outboundSchema = CreateAccessGroupProjectRequest$outboundSchema;
})(CreateAccessGroupProjectRequest$ || (CreateAccessGroupProjectRequest$ = {}));
export function createAccessGroupProjectRequestToJSON(createAccessGroupProjectRequest) {
    return JSON.stringify(CreateAccessGroupProjectRequest$outboundSchema.parse(createAccessGroupProjectRequest));
}
export function createAccessGroupProjectRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateAccessGroupProjectRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateAccessGroupProjectRequest' from JSON`);
}
/** @internal */
export const CreateAccessGroupProjectAccessGroupsRole$inboundSchema = z
    .nativeEnum(CreateAccessGroupProjectAccessGroupsRole);
/** @internal */
export const CreateAccessGroupProjectAccessGroupsRole$outboundSchema = CreateAccessGroupProjectAccessGroupsRole$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateAccessGroupProjectAccessGroupsRole$;
(function (CreateAccessGroupProjectAccessGroupsRole$) {
    /** @deprecated use `CreateAccessGroupProjectAccessGroupsRole$inboundSchema` instead. */
    CreateAccessGroupProjectAccessGroupsRole$.inboundSchema = CreateAccessGroupProjectAccessGroupsRole$inboundSchema;
    /** @deprecated use `CreateAccessGroupProjectAccessGroupsRole$outboundSchema` instead. */
    CreateAccessGroupProjectAccessGroupsRole$.outboundSchema = CreateAccessGroupProjectAccessGroupsRole$outboundSchema;
})(CreateAccessGroupProjectAccessGroupsRole$ || (CreateAccessGroupProjectAccessGroupsRole$ = {}));
/** @internal */
export const CreateAccessGroupProjectResponseBody$inboundSchema = z.object({
    teamId: z.string(),
    accessGroupId: z.string(),
    projectId: z.string(),
    role: CreateAccessGroupProjectAccessGroupsRole$inboundSchema,
    createdAt: z.string(),
    updatedAt: z.string(),
});
/** @internal */
export const CreateAccessGroupProjectResponseBody$outboundSchema = z.object({
    teamId: z.string(),
    accessGroupId: z.string(),
    projectId: z.string(),
    role: CreateAccessGroupProjectAccessGroupsRole$outboundSchema,
    createdAt: z.string(),
    updatedAt: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateAccessGroupProjectResponseBody$;
(function (CreateAccessGroupProjectResponseBody$) {
    /** @deprecated use `CreateAccessGroupProjectResponseBody$inboundSchema` instead. */
    CreateAccessGroupProjectResponseBody$.inboundSchema = CreateAccessGroupProjectResponseBody$inboundSchema;
    /** @deprecated use `CreateAccessGroupProjectResponseBody$outboundSchema` instead. */
    CreateAccessGroupProjectResponseBody$.outboundSchema = CreateAccessGroupProjectResponseBody$outboundSchema;
})(CreateAccessGroupProjectResponseBody$ || (CreateAccessGroupProjectResponseBody$ = {}));
export function createAccessGroupProjectResponseBodyToJSON(createAccessGroupProjectResponseBody) {
    return JSON.stringify(CreateAccessGroupProjectResponseBody$outboundSchema.parse(createAccessGroupProjectResponseBody));
}
export function createAccessGroupProjectResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateAccessGroupProjectResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateAccessGroupProjectResponseBody' from JSON`);
}
//# sourceMappingURL=createaccessgroupprojectop.js.map