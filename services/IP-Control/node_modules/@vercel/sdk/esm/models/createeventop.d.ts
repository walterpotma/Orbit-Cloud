import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export declare const CreateEventEventType: {
    readonly ResourceUpdated: "resource.updated";
};
export type CreateEventEventType = ClosedEnum<typeof CreateEventEventType>;
export type Event2 = {
    type: CreateEventEventType;
    /**
     * Partner-provided product slug or id
     */
    productId: string;
    /**
     * Partner provided resource ID
     */
    resourceId: string;
};
export declare const EventType: {
    readonly InstallationUpdated: "installation.updated";
};
export type EventType = ClosedEnum<typeof EventType>;
export type Event1 = {
    type: EventType;
    /**
     * The installation-level billing plan ID
     */
    billingPlanId?: string | undefined;
};
export type CreateEventEvent = Event2 | Event1;
export type CreateEventRequestBody = {
    event: Event2 | Event1;
};
export type CreateEventRequest = {
    integrationConfigurationId: string;
    requestBody: CreateEventRequestBody;
};
/** @internal */
export declare const CreateEventEventType$inboundSchema: z.ZodNativeEnum<typeof CreateEventEventType>;
/** @internal */
export declare const CreateEventEventType$outboundSchema: z.ZodNativeEnum<typeof CreateEventEventType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateEventEventType$ {
    /** @deprecated use `CreateEventEventType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly ResourceUpdated: "resource.updated";
    }>;
    /** @deprecated use `CreateEventEventType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly ResourceUpdated: "resource.updated";
    }>;
}
/** @internal */
export declare const Event2$inboundSchema: z.ZodType<Event2, z.ZodTypeDef, unknown>;
/** @internal */
export type Event2$Outbound = {
    type: string;
    productId: string;
    resourceId: string;
};
/** @internal */
export declare const Event2$outboundSchema: z.ZodType<Event2$Outbound, z.ZodTypeDef, Event2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Event2$ {
    /** @deprecated use `Event2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Event2, z.ZodTypeDef, unknown>;
    /** @deprecated use `Event2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Event2$Outbound, z.ZodTypeDef, Event2>;
    /** @deprecated use `Event2$Outbound` instead. */
    type Outbound = Event2$Outbound;
}
export declare function event2ToJSON(event2: Event2): string;
export declare function event2FromJSON(jsonString: string): SafeParseResult<Event2, SDKValidationError>;
/** @internal */
export declare const EventType$inboundSchema: z.ZodNativeEnum<typeof EventType>;
/** @internal */
export declare const EventType$outboundSchema: z.ZodNativeEnum<typeof EventType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EventType$ {
    /** @deprecated use `EventType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly InstallationUpdated: "installation.updated";
    }>;
    /** @deprecated use `EventType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly InstallationUpdated: "installation.updated";
    }>;
}
/** @internal */
export declare const Event1$inboundSchema: z.ZodType<Event1, z.ZodTypeDef, unknown>;
/** @internal */
export type Event1$Outbound = {
    type: string;
    billingPlanId?: string | undefined;
};
/** @internal */
export declare const Event1$outboundSchema: z.ZodType<Event1$Outbound, z.ZodTypeDef, Event1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Event1$ {
    /** @deprecated use `Event1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Event1, z.ZodTypeDef, unknown>;
    /** @deprecated use `Event1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Event1$Outbound, z.ZodTypeDef, Event1>;
    /** @deprecated use `Event1$Outbound` instead. */
    type Outbound = Event1$Outbound;
}
export declare function event1ToJSON(event1: Event1): string;
export declare function event1FromJSON(jsonString: string): SafeParseResult<Event1, SDKValidationError>;
/** @internal */
export declare const CreateEventEvent$inboundSchema: z.ZodType<CreateEventEvent, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateEventEvent$Outbound = Event2$Outbound | Event1$Outbound;
/** @internal */
export declare const CreateEventEvent$outboundSchema: z.ZodType<CreateEventEvent$Outbound, z.ZodTypeDef, CreateEventEvent>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateEventEvent$ {
    /** @deprecated use `CreateEventEvent$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateEventEvent, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateEventEvent$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateEventEvent$Outbound, z.ZodTypeDef, CreateEventEvent>;
    /** @deprecated use `CreateEventEvent$Outbound` instead. */
    type Outbound = CreateEventEvent$Outbound;
}
export declare function createEventEventToJSON(createEventEvent: CreateEventEvent): string;
export declare function createEventEventFromJSON(jsonString: string): SafeParseResult<CreateEventEvent, SDKValidationError>;
/** @internal */
export declare const CreateEventRequestBody$inboundSchema: z.ZodType<CreateEventRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateEventRequestBody$Outbound = {
    event: Event2$Outbound | Event1$Outbound;
};
/** @internal */
export declare const CreateEventRequestBody$outboundSchema: z.ZodType<CreateEventRequestBody$Outbound, z.ZodTypeDef, CreateEventRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateEventRequestBody$ {
    /** @deprecated use `CreateEventRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateEventRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateEventRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateEventRequestBody$Outbound, z.ZodTypeDef, CreateEventRequestBody>;
    /** @deprecated use `CreateEventRequestBody$Outbound` instead. */
    type Outbound = CreateEventRequestBody$Outbound;
}
export declare function createEventRequestBodyToJSON(createEventRequestBody: CreateEventRequestBody): string;
export declare function createEventRequestBodyFromJSON(jsonString: string): SafeParseResult<CreateEventRequestBody, SDKValidationError>;
/** @internal */
export declare const CreateEventRequest$inboundSchema: z.ZodType<CreateEventRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateEventRequest$Outbound = {
    integrationConfigurationId: string;
    RequestBody: CreateEventRequestBody$Outbound;
};
/** @internal */
export declare const CreateEventRequest$outboundSchema: z.ZodType<CreateEventRequest$Outbound, z.ZodTypeDef, CreateEventRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateEventRequest$ {
    /** @deprecated use `CreateEventRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateEventRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateEventRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateEventRequest$Outbound, z.ZodTypeDef, CreateEventRequest>;
    /** @deprecated use `CreateEventRequest$Outbound` instead. */
    type Outbound = CreateEventRequest$Outbound;
}
export declare function createEventRequestToJSON(createEventRequest: CreateEventRequest): string;
export declare function createEventRequestFromJSON(jsonString: string): SafeParseResult<CreateEventRequest, SDKValidationError>;
//# sourceMappingURL=createeventop.d.ts.map