/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
/**
 * The current status of the resource
 */
export const GetIntegrationResourcesStatus = {
    Ready: "ready",
    Pending: "pending",
    Suspended: "suspended",
    Resumed: "resumed",
    Uninstalled: "uninstalled",
    Error: "error",
};
export const GetIntegrationResourcesLevel = {
    Error: "error",
    Info: "info",
    Warn: "warn",
};
/** @internal */
export const GetIntegrationResourcesRequest$inboundSchema = z.object({
    integrationConfigurationId: z.string(),
});
/** @internal */
export const GetIntegrationResourcesRequest$outboundSchema = z.object({
    integrationConfigurationId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetIntegrationResourcesRequest$;
(function (GetIntegrationResourcesRequest$) {
    /** @deprecated use `GetIntegrationResourcesRequest$inboundSchema` instead. */
    GetIntegrationResourcesRequest$.inboundSchema = GetIntegrationResourcesRequest$inboundSchema;
    /** @deprecated use `GetIntegrationResourcesRequest$outboundSchema` instead. */
    GetIntegrationResourcesRequest$.outboundSchema = GetIntegrationResourcesRequest$outboundSchema;
})(GetIntegrationResourcesRequest$ || (GetIntegrationResourcesRequest$ = {}));
export function getIntegrationResourcesRequestToJSON(getIntegrationResourcesRequest) {
    return JSON.stringify(GetIntegrationResourcesRequest$outboundSchema.parse(getIntegrationResourcesRequest));
}
export function getIntegrationResourcesRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetIntegrationResourcesRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetIntegrationResourcesRequest' from JSON`);
}
/** @internal */
export const GetIntegrationResourcesStatus$inboundSchema = z.nativeEnum(GetIntegrationResourcesStatus);
/** @internal */
export const GetIntegrationResourcesStatus$outboundSchema = GetIntegrationResourcesStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetIntegrationResourcesStatus$;
(function (GetIntegrationResourcesStatus$) {
    /** @deprecated use `GetIntegrationResourcesStatus$inboundSchema` instead. */
    GetIntegrationResourcesStatus$.inboundSchema = GetIntegrationResourcesStatus$inboundSchema;
    /** @deprecated use `GetIntegrationResourcesStatus$outboundSchema` instead. */
    GetIntegrationResourcesStatus$.outboundSchema = GetIntegrationResourcesStatus$outboundSchema;
})(GetIntegrationResourcesStatus$ || (GetIntegrationResourcesStatus$ = {}));
/** @internal */
export const GetIntegrationResourcesExperimentation$inboundSchema = z.object({
    edgeConfigSyncingEnabled: z.boolean().optional(),
    edgeConfigId: z.string().optional(),
    edgeConfigTokenId: z.string().optional(),
});
/** @internal */
export const GetIntegrationResourcesExperimentation$outboundSchema = z.object({
    edgeConfigSyncingEnabled: z.boolean().optional(),
    edgeConfigId: z.string().optional(),
    edgeConfigTokenId: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetIntegrationResourcesExperimentation$;
(function (GetIntegrationResourcesExperimentation$) {
    /** @deprecated use `GetIntegrationResourcesExperimentation$inboundSchema` instead. */
    GetIntegrationResourcesExperimentation$.inboundSchema = GetIntegrationResourcesExperimentation$inboundSchema;
    /** @deprecated use `GetIntegrationResourcesExperimentation$outboundSchema` instead. */
    GetIntegrationResourcesExperimentation$.outboundSchema = GetIntegrationResourcesExperimentation$outboundSchema;
})(GetIntegrationResourcesExperimentation$ || (GetIntegrationResourcesExperimentation$ = {}));
export function getIntegrationResourcesExperimentationToJSON(getIntegrationResourcesExperimentation) {
    return JSON.stringify(GetIntegrationResourcesExperimentation$outboundSchema.parse(getIntegrationResourcesExperimentation));
}
export function getIntegrationResourcesExperimentationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetIntegrationResourcesExperimentation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetIntegrationResourcesExperimentation' from JSON`);
}
/** @internal */
export const GetIntegrationResourcesProtocolSettings$inboundSchema = z.object({
    experimentation: z.lazy(() => GetIntegrationResourcesExperimentation$inboundSchema).optional(),
});
/** @internal */
export const GetIntegrationResourcesProtocolSettings$outboundSchema = z.object({
    experimentation: z.lazy(() => GetIntegrationResourcesExperimentation$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetIntegrationResourcesProtocolSettings$;
(function (GetIntegrationResourcesProtocolSettings$) {
    /** @deprecated use `GetIntegrationResourcesProtocolSettings$inboundSchema` instead. */
    GetIntegrationResourcesProtocolSettings$.inboundSchema = GetIntegrationResourcesProtocolSettings$inboundSchema;
    /** @deprecated use `GetIntegrationResourcesProtocolSettings$outboundSchema` instead. */
    GetIntegrationResourcesProtocolSettings$.outboundSchema = GetIntegrationResourcesProtocolSettings$outboundSchema;
})(GetIntegrationResourcesProtocolSettings$ || (GetIntegrationResourcesProtocolSettings$ = {}));
export function getIntegrationResourcesProtocolSettingsToJSON(getIntegrationResourcesProtocolSettings) {
    return JSON.stringify(GetIntegrationResourcesProtocolSettings$outboundSchema.parse(getIntegrationResourcesProtocolSettings));
}
export function getIntegrationResourcesProtocolSettingsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetIntegrationResourcesProtocolSettings$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetIntegrationResourcesProtocolSettings' from JSON`);
}
/** @internal */
export const GetIntegrationResourcesLevel$inboundSchema = z.nativeEnum(GetIntegrationResourcesLevel);
/** @internal */
export const GetIntegrationResourcesLevel$outboundSchema = GetIntegrationResourcesLevel$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetIntegrationResourcesLevel$;
(function (GetIntegrationResourcesLevel$) {
    /** @deprecated use `GetIntegrationResourcesLevel$inboundSchema` instead. */
    GetIntegrationResourcesLevel$.inboundSchema = GetIntegrationResourcesLevel$inboundSchema;
    /** @deprecated use `GetIntegrationResourcesLevel$outboundSchema` instead. */
    GetIntegrationResourcesLevel$.outboundSchema = GetIntegrationResourcesLevel$outboundSchema;
})(GetIntegrationResourcesLevel$ || (GetIntegrationResourcesLevel$ = {}));
/** @internal */
export const GetIntegrationResourcesNotification$inboundSchema = z.object({
    level: GetIntegrationResourcesLevel$inboundSchema,
    title: z.string(),
    message: z.string().optional(),
    href: z.string().optional(),
});
/** @internal */
export const GetIntegrationResourcesNotification$outboundSchema = z.object({
    level: GetIntegrationResourcesLevel$outboundSchema,
    title: z.string(),
    message: z.string().optional(),
    href: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetIntegrationResourcesNotification$;
(function (GetIntegrationResourcesNotification$) {
    /** @deprecated use `GetIntegrationResourcesNotification$inboundSchema` instead. */
    GetIntegrationResourcesNotification$.inboundSchema = GetIntegrationResourcesNotification$inboundSchema;
    /** @deprecated use `GetIntegrationResourcesNotification$outboundSchema` instead. */
    GetIntegrationResourcesNotification$.outboundSchema = GetIntegrationResourcesNotification$outboundSchema;
})(GetIntegrationResourcesNotification$ || (GetIntegrationResourcesNotification$ = {}));
export function getIntegrationResourcesNotificationToJSON(getIntegrationResourcesNotification) {
    return JSON.stringify(GetIntegrationResourcesNotification$outboundSchema.parse(getIntegrationResourcesNotification));
}
export function getIntegrationResourcesNotificationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetIntegrationResourcesNotification$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetIntegrationResourcesNotification' from JSON`);
}
/** @internal */
export const GetIntegrationResourcesMetadata$inboundSchema = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.string()),
    z.array(z.number()),
]);
/** @internal */
export const GetIntegrationResourcesMetadata$outboundSchema = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.string()),
    z.array(z.number()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetIntegrationResourcesMetadata$;
(function (GetIntegrationResourcesMetadata$) {
    /** @deprecated use `GetIntegrationResourcesMetadata$inboundSchema` instead. */
    GetIntegrationResourcesMetadata$.inboundSchema = GetIntegrationResourcesMetadata$inboundSchema;
    /** @deprecated use `GetIntegrationResourcesMetadata$outboundSchema` instead. */
    GetIntegrationResourcesMetadata$.outboundSchema = GetIntegrationResourcesMetadata$outboundSchema;
})(GetIntegrationResourcesMetadata$ || (GetIntegrationResourcesMetadata$ = {}));
export function getIntegrationResourcesMetadataToJSON(getIntegrationResourcesMetadata) {
    return JSON.stringify(GetIntegrationResourcesMetadata$outboundSchema.parse(getIntegrationResourcesMetadata));
}
export function getIntegrationResourcesMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetIntegrationResourcesMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetIntegrationResourcesMetadata' from JSON`);
}
/** @internal */
export const Resources$inboundSchema = z.object({
    partnerId: z.string(),
    internalId: z.string(),
    name: z.string(),
    status: GetIntegrationResourcesStatus$inboundSchema.optional(),
    productId: z.string(),
    protocolSettings: z.lazy(() => GetIntegrationResourcesProtocolSettings$inboundSchema).optional(),
    notification: z.lazy(() => GetIntegrationResourcesNotification$inboundSchema)
        .optional(),
    billingPlanId: z.string().optional(),
    metadata: z.record(z.union([
        z.string(),
        z.number(),
        z.boolean(),
        z.array(z.string()),
        z.array(z.number()),
    ])).optional(),
});
/** @internal */
export const Resources$outboundSchema = z.object({
    partnerId: z.string(),
    internalId: z.string(),
    name: z.string(),
    status: GetIntegrationResourcesStatus$outboundSchema.optional(),
    productId: z.string(),
    protocolSettings: z.lazy(() => GetIntegrationResourcesProtocolSettings$outboundSchema).optional(),
    notification: z.lazy(() => GetIntegrationResourcesNotification$outboundSchema)
        .optional(),
    billingPlanId: z.string().optional(),
    metadata: z.record(z.union([
        z.string(),
        z.number(),
        z.boolean(),
        z.array(z.string()),
        z.array(z.number()),
    ])).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Resources$;
(function (Resources$) {
    /** @deprecated use `Resources$inboundSchema` instead. */
    Resources$.inboundSchema = Resources$inboundSchema;
    /** @deprecated use `Resources$outboundSchema` instead. */
    Resources$.outboundSchema = Resources$outboundSchema;
})(Resources$ || (Resources$ = {}));
export function resourcesToJSON(resources) {
    return JSON.stringify(Resources$outboundSchema.parse(resources));
}
export function resourcesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Resources$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Resources' from JSON`);
}
/** @internal */
export const GetIntegrationResourcesResponseBody$inboundSchema = z.object({
    resources: z.array(z.lazy(() => Resources$inboundSchema)),
});
/** @internal */
export const GetIntegrationResourcesResponseBody$outboundSchema = z.object({
    resources: z.array(z.lazy(() => Resources$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetIntegrationResourcesResponseBody$;
(function (GetIntegrationResourcesResponseBody$) {
    /** @deprecated use `GetIntegrationResourcesResponseBody$inboundSchema` instead. */
    GetIntegrationResourcesResponseBody$.inboundSchema = GetIntegrationResourcesResponseBody$inboundSchema;
    /** @deprecated use `GetIntegrationResourcesResponseBody$outboundSchema` instead. */
    GetIntegrationResourcesResponseBody$.outboundSchema = GetIntegrationResourcesResponseBody$outboundSchema;
})(GetIntegrationResourcesResponseBody$ || (GetIntegrationResourcesResponseBody$ = {}));
export function getIntegrationResourcesResponseBodyToJSON(getIntegrationResourcesResponseBody) {
    return JSON.stringify(GetIntegrationResourcesResponseBody$outboundSchema.parse(getIntegrationResourcesResponseBody));
}
export function getIntegrationResourcesResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetIntegrationResourcesResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetIntegrationResourcesResponseBody' from JSON`);
}
//# sourceMappingURL=getintegrationresourcesop.js.map