/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { UserEvent$inboundSchema, UserEvent$outboundSchema, } from "./userevent.js";
/** @internal */
export const ListUserEventsRequest$inboundSchema = z.object({
    limit: z.number().optional(),
    since: z.string().optional(),
    until: z.string().optional(),
    types: z.string().optional(),
    userId: z.string().optional(),
    principalId: z.string().optional(),
    projectIds: z.string().optional(),
    withPayload: z.string().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/** @internal */
export const ListUserEventsRequest$outboundSchema = z.object({
    limit: z.number().optional(),
    since: z.string().optional(),
    until: z.string().optional(),
    types: z.string().optional(),
    userId: z.string().optional(),
    principalId: z.string().optional(),
    projectIds: z.string().optional(),
    withPayload: z.string().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ListUserEventsRequest$;
(function (ListUserEventsRequest$) {
    /** @deprecated use `ListUserEventsRequest$inboundSchema` instead. */
    ListUserEventsRequest$.inboundSchema = ListUserEventsRequest$inboundSchema;
    /** @deprecated use `ListUserEventsRequest$outboundSchema` instead. */
    ListUserEventsRequest$.outboundSchema = ListUserEventsRequest$outboundSchema;
})(ListUserEventsRequest$ || (ListUserEventsRequest$ = {}));
export function listUserEventsRequestToJSON(listUserEventsRequest) {
    return JSON.stringify(ListUserEventsRequest$outboundSchema.parse(listUserEventsRequest));
}
export function listUserEventsRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ListUserEventsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListUserEventsRequest' from JSON`);
}
/** @internal */
export const ListUserEventsResponseBody$inboundSchema = z.object({
    events: z.array(UserEvent$inboundSchema),
});
/** @internal */
export const ListUserEventsResponseBody$outboundSchema = z.object({
    events: z.array(UserEvent$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ListUserEventsResponseBody$;
(function (ListUserEventsResponseBody$) {
    /** @deprecated use `ListUserEventsResponseBody$inboundSchema` instead. */
    ListUserEventsResponseBody$.inboundSchema = ListUserEventsResponseBody$inboundSchema;
    /** @deprecated use `ListUserEventsResponseBody$outboundSchema` instead. */
    ListUserEventsResponseBody$.outboundSchema = ListUserEventsResponseBody$outboundSchema;
})(ListUserEventsResponseBody$ || (ListUserEventsResponseBody$ = {}));
export function listUserEventsResponseBodyToJSON(listUserEventsResponseBody) {
    return JSON.stringify(ListUserEventsResponseBody$outboundSchema.parse(listUserEventsResponseBody));
}
export function listUserEventsResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ListUserEventsResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListUserEventsResponseBody' from JSON`);
}
//# sourceMappingURL=listusereventsop.js.map