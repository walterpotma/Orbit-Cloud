/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ACLAction$inboundSchema, ACLAction$outboundSchema, } from "./aclaction.js";
export const UpdateProjectDataCacheEnvId2 = {
    Preview: "preview",
    Production: "production",
};
export const UpdateProjectDataCacheTarget2 = {
    Production: "production",
    Preview: "preview",
    Development: "development",
};
export const UpdateProjectDataCacheTarget1 = {
    Production: "production",
    Preview: "preview",
    Development: "development",
};
export const UpdateProjectDataCacheProjectsResponse200ApplicationJSONType = {
    Secret: "secret",
    System: "system",
    Encrypted: "encrypted",
    Plain: "plain",
    Sensitive: "sensitive",
};
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type = {
    FlagsConnectionString: "flags-connection-string",
};
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type = {
    IntegrationStoreSecret: "integration-store-secret",
};
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type = {
    PostgresUrlNoSsl: "postgres-url-no-ssl",
};
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type = {
    PostgresDatabase: "postgres-database",
};
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type = {
    PostgresPassword: "postgres-password",
};
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type = {
    PostgresHost: "postgres-host",
};
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type = {
    PostgresUser: "postgres-user",
};
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType = {
    PostgresPrismaUrl: "postgres-prisma-url",
};
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyType = {
    PostgresUrlNonPooling: "postgres-url-non-pooling",
};
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONType = {
    PostgresUrl: "postgres-url",
};
export const UpdateProjectDataCacheContentHintProjectsResponse200Type = {
    BlobReadWriteToken: "blob-read-write-token",
};
export const UpdateProjectDataCacheContentHintProjectsResponseType = {
    RedisRestApiReadOnlyToken: "redis-rest-api-read-only-token",
};
export const UpdateProjectDataCacheContentHintProjectsType = {
    RedisRestApiToken: "redis-rest-api-token",
};
export const UpdateProjectDataCacheContentHintType = {
    RedisRestApiUrl: "redis-rest-api-url",
};
export const ContentHintType = {
    RedisUrl: "redis-url",
};
export const UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvType = {
    FlagsSecret: "flags-secret",
};
/**
 * The type of environment (production, preview, or development)
 */
export const UpdateProjectDataCacheType = {
    Preview: "preview",
    Production: "production",
    Development: "development",
};
/**
 * The type of matching to perform
 */
export const UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType = {
    EndsWith: "endsWith",
    StartsWith: "startsWith",
    Equals: "equals",
};
export const UpdateProjectDataCacheFramework = {
    Blitzjs: "blitzjs",
    Nextjs: "nextjs",
    Gatsby: "gatsby",
    Remix: "remix",
    ReactRouter: "react-router",
    Astro: "astro",
    Hexo: "hexo",
    Eleventy: "eleventy",
    Docusaurus2: "docusaurus-2",
    Docusaurus: "docusaurus",
    Preact: "preact",
    Solidstart1: "solidstart-1",
    Solidstart: "solidstart",
    Dojo: "dojo",
    Ember: "ember",
    Vue: "vue",
    Scully: "scully",
    IonicAngular: "ionic-angular",
    Angular: "angular",
    Polymer: "polymer",
    Svelte: "svelte",
    Sveltekit: "sveltekit",
    Sveltekit1: "sveltekit-1",
    IonicReact: "ionic-react",
    CreateReactApp: "create-react-app",
    Gridsome: "gridsome",
    Umijs: "umijs",
    Sapper: "sapper",
    Saber: "saber",
    Stencil: "stencil",
    Nuxtjs: "nuxtjs",
    Redwoodjs: "redwoodjs",
    Hugo: "hugo",
    Jekyll: "jekyll",
    Brunch: "brunch",
    Middleman: "middleman",
    Zola: "zola",
    Hydrogen: "hydrogen",
    Vite: "vite",
    Vitepress: "vitepress",
    Vuepress: "vuepress",
    Parcel: "parcel",
    Fastapi: "fastapi",
    Fasthtml: "fasthtml",
    SanityV3: "sanity-v3",
    Sanity: "sanity",
    Storybook: "storybook",
    Nitro: "nitro",
    Hono: "hono",
    Express: "express",
    Xmcp: "xmcp",
};
/**
 * The type of matching to perform
 */
export const UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType = {
    EndsWith: "endsWith",
    StartsWith: "startsWith",
    Equals: "equals",
};
export const UpdateProjectDataCacheProjectsChecksConclusion = {
    Succeeded: "succeeded",
    Failed: "failed",
    Skipped: "skipped",
    Canceled: "canceled",
};
export const UpdateProjectDataCacheProjectsChecksState = {
    Registered: "registered",
    Running: "running",
    Completed: "completed",
};
export const UpdateProjectDataCacheProjectsPlan = {
    Pro: "pro",
    Enterprise: "enterprise",
    Hobby: "hobby",
};
export const UpdateProjectDataCacheProjectsReadyState = {
    Building: "BUILDING",
    Error: "ERROR",
    Initializing: "INITIALIZING",
    Queued: "QUEUED",
    Ready: "READY",
    Canceled: "CANCELED",
};
export const UpdateProjectDataCacheProjectsReadySubstate = {
    Staged: "STAGED",
    Rolling: "ROLLING",
    Promoted: "PROMOTED",
};
export const UpdateProjectDataCacheProjectsType = {
    Lambdas: "LAMBDAS",
};
export const UpdateProjectDataCacheLinkProjectsResponse200Type = {
    Bitbucket: "bitbucket",
};
export const UpdateProjectDataCacheLinkProjectsResponseType = {
    Gitlab: "gitlab",
};
export const UpdateProjectDataCacheLinkProjectsType = {
    GithubCustomHost: "github-custom-host",
};
export const UpdateProjectDataCacheLinkType = {
    GithubLimited: "github-limited",
};
export const LinkType = {
    Github: "github",
};
export const UpdateProjectDataCacheNodeVersion = {
    TwentyTwoDotX: "22.x",
    TwentyDotX: "20.x",
    EighteenDotX: "18.x",
    SixteenDotX: "16.x",
    FourteenDotX: "14.x",
    TwelveDotX: "12.x",
    TenDotX: "10.x",
    EightDot10DotX: "8.10.x",
};
export const UpdateProjectDataCacheProjectsFunctionDefaultMemoryType = {
    StandardLegacy: "standard_legacy",
    Standard: "standard",
    Performance: "performance",
};
export const UpdateProjectDataCacheProjectsBuildMachineType = {
    Enhanced: "enhanced",
    Turbo: "turbo",
};
export const UpdateProjectDataCacheFunctionDefaultMemoryType = {
    StandardLegacy: "standard_legacy",
    Standard: "standard",
    Performance: "performance",
};
export const UpdateProjectDataCacheBuildMachineType = {
    Enhanced: "enhanced",
    Turbo: "turbo",
};
export const UpdateProjectDataCacheDeploymentType = {
    Preview: "preview",
    All: "all",
    ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews",
    AllExceptCustomDomains: "all_except_custom_domains",
};
/**
 * The type of matching to perform
 */
export const UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType = {
    EndsWith: "endsWith",
    StartsWith: "startsWith",
    Equals: "equals",
};
export const UpdateProjectDataCacheChecksConclusion = {
    Succeeded: "succeeded",
    Failed: "failed",
    Skipped: "skipped",
    Canceled: "canceled",
};
export const UpdateProjectDataCacheChecksState = {
    Registered: "registered",
    Running: "running",
    Completed: "completed",
};
export const UpdateProjectDataCachePlan = {
    Pro: "pro",
    Enterprise: "enterprise",
    Hobby: "hobby",
};
export const UpdateProjectDataCacheReadyState = {
    Building: "BUILDING",
    Error: "ERROR",
    Initializing: "INITIALIZING",
    Queued: "QUEUED",
    Ready: "READY",
    Canceled: "CANCELED",
};
export const UpdateProjectDataCacheReadySubstate = {
    Staged: "STAGED",
    Rolling: "ROLLING",
    Promoted: "PROMOTED",
};
export const UpdateProjectDataCacheProjectsResponseType = {
    Lambdas: "LAMBDAS",
};
export const JobStatus = {
    Succeeded: "succeeded",
    Failed: "failed",
    Skipped: "skipped",
    Pending: "pending",
    InProgress: "in-progress",
};
export const UpdateProjectDataCacheProjectsResponse200Type = {
    Promote: "promote",
    Rollback: "rollback",
};
export const ProtectionBypassScope = {
    AutomationBypass: "automation-bypass",
};
export const UpdateProjectDataCacheProtectionBypassScope = {
    IntegrationAutomationBypass: "integration-automation-bypass",
};
export const UpdateProjectDataCacheTrustedIpsDeploymentType = {
    Preview: "preview",
    Production: "production",
    All: "all",
    ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews",
    AllExceptCustomDomains: "all_except_custom_domains",
};
export const TrustedIpsDeploymentType = {
    Preview: "preview",
    Production: "production",
    All: "all",
    ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews",
    AllExceptCustomDomains: "all_except_custom_domains",
};
export const UpdateProjectDataCacheTrustedIpsProtectionMode = {
    Additional: "additional",
    Exclusive: "exclusive",
};
/**
 * Whether the Vercel bot should automatically create GitHub deployments https://docs.github.com/en/rest/deployments/deployments#about-deployments NOTE: repository-dispatch events should be used instead
 */
export const CreateDeployments = {
    Enabled: "enabled",
    Disabled: "disabled",
};
export const UpdateProjectDataCacheProjectsResponseAction = {
    Log: "log",
    Challenge: "challenge",
    Deny: "deny",
};
export const UpdateProjectDataCacheProjectsResponse200Action = {
    Log: "log",
    Challenge: "challenge",
    Deny: "deny",
};
export const UpdateProjectDataCacheProjectsAction = {
    Log: "log",
    Challenge: "challenge",
    Deny: "deny",
};
/**
 * - team: `https://oidc.vercel.com/[team_slug]` - global: `https://oidc.vercel.com`
 */
export const UpdateProjectDataCacheIssuerMode = {
    Team: "team",
    Global: "global",
};
export const UpdateProjectDataCacheTier = {
    Standard: "standard",
    Advanced: "advanced",
    Critical: "critical",
};
export const UpdateProjectDataCacheAction = {
    Blocked: "blocked",
};
export const UpdateProjectDataCacheBlockHistoryProjectsResponseAction = {
    RouteUnblocked: "route-unblocked",
};
export const UpdateProjectDataCacheHasProjectsResponseType = {
    Host: "host",
};
export const UpdateProjectDataCacheHasProjectsType = {
    Header: "header",
};
export const UpdateProjectDataCacheHasProjectsKey = {
    XVercelIpCountry: "x-vercel-ip-country",
};
export const UpdateProjectDataCacheRouteAction = {
    BlockLegalCwc: "block_legal_cwc",
};
export const UpdateProjectDataCacheBlockHistoryProjectsAction = {
    RouteBlocked: "route-blocked",
};
export const UpdateProjectDataCacheHasProjectsResponse200ApplicationJSONType = {
    Host: "host",
};
export const UpdateProjectDataCacheHasProjectsResponse200Type = {
    Header: "header",
};
export const UpdateProjectDataCacheHasKey = {
    XVercelIpCountry: "x-vercel-ip-country",
};
export const RouteAction = {
    BlockLegalCwc: "block_legal_cwc",
};
export const UpdateProjectDataCacheBlockHistoryAction = {
    Unblocked: "unblocked",
};
export const BlockHistoryAction = {
    Blocked: "blocked",
};
export const UpdateProjectDataCacheHasType = {
    Host: "host",
};
export const HasType = {
    Header: "header",
};
export const Key = {
    XVercelIpCountry: "x-vercel-ip-country",
};
export const InternalRoutesAction = {
    BlockLegalCwc: "block_legal_cwc",
};
/** @internal */
export const UpdateProjectDataCacheRequestBody$inboundSchema = z.object({
    disabled: z.boolean().optional(),
});
/** @internal */
export const UpdateProjectDataCacheRequestBody$outboundSchema = z.object({
    disabled: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheRequestBody$;
(function (UpdateProjectDataCacheRequestBody$) {
    /** @deprecated use `UpdateProjectDataCacheRequestBody$inboundSchema` instead. */
    UpdateProjectDataCacheRequestBody$.inboundSchema = UpdateProjectDataCacheRequestBody$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheRequestBody$outboundSchema` instead. */
    UpdateProjectDataCacheRequestBody$.outboundSchema = UpdateProjectDataCacheRequestBody$outboundSchema;
})(UpdateProjectDataCacheRequestBody$ || (UpdateProjectDataCacheRequestBody$ = {}));
export function updateProjectDataCacheRequestBodyToJSON(updateProjectDataCacheRequestBody) {
    return JSON.stringify(UpdateProjectDataCacheRequestBody$outboundSchema.parse(updateProjectDataCacheRequestBody));
}
export function updateProjectDataCacheRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheRequestBody' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheRequest$inboundSchema = z.object({
    projectId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => UpdateProjectDataCacheRequestBody$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const UpdateProjectDataCacheRequest$outboundSchema = z.object({
    projectId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => UpdateProjectDataCacheRequestBody$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheRequest$;
(function (UpdateProjectDataCacheRequest$) {
    /** @deprecated use `UpdateProjectDataCacheRequest$inboundSchema` instead. */
    UpdateProjectDataCacheRequest$.inboundSchema = UpdateProjectDataCacheRequest$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheRequest$outboundSchema` instead. */
    UpdateProjectDataCacheRequest$.outboundSchema = UpdateProjectDataCacheRequest$outboundSchema;
})(UpdateProjectDataCacheRequest$ || (UpdateProjectDataCacheRequest$ = {}));
export function updateProjectDataCacheRequestToJSON(updateProjectDataCacheRequest) {
    return JSON.stringify(UpdateProjectDataCacheRequest$outboundSchema.parse(updateProjectDataCacheRequest));
}
export function updateProjectDataCacheRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheRequest' from JSON`);
}
/** @internal */
export const Analytics$inboundSchema = z.object({
    id: z.string(),
    canceledAt: z.nullable(z.number()).optional(),
    disabledAt: z.number(),
    enabledAt: z.number(),
    paidAt: z.number().optional(),
    sampleRatePercent: z.nullable(z.number()).optional(),
    spendLimitInDollars: z.nullable(z.number()).optional(),
});
/** @internal */
export const Analytics$outboundSchema = z.object({
    id: z.string(),
    canceledAt: z.nullable(z.number()).optional(),
    disabledAt: z.number(),
    enabledAt: z.number(),
    paidAt: z.number().optional(),
    sampleRatePercent: z.nullable(z.number()).optional(),
    spendLimitInDollars: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Analytics$;
(function (Analytics$) {
    /** @deprecated use `Analytics$inboundSchema` instead. */
    Analytics$.inboundSchema = Analytics$inboundSchema;
    /** @deprecated use `Analytics$outboundSchema` instead. */
    Analytics$.outboundSchema = Analytics$outboundSchema;
})(Analytics$ || (Analytics$ = {}));
export function analyticsToJSON(analytics) {
    return JSON.stringify(Analytics$outboundSchema.parse(analytics));
}
export function analyticsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Analytics$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Analytics' from JSON`);
}
/** @internal */
export const SpeedInsights$inboundSchema = z.object({
    id: z.string(),
    enabledAt: z.number().optional(),
    disabledAt: z.number().optional(),
    canceledAt: z.number().optional(),
    hasData: z.boolean().optional(),
    paidAt: z.number().optional(),
});
/** @internal */
export const SpeedInsights$outboundSchema = z.object({
    id: z.string(),
    enabledAt: z.number().optional(),
    disabledAt: z.number().optional(),
    canceledAt: z.number().optional(),
    hasData: z.boolean().optional(),
    paidAt: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SpeedInsights$;
(function (SpeedInsights$) {
    /** @deprecated use `SpeedInsights$inboundSchema` instead. */
    SpeedInsights$.inboundSchema = SpeedInsights$inboundSchema;
    /** @deprecated use `SpeedInsights$outboundSchema` instead. */
    SpeedInsights$.outboundSchema = SpeedInsights$outboundSchema;
})(SpeedInsights$ || (SpeedInsights$ = {}));
export function speedInsightsToJSON(speedInsights) {
    return JSON.stringify(SpeedInsights$outboundSchema.parse(speedInsights));
}
export function speedInsightsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SpeedInsights$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SpeedInsights' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheEnvId2$inboundSchema = z.nativeEnum(UpdateProjectDataCacheEnvId2);
/** @internal */
export const UpdateProjectDataCacheEnvId2$outboundSchema = UpdateProjectDataCacheEnvId2$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheEnvId2$;
(function (UpdateProjectDataCacheEnvId2$) {
    /** @deprecated use `UpdateProjectDataCacheEnvId2$inboundSchema` instead. */
    UpdateProjectDataCacheEnvId2$.inboundSchema = UpdateProjectDataCacheEnvId2$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheEnvId2$outboundSchema` instead. */
    UpdateProjectDataCacheEnvId2$.outboundSchema = UpdateProjectDataCacheEnvId2$outboundSchema;
})(UpdateProjectDataCacheEnvId2$ || (UpdateProjectDataCacheEnvId2$ = {}));
/** @internal */
export const UpdateProjectDataCacheEnvId$inboundSchema = z.union([z.string(), UpdateProjectDataCacheEnvId2$inboundSchema]);
/** @internal */
export const UpdateProjectDataCacheEnvId$outboundSchema = z.union([z.string(), UpdateProjectDataCacheEnvId2$outboundSchema]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheEnvId$;
(function (UpdateProjectDataCacheEnvId$) {
    /** @deprecated use `UpdateProjectDataCacheEnvId$inboundSchema` instead. */
    UpdateProjectDataCacheEnvId$.inboundSchema = UpdateProjectDataCacheEnvId$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheEnvId$outboundSchema` instead. */
    UpdateProjectDataCacheEnvId$.outboundSchema = UpdateProjectDataCacheEnvId$outboundSchema;
})(UpdateProjectDataCacheEnvId$ || (UpdateProjectDataCacheEnvId$ = {}));
export function updateProjectDataCacheEnvIdToJSON(updateProjectDataCacheEnvId) {
    return JSON.stringify(UpdateProjectDataCacheEnvId$outboundSchema.parse(updateProjectDataCacheEnvId));
}
export function updateProjectDataCacheEnvIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheEnvId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheEnvId' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheAws$inboundSchema = z.object({
    subnetIds: z.array(z.string()),
    securityGroupId: z.string(),
});
/** @internal */
export const UpdateProjectDataCacheAws$outboundSchema = z.object({
    subnetIds: z.array(z.string()),
    securityGroupId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheAws$;
(function (UpdateProjectDataCacheAws$) {
    /** @deprecated use `UpdateProjectDataCacheAws$inboundSchema` instead. */
    UpdateProjectDataCacheAws$.inboundSchema = UpdateProjectDataCacheAws$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheAws$outboundSchema` instead. */
    UpdateProjectDataCacheAws$.outboundSchema = UpdateProjectDataCacheAws$outboundSchema;
})(UpdateProjectDataCacheAws$ || (UpdateProjectDataCacheAws$ = {}));
export function updateProjectDataCacheAwsToJSON(updateProjectDataCacheAws) {
    return JSON.stringify(UpdateProjectDataCacheAws$outboundSchema.parse(updateProjectDataCacheAws));
}
export function updateProjectDataCacheAwsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheAws$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheAws' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheConnectConfigurations$inboundSchema = z.object({
    envId: z.union([z.string(), UpdateProjectDataCacheEnvId2$inboundSchema]),
    connectConfigurationId: z.string(),
    dc: z.string().optional(),
    passive: z.boolean(),
    buildsEnabled: z.boolean(),
    aws: z.lazy(() => UpdateProjectDataCacheAws$inboundSchema).optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
});
/** @internal */
export const UpdateProjectDataCacheConnectConfigurations$outboundSchema = z.object({
    envId: z.union([z.string(), UpdateProjectDataCacheEnvId2$outboundSchema]),
    connectConfigurationId: z.string(),
    dc: z.string().optional(),
    passive: z.boolean(),
    buildsEnabled: z.boolean(),
    aws: z.lazy(() => UpdateProjectDataCacheAws$outboundSchema).optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheConnectConfigurations$;
(function (UpdateProjectDataCacheConnectConfigurations$) {
    /** @deprecated use `UpdateProjectDataCacheConnectConfigurations$inboundSchema` instead. */
    UpdateProjectDataCacheConnectConfigurations$.inboundSchema = UpdateProjectDataCacheConnectConfigurations$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheConnectConfigurations$outboundSchema` instead. */
    UpdateProjectDataCacheConnectConfigurations$.outboundSchema = UpdateProjectDataCacheConnectConfigurations$outboundSchema;
})(UpdateProjectDataCacheConnectConfigurations$ || (UpdateProjectDataCacheConnectConfigurations$ = {}));
export function updateProjectDataCacheConnectConfigurationsToJSON(updateProjectDataCacheConnectConfigurations) {
    return JSON.stringify(UpdateProjectDataCacheConnectConfigurations$outboundSchema.parse(updateProjectDataCacheConnectConfigurations));
}
export function updateProjectDataCacheConnectConfigurationsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheConnectConfigurations$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheConnectConfigurations' from JSON`);
}
/** @internal */
export const Definitions$inboundSchema = z.object({
    host: z.string(),
    path: z.string(),
    schedule: z.string(),
});
/** @internal */
export const Definitions$outboundSchema = z.object({
    host: z.string(),
    path: z.string(),
    schedule: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Definitions$;
(function (Definitions$) {
    /** @deprecated use `Definitions$inboundSchema` instead. */
    Definitions$.inboundSchema = Definitions$inboundSchema;
    /** @deprecated use `Definitions$outboundSchema` instead. */
    Definitions$.outboundSchema = Definitions$outboundSchema;
})(Definitions$ || (Definitions$ = {}));
export function definitionsToJSON(definitions) {
    return JSON.stringify(Definitions$outboundSchema.parse(definitions));
}
export function definitionsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Definitions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Definitions' from JSON`);
}
/** @internal */
export const Crons$inboundSchema = z
    .object({
    enabledAt: z.number(),
    disabledAt: z.nullable(z.number()),
    updatedAt: z.number(),
    deploymentId: z.nullable(z.string()),
    definitions: z.array(z.lazy(() => Definitions$inboundSchema)),
});
/** @internal */
export const Crons$outboundSchema = z.object({
    enabledAt: z.number(),
    disabledAt: z.nullable(z.number()),
    updatedAt: z.number(),
    deploymentId: z.nullable(z.string()),
    definitions: z.array(z.lazy(() => Definitions$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Crons$;
(function (Crons$) {
    /** @deprecated use `Crons$inboundSchema` instead. */
    Crons$.inboundSchema = Crons$inboundSchema;
    /** @deprecated use `Crons$outboundSchema` instead. */
    Crons$.outboundSchema = Crons$outboundSchema;
})(Crons$ || (Crons$ = {}));
export function cronsToJSON(crons) {
    return JSON.stringify(Crons$outboundSchema.parse(crons));
}
export function cronsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Crons$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Crons' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheDataCache$inboundSchema = z.object({
    userDisabled: z.boolean(),
    storageSizeBytes: z.nullable(z.number()).optional(),
    unlimited: z.boolean().optional(),
});
/** @internal */
export const UpdateProjectDataCacheDataCache$outboundSchema = z.object({
    userDisabled: z.boolean(),
    storageSizeBytes: z.nullable(z.number()).optional(),
    unlimited: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheDataCache$;
(function (UpdateProjectDataCacheDataCache$) {
    /** @deprecated use `UpdateProjectDataCacheDataCache$inboundSchema` instead. */
    UpdateProjectDataCacheDataCache$.inboundSchema = UpdateProjectDataCacheDataCache$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheDataCache$outboundSchema` instead. */
    UpdateProjectDataCacheDataCache$.outboundSchema = UpdateProjectDataCacheDataCache$outboundSchema;
})(UpdateProjectDataCacheDataCache$ || (UpdateProjectDataCacheDataCache$ = {}));
export function updateProjectDataCacheDataCacheToJSON(updateProjectDataCacheDataCache) {
    return JSON.stringify(UpdateProjectDataCacheDataCache$outboundSchema.parse(updateProjectDataCacheDataCache));
}
export function updateProjectDataCacheDataCacheFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheDataCache$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheDataCache' from JSON`);
}
/** @internal */
export const DeploymentExpiration$inboundSchema = z.object({
    expirationDays: z.number().optional(),
    expirationDaysProduction: z.number().optional(),
    expirationDaysCanceled: z.number().optional(),
    expirationDaysErrored: z.number().optional(),
    deploymentsToKeep: z.number().optional(),
});
/** @internal */
export const DeploymentExpiration$outboundSchema = z.object({
    expirationDays: z.number().optional(),
    expirationDaysProduction: z.number().optional(),
    expirationDaysCanceled: z.number().optional(),
    expirationDaysErrored: z.number().optional(),
    deploymentsToKeep: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DeploymentExpiration$;
(function (DeploymentExpiration$) {
    /** @deprecated use `DeploymentExpiration$inboundSchema` instead. */
    DeploymentExpiration$.inboundSchema = DeploymentExpiration$inboundSchema;
    /** @deprecated use `DeploymentExpiration$outboundSchema` instead. */
    DeploymentExpiration$.outboundSchema = DeploymentExpiration$outboundSchema;
})(DeploymentExpiration$ || (DeploymentExpiration$ = {}));
export function deploymentExpirationToJSON(deploymentExpiration) {
    return JSON.stringify(DeploymentExpiration$outboundSchema.parse(deploymentExpiration));
}
export function deploymentExpirationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DeploymentExpiration$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeploymentExpiration' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheTarget2$inboundSchema = z.nativeEnum(UpdateProjectDataCacheTarget2);
/** @internal */
export const UpdateProjectDataCacheTarget2$outboundSchema = UpdateProjectDataCacheTarget2$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheTarget2$;
(function (UpdateProjectDataCacheTarget2$) {
    /** @deprecated use `UpdateProjectDataCacheTarget2$inboundSchema` instead. */
    UpdateProjectDataCacheTarget2$.inboundSchema = UpdateProjectDataCacheTarget2$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheTarget2$outboundSchema` instead. */
    UpdateProjectDataCacheTarget2$.outboundSchema = UpdateProjectDataCacheTarget2$outboundSchema;
})(UpdateProjectDataCacheTarget2$ || (UpdateProjectDataCacheTarget2$ = {}));
/** @internal */
export const UpdateProjectDataCacheTarget1$inboundSchema = z.nativeEnum(UpdateProjectDataCacheTarget1);
/** @internal */
export const UpdateProjectDataCacheTarget1$outboundSchema = UpdateProjectDataCacheTarget1$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheTarget1$;
(function (UpdateProjectDataCacheTarget1$) {
    /** @deprecated use `UpdateProjectDataCacheTarget1$inboundSchema` instead. */
    UpdateProjectDataCacheTarget1$.inboundSchema = UpdateProjectDataCacheTarget1$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheTarget1$outboundSchema` instead. */
    UpdateProjectDataCacheTarget1$.outboundSchema = UpdateProjectDataCacheTarget1$outboundSchema;
})(UpdateProjectDataCacheTarget1$ || (UpdateProjectDataCacheTarget1$ = {}));
/** @internal */
export const UpdateProjectDataCacheTarget$inboundSchema = z.union([
    z.array(UpdateProjectDataCacheTarget1$inboundSchema),
    UpdateProjectDataCacheTarget2$inboundSchema,
]);
/** @internal */
export const UpdateProjectDataCacheTarget$outboundSchema = z.union([
    z.array(UpdateProjectDataCacheTarget1$outboundSchema),
    UpdateProjectDataCacheTarget2$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheTarget$;
(function (UpdateProjectDataCacheTarget$) {
    /** @deprecated use `UpdateProjectDataCacheTarget$inboundSchema` instead. */
    UpdateProjectDataCacheTarget$.inboundSchema = UpdateProjectDataCacheTarget$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheTarget$outboundSchema` instead. */
    UpdateProjectDataCacheTarget$.outboundSchema = UpdateProjectDataCacheTarget$outboundSchema;
})(UpdateProjectDataCacheTarget$ || (UpdateProjectDataCacheTarget$ = {}));
export function updateProjectDataCacheTargetToJSON(updateProjectDataCacheTarget) {
    return JSON.stringify(UpdateProjectDataCacheTarget$outboundSchema.parse(updateProjectDataCacheTarget));
}
export function updateProjectDataCacheTargetFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheTarget$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheTarget' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheProjectsResponse200ApplicationJSONType$inboundSchema = z.nativeEnum(UpdateProjectDataCacheProjectsResponse200ApplicationJSONType);
/** @internal */
export const UpdateProjectDataCacheProjectsResponse200ApplicationJSONType$outboundSchema = UpdateProjectDataCacheProjectsResponse200ApplicationJSONType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheProjectsResponse200ApplicationJSONType$;
(function (UpdateProjectDataCacheProjectsResponse200ApplicationJSONType$) {
    /** @deprecated use `UpdateProjectDataCacheProjectsResponse200ApplicationJSONType$inboundSchema` instead. */
    UpdateProjectDataCacheProjectsResponse200ApplicationJSONType$.inboundSchema = UpdateProjectDataCacheProjectsResponse200ApplicationJSONType$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheProjectsResponse200ApplicationJSONType$outboundSchema` instead. */
    UpdateProjectDataCacheProjectsResponse200ApplicationJSONType$.outboundSchema = UpdateProjectDataCacheProjectsResponse200ApplicationJSONType$outboundSchema;
})(UpdateProjectDataCacheProjectsResponse200ApplicationJSONType$ || (UpdateProjectDataCacheProjectsResponse200ApplicationJSONType$ = {}));
/** @internal */
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$inboundSchema = z.nativeEnum(UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type);
/** @internal */
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$outboundSchema = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$;
(function (UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$) {
    /** @deprecated use `UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$inboundSchema` instead. */
    UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$.inboundSchema = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$outboundSchema` instead. */
    UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$.outboundSchema = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$outboundSchema;
})(UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$ || (UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$ = {}));
/** @internal */
export const ContentHint15$inboundSchema = z.object({
    type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$inboundSchema,
    projectId: z.string(),
});
/** @internal */
export const ContentHint15$outboundSchema = z.object({
    type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$outboundSchema,
    projectId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ContentHint15$;
(function (ContentHint15$) {
    /** @deprecated use `ContentHint15$inboundSchema` instead. */
    ContentHint15$.inboundSchema = ContentHint15$inboundSchema;
    /** @deprecated use `ContentHint15$outboundSchema` instead. */
    ContentHint15$.outboundSchema = ContentHint15$outboundSchema;
})(ContentHint15$ || (ContentHint15$ = {}));
export function contentHint15ToJSON(contentHint15) {
    return JSON.stringify(ContentHint15$outboundSchema.parse(contentHint15));
}
export function contentHint15FromJSON(jsonString) {
    return safeParse(jsonString, (x) => ContentHint15$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ContentHint15' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$inboundSchema = z.nativeEnum(UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type);
/** @internal */
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$outboundSchema = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$;
(function (UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$) {
    /** @deprecated use `UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$inboundSchema` instead. */
    UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$.inboundSchema = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$outboundSchema` instead. */
    UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$.outboundSchema = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$outboundSchema;
})(UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$ || (UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$ = {}));
/** @internal */
export const ContentHint14$inboundSchema = z.object({
    type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$inboundSchema,
    storeId: z.string(),
    integrationId: z.string(),
    integrationProductId: z.string(),
    integrationConfigurationId: z.string(),
});
/** @internal */
export const ContentHint14$outboundSchema = z.object({
    type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$outboundSchema,
    storeId: z.string(),
    integrationId: z.string(),
    integrationProductId: z.string(),
    integrationConfigurationId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ContentHint14$;
(function (ContentHint14$) {
    /** @deprecated use `ContentHint14$inboundSchema` instead. */
    ContentHint14$.inboundSchema = ContentHint14$inboundSchema;
    /** @deprecated use `ContentHint14$outboundSchema` instead. */
    ContentHint14$.outboundSchema = ContentHint14$outboundSchema;
})(ContentHint14$ || (ContentHint14$ = {}));
export function contentHint14ToJSON(contentHint14) {
    return JSON.stringify(ContentHint14$outboundSchema.parse(contentHint14));
}
export function contentHint14FromJSON(jsonString) {
    return safeParse(jsonString, (x) => ContentHint14$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ContentHint14' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$inboundSchema = z.nativeEnum(UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type);
/** @internal */
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$outboundSchema = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$;
(function (UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$) {
    /** @deprecated use `UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$inboundSchema` instead. */
    UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$.inboundSchema = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$outboundSchema` instead. */
    UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$.outboundSchema = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$outboundSchema;
})(UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$ || (UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$ = {}));
/** @internal */
export const ContentHint13$inboundSchema = z.object({
    type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const ContentHint13$outboundSchema = z.object({
    type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ContentHint13$;
(function (ContentHint13$) {
    /** @deprecated use `ContentHint13$inboundSchema` instead. */
    ContentHint13$.inboundSchema = ContentHint13$inboundSchema;
    /** @deprecated use `ContentHint13$outboundSchema` instead. */
    ContentHint13$.outboundSchema = ContentHint13$outboundSchema;
})(ContentHint13$ || (ContentHint13$ = {}));
export function contentHint13ToJSON(contentHint13) {
    return JSON.stringify(ContentHint13$outboundSchema.parse(contentHint13));
}
export function contentHint13FromJSON(jsonString) {
    return safeParse(jsonString, (x) => ContentHint13$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ContentHint13' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$inboundSchema = z.nativeEnum(UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type);
/** @internal */
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$outboundSchema = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$;
(function (UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$) {
    /** @deprecated use `UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$inboundSchema` instead. */
    UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$.inboundSchema = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$outboundSchema` instead. */
    UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$.outboundSchema = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$outboundSchema;
})(UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$ || (UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$ = {}));
/** @internal */
export const ContentHint12$inboundSchema = z.object({
    type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const ContentHint12$outboundSchema = z.object({
    type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ContentHint12$;
(function (ContentHint12$) {
    /** @deprecated use `ContentHint12$inboundSchema` instead. */
    ContentHint12$.inboundSchema = ContentHint12$inboundSchema;
    /** @deprecated use `ContentHint12$outboundSchema` instead. */
    ContentHint12$.outboundSchema = ContentHint12$outboundSchema;
})(ContentHint12$ || (ContentHint12$ = {}));
export function contentHint12ToJSON(contentHint12) {
    return JSON.stringify(ContentHint12$outboundSchema.parse(contentHint12));
}
export function contentHint12FromJSON(jsonString) {
    return safeParse(jsonString, (x) => ContentHint12$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ContentHint12' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$inboundSchema = z.nativeEnum(UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type);
/** @internal */
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$outboundSchema = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$;
(function (UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$) {
    /** @deprecated use `UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$inboundSchema` instead. */
    UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$.inboundSchema = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$outboundSchema` instead. */
    UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$.outboundSchema = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$outboundSchema;
})(UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$ || (UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$ = {}));
/** @internal */
export const ContentHint11$inboundSchema = z.object({
    type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const ContentHint11$outboundSchema = z.object({
    type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ContentHint11$;
(function (ContentHint11$) {
    /** @deprecated use `ContentHint11$inboundSchema` instead. */
    ContentHint11$.inboundSchema = ContentHint11$inboundSchema;
    /** @deprecated use `ContentHint11$outboundSchema` instead. */
    ContentHint11$.outboundSchema = ContentHint11$outboundSchema;
})(ContentHint11$ || (ContentHint11$ = {}));
export function contentHint11ToJSON(contentHint11) {
    return JSON.stringify(ContentHint11$outboundSchema.parse(contentHint11));
}
export function contentHint11FromJSON(jsonString) {
    return safeParse(jsonString, (x) => ContentHint11$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ContentHint11' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$inboundSchema = z.nativeEnum(UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type);
/** @internal */
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$outboundSchema = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$;
(function (UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$) {
    /** @deprecated use `UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$inboundSchema` instead. */
    UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$.inboundSchema = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$outboundSchema` instead. */
    UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$.outboundSchema = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$outboundSchema;
})(UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$ || (UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$ = {}));
/** @internal */
export const ContentHint10$inboundSchema = z.object({
    type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const ContentHint10$outboundSchema = z.object({
    type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ContentHint10$;
(function (ContentHint10$) {
    /** @deprecated use `ContentHint10$inboundSchema` instead. */
    ContentHint10$.inboundSchema = ContentHint10$inboundSchema;
    /** @deprecated use `ContentHint10$outboundSchema` instead. */
    ContentHint10$.outboundSchema = ContentHint10$outboundSchema;
})(ContentHint10$ || (ContentHint10$ = {}));
export function contentHint10ToJSON(contentHint10) {
    return JSON.stringify(ContentHint10$outboundSchema.parse(contentHint10));
}
export function contentHint10FromJSON(jsonString) {
    return safeParse(jsonString, (x) => ContentHint10$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ContentHint10' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$inboundSchema = z.nativeEnum(UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type);
/** @internal */
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$outboundSchema = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$;
(function (UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$) {
    /** @deprecated use `UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$inboundSchema` instead. */
    UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$.inboundSchema = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$outboundSchema` instead. */
    UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$.outboundSchema = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$outboundSchema;
})(UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$ || (UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$ = {}));
/** @internal */
export const ContentHint9$inboundSchema = z.object({
    type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const ContentHint9$outboundSchema = z.object({
    type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ContentHint9$;
(function (ContentHint9$) {
    /** @deprecated use `ContentHint9$inboundSchema` instead. */
    ContentHint9$.inboundSchema = ContentHint9$inboundSchema;
    /** @deprecated use `ContentHint9$outboundSchema` instead. */
    ContentHint9$.outboundSchema = ContentHint9$outboundSchema;
})(ContentHint9$ || (ContentHint9$ = {}));
export function contentHint9ToJSON(contentHint9) {
    return JSON.stringify(ContentHint9$outboundSchema.parse(contentHint9));
}
export function contentHint9FromJSON(jsonString) {
    return safeParse(jsonString, (x) => ContentHint9$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ContentHint9' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema = z.nativeEnum(UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType);
/** @internal */
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$outboundSchema = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$;
(function (UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$) {
    /** @deprecated use `UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema` instead. */
    UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$.inboundSchema = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$outboundSchema` instead. */
    UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$.outboundSchema = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$outboundSchema;
})(UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$ || (UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$ = {}));
/** @internal */
export const ContentHint8$inboundSchema = z.object({
    type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const ContentHint8$outboundSchema = z.object({
    type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ContentHint8$;
(function (ContentHint8$) {
    /** @deprecated use `ContentHint8$inboundSchema` instead. */
    ContentHint8$.inboundSchema = ContentHint8$inboundSchema;
    /** @deprecated use `ContentHint8$outboundSchema` instead. */
    ContentHint8$.outboundSchema = ContentHint8$outboundSchema;
})(ContentHint8$ || (ContentHint8$ = {}));
export function contentHint8ToJSON(contentHint8) {
    return JSON.stringify(ContentHint8$outboundSchema.parse(contentHint8));
}
export function contentHint8FromJSON(jsonString) {
    return safeParse(jsonString, (x) => ContentHint8$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ContentHint8' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema = z.nativeEnum(UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyType);
/** @internal */
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyType$;
(function (UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyType$) {
    /** @deprecated use `UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
    UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyType$.inboundSchema = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
    UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyType$.outboundSchema = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema;
})(UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyType$ || (UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyType$ = {}));
/** @internal */
export const ContentHint7$inboundSchema = z.object({
    type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const ContentHint7$outboundSchema = z.object({
    type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ContentHint7$;
(function (ContentHint7$) {
    /** @deprecated use `ContentHint7$inboundSchema` instead. */
    ContentHint7$.inboundSchema = ContentHint7$inboundSchema;
    /** @deprecated use `ContentHint7$outboundSchema` instead. */
    ContentHint7$.outboundSchema = ContentHint7$outboundSchema;
})(ContentHint7$ || (ContentHint7$ = {}));
export function contentHint7ToJSON(contentHint7) {
    return JSON.stringify(ContentHint7$outboundSchema.parse(contentHint7));
}
export function contentHint7FromJSON(jsonString) {
    return safeParse(jsonString, (x) => ContentHint7$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ContentHint7' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONType$inboundSchema = z.nativeEnum(UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONType);
/** @internal */
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONType$outboundSchema = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONType$;
(function (UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONType$) {
    /** @deprecated use `UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONType$inboundSchema` instead. */
    UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONType$.inboundSchema = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONType$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONType$outboundSchema` instead. */
    UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONType$.outboundSchema = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONType$outboundSchema;
})(UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONType$ || (UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONType$ = {}));
/** @internal */
export const ContentHint6$inboundSchema = z.object({
    type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONType$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const ContentHint6$outboundSchema = z.object({
    type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONType$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ContentHint6$;
(function (ContentHint6$) {
    /** @deprecated use `ContentHint6$inboundSchema` instead. */
    ContentHint6$.inboundSchema = ContentHint6$inboundSchema;
    /** @deprecated use `ContentHint6$outboundSchema` instead. */
    ContentHint6$.outboundSchema = ContentHint6$outboundSchema;
})(ContentHint6$ || (ContentHint6$ = {}));
export function contentHint6ToJSON(contentHint6) {
    return JSON.stringify(ContentHint6$outboundSchema.parse(contentHint6));
}
export function contentHint6FromJSON(jsonString) {
    return safeParse(jsonString, (x) => ContentHint6$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ContentHint6' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheContentHintProjectsResponse200Type$inboundSchema = z.nativeEnum(UpdateProjectDataCacheContentHintProjectsResponse200Type);
/** @internal */
export const UpdateProjectDataCacheContentHintProjectsResponse200Type$outboundSchema = UpdateProjectDataCacheContentHintProjectsResponse200Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheContentHintProjectsResponse200Type$;
(function (UpdateProjectDataCacheContentHintProjectsResponse200Type$) {
    /** @deprecated use `UpdateProjectDataCacheContentHintProjectsResponse200Type$inboundSchema` instead. */
    UpdateProjectDataCacheContentHintProjectsResponse200Type$.inboundSchema = UpdateProjectDataCacheContentHintProjectsResponse200Type$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheContentHintProjectsResponse200Type$outboundSchema` instead. */
    UpdateProjectDataCacheContentHintProjectsResponse200Type$.outboundSchema = UpdateProjectDataCacheContentHintProjectsResponse200Type$outboundSchema;
})(UpdateProjectDataCacheContentHintProjectsResponse200Type$ || (UpdateProjectDataCacheContentHintProjectsResponse200Type$ = {}));
/** @internal */
export const ContentHint5$inboundSchema = z.object({
    type: UpdateProjectDataCacheContentHintProjectsResponse200Type$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const ContentHint5$outboundSchema = z.object({
    type: UpdateProjectDataCacheContentHintProjectsResponse200Type$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ContentHint5$;
(function (ContentHint5$) {
    /** @deprecated use `ContentHint5$inboundSchema` instead. */
    ContentHint5$.inboundSchema = ContentHint5$inboundSchema;
    /** @deprecated use `ContentHint5$outboundSchema` instead. */
    ContentHint5$.outboundSchema = ContentHint5$outboundSchema;
})(ContentHint5$ || (ContentHint5$ = {}));
export function contentHint5ToJSON(contentHint5) {
    return JSON.stringify(ContentHint5$outboundSchema.parse(contentHint5));
}
export function contentHint5FromJSON(jsonString) {
    return safeParse(jsonString, (x) => ContentHint5$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ContentHint5' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheContentHintProjectsResponseType$inboundSchema = z.nativeEnum(UpdateProjectDataCacheContentHintProjectsResponseType);
/** @internal */
export const UpdateProjectDataCacheContentHintProjectsResponseType$outboundSchema = UpdateProjectDataCacheContentHintProjectsResponseType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheContentHintProjectsResponseType$;
(function (UpdateProjectDataCacheContentHintProjectsResponseType$) {
    /** @deprecated use `UpdateProjectDataCacheContentHintProjectsResponseType$inboundSchema` instead. */
    UpdateProjectDataCacheContentHintProjectsResponseType$.inboundSchema = UpdateProjectDataCacheContentHintProjectsResponseType$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheContentHintProjectsResponseType$outboundSchema` instead. */
    UpdateProjectDataCacheContentHintProjectsResponseType$.outboundSchema = UpdateProjectDataCacheContentHintProjectsResponseType$outboundSchema;
})(UpdateProjectDataCacheContentHintProjectsResponseType$ || (UpdateProjectDataCacheContentHintProjectsResponseType$ = {}));
/** @internal */
export const ContentHint4$inboundSchema = z.object({
    type: UpdateProjectDataCacheContentHintProjectsResponseType$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const ContentHint4$outboundSchema = z.object({
    type: UpdateProjectDataCacheContentHintProjectsResponseType$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ContentHint4$;
(function (ContentHint4$) {
    /** @deprecated use `ContentHint4$inboundSchema` instead. */
    ContentHint4$.inboundSchema = ContentHint4$inboundSchema;
    /** @deprecated use `ContentHint4$outboundSchema` instead. */
    ContentHint4$.outboundSchema = ContentHint4$outboundSchema;
})(ContentHint4$ || (ContentHint4$ = {}));
export function contentHint4ToJSON(contentHint4) {
    return JSON.stringify(ContentHint4$outboundSchema.parse(contentHint4));
}
export function contentHint4FromJSON(jsonString) {
    return safeParse(jsonString, (x) => ContentHint4$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ContentHint4' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheContentHintProjectsType$inboundSchema = z
    .nativeEnum(UpdateProjectDataCacheContentHintProjectsType);
/** @internal */
export const UpdateProjectDataCacheContentHintProjectsType$outboundSchema = UpdateProjectDataCacheContentHintProjectsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheContentHintProjectsType$;
(function (UpdateProjectDataCacheContentHintProjectsType$) {
    /** @deprecated use `UpdateProjectDataCacheContentHintProjectsType$inboundSchema` instead. */
    UpdateProjectDataCacheContentHintProjectsType$.inboundSchema = UpdateProjectDataCacheContentHintProjectsType$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheContentHintProjectsType$outboundSchema` instead. */
    UpdateProjectDataCacheContentHintProjectsType$.outboundSchema = UpdateProjectDataCacheContentHintProjectsType$outboundSchema;
})(UpdateProjectDataCacheContentHintProjectsType$ || (UpdateProjectDataCacheContentHintProjectsType$ = {}));
/** @internal */
export const ContentHint3$inboundSchema = z.object({
    type: UpdateProjectDataCacheContentHintProjectsType$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const ContentHint3$outboundSchema = z.object({
    type: UpdateProjectDataCacheContentHintProjectsType$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ContentHint3$;
(function (ContentHint3$) {
    /** @deprecated use `ContentHint3$inboundSchema` instead. */
    ContentHint3$.inboundSchema = ContentHint3$inboundSchema;
    /** @deprecated use `ContentHint3$outboundSchema` instead. */
    ContentHint3$.outboundSchema = ContentHint3$outboundSchema;
})(ContentHint3$ || (ContentHint3$ = {}));
export function contentHint3ToJSON(contentHint3) {
    return JSON.stringify(ContentHint3$outboundSchema.parse(contentHint3));
}
export function contentHint3FromJSON(jsonString) {
    return safeParse(jsonString, (x) => ContentHint3$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ContentHint3' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheContentHintType$inboundSchema = z.nativeEnum(UpdateProjectDataCacheContentHintType);
/** @internal */
export const UpdateProjectDataCacheContentHintType$outboundSchema = UpdateProjectDataCacheContentHintType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheContentHintType$;
(function (UpdateProjectDataCacheContentHintType$) {
    /** @deprecated use `UpdateProjectDataCacheContentHintType$inboundSchema` instead. */
    UpdateProjectDataCacheContentHintType$.inboundSchema = UpdateProjectDataCacheContentHintType$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheContentHintType$outboundSchema` instead. */
    UpdateProjectDataCacheContentHintType$.outboundSchema = UpdateProjectDataCacheContentHintType$outboundSchema;
})(UpdateProjectDataCacheContentHintType$ || (UpdateProjectDataCacheContentHintType$ = {}));
/** @internal */
export const ContentHint2$inboundSchema = z.object({
    type: UpdateProjectDataCacheContentHintType$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const ContentHint2$outboundSchema = z.object({
    type: UpdateProjectDataCacheContentHintType$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ContentHint2$;
(function (ContentHint2$) {
    /** @deprecated use `ContentHint2$inboundSchema` instead. */
    ContentHint2$.inboundSchema = ContentHint2$inboundSchema;
    /** @deprecated use `ContentHint2$outboundSchema` instead. */
    ContentHint2$.outboundSchema = ContentHint2$outboundSchema;
})(ContentHint2$ || (ContentHint2$ = {}));
export function contentHint2ToJSON(contentHint2) {
    return JSON.stringify(ContentHint2$outboundSchema.parse(contentHint2));
}
export function contentHint2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => ContentHint2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ContentHint2' from JSON`);
}
/** @internal */
export const ContentHintType$inboundSchema = z.nativeEnum(ContentHintType);
/** @internal */
export const ContentHintType$outboundSchema = ContentHintType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ContentHintType$;
(function (ContentHintType$) {
    /** @deprecated use `ContentHintType$inboundSchema` instead. */
    ContentHintType$.inboundSchema = ContentHintType$inboundSchema;
    /** @deprecated use `ContentHintType$outboundSchema` instead. */
    ContentHintType$.outboundSchema = ContentHintType$outboundSchema;
})(ContentHintType$ || (ContentHintType$ = {}));
/** @internal */
export const ContentHint1$inboundSchema = z.object({
    type: ContentHintType$inboundSchema,
    storeId: z.string(),
});
/** @internal */
export const ContentHint1$outboundSchema = z.object({
    type: ContentHintType$outboundSchema,
    storeId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ContentHint1$;
(function (ContentHint1$) {
    /** @deprecated use `ContentHint1$inboundSchema` instead. */
    ContentHint1$.inboundSchema = ContentHint1$inboundSchema;
    /** @deprecated use `ContentHint1$outboundSchema` instead. */
    ContentHint1$.outboundSchema = ContentHint1$outboundSchema;
})(ContentHint1$ || (ContentHint1$ = {}));
export function contentHint1ToJSON(contentHint1) {
    return JSON.stringify(ContentHint1$outboundSchema.parse(contentHint1));
}
export function contentHint1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => ContentHint1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ContentHint1' from JSON`);
}
/** @internal */
export const ContentHint$inboundSchema = z.union([
    z.lazy(() => ContentHint14$inboundSchema),
    z.lazy(() => ContentHint1$inboundSchema),
    z.lazy(() => ContentHint2$inboundSchema),
    z.lazy(() => ContentHint3$inboundSchema),
    z.lazy(() => ContentHint4$inboundSchema),
    z.lazy(() => ContentHint5$inboundSchema),
    z.lazy(() => ContentHint6$inboundSchema),
    z.lazy(() => ContentHint7$inboundSchema),
    z.lazy(() => ContentHint8$inboundSchema),
    z.lazy(() => ContentHint9$inboundSchema),
    z.lazy(() => ContentHint10$inboundSchema),
    z.lazy(() => ContentHint11$inboundSchema),
    z.lazy(() => ContentHint12$inboundSchema),
    z.lazy(() => ContentHint13$inboundSchema),
    z.lazy(() => ContentHint15$inboundSchema),
]);
/** @internal */
export const ContentHint$outboundSchema = z.union([
    z.lazy(() => ContentHint14$outboundSchema),
    z.lazy(() => ContentHint1$outboundSchema),
    z.lazy(() => ContentHint2$outboundSchema),
    z.lazy(() => ContentHint3$outboundSchema),
    z.lazy(() => ContentHint4$outboundSchema),
    z.lazy(() => ContentHint5$outboundSchema),
    z.lazy(() => ContentHint6$outboundSchema),
    z.lazy(() => ContentHint7$outboundSchema),
    z.lazy(() => ContentHint8$outboundSchema),
    z.lazy(() => ContentHint9$outboundSchema),
    z.lazy(() => ContentHint10$outboundSchema),
    z.lazy(() => ContentHint11$outboundSchema),
    z.lazy(() => ContentHint12$outboundSchema),
    z.lazy(() => ContentHint13$outboundSchema),
    z.lazy(() => ContentHint15$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ContentHint$;
(function (ContentHint$) {
    /** @deprecated use `ContentHint$inboundSchema` instead. */
    ContentHint$.inboundSchema = ContentHint$inboundSchema;
    /** @deprecated use `ContentHint$outboundSchema` instead. */
    ContentHint$.outboundSchema = ContentHint$outboundSchema;
})(ContentHint$ || (ContentHint$ = {}));
export function contentHintToJSON(contentHint) {
    return JSON.stringify(ContentHint$outboundSchema.parse(contentHint));
}
export function contentHintFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ContentHint$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ContentHint' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema = z.nativeEnum(UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvType);
/** @internal */
export const UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvType$outboundSchema = UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvType$;
(function (UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvType$) {
    /** @deprecated use `UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema` instead. */
    UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvType$.inboundSchema = UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvType$outboundSchema` instead. */
    UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvType$.outboundSchema = UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvType$outboundSchema;
})(UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvType$ || (UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvType$ = {}));
/** @internal */
export const InternalContentHint$inboundSchema = z.object({
    type: UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema,
    encryptedValue: z.string(),
});
/** @internal */
export const InternalContentHint$outboundSchema = z.object({
    type: UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvType$outboundSchema,
    encryptedValue: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InternalContentHint$;
(function (InternalContentHint$) {
    /** @deprecated use `InternalContentHint$inboundSchema` instead. */
    InternalContentHint$.inboundSchema = InternalContentHint$inboundSchema;
    /** @deprecated use `InternalContentHint$outboundSchema` instead. */
    InternalContentHint$.outboundSchema = InternalContentHint$outboundSchema;
})(InternalContentHint$ || (InternalContentHint$ = {}));
export function internalContentHintToJSON(internalContentHint) {
    return JSON.stringify(InternalContentHint$outboundSchema.parse(internalContentHint));
}
export function internalContentHintFromJSON(jsonString) {
    return safeParse(jsonString, (x) => InternalContentHint$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InternalContentHint' from JSON`);
}
/** @internal */
export const Env$inboundSchema = z
    .object({
    target: z.union([
        z.array(UpdateProjectDataCacheTarget1$inboundSchema),
        UpdateProjectDataCacheTarget2$inboundSchema,
    ]).optional(),
    type: UpdateProjectDataCacheProjectsResponse200ApplicationJSONType$inboundSchema,
    sunsetSecretId: z.string().optional(),
    decrypted: z.boolean().optional(),
    value: z.string(),
    vsmValue: z.string().optional(),
    id: z.string().optional(),
    key: z.string(),
    configurationId: z.nullable(z.string()).optional(),
    createdAt: z.number().optional(),
    updatedAt: z.number().optional(),
    createdBy: z.nullable(z.string()).optional(),
    updatedBy: z.nullable(z.string()).optional(),
    gitBranch: z.string().optional(),
    edgeConfigId: z.nullable(z.string()).optional(),
    edgeConfigTokenId: z.nullable(z.string()).optional(),
    contentHint: z.nullable(z.union([
        z.lazy(() => ContentHint14$inboundSchema),
        z.lazy(() => ContentHint1$inboundSchema),
        z.lazy(() => ContentHint2$inboundSchema),
        z.lazy(() => ContentHint3$inboundSchema),
        z.lazy(() => ContentHint4$inboundSchema),
        z.lazy(() => ContentHint5$inboundSchema),
        z.lazy(() => ContentHint6$inboundSchema),
        z.lazy(() => ContentHint7$inboundSchema),
        z.lazy(() => ContentHint8$inboundSchema),
        z.lazy(() => ContentHint9$inboundSchema),
        z.lazy(() => ContentHint10$inboundSchema),
        z.lazy(() => ContentHint11$inboundSchema),
        z.lazy(() => ContentHint12$inboundSchema),
        z.lazy(() => ContentHint13$inboundSchema),
        z.lazy(() => ContentHint15$inboundSchema),
    ])).optional(),
    internalContentHint: z.nullable(z.lazy(() => InternalContentHint$inboundSchema)).optional(),
    comment: z.string().optional(),
    customEnvironmentIds: z.array(z.string()).optional(),
});
/** @internal */
export const Env$outboundSchema = z
    .object({
    target: z.union([
        z.array(UpdateProjectDataCacheTarget1$outboundSchema),
        UpdateProjectDataCacheTarget2$outboundSchema,
    ]).optional(),
    type: UpdateProjectDataCacheProjectsResponse200ApplicationJSONType$outboundSchema,
    sunsetSecretId: z.string().optional(),
    decrypted: z.boolean().optional(),
    value: z.string(),
    vsmValue: z.string().optional(),
    id: z.string().optional(),
    key: z.string(),
    configurationId: z.nullable(z.string()).optional(),
    createdAt: z.number().optional(),
    updatedAt: z.number().optional(),
    createdBy: z.nullable(z.string()).optional(),
    updatedBy: z.nullable(z.string()).optional(),
    gitBranch: z.string().optional(),
    edgeConfigId: z.nullable(z.string()).optional(),
    edgeConfigTokenId: z.nullable(z.string()).optional(),
    contentHint: z.nullable(z.union([
        z.lazy(() => ContentHint14$outboundSchema),
        z.lazy(() => ContentHint1$outboundSchema),
        z.lazy(() => ContentHint2$outboundSchema),
        z.lazy(() => ContentHint3$outboundSchema),
        z.lazy(() => ContentHint4$outboundSchema),
        z.lazy(() => ContentHint5$outboundSchema),
        z.lazy(() => ContentHint6$outboundSchema),
        z.lazy(() => ContentHint7$outboundSchema),
        z.lazy(() => ContentHint8$outboundSchema),
        z.lazy(() => ContentHint9$outboundSchema),
        z.lazy(() => ContentHint10$outboundSchema),
        z.lazy(() => ContentHint11$outboundSchema),
        z.lazy(() => ContentHint12$outboundSchema),
        z.lazy(() => ContentHint13$outboundSchema),
        z.lazy(() => ContentHint15$outboundSchema),
    ])).optional(),
    internalContentHint: z.nullable(z.lazy(() => InternalContentHint$outboundSchema)).optional(),
    comment: z.string().optional(),
    customEnvironmentIds: z.array(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Env$;
(function (Env$) {
    /** @deprecated use `Env$inboundSchema` instead. */
    Env$.inboundSchema = Env$inboundSchema;
    /** @deprecated use `Env$outboundSchema` instead. */
    Env$.outboundSchema = Env$outboundSchema;
})(Env$ || (Env$ = {}));
export function envToJSON(env) {
    return JSON.stringify(Env$outboundSchema.parse(env));
}
export function envFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Env$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Env' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheType$inboundSchema = z.nativeEnum(UpdateProjectDataCacheType);
/** @internal */
export const UpdateProjectDataCacheType$outboundSchema = UpdateProjectDataCacheType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheType$;
(function (UpdateProjectDataCacheType$) {
    /** @deprecated use `UpdateProjectDataCacheType$inboundSchema` instead. */
    UpdateProjectDataCacheType$.inboundSchema = UpdateProjectDataCacheType$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheType$outboundSchema` instead. */
    UpdateProjectDataCacheType$.outboundSchema = UpdateProjectDataCacheType$outboundSchema;
})(UpdateProjectDataCacheType$ || (UpdateProjectDataCacheType$ = {}));
/** @internal */
export const UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$inboundSchema = z.nativeEnum(UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType);
/** @internal */
export const UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$outboundSchema = UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$;
(function (UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$) {
    /** @deprecated use `UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$inboundSchema` instead. */
    UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$.inboundSchema = UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$outboundSchema` instead. */
    UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$.outboundSchema = UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$outboundSchema;
})(UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$ || (UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$ = {}));
/** @internal */
export const UpdateProjectDataCacheProjectsResponseBranchMatcher$inboundSchema = z.object({
    type: UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$inboundSchema,
    pattern: z.string(),
});
/** @internal */
export const UpdateProjectDataCacheProjectsResponseBranchMatcher$outboundSchema = z.object({
    type: UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$outboundSchema,
    pattern: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheProjectsResponseBranchMatcher$;
(function (UpdateProjectDataCacheProjectsResponseBranchMatcher$) {
    /** @deprecated use `UpdateProjectDataCacheProjectsResponseBranchMatcher$inboundSchema` instead. */
    UpdateProjectDataCacheProjectsResponseBranchMatcher$.inboundSchema = UpdateProjectDataCacheProjectsResponseBranchMatcher$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheProjectsResponseBranchMatcher$outboundSchema` instead. */
    UpdateProjectDataCacheProjectsResponseBranchMatcher$.outboundSchema = UpdateProjectDataCacheProjectsResponseBranchMatcher$outboundSchema;
})(UpdateProjectDataCacheProjectsResponseBranchMatcher$ || (UpdateProjectDataCacheProjectsResponseBranchMatcher$ = {}));
export function updateProjectDataCacheProjectsResponseBranchMatcherToJSON(updateProjectDataCacheProjectsResponseBranchMatcher) {
    return JSON.stringify(UpdateProjectDataCacheProjectsResponseBranchMatcher$outboundSchema.parse(updateProjectDataCacheProjectsResponseBranchMatcher));
}
export function updateProjectDataCacheProjectsResponseBranchMatcherFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheProjectsResponseBranchMatcher$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheProjectsResponseBranchMatcher' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheVerification$inboundSchema = z.object({
    type: z.string(),
    domain: z.string(),
    value: z.string(),
    reason: z.string(),
});
/** @internal */
export const UpdateProjectDataCacheVerification$outboundSchema = z.object({
    type: z.string(),
    domain: z.string(),
    value: z.string(),
    reason: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheVerification$;
(function (UpdateProjectDataCacheVerification$) {
    /** @deprecated use `UpdateProjectDataCacheVerification$inboundSchema` instead. */
    UpdateProjectDataCacheVerification$.inboundSchema = UpdateProjectDataCacheVerification$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheVerification$outboundSchema` instead. */
    UpdateProjectDataCacheVerification$.outboundSchema = UpdateProjectDataCacheVerification$outboundSchema;
})(UpdateProjectDataCacheVerification$ || (UpdateProjectDataCacheVerification$ = {}));
export function updateProjectDataCacheVerificationToJSON(updateProjectDataCacheVerification) {
    return JSON.stringify(UpdateProjectDataCacheVerification$outboundSchema.parse(updateProjectDataCacheVerification));
}
export function updateProjectDataCacheVerificationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheVerification$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheVerification' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheDomains$inboundSchema = z.object({
    name: z.string(),
    apexName: z.string(),
    projectId: z.string(),
    redirect: z.nullable(z.string()).optional(),
    redirectStatusCode: z.nullable(z.number()).optional(),
    gitBranch: z.nullable(z.string()).optional(),
    customEnvironmentId: z.nullable(z.string()).optional(),
    updatedAt: z.number().optional(),
    createdAt: z.number().optional(),
    verified: z.boolean(),
    verification: z.array(z.lazy(() => UpdateProjectDataCacheVerification$inboundSchema)).optional(),
});
/** @internal */
export const UpdateProjectDataCacheDomains$outboundSchema = z.object({
    name: z.string(),
    apexName: z.string(),
    projectId: z.string(),
    redirect: z.nullable(z.string()).optional(),
    redirectStatusCode: z.nullable(z.number()).optional(),
    gitBranch: z.nullable(z.string()).optional(),
    customEnvironmentId: z.nullable(z.string()).optional(),
    updatedAt: z.number().optional(),
    createdAt: z.number().optional(),
    verified: z.boolean(),
    verification: z.array(z.lazy(() => UpdateProjectDataCacheVerification$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheDomains$;
(function (UpdateProjectDataCacheDomains$) {
    /** @deprecated use `UpdateProjectDataCacheDomains$inboundSchema` instead. */
    UpdateProjectDataCacheDomains$.inboundSchema = UpdateProjectDataCacheDomains$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheDomains$outboundSchema` instead. */
    UpdateProjectDataCacheDomains$.outboundSchema = UpdateProjectDataCacheDomains$outboundSchema;
})(UpdateProjectDataCacheDomains$ || (UpdateProjectDataCacheDomains$ = {}));
export function updateProjectDataCacheDomainsToJSON(updateProjectDataCacheDomains) {
    return JSON.stringify(UpdateProjectDataCacheDomains$outboundSchema.parse(updateProjectDataCacheDomains));
}
export function updateProjectDataCacheDomainsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheDomains$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheDomains' from JSON`);
}
/** @internal */
export const CustomEnvironments$inboundSchema = z.object({
    id: z.string(),
    slug: z.string(),
    type: UpdateProjectDataCacheType$inboundSchema,
    description: z.string().optional(),
    branchMatcher: z.lazy(() => UpdateProjectDataCacheProjectsResponseBranchMatcher$inboundSchema).optional(),
    domains: z.array(z.lazy(() => UpdateProjectDataCacheDomains$inboundSchema))
        .optional(),
    currentDeploymentAliases: z.array(z.string()).optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
});
/** @internal */
export const CustomEnvironments$outboundSchema = z.object({
    id: z.string(),
    slug: z.string(),
    type: UpdateProjectDataCacheType$outboundSchema,
    description: z.string().optional(),
    branchMatcher: z.lazy(() => UpdateProjectDataCacheProjectsResponseBranchMatcher$outboundSchema).optional(),
    domains: z.array(z.lazy(() => UpdateProjectDataCacheDomains$outboundSchema))
        .optional(),
    currentDeploymentAliases: z.array(z.string()).optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomEnvironments$;
(function (CustomEnvironments$) {
    /** @deprecated use `CustomEnvironments$inboundSchema` instead. */
    CustomEnvironments$.inboundSchema = CustomEnvironments$inboundSchema;
    /** @deprecated use `CustomEnvironments$outboundSchema` instead. */
    CustomEnvironments$.outboundSchema = CustomEnvironments$outboundSchema;
})(CustomEnvironments$ || (CustomEnvironments$ = {}));
export function customEnvironmentsToJSON(customEnvironments) {
    return JSON.stringify(CustomEnvironments$outboundSchema.parse(customEnvironments));
}
export function customEnvironmentsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomEnvironments$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomEnvironments' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheFramework$inboundSchema = z.nativeEnum(UpdateProjectDataCacheFramework);
/** @internal */
export const UpdateProjectDataCacheFramework$outboundSchema = UpdateProjectDataCacheFramework$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheFramework$;
(function (UpdateProjectDataCacheFramework$) {
    /** @deprecated use `UpdateProjectDataCacheFramework$inboundSchema` instead. */
    UpdateProjectDataCacheFramework$.inboundSchema = UpdateProjectDataCacheFramework$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheFramework$outboundSchema` instead. */
    UpdateProjectDataCacheFramework$.outboundSchema = UpdateProjectDataCacheFramework$outboundSchema;
})(UpdateProjectDataCacheFramework$ || (UpdateProjectDataCacheFramework$ = {}));
/** @internal */
export const UpdateProjectDataCacheIpBuckets$inboundSchema = z.object({
    bucket: z.string(),
    supportUntil: z.number().optional(),
});
/** @internal */
export const UpdateProjectDataCacheIpBuckets$outboundSchema = z.object({
    bucket: z.string(),
    supportUntil: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheIpBuckets$;
(function (UpdateProjectDataCacheIpBuckets$) {
    /** @deprecated use `UpdateProjectDataCacheIpBuckets$inboundSchema` instead. */
    UpdateProjectDataCacheIpBuckets$.inboundSchema = UpdateProjectDataCacheIpBuckets$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheIpBuckets$outboundSchema` instead. */
    UpdateProjectDataCacheIpBuckets$.outboundSchema = UpdateProjectDataCacheIpBuckets$outboundSchema;
})(UpdateProjectDataCacheIpBuckets$ || (UpdateProjectDataCacheIpBuckets$ = {}));
export function updateProjectDataCacheIpBucketsToJSON(updateProjectDataCacheIpBuckets) {
    return JSON.stringify(UpdateProjectDataCacheIpBuckets$outboundSchema.parse(updateProjectDataCacheIpBuckets));
}
export function updateProjectDataCacheIpBucketsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheIpBuckets$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheIpBuckets' from JSON`);
}
/** @internal */
export const AliasAssigned$inboundSchema = z.union([z.number(), z.boolean()]);
/** @internal */
export const AliasAssigned$outboundSchema = z.union([z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AliasAssigned$;
(function (AliasAssigned$) {
    /** @deprecated use `AliasAssigned$inboundSchema` instead. */
    AliasAssigned$.inboundSchema = AliasAssigned$inboundSchema;
    /** @deprecated use `AliasAssigned$outboundSchema` instead. */
    AliasAssigned$.outboundSchema = AliasAssigned$outboundSchema;
})(AliasAssigned$ || (AliasAssigned$ = {}));
export function aliasAssignedToJSON(aliasAssigned) {
    return JSON.stringify(AliasAssigned$outboundSchema.parse(aliasAssigned));
}
export function aliasAssignedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AliasAssigned$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AliasAssigned' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheProjectsAliasError$inboundSchema = z.object({
    code: z.string(),
    message: z.string(),
});
/** @internal */
export const UpdateProjectDataCacheProjectsAliasError$outboundSchema = z.object({
    code: z.string(),
    message: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheProjectsAliasError$;
(function (UpdateProjectDataCacheProjectsAliasError$) {
    /** @deprecated use `UpdateProjectDataCacheProjectsAliasError$inboundSchema` instead. */
    UpdateProjectDataCacheProjectsAliasError$.inboundSchema = UpdateProjectDataCacheProjectsAliasError$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheProjectsAliasError$outboundSchema` instead. */
    UpdateProjectDataCacheProjectsAliasError$.outboundSchema = UpdateProjectDataCacheProjectsAliasError$outboundSchema;
})(UpdateProjectDataCacheProjectsAliasError$ || (UpdateProjectDataCacheProjectsAliasError$ = {}));
export function updateProjectDataCacheProjectsAliasErrorToJSON(updateProjectDataCacheProjectsAliasError) {
    return JSON.stringify(UpdateProjectDataCacheProjectsAliasError$outboundSchema.parse(updateProjectDataCacheProjectsAliasError));
}
export function updateProjectDataCacheProjectsAliasErrorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheProjectsAliasError$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheProjectsAliasError' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$inboundSchema = z.nativeEnum(UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType);
/** @internal */
export const UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$outboundSchema = UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$;
(function (UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$) {
    /** @deprecated use `UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$inboundSchema` instead. */
    UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$.inboundSchema = UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$outboundSchema` instead. */
    UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$.outboundSchema = UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$outboundSchema;
})(UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$ || (UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$ = {}));
/** @internal */
export const UpdateProjectDataCacheBranchMatcher$inboundSchema = z.object({
    type: UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$inboundSchema,
    pattern: z.string(),
});
/** @internal */
export const UpdateProjectDataCacheBranchMatcher$outboundSchema = z.object({
    type: UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$outboundSchema,
    pattern: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheBranchMatcher$;
(function (UpdateProjectDataCacheBranchMatcher$) {
    /** @deprecated use `UpdateProjectDataCacheBranchMatcher$inboundSchema` instead. */
    UpdateProjectDataCacheBranchMatcher$.inboundSchema = UpdateProjectDataCacheBranchMatcher$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheBranchMatcher$outboundSchema` instead. */
    UpdateProjectDataCacheBranchMatcher$.outboundSchema = UpdateProjectDataCacheBranchMatcher$outboundSchema;
})(UpdateProjectDataCacheBranchMatcher$ || (UpdateProjectDataCacheBranchMatcher$ = {}));
export function updateProjectDataCacheBranchMatcherToJSON(updateProjectDataCacheBranchMatcher) {
    return JSON.stringify(UpdateProjectDataCacheBranchMatcher$outboundSchema.parse(updateProjectDataCacheBranchMatcher));
}
export function updateProjectDataCacheBranchMatcherFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheBranchMatcher$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheBranchMatcher' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheProjectsBuilds$inboundSchema = z.object({
    use: z.string(),
    src: z.string().optional(),
    dest: z.string().optional(),
});
/** @internal */
export const UpdateProjectDataCacheProjectsBuilds$outboundSchema = z.object({
    use: z.string(),
    src: z.string().optional(),
    dest: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheProjectsBuilds$;
(function (UpdateProjectDataCacheProjectsBuilds$) {
    /** @deprecated use `UpdateProjectDataCacheProjectsBuilds$inboundSchema` instead. */
    UpdateProjectDataCacheProjectsBuilds$.inboundSchema = UpdateProjectDataCacheProjectsBuilds$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheProjectsBuilds$outboundSchema` instead. */
    UpdateProjectDataCacheProjectsBuilds$.outboundSchema = UpdateProjectDataCacheProjectsBuilds$outboundSchema;
})(UpdateProjectDataCacheProjectsBuilds$ || (UpdateProjectDataCacheProjectsBuilds$ = {}));
export function updateProjectDataCacheProjectsBuildsToJSON(updateProjectDataCacheProjectsBuilds) {
    return JSON.stringify(UpdateProjectDataCacheProjectsBuilds$outboundSchema.parse(updateProjectDataCacheProjectsBuilds));
}
export function updateProjectDataCacheProjectsBuildsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheProjectsBuilds$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheProjectsBuilds' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheProjectsChecksConclusion$inboundSchema = z
    .nativeEnum(UpdateProjectDataCacheProjectsChecksConclusion);
/** @internal */
export const UpdateProjectDataCacheProjectsChecksConclusion$outboundSchema = UpdateProjectDataCacheProjectsChecksConclusion$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheProjectsChecksConclusion$;
(function (UpdateProjectDataCacheProjectsChecksConclusion$) {
    /** @deprecated use `UpdateProjectDataCacheProjectsChecksConclusion$inboundSchema` instead. */
    UpdateProjectDataCacheProjectsChecksConclusion$.inboundSchema = UpdateProjectDataCacheProjectsChecksConclusion$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheProjectsChecksConclusion$outboundSchema` instead. */
    UpdateProjectDataCacheProjectsChecksConclusion$.outboundSchema = UpdateProjectDataCacheProjectsChecksConclusion$outboundSchema;
})(UpdateProjectDataCacheProjectsChecksConclusion$ || (UpdateProjectDataCacheProjectsChecksConclusion$ = {}));
/** @internal */
export const UpdateProjectDataCacheProjectsChecksState$inboundSchema = z
    .nativeEnum(UpdateProjectDataCacheProjectsChecksState);
/** @internal */
export const UpdateProjectDataCacheProjectsChecksState$outboundSchema = UpdateProjectDataCacheProjectsChecksState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheProjectsChecksState$;
(function (UpdateProjectDataCacheProjectsChecksState$) {
    /** @deprecated use `UpdateProjectDataCacheProjectsChecksState$inboundSchema` instead. */
    UpdateProjectDataCacheProjectsChecksState$.inboundSchema = UpdateProjectDataCacheProjectsChecksState$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheProjectsChecksState$outboundSchema` instead. */
    UpdateProjectDataCacheProjectsChecksState$.outboundSchema = UpdateProjectDataCacheProjectsChecksState$outboundSchema;
})(UpdateProjectDataCacheProjectsChecksState$ || (UpdateProjectDataCacheProjectsChecksState$ = {}));
/** @internal */
export const UpdateProjectDataCacheProjectsCreator$inboundSchema = z.object({
    email: z.string(),
    githubLogin: z.string().optional(),
    gitlabLogin: z.string().optional(),
    uid: z.string(),
    username: z.string(),
});
/** @internal */
export const UpdateProjectDataCacheProjectsCreator$outboundSchema = z.object({
    email: z.string(),
    githubLogin: z.string().optional(),
    gitlabLogin: z.string().optional(),
    uid: z.string(),
    username: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheProjectsCreator$;
(function (UpdateProjectDataCacheProjectsCreator$) {
    /** @deprecated use `UpdateProjectDataCacheProjectsCreator$inboundSchema` instead. */
    UpdateProjectDataCacheProjectsCreator$.inboundSchema = UpdateProjectDataCacheProjectsCreator$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheProjectsCreator$outboundSchema` instead. */
    UpdateProjectDataCacheProjectsCreator$.outboundSchema = UpdateProjectDataCacheProjectsCreator$outboundSchema;
})(UpdateProjectDataCacheProjectsCreator$ || (UpdateProjectDataCacheProjectsCreator$ = {}));
export function updateProjectDataCacheProjectsCreatorToJSON(updateProjectDataCacheProjectsCreator) {
    return JSON.stringify(UpdateProjectDataCacheProjectsCreator$outboundSchema.parse(updateProjectDataCacheProjectsCreator));
}
export function updateProjectDataCacheProjectsCreatorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheProjectsCreator$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheProjectsCreator' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheProjectsOidcTokenClaims$inboundSchema = z.object({
    iss: z.string(),
    sub: z.string(),
    scope: z.string(),
    aud: z.string(),
    owner: z.string(),
    owner_id: z.string(),
    project: z.string(),
    project_id: z.string(),
    environment: z.string(),
}).transform((v) => {
    return remap$(v, {
        "owner_id": "ownerId",
        "project_id": "projectId",
    });
});
/** @internal */
export const UpdateProjectDataCacheProjectsOidcTokenClaims$outboundSchema = z.object({
    iss: z.string(),
    sub: z.string(),
    scope: z.string(),
    aud: z.string(),
    owner: z.string(),
    ownerId: z.string(),
    project: z.string(),
    projectId: z.string(),
    environment: z.string(),
}).transform((v) => {
    return remap$(v, {
        ownerId: "owner_id",
        projectId: "project_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheProjectsOidcTokenClaims$;
(function (UpdateProjectDataCacheProjectsOidcTokenClaims$) {
    /** @deprecated use `UpdateProjectDataCacheProjectsOidcTokenClaims$inboundSchema` instead. */
    UpdateProjectDataCacheProjectsOidcTokenClaims$.inboundSchema = UpdateProjectDataCacheProjectsOidcTokenClaims$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheProjectsOidcTokenClaims$outboundSchema` instead. */
    UpdateProjectDataCacheProjectsOidcTokenClaims$.outboundSchema = UpdateProjectDataCacheProjectsOidcTokenClaims$outboundSchema;
})(UpdateProjectDataCacheProjectsOidcTokenClaims$ || (UpdateProjectDataCacheProjectsOidcTokenClaims$ = {}));
export function updateProjectDataCacheProjectsOidcTokenClaimsToJSON(updateProjectDataCacheProjectsOidcTokenClaims) {
    return JSON.stringify(UpdateProjectDataCacheProjectsOidcTokenClaims$outboundSchema.parse(updateProjectDataCacheProjectsOidcTokenClaims));
}
export function updateProjectDataCacheProjectsOidcTokenClaimsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheProjectsOidcTokenClaims$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheProjectsOidcTokenClaims' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheProjectsPlan$inboundSchema = z.nativeEnum(UpdateProjectDataCacheProjectsPlan);
/** @internal */
export const UpdateProjectDataCacheProjectsPlan$outboundSchema = UpdateProjectDataCacheProjectsPlan$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheProjectsPlan$;
(function (UpdateProjectDataCacheProjectsPlan$) {
    /** @deprecated use `UpdateProjectDataCacheProjectsPlan$inboundSchema` instead. */
    UpdateProjectDataCacheProjectsPlan$.inboundSchema = UpdateProjectDataCacheProjectsPlan$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheProjectsPlan$outboundSchema` instead. */
    UpdateProjectDataCacheProjectsPlan$.outboundSchema = UpdateProjectDataCacheProjectsPlan$outboundSchema;
})(UpdateProjectDataCacheProjectsPlan$ || (UpdateProjectDataCacheProjectsPlan$ = {}));
/** @internal */
export const UpdateProjectDataCacheProjectsReadyState$inboundSchema = z
    .nativeEnum(UpdateProjectDataCacheProjectsReadyState);
/** @internal */
export const UpdateProjectDataCacheProjectsReadyState$outboundSchema = UpdateProjectDataCacheProjectsReadyState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheProjectsReadyState$;
(function (UpdateProjectDataCacheProjectsReadyState$) {
    /** @deprecated use `UpdateProjectDataCacheProjectsReadyState$inboundSchema` instead. */
    UpdateProjectDataCacheProjectsReadyState$.inboundSchema = UpdateProjectDataCacheProjectsReadyState$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheProjectsReadyState$outboundSchema` instead. */
    UpdateProjectDataCacheProjectsReadyState$.outboundSchema = UpdateProjectDataCacheProjectsReadyState$outboundSchema;
})(UpdateProjectDataCacheProjectsReadyState$ || (UpdateProjectDataCacheProjectsReadyState$ = {}));
/** @internal */
export const UpdateProjectDataCacheProjectsReadySubstate$inboundSchema = z
    .nativeEnum(UpdateProjectDataCacheProjectsReadySubstate);
/** @internal */
export const UpdateProjectDataCacheProjectsReadySubstate$outboundSchema = UpdateProjectDataCacheProjectsReadySubstate$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheProjectsReadySubstate$;
(function (UpdateProjectDataCacheProjectsReadySubstate$) {
    /** @deprecated use `UpdateProjectDataCacheProjectsReadySubstate$inboundSchema` instead. */
    UpdateProjectDataCacheProjectsReadySubstate$.inboundSchema = UpdateProjectDataCacheProjectsReadySubstate$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheProjectsReadySubstate$outboundSchema` instead. */
    UpdateProjectDataCacheProjectsReadySubstate$.outboundSchema = UpdateProjectDataCacheProjectsReadySubstate$outboundSchema;
})(UpdateProjectDataCacheProjectsReadySubstate$ || (UpdateProjectDataCacheProjectsReadySubstate$ = {}));
/** @internal */
export const UpdateProjectDataCacheProjectsType$inboundSchema = z.nativeEnum(UpdateProjectDataCacheProjectsType);
/** @internal */
export const UpdateProjectDataCacheProjectsType$outboundSchema = UpdateProjectDataCacheProjectsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheProjectsType$;
(function (UpdateProjectDataCacheProjectsType$) {
    /** @deprecated use `UpdateProjectDataCacheProjectsType$inboundSchema` instead. */
    UpdateProjectDataCacheProjectsType$.inboundSchema = UpdateProjectDataCacheProjectsType$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheProjectsType$outboundSchema` instead. */
    UpdateProjectDataCacheProjectsType$.outboundSchema = UpdateProjectDataCacheProjectsType$outboundSchema;
})(UpdateProjectDataCacheProjectsType$ || (UpdateProjectDataCacheProjectsType$ = {}));
/** @internal */
export const LatestDeployments$inboundSchema = z.object({
    id: z.string(),
    alias: z.array(z.string()).optional(),
    aliasAssigned: z.nullable(z.union([z.number(), z.boolean()])).optional(),
    aliasError: z.nullable(z.lazy(() => UpdateProjectDataCacheProjectsAliasError$inboundSchema)).optional(),
    aliasFinal: z.nullable(z.string()).optional(),
    automaticAliases: z.array(z.string()).optional(),
    branchMatcher: z.lazy(() => UpdateProjectDataCacheBranchMatcher$inboundSchema)
        .optional(),
    buildingAt: z.number().optional(),
    builds: z.array(z.lazy(() => UpdateProjectDataCacheProjectsBuilds$inboundSchema)).optional(),
    checksConclusion: UpdateProjectDataCacheProjectsChecksConclusion$inboundSchema
        .optional(),
    checksState: UpdateProjectDataCacheProjectsChecksState$inboundSchema
        .optional(),
    connectBuildsEnabled: z.boolean().optional(),
    connectConfigurationId: z.string().optional(),
    createdAt: z.number(),
    createdIn: z.string(),
    creator: z.nullable(z.lazy(() => UpdateProjectDataCacheProjectsCreator$inboundSchema)),
    deletedAt: z.number().optional(),
    deploymentHostname: z.string(),
    forced: z.boolean().optional(),
    name: z.string(),
    meta: z.record(z.string()).optional(),
    monorepoManager: z.nullable(z.string()).optional(),
    oidcTokenClaims: z.lazy(() => UpdateProjectDataCacheProjectsOidcTokenClaims$inboundSchema).optional(),
    plan: UpdateProjectDataCacheProjectsPlan$inboundSchema,
    previewCommentsEnabled: z.boolean().optional(),
    private: z.boolean(),
    readyAt: z.number().optional(),
    readyState: UpdateProjectDataCacheProjectsReadyState$inboundSchema,
    readySubstate: UpdateProjectDataCacheProjectsReadySubstate$inboundSchema
        .optional(),
    requestedAt: z.number().optional(),
    target: z.nullable(z.string()).optional(),
    teamId: z.nullable(z.string()).optional(),
    type: UpdateProjectDataCacheProjectsType$inboundSchema,
    url: z.string(),
    userId: z.string(),
    withCache: z.boolean().optional(),
});
/** @internal */
export const LatestDeployments$outboundSchema = z.object({
    id: z.string(),
    alias: z.array(z.string()).optional(),
    aliasAssigned: z.nullable(z.union([z.number(), z.boolean()])).optional(),
    aliasError: z.nullable(z.lazy(() => UpdateProjectDataCacheProjectsAliasError$outboundSchema)).optional(),
    aliasFinal: z.nullable(z.string()).optional(),
    automaticAliases: z.array(z.string()).optional(),
    branchMatcher: z.lazy(() => UpdateProjectDataCacheBranchMatcher$outboundSchema).optional(),
    buildingAt: z.number().optional(),
    builds: z.array(z.lazy(() => UpdateProjectDataCacheProjectsBuilds$outboundSchema)).optional(),
    checksConclusion: UpdateProjectDataCacheProjectsChecksConclusion$outboundSchema.optional(),
    checksState: UpdateProjectDataCacheProjectsChecksState$outboundSchema
        .optional(),
    connectBuildsEnabled: z.boolean().optional(),
    connectConfigurationId: z.string().optional(),
    createdAt: z.number(),
    createdIn: z.string(),
    creator: z.nullable(z.lazy(() => UpdateProjectDataCacheProjectsCreator$outboundSchema)),
    deletedAt: z.number().optional(),
    deploymentHostname: z.string(),
    forced: z.boolean().optional(),
    name: z.string(),
    meta: z.record(z.string()).optional(),
    monorepoManager: z.nullable(z.string()).optional(),
    oidcTokenClaims: z.lazy(() => UpdateProjectDataCacheProjectsOidcTokenClaims$outboundSchema).optional(),
    plan: UpdateProjectDataCacheProjectsPlan$outboundSchema,
    previewCommentsEnabled: z.boolean().optional(),
    private: z.boolean(),
    readyAt: z.number().optional(),
    readyState: UpdateProjectDataCacheProjectsReadyState$outboundSchema,
    readySubstate: UpdateProjectDataCacheProjectsReadySubstate$outboundSchema
        .optional(),
    requestedAt: z.number().optional(),
    target: z.nullable(z.string()).optional(),
    teamId: z.nullable(z.string()).optional(),
    type: UpdateProjectDataCacheProjectsType$outboundSchema,
    url: z.string(),
    userId: z.string(),
    withCache: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LatestDeployments$;
(function (LatestDeployments$) {
    /** @deprecated use `LatestDeployments$inboundSchema` instead. */
    LatestDeployments$.inboundSchema = LatestDeployments$inboundSchema;
    /** @deprecated use `LatestDeployments$outboundSchema` instead. */
    LatestDeployments$.outboundSchema = LatestDeployments$outboundSchema;
})(LatestDeployments$ || (LatestDeployments$ = {}));
export function latestDeploymentsToJSON(latestDeployments) {
    return JSON.stringify(LatestDeployments$outboundSchema.parse(latestDeployments));
}
export function latestDeploymentsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LatestDeployments$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LatestDeployments' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheLinkProjectsResponse200Type$inboundSchema = z
    .nativeEnum(UpdateProjectDataCacheLinkProjectsResponse200Type);
/** @internal */
export const UpdateProjectDataCacheLinkProjectsResponse200Type$outboundSchema = UpdateProjectDataCacheLinkProjectsResponse200Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheLinkProjectsResponse200Type$;
(function (UpdateProjectDataCacheLinkProjectsResponse200Type$) {
    /** @deprecated use `UpdateProjectDataCacheLinkProjectsResponse200Type$inboundSchema` instead. */
    UpdateProjectDataCacheLinkProjectsResponse200Type$.inboundSchema = UpdateProjectDataCacheLinkProjectsResponse200Type$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheLinkProjectsResponse200Type$outboundSchema` instead. */
    UpdateProjectDataCacheLinkProjectsResponse200Type$.outboundSchema = UpdateProjectDataCacheLinkProjectsResponse200Type$outboundSchema;
})(UpdateProjectDataCacheLinkProjectsResponse200Type$ || (UpdateProjectDataCacheLinkProjectsResponse200Type$ = {}));
/** @internal */
export const UpdateProjectDataCacheLinkProjectsResponseDeployHooks$inboundSchema = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
});
/** @internal */
export const UpdateProjectDataCacheLinkProjectsResponseDeployHooks$outboundSchema = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheLinkProjectsResponseDeployHooks$;
(function (UpdateProjectDataCacheLinkProjectsResponseDeployHooks$) {
    /** @deprecated use `UpdateProjectDataCacheLinkProjectsResponseDeployHooks$inboundSchema` instead. */
    UpdateProjectDataCacheLinkProjectsResponseDeployHooks$.inboundSchema = UpdateProjectDataCacheLinkProjectsResponseDeployHooks$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheLinkProjectsResponseDeployHooks$outboundSchema` instead. */
    UpdateProjectDataCacheLinkProjectsResponseDeployHooks$.outboundSchema = UpdateProjectDataCacheLinkProjectsResponseDeployHooks$outboundSchema;
})(UpdateProjectDataCacheLinkProjectsResponseDeployHooks$ || (UpdateProjectDataCacheLinkProjectsResponseDeployHooks$ = {}));
export function updateProjectDataCacheLinkProjectsResponseDeployHooksToJSON(updateProjectDataCacheLinkProjectsResponseDeployHooks) {
    return JSON.stringify(UpdateProjectDataCacheLinkProjectsResponseDeployHooks$outboundSchema.parse(updateProjectDataCacheLinkProjectsResponseDeployHooks));
}
export function updateProjectDataCacheLinkProjectsResponseDeployHooksFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheLinkProjectsResponseDeployHooks$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheLinkProjectsResponseDeployHooks' from JSON`);
}
/** @internal */
export const Link5$inboundSchema = z
    .object({
    name: z.string(),
    slug: z.string(),
    owner: z.string(),
    type: UpdateProjectDataCacheLinkProjectsResponse200Type$inboundSchema,
    uuid: z.string(),
    workspaceUuid: z.string(),
    createdAt: z.number().optional(),
    deployHooks: z.array(z.lazy(() => UpdateProjectDataCacheLinkProjectsResponseDeployHooks$inboundSchema)),
    gitCredentialId: z.string(),
    updatedAt: z.number().optional(),
    sourceless: z.boolean().optional(),
    productionBranch: z.string(),
});
/** @internal */
export const Link5$outboundSchema = z.object({
    name: z.string(),
    slug: z.string(),
    owner: z.string(),
    type: UpdateProjectDataCacheLinkProjectsResponse200Type$outboundSchema,
    uuid: z.string(),
    workspaceUuid: z.string(),
    createdAt: z.number().optional(),
    deployHooks: z.array(z.lazy(() => UpdateProjectDataCacheLinkProjectsResponseDeployHooks$outboundSchema)),
    gitCredentialId: z.string(),
    updatedAt: z.number().optional(),
    sourceless: z.boolean().optional(),
    productionBranch: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Link5$;
(function (Link5$) {
    /** @deprecated use `Link5$inboundSchema` instead. */
    Link5$.inboundSchema = Link5$inboundSchema;
    /** @deprecated use `Link5$outboundSchema` instead. */
    Link5$.outboundSchema = Link5$outboundSchema;
})(Link5$ || (Link5$ = {}));
export function link5ToJSON(link5) {
    return JSON.stringify(Link5$outboundSchema.parse(link5));
}
export function link5FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Link5$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Link5' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheLinkProjectsResponseType$inboundSchema = z
    .nativeEnum(UpdateProjectDataCacheLinkProjectsResponseType);
/** @internal */
export const UpdateProjectDataCacheLinkProjectsResponseType$outboundSchema = UpdateProjectDataCacheLinkProjectsResponseType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheLinkProjectsResponseType$;
(function (UpdateProjectDataCacheLinkProjectsResponseType$) {
    /** @deprecated use `UpdateProjectDataCacheLinkProjectsResponseType$inboundSchema` instead. */
    UpdateProjectDataCacheLinkProjectsResponseType$.inboundSchema = UpdateProjectDataCacheLinkProjectsResponseType$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheLinkProjectsResponseType$outboundSchema` instead. */
    UpdateProjectDataCacheLinkProjectsResponseType$.outboundSchema = UpdateProjectDataCacheLinkProjectsResponseType$outboundSchema;
})(UpdateProjectDataCacheLinkProjectsResponseType$ || (UpdateProjectDataCacheLinkProjectsResponseType$ = {}));
/** @internal */
export const UpdateProjectDataCacheLinkProjectsDeployHooks$inboundSchema = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
});
/** @internal */
export const UpdateProjectDataCacheLinkProjectsDeployHooks$outboundSchema = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheLinkProjectsDeployHooks$;
(function (UpdateProjectDataCacheLinkProjectsDeployHooks$) {
    /** @deprecated use `UpdateProjectDataCacheLinkProjectsDeployHooks$inboundSchema` instead. */
    UpdateProjectDataCacheLinkProjectsDeployHooks$.inboundSchema = UpdateProjectDataCacheLinkProjectsDeployHooks$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheLinkProjectsDeployHooks$outboundSchema` instead. */
    UpdateProjectDataCacheLinkProjectsDeployHooks$.outboundSchema = UpdateProjectDataCacheLinkProjectsDeployHooks$outboundSchema;
})(UpdateProjectDataCacheLinkProjectsDeployHooks$ || (UpdateProjectDataCacheLinkProjectsDeployHooks$ = {}));
export function updateProjectDataCacheLinkProjectsDeployHooksToJSON(updateProjectDataCacheLinkProjectsDeployHooks) {
    return JSON.stringify(UpdateProjectDataCacheLinkProjectsDeployHooks$outboundSchema.parse(updateProjectDataCacheLinkProjectsDeployHooks));
}
export function updateProjectDataCacheLinkProjectsDeployHooksFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheLinkProjectsDeployHooks$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheLinkProjectsDeployHooks' from JSON`);
}
/** @internal */
export const Link4$inboundSchema = z
    .object({
    projectId: z.string(),
    projectName: z.string(),
    projectNameWithNamespace: z.string(),
    projectNamespace: z.string(),
    projectOwnerId: z.number().optional(),
    projectUrl: z.string(),
    type: UpdateProjectDataCacheLinkProjectsResponseType$inboundSchema,
    createdAt: z.number().optional(),
    deployHooks: z.array(z.lazy(() => UpdateProjectDataCacheLinkProjectsDeployHooks$inboundSchema)),
    gitCredentialId: z.string(),
    updatedAt: z.number().optional(),
    sourceless: z.boolean().optional(),
    productionBranch: z.string(),
});
/** @internal */
export const Link4$outboundSchema = z.object({
    projectId: z.string(),
    projectName: z.string(),
    projectNameWithNamespace: z.string(),
    projectNamespace: z.string(),
    projectOwnerId: z.number().optional(),
    projectUrl: z.string(),
    type: UpdateProjectDataCacheLinkProjectsResponseType$outboundSchema,
    createdAt: z.number().optional(),
    deployHooks: z.array(z.lazy(() => UpdateProjectDataCacheLinkProjectsDeployHooks$outboundSchema)),
    gitCredentialId: z.string(),
    updatedAt: z.number().optional(),
    sourceless: z.boolean().optional(),
    productionBranch: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Link4$;
(function (Link4$) {
    /** @deprecated use `Link4$inboundSchema` instead. */
    Link4$.inboundSchema = Link4$inboundSchema;
    /** @deprecated use `Link4$outboundSchema` instead. */
    Link4$.outboundSchema = Link4$outboundSchema;
})(Link4$ || (Link4$ = {}));
export function link4ToJSON(link4) {
    return JSON.stringify(Link4$outboundSchema.parse(link4));
}
export function link4FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Link4$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Link4' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheLinkProjectsType$inboundSchema = z.nativeEnum(UpdateProjectDataCacheLinkProjectsType);
/** @internal */
export const UpdateProjectDataCacheLinkProjectsType$outboundSchema = UpdateProjectDataCacheLinkProjectsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheLinkProjectsType$;
(function (UpdateProjectDataCacheLinkProjectsType$) {
    /** @deprecated use `UpdateProjectDataCacheLinkProjectsType$inboundSchema` instead. */
    UpdateProjectDataCacheLinkProjectsType$.inboundSchema = UpdateProjectDataCacheLinkProjectsType$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheLinkProjectsType$outboundSchema` instead. */
    UpdateProjectDataCacheLinkProjectsType$.outboundSchema = UpdateProjectDataCacheLinkProjectsType$outboundSchema;
})(UpdateProjectDataCacheLinkProjectsType$ || (UpdateProjectDataCacheLinkProjectsType$ = {}));
/** @internal */
export const UpdateProjectDataCacheLinkDeployHooks$inboundSchema = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
});
/** @internal */
export const UpdateProjectDataCacheLinkDeployHooks$outboundSchema = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheLinkDeployHooks$;
(function (UpdateProjectDataCacheLinkDeployHooks$) {
    /** @deprecated use `UpdateProjectDataCacheLinkDeployHooks$inboundSchema` instead. */
    UpdateProjectDataCacheLinkDeployHooks$.inboundSchema = UpdateProjectDataCacheLinkDeployHooks$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheLinkDeployHooks$outboundSchema` instead. */
    UpdateProjectDataCacheLinkDeployHooks$.outboundSchema = UpdateProjectDataCacheLinkDeployHooks$outboundSchema;
})(UpdateProjectDataCacheLinkDeployHooks$ || (UpdateProjectDataCacheLinkDeployHooks$ = {}));
export function updateProjectDataCacheLinkDeployHooksToJSON(updateProjectDataCacheLinkDeployHooks) {
    return JSON.stringify(UpdateProjectDataCacheLinkDeployHooks$outboundSchema.parse(updateProjectDataCacheLinkDeployHooks));
}
export function updateProjectDataCacheLinkDeployHooksFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheLinkDeployHooks$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheLinkDeployHooks' from JSON`);
}
/** @internal */
export const Link3$inboundSchema = z
    .object({
    org: z.string(),
    repoOwnerId: z.number().optional(),
    repo: z.string().optional(),
    repoId: z.number().optional(),
    type: UpdateProjectDataCacheLinkProjectsType$inboundSchema,
    host: z.string(),
    createdAt: z.number().optional(),
    deployHooks: z.array(z.lazy(() => UpdateProjectDataCacheLinkDeployHooks$inboundSchema)),
    gitCredentialId: z.string(),
    updatedAt: z.number().optional(),
    sourceless: z.boolean().optional(),
    productionBranch: z.string(),
});
/** @internal */
export const Link3$outboundSchema = z.object({
    org: z.string(),
    repoOwnerId: z.number().optional(),
    repo: z.string().optional(),
    repoId: z.number().optional(),
    type: UpdateProjectDataCacheLinkProjectsType$outboundSchema,
    host: z.string(),
    createdAt: z.number().optional(),
    deployHooks: z.array(z.lazy(() => UpdateProjectDataCacheLinkDeployHooks$outboundSchema)),
    gitCredentialId: z.string(),
    updatedAt: z.number().optional(),
    sourceless: z.boolean().optional(),
    productionBranch: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Link3$;
(function (Link3$) {
    /** @deprecated use `Link3$inboundSchema` instead. */
    Link3$.inboundSchema = Link3$inboundSchema;
    /** @deprecated use `Link3$outboundSchema` instead. */
    Link3$.outboundSchema = Link3$outboundSchema;
})(Link3$ || (Link3$ = {}));
export function link3ToJSON(link3) {
    return JSON.stringify(Link3$outboundSchema.parse(link3));
}
export function link3FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Link3$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Link3' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheLinkType$inboundSchema = z.nativeEnum(UpdateProjectDataCacheLinkType);
/** @internal */
export const UpdateProjectDataCacheLinkType$outboundSchema = UpdateProjectDataCacheLinkType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheLinkType$;
(function (UpdateProjectDataCacheLinkType$) {
    /** @deprecated use `UpdateProjectDataCacheLinkType$inboundSchema` instead. */
    UpdateProjectDataCacheLinkType$.inboundSchema = UpdateProjectDataCacheLinkType$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheLinkType$outboundSchema` instead. */
    UpdateProjectDataCacheLinkType$.outboundSchema = UpdateProjectDataCacheLinkType$outboundSchema;
})(UpdateProjectDataCacheLinkType$ || (UpdateProjectDataCacheLinkType$ = {}));
/** @internal */
export const LinkDeployHooks$inboundSchema = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
});
/** @internal */
export const LinkDeployHooks$outboundSchema = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LinkDeployHooks$;
(function (LinkDeployHooks$) {
    /** @deprecated use `LinkDeployHooks$inboundSchema` instead. */
    LinkDeployHooks$.inboundSchema = LinkDeployHooks$inboundSchema;
    /** @deprecated use `LinkDeployHooks$outboundSchema` instead. */
    LinkDeployHooks$.outboundSchema = LinkDeployHooks$outboundSchema;
})(LinkDeployHooks$ || (LinkDeployHooks$ = {}));
export function linkDeployHooksToJSON(linkDeployHooks) {
    return JSON.stringify(LinkDeployHooks$outboundSchema.parse(linkDeployHooks));
}
export function linkDeployHooksFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LinkDeployHooks$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LinkDeployHooks' from JSON`);
}
/** @internal */
export const Link2$inboundSchema = z
    .object({
    type: UpdateProjectDataCacheLinkType$inboundSchema,
    createdAt: z.number().optional(),
    updatedAt: z.number().optional(),
    org: z.string(),
    repoOwnerId: z.number().optional(),
    repo: z.string().optional(),
    repoId: z.number().optional(),
    deployHooks: z.array(z.lazy(() => LinkDeployHooks$inboundSchema)),
    gitCredentialId: z.string(),
    sourceless: z.boolean().optional(),
    productionBranch: z.string(),
});
/** @internal */
export const Link2$outboundSchema = z.object({
    type: UpdateProjectDataCacheLinkType$outboundSchema,
    createdAt: z.number().optional(),
    updatedAt: z.number().optional(),
    org: z.string(),
    repoOwnerId: z.number().optional(),
    repo: z.string().optional(),
    repoId: z.number().optional(),
    deployHooks: z.array(z.lazy(() => LinkDeployHooks$outboundSchema)),
    gitCredentialId: z.string(),
    sourceless: z.boolean().optional(),
    productionBranch: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Link2$;
(function (Link2$) {
    /** @deprecated use `Link2$inboundSchema` instead. */
    Link2$.inboundSchema = Link2$inboundSchema;
    /** @deprecated use `Link2$outboundSchema` instead. */
    Link2$.outboundSchema = Link2$outboundSchema;
})(Link2$ || (Link2$ = {}));
export function link2ToJSON(link2) {
    return JSON.stringify(Link2$outboundSchema.parse(link2));
}
export function link2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Link2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Link2' from JSON`);
}
/** @internal */
export const LinkType$inboundSchema = z
    .nativeEnum(LinkType);
/** @internal */
export const LinkType$outboundSchema = LinkType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LinkType$;
(function (LinkType$) {
    /** @deprecated use `LinkType$inboundSchema` instead. */
    LinkType$.inboundSchema = LinkType$inboundSchema;
    /** @deprecated use `LinkType$outboundSchema` instead. */
    LinkType$.outboundSchema = LinkType$outboundSchema;
})(LinkType$ || (LinkType$ = {}));
/** @internal */
export const DeployHooks$inboundSchema = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
});
/** @internal */
export const DeployHooks$outboundSchema = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DeployHooks$;
(function (DeployHooks$) {
    /** @deprecated use `DeployHooks$inboundSchema` instead. */
    DeployHooks$.inboundSchema = DeployHooks$inboundSchema;
    /** @deprecated use `DeployHooks$outboundSchema` instead. */
    DeployHooks$.outboundSchema = DeployHooks$outboundSchema;
})(DeployHooks$ || (DeployHooks$ = {}));
export function deployHooksToJSON(deployHooks) {
    return JSON.stringify(DeployHooks$outboundSchema.parse(deployHooks));
}
export function deployHooksFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DeployHooks$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeployHooks' from JSON`);
}
/** @internal */
export const Link1$inboundSchema = z
    .object({
    org: z.string(),
    repoOwnerId: z.number().optional(),
    repo: z.string().optional(),
    repoId: z.number().optional(),
    type: LinkType$inboundSchema,
    createdAt: z.number().optional(),
    deployHooks: z.array(z.lazy(() => DeployHooks$inboundSchema)),
    gitCredentialId: z.string(),
    updatedAt: z.number().optional(),
    sourceless: z.boolean().optional(),
    productionBranch: z.string(),
});
/** @internal */
export const Link1$outboundSchema = z.object({
    org: z.string(),
    repoOwnerId: z.number().optional(),
    repo: z.string().optional(),
    repoId: z.number().optional(),
    type: LinkType$outboundSchema,
    createdAt: z.number().optional(),
    deployHooks: z.array(z.lazy(() => DeployHooks$outboundSchema)),
    gitCredentialId: z.string(),
    updatedAt: z.number().optional(),
    sourceless: z.boolean().optional(),
    productionBranch: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Link1$;
(function (Link1$) {
    /** @deprecated use `Link1$inboundSchema` instead. */
    Link1$.inboundSchema = Link1$inboundSchema;
    /** @deprecated use `Link1$outboundSchema` instead. */
    Link1$.outboundSchema = Link1$outboundSchema;
})(Link1$ || (Link1$ = {}));
export function link1ToJSON(link1) {
    return JSON.stringify(Link1$outboundSchema.parse(link1));
}
export function link1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Link1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Link1' from JSON`);
}
/** @internal */
export const Link$inboundSchema = z
    .union([
    z.lazy(() => Link4$inboundSchema),
    z.lazy(() => Link5$inboundSchema),
    z.lazy(() => Link3$inboundSchema),
    z.lazy(() => Link1$inboundSchema),
    z.lazy(() => Link2$inboundSchema),
]);
/** @internal */
export const Link$outboundSchema = z.union([
    z.lazy(() => Link4$outboundSchema),
    z.lazy(() => Link5$outboundSchema),
    z.lazy(() => Link3$outboundSchema),
    z.lazy(() => Link1$outboundSchema),
    z.lazy(() => Link2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Link$;
(function (Link$) {
    /** @deprecated use `Link$inboundSchema` instead. */
    Link$.inboundSchema = Link$inboundSchema;
    /** @deprecated use `Link$outboundSchema` instead. */
    Link$.outboundSchema = Link$outboundSchema;
})(Link$ || (Link$ = {}));
export function linkToJSON(link) {
    return JSON.stringify(Link$outboundSchema.parse(link));
}
export function linkFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Link$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Link' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheMicrofrontends2$inboundSchema = z.object({
    updatedAt: z.number(),
    groupIds: z.array(z.any()),
    enabled: z.boolean(),
});
/** @internal */
export const UpdateProjectDataCacheMicrofrontends2$outboundSchema = z.object({
    updatedAt: z.number(),
    groupIds: z.array(z.any()),
    enabled: z.boolean(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheMicrofrontends2$;
(function (UpdateProjectDataCacheMicrofrontends2$) {
    /** @deprecated use `UpdateProjectDataCacheMicrofrontends2$inboundSchema` instead. */
    UpdateProjectDataCacheMicrofrontends2$.inboundSchema = UpdateProjectDataCacheMicrofrontends2$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheMicrofrontends2$outboundSchema` instead. */
    UpdateProjectDataCacheMicrofrontends2$.outboundSchema = UpdateProjectDataCacheMicrofrontends2$outboundSchema;
})(UpdateProjectDataCacheMicrofrontends2$ || (UpdateProjectDataCacheMicrofrontends2$ = {}));
export function updateProjectDataCacheMicrofrontends2ToJSON(updateProjectDataCacheMicrofrontends2) {
    return JSON.stringify(UpdateProjectDataCacheMicrofrontends2$outboundSchema.parse(updateProjectDataCacheMicrofrontends2));
}
export function updateProjectDataCacheMicrofrontends2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheMicrofrontends2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheMicrofrontends2' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheMicrofrontends1$inboundSchema = z.object({
    updatedAt: z.number(),
    groupIds: z.array(z.string()),
    enabled: z.boolean(),
    isDefaultApp: z.boolean().optional(),
    defaultRoute: z.string().optional(),
    routeObservabilityToThisProject: z.boolean().optional(),
});
/** @internal */
export const UpdateProjectDataCacheMicrofrontends1$outboundSchema = z.object({
    updatedAt: z.number(),
    groupIds: z.array(z.string()),
    enabled: z.boolean(),
    isDefaultApp: z.boolean().optional(),
    defaultRoute: z.string().optional(),
    routeObservabilityToThisProject: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheMicrofrontends1$;
(function (UpdateProjectDataCacheMicrofrontends1$) {
    /** @deprecated use `UpdateProjectDataCacheMicrofrontends1$inboundSchema` instead. */
    UpdateProjectDataCacheMicrofrontends1$.inboundSchema = UpdateProjectDataCacheMicrofrontends1$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheMicrofrontends1$outboundSchema` instead. */
    UpdateProjectDataCacheMicrofrontends1$.outboundSchema = UpdateProjectDataCacheMicrofrontends1$outboundSchema;
})(UpdateProjectDataCacheMicrofrontends1$ || (UpdateProjectDataCacheMicrofrontends1$ = {}));
export function updateProjectDataCacheMicrofrontends1ToJSON(updateProjectDataCacheMicrofrontends1) {
    return JSON.stringify(UpdateProjectDataCacheMicrofrontends1$outboundSchema.parse(updateProjectDataCacheMicrofrontends1));
}
export function updateProjectDataCacheMicrofrontends1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheMicrofrontends1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheMicrofrontends1' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheMicrofrontends$inboundSchema = z.union([
    z.lazy(() => UpdateProjectDataCacheMicrofrontends1$inboundSchema),
    z.lazy(() => UpdateProjectDataCacheMicrofrontends2$inboundSchema),
]);
/** @internal */
export const UpdateProjectDataCacheMicrofrontends$outboundSchema = z.union([
    z.lazy(() => UpdateProjectDataCacheMicrofrontends1$outboundSchema),
    z.lazy(() => UpdateProjectDataCacheMicrofrontends2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheMicrofrontends$;
(function (UpdateProjectDataCacheMicrofrontends$) {
    /** @deprecated use `UpdateProjectDataCacheMicrofrontends$inboundSchema` instead. */
    UpdateProjectDataCacheMicrofrontends$.inboundSchema = UpdateProjectDataCacheMicrofrontends$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheMicrofrontends$outboundSchema` instead. */
    UpdateProjectDataCacheMicrofrontends$.outboundSchema = UpdateProjectDataCacheMicrofrontends$outboundSchema;
})(UpdateProjectDataCacheMicrofrontends$ || (UpdateProjectDataCacheMicrofrontends$ = {}));
export function updateProjectDataCacheMicrofrontendsToJSON(updateProjectDataCacheMicrofrontends) {
    return JSON.stringify(UpdateProjectDataCacheMicrofrontends$outboundSchema.parse(updateProjectDataCacheMicrofrontends));
}
export function updateProjectDataCacheMicrofrontendsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheMicrofrontends$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheMicrofrontends' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheNodeVersion$inboundSchema = z.nativeEnum(UpdateProjectDataCacheNodeVersion);
/** @internal */
export const UpdateProjectDataCacheNodeVersion$outboundSchema = UpdateProjectDataCacheNodeVersion$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheNodeVersion$;
(function (UpdateProjectDataCacheNodeVersion$) {
    /** @deprecated use `UpdateProjectDataCacheNodeVersion$inboundSchema` instead. */
    UpdateProjectDataCacheNodeVersion$.inboundSchema = UpdateProjectDataCacheNodeVersion$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheNodeVersion$outboundSchema` instead. */
    UpdateProjectDataCacheNodeVersion$.outboundSchema = UpdateProjectDataCacheNodeVersion$outboundSchema;
})(UpdateProjectDataCacheNodeVersion$ || (UpdateProjectDataCacheNodeVersion$ = {}));
/** @internal */
export const UpdateProjectDataCachePaths$inboundSchema = z.object({
    value: z.string(),
});
/** @internal */
export const UpdateProjectDataCachePaths$outboundSchema = z.object({
    value: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCachePaths$;
(function (UpdateProjectDataCachePaths$) {
    /** @deprecated use `UpdateProjectDataCachePaths$inboundSchema` instead. */
    UpdateProjectDataCachePaths$.inboundSchema = UpdateProjectDataCachePaths$inboundSchema;
    /** @deprecated use `UpdateProjectDataCachePaths$outboundSchema` instead. */
    UpdateProjectDataCachePaths$.outboundSchema = UpdateProjectDataCachePaths$outboundSchema;
})(UpdateProjectDataCachePaths$ || (UpdateProjectDataCachePaths$ = {}));
export function updateProjectDataCachePathsToJSON(updateProjectDataCachePaths) {
    return JSON.stringify(UpdateProjectDataCachePaths$outboundSchema.parse(updateProjectDataCachePaths));
}
export function updateProjectDataCachePathsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCachePaths$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCachePaths' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheOptionsAllowlist$inboundSchema = z.object({
    paths: z.array(z.lazy(() => UpdateProjectDataCachePaths$inboundSchema)),
});
/** @internal */
export const UpdateProjectDataCacheOptionsAllowlist$outboundSchema = z.object({
    paths: z.array(z.lazy(() => UpdateProjectDataCachePaths$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheOptionsAllowlist$;
(function (UpdateProjectDataCacheOptionsAllowlist$) {
    /** @deprecated use `UpdateProjectDataCacheOptionsAllowlist$inboundSchema` instead. */
    UpdateProjectDataCacheOptionsAllowlist$.inboundSchema = UpdateProjectDataCacheOptionsAllowlist$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheOptionsAllowlist$outboundSchema` instead. */
    UpdateProjectDataCacheOptionsAllowlist$.outboundSchema = UpdateProjectDataCacheOptionsAllowlist$outboundSchema;
})(UpdateProjectDataCacheOptionsAllowlist$ || (UpdateProjectDataCacheOptionsAllowlist$ = {}));
export function updateProjectDataCacheOptionsAllowlistToJSON(updateProjectDataCacheOptionsAllowlist) {
    return JSON.stringify(UpdateProjectDataCacheOptionsAllowlist$outboundSchema.parse(updateProjectDataCacheOptionsAllowlist));
}
export function updateProjectDataCacheOptionsAllowlistFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheOptionsAllowlist$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheOptionsAllowlist' from JSON`);
}
/** @internal */
export const UpdateProjectDataCachePasswordProtection$inboundSchema = z.object({});
/** @internal */
export const UpdateProjectDataCachePasswordProtection$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCachePasswordProtection$;
(function (UpdateProjectDataCachePasswordProtection$) {
    /** @deprecated use `UpdateProjectDataCachePasswordProtection$inboundSchema` instead. */
    UpdateProjectDataCachePasswordProtection$.inboundSchema = UpdateProjectDataCachePasswordProtection$inboundSchema;
    /** @deprecated use `UpdateProjectDataCachePasswordProtection$outboundSchema` instead. */
    UpdateProjectDataCachePasswordProtection$.outboundSchema = UpdateProjectDataCachePasswordProtection$outboundSchema;
})(UpdateProjectDataCachePasswordProtection$ || (UpdateProjectDataCachePasswordProtection$ = {}));
export function updateProjectDataCachePasswordProtectionToJSON(updateProjectDataCachePasswordProtection) {
    return JSON.stringify(UpdateProjectDataCachePasswordProtection$outboundSchema.parse(updateProjectDataCachePasswordProtection));
}
export function updateProjectDataCachePasswordProtectionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCachePasswordProtection$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCachePasswordProtection' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheProjectsFunctionDefaultMemoryType$inboundSchema = z.nativeEnum(UpdateProjectDataCacheProjectsFunctionDefaultMemoryType);
/** @internal */
export const UpdateProjectDataCacheProjectsFunctionDefaultMemoryType$outboundSchema = UpdateProjectDataCacheProjectsFunctionDefaultMemoryType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheProjectsFunctionDefaultMemoryType$;
(function (UpdateProjectDataCacheProjectsFunctionDefaultMemoryType$) {
    /** @deprecated use `UpdateProjectDataCacheProjectsFunctionDefaultMemoryType$inboundSchema` instead. */
    UpdateProjectDataCacheProjectsFunctionDefaultMemoryType$.inboundSchema = UpdateProjectDataCacheProjectsFunctionDefaultMemoryType$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheProjectsFunctionDefaultMemoryType$outboundSchema` instead. */
    UpdateProjectDataCacheProjectsFunctionDefaultMemoryType$.outboundSchema = UpdateProjectDataCacheProjectsFunctionDefaultMemoryType$outboundSchema;
})(UpdateProjectDataCacheProjectsFunctionDefaultMemoryType$ || (UpdateProjectDataCacheProjectsFunctionDefaultMemoryType$ = {}));
/** @internal */
export const UpdateProjectDataCacheProjectsBuildMachineType$inboundSchema = z
    .nativeEnum(UpdateProjectDataCacheProjectsBuildMachineType);
/** @internal */
export const UpdateProjectDataCacheProjectsBuildMachineType$outboundSchema = UpdateProjectDataCacheProjectsBuildMachineType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheProjectsBuildMachineType$;
(function (UpdateProjectDataCacheProjectsBuildMachineType$) {
    /** @deprecated use `UpdateProjectDataCacheProjectsBuildMachineType$inboundSchema` instead. */
    UpdateProjectDataCacheProjectsBuildMachineType$.inboundSchema = UpdateProjectDataCacheProjectsBuildMachineType$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheProjectsBuildMachineType$outboundSchema` instead. */
    UpdateProjectDataCacheProjectsBuildMachineType$.outboundSchema = UpdateProjectDataCacheProjectsBuildMachineType$outboundSchema;
})(UpdateProjectDataCacheProjectsBuildMachineType$ || (UpdateProjectDataCacheProjectsBuildMachineType$ = {}));
/** @internal */
export const UpdateProjectDataCacheResourceConfig$inboundSchema = z.object({
    fluid: z.boolean().optional(),
    functionDefaultRegions: z.array(z.string()),
    functionDefaultTimeout: z.number().optional(),
    functionDefaultMemoryType: UpdateProjectDataCacheProjectsFunctionDefaultMemoryType$inboundSchema
        .optional(),
    functionZeroConfigFailover: z.boolean().optional(),
    elasticConcurrencyEnabled: z.boolean().optional(),
    buildMachineType: UpdateProjectDataCacheProjectsBuildMachineType$inboundSchema
        .optional(),
    isNSNBDisabled: z.boolean().optional(),
});
/** @internal */
export const UpdateProjectDataCacheResourceConfig$outboundSchema = z.object({
    fluid: z.boolean().optional(),
    functionDefaultRegions: z.array(z.string()),
    functionDefaultTimeout: z.number().optional(),
    functionDefaultMemoryType: UpdateProjectDataCacheProjectsFunctionDefaultMemoryType$outboundSchema
        .optional(),
    functionZeroConfigFailover: z.boolean().optional(),
    elasticConcurrencyEnabled: z.boolean().optional(),
    buildMachineType: UpdateProjectDataCacheProjectsBuildMachineType$outboundSchema.optional(),
    isNSNBDisabled: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheResourceConfig$;
(function (UpdateProjectDataCacheResourceConfig$) {
    /** @deprecated use `UpdateProjectDataCacheResourceConfig$inboundSchema` instead. */
    UpdateProjectDataCacheResourceConfig$.inboundSchema = UpdateProjectDataCacheResourceConfig$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheResourceConfig$outboundSchema` instead. */
    UpdateProjectDataCacheResourceConfig$.outboundSchema = UpdateProjectDataCacheResourceConfig$outboundSchema;
})(UpdateProjectDataCacheResourceConfig$ || (UpdateProjectDataCacheResourceConfig$ = {}));
export function updateProjectDataCacheResourceConfigToJSON(updateProjectDataCacheResourceConfig) {
    return JSON.stringify(UpdateProjectDataCacheResourceConfig$outboundSchema.parse(updateProjectDataCacheResourceConfig));
}
export function updateProjectDataCacheResourceConfigFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheResourceConfig$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheResourceConfig' from JSON`);
}
/** @internal */
export const RollbackDescription$inboundSchema = z.object({
    userId: z.string(),
    username: z.string(),
    description: z.string(),
    createdAt: z.number(),
});
/** @internal */
export const RollbackDescription$outboundSchema = z.object({
    userId: z.string(),
    username: z.string(),
    description: z.string(),
    createdAt: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RollbackDescription$;
(function (RollbackDescription$) {
    /** @deprecated use `RollbackDescription$inboundSchema` instead. */
    RollbackDescription$.inboundSchema = RollbackDescription$inboundSchema;
    /** @deprecated use `RollbackDescription$outboundSchema` instead. */
    RollbackDescription$.outboundSchema = RollbackDescription$outboundSchema;
})(RollbackDescription$ || (RollbackDescription$ = {}));
export function rollbackDescriptionToJSON(rollbackDescription) {
    return JSON.stringify(RollbackDescription$outboundSchema.parse(rollbackDescription));
}
export function rollbackDescriptionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RollbackDescription$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RollbackDescription' from JSON`);
}
/** @internal */
export const Stages$inboundSchema = z
    .object({
    targetPercentage: z.number(),
    requireApproval: z.boolean().optional(),
    duration: z.number().optional(),
});
/** @internal */
export const Stages$outboundSchema = z.object({
    targetPercentage: z.number(),
    requireApproval: z.boolean().optional(),
    duration: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Stages$;
(function (Stages$) {
    /** @deprecated use `Stages$inboundSchema` instead. */
    Stages$.inboundSchema = Stages$inboundSchema;
    /** @deprecated use `Stages$outboundSchema` instead. */
    Stages$.outboundSchema = Stages$outboundSchema;
})(Stages$ || (Stages$ = {}));
export function stagesToJSON(stages) {
    return JSON.stringify(Stages$outboundSchema.parse(stages));
}
export function stagesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Stages$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Stages' from JSON`);
}
/** @internal */
export const RollingRelease$inboundSchema = z.object({
    target: z.string(),
    stages: z.nullable(z.array(z.lazy(() => Stages$inboundSchema))).optional(),
    canaryResponseHeader: z.boolean().optional(),
});
/** @internal */
export const RollingRelease$outboundSchema = z.object({
    target: z.string(),
    stages: z.nullable(z.array(z.lazy(() => Stages$outboundSchema))).optional(),
    canaryResponseHeader: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RollingRelease$;
(function (RollingRelease$) {
    /** @deprecated use `RollingRelease$inboundSchema` instead. */
    RollingRelease$.inboundSchema = RollingRelease$inboundSchema;
    /** @deprecated use `RollingRelease$outboundSchema` instead. */
    RollingRelease$.outboundSchema = RollingRelease$outboundSchema;
})(RollingRelease$ || (RollingRelease$ = {}));
export function rollingReleaseToJSON(rollingRelease) {
    return JSON.stringify(RollingRelease$outboundSchema.parse(rollingRelease));
}
export function rollingReleaseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RollingRelease$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RollingRelease' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheFunctionDefaultMemoryType$inboundSchema = z
    .nativeEnum(UpdateProjectDataCacheFunctionDefaultMemoryType);
/** @internal */
export const UpdateProjectDataCacheFunctionDefaultMemoryType$outboundSchema = UpdateProjectDataCacheFunctionDefaultMemoryType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheFunctionDefaultMemoryType$;
(function (UpdateProjectDataCacheFunctionDefaultMemoryType$) {
    /** @deprecated use `UpdateProjectDataCacheFunctionDefaultMemoryType$inboundSchema` instead. */
    UpdateProjectDataCacheFunctionDefaultMemoryType$.inboundSchema = UpdateProjectDataCacheFunctionDefaultMemoryType$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheFunctionDefaultMemoryType$outboundSchema` instead. */
    UpdateProjectDataCacheFunctionDefaultMemoryType$.outboundSchema = UpdateProjectDataCacheFunctionDefaultMemoryType$outboundSchema;
})(UpdateProjectDataCacheFunctionDefaultMemoryType$ || (UpdateProjectDataCacheFunctionDefaultMemoryType$ = {}));
/** @internal */
export const UpdateProjectDataCacheBuildMachineType$inboundSchema = z.nativeEnum(UpdateProjectDataCacheBuildMachineType);
/** @internal */
export const UpdateProjectDataCacheBuildMachineType$outboundSchema = UpdateProjectDataCacheBuildMachineType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheBuildMachineType$;
(function (UpdateProjectDataCacheBuildMachineType$) {
    /** @deprecated use `UpdateProjectDataCacheBuildMachineType$inboundSchema` instead. */
    UpdateProjectDataCacheBuildMachineType$.inboundSchema = UpdateProjectDataCacheBuildMachineType$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheBuildMachineType$outboundSchema` instead. */
    UpdateProjectDataCacheBuildMachineType$.outboundSchema = UpdateProjectDataCacheBuildMachineType$outboundSchema;
})(UpdateProjectDataCacheBuildMachineType$ || (UpdateProjectDataCacheBuildMachineType$ = {}));
/** @internal */
export const DefaultResourceConfig$inboundSchema = z.object({
    fluid: z.boolean().optional(),
    functionDefaultRegions: z.array(z.string()),
    functionDefaultTimeout: z.number().optional(),
    functionDefaultMemoryType: UpdateProjectDataCacheFunctionDefaultMemoryType$inboundSchema.optional(),
    functionZeroConfigFailover: z.boolean().optional(),
    elasticConcurrencyEnabled: z.boolean().optional(),
    buildMachineType: UpdateProjectDataCacheBuildMachineType$inboundSchema
        .optional(),
    isNSNBDisabled: z.boolean().optional(),
});
/** @internal */
export const DefaultResourceConfig$outboundSchema = z.object({
    fluid: z.boolean().optional(),
    functionDefaultRegions: z.array(z.string()),
    functionDefaultTimeout: z.number().optional(),
    functionDefaultMemoryType: UpdateProjectDataCacheFunctionDefaultMemoryType$outboundSchema.optional(),
    functionZeroConfigFailover: z.boolean().optional(),
    elasticConcurrencyEnabled: z.boolean().optional(),
    buildMachineType: UpdateProjectDataCacheBuildMachineType$outboundSchema
        .optional(),
    isNSNBDisabled: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DefaultResourceConfig$;
(function (DefaultResourceConfig$) {
    /** @deprecated use `DefaultResourceConfig$inboundSchema` instead. */
    DefaultResourceConfig$.inboundSchema = DefaultResourceConfig$inboundSchema;
    /** @deprecated use `DefaultResourceConfig$outboundSchema` instead. */
    DefaultResourceConfig$.outboundSchema = DefaultResourceConfig$outboundSchema;
})(DefaultResourceConfig$ || (DefaultResourceConfig$ = {}));
export function defaultResourceConfigToJSON(defaultResourceConfig) {
    return JSON.stringify(DefaultResourceConfig$outboundSchema.parse(defaultResourceConfig));
}
export function defaultResourceConfigFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DefaultResourceConfig$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DefaultResourceConfig' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheDeploymentType$inboundSchema = z.nativeEnum(UpdateProjectDataCacheDeploymentType);
/** @internal */
export const UpdateProjectDataCacheDeploymentType$outboundSchema = UpdateProjectDataCacheDeploymentType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheDeploymentType$;
(function (UpdateProjectDataCacheDeploymentType$) {
    /** @deprecated use `UpdateProjectDataCacheDeploymentType$inboundSchema` instead. */
    UpdateProjectDataCacheDeploymentType$.inboundSchema = UpdateProjectDataCacheDeploymentType$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheDeploymentType$outboundSchema` instead. */
    UpdateProjectDataCacheDeploymentType$.outboundSchema = UpdateProjectDataCacheDeploymentType$outboundSchema;
})(UpdateProjectDataCacheDeploymentType$ || (UpdateProjectDataCacheDeploymentType$ = {}));
/** @internal */
export const UpdateProjectDataCacheSsoProtection$inboundSchema = z.object({
    deploymentType: UpdateProjectDataCacheDeploymentType$inboundSchema,
});
/** @internal */
export const UpdateProjectDataCacheSsoProtection$outboundSchema = z.object({
    deploymentType: UpdateProjectDataCacheDeploymentType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheSsoProtection$;
(function (UpdateProjectDataCacheSsoProtection$) {
    /** @deprecated use `UpdateProjectDataCacheSsoProtection$inboundSchema` instead. */
    UpdateProjectDataCacheSsoProtection$.inboundSchema = UpdateProjectDataCacheSsoProtection$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheSsoProtection$outboundSchema` instead. */
    UpdateProjectDataCacheSsoProtection$.outboundSchema = UpdateProjectDataCacheSsoProtection$outboundSchema;
})(UpdateProjectDataCacheSsoProtection$ || (UpdateProjectDataCacheSsoProtection$ = {}));
export function updateProjectDataCacheSsoProtectionToJSON(updateProjectDataCacheSsoProtection) {
    return JSON.stringify(UpdateProjectDataCacheSsoProtection$outboundSchema.parse(updateProjectDataCacheSsoProtection));
}
export function updateProjectDataCacheSsoProtectionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheSsoProtection$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheSsoProtection' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheAliasAssigned$inboundSchema = z.union([z.number(), z.boolean()]);
/** @internal */
export const UpdateProjectDataCacheAliasAssigned$outboundSchema = z.union([z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheAliasAssigned$;
(function (UpdateProjectDataCacheAliasAssigned$) {
    /** @deprecated use `UpdateProjectDataCacheAliasAssigned$inboundSchema` instead. */
    UpdateProjectDataCacheAliasAssigned$.inboundSchema = UpdateProjectDataCacheAliasAssigned$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheAliasAssigned$outboundSchema` instead. */
    UpdateProjectDataCacheAliasAssigned$.outboundSchema = UpdateProjectDataCacheAliasAssigned$outboundSchema;
})(UpdateProjectDataCacheAliasAssigned$ || (UpdateProjectDataCacheAliasAssigned$ = {}));
export function updateProjectDataCacheAliasAssignedToJSON(updateProjectDataCacheAliasAssigned) {
    return JSON.stringify(UpdateProjectDataCacheAliasAssigned$outboundSchema.parse(updateProjectDataCacheAliasAssigned));
}
export function updateProjectDataCacheAliasAssignedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheAliasAssigned$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheAliasAssigned' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheAliasError$inboundSchema = z.object({
    code: z.string(),
    message: z.string(),
});
/** @internal */
export const UpdateProjectDataCacheAliasError$outboundSchema = z.object({
    code: z.string(),
    message: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheAliasError$;
(function (UpdateProjectDataCacheAliasError$) {
    /** @deprecated use `UpdateProjectDataCacheAliasError$inboundSchema` instead. */
    UpdateProjectDataCacheAliasError$.inboundSchema = UpdateProjectDataCacheAliasError$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheAliasError$outboundSchema` instead. */
    UpdateProjectDataCacheAliasError$.outboundSchema = UpdateProjectDataCacheAliasError$outboundSchema;
})(UpdateProjectDataCacheAliasError$ || (UpdateProjectDataCacheAliasError$ = {}));
export function updateProjectDataCacheAliasErrorToJSON(updateProjectDataCacheAliasError) {
    return JSON.stringify(UpdateProjectDataCacheAliasError$outboundSchema.parse(updateProjectDataCacheAliasError));
}
export function updateProjectDataCacheAliasErrorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheAliasError$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheAliasError' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema = z.nativeEnum(UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType);
/** @internal */
export const UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema = UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType$;
(function (UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType$) {
    /** @deprecated use `UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
    UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType$.inboundSchema = UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
    UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType$.outboundSchema = UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema;
})(UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType$ || (UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType$ = {}));
/** @internal */
export const UpdateProjectDataCacheProjectsBranchMatcher$inboundSchema = z.object({
    type: UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema,
    pattern: z.string(),
});
/** @internal */
export const UpdateProjectDataCacheProjectsBranchMatcher$outboundSchema = z.object({
    type: UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema,
    pattern: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheProjectsBranchMatcher$;
(function (UpdateProjectDataCacheProjectsBranchMatcher$) {
    /** @deprecated use `UpdateProjectDataCacheProjectsBranchMatcher$inboundSchema` instead. */
    UpdateProjectDataCacheProjectsBranchMatcher$.inboundSchema = UpdateProjectDataCacheProjectsBranchMatcher$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheProjectsBranchMatcher$outboundSchema` instead. */
    UpdateProjectDataCacheProjectsBranchMatcher$.outboundSchema = UpdateProjectDataCacheProjectsBranchMatcher$outboundSchema;
})(UpdateProjectDataCacheProjectsBranchMatcher$ || (UpdateProjectDataCacheProjectsBranchMatcher$ = {}));
export function updateProjectDataCacheProjectsBranchMatcherToJSON(updateProjectDataCacheProjectsBranchMatcher) {
    return JSON.stringify(UpdateProjectDataCacheProjectsBranchMatcher$outboundSchema.parse(updateProjectDataCacheProjectsBranchMatcher));
}
export function updateProjectDataCacheProjectsBranchMatcherFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheProjectsBranchMatcher$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheProjectsBranchMatcher' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheBuilds$inboundSchema = z.object({
    use: z.string(),
    src: z.string().optional(),
    dest: z.string().optional(),
});
/** @internal */
export const UpdateProjectDataCacheBuilds$outboundSchema = z.object({
    use: z.string(),
    src: z.string().optional(),
    dest: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheBuilds$;
(function (UpdateProjectDataCacheBuilds$) {
    /** @deprecated use `UpdateProjectDataCacheBuilds$inboundSchema` instead. */
    UpdateProjectDataCacheBuilds$.inboundSchema = UpdateProjectDataCacheBuilds$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheBuilds$outboundSchema` instead. */
    UpdateProjectDataCacheBuilds$.outboundSchema = UpdateProjectDataCacheBuilds$outboundSchema;
})(UpdateProjectDataCacheBuilds$ || (UpdateProjectDataCacheBuilds$ = {}));
export function updateProjectDataCacheBuildsToJSON(updateProjectDataCacheBuilds) {
    return JSON.stringify(UpdateProjectDataCacheBuilds$outboundSchema.parse(updateProjectDataCacheBuilds));
}
export function updateProjectDataCacheBuildsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheBuilds$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheBuilds' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheChecksConclusion$inboundSchema = z.nativeEnum(UpdateProjectDataCacheChecksConclusion);
/** @internal */
export const UpdateProjectDataCacheChecksConclusion$outboundSchema = UpdateProjectDataCacheChecksConclusion$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheChecksConclusion$;
(function (UpdateProjectDataCacheChecksConclusion$) {
    /** @deprecated use `UpdateProjectDataCacheChecksConclusion$inboundSchema` instead. */
    UpdateProjectDataCacheChecksConclusion$.inboundSchema = UpdateProjectDataCacheChecksConclusion$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheChecksConclusion$outboundSchema` instead. */
    UpdateProjectDataCacheChecksConclusion$.outboundSchema = UpdateProjectDataCacheChecksConclusion$outboundSchema;
})(UpdateProjectDataCacheChecksConclusion$ || (UpdateProjectDataCacheChecksConclusion$ = {}));
/** @internal */
export const UpdateProjectDataCacheChecksState$inboundSchema = z.nativeEnum(UpdateProjectDataCacheChecksState);
/** @internal */
export const UpdateProjectDataCacheChecksState$outboundSchema = UpdateProjectDataCacheChecksState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheChecksState$;
(function (UpdateProjectDataCacheChecksState$) {
    /** @deprecated use `UpdateProjectDataCacheChecksState$inboundSchema` instead. */
    UpdateProjectDataCacheChecksState$.inboundSchema = UpdateProjectDataCacheChecksState$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheChecksState$outboundSchema` instead. */
    UpdateProjectDataCacheChecksState$.outboundSchema = UpdateProjectDataCacheChecksState$outboundSchema;
})(UpdateProjectDataCacheChecksState$ || (UpdateProjectDataCacheChecksState$ = {}));
/** @internal */
export const UpdateProjectDataCacheCreator$inboundSchema = z.object({
    email: z.string(),
    githubLogin: z.string().optional(),
    gitlabLogin: z.string().optional(),
    uid: z.string(),
    username: z.string(),
});
/** @internal */
export const UpdateProjectDataCacheCreator$outboundSchema = z.object({
    email: z.string(),
    githubLogin: z.string().optional(),
    gitlabLogin: z.string().optional(),
    uid: z.string(),
    username: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheCreator$;
(function (UpdateProjectDataCacheCreator$) {
    /** @deprecated use `UpdateProjectDataCacheCreator$inboundSchema` instead. */
    UpdateProjectDataCacheCreator$.inboundSchema = UpdateProjectDataCacheCreator$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheCreator$outboundSchema` instead. */
    UpdateProjectDataCacheCreator$.outboundSchema = UpdateProjectDataCacheCreator$outboundSchema;
})(UpdateProjectDataCacheCreator$ || (UpdateProjectDataCacheCreator$ = {}));
export function updateProjectDataCacheCreatorToJSON(updateProjectDataCacheCreator) {
    return JSON.stringify(UpdateProjectDataCacheCreator$outboundSchema.parse(updateProjectDataCacheCreator));
}
export function updateProjectDataCacheCreatorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheCreator$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheCreator' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheOidcTokenClaims$inboundSchema = z.object({
    iss: z.string(),
    sub: z.string(),
    scope: z.string(),
    aud: z.string(),
    owner: z.string(),
    owner_id: z.string(),
    project: z.string(),
    project_id: z.string(),
    environment: z.string(),
}).transform((v) => {
    return remap$(v, {
        "owner_id": "ownerId",
        "project_id": "projectId",
    });
});
/** @internal */
export const UpdateProjectDataCacheOidcTokenClaims$outboundSchema = z.object({
    iss: z.string(),
    sub: z.string(),
    scope: z.string(),
    aud: z.string(),
    owner: z.string(),
    ownerId: z.string(),
    project: z.string(),
    projectId: z.string(),
    environment: z.string(),
}).transform((v) => {
    return remap$(v, {
        ownerId: "owner_id",
        projectId: "project_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheOidcTokenClaims$;
(function (UpdateProjectDataCacheOidcTokenClaims$) {
    /** @deprecated use `UpdateProjectDataCacheOidcTokenClaims$inboundSchema` instead. */
    UpdateProjectDataCacheOidcTokenClaims$.inboundSchema = UpdateProjectDataCacheOidcTokenClaims$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheOidcTokenClaims$outboundSchema` instead. */
    UpdateProjectDataCacheOidcTokenClaims$.outboundSchema = UpdateProjectDataCacheOidcTokenClaims$outboundSchema;
})(UpdateProjectDataCacheOidcTokenClaims$ || (UpdateProjectDataCacheOidcTokenClaims$ = {}));
export function updateProjectDataCacheOidcTokenClaimsToJSON(updateProjectDataCacheOidcTokenClaims) {
    return JSON.stringify(UpdateProjectDataCacheOidcTokenClaims$outboundSchema.parse(updateProjectDataCacheOidcTokenClaims));
}
export function updateProjectDataCacheOidcTokenClaimsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheOidcTokenClaims$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheOidcTokenClaims' from JSON`);
}
/** @internal */
export const UpdateProjectDataCachePlan$inboundSchema = z.nativeEnum(UpdateProjectDataCachePlan);
/** @internal */
export const UpdateProjectDataCachePlan$outboundSchema = UpdateProjectDataCachePlan$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCachePlan$;
(function (UpdateProjectDataCachePlan$) {
    /** @deprecated use `UpdateProjectDataCachePlan$inboundSchema` instead. */
    UpdateProjectDataCachePlan$.inboundSchema = UpdateProjectDataCachePlan$inboundSchema;
    /** @deprecated use `UpdateProjectDataCachePlan$outboundSchema` instead. */
    UpdateProjectDataCachePlan$.outboundSchema = UpdateProjectDataCachePlan$outboundSchema;
})(UpdateProjectDataCachePlan$ || (UpdateProjectDataCachePlan$ = {}));
/** @internal */
export const UpdateProjectDataCacheReadyState$inboundSchema = z.nativeEnum(UpdateProjectDataCacheReadyState);
/** @internal */
export const UpdateProjectDataCacheReadyState$outboundSchema = UpdateProjectDataCacheReadyState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheReadyState$;
(function (UpdateProjectDataCacheReadyState$) {
    /** @deprecated use `UpdateProjectDataCacheReadyState$inboundSchema` instead. */
    UpdateProjectDataCacheReadyState$.inboundSchema = UpdateProjectDataCacheReadyState$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheReadyState$outboundSchema` instead. */
    UpdateProjectDataCacheReadyState$.outboundSchema = UpdateProjectDataCacheReadyState$outboundSchema;
})(UpdateProjectDataCacheReadyState$ || (UpdateProjectDataCacheReadyState$ = {}));
/** @internal */
export const UpdateProjectDataCacheReadySubstate$inboundSchema = z.nativeEnum(UpdateProjectDataCacheReadySubstate);
/** @internal */
export const UpdateProjectDataCacheReadySubstate$outboundSchema = UpdateProjectDataCacheReadySubstate$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheReadySubstate$;
(function (UpdateProjectDataCacheReadySubstate$) {
    /** @deprecated use `UpdateProjectDataCacheReadySubstate$inboundSchema` instead. */
    UpdateProjectDataCacheReadySubstate$.inboundSchema = UpdateProjectDataCacheReadySubstate$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheReadySubstate$outboundSchema` instead. */
    UpdateProjectDataCacheReadySubstate$.outboundSchema = UpdateProjectDataCacheReadySubstate$outboundSchema;
})(UpdateProjectDataCacheReadySubstate$ || (UpdateProjectDataCacheReadySubstate$ = {}));
/** @internal */
export const UpdateProjectDataCacheProjectsResponseType$inboundSchema = z
    .nativeEnum(UpdateProjectDataCacheProjectsResponseType);
/** @internal */
export const UpdateProjectDataCacheProjectsResponseType$outboundSchema = UpdateProjectDataCacheProjectsResponseType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheProjectsResponseType$;
(function (UpdateProjectDataCacheProjectsResponseType$) {
    /** @deprecated use `UpdateProjectDataCacheProjectsResponseType$inboundSchema` instead. */
    UpdateProjectDataCacheProjectsResponseType$.inboundSchema = UpdateProjectDataCacheProjectsResponseType$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheProjectsResponseType$outboundSchema` instead. */
    UpdateProjectDataCacheProjectsResponseType$.outboundSchema = UpdateProjectDataCacheProjectsResponseType$outboundSchema;
})(UpdateProjectDataCacheProjectsResponseType$ || (UpdateProjectDataCacheProjectsResponseType$ = {}));
/** @internal */
export const Targets$inboundSchema = z.object({
    id: z.string(),
    alias: z.array(z.string()).optional(),
    aliasAssigned: z.nullable(z.union([z.number(), z.boolean()])).optional(),
    aliasError: z.nullable(z.lazy(() => UpdateProjectDataCacheAliasError$inboundSchema)).optional(),
    aliasFinal: z.nullable(z.string()).optional(),
    automaticAliases: z.array(z.string()).optional(),
    branchMatcher: z.lazy(() => UpdateProjectDataCacheProjectsBranchMatcher$inboundSchema).optional(),
    buildingAt: z.number().optional(),
    builds: z.array(z.lazy(() => UpdateProjectDataCacheBuilds$inboundSchema))
        .optional(),
    checksConclusion: UpdateProjectDataCacheChecksConclusion$inboundSchema
        .optional(),
    checksState: UpdateProjectDataCacheChecksState$inboundSchema.optional(),
    connectBuildsEnabled: z.boolean().optional(),
    connectConfigurationId: z.string().optional(),
    createdAt: z.number(),
    createdIn: z.string(),
    creator: z.nullable(z.lazy(() => UpdateProjectDataCacheCreator$inboundSchema)),
    deletedAt: z.number().optional(),
    deploymentHostname: z.string(),
    forced: z.boolean().optional(),
    name: z.string(),
    meta: z.record(z.string()).optional(),
    monorepoManager: z.nullable(z.string()).optional(),
    oidcTokenClaims: z.lazy(() => UpdateProjectDataCacheOidcTokenClaims$inboundSchema).optional(),
    plan: UpdateProjectDataCachePlan$inboundSchema,
    previewCommentsEnabled: z.boolean().optional(),
    private: z.boolean(),
    readyAt: z.number().optional(),
    readyState: UpdateProjectDataCacheReadyState$inboundSchema,
    readySubstate: UpdateProjectDataCacheReadySubstate$inboundSchema.optional(),
    requestedAt: z.number().optional(),
    target: z.nullable(z.string()).optional(),
    teamId: z.nullable(z.string()).optional(),
    type: UpdateProjectDataCacheProjectsResponseType$inboundSchema,
    url: z.string(),
    userId: z.string(),
    withCache: z.boolean().optional(),
});
/** @internal */
export const Targets$outboundSchema = z.object({
    id: z.string(),
    alias: z.array(z.string()).optional(),
    aliasAssigned: z.nullable(z.union([z.number(), z.boolean()])).optional(),
    aliasError: z.nullable(z.lazy(() => UpdateProjectDataCacheAliasError$outboundSchema)).optional(),
    aliasFinal: z.nullable(z.string()).optional(),
    automaticAliases: z.array(z.string()).optional(),
    branchMatcher: z.lazy(() => UpdateProjectDataCacheProjectsBranchMatcher$outboundSchema).optional(),
    buildingAt: z.number().optional(),
    builds: z.array(z.lazy(() => UpdateProjectDataCacheBuilds$outboundSchema))
        .optional(),
    checksConclusion: UpdateProjectDataCacheChecksConclusion$outboundSchema
        .optional(),
    checksState: UpdateProjectDataCacheChecksState$outboundSchema.optional(),
    connectBuildsEnabled: z.boolean().optional(),
    connectConfigurationId: z.string().optional(),
    createdAt: z.number(),
    createdIn: z.string(),
    creator: z.nullable(z.lazy(() => UpdateProjectDataCacheCreator$outboundSchema)),
    deletedAt: z.number().optional(),
    deploymentHostname: z.string(),
    forced: z.boolean().optional(),
    name: z.string(),
    meta: z.record(z.string()).optional(),
    monorepoManager: z.nullable(z.string()).optional(),
    oidcTokenClaims: z.lazy(() => UpdateProjectDataCacheOidcTokenClaims$outboundSchema).optional(),
    plan: UpdateProjectDataCachePlan$outboundSchema,
    previewCommentsEnabled: z.boolean().optional(),
    private: z.boolean(),
    readyAt: z.number().optional(),
    readyState: UpdateProjectDataCacheReadyState$outboundSchema,
    readySubstate: UpdateProjectDataCacheReadySubstate$outboundSchema.optional(),
    requestedAt: z.number().optional(),
    target: z.nullable(z.string()).optional(),
    teamId: z.nullable(z.string()).optional(),
    type: UpdateProjectDataCacheProjectsResponseType$outboundSchema,
    url: z.string(),
    userId: z.string(),
    withCache: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Targets$;
(function (Targets$) {
    /** @deprecated use `Targets$inboundSchema` instead. */
    Targets$.inboundSchema = Targets$inboundSchema;
    /** @deprecated use `Targets$outboundSchema` instead. */
    Targets$.outboundSchema = Targets$outboundSchema;
})(Targets$ || (Targets$ = {}));
export function targetsToJSON(targets) {
    return JSON.stringify(Targets$outboundSchema.parse(targets));
}
export function targetsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Targets$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Targets' from JSON`);
}
/** @internal */
export const Permissions$inboundSchema = z.object({
    oauth2Connection: z.array(ACLAction$inboundSchema).optional(),
    user: z.array(ACLAction$inboundSchema).optional(),
    userConnection: z.array(ACLAction$inboundSchema).optional(),
    userSudo: z.array(ACLAction$inboundSchema).optional(),
    webAuthn: z.array(ACLAction$inboundSchema).optional(),
    accessGroup: z.array(ACLAction$inboundSchema).optional(),
    aliasGlobal: z.array(ACLAction$inboundSchema).optional(),
    analyticsSampling: z.array(ACLAction$inboundSchema).optional(),
    analyticsUsage: z.array(ACLAction$inboundSchema).optional(),
    auditLog: z.array(ACLAction$inboundSchema).optional(),
    billingAddress: z.array(ACLAction$inboundSchema).optional(),
    billingInformation: z.array(ACLAction$inboundSchema).optional(),
    billingInvoice: z.array(ACLAction$inboundSchema).optional(),
    billingInvoiceEmailRecipient: z.array(ACLAction$inboundSchema).optional(),
    billingInvoiceLanguage: z.array(ACLAction$inboundSchema).optional(),
    billingPlan: z.array(ACLAction$inboundSchema).optional(),
    billingPurchaseOrder: z.array(ACLAction$inboundSchema).optional(),
    billingRefund: z.array(ACLAction$inboundSchema).optional(),
    billingTaxId: z.array(ACLAction$inboundSchema).optional(),
    blob: z.array(ACLAction$inboundSchema).optional(),
    budget: z.array(ACLAction$inboundSchema).optional(),
    cacheArtifact: z.array(ACLAction$inboundSchema).optional(),
    cacheArtifactUsageEvent: z.array(ACLAction$inboundSchema).optional(),
    codeChecks: z.array(ACLAction$inboundSchema).optional(),
    concurrentBuilds: z.array(ACLAction$inboundSchema).optional(),
    connect: z.array(ACLAction$inboundSchema).optional(),
    connectConfiguration: z.array(ACLAction$inboundSchema).optional(),
    defaultDeploymentProtection: z.array(ACLAction$inboundSchema).optional(),
    domain: z.array(ACLAction$inboundSchema).optional(),
    domainAcceptDelegation: z.array(ACLAction$inboundSchema).optional(),
    domainAuthCodes: z.array(ACLAction$inboundSchema).optional(),
    domainCertificate: z.array(ACLAction$inboundSchema).optional(),
    domainCheckConfig: z.array(ACLAction$inboundSchema).optional(),
    domainMove: z.array(ACLAction$inboundSchema).optional(),
    domainPurchase: z.array(ACLAction$inboundSchema).optional(),
    domainRecord: z.array(ACLAction$inboundSchema).optional(),
    domainTransferIn: z.array(ACLAction$inboundSchema).optional(),
    event: z.array(ACLAction$inboundSchema).optional(),
    ownEvent: z.array(ACLAction$inboundSchema).optional(),
    sensitiveEnvironmentVariablePolicy: z.array(ACLAction$inboundSchema)
        .optional(),
    fileUpload: z.array(ACLAction$inboundSchema).optional(),
    flagsExplorerSubscription: z.array(ACLAction$inboundSchema).optional(),
    gitRepository: z.array(ACLAction$inboundSchema).optional(),
    ipBlocking: z.array(ACLAction$inboundSchema).optional(),
    imageOptimizationNewPrice: z.array(ACLAction$inboundSchema).optional(),
    integration: z.array(ACLAction$inboundSchema).optional(),
    integrationAccount: z.array(ACLAction$inboundSchema).optional(),
    integrationConfiguration: z.array(ACLAction$inboundSchema).optional(),
    integrationConfigurationTransfer: z.array(ACLAction$inboundSchema).optional(),
    integrationConfigurationProjects: z.array(ACLAction$inboundSchema).optional(),
    integrationVercelConfigurationOverride: z.array(ACLAction$inboundSchema)
        .optional(),
    integrationConfigurationRole: z.array(ACLAction$inboundSchema).optional(),
    integrationSSOSession: z.array(ACLAction$inboundSchema).optional(),
    integrationResource: z.array(ACLAction$inboundSchema).optional(),
    integrationEvent: z.array(ACLAction$inboundSchema).optional(),
    integrationResourceSecrets: z.array(ACLAction$inboundSchema).optional(),
    integrationDeploymentAction: z.array(ACLAction$inboundSchema).optional(),
    marketplaceInstallationMember: z.array(ACLAction$inboundSchema).optional(),
    marketplaceBillingData: z.array(ACLAction$inboundSchema).optional(),
    marketplaceInvoice: z.array(ACLAction$inboundSchema).optional(),
    marketplaceSettings: z.array(ACLAction$inboundSchema).optional(),
    marketplaceExperimentationItem: z.array(ACLAction$inboundSchema).optional(),
    marketplaceExperimentationEdgeConfigData: z.array(ACLAction$inboundSchema)
        .optional(),
    jobGlobal: z.array(ACLAction$inboundSchema).optional(),
    drain: z.array(ACLAction$inboundSchema).optional(),
    logDrain: z.array(ACLAction$inboundSchema).optional(),
    traceDrain: z.array(ACLAction$inboundSchema).optional(),
    Monitoring: z.array(ACLAction$inboundSchema).optional(),
    monitoringSettings: z.array(ACLAction$inboundSchema).optional(),
    monitoringQuery: z.array(ACLAction$inboundSchema).optional(),
    monitoringChart: z.array(ACLAction$inboundSchema).optional(),
    monitoringAlert: z.array(ACLAction$inboundSchema).optional(),
    notificationDeploymentFailed: z.array(ACLAction$inboundSchema).optional(),
    notificationDomainConfiguration: z.array(ACLAction$inboundSchema).optional(),
    notificationDomainExpire: z.array(ACLAction$inboundSchema).optional(),
    notificationDomainMoved: z.array(ACLAction$inboundSchema).optional(),
    notificationDomainPurchase: z.array(ACLAction$inboundSchema).optional(),
    notificationDomainRenewal: z.array(ACLAction$inboundSchema).optional(),
    notificationDomainTransfer: z.array(ACLAction$inboundSchema).optional(),
    notificationDomainUnverified: z.array(ACLAction$inboundSchema).optional(),
    NotificationMonitoringAlert: z.array(ACLAction$inboundSchema).optional(),
    notificationPaymentFailed: z.array(ACLAction$inboundSchema).optional(),
    notificationUsageAlert: z.array(ACLAction$inboundSchema).optional(),
    notificationPreferences: z.array(ACLAction$inboundSchema).optional(),
    notificationCustomerBudget: z.array(ACLAction$inboundSchema).optional(),
    notificationStatementOfReasons: z.array(ACLAction$inboundSchema).optional(),
    observabilityConfiguration: z.array(ACLAction$inboundSchema).optional(),
    alerts: z.array(ACLAction$inboundSchema).optional(),
    observabilityNotebook: z.array(ACLAction$inboundSchema).optional(),
    observabilityFunnel: z.array(ACLAction$inboundSchema).optional(),
    openTelemetryEndpoint: z.array(ACLAction$inboundSchema).optional(),
    vercelAppInstallation: z.array(ACLAction$inboundSchema).optional(),
    vercelAppInstallationRequest: z.array(ACLAction$inboundSchema).optional(),
    paymentMethod: z.array(ACLAction$inboundSchema).optional(),
    permissions: z.array(ACLAction$inboundSchema).optional(),
    postgres: z.array(ACLAction$inboundSchema).optional(),
    previewDeploymentSuffix: z.array(ACLAction$inboundSchema).optional(),
    proTrialOnboarding: z.array(ACLAction$inboundSchema).optional(),
    sharedEnvVars: z.array(ACLAction$inboundSchema).optional(),
    sharedEnvVarsProduction: z.array(ACLAction$inboundSchema).optional(),
    space: z.array(ACLAction$inboundSchema).optional(),
    spaceRun: z.array(ACLAction$inboundSchema).optional(),
    passwordProtectionInvoiceItem: z.array(ACLAction$inboundSchema).optional(),
    rateLimit: z.array(ACLAction$inboundSchema).optional(),
    redis: z.array(ACLAction$inboundSchema).optional(),
    repository: z.array(ACLAction$inboundSchema).optional(),
    remoteCaching: z.array(ACLAction$inboundSchema).optional(),
    samlConfig: z.array(ACLAction$inboundSchema).optional(),
    secret: z.array(ACLAction$inboundSchema).optional(),
    redisStoreTokenSet: z.array(ACLAction$inboundSchema).optional(),
    blobStoreTokenSet: z.array(ACLAction$inboundSchema).optional(),
    postgresStoreTokenSet: z.array(ACLAction$inboundSchema).optional(),
    integrationStoreTokenSet: z.array(ACLAction$inboundSchema).optional(),
    integrationResourceReplCommand: z.array(ACLAction$inboundSchema).optional(),
    storeTransfer: z.array(ACLAction$inboundSchema).optional(),
    supportCase: z.array(ACLAction$inboundSchema).optional(),
    supportCaseComment: z.array(ACLAction$inboundSchema).optional(),
    dataCacheBillingSettings: z.array(ACLAction$inboundSchema).optional(),
    team: z.array(ACLAction$inboundSchema).optional(),
    teamAccessRequest: z.array(ACLAction$inboundSchema).optional(),
    teamFellowMembership: z.array(ACLAction$inboundSchema).optional(),
    teamGitExclusivity: z.array(ACLAction$inboundSchema).optional(),
    teamInvite: z.array(ACLAction$inboundSchema).optional(),
    teamInviteCode: z.array(ACLAction$inboundSchema).optional(),
    teamJoin: z.array(ACLAction$inboundSchema).optional(),
    teamMemberMfaStatus: z.array(ACLAction$inboundSchema).optional(),
    teamMicrofrontends: z.array(ACLAction$inboundSchema).optional(),
    teamOwnMembership: z.array(ACLAction$inboundSchema).optional(),
    teamOwnMembershipDisconnectSAML: z.array(ACLAction$inboundSchema).optional(),
    token: z.array(ACLAction$inboundSchema).optional(),
    usage: z.array(ACLAction$inboundSchema).optional(),
    usageCycle: z.array(ACLAction$inboundSchema).optional(),
    vpcPeeringConnection: z.array(ACLAction$inboundSchema).optional(),
    webAnalyticsPlan: z.array(ACLAction$inboundSchema).optional(),
    edgeConfig: z.array(ACLAction$inboundSchema).optional(),
    edgeConfigItem: z.array(ACLAction$inboundSchema).optional(),
    edgeConfigSchema: z.array(ACLAction$inboundSchema).optional(),
    edgeConfigToken: z.array(ACLAction$inboundSchema).optional(),
    webhook: z.array(ACLAction$inboundSchema).optional(),
    "webhook-event": z.array(ACLAction$inboundSchema).optional(),
    endpointVerification: z.array(ACLAction$inboundSchema).optional(),
    projectTransferIn: z.array(ACLAction$inboundSchema).optional(),
    oauth2Application: z.array(ACLAction$inboundSchema).optional(),
    vercelRun: z.array(ACLAction$inboundSchema).optional(),
    vercelRunExec: z.array(ACLAction$inboundSchema).optional(),
    apiKey: z.array(ACLAction$inboundSchema).optional(),
    apiKeyOwnedBySelf: z.array(ACLAction$inboundSchema).optional(),
    aliasProject: z.array(ACLAction$inboundSchema).optional(),
    aliasProtectionBypass: z.array(ACLAction$inboundSchema).optional(),
    buildMachine: z.array(ACLAction$inboundSchema).optional(),
    productionAliasProtectionBypass: z.array(ACLAction$inboundSchema).optional(),
    connectConfigurationLink: z.array(ACLAction$inboundSchema).optional(),
    dataCacheNamespace: z.array(ACLAction$inboundSchema).optional(),
    deployment: z.array(ACLAction$inboundSchema).optional(),
    deploymentBuildLogs: z.array(ACLAction$inboundSchema).optional(),
    deploymentCheck: z.array(ACLAction$inboundSchema).optional(),
    deploymentCheckPreview: z.array(ACLAction$inboundSchema).optional(),
    deploymentCheckReRunFromProductionBranch: z.array(ACLAction$inboundSchema)
        .optional(),
    deploymentProductionGit: z.array(ACLAction$inboundSchema).optional(),
    deploymentV0: z.array(ACLAction$inboundSchema).optional(),
    deploymentPreview: z.array(ACLAction$inboundSchema).optional(),
    deploymentPrivate: z.array(ACLAction$inboundSchema).optional(),
    deploymentPromote: z.array(ACLAction$inboundSchema).optional(),
    deploymentRollback: z.array(ACLAction$inboundSchema).optional(),
    edgeCacheNamespace: z.array(ACLAction$inboundSchema).optional(),
    environments: z.array(ACLAction$inboundSchema).optional(),
    logs: z.array(ACLAction$inboundSchema).optional(),
    logsPreset: z.array(ACLAction$inboundSchema).optional(),
    passwordProtection: z.array(ACLAction$inboundSchema).optional(),
    optionsAllowlist: z.array(ACLAction$inboundSchema).optional(),
    job: z.array(ACLAction$inboundSchema).optional(),
    observabilityData: z.array(ACLAction$inboundSchema).optional(),
    onDemandBuild: z.array(ACLAction$inboundSchema).optional(),
    onDemandConcurrency: z.array(ACLAction$inboundSchema).optional(),
    project: z.array(ACLAction$inboundSchema).optional(),
    projectFromV0: z.array(ACLAction$inboundSchema).optional(),
    projectAccessGroup: z.array(ACLAction$inboundSchema).optional(),
    projectAnalyticsSampling: z.array(ACLAction$inboundSchema).optional(),
    projectCheck: z.array(ACLAction$inboundSchema).optional(),
    projectCheckRun: z.array(ACLAction$inboundSchema).optional(),
    projectDeploymentHook: z.array(ACLAction$inboundSchema).optional(),
    projectDomain: z.array(ACLAction$inboundSchema).optional(),
    projectDomainMove: z.array(ACLAction$inboundSchema).optional(),
    projectDomainCheckConfig: z.array(ACLAction$inboundSchema).optional(),
    projectEnvVars: z.array(ACLAction$inboundSchema).optional(),
    projectEnvVarsProduction: z.array(ACLAction$inboundSchema).optional(),
    projectEnvVarsUnownedByIntegration: z.array(ACLAction$inboundSchema)
        .optional(),
    projectFlags: z.array(ACLAction$inboundSchema).optional(),
    projectId: z.array(ACLAction$inboundSchema).optional(),
    projectIntegrationConfiguration: z.array(ACLAction$inboundSchema).optional(),
    projectLink: z.array(ACLAction$inboundSchema).optional(),
    projectMember: z.array(ACLAction$inboundSchema).optional(),
    projectMonitoring: z.array(ACLAction$inboundSchema).optional(),
    projectPermissions: z.array(ACLAction$inboundSchema).optional(),
    projectProductionBranch: z.array(ACLAction$inboundSchema).optional(),
    projectTransfer: z.array(ACLAction$inboundSchema).optional(),
    projectTransferOut: z.array(ACLAction$inboundSchema).optional(),
    projectProtectionBypass: z.array(ACLAction$inboundSchema).optional(),
    projectUsage: z.array(ACLAction$inboundSchema).optional(),
    projectAnalyticsUsage: z.array(ACLAction$inboundSchema).optional(),
    projectSupportCase: z.array(ACLAction$inboundSchema).optional(),
    projectSupportCaseComment: z.array(ACLAction$inboundSchema).optional(),
    projectDeploymentExpiration: z.array(ACLAction$inboundSchema).optional(),
    projectRollingRelease: z.array(ACLAction$inboundSchema).optional(),
    projectTier: z.array(ACLAction$inboundSchema).optional(),
    projectOIDCToken: z.array(ACLAction$inboundSchema).optional(),
    seawallConfig: z.array(ACLAction$inboundSchema).optional(),
    skewProtection: z.array(ACLAction$inboundSchema).optional(),
    analytics: z.array(ACLAction$inboundSchema).optional(),
    trustedIps: z.array(ACLAction$inboundSchema).optional(),
    v0Chat: z.array(ACLAction$inboundSchema).optional(),
    webAnalytics: z.array(ACLAction$inboundSchema).optional(),
    sharedEnvVarConnection: z.array(ACLAction$inboundSchema).optional(),
    sonar: z.array(ACLAction$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "Monitoring": "monitoring",
        "NotificationMonitoringAlert": "notificationMonitoringAlert",
        "webhook-event": "webhookEvent",
    });
});
/** @internal */
export const Permissions$outboundSchema = z.object({
    oauth2Connection: z.array(ACLAction$outboundSchema).optional(),
    user: z.array(ACLAction$outboundSchema).optional(),
    userConnection: z.array(ACLAction$outboundSchema).optional(),
    userSudo: z.array(ACLAction$outboundSchema).optional(),
    webAuthn: z.array(ACLAction$outboundSchema).optional(),
    accessGroup: z.array(ACLAction$outboundSchema).optional(),
    aliasGlobal: z.array(ACLAction$outboundSchema).optional(),
    analyticsSampling: z.array(ACLAction$outboundSchema).optional(),
    analyticsUsage: z.array(ACLAction$outboundSchema).optional(),
    auditLog: z.array(ACLAction$outboundSchema).optional(),
    billingAddress: z.array(ACLAction$outboundSchema).optional(),
    billingInformation: z.array(ACLAction$outboundSchema).optional(),
    billingInvoice: z.array(ACLAction$outboundSchema).optional(),
    billingInvoiceEmailRecipient: z.array(ACLAction$outboundSchema).optional(),
    billingInvoiceLanguage: z.array(ACLAction$outboundSchema).optional(),
    billingPlan: z.array(ACLAction$outboundSchema).optional(),
    billingPurchaseOrder: z.array(ACLAction$outboundSchema).optional(),
    billingRefund: z.array(ACLAction$outboundSchema).optional(),
    billingTaxId: z.array(ACLAction$outboundSchema).optional(),
    blob: z.array(ACLAction$outboundSchema).optional(),
    budget: z.array(ACLAction$outboundSchema).optional(),
    cacheArtifact: z.array(ACLAction$outboundSchema).optional(),
    cacheArtifactUsageEvent: z.array(ACLAction$outboundSchema).optional(),
    codeChecks: z.array(ACLAction$outboundSchema).optional(),
    concurrentBuilds: z.array(ACLAction$outboundSchema).optional(),
    connect: z.array(ACLAction$outboundSchema).optional(),
    connectConfiguration: z.array(ACLAction$outboundSchema).optional(),
    defaultDeploymentProtection: z.array(ACLAction$outboundSchema).optional(),
    domain: z.array(ACLAction$outboundSchema).optional(),
    domainAcceptDelegation: z.array(ACLAction$outboundSchema).optional(),
    domainAuthCodes: z.array(ACLAction$outboundSchema).optional(),
    domainCertificate: z.array(ACLAction$outboundSchema).optional(),
    domainCheckConfig: z.array(ACLAction$outboundSchema).optional(),
    domainMove: z.array(ACLAction$outboundSchema).optional(),
    domainPurchase: z.array(ACLAction$outboundSchema).optional(),
    domainRecord: z.array(ACLAction$outboundSchema).optional(),
    domainTransferIn: z.array(ACLAction$outboundSchema).optional(),
    event: z.array(ACLAction$outboundSchema).optional(),
    ownEvent: z.array(ACLAction$outboundSchema).optional(),
    sensitiveEnvironmentVariablePolicy: z.array(ACLAction$outboundSchema)
        .optional(),
    fileUpload: z.array(ACLAction$outboundSchema).optional(),
    flagsExplorerSubscription: z.array(ACLAction$outboundSchema).optional(),
    gitRepository: z.array(ACLAction$outboundSchema).optional(),
    ipBlocking: z.array(ACLAction$outboundSchema).optional(),
    imageOptimizationNewPrice: z.array(ACLAction$outboundSchema).optional(),
    integration: z.array(ACLAction$outboundSchema).optional(),
    integrationAccount: z.array(ACLAction$outboundSchema).optional(),
    integrationConfiguration: z.array(ACLAction$outboundSchema).optional(),
    integrationConfigurationTransfer: z.array(ACLAction$outboundSchema)
        .optional(),
    integrationConfigurationProjects: z.array(ACLAction$outboundSchema)
        .optional(),
    integrationVercelConfigurationOverride: z.array(ACLAction$outboundSchema)
        .optional(),
    integrationConfigurationRole: z.array(ACLAction$outboundSchema).optional(),
    integrationSSOSession: z.array(ACLAction$outboundSchema).optional(),
    integrationResource: z.array(ACLAction$outboundSchema).optional(),
    integrationEvent: z.array(ACLAction$outboundSchema).optional(),
    integrationResourceSecrets: z.array(ACLAction$outboundSchema).optional(),
    integrationDeploymentAction: z.array(ACLAction$outboundSchema).optional(),
    marketplaceInstallationMember: z.array(ACLAction$outboundSchema).optional(),
    marketplaceBillingData: z.array(ACLAction$outboundSchema).optional(),
    marketplaceInvoice: z.array(ACLAction$outboundSchema).optional(),
    marketplaceSettings: z.array(ACLAction$outboundSchema).optional(),
    marketplaceExperimentationItem: z.array(ACLAction$outboundSchema).optional(),
    marketplaceExperimentationEdgeConfigData: z.array(ACLAction$outboundSchema)
        .optional(),
    jobGlobal: z.array(ACLAction$outboundSchema).optional(),
    drain: z.array(ACLAction$outboundSchema).optional(),
    logDrain: z.array(ACLAction$outboundSchema).optional(),
    traceDrain: z.array(ACLAction$outboundSchema).optional(),
    monitoring: z.array(ACLAction$outboundSchema).optional(),
    monitoringSettings: z.array(ACLAction$outboundSchema).optional(),
    monitoringQuery: z.array(ACLAction$outboundSchema).optional(),
    monitoringChart: z.array(ACLAction$outboundSchema).optional(),
    monitoringAlert: z.array(ACLAction$outboundSchema).optional(),
    notificationDeploymentFailed: z.array(ACLAction$outboundSchema).optional(),
    notificationDomainConfiguration: z.array(ACLAction$outboundSchema).optional(),
    notificationDomainExpire: z.array(ACLAction$outboundSchema).optional(),
    notificationDomainMoved: z.array(ACLAction$outboundSchema).optional(),
    notificationDomainPurchase: z.array(ACLAction$outboundSchema).optional(),
    notificationDomainRenewal: z.array(ACLAction$outboundSchema).optional(),
    notificationDomainTransfer: z.array(ACLAction$outboundSchema).optional(),
    notificationDomainUnverified: z.array(ACLAction$outboundSchema).optional(),
    notificationMonitoringAlert: z.array(ACLAction$outboundSchema).optional(),
    notificationPaymentFailed: z.array(ACLAction$outboundSchema).optional(),
    notificationUsageAlert: z.array(ACLAction$outboundSchema).optional(),
    notificationPreferences: z.array(ACLAction$outboundSchema).optional(),
    notificationCustomerBudget: z.array(ACLAction$outboundSchema).optional(),
    notificationStatementOfReasons: z.array(ACLAction$outboundSchema).optional(),
    observabilityConfiguration: z.array(ACLAction$outboundSchema).optional(),
    alerts: z.array(ACLAction$outboundSchema).optional(),
    observabilityNotebook: z.array(ACLAction$outboundSchema).optional(),
    observabilityFunnel: z.array(ACLAction$outboundSchema).optional(),
    openTelemetryEndpoint: z.array(ACLAction$outboundSchema).optional(),
    vercelAppInstallation: z.array(ACLAction$outboundSchema).optional(),
    vercelAppInstallationRequest: z.array(ACLAction$outboundSchema).optional(),
    paymentMethod: z.array(ACLAction$outboundSchema).optional(),
    permissions: z.array(ACLAction$outboundSchema).optional(),
    postgres: z.array(ACLAction$outboundSchema).optional(),
    previewDeploymentSuffix: z.array(ACLAction$outboundSchema).optional(),
    proTrialOnboarding: z.array(ACLAction$outboundSchema).optional(),
    sharedEnvVars: z.array(ACLAction$outboundSchema).optional(),
    sharedEnvVarsProduction: z.array(ACLAction$outboundSchema).optional(),
    space: z.array(ACLAction$outboundSchema).optional(),
    spaceRun: z.array(ACLAction$outboundSchema).optional(),
    passwordProtectionInvoiceItem: z.array(ACLAction$outboundSchema).optional(),
    rateLimit: z.array(ACLAction$outboundSchema).optional(),
    redis: z.array(ACLAction$outboundSchema).optional(),
    repository: z.array(ACLAction$outboundSchema).optional(),
    remoteCaching: z.array(ACLAction$outboundSchema).optional(),
    samlConfig: z.array(ACLAction$outboundSchema).optional(),
    secret: z.array(ACLAction$outboundSchema).optional(),
    redisStoreTokenSet: z.array(ACLAction$outboundSchema).optional(),
    blobStoreTokenSet: z.array(ACLAction$outboundSchema).optional(),
    postgresStoreTokenSet: z.array(ACLAction$outboundSchema).optional(),
    integrationStoreTokenSet: z.array(ACLAction$outboundSchema).optional(),
    integrationResourceReplCommand: z.array(ACLAction$outboundSchema).optional(),
    storeTransfer: z.array(ACLAction$outboundSchema).optional(),
    supportCase: z.array(ACLAction$outboundSchema).optional(),
    supportCaseComment: z.array(ACLAction$outboundSchema).optional(),
    dataCacheBillingSettings: z.array(ACLAction$outboundSchema).optional(),
    team: z.array(ACLAction$outboundSchema).optional(),
    teamAccessRequest: z.array(ACLAction$outboundSchema).optional(),
    teamFellowMembership: z.array(ACLAction$outboundSchema).optional(),
    teamGitExclusivity: z.array(ACLAction$outboundSchema).optional(),
    teamInvite: z.array(ACLAction$outboundSchema).optional(),
    teamInviteCode: z.array(ACLAction$outboundSchema).optional(),
    teamJoin: z.array(ACLAction$outboundSchema).optional(),
    teamMemberMfaStatus: z.array(ACLAction$outboundSchema).optional(),
    teamMicrofrontends: z.array(ACLAction$outboundSchema).optional(),
    teamOwnMembership: z.array(ACLAction$outboundSchema).optional(),
    teamOwnMembershipDisconnectSAML: z.array(ACLAction$outboundSchema).optional(),
    token: z.array(ACLAction$outboundSchema).optional(),
    usage: z.array(ACLAction$outboundSchema).optional(),
    usageCycle: z.array(ACLAction$outboundSchema).optional(),
    vpcPeeringConnection: z.array(ACLAction$outboundSchema).optional(),
    webAnalyticsPlan: z.array(ACLAction$outboundSchema).optional(),
    edgeConfig: z.array(ACLAction$outboundSchema).optional(),
    edgeConfigItem: z.array(ACLAction$outboundSchema).optional(),
    edgeConfigSchema: z.array(ACLAction$outboundSchema).optional(),
    edgeConfigToken: z.array(ACLAction$outboundSchema).optional(),
    webhook: z.array(ACLAction$outboundSchema).optional(),
    webhookEvent: z.array(ACLAction$outboundSchema).optional(),
    endpointVerification: z.array(ACLAction$outboundSchema).optional(),
    projectTransferIn: z.array(ACLAction$outboundSchema).optional(),
    oauth2Application: z.array(ACLAction$outboundSchema).optional(),
    vercelRun: z.array(ACLAction$outboundSchema).optional(),
    vercelRunExec: z.array(ACLAction$outboundSchema).optional(),
    apiKey: z.array(ACLAction$outboundSchema).optional(),
    apiKeyOwnedBySelf: z.array(ACLAction$outboundSchema).optional(),
    aliasProject: z.array(ACLAction$outboundSchema).optional(),
    aliasProtectionBypass: z.array(ACLAction$outboundSchema).optional(),
    buildMachine: z.array(ACLAction$outboundSchema).optional(),
    productionAliasProtectionBypass: z.array(ACLAction$outboundSchema).optional(),
    connectConfigurationLink: z.array(ACLAction$outboundSchema).optional(),
    dataCacheNamespace: z.array(ACLAction$outboundSchema).optional(),
    deployment: z.array(ACLAction$outboundSchema).optional(),
    deploymentBuildLogs: z.array(ACLAction$outboundSchema).optional(),
    deploymentCheck: z.array(ACLAction$outboundSchema).optional(),
    deploymentCheckPreview: z.array(ACLAction$outboundSchema).optional(),
    deploymentCheckReRunFromProductionBranch: z.array(ACLAction$outboundSchema)
        .optional(),
    deploymentProductionGit: z.array(ACLAction$outboundSchema).optional(),
    deploymentV0: z.array(ACLAction$outboundSchema).optional(),
    deploymentPreview: z.array(ACLAction$outboundSchema).optional(),
    deploymentPrivate: z.array(ACLAction$outboundSchema).optional(),
    deploymentPromote: z.array(ACLAction$outboundSchema).optional(),
    deploymentRollback: z.array(ACLAction$outboundSchema).optional(),
    edgeCacheNamespace: z.array(ACLAction$outboundSchema).optional(),
    environments: z.array(ACLAction$outboundSchema).optional(),
    logs: z.array(ACLAction$outboundSchema).optional(),
    logsPreset: z.array(ACLAction$outboundSchema).optional(),
    passwordProtection: z.array(ACLAction$outboundSchema).optional(),
    optionsAllowlist: z.array(ACLAction$outboundSchema).optional(),
    job: z.array(ACLAction$outboundSchema).optional(),
    observabilityData: z.array(ACLAction$outboundSchema).optional(),
    onDemandBuild: z.array(ACLAction$outboundSchema).optional(),
    onDemandConcurrency: z.array(ACLAction$outboundSchema).optional(),
    project: z.array(ACLAction$outboundSchema).optional(),
    projectFromV0: z.array(ACLAction$outboundSchema).optional(),
    projectAccessGroup: z.array(ACLAction$outboundSchema).optional(),
    projectAnalyticsSampling: z.array(ACLAction$outboundSchema).optional(),
    projectCheck: z.array(ACLAction$outboundSchema).optional(),
    projectCheckRun: z.array(ACLAction$outboundSchema).optional(),
    projectDeploymentHook: z.array(ACLAction$outboundSchema).optional(),
    projectDomain: z.array(ACLAction$outboundSchema).optional(),
    projectDomainMove: z.array(ACLAction$outboundSchema).optional(),
    projectDomainCheckConfig: z.array(ACLAction$outboundSchema).optional(),
    projectEnvVars: z.array(ACLAction$outboundSchema).optional(),
    projectEnvVarsProduction: z.array(ACLAction$outboundSchema).optional(),
    projectEnvVarsUnownedByIntegration: z.array(ACLAction$outboundSchema)
        .optional(),
    projectFlags: z.array(ACLAction$outboundSchema).optional(),
    projectId: z.array(ACLAction$outboundSchema).optional(),
    projectIntegrationConfiguration: z.array(ACLAction$outboundSchema).optional(),
    projectLink: z.array(ACLAction$outboundSchema).optional(),
    projectMember: z.array(ACLAction$outboundSchema).optional(),
    projectMonitoring: z.array(ACLAction$outboundSchema).optional(),
    projectPermissions: z.array(ACLAction$outboundSchema).optional(),
    projectProductionBranch: z.array(ACLAction$outboundSchema).optional(),
    projectTransfer: z.array(ACLAction$outboundSchema).optional(),
    projectTransferOut: z.array(ACLAction$outboundSchema).optional(),
    projectProtectionBypass: z.array(ACLAction$outboundSchema).optional(),
    projectUsage: z.array(ACLAction$outboundSchema).optional(),
    projectAnalyticsUsage: z.array(ACLAction$outboundSchema).optional(),
    projectSupportCase: z.array(ACLAction$outboundSchema).optional(),
    projectSupportCaseComment: z.array(ACLAction$outboundSchema).optional(),
    projectDeploymentExpiration: z.array(ACLAction$outboundSchema).optional(),
    projectRollingRelease: z.array(ACLAction$outboundSchema).optional(),
    projectTier: z.array(ACLAction$outboundSchema).optional(),
    projectOIDCToken: z.array(ACLAction$outboundSchema).optional(),
    seawallConfig: z.array(ACLAction$outboundSchema).optional(),
    skewProtection: z.array(ACLAction$outboundSchema).optional(),
    analytics: z.array(ACLAction$outboundSchema).optional(),
    trustedIps: z.array(ACLAction$outboundSchema).optional(),
    v0Chat: z.array(ACLAction$outboundSchema).optional(),
    webAnalytics: z.array(ACLAction$outboundSchema).optional(),
    sharedEnvVarConnection: z.array(ACLAction$outboundSchema).optional(),
    sonar: z.array(ACLAction$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        monitoring: "Monitoring",
        notificationMonitoringAlert: "NotificationMonitoringAlert",
        webhookEvent: "webhook-event",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Permissions$;
(function (Permissions$) {
    /** @deprecated use `Permissions$inboundSchema` instead. */
    Permissions$.inboundSchema = Permissions$inboundSchema;
    /** @deprecated use `Permissions$outboundSchema` instead. */
    Permissions$.outboundSchema = Permissions$outboundSchema;
})(Permissions$ || (Permissions$ = {}));
export function permissionsToJSON(permissions) {
    return JSON.stringify(Permissions$outboundSchema.parse(permissions));
}
export function permissionsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Permissions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Permissions' from JSON`);
}
/** @internal */
export const LastRollbackTarget$inboundSchema = z.object({});
/** @internal */
export const LastRollbackTarget$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LastRollbackTarget$;
(function (LastRollbackTarget$) {
    /** @deprecated use `LastRollbackTarget$inboundSchema` instead. */
    LastRollbackTarget$.inboundSchema = LastRollbackTarget$inboundSchema;
    /** @deprecated use `LastRollbackTarget$outboundSchema` instead. */
    LastRollbackTarget$.outboundSchema = LastRollbackTarget$outboundSchema;
})(LastRollbackTarget$ || (LastRollbackTarget$ = {}));
export function lastRollbackTargetToJSON(lastRollbackTarget) {
    return JSON.stringify(LastRollbackTarget$outboundSchema.parse(lastRollbackTarget));
}
export function lastRollbackTargetFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LastRollbackTarget$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LastRollbackTarget' from JSON`);
}
/** @internal */
export const JobStatus$inboundSchema = z
    .nativeEnum(JobStatus);
/** @internal */
export const JobStatus$outboundSchema = JobStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var JobStatus$;
(function (JobStatus$) {
    /** @deprecated use `JobStatus$inboundSchema` instead. */
    JobStatus$.inboundSchema = JobStatus$inboundSchema;
    /** @deprecated use `JobStatus$outboundSchema` instead. */
    JobStatus$.outboundSchema = JobStatus$outboundSchema;
})(JobStatus$ || (JobStatus$ = {}));
/** @internal */
export const UpdateProjectDataCacheProjectsResponse200Type$inboundSchema = z
    .nativeEnum(UpdateProjectDataCacheProjectsResponse200Type);
/** @internal */
export const UpdateProjectDataCacheProjectsResponse200Type$outboundSchema = UpdateProjectDataCacheProjectsResponse200Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheProjectsResponse200Type$;
(function (UpdateProjectDataCacheProjectsResponse200Type$) {
    /** @deprecated use `UpdateProjectDataCacheProjectsResponse200Type$inboundSchema` instead. */
    UpdateProjectDataCacheProjectsResponse200Type$.inboundSchema = UpdateProjectDataCacheProjectsResponse200Type$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheProjectsResponse200Type$outboundSchema` instead. */
    UpdateProjectDataCacheProjectsResponse200Type$.outboundSchema = UpdateProjectDataCacheProjectsResponse200Type$outboundSchema;
})(UpdateProjectDataCacheProjectsResponse200Type$ || (UpdateProjectDataCacheProjectsResponse200Type$ = {}));
/** @internal */
export const LastAliasRequest$inboundSchema = z.object({
    fromDeploymentId: z.string(),
    toDeploymentId: z.string(),
    fromRollingReleaseId: z.string().optional(),
    jobStatus: JobStatus$inboundSchema,
    requestedAt: z.number(),
    type: UpdateProjectDataCacheProjectsResponse200Type$inboundSchema,
});
/** @internal */
export const LastAliasRequest$outboundSchema = z.object({
    fromDeploymentId: z.string(),
    toDeploymentId: z.string(),
    fromRollingReleaseId: z.string().optional(),
    jobStatus: JobStatus$outboundSchema,
    requestedAt: z.number(),
    type: UpdateProjectDataCacheProjectsResponse200Type$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LastAliasRequest$;
(function (LastAliasRequest$) {
    /** @deprecated use `LastAliasRequest$inboundSchema` instead. */
    LastAliasRequest$.inboundSchema = LastAliasRequest$inboundSchema;
    /** @deprecated use `LastAliasRequest$outboundSchema` instead. */
    LastAliasRequest$.outboundSchema = LastAliasRequest$outboundSchema;
})(LastAliasRequest$ || (LastAliasRequest$ = {}));
export function lastAliasRequestToJSON(lastAliasRequest) {
    return JSON.stringify(LastAliasRequest$outboundSchema.parse(lastAliasRequest));
}
export function lastAliasRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LastAliasRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LastAliasRequest' from JSON`);
}
/** @internal */
export const ProtectionBypassScope$inboundSchema = z.nativeEnum(ProtectionBypassScope);
/** @internal */
export const ProtectionBypassScope$outboundSchema = ProtectionBypassScope$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ProtectionBypassScope$;
(function (ProtectionBypassScope$) {
    /** @deprecated use `ProtectionBypassScope$inboundSchema` instead. */
    ProtectionBypassScope$.inboundSchema = ProtectionBypassScope$inboundSchema;
    /** @deprecated use `ProtectionBypassScope$outboundSchema` instead. */
    ProtectionBypassScope$.outboundSchema = ProtectionBypassScope$outboundSchema;
})(ProtectionBypassScope$ || (ProtectionBypassScope$ = {}));
/** @internal */
export const ProtectionBypass2$inboundSchema = z.object({
    createdAt: z.number(),
    createdBy: z.string(),
    scope: ProtectionBypassScope$inboundSchema,
});
/** @internal */
export const ProtectionBypass2$outboundSchema = z.object({
    createdAt: z.number(),
    createdBy: z.string(),
    scope: ProtectionBypassScope$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ProtectionBypass2$;
(function (ProtectionBypass2$) {
    /** @deprecated use `ProtectionBypass2$inboundSchema` instead. */
    ProtectionBypass2$.inboundSchema = ProtectionBypass2$inboundSchema;
    /** @deprecated use `ProtectionBypass2$outboundSchema` instead. */
    ProtectionBypass2$.outboundSchema = ProtectionBypass2$outboundSchema;
})(ProtectionBypass2$ || (ProtectionBypass2$ = {}));
export function protectionBypass2ToJSON(protectionBypass2) {
    return JSON.stringify(ProtectionBypass2$outboundSchema.parse(protectionBypass2));
}
export function protectionBypass2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => ProtectionBypass2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ProtectionBypass2' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheProtectionBypassScope$inboundSchema = z
    .nativeEnum(UpdateProjectDataCacheProtectionBypassScope);
/** @internal */
export const UpdateProjectDataCacheProtectionBypassScope$outboundSchema = UpdateProjectDataCacheProtectionBypassScope$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheProtectionBypassScope$;
(function (UpdateProjectDataCacheProtectionBypassScope$) {
    /** @deprecated use `UpdateProjectDataCacheProtectionBypassScope$inboundSchema` instead. */
    UpdateProjectDataCacheProtectionBypassScope$.inboundSchema = UpdateProjectDataCacheProtectionBypassScope$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheProtectionBypassScope$outboundSchema` instead. */
    UpdateProjectDataCacheProtectionBypassScope$.outboundSchema = UpdateProjectDataCacheProtectionBypassScope$outboundSchema;
})(UpdateProjectDataCacheProtectionBypassScope$ || (UpdateProjectDataCacheProtectionBypassScope$ = {}));
/** @internal */
export const ProtectionBypass1$inboundSchema = z.object({
    createdAt: z.number(),
    createdBy: z.string(),
    scope: UpdateProjectDataCacheProtectionBypassScope$inboundSchema,
    integrationId: z.string(),
    configurationId: z.string(),
});
/** @internal */
export const ProtectionBypass1$outboundSchema = z.object({
    createdAt: z.number(),
    createdBy: z.string(),
    scope: UpdateProjectDataCacheProtectionBypassScope$outboundSchema,
    integrationId: z.string(),
    configurationId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ProtectionBypass1$;
(function (ProtectionBypass1$) {
    /** @deprecated use `ProtectionBypass1$inboundSchema` instead. */
    ProtectionBypass1$.inboundSchema = ProtectionBypass1$inboundSchema;
    /** @deprecated use `ProtectionBypass1$outboundSchema` instead. */
    ProtectionBypass1$.outboundSchema = ProtectionBypass1$outboundSchema;
})(ProtectionBypass1$ || (ProtectionBypass1$ = {}));
export function protectionBypass1ToJSON(protectionBypass1) {
    return JSON.stringify(ProtectionBypass1$outboundSchema.parse(protectionBypass1));
}
export function protectionBypass1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => ProtectionBypass1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ProtectionBypass1' from JSON`);
}
/** @internal */
export const ProtectionBypass$inboundSchema = z.union([
    z.lazy(() => ProtectionBypass1$inboundSchema),
    z.lazy(() => ProtectionBypass2$inboundSchema),
]);
/** @internal */
export const ProtectionBypass$outboundSchema = z.union([
    z.lazy(() => ProtectionBypass1$outboundSchema),
    z.lazy(() => ProtectionBypass2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ProtectionBypass$;
(function (ProtectionBypass$) {
    /** @deprecated use `ProtectionBypass$inboundSchema` instead. */
    ProtectionBypass$.inboundSchema = ProtectionBypass$inboundSchema;
    /** @deprecated use `ProtectionBypass$outboundSchema` instead. */
    ProtectionBypass$.outboundSchema = ProtectionBypass$outboundSchema;
})(ProtectionBypass$ || (ProtectionBypass$ = {}));
export function protectionBypassToJSON(protectionBypass) {
    return JSON.stringify(ProtectionBypass$outboundSchema.parse(protectionBypass));
}
export function protectionBypassFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ProtectionBypass$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ProtectionBypass' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheTrustedIpsDeploymentType$inboundSchema = z
    .nativeEnum(UpdateProjectDataCacheTrustedIpsDeploymentType);
/** @internal */
export const UpdateProjectDataCacheTrustedIpsDeploymentType$outboundSchema = UpdateProjectDataCacheTrustedIpsDeploymentType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheTrustedIpsDeploymentType$;
(function (UpdateProjectDataCacheTrustedIpsDeploymentType$) {
    /** @deprecated use `UpdateProjectDataCacheTrustedIpsDeploymentType$inboundSchema` instead. */
    UpdateProjectDataCacheTrustedIpsDeploymentType$.inboundSchema = UpdateProjectDataCacheTrustedIpsDeploymentType$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheTrustedIpsDeploymentType$outboundSchema` instead. */
    UpdateProjectDataCacheTrustedIpsDeploymentType$.outboundSchema = UpdateProjectDataCacheTrustedIpsDeploymentType$outboundSchema;
})(UpdateProjectDataCacheTrustedIpsDeploymentType$ || (UpdateProjectDataCacheTrustedIpsDeploymentType$ = {}));
/** @internal */
export const TrustedIps2$inboundSchema = z.object({
    deploymentType: UpdateProjectDataCacheTrustedIpsDeploymentType$inboundSchema,
});
/** @internal */
export const TrustedIps2$outboundSchema = z.object({
    deploymentType: UpdateProjectDataCacheTrustedIpsDeploymentType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TrustedIps2$;
(function (TrustedIps2$) {
    /** @deprecated use `TrustedIps2$inboundSchema` instead. */
    TrustedIps2$.inboundSchema = TrustedIps2$inboundSchema;
    /** @deprecated use `TrustedIps2$outboundSchema` instead. */
    TrustedIps2$.outboundSchema = TrustedIps2$outboundSchema;
})(TrustedIps2$ || (TrustedIps2$ = {}));
export function trustedIps2ToJSON(trustedIps2) {
    return JSON.stringify(TrustedIps2$outboundSchema.parse(trustedIps2));
}
export function trustedIps2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => TrustedIps2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TrustedIps2' from JSON`);
}
/** @internal */
export const TrustedIpsDeploymentType$inboundSchema = z.nativeEnum(TrustedIpsDeploymentType);
/** @internal */
export const TrustedIpsDeploymentType$outboundSchema = TrustedIpsDeploymentType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TrustedIpsDeploymentType$;
(function (TrustedIpsDeploymentType$) {
    /** @deprecated use `TrustedIpsDeploymentType$inboundSchema` instead. */
    TrustedIpsDeploymentType$.inboundSchema = TrustedIpsDeploymentType$inboundSchema;
    /** @deprecated use `TrustedIpsDeploymentType$outboundSchema` instead. */
    TrustedIpsDeploymentType$.outboundSchema = TrustedIpsDeploymentType$outboundSchema;
})(TrustedIpsDeploymentType$ || (TrustedIpsDeploymentType$ = {}));
/** @internal */
export const UpdateProjectDataCacheTrustedIpsAddresses$inboundSchema = z.object({
    value: z.string(),
    note: z.string().optional(),
});
/** @internal */
export const UpdateProjectDataCacheTrustedIpsAddresses$outboundSchema = z.object({
    value: z.string(),
    note: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheTrustedIpsAddresses$;
(function (UpdateProjectDataCacheTrustedIpsAddresses$) {
    /** @deprecated use `UpdateProjectDataCacheTrustedIpsAddresses$inboundSchema` instead. */
    UpdateProjectDataCacheTrustedIpsAddresses$.inboundSchema = UpdateProjectDataCacheTrustedIpsAddresses$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheTrustedIpsAddresses$outboundSchema` instead. */
    UpdateProjectDataCacheTrustedIpsAddresses$.outboundSchema = UpdateProjectDataCacheTrustedIpsAddresses$outboundSchema;
})(UpdateProjectDataCacheTrustedIpsAddresses$ || (UpdateProjectDataCacheTrustedIpsAddresses$ = {}));
export function updateProjectDataCacheTrustedIpsAddressesToJSON(updateProjectDataCacheTrustedIpsAddresses) {
    return JSON.stringify(UpdateProjectDataCacheTrustedIpsAddresses$outboundSchema.parse(updateProjectDataCacheTrustedIpsAddresses));
}
export function updateProjectDataCacheTrustedIpsAddressesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheTrustedIpsAddresses$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheTrustedIpsAddresses' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheTrustedIpsProtectionMode$inboundSchema = z
    .nativeEnum(UpdateProjectDataCacheTrustedIpsProtectionMode);
/** @internal */
export const UpdateProjectDataCacheTrustedIpsProtectionMode$outboundSchema = UpdateProjectDataCacheTrustedIpsProtectionMode$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheTrustedIpsProtectionMode$;
(function (UpdateProjectDataCacheTrustedIpsProtectionMode$) {
    /** @deprecated use `UpdateProjectDataCacheTrustedIpsProtectionMode$inboundSchema` instead. */
    UpdateProjectDataCacheTrustedIpsProtectionMode$.inboundSchema = UpdateProjectDataCacheTrustedIpsProtectionMode$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheTrustedIpsProtectionMode$outboundSchema` instead. */
    UpdateProjectDataCacheTrustedIpsProtectionMode$.outboundSchema = UpdateProjectDataCacheTrustedIpsProtectionMode$outboundSchema;
})(UpdateProjectDataCacheTrustedIpsProtectionMode$ || (UpdateProjectDataCacheTrustedIpsProtectionMode$ = {}));
/** @internal */
export const TrustedIps1$inboundSchema = z.object({
    deploymentType: TrustedIpsDeploymentType$inboundSchema,
    addresses: z.array(z.lazy(() => UpdateProjectDataCacheTrustedIpsAddresses$inboundSchema)),
    protectionMode: UpdateProjectDataCacheTrustedIpsProtectionMode$inboundSchema,
});
/** @internal */
export const TrustedIps1$outboundSchema = z.object({
    deploymentType: TrustedIpsDeploymentType$outboundSchema,
    addresses: z.array(z.lazy(() => UpdateProjectDataCacheTrustedIpsAddresses$outboundSchema)),
    protectionMode: UpdateProjectDataCacheTrustedIpsProtectionMode$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TrustedIps1$;
(function (TrustedIps1$) {
    /** @deprecated use `TrustedIps1$inboundSchema` instead. */
    TrustedIps1$.inboundSchema = TrustedIps1$inboundSchema;
    /** @deprecated use `TrustedIps1$outboundSchema` instead. */
    TrustedIps1$.outboundSchema = TrustedIps1$outboundSchema;
})(TrustedIps1$ || (TrustedIps1$ = {}));
export function trustedIps1ToJSON(trustedIps1) {
    return JSON.stringify(TrustedIps1$outboundSchema.parse(trustedIps1));
}
export function trustedIps1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => TrustedIps1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TrustedIps1' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheTrustedIps$inboundSchema = z.union([
    z.lazy(() => TrustedIps1$inboundSchema),
    z.lazy(() => TrustedIps2$inboundSchema),
]);
/** @internal */
export const UpdateProjectDataCacheTrustedIps$outboundSchema = z.union([
    z.lazy(() => TrustedIps1$outboundSchema),
    z.lazy(() => TrustedIps2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheTrustedIps$;
(function (UpdateProjectDataCacheTrustedIps$) {
    /** @deprecated use `UpdateProjectDataCacheTrustedIps$inboundSchema` instead. */
    UpdateProjectDataCacheTrustedIps$.inboundSchema = UpdateProjectDataCacheTrustedIps$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheTrustedIps$outboundSchema` instead. */
    UpdateProjectDataCacheTrustedIps$.outboundSchema = UpdateProjectDataCacheTrustedIps$outboundSchema;
})(UpdateProjectDataCacheTrustedIps$ || (UpdateProjectDataCacheTrustedIps$ = {}));
export function updateProjectDataCacheTrustedIpsToJSON(updateProjectDataCacheTrustedIps) {
    return JSON.stringify(UpdateProjectDataCacheTrustedIps$outboundSchema.parse(updateProjectDataCacheTrustedIps));
}
export function updateProjectDataCacheTrustedIpsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheTrustedIps$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheTrustedIps' from JSON`);
}
/** @internal */
export const GitComments$inboundSchema = z.object({
    onPullRequest: z.boolean(),
    onCommit: z.boolean(),
});
/** @internal */
export const GitComments$outboundSchema = z.object({
    onPullRequest: z.boolean(),
    onCommit: z.boolean(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GitComments$;
(function (GitComments$) {
    /** @deprecated use `GitComments$inboundSchema` instead. */
    GitComments$.inboundSchema = GitComments$inboundSchema;
    /** @deprecated use `GitComments$outboundSchema` instead. */
    GitComments$.outboundSchema = GitComments$outboundSchema;
})(GitComments$ || (GitComments$ = {}));
export function gitCommentsToJSON(gitComments) {
    return JSON.stringify(GitComments$outboundSchema.parse(gitComments));
}
export function gitCommentsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GitComments$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GitComments' from JSON`);
}
/** @internal */
export const CreateDeployments$inboundSchema = z.nativeEnum(CreateDeployments);
/** @internal */
export const CreateDeployments$outboundSchema = CreateDeployments$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDeployments$;
(function (CreateDeployments$) {
    /** @deprecated use `CreateDeployments$inboundSchema` instead. */
    CreateDeployments$.inboundSchema = CreateDeployments$inboundSchema;
    /** @deprecated use `CreateDeployments$outboundSchema` instead. */
    CreateDeployments$.outboundSchema = CreateDeployments$outboundSchema;
})(CreateDeployments$ || (CreateDeployments$ = {}));
/** @internal */
export const GitProviderOptions$inboundSchema = z.object({
    createDeployments: CreateDeployments$inboundSchema,
    disableRepositoryDispatchEvents: z.boolean().optional(),
});
/** @internal */
export const GitProviderOptions$outboundSchema = z.object({
    createDeployments: CreateDeployments$outboundSchema,
    disableRepositoryDispatchEvents: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GitProviderOptions$;
(function (GitProviderOptions$) {
    /** @deprecated use `GitProviderOptions$inboundSchema` instead. */
    GitProviderOptions$.inboundSchema = GitProviderOptions$inboundSchema;
    /** @deprecated use `GitProviderOptions$outboundSchema` instead. */
    GitProviderOptions$.outboundSchema = GitProviderOptions$outboundSchema;
})(GitProviderOptions$ || (GitProviderOptions$ = {}));
export function gitProviderOptionsToJSON(gitProviderOptions) {
    return JSON.stringify(GitProviderOptions$outboundSchema.parse(gitProviderOptions));
}
export function gitProviderOptionsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GitProviderOptions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GitProviderOptions' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheWebAnalytics$inboundSchema = z.object({
    id: z.string(),
    disabledAt: z.number().optional(),
    canceledAt: z.number().optional(),
    enabledAt: z.number().optional(),
    hasData: z.boolean().optional(),
});
/** @internal */
export const UpdateProjectDataCacheWebAnalytics$outboundSchema = z.object({
    id: z.string(),
    disabledAt: z.number().optional(),
    canceledAt: z.number().optional(),
    enabledAt: z.number().optional(),
    hasData: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheWebAnalytics$;
(function (UpdateProjectDataCacheWebAnalytics$) {
    /** @deprecated use `UpdateProjectDataCacheWebAnalytics$inboundSchema` instead. */
    UpdateProjectDataCacheWebAnalytics$.inboundSchema = UpdateProjectDataCacheWebAnalytics$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheWebAnalytics$outboundSchema` instead. */
    UpdateProjectDataCacheWebAnalytics$.outboundSchema = UpdateProjectDataCacheWebAnalytics$outboundSchema;
})(UpdateProjectDataCacheWebAnalytics$ || (UpdateProjectDataCacheWebAnalytics$ = {}));
export function updateProjectDataCacheWebAnalyticsToJSON(updateProjectDataCacheWebAnalytics) {
    return JSON.stringify(UpdateProjectDataCacheWebAnalytics$outboundSchema.parse(updateProjectDataCacheWebAnalytics));
}
export function updateProjectDataCacheWebAnalyticsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheWebAnalytics$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheWebAnalytics' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheProjectsResponseAction$inboundSchema = z
    .nativeEnum(UpdateProjectDataCacheProjectsResponseAction);
/** @internal */
export const UpdateProjectDataCacheProjectsResponseAction$outboundSchema = UpdateProjectDataCacheProjectsResponseAction$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheProjectsResponseAction$;
(function (UpdateProjectDataCacheProjectsResponseAction$) {
    /** @deprecated use `UpdateProjectDataCacheProjectsResponseAction$inboundSchema` instead. */
    UpdateProjectDataCacheProjectsResponseAction$.inboundSchema = UpdateProjectDataCacheProjectsResponseAction$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheProjectsResponseAction$outboundSchema` instead. */
    UpdateProjectDataCacheProjectsResponseAction$.outboundSchema = UpdateProjectDataCacheProjectsResponseAction$outboundSchema;
})(UpdateProjectDataCacheProjectsResponseAction$ || (UpdateProjectDataCacheProjectsResponseAction$ = {}));
/** @internal */
export const BotFilter$inboundSchema = z.object({
    active: z.boolean(),
    action: UpdateProjectDataCacheProjectsResponseAction$inboundSchema.optional(),
});
/** @internal */
export const BotFilter$outboundSchema = z.object({
    active: z.boolean(),
    action: UpdateProjectDataCacheProjectsResponseAction$outboundSchema
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BotFilter$;
(function (BotFilter$) {
    /** @deprecated use `BotFilter$inboundSchema` instead. */
    BotFilter$.inboundSchema = BotFilter$inboundSchema;
    /** @deprecated use `BotFilter$outboundSchema` instead. */
    BotFilter$.outboundSchema = BotFilter$outboundSchema;
})(BotFilter$ || (BotFilter$ = {}));
export function botFilterToJSON(botFilter) {
    return JSON.stringify(BotFilter$outboundSchema.parse(botFilter));
}
export function botFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BotFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BotFilter' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheProjectsResponse200Action$inboundSchema = z
    .nativeEnum(UpdateProjectDataCacheProjectsResponse200Action);
/** @internal */
export const UpdateProjectDataCacheProjectsResponse200Action$outboundSchema = UpdateProjectDataCacheProjectsResponse200Action$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheProjectsResponse200Action$;
(function (UpdateProjectDataCacheProjectsResponse200Action$) {
    /** @deprecated use `UpdateProjectDataCacheProjectsResponse200Action$inboundSchema` instead. */
    UpdateProjectDataCacheProjectsResponse200Action$.inboundSchema = UpdateProjectDataCacheProjectsResponse200Action$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheProjectsResponse200Action$outboundSchema` instead. */
    UpdateProjectDataCacheProjectsResponse200Action$.outboundSchema = UpdateProjectDataCacheProjectsResponse200Action$outboundSchema;
})(UpdateProjectDataCacheProjectsResponse200Action$ || (UpdateProjectDataCacheProjectsResponse200Action$ = {}));
/** @internal */
export const UpdateProjectDataCacheAiBots$inboundSchema = z.object({
    active: z.boolean(),
    action: UpdateProjectDataCacheProjectsResponse200Action$inboundSchema
        .optional(),
});
/** @internal */
export const UpdateProjectDataCacheAiBots$outboundSchema = z.object({
    active: z.boolean(),
    action: UpdateProjectDataCacheProjectsResponse200Action$outboundSchema
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheAiBots$;
(function (UpdateProjectDataCacheAiBots$) {
    /** @deprecated use `UpdateProjectDataCacheAiBots$inboundSchema` instead. */
    UpdateProjectDataCacheAiBots$.inboundSchema = UpdateProjectDataCacheAiBots$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheAiBots$outboundSchema` instead. */
    UpdateProjectDataCacheAiBots$.outboundSchema = UpdateProjectDataCacheAiBots$outboundSchema;
})(UpdateProjectDataCacheAiBots$ || (UpdateProjectDataCacheAiBots$ = {}));
export function updateProjectDataCacheAiBotsToJSON(updateProjectDataCacheAiBots) {
    return JSON.stringify(UpdateProjectDataCacheAiBots$outboundSchema.parse(updateProjectDataCacheAiBots));
}
export function updateProjectDataCacheAiBotsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheAiBots$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheAiBots' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheProjectsAction$inboundSchema = z.nativeEnum(UpdateProjectDataCacheProjectsAction);
/** @internal */
export const UpdateProjectDataCacheProjectsAction$outboundSchema = UpdateProjectDataCacheProjectsAction$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheProjectsAction$;
(function (UpdateProjectDataCacheProjectsAction$) {
    /** @deprecated use `UpdateProjectDataCacheProjectsAction$inboundSchema` instead. */
    UpdateProjectDataCacheProjectsAction$.inboundSchema = UpdateProjectDataCacheProjectsAction$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheProjectsAction$outboundSchema` instead. */
    UpdateProjectDataCacheProjectsAction$.outboundSchema = UpdateProjectDataCacheProjectsAction$outboundSchema;
})(UpdateProjectDataCacheProjectsAction$ || (UpdateProjectDataCacheProjectsAction$ = {}));
/** @internal */
export const UpdateProjectDataCacheOwasp$inboundSchema = z.object({
    active: z.boolean(),
    action: UpdateProjectDataCacheProjectsAction$inboundSchema.optional(),
});
/** @internal */
export const UpdateProjectDataCacheOwasp$outboundSchema = z.object({
    active: z.boolean(),
    action: UpdateProjectDataCacheProjectsAction$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheOwasp$;
(function (UpdateProjectDataCacheOwasp$) {
    /** @deprecated use `UpdateProjectDataCacheOwasp$inboundSchema` instead. */
    UpdateProjectDataCacheOwasp$.inboundSchema = UpdateProjectDataCacheOwasp$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheOwasp$outboundSchema` instead. */
    UpdateProjectDataCacheOwasp$.outboundSchema = UpdateProjectDataCacheOwasp$outboundSchema;
})(UpdateProjectDataCacheOwasp$ || (UpdateProjectDataCacheOwasp$ = {}));
export function updateProjectDataCacheOwaspToJSON(updateProjectDataCacheOwasp) {
    return JSON.stringify(UpdateProjectDataCacheOwasp$outboundSchema.parse(updateProjectDataCacheOwasp));
}
export function updateProjectDataCacheOwaspFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheOwasp$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheOwasp' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheManagedRules$inboundSchema = z.object({
    bot_filter: z.lazy(() => BotFilter$inboundSchema),
    ai_bots: z.lazy(() => UpdateProjectDataCacheAiBots$inboundSchema),
    owasp: z.lazy(() => UpdateProjectDataCacheOwasp$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "bot_filter": "botFilter",
        "ai_bots": "aiBots",
    });
});
/** @internal */
export const UpdateProjectDataCacheManagedRules$outboundSchema = z.object({
    botFilter: z.lazy(() => BotFilter$outboundSchema),
    aiBots: z.lazy(() => UpdateProjectDataCacheAiBots$outboundSchema),
    owasp: z.lazy(() => UpdateProjectDataCacheOwasp$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        botFilter: "bot_filter",
        aiBots: "ai_bots",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheManagedRules$;
(function (UpdateProjectDataCacheManagedRules$) {
    /** @deprecated use `UpdateProjectDataCacheManagedRules$inboundSchema` instead. */
    UpdateProjectDataCacheManagedRules$.inboundSchema = UpdateProjectDataCacheManagedRules$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheManagedRules$outboundSchema` instead. */
    UpdateProjectDataCacheManagedRules$.outboundSchema = UpdateProjectDataCacheManagedRules$outboundSchema;
})(UpdateProjectDataCacheManagedRules$ || (UpdateProjectDataCacheManagedRules$ = {}));
export function updateProjectDataCacheManagedRulesToJSON(updateProjectDataCacheManagedRules) {
    return JSON.stringify(UpdateProjectDataCacheManagedRules$outboundSchema.parse(updateProjectDataCacheManagedRules));
}
export function updateProjectDataCacheManagedRulesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheManagedRules$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheManagedRules' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheSecurity$inboundSchema = z.object({
    attackModeEnabled: z.boolean().optional(),
    attackModeUpdatedAt: z.number().optional(),
    firewallEnabled: z.boolean().optional(),
    firewallUpdatedAt: z.number().optional(),
    attackModeActiveUntil: z.nullable(z.number()).optional(),
    firewallConfigVersion: z.number().optional(),
    firewallSeawallEnabled: z.boolean().optional(),
    ja3Enabled: z.boolean().optional(),
    ja4Enabled: z.boolean().optional(),
    firewallBypassIps: z.array(z.string()).optional(),
    managedRules: z.nullable(z.lazy(() => UpdateProjectDataCacheManagedRules$inboundSchema)).optional(),
    botIdEnabled: z.boolean().optional(),
});
/** @internal */
export const UpdateProjectDataCacheSecurity$outboundSchema = z.object({
    attackModeEnabled: z.boolean().optional(),
    attackModeUpdatedAt: z.number().optional(),
    firewallEnabled: z.boolean().optional(),
    firewallUpdatedAt: z.number().optional(),
    attackModeActiveUntil: z.nullable(z.number()).optional(),
    firewallConfigVersion: z.number().optional(),
    firewallSeawallEnabled: z.boolean().optional(),
    ja3Enabled: z.boolean().optional(),
    ja4Enabled: z.boolean().optional(),
    firewallBypassIps: z.array(z.string()).optional(),
    managedRules: z.nullable(z.lazy(() => UpdateProjectDataCacheManagedRules$outboundSchema)).optional(),
    botIdEnabled: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheSecurity$;
(function (UpdateProjectDataCacheSecurity$) {
    /** @deprecated use `UpdateProjectDataCacheSecurity$inboundSchema` instead. */
    UpdateProjectDataCacheSecurity$.inboundSchema = UpdateProjectDataCacheSecurity$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheSecurity$outboundSchema` instead. */
    UpdateProjectDataCacheSecurity$.outboundSchema = UpdateProjectDataCacheSecurity$outboundSchema;
})(UpdateProjectDataCacheSecurity$ || (UpdateProjectDataCacheSecurity$ = {}));
export function updateProjectDataCacheSecurityToJSON(updateProjectDataCacheSecurity) {
    return JSON.stringify(UpdateProjectDataCacheSecurity$outboundSchema.parse(updateProjectDataCacheSecurity));
}
export function updateProjectDataCacheSecurityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheSecurity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheSecurity' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheIssuerMode$inboundSchema = z.nativeEnum(UpdateProjectDataCacheIssuerMode);
/** @internal */
export const UpdateProjectDataCacheIssuerMode$outboundSchema = UpdateProjectDataCacheIssuerMode$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheIssuerMode$;
(function (UpdateProjectDataCacheIssuerMode$) {
    /** @deprecated use `UpdateProjectDataCacheIssuerMode$inboundSchema` instead. */
    UpdateProjectDataCacheIssuerMode$.inboundSchema = UpdateProjectDataCacheIssuerMode$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheIssuerMode$outboundSchema` instead. */
    UpdateProjectDataCacheIssuerMode$.outboundSchema = UpdateProjectDataCacheIssuerMode$outboundSchema;
})(UpdateProjectDataCacheIssuerMode$ || (UpdateProjectDataCacheIssuerMode$ = {}));
/** @internal */
export const UpdateProjectDataCacheOidcTokenConfig$inboundSchema = z.object({
    enabled: z.boolean().optional(),
    issuerMode: UpdateProjectDataCacheIssuerMode$inboundSchema.optional(),
});
/** @internal */
export const UpdateProjectDataCacheOidcTokenConfig$outboundSchema = z.object({
    enabled: z.boolean().optional(),
    issuerMode: UpdateProjectDataCacheIssuerMode$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheOidcTokenConfig$;
(function (UpdateProjectDataCacheOidcTokenConfig$) {
    /** @deprecated use `UpdateProjectDataCacheOidcTokenConfig$inboundSchema` instead. */
    UpdateProjectDataCacheOidcTokenConfig$.inboundSchema = UpdateProjectDataCacheOidcTokenConfig$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheOidcTokenConfig$outboundSchema` instead. */
    UpdateProjectDataCacheOidcTokenConfig$.outboundSchema = UpdateProjectDataCacheOidcTokenConfig$outboundSchema;
})(UpdateProjectDataCacheOidcTokenConfig$ || (UpdateProjectDataCacheOidcTokenConfig$ = {}));
export function updateProjectDataCacheOidcTokenConfigToJSON(updateProjectDataCacheOidcTokenConfig) {
    return JSON.stringify(UpdateProjectDataCacheOidcTokenConfig$outboundSchema.parse(updateProjectDataCacheOidcTokenConfig));
}
export function updateProjectDataCacheOidcTokenConfigFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheOidcTokenConfig$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheOidcTokenConfig' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheTier$inboundSchema = z.nativeEnum(UpdateProjectDataCacheTier);
/** @internal */
export const UpdateProjectDataCacheTier$outboundSchema = UpdateProjectDataCacheTier$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheTier$;
(function (UpdateProjectDataCacheTier$) {
    /** @deprecated use `UpdateProjectDataCacheTier$inboundSchema` instead. */
    UpdateProjectDataCacheTier$.inboundSchema = UpdateProjectDataCacheTier$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheTier$outboundSchema` instead. */
    UpdateProjectDataCacheTier$.outboundSchema = UpdateProjectDataCacheTier$outboundSchema;
})(UpdateProjectDataCacheTier$ || (UpdateProjectDataCacheTier$ = {}));
/** @internal */
export const Features$inboundSchema = z.object({
    webAnalytics: z.boolean().optional(),
});
/** @internal */
export const Features$outboundSchema = z.object({
    webAnalytics: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Features$;
(function (Features$) {
    /** @deprecated use `Features$inboundSchema` instead. */
    Features$.inboundSchema = Features$inboundSchema;
    /** @deprecated use `Features$outboundSchema` instead. */
    Features$.outboundSchema = Features$outboundSchema;
})(Features$ || (Features$ = {}));
export function featuresToJSON(features) {
    return JSON.stringify(Features$outboundSchema.parse(features));
}
export function featuresFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Features$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Features' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheHistory$inboundSchema = z.object({
    scanner: z.string(),
    reason: z.string(),
    by: z.string(),
    byId: z.string(),
    at: z.number(),
});
/** @internal */
export const UpdateProjectDataCacheHistory$outboundSchema = z.object({
    scanner: z.string(),
    reason: z.string(),
    by: z.string(),
    byId: z.string(),
    at: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheHistory$;
(function (UpdateProjectDataCacheHistory$) {
    /** @deprecated use `UpdateProjectDataCacheHistory$inboundSchema` instead. */
    UpdateProjectDataCacheHistory$.inboundSchema = UpdateProjectDataCacheHistory$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheHistory$outboundSchema` instead. */
    UpdateProjectDataCacheHistory$.outboundSchema = UpdateProjectDataCacheHistory$outboundSchema;
})(UpdateProjectDataCacheHistory$ || (UpdateProjectDataCacheHistory$ = {}));
export function updateProjectDataCacheHistoryToJSON(updateProjectDataCacheHistory) {
    return JSON.stringify(UpdateProjectDataCacheHistory$outboundSchema.parse(updateProjectDataCacheHistory));
}
export function updateProjectDataCacheHistoryFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheHistory$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheHistory' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheAction$inboundSchema = z.nativeEnum(UpdateProjectDataCacheAction);
/** @internal */
export const UpdateProjectDataCacheAction$outboundSchema = UpdateProjectDataCacheAction$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheAction$;
(function (UpdateProjectDataCacheAction$) {
    /** @deprecated use `UpdateProjectDataCacheAction$inboundSchema` instead. */
    UpdateProjectDataCacheAction$.inboundSchema = UpdateProjectDataCacheAction$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheAction$outboundSchema` instead. */
    UpdateProjectDataCacheAction$.outboundSchema = UpdateProjectDataCacheAction$outboundSchema;
})(UpdateProjectDataCacheAction$ || (UpdateProjectDataCacheAction$ = {}));
/** @internal */
export const Block$inboundSchema = z
    .object({
    action: UpdateProjectDataCacheAction$inboundSchema,
    reason: z.string(),
    statusCode: z.number(),
    createdAt: z.number(),
    caseId: z.string().optional(),
    actor: z.string().optional(),
    comment: z.string().optional(),
    isCascading: z.boolean().optional(),
});
/** @internal */
export const Block$outboundSchema = z.object({
    action: UpdateProjectDataCacheAction$outboundSchema,
    reason: z.string(),
    statusCode: z.number(),
    createdAt: z.number(),
    caseId: z.string().optional(),
    actor: z.string().optional(),
    comment: z.string().optional(),
    isCascading: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Block$;
(function (Block$) {
    /** @deprecated use `Block$inboundSchema` instead. */
    Block$.inboundSchema = Block$inboundSchema;
    /** @deprecated use `Block$outboundSchema` instead. */
    Block$.outboundSchema = Block$outboundSchema;
})(Block$ || (Block$ = {}));
export function blockToJSON(block) {
    return JSON.stringify(Block$outboundSchema.parse(block));
}
export function blockFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Block$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Block' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheBlockHistoryProjectsResponseAction$inboundSchema = z.nativeEnum(UpdateProjectDataCacheBlockHistoryProjectsResponseAction);
/** @internal */
export const UpdateProjectDataCacheBlockHistoryProjectsResponseAction$outboundSchema = UpdateProjectDataCacheBlockHistoryProjectsResponseAction$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheBlockHistoryProjectsResponseAction$;
(function (UpdateProjectDataCacheBlockHistoryProjectsResponseAction$) {
    /** @deprecated use `UpdateProjectDataCacheBlockHistoryProjectsResponseAction$inboundSchema` instead. */
    UpdateProjectDataCacheBlockHistoryProjectsResponseAction$.inboundSchema = UpdateProjectDataCacheBlockHistoryProjectsResponseAction$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheBlockHistoryProjectsResponseAction$outboundSchema` instead. */
    UpdateProjectDataCacheBlockHistoryProjectsResponseAction$.outboundSchema = UpdateProjectDataCacheBlockHistoryProjectsResponseAction$outboundSchema;
})(UpdateProjectDataCacheBlockHistoryProjectsResponseAction$ || (UpdateProjectDataCacheBlockHistoryProjectsResponseAction$ = {}));
/** @internal */
export const UpdateProjectDataCacheHasProjectsResponseType$inboundSchema = z
    .nativeEnum(UpdateProjectDataCacheHasProjectsResponseType);
/** @internal */
export const UpdateProjectDataCacheHasProjectsResponseType$outboundSchema = UpdateProjectDataCacheHasProjectsResponseType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheHasProjectsResponseType$;
(function (UpdateProjectDataCacheHasProjectsResponseType$) {
    /** @deprecated use `UpdateProjectDataCacheHasProjectsResponseType$inboundSchema` instead. */
    UpdateProjectDataCacheHasProjectsResponseType$.inboundSchema = UpdateProjectDataCacheHasProjectsResponseType$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheHasProjectsResponseType$outboundSchema` instead. */
    UpdateProjectDataCacheHasProjectsResponseType$.outboundSchema = UpdateProjectDataCacheHasProjectsResponseType$outboundSchema;
})(UpdateProjectDataCacheHasProjectsResponseType$ || (UpdateProjectDataCacheHasProjectsResponseType$ = {}));
/** @internal */
export const UpdateProjectDataCacheHasProjectsValue$inboundSchema = z.object({
    eq: z.string(),
});
/** @internal */
export const UpdateProjectDataCacheHasProjectsValue$outboundSchema = z.object({
    eq: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheHasProjectsValue$;
(function (UpdateProjectDataCacheHasProjectsValue$) {
    /** @deprecated use `UpdateProjectDataCacheHasProjectsValue$inboundSchema` instead. */
    UpdateProjectDataCacheHasProjectsValue$.inboundSchema = UpdateProjectDataCacheHasProjectsValue$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheHasProjectsValue$outboundSchema` instead. */
    UpdateProjectDataCacheHasProjectsValue$.outboundSchema = UpdateProjectDataCacheHasProjectsValue$outboundSchema;
})(UpdateProjectDataCacheHasProjectsValue$ || (UpdateProjectDataCacheHasProjectsValue$ = {}));
export function updateProjectDataCacheHasProjectsValueToJSON(updateProjectDataCacheHasProjectsValue) {
    return JSON.stringify(UpdateProjectDataCacheHasProjectsValue$outboundSchema.parse(updateProjectDataCacheHasProjectsValue));
}
export function updateProjectDataCacheHasProjectsValueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheHasProjectsValue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheHasProjectsValue' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheHas2$inboundSchema = z.object({
    type: UpdateProjectDataCacheHasProjectsResponseType$inboundSchema,
    value: z.lazy(() => UpdateProjectDataCacheHasProjectsValue$inboundSchema),
});
/** @internal */
export const UpdateProjectDataCacheHas2$outboundSchema = z.object({
    type: UpdateProjectDataCacheHasProjectsResponseType$outboundSchema,
    value: z.lazy(() => UpdateProjectDataCacheHasProjectsValue$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheHas2$;
(function (UpdateProjectDataCacheHas2$) {
    /** @deprecated use `UpdateProjectDataCacheHas2$inboundSchema` instead. */
    UpdateProjectDataCacheHas2$.inboundSchema = UpdateProjectDataCacheHas2$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheHas2$outboundSchema` instead. */
    UpdateProjectDataCacheHas2$.outboundSchema = UpdateProjectDataCacheHas2$outboundSchema;
})(UpdateProjectDataCacheHas2$ || (UpdateProjectDataCacheHas2$ = {}));
export function updateProjectDataCacheHas2ToJSON(updateProjectDataCacheHas2) {
    return JSON.stringify(UpdateProjectDataCacheHas2$outboundSchema.parse(updateProjectDataCacheHas2));
}
export function updateProjectDataCacheHas2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheHas2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheHas2' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheHasProjectsType$inboundSchema = z.nativeEnum(UpdateProjectDataCacheHasProjectsType);
/** @internal */
export const UpdateProjectDataCacheHasProjectsType$outboundSchema = UpdateProjectDataCacheHasProjectsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheHasProjectsType$;
(function (UpdateProjectDataCacheHasProjectsType$) {
    /** @deprecated use `UpdateProjectDataCacheHasProjectsType$inboundSchema` instead. */
    UpdateProjectDataCacheHasProjectsType$.inboundSchema = UpdateProjectDataCacheHasProjectsType$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheHasProjectsType$outboundSchema` instead. */
    UpdateProjectDataCacheHasProjectsType$.outboundSchema = UpdateProjectDataCacheHasProjectsType$outboundSchema;
})(UpdateProjectDataCacheHasProjectsType$ || (UpdateProjectDataCacheHasProjectsType$ = {}));
/** @internal */
export const UpdateProjectDataCacheHasProjectsKey$inboundSchema = z.nativeEnum(UpdateProjectDataCacheHasProjectsKey);
/** @internal */
export const UpdateProjectDataCacheHasProjectsKey$outboundSchema = UpdateProjectDataCacheHasProjectsKey$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheHasProjectsKey$;
(function (UpdateProjectDataCacheHasProjectsKey$) {
    /** @deprecated use `UpdateProjectDataCacheHasProjectsKey$inboundSchema` instead. */
    UpdateProjectDataCacheHasProjectsKey$.inboundSchema = UpdateProjectDataCacheHasProjectsKey$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheHasProjectsKey$outboundSchema` instead. */
    UpdateProjectDataCacheHasProjectsKey$.outboundSchema = UpdateProjectDataCacheHasProjectsKey$outboundSchema;
})(UpdateProjectDataCacheHasProjectsKey$ || (UpdateProjectDataCacheHasProjectsKey$ = {}));
/** @internal */
export const UpdateProjectDataCacheHasProjectsResponse200ApplicationJSONValue$inboundSchema = z.object({
    eq: z.string(),
});
/** @internal */
export const UpdateProjectDataCacheHasProjectsResponse200ApplicationJSONValue$outboundSchema = z.object({
    eq: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheHasProjectsResponse200ApplicationJSONValue$;
(function (UpdateProjectDataCacheHasProjectsResponse200ApplicationJSONValue$) {
    /** @deprecated use `UpdateProjectDataCacheHasProjectsResponse200ApplicationJSONValue$inboundSchema` instead. */
    UpdateProjectDataCacheHasProjectsResponse200ApplicationJSONValue$.inboundSchema = UpdateProjectDataCacheHasProjectsResponse200ApplicationJSONValue$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheHasProjectsResponse200ApplicationJSONValue$outboundSchema` instead. */
    UpdateProjectDataCacheHasProjectsResponse200ApplicationJSONValue$.outboundSchema = UpdateProjectDataCacheHasProjectsResponse200ApplicationJSONValue$outboundSchema;
})(UpdateProjectDataCacheHasProjectsResponse200ApplicationJSONValue$ || (UpdateProjectDataCacheHasProjectsResponse200ApplicationJSONValue$ = {}));
export function updateProjectDataCacheHasProjectsResponse200ApplicationJSONValueToJSON(updateProjectDataCacheHasProjectsResponse200ApplicationJSONValue) {
    return JSON.stringify(UpdateProjectDataCacheHasProjectsResponse200ApplicationJSONValue$outboundSchema
        .parse(updateProjectDataCacheHasProjectsResponse200ApplicationJSONValue));
}
export function updateProjectDataCacheHasProjectsResponse200ApplicationJSONValueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheHasProjectsResponse200ApplicationJSONValue$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheHasProjectsResponse200ApplicationJSONValue' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheHas1$inboundSchema = z.object({
    type: UpdateProjectDataCacheHasProjectsType$inboundSchema,
    key: UpdateProjectDataCacheHasProjectsKey$inboundSchema,
    value: z.lazy(() => UpdateProjectDataCacheHasProjectsResponse200ApplicationJSONValue$inboundSchema),
});
/** @internal */
export const UpdateProjectDataCacheHas1$outboundSchema = z.object({
    type: UpdateProjectDataCacheHasProjectsType$outboundSchema,
    key: UpdateProjectDataCacheHasProjectsKey$outboundSchema,
    value: z.lazy(() => UpdateProjectDataCacheHasProjectsResponse200ApplicationJSONValue$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheHas1$;
(function (UpdateProjectDataCacheHas1$) {
    /** @deprecated use `UpdateProjectDataCacheHas1$inboundSchema` instead. */
    UpdateProjectDataCacheHas1$.inboundSchema = UpdateProjectDataCacheHas1$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheHas1$outboundSchema` instead. */
    UpdateProjectDataCacheHas1$.outboundSchema = UpdateProjectDataCacheHas1$outboundSchema;
})(UpdateProjectDataCacheHas1$ || (UpdateProjectDataCacheHas1$ = {}));
export function updateProjectDataCacheHas1ToJSON(updateProjectDataCacheHas1) {
    return JSON.stringify(UpdateProjectDataCacheHas1$outboundSchema.parse(updateProjectDataCacheHas1));
}
export function updateProjectDataCacheHas1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheHas1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheHas1' from JSON`);
}
/** @internal */
export const RouteHas$inboundSchema = z.union([
    z.lazy(() => UpdateProjectDataCacheHas1$inboundSchema),
    z.lazy(() => UpdateProjectDataCacheHas2$inboundSchema),
]);
/** @internal */
export const RouteHas$outboundSchema = z.union([
    z.lazy(() => UpdateProjectDataCacheHas1$outboundSchema),
    z.lazy(() => UpdateProjectDataCacheHas2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RouteHas$;
(function (RouteHas$) {
    /** @deprecated use `RouteHas$inboundSchema` instead. */
    RouteHas$.inboundSchema = RouteHas$inboundSchema;
    /** @deprecated use `RouteHas$outboundSchema` instead. */
    RouteHas$.outboundSchema = RouteHas$outboundSchema;
})(RouteHas$ || (RouteHas$ = {}));
export function routeHasToJSON(routeHas) {
    return JSON.stringify(RouteHas$outboundSchema.parse(routeHas));
}
export function routeHasFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RouteHas$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RouteHas' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheRouteAction$inboundSchema = z.nativeEnum(UpdateProjectDataCacheRouteAction);
/** @internal */
export const UpdateProjectDataCacheRouteAction$outboundSchema = UpdateProjectDataCacheRouteAction$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheRouteAction$;
(function (UpdateProjectDataCacheRouteAction$) {
    /** @deprecated use `UpdateProjectDataCacheRouteAction$inboundSchema` instead. */
    UpdateProjectDataCacheRouteAction$.inboundSchema = UpdateProjectDataCacheRouteAction$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheRouteAction$outboundSchema` instead. */
    UpdateProjectDataCacheRouteAction$.outboundSchema = UpdateProjectDataCacheRouteAction$outboundSchema;
})(UpdateProjectDataCacheRouteAction$ || (UpdateProjectDataCacheRouteAction$ = {}));
/** @internal */
export const RouteMitigate$inboundSchema = z.object({
    action: UpdateProjectDataCacheRouteAction$inboundSchema,
});
/** @internal */
export const RouteMitigate$outboundSchema = z.object({
    action: UpdateProjectDataCacheRouteAction$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RouteMitigate$;
(function (RouteMitigate$) {
    /** @deprecated use `RouteMitigate$inboundSchema` instead. */
    RouteMitigate$.inboundSchema = RouteMitigate$inboundSchema;
    /** @deprecated use `RouteMitigate$outboundSchema` instead. */
    RouteMitigate$.outboundSchema = RouteMitigate$outboundSchema;
})(RouteMitigate$ || (RouteMitigate$ = {}));
export function routeMitigateToJSON(routeMitigate) {
    return JSON.stringify(RouteMitigate$outboundSchema.parse(routeMitigate));
}
export function routeMitigateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RouteMitigate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RouteMitigate' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheRoute2$inboundSchema = z.object({
    has: z.array(z.union([
        z.lazy(() => UpdateProjectDataCacheHas1$inboundSchema),
        z.lazy(() => UpdateProjectDataCacheHas2$inboundSchema),
    ])),
    mitigate: z.lazy(() => RouteMitigate$inboundSchema),
    src: z.string().optional(),
});
/** @internal */
export const UpdateProjectDataCacheRoute2$outboundSchema = z.object({
    has: z.array(z.union([
        z.lazy(() => UpdateProjectDataCacheHas1$outboundSchema),
        z.lazy(() => UpdateProjectDataCacheHas2$outboundSchema),
    ])),
    mitigate: z.lazy(() => RouteMitigate$outboundSchema),
    src: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheRoute2$;
(function (UpdateProjectDataCacheRoute2$) {
    /** @deprecated use `UpdateProjectDataCacheRoute2$inboundSchema` instead. */
    UpdateProjectDataCacheRoute2$.inboundSchema = UpdateProjectDataCacheRoute2$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheRoute2$outboundSchema` instead. */
    UpdateProjectDataCacheRoute2$.outboundSchema = UpdateProjectDataCacheRoute2$outboundSchema;
})(UpdateProjectDataCacheRoute2$ || (UpdateProjectDataCacheRoute2$ = {}));
export function updateProjectDataCacheRoute2ToJSON(updateProjectDataCacheRoute2) {
    return JSON.stringify(UpdateProjectDataCacheRoute2$outboundSchema.parse(updateProjectDataCacheRoute2));
}
export function updateProjectDataCacheRoute2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheRoute2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheRoute2' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheRoute1$inboundSchema = z.object({
    src: z.string(),
    status: z.number(),
});
/** @internal */
export const UpdateProjectDataCacheRoute1$outboundSchema = z.object({
    src: z.string(),
    status: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheRoute1$;
(function (UpdateProjectDataCacheRoute1$) {
    /** @deprecated use `UpdateProjectDataCacheRoute1$inboundSchema` instead. */
    UpdateProjectDataCacheRoute1$.inboundSchema = UpdateProjectDataCacheRoute1$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheRoute1$outboundSchema` instead. */
    UpdateProjectDataCacheRoute1$.outboundSchema = UpdateProjectDataCacheRoute1$outboundSchema;
})(UpdateProjectDataCacheRoute1$ || (UpdateProjectDataCacheRoute1$ = {}));
export function updateProjectDataCacheRoute1ToJSON(updateProjectDataCacheRoute1) {
    return JSON.stringify(UpdateProjectDataCacheRoute1$outboundSchema.parse(updateProjectDataCacheRoute1));
}
export function updateProjectDataCacheRoute1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheRoute1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheRoute1' from JSON`);
}
/** @internal */
export const BlockHistoryRoute$inboundSchema = z.union([
    z.lazy(() => UpdateProjectDataCacheRoute1$inboundSchema),
    z.lazy(() => UpdateProjectDataCacheRoute2$inboundSchema),
]);
/** @internal */
export const BlockHistoryRoute$outboundSchema = z.union([
    z.lazy(() => UpdateProjectDataCacheRoute1$outboundSchema),
    z.lazy(() => UpdateProjectDataCacheRoute2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BlockHistoryRoute$;
(function (BlockHistoryRoute$) {
    /** @deprecated use `BlockHistoryRoute$inboundSchema` instead. */
    BlockHistoryRoute$.inboundSchema = BlockHistoryRoute$inboundSchema;
    /** @deprecated use `BlockHistoryRoute$outboundSchema` instead. */
    BlockHistoryRoute$.outboundSchema = BlockHistoryRoute$outboundSchema;
})(BlockHistoryRoute$ || (BlockHistoryRoute$ = {}));
export function blockHistoryRouteToJSON(blockHistoryRoute) {
    return JSON.stringify(BlockHistoryRoute$outboundSchema.parse(blockHistoryRoute));
}
export function blockHistoryRouteFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BlockHistoryRoute$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BlockHistoryRoute' from JSON`);
}
/** @internal */
export const BlockHistory4$inboundSchema = z.object({
    action: UpdateProjectDataCacheBlockHistoryProjectsResponseAction$inboundSchema,
    route: z.union([
        z.lazy(() => UpdateProjectDataCacheRoute1$inboundSchema),
        z.lazy(() => UpdateProjectDataCacheRoute2$inboundSchema),
    ]),
    statusCode: z.number().optional(),
    createdAt: z.number(),
    caseId: z.string().optional(),
    actor: z.string().optional(),
    comment: z.string().optional(),
    isCascading: z.boolean().optional(),
});
/** @internal */
export const BlockHistory4$outboundSchema = z.object({
    action: UpdateProjectDataCacheBlockHistoryProjectsResponseAction$outboundSchema,
    route: z.union([
        z.lazy(() => UpdateProjectDataCacheRoute1$outboundSchema),
        z.lazy(() => UpdateProjectDataCacheRoute2$outboundSchema),
    ]),
    statusCode: z.number().optional(),
    createdAt: z.number(),
    caseId: z.string().optional(),
    actor: z.string().optional(),
    comment: z.string().optional(),
    isCascading: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BlockHistory4$;
(function (BlockHistory4$) {
    /** @deprecated use `BlockHistory4$inboundSchema` instead. */
    BlockHistory4$.inboundSchema = BlockHistory4$inboundSchema;
    /** @deprecated use `BlockHistory4$outboundSchema` instead. */
    BlockHistory4$.outboundSchema = BlockHistory4$outboundSchema;
})(BlockHistory4$ || (BlockHistory4$ = {}));
export function blockHistory4ToJSON(blockHistory4) {
    return JSON.stringify(BlockHistory4$outboundSchema.parse(blockHistory4));
}
export function blockHistory4FromJSON(jsonString) {
    return safeParse(jsonString, (x) => BlockHistory4$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BlockHistory4' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheBlockHistoryProjectsAction$inboundSchema = z
    .nativeEnum(UpdateProjectDataCacheBlockHistoryProjectsAction);
/** @internal */
export const UpdateProjectDataCacheBlockHistoryProjectsAction$outboundSchema = UpdateProjectDataCacheBlockHistoryProjectsAction$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheBlockHistoryProjectsAction$;
(function (UpdateProjectDataCacheBlockHistoryProjectsAction$) {
    /** @deprecated use `UpdateProjectDataCacheBlockHistoryProjectsAction$inboundSchema` instead. */
    UpdateProjectDataCacheBlockHistoryProjectsAction$.inboundSchema = UpdateProjectDataCacheBlockHistoryProjectsAction$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheBlockHistoryProjectsAction$outboundSchema` instead. */
    UpdateProjectDataCacheBlockHistoryProjectsAction$.outboundSchema = UpdateProjectDataCacheBlockHistoryProjectsAction$outboundSchema;
})(UpdateProjectDataCacheBlockHistoryProjectsAction$ || (UpdateProjectDataCacheBlockHistoryProjectsAction$ = {}));
/** @internal */
export const UpdateProjectDataCacheHasProjectsResponse200ApplicationJSONType$inboundSchema = z.nativeEnum(UpdateProjectDataCacheHasProjectsResponse200ApplicationJSONType);
/** @internal */
export const UpdateProjectDataCacheHasProjectsResponse200ApplicationJSONType$outboundSchema = UpdateProjectDataCacheHasProjectsResponse200ApplicationJSONType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheHasProjectsResponse200ApplicationJSONType$;
(function (UpdateProjectDataCacheHasProjectsResponse200ApplicationJSONType$) {
    /** @deprecated use `UpdateProjectDataCacheHasProjectsResponse200ApplicationJSONType$inboundSchema` instead. */
    UpdateProjectDataCacheHasProjectsResponse200ApplicationJSONType$.inboundSchema = UpdateProjectDataCacheHasProjectsResponse200ApplicationJSONType$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheHasProjectsResponse200ApplicationJSONType$outboundSchema` instead. */
    UpdateProjectDataCacheHasProjectsResponse200ApplicationJSONType$.outboundSchema = UpdateProjectDataCacheHasProjectsResponse200ApplicationJSONType$outboundSchema;
})(UpdateProjectDataCacheHasProjectsResponse200ApplicationJSONType$ || (UpdateProjectDataCacheHasProjectsResponse200ApplicationJSONType$ = {}));
/** @internal */
export const UpdateProjectDataCacheHasProjectsResponse200Value$inboundSchema = z.object({
    eq: z.string(),
});
/** @internal */
export const UpdateProjectDataCacheHasProjectsResponse200Value$outboundSchema = z.object({
    eq: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheHasProjectsResponse200Value$;
(function (UpdateProjectDataCacheHasProjectsResponse200Value$) {
    /** @deprecated use `UpdateProjectDataCacheHasProjectsResponse200Value$inboundSchema` instead. */
    UpdateProjectDataCacheHasProjectsResponse200Value$.inboundSchema = UpdateProjectDataCacheHasProjectsResponse200Value$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheHasProjectsResponse200Value$outboundSchema` instead. */
    UpdateProjectDataCacheHasProjectsResponse200Value$.outboundSchema = UpdateProjectDataCacheHasProjectsResponse200Value$outboundSchema;
})(UpdateProjectDataCacheHasProjectsResponse200Value$ || (UpdateProjectDataCacheHasProjectsResponse200Value$ = {}));
export function updateProjectDataCacheHasProjectsResponse200ValueToJSON(updateProjectDataCacheHasProjectsResponse200Value) {
    return JSON.stringify(UpdateProjectDataCacheHasProjectsResponse200Value$outboundSchema.parse(updateProjectDataCacheHasProjectsResponse200Value));
}
export function updateProjectDataCacheHasProjectsResponse200ValueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheHasProjectsResponse200Value$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheHasProjectsResponse200Value' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheHasProjects2$inboundSchema = z.object({
    type: UpdateProjectDataCacheHasProjectsResponse200ApplicationJSONType$inboundSchema,
    value: z.lazy(() => UpdateProjectDataCacheHasProjectsResponse200Value$inboundSchema),
});
/** @internal */
export const UpdateProjectDataCacheHasProjects2$outboundSchema = z.object({
    type: UpdateProjectDataCacheHasProjectsResponse200ApplicationJSONType$outboundSchema,
    value: z.lazy(() => UpdateProjectDataCacheHasProjectsResponse200Value$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheHasProjects2$;
(function (UpdateProjectDataCacheHasProjects2$) {
    /** @deprecated use `UpdateProjectDataCacheHasProjects2$inboundSchema` instead. */
    UpdateProjectDataCacheHasProjects2$.inboundSchema = UpdateProjectDataCacheHasProjects2$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheHasProjects2$outboundSchema` instead. */
    UpdateProjectDataCacheHasProjects2$.outboundSchema = UpdateProjectDataCacheHasProjects2$outboundSchema;
})(UpdateProjectDataCacheHasProjects2$ || (UpdateProjectDataCacheHasProjects2$ = {}));
export function updateProjectDataCacheHasProjects2ToJSON(updateProjectDataCacheHasProjects2) {
    return JSON.stringify(UpdateProjectDataCacheHasProjects2$outboundSchema.parse(updateProjectDataCacheHasProjects2));
}
export function updateProjectDataCacheHasProjects2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheHasProjects2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheHasProjects2' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheHasProjectsResponse200Type$inboundSchema = z
    .nativeEnum(UpdateProjectDataCacheHasProjectsResponse200Type);
/** @internal */
export const UpdateProjectDataCacheHasProjectsResponse200Type$outboundSchema = UpdateProjectDataCacheHasProjectsResponse200Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheHasProjectsResponse200Type$;
(function (UpdateProjectDataCacheHasProjectsResponse200Type$) {
    /** @deprecated use `UpdateProjectDataCacheHasProjectsResponse200Type$inboundSchema` instead. */
    UpdateProjectDataCacheHasProjectsResponse200Type$.inboundSchema = UpdateProjectDataCacheHasProjectsResponse200Type$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheHasProjectsResponse200Type$outboundSchema` instead. */
    UpdateProjectDataCacheHasProjectsResponse200Type$.outboundSchema = UpdateProjectDataCacheHasProjectsResponse200Type$outboundSchema;
})(UpdateProjectDataCacheHasProjectsResponse200Type$ || (UpdateProjectDataCacheHasProjectsResponse200Type$ = {}));
/** @internal */
export const UpdateProjectDataCacheHasKey$inboundSchema = z.nativeEnum(UpdateProjectDataCacheHasKey);
/** @internal */
export const UpdateProjectDataCacheHasKey$outboundSchema = UpdateProjectDataCacheHasKey$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheHasKey$;
(function (UpdateProjectDataCacheHasKey$) {
    /** @deprecated use `UpdateProjectDataCacheHasKey$inboundSchema` instead. */
    UpdateProjectDataCacheHasKey$.inboundSchema = UpdateProjectDataCacheHasKey$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheHasKey$outboundSchema` instead. */
    UpdateProjectDataCacheHasKey$.outboundSchema = UpdateProjectDataCacheHasKey$outboundSchema;
})(UpdateProjectDataCacheHasKey$ || (UpdateProjectDataCacheHasKey$ = {}));
/** @internal */
export const UpdateProjectDataCacheHasProjectsResponseValue$inboundSchema = z.object({
    eq: z.string(),
});
/** @internal */
export const UpdateProjectDataCacheHasProjectsResponseValue$outboundSchema = z.object({
    eq: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheHasProjectsResponseValue$;
(function (UpdateProjectDataCacheHasProjectsResponseValue$) {
    /** @deprecated use `UpdateProjectDataCacheHasProjectsResponseValue$inboundSchema` instead. */
    UpdateProjectDataCacheHasProjectsResponseValue$.inboundSchema = UpdateProjectDataCacheHasProjectsResponseValue$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheHasProjectsResponseValue$outboundSchema` instead. */
    UpdateProjectDataCacheHasProjectsResponseValue$.outboundSchema = UpdateProjectDataCacheHasProjectsResponseValue$outboundSchema;
})(UpdateProjectDataCacheHasProjectsResponseValue$ || (UpdateProjectDataCacheHasProjectsResponseValue$ = {}));
export function updateProjectDataCacheHasProjectsResponseValueToJSON(updateProjectDataCacheHasProjectsResponseValue) {
    return JSON.stringify(UpdateProjectDataCacheHasProjectsResponseValue$outboundSchema.parse(updateProjectDataCacheHasProjectsResponseValue));
}
export function updateProjectDataCacheHasProjectsResponseValueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheHasProjectsResponseValue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheHasProjectsResponseValue' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheHasProjects1$inboundSchema = z.object({
    type: UpdateProjectDataCacheHasProjectsResponse200Type$inboundSchema,
    key: UpdateProjectDataCacheHasKey$inboundSchema,
    value: z.lazy(() => UpdateProjectDataCacheHasProjectsResponseValue$inboundSchema),
});
/** @internal */
export const UpdateProjectDataCacheHasProjects1$outboundSchema = z.object({
    type: UpdateProjectDataCacheHasProjectsResponse200Type$outboundSchema,
    key: UpdateProjectDataCacheHasKey$outboundSchema,
    value: z.lazy(() => UpdateProjectDataCacheHasProjectsResponseValue$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheHasProjects1$;
(function (UpdateProjectDataCacheHasProjects1$) {
    /** @deprecated use `UpdateProjectDataCacheHasProjects1$inboundSchema` instead. */
    UpdateProjectDataCacheHasProjects1$.inboundSchema = UpdateProjectDataCacheHasProjects1$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheHasProjects1$outboundSchema` instead. */
    UpdateProjectDataCacheHasProjects1$.outboundSchema = UpdateProjectDataCacheHasProjects1$outboundSchema;
})(UpdateProjectDataCacheHasProjects1$ || (UpdateProjectDataCacheHasProjects1$ = {}));
export function updateProjectDataCacheHasProjects1ToJSON(updateProjectDataCacheHasProjects1) {
    return JSON.stringify(UpdateProjectDataCacheHasProjects1$outboundSchema.parse(updateProjectDataCacheHasProjects1));
}
export function updateProjectDataCacheHasProjects1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheHasProjects1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheHasProjects1' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheRouteHas$inboundSchema = z.union([
    z.lazy(() => UpdateProjectDataCacheHasProjects1$inboundSchema),
    z.lazy(() => UpdateProjectDataCacheHasProjects2$inboundSchema),
]);
/** @internal */
export const UpdateProjectDataCacheRouteHas$outboundSchema = z.union([
    z.lazy(() => UpdateProjectDataCacheHasProjects1$outboundSchema),
    z.lazy(() => UpdateProjectDataCacheHasProjects2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheRouteHas$;
(function (UpdateProjectDataCacheRouteHas$) {
    /** @deprecated use `UpdateProjectDataCacheRouteHas$inboundSchema` instead. */
    UpdateProjectDataCacheRouteHas$.inboundSchema = UpdateProjectDataCacheRouteHas$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheRouteHas$outboundSchema` instead. */
    UpdateProjectDataCacheRouteHas$.outboundSchema = UpdateProjectDataCacheRouteHas$outboundSchema;
})(UpdateProjectDataCacheRouteHas$ || (UpdateProjectDataCacheRouteHas$ = {}));
export function updateProjectDataCacheRouteHasToJSON(updateProjectDataCacheRouteHas) {
    return JSON.stringify(UpdateProjectDataCacheRouteHas$outboundSchema.parse(updateProjectDataCacheRouteHas));
}
export function updateProjectDataCacheRouteHasFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheRouteHas$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheRouteHas' from JSON`);
}
/** @internal */
export const RouteAction$inboundSchema = z
    .nativeEnum(RouteAction);
/** @internal */
export const RouteAction$outboundSchema = RouteAction$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RouteAction$;
(function (RouteAction$) {
    /** @deprecated use `RouteAction$inboundSchema` instead. */
    RouteAction$.inboundSchema = RouteAction$inboundSchema;
    /** @deprecated use `RouteAction$outboundSchema` instead. */
    RouteAction$.outboundSchema = RouteAction$outboundSchema;
})(RouteAction$ || (RouteAction$ = {}));
/** @internal */
export const UpdateProjectDataCacheRouteMitigate$inboundSchema = z.object({
    action: RouteAction$inboundSchema,
});
/** @internal */
export const UpdateProjectDataCacheRouteMitigate$outboundSchema = z.object({
    action: RouteAction$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheRouteMitigate$;
(function (UpdateProjectDataCacheRouteMitigate$) {
    /** @deprecated use `UpdateProjectDataCacheRouteMitigate$inboundSchema` instead. */
    UpdateProjectDataCacheRouteMitigate$.inboundSchema = UpdateProjectDataCacheRouteMitigate$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheRouteMitigate$outboundSchema` instead. */
    UpdateProjectDataCacheRouteMitigate$.outboundSchema = UpdateProjectDataCacheRouteMitigate$outboundSchema;
})(UpdateProjectDataCacheRouteMitigate$ || (UpdateProjectDataCacheRouteMitigate$ = {}));
export function updateProjectDataCacheRouteMitigateToJSON(updateProjectDataCacheRouteMitigate) {
    return JSON.stringify(UpdateProjectDataCacheRouteMitigate$outboundSchema.parse(updateProjectDataCacheRouteMitigate));
}
export function updateProjectDataCacheRouteMitigateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheRouteMitigate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheRouteMitigate' from JSON`);
}
/** @internal */
export const Route2$inboundSchema = z
    .object({
    has: z.array(z.union([
        z.lazy(() => UpdateProjectDataCacheHasProjects1$inboundSchema),
        z.lazy(() => UpdateProjectDataCacheHasProjects2$inboundSchema),
    ])),
    mitigate: z.lazy(() => UpdateProjectDataCacheRouteMitigate$inboundSchema),
    src: z.string().optional(),
});
/** @internal */
export const Route2$outboundSchema = z.object({
    has: z.array(z.union([
        z.lazy(() => UpdateProjectDataCacheHasProjects1$outboundSchema),
        z.lazy(() => UpdateProjectDataCacheHasProjects2$outboundSchema),
    ])),
    mitigate: z.lazy(() => UpdateProjectDataCacheRouteMitigate$outboundSchema),
    src: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Route2$;
(function (Route2$) {
    /** @deprecated use `Route2$inboundSchema` instead. */
    Route2$.inboundSchema = Route2$inboundSchema;
    /** @deprecated use `Route2$outboundSchema` instead. */
    Route2$.outboundSchema = Route2$outboundSchema;
})(Route2$ || (Route2$ = {}));
export function route2ToJSON(route2) {
    return JSON.stringify(Route2$outboundSchema.parse(route2));
}
export function route2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Route2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Route2' from JSON`);
}
/** @internal */
export const Route1$inboundSchema = z
    .object({
    src: z.string(),
    status: z.number(),
});
/** @internal */
export const Route1$outboundSchema = z.object({
    src: z.string(),
    status: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Route1$;
(function (Route1$) {
    /** @deprecated use `Route1$inboundSchema` instead. */
    Route1$.inboundSchema = Route1$inboundSchema;
    /** @deprecated use `Route1$outboundSchema` instead. */
    Route1$.outboundSchema = Route1$outboundSchema;
})(Route1$ || (Route1$ = {}));
export function route1ToJSON(route1) {
    return JSON.stringify(Route1$outboundSchema.parse(route1));
}
export function route1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Route1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Route1' from JSON`);
}
/** @internal */
export const Route$inboundSchema = z
    .union([
    z.lazy(() => Route1$inboundSchema),
    z.lazy(() => Route2$inboundSchema),
]);
/** @internal */
export const Route$outboundSchema = z.union([
    z.lazy(() => Route1$outboundSchema),
    z.lazy(() => Route2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Route$;
(function (Route$) {
    /** @deprecated use `Route$inboundSchema` instead. */
    Route$.inboundSchema = Route$inboundSchema;
    /** @deprecated use `Route$outboundSchema` instead. */
    Route$.outboundSchema = Route$outboundSchema;
})(Route$ || (Route$ = {}));
export function routeToJSON(route) {
    return JSON.stringify(Route$outboundSchema.parse(route));
}
export function routeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Route$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Route' from JSON`);
}
/** @internal */
export const BlockHistory3$inboundSchema = z.object({
    action: UpdateProjectDataCacheBlockHistoryProjectsAction$inboundSchema,
    route: z.union([
        z.lazy(() => Route1$inboundSchema),
        z.lazy(() => Route2$inboundSchema),
    ]),
    reason: z.string(),
    createdAt: z.number(),
    caseId: z.string().optional(),
    actor: z.string().optional(),
    comment: z.string().optional(),
    isCascading: z.boolean().optional(),
});
/** @internal */
export const BlockHistory3$outboundSchema = z.object({
    action: UpdateProjectDataCacheBlockHistoryProjectsAction$outboundSchema,
    route: z.union([
        z.lazy(() => Route1$outboundSchema),
        z.lazy(() => Route2$outboundSchema),
    ]),
    reason: z.string(),
    createdAt: z.number(),
    caseId: z.string().optional(),
    actor: z.string().optional(),
    comment: z.string().optional(),
    isCascading: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BlockHistory3$;
(function (BlockHistory3$) {
    /** @deprecated use `BlockHistory3$inboundSchema` instead. */
    BlockHistory3$.inboundSchema = BlockHistory3$inboundSchema;
    /** @deprecated use `BlockHistory3$outboundSchema` instead. */
    BlockHistory3$.outboundSchema = BlockHistory3$outboundSchema;
})(BlockHistory3$ || (BlockHistory3$ = {}));
export function blockHistory3ToJSON(blockHistory3) {
    return JSON.stringify(BlockHistory3$outboundSchema.parse(blockHistory3));
}
export function blockHistory3FromJSON(jsonString) {
    return safeParse(jsonString, (x) => BlockHistory3$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BlockHistory3' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheBlockHistoryAction$inboundSchema = z
    .nativeEnum(UpdateProjectDataCacheBlockHistoryAction);
/** @internal */
export const UpdateProjectDataCacheBlockHistoryAction$outboundSchema = UpdateProjectDataCacheBlockHistoryAction$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheBlockHistoryAction$;
(function (UpdateProjectDataCacheBlockHistoryAction$) {
    /** @deprecated use `UpdateProjectDataCacheBlockHistoryAction$inboundSchema` instead. */
    UpdateProjectDataCacheBlockHistoryAction$.inboundSchema = UpdateProjectDataCacheBlockHistoryAction$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheBlockHistoryAction$outboundSchema` instead. */
    UpdateProjectDataCacheBlockHistoryAction$.outboundSchema = UpdateProjectDataCacheBlockHistoryAction$outboundSchema;
})(UpdateProjectDataCacheBlockHistoryAction$ || (UpdateProjectDataCacheBlockHistoryAction$ = {}));
/** @internal */
export const BlockHistory2$inboundSchema = z.object({
    action: UpdateProjectDataCacheBlockHistoryAction$inboundSchema,
    createdAt: z.number(),
    caseId: z.string().optional(),
    actor: z.string().optional(),
    comment: z.string().optional(),
    isCascading: z.boolean().optional(),
});
/** @internal */
export const BlockHistory2$outboundSchema = z.object({
    action: UpdateProjectDataCacheBlockHistoryAction$outboundSchema,
    createdAt: z.number(),
    caseId: z.string().optional(),
    actor: z.string().optional(),
    comment: z.string().optional(),
    isCascading: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BlockHistory2$;
(function (BlockHistory2$) {
    /** @deprecated use `BlockHistory2$inboundSchema` instead. */
    BlockHistory2$.inboundSchema = BlockHistory2$inboundSchema;
    /** @deprecated use `BlockHistory2$outboundSchema` instead. */
    BlockHistory2$.outboundSchema = BlockHistory2$outboundSchema;
})(BlockHistory2$ || (BlockHistory2$ = {}));
export function blockHistory2ToJSON(blockHistory2) {
    return JSON.stringify(BlockHistory2$outboundSchema.parse(blockHistory2));
}
export function blockHistory2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => BlockHistory2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BlockHistory2' from JSON`);
}
/** @internal */
export const BlockHistoryAction$inboundSchema = z.nativeEnum(BlockHistoryAction);
/** @internal */
export const BlockHistoryAction$outboundSchema = BlockHistoryAction$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BlockHistoryAction$;
(function (BlockHistoryAction$) {
    /** @deprecated use `BlockHistoryAction$inboundSchema` instead. */
    BlockHistoryAction$.inboundSchema = BlockHistoryAction$inboundSchema;
    /** @deprecated use `BlockHistoryAction$outboundSchema` instead. */
    BlockHistoryAction$.outboundSchema = BlockHistoryAction$outboundSchema;
})(BlockHistoryAction$ || (BlockHistoryAction$ = {}));
/** @internal */
export const BlockHistory1$inboundSchema = z.object({
    action: BlockHistoryAction$inboundSchema,
    reason: z.string(),
    statusCode: z.number(),
    createdAt: z.number(),
    caseId: z.string().optional(),
    actor: z.string().optional(),
    comment: z.string().optional(),
    isCascading: z.boolean().optional(),
});
/** @internal */
export const BlockHistory1$outboundSchema = z.object({
    action: BlockHistoryAction$outboundSchema,
    reason: z.string(),
    statusCode: z.number(),
    createdAt: z.number(),
    caseId: z.string().optional(),
    actor: z.string().optional(),
    comment: z.string().optional(),
    isCascading: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BlockHistory1$;
(function (BlockHistory1$) {
    /** @deprecated use `BlockHistory1$inboundSchema` instead. */
    BlockHistory1$.inboundSchema = BlockHistory1$inboundSchema;
    /** @deprecated use `BlockHistory1$outboundSchema` instead. */
    BlockHistory1$.outboundSchema = BlockHistory1$outboundSchema;
})(BlockHistory1$ || (BlockHistory1$ = {}));
export function blockHistory1ToJSON(blockHistory1) {
    return JSON.stringify(BlockHistory1$outboundSchema.parse(blockHistory1));
}
export function blockHistory1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => BlockHistory1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BlockHistory1' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheBlockHistory$inboundSchema = z.union([
    z.lazy(() => BlockHistory1$inboundSchema),
    z.lazy(() => BlockHistory3$inboundSchema),
    z.lazy(() => BlockHistory4$inboundSchema),
    z.lazy(() => BlockHistory2$inboundSchema),
]);
/** @internal */
export const UpdateProjectDataCacheBlockHistory$outboundSchema = z.union([
    z.lazy(() => BlockHistory1$outboundSchema),
    z.lazy(() => BlockHistory3$outboundSchema),
    z.lazy(() => BlockHistory4$outboundSchema),
    z.lazy(() => BlockHistory2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheBlockHistory$;
(function (UpdateProjectDataCacheBlockHistory$) {
    /** @deprecated use `UpdateProjectDataCacheBlockHistory$inboundSchema` instead. */
    UpdateProjectDataCacheBlockHistory$.inboundSchema = UpdateProjectDataCacheBlockHistory$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheBlockHistory$outboundSchema` instead. */
    UpdateProjectDataCacheBlockHistory$.outboundSchema = UpdateProjectDataCacheBlockHistory$outboundSchema;
})(UpdateProjectDataCacheBlockHistory$ || (UpdateProjectDataCacheBlockHistory$ = {}));
export function updateProjectDataCacheBlockHistoryToJSON(updateProjectDataCacheBlockHistory) {
    return JSON.stringify(UpdateProjectDataCacheBlockHistory$outboundSchema.parse(updateProjectDataCacheBlockHistory));
}
export function updateProjectDataCacheBlockHistoryFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheBlockHistory$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheBlockHistory' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheAbuse$inboundSchema = z.object({
    scanner: z.string().optional(),
    history: z.array(z.lazy(() => UpdateProjectDataCacheHistory$inboundSchema)),
    updatedAt: z.number(),
    block: z.lazy(() => Block$inboundSchema).optional(),
    blockHistory: z.array(z.union([
        z.lazy(() => BlockHistory1$inboundSchema),
        z.lazy(() => BlockHistory3$inboundSchema),
        z.lazy(() => BlockHistory4$inboundSchema),
        z.lazy(() => BlockHistory2$inboundSchema),
    ])).optional(),
});
/** @internal */
export const UpdateProjectDataCacheAbuse$outboundSchema = z.object({
    scanner: z.string().optional(),
    history: z.array(z.lazy(() => UpdateProjectDataCacheHistory$outboundSchema)),
    updatedAt: z.number(),
    block: z.lazy(() => Block$outboundSchema).optional(),
    blockHistory: z.array(z.union([
        z.lazy(() => BlockHistory1$outboundSchema),
        z.lazy(() => BlockHistory3$outboundSchema),
        z.lazy(() => BlockHistory4$outboundSchema),
        z.lazy(() => BlockHistory2$outboundSchema),
    ])).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheAbuse$;
(function (UpdateProjectDataCacheAbuse$) {
    /** @deprecated use `UpdateProjectDataCacheAbuse$inboundSchema` instead. */
    UpdateProjectDataCacheAbuse$.inboundSchema = UpdateProjectDataCacheAbuse$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheAbuse$outboundSchema` instead. */
    UpdateProjectDataCacheAbuse$.outboundSchema = UpdateProjectDataCacheAbuse$outboundSchema;
})(UpdateProjectDataCacheAbuse$ || (UpdateProjectDataCacheAbuse$ = {}));
export function updateProjectDataCacheAbuseToJSON(updateProjectDataCacheAbuse) {
    return JSON.stringify(UpdateProjectDataCacheAbuse$outboundSchema.parse(updateProjectDataCacheAbuse));
}
export function updateProjectDataCacheAbuseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheAbuse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheAbuse' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheHasType$inboundSchema = z.nativeEnum(UpdateProjectDataCacheHasType);
/** @internal */
export const UpdateProjectDataCacheHasType$outboundSchema = UpdateProjectDataCacheHasType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheHasType$;
(function (UpdateProjectDataCacheHasType$) {
    /** @deprecated use `UpdateProjectDataCacheHasType$inboundSchema` instead. */
    UpdateProjectDataCacheHasType$.inboundSchema = UpdateProjectDataCacheHasType$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheHasType$outboundSchema` instead. */
    UpdateProjectDataCacheHasType$.outboundSchema = UpdateProjectDataCacheHasType$outboundSchema;
})(UpdateProjectDataCacheHasType$ || (UpdateProjectDataCacheHasType$ = {}));
/** @internal */
export const HasValue$inboundSchema = z.object({
    eq: z.string(),
});
/** @internal */
export const HasValue$outboundSchema = z.object({
    eq: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var HasValue$;
(function (HasValue$) {
    /** @deprecated use `HasValue$inboundSchema` instead. */
    HasValue$.inboundSchema = HasValue$inboundSchema;
    /** @deprecated use `HasValue$outboundSchema` instead. */
    HasValue$.outboundSchema = HasValue$outboundSchema;
})(HasValue$ || (HasValue$ = {}));
export function hasValueToJSON(hasValue) {
    return JSON.stringify(HasValue$outboundSchema.parse(hasValue));
}
export function hasValueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => HasValue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'HasValue' from JSON`);
}
/** @internal */
export const Has2$inboundSchema = z
    .object({
    type: UpdateProjectDataCacheHasType$inboundSchema,
    value: z.lazy(() => HasValue$inboundSchema),
});
/** @internal */
export const Has2$outboundSchema = z.object({
    type: UpdateProjectDataCacheHasType$outboundSchema,
    value: z.lazy(() => HasValue$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Has2$;
(function (Has2$) {
    /** @deprecated use `Has2$inboundSchema` instead. */
    Has2$.inboundSchema = Has2$inboundSchema;
    /** @deprecated use `Has2$outboundSchema` instead. */
    Has2$.outboundSchema = Has2$outboundSchema;
})(Has2$ || (Has2$ = {}));
export function has2ToJSON(has2) {
    return JSON.stringify(Has2$outboundSchema.parse(has2));
}
export function has2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Has2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Has2' from JSON`);
}
/** @internal */
export const HasType$inboundSchema = z
    .nativeEnum(HasType);
/** @internal */
export const HasType$outboundSchema = HasType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var HasType$;
(function (HasType$) {
    /** @deprecated use `HasType$inboundSchema` instead. */
    HasType$.inboundSchema = HasType$inboundSchema;
    /** @deprecated use `HasType$outboundSchema` instead. */
    HasType$.outboundSchema = HasType$outboundSchema;
})(HasType$ || (HasType$ = {}));
/** @internal */
export const Key$inboundSchema = z.nativeEnum(Key);
/** @internal */
export const Key$outboundSchema = Key$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Key$;
(function (Key$) {
    /** @deprecated use `Key$inboundSchema` instead. */
    Key$.inboundSchema = Key$inboundSchema;
    /** @deprecated use `Key$outboundSchema` instead. */
    Key$.outboundSchema = Key$outboundSchema;
})(Key$ || (Key$ = {}));
/** @internal */
export const UpdateProjectDataCacheHasValue$inboundSchema = z.object({
    eq: z.string(),
});
/** @internal */
export const UpdateProjectDataCacheHasValue$outboundSchema = z.object({
    eq: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheHasValue$;
(function (UpdateProjectDataCacheHasValue$) {
    /** @deprecated use `UpdateProjectDataCacheHasValue$inboundSchema` instead. */
    UpdateProjectDataCacheHasValue$.inboundSchema = UpdateProjectDataCacheHasValue$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheHasValue$outboundSchema` instead. */
    UpdateProjectDataCacheHasValue$.outboundSchema = UpdateProjectDataCacheHasValue$outboundSchema;
})(UpdateProjectDataCacheHasValue$ || (UpdateProjectDataCacheHasValue$ = {}));
export function updateProjectDataCacheHasValueToJSON(updateProjectDataCacheHasValue) {
    return JSON.stringify(UpdateProjectDataCacheHasValue$outboundSchema.parse(updateProjectDataCacheHasValue));
}
export function updateProjectDataCacheHasValueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheHasValue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheHasValue' from JSON`);
}
/** @internal */
export const Has1$inboundSchema = z
    .object({
    type: HasType$inboundSchema,
    key: Key$inboundSchema,
    value: z.lazy(() => UpdateProjectDataCacheHasValue$inboundSchema),
});
/** @internal */
export const Has1$outboundSchema = z.object({
    type: HasType$outboundSchema,
    key: Key$outboundSchema,
    value: z.lazy(() => UpdateProjectDataCacheHasValue$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Has1$;
(function (Has1$) {
    /** @deprecated use `Has1$inboundSchema` instead. */
    Has1$.inboundSchema = Has1$inboundSchema;
    /** @deprecated use `Has1$outboundSchema` instead. */
    Has1$.outboundSchema = Has1$outboundSchema;
})(Has1$ || (Has1$ = {}));
export function has1ToJSON(has1) {
    return JSON.stringify(Has1$outboundSchema.parse(has1));
}
export function has1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Has1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Has1' from JSON`);
}
/** @internal */
export const Has$inboundSchema = z.union([z.lazy(() => Has1$inboundSchema), z.lazy(() => Has2$inboundSchema)]);
/** @internal */
export const Has$outboundSchema = z
    .union([
    z.lazy(() => Has1$outboundSchema),
    z.lazy(() => Has2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Has$;
(function (Has$) {
    /** @deprecated use `Has$inboundSchema` instead. */
    Has$.inboundSchema = Has$inboundSchema;
    /** @deprecated use `Has$outboundSchema` instead. */
    Has$.outboundSchema = Has$outboundSchema;
})(Has$ || (Has$ = {}));
export function hasToJSON(has) {
    return JSON.stringify(Has$outboundSchema.parse(has));
}
export function hasFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Has$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Has' from JSON`);
}
/** @internal */
export const InternalRoutesAction$inboundSchema = z.nativeEnum(InternalRoutesAction);
/** @internal */
export const InternalRoutesAction$outboundSchema = InternalRoutesAction$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InternalRoutesAction$;
(function (InternalRoutesAction$) {
    /** @deprecated use `InternalRoutesAction$inboundSchema` instead. */
    InternalRoutesAction$.inboundSchema = InternalRoutesAction$inboundSchema;
    /** @deprecated use `InternalRoutesAction$outboundSchema` instead. */
    InternalRoutesAction$.outboundSchema = InternalRoutesAction$outboundSchema;
})(InternalRoutesAction$ || (InternalRoutesAction$ = {}));
/** @internal */
export const UpdateProjectDataCacheInternalRoutesMitigate$inboundSchema = z.object({
    action: InternalRoutesAction$inboundSchema,
});
/** @internal */
export const UpdateProjectDataCacheInternalRoutesMitigate$outboundSchema = z.object({
    action: InternalRoutesAction$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheInternalRoutesMitigate$;
(function (UpdateProjectDataCacheInternalRoutesMitigate$) {
    /** @deprecated use `UpdateProjectDataCacheInternalRoutesMitigate$inboundSchema` instead. */
    UpdateProjectDataCacheInternalRoutesMitigate$.inboundSchema = UpdateProjectDataCacheInternalRoutesMitigate$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheInternalRoutesMitigate$outboundSchema` instead. */
    UpdateProjectDataCacheInternalRoutesMitigate$.outboundSchema = UpdateProjectDataCacheInternalRoutesMitigate$outboundSchema;
})(UpdateProjectDataCacheInternalRoutesMitigate$ || (UpdateProjectDataCacheInternalRoutesMitigate$ = {}));
export function updateProjectDataCacheInternalRoutesMitigateToJSON(updateProjectDataCacheInternalRoutesMitigate) {
    return JSON.stringify(UpdateProjectDataCacheInternalRoutesMitigate$outboundSchema.parse(updateProjectDataCacheInternalRoutesMitigate));
}
export function updateProjectDataCacheInternalRoutesMitigateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheInternalRoutesMitigate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheInternalRoutesMitigate' from JSON`);
}
/** @internal */
export const InternalRoutes2$inboundSchema = z.object({
    has: z.array(z.union([
        z.lazy(() => Has1$inboundSchema),
        z.lazy(() => Has2$inboundSchema),
    ])),
    mitigate: z.lazy(() => UpdateProjectDataCacheInternalRoutesMitigate$inboundSchema),
    src: z.string().optional(),
});
/** @internal */
export const InternalRoutes2$outboundSchema = z.object({
    has: z.array(z.union([
        z.lazy(() => Has1$outboundSchema),
        z.lazy(() => Has2$outboundSchema),
    ])),
    mitigate: z.lazy(() => UpdateProjectDataCacheInternalRoutesMitigate$outboundSchema),
    src: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InternalRoutes2$;
(function (InternalRoutes2$) {
    /** @deprecated use `InternalRoutes2$inboundSchema` instead. */
    InternalRoutes2$.inboundSchema = InternalRoutes2$inboundSchema;
    /** @deprecated use `InternalRoutes2$outboundSchema` instead. */
    InternalRoutes2$.outboundSchema = InternalRoutes2$outboundSchema;
})(InternalRoutes2$ || (InternalRoutes2$ = {}));
export function internalRoutes2ToJSON(internalRoutes2) {
    return JSON.stringify(InternalRoutes2$outboundSchema.parse(internalRoutes2));
}
export function internalRoutes2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => InternalRoutes2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InternalRoutes2' from JSON`);
}
/** @internal */
export const InternalRoutes1$inboundSchema = z.object({
    src: z.string(),
    status: z.number(),
});
/** @internal */
export const InternalRoutes1$outboundSchema = z.object({
    src: z.string(),
    status: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InternalRoutes1$;
(function (InternalRoutes1$) {
    /** @deprecated use `InternalRoutes1$inboundSchema` instead. */
    InternalRoutes1$.inboundSchema = InternalRoutes1$inboundSchema;
    /** @deprecated use `InternalRoutes1$outboundSchema` instead. */
    InternalRoutes1$.outboundSchema = InternalRoutes1$outboundSchema;
})(InternalRoutes1$ || (InternalRoutes1$ = {}));
export function internalRoutes1ToJSON(internalRoutes1) {
    return JSON.stringify(InternalRoutes1$outboundSchema.parse(internalRoutes1));
}
export function internalRoutes1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => InternalRoutes1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InternalRoutes1' from JSON`);
}
/** @internal */
export const InternalRoutes$inboundSchema = z.union([
    z.lazy(() => InternalRoutes1$inboundSchema),
    z.lazy(() => InternalRoutes2$inboundSchema),
]);
/** @internal */
export const InternalRoutes$outboundSchema = z.union([
    z.lazy(() => InternalRoutes1$outboundSchema),
    z.lazy(() => InternalRoutes2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InternalRoutes$;
(function (InternalRoutes$) {
    /** @deprecated use `InternalRoutes$inboundSchema` instead. */
    InternalRoutes$.inboundSchema = InternalRoutes$inboundSchema;
    /** @deprecated use `InternalRoutes$outboundSchema` instead. */
    InternalRoutes$.outboundSchema = InternalRoutes$outboundSchema;
})(InternalRoutes$ || (InternalRoutes$ = {}));
export function internalRoutesToJSON(internalRoutes) {
    return JSON.stringify(InternalRoutes$outboundSchema.parse(internalRoutes));
}
export function internalRoutesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => InternalRoutes$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InternalRoutes' from JSON`);
}
/** @internal */
export const UpdateProjectDataCacheResponseBody$inboundSchema = z.object({
    accountId: z.string(),
    analytics: z.lazy(() => Analytics$inboundSchema).optional(),
    speedInsights: z.lazy(() => SpeedInsights$inboundSchema).optional(),
    autoExposeSystemEnvs: z.boolean().optional(),
    autoAssignCustomDomains: z.boolean().optional(),
    autoAssignCustomDomainsUpdatedBy: z.string().optional(),
    buildCommand: z.nullable(z.string()).optional(),
    commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
    connectConfigurations: z.nullable(z.array(z.lazy(() => UpdateProjectDataCacheConnectConfigurations$inboundSchema))).optional(),
    connectConfigurationId: z.nullable(z.string()).optional(),
    connectBuildsEnabled: z.boolean().optional(),
    passiveConnectConfigurationId: z.nullable(z.string()).optional(),
    createdAt: z.number().optional(),
    customerSupportCodeVisibility: z.boolean().optional(),
    crons: z.lazy(() => Crons$inboundSchema).optional(),
    dataCache: z.lazy(() => UpdateProjectDataCacheDataCache$inboundSchema)
        .optional(),
    deploymentExpiration: z.nullable(z.lazy(() => DeploymentExpiration$inboundSchema)).optional(),
    devCommand: z.nullable(z.string()).optional(),
    directoryListing: z.boolean(),
    installCommand: z.nullable(z.string()).optional(),
    env: z.array(z.lazy(() => Env$inboundSchema)).optional(),
    customEnvironments: z.array(z.lazy(() => CustomEnvironments$inboundSchema))
        .optional(),
    framework: z.nullable(UpdateProjectDataCacheFramework$inboundSchema)
        .optional(),
    gitForkProtection: z.boolean().optional(),
    gitLFS: z.boolean().optional(),
    id: z.string(),
    ipBuckets: z.array(z.lazy(() => UpdateProjectDataCacheIpBuckets$inboundSchema)).optional(),
    latestDeployments: z.array(z.lazy(() => LatestDeployments$inboundSchema))
        .optional(),
    link: z.union([
        z.lazy(() => Link4$inboundSchema),
        z.lazy(() => Link5$inboundSchema),
        z.lazy(() => Link3$inboundSchema),
        z.lazy(() => Link1$inboundSchema),
        z.lazy(() => Link2$inboundSchema),
    ]).optional(),
    microfrontends: z.union([
        z.lazy(() => UpdateProjectDataCacheMicrofrontends1$inboundSchema),
        z.lazy(() => UpdateProjectDataCacheMicrofrontends2$inboundSchema),
    ]).optional(),
    name: z.string(),
    nodeVersion: UpdateProjectDataCacheNodeVersion$inboundSchema,
    optionsAllowlist: z.nullable(z.lazy(() => UpdateProjectDataCacheOptionsAllowlist$inboundSchema)).optional(),
    outputDirectory: z.nullable(z.string()).optional(),
    passwordProtection: z.nullable(z.lazy(() => UpdateProjectDataCachePasswordProtection$inboundSchema)).optional(),
    productionDeploymentsFastLane: z.boolean().optional(),
    publicSource: z.nullable(z.boolean()).optional(),
    resourceConfig: z.lazy(() => UpdateProjectDataCacheResourceConfig$inboundSchema),
    rollbackDescription: z.lazy(() => RollbackDescription$inboundSchema)
        .optional(),
    rollingRelease: z.nullable(z.lazy(() => RollingRelease$inboundSchema))
        .optional(),
    defaultResourceConfig: z.lazy(() => DefaultResourceConfig$inboundSchema),
    rootDirectory: z.nullable(z.string()).optional(),
    serverlessFunctionZeroConfigFailover: z.boolean().optional(),
    skewProtectionBoundaryAt: z.number().optional(),
    skewProtectionMaxAge: z.number().optional(),
    skipGitConnectDuringLink: z.boolean().optional(),
    sourceFilesOutsideRootDirectory: z.boolean().optional(),
    enableAffectedProjectsDeployments: z.boolean().optional(),
    ssoProtection: z.nullable(z.lazy(() => UpdateProjectDataCacheSsoProtection$inboundSchema)).optional(),
    targets: z.record(z.nullable(z.lazy(() => Targets$inboundSchema))).optional(),
    transferCompletedAt: z.number().optional(),
    transferStartedAt: z.number().optional(),
    transferToAccountId: z.string().optional(),
    transferredFromAccountId: z.string().optional(),
    updatedAt: z.number().optional(),
    live: z.boolean().optional(),
    enablePreviewFeedback: z.nullable(z.boolean()).optional(),
    enableProductionFeedback: z.nullable(z.boolean()).optional(),
    permissions: z.lazy(() => Permissions$inboundSchema).optional(),
    lastRollbackTarget: z.nullable(z.lazy(() => LastRollbackTarget$inboundSchema))
        .optional(),
    lastAliasRequest: z.nullable(z.lazy(() => LastAliasRequest$inboundSchema))
        .optional(),
    protectionBypass: z.record(z.union([
        z.lazy(() => ProtectionBypass1$inboundSchema),
        z.lazy(() => ProtectionBypass2$inboundSchema),
    ])).optional(),
    hasActiveBranches: z.boolean().optional(),
    trustedIps: z.nullable(z.union([
        z.lazy(() => TrustedIps1$inboundSchema),
        z.lazy(() => TrustedIps2$inboundSchema),
    ])).optional(),
    gitComments: z.lazy(() => GitComments$inboundSchema).optional(),
    gitProviderOptions: z.lazy(() => GitProviderOptions$inboundSchema).optional(),
    paused: z.boolean().optional(),
    concurrencyBucketName: z.string().optional(),
    webAnalytics: z.lazy(() => UpdateProjectDataCacheWebAnalytics$inboundSchema)
        .optional(),
    security: z.lazy(() => UpdateProjectDataCacheSecurity$inboundSchema)
        .optional(),
    oidcTokenConfig: z.lazy(() => UpdateProjectDataCacheOidcTokenConfig$inboundSchema).optional(),
    tier: UpdateProjectDataCacheTier$inboundSchema.optional(),
    features: z.lazy(() => Features$inboundSchema).optional(),
    v0: z.boolean().optional(),
    abuse: z.lazy(() => UpdateProjectDataCacheAbuse$inboundSchema).optional(),
    internalRoutes: z.array(z.union([
        z.lazy(() => InternalRoutes1$inboundSchema),
        z.lazy(() => InternalRoutes2$inboundSchema),
    ])).optional(),
});
/** @internal */
export const UpdateProjectDataCacheResponseBody$outboundSchema = z.object({
    accountId: z.string(),
    analytics: z.lazy(() => Analytics$outboundSchema).optional(),
    speedInsights: z.lazy(() => SpeedInsights$outboundSchema).optional(),
    autoExposeSystemEnvs: z.boolean().optional(),
    autoAssignCustomDomains: z.boolean().optional(),
    autoAssignCustomDomainsUpdatedBy: z.string().optional(),
    buildCommand: z.nullable(z.string()).optional(),
    commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
    connectConfigurations: z.nullable(z.array(z.lazy(() => UpdateProjectDataCacheConnectConfigurations$outboundSchema))).optional(),
    connectConfigurationId: z.nullable(z.string()).optional(),
    connectBuildsEnabled: z.boolean().optional(),
    passiveConnectConfigurationId: z.nullable(z.string()).optional(),
    createdAt: z.number().optional(),
    customerSupportCodeVisibility: z.boolean().optional(),
    crons: z.lazy(() => Crons$outboundSchema).optional(),
    dataCache: z.lazy(() => UpdateProjectDataCacheDataCache$outboundSchema)
        .optional(),
    deploymentExpiration: z.nullable(z.lazy(() => DeploymentExpiration$outboundSchema)).optional(),
    devCommand: z.nullable(z.string()).optional(),
    directoryListing: z.boolean(),
    installCommand: z.nullable(z.string()).optional(),
    env: z.array(z.lazy(() => Env$outboundSchema)).optional(),
    customEnvironments: z.array(z.lazy(() => CustomEnvironments$outboundSchema))
        .optional(),
    framework: z.nullable(UpdateProjectDataCacheFramework$outboundSchema)
        .optional(),
    gitForkProtection: z.boolean().optional(),
    gitLFS: z.boolean().optional(),
    id: z.string(),
    ipBuckets: z.array(z.lazy(() => UpdateProjectDataCacheIpBuckets$outboundSchema)).optional(),
    latestDeployments: z.array(z.lazy(() => LatestDeployments$outboundSchema))
        .optional(),
    link: z.union([
        z.lazy(() => Link4$outboundSchema),
        z.lazy(() => Link5$outboundSchema),
        z.lazy(() => Link3$outboundSchema),
        z.lazy(() => Link1$outboundSchema),
        z.lazy(() => Link2$outboundSchema),
    ]).optional(),
    microfrontends: z.union([
        z.lazy(() => UpdateProjectDataCacheMicrofrontends1$outboundSchema),
        z.lazy(() => UpdateProjectDataCacheMicrofrontends2$outboundSchema),
    ]).optional(),
    name: z.string(),
    nodeVersion: UpdateProjectDataCacheNodeVersion$outboundSchema,
    optionsAllowlist: z.nullable(z.lazy(() => UpdateProjectDataCacheOptionsAllowlist$outboundSchema)).optional(),
    outputDirectory: z.nullable(z.string()).optional(),
    passwordProtection: z.nullable(z.lazy(() => UpdateProjectDataCachePasswordProtection$outboundSchema)).optional(),
    productionDeploymentsFastLane: z.boolean().optional(),
    publicSource: z.nullable(z.boolean()).optional(),
    resourceConfig: z.lazy(() => UpdateProjectDataCacheResourceConfig$outboundSchema),
    rollbackDescription: z.lazy(() => RollbackDescription$outboundSchema)
        .optional(),
    rollingRelease: z.nullable(z.lazy(() => RollingRelease$outboundSchema))
        .optional(),
    defaultResourceConfig: z.lazy(() => DefaultResourceConfig$outboundSchema),
    rootDirectory: z.nullable(z.string()).optional(),
    serverlessFunctionZeroConfigFailover: z.boolean().optional(),
    skewProtectionBoundaryAt: z.number().optional(),
    skewProtectionMaxAge: z.number().optional(),
    skipGitConnectDuringLink: z.boolean().optional(),
    sourceFilesOutsideRootDirectory: z.boolean().optional(),
    enableAffectedProjectsDeployments: z.boolean().optional(),
    ssoProtection: z.nullable(z.lazy(() => UpdateProjectDataCacheSsoProtection$outboundSchema)).optional(),
    targets: z.record(z.nullable(z.lazy(() => Targets$outboundSchema)))
        .optional(),
    transferCompletedAt: z.number().optional(),
    transferStartedAt: z.number().optional(),
    transferToAccountId: z.string().optional(),
    transferredFromAccountId: z.string().optional(),
    updatedAt: z.number().optional(),
    live: z.boolean().optional(),
    enablePreviewFeedback: z.nullable(z.boolean()).optional(),
    enableProductionFeedback: z.nullable(z.boolean()).optional(),
    permissions: z.lazy(() => Permissions$outboundSchema).optional(),
    lastRollbackTarget: z.nullable(z.lazy(() => LastRollbackTarget$outboundSchema)).optional(),
    lastAliasRequest: z.nullable(z.lazy(() => LastAliasRequest$outboundSchema))
        .optional(),
    protectionBypass: z.record(z.union([
        z.lazy(() => ProtectionBypass1$outboundSchema),
        z.lazy(() => ProtectionBypass2$outboundSchema),
    ])).optional(),
    hasActiveBranches: z.boolean().optional(),
    trustedIps: z.nullable(z.union([
        z.lazy(() => TrustedIps1$outboundSchema),
        z.lazy(() => TrustedIps2$outboundSchema),
    ])).optional(),
    gitComments: z.lazy(() => GitComments$outboundSchema).optional(),
    gitProviderOptions: z.lazy(() => GitProviderOptions$outboundSchema)
        .optional(),
    paused: z.boolean().optional(),
    concurrencyBucketName: z.string().optional(),
    webAnalytics: z.lazy(() => UpdateProjectDataCacheWebAnalytics$outboundSchema)
        .optional(),
    security: z.lazy(() => UpdateProjectDataCacheSecurity$outboundSchema)
        .optional(),
    oidcTokenConfig: z.lazy(() => UpdateProjectDataCacheOidcTokenConfig$outboundSchema).optional(),
    tier: UpdateProjectDataCacheTier$outboundSchema.optional(),
    features: z.lazy(() => Features$outboundSchema).optional(),
    v0: z.boolean().optional(),
    abuse: z.lazy(() => UpdateProjectDataCacheAbuse$outboundSchema).optional(),
    internalRoutes: z.array(z.union([
        z.lazy(() => InternalRoutes1$outboundSchema),
        z.lazy(() => InternalRoutes2$outboundSchema),
    ])).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDataCacheResponseBody$;
(function (UpdateProjectDataCacheResponseBody$) {
    /** @deprecated use `UpdateProjectDataCacheResponseBody$inboundSchema` instead. */
    UpdateProjectDataCacheResponseBody$.inboundSchema = UpdateProjectDataCacheResponseBody$inboundSchema;
    /** @deprecated use `UpdateProjectDataCacheResponseBody$outboundSchema` instead. */
    UpdateProjectDataCacheResponseBody$.outboundSchema = UpdateProjectDataCacheResponseBody$outboundSchema;
})(UpdateProjectDataCacheResponseBody$ || (UpdateProjectDataCacheResponseBody$ = {}));
export function updateProjectDataCacheResponseBodyToJSON(updateProjectDataCacheResponseBody) {
    return JSON.stringify(UpdateProjectDataCacheResponseBody$outboundSchema.parse(updateProjectDataCacheResponseBody));
}
export function updateProjectDataCacheResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDataCacheResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDataCacheResponseBody' from JSON`);
}
//# sourceMappingURL=updateprojectdatacacheop.js.map