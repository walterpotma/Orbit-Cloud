import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { FlagJSONValue, FlagJSONValue$Outbound } from "./flagjsonvalue.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type CancelDeploymentRequest = {
    /**
     * The unique identifier of the deployment.
     */
    id: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};
export type CancelDeploymentAliasAssignedAt = number | boolean;
export type CancelDeploymentBuild = {
    env: Array<string>;
};
export type CancelDeploymentBuilds = {
    use: string;
    src?: string | undefined;
    config?: {
        [k: string]: any;
    } | undefined;
};
export declare const CancelDeploymentFramework: {
    readonly Blitzjs: "blitzjs";
    readonly Nextjs: "nextjs";
    readonly Gatsby: "gatsby";
    readonly Remix: "remix";
    readonly ReactRouter: "react-router";
    readonly Astro: "astro";
    readonly Hexo: "hexo";
    readonly Eleventy: "eleventy";
    readonly Docusaurus2: "docusaurus-2";
    readonly Docusaurus: "docusaurus";
    readonly Preact: "preact";
    readonly Solidstart1: "solidstart-1";
    readonly Solidstart: "solidstart";
    readonly Dojo: "dojo";
    readonly Ember: "ember";
    readonly Vue: "vue";
    readonly Scully: "scully";
    readonly IonicAngular: "ionic-angular";
    readonly Angular: "angular";
    readonly Polymer: "polymer";
    readonly Svelte: "svelte";
    readonly Sveltekit: "sveltekit";
    readonly Sveltekit1: "sveltekit-1";
    readonly IonicReact: "ionic-react";
    readonly CreateReactApp: "create-react-app";
    readonly Gridsome: "gridsome";
    readonly Umijs: "umijs";
    readonly Sapper: "sapper";
    readonly Saber: "saber";
    readonly Stencil: "stencil";
    readonly Nuxtjs: "nuxtjs";
    readonly Redwoodjs: "redwoodjs";
    readonly Hugo: "hugo";
    readonly Jekyll: "jekyll";
    readonly Brunch: "brunch";
    readonly Middleman: "middleman";
    readonly Zola: "zola";
    readonly Hydrogen: "hydrogen";
    readonly Vite: "vite";
    readonly Vitepress: "vitepress";
    readonly Vuepress: "vuepress";
    readonly Parcel: "parcel";
    readonly Fastapi: "fastapi";
    readonly Fasthtml: "fasthtml";
    readonly SanityV3: "sanity-v3";
    readonly Sanity: "sanity";
    readonly Storybook: "storybook";
    readonly Nitro: "nitro";
    readonly Hono: "hono";
    readonly Express: "express";
    readonly Xmcp: "xmcp";
};
export type CancelDeploymentFramework = ClosedEnum<typeof CancelDeploymentFramework>;
export type CancelDeploymentSpeedInsights = {
    id: string;
    enabledAt?: number | undefined;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    hasData?: boolean | undefined;
    paidAt?: number | undefined;
};
export type CancelDeploymentWebAnalytics = {
    id: string;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    enabledAt?: number | undefined;
    hasData?: boolean | undefined;
};
export type CancelDeploymentProjectSettings = {
    buildCommand?: string | null | undefined;
    devCommand?: string | null | undefined;
    framework?: CancelDeploymentFramework | null | undefined;
    commandForIgnoringBuildStep?: string | null | undefined;
    installCommand?: string | null | undefined;
    outputDirectory?: string | null | undefined;
    speedInsights?: CancelDeploymentSpeedInsights | undefined;
    webAnalytics?: CancelDeploymentWebAnalytics | undefined;
};
export declare const CancelDeploymentDeploymentsStatus: {
    readonly Skipped: "skipped";
    readonly Pending: "pending";
    readonly Ready: "ready";
    readonly Error: "error";
    readonly Timeout: "timeout";
};
export type CancelDeploymentDeploymentsStatus = ClosedEnum<typeof CancelDeploymentDeploymentsStatus>;
export type CancelDeploymentIntegrations = {
    status: CancelDeploymentDeploymentsStatus;
    startedAt: number;
    completedAt?: number | undefined;
    skippedAt?: number | undefined;
    skippedBy?: string | undefined;
};
/**
 * Must be `http` or `https`.
 */
export declare const CancelDeploymentProtocol: {
    readonly Http: "http";
    readonly Https: "https";
};
/**
 * Must be `http` or `https`.
 */
export type CancelDeploymentProtocol = ClosedEnum<typeof CancelDeploymentProtocol>;
export type CancelDeploymentRemotePatterns = {
    /**
     * Must be `http` or `https`.
     */
    protocol?: CancelDeploymentProtocol | undefined;
    /**
     * Can be literal or wildcard. Single `*` matches a single subdomain. Double `**` matches any number of subdomains.
     */
    hostname: string;
    /**
     * Can be literal port such as `8080` or empty string meaning no port.
     */
    port?: string | undefined;
    /**
     * Can be literal or wildcard. Single `*` matches a single path segment. Double `**` matches any number of path segments.
     */
    pathname?: string | undefined;
    /**
     * Can be literal query string such as `?v=1` or empty string meaning no query string.
     */
    search?: string | undefined;
};
export type CancelDeploymentLocalPatterns = {
    /**
     * Can be literal or wildcard. Single `*` matches a single path segment. Double `**` matches any number of path segments.
     */
    pathname?: string | undefined;
    /**
     * Can be literal query string such as `?v=1` or empty string meaning no query string.
     */
    search?: string | undefined;
};
export declare const CancelDeploymentFormats: {
    readonly ImageAvif: "image/avif";
    readonly ImageWebp: "image/webp";
};
export type CancelDeploymentFormats = ClosedEnum<typeof CancelDeploymentFormats>;
export declare const CancelDeploymentContentDispositionType: {
    readonly Inline: "inline";
    readonly Attachment: "attachment";
};
export type CancelDeploymentContentDispositionType = ClosedEnum<typeof CancelDeploymentContentDispositionType>;
export type CancelDeploymentImages = {
    sizes?: Array<number> | undefined;
    qualities?: Array<number> | undefined;
    domains?: Array<string> | undefined;
    remotePatterns?: Array<CancelDeploymentRemotePatterns> | undefined;
    localPatterns?: Array<CancelDeploymentLocalPatterns> | undefined;
    minimumCacheTTL?: number | undefined;
    formats?: Array<CancelDeploymentFormats> | undefined;
    dangerouslyAllowSVG?: boolean | undefined;
    contentSecurityPolicy?: string | undefined;
    contentDispositionType?: CancelDeploymentContentDispositionType | undefined;
};
export type CancelDeploymentCreator = {
    uid: string;
    username?: string | undefined;
    avatar?: string | undefined;
};
export declare const CancelDeploymentDeploymentsReadyState: {
    readonly Building: "BUILDING";
    readonly Error: "ERROR";
    readonly Initializing: "INITIALIZING";
    readonly Ready: "READY";
};
export type CancelDeploymentDeploymentsReadyState = ClosedEnum<typeof CancelDeploymentDeploymentsReadyState>;
export type CancelDeploymentOutput = {
    path: string;
    functionName: string;
};
/**
 * A partial representation of a Build used by the deployment endpoint.
 */
export type CancelDeploymentLambdas = {
    id: string;
    createdAt?: number | undefined;
    readyState?: CancelDeploymentDeploymentsReadyState | undefined;
    entrypoint?: string | null | undefined;
    readyStateAt?: number | undefined;
    output: Array<CancelDeploymentOutput>;
};
export declare const CancelDeploymentStatus: {
    readonly Building: "BUILDING";
    readonly Error: "ERROR";
    readonly Initializing: "INITIALIZING";
    readonly Queued: "QUEUED";
    readonly Ready: "READY";
    readonly Canceled: "CANCELED";
};
export type CancelDeploymentStatus = ClosedEnum<typeof CancelDeploymentStatus>;
export type CancelDeploymentTeam = {
    id: string;
    name: string;
    avatar?: string | undefined;
    slug: string;
};
export type CancelDeploymentCustomEnvironment2 = {
    id: string;
};
/**
 * The type of environment (production, preview, or development)
 */
export declare const CancelDeploymentCustomEnvironmentType: {
    readonly Production: "production";
    readonly Preview: "preview";
    readonly Development: "development";
};
/**
 * The type of environment (production, preview, or development)
 */
export type CancelDeploymentCustomEnvironmentType = ClosedEnum<typeof CancelDeploymentCustomEnvironmentType>;
/**
 * The type of matching to perform
 */
export declare const CancelDeploymentCustomEnvironmentDeploymentsType: {
    readonly EndsWith: "endsWith";
    readonly StartsWith: "startsWith";
    readonly Equals: "equals";
};
/**
 * The type of matching to perform
 */
export type CancelDeploymentCustomEnvironmentDeploymentsType = ClosedEnum<typeof CancelDeploymentCustomEnvironmentDeploymentsType>;
/**
 * Configuration for matching git branches to this environment
 */
export type CancelDeploymentCustomEnvironmentBranchMatcher = {
    /**
     * The type of matching to perform
     */
    type: CancelDeploymentCustomEnvironmentDeploymentsType;
    /**
     * The pattern to match against branch names
     */
    pattern: string;
};
/**
 * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
 */
export type CancelDeploymentCustomEnvironmentVerification = {
    type: string;
    domain: string;
    value: string;
    reason: string;
};
/**
 * List of domains associated with this environment
 */
export type CancelDeploymentCustomEnvironmentDomains = {
    name: string;
    apexName: string;
    projectId: string;
    redirect?: string | null | undefined;
    redirectStatusCode?: number | null | undefined;
    gitBranch?: string | null | undefined;
    customEnvironmentId?: string | null | undefined;
    updatedAt?: number | undefined;
    createdAt?: number | undefined;
    /**
     * `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.
     */
    verified: boolean;
    /**
     * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
     */
    verification?: Array<CancelDeploymentCustomEnvironmentVerification> | undefined;
};
/**
 * Internal representation of a custom environment with all required properties
 */
export type CancelDeploymentCustomEnvironment1 = {
    /**
     * Unique identifier for the custom environment (format: env_*)
     */
    id: string;
    /**
     * URL-friendly name of the environment
     */
    slug: string;
    /**
     * The type of environment (production, preview, or development)
     */
    type: CancelDeploymentCustomEnvironmentType;
    /**
     * Optional description of the environment's purpose
     */
    description?: string | undefined;
    /**
     * Configuration for matching git branches to this environment
     */
    branchMatcher?: CancelDeploymentCustomEnvironmentBranchMatcher | undefined;
    /**
     * List of domains associated with this environment
     */
    domains?: Array<CancelDeploymentCustomEnvironmentDomains> | undefined;
    /**
     * List of aliases for the current deployment
     */
    currentDeploymentAliases?: Array<string> | undefined;
    /**
     * Timestamp when the environment was created
     */
    createdAt: number;
    /**
     * Timestamp when the environment was last updated
     */
    updatedAt: number;
};
export type CancelDeploymentCustomEnvironment = CancelDeploymentCustomEnvironment1 | CancelDeploymentCustomEnvironment2;
export declare const CancelDeploymentOomReport: {
    readonly OutOfMemory: "out-of-memory";
};
export type CancelDeploymentOomReport = ClosedEnum<typeof CancelDeploymentOomReport>;
export type CancelDeploymentAliasError = {
    code: string;
    message: string;
};
export type CancelDeploymentAliasWarning = {
    code: string;
    message: string;
    link?: string | undefined;
    action?: string | undefined;
};
export declare const CancelDeploymentChecksState: {
    readonly Registered: "registered";
    readonly Running: "running";
    readonly Completed: "completed";
};
export type CancelDeploymentChecksState = ClosedEnum<typeof CancelDeploymentChecksState>;
export declare const CancelDeploymentChecksConclusion: {
    readonly Skipped: "skipped";
    readonly Succeeded: "succeeded";
    readonly Failed: "failed";
    readonly Canceled: "canceled";
};
export type CancelDeploymentChecksConclusion = ClosedEnum<typeof CancelDeploymentChecksConclusion>;
export declare const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody15Type: {
    readonly Bitbucket: "bitbucket";
};
export type CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody15Type = ClosedEnum<typeof CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody15Type>;
export type GitSource15 = {
    type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody15Type;
    ref: string;
    sha: string;
    owner?: string | undefined;
    slug?: string | undefined;
    workspaceUuid: string;
    repoUuid: string;
};
export declare const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody14Type: {
    readonly Gitlab: "gitlab";
};
export type CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody14Type = ClosedEnum<typeof CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody14Type>;
export type GitSource14 = {
    type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody14Type;
    ref: string;
    sha: string;
    projectId: number;
};
export declare const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody13Type: {
    readonly GithubLimited: "github-limited";
};
export type CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody13Type = ClosedEnum<typeof CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody13Type>;
export type GitSource13 = {
    type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody13Type;
    ref: string;
    sha: string;
    repoId: number;
    org?: string | undefined;
    repo?: string | undefined;
};
export declare const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type: {
    readonly GithubCustomHost: "github-custom-host";
};
export type CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type = ClosedEnum<typeof CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type>;
export type GitSource12 = {
    type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type;
    host: string;
    ref: string;
    sha: string;
    repoId: number;
    org?: string | undefined;
    repo?: string | undefined;
};
export declare const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type: {
    readonly Github: "github";
};
export type CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type = ClosedEnum<typeof CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type>;
export type GitSource11 = {
    type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type;
    ref: string;
    sha: string;
    repoId: number;
    org?: string | undefined;
    repo?: string | undefined;
};
export declare const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type: {
    readonly Custom: "custom";
};
export type CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type = ClosedEnum<typeof CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type>;
/**
 * Allows custom git sources (local folder mounted to the container) in test mode
 */
export type GitSource10 = {
    type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type;
    ref: string;
    sha: string;
    gitUrl: string;
};
export declare const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type: {
    readonly Bitbucket: "bitbucket";
};
export type CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type = ClosedEnum<typeof CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type>;
export type GitSource9 = {
    type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type;
    owner: string;
    slug: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
export declare const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type: {
    readonly Bitbucket: "bitbucket";
};
export type CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type = ClosedEnum<typeof CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type>;
export type GitSource8 = {
    type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type;
    workspaceUuid?: string | undefined;
    repoUuid: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
export declare const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type: {
    readonly Gitlab: "gitlab";
};
export type CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type = ClosedEnum<typeof CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type>;
export type CancelDeploymentGitSourceProjectId = string | number;
export type GitSource7 = {
    type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type;
    projectId: string | number;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
export declare const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType: {
    readonly GithubLimited: "github-limited";
};
export type CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType = ClosedEnum<typeof CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType>;
export type GitSource6 = {
    type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType;
    org: string;
    repo: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
export declare const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType: {
    readonly GithubLimited: "github-limited";
};
export type CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType = ClosedEnum<typeof CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType>;
export type CancelDeploymentGitSourceDeploymentsResponseRepoId = string | number;
export type CancelDeploymentGitSource5 = {
    type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType;
    repoId: string | number;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
export declare const CancelDeploymentGitSourceDeploymentsResponse200Type: {
    readonly GithubCustomHost: "github-custom-host";
};
export type CancelDeploymentGitSourceDeploymentsResponse200Type = ClosedEnum<typeof CancelDeploymentGitSourceDeploymentsResponse200Type>;
export type CancelDeploymentGitSource4 = {
    type: CancelDeploymentGitSourceDeploymentsResponse200Type;
    host: string;
    org: string;
    repo: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
export declare const CancelDeploymentGitSourceDeploymentsResponseType: {
    readonly GithubCustomHost: "github-custom-host";
};
export type CancelDeploymentGitSourceDeploymentsResponseType = ClosedEnum<typeof CancelDeploymentGitSourceDeploymentsResponseType>;
export type CancelDeploymentGitSourceDeploymentsRepoId = string | number;
export type CancelDeploymentGitSource3 = {
    type: CancelDeploymentGitSourceDeploymentsResponseType;
    host: string;
    repoId: string | number;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
export declare const CancelDeploymentGitSourceDeploymentsType: {
    readonly Github: "github";
};
export type CancelDeploymentGitSourceDeploymentsType = ClosedEnum<typeof CancelDeploymentGitSourceDeploymentsType>;
export type CancelDeploymentGitSource2 = {
    type: CancelDeploymentGitSourceDeploymentsType;
    org: string;
    repo: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
export declare const CancelDeploymentGitSourceType: {
    readonly Github: "github";
};
export type CancelDeploymentGitSourceType = ClosedEnum<typeof CancelDeploymentGitSourceType>;
export type CancelDeploymentGitSourceRepoId = string | number;
export type CancelDeploymentGitSource1 = {
    type: CancelDeploymentGitSourceType;
    repoId: string | number;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
export type CancelDeploymentGitSource = GitSource12 | GitSource15 | CancelDeploymentGitSource4 | GitSource10 | GitSource11 | GitSource13 | GitSource14 | CancelDeploymentGitSource2 | CancelDeploymentGitSource3 | GitSource6 | GitSource9 | CancelDeploymentGitSource1 | CancelDeploymentGitSource5 | GitSource7 | GitSource8;
/**
 * If set it overrides the `projectSettings.nodeVersion` for this deployment.
 */
export declare const CancelDeploymentNodeVersion: {
    readonly TwentyTwoDotX: "22.x";
    readonly TwentyDotX: "20.x";
    readonly EighteenDotX: "18.x";
    readonly SixteenDotX: "16.x";
    readonly FourteenDotX: "14.x";
    readonly TwelveDotX: "12.x";
    readonly TenDotX: "10.x";
    readonly EightDot10DotX: "8.10.x";
};
/**
 * If set it overrides the `projectSettings.nodeVersion` for this deployment.
 */
export type CancelDeploymentNodeVersion = ClosedEnum<typeof CancelDeploymentNodeVersion>;
export type CancelDeploymentProject = {
    id: string;
    name: string;
    framework?: string | null | undefined;
};
export declare const CancelDeploymentReadyState: {
    readonly Building: "BUILDING";
    readonly Error: "ERROR";
    readonly Initializing: "INITIALIZING";
    readonly Queued: "QUEUED";
    readonly Ready: "READY";
    readonly Canceled: "CANCELED";
};
export type CancelDeploymentReadyState = ClosedEnum<typeof CancelDeploymentReadyState>;
/**
 * Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - ROLLING: in the process of having production traffic gradually transitioned. - PROMOTED: has seen production traffic
 */
export declare const CancelDeploymentReadySubstate: {
    readonly Staged: "STAGED";
    readonly Rolling: "ROLLING";
    readonly Promoted: "PROMOTED";
};
/**
 * Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - ROLLING: in the process of having production traffic gradually transitioned. - PROMOTED: has seen production traffic
 */
export type CancelDeploymentReadySubstate = ClosedEnum<typeof CancelDeploymentReadySubstate>;
export declare const CancelDeploymentSource: {
    readonly ApiTriggerGitDeploy: "api-trigger-git-deploy";
    readonly Cli: "cli";
    readonly CloneRepo: "clone/repo";
    readonly Git: "git";
    readonly Import: "import";
    readonly ImportRepo: "import/repo";
    readonly Redeploy: "redeploy";
    readonly V0Web: "v0-web";
};
export type CancelDeploymentSource = ClosedEnum<typeof CancelDeploymentSource>;
export declare const CancelDeploymentTarget: {
    readonly Staging: "staging";
    readonly Production: "production";
};
export type CancelDeploymentTarget = ClosedEnum<typeof CancelDeploymentTarget>;
export declare const CancelDeploymentType: {
    readonly Lambdas: "LAMBDAS";
};
export type CancelDeploymentType = ClosedEnum<typeof CancelDeploymentType>;
export type CancelDeploymentOidcTokenClaims = {
    iss: string;
    sub: string;
    scope: string;
    aud: string;
    owner: string;
    ownerId: string;
    project: string;
    projectId: string;
    environment: string;
};
export type CancelDeploymentCrons = {
    schedule: string;
    path: string;
};
export declare const CancelDeploymentArchitecture: {
    readonly X8664: "x86_64";
    readonly Arm64: "arm64";
};
export type CancelDeploymentArchitecture = ClosedEnum<typeof CancelDeploymentArchitecture>;
/**
 * Event type - must be "queue/v1beta" (REQUIRED)
 */
export declare const CancelDeploymentDeploymentsType: {
    readonly QueueV1beta: "queue/v1beta";
};
/**
 * Event type - must be "queue/v1beta" (REQUIRED)
 */
export type CancelDeploymentDeploymentsType = ClosedEnum<typeof CancelDeploymentDeploymentsType>;
/**
 * Queue trigger event for Vercel's queue system. Handles "queue/v1beta" events with queue-specific configuration.
 */
export type CancelDeploymentExperimentalTriggers = {
    /**
     * Event type - must be "queue/v1beta" (REQUIRED)
     */
    type: CancelDeploymentDeploymentsType;
    /**
     * Name of the queue topic to consume from (REQUIRED)
     */
    topic: string;
    /**
     * Name of the consumer group for this trigger (REQUIRED)
     */
    consumer: string;
    /**
     * Maximum number of delivery attempts for message processing (OPTIONAL) This represents the total number of times a message can be delivered, not the number of retries. Must be at least 1 if specified. Behavior when not specified depends on the server's default configuration.
     */
    maxDeliveries?: number | undefined;
    /**
     * Delay in seconds before retrying failed executions (OPTIONAL) Behavior when not specified depends on the server's default configuration.
     */
    retryAfterSeconds?: number | undefined;
    /**
     * Initial delay in seconds before first execution attempt (OPTIONAL) Must be 0 or greater. Use 0 for no initial delay. Behavior when not specified depends on the server's default configuration.
     */
    initialDelaySeconds?: number | undefined;
};
export type CancelDeploymentFunctions = {
    architecture?: CancelDeploymentArchitecture | undefined;
    memory?: number | undefined;
    maxDuration?: number | undefined;
    runtime?: string | undefined;
    includeFiles?: string | undefined;
    excludeFiles?: string | undefined;
    experimentalTriggers?: Array<CancelDeploymentExperimentalTriggers> | undefined;
    supportsCancellation?: boolean | undefined;
};
export declare const CancelDeploymentPlan: {
    readonly Pro: "pro";
    readonly Enterprise: "enterprise";
    readonly Hobby: "hobby";
};
export type CancelDeploymentPlan = ClosedEnum<typeof CancelDeploymentPlan>;
export type CancelDeploymentRoutes3 = {
    src: string;
    continue: boolean;
    middleware: number;
};
export declare const RoutesHandle: {
    readonly Error: "error";
    readonly Filesystem: "filesystem";
    readonly Hit: "hit";
    readonly Miss: "miss";
    readonly Rewrite: "rewrite";
    readonly Resource: "resource";
};
export type RoutesHandle = ClosedEnum<typeof RoutesHandle>;
export type CancelDeploymentRoutes2 = {
    handle: RoutesHandle;
    src?: string | undefined;
    dest?: string | undefined;
    status?: number | undefined;
};
export declare const CancelDeploymentHasDeploymentsType: {
    readonly Header: "header";
    readonly Cookie: "cookie";
    readonly Query: "query";
};
export type CancelDeploymentHasDeploymentsType = ClosedEnum<typeof CancelDeploymentHasDeploymentsType>;
export type CancelDeploymentValueDeploymentsEq = string | number;
export type CancelDeploymentValueDeployments2 = {
    eq?: string | number | undefined;
    neq?: string | undefined;
    inc?: Array<string> | undefined;
    ninc?: Array<string> | undefined;
    pre?: string | undefined;
    suf?: string | undefined;
    re?: string | undefined;
    gt?: number | undefined;
    gte?: number | undefined;
    lt?: number | undefined;
    lte?: number | undefined;
};
export type CancelDeploymentHasDeploymentsValue = CancelDeploymentValueDeployments2 | string;
export type CancelDeploymentHas2 = {
    type: CancelDeploymentHasDeploymentsType;
    key: string;
    value?: CancelDeploymentValueDeployments2 | string | undefined;
};
export declare const CancelDeploymentHasType: {
    readonly Host: "host";
};
export type CancelDeploymentHasType = ClosedEnum<typeof CancelDeploymentHasType>;
export type CancelDeploymentValueEq = string | number;
export type CancelDeploymentValue2 = {
    eq?: string | number | undefined;
    neq?: string | undefined;
    inc?: Array<string> | undefined;
    ninc?: Array<string> | undefined;
    pre?: string | undefined;
    suf?: string | undefined;
    re?: string | undefined;
    gt?: number | undefined;
    gte?: number | undefined;
    lt?: number | undefined;
    lte?: number | undefined;
};
export type CancelDeploymentHasValue = CancelDeploymentValue2 | string;
export type CancelDeploymentHas1 = {
    type: CancelDeploymentHasType;
    value: CancelDeploymentValue2 | string;
};
export type CancelDeploymentRoutesHas = CancelDeploymentHas1 | CancelDeploymentHas2;
export declare const CancelDeploymentMissingDeploymentsType: {
    readonly Header: "header";
    readonly Cookie: "cookie";
    readonly Query: "query";
};
export type CancelDeploymentMissingDeploymentsType = ClosedEnum<typeof CancelDeploymentMissingDeploymentsType>;
export type CancelDeploymentValueDeploymentsResponse200Eq = string | number;
export type CancelDeploymentValueDeploymentsResponse2002 = {
    eq?: string | number | undefined;
    neq?: string | undefined;
    inc?: Array<string> | undefined;
    ninc?: Array<string> | undefined;
    pre?: string | undefined;
    suf?: string | undefined;
    re?: string | undefined;
    gt?: number | undefined;
    gte?: number | undefined;
    lt?: number | undefined;
    lte?: number | undefined;
};
export type CancelDeploymentMissingDeploymentsValue = CancelDeploymentValueDeploymentsResponse2002 | string;
export type CancelDeploymentMissing2 = {
    type: CancelDeploymentMissingDeploymentsType;
    key: string;
    value?: CancelDeploymentValueDeploymentsResponse2002 | string | undefined;
};
export declare const CancelDeploymentMissingType: {
    readonly Host: "host";
};
export type CancelDeploymentMissingType = ClosedEnum<typeof CancelDeploymentMissingType>;
export type CancelDeploymentValueDeploymentsResponseEq = string | number;
export type CancelDeploymentValueDeploymentsResponse2 = {
    eq?: string | number | undefined;
    neq?: string | undefined;
    inc?: Array<string> | undefined;
    ninc?: Array<string> | undefined;
    pre?: string | undefined;
    suf?: string | undefined;
    re?: string | undefined;
    gt?: number | undefined;
    gte?: number | undefined;
    lt?: number | undefined;
    lte?: number | undefined;
};
export type CancelDeploymentMissingValue = CancelDeploymentValueDeploymentsResponse2 | string;
export type CancelDeploymentMissing1 = {
    type: CancelDeploymentMissingType;
    value: CancelDeploymentValueDeploymentsResponse2 | string;
};
export type RoutesMissing = CancelDeploymentMissing1 | CancelDeploymentMissing2;
export declare const CancelDeploymentRoutesAction: {
    readonly Challenge: "challenge";
    readonly Deny: "deny";
};
export type CancelDeploymentRoutesAction = ClosedEnum<typeof CancelDeploymentRoutesAction>;
export type CancelDeploymentRoutesMitigate = {
    action: CancelDeploymentRoutesAction;
};
export declare const CancelDeploymentRoutesType: {
    readonly RequestHeaders: "request.headers";
    readonly RequestQuery: "request.query";
    readonly ResponseHeaders: "response.headers";
};
export type CancelDeploymentRoutesType = ClosedEnum<typeof CancelDeploymentRoutesType>;
export declare const RoutesOp: {
    readonly Append: "append";
    readonly Set: "set";
    readonly Delete: "delete";
};
export type RoutesOp = ClosedEnum<typeof RoutesOp>;
export type CancelDeploymentKeyEq = string | number;
export type CancelDeploymentKey2 = {
    eq?: string | number | undefined;
    neq?: string | undefined;
    inc?: Array<string> | undefined;
    ninc?: Array<string> | undefined;
    pre?: string | undefined;
    suf?: string | undefined;
    gt?: number | undefined;
    gte?: number | undefined;
    lt?: number | undefined;
    lte?: number | undefined;
};
export type CancelDeploymentRoutesKey = CancelDeploymentKey2 | string;
export type CancelDeploymentRoutesTarget = {
    key: CancelDeploymentKey2 | string;
};
export type RoutesArgs = string | Array<string>;
export type RoutesTransforms = {
    type: CancelDeploymentRoutesType;
    op: RoutesOp;
    target: CancelDeploymentRoutesTarget;
    args?: string | Array<string> | undefined;
};
export type RoutesLocale = {
    redirect?: {
        [k: string]: string;
    } | undefined;
    cookie?: string | undefined;
};
export type CancelDeploymentRoutes1 = {
    src: string;
    dest?: string | undefined;
    headers?: {
        [k: string]: string;
    } | undefined;
    methods?: Array<string> | undefined;
    continue?: boolean | undefined;
    override?: boolean | undefined;
    caseSensitive?: boolean | undefined;
    check?: boolean | undefined;
    important?: boolean | undefined;
    status?: number | undefined;
    has?: Array<CancelDeploymentHas1 | CancelDeploymentHas2> | undefined;
    missing?: Array<CancelDeploymentMissing1 | CancelDeploymentMissing2> | undefined;
    mitigate?: CancelDeploymentRoutesMitigate | undefined;
    transforms?: Array<RoutesTransforms> | undefined;
    locale?: RoutesLocale | undefined;
    /**
     * A middleware key within the `output` key under the build result. Overrides a `middleware` definition.
     */
    middlewarePath?: string | undefined;
    /**
     * The original middleware matchers.
     */
    middlewareRawSrc?: Array<string> | undefined;
    /**
     * A middleware index in the `middleware` key under the build result
     */
    middleware?: number | undefined;
};
export type CancelDeploymentRoutes = CancelDeploymentRoutes3 | CancelDeploymentRoutes1 | CancelDeploymentRoutes2;
export declare const CancelDeploymentGitRepoDeploymentsResponseType: {
    readonly Bitbucket: "bitbucket";
};
export type CancelDeploymentGitRepoDeploymentsResponseType = ClosedEnum<typeof CancelDeploymentGitRepoDeploymentsResponseType>;
export declare const CancelDeploymentGitRepoDeploymentsResponseOwnerType: {
    readonly Team: "team";
    readonly User: "user";
};
export type CancelDeploymentGitRepoDeploymentsResponseOwnerType = ClosedEnum<typeof CancelDeploymentGitRepoDeploymentsResponseOwnerType>;
export type CancelDeploymentGitRepo3 = {
    owner: string;
    repoUuid: string;
    slug: string;
    type: CancelDeploymentGitRepoDeploymentsResponseType;
    workspaceUuid: string;
    path: string;
    defaultBranch: string;
    name: string;
    private: boolean;
    ownerType: CancelDeploymentGitRepoDeploymentsResponseOwnerType;
};
export declare const CancelDeploymentGitRepoDeploymentsType: {
    readonly Github: "github";
};
export type CancelDeploymentGitRepoDeploymentsType = ClosedEnum<typeof CancelDeploymentGitRepoDeploymentsType>;
export declare const CancelDeploymentGitRepoDeploymentsOwnerType: {
    readonly Team: "team";
    readonly User: "user";
};
export type CancelDeploymentGitRepoDeploymentsOwnerType = ClosedEnum<typeof CancelDeploymentGitRepoDeploymentsOwnerType>;
export type CancelDeploymentGitRepo2 = {
    org: string;
    repo: string;
    repoId: number;
    type: CancelDeploymentGitRepoDeploymentsType;
    repoOwnerId: number;
    path: string;
    defaultBranch: string;
    name: string;
    private: boolean;
    ownerType: CancelDeploymentGitRepoDeploymentsOwnerType;
};
export declare const CancelDeploymentGitRepoType: {
    readonly Gitlab: "gitlab";
};
export type CancelDeploymentGitRepoType = ClosedEnum<typeof CancelDeploymentGitRepoType>;
export declare const CancelDeploymentGitRepoOwnerType: {
    readonly Team: "team";
    readonly User: "user";
};
export type CancelDeploymentGitRepoOwnerType = ClosedEnum<typeof CancelDeploymentGitRepoOwnerType>;
export type CancelDeploymentGitRepo1 = {
    namespace: string;
    projectId: number;
    type: CancelDeploymentGitRepoType;
    url: string;
    path: string;
    defaultBranch: string;
    name: string;
    private: boolean;
    ownerType: CancelDeploymentGitRepoOwnerType;
};
export type CancelDeploymentGitRepo = CancelDeploymentGitRepo2 | CancelDeploymentGitRepo3 | CancelDeploymentGitRepo1;
/**
 * Flags defined in the Build Output API, used by this deployment. Primarily used by the Toolbar to know about the used flags.
 */
export type CancelDeploymentFlags2 = {};
export type FlagsOptions = {
    value: FlagJSONValue | null;
    label?: string | undefined;
};
export type CancelDeploymentFlagsDefinitions = {
    options?: Array<FlagsOptions> | undefined;
    url?: string | undefined;
    description?: string | undefined;
};
/**
 * Flags defined in the Build Output API, used by this deployment. Primarily used by the Toolbar to know about the used flags.
 */
export type CancelDeploymentFlags1 = {
    definitions: {
        [k: string]: CancelDeploymentFlagsDefinitions;
    };
};
export type CancelDeploymentFlags = CancelDeploymentFlags1 | Array<CancelDeploymentFlags2>;
/**
 * A map of the other applications that are part of this group. Only defined on the default application. The field is set after deployments have been created, so can be undefined, but should be there for a successful deployment. Note: this field will be removed when MFE alias routing is fully rolled out.
 */
export type MicrofrontendsApplications = {
    isDefaultApp?: boolean | undefined;
    /**
     * This is the production alias, it will always show the most up to date of each application.
     */
    productionHost: string;
    /**
     * Use the fixed deploymentAlias and deploymentHost so that the microfrontend preview stays in sync with the deployment. These are only present for mono-repos when a single commit creates multiple deployments. If they are not present, productionHost will be used.
     */
    deploymentAlias?: string | undefined;
    deploymentHost?: string | undefined;
};
/**
 * The result of the microfrontends config upload during deployment creation. Only set for default app deployments. - `success` - The config was uploaded successfully. - `error` - The config upload failed. - `no_config` - No config was found to upload. - `undefined` - The config upload has not been attempted yet.
 */
export declare const MicrofrontendsMfeConfigUploadState: {
    readonly Error: "error";
    readonly Success: "success";
    readonly NoConfig: "no_config";
};
/**
 * The result of the microfrontends config upload during deployment creation. Only set for default app deployments. - `success` - The config was uploaded successfully. - `error` - The config upload failed. - `no_config` - No config was found to upload. - `undefined` - The config upload has not been attempted yet.
 */
export type MicrofrontendsMfeConfigUploadState = ClosedEnum<typeof MicrofrontendsMfeConfigUploadState>;
export type CancelDeploymentMicrofrontends2 = {
    isDefaultApp: boolean;
    /**
     * A map of the other applications that are part of this group. Only defined on the default application. The field is set after deployments have been created, so can be undefined, but should be there for a successful deployment. Note: this field will be removed when MFE alias routing is fully rolled out.
     */
    applications?: {
        [k: string]: MicrofrontendsApplications;
    } | undefined;
    /**
     * The result of the microfrontends config upload during deployment creation. Only set for default app deployments. - `success` - The config was uploaded successfully. - `error` - The config upload failed. - `no_config` - No config was found to upload. - `undefined` - The config upload has not been attempted yet.
     */
    mfeConfigUploadState?: MicrofrontendsMfeConfigUploadState | undefined;
    /**
     * The project name of the default app of this deployment's microfrontends group.
     */
    defaultAppProjectName: string;
    /**
     * A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI.
     */
    defaultRoute?: string | undefined;
    /**
     * The group of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together.
     */
    groupIds: Array<string>;
    /**
     * Whether the MicrofrontendsAlias2 team flag should be considered enabled for this deployment or not.
     */
    microfrontendsAlias2Enabled?: boolean | undefined;
};
export type CancelDeploymentMicrofrontends1 = {
    isDefaultApp?: boolean | undefined;
    /**
     * The project name of the default app of this deployment's microfrontends group.
     */
    defaultAppProjectName: string;
    /**
     * A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI.
     */
    defaultRoute?: string | undefined;
    /**
     * The group of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together.
     */
    groupIds: Array<string>;
    /**
     * Whether the MicrofrontendsAlias2 team flag should be considered enabled for this deployment or not.
     */
    microfrontendsAlias2Enabled?: boolean | undefined;
};
export type CancelDeploymentMicrofrontends = CancelDeploymentMicrofrontends2 | CancelDeploymentMicrofrontends1;
export declare const CancelDeploymentFunctionType: {
    readonly Fluid: "fluid";
    readonly Standard: "standard";
};
export type CancelDeploymentFunctionType = ClosedEnum<typeof CancelDeploymentFunctionType>;
export declare const CancelDeploymentFunctionMemoryType: {
    readonly Standard: "standard";
    readonly StandardLegacy: "standard_legacy";
    readonly Performance: "performance";
};
export type CancelDeploymentFunctionMemoryType = ClosedEnum<typeof CancelDeploymentFunctionMemoryType>;
/**
 * Since February 2025 the configuration must include snapshot data at the time of deployment creation to capture properties for the /deployments/:id/config endpoint utilized for displaying Deployment Configuration on the frontend This is optional because older deployments may not have this data captured
 */
export type CancelDeploymentConfig = {
    version?: number | undefined;
    functionType: CancelDeploymentFunctionType;
    functionMemoryType: CancelDeploymentFunctionMemoryType;
    functionTimeout: number | null;
    secureComputePrimaryRegion: string | null;
    secureComputeFallbackRegion: string | null;
    isUsingActiveCPU?: boolean | undefined;
};
export declare const CancelDeploymentState: {
    readonly Succeeded: "succeeded";
    readonly Failed: "failed";
    readonly Pending: "pending";
};
export type CancelDeploymentState = ClosedEnum<typeof CancelDeploymentState>;
/**
 * Condensed check data. Retrieve individual check and check run data using api-checks v2 routes.
 */
export type CancelDeploymentDeploymentAlias = {
    state: CancelDeploymentState;
    startedAt: number;
    completedAt?: number | undefined;
};
export type CancelDeploymentChecks = {
    /**
     * Condensed check data. Retrieve individual check and check run data using api-checks v2 routes.
     */
    deploymentAlias: CancelDeploymentDeploymentAlias;
};
/**
 * The private deployment representation of a Deployment.
 */
export type CancelDeploymentResponseBody = {
    aliasAssignedAt?: number | boolean | null | undefined;
    alwaysRefuseToBuild?: boolean | undefined;
    build: CancelDeploymentBuild;
    buildArtifactUrls?: Array<string> | undefined;
    builds?: Array<CancelDeploymentBuilds> | undefined;
    env: Array<string>;
    inspectorUrl: string | null;
    isInConcurrentBuildsQueue: boolean;
    isInSystemBuildsQueue: boolean;
    projectSettings: CancelDeploymentProjectSettings;
    readyStateReason?: string | undefined;
    integrations?: CancelDeploymentIntegrations | undefined;
    images?: CancelDeploymentImages | undefined;
    alias?: Array<string> | undefined;
    aliasAssigned: boolean;
    bootedAt: number;
    buildingAt: number;
    /**
     * Since April 2025 it necessary for On-Demand Concurrency Minutes calculation
     */
    buildContainerFinishedAt?: number | undefined;
    buildSkipped: boolean;
    creator: CancelDeploymentCreator;
    initReadyAt?: number | undefined;
    isFirstBranchDeployment?: boolean | undefined;
    lambdas?: Array<CancelDeploymentLambdas> | undefined;
    public: boolean;
    ready?: number | undefined;
    status: CancelDeploymentStatus;
    team?: CancelDeploymentTeam | undefined;
    userAliases?: Array<string> | undefined;
    previewCommentsEnabled?: boolean | undefined;
    ttyBuildLogs?: boolean | undefined;
    customEnvironment?: CancelDeploymentCustomEnvironment1 | CancelDeploymentCustomEnvironment2 | undefined;
    oomReport?: CancelDeploymentOomReport | undefined;
    id: string;
    aliasError?: CancelDeploymentAliasError | null | undefined;
    aliasFinal?: string | null | undefined;
    aliasWarning?: CancelDeploymentAliasWarning | null | undefined;
    /**
     * applies to custom domains only, defaults to `true`
     */
    autoAssignCustomDomains?: boolean | undefined;
    automaticAliases?: Array<string> | undefined;
    buildErrorAt?: number | undefined;
    checksState?: CancelDeploymentChecksState | undefined;
    checksConclusion?: CancelDeploymentChecksConclusion | undefined;
    createdAt: number;
    deletedAt?: number | null | undefined;
    /**
     * Computed field that is only available for deployments with a microfrontend configuration.
     */
    defaultRoute?: string | undefined;
    canceledAt?: number | undefined;
    errorCode?: string | undefined;
    errorLink?: string | undefined;
    errorMessage?: string | null | undefined;
    errorStep?: string | undefined;
    /**
     * Since November 2023 this field defines a set of regions that we will deploy the lambda to passively Lambdas will be deployed to these regions but only invoked if all of the primary `regions` are marked as out of service
     */
    passiveRegions?: Array<string> | undefined;
    gitSource?: GitSource12 | GitSource15 | CancelDeploymentGitSource4 | GitSource10 | GitSource11 | GitSource13 | GitSource14 | CancelDeploymentGitSource2 | CancelDeploymentGitSource3 | GitSource6 | GitSource9 | CancelDeploymentGitSource1 | CancelDeploymentGitSource5 | GitSource7 | GitSource8 | undefined;
    name: string;
    meta: {
        [k: string]: string;
    };
    originCacheRegion?: string | undefined;
    /**
     * If set it overrides the `projectSettings.nodeVersion` for this deployment.
     */
    nodeVersion?: CancelDeploymentNodeVersion | undefined;
    project?: CancelDeploymentProject | undefined;
    readyState: CancelDeploymentReadyState;
    /**
     * Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - ROLLING: in the process of having production traffic gradually transitioned. - PROMOTED: has seen production traffic
     */
    readySubstate?: CancelDeploymentReadySubstate | undefined;
    regions: Array<string>;
    softDeletedByRetention?: boolean | undefined;
    source?: CancelDeploymentSource | undefined;
    target?: CancelDeploymentTarget | null | undefined;
    type: CancelDeploymentType;
    undeletedAt?: number | undefined;
    url: string;
    version: number;
    oidcTokenClaims?: CancelDeploymentOidcTokenClaims | undefined;
    connectBuildsEnabled?: boolean | undefined;
    connectConfigurationId?: string | undefined;
    createdIn: string;
    crons?: Array<CancelDeploymentCrons> | undefined;
    functions?: {
        [k: string]: CancelDeploymentFunctions;
    } | null | undefined;
    monorepoManager?: string | null | undefined;
    ownerId: string;
    /**
     * Since November 2023 this field defines a Secure Compute network that will only be used to deploy passive lambdas to (as in passiveRegions)
     */
    passiveConnectConfigurationId?: string | undefined;
    plan: CancelDeploymentPlan;
    projectId: string;
    routes: Array<CancelDeploymentRoutes3 | CancelDeploymentRoutes1 | CancelDeploymentRoutes2> | null;
    gitRepo?: CancelDeploymentGitRepo2 | CancelDeploymentGitRepo3 | CancelDeploymentGitRepo1 | null | undefined;
    flags?: CancelDeploymentFlags1 | Array<CancelDeploymentFlags2> | undefined;
    microfrontends?: CancelDeploymentMicrofrontends2 | CancelDeploymentMicrofrontends1 | undefined;
    /**
     * Since February 2025 the configuration must include snapshot data at the time of deployment creation to capture properties for the /deployments/:id/config endpoint utilized for displaying Deployment Configuration on the frontend This is optional because older deployments may not have this data captured
     */
    config?: CancelDeploymentConfig | undefined;
    checks?: CancelDeploymentChecks | undefined;
};
/** @internal */
export declare const CancelDeploymentRequest$inboundSchema: z.ZodType<CancelDeploymentRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentRequest$Outbound = {
    id: string;
    teamId?: string | undefined;
    slug?: string | undefined;
};
/** @internal */
export declare const CancelDeploymentRequest$outboundSchema: z.ZodType<CancelDeploymentRequest$Outbound, z.ZodTypeDef, CancelDeploymentRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentRequest$ {
    /** @deprecated use `CancelDeploymentRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentRequest$Outbound, z.ZodTypeDef, CancelDeploymentRequest>;
    /** @deprecated use `CancelDeploymentRequest$Outbound` instead. */
    type Outbound = CancelDeploymentRequest$Outbound;
}
export declare function cancelDeploymentRequestToJSON(cancelDeploymentRequest: CancelDeploymentRequest): string;
export declare function cancelDeploymentRequestFromJSON(jsonString: string): SafeParseResult<CancelDeploymentRequest, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentAliasAssignedAt$inboundSchema: z.ZodType<CancelDeploymentAliasAssignedAt, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentAliasAssignedAt$Outbound = number | boolean;
/** @internal */
export declare const CancelDeploymentAliasAssignedAt$outboundSchema: z.ZodType<CancelDeploymentAliasAssignedAt$Outbound, z.ZodTypeDef, CancelDeploymentAliasAssignedAt>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentAliasAssignedAt$ {
    /** @deprecated use `CancelDeploymentAliasAssignedAt$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentAliasAssignedAt, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentAliasAssignedAt$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentAliasAssignedAt$Outbound, z.ZodTypeDef, CancelDeploymentAliasAssignedAt>;
    /** @deprecated use `CancelDeploymentAliasAssignedAt$Outbound` instead. */
    type Outbound = CancelDeploymentAliasAssignedAt$Outbound;
}
export declare function cancelDeploymentAliasAssignedAtToJSON(cancelDeploymentAliasAssignedAt: CancelDeploymentAliasAssignedAt): string;
export declare function cancelDeploymentAliasAssignedAtFromJSON(jsonString: string): SafeParseResult<CancelDeploymentAliasAssignedAt, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentBuild$inboundSchema: z.ZodType<CancelDeploymentBuild, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentBuild$Outbound = {
    env: Array<string>;
};
/** @internal */
export declare const CancelDeploymentBuild$outboundSchema: z.ZodType<CancelDeploymentBuild$Outbound, z.ZodTypeDef, CancelDeploymentBuild>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentBuild$ {
    /** @deprecated use `CancelDeploymentBuild$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentBuild, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentBuild$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentBuild$Outbound, z.ZodTypeDef, CancelDeploymentBuild>;
    /** @deprecated use `CancelDeploymentBuild$Outbound` instead. */
    type Outbound = CancelDeploymentBuild$Outbound;
}
export declare function cancelDeploymentBuildToJSON(cancelDeploymentBuild: CancelDeploymentBuild): string;
export declare function cancelDeploymentBuildFromJSON(jsonString: string): SafeParseResult<CancelDeploymentBuild, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentBuilds$inboundSchema: z.ZodType<CancelDeploymentBuilds, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentBuilds$Outbound = {
    use: string;
    src?: string | undefined;
    config?: {
        [k: string]: any;
    } | undefined;
};
/** @internal */
export declare const CancelDeploymentBuilds$outboundSchema: z.ZodType<CancelDeploymentBuilds$Outbound, z.ZodTypeDef, CancelDeploymentBuilds>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentBuilds$ {
    /** @deprecated use `CancelDeploymentBuilds$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentBuilds, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentBuilds$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentBuilds$Outbound, z.ZodTypeDef, CancelDeploymentBuilds>;
    /** @deprecated use `CancelDeploymentBuilds$Outbound` instead. */
    type Outbound = CancelDeploymentBuilds$Outbound;
}
export declare function cancelDeploymentBuildsToJSON(cancelDeploymentBuilds: CancelDeploymentBuilds): string;
export declare function cancelDeploymentBuildsFromJSON(jsonString: string): SafeParseResult<CancelDeploymentBuilds, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentFramework$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentFramework>;
/** @internal */
export declare const CancelDeploymentFramework$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentFramework>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentFramework$ {
    /** @deprecated use `CancelDeploymentFramework$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Blitzjs: "blitzjs";
        readonly Nextjs: "nextjs";
        readonly Gatsby: "gatsby";
        readonly Remix: "remix";
        readonly ReactRouter: "react-router";
        readonly Astro: "astro";
        readonly Hexo: "hexo";
        readonly Eleventy: "eleventy";
        readonly Docusaurus2: "docusaurus-2";
        readonly Docusaurus: "docusaurus";
        readonly Preact: "preact";
        readonly Solidstart1: "solidstart-1";
        readonly Solidstart: "solidstart";
        readonly Dojo: "dojo";
        readonly Ember: "ember";
        readonly Vue: "vue";
        readonly Scully: "scully";
        readonly IonicAngular: "ionic-angular";
        readonly Angular: "angular";
        readonly Polymer: "polymer";
        readonly Svelte: "svelte";
        readonly Sveltekit: "sveltekit";
        readonly Sveltekit1: "sveltekit-1";
        readonly IonicReact: "ionic-react";
        readonly CreateReactApp: "create-react-app";
        readonly Gridsome: "gridsome";
        readonly Umijs: "umijs";
        readonly Sapper: "sapper";
        readonly Saber: "saber";
        readonly Stencil: "stencil";
        readonly Nuxtjs: "nuxtjs";
        readonly Redwoodjs: "redwoodjs";
        readonly Hugo: "hugo";
        readonly Jekyll: "jekyll";
        readonly Brunch: "brunch";
        readonly Middleman: "middleman";
        readonly Zola: "zola";
        readonly Hydrogen: "hydrogen";
        readonly Vite: "vite";
        readonly Vitepress: "vitepress";
        readonly Vuepress: "vuepress";
        readonly Parcel: "parcel";
        readonly Fastapi: "fastapi";
        readonly Fasthtml: "fasthtml";
        readonly SanityV3: "sanity-v3";
        readonly Sanity: "sanity";
        readonly Storybook: "storybook";
        readonly Nitro: "nitro";
        readonly Hono: "hono";
        readonly Express: "express";
        readonly Xmcp: "xmcp";
    }>;
    /** @deprecated use `CancelDeploymentFramework$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Blitzjs: "blitzjs";
        readonly Nextjs: "nextjs";
        readonly Gatsby: "gatsby";
        readonly Remix: "remix";
        readonly ReactRouter: "react-router";
        readonly Astro: "astro";
        readonly Hexo: "hexo";
        readonly Eleventy: "eleventy";
        readonly Docusaurus2: "docusaurus-2";
        readonly Docusaurus: "docusaurus";
        readonly Preact: "preact";
        readonly Solidstart1: "solidstart-1";
        readonly Solidstart: "solidstart";
        readonly Dojo: "dojo";
        readonly Ember: "ember";
        readonly Vue: "vue";
        readonly Scully: "scully";
        readonly IonicAngular: "ionic-angular";
        readonly Angular: "angular";
        readonly Polymer: "polymer";
        readonly Svelte: "svelte";
        readonly Sveltekit: "sveltekit";
        readonly Sveltekit1: "sveltekit-1";
        readonly IonicReact: "ionic-react";
        readonly CreateReactApp: "create-react-app";
        readonly Gridsome: "gridsome";
        readonly Umijs: "umijs";
        readonly Sapper: "sapper";
        readonly Saber: "saber";
        readonly Stencil: "stencil";
        readonly Nuxtjs: "nuxtjs";
        readonly Redwoodjs: "redwoodjs";
        readonly Hugo: "hugo";
        readonly Jekyll: "jekyll";
        readonly Brunch: "brunch";
        readonly Middleman: "middleman";
        readonly Zola: "zola";
        readonly Hydrogen: "hydrogen";
        readonly Vite: "vite";
        readonly Vitepress: "vitepress";
        readonly Vuepress: "vuepress";
        readonly Parcel: "parcel";
        readonly Fastapi: "fastapi";
        readonly Fasthtml: "fasthtml";
        readonly SanityV3: "sanity-v3";
        readonly Sanity: "sanity";
        readonly Storybook: "storybook";
        readonly Nitro: "nitro";
        readonly Hono: "hono";
        readonly Express: "express";
        readonly Xmcp: "xmcp";
    }>;
}
/** @internal */
export declare const CancelDeploymentSpeedInsights$inboundSchema: z.ZodType<CancelDeploymentSpeedInsights, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentSpeedInsights$Outbound = {
    id: string;
    enabledAt?: number | undefined;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    hasData?: boolean | undefined;
    paidAt?: number | undefined;
};
/** @internal */
export declare const CancelDeploymentSpeedInsights$outboundSchema: z.ZodType<CancelDeploymentSpeedInsights$Outbound, z.ZodTypeDef, CancelDeploymentSpeedInsights>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentSpeedInsights$ {
    /** @deprecated use `CancelDeploymentSpeedInsights$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentSpeedInsights, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentSpeedInsights$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentSpeedInsights$Outbound, z.ZodTypeDef, CancelDeploymentSpeedInsights>;
    /** @deprecated use `CancelDeploymentSpeedInsights$Outbound` instead. */
    type Outbound = CancelDeploymentSpeedInsights$Outbound;
}
export declare function cancelDeploymentSpeedInsightsToJSON(cancelDeploymentSpeedInsights: CancelDeploymentSpeedInsights): string;
export declare function cancelDeploymentSpeedInsightsFromJSON(jsonString: string): SafeParseResult<CancelDeploymentSpeedInsights, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentWebAnalytics$inboundSchema: z.ZodType<CancelDeploymentWebAnalytics, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentWebAnalytics$Outbound = {
    id: string;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    enabledAt?: number | undefined;
    hasData?: boolean | undefined;
};
/** @internal */
export declare const CancelDeploymentWebAnalytics$outboundSchema: z.ZodType<CancelDeploymentWebAnalytics$Outbound, z.ZodTypeDef, CancelDeploymentWebAnalytics>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentWebAnalytics$ {
    /** @deprecated use `CancelDeploymentWebAnalytics$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentWebAnalytics, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentWebAnalytics$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentWebAnalytics$Outbound, z.ZodTypeDef, CancelDeploymentWebAnalytics>;
    /** @deprecated use `CancelDeploymentWebAnalytics$Outbound` instead. */
    type Outbound = CancelDeploymentWebAnalytics$Outbound;
}
export declare function cancelDeploymentWebAnalyticsToJSON(cancelDeploymentWebAnalytics: CancelDeploymentWebAnalytics): string;
export declare function cancelDeploymentWebAnalyticsFromJSON(jsonString: string): SafeParseResult<CancelDeploymentWebAnalytics, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentProjectSettings$inboundSchema: z.ZodType<CancelDeploymentProjectSettings, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentProjectSettings$Outbound = {
    buildCommand?: string | null | undefined;
    devCommand?: string | null | undefined;
    framework?: string | null | undefined;
    commandForIgnoringBuildStep?: string | null | undefined;
    installCommand?: string | null | undefined;
    outputDirectory?: string | null | undefined;
    speedInsights?: CancelDeploymentSpeedInsights$Outbound | undefined;
    webAnalytics?: CancelDeploymentWebAnalytics$Outbound | undefined;
};
/** @internal */
export declare const CancelDeploymentProjectSettings$outboundSchema: z.ZodType<CancelDeploymentProjectSettings$Outbound, z.ZodTypeDef, CancelDeploymentProjectSettings>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentProjectSettings$ {
    /** @deprecated use `CancelDeploymentProjectSettings$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentProjectSettings, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentProjectSettings$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentProjectSettings$Outbound, z.ZodTypeDef, CancelDeploymentProjectSettings>;
    /** @deprecated use `CancelDeploymentProjectSettings$Outbound` instead. */
    type Outbound = CancelDeploymentProjectSettings$Outbound;
}
export declare function cancelDeploymentProjectSettingsToJSON(cancelDeploymentProjectSettings: CancelDeploymentProjectSettings): string;
export declare function cancelDeploymentProjectSettingsFromJSON(jsonString: string): SafeParseResult<CancelDeploymentProjectSettings, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentDeploymentsStatus$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentDeploymentsStatus>;
/** @internal */
export declare const CancelDeploymentDeploymentsStatus$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentDeploymentsStatus>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentDeploymentsStatus$ {
    /** @deprecated use `CancelDeploymentDeploymentsStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Skipped: "skipped";
        readonly Pending: "pending";
        readonly Ready: "ready";
        readonly Error: "error";
        readonly Timeout: "timeout";
    }>;
    /** @deprecated use `CancelDeploymentDeploymentsStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Skipped: "skipped";
        readonly Pending: "pending";
        readonly Ready: "ready";
        readonly Error: "error";
        readonly Timeout: "timeout";
    }>;
}
/** @internal */
export declare const CancelDeploymentIntegrations$inboundSchema: z.ZodType<CancelDeploymentIntegrations, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentIntegrations$Outbound = {
    status: string;
    startedAt: number;
    completedAt?: number | undefined;
    skippedAt?: number | undefined;
    skippedBy?: string | undefined;
};
/** @internal */
export declare const CancelDeploymentIntegrations$outboundSchema: z.ZodType<CancelDeploymentIntegrations$Outbound, z.ZodTypeDef, CancelDeploymentIntegrations>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentIntegrations$ {
    /** @deprecated use `CancelDeploymentIntegrations$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentIntegrations, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentIntegrations$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentIntegrations$Outbound, z.ZodTypeDef, CancelDeploymentIntegrations>;
    /** @deprecated use `CancelDeploymentIntegrations$Outbound` instead. */
    type Outbound = CancelDeploymentIntegrations$Outbound;
}
export declare function cancelDeploymentIntegrationsToJSON(cancelDeploymentIntegrations: CancelDeploymentIntegrations): string;
export declare function cancelDeploymentIntegrationsFromJSON(jsonString: string): SafeParseResult<CancelDeploymentIntegrations, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentProtocol$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentProtocol>;
/** @internal */
export declare const CancelDeploymentProtocol$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentProtocol>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentProtocol$ {
    /** @deprecated use `CancelDeploymentProtocol$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Http: "http";
        readonly Https: "https";
    }>;
    /** @deprecated use `CancelDeploymentProtocol$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Http: "http";
        readonly Https: "https";
    }>;
}
/** @internal */
export declare const CancelDeploymentRemotePatterns$inboundSchema: z.ZodType<CancelDeploymentRemotePatterns, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentRemotePatterns$Outbound = {
    protocol?: string | undefined;
    hostname: string;
    port?: string | undefined;
    pathname?: string | undefined;
    search?: string | undefined;
};
/** @internal */
export declare const CancelDeploymentRemotePatterns$outboundSchema: z.ZodType<CancelDeploymentRemotePatterns$Outbound, z.ZodTypeDef, CancelDeploymentRemotePatterns>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentRemotePatterns$ {
    /** @deprecated use `CancelDeploymentRemotePatterns$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentRemotePatterns, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentRemotePatterns$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentRemotePatterns$Outbound, z.ZodTypeDef, CancelDeploymentRemotePatterns>;
    /** @deprecated use `CancelDeploymentRemotePatterns$Outbound` instead. */
    type Outbound = CancelDeploymentRemotePatterns$Outbound;
}
export declare function cancelDeploymentRemotePatternsToJSON(cancelDeploymentRemotePatterns: CancelDeploymentRemotePatterns): string;
export declare function cancelDeploymentRemotePatternsFromJSON(jsonString: string): SafeParseResult<CancelDeploymentRemotePatterns, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentLocalPatterns$inboundSchema: z.ZodType<CancelDeploymentLocalPatterns, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentLocalPatterns$Outbound = {
    pathname?: string | undefined;
    search?: string | undefined;
};
/** @internal */
export declare const CancelDeploymentLocalPatterns$outboundSchema: z.ZodType<CancelDeploymentLocalPatterns$Outbound, z.ZodTypeDef, CancelDeploymentLocalPatterns>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentLocalPatterns$ {
    /** @deprecated use `CancelDeploymentLocalPatterns$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentLocalPatterns, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentLocalPatterns$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentLocalPatterns$Outbound, z.ZodTypeDef, CancelDeploymentLocalPatterns>;
    /** @deprecated use `CancelDeploymentLocalPatterns$Outbound` instead. */
    type Outbound = CancelDeploymentLocalPatterns$Outbound;
}
export declare function cancelDeploymentLocalPatternsToJSON(cancelDeploymentLocalPatterns: CancelDeploymentLocalPatterns): string;
export declare function cancelDeploymentLocalPatternsFromJSON(jsonString: string): SafeParseResult<CancelDeploymentLocalPatterns, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentFormats$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentFormats>;
/** @internal */
export declare const CancelDeploymentFormats$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentFormats>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentFormats$ {
    /** @deprecated use `CancelDeploymentFormats$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly ImageAvif: "image/avif";
        readonly ImageWebp: "image/webp";
    }>;
    /** @deprecated use `CancelDeploymentFormats$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly ImageAvif: "image/avif";
        readonly ImageWebp: "image/webp";
    }>;
}
/** @internal */
export declare const CancelDeploymentContentDispositionType$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentContentDispositionType>;
/** @internal */
export declare const CancelDeploymentContentDispositionType$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentContentDispositionType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentContentDispositionType$ {
    /** @deprecated use `CancelDeploymentContentDispositionType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Inline: "inline";
        readonly Attachment: "attachment";
    }>;
    /** @deprecated use `CancelDeploymentContentDispositionType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Inline: "inline";
        readonly Attachment: "attachment";
    }>;
}
/** @internal */
export declare const CancelDeploymentImages$inboundSchema: z.ZodType<CancelDeploymentImages, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentImages$Outbound = {
    sizes?: Array<number> | undefined;
    qualities?: Array<number> | undefined;
    domains?: Array<string> | undefined;
    remotePatterns?: Array<CancelDeploymentRemotePatterns$Outbound> | undefined;
    localPatterns?: Array<CancelDeploymentLocalPatterns$Outbound> | undefined;
    minimumCacheTTL?: number | undefined;
    formats?: Array<string> | undefined;
    dangerouslyAllowSVG?: boolean | undefined;
    contentSecurityPolicy?: string | undefined;
    contentDispositionType?: string | undefined;
};
/** @internal */
export declare const CancelDeploymentImages$outboundSchema: z.ZodType<CancelDeploymentImages$Outbound, z.ZodTypeDef, CancelDeploymentImages>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentImages$ {
    /** @deprecated use `CancelDeploymentImages$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentImages, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentImages$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentImages$Outbound, z.ZodTypeDef, CancelDeploymentImages>;
    /** @deprecated use `CancelDeploymentImages$Outbound` instead. */
    type Outbound = CancelDeploymentImages$Outbound;
}
export declare function cancelDeploymentImagesToJSON(cancelDeploymentImages: CancelDeploymentImages): string;
export declare function cancelDeploymentImagesFromJSON(jsonString: string): SafeParseResult<CancelDeploymentImages, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentCreator$inboundSchema: z.ZodType<CancelDeploymentCreator, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentCreator$Outbound = {
    uid: string;
    username?: string | undefined;
    avatar?: string | undefined;
};
/** @internal */
export declare const CancelDeploymentCreator$outboundSchema: z.ZodType<CancelDeploymentCreator$Outbound, z.ZodTypeDef, CancelDeploymentCreator>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentCreator$ {
    /** @deprecated use `CancelDeploymentCreator$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentCreator, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentCreator$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentCreator$Outbound, z.ZodTypeDef, CancelDeploymentCreator>;
    /** @deprecated use `CancelDeploymentCreator$Outbound` instead. */
    type Outbound = CancelDeploymentCreator$Outbound;
}
export declare function cancelDeploymentCreatorToJSON(cancelDeploymentCreator: CancelDeploymentCreator): string;
export declare function cancelDeploymentCreatorFromJSON(jsonString: string): SafeParseResult<CancelDeploymentCreator, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentDeploymentsReadyState$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentDeploymentsReadyState>;
/** @internal */
export declare const CancelDeploymentDeploymentsReadyState$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentDeploymentsReadyState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentDeploymentsReadyState$ {
    /** @deprecated use `CancelDeploymentDeploymentsReadyState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Ready: "READY";
    }>;
    /** @deprecated use `CancelDeploymentDeploymentsReadyState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Ready: "READY";
    }>;
}
/** @internal */
export declare const CancelDeploymentOutput$inboundSchema: z.ZodType<CancelDeploymentOutput, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentOutput$Outbound = {
    path: string;
    functionName: string;
};
/** @internal */
export declare const CancelDeploymentOutput$outboundSchema: z.ZodType<CancelDeploymentOutput$Outbound, z.ZodTypeDef, CancelDeploymentOutput>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentOutput$ {
    /** @deprecated use `CancelDeploymentOutput$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentOutput, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentOutput$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentOutput$Outbound, z.ZodTypeDef, CancelDeploymentOutput>;
    /** @deprecated use `CancelDeploymentOutput$Outbound` instead. */
    type Outbound = CancelDeploymentOutput$Outbound;
}
export declare function cancelDeploymentOutputToJSON(cancelDeploymentOutput: CancelDeploymentOutput): string;
export declare function cancelDeploymentOutputFromJSON(jsonString: string): SafeParseResult<CancelDeploymentOutput, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentLambdas$inboundSchema: z.ZodType<CancelDeploymentLambdas, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentLambdas$Outbound = {
    id: string;
    createdAt?: number | undefined;
    readyState?: string | undefined;
    entrypoint?: string | null | undefined;
    readyStateAt?: number | undefined;
    output: Array<CancelDeploymentOutput$Outbound>;
};
/** @internal */
export declare const CancelDeploymentLambdas$outboundSchema: z.ZodType<CancelDeploymentLambdas$Outbound, z.ZodTypeDef, CancelDeploymentLambdas>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentLambdas$ {
    /** @deprecated use `CancelDeploymentLambdas$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentLambdas, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentLambdas$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentLambdas$Outbound, z.ZodTypeDef, CancelDeploymentLambdas>;
    /** @deprecated use `CancelDeploymentLambdas$Outbound` instead. */
    type Outbound = CancelDeploymentLambdas$Outbound;
}
export declare function cancelDeploymentLambdasToJSON(cancelDeploymentLambdas: CancelDeploymentLambdas): string;
export declare function cancelDeploymentLambdasFromJSON(jsonString: string): SafeParseResult<CancelDeploymentLambdas, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentStatus$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentStatus>;
/** @internal */
export declare const CancelDeploymentStatus$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentStatus>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentStatus$ {
    /** @deprecated use `CancelDeploymentStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Queued: "QUEUED";
        readonly Ready: "READY";
        readonly Canceled: "CANCELED";
    }>;
    /** @deprecated use `CancelDeploymentStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Queued: "QUEUED";
        readonly Ready: "READY";
        readonly Canceled: "CANCELED";
    }>;
}
/** @internal */
export declare const CancelDeploymentTeam$inboundSchema: z.ZodType<CancelDeploymentTeam, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentTeam$Outbound = {
    id: string;
    name: string;
    avatar?: string | undefined;
    slug: string;
};
/** @internal */
export declare const CancelDeploymentTeam$outboundSchema: z.ZodType<CancelDeploymentTeam$Outbound, z.ZodTypeDef, CancelDeploymentTeam>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentTeam$ {
    /** @deprecated use `CancelDeploymentTeam$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentTeam, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentTeam$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentTeam$Outbound, z.ZodTypeDef, CancelDeploymentTeam>;
    /** @deprecated use `CancelDeploymentTeam$Outbound` instead. */
    type Outbound = CancelDeploymentTeam$Outbound;
}
export declare function cancelDeploymentTeamToJSON(cancelDeploymentTeam: CancelDeploymentTeam): string;
export declare function cancelDeploymentTeamFromJSON(jsonString: string): SafeParseResult<CancelDeploymentTeam, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentCustomEnvironment2$inboundSchema: z.ZodType<CancelDeploymentCustomEnvironment2, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentCustomEnvironment2$Outbound = {
    id: string;
};
/** @internal */
export declare const CancelDeploymentCustomEnvironment2$outboundSchema: z.ZodType<CancelDeploymentCustomEnvironment2$Outbound, z.ZodTypeDef, CancelDeploymentCustomEnvironment2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentCustomEnvironment2$ {
    /** @deprecated use `CancelDeploymentCustomEnvironment2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentCustomEnvironment2, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentCustomEnvironment2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentCustomEnvironment2$Outbound, z.ZodTypeDef, CancelDeploymentCustomEnvironment2>;
    /** @deprecated use `CancelDeploymentCustomEnvironment2$Outbound` instead. */
    type Outbound = CancelDeploymentCustomEnvironment2$Outbound;
}
export declare function cancelDeploymentCustomEnvironment2ToJSON(cancelDeploymentCustomEnvironment2: CancelDeploymentCustomEnvironment2): string;
export declare function cancelDeploymentCustomEnvironment2FromJSON(jsonString: string): SafeParseResult<CancelDeploymentCustomEnvironment2, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentCustomEnvironmentType$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentCustomEnvironmentType>;
/** @internal */
export declare const CancelDeploymentCustomEnvironmentType$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentCustomEnvironmentType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentCustomEnvironmentType$ {
    /** @deprecated use `CancelDeploymentCustomEnvironmentType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Production: "production";
        readonly Preview: "preview";
        readonly Development: "development";
    }>;
    /** @deprecated use `CancelDeploymentCustomEnvironmentType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Production: "production";
        readonly Preview: "preview";
        readonly Development: "development";
    }>;
}
/** @internal */
export declare const CancelDeploymentCustomEnvironmentDeploymentsType$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentCustomEnvironmentDeploymentsType>;
/** @internal */
export declare const CancelDeploymentCustomEnvironmentDeploymentsType$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentCustomEnvironmentDeploymentsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentCustomEnvironmentDeploymentsType$ {
    /** @deprecated use `CancelDeploymentCustomEnvironmentDeploymentsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly EndsWith: "endsWith";
        readonly StartsWith: "startsWith";
        readonly Equals: "equals";
    }>;
    /** @deprecated use `CancelDeploymentCustomEnvironmentDeploymentsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly EndsWith: "endsWith";
        readonly StartsWith: "startsWith";
        readonly Equals: "equals";
    }>;
}
/** @internal */
export declare const CancelDeploymentCustomEnvironmentBranchMatcher$inboundSchema: z.ZodType<CancelDeploymentCustomEnvironmentBranchMatcher, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentCustomEnvironmentBranchMatcher$Outbound = {
    type: string;
    pattern: string;
};
/** @internal */
export declare const CancelDeploymentCustomEnvironmentBranchMatcher$outboundSchema: z.ZodType<CancelDeploymentCustomEnvironmentBranchMatcher$Outbound, z.ZodTypeDef, CancelDeploymentCustomEnvironmentBranchMatcher>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentCustomEnvironmentBranchMatcher$ {
    /** @deprecated use `CancelDeploymentCustomEnvironmentBranchMatcher$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentCustomEnvironmentBranchMatcher, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentCustomEnvironmentBranchMatcher$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentCustomEnvironmentBranchMatcher$Outbound, z.ZodTypeDef, CancelDeploymentCustomEnvironmentBranchMatcher>;
    /** @deprecated use `CancelDeploymentCustomEnvironmentBranchMatcher$Outbound` instead. */
    type Outbound = CancelDeploymentCustomEnvironmentBranchMatcher$Outbound;
}
export declare function cancelDeploymentCustomEnvironmentBranchMatcherToJSON(cancelDeploymentCustomEnvironmentBranchMatcher: CancelDeploymentCustomEnvironmentBranchMatcher): string;
export declare function cancelDeploymentCustomEnvironmentBranchMatcherFromJSON(jsonString: string): SafeParseResult<CancelDeploymentCustomEnvironmentBranchMatcher, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentCustomEnvironmentVerification$inboundSchema: z.ZodType<CancelDeploymentCustomEnvironmentVerification, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentCustomEnvironmentVerification$Outbound = {
    type: string;
    domain: string;
    value: string;
    reason: string;
};
/** @internal */
export declare const CancelDeploymentCustomEnvironmentVerification$outboundSchema: z.ZodType<CancelDeploymentCustomEnvironmentVerification$Outbound, z.ZodTypeDef, CancelDeploymentCustomEnvironmentVerification>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentCustomEnvironmentVerification$ {
    /** @deprecated use `CancelDeploymentCustomEnvironmentVerification$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentCustomEnvironmentVerification, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentCustomEnvironmentVerification$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentCustomEnvironmentVerification$Outbound, z.ZodTypeDef, CancelDeploymentCustomEnvironmentVerification>;
    /** @deprecated use `CancelDeploymentCustomEnvironmentVerification$Outbound` instead. */
    type Outbound = CancelDeploymentCustomEnvironmentVerification$Outbound;
}
export declare function cancelDeploymentCustomEnvironmentVerificationToJSON(cancelDeploymentCustomEnvironmentVerification: CancelDeploymentCustomEnvironmentVerification): string;
export declare function cancelDeploymentCustomEnvironmentVerificationFromJSON(jsonString: string): SafeParseResult<CancelDeploymentCustomEnvironmentVerification, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentCustomEnvironmentDomains$inboundSchema: z.ZodType<CancelDeploymentCustomEnvironmentDomains, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentCustomEnvironmentDomains$Outbound = {
    name: string;
    apexName: string;
    projectId: string;
    redirect?: string | null | undefined;
    redirectStatusCode?: number | null | undefined;
    gitBranch?: string | null | undefined;
    customEnvironmentId?: string | null | undefined;
    updatedAt?: number | undefined;
    createdAt?: number | undefined;
    verified: boolean;
    verification?: Array<CancelDeploymentCustomEnvironmentVerification$Outbound> | undefined;
};
/** @internal */
export declare const CancelDeploymentCustomEnvironmentDomains$outboundSchema: z.ZodType<CancelDeploymentCustomEnvironmentDomains$Outbound, z.ZodTypeDef, CancelDeploymentCustomEnvironmentDomains>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentCustomEnvironmentDomains$ {
    /** @deprecated use `CancelDeploymentCustomEnvironmentDomains$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentCustomEnvironmentDomains, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentCustomEnvironmentDomains$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentCustomEnvironmentDomains$Outbound, z.ZodTypeDef, CancelDeploymentCustomEnvironmentDomains>;
    /** @deprecated use `CancelDeploymentCustomEnvironmentDomains$Outbound` instead. */
    type Outbound = CancelDeploymentCustomEnvironmentDomains$Outbound;
}
export declare function cancelDeploymentCustomEnvironmentDomainsToJSON(cancelDeploymentCustomEnvironmentDomains: CancelDeploymentCustomEnvironmentDomains): string;
export declare function cancelDeploymentCustomEnvironmentDomainsFromJSON(jsonString: string): SafeParseResult<CancelDeploymentCustomEnvironmentDomains, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentCustomEnvironment1$inboundSchema: z.ZodType<CancelDeploymentCustomEnvironment1, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentCustomEnvironment1$Outbound = {
    id: string;
    slug: string;
    type: string;
    description?: string | undefined;
    branchMatcher?: CancelDeploymentCustomEnvironmentBranchMatcher$Outbound | undefined;
    domains?: Array<CancelDeploymentCustomEnvironmentDomains$Outbound> | undefined;
    currentDeploymentAliases?: Array<string> | undefined;
    createdAt: number;
    updatedAt: number;
};
/** @internal */
export declare const CancelDeploymentCustomEnvironment1$outboundSchema: z.ZodType<CancelDeploymentCustomEnvironment1$Outbound, z.ZodTypeDef, CancelDeploymentCustomEnvironment1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentCustomEnvironment1$ {
    /** @deprecated use `CancelDeploymentCustomEnvironment1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentCustomEnvironment1, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentCustomEnvironment1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentCustomEnvironment1$Outbound, z.ZodTypeDef, CancelDeploymentCustomEnvironment1>;
    /** @deprecated use `CancelDeploymentCustomEnvironment1$Outbound` instead. */
    type Outbound = CancelDeploymentCustomEnvironment1$Outbound;
}
export declare function cancelDeploymentCustomEnvironment1ToJSON(cancelDeploymentCustomEnvironment1: CancelDeploymentCustomEnvironment1): string;
export declare function cancelDeploymentCustomEnvironment1FromJSON(jsonString: string): SafeParseResult<CancelDeploymentCustomEnvironment1, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentCustomEnvironment$inboundSchema: z.ZodType<CancelDeploymentCustomEnvironment, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentCustomEnvironment$Outbound = CancelDeploymentCustomEnvironment1$Outbound | CancelDeploymentCustomEnvironment2$Outbound;
/** @internal */
export declare const CancelDeploymentCustomEnvironment$outboundSchema: z.ZodType<CancelDeploymentCustomEnvironment$Outbound, z.ZodTypeDef, CancelDeploymentCustomEnvironment>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentCustomEnvironment$ {
    /** @deprecated use `CancelDeploymentCustomEnvironment$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentCustomEnvironment, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentCustomEnvironment$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentCustomEnvironment$Outbound, z.ZodTypeDef, CancelDeploymentCustomEnvironment>;
    /** @deprecated use `CancelDeploymentCustomEnvironment$Outbound` instead. */
    type Outbound = CancelDeploymentCustomEnvironment$Outbound;
}
export declare function cancelDeploymentCustomEnvironmentToJSON(cancelDeploymentCustomEnvironment: CancelDeploymentCustomEnvironment): string;
export declare function cancelDeploymentCustomEnvironmentFromJSON(jsonString: string): SafeParseResult<CancelDeploymentCustomEnvironment, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentOomReport$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentOomReport>;
/** @internal */
export declare const CancelDeploymentOomReport$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentOomReport>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentOomReport$ {
    /** @deprecated use `CancelDeploymentOomReport$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly OutOfMemory: "out-of-memory";
    }>;
    /** @deprecated use `CancelDeploymentOomReport$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly OutOfMemory: "out-of-memory";
    }>;
}
/** @internal */
export declare const CancelDeploymentAliasError$inboundSchema: z.ZodType<CancelDeploymentAliasError, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentAliasError$Outbound = {
    code: string;
    message: string;
};
/** @internal */
export declare const CancelDeploymentAliasError$outboundSchema: z.ZodType<CancelDeploymentAliasError$Outbound, z.ZodTypeDef, CancelDeploymentAliasError>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentAliasError$ {
    /** @deprecated use `CancelDeploymentAliasError$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentAliasError, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentAliasError$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentAliasError$Outbound, z.ZodTypeDef, CancelDeploymentAliasError>;
    /** @deprecated use `CancelDeploymentAliasError$Outbound` instead. */
    type Outbound = CancelDeploymentAliasError$Outbound;
}
export declare function cancelDeploymentAliasErrorToJSON(cancelDeploymentAliasError: CancelDeploymentAliasError): string;
export declare function cancelDeploymentAliasErrorFromJSON(jsonString: string): SafeParseResult<CancelDeploymentAliasError, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentAliasWarning$inboundSchema: z.ZodType<CancelDeploymentAliasWarning, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentAliasWarning$Outbound = {
    code: string;
    message: string;
    link?: string | undefined;
    action?: string | undefined;
};
/** @internal */
export declare const CancelDeploymentAliasWarning$outboundSchema: z.ZodType<CancelDeploymentAliasWarning$Outbound, z.ZodTypeDef, CancelDeploymentAliasWarning>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentAliasWarning$ {
    /** @deprecated use `CancelDeploymentAliasWarning$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentAliasWarning, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentAliasWarning$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentAliasWarning$Outbound, z.ZodTypeDef, CancelDeploymentAliasWarning>;
    /** @deprecated use `CancelDeploymentAliasWarning$Outbound` instead. */
    type Outbound = CancelDeploymentAliasWarning$Outbound;
}
export declare function cancelDeploymentAliasWarningToJSON(cancelDeploymentAliasWarning: CancelDeploymentAliasWarning): string;
export declare function cancelDeploymentAliasWarningFromJSON(jsonString: string): SafeParseResult<CancelDeploymentAliasWarning, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentChecksState$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentChecksState>;
/** @internal */
export declare const CancelDeploymentChecksState$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentChecksState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentChecksState$ {
    /** @deprecated use `CancelDeploymentChecksState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Registered: "registered";
        readonly Running: "running";
        readonly Completed: "completed";
    }>;
    /** @deprecated use `CancelDeploymentChecksState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Registered: "registered";
        readonly Running: "running";
        readonly Completed: "completed";
    }>;
}
/** @internal */
export declare const CancelDeploymentChecksConclusion$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentChecksConclusion>;
/** @internal */
export declare const CancelDeploymentChecksConclusion$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentChecksConclusion>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentChecksConclusion$ {
    /** @deprecated use `CancelDeploymentChecksConclusion$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Skipped: "skipped";
        readonly Succeeded: "succeeded";
        readonly Failed: "failed";
        readonly Canceled: "canceled";
    }>;
    /** @deprecated use `CancelDeploymentChecksConclusion$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Skipped: "skipped";
        readonly Succeeded: "succeeded";
        readonly Failed: "failed";
        readonly Canceled: "canceled";
    }>;
}
/** @internal */
export declare const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody15Type$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody15Type>;
/** @internal */
export declare const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody15Type$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody15Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody15Type$ {
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody15Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody15Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
}
/** @internal */
export declare const GitSource15$inboundSchema: z.ZodType<GitSource15, z.ZodTypeDef, unknown>;
/** @internal */
export type GitSource15$Outbound = {
    type: string;
    ref: string;
    sha: string;
    owner?: string | undefined;
    slug?: string | undefined;
    workspaceUuid: string;
    repoUuid: string;
};
/** @internal */
export declare const GitSource15$outboundSchema: z.ZodType<GitSource15$Outbound, z.ZodTypeDef, GitSource15>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GitSource15$ {
    /** @deprecated use `GitSource15$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GitSource15, z.ZodTypeDef, unknown>;
    /** @deprecated use `GitSource15$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GitSource15$Outbound, z.ZodTypeDef, GitSource15>;
    /** @deprecated use `GitSource15$Outbound` instead. */
    type Outbound = GitSource15$Outbound;
}
export declare function gitSource15ToJSON(gitSource15: GitSource15): string;
export declare function gitSource15FromJSON(jsonString: string): SafeParseResult<GitSource15, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody14Type$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody14Type>;
/** @internal */
export declare const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody14Type$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody14Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody14Type$ {
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody14Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Gitlab: "gitlab";
    }>;
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody14Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Gitlab: "gitlab";
    }>;
}
/** @internal */
export declare const GitSource14$inboundSchema: z.ZodType<GitSource14, z.ZodTypeDef, unknown>;
/** @internal */
export type GitSource14$Outbound = {
    type: string;
    ref: string;
    sha: string;
    projectId: number;
};
/** @internal */
export declare const GitSource14$outboundSchema: z.ZodType<GitSource14$Outbound, z.ZodTypeDef, GitSource14>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GitSource14$ {
    /** @deprecated use `GitSource14$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GitSource14, z.ZodTypeDef, unknown>;
    /** @deprecated use `GitSource14$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GitSource14$Outbound, z.ZodTypeDef, GitSource14>;
    /** @deprecated use `GitSource14$Outbound` instead. */
    type Outbound = GitSource14$Outbound;
}
export declare function gitSource14ToJSON(gitSource14: GitSource14): string;
export declare function gitSource14FromJSON(jsonString: string): SafeParseResult<GitSource14, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody13Type$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody13Type>;
/** @internal */
export declare const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody13Type$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody13Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody13Type$ {
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody13Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly GithubLimited: "github-limited";
    }>;
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody13Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly GithubLimited: "github-limited";
    }>;
}
/** @internal */
export declare const GitSource13$inboundSchema: z.ZodType<GitSource13, z.ZodTypeDef, unknown>;
/** @internal */
export type GitSource13$Outbound = {
    type: string;
    ref: string;
    sha: string;
    repoId: number;
    org?: string | undefined;
    repo?: string | undefined;
};
/** @internal */
export declare const GitSource13$outboundSchema: z.ZodType<GitSource13$Outbound, z.ZodTypeDef, GitSource13>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GitSource13$ {
    /** @deprecated use `GitSource13$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GitSource13, z.ZodTypeDef, unknown>;
    /** @deprecated use `GitSource13$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GitSource13$Outbound, z.ZodTypeDef, GitSource13>;
    /** @deprecated use `GitSource13$Outbound` instead. */
    type Outbound = GitSource13$Outbound;
}
export declare function gitSource13ToJSON(gitSource13: GitSource13): string;
export declare function gitSource13FromJSON(jsonString: string): SafeParseResult<GitSource13, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type>;
/** @internal */
export declare const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$ {
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly GithubCustomHost: "github-custom-host";
    }>;
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly GithubCustomHost: "github-custom-host";
    }>;
}
/** @internal */
export declare const GitSource12$inboundSchema: z.ZodType<GitSource12, z.ZodTypeDef, unknown>;
/** @internal */
export type GitSource12$Outbound = {
    type: string;
    host: string;
    ref: string;
    sha: string;
    repoId: number;
    org?: string | undefined;
    repo?: string | undefined;
};
/** @internal */
export declare const GitSource12$outboundSchema: z.ZodType<GitSource12$Outbound, z.ZodTypeDef, GitSource12>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GitSource12$ {
    /** @deprecated use `GitSource12$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GitSource12, z.ZodTypeDef, unknown>;
    /** @deprecated use `GitSource12$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GitSource12$Outbound, z.ZodTypeDef, GitSource12>;
    /** @deprecated use `GitSource12$Outbound` instead. */
    type Outbound = GitSource12$Outbound;
}
export declare function gitSource12ToJSON(gitSource12: GitSource12): string;
export declare function gitSource12FromJSON(jsonString: string): SafeParseResult<GitSource12, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type>;
/** @internal */
export declare const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$ {
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
}
/** @internal */
export declare const GitSource11$inboundSchema: z.ZodType<GitSource11, z.ZodTypeDef, unknown>;
/** @internal */
export type GitSource11$Outbound = {
    type: string;
    ref: string;
    sha: string;
    repoId: number;
    org?: string | undefined;
    repo?: string | undefined;
};
/** @internal */
export declare const GitSource11$outboundSchema: z.ZodType<GitSource11$Outbound, z.ZodTypeDef, GitSource11>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GitSource11$ {
    /** @deprecated use `GitSource11$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GitSource11, z.ZodTypeDef, unknown>;
    /** @deprecated use `GitSource11$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GitSource11$Outbound, z.ZodTypeDef, GitSource11>;
    /** @deprecated use `GitSource11$Outbound` instead. */
    type Outbound = GitSource11$Outbound;
}
export declare function gitSource11ToJSON(gitSource11: GitSource11): string;
export declare function gitSource11FromJSON(jsonString: string): SafeParseResult<GitSource11, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type>;
/** @internal */
export declare const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$ {
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Custom: "custom";
    }>;
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Custom: "custom";
    }>;
}
/** @internal */
export declare const GitSource10$inboundSchema: z.ZodType<GitSource10, z.ZodTypeDef, unknown>;
/** @internal */
export type GitSource10$Outbound = {
    type: string;
    ref: string;
    sha: string;
    gitUrl: string;
};
/** @internal */
export declare const GitSource10$outboundSchema: z.ZodType<GitSource10$Outbound, z.ZodTypeDef, GitSource10>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GitSource10$ {
    /** @deprecated use `GitSource10$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GitSource10, z.ZodTypeDef, unknown>;
    /** @deprecated use `GitSource10$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GitSource10$Outbound, z.ZodTypeDef, GitSource10>;
    /** @deprecated use `GitSource10$Outbound` instead. */
    type Outbound = GitSource10$Outbound;
}
export declare function gitSource10ToJSON(gitSource10: GitSource10): string;
export declare function gitSource10FromJSON(jsonString: string): SafeParseResult<GitSource10, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type>;
/** @internal */
export declare const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$ {
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
}
/** @internal */
export declare const GitSource9$inboundSchema: z.ZodType<GitSource9, z.ZodTypeDef, unknown>;
/** @internal */
export type GitSource9$Outbound = {
    type: string;
    owner: string;
    slug: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
/** @internal */
export declare const GitSource9$outboundSchema: z.ZodType<GitSource9$Outbound, z.ZodTypeDef, GitSource9>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GitSource9$ {
    /** @deprecated use `GitSource9$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GitSource9, z.ZodTypeDef, unknown>;
    /** @deprecated use `GitSource9$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GitSource9$Outbound, z.ZodTypeDef, GitSource9>;
    /** @deprecated use `GitSource9$Outbound` instead. */
    type Outbound = GitSource9$Outbound;
}
export declare function gitSource9ToJSON(gitSource9: GitSource9): string;
export declare function gitSource9FromJSON(jsonString: string): SafeParseResult<GitSource9, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type>;
/** @internal */
export declare const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$ {
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
}
/** @internal */
export declare const GitSource8$inboundSchema: z.ZodType<GitSource8, z.ZodTypeDef, unknown>;
/** @internal */
export type GitSource8$Outbound = {
    type: string;
    workspaceUuid?: string | undefined;
    repoUuid: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
/** @internal */
export declare const GitSource8$outboundSchema: z.ZodType<GitSource8$Outbound, z.ZodTypeDef, GitSource8>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GitSource8$ {
    /** @deprecated use `GitSource8$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GitSource8, z.ZodTypeDef, unknown>;
    /** @deprecated use `GitSource8$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GitSource8$Outbound, z.ZodTypeDef, GitSource8>;
    /** @deprecated use `GitSource8$Outbound` instead. */
    type Outbound = GitSource8$Outbound;
}
export declare function gitSource8ToJSON(gitSource8: GitSource8): string;
export declare function gitSource8FromJSON(jsonString: string): SafeParseResult<GitSource8, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type>;
/** @internal */
export declare const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$ {
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Gitlab: "gitlab";
    }>;
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Gitlab: "gitlab";
    }>;
}
/** @internal */
export declare const CancelDeploymentGitSourceProjectId$inboundSchema: z.ZodType<CancelDeploymentGitSourceProjectId, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentGitSourceProjectId$Outbound = string | number;
/** @internal */
export declare const CancelDeploymentGitSourceProjectId$outboundSchema: z.ZodType<CancelDeploymentGitSourceProjectId$Outbound, z.ZodTypeDef, CancelDeploymentGitSourceProjectId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentGitSourceProjectId$ {
    /** @deprecated use `CancelDeploymentGitSourceProjectId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentGitSourceProjectId, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentGitSourceProjectId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentGitSourceProjectId$Outbound, z.ZodTypeDef, CancelDeploymentGitSourceProjectId>;
    /** @deprecated use `CancelDeploymentGitSourceProjectId$Outbound` instead. */
    type Outbound = CancelDeploymentGitSourceProjectId$Outbound;
}
export declare function cancelDeploymentGitSourceProjectIdToJSON(cancelDeploymentGitSourceProjectId: CancelDeploymentGitSourceProjectId): string;
export declare function cancelDeploymentGitSourceProjectIdFromJSON(jsonString: string): SafeParseResult<CancelDeploymentGitSourceProjectId, SDKValidationError>;
/** @internal */
export declare const GitSource7$inboundSchema: z.ZodType<GitSource7, z.ZodTypeDef, unknown>;
/** @internal */
export type GitSource7$Outbound = {
    type: string;
    projectId: string | number;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
/** @internal */
export declare const GitSource7$outboundSchema: z.ZodType<GitSource7$Outbound, z.ZodTypeDef, GitSource7>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GitSource7$ {
    /** @deprecated use `GitSource7$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GitSource7, z.ZodTypeDef, unknown>;
    /** @deprecated use `GitSource7$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GitSource7$Outbound, z.ZodTypeDef, GitSource7>;
    /** @deprecated use `GitSource7$Outbound` instead. */
    type Outbound = GitSource7$Outbound;
}
export declare function gitSource7ToJSON(gitSource7: GitSource7): string;
export declare function gitSource7FromJSON(jsonString: string): SafeParseResult<GitSource7, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType>;
/** @internal */
export declare const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$ {
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly GithubLimited: "github-limited";
    }>;
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly GithubLimited: "github-limited";
    }>;
}
/** @internal */
export declare const GitSource6$inboundSchema: z.ZodType<GitSource6, z.ZodTypeDef, unknown>;
/** @internal */
export type GitSource6$Outbound = {
    type: string;
    org: string;
    repo: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
/** @internal */
export declare const GitSource6$outboundSchema: z.ZodType<GitSource6$Outbound, z.ZodTypeDef, GitSource6>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GitSource6$ {
    /** @deprecated use `GitSource6$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GitSource6, z.ZodTypeDef, unknown>;
    /** @deprecated use `GitSource6$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GitSource6$Outbound, z.ZodTypeDef, GitSource6>;
    /** @deprecated use `GitSource6$Outbound` instead. */
    type Outbound = GitSource6$Outbound;
}
export declare function gitSource6ToJSON(gitSource6: GitSource6): string;
export declare function gitSource6FromJSON(jsonString: string): SafeParseResult<GitSource6, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType>;
/** @internal */
export declare const CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$ {
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly GithubLimited: "github-limited";
    }>;
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly GithubLimited: "github-limited";
    }>;
}
/** @internal */
export declare const CancelDeploymentGitSourceDeploymentsResponseRepoId$inboundSchema: z.ZodType<CancelDeploymentGitSourceDeploymentsResponseRepoId, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentGitSourceDeploymentsResponseRepoId$Outbound = string | number;
/** @internal */
export declare const CancelDeploymentGitSourceDeploymentsResponseRepoId$outboundSchema: z.ZodType<CancelDeploymentGitSourceDeploymentsResponseRepoId$Outbound, z.ZodTypeDef, CancelDeploymentGitSourceDeploymentsResponseRepoId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentGitSourceDeploymentsResponseRepoId$ {
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponseRepoId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentGitSourceDeploymentsResponseRepoId, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponseRepoId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentGitSourceDeploymentsResponseRepoId$Outbound, z.ZodTypeDef, CancelDeploymentGitSourceDeploymentsResponseRepoId>;
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponseRepoId$Outbound` instead. */
    type Outbound = CancelDeploymentGitSourceDeploymentsResponseRepoId$Outbound;
}
export declare function cancelDeploymentGitSourceDeploymentsResponseRepoIdToJSON(cancelDeploymentGitSourceDeploymentsResponseRepoId: CancelDeploymentGitSourceDeploymentsResponseRepoId): string;
export declare function cancelDeploymentGitSourceDeploymentsResponseRepoIdFromJSON(jsonString: string): SafeParseResult<CancelDeploymentGitSourceDeploymentsResponseRepoId, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentGitSource5$inboundSchema: z.ZodType<CancelDeploymentGitSource5, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentGitSource5$Outbound = {
    type: string;
    repoId: string | number;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
/** @internal */
export declare const CancelDeploymentGitSource5$outboundSchema: z.ZodType<CancelDeploymentGitSource5$Outbound, z.ZodTypeDef, CancelDeploymentGitSource5>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentGitSource5$ {
    /** @deprecated use `CancelDeploymentGitSource5$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentGitSource5, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentGitSource5$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentGitSource5$Outbound, z.ZodTypeDef, CancelDeploymentGitSource5>;
    /** @deprecated use `CancelDeploymentGitSource5$Outbound` instead. */
    type Outbound = CancelDeploymentGitSource5$Outbound;
}
export declare function cancelDeploymentGitSource5ToJSON(cancelDeploymentGitSource5: CancelDeploymentGitSource5): string;
export declare function cancelDeploymentGitSource5FromJSON(jsonString: string): SafeParseResult<CancelDeploymentGitSource5, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentGitSourceDeploymentsResponse200Type$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitSourceDeploymentsResponse200Type>;
/** @internal */
export declare const CancelDeploymentGitSourceDeploymentsResponse200Type$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitSourceDeploymentsResponse200Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentGitSourceDeploymentsResponse200Type$ {
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly GithubCustomHost: "github-custom-host";
    }>;
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponse200Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly GithubCustomHost: "github-custom-host";
    }>;
}
/** @internal */
export declare const CancelDeploymentGitSource4$inboundSchema: z.ZodType<CancelDeploymentGitSource4, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentGitSource4$Outbound = {
    type: string;
    host: string;
    org: string;
    repo: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
/** @internal */
export declare const CancelDeploymentGitSource4$outboundSchema: z.ZodType<CancelDeploymentGitSource4$Outbound, z.ZodTypeDef, CancelDeploymentGitSource4>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentGitSource4$ {
    /** @deprecated use `CancelDeploymentGitSource4$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentGitSource4, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentGitSource4$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentGitSource4$Outbound, z.ZodTypeDef, CancelDeploymentGitSource4>;
    /** @deprecated use `CancelDeploymentGitSource4$Outbound` instead. */
    type Outbound = CancelDeploymentGitSource4$Outbound;
}
export declare function cancelDeploymentGitSource4ToJSON(cancelDeploymentGitSource4: CancelDeploymentGitSource4): string;
export declare function cancelDeploymentGitSource4FromJSON(jsonString: string): SafeParseResult<CancelDeploymentGitSource4, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentGitSourceDeploymentsResponseType$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitSourceDeploymentsResponseType>;
/** @internal */
export declare const CancelDeploymentGitSourceDeploymentsResponseType$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitSourceDeploymentsResponseType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentGitSourceDeploymentsResponseType$ {
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponseType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly GithubCustomHost: "github-custom-host";
    }>;
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsResponseType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly GithubCustomHost: "github-custom-host";
    }>;
}
/** @internal */
export declare const CancelDeploymentGitSourceDeploymentsRepoId$inboundSchema: z.ZodType<CancelDeploymentGitSourceDeploymentsRepoId, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentGitSourceDeploymentsRepoId$Outbound = string | number;
/** @internal */
export declare const CancelDeploymentGitSourceDeploymentsRepoId$outboundSchema: z.ZodType<CancelDeploymentGitSourceDeploymentsRepoId$Outbound, z.ZodTypeDef, CancelDeploymentGitSourceDeploymentsRepoId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentGitSourceDeploymentsRepoId$ {
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsRepoId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentGitSourceDeploymentsRepoId, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsRepoId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentGitSourceDeploymentsRepoId$Outbound, z.ZodTypeDef, CancelDeploymentGitSourceDeploymentsRepoId>;
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsRepoId$Outbound` instead. */
    type Outbound = CancelDeploymentGitSourceDeploymentsRepoId$Outbound;
}
export declare function cancelDeploymentGitSourceDeploymentsRepoIdToJSON(cancelDeploymentGitSourceDeploymentsRepoId: CancelDeploymentGitSourceDeploymentsRepoId): string;
export declare function cancelDeploymentGitSourceDeploymentsRepoIdFromJSON(jsonString: string): SafeParseResult<CancelDeploymentGitSourceDeploymentsRepoId, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentGitSource3$inboundSchema: z.ZodType<CancelDeploymentGitSource3, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentGitSource3$Outbound = {
    type: string;
    host: string;
    repoId: string | number;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
/** @internal */
export declare const CancelDeploymentGitSource3$outboundSchema: z.ZodType<CancelDeploymentGitSource3$Outbound, z.ZodTypeDef, CancelDeploymentGitSource3>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentGitSource3$ {
    /** @deprecated use `CancelDeploymentGitSource3$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentGitSource3, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentGitSource3$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentGitSource3$Outbound, z.ZodTypeDef, CancelDeploymentGitSource3>;
    /** @deprecated use `CancelDeploymentGitSource3$Outbound` instead. */
    type Outbound = CancelDeploymentGitSource3$Outbound;
}
export declare function cancelDeploymentGitSource3ToJSON(cancelDeploymentGitSource3: CancelDeploymentGitSource3): string;
export declare function cancelDeploymentGitSource3FromJSON(jsonString: string): SafeParseResult<CancelDeploymentGitSource3, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentGitSourceDeploymentsType$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitSourceDeploymentsType>;
/** @internal */
export declare const CancelDeploymentGitSourceDeploymentsType$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitSourceDeploymentsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentGitSourceDeploymentsType$ {
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
    /** @deprecated use `CancelDeploymentGitSourceDeploymentsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
}
/** @internal */
export declare const CancelDeploymentGitSource2$inboundSchema: z.ZodType<CancelDeploymentGitSource2, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentGitSource2$Outbound = {
    type: string;
    org: string;
    repo: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
/** @internal */
export declare const CancelDeploymentGitSource2$outboundSchema: z.ZodType<CancelDeploymentGitSource2$Outbound, z.ZodTypeDef, CancelDeploymentGitSource2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentGitSource2$ {
    /** @deprecated use `CancelDeploymentGitSource2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentGitSource2, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentGitSource2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentGitSource2$Outbound, z.ZodTypeDef, CancelDeploymentGitSource2>;
    /** @deprecated use `CancelDeploymentGitSource2$Outbound` instead. */
    type Outbound = CancelDeploymentGitSource2$Outbound;
}
export declare function cancelDeploymentGitSource2ToJSON(cancelDeploymentGitSource2: CancelDeploymentGitSource2): string;
export declare function cancelDeploymentGitSource2FromJSON(jsonString: string): SafeParseResult<CancelDeploymentGitSource2, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentGitSourceType$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitSourceType>;
/** @internal */
export declare const CancelDeploymentGitSourceType$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitSourceType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentGitSourceType$ {
    /** @deprecated use `CancelDeploymentGitSourceType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
    /** @deprecated use `CancelDeploymentGitSourceType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
}
/** @internal */
export declare const CancelDeploymentGitSourceRepoId$inboundSchema: z.ZodType<CancelDeploymentGitSourceRepoId, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentGitSourceRepoId$Outbound = string | number;
/** @internal */
export declare const CancelDeploymentGitSourceRepoId$outboundSchema: z.ZodType<CancelDeploymentGitSourceRepoId$Outbound, z.ZodTypeDef, CancelDeploymentGitSourceRepoId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentGitSourceRepoId$ {
    /** @deprecated use `CancelDeploymentGitSourceRepoId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentGitSourceRepoId, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentGitSourceRepoId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentGitSourceRepoId$Outbound, z.ZodTypeDef, CancelDeploymentGitSourceRepoId>;
    /** @deprecated use `CancelDeploymentGitSourceRepoId$Outbound` instead. */
    type Outbound = CancelDeploymentGitSourceRepoId$Outbound;
}
export declare function cancelDeploymentGitSourceRepoIdToJSON(cancelDeploymentGitSourceRepoId: CancelDeploymentGitSourceRepoId): string;
export declare function cancelDeploymentGitSourceRepoIdFromJSON(jsonString: string): SafeParseResult<CancelDeploymentGitSourceRepoId, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentGitSource1$inboundSchema: z.ZodType<CancelDeploymentGitSource1, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentGitSource1$Outbound = {
    type: string;
    repoId: string | number;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
/** @internal */
export declare const CancelDeploymentGitSource1$outboundSchema: z.ZodType<CancelDeploymentGitSource1$Outbound, z.ZodTypeDef, CancelDeploymentGitSource1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentGitSource1$ {
    /** @deprecated use `CancelDeploymentGitSource1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentGitSource1, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentGitSource1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentGitSource1$Outbound, z.ZodTypeDef, CancelDeploymentGitSource1>;
    /** @deprecated use `CancelDeploymentGitSource1$Outbound` instead. */
    type Outbound = CancelDeploymentGitSource1$Outbound;
}
export declare function cancelDeploymentGitSource1ToJSON(cancelDeploymentGitSource1: CancelDeploymentGitSource1): string;
export declare function cancelDeploymentGitSource1FromJSON(jsonString: string): SafeParseResult<CancelDeploymentGitSource1, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentGitSource$inboundSchema: z.ZodType<CancelDeploymentGitSource, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentGitSource$Outbound = GitSource12$Outbound | GitSource15$Outbound | CancelDeploymentGitSource4$Outbound | GitSource10$Outbound | GitSource11$Outbound | GitSource13$Outbound | GitSource14$Outbound | CancelDeploymentGitSource2$Outbound | CancelDeploymentGitSource3$Outbound | GitSource6$Outbound | GitSource9$Outbound | CancelDeploymentGitSource1$Outbound | CancelDeploymentGitSource5$Outbound | GitSource7$Outbound | GitSource8$Outbound;
/** @internal */
export declare const CancelDeploymentGitSource$outboundSchema: z.ZodType<CancelDeploymentGitSource$Outbound, z.ZodTypeDef, CancelDeploymentGitSource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentGitSource$ {
    /** @deprecated use `CancelDeploymentGitSource$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentGitSource, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentGitSource$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentGitSource$Outbound, z.ZodTypeDef, CancelDeploymentGitSource>;
    /** @deprecated use `CancelDeploymentGitSource$Outbound` instead. */
    type Outbound = CancelDeploymentGitSource$Outbound;
}
export declare function cancelDeploymentGitSourceToJSON(cancelDeploymentGitSource: CancelDeploymentGitSource): string;
export declare function cancelDeploymentGitSourceFromJSON(jsonString: string): SafeParseResult<CancelDeploymentGitSource, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentNodeVersion$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentNodeVersion>;
/** @internal */
export declare const CancelDeploymentNodeVersion$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentNodeVersion>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentNodeVersion$ {
    /** @deprecated use `CancelDeploymentNodeVersion$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly TwentyTwoDotX: "22.x";
        readonly TwentyDotX: "20.x";
        readonly EighteenDotX: "18.x";
        readonly SixteenDotX: "16.x";
        readonly FourteenDotX: "14.x";
        readonly TwelveDotX: "12.x";
        readonly TenDotX: "10.x";
        readonly EightDot10DotX: "8.10.x";
    }>;
    /** @deprecated use `CancelDeploymentNodeVersion$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly TwentyTwoDotX: "22.x";
        readonly TwentyDotX: "20.x";
        readonly EighteenDotX: "18.x";
        readonly SixteenDotX: "16.x";
        readonly FourteenDotX: "14.x";
        readonly TwelveDotX: "12.x";
        readonly TenDotX: "10.x";
        readonly EightDot10DotX: "8.10.x";
    }>;
}
/** @internal */
export declare const CancelDeploymentProject$inboundSchema: z.ZodType<CancelDeploymentProject, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentProject$Outbound = {
    id: string;
    name: string;
    framework?: string | null | undefined;
};
/** @internal */
export declare const CancelDeploymentProject$outboundSchema: z.ZodType<CancelDeploymentProject$Outbound, z.ZodTypeDef, CancelDeploymentProject>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentProject$ {
    /** @deprecated use `CancelDeploymentProject$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentProject, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentProject$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentProject$Outbound, z.ZodTypeDef, CancelDeploymentProject>;
    /** @deprecated use `CancelDeploymentProject$Outbound` instead. */
    type Outbound = CancelDeploymentProject$Outbound;
}
export declare function cancelDeploymentProjectToJSON(cancelDeploymentProject: CancelDeploymentProject): string;
export declare function cancelDeploymentProjectFromJSON(jsonString: string): SafeParseResult<CancelDeploymentProject, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentReadyState$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentReadyState>;
/** @internal */
export declare const CancelDeploymentReadyState$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentReadyState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentReadyState$ {
    /** @deprecated use `CancelDeploymentReadyState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Queued: "QUEUED";
        readonly Ready: "READY";
        readonly Canceled: "CANCELED";
    }>;
    /** @deprecated use `CancelDeploymentReadyState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Queued: "QUEUED";
        readonly Ready: "READY";
        readonly Canceled: "CANCELED";
    }>;
}
/** @internal */
export declare const CancelDeploymentReadySubstate$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentReadySubstate>;
/** @internal */
export declare const CancelDeploymentReadySubstate$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentReadySubstate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentReadySubstate$ {
    /** @deprecated use `CancelDeploymentReadySubstate$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Staged: "STAGED";
        readonly Rolling: "ROLLING";
        readonly Promoted: "PROMOTED";
    }>;
    /** @deprecated use `CancelDeploymentReadySubstate$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Staged: "STAGED";
        readonly Rolling: "ROLLING";
        readonly Promoted: "PROMOTED";
    }>;
}
/** @internal */
export declare const CancelDeploymentSource$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentSource>;
/** @internal */
export declare const CancelDeploymentSource$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentSource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentSource$ {
    /** @deprecated use `CancelDeploymentSource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly ApiTriggerGitDeploy: "api-trigger-git-deploy";
        readonly Cli: "cli";
        readonly CloneRepo: "clone/repo";
        readonly Git: "git";
        readonly Import: "import";
        readonly ImportRepo: "import/repo";
        readonly Redeploy: "redeploy";
        readonly V0Web: "v0-web";
    }>;
    /** @deprecated use `CancelDeploymentSource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly ApiTriggerGitDeploy: "api-trigger-git-deploy";
        readonly Cli: "cli";
        readonly CloneRepo: "clone/repo";
        readonly Git: "git";
        readonly Import: "import";
        readonly ImportRepo: "import/repo";
        readonly Redeploy: "redeploy";
        readonly V0Web: "v0-web";
    }>;
}
/** @internal */
export declare const CancelDeploymentTarget$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentTarget>;
/** @internal */
export declare const CancelDeploymentTarget$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentTarget>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentTarget$ {
    /** @deprecated use `CancelDeploymentTarget$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Staging: "staging";
        readonly Production: "production";
    }>;
    /** @deprecated use `CancelDeploymentTarget$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Staging: "staging";
        readonly Production: "production";
    }>;
}
/** @internal */
export declare const CancelDeploymentType$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentType>;
/** @internal */
export declare const CancelDeploymentType$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentType$ {
    /** @deprecated use `CancelDeploymentType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Lambdas: "LAMBDAS";
    }>;
    /** @deprecated use `CancelDeploymentType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Lambdas: "LAMBDAS";
    }>;
}
/** @internal */
export declare const CancelDeploymentOidcTokenClaims$inboundSchema: z.ZodType<CancelDeploymentOidcTokenClaims, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentOidcTokenClaims$Outbound = {
    iss: string;
    sub: string;
    scope: string;
    aud: string;
    owner: string;
    owner_id: string;
    project: string;
    project_id: string;
    environment: string;
};
/** @internal */
export declare const CancelDeploymentOidcTokenClaims$outboundSchema: z.ZodType<CancelDeploymentOidcTokenClaims$Outbound, z.ZodTypeDef, CancelDeploymentOidcTokenClaims>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentOidcTokenClaims$ {
    /** @deprecated use `CancelDeploymentOidcTokenClaims$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentOidcTokenClaims, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentOidcTokenClaims$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentOidcTokenClaims$Outbound, z.ZodTypeDef, CancelDeploymentOidcTokenClaims>;
    /** @deprecated use `CancelDeploymentOidcTokenClaims$Outbound` instead. */
    type Outbound = CancelDeploymentOidcTokenClaims$Outbound;
}
export declare function cancelDeploymentOidcTokenClaimsToJSON(cancelDeploymentOidcTokenClaims: CancelDeploymentOidcTokenClaims): string;
export declare function cancelDeploymentOidcTokenClaimsFromJSON(jsonString: string): SafeParseResult<CancelDeploymentOidcTokenClaims, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentCrons$inboundSchema: z.ZodType<CancelDeploymentCrons, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentCrons$Outbound = {
    schedule: string;
    path: string;
};
/** @internal */
export declare const CancelDeploymentCrons$outboundSchema: z.ZodType<CancelDeploymentCrons$Outbound, z.ZodTypeDef, CancelDeploymentCrons>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentCrons$ {
    /** @deprecated use `CancelDeploymentCrons$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentCrons, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentCrons$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentCrons$Outbound, z.ZodTypeDef, CancelDeploymentCrons>;
    /** @deprecated use `CancelDeploymentCrons$Outbound` instead. */
    type Outbound = CancelDeploymentCrons$Outbound;
}
export declare function cancelDeploymentCronsToJSON(cancelDeploymentCrons: CancelDeploymentCrons): string;
export declare function cancelDeploymentCronsFromJSON(jsonString: string): SafeParseResult<CancelDeploymentCrons, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentArchitecture$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentArchitecture>;
/** @internal */
export declare const CancelDeploymentArchitecture$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentArchitecture>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentArchitecture$ {
    /** @deprecated use `CancelDeploymentArchitecture$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly X8664: "x86_64";
        readonly Arm64: "arm64";
    }>;
    /** @deprecated use `CancelDeploymentArchitecture$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly X8664: "x86_64";
        readonly Arm64: "arm64";
    }>;
}
/** @internal */
export declare const CancelDeploymentDeploymentsType$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentDeploymentsType>;
/** @internal */
export declare const CancelDeploymentDeploymentsType$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentDeploymentsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentDeploymentsType$ {
    /** @deprecated use `CancelDeploymentDeploymentsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly QueueV1beta: "queue/v1beta";
    }>;
    /** @deprecated use `CancelDeploymentDeploymentsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly QueueV1beta: "queue/v1beta";
    }>;
}
/** @internal */
export declare const CancelDeploymentExperimentalTriggers$inboundSchema: z.ZodType<CancelDeploymentExperimentalTriggers, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentExperimentalTriggers$Outbound = {
    type: string;
    topic: string;
    consumer: string;
    maxDeliveries?: number | undefined;
    retryAfterSeconds?: number | undefined;
    initialDelaySeconds?: number | undefined;
};
/** @internal */
export declare const CancelDeploymentExperimentalTriggers$outboundSchema: z.ZodType<CancelDeploymentExperimentalTriggers$Outbound, z.ZodTypeDef, CancelDeploymentExperimentalTriggers>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentExperimentalTriggers$ {
    /** @deprecated use `CancelDeploymentExperimentalTriggers$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentExperimentalTriggers, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentExperimentalTriggers$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentExperimentalTriggers$Outbound, z.ZodTypeDef, CancelDeploymentExperimentalTriggers>;
    /** @deprecated use `CancelDeploymentExperimentalTriggers$Outbound` instead. */
    type Outbound = CancelDeploymentExperimentalTriggers$Outbound;
}
export declare function cancelDeploymentExperimentalTriggersToJSON(cancelDeploymentExperimentalTriggers: CancelDeploymentExperimentalTriggers): string;
export declare function cancelDeploymentExperimentalTriggersFromJSON(jsonString: string): SafeParseResult<CancelDeploymentExperimentalTriggers, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentFunctions$inboundSchema: z.ZodType<CancelDeploymentFunctions, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentFunctions$Outbound = {
    architecture?: string | undefined;
    memory?: number | undefined;
    maxDuration?: number | undefined;
    runtime?: string | undefined;
    includeFiles?: string | undefined;
    excludeFiles?: string | undefined;
    experimentalTriggers?: Array<CancelDeploymentExperimentalTriggers$Outbound> | undefined;
    supportsCancellation?: boolean | undefined;
};
/** @internal */
export declare const CancelDeploymentFunctions$outboundSchema: z.ZodType<CancelDeploymentFunctions$Outbound, z.ZodTypeDef, CancelDeploymentFunctions>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentFunctions$ {
    /** @deprecated use `CancelDeploymentFunctions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentFunctions, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentFunctions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentFunctions$Outbound, z.ZodTypeDef, CancelDeploymentFunctions>;
    /** @deprecated use `CancelDeploymentFunctions$Outbound` instead. */
    type Outbound = CancelDeploymentFunctions$Outbound;
}
export declare function cancelDeploymentFunctionsToJSON(cancelDeploymentFunctions: CancelDeploymentFunctions): string;
export declare function cancelDeploymentFunctionsFromJSON(jsonString: string): SafeParseResult<CancelDeploymentFunctions, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentPlan$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentPlan>;
/** @internal */
export declare const CancelDeploymentPlan$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentPlan>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentPlan$ {
    /** @deprecated use `CancelDeploymentPlan$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Pro: "pro";
        readonly Enterprise: "enterprise";
        readonly Hobby: "hobby";
    }>;
    /** @deprecated use `CancelDeploymentPlan$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Pro: "pro";
        readonly Enterprise: "enterprise";
        readonly Hobby: "hobby";
    }>;
}
/** @internal */
export declare const CancelDeploymentRoutes3$inboundSchema: z.ZodType<CancelDeploymentRoutes3, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentRoutes3$Outbound = {
    src: string;
    continue: boolean;
    middleware: number;
};
/** @internal */
export declare const CancelDeploymentRoutes3$outboundSchema: z.ZodType<CancelDeploymentRoutes3$Outbound, z.ZodTypeDef, CancelDeploymentRoutes3>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentRoutes3$ {
    /** @deprecated use `CancelDeploymentRoutes3$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentRoutes3, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentRoutes3$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentRoutes3$Outbound, z.ZodTypeDef, CancelDeploymentRoutes3>;
    /** @deprecated use `CancelDeploymentRoutes3$Outbound` instead. */
    type Outbound = CancelDeploymentRoutes3$Outbound;
}
export declare function cancelDeploymentRoutes3ToJSON(cancelDeploymentRoutes3: CancelDeploymentRoutes3): string;
export declare function cancelDeploymentRoutes3FromJSON(jsonString: string): SafeParseResult<CancelDeploymentRoutes3, SDKValidationError>;
/** @internal */
export declare const RoutesHandle$inboundSchema: z.ZodNativeEnum<typeof RoutesHandle>;
/** @internal */
export declare const RoutesHandle$outboundSchema: z.ZodNativeEnum<typeof RoutesHandle>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RoutesHandle$ {
    /** @deprecated use `RoutesHandle$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Error: "error";
        readonly Filesystem: "filesystem";
        readonly Hit: "hit";
        readonly Miss: "miss";
        readonly Rewrite: "rewrite";
        readonly Resource: "resource";
    }>;
    /** @deprecated use `RoutesHandle$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Error: "error";
        readonly Filesystem: "filesystem";
        readonly Hit: "hit";
        readonly Miss: "miss";
        readonly Rewrite: "rewrite";
        readonly Resource: "resource";
    }>;
}
/** @internal */
export declare const CancelDeploymentRoutes2$inboundSchema: z.ZodType<CancelDeploymentRoutes2, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentRoutes2$Outbound = {
    handle: string;
    src?: string | undefined;
    dest?: string | undefined;
    status?: number | undefined;
};
/** @internal */
export declare const CancelDeploymentRoutes2$outboundSchema: z.ZodType<CancelDeploymentRoutes2$Outbound, z.ZodTypeDef, CancelDeploymentRoutes2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentRoutes2$ {
    /** @deprecated use `CancelDeploymentRoutes2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentRoutes2, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentRoutes2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentRoutes2$Outbound, z.ZodTypeDef, CancelDeploymentRoutes2>;
    /** @deprecated use `CancelDeploymentRoutes2$Outbound` instead. */
    type Outbound = CancelDeploymentRoutes2$Outbound;
}
export declare function cancelDeploymentRoutes2ToJSON(cancelDeploymentRoutes2: CancelDeploymentRoutes2): string;
export declare function cancelDeploymentRoutes2FromJSON(jsonString: string): SafeParseResult<CancelDeploymentRoutes2, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentHasDeploymentsType$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentHasDeploymentsType>;
/** @internal */
export declare const CancelDeploymentHasDeploymentsType$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentHasDeploymentsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentHasDeploymentsType$ {
    /** @deprecated use `CancelDeploymentHasDeploymentsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Header: "header";
        readonly Cookie: "cookie";
        readonly Query: "query";
    }>;
    /** @deprecated use `CancelDeploymentHasDeploymentsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Header: "header";
        readonly Cookie: "cookie";
        readonly Query: "query";
    }>;
}
/** @internal */
export declare const CancelDeploymentValueDeploymentsEq$inboundSchema: z.ZodType<CancelDeploymentValueDeploymentsEq, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentValueDeploymentsEq$Outbound = string | number;
/** @internal */
export declare const CancelDeploymentValueDeploymentsEq$outboundSchema: z.ZodType<CancelDeploymentValueDeploymentsEq$Outbound, z.ZodTypeDef, CancelDeploymentValueDeploymentsEq>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentValueDeploymentsEq$ {
    /** @deprecated use `CancelDeploymentValueDeploymentsEq$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentValueDeploymentsEq, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentValueDeploymentsEq$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentValueDeploymentsEq$Outbound, z.ZodTypeDef, CancelDeploymentValueDeploymentsEq>;
    /** @deprecated use `CancelDeploymentValueDeploymentsEq$Outbound` instead. */
    type Outbound = CancelDeploymentValueDeploymentsEq$Outbound;
}
export declare function cancelDeploymentValueDeploymentsEqToJSON(cancelDeploymentValueDeploymentsEq: CancelDeploymentValueDeploymentsEq): string;
export declare function cancelDeploymentValueDeploymentsEqFromJSON(jsonString: string): SafeParseResult<CancelDeploymentValueDeploymentsEq, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentValueDeployments2$inboundSchema: z.ZodType<CancelDeploymentValueDeployments2, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentValueDeployments2$Outbound = {
    eq?: string | number | undefined;
    neq?: string | undefined;
    inc?: Array<string> | undefined;
    ninc?: Array<string> | undefined;
    pre?: string | undefined;
    suf?: string | undefined;
    re?: string | undefined;
    gt?: number | undefined;
    gte?: number | undefined;
    lt?: number | undefined;
    lte?: number | undefined;
};
/** @internal */
export declare const CancelDeploymentValueDeployments2$outboundSchema: z.ZodType<CancelDeploymentValueDeployments2$Outbound, z.ZodTypeDef, CancelDeploymentValueDeployments2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentValueDeployments2$ {
    /** @deprecated use `CancelDeploymentValueDeployments2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentValueDeployments2, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentValueDeployments2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentValueDeployments2$Outbound, z.ZodTypeDef, CancelDeploymentValueDeployments2>;
    /** @deprecated use `CancelDeploymentValueDeployments2$Outbound` instead. */
    type Outbound = CancelDeploymentValueDeployments2$Outbound;
}
export declare function cancelDeploymentValueDeployments2ToJSON(cancelDeploymentValueDeployments2: CancelDeploymentValueDeployments2): string;
export declare function cancelDeploymentValueDeployments2FromJSON(jsonString: string): SafeParseResult<CancelDeploymentValueDeployments2, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentHasDeploymentsValue$inboundSchema: z.ZodType<CancelDeploymentHasDeploymentsValue, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentHasDeploymentsValue$Outbound = CancelDeploymentValueDeployments2$Outbound | string;
/** @internal */
export declare const CancelDeploymentHasDeploymentsValue$outboundSchema: z.ZodType<CancelDeploymentHasDeploymentsValue$Outbound, z.ZodTypeDef, CancelDeploymentHasDeploymentsValue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentHasDeploymentsValue$ {
    /** @deprecated use `CancelDeploymentHasDeploymentsValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentHasDeploymentsValue, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentHasDeploymentsValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentHasDeploymentsValue$Outbound, z.ZodTypeDef, CancelDeploymentHasDeploymentsValue>;
    /** @deprecated use `CancelDeploymentHasDeploymentsValue$Outbound` instead. */
    type Outbound = CancelDeploymentHasDeploymentsValue$Outbound;
}
export declare function cancelDeploymentHasDeploymentsValueToJSON(cancelDeploymentHasDeploymentsValue: CancelDeploymentHasDeploymentsValue): string;
export declare function cancelDeploymentHasDeploymentsValueFromJSON(jsonString: string): SafeParseResult<CancelDeploymentHasDeploymentsValue, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentHas2$inboundSchema: z.ZodType<CancelDeploymentHas2, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentHas2$Outbound = {
    type: string;
    key: string;
    value?: CancelDeploymentValueDeployments2$Outbound | string | undefined;
};
/** @internal */
export declare const CancelDeploymentHas2$outboundSchema: z.ZodType<CancelDeploymentHas2$Outbound, z.ZodTypeDef, CancelDeploymentHas2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentHas2$ {
    /** @deprecated use `CancelDeploymentHas2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentHas2, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentHas2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentHas2$Outbound, z.ZodTypeDef, CancelDeploymentHas2>;
    /** @deprecated use `CancelDeploymentHas2$Outbound` instead. */
    type Outbound = CancelDeploymentHas2$Outbound;
}
export declare function cancelDeploymentHas2ToJSON(cancelDeploymentHas2: CancelDeploymentHas2): string;
export declare function cancelDeploymentHas2FromJSON(jsonString: string): SafeParseResult<CancelDeploymentHas2, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentHasType$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentHasType>;
/** @internal */
export declare const CancelDeploymentHasType$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentHasType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentHasType$ {
    /** @deprecated use `CancelDeploymentHasType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Host: "host";
    }>;
    /** @deprecated use `CancelDeploymentHasType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Host: "host";
    }>;
}
/** @internal */
export declare const CancelDeploymentValueEq$inboundSchema: z.ZodType<CancelDeploymentValueEq, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentValueEq$Outbound = string | number;
/** @internal */
export declare const CancelDeploymentValueEq$outboundSchema: z.ZodType<CancelDeploymentValueEq$Outbound, z.ZodTypeDef, CancelDeploymentValueEq>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentValueEq$ {
    /** @deprecated use `CancelDeploymentValueEq$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentValueEq, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentValueEq$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentValueEq$Outbound, z.ZodTypeDef, CancelDeploymentValueEq>;
    /** @deprecated use `CancelDeploymentValueEq$Outbound` instead. */
    type Outbound = CancelDeploymentValueEq$Outbound;
}
export declare function cancelDeploymentValueEqToJSON(cancelDeploymentValueEq: CancelDeploymentValueEq): string;
export declare function cancelDeploymentValueEqFromJSON(jsonString: string): SafeParseResult<CancelDeploymentValueEq, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentValue2$inboundSchema: z.ZodType<CancelDeploymentValue2, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentValue2$Outbound = {
    eq?: string | number | undefined;
    neq?: string | undefined;
    inc?: Array<string> | undefined;
    ninc?: Array<string> | undefined;
    pre?: string | undefined;
    suf?: string | undefined;
    re?: string | undefined;
    gt?: number | undefined;
    gte?: number | undefined;
    lt?: number | undefined;
    lte?: number | undefined;
};
/** @internal */
export declare const CancelDeploymentValue2$outboundSchema: z.ZodType<CancelDeploymentValue2$Outbound, z.ZodTypeDef, CancelDeploymentValue2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentValue2$ {
    /** @deprecated use `CancelDeploymentValue2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentValue2, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentValue2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentValue2$Outbound, z.ZodTypeDef, CancelDeploymentValue2>;
    /** @deprecated use `CancelDeploymentValue2$Outbound` instead. */
    type Outbound = CancelDeploymentValue2$Outbound;
}
export declare function cancelDeploymentValue2ToJSON(cancelDeploymentValue2: CancelDeploymentValue2): string;
export declare function cancelDeploymentValue2FromJSON(jsonString: string): SafeParseResult<CancelDeploymentValue2, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentHasValue$inboundSchema: z.ZodType<CancelDeploymentHasValue, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentHasValue$Outbound = CancelDeploymentValue2$Outbound | string;
/** @internal */
export declare const CancelDeploymentHasValue$outboundSchema: z.ZodType<CancelDeploymentHasValue$Outbound, z.ZodTypeDef, CancelDeploymentHasValue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentHasValue$ {
    /** @deprecated use `CancelDeploymentHasValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentHasValue, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentHasValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentHasValue$Outbound, z.ZodTypeDef, CancelDeploymentHasValue>;
    /** @deprecated use `CancelDeploymentHasValue$Outbound` instead. */
    type Outbound = CancelDeploymentHasValue$Outbound;
}
export declare function cancelDeploymentHasValueToJSON(cancelDeploymentHasValue: CancelDeploymentHasValue): string;
export declare function cancelDeploymentHasValueFromJSON(jsonString: string): SafeParseResult<CancelDeploymentHasValue, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentHas1$inboundSchema: z.ZodType<CancelDeploymentHas1, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentHas1$Outbound = {
    type: string;
    value: CancelDeploymentValue2$Outbound | string;
};
/** @internal */
export declare const CancelDeploymentHas1$outboundSchema: z.ZodType<CancelDeploymentHas1$Outbound, z.ZodTypeDef, CancelDeploymentHas1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentHas1$ {
    /** @deprecated use `CancelDeploymentHas1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentHas1, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentHas1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentHas1$Outbound, z.ZodTypeDef, CancelDeploymentHas1>;
    /** @deprecated use `CancelDeploymentHas1$Outbound` instead. */
    type Outbound = CancelDeploymentHas1$Outbound;
}
export declare function cancelDeploymentHas1ToJSON(cancelDeploymentHas1: CancelDeploymentHas1): string;
export declare function cancelDeploymentHas1FromJSON(jsonString: string): SafeParseResult<CancelDeploymentHas1, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentRoutesHas$inboundSchema: z.ZodType<CancelDeploymentRoutesHas, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentRoutesHas$Outbound = CancelDeploymentHas1$Outbound | CancelDeploymentHas2$Outbound;
/** @internal */
export declare const CancelDeploymentRoutesHas$outboundSchema: z.ZodType<CancelDeploymentRoutesHas$Outbound, z.ZodTypeDef, CancelDeploymentRoutesHas>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentRoutesHas$ {
    /** @deprecated use `CancelDeploymentRoutesHas$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentRoutesHas, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentRoutesHas$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentRoutesHas$Outbound, z.ZodTypeDef, CancelDeploymentRoutesHas>;
    /** @deprecated use `CancelDeploymentRoutesHas$Outbound` instead. */
    type Outbound = CancelDeploymentRoutesHas$Outbound;
}
export declare function cancelDeploymentRoutesHasToJSON(cancelDeploymentRoutesHas: CancelDeploymentRoutesHas): string;
export declare function cancelDeploymentRoutesHasFromJSON(jsonString: string): SafeParseResult<CancelDeploymentRoutesHas, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentMissingDeploymentsType$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentMissingDeploymentsType>;
/** @internal */
export declare const CancelDeploymentMissingDeploymentsType$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentMissingDeploymentsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentMissingDeploymentsType$ {
    /** @deprecated use `CancelDeploymentMissingDeploymentsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Header: "header";
        readonly Cookie: "cookie";
        readonly Query: "query";
    }>;
    /** @deprecated use `CancelDeploymentMissingDeploymentsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Header: "header";
        readonly Cookie: "cookie";
        readonly Query: "query";
    }>;
}
/** @internal */
export declare const CancelDeploymentValueDeploymentsResponse200Eq$inboundSchema: z.ZodType<CancelDeploymentValueDeploymentsResponse200Eq, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentValueDeploymentsResponse200Eq$Outbound = string | number;
/** @internal */
export declare const CancelDeploymentValueDeploymentsResponse200Eq$outboundSchema: z.ZodType<CancelDeploymentValueDeploymentsResponse200Eq$Outbound, z.ZodTypeDef, CancelDeploymentValueDeploymentsResponse200Eq>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentValueDeploymentsResponse200Eq$ {
    /** @deprecated use `CancelDeploymentValueDeploymentsResponse200Eq$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentValueDeploymentsResponse200Eq, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentValueDeploymentsResponse200Eq$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentValueDeploymentsResponse200Eq$Outbound, z.ZodTypeDef, CancelDeploymentValueDeploymentsResponse200Eq>;
    /** @deprecated use `CancelDeploymentValueDeploymentsResponse200Eq$Outbound` instead. */
    type Outbound = CancelDeploymentValueDeploymentsResponse200Eq$Outbound;
}
export declare function cancelDeploymentValueDeploymentsResponse200EqToJSON(cancelDeploymentValueDeploymentsResponse200Eq: CancelDeploymentValueDeploymentsResponse200Eq): string;
export declare function cancelDeploymentValueDeploymentsResponse200EqFromJSON(jsonString: string): SafeParseResult<CancelDeploymentValueDeploymentsResponse200Eq, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentValueDeploymentsResponse2002$inboundSchema: z.ZodType<CancelDeploymentValueDeploymentsResponse2002, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentValueDeploymentsResponse2002$Outbound = {
    eq?: string | number | undefined;
    neq?: string | undefined;
    inc?: Array<string> | undefined;
    ninc?: Array<string> | undefined;
    pre?: string | undefined;
    suf?: string | undefined;
    re?: string | undefined;
    gt?: number | undefined;
    gte?: number | undefined;
    lt?: number | undefined;
    lte?: number | undefined;
};
/** @internal */
export declare const CancelDeploymentValueDeploymentsResponse2002$outboundSchema: z.ZodType<CancelDeploymentValueDeploymentsResponse2002$Outbound, z.ZodTypeDef, CancelDeploymentValueDeploymentsResponse2002>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentValueDeploymentsResponse2002$ {
    /** @deprecated use `CancelDeploymentValueDeploymentsResponse2002$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentValueDeploymentsResponse2002, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentValueDeploymentsResponse2002$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentValueDeploymentsResponse2002$Outbound, z.ZodTypeDef, CancelDeploymentValueDeploymentsResponse2002>;
    /** @deprecated use `CancelDeploymentValueDeploymentsResponse2002$Outbound` instead. */
    type Outbound = CancelDeploymentValueDeploymentsResponse2002$Outbound;
}
export declare function cancelDeploymentValueDeploymentsResponse2002ToJSON(cancelDeploymentValueDeploymentsResponse2002: CancelDeploymentValueDeploymentsResponse2002): string;
export declare function cancelDeploymentValueDeploymentsResponse2002FromJSON(jsonString: string): SafeParseResult<CancelDeploymentValueDeploymentsResponse2002, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentMissingDeploymentsValue$inboundSchema: z.ZodType<CancelDeploymentMissingDeploymentsValue, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentMissingDeploymentsValue$Outbound = CancelDeploymentValueDeploymentsResponse2002$Outbound | string;
/** @internal */
export declare const CancelDeploymentMissingDeploymentsValue$outboundSchema: z.ZodType<CancelDeploymentMissingDeploymentsValue$Outbound, z.ZodTypeDef, CancelDeploymentMissingDeploymentsValue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentMissingDeploymentsValue$ {
    /** @deprecated use `CancelDeploymentMissingDeploymentsValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentMissingDeploymentsValue, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentMissingDeploymentsValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentMissingDeploymentsValue$Outbound, z.ZodTypeDef, CancelDeploymentMissingDeploymentsValue>;
    /** @deprecated use `CancelDeploymentMissingDeploymentsValue$Outbound` instead. */
    type Outbound = CancelDeploymentMissingDeploymentsValue$Outbound;
}
export declare function cancelDeploymentMissingDeploymentsValueToJSON(cancelDeploymentMissingDeploymentsValue: CancelDeploymentMissingDeploymentsValue): string;
export declare function cancelDeploymentMissingDeploymentsValueFromJSON(jsonString: string): SafeParseResult<CancelDeploymentMissingDeploymentsValue, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentMissing2$inboundSchema: z.ZodType<CancelDeploymentMissing2, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentMissing2$Outbound = {
    type: string;
    key: string;
    value?: CancelDeploymentValueDeploymentsResponse2002$Outbound | string | undefined;
};
/** @internal */
export declare const CancelDeploymentMissing2$outboundSchema: z.ZodType<CancelDeploymentMissing2$Outbound, z.ZodTypeDef, CancelDeploymentMissing2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentMissing2$ {
    /** @deprecated use `CancelDeploymentMissing2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentMissing2, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentMissing2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentMissing2$Outbound, z.ZodTypeDef, CancelDeploymentMissing2>;
    /** @deprecated use `CancelDeploymentMissing2$Outbound` instead. */
    type Outbound = CancelDeploymentMissing2$Outbound;
}
export declare function cancelDeploymentMissing2ToJSON(cancelDeploymentMissing2: CancelDeploymentMissing2): string;
export declare function cancelDeploymentMissing2FromJSON(jsonString: string): SafeParseResult<CancelDeploymentMissing2, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentMissingType$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentMissingType>;
/** @internal */
export declare const CancelDeploymentMissingType$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentMissingType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentMissingType$ {
    /** @deprecated use `CancelDeploymentMissingType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Host: "host";
    }>;
    /** @deprecated use `CancelDeploymentMissingType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Host: "host";
    }>;
}
/** @internal */
export declare const CancelDeploymentValueDeploymentsResponseEq$inboundSchema: z.ZodType<CancelDeploymentValueDeploymentsResponseEq, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentValueDeploymentsResponseEq$Outbound = string | number;
/** @internal */
export declare const CancelDeploymentValueDeploymentsResponseEq$outboundSchema: z.ZodType<CancelDeploymentValueDeploymentsResponseEq$Outbound, z.ZodTypeDef, CancelDeploymentValueDeploymentsResponseEq>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentValueDeploymentsResponseEq$ {
    /** @deprecated use `CancelDeploymentValueDeploymentsResponseEq$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentValueDeploymentsResponseEq, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentValueDeploymentsResponseEq$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentValueDeploymentsResponseEq$Outbound, z.ZodTypeDef, CancelDeploymentValueDeploymentsResponseEq>;
    /** @deprecated use `CancelDeploymentValueDeploymentsResponseEq$Outbound` instead. */
    type Outbound = CancelDeploymentValueDeploymentsResponseEq$Outbound;
}
export declare function cancelDeploymentValueDeploymentsResponseEqToJSON(cancelDeploymentValueDeploymentsResponseEq: CancelDeploymentValueDeploymentsResponseEq): string;
export declare function cancelDeploymentValueDeploymentsResponseEqFromJSON(jsonString: string): SafeParseResult<CancelDeploymentValueDeploymentsResponseEq, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentValueDeploymentsResponse2$inboundSchema: z.ZodType<CancelDeploymentValueDeploymentsResponse2, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentValueDeploymentsResponse2$Outbound = {
    eq?: string | number | undefined;
    neq?: string | undefined;
    inc?: Array<string> | undefined;
    ninc?: Array<string> | undefined;
    pre?: string | undefined;
    suf?: string | undefined;
    re?: string | undefined;
    gt?: number | undefined;
    gte?: number | undefined;
    lt?: number | undefined;
    lte?: number | undefined;
};
/** @internal */
export declare const CancelDeploymentValueDeploymentsResponse2$outboundSchema: z.ZodType<CancelDeploymentValueDeploymentsResponse2$Outbound, z.ZodTypeDef, CancelDeploymentValueDeploymentsResponse2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentValueDeploymentsResponse2$ {
    /** @deprecated use `CancelDeploymentValueDeploymentsResponse2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentValueDeploymentsResponse2, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentValueDeploymentsResponse2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentValueDeploymentsResponse2$Outbound, z.ZodTypeDef, CancelDeploymentValueDeploymentsResponse2>;
    /** @deprecated use `CancelDeploymentValueDeploymentsResponse2$Outbound` instead. */
    type Outbound = CancelDeploymentValueDeploymentsResponse2$Outbound;
}
export declare function cancelDeploymentValueDeploymentsResponse2ToJSON(cancelDeploymentValueDeploymentsResponse2: CancelDeploymentValueDeploymentsResponse2): string;
export declare function cancelDeploymentValueDeploymentsResponse2FromJSON(jsonString: string): SafeParseResult<CancelDeploymentValueDeploymentsResponse2, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentMissingValue$inboundSchema: z.ZodType<CancelDeploymentMissingValue, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentMissingValue$Outbound = CancelDeploymentValueDeploymentsResponse2$Outbound | string;
/** @internal */
export declare const CancelDeploymentMissingValue$outboundSchema: z.ZodType<CancelDeploymentMissingValue$Outbound, z.ZodTypeDef, CancelDeploymentMissingValue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentMissingValue$ {
    /** @deprecated use `CancelDeploymentMissingValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentMissingValue, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentMissingValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentMissingValue$Outbound, z.ZodTypeDef, CancelDeploymentMissingValue>;
    /** @deprecated use `CancelDeploymentMissingValue$Outbound` instead. */
    type Outbound = CancelDeploymentMissingValue$Outbound;
}
export declare function cancelDeploymentMissingValueToJSON(cancelDeploymentMissingValue: CancelDeploymentMissingValue): string;
export declare function cancelDeploymentMissingValueFromJSON(jsonString: string): SafeParseResult<CancelDeploymentMissingValue, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentMissing1$inboundSchema: z.ZodType<CancelDeploymentMissing1, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentMissing1$Outbound = {
    type: string;
    value: CancelDeploymentValueDeploymentsResponse2$Outbound | string;
};
/** @internal */
export declare const CancelDeploymentMissing1$outboundSchema: z.ZodType<CancelDeploymentMissing1$Outbound, z.ZodTypeDef, CancelDeploymentMissing1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentMissing1$ {
    /** @deprecated use `CancelDeploymentMissing1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentMissing1, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentMissing1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentMissing1$Outbound, z.ZodTypeDef, CancelDeploymentMissing1>;
    /** @deprecated use `CancelDeploymentMissing1$Outbound` instead. */
    type Outbound = CancelDeploymentMissing1$Outbound;
}
export declare function cancelDeploymentMissing1ToJSON(cancelDeploymentMissing1: CancelDeploymentMissing1): string;
export declare function cancelDeploymentMissing1FromJSON(jsonString: string): SafeParseResult<CancelDeploymentMissing1, SDKValidationError>;
/** @internal */
export declare const RoutesMissing$inboundSchema: z.ZodType<RoutesMissing, z.ZodTypeDef, unknown>;
/** @internal */
export type RoutesMissing$Outbound = CancelDeploymentMissing1$Outbound | CancelDeploymentMissing2$Outbound;
/** @internal */
export declare const RoutesMissing$outboundSchema: z.ZodType<RoutesMissing$Outbound, z.ZodTypeDef, RoutesMissing>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RoutesMissing$ {
    /** @deprecated use `RoutesMissing$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RoutesMissing, z.ZodTypeDef, unknown>;
    /** @deprecated use `RoutesMissing$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RoutesMissing$Outbound, z.ZodTypeDef, RoutesMissing>;
    /** @deprecated use `RoutesMissing$Outbound` instead. */
    type Outbound = RoutesMissing$Outbound;
}
export declare function routesMissingToJSON(routesMissing: RoutesMissing): string;
export declare function routesMissingFromJSON(jsonString: string): SafeParseResult<RoutesMissing, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentRoutesAction$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentRoutesAction>;
/** @internal */
export declare const CancelDeploymentRoutesAction$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentRoutesAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentRoutesAction$ {
    /** @deprecated use `CancelDeploymentRoutesAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Challenge: "challenge";
        readonly Deny: "deny";
    }>;
    /** @deprecated use `CancelDeploymentRoutesAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Challenge: "challenge";
        readonly Deny: "deny";
    }>;
}
/** @internal */
export declare const CancelDeploymentRoutesMitigate$inboundSchema: z.ZodType<CancelDeploymentRoutesMitigate, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentRoutesMitigate$Outbound = {
    action: string;
};
/** @internal */
export declare const CancelDeploymentRoutesMitigate$outboundSchema: z.ZodType<CancelDeploymentRoutesMitigate$Outbound, z.ZodTypeDef, CancelDeploymentRoutesMitigate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentRoutesMitigate$ {
    /** @deprecated use `CancelDeploymentRoutesMitigate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentRoutesMitigate, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentRoutesMitigate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentRoutesMitigate$Outbound, z.ZodTypeDef, CancelDeploymentRoutesMitigate>;
    /** @deprecated use `CancelDeploymentRoutesMitigate$Outbound` instead. */
    type Outbound = CancelDeploymentRoutesMitigate$Outbound;
}
export declare function cancelDeploymentRoutesMitigateToJSON(cancelDeploymentRoutesMitigate: CancelDeploymentRoutesMitigate): string;
export declare function cancelDeploymentRoutesMitigateFromJSON(jsonString: string): SafeParseResult<CancelDeploymentRoutesMitigate, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentRoutesType$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentRoutesType>;
/** @internal */
export declare const CancelDeploymentRoutesType$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentRoutesType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentRoutesType$ {
    /** @deprecated use `CancelDeploymentRoutesType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly RequestHeaders: "request.headers";
        readonly RequestQuery: "request.query";
        readonly ResponseHeaders: "response.headers";
    }>;
    /** @deprecated use `CancelDeploymentRoutesType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly RequestHeaders: "request.headers";
        readonly RequestQuery: "request.query";
        readonly ResponseHeaders: "response.headers";
    }>;
}
/** @internal */
export declare const RoutesOp$inboundSchema: z.ZodNativeEnum<typeof RoutesOp>;
/** @internal */
export declare const RoutesOp$outboundSchema: z.ZodNativeEnum<typeof RoutesOp>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RoutesOp$ {
    /** @deprecated use `RoutesOp$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Append: "append";
        readonly Set: "set";
        readonly Delete: "delete";
    }>;
    /** @deprecated use `RoutesOp$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Append: "append";
        readonly Set: "set";
        readonly Delete: "delete";
    }>;
}
/** @internal */
export declare const CancelDeploymentKeyEq$inboundSchema: z.ZodType<CancelDeploymentKeyEq, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentKeyEq$Outbound = string | number;
/** @internal */
export declare const CancelDeploymentKeyEq$outboundSchema: z.ZodType<CancelDeploymentKeyEq$Outbound, z.ZodTypeDef, CancelDeploymentKeyEq>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentKeyEq$ {
    /** @deprecated use `CancelDeploymentKeyEq$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentKeyEq, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentKeyEq$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentKeyEq$Outbound, z.ZodTypeDef, CancelDeploymentKeyEq>;
    /** @deprecated use `CancelDeploymentKeyEq$Outbound` instead. */
    type Outbound = CancelDeploymentKeyEq$Outbound;
}
export declare function cancelDeploymentKeyEqToJSON(cancelDeploymentKeyEq: CancelDeploymentKeyEq): string;
export declare function cancelDeploymentKeyEqFromJSON(jsonString: string): SafeParseResult<CancelDeploymentKeyEq, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentKey2$inboundSchema: z.ZodType<CancelDeploymentKey2, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentKey2$Outbound = {
    eq?: string | number | undefined;
    neq?: string | undefined;
    inc?: Array<string> | undefined;
    ninc?: Array<string> | undefined;
    pre?: string | undefined;
    suf?: string | undefined;
    gt?: number | undefined;
    gte?: number | undefined;
    lt?: number | undefined;
    lte?: number | undefined;
};
/** @internal */
export declare const CancelDeploymentKey2$outboundSchema: z.ZodType<CancelDeploymentKey2$Outbound, z.ZodTypeDef, CancelDeploymentKey2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentKey2$ {
    /** @deprecated use `CancelDeploymentKey2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentKey2, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentKey2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentKey2$Outbound, z.ZodTypeDef, CancelDeploymentKey2>;
    /** @deprecated use `CancelDeploymentKey2$Outbound` instead. */
    type Outbound = CancelDeploymentKey2$Outbound;
}
export declare function cancelDeploymentKey2ToJSON(cancelDeploymentKey2: CancelDeploymentKey2): string;
export declare function cancelDeploymentKey2FromJSON(jsonString: string): SafeParseResult<CancelDeploymentKey2, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentRoutesKey$inboundSchema: z.ZodType<CancelDeploymentRoutesKey, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentRoutesKey$Outbound = CancelDeploymentKey2$Outbound | string;
/** @internal */
export declare const CancelDeploymentRoutesKey$outboundSchema: z.ZodType<CancelDeploymentRoutesKey$Outbound, z.ZodTypeDef, CancelDeploymentRoutesKey>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentRoutesKey$ {
    /** @deprecated use `CancelDeploymentRoutesKey$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentRoutesKey, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentRoutesKey$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentRoutesKey$Outbound, z.ZodTypeDef, CancelDeploymentRoutesKey>;
    /** @deprecated use `CancelDeploymentRoutesKey$Outbound` instead. */
    type Outbound = CancelDeploymentRoutesKey$Outbound;
}
export declare function cancelDeploymentRoutesKeyToJSON(cancelDeploymentRoutesKey: CancelDeploymentRoutesKey): string;
export declare function cancelDeploymentRoutesKeyFromJSON(jsonString: string): SafeParseResult<CancelDeploymentRoutesKey, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentRoutesTarget$inboundSchema: z.ZodType<CancelDeploymentRoutesTarget, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentRoutesTarget$Outbound = {
    key: CancelDeploymentKey2$Outbound | string;
};
/** @internal */
export declare const CancelDeploymentRoutesTarget$outboundSchema: z.ZodType<CancelDeploymentRoutesTarget$Outbound, z.ZodTypeDef, CancelDeploymentRoutesTarget>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentRoutesTarget$ {
    /** @deprecated use `CancelDeploymentRoutesTarget$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentRoutesTarget, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentRoutesTarget$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentRoutesTarget$Outbound, z.ZodTypeDef, CancelDeploymentRoutesTarget>;
    /** @deprecated use `CancelDeploymentRoutesTarget$Outbound` instead. */
    type Outbound = CancelDeploymentRoutesTarget$Outbound;
}
export declare function cancelDeploymentRoutesTargetToJSON(cancelDeploymentRoutesTarget: CancelDeploymentRoutesTarget): string;
export declare function cancelDeploymentRoutesTargetFromJSON(jsonString: string): SafeParseResult<CancelDeploymentRoutesTarget, SDKValidationError>;
/** @internal */
export declare const RoutesArgs$inboundSchema: z.ZodType<RoutesArgs, z.ZodTypeDef, unknown>;
/** @internal */
export type RoutesArgs$Outbound = string | Array<string>;
/** @internal */
export declare const RoutesArgs$outboundSchema: z.ZodType<RoutesArgs$Outbound, z.ZodTypeDef, RoutesArgs>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RoutesArgs$ {
    /** @deprecated use `RoutesArgs$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RoutesArgs, z.ZodTypeDef, unknown>;
    /** @deprecated use `RoutesArgs$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RoutesArgs$Outbound, z.ZodTypeDef, RoutesArgs>;
    /** @deprecated use `RoutesArgs$Outbound` instead. */
    type Outbound = RoutesArgs$Outbound;
}
export declare function routesArgsToJSON(routesArgs: RoutesArgs): string;
export declare function routesArgsFromJSON(jsonString: string): SafeParseResult<RoutesArgs, SDKValidationError>;
/** @internal */
export declare const RoutesTransforms$inboundSchema: z.ZodType<RoutesTransforms, z.ZodTypeDef, unknown>;
/** @internal */
export type RoutesTransforms$Outbound = {
    type: string;
    op: string;
    target: CancelDeploymentRoutesTarget$Outbound;
    args?: string | Array<string> | undefined;
};
/** @internal */
export declare const RoutesTransforms$outboundSchema: z.ZodType<RoutesTransforms$Outbound, z.ZodTypeDef, RoutesTransforms>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RoutesTransforms$ {
    /** @deprecated use `RoutesTransforms$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RoutesTransforms, z.ZodTypeDef, unknown>;
    /** @deprecated use `RoutesTransforms$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RoutesTransforms$Outbound, z.ZodTypeDef, RoutesTransforms>;
    /** @deprecated use `RoutesTransforms$Outbound` instead. */
    type Outbound = RoutesTransforms$Outbound;
}
export declare function routesTransformsToJSON(routesTransforms: RoutesTransforms): string;
export declare function routesTransformsFromJSON(jsonString: string): SafeParseResult<RoutesTransforms, SDKValidationError>;
/** @internal */
export declare const RoutesLocale$inboundSchema: z.ZodType<RoutesLocale, z.ZodTypeDef, unknown>;
/** @internal */
export type RoutesLocale$Outbound = {
    redirect?: {
        [k: string]: string;
    } | undefined;
    cookie?: string | undefined;
};
/** @internal */
export declare const RoutesLocale$outboundSchema: z.ZodType<RoutesLocale$Outbound, z.ZodTypeDef, RoutesLocale>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RoutesLocale$ {
    /** @deprecated use `RoutesLocale$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RoutesLocale, z.ZodTypeDef, unknown>;
    /** @deprecated use `RoutesLocale$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RoutesLocale$Outbound, z.ZodTypeDef, RoutesLocale>;
    /** @deprecated use `RoutesLocale$Outbound` instead. */
    type Outbound = RoutesLocale$Outbound;
}
export declare function routesLocaleToJSON(routesLocale: RoutesLocale): string;
export declare function routesLocaleFromJSON(jsonString: string): SafeParseResult<RoutesLocale, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentRoutes1$inboundSchema: z.ZodType<CancelDeploymentRoutes1, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentRoutes1$Outbound = {
    src: string;
    dest?: string | undefined;
    headers?: {
        [k: string]: string;
    } | undefined;
    methods?: Array<string> | undefined;
    continue?: boolean | undefined;
    override?: boolean | undefined;
    caseSensitive?: boolean | undefined;
    check?: boolean | undefined;
    important?: boolean | undefined;
    status?: number | undefined;
    has?: Array<CancelDeploymentHas1$Outbound | CancelDeploymentHas2$Outbound> | undefined;
    missing?: Array<CancelDeploymentMissing1$Outbound | CancelDeploymentMissing2$Outbound> | undefined;
    mitigate?: CancelDeploymentRoutesMitigate$Outbound | undefined;
    transforms?: Array<RoutesTransforms$Outbound> | undefined;
    locale?: RoutesLocale$Outbound | undefined;
    middlewarePath?: string | undefined;
    middlewareRawSrc?: Array<string> | undefined;
    middleware?: number | undefined;
};
/** @internal */
export declare const CancelDeploymentRoutes1$outboundSchema: z.ZodType<CancelDeploymentRoutes1$Outbound, z.ZodTypeDef, CancelDeploymentRoutes1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentRoutes1$ {
    /** @deprecated use `CancelDeploymentRoutes1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentRoutes1, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentRoutes1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentRoutes1$Outbound, z.ZodTypeDef, CancelDeploymentRoutes1>;
    /** @deprecated use `CancelDeploymentRoutes1$Outbound` instead. */
    type Outbound = CancelDeploymentRoutes1$Outbound;
}
export declare function cancelDeploymentRoutes1ToJSON(cancelDeploymentRoutes1: CancelDeploymentRoutes1): string;
export declare function cancelDeploymentRoutes1FromJSON(jsonString: string): SafeParseResult<CancelDeploymentRoutes1, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentRoutes$inboundSchema: z.ZodType<CancelDeploymentRoutes, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentRoutes$Outbound = CancelDeploymentRoutes3$Outbound | CancelDeploymentRoutes1$Outbound | CancelDeploymentRoutes2$Outbound;
/** @internal */
export declare const CancelDeploymentRoutes$outboundSchema: z.ZodType<CancelDeploymentRoutes$Outbound, z.ZodTypeDef, CancelDeploymentRoutes>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentRoutes$ {
    /** @deprecated use `CancelDeploymentRoutes$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentRoutes, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentRoutes$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentRoutes$Outbound, z.ZodTypeDef, CancelDeploymentRoutes>;
    /** @deprecated use `CancelDeploymentRoutes$Outbound` instead. */
    type Outbound = CancelDeploymentRoutes$Outbound;
}
export declare function cancelDeploymentRoutesToJSON(cancelDeploymentRoutes: CancelDeploymentRoutes): string;
export declare function cancelDeploymentRoutesFromJSON(jsonString: string): SafeParseResult<CancelDeploymentRoutes, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentGitRepoDeploymentsResponseType$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitRepoDeploymentsResponseType>;
/** @internal */
export declare const CancelDeploymentGitRepoDeploymentsResponseType$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitRepoDeploymentsResponseType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentGitRepoDeploymentsResponseType$ {
    /** @deprecated use `CancelDeploymentGitRepoDeploymentsResponseType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
    /** @deprecated use `CancelDeploymentGitRepoDeploymentsResponseType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
}
/** @internal */
export declare const CancelDeploymentGitRepoDeploymentsResponseOwnerType$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitRepoDeploymentsResponseOwnerType>;
/** @internal */
export declare const CancelDeploymentGitRepoDeploymentsResponseOwnerType$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitRepoDeploymentsResponseOwnerType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentGitRepoDeploymentsResponseOwnerType$ {
    /** @deprecated use `CancelDeploymentGitRepoDeploymentsResponseOwnerType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Team: "team";
        readonly User: "user";
    }>;
    /** @deprecated use `CancelDeploymentGitRepoDeploymentsResponseOwnerType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Team: "team";
        readonly User: "user";
    }>;
}
/** @internal */
export declare const CancelDeploymentGitRepo3$inboundSchema: z.ZodType<CancelDeploymentGitRepo3, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentGitRepo3$Outbound = {
    owner: string;
    repoUuid: string;
    slug: string;
    type: string;
    workspaceUuid: string;
    path: string;
    defaultBranch: string;
    name: string;
    private: boolean;
    ownerType: string;
};
/** @internal */
export declare const CancelDeploymentGitRepo3$outboundSchema: z.ZodType<CancelDeploymentGitRepo3$Outbound, z.ZodTypeDef, CancelDeploymentGitRepo3>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentGitRepo3$ {
    /** @deprecated use `CancelDeploymentGitRepo3$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentGitRepo3, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentGitRepo3$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentGitRepo3$Outbound, z.ZodTypeDef, CancelDeploymentGitRepo3>;
    /** @deprecated use `CancelDeploymentGitRepo3$Outbound` instead. */
    type Outbound = CancelDeploymentGitRepo3$Outbound;
}
export declare function cancelDeploymentGitRepo3ToJSON(cancelDeploymentGitRepo3: CancelDeploymentGitRepo3): string;
export declare function cancelDeploymentGitRepo3FromJSON(jsonString: string): SafeParseResult<CancelDeploymentGitRepo3, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentGitRepoDeploymentsType$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitRepoDeploymentsType>;
/** @internal */
export declare const CancelDeploymentGitRepoDeploymentsType$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitRepoDeploymentsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentGitRepoDeploymentsType$ {
    /** @deprecated use `CancelDeploymentGitRepoDeploymentsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
    /** @deprecated use `CancelDeploymentGitRepoDeploymentsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
}
/** @internal */
export declare const CancelDeploymentGitRepoDeploymentsOwnerType$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitRepoDeploymentsOwnerType>;
/** @internal */
export declare const CancelDeploymentGitRepoDeploymentsOwnerType$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitRepoDeploymentsOwnerType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentGitRepoDeploymentsOwnerType$ {
    /** @deprecated use `CancelDeploymentGitRepoDeploymentsOwnerType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Team: "team";
        readonly User: "user";
    }>;
    /** @deprecated use `CancelDeploymentGitRepoDeploymentsOwnerType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Team: "team";
        readonly User: "user";
    }>;
}
/** @internal */
export declare const CancelDeploymentGitRepo2$inboundSchema: z.ZodType<CancelDeploymentGitRepo2, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentGitRepo2$Outbound = {
    org: string;
    repo: string;
    repoId: number;
    type: string;
    repoOwnerId: number;
    path: string;
    defaultBranch: string;
    name: string;
    private: boolean;
    ownerType: string;
};
/** @internal */
export declare const CancelDeploymentGitRepo2$outboundSchema: z.ZodType<CancelDeploymentGitRepo2$Outbound, z.ZodTypeDef, CancelDeploymentGitRepo2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentGitRepo2$ {
    /** @deprecated use `CancelDeploymentGitRepo2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentGitRepo2, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentGitRepo2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentGitRepo2$Outbound, z.ZodTypeDef, CancelDeploymentGitRepo2>;
    /** @deprecated use `CancelDeploymentGitRepo2$Outbound` instead. */
    type Outbound = CancelDeploymentGitRepo2$Outbound;
}
export declare function cancelDeploymentGitRepo2ToJSON(cancelDeploymentGitRepo2: CancelDeploymentGitRepo2): string;
export declare function cancelDeploymentGitRepo2FromJSON(jsonString: string): SafeParseResult<CancelDeploymentGitRepo2, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentGitRepoType$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitRepoType>;
/** @internal */
export declare const CancelDeploymentGitRepoType$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitRepoType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentGitRepoType$ {
    /** @deprecated use `CancelDeploymentGitRepoType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Gitlab: "gitlab";
    }>;
    /** @deprecated use `CancelDeploymentGitRepoType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Gitlab: "gitlab";
    }>;
}
/** @internal */
export declare const CancelDeploymentGitRepoOwnerType$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitRepoOwnerType>;
/** @internal */
export declare const CancelDeploymentGitRepoOwnerType$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentGitRepoOwnerType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentGitRepoOwnerType$ {
    /** @deprecated use `CancelDeploymentGitRepoOwnerType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Team: "team";
        readonly User: "user";
    }>;
    /** @deprecated use `CancelDeploymentGitRepoOwnerType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Team: "team";
        readonly User: "user";
    }>;
}
/** @internal */
export declare const CancelDeploymentGitRepo1$inboundSchema: z.ZodType<CancelDeploymentGitRepo1, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentGitRepo1$Outbound = {
    namespace: string;
    projectId: number;
    type: string;
    url: string;
    path: string;
    defaultBranch: string;
    name: string;
    private: boolean;
    ownerType: string;
};
/** @internal */
export declare const CancelDeploymentGitRepo1$outboundSchema: z.ZodType<CancelDeploymentGitRepo1$Outbound, z.ZodTypeDef, CancelDeploymentGitRepo1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentGitRepo1$ {
    /** @deprecated use `CancelDeploymentGitRepo1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentGitRepo1, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentGitRepo1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentGitRepo1$Outbound, z.ZodTypeDef, CancelDeploymentGitRepo1>;
    /** @deprecated use `CancelDeploymentGitRepo1$Outbound` instead. */
    type Outbound = CancelDeploymentGitRepo1$Outbound;
}
export declare function cancelDeploymentGitRepo1ToJSON(cancelDeploymentGitRepo1: CancelDeploymentGitRepo1): string;
export declare function cancelDeploymentGitRepo1FromJSON(jsonString: string): SafeParseResult<CancelDeploymentGitRepo1, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentGitRepo$inboundSchema: z.ZodType<CancelDeploymentGitRepo, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentGitRepo$Outbound = CancelDeploymentGitRepo2$Outbound | CancelDeploymentGitRepo3$Outbound | CancelDeploymentGitRepo1$Outbound;
/** @internal */
export declare const CancelDeploymentGitRepo$outboundSchema: z.ZodType<CancelDeploymentGitRepo$Outbound, z.ZodTypeDef, CancelDeploymentGitRepo>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentGitRepo$ {
    /** @deprecated use `CancelDeploymentGitRepo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentGitRepo, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentGitRepo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentGitRepo$Outbound, z.ZodTypeDef, CancelDeploymentGitRepo>;
    /** @deprecated use `CancelDeploymentGitRepo$Outbound` instead. */
    type Outbound = CancelDeploymentGitRepo$Outbound;
}
export declare function cancelDeploymentGitRepoToJSON(cancelDeploymentGitRepo: CancelDeploymentGitRepo): string;
export declare function cancelDeploymentGitRepoFromJSON(jsonString: string): SafeParseResult<CancelDeploymentGitRepo, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentFlags2$inboundSchema: z.ZodType<CancelDeploymentFlags2, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentFlags2$Outbound = {};
/** @internal */
export declare const CancelDeploymentFlags2$outboundSchema: z.ZodType<CancelDeploymentFlags2$Outbound, z.ZodTypeDef, CancelDeploymentFlags2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentFlags2$ {
    /** @deprecated use `CancelDeploymentFlags2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentFlags2, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentFlags2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentFlags2$Outbound, z.ZodTypeDef, CancelDeploymentFlags2>;
    /** @deprecated use `CancelDeploymentFlags2$Outbound` instead. */
    type Outbound = CancelDeploymentFlags2$Outbound;
}
export declare function cancelDeploymentFlags2ToJSON(cancelDeploymentFlags2: CancelDeploymentFlags2): string;
export declare function cancelDeploymentFlags2FromJSON(jsonString: string): SafeParseResult<CancelDeploymentFlags2, SDKValidationError>;
/** @internal */
export declare const FlagsOptions$inboundSchema: z.ZodType<FlagsOptions, z.ZodTypeDef, unknown>;
/** @internal */
export type FlagsOptions$Outbound = {
    value: FlagJSONValue$Outbound | null;
    label?: string | undefined;
};
/** @internal */
export declare const FlagsOptions$outboundSchema: z.ZodType<FlagsOptions$Outbound, z.ZodTypeDef, FlagsOptions>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FlagsOptions$ {
    /** @deprecated use `FlagsOptions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FlagsOptions, z.ZodTypeDef, unknown>;
    /** @deprecated use `FlagsOptions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FlagsOptions$Outbound, z.ZodTypeDef, FlagsOptions>;
    /** @deprecated use `FlagsOptions$Outbound` instead. */
    type Outbound = FlagsOptions$Outbound;
}
export declare function flagsOptionsToJSON(flagsOptions: FlagsOptions): string;
export declare function flagsOptionsFromJSON(jsonString: string): SafeParseResult<FlagsOptions, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentFlagsDefinitions$inboundSchema: z.ZodType<CancelDeploymentFlagsDefinitions, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentFlagsDefinitions$Outbound = {
    options?: Array<FlagsOptions$Outbound> | undefined;
    url?: string | undefined;
    description?: string | undefined;
};
/** @internal */
export declare const CancelDeploymentFlagsDefinitions$outboundSchema: z.ZodType<CancelDeploymentFlagsDefinitions$Outbound, z.ZodTypeDef, CancelDeploymentFlagsDefinitions>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentFlagsDefinitions$ {
    /** @deprecated use `CancelDeploymentFlagsDefinitions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentFlagsDefinitions, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentFlagsDefinitions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentFlagsDefinitions$Outbound, z.ZodTypeDef, CancelDeploymentFlagsDefinitions>;
    /** @deprecated use `CancelDeploymentFlagsDefinitions$Outbound` instead. */
    type Outbound = CancelDeploymentFlagsDefinitions$Outbound;
}
export declare function cancelDeploymentFlagsDefinitionsToJSON(cancelDeploymentFlagsDefinitions: CancelDeploymentFlagsDefinitions): string;
export declare function cancelDeploymentFlagsDefinitionsFromJSON(jsonString: string): SafeParseResult<CancelDeploymentFlagsDefinitions, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentFlags1$inboundSchema: z.ZodType<CancelDeploymentFlags1, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentFlags1$Outbound = {
    definitions: {
        [k: string]: CancelDeploymentFlagsDefinitions$Outbound;
    };
};
/** @internal */
export declare const CancelDeploymentFlags1$outboundSchema: z.ZodType<CancelDeploymentFlags1$Outbound, z.ZodTypeDef, CancelDeploymentFlags1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentFlags1$ {
    /** @deprecated use `CancelDeploymentFlags1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentFlags1, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentFlags1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentFlags1$Outbound, z.ZodTypeDef, CancelDeploymentFlags1>;
    /** @deprecated use `CancelDeploymentFlags1$Outbound` instead. */
    type Outbound = CancelDeploymentFlags1$Outbound;
}
export declare function cancelDeploymentFlags1ToJSON(cancelDeploymentFlags1: CancelDeploymentFlags1): string;
export declare function cancelDeploymentFlags1FromJSON(jsonString: string): SafeParseResult<CancelDeploymentFlags1, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentFlags$inboundSchema: z.ZodType<CancelDeploymentFlags, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentFlags$Outbound = CancelDeploymentFlags1$Outbound | Array<CancelDeploymentFlags2$Outbound>;
/** @internal */
export declare const CancelDeploymentFlags$outboundSchema: z.ZodType<CancelDeploymentFlags$Outbound, z.ZodTypeDef, CancelDeploymentFlags>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentFlags$ {
    /** @deprecated use `CancelDeploymentFlags$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentFlags, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentFlags$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentFlags$Outbound, z.ZodTypeDef, CancelDeploymentFlags>;
    /** @deprecated use `CancelDeploymentFlags$Outbound` instead. */
    type Outbound = CancelDeploymentFlags$Outbound;
}
export declare function cancelDeploymentFlagsToJSON(cancelDeploymentFlags: CancelDeploymentFlags): string;
export declare function cancelDeploymentFlagsFromJSON(jsonString: string): SafeParseResult<CancelDeploymentFlags, SDKValidationError>;
/** @internal */
export declare const MicrofrontendsApplications$inboundSchema: z.ZodType<MicrofrontendsApplications, z.ZodTypeDef, unknown>;
/** @internal */
export type MicrofrontendsApplications$Outbound = {
    isDefaultApp?: boolean | undefined;
    productionHost: string;
    deploymentAlias?: string | undefined;
    deploymentHost?: string | undefined;
};
/** @internal */
export declare const MicrofrontendsApplications$outboundSchema: z.ZodType<MicrofrontendsApplications$Outbound, z.ZodTypeDef, MicrofrontendsApplications>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MicrofrontendsApplications$ {
    /** @deprecated use `MicrofrontendsApplications$inboundSchema` instead. */
    const inboundSchema: z.ZodType<MicrofrontendsApplications, z.ZodTypeDef, unknown>;
    /** @deprecated use `MicrofrontendsApplications$outboundSchema` instead. */
    const outboundSchema: z.ZodType<MicrofrontendsApplications$Outbound, z.ZodTypeDef, MicrofrontendsApplications>;
    /** @deprecated use `MicrofrontendsApplications$Outbound` instead. */
    type Outbound = MicrofrontendsApplications$Outbound;
}
export declare function microfrontendsApplicationsToJSON(microfrontendsApplications: MicrofrontendsApplications): string;
export declare function microfrontendsApplicationsFromJSON(jsonString: string): SafeParseResult<MicrofrontendsApplications, SDKValidationError>;
/** @internal */
export declare const MicrofrontendsMfeConfigUploadState$inboundSchema: z.ZodNativeEnum<typeof MicrofrontendsMfeConfigUploadState>;
/** @internal */
export declare const MicrofrontendsMfeConfigUploadState$outboundSchema: z.ZodNativeEnum<typeof MicrofrontendsMfeConfigUploadState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MicrofrontendsMfeConfigUploadState$ {
    /** @deprecated use `MicrofrontendsMfeConfigUploadState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Error: "error";
        readonly Success: "success";
        readonly NoConfig: "no_config";
    }>;
    /** @deprecated use `MicrofrontendsMfeConfigUploadState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Error: "error";
        readonly Success: "success";
        readonly NoConfig: "no_config";
    }>;
}
/** @internal */
export declare const CancelDeploymentMicrofrontends2$inboundSchema: z.ZodType<CancelDeploymentMicrofrontends2, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentMicrofrontends2$Outbound = {
    isDefaultApp: boolean;
    applications?: {
        [k: string]: MicrofrontendsApplications$Outbound;
    } | undefined;
    mfeConfigUploadState?: string | undefined;
    defaultAppProjectName: string;
    defaultRoute?: string | undefined;
    groupIds: Array<string>;
    microfrontendsAlias2Enabled?: boolean | undefined;
};
/** @internal */
export declare const CancelDeploymentMicrofrontends2$outboundSchema: z.ZodType<CancelDeploymentMicrofrontends2$Outbound, z.ZodTypeDef, CancelDeploymentMicrofrontends2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentMicrofrontends2$ {
    /** @deprecated use `CancelDeploymentMicrofrontends2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentMicrofrontends2, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentMicrofrontends2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentMicrofrontends2$Outbound, z.ZodTypeDef, CancelDeploymentMicrofrontends2>;
    /** @deprecated use `CancelDeploymentMicrofrontends2$Outbound` instead. */
    type Outbound = CancelDeploymentMicrofrontends2$Outbound;
}
export declare function cancelDeploymentMicrofrontends2ToJSON(cancelDeploymentMicrofrontends2: CancelDeploymentMicrofrontends2): string;
export declare function cancelDeploymentMicrofrontends2FromJSON(jsonString: string): SafeParseResult<CancelDeploymentMicrofrontends2, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentMicrofrontends1$inboundSchema: z.ZodType<CancelDeploymentMicrofrontends1, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentMicrofrontends1$Outbound = {
    isDefaultApp?: boolean | undefined;
    defaultAppProjectName: string;
    defaultRoute?: string | undefined;
    groupIds: Array<string>;
    microfrontendsAlias2Enabled?: boolean | undefined;
};
/** @internal */
export declare const CancelDeploymentMicrofrontends1$outboundSchema: z.ZodType<CancelDeploymentMicrofrontends1$Outbound, z.ZodTypeDef, CancelDeploymentMicrofrontends1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentMicrofrontends1$ {
    /** @deprecated use `CancelDeploymentMicrofrontends1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentMicrofrontends1, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentMicrofrontends1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentMicrofrontends1$Outbound, z.ZodTypeDef, CancelDeploymentMicrofrontends1>;
    /** @deprecated use `CancelDeploymentMicrofrontends1$Outbound` instead. */
    type Outbound = CancelDeploymentMicrofrontends1$Outbound;
}
export declare function cancelDeploymentMicrofrontends1ToJSON(cancelDeploymentMicrofrontends1: CancelDeploymentMicrofrontends1): string;
export declare function cancelDeploymentMicrofrontends1FromJSON(jsonString: string): SafeParseResult<CancelDeploymentMicrofrontends1, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentMicrofrontends$inboundSchema: z.ZodType<CancelDeploymentMicrofrontends, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentMicrofrontends$Outbound = CancelDeploymentMicrofrontends2$Outbound | CancelDeploymentMicrofrontends1$Outbound;
/** @internal */
export declare const CancelDeploymentMicrofrontends$outboundSchema: z.ZodType<CancelDeploymentMicrofrontends$Outbound, z.ZodTypeDef, CancelDeploymentMicrofrontends>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentMicrofrontends$ {
    /** @deprecated use `CancelDeploymentMicrofrontends$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentMicrofrontends, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentMicrofrontends$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentMicrofrontends$Outbound, z.ZodTypeDef, CancelDeploymentMicrofrontends>;
    /** @deprecated use `CancelDeploymentMicrofrontends$Outbound` instead. */
    type Outbound = CancelDeploymentMicrofrontends$Outbound;
}
export declare function cancelDeploymentMicrofrontendsToJSON(cancelDeploymentMicrofrontends: CancelDeploymentMicrofrontends): string;
export declare function cancelDeploymentMicrofrontendsFromJSON(jsonString: string): SafeParseResult<CancelDeploymentMicrofrontends, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentFunctionType$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentFunctionType>;
/** @internal */
export declare const CancelDeploymentFunctionType$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentFunctionType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentFunctionType$ {
    /** @deprecated use `CancelDeploymentFunctionType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Fluid: "fluid";
        readonly Standard: "standard";
    }>;
    /** @deprecated use `CancelDeploymentFunctionType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Fluid: "fluid";
        readonly Standard: "standard";
    }>;
}
/** @internal */
export declare const CancelDeploymentFunctionMemoryType$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentFunctionMemoryType>;
/** @internal */
export declare const CancelDeploymentFunctionMemoryType$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentFunctionMemoryType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentFunctionMemoryType$ {
    /** @deprecated use `CancelDeploymentFunctionMemoryType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Standard: "standard";
        readonly StandardLegacy: "standard_legacy";
        readonly Performance: "performance";
    }>;
    /** @deprecated use `CancelDeploymentFunctionMemoryType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Standard: "standard";
        readonly StandardLegacy: "standard_legacy";
        readonly Performance: "performance";
    }>;
}
/** @internal */
export declare const CancelDeploymentConfig$inboundSchema: z.ZodType<CancelDeploymentConfig, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentConfig$Outbound = {
    version?: number | undefined;
    functionType: string;
    functionMemoryType: string;
    functionTimeout: number | null;
    secureComputePrimaryRegion: string | null;
    secureComputeFallbackRegion: string | null;
    isUsingActiveCPU?: boolean | undefined;
};
/** @internal */
export declare const CancelDeploymentConfig$outboundSchema: z.ZodType<CancelDeploymentConfig$Outbound, z.ZodTypeDef, CancelDeploymentConfig>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentConfig$ {
    /** @deprecated use `CancelDeploymentConfig$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentConfig, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentConfig$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentConfig$Outbound, z.ZodTypeDef, CancelDeploymentConfig>;
    /** @deprecated use `CancelDeploymentConfig$Outbound` instead. */
    type Outbound = CancelDeploymentConfig$Outbound;
}
export declare function cancelDeploymentConfigToJSON(cancelDeploymentConfig: CancelDeploymentConfig): string;
export declare function cancelDeploymentConfigFromJSON(jsonString: string): SafeParseResult<CancelDeploymentConfig, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentState$inboundSchema: z.ZodNativeEnum<typeof CancelDeploymentState>;
/** @internal */
export declare const CancelDeploymentState$outboundSchema: z.ZodNativeEnum<typeof CancelDeploymentState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentState$ {
    /** @deprecated use `CancelDeploymentState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Succeeded: "succeeded";
        readonly Failed: "failed";
        readonly Pending: "pending";
    }>;
    /** @deprecated use `CancelDeploymentState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Succeeded: "succeeded";
        readonly Failed: "failed";
        readonly Pending: "pending";
    }>;
}
/** @internal */
export declare const CancelDeploymentDeploymentAlias$inboundSchema: z.ZodType<CancelDeploymentDeploymentAlias, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentDeploymentAlias$Outbound = {
    state: string;
    startedAt: number;
    completedAt?: number | undefined;
};
/** @internal */
export declare const CancelDeploymentDeploymentAlias$outboundSchema: z.ZodType<CancelDeploymentDeploymentAlias$Outbound, z.ZodTypeDef, CancelDeploymentDeploymentAlias>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentDeploymentAlias$ {
    /** @deprecated use `CancelDeploymentDeploymentAlias$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentDeploymentAlias, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentDeploymentAlias$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentDeploymentAlias$Outbound, z.ZodTypeDef, CancelDeploymentDeploymentAlias>;
    /** @deprecated use `CancelDeploymentDeploymentAlias$Outbound` instead. */
    type Outbound = CancelDeploymentDeploymentAlias$Outbound;
}
export declare function cancelDeploymentDeploymentAliasToJSON(cancelDeploymentDeploymentAlias: CancelDeploymentDeploymentAlias): string;
export declare function cancelDeploymentDeploymentAliasFromJSON(jsonString: string): SafeParseResult<CancelDeploymentDeploymentAlias, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentChecks$inboundSchema: z.ZodType<CancelDeploymentChecks, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentChecks$Outbound = {
    "deployment-alias": CancelDeploymentDeploymentAlias$Outbound;
};
/** @internal */
export declare const CancelDeploymentChecks$outboundSchema: z.ZodType<CancelDeploymentChecks$Outbound, z.ZodTypeDef, CancelDeploymentChecks>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentChecks$ {
    /** @deprecated use `CancelDeploymentChecks$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentChecks, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentChecks$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentChecks$Outbound, z.ZodTypeDef, CancelDeploymentChecks>;
    /** @deprecated use `CancelDeploymentChecks$Outbound` instead. */
    type Outbound = CancelDeploymentChecks$Outbound;
}
export declare function cancelDeploymentChecksToJSON(cancelDeploymentChecks: CancelDeploymentChecks): string;
export declare function cancelDeploymentChecksFromJSON(jsonString: string): SafeParseResult<CancelDeploymentChecks, SDKValidationError>;
/** @internal */
export declare const CancelDeploymentResponseBody$inboundSchema: z.ZodType<CancelDeploymentResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type CancelDeploymentResponseBody$Outbound = {
    aliasAssignedAt?: number | boolean | null | undefined;
    alwaysRefuseToBuild?: boolean | undefined;
    build: CancelDeploymentBuild$Outbound;
    buildArtifactUrls?: Array<string> | undefined;
    builds?: Array<CancelDeploymentBuilds$Outbound> | undefined;
    env: Array<string>;
    inspectorUrl: string | null;
    isInConcurrentBuildsQueue: boolean;
    isInSystemBuildsQueue: boolean;
    projectSettings: CancelDeploymentProjectSettings$Outbound;
    readyStateReason?: string | undefined;
    integrations?: CancelDeploymentIntegrations$Outbound | undefined;
    images?: CancelDeploymentImages$Outbound | undefined;
    alias?: Array<string> | undefined;
    aliasAssigned: boolean;
    bootedAt: number;
    buildingAt: number;
    buildContainerFinishedAt?: number | undefined;
    buildSkipped: boolean;
    creator: CancelDeploymentCreator$Outbound;
    initReadyAt?: number | undefined;
    isFirstBranchDeployment?: boolean | undefined;
    lambdas?: Array<CancelDeploymentLambdas$Outbound> | undefined;
    public: boolean;
    ready?: number | undefined;
    status: string;
    team?: CancelDeploymentTeam$Outbound | undefined;
    userAliases?: Array<string> | undefined;
    previewCommentsEnabled?: boolean | undefined;
    ttyBuildLogs?: boolean | undefined;
    customEnvironment?: CancelDeploymentCustomEnvironment1$Outbound | CancelDeploymentCustomEnvironment2$Outbound | undefined;
    oomReport?: string | undefined;
    id: string;
    aliasError?: CancelDeploymentAliasError$Outbound | null | undefined;
    aliasFinal?: string | null | undefined;
    aliasWarning?: CancelDeploymentAliasWarning$Outbound | null | undefined;
    autoAssignCustomDomains?: boolean | undefined;
    automaticAliases?: Array<string> | undefined;
    buildErrorAt?: number | undefined;
    checksState?: string | undefined;
    checksConclusion?: string | undefined;
    createdAt: number;
    deletedAt?: number | null | undefined;
    defaultRoute?: string | undefined;
    canceledAt?: number | undefined;
    errorCode?: string | undefined;
    errorLink?: string | undefined;
    errorMessage?: string | null | undefined;
    errorStep?: string | undefined;
    passiveRegions?: Array<string> | undefined;
    gitSource?: GitSource12$Outbound | GitSource15$Outbound | CancelDeploymentGitSource4$Outbound | GitSource10$Outbound | GitSource11$Outbound | GitSource13$Outbound | GitSource14$Outbound | CancelDeploymentGitSource2$Outbound | CancelDeploymentGitSource3$Outbound | GitSource6$Outbound | GitSource9$Outbound | CancelDeploymentGitSource1$Outbound | CancelDeploymentGitSource5$Outbound | GitSource7$Outbound | GitSource8$Outbound | undefined;
    name: string;
    meta: {
        [k: string]: string;
    };
    originCacheRegion?: string | undefined;
    nodeVersion?: string | undefined;
    project?: CancelDeploymentProject$Outbound | undefined;
    readyState: string;
    readySubstate?: string | undefined;
    regions: Array<string>;
    softDeletedByRetention?: boolean | undefined;
    source?: string | undefined;
    target?: string | null | undefined;
    type: string;
    undeletedAt?: number | undefined;
    url: string;
    version: number;
    oidcTokenClaims?: CancelDeploymentOidcTokenClaims$Outbound | undefined;
    connectBuildsEnabled?: boolean | undefined;
    connectConfigurationId?: string | undefined;
    createdIn: string;
    crons?: Array<CancelDeploymentCrons$Outbound> | undefined;
    functions?: {
        [k: string]: CancelDeploymentFunctions$Outbound;
    } | null | undefined;
    monorepoManager?: string | null | undefined;
    ownerId: string;
    passiveConnectConfigurationId?: string | undefined;
    plan: string;
    projectId: string;
    routes: Array<CancelDeploymentRoutes3$Outbound | CancelDeploymentRoutes1$Outbound | CancelDeploymentRoutes2$Outbound> | null;
    gitRepo?: CancelDeploymentGitRepo2$Outbound | CancelDeploymentGitRepo3$Outbound | CancelDeploymentGitRepo1$Outbound | null | undefined;
    flags?: CancelDeploymentFlags1$Outbound | Array<CancelDeploymentFlags2$Outbound> | undefined;
    microfrontends?: CancelDeploymentMicrofrontends2$Outbound | CancelDeploymentMicrofrontends1$Outbound | undefined;
    config?: CancelDeploymentConfig$Outbound | undefined;
    checks?: CancelDeploymentChecks$Outbound | undefined;
};
/** @internal */
export declare const CancelDeploymentResponseBody$outboundSchema: z.ZodType<CancelDeploymentResponseBody$Outbound, z.ZodTypeDef, CancelDeploymentResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CancelDeploymentResponseBody$ {
    /** @deprecated use `CancelDeploymentResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CancelDeploymentResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `CancelDeploymentResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CancelDeploymentResponseBody$Outbound, z.ZodTypeDef, CancelDeploymentResponseBody>;
    /** @deprecated use `CancelDeploymentResponseBody$Outbound` instead. */
    type Outbound = CancelDeploymentResponseBody$Outbound;
}
export declare function cancelDeploymentResponseBodyToJSON(cancelDeploymentResponseBody: CancelDeploymentResponseBody): string;
export declare function cancelDeploymentResponseBodyFromJSON(jsonString: string): SafeParseResult<CancelDeploymentResponseBody, SDKValidationError>;
//# sourceMappingURL=canceldeploymentop.d.ts.map