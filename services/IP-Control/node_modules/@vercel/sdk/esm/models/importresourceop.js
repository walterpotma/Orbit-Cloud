/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../lib/schemas.js";
export const Ownership = {
    Owned: "owned",
    Linked: "linked",
    Sandbox: "sandbox",
};
export const ImportResourceStatus = {
    Ready: "ready",
    Pending: "pending",
    Suspended: "suspended",
    Resumed: "resumed",
    Uninstalled: "uninstalled",
    Error: "error",
};
export const ImportResourceType = {
    Prepayment: "prepayment",
    Subscription: "subscription",
};
export const Level = {
    Info: "info",
    Warn: "warn",
    Error: "error",
};
/** @internal */
export const Ownership$inboundSchema = z
    .nativeEnum(Ownership);
/** @internal */
export const Ownership$outboundSchema = Ownership$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Ownership$;
(function (Ownership$) {
    /** @deprecated use `Ownership$inboundSchema` instead. */
    Ownership$.inboundSchema = Ownership$inboundSchema;
    /** @deprecated use `Ownership$outboundSchema` instead. */
    Ownership$.outboundSchema = Ownership$outboundSchema;
})(Ownership$ || (Ownership$ = {}));
/** @internal */
export const ImportResourceStatus$inboundSchema = z.nativeEnum(ImportResourceStatus);
/** @internal */
export const ImportResourceStatus$outboundSchema = ImportResourceStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ImportResourceStatus$;
(function (ImportResourceStatus$) {
    /** @deprecated use `ImportResourceStatus$inboundSchema` instead. */
    ImportResourceStatus$.inboundSchema = ImportResourceStatus$inboundSchema;
    /** @deprecated use `ImportResourceStatus$outboundSchema` instead. */
    ImportResourceStatus$.outboundSchema = ImportResourceStatus$outboundSchema;
})(ImportResourceStatus$ || (ImportResourceStatus$ = {}));
/** @internal */
export const ImportResourceType$inboundSchema = z.nativeEnum(ImportResourceType);
/** @internal */
export const ImportResourceType$outboundSchema = ImportResourceType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ImportResourceType$;
(function (ImportResourceType$) {
    /** @deprecated use `ImportResourceType$inboundSchema` instead. */
    ImportResourceType$.inboundSchema = ImportResourceType$inboundSchema;
    /** @deprecated use `ImportResourceType$outboundSchema` instead. */
    ImportResourceType$.outboundSchema = ImportResourceType$outboundSchema;
})(ImportResourceType$ || (ImportResourceType$ = {}));
/** @internal */
export const Details$inboundSchema = z.object({
    label: z.string(),
    value: z.string().optional(),
});
/** @internal */
export const Details$outboundSchema = z.object({
    label: z.string(),
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Details$;
(function (Details$) {
    /** @deprecated use `Details$inboundSchema` instead. */
    Details$.inboundSchema = Details$inboundSchema;
    /** @deprecated use `Details$outboundSchema` instead. */
    Details$.outboundSchema = Details$outboundSchema;
})(Details$ || (Details$ = {}));
export function detailsToJSON(details) {
    return JSON.stringify(Details$outboundSchema.parse(details));
}
export function detailsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Details$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Details' from JSON`);
}
/** @internal */
export const HeightlightedDetails$inboundSchema = z.object({
    label: z.string(),
    value: z.string().optional(),
});
/** @internal */
export const HeightlightedDetails$outboundSchema = z.object({
    label: z.string(),
    value: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var HeightlightedDetails$;
(function (HeightlightedDetails$) {
    /** @deprecated use `HeightlightedDetails$inboundSchema` instead. */
    HeightlightedDetails$.inboundSchema = HeightlightedDetails$inboundSchema;
    /** @deprecated use `HeightlightedDetails$outboundSchema` instead. */
    HeightlightedDetails$.outboundSchema = HeightlightedDetails$outboundSchema;
})(HeightlightedDetails$ || (HeightlightedDetails$ = {}));
export function heightlightedDetailsToJSON(heightlightedDetails) {
    return JSON.stringify(HeightlightedDetails$outboundSchema.parse(heightlightedDetails));
}
export function heightlightedDetailsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => HeightlightedDetails$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'HeightlightedDetails' from JSON`);
}
/** @internal */
export const BillingPlan$inboundSchema = collectExtraKeys$(z.object({
    id: z.string(),
    type: ImportResourceType$inboundSchema,
    name: z.string(),
    description: z.string().optional(),
    paymentMethodRequired: z.boolean().optional(),
    cost: z.string().optional(),
    details: z.array(z.lazy(() => Details$inboundSchema)).optional(),
    heightlightedDetails: z.array(z.lazy(() => HeightlightedDetails$inboundSchema)).optional(),
    effectiveDate: z.string().optional(),
}).catchall(z.any()), "additionalProperties", true);
/** @internal */
export const BillingPlan$outboundSchema = z.object({
    id: z.string(),
    type: ImportResourceType$outboundSchema,
    name: z.string(),
    description: z.string().optional(),
    paymentMethodRequired: z.boolean().optional(),
    cost: z.string().optional(),
    details: z.array(z.lazy(() => Details$outboundSchema)).optional(),
    heightlightedDetails: z.array(z.lazy(() => HeightlightedDetails$outboundSchema)).optional(),
    effectiveDate: z.string().optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BillingPlan$;
(function (BillingPlan$) {
    /** @deprecated use `BillingPlan$inboundSchema` instead. */
    BillingPlan$.inboundSchema = BillingPlan$inboundSchema;
    /** @deprecated use `BillingPlan$outboundSchema` instead. */
    BillingPlan$.outboundSchema = BillingPlan$outboundSchema;
})(BillingPlan$ || (BillingPlan$ = {}));
export function billingPlanToJSON(billingPlan) {
    return JSON.stringify(BillingPlan$outboundSchema.parse(billingPlan));
}
export function billingPlanFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BillingPlan$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BillingPlan' from JSON`);
}
/** @internal */
export const Level$inboundSchema = z.nativeEnum(Level);
/** @internal */
export const Level$outboundSchema = Level$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Level$;
(function (Level$) {
    /** @deprecated use `Level$inboundSchema` instead. */
    Level$.inboundSchema = Level$inboundSchema;
    /** @deprecated use `Level$outboundSchema` instead. */
    Level$.outboundSchema = Level$outboundSchema;
})(Level$ || (Level$ = {}));
/** @internal */
export const Notification$inboundSchema = z.object({
    level: Level$inboundSchema,
    title: z.string(),
    message: z.string().optional(),
    href: z.string().optional(),
});
/** @internal */
export const Notification$outboundSchema = z.object({
    level: Level$outboundSchema,
    title: z.string(),
    message: z.string().optional(),
    href: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Notification$;
(function (Notification$) {
    /** @deprecated use `Notification$inboundSchema` instead. */
    Notification$.inboundSchema = Notification$inboundSchema;
    /** @deprecated use `Notification$outboundSchema` instead. */
    Notification$.outboundSchema = Notification$outboundSchema;
})(Notification$ || (Notification$ = {}));
export function notificationToJSON(notification) {
    return JSON.stringify(Notification$outboundSchema.parse(notification));
}
export function notificationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Notification$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Notification' from JSON`);
}
/** @internal */
export const EnvironmentOverrides$inboundSchema = z.object({
    development: z.string().optional(),
    preview: z.string().optional(),
    production: z.string().optional(),
});
/** @internal */
export const EnvironmentOverrides$outboundSchema = z.object({
    development: z.string().optional(),
    preview: z.string().optional(),
    production: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EnvironmentOverrides$;
(function (EnvironmentOverrides$) {
    /** @deprecated use `EnvironmentOverrides$inboundSchema` instead. */
    EnvironmentOverrides$.inboundSchema = EnvironmentOverrides$inboundSchema;
    /** @deprecated use `EnvironmentOverrides$outboundSchema` instead. */
    EnvironmentOverrides$.outboundSchema = EnvironmentOverrides$outboundSchema;
})(EnvironmentOverrides$ || (EnvironmentOverrides$ = {}));
export function environmentOverridesToJSON(environmentOverrides) {
    return JSON.stringify(EnvironmentOverrides$outboundSchema.parse(environmentOverrides));
}
export function environmentOverridesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EnvironmentOverrides$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EnvironmentOverrides' from JSON`);
}
/** @internal */
export const ImportResourceSecrets$inboundSchema = z.object({
    name: z.string(),
    value: z.string(),
    prefix: z.string().optional(),
    environmentOverrides: z.lazy(() => EnvironmentOverrides$inboundSchema)
        .optional(),
});
/** @internal */
export const ImportResourceSecrets$outboundSchema = z.object({
    name: z.string(),
    value: z.string(),
    prefix: z.string().optional(),
    environmentOverrides: z.lazy(() => EnvironmentOverrides$outboundSchema)
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ImportResourceSecrets$;
(function (ImportResourceSecrets$) {
    /** @deprecated use `ImportResourceSecrets$inboundSchema` instead. */
    ImportResourceSecrets$.inboundSchema = ImportResourceSecrets$inboundSchema;
    /** @deprecated use `ImportResourceSecrets$outboundSchema` instead. */
    ImportResourceSecrets$.outboundSchema = ImportResourceSecrets$outboundSchema;
})(ImportResourceSecrets$ || (ImportResourceSecrets$ = {}));
export function importResourceSecretsToJSON(importResourceSecrets) {
    return JSON.stringify(ImportResourceSecrets$outboundSchema.parse(importResourceSecrets));
}
export function importResourceSecretsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ImportResourceSecrets$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ImportResourceSecrets' from JSON`);
}
/** @internal */
export const ImportResourceRequestBody$inboundSchema = z.object({
    ownership: Ownership$inboundSchema.optional(),
    productId: z.string(),
    name: z.string(),
    status: ImportResourceStatus$inboundSchema,
    metadata: z.record(z.any()).optional(),
    billingPlan: z.lazy(() => BillingPlan$inboundSchema).optional(),
    notification: z.lazy(() => Notification$inboundSchema).optional(),
    extras: z.record(z.any()).optional(),
    secrets: z.array(z.lazy(() => ImportResourceSecrets$inboundSchema))
        .optional(),
});
/** @internal */
export const ImportResourceRequestBody$outboundSchema = z.object({
    ownership: Ownership$outboundSchema.optional(),
    productId: z.string(),
    name: z.string(),
    status: ImportResourceStatus$outboundSchema,
    metadata: z.record(z.any()).optional(),
    billingPlan: z.lazy(() => BillingPlan$outboundSchema).optional(),
    notification: z.lazy(() => Notification$outboundSchema).optional(),
    extras: z.record(z.any()).optional(),
    secrets: z.array(z.lazy(() => ImportResourceSecrets$outboundSchema))
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ImportResourceRequestBody$;
(function (ImportResourceRequestBody$) {
    /** @deprecated use `ImportResourceRequestBody$inboundSchema` instead. */
    ImportResourceRequestBody$.inboundSchema = ImportResourceRequestBody$inboundSchema;
    /** @deprecated use `ImportResourceRequestBody$outboundSchema` instead. */
    ImportResourceRequestBody$.outboundSchema = ImportResourceRequestBody$outboundSchema;
})(ImportResourceRequestBody$ || (ImportResourceRequestBody$ = {}));
export function importResourceRequestBodyToJSON(importResourceRequestBody) {
    return JSON.stringify(ImportResourceRequestBody$outboundSchema.parse(importResourceRequestBody));
}
export function importResourceRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ImportResourceRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ImportResourceRequestBody' from JSON`);
}
/** @internal */
export const ImportResourceRequest$inboundSchema = z.object({
    integrationConfigurationId: z.string(),
    resourceId: z.string(),
    RequestBody: z.lazy(() => ImportResourceRequestBody$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const ImportResourceRequest$outboundSchema = z.object({
    integrationConfigurationId: z.string(),
    resourceId: z.string(),
    requestBody: z.lazy(() => ImportResourceRequestBody$outboundSchema)
        .optional(),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ImportResourceRequest$;
(function (ImportResourceRequest$) {
    /** @deprecated use `ImportResourceRequest$inboundSchema` instead. */
    ImportResourceRequest$.inboundSchema = ImportResourceRequest$inboundSchema;
    /** @deprecated use `ImportResourceRequest$outboundSchema` instead. */
    ImportResourceRequest$.outboundSchema = ImportResourceRequest$outboundSchema;
})(ImportResourceRequest$ || (ImportResourceRequest$ = {}));
export function importResourceRequestToJSON(importResourceRequest) {
    return JSON.stringify(ImportResourceRequest$outboundSchema.parse(importResourceRequest));
}
export function importResourceRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ImportResourceRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ImportResourceRequest' from JSON`);
}
/** @internal */
export const ImportResourceResponseBody$inboundSchema = z.object({
    name: z.string(),
});
/** @internal */
export const ImportResourceResponseBody$outboundSchema = z.object({
    name: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ImportResourceResponseBody$;
(function (ImportResourceResponseBody$) {
    /** @deprecated use `ImportResourceResponseBody$inboundSchema` instead. */
    ImportResourceResponseBody$.inboundSchema = ImportResourceResponseBody$inboundSchema;
    /** @deprecated use `ImportResourceResponseBody$outboundSchema` instead. */
    ImportResourceResponseBody$.outboundSchema = ImportResourceResponseBody$outboundSchema;
})(ImportResourceResponseBody$ || (ImportResourceResponseBody$ = {}));
export function importResourceResponseBodyToJSON(importResourceResponseBody) {
    return JSON.stringify(ImportResourceResponseBody$outboundSchema.parse(importResourceResponseBody));
}
export function importResourceResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ImportResourceResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ImportResourceResponseBody' from JSON`);
}
//# sourceMappingURL=importresourceop.js.map