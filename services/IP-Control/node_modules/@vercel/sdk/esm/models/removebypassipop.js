/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/** @internal */
export const RemoveBypassIpRequestBody2$inboundSchema = z.object({
    domain: z.string().optional(),
    projectScope: z.boolean(),
    sourceIp: z.string().optional(),
    allSources: z.boolean().optional(),
    note: z.string().optional(),
});
/** @internal */
export const RemoveBypassIpRequestBody2$outboundSchema = z.object({
    domain: z.string().optional(),
    projectScope: z.boolean(),
    sourceIp: z.string().optional(),
    allSources: z.boolean().optional(),
    note: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RemoveBypassIpRequestBody2$;
(function (RemoveBypassIpRequestBody2$) {
    /** @deprecated use `RemoveBypassIpRequestBody2$inboundSchema` instead. */
    RemoveBypassIpRequestBody2$.inboundSchema = RemoveBypassIpRequestBody2$inboundSchema;
    /** @deprecated use `RemoveBypassIpRequestBody2$outboundSchema` instead. */
    RemoveBypassIpRequestBody2$.outboundSchema = RemoveBypassIpRequestBody2$outboundSchema;
})(RemoveBypassIpRequestBody2$ || (RemoveBypassIpRequestBody2$ = {}));
export function removeBypassIpRequestBody2ToJSON(removeBypassIpRequestBody2) {
    return JSON.stringify(RemoveBypassIpRequestBody2$outboundSchema.parse(removeBypassIpRequestBody2));
}
export function removeBypassIpRequestBody2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => RemoveBypassIpRequestBody2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RemoveBypassIpRequestBody2' from JSON`);
}
/** @internal */
export const RemoveBypassIpRequestBody1$inboundSchema = z.object({
    domain: z.string(),
    projectScope: z.boolean().optional(),
    sourceIp: z.string().optional(),
    allSources: z.boolean().optional(),
    note: z.string().optional(),
});
/** @internal */
export const RemoveBypassIpRequestBody1$outboundSchema = z.object({
    domain: z.string(),
    projectScope: z.boolean().optional(),
    sourceIp: z.string().optional(),
    allSources: z.boolean().optional(),
    note: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RemoveBypassIpRequestBody1$;
(function (RemoveBypassIpRequestBody1$) {
    /** @deprecated use `RemoveBypassIpRequestBody1$inboundSchema` instead. */
    RemoveBypassIpRequestBody1$.inboundSchema = RemoveBypassIpRequestBody1$inboundSchema;
    /** @deprecated use `RemoveBypassIpRequestBody1$outboundSchema` instead. */
    RemoveBypassIpRequestBody1$.outboundSchema = RemoveBypassIpRequestBody1$outboundSchema;
})(RemoveBypassIpRequestBody1$ || (RemoveBypassIpRequestBody1$ = {}));
export function removeBypassIpRequestBody1ToJSON(removeBypassIpRequestBody1) {
    return JSON.stringify(RemoveBypassIpRequestBody1$outboundSchema.parse(removeBypassIpRequestBody1));
}
export function removeBypassIpRequestBody1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => RemoveBypassIpRequestBody1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RemoveBypassIpRequestBody1' from JSON`);
}
/** @internal */
export const RemoveBypassIpRequestBody$inboundSchema = z.union([
    z.lazy(() => RemoveBypassIpRequestBody1$inboundSchema),
    z.lazy(() => RemoveBypassIpRequestBody2$inboundSchema),
]);
/** @internal */
export const RemoveBypassIpRequestBody$outboundSchema = z.union([
    z.lazy(() => RemoveBypassIpRequestBody1$outboundSchema),
    z.lazy(() => RemoveBypassIpRequestBody2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RemoveBypassIpRequestBody$;
(function (RemoveBypassIpRequestBody$) {
    /** @deprecated use `RemoveBypassIpRequestBody$inboundSchema` instead. */
    RemoveBypassIpRequestBody$.inboundSchema = RemoveBypassIpRequestBody$inboundSchema;
    /** @deprecated use `RemoveBypassIpRequestBody$outboundSchema` instead. */
    RemoveBypassIpRequestBody$.outboundSchema = RemoveBypassIpRequestBody$outboundSchema;
})(RemoveBypassIpRequestBody$ || (RemoveBypassIpRequestBody$ = {}));
export function removeBypassIpRequestBodyToJSON(removeBypassIpRequestBody) {
    return JSON.stringify(RemoveBypassIpRequestBody$outboundSchema.parse(removeBypassIpRequestBody));
}
export function removeBypassIpRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RemoveBypassIpRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RemoveBypassIpRequestBody' from JSON`);
}
/** @internal */
export const RemoveBypassIpRequest$inboundSchema = z.object({
    projectId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.union([
        z.lazy(() => RemoveBypassIpRequestBody1$inboundSchema),
        z.lazy(() => RemoveBypassIpRequestBody2$inboundSchema),
    ]).optional(),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const RemoveBypassIpRequest$outboundSchema = z.object({
    projectId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.union([
        z.lazy(() => RemoveBypassIpRequestBody1$outboundSchema),
        z.lazy(() => RemoveBypassIpRequestBody2$outboundSchema),
    ]).optional(),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RemoveBypassIpRequest$;
(function (RemoveBypassIpRequest$) {
    /** @deprecated use `RemoveBypassIpRequest$inboundSchema` instead. */
    RemoveBypassIpRequest$.inboundSchema = RemoveBypassIpRequest$inboundSchema;
    /** @deprecated use `RemoveBypassIpRequest$outboundSchema` instead. */
    RemoveBypassIpRequest$.outboundSchema = RemoveBypassIpRequest$outboundSchema;
})(RemoveBypassIpRequest$ || (RemoveBypassIpRequest$ = {}));
export function removeBypassIpRequestToJSON(removeBypassIpRequest) {
    return JSON.stringify(RemoveBypassIpRequest$outboundSchema.parse(removeBypassIpRequest));
}
export function removeBypassIpRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RemoveBypassIpRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RemoveBypassIpRequest' from JSON`);
}
/** @internal */
export const RemoveBypassIpResponseBody$inboundSchema = z.object({
    ok: z.boolean(),
});
/** @internal */
export const RemoveBypassIpResponseBody$outboundSchema = z.object({
    ok: z.boolean(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RemoveBypassIpResponseBody$;
(function (RemoveBypassIpResponseBody$) {
    /** @deprecated use `RemoveBypassIpResponseBody$inboundSchema` instead. */
    RemoveBypassIpResponseBody$.inboundSchema = RemoveBypassIpResponseBody$inboundSchema;
    /** @deprecated use `RemoveBypassIpResponseBody$outboundSchema` instead. */
    RemoveBypassIpResponseBody$.outboundSchema = RemoveBypassIpResponseBody$outboundSchema;
})(RemoveBypassIpResponseBody$ || (RemoveBypassIpResponseBody$ = {}));
export function removeBypassIpResponseBodyToJSON(removeBypassIpResponseBody) {
    return JSON.stringify(RemoveBypassIpResponseBody$outboundSchema.parse(removeBypassIpResponseBody));
}
export function removeBypassIpResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RemoveBypassIpResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RemoveBypassIpResponseBody' from JSON`);
}
//# sourceMappingURL=removebypassipop.js.map