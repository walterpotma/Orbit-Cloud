/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
export const PatchTeamRoles1 = {
    Owner: "OWNER",
    Member: "MEMBER",
    Developer: "DEVELOPER",
    Security: "SECURITY",
    Billing: "BILLING",
    Viewer: "VIEWER",
    ViewerForPlus: "VIEWER_FOR_PLUS",
    Contributor: "CONTRIBUTOR",
};
/**
 * Specify if the password will apply to every Deployment Target or just Preview
 */
export const PatchTeamDeploymentType = {
    All: "all",
    Preview: "preview",
    ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews",
    AllExceptCustomDomains: "all_except_custom_domains",
};
/**
 * Specify if the Vercel Authentication (SSO Protection) will apply to every Deployment Target or just Preview
 */
export const PatchTeamTeamsDeploymentType = {
    All: "all",
    Preview: "preview",
    ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews",
    AllExceptCustomDomains: "all_except_custom_domains",
};
/**
 * The time period to keep non-production deployments for
 */
export const Expiration = {
    Oney: "1y",
    Sixm: "6m",
    Threem: "3m",
    Twom: "2m",
    Onem: "1m",
    Twow: "2w",
    Onew: "1w",
    Oned: "1d",
    Unlimited: "unlimited",
};
/**
 * The time period to keep production deployments for
 */
export const ExpirationProduction = {
    Oney: "1y",
    Sixm: "6m",
    Threem: "3m",
    Twom: "2m",
    Onem: "1m",
    Twow: "2w",
    Onew: "1w",
    Oned: "1d",
    Unlimited: "unlimited",
};
/**
 * The time period to keep canceled deployments for
 */
export const ExpirationCanceled = {
    Oney: "1y",
    Sixm: "6m",
    Threem: "3m",
    Twom: "2m",
    Onem: "1m",
    Twow: "2w",
    Onew: "1w",
    Oned: "1d",
    Unlimited: "unlimited",
};
/**
 * The time period to keep errored deployments for
 */
export const ExpirationErrored = {
    Oney: "1y",
    Sixm: "6m",
    Threem: "3m",
    Twom: "2m",
    Onem: "1m",
    Twow: "2w",
    Onew: "1w",
    Oned: "1d",
    Unlimited: "unlimited",
};
/** @internal */
export const PatchTeamRoles2$inboundSchema = z.object({
    accessGroupId: z.string(),
});
/** @internal */
export const PatchTeamRoles2$outboundSchema = z.object({
    accessGroupId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PatchTeamRoles2$;
(function (PatchTeamRoles2$) {
    /** @deprecated use `PatchTeamRoles2$inboundSchema` instead. */
    PatchTeamRoles2$.inboundSchema = PatchTeamRoles2$inboundSchema;
    /** @deprecated use `PatchTeamRoles2$outboundSchema` instead. */
    PatchTeamRoles2$.outboundSchema = PatchTeamRoles2$outboundSchema;
})(PatchTeamRoles2$ || (PatchTeamRoles2$ = {}));
export function patchTeamRoles2ToJSON(patchTeamRoles2) {
    return JSON.stringify(PatchTeamRoles2$outboundSchema.parse(patchTeamRoles2));
}
export function patchTeamRoles2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => PatchTeamRoles2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PatchTeamRoles2' from JSON`);
}
/** @internal */
export const PatchTeamRoles1$inboundSchema = z.nativeEnum(PatchTeamRoles1);
/** @internal */
export const PatchTeamRoles1$outboundSchema = PatchTeamRoles1$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PatchTeamRoles1$;
(function (PatchTeamRoles1$) {
    /** @deprecated use `PatchTeamRoles1$inboundSchema` instead. */
    PatchTeamRoles1$.inboundSchema = PatchTeamRoles1$inboundSchema;
    /** @deprecated use `PatchTeamRoles1$outboundSchema` instead. */
    PatchTeamRoles1$.outboundSchema = PatchTeamRoles1$outboundSchema;
})(PatchTeamRoles1$ || (PatchTeamRoles1$ = {}));
/** @internal */
export const PatchTeamRoles$inboundSchema = z.union([
    z.lazy(() => PatchTeamRoles2$inboundSchema),
    PatchTeamRoles1$inboundSchema,
]);
/** @internal */
export const PatchTeamRoles$outboundSchema = z.union([
    z.lazy(() => PatchTeamRoles2$outboundSchema),
    PatchTeamRoles1$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PatchTeamRoles$;
(function (PatchTeamRoles$) {
    /** @deprecated use `PatchTeamRoles$inboundSchema` instead. */
    PatchTeamRoles$.inboundSchema = PatchTeamRoles$inboundSchema;
    /** @deprecated use `PatchTeamRoles$outboundSchema` instead. */
    PatchTeamRoles$.outboundSchema = PatchTeamRoles$outboundSchema;
})(PatchTeamRoles$ || (PatchTeamRoles$ = {}));
export function patchTeamRolesToJSON(patchTeamRoles) {
    return JSON.stringify(PatchTeamRoles$outboundSchema.parse(patchTeamRoles));
}
export function patchTeamRolesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PatchTeamRoles$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PatchTeamRoles' from JSON`);
}
/** @internal */
export const PatchTeamSaml$inboundSchema = z.object({
    enforced: z.boolean().optional(),
    roles: z.record(z.union([
        z.lazy(() => PatchTeamRoles2$inboundSchema),
        PatchTeamRoles1$inboundSchema,
    ])).optional(),
});
/** @internal */
export const PatchTeamSaml$outboundSchema = z.object({
    enforced: z.boolean().optional(),
    roles: z.record(z.union([
        z.lazy(() => PatchTeamRoles2$outboundSchema),
        PatchTeamRoles1$outboundSchema,
    ])).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PatchTeamSaml$;
(function (PatchTeamSaml$) {
    /** @deprecated use `PatchTeamSaml$inboundSchema` instead. */
    PatchTeamSaml$.inboundSchema = PatchTeamSaml$inboundSchema;
    /** @deprecated use `PatchTeamSaml$outboundSchema` instead. */
    PatchTeamSaml$.outboundSchema = PatchTeamSaml$outboundSchema;
})(PatchTeamSaml$ || (PatchTeamSaml$ = {}));
export function patchTeamSamlToJSON(patchTeamSaml) {
    return JSON.stringify(PatchTeamSaml$outboundSchema.parse(patchTeamSaml));
}
export function patchTeamSamlFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PatchTeamSaml$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PatchTeamSaml' from JSON`);
}
/** @internal */
export const PatchTeamRemoteCaching$inboundSchema = z.object({
    enabled: z.boolean().optional(),
});
/** @internal */
export const PatchTeamRemoteCaching$outboundSchema = z.object({
    enabled: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PatchTeamRemoteCaching$;
(function (PatchTeamRemoteCaching$) {
    /** @deprecated use `PatchTeamRemoteCaching$inboundSchema` instead. */
    PatchTeamRemoteCaching$.inboundSchema = PatchTeamRemoteCaching$inboundSchema;
    /** @deprecated use `PatchTeamRemoteCaching$outboundSchema` instead. */
    PatchTeamRemoteCaching$.outboundSchema = PatchTeamRemoteCaching$outboundSchema;
})(PatchTeamRemoteCaching$ || (PatchTeamRemoteCaching$ = {}));
export function patchTeamRemoteCachingToJSON(patchTeamRemoteCaching) {
    return JSON.stringify(PatchTeamRemoteCaching$outboundSchema.parse(patchTeamRemoteCaching));
}
export function patchTeamRemoteCachingFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PatchTeamRemoteCaching$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PatchTeamRemoteCaching' from JSON`);
}
/** @internal */
export const PatchTeamDeploymentType$inboundSchema = z.nativeEnum(PatchTeamDeploymentType);
/** @internal */
export const PatchTeamDeploymentType$outboundSchema = PatchTeamDeploymentType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PatchTeamDeploymentType$;
(function (PatchTeamDeploymentType$) {
    /** @deprecated use `PatchTeamDeploymentType$inboundSchema` instead. */
    PatchTeamDeploymentType$.inboundSchema = PatchTeamDeploymentType$inboundSchema;
    /** @deprecated use `PatchTeamDeploymentType$outboundSchema` instead. */
    PatchTeamDeploymentType$.outboundSchema = PatchTeamDeploymentType$outboundSchema;
})(PatchTeamDeploymentType$ || (PatchTeamDeploymentType$ = {}));
/** @internal */
export const PatchTeamPasswordProtection$inboundSchema = z.object({
    deploymentType: PatchTeamDeploymentType$inboundSchema,
    password: z.nullable(z.string()).optional(),
});
/** @internal */
export const PatchTeamPasswordProtection$outboundSchema = z.object({
    deploymentType: PatchTeamDeploymentType$outboundSchema,
    password: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PatchTeamPasswordProtection$;
(function (PatchTeamPasswordProtection$) {
    /** @deprecated use `PatchTeamPasswordProtection$inboundSchema` instead. */
    PatchTeamPasswordProtection$.inboundSchema = PatchTeamPasswordProtection$inboundSchema;
    /** @deprecated use `PatchTeamPasswordProtection$outboundSchema` instead. */
    PatchTeamPasswordProtection$.outboundSchema = PatchTeamPasswordProtection$outboundSchema;
})(PatchTeamPasswordProtection$ || (PatchTeamPasswordProtection$ = {}));
export function patchTeamPasswordProtectionToJSON(patchTeamPasswordProtection) {
    return JSON.stringify(PatchTeamPasswordProtection$outboundSchema.parse(patchTeamPasswordProtection));
}
export function patchTeamPasswordProtectionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PatchTeamPasswordProtection$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PatchTeamPasswordProtection' from JSON`);
}
/** @internal */
export const PatchTeamTeamsDeploymentType$inboundSchema = z.nativeEnum(PatchTeamTeamsDeploymentType);
/** @internal */
export const PatchTeamTeamsDeploymentType$outboundSchema = PatchTeamTeamsDeploymentType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PatchTeamTeamsDeploymentType$;
(function (PatchTeamTeamsDeploymentType$) {
    /** @deprecated use `PatchTeamTeamsDeploymentType$inboundSchema` instead. */
    PatchTeamTeamsDeploymentType$.inboundSchema = PatchTeamTeamsDeploymentType$inboundSchema;
    /** @deprecated use `PatchTeamTeamsDeploymentType$outboundSchema` instead. */
    PatchTeamTeamsDeploymentType$.outboundSchema = PatchTeamTeamsDeploymentType$outboundSchema;
})(PatchTeamTeamsDeploymentType$ || (PatchTeamTeamsDeploymentType$ = {}));
/** @internal */
export const PatchTeamSsoProtection$inboundSchema = z.object({
    deploymentType: PatchTeamTeamsDeploymentType$inboundSchema.default("preview"),
});
/** @internal */
export const PatchTeamSsoProtection$outboundSchema = z.object({
    deploymentType: PatchTeamTeamsDeploymentType$outboundSchema.default("preview"),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PatchTeamSsoProtection$;
(function (PatchTeamSsoProtection$) {
    /** @deprecated use `PatchTeamSsoProtection$inboundSchema` instead. */
    PatchTeamSsoProtection$.inboundSchema = PatchTeamSsoProtection$inboundSchema;
    /** @deprecated use `PatchTeamSsoProtection$outboundSchema` instead. */
    PatchTeamSsoProtection$.outboundSchema = PatchTeamSsoProtection$outboundSchema;
})(PatchTeamSsoProtection$ || (PatchTeamSsoProtection$ = {}));
export function patchTeamSsoProtectionToJSON(patchTeamSsoProtection) {
    return JSON.stringify(PatchTeamSsoProtection$outboundSchema.parse(patchTeamSsoProtection));
}
export function patchTeamSsoProtectionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PatchTeamSsoProtection$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PatchTeamSsoProtection' from JSON`);
}
/** @internal */
export const PatchTeamDefaultDeploymentProtection$inboundSchema = z.object({
    passwordProtection: z.nullable(z.lazy(() => PatchTeamPasswordProtection$inboundSchema)).optional(),
    ssoProtection: z.nullable(z.lazy(() => PatchTeamSsoProtection$inboundSchema))
        .optional(),
});
/** @internal */
export const PatchTeamDefaultDeploymentProtection$outboundSchema = z.object({
    passwordProtection: z.nullable(z.lazy(() => PatchTeamPasswordProtection$outboundSchema)).optional(),
    ssoProtection: z.nullable(z.lazy(() => PatchTeamSsoProtection$outboundSchema))
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PatchTeamDefaultDeploymentProtection$;
(function (PatchTeamDefaultDeploymentProtection$) {
    /** @deprecated use `PatchTeamDefaultDeploymentProtection$inboundSchema` instead. */
    PatchTeamDefaultDeploymentProtection$.inboundSchema = PatchTeamDefaultDeploymentProtection$inboundSchema;
    /** @deprecated use `PatchTeamDefaultDeploymentProtection$outboundSchema` instead. */
    PatchTeamDefaultDeploymentProtection$.outboundSchema = PatchTeamDefaultDeploymentProtection$outboundSchema;
})(PatchTeamDefaultDeploymentProtection$ || (PatchTeamDefaultDeploymentProtection$ = {}));
export function patchTeamDefaultDeploymentProtectionToJSON(patchTeamDefaultDeploymentProtection) {
    return JSON.stringify(PatchTeamDefaultDeploymentProtection$outboundSchema.parse(patchTeamDefaultDeploymentProtection));
}
export function patchTeamDefaultDeploymentProtectionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PatchTeamDefaultDeploymentProtection$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PatchTeamDefaultDeploymentProtection' from JSON`);
}
/** @internal */
export const Expiration$inboundSchema = z
    .nativeEnum(Expiration);
/** @internal */
export const Expiration$outboundSchema = Expiration$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Expiration$;
(function (Expiration$) {
    /** @deprecated use `Expiration$inboundSchema` instead. */
    Expiration$.inboundSchema = Expiration$inboundSchema;
    /** @deprecated use `Expiration$outboundSchema` instead. */
    Expiration$.outboundSchema = Expiration$outboundSchema;
})(Expiration$ || (Expiration$ = {}));
/** @internal */
export const ExpirationProduction$inboundSchema = z.nativeEnum(ExpirationProduction);
/** @internal */
export const ExpirationProduction$outboundSchema = ExpirationProduction$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ExpirationProduction$;
(function (ExpirationProduction$) {
    /** @deprecated use `ExpirationProduction$inboundSchema` instead. */
    ExpirationProduction$.inboundSchema = ExpirationProduction$inboundSchema;
    /** @deprecated use `ExpirationProduction$outboundSchema` instead. */
    ExpirationProduction$.outboundSchema = ExpirationProduction$outboundSchema;
})(ExpirationProduction$ || (ExpirationProduction$ = {}));
/** @internal */
export const ExpirationCanceled$inboundSchema = z.nativeEnum(ExpirationCanceled);
/** @internal */
export const ExpirationCanceled$outboundSchema = ExpirationCanceled$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ExpirationCanceled$;
(function (ExpirationCanceled$) {
    /** @deprecated use `ExpirationCanceled$inboundSchema` instead. */
    ExpirationCanceled$.inboundSchema = ExpirationCanceled$inboundSchema;
    /** @deprecated use `ExpirationCanceled$outboundSchema` instead. */
    ExpirationCanceled$.outboundSchema = ExpirationCanceled$outboundSchema;
})(ExpirationCanceled$ || (ExpirationCanceled$ = {}));
/** @internal */
export const ExpirationErrored$inboundSchema = z.nativeEnum(ExpirationErrored);
/** @internal */
export const ExpirationErrored$outboundSchema = ExpirationErrored$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ExpirationErrored$;
(function (ExpirationErrored$) {
    /** @deprecated use `ExpirationErrored$inboundSchema` instead. */
    ExpirationErrored$.inboundSchema = ExpirationErrored$inboundSchema;
    /** @deprecated use `ExpirationErrored$outboundSchema` instead. */
    ExpirationErrored$.outboundSchema = ExpirationErrored$outboundSchema;
})(ExpirationErrored$ || (ExpirationErrored$ = {}));
/** @internal */
export const PatchTeamDefaultExpirationSettings$inboundSchema = z.object({
    expiration: Expiration$inboundSchema.optional(),
    expirationProduction: ExpirationProduction$inboundSchema.optional(),
    expirationCanceled: ExpirationCanceled$inboundSchema.optional(),
    expirationErrored: ExpirationErrored$inboundSchema.optional(),
});
/** @internal */
export const PatchTeamDefaultExpirationSettings$outboundSchema = z.object({
    expiration: Expiration$outboundSchema.optional(),
    expirationProduction: ExpirationProduction$outboundSchema.optional(),
    expirationCanceled: ExpirationCanceled$outboundSchema.optional(),
    expirationErrored: ExpirationErrored$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PatchTeamDefaultExpirationSettings$;
(function (PatchTeamDefaultExpirationSettings$) {
    /** @deprecated use `PatchTeamDefaultExpirationSettings$inboundSchema` instead. */
    PatchTeamDefaultExpirationSettings$.inboundSchema = PatchTeamDefaultExpirationSettings$inboundSchema;
    /** @deprecated use `PatchTeamDefaultExpirationSettings$outboundSchema` instead. */
    PatchTeamDefaultExpirationSettings$.outboundSchema = PatchTeamDefaultExpirationSettings$outboundSchema;
})(PatchTeamDefaultExpirationSettings$ || (PatchTeamDefaultExpirationSettings$ = {}));
export function patchTeamDefaultExpirationSettingsToJSON(patchTeamDefaultExpirationSettings) {
    return JSON.stringify(PatchTeamDefaultExpirationSettings$outboundSchema.parse(patchTeamDefaultExpirationSettings));
}
export function patchTeamDefaultExpirationSettingsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PatchTeamDefaultExpirationSettings$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PatchTeamDefaultExpirationSettings' from JSON`);
}
/** @internal */
export const PatchTeamRequestBody$inboundSchema = z.object({
    avatar: z.string().optional(),
    description: z.string().optional(),
    emailDomain: z.nullable(z.string()).optional(),
    name: z.string().optional(),
    previewDeploymentSuffix: z.nullable(z.string()).optional(),
    regenerateInviteCode: z.boolean().optional(),
    saml: z.lazy(() => PatchTeamSaml$inboundSchema).optional(),
    slug: z.string().optional(),
    enablePreviewFeedback: z.string().optional(),
    enableProductionFeedback: z.string().optional(),
    sensitiveEnvironmentVariablePolicy: z.string().optional(),
    remoteCaching: z.lazy(() => PatchTeamRemoteCaching$inboundSchema).optional(),
    hideIpAddresses: z.boolean().optional(),
    hideIpAddressesInLogDrains: z.boolean().optional(),
    defaultDeploymentProtection: z.lazy(() => PatchTeamDefaultDeploymentProtection$inboundSchema).optional(),
    defaultExpirationSettings: z.lazy(() => PatchTeamDefaultExpirationSettings$inboundSchema).optional(),
});
/** @internal */
export const PatchTeamRequestBody$outboundSchema = z.object({
    avatar: z.string().optional(),
    description: z.string().optional(),
    emailDomain: z.nullable(z.string()).optional(),
    name: z.string().optional(),
    previewDeploymentSuffix: z.nullable(z.string()).optional(),
    regenerateInviteCode: z.boolean().optional(),
    saml: z.lazy(() => PatchTeamSaml$outboundSchema).optional(),
    slug: z.string().optional(),
    enablePreviewFeedback: z.string().optional(),
    enableProductionFeedback: z.string().optional(),
    sensitiveEnvironmentVariablePolicy: z.string().optional(),
    remoteCaching: z.lazy(() => PatchTeamRemoteCaching$outboundSchema).optional(),
    hideIpAddresses: z.boolean().optional(),
    hideIpAddressesInLogDrains: z.boolean().optional(),
    defaultDeploymentProtection: z.lazy(() => PatchTeamDefaultDeploymentProtection$outboundSchema).optional(),
    defaultExpirationSettings: z.lazy(() => PatchTeamDefaultExpirationSettings$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PatchTeamRequestBody$;
(function (PatchTeamRequestBody$) {
    /** @deprecated use `PatchTeamRequestBody$inboundSchema` instead. */
    PatchTeamRequestBody$.inboundSchema = PatchTeamRequestBody$inboundSchema;
    /** @deprecated use `PatchTeamRequestBody$outboundSchema` instead. */
    PatchTeamRequestBody$.outboundSchema = PatchTeamRequestBody$outboundSchema;
})(PatchTeamRequestBody$ || (PatchTeamRequestBody$ = {}));
export function patchTeamRequestBodyToJSON(patchTeamRequestBody) {
    return JSON.stringify(PatchTeamRequestBody$outboundSchema.parse(patchTeamRequestBody));
}
export function patchTeamRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PatchTeamRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PatchTeamRequestBody' from JSON`);
}
/** @internal */
export const PatchTeamRequest$inboundSchema = z.object({
    teamId: z.string(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => PatchTeamRequestBody$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const PatchTeamRequest$outboundSchema = z.object({
    teamId: z.string(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => PatchTeamRequestBody$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PatchTeamRequest$;
(function (PatchTeamRequest$) {
    /** @deprecated use `PatchTeamRequest$inboundSchema` instead. */
    PatchTeamRequest$.inboundSchema = PatchTeamRequest$inboundSchema;
    /** @deprecated use `PatchTeamRequest$outboundSchema` instead. */
    PatchTeamRequest$.outboundSchema = PatchTeamRequest$outboundSchema;
})(PatchTeamRequest$ || (PatchTeamRequest$ = {}));
export function patchTeamRequestToJSON(patchTeamRequest) {
    return JSON.stringify(PatchTeamRequest$outboundSchema.parse(patchTeamRequest));
}
export function patchTeamRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PatchTeamRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PatchTeamRequest' from JSON`);
}
//# sourceMappingURL=patchteamop.js.map