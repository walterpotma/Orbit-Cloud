/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
export const RequestBodyAction = {
    Refund: "refund",
};
/** @internal */
export const RequestBodyAction$inboundSchema = z.nativeEnum(RequestBodyAction);
/** @internal */
export const RequestBodyAction$outboundSchema = RequestBodyAction$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RequestBodyAction$;
(function (RequestBodyAction$) {
    /** @deprecated use `RequestBodyAction$inboundSchema` instead. */
    RequestBodyAction$.inboundSchema = RequestBodyAction$inboundSchema;
    /** @deprecated use `RequestBodyAction$outboundSchema` instead. */
    RequestBodyAction$.outboundSchema = RequestBodyAction$outboundSchema;
})(RequestBodyAction$ || (RequestBodyAction$ = {}));
/** @internal */
export const UpdateInvoiceRequestBody1$inboundSchema = z.object({
    action: RequestBodyAction$inboundSchema,
    reason: z.string(),
    total: z.string(),
});
/** @internal */
export const UpdateInvoiceRequestBody1$outboundSchema = z.object({
    action: RequestBodyAction$outboundSchema,
    reason: z.string(),
    total: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateInvoiceRequestBody1$;
(function (UpdateInvoiceRequestBody1$) {
    /** @deprecated use `UpdateInvoiceRequestBody1$inboundSchema` instead. */
    UpdateInvoiceRequestBody1$.inboundSchema = UpdateInvoiceRequestBody1$inboundSchema;
    /** @deprecated use `UpdateInvoiceRequestBody1$outboundSchema` instead. */
    UpdateInvoiceRequestBody1$.outboundSchema = UpdateInvoiceRequestBody1$outboundSchema;
})(UpdateInvoiceRequestBody1$ || (UpdateInvoiceRequestBody1$ = {}));
export function updateInvoiceRequestBody1ToJSON(updateInvoiceRequestBody1) {
    return JSON.stringify(UpdateInvoiceRequestBody1$outboundSchema.parse(updateInvoiceRequestBody1));
}
export function updateInvoiceRequestBody1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateInvoiceRequestBody1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateInvoiceRequestBody1' from JSON`);
}
/** @internal */
export const UpdateInvoiceRequestBody$inboundSchema = z.lazy(() => UpdateInvoiceRequestBody1$inboundSchema);
/** @internal */
export const UpdateInvoiceRequestBody$outboundSchema = z.lazy(() => UpdateInvoiceRequestBody1$outboundSchema);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateInvoiceRequestBody$;
(function (UpdateInvoiceRequestBody$) {
    /** @deprecated use `UpdateInvoiceRequestBody$inboundSchema` instead. */
    UpdateInvoiceRequestBody$.inboundSchema = UpdateInvoiceRequestBody$inboundSchema;
    /** @deprecated use `UpdateInvoiceRequestBody$outboundSchema` instead. */
    UpdateInvoiceRequestBody$.outboundSchema = UpdateInvoiceRequestBody$outboundSchema;
})(UpdateInvoiceRequestBody$ || (UpdateInvoiceRequestBody$ = {}));
export function updateInvoiceRequestBodyToJSON(updateInvoiceRequestBody) {
    return JSON.stringify(UpdateInvoiceRequestBody$outboundSchema.parse(updateInvoiceRequestBody));
}
export function updateInvoiceRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateInvoiceRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateInvoiceRequestBody' from JSON`);
}
/** @internal */
export const UpdateInvoiceRequest$inboundSchema = z.object({
    integrationConfigurationId: z.string(),
    invoiceId: z.string(),
    RequestBody: z.lazy(() => UpdateInvoiceRequestBody1$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const UpdateInvoiceRequest$outboundSchema = z.object({
    integrationConfigurationId: z.string(),
    invoiceId: z.string(),
    requestBody: z.lazy(() => UpdateInvoiceRequestBody1$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateInvoiceRequest$;
(function (UpdateInvoiceRequest$) {
    /** @deprecated use `UpdateInvoiceRequest$inboundSchema` instead. */
    UpdateInvoiceRequest$.inboundSchema = UpdateInvoiceRequest$inboundSchema;
    /** @deprecated use `UpdateInvoiceRequest$outboundSchema` instead. */
    UpdateInvoiceRequest$.outboundSchema = UpdateInvoiceRequest$outboundSchema;
})(UpdateInvoiceRequest$ || (UpdateInvoiceRequest$ = {}));
export function updateInvoiceRequestToJSON(updateInvoiceRequest) {
    return JSON.stringify(UpdateInvoiceRequest$outboundSchema.parse(updateInvoiceRequest));
}
export function updateInvoiceRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateInvoiceRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateInvoiceRequest' from JSON`);
}
//# sourceMappingURL=updateinvoiceop.js.map