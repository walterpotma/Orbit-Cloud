/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Pagination$inboundSchema, Pagination$outboundSchema, } from "./pagination.js";
/**
 * The source of the deployment.
 */
export const GetDeploymentsSource = {
    ApiTriggerGitDeploy: "api-trigger-git-deploy",
    Cli: "cli",
    CloneRepo: "clone/repo",
    Git: "git",
    Import: "import",
    ImportRepo: "import/repo",
    Redeploy: "redeploy",
    V0Web: "v0-web",
};
/**
 * In which state is the deployment.
 */
export const GetDeploymentsState = {
    Building: "BUILDING",
    Error: "ERROR",
    Initializing: "INITIALIZING",
    Queued: "QUEUED",
    Ready: "READY",
    Canceled: "CANCELED",
    Deleted: "DELETED",
};
/**
 * In which state is the deployment.
 */
export const GetDeploymentsReadyState = {
    Building: "BUILDING",
    Error: "ERROR",
    Initializing: "INITIALIZING",
    Queued: "QUEUED",
    Ready: "READY",
    Canceled: "CANCELED",
    Deleted: "DELETED",
};
/**
 * The type of the deployment.
 */
export const GetDeploymentsType = {
    Lambdas: "LAMBDAS",
};
/**
 * On which environment has the deployment been deployed to.
 */
export const GetDeploymentsTarget = {
    Production: "production",
    Staging: "staging",
};
/**
 * Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - ROLLING: in the process of gradually transitioning production traffic - PROMOTED: has seen production traffic
 */
export const GetDeploymentsReadySubstate = {
    Staged: "STAGED",
    Rolling: "ROLLING",
    Promoted: "PROMOTED",
};
/**
 * State of all registered checks
 */
export const GetDeploymentsChecksState = {
    Registered: "registered",
    Running: "running",
    Completed: "completed",
};
/**
 * Conclusion for checks
 */
export const GetDeploymentsChecksConclusion = {
    Succeeded: "succeeded",
    Failed: "failed",
    Skipped: "skipped",
    Canceled: "canceled",
};
export const GetDeploymentsDeploymentsState = {
    Succeeded: "succeeded",
    Failed: "failed",
    Pending: "pending",
};
/**
 * Indicates if the deployment encountered an out-of-memory error.
 */
export const GetDeploymentsOomReport = {
    OutOfMemory: "out-of-memory",
};
export const GetDeploymentsFramework = {
    Blitzjs: "blitzjs",
    Nextjs: "nextjs",
    Gatsby: "gatsby",
    Remix: "remix",
    ReactRouter: "react-router",
    Astro: "astro",
    Hexo: "hexo",
    Eleventy: "eleventy",
    Docusaurus2: "docusaurus-2",
    Docusaurus: "docusaurus",
    Preact: "preact",
    Solidstart1: "solidstart-1",
    Solidstart: "solidstart",
    Dojo: "dojo",
    Ember: "ember",
    Vue: "vue",
    Scully: "scully",
    IonicAngular: "ionic-angular",
    Angular: "angular",
    Polymer: "polymer",
    Svelte: "svelte",
    Sveltekit: "sveltekit",
    Sveltekit1: "sveltekit-1",
    IonicReact: "ionic-react",
    CreateReactApp: "create-react-app",
    Gridsome: "gridsome",
    Umijs: "umijs",
    Sapper: "sapper",
    Saber: "saber",
    Stencil: "stencil",
    Nuxtjs: "nuxtjs",
    Redwoodjs: "redwoodjs",
    Hugo: "hugo",
    Jekyll: "jekyll",
    Brunch: "brunch",
    Middleman: "middleman",
    Zola: "zola",
    Hydrogen: "hydrogen",
    Vite: "vite",
    Vitepress: "vitepress",
    Vuepress: "vuepress",
    Parcel: "parcel",
    Fastapi: "fastapi",
    Fasthtml: "fasthtml",
    SanityV3: "sanity-v3",
    Sanity: "sanity",
    Storybook: "storybook",
    Nitro: "nitro",
    Hono: "hono",
    Express: "express",
    Xmcp: "xmcp",
};
export const GetDeploymentsNodeVersion = {
    TwentyTwoDotX: "22.x",
    TwentyDotX: "20.x",
    EighteenDotX: "18.x",
    SixteenDotX: "16.x",
    FourteenDotX: "14.x",
    TwelveDotX: "12.x",
    TenDotX: "10.x",
    EightDot10DotX: "8.10.x",
};
/** @internal */
export const GetDeploymentsRequest$inboundSchema = z.object({
    app: z.string().optional(),
    from: z.number().optional(),
    limit: z.number().optional(),
    projectId: z.string().optional(),
    target: z.string().optional(),
    to: z.number().optional(),
    users: z.string().optional(),
    since: z.number().optional(),
    until: z.number().optional(),
    state: z.string().optional(),
    rollbackCandidate: z.boolean().optional(),
    branch: z.string().optional(),
    sha: z.string().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/** @internal */
export const GetDeploymentsRequest$outboundSchema = z.object({
    app: z.string().optional(),
    from: z.number().optional(),
    limit: z.number().optional(),
    projectId: z.string().optional(),
    target: z.string().optional(),
    to: z.number().optional(),
    users: z.string().optional(),
    since: z.number().optional(),
    until: z.number().optional(),
    state: z.string().optional(),
    rollbackCandidate: z.boolean().optional(),
    branch: z.string().optional(),
    sha: z.string().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentsRequest$;
(function (GetDeploymentsRequest$) {
    /** @deprecated use `GetDeploymentsRequest$inboundSchema` instead. */
    GetDeploymentsRequest$.inboundSchema = GetDeploymentsRequest$inboundSchema;
    /** @deprecated use `GetDeploymentsRequest$outboundSchema` instead. */
    GetDeploymentsRequest$.outboundSchema = GetDeploymentsRequest$outboundSchema;
})(GetDeploymentsRequest$ || (GetDeploymentsRequest$ = {}));
export function getDeploymentsRequestToJSON(getDeploymentsRequest) {
    return JSON.stringify(GetDeploymentsRequest$outboundSchema.parse(getDeploymentsRequest));
}
export function getDeploymentsRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentsRequest' from JSON`);
}
/** @internal */
export const GetDeploymentsSource$inboundSchema = z.nativeEnum(GetDeploymentsSource);
/** @internal */
export const GetDeploymentsSource$outboundSchema = GetDeploymentsSource$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentsSource$;
(function (GetDeploymentsSource$) {
    /** @deprecated use `GetDeploymentsSource$inboundSchema` instead. */
    GetDeploymentsSource$.inboundSchema = GetDeploymentsSource$inboundSchema;
    /** @deprecated use `GetDeploymentsSource$outboundSchema` instead. */
    GetDeploymentsSource$.outboundSchema = GetDeploymentsSource$outboundSchema;
})(GetDeploymentsSource$ || (GetDeploymentsSource$ = {}));
/** @internal */
export const GetDeploymentsState$inboundSchema = z.nativeEnum(GetDeploymentsState);
/** @internal */
export const GetDeploymentsState$outboundSchema = GetDeploymentsState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentsState$;
(function (GetDeploymentsState$) {
    /** @deprecated use `GetDeploymentsState$inboundSchema` instead. */
    GetDeploymentsState$.inboundSchema = GetDeploymentsState$inboundSchema;
    /** @deprecated use `GetDeploymentsState$outboundSchema` instead. */
    GetDeploymentsState$.outboundSchema = GetDeploymentsState$outboundSchema;
})(GetDeploymentsState$ || (GetDeploymentsState$ = {}));
/** @internal */
export const GetDeploymentsReadyState$inboundSchema = z.nativeEnum(GetDeploymentsReadyState);
/** @internal */
export const GetDeploymentsReadyState$outboundSchema = GetDeploymentsReadyState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentsReadyState$;
(function (GetDeploymentsReadyState$) {
    /** @deprecated use `GetDeploymentsReadyState$inboundSchema` instead. */
    GetDeploymentsReadyState$.inboundSchema = GetDeploymentsReadyState$inboundSchema;
    /** @deprecated use `GetDeploymentsReadyState$outboundSchema` instead. */
    GetDeploymentsReadyState$.outboundSchema = GetDeploymentsReadyState$outboundSchema;
})(GetDeploymentsReadyState$ || (GetDeploymentsReadyState$ = {}));
/** @internal */
export const GetDeploymentsType$inboundSchema = z.nativeEnum(GetDeploymentsType);
/** @internal */
export const GetDeploymentsType$outboundSchema = GetDeploymentsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentsType$;
(function (GetDeploymentsType$) {
    /** @deprecated use `GetDeploymentsType$inboundSchema` instead. */
    GetDeploymentsType$.inboundSchema = GetDeploymentsType$inboundSchema;
    /** @deprecated use `GetDeploymentsType$outboundSchema` instead. */
    GetDeploymentsType$.outboundSchema = GetDeploymentsType$outboundSchema;
})(GetDeploymentsType$ || (GetDeploymentsType$ = {}));
/** @internal */
export const GetDeploymentsCreator$inboundSchema = z.object({
    uid: z.string(),
    email: z.string().optional(),
    username: z.string().optional(),
    githubLogin: z.string().optional(),
    gitlabLogin: z.string().optional(),
});
/** @internal */
export const GetDeploymentsCreator$outboundSchema = z.object({
    uid: z.string(),
    email: z.string().optional(),
    username: z.string().optional(),
    githubLogin: z.string().optional(),
    gitlabLogin: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentsCreator$;
(function (GetDeploymentsCreator$) {
    /** @deprecated use `GetDeploymentsCreator$inboundSchema` instead. */
    GetDeploymentsCreator$.inboundSchema = GetDeploymentsCreator$inboundSchema;
    /** @deprecated use `GetDeploymentsCreator$outboundSchema` instead. */
    GetDeploymentsCreator$.outboundSchema = GetDeploymentsCreator$outboundSchema;
})(GetDeploymentsCreator$ || (GetDeploymentsCreator$ = {}));
export function getDeploymentsCreatorToJSON(getDeploymentsCreator) {
    return JSON.stringify(GetDeploymentsCreator$outboundSchema.parse(getDeploymentsCreator));
}
export function getDeploymentsCreatorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentsCreator$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentsCreator' from JSON`);
}
/** @internal */
export const GetDeploymentsTarget$inboundSchema = z.nativeEnum(GetDeploymentsTarget);
/** @internal */
export const GetDeploymentsTarget$outboundSchema = GetDeploymentsTarget$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentsTarget$;
(function (GetDeploymentsTarget$) {
    /** @deprecated use `GetDeploymentsTarget$inboundSchema` instead. */
    GetDeploymentsTarget$.inboundSchema = GetDeploymentsTarget$inboundSchema;
    /** @deprecated use `GetDeploymentsTarget$outboundSchema` instead. */
    GetDeploymentsTarget$.outboundSchema = GetDeploymentsTarget$outboundSchema;
})(GetDeploymentsTarget$ || (GetDeploymentsTarget$ = {}));
/** @internal */
export const GetDeploymentsAliasError$inboundSchema = z.object({
    code: z.string(),
    message: z.string(),
});
/** @internal */
export const GetDeploymentsAliasError$outboundSchema = z.object({
    code: z.string(),
    message: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentsAliasError$;
(function (GetDeploymentsAliasError$) {
    /** @deprecated use `GetDeploymentsAliasError$inboundSchema` instead. */
    GetDeploymentsAliasError$.inboundSchema = GetDeploymentsAliasError$inboundSchema;
    /** @deprecated use `GetDeploymentsAliasError$outboundSchema` instead. */
    GetDeploymentsAliasError$.outboundSchema = GetDeploymentsAliasError$outboundSchema;
})(GetDeploymentsAliasError$ || (GetDeploymentsAliasError$ = {}));
export function getDeploymentsAliasErrorToJSON(getDeploymentsAliasError) {
    return JSON.stringify(GetDeploymentsAliasError$outboundSchema.parse(getDeploymentsAliasError));
}
export function getDeploymentsAliasErrorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentsAliasError$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentsAliasError' from JSON`);
}
/** @internal */
export const GetDeploymentsAliasAssigned$inboundSchema = z.union([z.number(), z.boolean()]);
/** @internal */
export const GetDeploymentsAliasAssigned$outboundSchema = z.union([z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentsAliasAssigned$;
(function (GetDeploymentsAliasAssigned$) {
    /** @deprecated use `GetDeploymentsAliasAssigned$inboundSchema` instead. */
    GetDeploymentsAliasAssigned$.inboundSchema = GetDeploymentsAliasAssigned$inboundSchema;
    /** @deprecated use `GetDeploymentsAliasAssigned$outboundSchema` instead. */
    GetDeploymentsAliasAssigned$.outboundSchema = GetDeploymentsAliasAssigned$outboundSchema;
})(GetDeploymentsAliasAssigned$ || (GetDeploymentsAliasAssigned$ = {}));
export function getDeploymentsAliasAssignedToJSON(getDeploymentsAliasAssigned) {
    return JSON.stringify(GetDeploymentsAliasAssigned$outboundSchema.parse(getDeploymentsAliasAssigned));
}
export function getDeploymentsAliasAssignedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentsAliasAssigned$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentsAliasAssigned' from JSON`);
}
/** @internal */
export const GetDeploymentsReadySubstate$inboundSchema = z.nativeEnum(GetDeploymentsReadySubstate);
/** @internal */
export const GetDeploymentsReadySubstate$outboundSchema = GetDeploymentsReadySubstate$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentsReadySubstate$;
(function (GetDeploymentsReadySubstate$) {
    /** @deprecated use `GetDeploymentsReadySubstate$inboundSchema` instead. */
    GetDeploymentsReadySubstate$.inboundSchema = GetDeploymentsReadySubstate$inboundSchema;
    /** @deprecated use `GetDeploymentsReadySubstate$outboundSchema` instead. */
    GetDeploymentsReadySubstate$.outboundSchema = GetDeploymentsReadySubstate$outboundSchema;
})(GetDeploymentsReadySubstate$ || (GetDeploymentsReadySubstate$ = {}));
/** @internal */
export const GetDeploymentsChecksState$inboundSchema = z.nativeEnum(GetDeploymentsChecksState);
/** @internal */
export const GetDeploymentsChecksState$outboundSchema = GetDeploymentsChecksState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentsChecksState$;
(function (GetDeploymentsChecksState$) {
    /** @deprecated use `GetDeploymentsChecksState$inboundSchema` instead. */
    GetDeploymentsChecksState$.inboundSchema = GetDeploymentsChecksState$inboundSchema;
    /** @deprecated use `GetDeploymentsChecksState$outboundSchema` instead. */
    GetDeploymentsChecksState$.outboundSchema = GetDeploymentsChecksState$outboundSchema;
})(GetDeploymentsChecksState$ || (GetDeploymentsChecksState$ = {}));
/** @internal */
export const GetDeploymentsChecksConclusion$inboundSchema = z.nativeEnum(GetDeploymentsChecksConclusion);
/** @internal */
export const GetDeploymentsChecksConclusion$outboundSchema = GetDeploymentsChecksConclusion$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentsChecksConclusion$;
(function (GetDeploymentsChecksConclusion$) {
    /** @deprecated use `GetDeploymentsChecksConclusion$inboundSchema` instead. */
    GetDeploymentsChecksConclusion$.inboundSchema = GetDeploymentsChecksConclusion$inboundSchema;
    /** @deprecated use `GetDeploymentsChecksConclusion$outboundSchema` instead. */
    GetDeploymentsChecksConclusion$.outboundSchema = GetDeploymentsChecksConclusion$outboundSchema;
})(GetDeploymentsChecksConclusion$ || (GetDeploymentsChecksConclusion$ = {}));
/** @internal */
export const GetDeploymentsDeploymentsState$inboundSchema = z.nativeEnum(GetDeploymentsDeploymentsState);
/** @internal */
export const GetDeploymentsDeploymentsState$outboundSchema = GetDeploymentsDeploymentsState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentsDeploymentsState$;
(function (GetDeploymentsDeploymentsState$) {
    /** @deprecated use `GetDeploymentsDeploymentsState$inboundSchema` instead. */
    GetDeploymentsDeploymentsState$.inboundSchema = GetDeploymentsDeploymentsState$inboundSchema;
    /** @deprecated use `GetDeploymentsDeploymentsState$outboundSchema` instead. */
    GetDeploymentsDeploymentsState$.outboundSchema = GetDeploymentsDeploymentsState$outboundSchema;
})(GetDeploymentsDeploymentsState$ || (GetDeploymentsDeploymentsState$ = {}));
/** @internal */
export const GetDeploymentsDeploymentAlias$inboundSchema = z.object({
    state: GetDeploymentsDeploymentsState$inboundSchema,
    startedAt: z.number(),
    completedAt: z.number().optional(),
});
/** @internal */
export const GetDeploymentsDeploymentAlias$outboundSchema = z.object({
    state: GetDeploymentsDeploymentsState$outboundSchema,
    startedAt: z.number(),
    completedAt: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentsDeploymentAlias$;
(function (GetDeploymentsDeploymentAlias$) {
    /** @deprecated use `GetDeploymentsDeploymentAlias$inboundSchema` instead. */
    GetDeploymentsDeploymentAlias$.inboundSchema = GetDeploymentsDeploymentAlias$inboundSchema;
    /** @deprecated use `GetDeploymentsDeploymentAlias$outboundSchema` instead. */
    GetDeploymentsDeploymentAlias$.outboundSchema = GetDeploymentsDeploymentAlias$outboundSchema;
})(GetDeploymentsDeploymentAlias$ || (GetDeploymentsDeploymentAlias$ = {}));
export function getDeploymentsDeploymentAliasToJSON(getDeploymentsDeploymentAlias) {
    return JSON.stringify(GetDeploymentsDeploymentAlias$outboundSchema.parse(getDeploymentsDeploymentAlias));
}
export function getDeploymentsDeploymentAliasFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentsDeploymentAlias$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentsDeploymentAlias' from JSON`);
}
/** @internal */
export const GetDeploymentsChecks$inboundSchema = z.object({
    "deployment-alias": z.lazy(() => GetDeploymentsDeploymentAlias$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "deployment-alias": "deploymentAlias",
    });
});
/** @internal */
export const GetDeploymentsChecks$outboundSchema = z.object({
    deploymentAlias: z.lazy(() => GetDeploymentsDeploymentAlias$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        deploymentAlias: "deployment-alias",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentsChecks$;
(function (GetDeploymentsChecks$) {
    /** @deprecated use `GetDeploymentsChecks$inboundSchema` instead. */
    GetDeploymentsChecks$.inboundSchema = GetDeploymentsChecks$inboundSchema;
    /** @deprecated use `GetDeploymentsChecks$outboundSchema` instead. */
    GetDeploymentsChecks$.outboundSchema = GetDeploymentsChecks$outboundSchema;
})(GetDeploymentsChecks$ || (GetDeploymentsChecks$ = {}));
export function getDeploymentsChecksToJSON(getDeploymentsChecks) {
    return JSON.stringify(GetDeploymentsChecks$outboundSchema.parse(getDeploymentsChecks));
}
export function getDeploymentsChecksFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentsChecks$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentsChecks' from JSON`);
}
/** @internal */
export const GetDeploymentsOomReport$inboundSchema = z.nativeEnum(GetDeploymentsOomReport);
/** @internal */
export const GetDeploymentsOomReport$outboundSchema = GetDeploymentsOomReport$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentsOomReport$;
(function (GetDeploymentsOomReport$) {
    /** @deprecated use `GetDeploymentsOomReport$inboundSchema` instead. */
    GetDeploymentsOomReport$.inboundSchema = GetDeploymentsOomReport$inboundSchema;
    /** @deprecated use `GetDeploymentsOomReport$outboundSchema` instead. */
    GetDeploymentsOomReport$.outboundSchema = GetDeploymentsOomReport$outboundSchema;
})(GetDeploymentsOomReport$ || (GetDeploymentsOomReport$ = {}));
/** @internal */
export const GetDeploymentsFramework$inboundSchema = z.nativeEnum(GetDeploymentsFramework);
/** @internal */
export const GetDeploymentsFramework$outboundSchema = GetDeploymentsFramework$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentsFramework$;
(function (GetDeploymentsFramework$) {
    /** @deprecated use `GetDeploymentsFramework$inboundSchema` instead. */
    GetDeploymentsFramework$.inboundSchema = GetDeploymentsFramework$inboundSchema;
    /** @deprecated use `GetDeploymentsFramework$outboundSchema` instead. */
    GetDeploymentsFramework$.outboundSchema = GetDeploymentsFramework$outboundSchema;
})(GetDeploymentsFramework$ || (GetDeploymentsFramework$ = {}));
/** @internal */
export const GetDeploymentsNodeVersion$inboundSchema = z.nativeEnum(GetDeploymentsNodeVersion);
/** @internal */
export const GetDeploymentsNodeVersion$outboundSchema = GetDeploymentsNodeVersion$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentsNodeVersion$;
(function (GetDeploymentsNodeVersion$) {
    /** @deprecated use `GetDeploymentsNodeVersion$inboundSchema` instead. */
    GetDeploymentsNodeVersion$.inboundSchema = GetDeploymentsNodeVersion$inboundSchema;
    /** @deprecated use `GetDeploymentsNodeVersion$outboundSchema` instead. */
    GetDeploymentsNodeVersion$.outboundSchema = GetDeploymentsNodeVersion$outboundSchema;
})(GetDeploymentsNodeVersion$ || (GetDeploymentsNodeVersion$ = {}));
/** @internal */
export const GetDeploymentsSpeedInsights$inboundSchema = z.object({
    id: z.string(),
    enabledAt: z.number().optional(),
    disabledAt: z.number().optional(),
    canceledAt: z.number().optional(),
    hasData: z.boolean().optional(),
    paidAt: z.number().optional(),
});
/** @internal */
export const GetDeploymentsSpeedInsights$outboundSchema = z.object({
    id: z.string(),
    enabledAt: z.number().optional(),
    disabledAt: z.number().optional(),
    canceledAt: z.number().optional(),
    hasData: z.boolean().optional(),
    paidAt: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentsSpeedInsights$;
(function (GetDeploymentsSpeedInsights$) {
    /** @deprecated use `GetDeploymentsSpeedInsights$inboundSchema` instead. */
    GetDeploymentsSpeedInsights$.inboundSchema = GetDeploymentsSpeedInsights$inboundSchema;
    /** @deprecated use `GetDeploymentsSpeedInsights$outboundSchema` instead. */
    GetDeploymentsSpeedInsights$.outboundSchema = GetDeploymentsSpeedInsights$outboundSchema;
})(GetDeploymentsSpeedInsights$ || (GetDeploymentsSpeedInsights$ = {}));
export function getDeploymentsSpeedInsightsToJSON(getDeploymentsSpeedInsights) {
    return JSON.stringify(GetDeploymentsSpeedInsights$outboundSchema.parse(getDeploymentsSpeedInsights));
}
export function getDeploymentsSpeedInsightsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentsSpeedInsights$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentsSpeedInsights' from JSON`);
}
/** @internal */
export const GetDeploymentsWebAnalytics$inboundSchema = z.object({
    id: z.string(),
    disabledAt: z.number().optional(),
    canceledAt: z.number().optional(),
    enabledAt: z.number().optional(),
    hasData: z.boolean().optional(),
});
/** @internal */
export const GetDeploymentsWebAnalytics$outboundSchema = z.object({
    id: z.string(),
    disabledAt: z.number().optional(),
    canceledAt: z.number().optional(),
    enabledAt: z.number().optional(),
    hasData: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentsWebAnalytics$;
(function (GetDeploymentsWebAnalytics$) {
    /** @deprecated use `GetDeploymentsWebAnalytics$inboundSchema` instead. */
    GetDeploymentsWebAnalytics$.inboundSchema = GetDeploymentsWebAnalytics$inboundSchema;
    /** @deprecated use `GetDeploymentsWebAnalytics$outboundSchema` instead. */
    GetDeploymentsWebAnalytics$.outboundSchema = GetDeploymentsWebAnalytics$outboundSchema;
})(GetDeploymentsWebAnalytics$ || (GetDeploymentsWebAnalytics$ = {}));
export function getDeploymentsWebAnalyticsToJSON(getDeploymentsWebAnalytics) {
    return JSON.stringify(GetDeploymentsWebAnalytics$outboundSchema.parse(getDeploymentsWebAnalytics));
}
export function getDeploymentsWebAnalyticsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentsWebAnalytics$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentsWebAnalytics' from JSON`);
}
/** @internal */
export const GetDeploymentsGitComments$inboundSchema = z.object({
    onPullRequest: z.boolean(),
    onCommit: z.boolean(),
});
/** @internal */
export const GetDeploymentsGitComments$outboundSchema = z.object({
    onPullRequest: z.boolean(),
    onCommit: z.boolean(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentsGitComments$;
(function (GetDeploymentsGitComments$) {
    /** @deprecated use `GetDeploymentsGitComments$inboundSchema` instead. */
    GetDeploymentsGitComments$.inboundSchema = GetDeploymentsGitComments$inboundSchema;
    /** @deprecated use `GetDeploymentsGitComments$outboundSchema` instead. */
    GetDeploymentsGitComments$.outboundSchema = GetDeploymentsGitComments$outboundSchema;
})(GetDeploymentsGitComments$ || (GetDeploymentsGitComments$ = {}));
export function getDeploymentsGitCommentsToJSON(getDeploymentsGitComments) {
    return JSON.stringify(GetDeploymentsGitComments$outboundSchema.parse(getDeploymentsGitComments));
}
export function getDeploymentsGitCommentsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentsGitComments$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentsGitComments' from JSON`);
}
/** @internal */
export const GetDeploymentsProjectSettings$inboundSchema = z.object({
    framework: z.nullable(GetDeploymentsFramework$inboundSchema).optional(),
    gitForkProtection: z.boolean().optional(),
    customerSupportCodeVisibility: z.boolean().optional(),
    gitLFS: z.boolean().optional(),
    devCommand: z.nullable(z.string()).optional(),
    installCommand: z.nullable(z.string()).optional(),
    buildCommand: z.nullable(z.string()).optional(),
    nodeVersion: GetDeploymentsNodeVersion$inboundSchema.optional(),
    outputDirectory: z.nullable(z.string()).optional(),
    publicSource: z.nullable(z.boolean()).optional(),
    rootDirectory: z.nullable(z.string()).optional(),
    sourceFilesOutsideRootDirectory: z.boolean().optional(),
    commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
    createdAt: z.number().optional(),
    speedInsights: z.lazy(() => GetDeploymentsSpeedInsights$inboundSchema)
        .optional(),
    webAnalytics: z.lazy(() => GetDeploymentsWebAnalytics$inboundSchema)
        .optional(),
    skipGitConnectDuringLink: z.boolean().optional(),
    gitComments: z.lazy(() => GetDeploymentsGitComments$inboundSchema).optional(),
});
/** @internal */
export const GetDeploymentsProjectSettings$outboundSchema = z.object({
    framework: z.nullable(GetDeploymentsFramework$outboundSchema).optional(),
    gitForkProtection: z.boolean().optional(),
    customerSupportCodeVisibility: z.boolean().optional(),
    gitLFS: z.boolean().optional(),
    devCommand: z.nullable(z.string()).optional(),
    installCommand: z.nullable(z.string()).optional(),
    buildCommand: z.nullable(z.string()).optional(),
    nodeVersion: GetDeploymentsNodeVersion$outboundSchema.optional(),
    outputDirectory: z.nullable(z.string()).optional(),
    publicSource: z.nullable(z.boolean()).optional(),
    rootDirectory: z.nullable(z.string()).optional(),
    sourceFilesOutsideRootDirectory: z.boolean().optional(),
    commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
    createdAt: z.number().optional(),
    speedInsights: z.lazy(() => GetDeploymentsSpeedInsights$outboundSchema)
        .optional(),
    webAnalytics: z.lazy(() => GetDeploymentsWebAnalytics$outboundSchema)
        .optional(),
    skipGitConnectDuringLink: z.boolean().optional(),
    gitComments: z.lazy(() => GetDeploymentsGitComments$outboundSchema)
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentsProjectSettings$;
(function (GetDeploymentsProjectSettings$) {
    /** @deprecated use `GetDeploymentsProjectSettings$inboundSchema` instead. */
    GetDeploymentsProjectSettings$.inboundSchema = GetDeploymentsProjectSettings$inboundSchema;
    /** @deprecated use `GetDeploymentsProjectSettings$outboundSchema` instead. */
    GetDeploymentsProjectSettings$.outboundSchema = GetDeploymentsProjectSettings$outboundSchema;
})(GetDeploymentsProjectSettings$ || (GetDeploymentsProjectSettings$ = {}));
export function getDeploymentsProjectSettingsToJSON(getDeploymentsProjectSettings) {
    return JSON.stringify(GetDeploymentsProjectSettings$outboundSchema.parse(getDeploymentsProjectSettings));
}
export function getDeploymentsProjectSettingsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentsProjectSettings$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentsProjectSettings' from JSON`);
}
/** @internal */
export const GetDeploymentsCustomEnvironment$inboundSchema = z.object({
    id: z.string(),
    slug: z.string().optional(),
});
/** @internal */
export const GetDeploymentsCustomEnvironment$outboundSchema = z.object({
    id: z.string(),
    slug: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentsCustomEnvironment$;
(function (GetDeploymentsCustomEnvironment$) {
    /** @deprecated use `GetDeploymentsCustomEnvironment$inboundSchema` instead. */
    GetDeploymentsCustomEnvironment$.inboundSchema = GetDeploymentsCustomEnvironment$inboundSchema;
    /** @deprecated use `GetDeploymentsCustomEnvironment$outboundSchema` instead. */
    GetDeploymentsCustomEnvironment$.outboundSchema = GetDeploymentsCustomEnvironment$outboundSchema;
})(GetDeploymentsCustomEnvironment$ || (GetDeploymentsCustomEnvironment$ = {}));
export function getDeploymentsCustomEnvironmentToJSON(getDeploymentsCustomEnvironment) {
    return JSON.stringify(GetDeploymentsCustomEnvironment$outboundSchema.parse(getDeploymentsCustomEnvironment));
}
export function getDeploymentsCustomEnvironmentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentsCustomEnvironment$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentsCustomEnvironment' from JSON`);
}
/** @internal */
export const Deployments$inboundSchema = z.object({
    uid: z.string(),
    name: z.string(),
    projectId: z.string(),
    url: z.string(),
    created: z.number(),
    defaultRoute: z.string().optional(),
    deleted: z.number().optional(),
    undeleted: z.number().optional(),
    softDeletedByRetention: z.boolean().optional(),
    source: GetDeploymentsSource$inboundSchema.optional(),
    state: GetDeploymentsState$inboundSchema.optional(),
    readyState: GetDeploymentsReadyState$inboundSchema.optional(),
    type: GetDeploymentsType$inboundSchema,
    creator: z.lazy(() => GetDeploymentsCreator$inboundSchema),
    meta: z.record(z.string()).optional(),
    target: z.nullable(GetDeploymentsTarget$inboundSchema).optional(),
    aliasError: z.nullable(z.lazy(() => GetDeploymentsAliasError$inboundSchema))
        .optional(),
    aliasAssigned: z.nullable(z.union([z.number(), z.boolean()])).optional(),
    createdAt: z.number().optional(),
    buildingAt: z.number().optional(),
    ready: z.number().optional(),
    readySubstate: GetDeploymentsReadySubstate$inboundSchema.optional(),
    checksState: GetDeploymentsChecksState$inboundSchema.optional(),
    checksConclusion: GetDeploymentsChecksConclusion$inboundSchema.optional(),
    checks: z.lazy(() => GetDeploymentsChecks$inboundSchema).optional(),
    inspectorUrl: z.nullable(z.string()),
    errorCode: z.string().optional(),
    errorMessage: z.nullable(z.string()).optional(),
    oomReport: GetDeploymentsOomReport$inboundSchema.optional(),
    isRollbackCandidate: z.nullable(z.boolean()).optional(),
    projectSettings: z.lazy(() => GetDeploymentsProjectSettings$inboundSchema)
        .optional(),
    connectBuildsEnabled: z.boolean().optional(),
    connectConfigurationId: z.string().optional(),
    passiveConnectConfigurationId: z.string().optional(),
    expiration: z.number().optional(),
    proposedExpiration: z.number().optional(),
    customEnvironment: z.lazy(() => GetDeploymentsCustomEnvironment$inboundSchema)
        .optional(),
});
/** @internal */
export const Deployments$outboundSchema = z.object({
    uid: z.string(),
    name: z.string(),
    projectId: z.string(),
    url: z.string(),
    created: z.number(),
    defaultRoute: z.string().optional(),
    deleted: z.number().optional(),
    undeleted: z.number().optional(),
    softDeletedByRetention: z.boolean().optional(),
    source: GetDeploymentsSource$outboundSchema.optional(),
    state: GetDeploymentsState$outboundSchema.optional(),
    readyState: GetDeploymentsReadyState$outboundSchema.optional(),
    type: GetDeploymentsType$outboundSchema,
    creator: z.lazy(() => GetDeploymentsCreator$outboundSchema),
    meta: z.record(z.string()).optional(),
    target: z.nullable(GetDeploymentsTarget$outboundSchema).optional(),
    aliasError: z.nullable(z.lazy(() => GetDeploymentsAliasError$outboundSchema))
        .optional(),
    aliasAssigned: z.nullable(z.union([z.number(), z.boolean()])).optional(),
    createdAt: z.number().optional(),
    buildingAt: z.number().optional(),
    ready: z.number().optional(),
    readySubstate: GetDeploymentsReadySubstate$outboundSchema.optional(),
    checksState: GetDeploymentsChecksState$outboundSchema.optional(),
    checksConclusion: GetDeploymentsChecksConclusion$outboundSchema.optional(),
    checks: z.lazy(() => GetDeploymentsChecks$outboundSchema).optional(),
    inspectorUrl: z.nullable(z.string()),
    errorCode: z.string().optional(),
    errorMessage: z.nullable(z.string()).optional(),
    oomReport: GetDeploymentsOomReport$outboundSchema.optional(),
    isRollbackCandidate: z.nullable(z.boolean()).optional(),
    projectSettings: z.lazy(() => GetDeploymentsProjectSettings$outboundSchema)
        .optional(),
    connectBuildsEnabled: z.boolean().optional(),
    connectConfigurationId: z.string().optional(),
    passiveConnectConfigurationId: z.string().optional(),
    expiration: z.number().optional(),
    proposedExpiration: z.number().optional(),
    customEnvironment: z.lazy(() => GetDeploymentsCustomEnvironment$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Deployments$;
(function (Deployments$) {
    /** @deprecated use `Deployments$inboundSchema` instead. */
    Deployments$.inboundSchema = Deployments$inboundSchema;
    /** @deprecated use `Deployments$outboundSchema` instead. */
    Deployments$.outboundSchema = Deployments$outboundSchema;
})(Deployments$ || (Deployments$ = {}));
export function deploymentsToJSON(deployments) {
    return JSON.stringify(Deployments$outboundSchema.parse(deployments));
}
export function deploymentsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Deployments$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Deployments' from JSON`);
}
/** @internal */
export const GetDeploymentsResponseBody$inboundSchema = z.object({
    pagination: Pagination$inboundSchema,
    deployments: z.array(z.lazy(() => Deployments$inboundSchema)),
});
/** @internal */
export const GetDeploymentsResponseBody$outboundSchema = z.object({
    pagination: Pagination$outboundSchema,
    deployments: z.array(z.lazy(() => Deployments$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentsResponseBody$;
(function (GetDeploymentsResponseBody$) {
    /** @deprecated use `GetDeploymentsResponseBody$inboundSchema` instead. */
    GetDeploymentsResponseBody$.inboundSchema = GetDeploymentsResponseBody$inboundSchema;
    /** @deprecated use `GetDeploymentsResponseBody$outboundSchema` instead. */
    GetDeploymentsResponseBody$.outboundSchema = GetDeploymentsResponseBody$outboundSchema;
})(GetDeploymentsResponseBody$ || (GetDeploymentsResponseBody$ = {}));
export function getDeploymentsResponseBodyToJSON(getDeploymentsResponseBody) {
    return JSON.stringify(GetDeploymentsResponseBody$outboundSchema.parse(getDeploymentsResponseBody));
}
export function getDeploymentsResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentsResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentsResponseBody' from JSON`);
}
//# sourceMappingURL=getdeploymentsop.js.map