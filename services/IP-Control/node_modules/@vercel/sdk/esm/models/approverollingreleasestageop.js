/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/**
 * The current state of the rolling release
 */
export const ApproveRollingReleaseStageState = {
    Active: "ACTIVE",
    Complete: "COMPLETE",
    Aborted: "ABORTED",
};
export const ApproveRollingReleaseStageTarget = {
    Staging: "staging",
    Production: "production",
};
export const ApproveRollingReleaseStageSource = {
    ApiTriggerGitDeploy: "api-trigger-git-deploy",
    Cli: "cli",
    CloneRepo: "clone/repo",
    Git: "git",
    Import: "import",
    ImportRepo: "import/repo",
    Redeploy: "redeploy",
    V0Web: "v0-web",
};
export const ApproveRollingReleaseStageReadyState = {
    Building: "BUILDING",
    Error: "ERROR",
    Initializing: "INITIALIZING",
    Queued: "QUEUED",
    Ready: "READY",
    Canceled: "CANCELED",
};
export const ApproveRollingReleaseStageRollingReleaseTarget = {
    Staging: "staging",
    Production: "production",
};
export const ApproveRollingReleaseStageRollingReleaseSource = {
    ApiTriggerGitDeploy: "api-trigger-git-deploy",
    Cli: "cli",
    CloneRepo: "clone/repo",
    Git: "git",
    Import: "import",
    ImportRepo: "import/repo",
    Redeploy: "redeploy",
    V0Web: "v0-web",
};
export const ApproveRollingReleaseStageRollingReleaseReadyState = {
    Building: "BUILDING",
    Error: "ERROR",
    Initializing: "INITIALIZING",
    Queued: "QUEUED",
    Ready: "READY",
    Canceled: "CANCELED",
};
/**
 * The advancement type of the rolling release
 */
export const ApproveRollingReleaseStageAdvancementType = {
    Automatic: "automatic",
    ManualApproval: "manual-approval",
};
/** @internal */
export const ApproveRollingReleaseStageRequestBody$inboundSchema = z.object({
    nextStageIndex: z.number(),
    canaryDeploymentId: z.string(),
});
/** @internal */
export const ApproveRollingReleaseStageRequestBody$outboundSchema = z.object({
    nextStageIndex: z.number(),
    canaryDeploymentId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ApproveRollingReleaseStageRequestBody$;
(function (ApproveRollingReleaseStageRequestBody$) {
    /** @deprecated use `ApproveRollingReleaseStageRequestBody$inboundSchema` instead. */
    ApproveRollingReleaseStageRequestBody$.inboundSchema = ApproveRollingReleaseStageRequestBody$inboundSchema;
    /** @deprecated use `ApproveRollingReleaseStageRequestBody$outboundSchema` instead. */
    ApproveRollingReleaseStageRequestBody$.outboundSchema = ApproveRollingReleaseStageRequestBody$outboundSchema;
})(ApproveRollingReleaseStageRequestBody$ || (ApproveRollingReleaseStageRequestBody$ = {}));
export function approveRollingReleaseStageRequestBodyToJSON(approveRollingReleaseStageRequestBody) {
    return JSON.stringify(ApproveRollingReleaseStageRequestBody$outboundSchema.parse(approveRollingReleaseStageRequestBody));
}
export function approveRollingReleaseStageRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ApproveRollingReleaseStageRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ApproveRollingReleaseStageRequestBody' from JSON`);
}
/** @internal */
export const ApproveRollingReleaseStageRequest$inboundSchema = z.object({
    idOrName: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => ApproveRollingReleaseStageRequestBody$inboundSchema)
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const ApproveRollingReleaseStageRequest$outboundSchema = z.object({
    idOrName: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => ApproveRollingReleaseStageRequestBody$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ApproveRollingReleaseStageRequest$;
(function (ApproveRollingReleaseStageRequest$) {
    /** @deprecated use `ApproveRollingReleaseStageRequest$inboundSchema` instead. */
    ApproveRollingReleaseStageRequest$.inboundSchema = ApproveRollingReleaseStageRequest$inboundSchema;
    /** @deprecated use `ApproveRollingReleaseStageRequest$outboundSchema` instead. */
    ApproveRollingReleaseStageRequest$.outboundSchema = ApproveRollingReleaseStageRequest$outboundSchema;
})(ApproveRollingReleaseStageRequest$ || (ApproveRollingReleaseStageRequest$ = {}));
export function approveRollingReleaseStageRequestToJSON(approveRollingReleaseStageRequest) {
    return JSON.stringify(ApproveRollingReleaseStageRequest$outboundSchema.parse(approveRollingReleaseStageRequest));
}
export function approveRollingReleaseStageRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ApproveRollingReleaseStageRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ApproveRollingReleaseStageRequest' from JSON`);
}
/** @internal */
export const ApproveRollingReleaseStageState$inboundSchema = z.nativeEnum(ApproveRollingReleaseStageState);
/** @internal */
export const ApproveRollingReleaseStageState$outboundSchema = ApproveRollingReleaseStageState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ApproveRollingReleaseStageState$;
(function (ApproveRollingReleaseStageState$) {
    /** @deprecated use `ApproveRollingReleaseStageState$inboundSchema` instead. */
    ApproveRollingReleaseStageState$.inboundSchema = ApproveRollingReleaseStageState$inboundSchema;
    /** @deprecated use `ApproveRollingReleaseStageState$outboundSchema` instead. */
    ApproveRollingReleaseStageState$.outboundSchema = ApproveRollingReleaseStageState$outboundSchema;
})(ApproveRollingReleaseStageState$ || (ApproveRollingReleaseStageState$ = {}));
/** @internal */
export const ApproveRollingReleaseStageTarget$inboundSchema = z.nativeEnum(ApproveRollingReleaseStageTarget);
/** @internal */
export const ApproveRollingReleaseStageTarget$outboundSchema = ApproveRollingReleaseStageTarget$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ApproveRollingReleaseStageTarget$;
(function (ApproveRollingReleaseStageTarget$) {
    /** @deprecated use `ApproveRollingReleaseStageTarget$inboundSchema` instead. */
    ApproveRollingReleaseStageTarget$.inboundSchema = ApproveRollingReleaseStageTarget$inboundSchema;
    /** @deprecated use `ApproveRollingReleaseStageTarget$outboundSchema` instead. */
    ApproveRollingReleaseStageTarget$.outboundSchema = ApproveRollingReleaseStageTarget$outboundSchema;
})(ApproveRollingReleaseStageTarget$ || (ApproveRollingReleaseStageTarget$ = {}));
/** @internal */
export const ApproveRollingReleaseStageSource$inboundSchema = z.nativeEnum(ApproveRollingReleaseStageSource);
/** @internal */
export const ApproveRollingReleaseStageSource$outboundSchema = ApproveRollingReleaseStageSource$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ApproveRollingReleaseStageSource$;
(function (ApproveRollingReleaseStageSource$) {
    /** @deprecated use `ApproveRollingReleaseStageSource$inboundSchema` instead. */
    ApproveRollingReleaseStageSource$.inboundSchema = ApproveRollingReleaseStageSource$inboundSchema;
    /** @deprecated use `ApproveRollingReleaseStageSource$outboundSchema` instead. */
    ApproveRollingReleaseStageSource$.outboundSchema = ApproveRollingReleaseStageSource$outboundSchema;
})(ApproveRollingReleaseStageSource$ || (ApproveRollingReleaseStageSource$ = {}));
/** @internal */
export const ApproveRollingReleaseStageReadyState$inboundSchema = z.nativeEnum(ApproveRollingReleaseStageReadyState);
/** @internal */
export const ApproveRollingReleaseStageReadyState$outboundSchema = ApproveRollingReleaseStageReadyState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ApproveRollingReleaseStageReadyState$;
(function (ApproveRollingReleaseStageReadyState$) {
    /** @deprecated use `ApproveRollingReleaseStageReadyState$inboundSchema` instead. */
    ApproveRollingReleaseStageReadyState$.inboundSchema = ApproveRollingReleaseStageReadyState$inboundSchema;
    /** @deprecated use `ApproveRollingReleaseStageReadyState$outboundSchema` instead. */
    ApproveRollingReleaseStageReadyState$.outboundSchema = ApproveRollingReleaseStageReadyState$outboundSchema;
})(ApproveRollingReleaseStageReadyState$ || (ApproveRollingReleaseStageReadyState$ = {}));
/** @internal */
export const ApproveRollingReleaseStageCurrentDeployment$inboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    url: z.string(),
    target: z.nullable(ApproveRollingReleaseStageTarget$inboundSchema)
        .optional(),
    source: ApproveRollingReleaseStageSource$inboundSchema.optional(),
    createdAt: z.number(),
    readyState: ApproveRollingReleaseStageReadyState$inboundSchema,
    readyStateAt: z.number().optional(),
});
/** @internal */
export const ApproveRollingReleaseStageCurrentDeployment$outboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    url: z.string(),
    target: z.nullable(ApproveRollingReleaseStageTarget$outboundSchema)
        .optional(),
    source: ApproveRollingReleaseStageSource$outboundSchema.optional(),
    createdAt: z.number(),
    readyState: ApproveRollingReleaseStageReadyState$outboundSchema,
    readyStateAt: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ApproveRollingReleaseStageCurrentDeployment$;
(function (ApproveRollingReleaseStageCurrentDeployment$) {
    /** @deprecated use `ApproveRollingReleaseStageCurrentDeployment$inboundSchema` instead. */
    ApproveRollingReleaseStageCurrentDeployment$.inboundSchema = ApproveRollingReleaseStageCurrentDeployment$inboundSchema;
    /** @deprecated use `ApproveRollingReleaseStageCurrentDeployment$outboundSchema` instead. */
    ApproveRollingReleaseStageCurrentDeployment$.outboundSchema = ApproveRollingReleaseStageCurrentDeployment$outboundSchema;
})(ApproveRollingReleaseStageCurrentDeployment$ || (ApproveRollingReleaseStageCurrentDeployment$ = {}));
export function approveRollingReleaseStageCurrentDeploymentToJSON(approveRollingReleaseStageCurrentDeployment) {
    return JSON.stringify(ApproveRollingReleaseStageCurrentDeployment$outboundSchema.parse(approveRollingReleaseStageCurrentDeployment));
}
export function approveRollingReleaseStageCurrentDeploymentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ApproveRollingReleaseStageCurrentDeployment$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ApproveRollingReleaseStageCurrentDeployment' from JSON`);
}
/** @internal */
export const ApproveRollingReleaseStageRollingReleaseTarget$inboundSchema = z
    .nativeEnum(ApproveRollingReleaseStageRollingReleaseTarget);
/** @internal */
export const ApproveRollingReleaseStageRollingReleaseTarget$outboundSchema = ApproveRollingReleaseStageRollingReleaseTarget$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ApproveRollingReleaseStageRollingReleaseTarget$;
(function (ApproveRollingReleaseStageRollingReleaseTarget$) {
    /** @deprecated use `ApproveRollingReleaseStageRollingReleaseTarget$inboundSchema` instead. */
    ApproveRollingReleaseStageRollingReleaseTarget$.inboundSchema = ApproveRollingReleaseStageRollingReleaseTarget$inboundSchema;
    /** @deprecated use `ApproveRollingReleaseStageRollingReleaseTarget$outboundSchema` instead. */
    ApproveRollingReleaseStageRollingReleaseTarget$.outboundSchema = ApproveRollingReleaseStageRollingReleaseTarget$outboundSchema;
})(ApproveRollingReleaseStageRollingReleaseTarget$ || (ApproveRollingReleaseStageRollingReleaseTarget$ = {}));
/** @internal */
export const ApproveRollingReleaseStageRollingReleaseSource$inboundSchema = z
    .nativeEnum(ApproveRollingReleaseStageRollingReleaseSource);
/** @internal */
export const ApproveRollingReleaseStageRollingReleaseSource$outboundSchema = ApproveRollingReleaseStageRollingReleaseSource$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ApproveRollingReleaseStageRollingReleaseSource$;
(function (ApproveRollingReleaseStageRollingReleaseSource$) {
    /** @deprecated use `ApproveRollingReleaseStageRollingReleaseSource$inboundSchema` instead. */
    ApproveRollingReleaseStageRollingReleaseSource$.inboundSchema = ApproveRollingReleaseStageRollingReleaseSource$inboundSchema;
    /** @deprecated use `ApproveRollingReleaseStageRollingReleaseSource$outboundSchema` instead. */
    ApproveRollingReleaseStageRollingReleaseSource$.outboundSchema = ApproveRollingReleaseStageRollingReleaseSource$outboundSchema;
})(ApproveRollingReleaseStageRollingReleaseSource$ || (ApproveRollingReleaseStageRollingReleaseSource$ = {}));
/** @internal */
export const ApproveRollingReleaseStageRollingReleaseReadyState$inboundSchema = z
    .nativeEnum(ApproveRollingReleaseStageRollingReleaseReadyState);
/** @internal */
export const ApproveRollingReleaseStageRollingReleaseReadyState$outboundSchema = ApproveRollingReleaseStageRollingReleaseReadyState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ApproveRollingReleaseStageRollingReleaseReadyState$;
(function (ApproveRollingReleaseStageRollingReleaseReadyState$) {
    /** @deprecated use `ApproveRollingReleaseStageRollingReleaseReadyState$inboundSchema` instead. */
    ApproveRollingReleaseStageRollingReleaseReadyState$.inboundSchema = ApproveRollingReleaseStageRollingReleaseReadyState$inboundSchema;
    /** @deprecated use `ApproveRollingReleaseStageRollingReleaseReadyState$outboundSchema` instead. */
    ApproveRollingReleaseStageRollingReleaseReadyState$.outboundSchema = ApproveRollingReleaseStageRollingReleaseReadyState$outboundSchema;
})(ApproveRollingReleaseStageRollingReleaseReadyState$ || (ApproveRollingReleaseStageRollingReleaseReadyState$ = {}));
/** @internal */
export const ApproveRollingReleaseStageCanaryDeployment$inboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    url: z.string(),
    target: z.nullable(ApproveRollingReleaseStageRollingReleaseTarget$inboundSchema).optional(),
    source: ApproveRollingReleaseStageRollingReleaseSource$inboundSchema
        .optional(),
    createdAt: z.number(),
    readyState: ApproveRollingReleaseStageRollingReleaseReadyState$inboundSchema,
    readyStateAt: z.number().optional(),
});
/** @internal */
export const ApproveRollingReleaseStageCanaryDeployment$outboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    url: z.string(),
    target: z.nullable(ApproveRollingReleaseStageRollingReleaseTarget$outboundSchema).optional(),
    source: ApproveRollingReleaseStageRollingReleaseSource$outboundSchema
        .optional(),
    createdAt: z.number(),
    readyState: ApproveRollingReleaseStageRollingReleaseReadyState$outboundSchema,
    readyStateAt: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ApproveRollingReleaseStageCanaryDeployment$;
(function (ApproveRollingReleaseStageCanaryDeployment$) {
    /** @deprecated use `ApproveRollingReleaseStageCanaryDeployment$inboundSchema` instead. */
    ApproveRollingReleaseStageCanaryDeployment$.inboundSchema = ApproveRollingReleaseStageCanaryDeployment$inboundSchema;
    /** @deprecated use `ApproveRollingReleaseStageCanaryDeployment$outboundSchema` instead. */
    ApproveRollingReleaseStageCanaryDeployment$.outboundSchema = ApproveRollingReleaseStageCanaryDeployment$outboundSchema;
})(ApproveRollingReleaseStageCanaryDeployment$ || (ApproveRollingReleaseStageCanaryDeployment$ = {}));
export function approveRollingReleaseStageCanaryDeploymentToJSON(approveRollingReleaseStageCanaryDeployment) {
    return JSON.stringify(ApproveRollingReleaseStageCanaryDeployment$outboundSchema.parse(approveRollingReleaseStageCanaryDeployment));
}
export function approveRollingReleaseStageCanaryDeploymentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ApproveRollingReleaseStageCanaryDeployment$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ApproveRollingReleaseStageCanaryDeployment' from JSON`);
}
/** @internal */
export const ApproveRollingReleaseStageAdvancementType$inboundSchema = z
    .nativeEnum(ApproveRollingReleaseStageAdvancementType);
/** @internal */
export const ApproveRollingReleaseStageAdvancementType$outboundSchema = ApproveRollingReleaseStageAdvancementType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ApproveRollingReleaseStageAdvancementType$;
(function (ApproveRollingReleaseStageAdvancementType$) {
    /** @deprecated use `ApproveRollingReleaseStageAdvancementType$inboundSchema` instead. */
    ApproveRollingReleaseStageAdvancementType$.inboundSchema = ApproveRollingReleaseStageAdvancementType$inboundSchema;
    /** @deprecated use `ApproveRollingReleaseStageAdvancementType$outboundSchema` instead. */
    ApproveRollingReleaseStageAdvancementType$.outboundSchema = ApproveRollingReleaseStageAdvancementType$outboundSchema;
})(ApproveRollingReleaseStageAdvancementType$ || (ApproveRollingReleaseStageAdvancementType$ = {}));
/** @internal */
export const ApproveRollingReleaseStageStages$inboundSchema = z.object({
    index: z.number(),
    isFinalStage: z.boolean(),
    targetPercentage: z.number(),
    requireApproval: z.boolean(),
    duration: z.nullable(z.number()),
});
/** @internal */
export const ApproveRollingReleaseStageStages$outboundSchema = z.object({
    index: z.number(),
    isFinalStage: z.boolean(),
    targetPercentage: z.number(),
    requireApproval: z.boolean(),
    duration: z.nullable(z.number()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ApproveRollingReleaseStageStages$;
(function (ApproveRollingReleaseStageStages$) {
    /** @deprecated use `ApproveRollingReleaseStageStages$inboundSchema` instead. */
    ApproveRollingReleaseStageStages$.inboundSchema = ApproveRollingReleaseStageStages$inboundSchema;
    /** @deprecated use `ApproveRollingReleaseStageStages$outboundSchema` instead. */
    ApproveRollingReleaseStageStages$.outboundSchema = ApproveRollingReleaseStageStages$outboundSchema;
})(ApproveRollingReleaseStageStages$ || (ApproveRollingReleaseStageStages$ = {}));
export function approveRollingReleaseStageStagesToJSON(approveRollingReleaseStageStages) {
    return JSON.stringify(ApproveRollingReleaseStageStages$outboundSchema.parse(approveRollingReleaseStageStages));
}
export function approveRollingReleaseStageStagesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ApproveRollingReleaseStageStages$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ApproveRollingReleaseStageStages' from JSON`);
}
/** @internal */
export const ApproveRollingReleaseStageActiveStage$inboundSchema = z.object({
    index: z.number(),
    isFinalStage: z.boolean(),
    targetPercentage: z.number(),
    requireApproval: z.boolean(),
    duration: z.nullable(z.number()),
});
/** @internal */
export const ApproveRollingReleaseStageActiveStage$outboundSchema = z.object({
    index: z.number(),
    isFinalStage: z.boolean(),
    targetPercentage: z.number(),
    requireApproval: z.boolean(),
    duration: z.nullable(z.number()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ApproveRollingReleaseStageActiveStage$;
(function (ApproveRollingReleaseStageActiveStage$) {
    /** @deprecated use `ApproveRollingReleaseStageActiveStage$inboundSchema` instead. */
    ApproveRollingReleaseStageActiveStage$.inboundSchema = ApproveRollingReleaseStageActiveStage$inboundSchema;
    /** @deprecated use `ApproveRollingReleaseStageActiveStage$outboundSchema` instead. */
    ApproveRollingReleaseStageActiveStage$.outboundSchema = ApproveRollingReleaseStageActiveStage$outboundSchema;
})(ApproveRollingReleaseStageActiveStage$ || (ApproveRollingReleaseStageActiveStage$ = {}));
export function approveRollingReleaseStageActiveStageToJSON(approveRollingReleaseStageActiveStage) {
    return JSON.stringify(ApproveRollingReleaseStageActiveStage$outboundSchema.parse(approveRollingReleaseStageActiveStage));
}
export function approveRollingReleaseStageActiveStageFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ApproveRollingReleaseStageActiveStage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ApproveRollingReleaseStageActiveStage' from JSON`);
}
/** @internal */
export const ApproveRollingReleaseStageNextStage$inboundSchema = z.object({
    index: z.number(),
    isFinalStage: z.boolean(),
    targetPercentage: z.number(),
    requireApproval: z.boolean(),
    duration: z.nullable(z.number()),
});
/** @internal */
export const ApproveRollingReleaseStageNextStage$outboundSchema = z.object({
    index: z.number(),
    isFinalStage: z.boolean(),
    targetPercentage: z.number(),
    requireApproval: z.boolean(),
    duration: z.nullable(z.number()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ApproveRollingReleaseStageNextStage$;
(function (ApproveRollingReleaseStageNextStage$) {
    /** @deprecated use `ApproveRollingReleaseStageNextStage$inboundSchema` instead. */
    ApproveRollingReleaseStageNextStage$.inboundSchema = ApproveRollingReleaseStageNextStage$inboundSchema;
    /** @deprecated use `ApproveRollingReleaseStageNextStage$outboundSchema` instead. */
    ApproveRollingReleaseStageNextStage$.outboundSchema = ApproveRollingReleaseStageNextStage$outboundSchema;
})(ApproveRollingReleaseStageNextStage$ || (ApproveRollingReleaseStageNextStage$ = {}));
export function approveRollingReleaseStageNextStageToJSON(approveRollingReleaseStageNextStage) {
    return JSON.stringify(ApproveRollingReleaseStageNextStage$outboundSchema.parse(approveRollingReleaseStageNextStage));
}
export function approveRollingReleaseStageNextStageFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ApproveRollingReleaseStageNextStage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ApproveRollingReleaseStageNextStage' from JSON`);
}
/** @internal */
export const ApproveRollingReleaseStageRollingRelease$inboundSchema = z.object({
    state: ApproveRollingReleaseStageState$inboundSchema,
    currentDeployment: z.nullable(z.lazy(() => ApproveRollingReleaseStageCurrentDeployment$inboundSchema)),
    canaryDeployment: z.nullable(z.lazy(() => ApproveRollingReleaseStageCanaryDeployment$inboundSchema)),
    queuedDeploymentId: z.nullable(z.string()),
    advancementType: ApproveRollingReleaseStageAdvancementType$inboundSchema,
    stages: z.array(z.lazy(() => ApproveRollingReleaseStageStages$inboundSchema)),
    activeStage: z.nullable(z.lazy(() => ApproveRollingReleaseStageActiveStage$inboundSchema)),
    nextStage: z.nullable(z.lazy(() => ApproveRollingReleaseStageNextStage$inboundSchema)),
    startedAt: z.number(),
    updatedAt: z.number(),
});
/** @internal */
export const ApproveRollingReleaseStageRollingRelease$outboundSchema = z.object({
    state: ApproveRollingReleaseStageState$outboundSchema,
    currentDeployment: z.nullable(z.lazy(() => ApproveRollingReleaseStageCurrentDeployment$outboundSchema)),
    canaryDeployment: z.nullable(z.lazy(() => ApproveRollingReleaseStageCanaryDeployment$outboundSchema)),
    queuedDeploymentId: z.nullable(z.string()),
    advancementType: ApproveRollingReleaseStageAdvancementType$outboundSchema,
    stages: z.array(z.lazy(() => ApproveRollingReleaseStageStages$outboundSchema)),
    activeStage: z.nullable(z.lazy(() => ApproveRollingReleaseStageActiveStage$outboundSchema)),
    nextStage: z.nullable(z.lazy(() => ApproveRollingReleaseStageNextStage$outboundSchema)),
    startedAt: z.number(),
    updatedAt: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ApproveRollingReleaseStageRollingRelease$;
(function (ApproveRollingReleaseStageRollingRelease$) {
    /** @deprecated use `ApproveRollingReleaseStageRollingRelease$inboundSchema` instead. */
    ApproveRollingReleaseStageRollingRelease$.inboundSchema = ApproveRollingReleaseStageRollingRelease$inboundSchema;
    /** @deprecated use `ApproveRollingReleaseStageRollingRelease$outboundSchema` instead. */
    ApproveRollingReleaseStageRollingRelease$.outboundSchema = ApproveRollingReleaseStageRollingRelease$outboundSchema;
})(ApproveRollingReleaseStageRollingRelease$ || (ApproveRollingReleaseStageRollingRelease$ = {}));
export function approveRollingReleaseStageRollingReleaseToJSON(approveRollingReleaseStageRollingRelease) {
    return JSON.stringify(ApproveRollingReleaseStageRollingRelease$outboundSchema.parse(approveRollingReleaseStageRollingRelease));
}
export function approveRollingReleaseStageRollingReleaseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ApproveRollingReleaseStageRollingRelease$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ApproveRollingReleaseStageRollingRelease' from JSON`);
}
/** @internal */
export const ApproveRollingReleaseStageResponseBody$inboundSchema = z.object({
    rollingRelease: z.nullable(z.lazy(() => ApproveRollingReleaseStageRollingRelease$inboundSchema)),
});
/** @internal */
export const ApproveRollingReleaseStageResponseBody$outboundSchema = z.object({
    rollingRelease: z.nullable(z.lazy(() => ApproveRollingReleaseStageRollingRelease$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ApproveRollingReleaseStageResponseBody$;
(function (ApproveRollingReleaseStageResponseBody$) {
    /** @deprecated use `ApproveRollingReleaseStageResponseBody$inboundSchema` instead. */
    ApproveRollingReleaseStageResponseBody$.inboundSchema = ApproveRollingReleaseStageResponseBody$inboundSchema;
    /** @deprecated use `ApproveRollingReleaseStageResponseBody$outboundSchema` instead. */
    ApproveRollingReleaseStageResponseBody$.outboundSchema = ApproveRollingReleaseStageResponseBody$outboundSchema;
})(ApproveRollingReleaseStageResponseBody$ || (ApproveRollingReleaseStageResponseBody$ = {}));
export function approveRollingReleaseStageResponseBodyToJSON(approveRollingReleaseStageResponseBody) {
    return JSON.stringify(ApproveRollingReleaseStageResponseBody$outboundSchema.parse(approveRollingReleaseStageResponseBody));
}
export function approveRollingReleaseStageResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ApproveRollingReleaseStageResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ApproveRollingReleaseStageResponseBody' from JSON`);
}
//# sourceMappingURL=approverollingreleasestageop.js.map