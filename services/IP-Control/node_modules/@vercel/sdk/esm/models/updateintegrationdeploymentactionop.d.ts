import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export declare const UpdateIntegrationDeploymentActionStatus: {
    readonly Running: "running";
    readonly Succeeded: "succeeded";
    readonly Failed: "failed";
};
export type UpdateIntegrationDeploymentActionStatus = ClosedEnum<typeof UpdateIntegrationDeploymentActionStatus>;
export type Secrets = {
    name: string;
    value: string;
};
export type Outcomes1 = {
    kind: string;
    secrets: Array<Secrets>;
};
export type Outcomes = Outcomes1;
export type UpdateIntegrationDeploymentActionRequestBody = {
    status?: UpdateIntegrationDeploymentActionStatus | undefined;
    statusText?: string | undefined;
    statusUrl?: string | undefined;
    outcomes?: Array<Outcomes1> | undefined;
};
export type UpdateIntegrationDeploymentActionRequest = {
    deploymentId: string;
    integrationConfigurationId: string;
    resourceId: string;
    action: string;
    requestBody?: UpdateIntegrationDeploymentActionRequestBody | undefined;
};
/** @internal */
export declare const UpdateIntegrationDeploymentActionStatus$inboundSchema: z.ZodNativeEnum<typeof UpdateIntegrationDeploymentActionStatus>;
/** @internal */
export declare const UpdateIntegrationDeploymentActionStatus$outboundSchema: z.ZodNativeEnum<typeof UpdateIntegrationDeploymentActionStatus>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateIntegrationDeploymentActionStatus$ {
    /** @deprecated use `UpdateIntegrationDeploymentActionStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Running: "running";
        readonly Succeeded: "succeeded";
        readonly Failed: "failed";
    }>;
    /** @deprecated use `UpdateIntegrationDeploymentActionStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Running: "running";
        readonly Succeeded: "succeeded";
        readonly Failed: "failed";
    }>;
}
/** @internal */
export declare const Secrets$inboundSchema: z.ZodType<Secrets, z.ZodTypeDef, unknown>;
/** @internal */
export type Secrets$Outbound = {
    name: string;
    value: string;
};
/** @internal */
export declare const Secrets$outboundSchema: z.ZodType<Secrets$Outbound, z.ZodTypeDef, Secrets>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Secrets$ {
    /** @deprecated use `Secrets$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Secrets, z.ZodTypeDef, unknown>;
    /** @deprecated use `Secrets$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Secrets$Outbound, z.ZodTypeDef, Secrets>;
    /** @deprecated use `Secrets$Outbound` instead. */
    type Outbound = Secrets$Outbound;
}
export declare function secretsToJSON(secrets: Secrets): string;
export declare function secretsFromJSON(jsonString: string): SafeParseResult<Secrets, SDKValidationError>;
/** @internal */
export declare const Outcomes1$inboundSchema: z.ZodType<Outcomes1, z.ZodTypeDef, unknown>;
/** @internal */
export type Outcomes1$Outbound = {
    kind: string;
    secrets: Array<Secrets$Outbound>;
};
/** @internal */
export declare const Outcomes1$outboundSchema: z.ZodType<Outcomes1$Outbound, z.ZodTypeDef, Outcomes1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Outcomes1$ {
    /** @deprecated use `Outcomes1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Outcomes1, z.ZodTypeDef, unknown>;
    /** @deprecated use `Outcomes1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Outcomes1$Outbound, z.ZodTypeDef, Outcomes1>;
    /** @deprecated use `Outcomes1$Outbound` instead. */
    type Outbound = Outcomes1$Outbound;
}
export declare function outcomes1ToJSON(outcomes1: Outcomes1): string;
export declare function outcomes1FromJSON(jsonString: string): SafeParseResult<Outcomes1, SDKValidationError>;
/** @internal */
export declare const Outcomes$inboundSchema: z.ZodType<Outcomes, z.ZodTypeDef, unknown>;
/** @internal */
export type Outcomes$Outbound = Outcomes1$Outbound;
/** @internal */
export declare const Outcomes$outboundSchema: z.ZodType<Outcomes$Outbound, z.ZodTypeDef, Outcomes>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Outcomes$ {
    /** @deprecated use `Outcomes$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Outcomes1, z.ZodTypeDef, unknown>;
    /** @deprecated use `Outcomes$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Outcomes1$Outbound, z.ZodTypeDef, Outcomes1>;
    /** @deprecated use `Outcomes$Outbound` instead. */
    type Outbound = Outcomes$Outbound;
}
export declare function outcomesToJSON(outcomes: Outcomes): string;
export declare function outcomesFromJSON(jsonString: string): SafeParseResult<Outcomes, SDKValidationError>;
/** @internal */
export declare const UpdateIntegrationDeploymentActionRequestBody$inboundSchema: z.ZodType<UpdateIntegrationDeploymentActionRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateIntegrationDeploymentActionRequestBody$Outbound = {
    status?: string | undefined;
    statusText?: string | undefined;
    statusUrl?: string | undefined;
    outcomes?: Array<Outcomes1$Outbound> | undefined;
};
/** @internal */
export declare const UpdateIntegrationDeploymentActionRequestBody$outboundSchema: z.ZodType<UpdateIntegrationDeploymentActionRequestBody$Outbound, z.ZodTypeDef, UpdateIntegrationDeploymentActionRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateIntegrationDeploymentActionRequestBody$ {
    /** @deprecated use `UpdateIntegrationDeploymentActionRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateIntegrationDeploymentActionRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateIntegrationDeploymentActionRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateIntegrationDeploymentActionRequestBody$Outbound, z.ZodTypeDef, UpdateIntegrationDeploymentActionRequestBody>;
    /** @deprecated use `UpdateIntegrationDeploymentActionRequestBody$Outbound` instead. */
    type Outbound = UpdateIntegrationDeploymentActionRequestBody$Outbound;
}
export declare function updateIntegrationDeploymentActionRequestBodyToJSON(updateIntegrationDeploymentActionRequestBody: UpdateIntegrationDeploymentActionRequestBody): string;
export declare function updateIntegrationDeploymentActionRequestBodyFromJSON(jsonString: string): SafeParseResult<UpdateIntegrationDeploymentActionRequestBody, SDKValidationError>;
/** @internal */
export declare const UpdateIntegrationDeploymentActionRequest$inboundSchema: z.ZodType<UpdateIntegrationDeploymentActionRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateIntegrationDeploymentActionRequest$Outbound = {
    deploymentId: string;
    integrationConfigurationId: string;
    resourceId: string;
    action: string;
    RequestBody?: UpdateIntegrationDeploymentActionRequestBody$Outbound | undefined;
};
/** @internal */
export declare const UpdateIntegrationDeploymentActionRequest$outboundSchema: z.ZodType<UpdateIntegrationDeploymentActionRequest$Outbound, z.ZodTypeDef, UpdateIntegrationDeploymentActionRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateIntegrationDeploymentActionRequest$ {
    /** @deprecated use `UpdateIntegrationDeploymentActionRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateIntegrationDeploymentActionRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateIntegrationDeploymentActionRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateIntegrationDeploymentActionRequest$Outbound, z.ZodTypeDef, UpdateIntegrationDeploymentActionRequest>;
    /** @deprecated use `UpdateIntegrationDeploymentActionRequest$Outbound` instead. */
    type Outbound = UpdateIntegrationDeploymentActionRequest$Outbound;
}
export declare function updateIntegrationDeploymentActionRequestToJSON(updateIntegrationDeploymentActionRequest: UpdateIntegrationDeploymentActionRequest): string;
export declare function updateIntegrationDeploymentActionRequestFromJSON(jsonString: string): SafeParseResult<UpdateIntegrationDeploymentActionRequest, SDKValidationError>;
//# sourceMappingURL=updateintegrationdeploymentactionop.d.ts.map