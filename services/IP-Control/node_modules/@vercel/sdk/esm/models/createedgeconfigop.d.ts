import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type CreateEdgeConfigRequestBody = {
    slug: string;
    items?: {
        [k: string]: any;
    } | undefined;
};
export type CreateEdgeConfigRequest = {
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody: CreateEdgeConfigRequestBody;
};
/**
 * Keeps track of the current state of the Edge Config while it gets transferred.
 */
export type CreateEdgeConfigTransfer = {
    fromAccountId: string;
    startedAt: number;
    doneAt: number | null;
};
export type CreateEdgeConfigSchema = {};
export declare const CreateEdgeConfigPurposeType: {
    readonly Experimentation: "experimentation";
};
export type CreateEdgeConfigPurposeType = ClosedEnum<typeof CreateEdgeConfigPurposeType>;
export type Purpose2 = {
    type: CreateEdgeConfigPurposeType;
    resourceId: string;
};
export declare const PurposeType: {
    readonly Flags: "flags";
};
export type PurposeType = ClosedEnum<typeof PurposeType>;
export type Purpose1 = {
    type: PurposeType;
    projectId: string;
};
export type CreateEdgeConfigPurpose = Purpose1 | Purpose2;
/**
 * An Edge Config
 */
export type CreateEdgeConfigResponseBody = {
    createdAt: number;
    updatedAt: number;
    deletedAt?: number | undefined;
    id: string;
    /**
     * Name for the Edge Config Names are not unique. Must start with an alphabetic character and can contain only alphanumeric characters and underscores).
     */
    slug: string;
    ownerId: string;
    digest: string;
    /**
     * Keeps track of the current state of the Edge Config while it gets transferred.
     */
    transfer?: CreateEdgeConfigTransfer | undefined;
    schema?: CreateEdgeConfigSchema | undefined;
    purpose?: Purpose1 | Purpose2 | undefined;
    /**
     * Timestamp of when the Edge Config was synced to DynamoDB initially. It is only set when syncing the entire Edge Config, not when updating.
     */
    syncedToDynamoAt?: number | undefined;
    sizeInBytes: number;
    itemCount: number;
};
/** @internal */
export declare const CreateEdgeConfigRequestBody$inboundSchema: z.ZodType<CreateEdgeConfigRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateEdgeConfigRequestBody$Outbound = {
    slug: string;
    items?: {
        [k: string]: any;
    } | undefined;
};
/** @internal */
export declare const CreateEdgeConfigRequestBody$outboundSchema: z.ZodType<CreateEdgeConfigRequestBody$Outbound, z.ZodTypeDef, CreateEdgeConfigRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateEdgeConfigRequestBody$ {
    /** @deprecated use `CreateEdgeConfigRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateEdgeConfigRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateEdgeConfigRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateEdgeConfigRequestBody$Outbound, z.ZodTypeDef, CreateEdgeConfigRequestBody>;
    /** @deprecated use `CreateEdgeConfigRequestBody$Outbound` instead. */
    type Outbound = CreateEdgeConfigRequestBody$Outbound;
}
export declare function createEdgeConfigRequestBodyToJSON(createEdgeConfigRequestBody: CreateEdgeConfigRequestBody): string;
export declare function createEdgeConfigRequestBodyFromJSON(jsonString: string): SafeParseResult<CreateEdgeConfigRequestBody, SDKValidationError>;
/** @internal */
export declare const CreateEdgeConfigRequest$inboundSchema: z.ZodType<CreateEdgeConfigRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateEdgeConfigRequest$Outbound = {
    teamId?: string | undefined;
    slug?: string | undefined;
    RequestBody: CreateEdgeConfigRequestBody$Outbound;
};
/** @internal */
export declare const CreateEdgeConfigRequest$outboundSchema: z.ZodType<CreateEdgeConfigRequest$Outbound, z.ZodTypeDef, CreateEdgeConfigRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateEdgeConfigRequest$ {
    /** @deprecated use `CreateEdgeConfigRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateEdgeConfigRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateEdgeConfigRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateEdgeConfigRequest$Outbound, z.ZodTypeDef, CreateEdgeConfigRequest>;
    /** @deprecated use `CreateEdgeConfigRequest$Outbound` instead. */
    type Outbound = CreateEdgeConfigRequest$Outbound;
}
export declare function createEdgeConfigRequestToJSON(createEdgeConfigRequest: CreateEdgeConfigRequest): string;
export declare function createEdgeConfigRequestFromJSON(jsonString: string): SafeParseResult<CreateEdgeConfigRequest, SDKValidationError>;
/** @internal */
export declare const CreateEdgeConfigTransfer$inboundSchema: z.ZodType<CreateEdgeConfigTransfer, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateEdgeConfigTransfer$Outbound = {
    fromAccountId: string;
    startedAt: number;
    doneAt: number | null;
};
/** @internal */
export declare const CreateEdgeConfigTransfer$outboundSchema: z.ZodType<CreateEdgeConfigTransfer$Outbound, z.ZodTypeDef, CreateEdgeConfigTransfer>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateEdgeConfigTransfer$ {
    /** @deprecated use `CreateEdgeConfigTransfer$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateEdgeConfigTransfer, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateEdgeConfigTransfer$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateEdgeConfigTransfer$Outbound, z.ZodTypeDef, CreateEdgeConfigTransfer>;
    /** @deprecated use `CreateEdgeConfigTransfer$Outbound` instead. */
    type Outbound = CreateEdgeConfigTransfer$Outbound;
}
export declare function createEdgeConfigTransferToJSON(createEdgeConfigTransfer: CreateEdgeConfigTransfer): string;
export declare function createEdgeConfigTransferFromJSON(jsonString: string): SafeParseResult<CreateEdgeConfigTransfer, SDKValidationError>;
/** @internal */
export declare const CreateEdgeConfigSchema$inboundSchema: z.ZodType<CreateEdgeConfigSchema, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateEdgeConfigSchema$Outbound = {};
/** @internal */
export declare const CreateEdgeConfigSchema$outboundSchema: z.ZodType<CreateEdgeConfigSchema$Outbound, z.ZodTypeDef, CreateEdgeConfigSchema>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateEdgeConfigSchema$ {
    /** @deprecated use `CreateEdgeConfigSchema$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateEdgeConfigSchema, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateEdgeConfigSchema$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateEdgeConfigSchema$Outbound, z.ZodTypeDef, CreateEdgeConfigSchema>;
    /** @deprecated use `CreateEdgeConfigSchema$Outbound` instead. */
    type Outbound = CreateEdgeConfigSchema$Outbound;
}
export declare function createEdgeConfigSchemaToJSON(createEdgeConfigSchema: CreateEdgeConfigSchema): string;
export declare function createEdgeConfigSchemaFromJSON(jsonString: string): SafeParseResult<CreateEdgeConfigSchema, SDKValidationError>;
/** @internal */
export declare const CreateEdgeConfigPurposeType$inboundSchema: z.ZodNativeEnum<typeof CreateEdgeConfigPurposeType>;
/** @internal */
export declare const CreateEdgeConfigPurposeType$outboundSchema: z.ZodNativeEnum<typeof CreateEdgeConfigPurposeType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateEdgeConfigPurposeType$ {
    /** @deprecated use `CreateEdgeConfigPurposeType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Experimentation: "experimentation";
    }>;
    /** @deprecated use `CreateEdgeConfigPurposeType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Experimentation: "experimentation";
    }>;
}
/** @internal */
export declare const Purpose2$inboundSchema: z.ZodType<Purpose2, z.ZodTypeDef, unknown>;
/** @internal */
export type Purpose2$Outbound = {
    type: string;
    resourceId: string;
};
/** @internal */
export declare const Purpose2$outboundSchema: z.ZodType<Purpose2$Outbound, z.ZodTypeDef, Purpose2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Purpose2$ {
    /** @deprecated use `Purpose2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Purpose2, z.ZodTypeDef, unknown>;
    /** @deprecated use `Purpose2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Purpose2$Outbound, z.ZodTypeDef, Purpose2>;
    /** @deprecated use `Purpose2$Outbound` instead. */
    type Outbound = Purpose2$Outbound;
}
export declare function purpose2ToJSON(purpose2: Purpose2): string;
export declare function purpose2FromJSON(jsonString: string): SafeParseResult<Purpose2, SDKValidationError>;
/** @internal */
export declare const PurposeType$inboundSchema: z.ZodNativeEnum<typeof PurposeType>;
/** @internal */
export declare const PurposeType$outboundSchema: z.ZodNativeEnum<typeof PurposeType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PurposeType$ {
    /** @deprecated use `PurposeType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Flags: "flags";
    }>;
    /** @deprecated use `PurposeType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Flags: "flags";
    }>;
}
/** @internal */
export declare const Purpose1$inboundSchema: z.ZodType<Purpose1, z.ZodTypeDef, unknown>;
/** @internal */
export type Purpose1$Outbound = {
    type: string;
    projectId: string;
};
/** @internal */
export declare const Purpose1$outboundSchema: z.ZodType<Purpose1$Outbound, z.ZodTypeDef, Purpose1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Purpose1$ {
    /** @deprecated use `Purpose1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Purpose1, z.ZodTypeDef, unknown>;
    /** @deprecated use `Purpose1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Purpose1$Outbound, z.ZodTypeDef, Purpose1>;
    /** @deprecated use `Purpose1$Outbound` instead. */
    type Outbound = Purpose1$Outbound;
}
export declare function purpose1ToJSON(purpose1: Purpose1): string;
export declare function purpose1FromJSON(jsonString: string): SafeParseResult<Purpose1, SDKValidationError>;
/** @internal */
export declare const CreateEdgeConfigPurpose$inboundSchema: z.ZodType<CreateEdgeConfigPurpose, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateEdgeConfigPurpose$Outbound = Purpose1$Outbound | Purpose2$Outbound;
/** @internal */
export declare const CreateEdgeConfigPurpose$outboundSchema: z.ZodType<CreateEdgeConfigPurpose$Outbound, z.ZodTypeDef, CreateEdgeConfigPurpose>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateEdgeConfigPurpose$ {
    /** @deprecated use `CreateEdgeConfigPurpose$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateEdgeConfigPurpose, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateEdgeConfigPurpose$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateEdgeConfigPurpose$Outbound, z.ZodTypeDef, CreateEdgeConfigPurpose>;
    /** @deprecated use `CreateEdgeConfigPurpose$Outbound` instead. */
    type Outbound = CreateEdgeConfigPurpose$Outbound;
}
export declare function createEdgeConfigPurposeToJSON(createEdgeConfigPurpose: CreateEdgeConfigPurpose): string;
export declare function createEdgeConfigPurposeFromJSON(jsonString: string): SafeParseResult<CreateEdgeConfigPurpose, SDKValidationError>;
/** @internal */
export declare const CreateEdgeConfigResponseBody$inboundSchema: z.ZodType<CreateEdgeConfigResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateEdgeConfigResponseBody$Outbound = {
    createdAt: number;
    updatedAt: number;
    deletedAt?: number | undefined;
    id: string;
    slug: string;
    ownerId: string;
    digest: string;
    transfer?: CreateEdgeConfigTransfer$Outbound | undefined;
    schema?: CreateEdgeConfigSchema$Outbound | undefined;
    purpose?: Purpose1$Outbound | Purpose2$Outbound | undefined;
    syncedToDynamoAt?: number | undefined;
    sizeInBytes: number;
    itemCount: number;
};
/** @internal */
export declare const CreateEdgeConfigResponseBody$outboundSchema: z.ZodType<CreateEdgeConfigResponseBody$Outbound, z.ZodTypeDef, CreateEdgeConfigResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateEdgeConfigResponseBody$ {
    /** @deprecated use `CreateEdgeConfigResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateEdgeConfigResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateEdgeConfigResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateEdgeConfigResponseBody$Outbound, z.ZodTypeDef, CreateEdgeConfigResponseBody>;
    /** @deprecated use `CreateEdgeConfigResponseBody$Outbound` instead. */
    type Outbound = CreateEdgeConfigResponseBody$Outbound;
}
export declare function createEdgeConfigResponseBodyToJSON(createEdgeConfigResponseBody: CreateEdgeConfigResponseBody): string;
export declare function createEdgeConfigResponseBodyFromJSON(jsonString: string): SafeParseResult<CreateEdgeConfigResponseBody, SDKValidationError>;
//# sourceMappingURL=createedgeconfigop.d.ts.map