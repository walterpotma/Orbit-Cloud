/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/**
 * The type of environment (production, preview, or development)
 */
export const RemoveCustomEnvironmentType = {
    Preview: "preview",
    Production: "production",
    Development: "development",
};
/**
 * The type of matching to perform
 */
export const RemoveCustomEnvironmentEnvironmentType = {
    EndsWith: "endsWith",
    StartsWith: "startsWith",
    Equals: "equals",
};
/** @internal */
export const RemoveCustomEnvironmentRequestBody$inboundSchema = z.object({
    deleteUnassignedEnvironmentVariables: z.boolean().optional(),
});
/** @internal */
export const RemoveCustomEnvironmentRequestBody$outboundSchema = z.object({
    deleteUnassignedEnvironmentVariables: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RemoveCustomEnvironmentRequestBody$;
(function (RemoveCustomEnvironmentRequestBody$) {
    /** @deprecated use `RemoveCustomEnvironmentRequestBody$inboundSchema` instead. */
    RemoveCustomEnvironmentRequestBody$.inboundSchema = RemoveCustomEnvironmentRequestBody$inboundSchema;
    /** @deprecated use `RemoveCustomEnvironmentRequestBody$outboundSchema` instead. */
    RemoveCustomEnvironmentRequestBody$.outboundSchema = RemoveCustomEnvironmentRequestBody$outboundSchema;
})(RemoveCustomEnvironmentRequestBody$ || (RemoveCustomEnvironmentRequestBody$ = {}));
export function removeCustomEnvironmentRequestBodyToJSON(removeCustomEnvironmentRequestBody) {
    return JSON.stringify(RemoveCustomEnvironmentRequestBody$outboundSchema.parse(removeCustomEnvironmentRequestBody));
}
export function removeCustomEnvironmentRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RemoveCustomEnvironmentRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RemoveCustomEnvironmentRequestBody' from JSON`);
}
/** @internal */
export const RemoveCustomEnvironmentRequest$inboundSchema = z.object({
    idOrName: z.string(),
    environmentSlugOrId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => RemoveCustomEnvironmentRequestBody$inboundSchema)
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const RemoveCustomEnvironmentRequest$outboundSchema = z.object({
    idOrName: z.string(),
    environmentSlugOrId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => RemoveCustomEnvironmentRequestBody$outboundSchema)
        .optional(),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RemoveCustomEnvironmentRequest$;
(function (RemoveCustomEnvironmentRequest$) {
    /** @deprecated use `RemoveCustomEnvironmentRequest$inboundSchema` instead. */
    RemoveCustomEnvironmentRequest$.inboundSchema = RemoveCustomEnvironmentRequest$inboundSchema;
    /** @deprecated use `RemoveCustomEnvironmentRequest$outboundSchema` instead. */
    RemoveCustomEnvironmentRequest$.outboundSchema = RemoveCustomEnvironmentRequest$outboundSchema;
})(RemoveCustomEnvironmentRequest$ || (RemoveCustomEnvironmentRequest$ = {}));
export function removeCustomEnvironmentRequestToJSON(removeCustomEnvironmentRequest) {
    return JSON.stringify(RemoveCustomEnvironmentRequest$outboundSchema.parse(removeCustomEnvironmentRequest));
}
export function removeCustomEnvironmentRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RemoveCustomEnvironmentRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RemoveCustomEnvironmentRequest' from JSON`);
}
/** @internal */
export const RemoveCustomEnvironmentType$inboundSchema = z.nativeEnum(RemoveCustomEnvironmentType);
/** @internal */
export const RemoveCustomEnvironmentType$outboundSchema = RemoveCustomEnvironmentType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RemoveCustomEnvironmentType$;
(function (RemoveCustomEnvironmentType$) {
    /** @deprecated use `RemoveCustomEnvironmentType$inboundSchema` instead. */
    RemoveCustomEnvironmentType$.inboundSchema = RemoveCustomEnvironmentType$inboundSchema;
    /** @deprecated use `RemoveCustomEnvironmentType$outboundSchema` instead. */
    RemoveCustomEnvironmentType$.outboundSchema = RemoveCustomEnvironmentType$outboundSchema;
})(RemoveCustomEnvironmentType$ || (RemoveCustomEnvironmentType$ = {}));
/** @internal */
export const RemoveCustomEnvironmentEnvironmentType$inboundSchema = z.nativeEnum(RemoveCustomEnvironmentEnvironmentType);
/** @internal */
export const RemoveCustomEnvironmentEnvironmentType$outboundSchema = RemoveCustomEnvironmentEnvironmentType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RemoveCustomEnvironmentEnvironmentType$;
(function (RemoveCustomEnvironmentEnvironmentType$) {
    /** @deprecated use `RemoveCustomEnvironmentEnvironmentType$inboundSchema` instead. */
    RemoveCustomEnvironmentEnvironmentType$.inboundSchema = RemoveCustomEnvironmentEnvironmentType$inboundSchema;
    /** @deprecated use `RemoveCustomEnvironmentEnvironmentType$outboundSchema` instead. */
    RemoveCustomEnvironmentEnvironmentType$.outboundSchema = RemoveCustomEnvironmentEnvironmentType$outboundSchema;
})(RemoveCustomEnvironmentEnvironmentType$ || (RemoveCustomEnvironmentEnvironmentType$ = {}));
/** @internal */
export const RemoveCustomEnvironmentBranchMatcher$inboundSchema = z.object({
    type: RemoveCustomEnvironmentEnvironmentType$inboundSchema,
    pattern: z.string(),
});
/** @internal */
export const RemoveCustomEnvironmentBranchMatcher$outboundSchema = z.object({
    type: RemoveCustomEnvironmentEnvironmentType$outboundSchema,
    pattern: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RemoveCustomEnvironmentBranchMatcher$;
(function (RemoveCustomEnvironmentBranchMatcher$) {
    /** @deprecated use `RemoveCustomEnvironmentBranchMatcher$inboundSchema` instead. */
    RemoveCustomEnvironmentBranchMatcher$.inboundSchema = RemoveCustomEnvironmentBranchMatcher$inboundSchema;
    /** @deprecated use `RemoveCustomEnvironmentBranchMatcher$outboundSchema` instead. */
    RemoveCustomEnvironmentBranchMatcher$.outboundSchema = RemoveCustomEnvironmentBranchMatcher$outboundSchema;
})(RemoveCustomEnvironmentBranchMatcher$ || (RemoveCustomEnvironmentBranchMatcher$ = {}));
export function removeCustomEnvironmentBranchMatcherToJSON(removeCustomEnvironmentBranchMatcher) {
    return JSON.stringify(RemoveCustomEnvironmentBranchMatcher$outboundSchema.parse(removeCustomEnvironmentBranchMatcher));
}
export function removeCustomEnvironmentBranchMatcherFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RemoveCustomEnvironmentBranchMatcher$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RemoveCustomEnvironmentBranchMatcher' from JSON`);
}
/** @internal */
export const RemoveCustomEnvironmentVerification$inboundSchema = z.object({
    type: z.string(),
    domain: z.string(),
    value: z.string(),
    reason: z.string(),
});
/** @internal */
export const RemoveCustomEnvironmentVerification$outboundSchema = z.object({
    type: z.string(),
    domain: z.string(),
    value: z.string(),
    reason: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RemoveCustomEnvironmentVerification$;
(function (RemoveCustomEnvironmentVerification$) {
    /** @deprecated use `RemoveCustomEnvironmentVerification$inboundSchema` instead. */
    RemoveCustomEnvironmentVerification$.inboundSchema = RemoveCustomEnvironmentVerification$inboundSchema;
    /** @deprecated use `RemoveCustomEnvironmentVerification$outboundSchema` instead. */
    RemoveCustomEnvironmentVerification$.outboundSchema = RemoveCustomEnvironmentVerification$outboundSchema;
})(RemoveCustomEnvironmentVerification$ || (RemoveCustomEnvironmentVerification$ = {}));
export function removeCustomEnvironmentVerificationToJSON(removeCustomEnvironmentVerification) {
    return JSON.stringify(RemoveCustomEnvironmentVerification$outboundSchema.parse(removeCustomEnvironmentVerification));
}
export function removeCustomEnvironmentVerificationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RemoveCustomEnvironmentVerification$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RemoveCustomEnvironmentVerification' from JSON`);
}
/** @internal */
export const RemoveCustomEnvironmentDomains$inboundSchema = z.object({
    name: z.string(),
    apexName: z.string(),
    projectId: z.string(),
    redirect: z.nullable(z.string()).optional(),
    redirectStatusCode: z.nullable(z.number()).optional(),
    gitBranch: z.nullable(z.string()).optional(),
    customEnvironmentId: z.nullable(z.string()).optional(),
    updatedAt: z.number().optional(),
    createdAt: z.number().optional(),
    verified: z.boolean(),
    verification: z.array(z.lazy(() => RemoveCustomEnvironmentVerification$inboundSchema)).optional(),
});
/** @internal */
export const RemoveCustomEnvironmentDomains$outboundSchema = z.object({
    name: z.string(),
    apexName: z.string(),
    projectId: z.string(),
    redirect: z.nullable(z.string()).optional(),
    redirectStatusCode: z.nullable(z.number()).optional(),
    gitBranch: z.nullable(z.string()).optional(),
    customEnvironmentId: z.nullable(z.string()).optional(),
    updatedAt: z.number().optional(),
    createdAt: z.number().optional(),
    verified: z.boolean(),
    verification: z.array(z.lazy(() => RemoveCustomEnvironmentVerification$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RemoveCustomEnvironmentDomains$;
(function (RemoveCustomEnvironmentDomains$) {
    /** @deprecated use `RemoveCustomEnvironmentDomains$inboundSchema` instead. */
    RemoveCustomEnvironmentDomains$.inboundSchema = RemoveCustomEnvironmentDomains$inboundSchema;
    /** @deprecated use `RemoveCustomEnvironmentDomains$outboundSchema` instead. */
    RemoveCustomEnvironmentDomains$.outboundSchema = RemoveCustomEnvironmentDomains$outboundSchema;
})(RemoveCustomEnvironmentDomains$ || (RemoveCustomEnvironmentDomains$ = {}));
export function removeCustomEnvironmentDomainsToJSON(removeCustomEnvironmentDomains) {
    return JSON.stringify(RemoveCustomEnvironmentDomains$outboundSchema.parse(removeCustomEnvironmentDomains));
}
export function removeCustomEnvironmentDomainsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RemoveCustomEnvironmentDomains$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RemoveCustomEnvironmentDomains' from JSON`);
}
/** @internal */
export const RemoveCustomEnvironmentResponseBody$inboundSchema = z.object({
    id: z.string(),
    slug: z.string(),
    type: RemoveCustomEnvironmentType$inboundSchema,
    description: z.string().optional(),
    branchMatcher: z.lazy(() => RemoveCustomEnvironmentBranchMatcher$inboundSchema).optional(),
    domains: z.array(z.lazy(() => RemoveCustomEnvironmentDomains$inboundSchema))
        .optional(),
    currentDeploymentAliases: z.array(z.string()).optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
});
/** @internal */
export const RemoveCustomEnvironmentResponseBody$outboundSchema = z.object({
    id: z.string(),
    slug: z.string(),
    type: RemoveCustomEnvironmentType$outboundSchema,
    description: z.string().optional(),
    branchMatcher: z.lazy(() => RemoveCustomEnvironmentBranchMatcher$outboundSchema).optional(),
    domains: z.array(z.lazy(() => RemoveCustomEnvironmentDomains$outboundSchema))
        .optional(),
    currentDeploymentAliases: z.array(z.string()).optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RemoveCustomEnvironmentResponseBody$;
(function (RemoveCustomEnvironmentResponseBody$) {
    /** @deprecated use `RemoveCustomEnvironmentResponseBody$inboundSchema` instead. */
    RemoveCustomEnvironmentResponseBody$.inboundSchema = RemoveCustomEnvironmentResponseBody$inboundSchema;
    /** @deprecated use `RemoveCustomEnvironmentResponseBody$outboundSchema` instead. */
    RemoveCustomEnvironmentResponseBody$.outboundSchema = RemoveCustomEnvironmentResponseBody$outboundSchema;
})(RemoveCustomEnvironmentResponseBody$ || (RemoveCustomEnvironmentResponseBody$ = {}));
export function removeCustomEnvironmentResponseBodyToJSON(removeCustomEnvironmentResponseBody) {
    return JSON.stringify(RemoveCustomEnvironmentResponseBody$outboundSchema.parse(removeCustomEnvironmentResponseBody));
}
export function removeCustomEnvironmentResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RemoveCustomEnvironmentResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RemoveCustomEnvironmentResponseBody' from JSON`);
}
//# sourceMappingURL=removecustomenvironmentop.js.map