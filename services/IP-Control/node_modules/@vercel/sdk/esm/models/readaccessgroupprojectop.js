/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
export const ReadAccessGroupProjectRole = {
    Admin: "ADMIN",
    ProjectDeveloper: "PROJECT_DEVELOPER",
    ProjectViewer: "PROJECT_VIEWER",
};
/** @internal */
export const ReadAccessGroupProjectRequest$inboundSchema = z.object({
    accessGroupIdOrName: z.string(),
    projectId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/** @internal */
export const ReadAccessGroupProjectRequest$outboundSchema = z.object({
    accessGroupIdOrName: z.string(),
    projectId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ReadAccessGroupProjectRequest$;
(function (ReadAccessGroupProjectRequest$) {
    /** @deprecated use `ReadAccessGroupProjectRequest$inboundSchema` instead. */
    ReadAccessGroupProjectRequest$.inboundSchema = ReadAccessGroupProjectRequest$inboundSchema;
    /** @deprecated use `ReadAccessGroupProjectRequest$outboundSchema` instead. */
    ReadAccessGroupProjectRequest$.outboundSchema = ReadAccessGroupProjectRequest$outboundSchema;
})(ReadAccessGroupProjectRequest$ || (ReadAccessGroupProjectRequest$ = {}));
export function readAccessGroupProjectRequestToJSON(readAccessGroupProjectRequest) {
    return JSON.stringify(ReadAccessGroupProjectRequest$outboundSchema.parse(readAccessGroupProjectRequest));
}
export function readAccessGroupProjectRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ReadAccessGroupProjectRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ReadAccessGroupProjectRequest' from JSON`);
}
/** @internal */
export const ReadAccessGroupProjectRole$inboundSchema = z.nativeEnum(ReadAccessGroupProjectRole);
/** @internal */
export const ReadAccessGroupProjectRole$outboundSchema = ReadAccessGroupProjectRole$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ReadAccessGroupProjectRole$;
(function (ReadAccessGroupProjectRole$) {
    /** @deprecated use `ReadAccessGroupProjectRole$inboundSchema` instead. */
    ReadAccessGroupProjectRole$.inboundSchema = ReadAccessGroupProjectRole$inboundSchema;
    /** @deprecated use `ReadAccessGroupProjectRole$outboundSchema` instead. */
    ReadAccessGroupProjectRole$.outboundSchema = ReadAccessGroupProjectRole$outboundSchema;
})(ReadAccessGroupProjectRole$ || (ReadAccessGroupProjectRole$ = {}));
/** @internal */
export const ReadAccessGroupProjectResponseBody$inboundSchema = z.object({
    teamId: z.string(),
    accessGroupId: z.string(),
    projectId: z.string(),
    role: ReadAccessGroupProjectRole$inboundSchema,
    createdAt: z.string(),
    updatedAt: z.string(),
});
/** @internal */
export const ReadAccessGroupProjectResponseBody$outboundSchema = z.object({
    teamId: z.string(),
    accessGroupId: z.string(),
    projectId: z.string(),
    role: ReadAccessGroupProjectRole$outboundSchema,
    createdAt: z.string(),
    updatedAt: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ReadAccessGroupProjectResponseBody$;
(function (ReadAccessGroupProjectResponseBody$) {
    /** @deprecated use `ReadAccessGroupProjectResponseBody$inboundSchema` instead. */
    ReadAccessGroupProjectResponseBody$.inboundSchema = ReadAccessGroupProjectResponseBody$inboundSchema;
    /** @deprecated use `ReadAccessGroupProjectResponseBody$outboundSchema` instead. */
    ReadAccessGroupProjectResponseBody$.outboundSchema = ReadAccessGroupProjectResponseBody$outboundSchema;
})(ReadAccessGroupProjectResponseBody$ || (ReadAccessGroupProjectResponseBody$ = {}));
export function readAccessGroupProjectResponseBodyToJSON(readAccessGroupProjectResponseBody) {
    return JSON.stringify(ReadAccessGroupProjectResponseBody$outboundSchema.parse(readAccessGroupProjectResponseBody));
}
export function readAccessGroupProjectResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ReadAccessGroupProjectResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ReadAccessGroupProjectResponseBody' from JSON`);
}
//# sourceMappingURL=readaccessgroupprojectop.js.map