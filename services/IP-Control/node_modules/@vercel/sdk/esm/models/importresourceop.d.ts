import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export declare const Ownership: {
    readonly Owned: "owned";
    readonly Linked: "linked";
    readonly Sandbox: "sandbox";
};
export type Ownership = ClosedEnum<typeof Ownership>;
export declare const ImportResourceStatus: {
    readonly Ready: "ready";
    readonly Pending: "pending";
    readonly Suspended: "suspended";
    readonly Resumed: "resumed";
    readonly Uninstalled: "uninstalled";
    readonly Error: "error";
};
export type ImportResourceStatus = ClosedEnum<typeof ImportResourceStatus>;
export declare const ImportResourceType: {
    readonly Prepayment: "prepayment";
    readonly Subscription: "subscription";
};
export type ImportResourceType = ClosedEnum<typeof ImportResourceType>;
export type Details = {
    label: string;
    value?: string | undefined;
};
export type HeightlightedDetails = {
    label: string;
    value?: string | undefined;
};
export type BillingPlan = {
    id: string;
    type: ImportResourceType;
    name: string;
    description?: string | undefined;
    paymentMethodRequired?: boolean | undefined;
    cost?: string | undefined;
    details?: Array<Details> | undefined;
    heightlightedDetails?: Array<HeightlightedDetails> | undefined;
    effectiveDate?: string | undefined;
    additionalProperties?: {
        [k: string]: any;
    };
};
export declare const Level: {
    readonly Info: "info";
    readonly Warn: "warn";
    readonly Error: "error";
};
export type Level = ClosedEnum<typeof Level>;
export type Notification = {
    level: Level;
    title: string;
    message?: string | undefined;
    href?: string | undefined;
};
/**
 * A map of environments to override values for the secret, used for setting different values across deployments in production, preview, and development environments. Note: the same value will be used for all deployments in the given environment.
 */
export type EnvironmentOverrides = {
    /**
     * Value used for development environment.
     */
    development?: string | undefined;
    /**
     * Value used for preview environment.
     */
    preview?: string | undefined;
    /**
     * Value used for production environment.
     */
    production?: string | undefined;
};
export type ImportResourceSecrets = {
    name: string;
    value: string;
    prefix?: string | undefined;
    /**
     * A map of environments to override values for the secret, used for setting different values across deployments in production, preview, and development environments. Note: the same value will be used for all deployments in the given environment.
     */
    environmentOverrides?: EnvironmentOverrides | undefined;
};
export type ImportResourceRequestBody = {
    ownership?: Ownership | undefined;
    productId: string;
    name: string;
    status: ImportResourceStatus;
    metadata?: {
        [k: string]: any;
    } | undefined;
    billingPlan?: BillingPlan | undefined;
    notification?: Notification | undefined;
    extras?: {
        [k: string]: any;
    } | undefined;
    secrets?: Array<ImportResourceSecrets> | undefined;
};
export type ImportResourceRequest = {
    integrationConfigurationId: string;
    resourceId: string;
    requestBody?: ImportResourceRequestBody | undefined;
};
export type ImportResourceResponseBody = {
    name: string;
};
/** @internal */
export declare const Ownership$inboundSchema: z.ZodNativeEnum<typeof Ownership>;
/** @internal */
export declare const Ownership$outboundSchema: z.ZodNativeEnum<typeof Ownership>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Ownership$ {
    /** @deprecated use `Ownership$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Owned: "owned";
        readonly Linked: "linked";
        readonly Sandbox: "sandbox";
    }>;
    /** @deprecated use `Ownership$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Owned: "owned";
        readonly Linked: "linked";
        readonly Sandbox: "sandbox";
    }>;
}
/** @internal */
export declare const ImportResourceStatus$inboundSchema: z.ZodNativeEnum<typeof ImportResourceStatus>;
/** @internal */
export declare const ImportResourceStatus$outboundSchema: z.ZodNativeEnum<typeof ImportResourceStatus>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ImportResourceStatus$ {
    /** @deprecated use `ImportResourceStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Ready: "ready";
        readonly Pending: "pending";
        readonly Suspended: "suspended";
        readonly Resumed: "resumed";
        readonly Uninstalled: "uninstalled";
        readonly Error: "error";
    }>;
    /** @deprecated use `ImportResourceStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Ready: "ready";
        readonly Pending: "pending";
        readonly Suspended: "suspended";
        readonly Resumed: "resumed";
        readonly Uninstalled: "uninstalled";
        readonly Error: "error";
    }>;
}
/** @internal */
export declare const ImportResourceType$inboundSchema: z.ZodNativeEnum<typeof ImportResourceType>;
/** @internal */
export declare const ImportResourceType$outboundSchema: z.ZodNativeEnum<typeof ImportResourceType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ImportResourceType$ {
    /** @deprecated use `ImportResourceType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Prepayment: "prepayment";
        readonly Subscription: "subscription";
    }>;
    /** @deprecated use `ImportResourceType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Prepayment: "prepayment";
        readonly Subscription: "subscription";
    }>;
}
/** @internal */
export declare const Details$inboundSchema: z.ZodType<Details, z.ZodTypeDef, unknown>;
/** @internal */
export type Details$Outbound = {
    label: string;
    value?: string | undefined;
};
/** @internal */
export declare const Details$outboundSchema: z.ZodType<Details$Outbound, z.ZodTypeDef, Details>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Details$ {
    /** @deprecated use `Details$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Details, z.ZodTypeDef, unknown>;
    /** @deprecated use `Details$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Details$Outbound, z.ZodTypeDef, Details>;
    /** @deprecated use `Details$Outbound` instead. */
    type Outbound = Details$Outbound;
}
export declare function detailsToJSON(details: Details): string;
export declare function detailsFromJSON(jsonString: string): SafeParseResult<Details, SDKValidationError>;
/** @internal */
export declare const HeightlightedDetails$inboundSchema: z.ZodType<HeightlightedDetails, z.ZodTypeDef, unknown>;
/** @internal */
export type HeightlightedDetails$Outbound = {
    label: string;
    value?: string | undefined;
};
/** @internal */
export declare const HeightlightedDetails$outboundSchema: z.ZodType<HeightlightedDetails$Outbound, z.ZodTypeDef, HeightlightedDetails>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace HeightlightedDetails$ {
    /** @deprecated use `HeightlightedDetails$inboundSchema` instead. */
    const inboundSchema: z.ZodType<HeightlightedDetails, z.ZodTypeDef, unknown>;
    /** @deprecated use `HeightlightedDetails$outboundSchema` instead. */
    const outboundSchema: z.ZodType<HeightlightedDetails$Outbound, z.ZodTypeDef, HeightlightedDetails>;
    /** @deprecated use `HeightlightedDetails$Outbound` instead. */
    type Outbound = HeightlightedDetails$Outbound;
}
export declare function heightlightedDetailsToJSON(heightlightedDetails: HeightlightedDetails): string;
export declare function heightlightedDetailsFromJSON(jsonString: string): SafeParseResult<HeightlightedDetails, SDKValidationError>;
/** @internal */
export declare const BillingPlan$inboundSchema: z.ZodType<BillingPlan, z.ZodTypeDef, unknown>;
/** @internal */
export type BillingPlan$Outbound = {
    id: string;
    type: string;
    name: string;
    description?: string | undefined;
    paymentMethodRequired?: boolean | undefined;
    cost?: string | undefined;
    details?: Array<Details$Outbound> | undefined;
    heightlightedDetails?: Array<HeightlightedDetails$Outbound> | undefined;
    effectiveDate?: string | undefined;
    [additionalProperties: string]: unknown;
};
/** @internal */
export declare const BillingPlan$outboundSchema: z.ZodType<BillingPlan$Outbound, z.ZodTypeDef, BillingPlan>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BillingPlan$ {
    /** @deprecated use `BillingPlan$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BillingPlan, z.ZodTypeDef, unknown>;
    /** @deprecated use `BillingPlan$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BillingPlan$Outbound, z.ZodTypeDef, BillingPlan>;
    /** @deprecated use `BillingPlan$Outbound` instead. */
    type Outbound = BillingPlan$Outbound;
}
export declare function billingPlanToJSON(billingPlan: BillingPlan): string;
export declare function billingPlanFromJSON(jsonString: string): SafeParseResult<BillingPlan, SDKValidationError>;
/** @internal */
export declare const Level$inboundSchema: z.ZodNativeEnum<typeof Level>;
/** @internal */
export declare const Level$outboundSchema: z.ZodNativeEnum<typeof Level>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Level$ {
    /** @deprecated use `Level$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Info: "info";
        readonly Warn: "warn";
        readonly Error: "error";
    }>;
    /** @deprecated use `Level$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Info: "info";
        readonly Warn: "warn";
        readonly Error: "error";
    }>;
}
/** @internal */
export declare const Notification$inboundSchema: z.ZodType<Notification, z.ZodTypeDef, unknown>;
/** @internal */
export type Notification$Outbound = {
    level: string;
    title: string;
    message?: string | undefined;
    href?: string | undefined;
};
/** @internal */
export declare const Notification$outboundSchema: z.ZodType<Notification$Outbound, z.ZodTypeDef, Notification>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Notification$ {
    /** @deprecated use `Notification$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Notification, z.ZodTypeDef, unknown>;
    /** @deprecated use `Notification$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Notification$Outbound, z.ZodTypeDef, Notification>;
    /** @deprecated use `Notification$Outbound` instead. */
    type Outbound = Notification$Outbound;
}
export declare function notificationToJSON(notification: Notification): string;
export declare function notificationFromJSON(jsonString: string): SafeParseResult<Notification, SDKValidationError>;
/** @internal */
export declare const EnvironmentOverrides$inboundSchema: z.ZodType<EnvironmentOverrides, z.ZodTypeDef, unknown>;
/** @internal */
export type EnvironmentOverrides$Outbound = {
    development?: string | undefined;
    preview?: string | undefined;
    production?: string | undefined;
};
/** @internal */
export declare const EnvironmentOverrides$outboundSchema: z.ZodType<EnvironmentOverrides$Outbound, z.ZodTypeDef, EnvironmentOverrides>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EnvironmentOverrides$ {
    /** @deprecated use `EnvironmentOverrides$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EnvironmentOverrides, z.ZodTypeDef, unknown>;
    /** @deprecated use `EnvironmentOverrides$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EnvironmentOverrides$Outbound, z.ZodTypeDef, EnvironmentOverrides>;
    /** @deprecated use `EnvironmentOverrides$Outbound` instead. */
    type Outbound = EnvironmentOverrides$Outbound;
}
export declare function environmentOverridesToJSON(environmentOverrides: EnvironmentOverrides): string;
export declare function environmentOverridesFromJSON(jsonString: string): SafeParseResult<EnvironmentOverrides, SDKValidationError>;
/** @internal */
export declare const ImportResourceSecrets$inboundSchema: z.ZodType<ImportResourceSecrets, z.ZodTypeDef, unknown>;
/** @internal */
export type ImportResourceSecrets$Outbound = {
    name: string;
    value: string;
    prefix?: string | undefined;
    environmentOverrides?: EnvironmentOverrides$Outbound | undefined;
};
/** @internal */
export declare const ImportResourceSecrets$outboundSchema: z.ZodType<ImportResourceSecrets$Outbound, z.ZodTypeDef, ImportResourceSecrets>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ImportResourceSecrets$ {
    /** @deprecated use `ImportResourceSecrets$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ImportResourceSecrets, z.ZodTypeDef, unknown>;
    /** @deprecated use `ImportResourceSecrets$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ImportResourceSecrets$Outbound, z.ZodTypeDef, ImportResourceSecrets>;
    /** @deprecated use `ImportResourceSecrets$Outbound` instead. */
    type Outbound = ImportResourceSecrets$Outbound;
}
export declare function importResourceSecretsToJSON(importResourceSecrets: ImportResourceSecrets): string;
export declare function importResourceSecretsFromJSON(jsonString: string): SafeParseResult<ImportResourceSecrets, SDKValidationError>;
/** @internal */
export declare const ImportResourceRequestBody$inboundSchema: z.ZodType<ImportResourceRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type ImportResourceRequestBody$Outbound = {
    ownership?: string | undefined;
    productId: string;
    name: string;
    status: string;
    metadata?: {
        [k: string]: any;
    } | undefined;
    billingPlan?: BillingPlan$Outbound | undefined;
    notification?: Notification$Outbound | undefined;
    extras?: {
        [k: string]: any;
    } | undefined;
    secrets?: Array<ImportResourceSecrets$Outbound> | undefined;
};
/** @internal */
export declare const ImportResourceRequestBody$outboundSchema: z.ZodType<ImportResourceRequestBody$Outbound, z.ZodTypeDef, ImportResourceRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ImportResourceRequestBody$ {
    /** @deprecated use `ImportResourceRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ImportResourceRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `ImportResourceRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ImportResourceRequestBody$Outbound, z.ZodTypeDef, ImportResourceRequestBody>;
    /** @deprecated use `ImportResourceRequestBody$Outbound` instead. */
    type Outbound = ImportResourceRequestBody$Outbound;
}
export declare function importResourceRequestBodyToJSON(importResourceRequestBody: ImportResourceRequestBody): string;
export declare function importResourceRequestBodyFromJSON(jsonString: string): SafeParseResult<ImportResourceRequestBody, SDKValidationError>;
/** @internal */
export declare const ImportResourceRequest$inboundSchema: z.ZodType<ImportResourceRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type ImportResourceRequest$Outbound = {
    integrationConfigurationId: string;
    resourceId: string;
    RequestBody?: ImportResourceRequestBody$Outbound | undefined;
};
/** @internal */
export declare const ImportResourceRequest$outboundSchema: z.ZodType<ImportResourceRequest$Outbound, z.ZodTypeDef, ImportResourceRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ImportResourceRequest$ {
    /** @deprecated use `ImportResourceRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ImportResourceRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `ImportResourceRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ImportResourceRequest$Outbound, z.ZodTypeDef, ImportResourceRequest>;
    /** @deprecated use `ImportResourceRequest$Outbound` instead. */
    type Outbound = ImportResourceRequest$Outbound;
}
export declare function importResourceRequestToJSON(importResourceRequest: ImportResourceRequest): string;
export declare function importResourceRequestFromJSON(jsonString: string): SafeParseResult<ImportResourceRequest, SDKValidationError>;
/** @internal */
export declare const ImportResourceResponseBody$inboundSchema: z.ZodType<ImportResourceResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type ImportResourceResponseBody$Outbound = {
    name: string;
};
/** @internal */
export declare const ImportResourceResponseBody$outboundSchema: z.ZodType<ImportResourceResponseBody$Outbound, z.ZodTypeDef, ImportResourceResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ImportResourceResponseBody$ {
    /** @deprecated use `ImportResourceResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ImportResourceResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `ImportResourceResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ImportResourceResponseBody$Outbound, z.ZodTypeDef, ImportResourceResponseBody>;
    /** @deprecated use `ImportResourceResponseBody$Outbound` instead. */
    type Outbound = ImportResourceResponseBody$Outbound;
}
export declare function importResourceResponseBodyToJSON(importResourceResponseBody: ImportResourceResponseBody): string;
export declare function importResourceResponseBodyFromJSON(jsonString: string): SafeParseResult<ImportResourceResponseBody, SDKValidationError>;
//# sourceMappingURL=importresourceop.d.ts.map