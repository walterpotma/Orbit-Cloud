/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/**
 * The project role that will be added to this Access Group. \"null\" will remove this project level role.
 */
export const UpdateAccessGroupRole = {
    Admin: "ADMIN",
    ProjectViewer: "PROJECT_VIEWER",
    ProjectDeveloper: "PROJECT_DEVELOPER",
};
export const UpdateAccessGroupEntitlements = {
    V0: "v0",
};
/** @internal */
export const UpdateAccessGroupRole$inboundSchema = z.nativeEnum(UpdateAccessGroupRole);
/** @internal */
export const UpdateAccessGroupRole$outboundSchema = UpdateAccessGroupRole$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateAccessGroupRole$;
(function (UpdateAccessGroupRole$) {
    /** @deprecated use `UpdateAccessGroupRole$inboundSchema` instead. */
    UpdateAccessGroupRole$.inboundSchema = UpdateAccessGroupRole$inboundSchema;
    /** @deprecated use `UpdateAccessGroupRole$outboundSchema` instead. */
    UpdateAccessGroupRole$.outboundSchema = UpdateAccessGroupRole$outboundSchema;
})(UpdateAccessGroupRole$ || (UpdateAccessGroupRole$ = {}));
/** @internal */
export const Projects$inboundSchema = z.object({
    projectId: z.string(),
    role: z.nullable(UpdateAccessGroupRole$inboundSchema),
});
/** @internal */
export const Projects$outboundSchema = z.object({
    projectId: z.string(),
    role: z.nullable(UpdateAccessGroupRole$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Projects$;
(function (Projects$) {
    /** @deprecated use `Projects$inboundSchema` instead. */
    Projects$.inboundSchema = Projects$inboundSchema;
    /** @deprecated use `Projects$outboundSchema` instead. */
    Projects$.outboundSchema = Projects$outboundSchema;
})(Projects$ || (Projects$ = {}));
export function projectsToJSON(projects) {
    return JSON.stringify(Projects$outboundSchema.parse(projects));
}
export function projectsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Projects$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Projects' from JSON`);
}
/** @internal */
export const UpdateAccessGroupRequestBody$inboundSchema = z.object({
    name: z.string().optional(),
    projects: z.array(z.lazy(() => Projects$inboundSchema)).optional(),
    membersToAdd: z.array(z.string()).optional(),
    membersToRemove: z.array(z.string()).optional(),
});
/** @internal */
export const UpdateAccessGroupRequestBody$outboundSchema = z.object({
    name: z.string().optional(),
    projects: z.array(z.lazy(() => Projects$outboundSchema)).optional(),
    membersToAdd: z.array(z.string()).optional(),
    membersToRemove: z.array(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateAccessGroupRequestBody$;
(function (UpdateAccessGroupRequestBody$) {
    /** @deprecated use `UpdateAccessGroupRequestBody$inboundSchema` instead. */
    UpdateAccessGroupRequestBody$.inboundSchema = UpdateAccessGroupRequestBody$inboundSchema;
    /** @deprecated use `UpdateAccessGroupRequestBody$outboundSchema` instead. */
    UpdateAccessGroupRequestBody$.outboundSchema = UpdateAccessGroupRequestBody$outboundSchema;
})(UpdateAccessGroupRequestBody$ || (UpdateAccessGroupRequestBody$ = {}));
export function updateAccessGroupRequestBodyToJSON(updateAccessGroupRequestBody) {
    return JSON.stringify(UpdateAccessGroupRequestBody$outboundSchema.parse(updateAccessGroupRequestBody));
}
export function updateAccessGroupRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateAccessGroupRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateAccessGroupRequestBody' from JSON`);
}
/** @internal */
export const UpdateAccessGroupRequest$inboundSchema = z.object({
    idOrName: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => UpdateAccessGroupRequestBody$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const UpdateAccessGroupRequest$outboundSchema = z.object({
    idOrName: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => UpdateAccessGroupRequestBody$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateAccessGroupRequest$;
(function (UpdateAccessGroupRequest$) {
    /** @deprecated use `UpdateAccessGroupRequest$inboundSchema` instead. */
    UpdateAccessGroupRequest$.inboundSchema = UpdateAccessGroupRequest$inboundSchema;
    /** @deprecated use `UpdateAccessGroupRequest$outboundSchema` instead. */
    UpdateAccessGroupRequest$.outboundSchema = UpdateAccessGroupRequest$outboundSchema;
})(UpdateAccessGroupRequest$ || (UpdateAccessGroupRequest$ = {}));
export function updateAccessGroupRequestToJSON(updateAccessGroupRequest) {
    return JSON.stringify(UpdateAccessGroupRequest$outboundSchema.parse(updateAccessGroupRequest));
}
export function updateAccessGroupRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateAccessGroupRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateAccessGroupRequest' from JSON`);
}
/** @internal */
export const UpdateAccessGroupEntitlements$inboundSchema = z.nativeEnum(UpdateAccessGroupEntitlements);
/** @internal */
export const UpdateAccessGroupEntitlements$outboundSchema = UpdateAccessGroupEntitlements$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateAccessGroupEntitlements$;
(function (UpdateAccessGroupEntitlements$) {
    /** @deprecated use `UpdateAccessGroupEntitlements$inboundSchema` instead. */
    UpdateAccessGroupEntitlements$.inboundSchema = UpdateAccessGroupEntitlements$inboundSchema;
    /** @deprecated use `UpdateAccessGroupEntitlements$outboundSchema` instead. */
    UpdateAccessGroupEntitlements$.outboundSchema = UpdateAccessGroupEntitlements$outboundSchema;
})(UpdateAccessGroupEntitlements$ || (UpdateAccessGroupEntitlements$ = {}));
/** @internal */
export const UpdateAccessGroupResponseBody$inboundSchema = z.object({
    entitlements: z.array(UpdateAccessGroupEntitlements$inboundSchema),
    name: z.string(),
    createdAt: z.string(),
    teamId: z.string(),
    updatedAt: z.string(),
    accessGroupId: z.string(),
    membersCount: z.number(),
    projectsCount: z.number(),
    teamRoles: z.array(z.string()).optional(),
    teamPermissions: z.array(z.string()).optional(),
});
/** @internal */
export const UpdateAccessGroupResponseBody$outboundSchema = z.object({
    entitlements: z.array(UpdateAccessGroupEntitlements$outboundSchema),
    name: z.string(),
    createdAt: z.string(),
    teamId: z.string(),
    updatedAt: z.string(),
    accessGroupId: z.string(),
    membersCount: z.number(),
    projectsCount: z.number(),
    teamRoles: z.array(z.string()).optional(),
    teamPermissions: z.array(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateAccessGroupResponseBody$;
(function (UpdateAccessGroupResponseBody$) {
    /** @deprecated use `UpdateAccessGroupResponseBody$inboundSchema` instead. */
    UpdateAccessGroupResponseBody$.inboundSchema = UpdateAccessGroupResponseBody$inboundSchema;
    /** @deprecated use `UpdateAccessGroupResponseBody$outboundSchema` instead. */
    UpdateAccessGroupResponseBody$.outboundSchema = UpdateAccessGroupResponseBody$outboundSchema;
})(UpdateAccessGroupResponseBody$ || (UpdateAccessGroupResponseBody$ = {}));
export function updateAccessGroupResponseBodyToJSON(updateAccessGroupResponseBody) {
    return JSON.stringify(UpdateAccessGroupResponseBody$outboundSchema.parse(updateAccessGroupResponseBody));
}
export function updateAccessGroupResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateAccessGroupResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateAccessGroupResponseBody' from JSON`);
}
//# sourceMappingURL=updateaccessgroupop.js.map