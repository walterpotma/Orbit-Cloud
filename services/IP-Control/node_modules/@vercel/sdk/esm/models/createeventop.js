/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
export const CreateEventEventType = {
    ResourceUpdated: "resource.updated",
};
export const EventType = {
    InstallationUpdated: "installation.updated",
};
/** @internal */
export const CreateEventEventType$inboundSchema = z.nativeEnum(CreateEventEventType);
/** @internal */
export const CreateEventEventType$outboundSchema = CreateEventEventType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateEventEventType$;
(function (CreateEventEventType$) {
    /** @deprecated use `CreateEventEventType$inboundSchema` instead. */
    CreateEventEventType$.inboundSchema = CreateEventEventType$inboundSchema;
    /** @deprecated use `CreateEventEventType$outboundSchema` instead. */
    CreateEventEventType$.outboundSchema = CreateEventEventType$outboundSchema;
})(CreateEventEventType$ || (CreateEventEventType$ = {}));
/** @internal */
export const Event2$inboundSchema = z
    .object({
    type: CreateEventEventType$inboundSchema,
    productId: z.string(),
    resourceId: z.string(),
});
/** @internal */
export const Event2$outboundSchema = z.object({
    type: CreateEventEventType$outboundSchema,
    productId: z.string(),
    resourceId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Event2$;
(function (Event2$) {
    /** @deprecated use `Event2$inboundSchema` instead. */
    Event2$.inboundSchema = Event2$inboundSchema;
    /** @deprecated use `Event2$outboundSchema` instead. */
    Event2$.outboundSchema = Event2$outboundSchema;
})(Event2$ || (Event2$ = {}));
export function event2ToJSON(event2) {
    return JSON.stringify(Event2$outboundSchema.parse(event2));
}
export function event2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Event2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Event2' from JSON`);
}
/** @internal */
export const EventType$inboundSchema = z
    .nativeEnum(EventType);
/** @internal */
export const EventType$outboundSchema = EventType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EventType$;
(function (EventType$) {
    /** @deprecated use `EventType$inboundSchema` instead. */
    EventType$.inboundSchema = EventType$inboundSchema;
    /** @deprecated use `EventType$outboundSchema` instead. */
    EventType$.outboundSchema = EventType$outboundSchema;
})(EventType$ || (EventType$ = {}));
/** @internal */
export const Event1$inboundSchema = z
    .object({
    type: EventType$inboundSchema,
    billingPlanId: z.string().optional(),
});
/** @internal */
export const Event1$outboundSchema = z.object({
    type: EventType$outboundSchema,
    billingPlanId: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Event1$;
(function (Event1$) {
    /** @deprecated use `Event1$inboundSchema` instead. */
    Event1$.inboundSchema = Event1$inboundSchema;
    /** @deprecated use `Event1$outboundSchema` instead. */
    Event1$.outboundSchema = Event1$outboundSchema;
})(Event1$ || (Event1$ = {}));
export function event1ToJSON(event1) {
    return JSON.stringify(Event1$outboundSchema.parse(event1));
}
export function event1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Event1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Event1' from JSON`);
}
/** @internal */
export const CreateEventEvent$inboundSchema = z.union([
    z.lazy(() => Event2$inboundSchema),
    z.lazy(() => Event1$inboundSchema),
]);
/** @internal */
export const CreateEventEvent$outboundSchema = z.union([
    z.lazy(() => Event2$outboundSchema),
    z.lazy(() => Event1$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateEventEvent$;
(function (CreateEventEvent$) {
    /** @deprecated use `CreateEventEvent$inboundSchema` instead. */
    CreateEventEvent$.inboundSchema = CreateEventEvent$inboundSchema;
    /** @deprecated use `CreateEventEvent$outboundSchema` instead. */
    CreateEventEvent$.outboundSchema = CreateEventEvent$outboundSchema;
})(CreateEventEvent$ || (CreateEventEvent$ = {}));
export function createEventEventToJSON(createEventEvent) {
    return JSON.stringify(CreateEventEvent$outboundSchema.parse(createEventEvent));
}
export function createEventEventFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateEventEvent$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateEventEvent' from JSON`);
}
/** @internal */
export const CreateEventRequestBody$inboundSchema = z.object({
    event: z.union([
        z.lazy(() => Event2$inboundSchema),
        z.lazy(() => Event1$inboundSchema),
    ]),
});
/** @internal */
export const CreateEventRequestBody$outboundSchema = z.object({
    event: z.union([
        z.lazy(() => Event2$outboundSchema),
        z.lazy(() => Event1$outboundSchema),
    ]),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateEventRequestBody$;
(function (CreateEventRequestBody$) {
    /** @deprecated use `CreateEventRequestBody$inboundSchema` instead. */
    CreateEventRequestBody$.inboundSchema = CreateEventRequestBody$inboundSchema;
    /** @deprecated use `CreateEventRequestBody$outboundSchema` instead. */
    CreateEventRequestBody$.outboundSchema = CreateEventRequestBody$outboundSchema;
})(CreateEventRequestBody$ || (CreateEventRequestBody$ = {}));
export function createEventRequestBodyToJSON(createEventRequestBody) {
    return JSON.stringify(CreateEventRequestBody$outboundSchema.parse(createEventRequestBody));
}
export function createEventRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateEventRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateEventRequestBody' from JSON`);
}
/** @internal */
export const CreateEventRequest$inboundSchema = z.object({
    integrationConfigurationId: z.string(),
    RequestBody: z.lazy(() => CreateEventRequestBody$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const CreateEventRequest$outboundSchema = z.object({
    integrationConfigurationId: z.string(),
    requestBody: z.lazy(() => CreateEventRequestBody$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateEventRequest$;
(function (CreateEventRequest$) {
    /** @deprecated use `CreateEventRequest$inboundSchema` instead. */
    CreateEventRequest$.inboundSchema = CreateEventRequest$inboundSchema;
    /** @deprecated use `CreateEventRequest$outboundSchema` instead. */
    CreateEventRequest$.outboundSchema = CreateEventRequest$outboundSchema;
})(CreateEventRequest$ || (CreateEventRequest$ = {}));
export function createEventRequestToJSON(createEventRequest) {
    return JSON.stringify(CreateEventRequest$outboundSchema.parse(createEventRequest));
}
export function createEventRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateEventRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateEventRequest' from JSON`);
}
//# sourceMappingURL=createeventop.js.map