/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
export const AuthTokenScopesType = {
    Team: "team",
};
export const AuthTokenScopesOrigin = {
    Saml: "saml",
    Github: "github",
    Gitlab: "gitlab",
    Bitbucket: "bitbucket",
    Email: "email",
    Manual: "manual",
    Passkey: "passkey",
    Otp: "otp",
    Sms: "sms",
    Invite: "invite",
    Google: "google",
    App: "app",
};
export const ScopesType = {
    User: "user",
};
/**
 * Possible multi-factor origins
 */
export const AuthTokenScopes1Origin = {
    Totp: "totp",
    Webauthn: "webauthn",
    RecoveryCode: "recovery-code",
};
export const ScopesOrigin = {
    Saml: "saml",
    Github: "github",
    Gitlab: "gitlab",
    Bitbucket: "bitbucket",
    Email: "email",
    Manual: "manual",
    Passkey: "passkey",
    Otp: "otp",
    Sms: "sms",
    Invite: "invite",
    Google: "google",
    App: "app",
};
/** @internal */
export const AuthTokenScopesType$inboundSchema = z.nativeEnum(AuthTokenScopesType);
/** @internal */
export const AuthTokenScopesType$outboundSchema = AuthTokenScopesType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AuthTokenScopesType$;
(function (AuthTokenScopesType$) {
    /** @deprecated use `AuthTokenScopesType$inboundSchema` instead. */
    AuthTokenScopesType$.inboundSchema = AuthTokenScopesType$inboundSchema;
    /** @deprecated use `AuthTokenScopesType$outboundSchema` instead. */
    AuthTokenScopesType$.outboundSchema = AuthTokenScopesType$outboundSchema;
})(AuthTokenScopesType$ || (AuthTokenScopesType$ = {}));
/** @internal */
export const AuthTokenScopesOrigin$inboundSchema = z.nativeEnum(AuthTokenScopesOrigin);
/** @internal */
export const AuthTokenScopesOrigin$outboundSchema = AuthTokenScopesOrigin$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AuthTokenScopesOrigin$;
(function (AuthTokenScopesOrigin$) {
    /** @deprecated use `AuthTokenScopesOrigin$inboundSchema` instead. */
    AuthTokenScopesOrigin$.inboundSchema = AuthTokenScopesOrigin$inboundSchema;
    /** @deprecated use `AuthTokenScopesOrigin$outboundSchema` instead. */
    AuthTokenScopesOrigin$.outboundSchema = AuthTokenScopesOrigin$outboundSchema;
})(AuthTokenScopesOrigin$ || (AuthTokenScopesOrigin$ = {}));
/** @internal */
export const Scopes2$inboundSchema = z.object({
    type: AuthTokenScopesType$inboundSchema,
    teamId: z.string(),
    origin: AuthTokenScopesOrigin$inboundSchema.optional(),
    createdAt: z.number(),
    expiresAt: z.number().optional(),
});
/** @internal */
export const Scopes2$outboundSchema = z.object({
    type: AuthTokenScopesType$outboundSchema,
    teamId: z.string(),
    origin: AuthTokenScopesOrigin$outboundSchema.optional(),
    createdAt: z.number(),
    expiresAt: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Scopes2$;
(function (Scopes2$) {
    /** @deprecated use `Scopes2$inboundSchema` instead. */
    Scopes2$.inboundSchema = Scopes2$inboundSchema;
    /** @deprecated use `Scopes2$outboundSchema` instead. */
    Scopes2$.outboundSchema = Scopes2$outboundSchema;
})(Scopes2$ || (Scopes2$ = {}));
export function scopes2ToJSON(scopes2) {
    return JSON.stringify(Scopes2$outboundSchema.parse(scopes2));
}
export function scopes2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Scopes2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Scopes2' from JSON`);
}
/** @internal */
export const ScopesType$inboundSchema = z
    .nativeEnum(ScopesType);
/** @internal */
export const ScopesType$outboundSchema = ScopesType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ScopesType$;
(function (ScopesType$) {
    /** @deprecated use `ScopesType$inboundSchema` instead. */
    ScopesType$.inboundSchema = ScopesType$inboundSchema;
    /** @deprecated use `ScopesType$outboundSchema` instead. */
    ScopesType$.outboundSchema = ScopesType$outboundSchema;
})(ScopesType$ || (ScopesType$ = {}));
/** @internal */
export const AuthTokenScopes1Origin$inboundSchema = z.nativeEnum(AuthTokenScopes1Origin);
/** @internal */
export const AuthTokenScopes1Origin$outboundSchema = AuthTokenScopes1Origin$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AuthTokenScopes1Origin$;
(function (AuthTokenScopes1Origin$) {
    /** @deprecated use `AuthTokenScopes1Origin$inboundSchema` instead. */
    AuthTokenScopes1Origin$.inboundSchema = AuthTokenScopes1Origin$inboundSchema;
    /** @deprecated use `AuthTokenScopes1Origin$outboundSchema` instead. */
    AuthTokenScopes1Origin$.outboundSchema = AuthTokenScopes1Origin$outboundSchema;
})(AuthTokenScopes1Origin$ || (AuthTokenScopes1Origin$ = {}));
/** @internal */
export const Sudo$inboundSchema = z
    .object({
    origin: AuthTokenScopes1Origin$inboundSchema,
    expiresAt: z.number(),
});
/** @internal */
export const Sudo$outboundSchema = z.object({
    origin: AuthTokenScopes1Origin$outboundSchema,
    expiresAt: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Sudo$;
(function (Sudo$) {
    /** @deprecated use `Sudo$inboundSchema` instead. */
    Sudo$.inboundSchema = Sudo$inboundSchema;
    /** @deprecated use `Sudo$outboundSchema` instead. */
    Sudo$.outboundSchema = Sudo$outboundSchema;
})(Sudo$ || (Sudo$ = {}));
export function sudoToJSON(sudo) {
    return JSON.stringify(Sudo$outboundSchema.parse(sudo));
}
export function sudoFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Sudo$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Sudo' from JSON`);
}
/** @internal */
export const ScopesOrigin$inboundSchema = z.nativeEnum(ScopesOrigin);
/** @internal */
export const ScopesOrigin$outboundSchema = ScopesOrigin$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ScopesOrigin$;
(function (ScopesOrigin$) {
    /** @deprecated use `ScopesOrigin$inboundSchema` instead. */
    ScopesOrigin$.inboundSchema = ScopesOrigin$inboundSchema;
    /** @deprecated use `ScopesOrigin$outboundSchema` instead. */
    ScopesOrigin$.outboundSchema = ScopesOrigin$outboundSchema;
})(ScopesOrigin$ || (ScopesOrigin$ = {}));
/** @internal */
export const Scopes1$inboundSchema = z.object({
    type: ScopesType$inboundSchema,
    sudo: z.lazy(() => Sudo$inboundSchema).optional(),
    origin: ScopesOrigin$inboundSchema.optional(),
    createdAt: z.number(),
    expiresAt: z.number().optional(),
});
/** @internal */
export const Scopes1$outboundSchema = z.object({
    type: ScopesType$outboundSchema,
    sudo: z.lazy(() => Sudo$outboundSchema).optional(),
    origin: ScopesOrigin$outboundSchema.optional(),
    createdAt: z.number(),
    expiresAt: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Scopes1$;
(function (Scopes1$) {
    /** @deprecated use `Scopes1$inboundSchema` instead. */
    Scopes1$.inboundSchema = Scopes1$inboundSchema;
    /** @deprecated use `Scopes1$outboundSchema` instead. */
    Scopes1$.outboundSchema = Scopes1$outboundSchema;
})(Scopes1$ || (Scopes1$ = {}));
export function scopes1ToJSON(scopes1) {
    return JSON.stringify(Scopes1$outboundSchema.parse(scopes1));
}
export function scopes1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Scopes1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Scopes1' from JSON`);
}
/** @internal */
export const Scopes$inboundSchema = z
    .union([
    z.lazy(() => Scopes2$inboundSchema),
    z.lazy(() => Scopes1$inboundSchema),
]);
/** @internal */
export const Scopes$outboundSchema = z.union([
    z.lazy(() => Scopes2$outboundSchema),
    z.lazy(() => Scopes1$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Scopes$;
(function (Scopes$) {
    /** @deprecated use `Scopes$inboundSchema` instead. */
    Scopes$.inboundSchema = Scopes$inboundSchema;
    /** @deprecated use `Scopes$outboundSchema` instead. */
    Scopes$.outboundSchema = Scopes$outboundSchema;
})(Scopes$ || (Scopes$ = {}));
export function scopesToJSON(scopes) {
    return JSON.stringify(Scopes$outboundSchema.parse(scopes));
}
export function scopesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Scopes$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Scopes' from JSON`);
}
/** @internal */
export const AuthToken$inboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    type: z.string(),
    origin: z.string().optional(),
    scopes: z.array(z.union([
        z.lazy(() => Scopes2$inboundSchema),
        z.lazy(() => Scopes1$inboundSchema),
    ])).optional(),
    expiresAt: z.number().optional(),
    activeAt: z.number(),
    createdAt: z.number(),
});
/** @internal */
export const AuthToken$outboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    type: z.string(),
    origin: z.string().optional(),
    scopes: z.array(z.union([
        z.lazy(() => Scopes2$outboundSchema),
        z.lazy(() => Scopes1$outboundSchema),
    ])).optional(),
    expiresAt: z.number().optional(),
    activeAt: z.number(),
    createdAt: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AuthToken$;
(function (AuthToken$) {
    /** @deprecated use `AuthToken$inboundSchema` instead. */
    AuthToken$.inboundSchema = AuthToken$inboundSchema;
    /** @deprecated use `AuthToken$outboundSchema` instead. */
    AuthToken$.outboundSchema = AuthToken$outboundSchema;
})(AuthToken$ || (AuthToken$ = {}));
export function authTokenToJSON(authToken) {
    return JSON.stringify(AuthToken$outboundSchema.parse(authToken));
}
export function authTokenFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AuthToken$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AuthToken' from JSON`);
}
//# sourceMappingURL=authtoken.js.map