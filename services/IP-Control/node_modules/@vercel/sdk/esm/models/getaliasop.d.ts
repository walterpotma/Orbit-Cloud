import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type GetAliasRequest = {
    /**
     * Get the alias only if it was created after the provided timestamp
     */
    from?: number | undefined;
    /**
     * The alias or alias ID to be retrieved
     */
    idOrAlias: string;
    /**
     * Get the alias only if it is assigned to the provided project ID
     */
    projectId?: string | undefined;
    /**
     * Get the alias only if it was created after this JavaScript timestamp
     */
    since?: number | undefined;
    /**
     * Get the alias only if it was created before this JavaScript timestamp
     */
    until?: number | undefined;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};
/**
 * Information of the user who created the alias
 */
export type GetAliasCreator = {
    /**
     * ID of the user who created the alias
     */
    uid: string;
    /**
     * Email of the user who created the alias
     */
    email: string;
    /**
     * Username of the user who created the alias
     */
    username: string;
};
/**
 * A map with the deployment ID, URL and metadata
 */
export type GetAliasDeployment = {
    /**
     * The deployment unique identifier
     */
    id: string;
    /**
     * The deployment unique URL
     */
    url: string;
    /**
     * The deployment metadata
     */
    meta?: string | undefined;
};
export declare const GetAliasProtectionBypassAliasesResponse200Scope: {
    readonly EmailInvite: "email_invite";
};
export type GetAliasProtectionBypassAliasesResponse200Scope = ClosedEnum<typeof GetAliasProtectionBypassAliasesResponse200Scope>;
/**
 * The protection bypass for the alias
 */
export type ProtectionBypass4 = {
    createdAt: number;
    lastUpdatedAt: number;
    lastUpdatedBy: string;
    scope: GetAliasProtectionBypassAliasesResponse200Scope;
};
export declare const GetAliasProtectionBypassAliasesResponseScope: {
    readonly AliasProtectionOverride: "alias-protection-override";
};
export type GetAliasProtectionBypassAliasesResponseScope = ClosedEnum<typeof GetAliasProtectionBypassAliasesResponseScope>;
/**
 * The protection bypass for the alias
 */
export type ProtectionBypass3 = {
    createdAt: number;
    createdBy: string;
    scope: GetAliasProtectionBypassAliasesResponseScope;
};
export declare const ProtectionBypassAccess: {
    readonly Requested: "requested";
    readonly Granted: "granted";
};
export type ProtectionBypassAccess = ClosedEnum<typeof ProtectionBypassAccess>;
export declare const GetAliasProtectionBypassAliasesScope: {
    readonly User: "user";
};
export type GetAliasProtectionBypassAliasesScope = ClosedEnum<typeof GetAliasProtectionBypassAliasesScope>;
/**
 * The protection bypass for the alias
 */
export type GetAliasProtectionBypass2 = {
    createdAt: number;
    lastUpdatedAt: number;
    lastUpdatedBy: string;
    access: ProtectionBypassAccess;
    scope: GetAliasProtectionBypassAliasesScope;
};
export declare const GetAliasProtectionBypassScope: {
    readonly ShareableLink: "shareable-link";
};
export type GetAliasProtectionBypassScope = ClosedEnum<typeof GetAliasProtectionBypassScope>;
/**
 * The protection bypass for the alias
 */
export type GetAliasProtectionBypass1 = {
    createdAt: number;
    createdBy: string;
    scope: GetAliasProtectionBypassScope;
    expires?: number | undefined;
};
export type GetAliasProtectionBypass = GetAliasProtectionBypass2 | ProtectionBypass4 | GetAliasProtectionBypass1 | ProtectionBypass3;
export type DefaultApp = {
    projectId: string;
};
/**
 * A list of the deployment routing information for each project.
 */
export type Applications3 = {
    /**
     * This is the deployment for the same commit, it could be a cancelled deployment. The proxy will fallback to the branchDeploymentId and then the fallbackDeploymentId.
     */
    deploymentId?: string | undefined;
    /**
     * This is the latest non-cancelled deployment of the branch alias at the time the commit alias was created. It is possible there is no deployment for the branch, or this was set before the deployment was canceled, in which case this will point to a cancelled deployment, in either case the proxy will fallback to the fallbackDeploymentId.
     */
    branchDeploymentId?: string | undefined;
    /**
     * This is the deployment of the fallback host at the time the commit alias was created. It is possible for this to be a deleted deployment, in which case the proxy will show that the deployment is deleted. It will not use the fallbackHost, as a future deployment on the fallback host could be invalid for this deployment, and it could lead to confusion / incorrect behavior for the commit alias.
     */
    fallbackDeploymentId?: string | undefined;
    /**
     * Temporary for backwards compatibility. Can remove when metadata change is released
     */
    fallbackHost?: string | undefined;
    branchAlias?: string | undefined;
    /**
     * The project ID of the microfrontends application.
     */
    projectId: string;
};
/**
 * A list of the deployment routing information for each project.
 */
export type Applications2 = {
    /**
     * This is always set. For branch aliases, it's used as the fallback if there is no deployment for the branch.
     */
    fallbackHost: string;
    /**
     * Could point to a branch without a deployment if the project was never deployed. The proxy will fallback to the fallbackHost if there is no deployment.
     */
    branchAlias: string;
    /**
     * The project ID of the microfrontends application.
     */
    projectId: string;
};
/**
 * A list of the deployment routing information for each project.
 */
export type Applications1 = {
    /**
     * This is always set. In production it is used as a pointer to each apps production deployment. For pre-production, it's used as the fallback if there is no deployment for the branch.
     */
    fallbackHost: string;
    /**
     * The project ID of the microfrontends application.
     */
    projectId: string;
};
export type Applications = Array<Applications1> | Array<Applications2> | Array<Applications3>;
/**
 * The microfrontends for the alias including the routing configuration
 */
export type GetAliasMicrofrontends = {
    defaultApp: DefaultApp;
    applications: Array<Applications1> | Array<Applications2> | Array<Applications3>;
};
export type GetAliasResponseBody = {
    /**
     * The alias name, it could be a `.vercel.app` subdomain or a custom domain
     */
    alias: string;
    /**
     * The date when the alias was created
     */
    created: Date;
    /**
     * The date when the alias was created in milliseconds since the UNIX epoch
     */
    createdAt?: number | undefined;
    /**
     * Information of the user who created the alias
     */
    creator?: GetAliasCreator | undefined;
    /**
     * The date when the alias was deleted in milliseconds since the UNIX epoch
     */
    deletedAt?: number | undefined;
    /**
     * A map with the deployment ID, URL and metadata
     */
    deployment?: GetAliasDeployment | undefined;
    /**
     * The deployment ID
     */
    deploymentId: string | null;
    /**
     * The unique identifier of the project
     */
    projectId: string | null;
    /**
     * Target destination domain for redirect when the alias is a redirect
     */
    redirect?: string | null | undefined;
    /**
     * Status code to be used on redirect
     */
    redirectStatusCode?: number | null | undefined;
    /**
     * The unique identifier of the alias
     */
    uid: string;
    /**
     * The date when the alias was updated in milliseconds since the UNIX epoch
     */
    updatedAt?: number | undefined;
    /**
     * The protection bypass for the alias
     */
    protectionBypass?: {
        [k: string]: GetAliasProtectionBypass2 | ProtectionBypass4 | GetAliasProtectionBypass1 | ProtectionBypass3;
    } | undefined;
    /**
     * The microfrontends for the alias including the routing configuration
     */
    microfrontends?: GetAliasMicrofrontends | undefined;
};
/** @internal */
export declare const GetAliasRequest$inboundSchema: z.ZodType<GetAliasRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetAliasRequest$Outbound = {
    from?: number | undefined;
    idOrAlias: string;
    projectId?: string | undefined;
    since?: number | undefined;
    until?: number | undefined;
    teamId?: string | undefined;
    slug?: string | undefined;
};
/** @internal */
export declare const GetAliasRequest$outboundSchema: z.ZodType<GetAliasRequest$Outbound, z.ZodTypeDef, GetAliasRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAliasRequest$ {
    /** @deprecated use `GetAliasRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetAliasRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetAliasRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetAliasRequest$Outbound, z.ZodTypeDef, GetAliasRequest>;
    /** @deprecated use `GetAliasRequest$Outbound` instead. */
    type Outbound = GetAliasRequest$Outbound;
}
export declare function getAliasRequestToJSON(getAliasRequest: GetAliasRequest): string;
export declare function getAliasRequestFromJSON(jsonString: string): SafeParseResult<GetAliasRequest, SDKValidationError>;
/** @internal */
export declare const GetAliasCreator$inboundSchema: z.ZodType<GetAliasCreator, z.ZodTypeDef, unknown>;
/** @internal */
export type GetAliasCreator$Outbound = {
    uid: string;
    email: string;
    username: string;
};
/** @internal */
export declare const GetAliasCreator$outboundSchema: z.ZodType<GetAliasCreator$Outbound, z.ZodTypeDef, GetAliasCreator>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAliasCreator$ {
    /** @deprecated use `GetAliasCreator$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetAliasCreator, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetAliasCreator$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetAliasCreator$Outbound, z.ZodTypeDef, GetAliasCreator>;
    /** @deprecated use `GetAliasCreator$Outbound` instead. */
    type Outbound = GetAliasCreator$Outbound;
}
export declare function getAliasCreatorToJSON(getAliasCreator: GetAliasCreator): string;
export declare function getAliasCreatorFromJSON(jsonString: string): SafeParseResult<GetAliasCreator, SDKValidationError>;
/** @internal */
export declare const GetAliasDeployment$inboundSchema: z.ZodType<GetAliasDeployment, z.ZodTypeDef, unknown>;
/** @internal */
export type GetAliasDeployment$Outbound = {
    id: string;
    url: string;
    meta?: string | undefined;
};
/** @internal */
export declare const GetAliasDeployment$outboundSchema: z.ZodType<GetAliasDeployment$Outbound, z.ZodTypeDef, GetAliasDeployment>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAliasDeployment$ {
    /** @deprecated use `GetAliasDeployment$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetAliasDeployment, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetAliasDeployment$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetAliasDeployment$Outbound, z.ZodTypeDef, GetAliasDeployment>;
    /** @deprecated use `GetAliasDeployment$Outbound` instead. */
    type Outbound = GetAliasDeployment$Outbound;
}
export declare function getAliasDeploymentToJSON(getAliasDeployment: GetAliasDeployment): string;
export declare function getAliasDeploymentFromJSON(jsonString: string): SafeParseResult<GetAliasDeployment, SDKValidationError>;
/** @internal */
export declare const GetAliasProtectionBypassAliasesResponse200Scope$inboundSchema: z.ZodNativeEnum<typeof GetAliasProtectionBypassAliasesResponse200Scope>;
/** @internal */
export declare const GetAliasProtectionBypassAliasesResponse200Scope$outboundSchema: z.ZodNativeEnum<typeof GetAliasProtectionBypassAliasesResponse200Scope>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAliasProtectionBypassAliasesResponse200Scope$ {
    /** @deprecated use `GetAliasProtectionBypassAliasesResponse200Scope$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly EmailInvite: "email_invite";
    }>;
    /** @deprecated use `GetAliasProtectionBypassAliasesResponse200Scope$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly EmailInvite: "email_invite";
    }>;
}
/** @internal */
export declare const ProtectionBypass4$inboundSchema: z.ZodType<ProtectionBypass4, z.ZodTypeDef, unknown>;
/** @internal */
export type ProtectionBypass4$Outbound = {
    createdAt: number;
    lastUpdatedAt: number;
    lastUpdatedBy: string;
    scope: string;
};
/** @internal */
export declare const ProtectionBypass4$outboundSchema: z.ZodType<ProtectionBypass4$Outbound, z.ZodTypeDef, ProtectionBypass4>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ProtectionBypass4$ {
    /** @deprecated use `ProtectionBypass4$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ProtectionBypass4, z.ZodTypeDef, unknown>;
    /** @deprecated use `ProtectionBypass4$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ProtectionBypass4$Outbound, z.ZodTypeDef, ProtectionBypass4>;
    /** @deprecated use `ProtectionBypass4$Outbound` instead. */
    type Outbound = ProtectionBypass4$Outbound;
}
export declare function protectionBypass4ToJSON(protectionBypass4: ProtectionBypass4): string;
export declare function protectionBypass4FromJSON(jsonString: string): SafeParseResult<ProtectionBypass4, SDKValidationError>;
/** @internal */
export declare const GetAliasProtectionBypassAliasesResponseScope$inboundSchema: z.ZodNativeEnum<typeof GetAliasProtectionBypassAliasesResponseScope>;
/** @internal */
export declare const GetAliasProtectionBypassAliasesResponseScope$outboundSchema: z.ZodNativeEnum<typeof GetAliasProtectionBypassAliasesResponseScope>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAliasProtectionBypassAliasesResponseScope$ {
    /** @deprecated use `GetAliasProtectionBypassAliasesResponseScope$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly AliasProtectionOverride: "alias-protection-override";
    }>;
    /** @deprecated use `GetAliasProtectionBypassAliasesResponseScope$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly AliasProtectionOverride: "alias-protection-override";
    }>;
}
/** @internal */
export declare const ProtectionBypass3$inboundSchema: z.ZodType<ProtectionBypass3, z.ZodTypeDef, unknown>;
/** @internal */
export type ProtectionBypass3$Outbound = {
    createdAt: number;
    createdBy: string;
    scope: string;
};
/** @internal */
export declare const ProtectionBypass3$outboundSchema: z.ZodType<ProtectionBypass3$Outbound, z.ZodTypeDef, ProtectionBypass3>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ProtectionBypass3$ {
    /** @deprecated use `ProtectionBypass3$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ProtectionBypass3, z.ZodTypeDef, unknown>;
    /** @deprecated use `ProtectionBypass3$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ProtectionBypass3$Outbound, z.ZodTypeDef, ProtectionBypass3>;
    /** @deprecated use `ProtectionBypass3$Outbound` instead. */
    type Outbound = ProtectionBypass3$Outbound;
}
export declare function protectionBypass3ToJSON(protectionBypass3: ProtectionBypass3): string;
export declare function protectionBypass3FromJSON(jsonString: string): SafeParseResult<ProtectionBypass3, SDKValidationError>;
/** @internal */
export declare const ProtectionBypassAccess$inboundSchema: z.ZodNativeEnum<typeof ProtectionBypassAccess>;
/** @internal */
export declare const ProtectionBypassAccess$outboundSchema: z.ZodNativeEnum<typeof ProtectionBypassAccess>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ProtectionBypassAccess$ {
    /** @deprecated use `ProtectionBypassAccess$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Requested: "requested";
        readonly Granted: "granted";
    }>;
    /** @deprecated use `ProtectionBypassAccess$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Requested: "requested";
        readonly Granted: "granted";
    }>;
}
/** @internal */
export declare const GetAliasProtectionBypassAliasesScope$inboundSchema: z.ZodNativeEnum<typeof GetAliasProtectionBypassAliasesScope>;
/** @internal */
export declare const GetAliasProtectionBypassAliasesScope$outboundSchema: z.ZodNativeEnum<typeof GetAliasProtectionBypassAliasesScope>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAliasProtectionBypassAliasesScope$ {
    /** @deprecated use `GetAliasProtectionBypassAliasesScope$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly User: "user";
    }>;
    /** @deprecated use `GetAliasProtectionBypassAliasesScope$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly User: "user";
    }>;
}
/** @internal */
export declare const GetAliasProtectionBypass2$inboundSchema: z.ZodType<GetAliasProtectionBypass2, z.ZodTypeDef, unknown>;
/** @internal */
export type GetAliasProtectionBypass2$Outbound = {
    createdAt: number;
    lastUpdatedAt: number;
    lastUpdatedBy: string;
    access: string;
    scope: string;
};
/** @internal */
export declare const GetAliasProtectionBypass2$outboundSchema: z.ZodType<GetAliasProtectionBypass2$Outbound, z.ZodTypeDef, GetAliasProtectionBypass2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAliasProtectionBypass2$ {
    /** @deprecated use `GetAliasProtectionBypass2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetAliasProtectionBypass2, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetAliasProtectionBypass2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetAliasProtectionBypass2$Outbound, z.ZodTypeDef, GetAliasProtectionBypass2>;
    /** @deprecated use `GetAliasProtectionBypass2$Outbound` instead. */
    type Outbound = GetAliasProtectionBypass2$Outbound;
}
export declare function getAliasProtectionBypass2ToJSON(getAliasProtectionBypass2: GetAliasProtectionBypass2): string;
export declare function getAliasProtectionBypass2FromJSON(jsonString: string): SafeParseResult<GetAliasProtectionBypass2, SDKValidationError>;
/** @internal */
export declare const GetAliasProtectionBypassScope$inboundSchema: z.ZodNativeEnum<typeof GetAliasProtectionBypassScope>;
/** @internal */
export declare const GetAliasProtectionBypassScope$outboundSchema: z.ZodNativeEnum<typeof GetAliasProtectionBypassScope>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAliasProtectionBypassScope$ {
    /** @deprecated use `GetAliasProtectionBypassScope$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly ShareableLink: "shareable-link";
    }>;
    /** @deprecated use `GetAliasProtectionBypassScope$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly ShareableLink: "shareable-link";
    }>;
}
/** @internal */
export declare const GetAliasProtectionBypass1$inboundSchema: z.ZodType<GetAliasProtectionBypass1, z.ZodTypeDef, unknown>;
/** @internal */
export type GetAliasProtectionBypass1$Outbound = {
    createdAt: number;
    createdBy: string;
    scope: string;
    expires?: number | undefined;
};
/** @internal */
export declare const GetAliasProtectionBypass1$outboundSchema: z.ZodType<GetAliasProtectionBypass1$Outbound, z.ZodTypeDef, GetAliasProtectionBypass1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAliasProtectionBypass1$ {
    /** @deprecated use `GetAliasProtectionBypass1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetAliasProtectionBypass1, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetAliasProtectionBypass1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetAliasProtectionBypass1$Outbound, z.ZodTypeDef, GetAliasProtectionBypass1>;
    /** @deprecated use `GetAliasProtectionBypass1$Outbound` instead. */
    type Outbound = GetAliasProtectionBypass1$Outbound;
}
export declare function getAliasProtectionBypass1ToJSON(getAliasProtectionBypass1: GetAliasProtectionBypass1): string;
export declare function getAliasProtectionBypass1FromJSON(jsonString: string): SafeParseResult<GetAliasProtectionBypass1, SDKValidationError>;
/** @internal */
export declare const GetAliasProtectionBypass$inboundSchema: z.ZodType<GetAliasProtectionBypass, z.ZodTypeDef, unknown>;
/** @internal */
export type GetAliasProtectionBypass$Outbound = GetAliasProtectionBypass2$Outbound | ProtectionBypass4$Outbound | GetAliasProtectionBypass1$Outbound | ProtectionBypass3$Outbound;
/** @internal */
export declare const GetAliasProtectionBypass$outboundSchema: z.ZodType<GetAliasProtectionBypass$Outbound, z.ZodTypeDef, GetAliasProtectionBypass>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAliasProtectionBypass$ {
    /** @deprecated use `GetAliasProtectionBypass$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetAliasProtectionBypass, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetAliasProtectionBypass$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetAliasProtectionBypass$Outbound, z.ZodTypeDef, GetAliasProtectionBypass>;
    /** @deprecated use `GetAliasProtectionBypass$Outbound` instead. */
    type Outbound = GetAliasProtectionBypass$Outbound;
}
export declare function getAliasProtectionBypassToJSON(getAliasProtectionBypass: GetAliasProtectionBypass): string;
export declare function getAliasProtectionBypassFromJSON(jsonString: string): SafeParseResult<GetAliasProtectionBypass, SDKValidationError>;
/** @internal */
export declare const DefaultApp$inboundSchema: z.ZodType<DefaultApp, z.ZodTypeDef, unknown>;
/** @internal */
export type DefaultApp$Outbound = {
    projectId: string;
};
/** @internal */
export declare const DefaultApp$outboundSchema: z.ZodType<DefaultApp$Outbound, z.ZodTypeDef, DefaultApp>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace DefaultApp$ {
    /** @deprecated use `DefaultApp$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DefaultApp, z.ZodTypeDef, unknown>;
    /** @deprecated use `DefaultApp$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DefaultApp$Outbound, z.ZodTypeDef, DefaultApp>;
    /** @deprecated use `DefaultApp$Outbound` instead. */
    type Outbound = DefaultApp$Outbound;
}
export declare function defaultAppToJSON(defaultApp: DefaultApp): string;
export declare function defaultAppFromJSON(jsonString: string): SafeParseResult<DefaultApp, SDKValidationError>;
/** @internal */
export declare const Applications3$inboundSchema: z.ZodType<Applications3, z.ZodTypeDef, unknown>;
/** @internal */
export type Applications3$Outbound = {
    deploymentId?: string | undefined;
    branchDeploymentId?: string | undefined;
    fallbackDeploymentId?: string | undefined;
    fallbackHost?: string | undefined;
    branchAlias?: string | undefined;
    projectId: string;
};
/** @internal */
export declare const Applications3$outboundSchema: z.ZodType<Applications3$Outbound, z.ZodTypeDef, Applications3>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Applications3$ {
    /** @deprecated use `Applications3$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Applications3, z.ZodTypeDef, unknown>;
    /** @deprecated use `Applications3$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Applications3$Outbound, z.ZodTypeDef, Applications3>;
    /** @deprecated use `Applications3$Outbound` instead. */
    type Outbound = Applications3$Outbound;
}
export declare function applications3ToJSON(applications3: Applications3): string;
export declare function applications3FromJSON(jsonString: string): SafeParseResult<Applications3, SDKValidationError>;
/** @internal */
export declare const Applications2$inboundSchema: z.ZodType<Applications2, z.ZodTypeDef, unknown>;
/** @internal */
export type Applications2$Outbound = {
    fallbackHost: string;
    branchAlias: string;
    projectId: string;
};
/** @internal */
export declare const Applications2$outboundSchema: z.ZodType<Applications2$Outbound, z.ZodTypeDef, Applications2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Applications2$ {
    /** @deprecated use `Applications2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Applications2, z.ZodTypeDef, unknown>;
    /** @deprecated use `Applications2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Applications2$Outbound, z.ZodTypeDef, Applications2>;
    /** @deprecated use `Applications2$Outbound` instead. */
    type Outbound = Applications2$Outbound;
}
export declare function applications2ToJSON(applications2: Applications2): string;
export declare function applications2FromJSON(jsonString: string): SafeParseResult<Applications2, SDKValidationError>;
/** @internal */
export declare const Applications1$inboundSchema: z.ZodType<Applications1, z.ZodTypeDef, unknown>;
/** @internal */
export type Applications1$Outbound = {
    fallbackHost: string;
    projectId: string;
};
/** @internal */
export declare const Applications1$outboundSchema: z.ZodType<Applications1$Outbound, z.ZodTypeDef, Applications1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Applications1$ {
    /** @deprecated use `Applications1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Applications1, z.ZodTypeDef, unknown>;
    /** @deprecated use `Applications1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Applications1$Outbound, z.ZodTypeDef, Applications1>;
    /** @deprecated use `Applications1$Outbound` instead. */
    type Outbound = Applications1$Outbound;
}
export declare function applications1ToJSON(applications1: Applications1): string;
export declare function applications1FromJSON(jsonString: string): SafeParseResult<Applications1, SDKValidationError>;
/** @internal */
export declare const Applications$inboundSchema: z.ZodType<Applications, z.ZodTypeDef, unknown>;
/** @internal */
export type Applications$Outbound = Array<Applications1$Outbound> | Array<Applications2$Outbound> | Array<Applications3$Outbound>;
/** @internal */
export declare const Applications$outboundSchema: z.ZodType<Applications$Outbound, z.ZodTypeDef, Applications>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Applications$ {
    /** @deprecated use `Applications$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Applications, z.ZodTypeDef, unknown>;
    /** @deprecated use `Applications$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Applications$Outbound, z.ZodTypeDef, Applications>;
    /** @deprecated use `Applications$Outbound` instead. */
    type Outbound = Applications$Outbound;
}
export declare function applicationsToJSON(applications: Applications): string;
export declare function applicationsFromJSON(jsonString: string): SafeParseResult<Applications, SDKValidationError>;
/** @internal */
export declare const GetAliasMicrofrontends$inboundSchema: z.ZodType<GetAliasMicrofrontends, z.ZodTypeDef, unknown>;
/** @internal */
export type GetAliasMicrofrontends$Outbound = {
    defaultApp: DefaultApp$Outbound;
    applications: Array<Applications1$Outbound> | Array<Applications2$Outbound> | Array<Applications3$Outbound>;
};
/** @internal */
export declare const GetAliasMicrofrontends$outboundSchema: z.ZodType<GetAliasMicrofrontends$Outbound, z.ZodTypeDef, GetAliasMicrofrontends>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAliasMicrofrontends$ {
    /** @deprecated use `GetAliasMicrofrontends$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetAliasMicrofrontends, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetAliasMicrofrontends$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetAliasMicrofrontends$Outbound, z.ZodTypeDef, GetAliasMicrofrontends>;
    /** @deprecated use `GetAliasMicrofrontends$Outbound` instead. */
    type Outbound = GetAliasMicrofrontends$Outbound;
}
export declare function getAliasMicrofrontendsToJSON(getAliasMicrofrontends: GetAliasMicrofrontends): string;
export declare function getAliasMicrofrontendsFromJSON(jsonString: string): SafeParseResult<GetAliasMicrofrontends, SDKValidationError>;
/** @internal */
export declare const GetAliasResponseBody$inboundSchema: z.ZodType<GetAliasResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type GetAliasResponseBody$Outbound = {
    alias: string;
    created: string;
    createdAt?: number | undefined;
    creator?: GetAliasCreator$Outbound | undefined;
    deletedAt?: number | undefined;
    deployment?: GetAliasDeployment$Outbound | undefined;
    deploymentId: string | null;
    projectId: string | null;
    redirect?: string | null | undefined;
    redirectStatusCode?: number | null | undefined;
    uid: string;
    updatedAt?: number | undefined;
    protectionBypass?: {
        [k: string]: GetAliasProtectionBypass2$Outbound | ProtectionBypass4$Outbound | GetAliasProtectionBypass1$Outbound | ProtectionBypass3$Outbound;
    } | undefined;
    microfrontends?: GetAliasMicrofrontends$Outbound | undefined;
};
/** @internal */
export declare const GetAliasResponseBody$outboundSchema: z.ZodType<GetAliasResponseBody$Outbound, z.ZodTypeDef, GetAliasResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAliasResponseBody$ {
    /** @deprecated use `GetAliasResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetAliasResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetAliasResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetAliasResponseBody$Outbound, z.ZodTypeDef, GetAliasResponseBody>;
    /** @deprecated use `GetAliasResponseBody$Outbound` instead. */
    type Outbound = GetAliasResponseBody$Outbound;
}
export declare function getAliasResponseBodyToJSON(getAliasResponseBody: GetAliasResponseBody): string;
export declare function getAliasResponseBodyFromJSON(jsonString: string): SafeParseResult<GetAliasResponseBody, SDKValidationError>;
//# sourceMappingURL=getaliasop.d.ts.map