import * as z from "zod";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
/**
 * The EdgeConfig.
 */
export type EdgeConfigToken = {
    token: string;
    label: string;
    /**
     * This is not the token itself, but rather an id to identify the token by
     */
    id: string;
    edgeConfigId: string;
    createdAt: number;
};
/** @internal */
export declare const EdgeConfigToken$inboundSchema: z.ZodType<EdgeConfigToken, z.ZodTypeDef, unknown>;
/** @internal */
export type EdgeConfigToken$Outbound = {
    token: string;
    label: string;
    id: string;
    edgeConfigId: string;
    createdAt: number;
};
/** @internal */
export declare const EdgeConfigToken$outboundSchema: z.ZodType<EdgeConfigToken$Outbound, z.ZodTypeDef, EdgeConfigToken>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EdgeConfigToken$ {
    /** @deprecated use `EdgeConfigToken$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EdgeConfigToken, z.ZodTypeDef, unknown>;
    /** @deprecated use `EdgeConfigToken$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EdgeConfigToken$Outbound, z.ZodTypeDef, EdgeConfigToken>;
    /** @deprecated use `EdgeConfigToken$Outbound` instead. */
    type Outbound = EdgeConfigToken$Outbound;
}
export declare function edgeConfigTokenToJSON(edgeConfigToken: EdgeConfigToken): string;
export declare function edgeConfigTokenFromJSON(jsonString: string): SafeParseResult<EdgeConfigToken, SDKValidationError>;
//# sourceMappingURL=edgeconfigtoken.d.ts.map