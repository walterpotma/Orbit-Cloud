/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/** @internal */
export const BuyDomainRequestBody$inboundSchema = z.object({
    name: z.string(),
    expectedPrice: z.number().optional(),
    renew: z.boolean().optional(),
    country: z.string(),
    orgName: z.string().optional(),
    firstName: z.string(),
    lastName: z.string(),
    address1: z.string(),
    city: z.string(),
    state: z.string(),
    postalCode: z.string(),
    phone: z.string(),
    email: z.string(),
});
/** @internal */
export const BuyDomainRequestBody$outboundSchema = z.object({
    name: z.string(),
    expectedPrice: z.number().optional(),
    renew: z.boolean().optional(),
    country: z.string(),
    orgName: z.string().optional(),
    firstName: z.string(),
    lastName: z.string(),
    address1: z.string(),
    city: z.string(),
    state: z.string(),
    postalCode: z.string(),
    phone: z.string(),
    email: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BuyDomainRequestBody$;
(function (BuyDomainRequestBody$) {
    /** @deprecated use `BuyDomainRequestBody$inboundSchema` instead. */
    BuyDomainRequestBody$.inboundSchema = BuyDomainRequestBody$inboundSchema;
    /** @deprecated use `BuyDomainRequestBody$outboundSchema` instead. */
    BuyDomainRequestBody$.outboundSchema = BuyDomainRequestBody$outboundSchema;
})(BuyDomainRequestBody$ || (BuyDomainRequestBody$ = {}));
export function buyDomainRequestBodyToJSON(buyDomainRequestBody) {
    return JSON.stringify(BuyDomainRequestBody$outboundSchema.parse(buyDomainRequestBody));
}
export function buyDomainRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BuyDomainRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BuyDomainRequestBody' from JSON`);
}
/** @internal */
export const BuyDomainRequest$inboundSchema = z.object({
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => BuyDomainRequestBody$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const BuyDomainRequest$outboundSchema = z.object({
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => BuyDomainRequestBody$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BuyDomainRequest$;
(function (BuyDomainRequest$) {
    /** @deprecated use `BuyDomainRequest$inboundSchema` instead. */
    BuyDomainRequest$.inboundSchema = BuyDomainRequest$inboundSchema;
    /** @deprecated use `BuyDomainRequest$outboundSchema` instead. */
    BuyDomainRequest$.outboundSchema = BuyDomainRequest$outboundSchema;
})(BuyDomainRequest$ || (BuyDomainRequest$ = {}));
export function buyDomainRequestToJSON(buyDomainRequest) {
    return JSON.stringify(BuyDomainRequest$outboundSchema.parse(buyDomainRequest));
}
export function buyDomainRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BuyDomainRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BuyDomainRequest' from JSON`);
}
/** @internal */
export const BuyDomainDomain$inboundSchema = z.object({
    uid: z.string(),
    ns: z.array(z.string()),
    verified: z.boolean(),
    created: z.number(),
    pending: z.boolean(),
});
/** @internal */
export const BuyDomainDomain$outboundSchema = z.object({
    uid: z.string(),
    ns: z.array(z.string()),
    verified: z.boolean(),
    created: z.number(),
    pending: z.boolean(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BuyDomainDomain$;
(function (BuyDomainDomain$) {
    /** @deprecated use `BuyDomainDomain$inboundSchema` instead. */
    BuyDomainDomain$.inboundSchema = BuyDomainDomain$inboundSchema;
    /** @deprecated use `BuyDomainDomain$outboundSchema` instead. */
    BuyDomainDomain$.outboundSchema = BuyDomainDomain$outboundSchema;
})(BuyDomainDomain$ || (BuyDomainDomain$ = {}));
export function buyDomainDomainToJSON(buyDomainDomain) {
    return JSON.stringify(BuyDomainDomain$outboundSchema.parse(buyDomainDomain));
}
export function buyDomainDomainFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BuyDomainDomain$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BuyDomainDomain' from JSON`);
}
/** @internal */
export const BuyDomainDomainsResponseBody$inboundSchema = z.object({
    domain: z.lazy(() => BuyDomainDomain$inboundSchema),
});
/** @internal */
export const BuyDomainDomainsResponseBody$outboundSchema = z.object({
    domain: z.lazy(() => BuyDomainDomain$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BuyDomainDomainsResponseBody$;
(function (BuyDomainDomainsResponseBody$) {
    /** @deprecated use `BuyDomainDomainsResponseBody$inboundSchema` instead. */
    BuyDomainDomainsResponseBody$.inboundSchema = BuyDomainDomainsResponseBody$inboundSchema;
    /** @deprecated use `BuyDomainDomainsResponseBody$outboundSchema` instead. */
    BuyDomainDomainsResponseBody$.outboundSchema = BuyDomainDomainsResponseBody$outboundSchema;
})(BuyDomainDomainsResponseBody$ || (BuyDomainDomainsResponseBody$ = {}));
export function buyDomainDomainsResponseBodyToJSON(buyDomainDomainsResponseBody) {
    return JSON.stringify(BuyDomainDomainsResponseBody$outboundSchema.parse(buyDomainDomainsResponseBody));
}
export function buyDomainDomainsResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BuyDomainDomainsResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BuyDomainDomainsResponseBody' from JSON`);
}
/** @internal */
export const BuyDomainDomainsDomain$inboundSchema = z.object({
    uid: z.string(),
    ns: z.array(z.string()),
    verified: z.boolean(),
    created: z.number(),
    pending: z.boolean(),
});
/** @internal */
export const BuyDomainDomainsDomain$outboundSchema = z.object({
    uid: z.string(),
    ns: z.array(z.string()),
    verified: z.boolean(),
    created: z.number(),
    pending: z.boolean(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BuyDomainDomainsDomain$;
(function (BuyDomainDomainsDomain$) {
    /** @deprecated use `BuyDomainDomainsDomain$inboundSchema` instead. */
    BuyDomainDomainsDomain$.inboundSchema = BuyDomainDomainsDomain$inboundSchema;
    /** @deprecated use `BuyDomainDomainsDomain$outboundSchema` instead. */
    BuyDomainDomainsDomain$.outboundSchema = BuyDomainDomainsDomain$outboundSchema;
})(BuyDomainDomainsDomain$ || (BuyDomainDomainsDomain$ = {}));
export function buyDomainDomainsDomainToJSON(buyDomainDomainsDomain) {
    return JSON.stringify(BuyDomainDomainsDomain$outboundSchema.parse(buyDomainDomainsDomain));
}
export function buyDomainDomainsDomainFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BuyDomainDomainsDomain$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BuyDomainDomainsDomain' from JSON`);
}
/** @internal */
export const BuyDomainResponseBody$inboundSchema = z.object({
    domain: z.lazy(() => BuyDomainDomainsDomain$inboundSchema),
});
/** @internal */
export const BuyDomainResponseBody$outboundSchema = z.object({
    domain: z.lazy(() => BuyDomainDomainsDomain$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BuyDomainResponseBody$;
(function (BuyDomainResponseBody$) {
    /** @deprecated use `BuyDomainResponseBody$inboundSchema` instead. */
    BuyDomainResponseBody$.inboundSchema = BuyDomainResponseBody$inboundSchema;
    /** @deprecated use `BuyDomainResponseBody$outboundSchema` instead. */
    BuyDomainResponseBody$.outboundSchema = BuyDomainResponseBody$outboundSchema;
})(BuyDomainResponseBody$ || (BuyDomainResponseBody$ = {}));
export function buyDomainResponseBodyToJSON(buyDomainResponseBody) {
    return JSON.stringify(BuyDomainResponseBody$outboundSchema.parse(buyDomainResponseBody));
}
export function buyDomainResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BuyDomainResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BuyDomainResponseBody' from JSON`);
}
/** @internal */
export const BuyDomainResponse$inboundSchema = z.union([
    z.lazy(() => BuyDomainResponseBody$inboundSchema),
    z.lazy(() => BuyDomainDomainsResponseBody$inboundSchema),
]);
/** @internal */
export const BuyDomainResponse$outboundSchema = z.union([
    z.lazy(() => BuyDomainResponseBody$outboundSchema),
    z.lazy(() => BuyDomainDomainsResponseBody$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BuyDomainResponse$;
(function (BuyDomainResponse$) {
    /** @deprecated use `BuyDomainResponse$inboundSchema` instead. */
    BuyDomainResponse$.inboundSchema = BuyDomainResponse$inboundSchema;
    /** @deprecated use `BuyDomainResponse$outboundSchema` instead. */
    BuyDomainResponse$.outboundSchema = BuyDomainResponse$outboundSchema;
})(BuyDomainResponse$ || (BuyDomainResponse$ = {}));
export function buyDomainResponseToJSON(buyDomainResponse) {
    return JSON.stringify(BuyDomainResponse$outboundSchema.parse(buyDomainResponse));
}
export function buyDomainResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BuyDomainResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BuyDomainResponse' from JSON`);
}
//# sourceMappingURL=buydomainop.js.map