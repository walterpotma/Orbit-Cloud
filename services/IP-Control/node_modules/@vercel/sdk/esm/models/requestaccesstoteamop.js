/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/**
 * The origin of the request.
 */
export const RequestAccessToTeamOrigin = {
    Import: "import",
    Teams: "teams",
    Github: "github",
    Gitlab: "gitlab",
    Bitbucket: "bitbucket",
    Feedback: "feedback",
    OrganizationTeams: "organization-teams",
};
export const RequestAccessToTeamTeamsOrigin = {
    Import: "import",
    Teams: "teams",
    Github: "github",
    Gitlab: "gitlab",
    Bitbucket: "bitbucket",
    Feedback: "feedback",
    OrganizationTeams: "organization-teams",
    Link: "link",
    Mail: "mail",
    Saml: "saml",
    Dsync: "dsync",
};
/** @internal */
export const RequestAccessToTeamOrigin$inboundSchema = z.nativeEnum(RequestAccessToTeamOrigin);
/** @internal */
export const RequestAccessToTeamOrigin$outboundSchema = RequestAccessToTeamOrigin$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RequestAccessToTeamOrigin$;
(function (RequestAccessToTeamOrigin$) {
    /** @deprecated use `RequestAccessToTeamOrigin$inboundSchema` instead. */
    RequestAccessToTeamOrigin$.inboundSchema = RequestAccessToTeamOrigin$inboundSchema;
    /** @deprecated use `RequestAccessToTeamOrigin$outboundSchema` instead. */
    RequestAccessToTeamOrigin$.outboundSchema = RequestAccessToTeamOrigin$outboundSchema;
})(RequestAccessToTeamOrigin$ || (RequestAccessToTeamOrigin$ = {}));
/** @internal */
export const RequestAccessToTeamGitUserId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const RequestAccessToTeamGitUserId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RequestAccessToTeamGitUserId$;
(function (RequestAccessToTeamGitUserId$) {
    /** @deprecated use `RequestAccessToTeamGitUserId$inboundSchema` instead. */
    RequestAccessToTeamGitUserId$.inboundSchema = RequestAccessToTeamGitUserId$inboundSchema;
    /** @deprecated use `RequestAccessToTeamGitUserId$outboundSchema` instead. */
    RequestAccessToTeamGitUserId$.outboundSchema = RequestAccessToTeamGitUserId$outboundSchema;
})(RequestAccessToTeamGitUserId$ || (RequestAccessToTeamGitUserId$ = {}));
export function requestAccessToTeamGitUserIdToJSON(requestAccessToTeamGitUserId) {
    return JSON.stringify(RequestAccessToTeamGitUserId$outboundSchema.parse(requestAccessToTeamGitUserId));
}
export function requestAccessToTeamGitUserIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RequestAccessToTeamGitUserId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RequestAccessToTeamGitUserId' from JSON`);
}
/** @internal */
export const RequestAccessToTeamJoinedFrom$inboundSchema = z.object({
    origin: RequestAccessToTeamOrigin$inboundSchema,
    commitId: z.string().optional(),
    repoId: z.string().optional(),
    repoPath: z.string().optional(),
    gitUserId: z.union([z.string(), z.number()]).optional(),
    gitUserLogin: z.string().optional(),
});
/** @internal */
export const RequestAccessToTeamJoinedFrom$outboundSchema = z.object({
    origin: RequestAccessToTeamOrigin$outboundSchema,
    commitId: z.string().optional(),
    repoId: z.string().optional(),
    repoPath: z.string().optional(),
    gitUserId: z.union([z.string(), z.number()]).optional(),
    gitUserLogin: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RequestAccessToTeamJoinedFrom$;
(function (RequestAccessToTeamJoinedFrom$) {
    /** @deprecated use `RequestAccessToTeamJoinedFrom$inboundSchema` instead. */
    RequestAccessToTeamJoinedFrom$.inboundSchema = RequestAccessToTeamJoinedFrom$inboundSchema;
    /** @deprecated use `RequestAccessToTeamJoinedFrom$outboundSchema` instead. */
    RequestAccessToTeamJoinedFrom$.outboundSchema = RequestAccessToTeamJoinedFrom$outboundSchema;
})(RequestAccessToTeamJoinedFrom$ || (RequestAccessToTeamJoinedFrom$ = {}));
export function requestAccessToTeamJoinedFromToJSON(requestAccessToTeamJoinedFrom) {
    return JSON.stringify(RequestAccessToTeamJoinedFrom$outboundSchema.parse(requestAccessToTeamJoinedFrom));
}
export function requestAccessToTeamJoinedFromFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RequestAccessToTeamJoinedFrom$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RequestAccessToTeamJoinedFrom' from JSON`);
}
/** @internal */
export const RequestAccessToTeamRequestBody$inboundSchema = z.object({
    joinedFrom: z.lazy(() => RequestAccessToTeamJoinedFrom$inboundSchema),
});
/** @internal */
export const RequestAccessToTeamRequestBody$outboundSchema = z.object({
    joinedFrom: z.lazy(() => RequestAccessToTeamJoinedFrom$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RequestAccessToTeamRequestBody$;
(function (RequestAccessToTeamRequestBody$) {
    /** @deprecated use `RequestAccessToTeamRequestBody$inboundSchema` instead. */
    RequestAccessToTeamRequestBody$.inboundSchema = RequestAccessToTeamRequestBody$inboundSchema;
    /** @deprecated use `RequestAccessToTeamRequestBody$outboundSchema` instead. */
    RequestAccessToTeamRequestBody$.outboundSchema = RequestAccessToTeamRequestBody$outboundSchema;
})(RequestAccessToTeamRequestBody$ || (RequestAccessToTeamRequestBody$ = {}));
export function requestAccessToTeamRequestBodyToJSON(requestAccessToTeamRequestBody) {
    return JSON.stringify(RequestAccessToTeamRequestBody$outboundSchema.parse(requestAccessToTeamRequestBody));
}
export function requestAccessToTeamRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RequestAccessToTeamRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RequestAccessToTeamRequestBody' from JSON`);
}
/** @internal */
export const RequestAccessToTeamRequest$inboundSchema = z.object({
    teamId: z.string(),
    RequestBody: z.lazy(() => RequestAccessToTeamRequestBody$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const RequestAccessToTeamRequest$outboundSchema = z.object({
    teamId: z.string(),
    requestBody: z.lazy(() => RequestAccessToTeamRequestBody$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RequestAccessToTeamRequest$;
(function (RequestAccessToTeamRequest$) {
    /** @deprecated use `RequestAccessToTeamRequest$inboundSchema` instead. */
    RequestAccessToTeamRequest$.inboundSchema = RequestAccessToTeamRequest$inboundSchema;
    /** @deprecated use `RequestAccessToTeamRequest$outboundSchema` instead. */
    RequestAccessToTeamRequest$.outboundSchema = RequestAccessToTeamRequest$outboundSchema;
})(RequestAccessToTeamRequest$ || (RequestAccessToTeamRequest$ = {}));
export function requestAccessToTeamRequestToJSON(requestAccessToTeamRequest) {
    return JSON.stringify(RequestAccessToTeamRequest$outboundSchema.parse(requestAccessToTeamRequest));
}
export function requestAccessToTeamRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RequestAccessToTeamRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RequestAccessToTeamRequest' from JSON`);
}
/** @internal */
export const RequestAccessToTeamTeamsOrigin$inboundSchema = z.nativeEnum(RequestAccessToTeamTeamsOrigin);
/** @internal */
export const RequestAccessToTeamTeamsOrigin$outboundSchema = RequestAccessToTeamTeamsOrigin$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RequestAccessToTeamTeamsOrigin$;
(function (RequestAccessToTeamTeamsOrigin$) {
    /** @deprecated use `RequestAccessToTeamTeamsOrigin$inboundSchema` instead. */
    RequestAccessToTeamTeamsOrigin$.inboundSchema = RequestAccessToTeamTeamsOrigin$inboundSchema;
    /** @deprecated use `RequestAccessToTeamTeamsOrigin$outboundSchema` instead. */
    RequestAccessToTeamTeamsOrigin$.outboundSchema = RequestAccessToTeamTeamsOrigin$outboundSchema;
})(RequestAccessToTeamTeamsOrigin$ || (RequestAccessToTeamTeamsOrigin$ = {}));
/** @internal */
export const RequestAccessToTeamTeamsGitUserId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const RequestAccessToTeamTeamsGitUserId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RequestAccessToTeamTeamsGitUserId$;
(function (RequestAccessToTeamTeamsGitUserId$) {
    /** @deprecated use `RequestAccessToTeamTeamsGitUserId$inboundSchema` instead. */
    RequestAccessToTeamTeamsGitUserId$.inboundSchema = RequestAccessToTeamTeamsGitUserId$inboundSchema;
    /** @deprecated use `RequestAccessToTeamTeamsGitUserId$outboundSchema` instead. */
    RequestAccessToTeamTeamsGitUserId$.outboundSchema = RequestAccessToTeamTeamsGitUserId$outboundSchema;
})(RequestAccessToTeamTeamsGitUserId$ || (RequestAccessToTeamTeamsGitUserId$ = {}));
export function requestAccessToTeamTeamsGitUserIdToJSON(requestAccessToTeamTeamsGitUserId) {
    return JSON.stringify(RequestAccessToTeamTeamsGitUserId$outboundSchema.parse(requestAccessToTeamTeamsGitUserId));
}
export function requestAccessToTeamTeamsGitUserIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RequestAccessToTeamTeamsGitUserId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RequestAccessToTeamTeamsGitUserId' from JSON`);
}
/** @internal */
export const RequestAccessToTeamTeamsJoinedFrom$inboundSchema = z.object({
    origin: RequestAccessToTeamTeamsOrigin$inboundSchema,
    commitId: z.string().optional(),
    repoId: z.string().optional(),
    repoPath: z.string().optional(),
    gitUserId: z.union([z.string(), z.number()]).optional(),
    gitUserLogin: z.string().optional(),
    ssoUserId: z.string().optional(),
    ssoConnectedAt: z.number().optional(),
    idpUserId: z.string().optional(),
    dsyncUserId: z.string().optional(),
    dsyncConnectedAt: z.number().optional(),
});
/** @internal */
export const RequestAccessToTeamTeamsJoinedFrom$outboundSchema = z.object({
    origin: RequestAccessToTeamTeamsOrigin$outboundSchema,
    commitId: z.string().optional(),
    repoId: z.string().optional(),
    repoPath: z.string().optional(),
    gitUserId: z.union([z.string(), z.number()]).optional(),
    gitUserLogin: z.string().optional(),
    ssoUserId: z.string().optional(),
    ssoConnectedAt: z.number().optional(),
    idpUserId: z.string().optional(),
    dsyncUserId: z.string().optional(),
    dsyncConnectedAt: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RequestAccessToTeamTeamsJoinedFrom$;
(function (RequestAccessToTeamTeamsJoinedFrom$) {
    /** @deprecated use `RequestAccessToTeamTeamsJoinedFrom$inboundSchema` instead. */
    RequestAccessToTeamTeamsJoinedFrom$.inboundSchema = RequestAccessToTeamTeamsJoinedFrom$inboundSchema;
    /** @deprecated use `RequestAccessToTeamTeamsJoinedFrom$outboundSchema` instead. */
    RequestAccessToTeamTeamsJoinedFrom$.outboundSchema = RequestAccessToTeamTeamsJoinedFrom$outboundSchema;
})(RequestAccessToTeamTeamsJoinedFrom$ || (RequestAccessToTeamTeamsJoinedFrom$ = {}));
export function requestAccessToTeamTeamsJoinedFromToJSON(requestAccessToTeamTeamsJoinedFrom) {
    return JSON.stringify(RequestAccessToTeamTeamsJoinedFrom$outboundSchema.parse(requestAccessToTeamTeamsJoinedFrom));
}
export function requestAccessToTeamTeamsJoinedFromFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RequestAccessToTeamTeamsJoinedFrom$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RequestAccessToTeamTeamsJoinedFrom' from JSON`);
}
/** @internal */
export const Github$inboundSchema = z
    .object({
    login: z.string().optional(),
});
/** @internal */
export const Github$outboundSchema = z.object({
    login: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Github$;
(function (Github$) {
    /** @deprecated use `Github$inboundSchema` instead. */
    Github$.inboundSchema = Github$inboundSchema;
    /** @deprecated use `Github$outboundSchema` instead. */
    Github$.outboundSchema = Github$outboundSchema;
})(Github$ || (Github$ = {}));
export function githubToJSON(github) {
    return JSON.stringify(Github$outboundSchema.parse(github));
}
export function githubFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Github$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Github' from JSON`);
}
/** @internal */
export const Gitlab$inboundSchema = z
    .object({
    login: z.string().optional(),
});
/** @internal */
export const Gitlab$outboundSchema = z.object({
    login: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Gitlab$;
(function (Gitlab$) {
    /** @deprecated use `Gitlab$inboundSchema` instead. */
    Gitlab$.inboundSchema = Gitlab$inboundSchema;
    /** @deprecated use `Gitlab$outboundSchema` instead. */
    Gitlab$.outboundSchema = Gitlab$outboundSchema;
})(Gitlab$ || (Gitlab$ = {}));
export function gitlabToJSON(gitlab) {
    return JSON.stringify(Gitlab$outboundSchema.parse(gitlab));
}
export function gitlabFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Gitlab$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Gitlab' from JSON`);
}
/** @internal */
export const Bitbucket$inboundSchema = z.object({
    login: z.string().optional(),
});
/** @internal */
export const Bitbucket$outboundSchema = z.object({
    login: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Bitbucket$;
(function (Bitbucket$) {
    /** @deprecated use `Bitbucket$inboundSchema` instead. */
    Bitbucket$.inboundSchema = Bitbucket$inboundSchema;
    /** @deprecated use `Bitbucket$outboundSchema` instead. */
    Bitbucket$.outboundSchema = Bitbucket$outboundSchema;
})(Bitbucket$ || (Bitbucket$ = {}));
export function bitbucketToJSON(bitbucket) {
    return JSON.stringify(Bitbucket$outboundSchema.parse(bitbucket));
}
export function bitbucketFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Bitbucket$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Bitbucket' from JSON`);
}
/** @internal */
export const RequestAccessToTeamResponseBody$inboundSchema = z.object({
    teamSlug: z.string(),
    teamName: z.string(),
    confirmed: z.boolean().optional(),
    joinedFrom: z.lazy(() => RequestAccessToTeamTeamsJoinedFrom$inboundSchema)
        .optional(),
    accessRequestedAt: z.number().optional(),
    github: z.nullable(z.lazy(() => Github$inboundSchema)),
    gitlab: z.nullable(z.lazy(() => Gitlab$inboundSchema)),
    bitbucket: z.nullable(z.lazy(() => Bitbucket$inboundSchema)),
});
/** @internal */
export const RequestAccessToTeamResponseBody$outboundSchema = z.object({
    teamSlug: z.string(),
    teamName: z.string(),
    confirmed: z.boolean().optional(),
    joinedFrom: z.lazy(() => RequestAccessToTeamTeamsJoinedFrom$outboundSchema)
        .optional(),
    accessRequestedAt: z.number().optional(),
    github: z.nullable(z.lazy(() => Github$outboundSchema)),
    gitlab: z.nullable(z.lazy(() => Gitlab$outboundSchema)),
    bitbucket: z.nullable(z.lazy(() => Bitbucket$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RequestAccessToTeamResponseBody$;
(function (RequestAccessToTeamResponseBody$) {
    /** @deprecated use `RequestAccessToTeamResponseBody$inboundSchema` instead. */
    RequestAccessToTeamResponseBody$.inboundSchema = RequestAccessToTeamResponseBody$inboundSchema;
    /** @deprecated use `RequestAccessToTeamResponseBody$outboundSchema` instead. */
    RequestAccessToTeamResponseBody$.outboundSchema = RequestAccessToTeamResponseBody$outboundSchema;
})(RequestAccessToTeamResponseBody$ || (RequestAccessToTeamResponseBody$ = {}));
export function requestAccessToTeamResponseBodyToJSON(requestAccessToTeamResponseBody) {
    return JSON.stringify(RequestAccessToTeamResponseBody$outboundSchema.parse(requestAccessToTeamResponseBody));
}
export function requestAccessToTeamResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RequestAccessToTeamResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RequestAccessToTeamResponseBody' from JSON`);
}
//# sourceMappingURL=requestaccesstoteamop.js.map