/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
/** @internal */
export const DeleteAuthTokenRequest$inboundSchema = z.object({
    tokenId: z.string(),
});
/** @internal */
export const DeleteAuthTokenRequest$outboundSchema = z.object({
    tokenId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DeleteAuthTokenRequest$;
(function (DeleteAuthTokenRequest$) {
    /** @deprecated use `DeleteAuthTokenRequest$inboundSchema` instead. */
    DeleteAuthTokenRequest$.inboundSchema = DeleteAuthTokenRequest$inboundSchema;
    /** @deprecated use `DeleteAuthTokenRequest$outboundSchema` instead. */
    DeleteAuthTokenRequest$.outboundSchema = DeleteAuthTokenRequest$outboundSchema;
})(DeleteAuthTokenRequest$ || (DeleteAuthTokenRequest$ = {}));
export function deleteAuthTokenRequestToJSON(deleteAuthTokenRequest) {
    return JSON.stringify(DeleteAuthTokenRequest$outboundSchema.parse(deleteAuthTokenRequest));
}
export function deleteAuthTokenRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DeleteAuthTokenRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteAuthTokenRequest' from JSON`);
}
/** @internal */
export const DeleteAuthTokenResponseBody$inboundSchema = z.object({
    tokenId: z.string(),
});
/** @internal */
export const DeleteAuthTokenResponseBody$outboundSchema = z.object({
    tokenId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DeleteAuthTokenResponseBody$;
(function (DeleteAuthTokenResponseBody$) {
    /** @deprecated use `DeleteAuthTokenResponseBody$inboundSchema` instead. */
    DeleteAuthTokenResponseBody$.inboundSchema = DeleteAuthTokenResponseBody$inboundSchema;
    /** @deprecated use `DeleteAuthTokenResponseBody$outboundSchema` instead. */
    DeleteAuthTokenResponseBody$.outboundSchema = DeleteAuthTokenResponseBody$outboundSchema;
})(DeleteAuthTokenResponseBody$ || (DeleteAuthTokenResponseBody$ = {}));
export function deleteAuthTokenResponseBodyToJSON(deleteAuthTokenResponseBody) {
    return JSON.stringify(DeleteAuthTokenResponseBody$outboundSchema.parse(deleteAuthTokenResponseBody));
}
export function deleteAuthTokenResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DeleteAuthTokenResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteAuthTokenResponseBody' from JSON`);
}
//# sourceMappingURL=deleteauthtokenop.js.map