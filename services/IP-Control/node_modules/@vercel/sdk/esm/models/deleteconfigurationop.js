/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
/** @internal */
export const DeleteConfigurationRequest$inboundSchema = z.object({
    id: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/** @internal */
export const DeleteConfigurationRequest$outboundSchema = z.object({
    id: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DeleteConfigurationRequest$;
(function (DeleteConfigurationRequest$) {
    /** @deprecated use `DeleteConfigurationRequest$inboundSchema` instead. */
    DeleteConfigurationRequest$.inboundSchema = DeleteConfigurationRequest$inboundSchema;
    /** @deprecated use `DeleteConfigurationRequest$outboundSchema` instead. */
    DeleteConfigurationRequest$.outboundSchema = DeleteConfigurationRequest$outboundSchema;
})(DeleteConfigurationRequest$ || (DeleteConfigurationRequest$ = {}));
export function deleteConfigurationRequestToJSON(deleteConfigurationRequest) {
    return JSON.stringify(DeleteConfigurationRequest$outboundSchema.parse(deleteConfigurationRequest));
}
export function deleteConfigurationRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DeleteConfigurationRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteConfigurationRequest' from JSON`);
}
//# sourceMappingURL=deleteconfigurationop.js.map