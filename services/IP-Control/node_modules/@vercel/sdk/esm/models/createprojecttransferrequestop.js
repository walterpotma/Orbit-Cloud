/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/** @internal */
export const CreateProjectTransferRequestRequestBody$inboundSchema = z.object({
    callbackUrl: z.string().optional(),
    callbackSecret: z.string().optional(),
});
/** @internal */
export const CreateProjectTransferRequestRequestBody$outboundSchema = z.object({
    callbackUrl: z.string().optional(),
    callbackSecret: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectTransferRequestRequestBody$;
(function (CreateProjectTransferRequestRequestBody$) {
    /** @deprecated use `CreateProjectTransferRequestRequestBody$inboundSchema` instead. */
    CreateProjectTransferRequestRequestBody$.inboundSchema = CreateProjectTransferRequestRequestBody$inboundSchema;
    /** @deprecated use `CreateProjectTransferRequestRequestBody$outboundSchema` instead. */
    CreateProjectTransferRequestRequestBody$.outboundSchema = CreateProjectTransferRequestRequestBody$outboundSchema;
})(CreateProjectTransferRequestRequestBody$ || (CreateProjectTransferRequestRequestBody$ = {}));
export function createProjectTransferRequestRequestBodyToJSON(createProjectTransferRequestRequestBody) {
    return JSON.stringify(CreateProjectTransferRequestRequestBody$outboundSchema.parse(createProjectTransferRequestRequestBody));
}
export function createProjectTransferRequestRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectTransferRequestRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectTransferRequestRequestBody' from JSON`);
}
/** @internal */
export const CreateProjectTransferRequestRequest$inboundSchema = z.object({
    idOrName: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => CreateProjectTransferRequestRequestBody$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const CreateProjectTransferRequestRequest$outboundSchema = z.object({
    idOrName: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => CreateProjectTransferRequestRequestBody$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectTransferRequestRequest$;
(function (CreateProjectTransferRequestRequest$) {
    /** @deprecated use `CreateProjectTransferRequestRequest$inboundSchema` instead. */
    CreateProjectTransferRequestRequest$.inboundSchema = CreateProjectTransferRequestRequest$inboundSchema;
    /** @deprecated use `CreateProjectTransferRequestRequest$outboundSchema` instead. */
    CreateProjectTransferRequestRequest$.outboundSchema = CreateProjectTransferRequestRequest$outboundSchema;
})(CreateProjectTransferRequestRequest$ || (CreateProjectTransferRequestRequest$ = {}));
export function createProjectTransferRequestRequestToJSON(createProjectTransferRequestRequest) {
    return JSON.stringify(CreateProjectTransferRequestRequest$outboundSchema.parse(createProjectTransferRequestRequest));
}
export function createProjectTransferRequestRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectTransferRequestRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectTransferRequestRequest' from JSON`);
}
/** @internal */
export const CreateProjectTransferRequestResponseBody$inboundSchema = z.object({
    code: z.string(),
});
/** @internal */
export const CreateProjectTransferRequestResponseBody$outboundSchema = z.object({
    code: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateProjectTransferRequestResponseBody$;
(function (CreateProjectTransferRequestResponseBody$) {
    /** @deprecated use `CreateProjectTransferRequestResponseBody$inboundSchema` instead. */
    CreateProjectTransferRequestResponseBody$.inboundSchema = CreateProjectTransferRequestResponseBody$inboundSchema;
    /** @deprecated use `CreateProjectTransferRequestResponseBody$outboundSchema` instead. */
    CreateProjectTransferRequestResponseBody$.outboundSchema = CreateProjectTransferRequestResponseBody$outboundSchema;
})(CreateProjectTransferRequestResponseBody$ || (CreateProjectTransferRequestResponseBody$ = {}));
export function createProjectTransferRequestResponseBodyToJSON(createProjectTransferRequestResponseBody) {
    return JSON.stringify(CreateProjectTransferRequestResponseBody$outboundSchema.parse(createProjectTransferRequestResponseBody));
}
export function createProjectTransferRequestResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateProjectTransferRequestResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateProjectTransferRequestResponseBody' from JSON`);
}
//# sourceMappingURL=createprojecttransferrequestop.js.map