import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { ACLAction } from "./aclaction.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
/**
 * The framework that is being used for this project. When `null` is used no framework is selected
 */
export declare const UpdateProjectFramework: {
    readonly Blitzjs: "blitzjs";
    readonly Nextjs: "nextjs";
    readonly Gatsby: "gatsby";
    readonly Remix: "remix";
    readonly ReactRouter: "react-router";
    readonly Astro: "astro";
    readonly Hexo: "hexo";
    readonly Eleventy: "eleventy";
    readonly Docusaurus2: "docusaurus-2";
    readonly Docusaurus: "docusaurus";
    readonly Preact: "preact";
    readonly Solidstart1: "solidstart-1";
    readonly Solidstart: "solidstart";
    readonly Dojo: "dojo";
    readonly Ember: "ember";
    readonly Vue: "vue";
    readonly Scully: "scully";
    readonly IonicAngular: "ionic-angular";
    readonly Angular: "angular";
    readonly Polymer: "polymer";
    readonly Svelte: "svelte";
    readonly Sveltekit: "sveltekit";
    readonly Sveltekit1: "sveltekit-1";
    readonly IonicReact: "ionic-react";
    readonly CreateReactApp: "create-react-app";
    readonly Gridsome: "gridsome";
    readonly Umijs: "umijs";
    readonly Sapper: "sapper";
    readonly Saber: "saber";
    readonly Stencil: "stencil";
    readonly Nuxtjs: "nuxtjs";
    readonly Redwoodjs: "redwoodjs";
    readonly Hugo: "hugo";
    readonly Jekyll: "jekyll";
    readonly Brunch: "brunch";
    readonly Middleman: "middleman";
    readonly Zola: "zola";
    readonly Hydrogen: "hydrogen";
    readonly Vite: "vite";
    readonly Vitepress: "vitepress";
    readonly Vuepress: "vuepress";
    readonly Parcel: "parcel";
    readonly Fastapi: "fastapi";
    readonly Fasthtml: "fasthtml";
    readonly SanityV3: "sanity-v3";
    readonly Sanity: "sanity";
    readonly Storybook: "storybook";
    readonly Nitro: "nitro";
    readonly Hono: "hono";
    readonly Express: "express";
    readonly Xmcp: "xmcp";
};
/**
 * The framework that is being used for this project. When `null` is used no framework is selected
 */
export type UpdateProjectFramework = ClosedEnum<typeof UpdateProjectFramework>;
export declare const UpdateProjectNodeVersion: {
    readonly TwentyTwoDotX: "22.x";
    readonly TwentyDotX: "20.x";
    readonly EighteenDotX: "18.x";
    readonly SixteenDotX: "16.x";
    readonly FourteenDotX: "14.x";
    readonly TwelveDotX: "12.x";
    readonly TenDotX: "10.x";
};
export type UpdateProjectNodeVersion = ClosedEnum<typeof UpdateProjectNodeVersion>;
export declare const UpdateProjectBuildMachineType: {
    readonly Enhanced: "enhanced";
    readonly Turbo: "turbo";
};
export type UpdateProjectBuildMachineType = ClosedEnum<typeof UpdateProjectBuildMachineType>;
export declare const UpdateProjectFunctionDefaultMemoryType: {
    readonly StandardLegacy: "standard_legacy";
    readonly Standard: "standard";
    readonly Performance: "performance";
};
export type UpdateProjectFunctionDefaultMemoryType = ClosedEnum<typeof UpdateProjectFunctionDefaultMemoryType>;
/**
 * Specifies resource override configuration for the project
 */
export type UpdateProjectResourceConfig = {
    buildMachineType?: UpdateProjectBuildMachineType | undefined;
    fluid?: boolean | undefined;
    /**
     * The regions to deploy Vercel Functions to for this project
     */
    functionDefaultRegions?: Array<string> | undefined;
    functionDefaultTimeout?: number | undefined;
    functionDefaultMemoryType?: UpdateProjectFunctionDefaultMemoryType | undefined;
    /**
     * Specifies whether Zero Config Failover is enabled for this project.
     */
    functionZeroConfigFailover?: boolean | undefined;
    elasticConcurrencyEnabled?: boolean | undefined;
    isNSNBDisabled?: boolean | undefined;
};
/**
 * team: `https://oidc.vercel.com/[team_slug]` global: `https://oidc.vercel.com`
 */
export declare const UpdateProjectIssuerMode: {
    readonly Team: "team";
    readonly Global: "global";
};
/**
 * team: `https://oidc.vercel.com/[team_slug]` global: `https://oidc.vercel.com`
 */
export type UpdateProjectIssuerMode = ClosedEnum<typeof UpdateProjectIssuerMode>;
/**
 * OpenID Connect JSON Web Token generation configuration.
 */
export type UpdateProjectOidcTokenConfig = {
    /**
     * Whether or not to generate OpenID Connect JSON Web Tokens.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    enabled?: boolean | undefined;
    /**
     * team: `https://oidc.vercel.com/[team_slug]` global: `https://oidc.vercel.com`
     */
    issuerMode?: UpdateProjectIssuerMode | undefined;
};
/**
 * Specify if the password will apply to every Deployment Target or just Preview
 */
export declare const UpdateProjectDeploymentType: {
    readonly All: "all";
    readonly Preview: "preview";
    readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
    readonly AllExceptCustomDomains: "all_except_custom_domains";
};
/**
 * Specify if the password will apply to every Deployment Target or just Preview
 */
export type UpdateProjectDeploymentType = ClosedEnum<typeof UpdateProjectDeploymentType>;
/**
 * Allows to protect project deployments with a password
 */
export type UpdateProjectPasswordProtection = {
    /**
     * Specify if the password will apply to every Deployment Target or just Preview
     */
    deploymentType: UpdateProjectDeploymentType;
    /**
     * The password that will be used to protect Project Deployments
     */
    password?: string | null | undefined;
};
/**
 * Specify if the Vercel Authentication (SSO Protection) will apply to every Deployment Target or just Preview
 */
export declare const UpdateProjectProjectsDeploymentType: {
    readonly All: "all";
    readonly Preview: "preview";
    readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
    readonly AllExceptCustomDomains: "all_except_custom_domains";
};
/**
 * Specify if the Vercel Authentication (SSO Protection) will apply to every Deployment Target or just Preview
 */
export type UpdateProjectProjectsDeploymentType = ClosedEnum<typeof UpdateProjectProjectsDeploymentType>;
/**
 * Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team
 */
export type UpdateProjectSsoProtection = {
    /**
     * Specify if the Vercel Authentication (SSO Protection) will apply to every Deployment Target or just Preview
     */
    deploymentType?: UpdateProjectProjectsDeploymentType | undefined;
};
/**
 * Specify if the Trusted IPs will apply to every Deployment Target or just Preview
 */
export declare const UpdateProjectProjectsRequestDeploymentType: {
    readonly All: "all";
    readonly Preview: "preview";
    readonly Production: "production";
    readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
    readonly AllExceptCustomDomains: "all_except_custom_domains";
};
/**
 * Specify if the Trusted IPs will apply to every Deployment Target or just Preview
 */
export type UpdateProjectProjectsRequestDeploymentType = ClosedEnum<typeof UpdateProjectProjectsRequestDeploymentType>;
export type Addresses = {
    /**
     * The IP addresses that are allowlisted. Supports IPv4 addresses and CIDR notations. IPv6 is not supported
     */
    value: string;
    /**
     * An optional note explaining what the IP address or subnet is used for
     */
    note?: string | undefined;
};
/**
 * exclusive: ip match is enough to bypass deployment protection (regardless of other settings). additional: ip must match + any other protection should be also provided (password, vercel auth, shareable link, automation bypass header, automation bypass query param)
 */
export declare const ProtectionMode: {
    readonly Exclusive: "exclusive";
    readonly Additional: "additional";
};
/**
 * exclusive: ip match is enough to bypass deployment protection (regardless of other settings). additional: ip must match + any other protection should be also provided (password, vercel auth, shareable link, automation bypass header, automation bypass query param)
 */
export type ProtectionMode = ClosedEnum<typeof ProtectionMode>;
/**
 * Restricts access to deployments based on the incoming request IP address
 */
export type UpdateProjectTrustedIps = {
    /**
     * Specify if the Trusted IPs will apply to every Deployment Target or just Preview
     */
    deploymentType: UpdateProjectProjectsRequestDeploymentType;
    addresses: Array<Addresses>;
    /**
     * exclusive: ip match is enough to bypass deployment protection (regardless of other settings). additional: ip must match + any other protection should be also provided (password, vercel auth, shareable link, automation bypass header, automation bypass query param)
     */
    protectionMode: ProtectionMode;
};
export type UpdateProjectPaths = {
    /**
     * The regex path that should not be protected by Deployment Protection
     */
    value: string;
};
/**
 * Specify a list of paths that should not be protected by Deployment Protection to enable Cors preflight requests
 */
export type UpdateProjectOptionsAllowlist = {
    paths: Array<UpdateProjectPaths>;
};
export type ConnectConfigurations1 = {
    /**
     * The ID of the environment
     */
    envId: string;
    /**
     * The ID of the Secure Compute network
     */
    connectConfigurationId: string;
    /**
     * Whether the configuration should be passive, meaning builds will not run there and only passive Serverless Functions will be deployed
     */
    passive: boolean;
    /**
     * Flag saying if project builds should use Secure Compute
     */
    buildsEnabled: boolean;
};
export type ConnectConfigurations = ConnectConfigurations1;
export type UpdateProjectRequestBody = {
    autoExposeSystemEnvs?: boolean | undefined;
    autoAssignCustomDomains?: boolean | undefined;
    autoAssignCustomDomainsUpdatedBy?: string | undefined;
    /**
     * The build command for this project. When `null` is used this value will be automatically detected
     */
    buildCommand?: string | null | undefined;
    commandForIgnoringBuildStep?: string | null | undefined;
    /**
     * Specifies whether customer support can see git source for a deployment
     */
    customerSupportCodeVisibility?: boolean | undefined;
    /**
     * The dev command for this project. When `null` is used this value will be automatically detected
     */
    devCommand?: string | null | undefined;
    directoryListing?: boolean | undefined;
    /**
     * The framework that is being used for this project. When `null` is used no framework is selected
     */
    framework?: UpdateProjectFramework | null | undefined;
    /**
     * Specifies whether PRs from Git forks should require a team member's authorization before it can be deployed
     */
    gitForkProtection?: boolean | undefined;
    /**
     * Specifies whether Git LFS is enabled for this project.
     */
    gitLFS?: boolean | undefined;
    /**
     * The install command for this project. When `null` is used this value will be automatically detected
     */
    installCommand?: string | null | undefined;
    /**
     * The desired name for the project
     */
    name?: string | undefined;
    nodeVersion?: UpdateProjectNodeVersion | undefined;
    /**
     * The output directory of the project. When `null` is used this value will be automatically detected
     */
    outputDirectory?: string | null | undefined;
    /**
     * Specifies whether preview deployments are disabled for this project.
     */
    previewDeploymentsDisabled?: boolean | null | undefined;
    /**
     * Specifies whether the source code and logs of the deployments for this project should be public or not
     */
    publicSource?: boolean | null | undefined;
    /**
     * Specifies resource override configuration for the project
     */
    resourceConfig?: UpdateProjectResourceConfig | undefined;
    /**
     * The name of a directory or relative path to the source code of your project. When `null` is used it will default to the project root
     */
    rootDirectory?: string | null | undefined;
    /**
     * The region to deploy Serverless Functions in this project
     */
    serverlessFunctionRegion?: string | null | undefined;
    /**
     * Specifies whether Zero Config Failover is enabled for this project.
     */
    serverlessFunctionZeroConfigFailover?: boolean | undefined;
    /**
     * Deployments created before this absolute datetime have Skew Protection disabled. Value is in milliseconds since epoch to match \"createdAt\" fields.
     */
    skewProtectionBoundaryAt?: number | undefined;
    /**
     * Deployments created before this rolling window have Skew Protection disabled. Value is in seconds to match \"revalidate\" fields.
     */
    skewProtectionMaxAge?: number | undefined;
    /**
     * Opts-out of the message prompting a CLI user to connect a Git repository in `vercel link`.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    skipGitConnectDuringLink?: boolean | undefined;
    /**
     * Indicates if there are source files outside of the root directory
     */
    sourceFilesOutsideRootDirectory?: boolean | undefined;
    /**
     * Opt-in to preview toolbar on the project level
     */
    enablePreviewFeedback?: boolean | null | undefined;
    /**
     * Opt-in to production toolbar on the project level
     */
    enableProductionFeedback?: boolean | null | undefined;
    /**
     * Opt-in to skip deployments when there are no changes to the root directory and its dependencies
     */
    enableAffectedProjectsDeployments?: boolean | undefined;
    /**
     * OpenID Connect JSON Web Token generation configuration.
     */
    oidcTokenConfig?: UpdateProjectOidcTokenConfig | undefined;
    /**
     * Allows to protect project deployments with a password
     */
    passwordProtection?: UpdateProjectPasswordProtection | null | undefined;
    /**
     * Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team
     */
    ssoProtection?: UpdateProjectSsoProtection | null | undefined;
    /**
     * Restricts access to deployments based on the incoming request IP address
     */
    trustedIps?: UpdateProjectTrustedIps | null | undefined;
    /**
     * Specify a list of paths that should not be protected by Deployment Protection to enable Cors preflight requests
     */
    optionsAllowlist?: UpdateProjectOptionsAllowlist | null | undefined;
    /**
     * The list of connections from project environment to Secure Compute network
     */
    connectConfigurations?: Array<ConnectConfigurations1> | null | undefined;
};
export type UpdateProjectRequest = {
    /**
     * The unique project identifier or the project name
     */
    idOrName: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody: UpdateProjectRequestBody;
};
export type UpdateProjectAnalytics = {
    id: string;
    canceledAt?: number | null | undefined;
    disabledAt: number;
    enabledAt: number;
    paidAt?: number | undefined;
    sampleRatePercent?: number | null | undefined;
    spendLimitInDollars?: number | null | undefined;
};
export type UpdateProjectSpeedInsights = {
    id: string;
    enabledAt?: number | undefined;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    hasData?: boolean | undefined;
    paidAt?: number | undefined;
};
export declare const UpdateProjectEnvId2: {
    readonly Preview: "preview";
    readonly Production: "production";
};
export type UpdateProjectEnvId2 = ClosedEnum<typeof UpdateProjectEnvId2>;
export type UpdateProjectEnvId = string | UpdateProjectEnvId2;
export type UpdateProjectAws = {
    subnetIds: Array<string>;
    securityGroupId: string;
};
export type UpdateProjectConnectConfigurations = {
    envId: string | UpdateProjectEnvId2;
    connectConfigurationId: string;
    dc?: string | undefined;
    passive: boolean;
    buildsEnabled: boolean;
    aws?: UpdateProjectAws | undefined;
    createdAt: number;
    updatedAt: number;
};
export type UpdateProjectDefinitions = {
    /**
     * The hostname that should be used.
     */
    host: string;
    /**
     * The path that should be called for the cronjob.
     */
    path: string;
    /**
     * The cron expression.
     */
    schedule: string;
};
export type UpdateProjectCrons = {
    /**
     * The time the feature was enabled for this project. Note: It enables automatically with the first Deployment that outputs cronjobs.
     */
    enabledAt: number;
    /**
     * The time the feature was disabled for this project.
     */
    disabledAt: number | null;
    updatedAt: number;
    /**
     * The ID of the Deployment from which the definitions originated.
     */
    deploymentId: string | null;
    definitions: Array<UpdateProjectDefinitions>;
};
export type UpdateProjectDataCache = {
    userDisabled: boolean;
    storageSizeBytes?: number | null | undefined;
    unlimited?: boolean | undefined;
};
/**
 * Retention policies for deployments. These are enforced at the project level, but we also maintain an instance of this at the team level as a default policy that gets applied to new projects.
 */
export type UpdateProjectDeploymentExpiration = {
    /**
     * Number of days to keep non-production deployments (mostly preview deployments) before soft deletion.
     */
    expirationDays?: number | undefined;
    /**
     * Number of days to keep production deployments before soft deletion.
     */
    expirationDaysProduction?: number | undefined;
    /**
     * Number of days to keep canceled deployments before soft deletion.
     */
    expirationDaysCanceled?: number | undefined;
    /**
     * Number of days to keep errored deployments before soft deletion.
     */
    expirationDaysErrored?: number | undefined;
    /**
     * Minimum number of production deployments to keep for this project, even if they are over the production expiration limit.
     */
    deploymentsToKeep?: number | undefined;
};
export declare const UpdateProjectTarget2: {
    readonly Production: "production";
    readonly Preview: "preview";
    readonly Development: "development";
};
export type UpdateProjectTarget2 = ClosedEnum<typeof UpdateProjectTarget2>;
export type UpdateProjectTarget = Array<string> | UpdateProjectTarget2;
export declare const UpdateProjectType: {
    readonly System: "system";
    readonly Encrypted: "encrypted";
    readonly Plain: "plain";
    readonly Sensitive: "sensitive";
    readonly Secret: "secret";
};
export type UpdateProjectType = ClosedEnum<typeof UpdateProjectType>;
export declare const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type: {
    readonly FlagsConnectionString: "flags-connection-string";
};
export type UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type = ClosedEnum<typeof UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type>;
export type UpdateProjectContentHint15 = {
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type;
    projectId: string;
};
export declare const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type: {
    readonly IntegrationStoreSecret: "integration-store-secret";
};
export type UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type = ClosedEnum<typeof UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type>;
export type UpdateProjectContentHint14 = {
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type;
    storeId: string;
    integrationId: string;
    integrationProductId: string;
    integrationConfigurationId: string;
};
export declare const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type: {
    readonly PostgresUrlNoSsl: "postgres-url-no-ssl";
};
export type UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type = ClosedEnum<typeof UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type>;
export type UpdateProjectContentHint13 = {
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type;
    storeId: string;
};
export declare const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type: {
    readonly PostgresDatabase: "postgres-database";
};
export type UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type = ClosedEnum<typeof UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type>;
export type UpdateProjectContentHint12 = {
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type;
    storeId: string;
};
export declare const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type: {
    readonly PostgresPassword: "postgres-password";
};
export type UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type = ClosedEnum<typeof UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type>;
export type UpdateProjectContentHint11 = {
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type;
    storeId: string;
};
export declare const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type: {
    readonly PostgresHost: "postgres-host";
};
export type UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type = ClosedEnum<typeof UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type>;
export type UpdateProjectContentHint10 = {
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type;
    storeId: string;
};
export declare const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type: {
    readonly PostgresUser: "postgres-user";
};
export type UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type = ClosedEnum<typeof UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type>;
export type UpdateProjectContentHint9 = {
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type;
    storeId: string;
};
export declare const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type: {
    readonly PostgresPrismaUrl: "postgres-prisma-url";
};
export type UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type = ClosedEnum<typeof UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type>;
export type UpdateProjectContentHint8 = {
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type;
    storeId: string;
};
export declare const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType: {
    readonly PostgresUrlNonPooling: "postgres-url-non-pooling";
};
export type UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType = ClosedEnum<typeof UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType>;
export type UpdateProjectContentHint7 = {
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType;
    storeId: string;
};
export declare const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType: {
    readonly PostgresUrl: "postgres-url";
};
export type UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType = ClosedEnum<typeof UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType>;
export type UpdateProjectContentHint6 = {
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType;
    storeId: string;
};
export declare const UpdateProjectContentHintProjectsResponse200ApplicationJSONType: {
    readonly BlobReadWriteToken: "blob-read-write-token";
};
export type UpdateProjectContentHintProjectsResponse200ApplicationJSONType = ClosedEnum<typeof UpdateProjectContentHintProjectsResponse200ApplicationJSONType>;
export type UpdateProjectContentHint5 = {
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONType;
    storeId: string;
};
export declare const UpdateProjectContentHintProjectsResponse200Type: {
    readonly RedisRestApiReadOnlyToken: "redis-rest-api-read-only-token";
};
export type UpdateProjectContentHintProjectsResponse200Type = ClosedEnum<typeof UpdateProjectContentHintProjectsResponse200Type>;
export type UpdateProjectContentHint4 = {
    type: UpdateProjectContentHintProjectsResponse200Type;
    storeId: string;
};
export declare const UpdateProjectContentHintProjectsResponseType: {
    readonly RedisRestApiToken: "redis-rest-api-token";
};
export type UpdateProjectContentHintProjectsResponseType = ClosedEnum<typeof UpdateProjectContentHintProjectsResponseType>;
export type UpdateProjectContentHint3 = {
    type: UpdateProjectContentHintProjectsResponseType;
    storeId: string;
};
export declare const UpdateProjectContentHintProjectsType: {
    readonly RedisRestApiUrl: "redis-rest-api-url";
};
export type UpdateProjectContentHintProjectsType = ClosedEnum<typeof UpdateProjectContentHintProjectsType>;
export type UpdateProjectContentHint2 = {
    type: UpdateProjectContentHintProjectsType;
    storeId: string;
};
export declare const UpdateProjectContentHintType: {
    readonly RedisUrl: "redis-url";
};
export type UpdateProjectContentHintType = ClosedEnum<typeof UpdateProjectContentHintType>;
export type UpdateProjectContentHint1 = {
    type: UpdateProjectContentHintType;
    storeId: string;
};
export type UpdateProjectContentHint = UpdateProjectContentHint14 | UpdateProjectContentHint1 | UpdateProjectContentHint2 | UpdateProjectContentHint3 | UpdateProjectContentHint4 | UpdateProjectContentHint5 | UpdateProjectContentHint6 | UpdateProjectContentHint7 | UpdateProjectContentHint8 | UpdateProjectContentHint9 | UpdateProjectContentHint10 | UpdateProjectContentHint11 | UpdateProjectContentHint12 | UpdateProjectContentHint13 | UpdateProjectContentHint15;
export declare const UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType: {
    readonly FlagsSecret: "flags-secret";
};
export type UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType = ClosedEnum<typeof UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType>;
/**
 * Similar to `contentHints`, but should not be exposed to the user.
 */
export type UpdateProjectInternalContentHint = {
    type: UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType;
    /**
     * Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
     */
    encryptedValue: string;
};
export type UpdateProjectEnv = {
    target?: Array<string> | UpdateProjectTarget2 | undefined;
    type: UpdateProjectType;
    /**
     * This is used to identiy variables that have been migrated from type secret to sensitive.
     */
    sunsetSecretId?: string | undefined;
    decrypted?: boolean | undefined;
    value: string;
    vsmValue?: string | undefined;
    id?: string | undefined;
    key: string;
    configurationId?: string | null | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    createdBy?: string | null | undefined;
    updatedBy?: string | null | undefined;
    gitBranch?: string | undefined;
    edgeConfigId?: string | null | undefined;
    edgeConfigTokenId?: string | null | undefined;
    contentHint?: UpdateProjectContentHint14 | UpdateProjectContentHint1 | UpdateProjectContentHint2 | UpdateProjectContentHint3 | UpdateProjectContentHint4 | UpdateProjectContentHint5 | UpdateProjectContentHint6 | UpdateProjectContentHint7 | UpdateProjectContentHint8 | UpdateProjectContentHint9 | UpdateProjectContentHint10 | UpdateProjectContentHint11 | UpdateProjectContentHint12 | UpdateProjectContentHint13 | UpdateProjectContentHint15 | null | undefined;
    /**
     * Similar to `contentHints`, but should not be exposed to the user.
     */
    internalContentHint?: UpdateProjectInternalContentHint | null | undefined;
    comment?: string | undefined;
    customEnvironmentIds?: Array<string> | undefined;
};
/**
 * The type of environment (production, preview, or development)
 */
export declare const UpdateProjectProjectsType: {
    readonly Preview: "preview";
    readonly Production: "production";
    readonly Development: "development";
};
/**
 * The type of environment (production, preview, or development)
 */
export type UpdateProjectProjectsType = ClosedEnum<typeof UpdateProjectProjectsType>;
/**
 * The type of matching to perform
 */
export declare const UpdateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType: {
    readonly EndsWith: "endsWith";
    readonly StartsWith: "startsWith";
    readonly Equals: "equals";
};
/**
 * The type of matching to perform
 */
export type UpdateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType = ClosedEnum<typeof UpdateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType>;
/**
 * Configuration for matching git branches to this environment
 */
export type UpdateProjectBranchMatcher = {
    /**
     * The type of matching to perform
     */
    type: UpdateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType;
    /**
     * The pattern to match against branch names
     */
    pattern: string;
};
/**
 * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
 */
export type UpdateProjectVerification = {
    type: string;
    domain: string;
    value: string;
    reason: string;
};
/**
 * List of domains associated with this environment
 */
export type UpdateProjectDomains = {
    name: string;
    apexName: string;
    projectId: string;
    redirect?: string | null | undefined;
    redirectStatusCode?: number | null | undefined;
    gitBranch?: string | null | undefined;
    customEnvironmentId?: string | null | undefined;
    updatedAt?: number | undefined;
    createdAt?: number | undefined;
    /**
     * `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.
     */
    verified: boolean;
    /**
     * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
     */
    verification?: Array<UpdateProjectVerification> | undefined;
};
/**
 * Internal representation of a custom environment with all required properties
 */
export type UpdateProjectCustomEnvironments = {
    /**
     * Unique identifier for the custom environment (format: env_*)
     */
    id: string;
    /**
     * URL-friendly name of the environment
     */
    slug: string;
    /**
     * The type of environment (production, preview, or development)
     */
    type: UpdateProjectProjectsType;
    /**
     * Optional description of the environment's purpose
     */
    description?: string | undefined;
    /**
     * Configuration for matching git branches to this environment
     */
    branchMatcher?: UpdateProjectBranchMatcher | undefined;
    /**
     * List of domains associated with this environment
     */
    domains?: Array<UpdateProjectDomains> | undefined;
    /**
     * List of aliases for the current deployment
     */
    currentDeploymentAliases?: Array<string> | undefined;
    /**
     * Timestamp when the environment was created
     */
    createdAt: number;
    /**
     * Timestamp when the environment was last updated
     */
    updatedAt: number;
};
export declare const UpdateProjectProjectsFramework: {
    readonly Blitzjs: "blitzjs";
    readonly Nextjs: "nextjs";
    readonly Gatsby: "gatsby";
    readonly Remix: "remix";
    readonly ReactRouter: "react-router";
    readonly Astro: "astro";
    readonly Hexo: "hexo";
    readonly Eleventy: "eleventy";
    readonly Docusaurus2: "docusaurus-2";
    readonly Docusaurus: "docusaurus";
    readonly Preact: "preact";
    readonly Solidstart1: "solidstart-1";
    readonly Solidstart: "solidstart";
    readonly Dojo: "dojo";
    readonly Ember: "ember";
    readonly Vue: "vue";
    readonly Scully: "scully";
    readonly IonicAngular: "ionic-angular";
    readonly Angular: "angular";
    readonly Polymer: "polymer";
    readonly Svelte: "svelte";
    readonly Sveltekit: "sveltekit";
    readonly Sveltekit1: "sveltekit-1";
    readonly IonicReact: "ionic-react";
    readonly CreateReactApp: "create-react-app";
    readonly Gridsome: "gridsome";
    readonly Umijs: "umijs";
    readonly Sapper: "sapper";
    readonly Saber: "saber";
    readonly Stencil: "stencil";
    readonly Nuxtjs: "nuxtjs";
    readonly Redwoodjs: "redwoodjs";
    readonly Hugo: "hugo";
    readonly Jekyll: "jekyll";
    readonly Brunch: "brunch";
    readonly Middleman: "middleman";
    readonly Zola: "zola";
    readonly Hydrogen: "hydrogen";
    readonly Vite: "vite";
    readonly Vitepress: "vitepress";
    readonly Vuepress: "vuepress";
    readonly Parcel: "parcel";
    readonly Fastapi: "fastapi";
    readonly Fasthtml: "fasthtml";
    readonly SanityV3: "sanity-v3";
    readonly Sanity: "sanity";
    readonly Storybook: "storybook";
    readonly Nitro: "nitro";
    readonly Hono: "hono";
    readonly Express: "express";
    readonly Xmcp: "xmcp";
};
export type UpdateProjectProjectsFramework = ClosedEnum<typeof UpdateProjectProjectsFramework>;
export type UpdateProjectIpBuckets = {
    bucket: string;
    supportUntil?: number | undefined;
};
export type UpdateProjectAliasAssigned = number | boolean;
export type UpdateProjectAliasError = {
    code: string;
    message: string;
};
/**
 * The type of matching to perform
 */
export declare const UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType: {
    readonly EndsWith: "endsWith";
    readonly StartsWith: "startsWith";
    readonly Equals: "equals";
};
/**
 * The type of matching to perform
 */
export type UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType = ClosedEnum<typeof UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType>;
export type UpdateProjectProjectsBranchMatcher = {
    /**
     * The type of matching to perform
     */
    type: UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType;
    /**
     * The pattern to match against branch names
     */
    pattern: string;
};
export type UpdateProjectBuilds = {
    use: string;
    src?: string | undefined;
    dest?: string | undefined;
};
export declare const UpdateProjectChecksConclusion: {
    readonly Succeeded: "succeeded";
    readonly Failed: "failed";
    readonly Skipped: "skipped";
    readonly Canceled: "canceled";
};
export type UpdateProjectChecksConclusion = ClosedEnum<typeof UpdateProjectChecksConclusion>;
export declare const UpdateProjectChecksState: {
    readonly Registered: "registered";
    readonly Running: "running";
    readonly Completed: "completed";
};
export type UpdateProjectChecksState = ClosedEnum<typeof UpdateProjectChecksState>;
export type UpdateProjectCreator = {
    email: string;
    githubLogin?: string | undefined;
    gitlabLogin?: string | undefined;
    uid: string;
    username: string;
};
export type UpdateProjectOidcTokenClaims = {
    iss: string;
    sub: string;
    scope: string;
    aud: string;
    owner: string;
    ownerId: string;
    project: string;
    projectId: string;
    environment: string;
};
export declare const UpdateProjectPlan: {
    readonly Pro: "pro";
    readonly Enterprise: "enterprise";
    readonly Hobby: "hobby";
};
export type UpdateProjectPlan = ClosedEnum<typeof UpdateProjectPlan>;
export declare const UpdateProjectReadyState: {
    readonly Building: "BUILDING";
    readonly Error: "ERROR";
    readonly Initializing: "INITIALIZING";
    readonly Queued: "QUEUED";
    readonly Ready: "READY";
    readonly Canceled: "CANCELED";
};
export type UpdateProjectReadyState = ClosedEnum<typeof UpdateProjectReadyState>;
export declare const UpdateProjectReadySubstate: {
    readonly Staged: "STAGED";
    readonly Rolling: "ROLLING";
    readonly Promoted: "PROMOTED";
};
export type UpdateProjectReadySubstate = ClosedEnum<typeof UpdateProjectReadySubstate>;
export declare const UpdateProjectProjectsResponseType: {
    readonly Lambdas: "LAMBDAS";
};
export type UpdateProjectProjectsResponseType = ClosedEnum<typeof UpdateProjectProjectsResponseType>;
export type UpdateProjectLatestDeployments = {
    id: string;
    alias?: Array<string> | undefined;
    aliasAssigned?: number | boolean | null | undefined;
    aliasError?: UpdateProjectAliasError | null | undefined;
    aliasFinal?: string | null | undefined;
    automaticAliases?: Array<string> | undefined;
    branchMatcher?: UpdateProjectProjectsBranchMatcher | undefined;
    buildingAt?: number | undefined;
    builds?: Array<UpdateProjectBuilds> | undefined;
    checksConclusion?: UpdateProjectChecksConclusion | undefined;
    checksState?: UpdateProjectChecksState | undefined;
    connectBuildsEnabled?: boolean | undefined;
    connectConfigurationId?: string | undefined;
    createdAt: number;
    createdIn: string;
    creator: UpdateProjectCreator | null;
    deletedAt?: number | undefined;
    deploymentHostname: string;
    forced?: boolean | undefined;
    name: string;
    meta?: {
        [k: string]: string;
    } | undefined;
    monorepoManager?: string | null | undefined;
    oidcTokenClaims?: UpdateProjectOidcTokenClaims | undefined;
    plan: UpdateProjectPlan;
    /**
     * Whether or not preview comments are enabled for the deployment
     */
    previewCommentsEnabled?: boolean | undefined;
    private: boolean;
    readyAt?: number | undefined;
    readyState: UpdateProjectReadyState;
    readySubstate?: UpdateProjectReadySubstate | undefined;
    requestedAt?: number | undefined;
    target?: string | null | undefined;
    teamId?: string | null | undefined;
    type: UpdateProjectProjectsResponseType;
    url: string;
    userId: string;
    withCache?: boolean | undefined;
};
export declare const UpdateProjectLinkProjectsResponse200ApplicationJSONType: {
    readonly Bitbucket: "bitbucket";
};
export type UpdateProjectLinkProjectsResponse200ApplicationJSONType = ClosedEnum<typeof UpdateProjectLinkProjectsResponse200ApplicationJSONType>;
export type UpdateProjectLinkProjectsResponse200ApplicationJSONDeployHooks = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};
export type UpdateProjectLink5 = {
    name: string;
    slug: string;
    owner: string;
    type: UpdateProjectLinkProjectsResponse200ApplicationJSONType;
    uuid: string;
    workspaceUuid: string;
    createdAt?: number | undefined;
    deployHooks: Array<UpdateProjectLinkProjectsResponse200ApplicationJSONDeployHooks>;
    gitCredentialId: string;
    updatedAt?: number | undefined;
    sourceless?: boolean | undefined;
    productionBranch: string;
};
export declare const UpdateProjectLinkProjectsResponse200Type: {
    readonly Gitlab: "gitlab";
};
export type UpdateProjectLinkProjectsResponse200Type = ClosedEnum<typeof UpdateProjectLinkProjectsResponse200Type>;
export type UpdateProjectLinkProjectsResponse200DeployHooks = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};
export type UpdateProjectLink4 = {
    projectId: string;
    projectName: string;
    projectNameWithNamespace: string;
    projectNamespace: string;
    /**
     * A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes. This is the id of the top level group that a namespace belongs to. Gitlab supports group nesting (up to 20 levels).
     */
    projectOwnerId?: number | undefined;
    projectUrl: string;
    type: UpdateProjectLinkProjectsResponse200Type;
    createdAt?: number | undefined;
    deployHooks: Array<UpdateProjectLinkProjectsResponse200DeployHooks>;
    gitCredentialId: string;
    updatedAt?: number | undefined;
    sourceless?: boolean | undefined;
    productionBranch: string;
};
export declare const UpdateProjectLinkProjectsResponseType: {
    readonly GithubCustomHost: "github-custom-host";
};
export type UpdateProjectLinkProjectsResponseType = ClosedEnum<typeof UpdateProjectLinkProjectsResponseType>;
export type UpdateProjectLinkProjectsResponseDeployHooks = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};
export type UpdateProjectLink3 = {
    org: string;
    /**
     * A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes.
     */
    repoOwnerId?: number | undefined;
    repo?: string | undefined;
    repoId?: number | undefined;
    type: UpdateProjectLinkProjectsResponseType;
    host: string;
    createdAt?: number | undefined;
    deployHooks: Array<UpdateProjectLinkProjectsResponseDeployHooks>;
    gitCredentialId: string;
    updatedAt?: number | undefined;
    sourceless?: boolean | undefined;
    productionBranch: string;
};
export declare const UpdateProjectLinkProjectsType: {
    readonly GithubLimited: "github-limited";
};
export type UpdateProjectLinkProjectsType = ClosedEnum<typeof UpdateProjectLinkProjectsType>;
export type UpdateProjectLinkProjectsDeployHooks = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};
export type UpdateProjectLink2 = {
    type: UpdateProjectLinkProjectsType;
    repo?: string | undefined;
    repoId?: number | undefined;
    updatedAt?: number | undefined;
    createdAt?: number | undefined;
    org: string;
    /**
     * A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes.
     */
    repoOwnerId?: number | undefined;
    deployHooks: Array<UpdateProjectLinkProjectsDeployHooks>;
    gitCredentialId: string;
    sourceless?: boolean | undefined;
    productionBranch: string;
};
export declare const UpdateProjectLinkType: {
    readonly Github: "github";
};
export type UpdateProjectLinkType = ClosedEnum<typeof UpdateProjectLinkType>;
export type UpdateProjectLinkDeployHooks = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};
export type UpdateProjectLink1 = {
    org: string;
    /**
     * A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes.
     */
    repoOwnerId?: number | undefined;
    repo?: string | undefined;
    repoId?: number | undefined;
    type: UpdateProjectLinkType;
    createdAt?: number | undefined;
    deployHooks: Array<UpdateProjectLinkDeployHooks>;
    gitCredentialId: string;
    updatedAt?: number | undefined;
    sourceless?: boolean | undefined;
    productionBranch: string;
};
export type UpdateProjectLink = UpdateProjectLink4 | UpdateProjectLink5 | UpdateProjectLink3 | UpdateProjectLink1 | UpdateProjectLink2;
export type UpdateProjectMicrofrontends2 = {
    updatedAt: number;
    groupIds: Array<any>;
    enabled: boolean;
};
export type UpdateProjectMicrofrontends1 = {
    /**
     * Timestamp when the microfrontends settings were last updated.
     */
    updatedAt: number;
    /**
     * The group IDs of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together.
     */
    groupIds: Array<string>;
    /**
     * Whether microfrontends are enabled for this project.
     */
    enabled: boolean;
    /**
     * Whether this project is the default application for the microfrontends group. The default application is the one that is used as the top level shell for the microfrontends group and hosts the other microfrontends.
     */
    isDefaultApp?: boolean | undefined;
    /**
     * A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI. Includes the leading slash, e.g. `/docs`
     */
    defaultRoute?: string | undefined;
    /**
     * Whether observability data should be routed to this microfrontend project or a root project.
     */
    routeObservabilityToThisProject?: boolean | undefined;
};
export type UpdateProjectMicrofrontends = UpdateProjectMicrofrontends1 | UpdateProjectMicrofrontends2;
export declare const UpdateProjectProjectsNodeVersion: {
    readonly TwentyTwoDotX: "22.x";
    readonly TwentyDotX: "20.x";
    readonly EighteenDotX: "18.x";
    readonly SixteenDotX: "16.x";
    readonly FourteenDotX: "14.x";
    readonly TwelveDotX: "12.x";
    readonly TenDotX: "10.x";
    readonly EightDot10DotX: "8.10.x";
};
export type UpdateProjectProjectsNodeVersion = ClosedEnum<typeof UpdateProjectProjectsNodeVersion>;
export type UpdateProjectProjectsPaths = {
    value: string;
};
export type UpdateProjectProjectsOptionsAllowlist = {
    paths: Array<UpdateProjectProjectsPaths>;
};
export type UpdateProjectProjectsPasswordProtection = {};
export declare const UpdateProjectProjectsFunctionDefaultMemoryType: {
    readonly StandardLegacy: "standard_legacy";
    readonly Standard: "standard";
    readonly Performance: "performance";
};
export type UpdateProjectProjectsFunctionDefaultMemoryType = ClosedEnum<typeof UpdateProjectProjectsFunctionDefaultMemoryType>;
export declare const UpdateProjectProjectsBuildMachineType: {
    readonly Enhanced: "enhanced";
    readonly Turbo: "turbo";
};
export type UpdateProjectProjectsBuildMachineType = ClosedEnum<typeof UpdateProjectProjectsBuildMachineType>;
export type UpdateProjectProjectsResourceConfig = {
    elasticConcurrencyEnabled?: boolean | undefined;
    fluid?: boolean | undefined;
    functionDefaultRegions: Array<string>;
    functionDefaultTimeout?: number | undefined;
    functionDefaultMemoryType?: UpdateProjectProjectsFunctionDefaultMemoryType | undefined;
    functionZeroConfigFailover?: boolean | undefined;
    buildMachineType?: UpdateProjectProjectsBuildMachineType | undefined;
    isNSNBDisabled?: boolean | undefined;
};
/**
 * Description of why a project was rolled back, and by whom. Note that lastAliasRequest contains the from/to details of the rollback.
 */
export type UpdateProjectRollbackDescription = {
    /**
     * The user who rolled back the project.
     */
    userId: string;
    /**
     * The username of the user who rolled back the project.
     */
    username: string;
    /**
     * User-supplied explanation of why they rolled back the project. Limited to 250 characters.
     */
    description: string;
    /**
     * Timestamp of when the rollback was requested.
     */
    createdAt: number;
};
/**
 * An array of all the stages required during a deployment release. Each stage defines a target percentage and advancement rules. The final stage must always have targetPercentage: 100.
 */
export type UpdateProjectStages = {
    /**
     * The percentage of traffic to serve to the canary deployment (0-100)
     */
    targetPercentage: number;
    /**
     * Whether or not this stage requires manual approval to proceed
     */
    requireApproval?: boolean | undefined;
    /**
     * Duration in minutes for automatic advancement to the next stage
     */
    duration?: number | undefined;
};
/**
 * Project-level rolling release configuration that defines how deployments should be gradually rolled out
 */
export type UpdateProjectRollingRelease = {
    /**
     * The environment that the release targets, currently only supports production. Adding in case we want to configure with alias groups or custom environments.
     */
    target: string;
    /**
     * An array of all the stages required during a deployment release. Each stage defines a target percentage and advancement rules. The final stage must always have targetPercentage: 100.
     */
    stages?: Array<UpdateProjectStages> | null | undefined;
    /**
     * Whether the request served by a canary deployment should return a header indicating a canary was served. Defaults to `false` when omitted.
     */
    canaryResponseHeader?: boolean | undefined;
};
export declare const UpdateProjectProjectsResponseFunctionDefaultMemoryType: {
    readonly StandardLegacy: "standard_legacy";
    readonly Standard: "standard";
    readonly Performance: "performance";
};
export type UpdateProjectProjectsResponseFunctionDefaultMemoryType = ClosedEnum<typeof UpdateProjectProjectsResponseFunctionDefaultMemoryType>;
export declare const UpdateProjectProjectsResponseBuildMachineType: {
    readonly Enhanced: "enhanced";
    readonly Turbo: "turbo";
};
export type UpdateProjectProjectsResponseBuildMachineType = ClosedEnum<typeof UpdateProjectProjectsResponseBuildMachineType>;
export type UpdateProjectDefaultResourceConfig = {
    elasticConcurrencyEnabled?: boolean | undefined;
    fluid?: boolean | undefined;
    functionDefaultRegions: Array<string>;
    functionDefaultTimeout?: number | undefined;
    functionDefaultMemoryType?: UpdateProjectProjectsResponseFunctionDefaultMemoryType | undefined;
    functionZeroConfigFailover?: boolean | undefined;
    buildMachineType?: UpdateProjectProjectsResponseBuildMachineType | undefined;
    isNSNBDisabled?: boolean | undefined;
};
export declare const UpdateProjectProjectsResponseDeploymentType: {
    readonly Preview: "preview";
    readonly All: "all";
    readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
    readonly AllExceptCustomDomains: "all_except_custom_domains";
};
export type UpdateProjectProjectsResponseDeploymentType = ClosedEnum<typeof UpdateProjectProjectsResponseDeploymentType>;
export type UpdateProjectProjectsSsoProtection = {
    deploymentType: UpdateProjectProjectsResponseDeploymentType;
};
export type UpdateProjectProjectsAliasAssigned = number | boolean;
export type UpdateProjectProjectsAliasError = {
    code: string;
    message: string;
};
/**
 * The type of matching to perform
 */
export declare const UpdateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType: {
    readonly EndsWith: "endsWith";
    readonly StartsWith: "startsWith";
    readonly Equals: "equals";
};
/**
 * The type of matching to perform
 */
export type UpdateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType = ClosedEnum<typeof UpdateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType>;
export type UpdateProjectProjectsResponseBranchMatcher = {
    /**
     * The type of matching to perform
     */
    type: UpdateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType;
    /**
     * The pattern to match against branch names
     */
    pattern: string;
};
export type UpdateProjectProjectsBuilds = {
    use: string;
    src?: string | undefined;
    dest?: string | undefined;
};
export declare const UpdateProjectProjectsChecksConclusion: {
    readonly Succeeded: "succeeded";
    readonly Failed: "failed";
    readonly Skipped: "skipped";
    readonly Canceled: "canceled";
};
export type UpdateProjectProjectsChecksConclusion = ClosedEnum<typeof UpdateProjectProjectsChecksConclusion>;
export declare const UpdateProjectProjectsChecksState: {
    readonly Registered: "registered";
    readonly Running: "running";
    readonly Completed: "completed";
};
export type UpdateProjectProjectsChecksState = ClosedEnum<typeof UpdateProjectProjectsChecksState>;
export type UpdateProjectProjectsCreator = {
    email: string;
    githubLogin?: string | undefined;
    gitlabLogin?: string | undefined;
    uid: string;
    username: string;
};
export type UpdateProjectProjectsOidcTokenClaims = {
    iss: string;
    sub: string;
    scope: string;
    aud: string;
    owner: string;
    ownerId: string;
    project: string;
    projectId: string;
    environment: string;
};
export declare const UpdateProjectProjectsPlan: {
    readonly Pro: "pro";
    readonly Enterprise: "enterprise";
    readonly Hobby: "hobby";
};
export type UpdateProjectProjectsPlan = ClosedEnum<typeof UpdateProjectProjectsPlan>;
export declare const UpdateProjectProjectsReadyState: {
    readonly Building: "BUILDING";
    readonly Error: "ERROR";
    readonly Initializing: "INITIALIZING";
    readonly Queued: "QUEUED";
    readonly Ready: "READY";
    readonly Canceled: "CANCELED";
};
export type UpdateProjectProjectsReadyState = ClosedEnum<typeof UpdateProjectProjectsReadyState>;
export declare const UpdateProjectProjectsReadySubstate: {
    readonly Staged: "STAGED";
    readonly Rolling: "ROLLING";
    readonly Promoted: "PROMOTED";
};
export type UpdateProjectProjectsReadySubstate = ClosedEnum<typeof UpdateProjectProjectsReadySubstate>;
export declare const UpdateProjectProjectsResponse200Type: {
    readonly Lambdas: "LAMBDAS";
};
export type UpdateProjectProjectsResponse200Type = ClosedEnum<typeof UpdateProjectProjectsResponse200Type>;
export type UpdateProjectTargets = {
    id: string;
    alias?: Array<string> | undefined;
    aliasAssigned?: number | boolean | null | undefined;
    aliasError?: UpdateProjectProjectsAliasError | null | undefined;
    aliasFinal?: string | null | undefined;
    automaticAliases?: Array<string> | undefined;
    branchMatcher?: UpdateProjectProjectsResponseBranchMatcher | undefined;
    buildingAt?: number | undefined;
    builds?: Array<UpdateProjectProjectsBuilds> | undefined;
    checksConclusion?: UpdateProjectProjectsChecksConclusion | undefined;
    checksState?: UpdateProjectProjectsChecksState | undefined;
    connectBuildsEnabled?: boolean | undefined;
    connectConfigurationId?: string | undefined;
    createdAt: number;
    createdIn: string;
    creator: UpdateProjectProjectsCreator | null;
    deletedAt?: number | undefined;
    deploymentHostname: string;
    forced?: boolean | undefined;
    name: string;
    meta?: {
        [k: string]: string;
    } | undefined;
    monorepoManager?: string | null | undefined;
    oidcTokenClaims?: UpdateProjectProjectsOidcTokenClaims | undefined;
    plan: UpdateProjectProjectsPlan;
    /**
     * Whether or not preview comments are enabled for the deployment
     */
    previewCommentsEnabled?: boolean | undefined;
    private: boolean;
    readyAt?: number | undefined;
    readyState: UpdateProjectProjectsReadyState;
    readySubstate?: UpdateProjectProjectsReadySubstate | undefined;
    requestedAt?: number | undefined;
    target?: string | null | undefined;
    teamId?: string | null | undefined;
    type: UpdateProjectProjectsResponse200Type;
    url: string;
    userId: string;
    withCache?: boolean | undefined;
};
export type UpdateProjectPermissions = {
    aliasProject?: Array<ACLAction> | undefined;
    aliasProtectionBypass?: Array<ACLAction> | undefined;
    buildMachine?: Array<ACLAction> | undefined;
    productionAliasProtectionBypass?: Array<ACLAction> | undefined;
    connectConfigurationLink?: Array<ACLAction> | undefined;
    dataCacheNamespace?: Array<ACLAction> | undefined;
    deployment?: Array<ACLAction> | undefined;
    deploymentBuildLogs?: Array<ACLAction> | undefined;
    deploymentCheck?: Array<ACLAction> | undefined;
    deploymentCheckPreview?: Array<ACLAction> | undefined;
    deploymentCheckReRunFromProductionBranch?: Array<ACLAction> | undefined;
    deploymentProductionGit?: Array<ACLAction> | undefined;
    deploymentV0?: Array<ACLAction> | undefined;
    deploymentPreview?: Array<ACLAction> | undefined;
    deploymentPrivate?: Array<ACLAction> | undefined;
    deploymentPromote?: Array<ACLAction> | undefined;
    deploymentRollback?: Array<ACLAction> | undefined;
    edgeCacheNamespace?: Array<ACLAction> | undefined;
    environments?: Array<ACLAction> | undefined;
    logs?: Array<ACLAction> | undefined;
    logsPreset?: Array<ACLAction> | undefined;
    passwordProtection?: Array<ACLAction> | undefined;
    optionsAllowlist?: Array<ACLAction> | undefined;
    job?: Array<ACLAction> | undefined;
    observabilityData?: Array<ACLAction> | undefined;
    onDemandBuild?: Array<ACLAction> | undefined;
    onDemandConcurrency?: Array<ACLAction> | undefined;
    project?: Array<ACLAction> | undefined;
    projectFromV0?: Array<ACLAction> | undefined;
    projectAccessGroup?: Array<ACLAction> | undefined;
    projectAnalyticsSampling?: Array<ACLAction> | undefined;
    projectCheck?: Array<ACLAction> | undefined;
    projectCheckRun?: Array<ACLAction> | undefined;
    projectDeploymentHook?: Array<ACLAction> | undefined;
    projectDomain?: Array<ACLAction> | undefined;
    projectDomainMove?: Array<ACLAction> | undefined;
    projectDomainCheckConfig?: Array<ACLAction> | undefined;
    projectEnvVars?: Array<ACLAction> | undefined;
    projectEnvVarsProduction?: Array<ACLAction> | undefined;
    projectEnvVarsUnownedByIntegration?: Array<ACLAction> | undefined;
    projectFlags?: Array<ACLAction> | undefined;
    projectId?: Array<ACLAction> | undefined;
    projectIntegrationConfiguration?: Array<ACLAction> | undefined;
    projectLink?: Array<ACLAction> | undefined;
    projectMember?: Array<ACLAction> | undefined;
    projectMonitoring?: Array<ACLAction> | undefined;
    projectPermissions?: Array<ACLAction> | undefined;
    projectProductionBranch?: Array<ACLAction> | undefined;
    projectTransfer?: Array<ACLAction> | undefined;
    projectTransferOut?: Array<ACLAction> | undefined;
    projectProtectionBypass?: Array<ACLAction> | undefined;
    projectUsage?: Array<ACLAction> | undefined;
    projectAnalyticsUsage?: Array<ACLAction> | undefined;
    projectSupportCase?: Array<ACLAction> | undefined;
    projectSupportCaseComment?: Array<ACLAction> | undefined;
    projectDeploymentExpiration?: Array<ACLAction> | undefined;
    projectRollingRelease?: Array<ACLAction> | undefined;
    projectTier?: Array<ACLAction> | undefined;
    projectOIDCToken?: Array<ACLAction> | undefined;
    seawallConfig?: Array<ACLAction> | undefined;
    skewProtection?: Array<ACLAction> | undefined;
    analytics?: Array<ACLAction> | undefined;
    trustedIps?: Array<ACLAction> | undefined;
    v0Chat?: Array<ACLAction> | undefined;
    webAnalytics?: Array<ACLAction> | undefined;
    sharedEnvVarConnection?: Array<ACLAction> | undefined;
    sonar?: Array<ACLAction> | undefined;
    oauth2Connection?: Array<ACLAction> | undefined;
    user?: Array<ACLAction> | undefined;
    userConnection?: Array<ACLAction> | undefined;
    userSudo?: Array<ACLAction> | undefined;
    webAuthn?: Array<ACLAction> | undefined;
    accessGroup?: Array<ACLAction> | undefined;
    aliasGlobal?: Array<ACLAction> | undefined;
    analyticsSampling?: Array<ACLAction> | undefined;
    analyticsUsage?: Array<ACLAction> | undefined;
    auditLog?: Array<ACLAction> | undefined;
    billingAddress?: Array<ACLAction> | undefined;
    billingInformation?: Array<ACLAction> | undefined;
    billingInvoice?: Array<ACLAction> | undefined;
    billingInvoiceEmailRecipient?: Array<ACLAction> | undefined;
    billingInvoiceLanguage?: Array<ACLAction> | undefined;
    billingPlan?: Array<ACLAction> | undefined;
    billingPurchaseOrder?: Array<ACLAction> | undefined;
    billingRefund?: Array<ACLAction> | undefined;
    billingTaxId?: Array<ACLAction> | undefined;
    blob?: Array<ACLAction> | undefined;
    budget?: Array<ACLAction> | undefined;
    cacheArtifact?: Array<ACLAction> | undefined;
    cacheArtifactUsageEvent?: Array<ACLAction> | undefined;
    codeChecks?: Array<ACLAction> | undefined;
    concurrentBuilds?: Array<ACLAction> | undefined;
    connect?: Array<ACLAction> | undefined;
    connectConfiguration?: Array<ACLAction> | undefined;
    defaultDeploymentProtection?: Array<ACLAction> | undefined;
    domain?: Array<ACLAction> | undefined;
    domainAcceptDelegation?: Array<ACLAction> | undefined;
    domainAuthCodes?: Array<ACLAction> | undefined;
    domainCertificate?: Array<ACLAction> | undefined;
    domainCheckConfig?: Array<ACLAction> | undefined;
    domainMove?: Array<ACLAction> | undefined;
    domainPurchase?: Array<ACLAction> | undefined;
    domainRecord?: Array<ACLAction> | undefined;
    domainTransferIn?: Array<ACLAction> | undefined;
    event?: Array<ACLAction> | undefined;
    ownEvent?: Array<ACLAction> | undefined;
    sensitiveEnvironmentVariablePolicy?: Array<ACLAction> | undefined;
    fileUpload?: Array<ACLAction> | undefined;
    flagsExplorerSubscription?: Array<ACLAction> | undefined;
    gitRepository?: Array<ACLAction> | undefined;
    ipBlocking?: Array<ACLAction> | undefined;
    imageOptimizationNewPrice?: Array<ACLAction> | undefined;
    integration?: Array<ACLAction> | undefined;
    integrationAccount?: Array<ACLAction> | undefined;
    integrationConfiguration?: Array<ACLAction> | undefined;
    integrationConfigurationTransfer?: Array<ACLAction> | undefined;
    integrationConfigurationProjects?: Array<ACLAction> | undefined;
    integrationVercelConfigurationOverride?: Array<ACLAction> | undefined;
    integrationConfigurationRole?: Array<ACLAction> | undefined;
    integrationSSOSession?: Array<ACLAction> | undefined;
    integrationResource?: Array<ACLAction> | undefined;
    integrationEvent?: Array<ACLAction> | undefined;
    integrationResourceSecrets?: Array<ACLAction> | undefined;
    integrationDeploymentAction?: Array<ACLAction> | undefined;
    marketplaceInstallationMember?: Array<ACLAction> | undefined;
    marketplaceBillingData?: Array<ACLAction> | undefined;
    marketplaceInvoice?: Array<ACLAction> | undefined;
    marketplaceSettings?: Array<ACLAction> | undefined;
    marketplaceExperimentationItem?: Array<ACLAction> | undefined;
    marketplaceExperimentationEdgeConfigData?: Array<ACLAction> | undefined;
    jobGlobal?: Array<ACLAction> | undefined;
    drain?: Array<ACLAction> | undefined;
    logDrain?: Array<ACLAction> | undefined;
    traceDrain?: Array<ACLAction> | undefined;
    monitoring?: Array<ACLAction> | undefined;
    monitoringSettings?: Array<ACLAction> | undefined;
    monitoringQuery?: Array<ACLAction> | undefined;
    monitoringChart?: Array<ACLAction> | undefined;
    monitoringAlert?: Array<ACLAction> | undefined;
    notificationDeploymentFailed?: Array<ACLAction> | undefined;
    notificationDomainConfiguration?: Array<ACLAction> | undefined;
    notificationDomainExpire?: Array<ACLAction> | undefined;
    notificationDomainMoved?: Array<ACLAction> | undefined;
    notificationDomainPurchase?: Array<ACLAction> | undefined;
    notificationDomainRenewal?: Array<ACLAction> | undefined;
    notificationDomainTransfer?: Array<ACLAction> | undefined;
    notificationDomainUnverified?: Array<ACLAction> | undefined;
    notificationMonitoringAlert?: Array<ACLAction> | undefined;
    notificationPaymentFailed?: Array<ACLAction> | undefined;
    notificationUsageAlert?: Array<ACLAction> | undefined;
    notificationPreferences?: Array<ACLAction> | undefined;
    notificationCustomerBudget?: Array<ACLAction> | undefined;
    notificationStatementOfReasons?: Array<ACLAction> | undefined;
    observabilityConfiguration?: Array<ACLAction> | undefined;
    alerts?: Array<ACLAction> | undefined;
    observabilityNotebook?: Array<ACLAction> | undefined;
    observabilityFunnel?: Array<ACLAction> | undefined;
    openTelemetryEndpoint?: Array<ACLAction> | undefined;
    vercelAppInstallation?: Array<ACLAction> | undefined;
    vercelAppInstallationRequest?: Array<ACLAction> | undefined;
    paymentMethod?: Array<ACLAction> | undefined;
    permissions?: Array<ACLAction> | undefined;
    postgres?: Array<ACLAction> | undefined;
    previewDeploymentSuffix?: Array<ACLAction> | undefined;
    proTrialOnboarding?: Array<ACLAction> | undefined;
    sharedEnvVars?: Array<ACLAction> | undefined;
    sharedEnvVarsProduction?: Array<ACLAction> | undefined;
    space?: Array<ACLAction> | undefined;
    spaceRun?: Array<ACLAction> | undefined;
    passwordProtectionInvoiceItem?: Array<ACLAction> | undefined;
    rateLimit?: Array<ACLAction> | undefined;
    redis?: Array<ACLAction> | undefined;
    repository?: Array<ACLAction> | undefined;
    remoteCaching?: Array<ACLAction> | undefined;
    samlConfig?: Array<ACLAction> | undefined;
    secret?: Array<ACLAction> | undefined;
    redisStoreTokenSet?: Array<ACLAction> | undefined;
    blobStoreTokenSet?: Array<ACLAction> | undefined;
    postgresStoreTokenSet?: Array<ACLAction> | undefined;
    integrationStoreTokenSet?: Array<ACLAction> | undefined;
    integrationResourceReplCommand?: Array<ACLAction> | undefined;
    storeTransfer?: Array<ACLAction> | undefined;
    supportCase?: Array<ACLAction> | undefined;
    supportCaseComment?: Array<ACLAction> | undefined;
    dataCacheBillingSettings?: Array<ACLAction> | undefined;
    team?: Array<ACLAction> | undefined;
    teamAccessRequest?: Array<ACLAction> | undefined;
    teamFellowMembership?: Array<ACLAction> | undefined;
    teamGitExclusivity?: Array<ACLAction> | undefined;
    teamInvite?: Array<ACLAction> | undefined;
    teamInviteCode?: Array<ACLAction> | undefined;
    teamJoin?: Array<ACLAction> | undefined;
    teamMemberMfaStatus?: Array<ACLAction> | undefined;
    teamMicrofrontends?: Array<ACLAction> | undefined;
    teamOwnMembership?: Array<ACLAction> | undefined;
    teamOwnMembershipDisconnectSAML?: Array<ACLAction> | undefined;
    token?: Array<ACLAction> | undefined;
    usage?: Array<ACLAction> | undefined;
    usageCycle?: Array<ACLAction> | undefined;
    vpcPeeringConnection?: Array<ACLAction> | undefined;
    webAnalyticsPlan?: Array<ACLAction> | undefined;
    edgeConfig?: Array<ACLAction> | undefined;
    edgeConfigItem?: Array<ACLAction> | undefined;
    edgeConfigSchema?: Array<ACLAction> | undefined;
    edgeConfigToken?: Array<ACLAction> | undefined;
    webhook?: Array<ACLAction> | undefined;
    webhookEvent?: Array<ACLAction> | undefined;
    endpointVerification?: Array<ACLAction> | undefined;
    projectTransferIn?: Array<ACLAction> | undefined;
    oauth2Application?: Array<ACLAction> | undefined;
    vercelRun?: Array<ACLAction> | undefined;
    vercelRunExec?: Array<ACLAction> | undefined;
    apiKey?: Array<ACLAction> | undefined;
    apiKeyOwnedBySelf?: Array<ACLAction> | undefined;
};
export type UpdateProjectLastRollbackTarget = {};
export declare const UpdateProjectJobStatus: {
    readonly Succeeded: "succeeded";
    readonly Failed: "failed";
    readonly Skipped: "skipped";
    readonly Pending: "pending";
    readonly InProgress: "in-progress";
};
export type UpdateProjectJobStatus = ClosedEnum<typeof UpdateProjectJobStatus>;
export declare const UpdateProjectProjectsResponse200ApplicationJSONType: {
    readonly Promote: "promote";
    readonly Rollback: "rollback";
};
export type UpdateProjectProjectsResponse200ApplicationJSONType = ClosedEnum<typeof UpdateProjectProjectsResponse200ApplicationJSONType>;
export type UpdateProjectLastAliasRequest = {
    fromDeploymentId: string;
    toDeploymentId: string;
    /**
     * If rolling back from a rolling release, fromDeploymentId captures the "base" of that rolling release, and fromRollingReleaseId captures the "target" of that rolling release.
     */
    fromRollingReleaseId?: string | undefined;
    jobStatus: UpdateProjectJobStatus;
    requestedAt: number;
    type: UpdateProjectProjectsResponse200ApplicationJSONType;
};
export declare const UpdateProjectProtectionBypassProjectsScope: {
    readonly AutomationBypass: "automation-bypass";
};
export type UpdateProjectProtectionBypassProjectsScope = ClosedEnum<typeof UpdateProjectProtectionBypassProjectsScope>;
export type UpdateProjectProtectionBypass2 = {
    createdAt: number;
    createdBy: string;
    scope: UpdateProjectProtectionBypassProjectsScope;
};
export declare const UpdateProjectProtectionBypassScope: {
    readonly IntegrationAutomationBypass: "integration-automation-bypass";
};
export type UpdateProjectProtectionBypassScope = ClosedEnum<typeof UpdateProjectProtectionBypassScope>;
export type UpdateProjectProtectionBypass1 = {
    createdAt: number;
    createdBy: string;
    scope: UpdateProjectProtectionBypassScope;
    integrationId: string;
    configurationId: string;
};
export type UpdateProjectProtectionBypass = UpdateProjectProtectionBypass1 | UpdateProjectProtectionBypass2;
export declare const UpdateProjectTrustedIpsProjectsDeploymentType: {
    readonly Preview: "preview";
    readonly Production: "production";
    readonly All: "all";
    readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
    readonly AllExceptCustomDomains: "all_except_custom_domains";
};
export type UpdateProjectTrustedIpsProjectsDeploymentType = ClosedEnum<typeof UpdateProjectTrustedIpsProjectsDeploymentType>;
export type UpdateProjectTrustedIps2 = {
    deploymentType: UpdateProjectTrustedIpsProjectsDeploymentType;
};
export declare const UpdateProjectTrustedIpsDeploymentType: {
    readonly Preview: "preview";
    readonly Production: "production";
    readonly All: "all";
    readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
    readonly AllExceptCustomDomains: "all_except_custom_domains";
};
export type UpdateProjectTrustedIpsDeploymentType = ClosedEnum<typeof UpdateProjectTrustedIpsDeploymentType>;
export type UpdateProjectTrustedIpsAddresses = {
    value: string;
    note?: string | undefined;
};
export declare const UpdateProjectTrustedIpsProtectionMode: {
    readonly Additional: "additional";
    readonly Exclusive: "exclusive";
};
export type UpdateProjectTrustedIpsProtectionMode = ClosedEnum<typeof UpdateProjectTrustedIpsProtectionMode>;
export type UpdateProjectTrustedIps1 = {
    deploymentType: UpdateProjectTrustedIpsDeploymentType;
    addresses: Array<UpdateProjectTrustedIpsAddresses>;
    protectionMode: UpdateProjectTrustedIpsProtectionMode;
};
export type UpdateProjectProjectsTrustedIps = UpdateProjectTrustedIps1 | UpdateProjectTrustedIps2;
export type UpdateProjectGitComments = {
    /**
     * Whether the Vercel bot should comment on PRs
     */
    onPullRequest: boolean;
    /**
     * Whether the Vercel bot should comment on commits
     */
    onCommit: boolean;
};
/**
 * Whether the Vercel bot should automatically create GitHub deployments https://docs.github.com/en/rest/deployments/deployments#about-deployments NOTE: repository-dispatch events should be used instead
 */
export declare const UpdateProjectCreateDeployments: {
    readonly Enabled: "enabled";
    readonly Disabled: "disabled";
};
/**
 * Whether the Vercel bot should automatically create GitHub deployments https://docs.github.com/en/rest/deployments/deployments#about-deployments NOTE: repository-dispatch events should be used instead
 */
export type UpdateProjectCreateDeployments = ClosedEnum<typeof UpdateProjectCreateDeployments>;
export type UpdateProjectGitProviderOptions = {
    /**
     * Whether the Vercel bot should automatically create GitHub deployments https://docs.github.com/en/rest/deployments/deployments#about-deployments NOTE: repository-dispatch events should be used instead
     */
    createDeployments: UpdateProjectCreateDeployments;
    /**
     * Whether the Vercel bot should not automatically create GitHub repository-dispatch events on deployment events. https://vercel.com/docs/git/vercel-for-github#repository-dispatch-events
     */
    disableRepositoryDispatchEvents?: boolean | undefined;
};
export type UpdateProjectWebAnalytics = {
    id: string;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    enabledAt?: number | undefined;
    hasData?: boolean | undefined;
};
export declare const UpdateProjectProjectsResponse200Action: {
    readonly Log: "log";
    readonly Challenge: "challenge";
    readonly Deny: "deny";
};
export type UpdateProjectProjectsResponse200Action = ClosedEnum<typeof UpdateProjectProjectsResponse200Action>;
export type UpdateProjectBotFilter = {
    active: boolean;
    action?: UpdateProjectProjectsResponse200Action | undefined;
};
export declare const UpdateProjectProjectsAction: {
    readonly Log: "log";
    readonly Challenge: "challenge";
    readonly Deny: "deny";
};
export type UpdateProjectProjectsAction = ClosedEnum<typeof UpdateProjectProjectsAction>;
export type UpdateProjectAiBots = {
    active: boolean;
    action?: UpdateProjectProjectsAction | undefined;
};
export declare const UpdateProjectProjectsResponseAction: {
    readonly Log: "log";
    readonly Challenge: "challenge";
    readonly Deny: "deny";
};
export type UpdateProjectProjectsResponseAction = ClosedEnum<typeof UpdateProjectProjectsResponseAction>;
export type UpdateProjectOwasp = {
    active: boolean;
    action?: UpdateProjectProjectsResponseAction | undefined;
};
export type UpdateProjectManagedRules = {
    botFilter: UpdateProjectBotFilter;
    aiBots: UpdateProjectAiBots;
    owasp: UpdateProjectOwasp;
};
export type UpdateProjectSecurity = {
    attackModeEnabled?: boolean | undefined;
    attackModeUpdatedAt?: number | undefined;
    firewallEnabled?: boolean | undefined;
    firewallUpdatedAt?: number | undefined;
    attackModeActiveUntil?: number | null | undefined;
    firewallConfigVersion?: number | undefined;
    firewallSeawallEnabled?: boolean | undefined;
    ja3Enabled?: boolean | undefined;
    ja4Enabled?: boolean | undefined;
    firewallBypassIps?: Array<string> | undefined;
    managedRules?: UpdateProjectManagedRules | null | undefined;
    botIdEnabled?: boolean | undefined;
};
/**
 * - team: `https://oidc.vercel.com/[team_slug]` - global: `https://oidc.vercel.com`
 */
export declare const UpdateProjectProjectsIssuerMode: {
    readonly Team: "team";
    readonly Global: "global";
};
/**
 * - team: `https://oidc.vercel.com/[team_slug]` - global: `https://oidc.vercel.com`
 */
export type UpdateProjectProjectsIssuerMode = ClosedEnum<typeof UpdateProjectProjectsIssuerMode>;
export type UpdateProjectProjectsOidcTokenConfig = {
    /**
     * Whether or not to generate OpenID Connect JSON Web Tokens.
     */
    enabled?: boolean | undefined;
    /**
     * - team: `https://oidc.vercel.com/[team_slug]` - global: `https://oidc.vercel.com`
     */
    issuerMode?: UpdateProjectProjectsIssuerMode | undefined;
};
export declare const UpdateProjectTier: {
    readonly Standard: "standard";
    readonly Advanced: "advanced";
    readonly Critical: "critical";
};
export type UpdateProjectTier = ClosedEnum<typeof UpdateProjectTier>;
export type UpdateProjectFeatures = {
    webAnalytics?: boolean | undefined;
};
export type UpdateProjectHistory = {
    scanner: string;
    reason: string;
    by: string;
    byId: string;
    at: number;
};
export declare const UpdateProjectAction: {
    readonly Blocked: "blocked";
};
export type UpdateProjectAction = ClosedEnum<typeof UpdateProjectAction>;
export type UpdateProjectBlock = {
    action: UpdateProjectAction;
    reason: string;
    statusCode: number;
    createdAt: number;
    caseId?: string | undefined;
    actor?: string | undefined;
    comment?: string | undefined;
    isCascading?: boolean | undefined;
};
export declare const UpdateProjectBlockHistoryProjectsResponse200Action: {
    readonly RouteUnblocked: "route-unblocked";
};
export type UpdateProjectBlockHistoryProjectsResponse200Action = ClosedEnum<typeof UpdateProjectBlockHistoryProjectsResponse200Action>;
export declare const UpdateProjectHasProjectsResponse200Type: {
    readonly Host: "host";
};
export type UpdateProjectHasProjectsResponse200Type = ClosedEnum<typeof UpdateProjectHasProjectsResponse200Type>;
export type UpdateProjectHasProjectsResponse200Value = {
    eq: string;
};
export type UpdateProjectHasProjects2 = {
    type: UpdateProjectHasProjectsResponse200Type;
    value: UpdateProjectHasProjectsResponse200Value;
};
export declare const UpdateProjectHasProjectsResponseType: {
    readonly Header: "header";
};
export type UpdateProjectHasProjectsResponseType = ClosedEnum<typeof UpdateProjectHasProjectsResponseType>;
export declare const UpdateProjectHasProjectsKey: {
    readonly XVercelIpCountry: "x-vercel-ip-country";
};
export type UpdateProjectHasProjectsKey = ClosedEnum<typeof UpdateProjectHasProjectsKey>;
export type UpdateProjectHasProjectsResponseValue = {
    eq: string;
};
export type UpdateProjectHasProjects1 = {
    type: UpdateProjectHasProjectsResponseType;
    key: UpdateProjectHasProjectsKey;
    value: UpdateProjectHasProjectsResponseValue;
};
export type UpdateProjectRouteProjectsHas = UpdateProjectHasProjects1 | UpdateProjectHasProjects2;
export declare const UpdateProjectRouteProjectsAction: {
    readonly BlockLegalCwc: "block_legal_cwc";
};
export type UpdateProjectRouteProjectsAction = ClosedEnum<typeof UpdateProjectRouteProjectsAction>;
export type UpdateProjectRouteProjectsMitigate = {
    action: UpdateProjectRouteProjectsAction;
};
export type UpdateProjectRouteProjects2 = {
    has: Array<UpdateProjectHasProjects1 | UpdateProjectHasProjects2>;
    mitigate: UpdateProjectRouteProjectsMitigate;
    src?: string | undefined;
};
export type UpdateProjectRouteProjects1 = {
    src: string;
    status: number;
};
export type UpdateProjectBlockHistoryProjectsRoute = UpdateProjectRouteProjects1 | UpdateProjectRouteProjects2;
export type UpdateProjectBlockHistory4 = {
    action: UpdateProjectBlockHistoryProjectsResponse200Action;
    route: UpdateProjectRouteProjects1 | UpdateProjectRouteProjects2;
    statusCode?: number | undefined;
    createdAt: number;
    caseId?: string | undefined;
    actor?: string | undefined;
    comment?: string | undefined;
    isCascading?: boolean | undefined;
};
export declare const UpdateProjectBlockHistoryProjectsResponseAction: {
    readonly RouteBlocked: "route-blocked";
};
export type UpdateProjectBlockHistoryProjectsResponseAction = ClosedEnum<typeof UpdateProjectBlockHistoryProjectsResponseAction>;
export declare const UpdateProjectHasProjectsResponse200ApplicationJSONResponseBodyType: {
    readonly Host: "host";
};
export type UpdateProjectHasProjectsResponse200ApplicationJSONResponseBodyType = ClosedEnum<typeof UpdateProjectHasProjectsResponse200ApplicationJSONResponseBodyType>;
export type UpdateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue = {
    eq: string;
};
export type UpdateProjectHasProjectsResponse2 = {
    type: UpdateProjectHasProjectsResponse200ApplicationJSONResponseBodyType;
    value: UpdateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue;
};
export declare const UpdateProjectHasProjectsResponse200ApplicationJSONType: {
    readonly Header: "header";
};
export type UpdateProjectHasProjectsResponse200ApplicationJSONType = ClosedEnum<typeof UpdateProjectHasProjectsResponse200ApplicationJSONType>;
export declare const UpdateProjectHasProjectsResponseKey: {
    readonly XVercelIpCountry: "x-vercel-ip-country";
};
export type UpdateProjectHasProjectsResponseKey = ClosedEnum<typeof UpdateProjectHasProjectsResponseKey>;
export type UpdateProjectHasProjectsResponse200ApplicationJSONValue = {
    eq: string;
};
export type UpdateProjectHasProjectsResponse1 = {
    type: UpdateProjectHasProjectsResponse200ApplicationJSONType;
    key: UpdateProjectHasProjectsResponseKey;
    value: UpdateProjectHasProjectsResponse200ApplicationJSONValue;
};
export type UpdateProjectRouteHas = UpdateProjectHasProjectsResponse1 | UpdateProjectHasProjectsResponse2;
export declare const UpdateProjectRouteAction: {
    readonly BlockLegalCwc: "block_legal_cwc";
};
export type UpdateProjectRouteAction = ClosedEnum<typeof UpdateProjectRouteAction>;
export type UpdateProjectRouteMitigate = {
    action: UpdateProjectRouteAction;
};
export type UpdateProjectRoute2 = {
    has: Array<UpdateProjectHasProjectsResponse1 | UpdateProjectHasProjectsResponse2>;
    mitigate: UpdateProjectRouteMitigate;
    src?: string | undefined;
};
export type UpdateProjectRoute1 = {
    src: string;
    status: number;
};
export type UpdateProjectBlockHistoryRoute = UpdateProjectRoute1 | UpdateProjectRoute2;
export type UpdateProjectBlockHistory3 = {
    action: UpdateProjectBlockHistoryProjectsResponseAction;
    route: UpdateProjectRoute1 | UpdateProjectRoute2;
    reason: string;
    createdAt: number;
    caseId?: string | undefined;
    actor?: string | undefined;
    comment?: string | undefined;
    isCascading?: boolean | undefined;
};
export declare const UpdateProjectBlockHistoryProjectsAction: {
    readonly Unblocked: "unblocked";
};
export type UpdateProjectBlockHistoryProjectsAction = ClosedEnum<typeof UpdateProjectBlockHistoryProjectsAction>;
export type UpdateProjectBlockHistory2 = {
    action: UpdateProjectBlockHistoryProjectsAction;
    createdAt: number;
    caseId?: string | undefined;
    actor?: string | undefined;
    comment?: string | undefined;
    isCascading?: boolean | undefined;
};
export declare const UpdateProjectBlockHistoryAction: {
    readonly Blocked: "blocked";
};
export type UpdateProjectBlockHistoryAction = ClosedEnum<typeof UpdateProjectBlockHistoryAction>;
export type UpdateProjectBlockHistory1 = {
    action: UpdateProjectBlockHistoryAction;
    reason: string;
    statusCode: number;
    createdAt: number;
    caseId?: string | undefined;
    actor?: string | undefined;
    comment?: string | undefined;
    isCascading?: boolean | undefined;
};
export type UpdateProjectBlockHistory = UpdateProjectBlockHistory1 | UpdateProjectBlockHistory3 | UpdateProjectBlockHistory4 | UpdateProjectBlockHistory2;
export type UpdateProjectAbuse = {
    scanner?: string | undefined;
    history: Array<UpdateProjectHistory>;
    updatedAt: number;
    block?: UpdateProjectBlock | undefined;
    blockHistory?: Array<UpdateProjectBlockHistory1 | UpdateProjectBlockHistory3 | UpdateProjectBlockHistory4 | UpdateProjectBlockHistory2> | undefined;
};
export declare const UpdateProjectHasProjectsType: {
    readonly Host: "host";
};
export type UpdateProjectHasProjectsType = ClosedEnum<typeof UpdateProjectHasProjectsType>;
export type UpdateProjectHasProjectsValue = {
    eq: string;
};
export type UpdateProjectHas2 = {
    type: UpdateProjectHasProjectsType;
    value: UpdateProjectHasProjectsValue;
};
export declare const UpdateProjectHasType: {
    readonly Header: "header";
};
export type UpdateProjectHasType = ClosedEnum<typeof UpdateProjectHasType>;
export declare const UpdateProjectHasKey: {
    readonly XVercelIpCountry: "x-vercel-ip-country";
};
export type UpdateProjectHasKey = ClosedEnum<typeof UpdateProjectHasKey>;
export type UpdateProjectHasValue = {
    eq: string;
};
export type UpdateProjectHas1 = {
    type: UpdateProjectHasType;
    key: UpdateProjectHasKey;
    value: UpdateProjectHasValue;
};
export type UpdateProjectInternalRoutesHas = UpdateProjectHas1 | UpdateProjectHas2;
export declare const UpdateProjectInternalRoutesAction: {
    readonly BlockLegalCwc: "block_legal_cwc";
};
export type UpdateProjectInternalRoutesAction = ClosedEnum<typeof UpdateProjectInternalRoutesAction>;
export type UpdateProjectInternalRoutesMitigate = {
    action: UpdateProjectInternalRoutesAction;
};
export type UpdateProjectInternalRoutes2 = {
    has: Array<UpdateProjectHas1 | UpdateProjectHas2>;
    mitigate: UpdateProjectInternalRoutesMitigate;
    src?: string | undefined;
};
export type UpdateProjectInternalRoutes1 = {
    src: string;
    status: number;
};
export type UpdateProjectInternalRoutes = UpdateProjectInternalRoutes1 | UpdateProjectInternalRoutes2;
/**
 * The project was successfully updated
 */
export type UpdateProjectResponseBody = {
    accountId: string;
    analytics?: UpdateProjectAnalytics | undefined;
    speedInsights?: UpdateProjectSpeedInsights | undefined;
    autoExposeSystemEnvs?: boolean | undefined;
    autoAssignCustomDomains?: boolean | undefined;
    autoAssignCustomDomainsUpdatedBy?: string | undefined;
    buildCommand?: string | null | undefined;
    commandForIgnoringBuildStep?: string | null | undefined;
    connectConfigurations?: Array<UpdateProjectConnectConfigurations> | null | undefined;
    connectConfigurationId?: string | null | undefined;
    connectBuildsEnabled?: boolean | undefined;
    passiveConnectConfigurationId?: string | null | undefined;
    createdAt?: number | undefined;
    customerSupportCodeVisibility?: boolean | undefined;
    crons?: UpdateProjectCrons | undefined;
    dataCache?: UpdateProjectDataCache | undefined;
    /**
     * Retention policies for deployments. These are enforced at the project level, but we also maintain an instance of this at the team level as a default policy that gets applied to new projects.
     */
    deploymentExpiration?: UpdateProjectDeploymentExpiration | null | undefined;
    devCommand?: string | null | undefined;
    directoryListing: boolean;
    installCommand?: string | null | undefined;
    env?: Array<UpdateProjectEnv> | undefined;
    customEnvironments?: Array<UpdateProjectCustomEnvironments> | undefined;
    framework?: UpdateProjectProjectsFramework | null | undefined;
    gitForkProtection?: boolean | undefined;
    gitLFS?: boolean | undefined;
    id: string;
    ipBuckets?: Array<UpdateProjectIpBuckets> | undefined;
    latestDeployments?: Array<UpdateProjectLatestDeployments> | undefined;
    link?: UpdateProjectLink4 | UpdateProjectLink5 | UpdateProjectLink3 | UpdateProjectLink1 | UpdateProjectLink2 | undefined;
    microfrontends?: UpdateProjectMicrofrontends1 | UpdateProjectMicrofrontends2 | undefined;
    name: string;
    nodeVersion: UpdateProjectProjectsNodeVersion;
    optionsAllowlist?: UpdateProjectProjectsOptionsAllowlist | null | undefined;
    outputDirectory?: string | null | undefined;
    passwordProtection?: UpdateProjectProjectsPasswordProtection | null | undefined;
    productionDeploymentsFastLane?: boolean | undefined;
    publicSource?: boolean | null | undefined;
    resourceConfig: UpdateProjectProjectsResourceConfig;
    /**
     * Description of why a project was rolled back, and by whom. Note that lastAliasRequest contains the from/to details of the rollback.
     */
    rollbackDescription?: UpdateProjectRollbackDescription | undefined;
    /**
     * Project-level rolling release configuration that defines how deployments should be gradually rolled out
     */
    rollingRelease?: UpdateProjectRollingRelease | null | undefined;
    defaultResourceConfig: UpdateProjectDefaultResourceConfig;
    rootDirectory?: string | null | undefined;
    serverlessFunctionZeroConfigFailover?: boolean | undefined;
    skewProtectionBoundaryAt?: number | undefined;
    skewProtectionMaxAge?: number | undefined;
    skipGitConnectDuringLink?: boolean | undefined;
    sourceFilesOutsideRootDirectory?: boolean | undefined;
    enableAffectedProjectsDeployments?: boolean | undefined;
    ssoProtection?: UpdateProjectProjectsSsoProtection | null | undefined;
    targets?: {
        [k: string]: UpdateProjectTargets | null;
    } | undefined;
    transferCompletedAt?: number | undefined;
    transferStartedAt?: number | undefined;
    transferToAccountId?: string | undefined;
    transferredFromAccountId?: string | undefined;
    updatedAt?: number | undefined;
    live?: boolean | undefined;
    enablePreviewFeedback?: boolean | null | undefined;
    enableProductionFeedback?: boolean | null | undefined;
    permissions?: UpdateProjectPermissions | undefined;
    lastRollbackTarget?: UpdateProjectLastRollbackTarget | null | undefined;
    lastAliasRequest?: UpdateProjectLastAliasRequest | null | undefined;
    protectionBypass?: {
        [k: string]: UpdateProjectProtectionBypass1 | UpdateProjectProtectionBypass2;
    } | undefined;
    hasActiveBranches?: boolean | undefined;
    trustedIps?: UpdateProjectTrustedIps1 | UpdateProjectTrustedIps2 | null | undefined;
    gitComments?: UpdateProjectGitComments | undefined;
    gitProviderOptions?: UpdateProjectGitProviderOptions | undefined;
    paused?: boolean | undefined;
    concurrencyBucketName?: string | undefined;
    webAnalytics?: UpdateProjectWebAnalytics | undefined;
    security?: UpdateProjectSecurity | undefined;
    oidcTokenConfig?: UpdateProjectProjectsOidcTokenConfig | undefined;
    tier?: UpdateProjectTier | undefined;
    features?: UpdateProjectFeatures | undefined;
    v0?: boolean | undefined;
    abuse?: UpdateProjectAbuse | undefined;
    internalRoutes?: Array<UpdateProjectInternalRoutes1 | UpdateProjectInternalRoutes2> | undefined;
};
/** @internal */
export declare const UpdateProjectFramework$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectFramework>;
/** @internal */
export declare const UpdateProjectFramework$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectFramework>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectFramework$ {
    /** @deprecated use `UpdateProjectFramework$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Blitzjs: "blitzjs";
        readonly Nextjs: "nextjs";
        readonly Gatsby: "gatsby";
        readonly Remix: "remix";
        readonly ReactRouter: "react-router";
        readonly Astro: "astro";
        readonly Hexo: "hexo";
        readonly Eleventy: "eleventy";
        readonly Docusaurus2: "docusaurus-2";
        readonly Docusaurus: "docusaurus";
        readonly Preact: "preact";
        readonly Solidstart1: "solidstart-1";
        readonly Solidstart: "solidstart";
        readonly Dojo: "dojo";
        readonly Ember: "ember";
        readonly Vue: "vue";
        readonly Scully: "scully";
        readonly IonicAngular: "ionic-angular";
        readonly Angular: "angular";
        readonly Polymer: "polymer";
        readonly Svelte: "svelte";
        readonly Sveltekit: "sveltekit";
        readonly Sveltekit1: "sveltekit-1";
        readonly IonicReact: "ionic-react";
        readonly CreateReactApp: "create-react-app";
        readonly Gridsome: "gridsome";
        readonly Umijs: "umijs";
        readonly Sapper: "sapper";
        readonly Saber: "saber";
        readonly Stencil: "stencil";
        readonly Nuxtjs: "nuxtjs";
        readonly Redwoodjs: "redwoodjs";
        readonly Hugo: "hugo";
        readonly Jekyll: "jekyll";
        readonly Brunch: "brunch";
        readonly Middleman: "middleman";
        readonly Zola: "zola";
        readonly Hydrogen: "hydrogen";
        readonly Vite: "vite";
        readonly Vitepress: "vitepress";
        readonly Vuepress: "vuepress";
        readonly Parcel: "parcel";
        readonly Fastapi: "fastapi";
        readonly Fasthtml: "fasthtml";
        readonly SanityV3: "sanity-v3";
        readonly Sanity: "sanity";
        readonly Storybook: "storybook";
        readonly Nitro: "nitro";
        readonly Hono: "hono";
        readonly Express: "express";
        readonly Xmcp: "xmcp";
    }>;
    /** @deprecated use `UpdateProjectFramework$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Blitzjs: "blitzjs";
        readonly Nextjs: "nextjs";
        readonly Gatsby: "gatsby";
        readonly Remix: "remix";
        readonly ReactRouter: "react-router";
        readonly Astro: "astro";
        readonly Hexo: "hexo";
        readonly Eleventy: "eleventy";
        readonly Docusaurus2: "docusaurus-2";
        readonly Docusaurus: "docusaurus";
        readonly Preact: "preact";
        readonly Solidstart1: "solidstart-1";
        readonly Solidstart: "solidstart";
        readonly Dojo: "dojo";
        readonly Ember: "ember";
        readonly Vue: "vue";
        readonly Scully: "scully";
        readonly IonicAngular: "ionic-angular";
        readonly Angular: "angular";
        readonly Polymer: "polymer";
        readonly Svelte: "svelte";
        readonly Sveltekit: "sveltekit";
        readonly Sveltekit1: "sveltekit-1";
        readonly IonicReact: "ionic-react";
        readonly CreateReactApp: "create-react-app";
        readonly Gridsome: "gridsome";
        readonly Umijs: "umijs";
        readonly Sapper: "sapper";
        readonly Saber: "saber";
        readonly Stencil: "stencil";
        readonly Nuxtjs: "nuxtjs";
        readonly Redwoodjs: "redwoodjs";
        readonly Hugo: "hugo";
        readonly Jekyll: "jekyll";
        readonly Brunch: "brunch";
        readonly Middleman: "middleman";
        readonly Zola: "zola";
        readonly Hydrogen: "hydrogen";
        readonly Vite: "vite";
        readonly Vitepress: "vitepress";
        readonly Vuepress: "vuepress";
        readonly Parcel: "parcel";
        readonly Fastapi: "fastapi";
        readonly Fasthtml: "fasthtml";
        readonly SanityV3: "sanity-v3";
        readonly Sanity: "sanity";
        readonly Storybook: "storybook";
        readonly Nitro: "nitro";
        readonly Hono: "hono";
        readonly Express: "express";
        readonly Xmcp: "xmcp";
    }>;
}
/** @internal */
export declare const UpdateProjectNodeVersion$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectNodeVersion>;
/** @internal */
export declare const UpdateProjectNodeVersion$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectNodeVersion>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectNodeVersion$ {
    /** @deprecated use `UpdateProjectNodeVersion$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly TwentyTwoDotX: "22.x";
        readonly TwentyDotX: "20.x";
        readonly EighteenDotX: "18.x";
        readonly SixteenDotX: "16.x";
        readonly FourteenDotX: "14.x";
        readonly TwelveDotX: "12.x";
        readonly TenDotX: "10.x";
    }>;
    /** @deprecated use `UpdateProjectNodeVersion$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly TwentyTwoDotX: "22.x";
        readonly TwentyDotX: "20.x";
        readonly EighteenDotX: "18.x";
        readonly SixteenDotX: "16.x";
        readonly FourteenDotX: "14.x";
        readonly TwelveDotX: "12.x";
        readonly TenDotX: "10.x";
    }>;
}
/** @internal */
export declare const UpdateProjectBuildMachineType$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectBuildMachineType>;
/** @internal */
export declare const UpdateProjectBuildMachineType$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectBuildMachineType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectBuildMachineType$ {
    /** @deprecated use `UpdateProjectBuildMachineType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Enhanced: "enhanced";
        readonly Turbo: "turbo";
    }>;
    /** @deprecated use `UpdateProjectBuildMachineType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Enhanced: "enhanced";
        readonly Turbo: "turbo";
    }>;
}
/** @internal */
export declare const UpdateProjectFunctionDefaultMemoryType$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectFunctionDefaultMemoryType>;
/** @internal */
export declare const UpdateProjectFunctionDefaultMemoryType$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectFunctionDefaultMemoryType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectFunctionDefaultMemoryType$ {
    /** @deprecated use `UpdateProjectFunctionDefaultMemoryType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly StandardLegacy: "standard_legacy";
        readonly Standard: "standard";
        readonly Performance: "performance";
    }>;
    /** @deprecated use `UpdateProjectFunctionDefaultMemoryType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly StandardLegacy: "standard_legacy";
        readonly Standard: "standard";
        readonly Performance: "performance";
    }>;
}
/** @internal */
export declare const UpdateProjectResourceConfig$inboundSchema: z.ZodType<UpdateProjectResourceConfig, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectResourceConfig$Outbound = {
    buildMachineType?: string | undefined;
    fluid?: boolean | undefined;
    functionDefaultRegions?: Array<string> | undefined;
    functionDefaultTimeout?: number | undefined;
    functionDefaultMemoryType?: string | undefined;
    functionZeroConfigFailover?: boolean | undefined;
    elasticConcurrencyEnabled?: boolean | undefined;
    isNSNBDisabled?: boolean | undefined;
};
/** @internal */
export declare const UpdateProjectResourceConfig$outboundSchema: z.ZodType<UpdateProjectResourceConfig$Outbound, z.ZodTypeDef, UpdateProjectResourceConfig>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectResourceConfig$ {
    /** @deprecated use `UpdateProjectResourceConfig$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectResourceConfig, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectResourceConfig$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectResourceConfig$Outbound, z.ZodTypeDef, UpdateProjectResourceConfig>;
    /** @deprecated use `UpdateProjectResourceConfig$Outbound` instead. */
    type Outbound = UpdateProjectResourceConfig$Outbound;
}
export declare function updateProjectResourceConfigToJSON(updateProjectResourceConfig: UpdateProjectResourceConfig): string;
export declare function updateProjectResourceConfigFromJSON(jsonString: string): SafeParseResult<UpdateProjectResourceConfig, SDKValidationError>;
/** @internal */
export declare const UpdateProjectIssuerMode$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectIssuerMode>;
/** @internal */
export declare const UpdateProjectIssuerMode$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectIssuerMode>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectIssuerMode$ {
    /** @deprecated use `UpdateProjectIssuerMode$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Team: "team";
        readonly Global: "global";
    }>;
    /** @deprecated use `UpdateProjectIssuerMode$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Team: "team";
        readonly Global: "global";
    }>;
}
/** @internal */
export declare const UpdateProjectOidcTokenConfig$inboundSchema: z.ZodType<UpdateProjectOidcTokenConfig, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectOidcTokenConfig$Outbound = {
    enabled: boolean;
    issuerMode: string;
};
/** @internal */
export declare const UpdateProjectOidcTokenConfig$outboundSchema: z.ZodType<UpdateProjectOidcTokenConfig$Outbound, z.ZodTypeDef, UpdateProjectOidcTokenConfig>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectOidcTokenConfig$ {
    /** @deprecated use `UpdateProjectOidcTokenConfig$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectOidcTokenConfig, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectOidcTokenConfig$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectOidcTokenConfig$Outbound, z.ZodTypeDef, UpdateProjectOidcTokenConfig>;
    /** @deprecated use `UpdateProjectOidcTokenConfig$Outbound` instead. */
    type Outbound = UpdateProjectOidcTokenConfig$Outbound;
}
export declare function updateProjectOidcTokenConfigToJSON(updateProjectOidcTokenConfig: UpdateProjectOidcTokenConfig): string;
export declare function updateProjectOidcTokenConfigFromJSON(jsonString: string): SafeParseResult<UpdateProjectOidcTokenConfig, SDKValidationError>;
/** @internal */
export declare const UpdateProjectDeploymentType$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectDeploymentType>;
/** @internal */
export declare const UpdateProjectDeploymentType$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectDeploymentType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectDeploymentType$ {
    /** @deprecated use `UpdateProjectDeploymentType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly All: "all";
        readonly Preview: "preview";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
    /** @deprecated use `UpdateProjectDeploymentType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly All: "all";
        readonly Preview: "preview";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
}
/** @internal */
export declare const UpdateProjectPasswordProtection$inboundSchema: z.ZodType<UpdateProjectPasswordProtection, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectPasswordProtection$Outbound = {
    deploymentType: string;
    password?: string | null | undefined;
};
/** @internal */
export declare const UpdateProjectPasswordProtection$outboundSchema: z.ZodType<UpdateProjectPasswordProtection$Outbound, z.ZodTypeDef, UpdateProjectPasswordProtection>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectPasswordProtection$ {
    /** @deprecated use `UpdateProjectPasswordProtection$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectPasswordProtection, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectPasswordProtection$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectPasswordProtection$Outbound, z.ZodTypeDef, UpdateProjectPasswordProtection>;
    /** @deprecated use `UpdateProjectPasswordProtection$Outbound` instead. */
    type Outbound = UpdateProjectPasswordProtection$Outbound;
}
export declare function updateProjectPasswordProtectionToJSON(updateProjectPasswordProtection: UpdateProjectPasswordProtection): string;
export declare function updateProjectPasswordProtectionFromJSON(jsonString: string): SafeParseResult<UpdateProjectPasswordProtection, SDKValidationError>;
/** @internal */
export declare const UpdateProjectProjectsDeploymentType$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsDeploymentType>;
/** @internal */
export declare const UpdateProjectProjectsDeploymentType$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsDeploymentType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsDeploymentType$ {
    /** @deprecated use `UpdateProjectProjectsDeploymentType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly All: "all";
        readonly Preview: "preview";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
    /** @deprecated use `UpdateProjectProjectsDeploymentType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly All: "all";
        readonly Preview: "preview";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
}
/** @internal */
export declare const UpdateProjectSsoProtection$inboundSchema: z.ZodType<UpdateProjectSsoProtection, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectSsoProtection$Outbound = {
    deploymentType: string;
};
/** @internal */
export declare const UpdateProjectSsoProtection$outboundSchema: z.ZodType<UpdateProjectSsoProtection$Outbound, z.ZodTypeDef, UpdateProjectSsoProtection>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectSsoProtection$ {
    /** @deprecated use `UpdateProjectSsoProtection$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectSsoProtection, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectSsoProtection$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectSsoProtection$Outbound, z.ZodTypeDef, UpdateProjectSsoProtection>;
    /** @deprecated use `UpdateProjectSsoProtection$Outbound` instead. */
    type Outbound = UpdateProjectSsoProtection$Outbound;
}
export declare function updateProjectSsoProtectionToJSON(updateProjectSsoProtection: UpdateProjectSsoProtection): string;
export declare function updateProjectSsoProtectionFromJSON(jsonString: string): SafeParseResult<UpdateProjectSsoProtection, SDKValidationError>;
/** @internal */
export declare const UpdateProjectProjectsRequestDeploymentType$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsRequestDeploymentType>;
/** @internal */
export declare const UpdateProjectProjectsRequestDeploymentType$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsRequestDeploymentType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsRequestDeploymentType$ {
    /** @deprecated use `UpdateProjectProjectsRequestDeploymentType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly All: "all";
        readonly Preview: "preview";
        readonly Production: "production";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
    /** @deprecated use `UpdateProjectProjectsRequestDeploymentType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly All: "all";
        readonly Preview: "preview";
        readonly Production: "production";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
}
/** @internal */
export declare const Addresses$inboundSchema: z.ZodType<Addresses, z.ZodTypeDef, unknown>;
/** @internal */
export type Addresses$Outbound = {
    value: string;
    note?: string | undefined;
};
/** @internal */
export declare const Addresses$outboundSchema: z.ZodType<Addresses$Outbound, z.ZodTypeDef, Addresses>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Addresses$ {
    /** @deprecated use `Addresses$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Addresses, z.ZodTypeDef, unknown>;
    /** @deprecated use `Addresses$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Addresses$Outbound, z.ZodTypeDef, Addresses>;
    /** @deprecated use `Addresses$Outbound` instead. */
    type Outbound = Addresses$Outbound;
}
export declare function addressesToJSON(addresses: Addresses): string;
export declare function addressesFromJSON(jsonString: string): SafeParseResult<Addresses, SDKValidationError>;
/** @internal */
export declare const ProtectionMode$inboundSchema: z.ZodNativeEnum<typeof ProtectionMode>;
/** @internal */
export declare const ProtectionMode$outboundSchema: z.ZodNativeEnum<typeof ProtectionMode>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ProtectionMode$ {
    /** @deprecated use `ProtectionMode$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Exclusive: "exclusive";
        readonly Additional: "additional";
    }>;
    /** @deprecated use `ProtectionMode$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Exclusive: "exclusive";
        readonly Additional: "additional";
    }>;
}
/** @internal */
export declare const UpdateProjectTrustedIps$inboundSchema: z.ZodType<UpdateProjectTrustedIps, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectTrustedIps$Outbound = {
    deploymentType: string;
    addresses: Array<Addresses$Outbound>;
    protectionMode: string;
};
/** @internal */
export declare const UpdateProjectTrustedIps$outboundSchema: z.ZodType<UpdateProjectTrustedIps$Outbound, z.ZodTypeDef, UpdateProjectTrustedIps>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectTrustedIps$ {
    /** @deprecated use `UpdateProjectTrustedIps$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectTrustedIps, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectTrustedIps$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectTrustedIps$Outbound, z.ZodTypeDef, UpdateProjectTrustedIps>;
    /** @deprecated use `UpdateProjectTrustedIps$Outbound` instead. */
    type Outbound = UpdateProjectTrustedIps$Outbound;
}
export declare function updateProjectTrustedIpsToJSON(updateProjectTrustedIps: UpdateProjectTrustedIps): string;
export declare function updateProjectTrustedIpsFromJSON(jsonString: string): SafeParseResult<UpdateProjectTrustedIps, SDKValidationError>;
/** @internal */
export declare const UpdateProjectPaths$inboundSchema: z.ZodType<UpdateProjectPaths, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectPaths$Outbound = {
    value: string;
};
/** @internal */
export declare const UpdateProjectPaths$outboundSchema: z.ZodType<UpdateProjectPaths$Outbound, z.ZodTypeDef, UpdateProjectPaths>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectPaths$ {
    /** @deprecated use `UpdateProjectPaths$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectPaths, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectPaths$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectPaths$Outbound, z.ZodTypeDef, UpdateProjectPaths>;
    /** @deprecated use `UpdateProjectPaths$Outbound` instead. */
    type Outbound = UpdateProjectPaths$Outbound;
}
export declare function updateProjectPathsToJSON(updateProjectPaths: UpdateProjectPaths): string;
export declare function updateProjectPathsFromJSON(jsonString: string): SafeParseResult<UpdateProjectPaths, SDKValidationError>;
/** @internal */
export declare const UpdateProjectOptionsAllowlist$inboundSchema: z.ZodType<UpdateProjectOptionsAllowlist, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectOptionsAllowlist$Outbound = {
    paths: Array<UpdateProjectPaths$Outbound>;
};
/** @internal */
export declare const UpdateProjectOptionsAllowlist$outboundSchema: z.ZodType<UpdateProjectOptionsAllowlist$Outbound, z.ZodTypeDef, UpdateProjectOptionsAllowlist>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectOptionsAllowlist$ {
    /** @deprecated use `UpdateProjectOptionsAllowlist$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectOptionsAllowlist, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectOptionsAllowlist$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectOptionsAllowlist$Outbound, z.ZodTypeDef, UpdateProjectOptionsAllowlist>;
    /** @deprecated use `UpdateProjectOptionsAllowlist$Outbound` instead. */
    type Outbound = UpdateProjectOptionsAllowlist$Outbound;
}
export declare function updateProjectOptionsAllowlistToJSON(updateProjectOptionsAllowlist: UpdateProjectOptionsAllowlist): string;
export declare function updateProjectOptionsAllowlistFromJSON(jsonString: string): SafeParseResult<UpdateProjectOptionsAllowlist, SDKValidationError>;
/** @internal */
export declare const ConnectConfigurations1$inboundSchema: z.ZodType<ConnectConfigurations1, z.ZodTypeDef, unknown>;
/** @internal */
export type ConnectConfigurations1$Outbound = {
    envId: string;
    connectConfigurationId: string;
    passive: boolean;
    buildsEnabled: boolean;
};
/** @internal */
export declare const ConnectConfigurations1$outboundSchema: z.ZodType<ConnectConfigurations1$Outbound, z.ZodTypeDef, ConnectConfigurations1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ConnectConfigurations1$ {
    /** @deprecated use `ConnectConfigurations1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ConnectConfigurations1, z.ZodTypeDef, unknown>;
    /** @deprecated use `ConnectConfigurations1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ConnectConfigurations1$Outbound, z.ZodTypeDef, ConnectConfigurations1>;
    /** @deprecated use `ConnectConfigurations1$Outbound` instead. */
    type Outbound = ConnectConfigurations1$Outbound;
}
export declare function connectConfigurations1ToJSON(connectConfigurations1: ConnectConfigurations1): string;
export declare function connectConfigurations1FromJSON(jsonString: string): SafeParseResult<ConnectConfigurations1, SDKValidationError>;
/** @internal */
export declare const ConnectConfigurations$inboundSchema: z.ZodType<ConnectConfigurations, z.ZodTypeDef, unknown>;
/** @internal */
export type ConnectConfigurations$Outbound = ConnectConfigurations1$Outbound;
/** @internal */
export declare const ConnectConfigurations$outboundSchema: z.ZodType<ConnectConfigurations$Outbound, z.ZodTypeDef, ConnectConfigurations>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ConnectConfigurations$ {
    /** @deprecated use `ConnectConfigurations$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ConnectConfigurations1, z.ZodTypeDef, unknown>;
    /** @deprecated use `ConnectConfigurations$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ConnectConfigurations1$Outbound, z.ZodTypeDef, ConnectConfigurations1>;
    /** @deprecated use `ConnectConfigurations$Outbound` instead. */
    type Outbound = ConnectConfigurations$Outbound;
}
export declare function connectConfigurationsToJSON(connectConfigurations: ConnectConfigurations): string;
export declare function connectConfigurationsFromJSON(jsonString: string): SafeParseResult<ConnectConfigurations, SDKValidationError>;
/** @internal */
export declare const UpdateProjectRequestBody$inboundSchema: z.ZodType<UpdateProjectRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectRequestBody$Outbound = {
    autoExposeSystemEnvs?: boolean | undefined;
    autoAssignCustomDomains?: boolean | undefined;
    autoAssignCustomDomainsUpdatedBy?: string | undefined;
    buildCommand?: string | null | undefined;
    commandForIgnoringBuildStep?: string | null | undefined;
    customerSupportCodeVisibility?: boolean | undefined;
    devCommand?: string | null | undefined;
    directoryListing?: boolean | undefined;
    framework?: string | null | undefined;
    gitForkProtection?: boolean | undefined;
    gitLFS?: boolean | undefined;
    installCommand?: string | null | undefined;
    name?: string | undefined;
    nodeVersion?: string | undefined;
    outputDirectory?: string | null | undefined;
    previewDeploymentsDisabled?: boolean | null | undefined;
    publicSource?: boolean | null | undefined;
    resourceConfig?: UpdateProjectResourceConfig$Outbound | undefined;
    rootDirectory?: string | null | undefined;
    serverlessFunctionRegion?: string | null | undefined;
    serverlessFunctionZeroConfigFailover?: boolean | undefined;
    skewProtectionBoundaryAt?: number | undefined;
    skewProtectionMaxAge?: number | undefined;
    skipGitConnectDuringLink?: boolean | undefined;
    sourceFilesOutsideRootDirectory?: boolean | undefined;
    enablePreviewFeedback?: boolean | null | undefined;
    enableProductionFeedback?: boolean | null | undefined;
    enableAffectedProjectsDeployments?: boolean | undefined;
    oidcTokenConfig?: UpdateProjectOidcTokenConfig$Outbound | undefined;
    passwordProtection?: UpdateProjectPasswordProtection$Outbound | null | undefined;
    ssoProtection?: UpdateProjectSsoProtection$Outbound | null | undefined;
    trustedIps?: UpdateProjectTrustedIps$Outbound | null | undefined;
    optionsAllowlist?: UpdateProjectOptionsAllowlist$Outbound | null | undefined;
    connectConfigurations?: Array<ConnectConfigurations1$Outbound> | null | undefined;
};
/** @internal */
export declare const UpdateProjectRequestBody$outboundSchema: z.ZodType<UpdateProjectRequestBody$Outbound, z.ZodTypeDef, UpdateProjectRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectRequestBody$ {
    /** @deprecated use `UpdateProjectRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectRequestBody$Outbound, z.ZodTypeDef, UpdateProjectRequestBody>;
    /** @deprecated use `UpdateProjectRequestBody$Outbound` instead. */
    type Outbound = UpdateProjectRequestBody$Outbound;
}
export declare function updateProjectRequestBodyToJSON(updateProjectRequestBody: UpdateProjectRequestBody): string;
export declare function updateProjectRequestBodyFromJSON(jsonString: string): SafeParseResult<UpdateProjectRequestBody, SDKValidationError>;
/** @internal */
export declare const UpdateProjectRequest$inboundSchema: z.ZodType<UpdateProjectRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectRequest$Outbound = {
    idOrName: string;
    teamId?: string | undefined;
    slug?: string | undefined;
    RequestBody: UpdateProjectRequestBody$Outbound;
};
/** @internal */
export declare const UpdateProjectRequest$outboundSchema: z.ZodType<UpdateProjectRequest$Outbound, z.ZodTypeDef, UpdateProjectRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectRequest$ {
    /** @deprecated use `UpdateProjectRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectRequest$Outbound, z.ZodTypeDef, UpdateProjectRequest>;
    /** @deprecated use `UpdateProjectRequest$Outbound` instead. */
    type Outbound = UpdateProjectRequest$Outbound;
}
export declare function updateProjectRequestToJSON(updateProjectRequest: UpdateProjectRequest): string;
export declare function updateProjectRequestFromJSON(jsonString: string): SafeParseResult<UpdateProjectRequest, SDKValidationError>;
/** @internal */
export declare const UpdateProjectAnalytics$inboundSchema: z.ZodType<UpdateProjectAnalytics, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectAnalytics$Outbound = {
    id: string;
    canceledAt?: number | null | undefined;
    disabledAt: number;
    enabledAt: number;
    paidAt?: number | undefined;
    sampleRatePercent?: number | null | undefined;
    spendLimitInDollars?: number | null | undefined;
};
/** @internal */
export declare const UpdateProjectAnalytics$outboundSchema: z.ZodType<UpdateProjectAnalytics$Outbound, z.ZodTypeDef, UpdateProjectAnalytics>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectAnalytics$ {
    /** @deprecated use `UpdateProjectAnalytics$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectAnalytics, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectAnalytics$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectAnalytics$Outbound, z.ZodTypeDef, UpdateProjectAnalytics>;
    /** @deprecated use `UpdateProjectAnalytics$Outbound` instead. */
    type Outbound = UpdateProjectAnalytics$Outbound;
}
export declare function updateProjectAnalyticsToJSON(updateProjectAnalytics: UpdateProjectAnalytics): string;
export declare function updateProjectAnalyticsFromJSON(jsonString: string): SafeParseResult<UpdateProjectAnalytics, SDKValidationError>;
/** @internal */
export declare const UpdateProjectSpeedInsights$inboundSchema: z.ZodType<UpdateProjectSpeedInsights, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectSpeedInsights$Outbound = {
    id: string;
    enabledAt?: number | undefined;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    hasData?: boolean | undefined;
    paidAt?: number | undefined;
};
/** @internal */
export declare const UpdateProjectSpeedInsights$outboundSchema: z.ZodType<UpdateProjectSpeedInsights$Outbound, z.ZodTypeDef, UpdateProjectSpeedInsights>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectSpeedInsights$ {
    /** @deprecated use `UpdateProjectSpeedInsights$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectSpeedInsights, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectSpeedInsights$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectSpeedInsights$Outbound, z.ZodTypeDef, UpdateProjectSpeedInsights>;
    /** @deprecated use `UpdateProjectSpeedInsights$Outbound` instead. */
    type Outbound = UpdateProjectSpeedInsights$Outbound;
}
export declare function updateProjectSpeedInsightsToJSON(updateProjectSpeedInsights: UpdateProjectSpeedInsights): string;
export declare function updateProjectSpeedInsightsFromJSON(jsonString: string): SafeParseResult<UpdateProjectSpeedInsights, SDKValidationError>;
/** @internal */
export declare const UpdateProjectEnvId2$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectEnvId2>;
/** @internal */
export declare const UpdateProjectEnvId2$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectEnvId2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectEnvId2$ {
    /** @deprecated use `UpdateProjectEnvId2$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Preview: "preview";
        readonly Production: "production";
    }>;
    /** @deprecated use `UpdateProjectEnvId2$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Preview: "preview";
        readonly Production: "production";
    }>;
}
/** @internal */
export declare const UpdateProjectEnvId$inboundSchema: z.ZodType<UpdateProjectEnvId, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectEnvId$Outbound = string | string;
/** @internal */
export declare const UpdateProjectEnvId$outboundSchema: z.ZodType<UpdateProjectEnvId$Outbound, z.ZodTypeDef, UpdateProjectEnvId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectEnvId$ {
    /** @deprecated use `UpdateProjectEnvId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<string, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectEnvId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<string, z.ZodTypeDef, string>;
    /** @deprecated use `UpdateProjectEnvId$Outbound` instead. */
    type Outbound = UpdateProjectEnvId$Outbound;
}
export declare function updateProjectEnvIdToJSON(updateProjectEnvId: UpdateProjectEnvId): string;
export declare function updateProjectEnvIdFromJSON(jsonString: string): SafeParseResult<UpdateProjectEnvId, SDKValidationError>;
/** @internal */
export declare const UpdateProjectAws$inboundSchema: z.ZodType<UpdateProjectAws, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectAws$Outbound = {
    subnetIds: Array<string>;
    securityGroupId: string;
};
/** @internal */
export declare const UpdateProjectAws$outboundSchema: z.ZodType<UpdateProjectAws$Outbound, z.ZodTypeDef, UpdateProjectAws>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectAws$ {
    /** @deprecated use `UpdateProjectAws$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectAws, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectAws$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectAws$Outbound, z.ZodTypeDef, UpdateProjectAws>;
    /** @deprecated use `UpdateProjectAws$Outbound` instead. */
    type Outbound = UpdateProjectAws$Outbound;
}
export declare function updateProjectAwsToJSON(updateProjectAws: UpdateProjectAws): string;
export declare function updateProjectAwsFromJSON(jsonString: string): SafeParseResult<UpdateProjectAws, SDKValidationError>;
/** @internal */
export declare const UpdateProjectConnectConfigurations$inboundSchema: z.ZodType<UpdateProjectConnectConfigurations, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectConnectConfigurations$Outbound = {
    envId: string | string;
    connectConfigurationId: string;
    dc?: string | undefined;
    passive: boolean;
    buildsEnabled: boolean;
    aws?: UpdateProjectAws$Outbound | undefined;
    createdAt: number;
    updatedAt: number;
};
/** @internal */
export declare const UpdateProjectConnectConfigurations$outboundSchema: z.ZodType<UpdateProjectConnectConfigurations$Outbound, z.ZodTypeDef, UpdateProjectConnectConfigurations>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectConnectConfigurations$ {
    /** @deprecated use `UpdateProjectConnectConfigurations$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectConnectConfigurations, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectConnectConfigurations$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectConnectConfigurations$Outbound, z.ZodTypeDef, UpdateProjectConnectConfigurations>;
    /** @deprecated use `UpdateProjectConnectConfigurations$Outbound` instead. */
    type Outbound = UpdateProjectConnectConfigurations$Outbound;
}
export declare function updateProjectConnectConfigurationsToJSON(updateProjectConnectConfigurations: UpdateProjectConnectConfigurations): string;
export declare function updateProjectConnectConfigurationsFromJSON(jsonString: string): SafeParseResult<UpdateProjectConnectConfigurations, SDKValidationError>;
/** @internal */
export declare const UpdateProjectDefinitions$inboundSchema: z.ZodType<UpdateProjectDefinitions, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectDefinitions$Outbound = {
    host: string;
    path: string;
    schedule: string;
};
/** @internal */
export declare const UpdateProjectDefinitions$outboundSchema: z.ZodType<UpdateProjectDefinitions$Outbound, z.ZodTypeDef, UpdateProjectDefinitions>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectDefinitions$ {
    /** @deprecated use `UpdateProjectDefinitions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectDefinitions, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectDefinitions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectDefinitions$Outbound, z.ZodTypeDef, UpdateProjectDefinitions>;
    /** @deprecated use `UpdateProjectDefinitions$Outbound` instead. */
    type Outbound = UpdateProjectDefinitions$Outbound;
}
export declare function updateProjectDefinitionsToJSON(updateProjectDefinitions: UpdateProjectDefinitions): string;
export declare function updateProjectDefinitionsFromJSON(jsonString: string): SafeParseResult<UpdateProjectDefinitions, SDKValidationError>;
/** @internal */
export declare const UpdateProjectCrons$inboundSchema: z.ZodType<UpdateProjectCrons, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectCrons$Outbound = {
    enabledAt: number;
    disabledAt: number | null;
    updatedAt: number;
    deploymentId: string | null;
    definitions: Array<UpdateProjectDefinitions$Outbound>;
};
/** @internal */
export declare const UpdateProjectCrons$outboundSchema: z.ZodType<UpdateProjectCrons$Outbound, z.ZodTypeDef, UpdateProjectCrons>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectCrons$ {
    /** @deprecated use `UpdateProjectCrons$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectCrons, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectCrons$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectCrons$Outbound, z.ZodTypeDef, UpdateProjectCrons>;
    /** @deprecated use `UpdateProjectCrons$Outbound` instead. */
    type Outbound = UpdateProjectCrons$Outbound;
}
export declare function updateProjectCronsToJSON(updateProjectCrons: UpdateProjectCrons): string;
export declare function updateProjectCronsFromJSON(jsonString: string): SafeParseResult<UpdateProjectCrons, SDKValidationError>;
/** @internal */
export declare const UpdateProjectDataCache$inboundSchema: z.ZodType<UpdateProjectDataCache, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectDataCache$Outbound = {
    userDisabled: boolean;
    storageSizeBytes?: number | null | undefined;
    unlimited?: boolean | undefined;
};
/** @internal */
export declare const UpdateProjectDataCache$outboundSchema: z.ZodType<UpdateProjectDataCache$Outbound, z.ZodTypeDef, UpdateProjectDataCache>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectDataCache$ {
    /** @deprecated use `UpdateProjectDataCache$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectDataCache, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectDataCache$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectDataCache$Outbound, z.ZodTypeDef, UpdateProjectDataCache>;
    /** @deprecated use `UpdateProjectDataCache$Outbound` instead. */
    type Outbound = UpdateProjectDataCache$Outbound;
}
export declare function updateProjectDataCacheToJSON(updateProjectDataCache: UpdateProjectDataCache): string;
export declare function updateProjectDataCacheFromJSON(jsonString: string): SafeParseResult<UpdateProjectDataCache, SDKValidationError>;
/** @internal */
export declare const UpdateProjectDeploymentExpiration$inboundSchema: z.ZodType<UpdateProjectDeploymentExpiration, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectDeploymentExpiration$Outbound = {
    expirationDays?: number | undefined;
    expirationDaysProduction?: number | undefined;
    expirationDaysCanceled?: number | undefined;
    expirationDaysErrored?: number | undefined;
    deploymentsToKeep?: number | undefined;
};
/** @internal */
export declare const UpdateProjectDeploymentExpiration$outboundSchema: z.ZodType<UpdateProjectDeploymentExpiration$Outbound, z.ZodTypeDef, UpdateProjectDeploymentExpiration>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectDeploymentExpiration$ {
    /** @deprecated use `UpdateProjectDeploymentExpiration$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectDeploymentExpiration, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectDeploymentExpiration$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectDeploymentExpiration$Outbound, z.ZodTypeDef, UpdateProjectDeploymentExpiration>;
    /** @deprecated use `UpdateProjectDeploymentExpiration$Outbound` instead. */
    type Outbound = UpdateProjectDeploymentExpiration$Outbound;
}
export declare function updateProjectDeploymentExpirationToJSON(updateProjectDeploymentExpiration: UpdateProjectDeploymentExpiration): string;
export declare function updateProjectDeploymentExpirationFromJSON(jsonString: string): SafeParseResult<UpdateProjectDeploymentExpiration, SDKValidationError>;
/** @internal */
export declare const UpdateProjectTarget2$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectTarget2>;
/** @internal */
export declare const UpdateProjectTarget2$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectTarget2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectTarget2$ {
    /** @deprecated use `UpdateProjectTarget2$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Production: "production";
        readonly Preview: "preview";
        readonly Development: "development";
    }>;
    /** @deprecated use `UpdateProjectTarget2$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Production: "production";
        readonly Preview: "preview";
        readonly Development: "development";
    }>;
}
/** @internal */
export declare const UpdateProjectTarget$inboundSchema: z.ZodType<UpdateProjectTarget, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectTarget$Outbound = Array<string> | string;
/** @internal */
export declare const UpdateProjectTarget$outboundSchema: z.ZodType<UpdateProjectTarget$Outbound, z.ZodTypeDef, UpdateProjectTarget>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectTarget$ {
    /** @deprecated use `UpdateProjectTarget$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectTarget, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectTarget$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectTarget$Outbound, z.ZodTypeDef, UpdateProjectTarget>;
    /** @deprecated use `UpdateProjectTarget$Outbound` instead. */
    type Outbound = UpdateProjectTarget$Outbound;
}
export declare function updateProjectTargetToJSON(updateProjectTarget: UpdateProjectTarget): string;
export declare function updateProjectTargetFromJSON(jsonString: string): SafeParseResult<UpdateProjectTarget, SDKValidationError>;
/** @internal */
export declare const UpdateProjectType$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectType>;
/** @internal */
export declare const UpdateProjectType$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectType$ {
    /** @deprecated use `UpdateProjectType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly System: "system";
        readonly Encrypted: "encrypted";
        readonly Plain: "plain";
        readonly Sensitive: "sensitive";
        readonly Secret: "secret";
    }>;
    /** @deprecated use `UpdateProjectType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly System: "system";
        readonly Encrypted: "encrypted";
        readonly Plain: "plain";
        readonly Sensitive: "sensitive";
        readonly Secret: "secret";
    }>;
}
/** @internal */
export declare const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type>;
/** @internal */
export declare const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$ {
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly FlagsConnectionString: "flags-connection-string";
    }>;
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly FlagsConnectionString: "flags-connection-string";
    }>;
}
/** @internal */
export declare const UpdateProjectContentHint15$inboundSchema: z.ZodType<UpdateProjectContentHint15, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectContentHint15$Outbound = {
    type: string;
    projectId: string;
};
/** @internal */
export declare const UpdateProjectContentHint15$outboundSchema: z.ZodType<UpdateProjectContentHint15$Outbound, z.ZodTypeDef, UpdateProjectContentHint15>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectContentHint15$ {
    /** @deprecated use `UpdateProjectContentHint15$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectContentHint15, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectContentHint15$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectContentHint15$Outbound, z.ZodTypeDef, UpdateProjectContentHint15>;
    /** @deprecated use `UpdateProjectContentHint15$Outbound` instead. */
    type Outbound = UpdateProjectContentHint15$Outbound;
}
export declare function updateProjectContentHint15ToJSON(updateProjectContentHint15: UpdateProjectContentHint15): string;
export declare function updateProjectContentHint15FromJSON(jsonString: string): SafeParseResult<UpdateProjectContentHint15, SDKValidationError>;
/** @internal */
export declare const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type>;
/** @internal */
export declare const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$ {
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly IntegrationStoreSecret: "integration-store-secret";
    }>;
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly IntegrationStoreSecret: "integration-store-secret";
    }>;
}
/** @internal */
export declare const UpdateProjectContentHint14$inboundSchema: z.ZodType<UpdateProjectContentHint14, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectContentHint14$Outbound = {
    type: string;
    storeId: string;
    integrationId: string;
    integrationProductId: string;
    integrationConfigurationId: string;
};
/** @internal */
export declare const UpdateProjectContentHint14$outboundSchema: z.ZodType<UpdateProjectContentHint14$Outbound, z.ZodTypeDef, UpdateProjectContentHint14>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectContentHint14$ {
    /** @deprecated use `UpdateProjectContentHint14$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectContentHint14, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectContentHint14$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectContentHint14$Outbound, z.ZodTypeDef, UpdateProjectContentHint14>;
    /** @deprecated use `UpdateProjectContentHint14$Outbound` instead. */
    type Outbound = UpdateProjectContentHint14$Outbound;
}
export declare function updateProjectContentHint14ToJSON(updateProjectContentHint14: UpdateProjectContentHint14): string;
export declare function updateProjectContentHint14FromJSON(jsonString: string): SafeParseResult<UpdateProjectContentHint14, SDKValidationError>;
/** @internal */
export declare const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type>;
/** @internal */
export declare const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$ {
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly PostgresUrlNoSsl: "postgres-url-no-ssl";
    }>;
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly PostgresUrlNoSsl: "postgres-url-no-ssl";
    }>;
}
/** @internal */
export declare const UpdateProjectContentHint13$inboundSchema: z.ZodType<UpdateProjectContentHint13, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectContentHint13$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const UpdateProjectContentHint13$outboundSchema: z.ZodType<UpdateProjectContentHint13$Outbound, z.ZodTypeDef, UpdateProjectContentHint13>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectContentHint13$ {
    /** @deprecated use `UpdateProjectContentHint13$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectContentHint13, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectContentHint13$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectContentHint13$Outbound, z.ZodTypeDef, UpdateProjectContentHint13>;
    /** @deprecated use `UpdateProjectContentHint13$Outbound` instead. */
    type Outbound = UpdateProjectContentHint13$Outbound;
}
export declare function updateProjectContentHint13ToJSON(updateProjectContentHint13: UpdateProjectContentHint13): string;
export declare function updateProjectContentHint13FromJSON(jsonString: string): SafeParseResult<UpdateProjectContentHint13, SDKValidationError>;
/** @internal */
export declare const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type>;
/** @internal */
export declare const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$ {
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly PostgresDatabase: "postgres-database";
    }>;
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly PostgresDatabase: "postgres-database";
    }>;
}
/** @internal */
export declare const UpdateProjectContentHint12$inboundSchema: z.ZodType<UpdateProjectContentHint12, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectContentHint12$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const UpdateProjectContentHint12$outboundSchema: z.ZodType<UpdateProjectContentHint12$Outbound, z.ZodTypeDef, UpdateProjectContentHint12>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectContentHint12$ {
    /** @deprecated use `UpdateProjectContentHint12$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectContentHint12, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectContentHint12$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectContentHint12$Outbound, z.ZodTypeDef, UpdateProjectContentHint12>;
    /** @deprecated use `UpdateProjectContentHint12$Outbound` instead. */
    type Outbound = UpdateProjectContentHint12$Outbound;
}
export declare function updateProjectContentHint12ToJSON(updateProjectContentHint12: UpdateProjectContentHint12): string;
export declare function updateProjectContentHint12FromJSON(jsonString: string): SafeParseResult<UpdateProjectContentHint12, SDKValidationError>;
/** @internal */
export declare const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type>;
/** @internal */
export declare const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$ {
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly PostgresPassword: "postgres-password";
    }>;
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly PostgresPassword: "postgres-password";
    }>;
}
/** @internal */
export declare const UpdateProjectContentHint11$inboundSchema: z.ZodType<UpdateProjectContentHint11, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectContentHint11$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const UpdateProjectContentHint11$outboundSchema: z.ZodType<UpdateProjectContentHint11$Outbound, z.ZodTypeDef, UpdateProjectContentHint11>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectContentHint11$ {
    /** @deprecated use `UpdateProjectContentHint11$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectContentHint11, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectContentHint11$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectContentHint11$Outbound, z.ZodTypeDef, UpdateProjectContentHint11>;
    /** @deprecated use `UpdateProjectContentHint11$Outbound` instead. */
    type Outbound = UpdateProjectContentHint11$Outbound;
}
export declare function updateProjectContentHint11ToJSON(updateProjectContentHint11: UpdateProjectContentHint11): string;
export declare function updateProjectContentHint11FromJSON(jsonString: string): SafeParseResult<UpdateProjectContentHint11, SDKValidationError>;
/** @internal */
export declare const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type>;
/** @internal */
export declare const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$ {
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly PostgresHost: "postgres-host";
    }>;
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly PostgresHost: "postgres-host";
    }>;
}
/** @internal */
export declare const UpdateProjectContentHint10$inboundSchema: z.ZodType<UpdateProjectContentHint10, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectContentHint10$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const UpdateProjectContentHint10$outboundSchema: z.ZodType<UpdateProjectContentHint10$Outbound, z.ZodTypeDef, UpdateProjectContentHint10>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectContentHint10$ {
    /** @deprecated use `UpdateProjectContentHint10$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectContentHint10, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectContentHint10$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectContentHint10$Outbound, z.ZodTypeDef, UpdateProjectContentHint10>;
    /** @deprecated use `UpdateProjectContentHint10$Outbound` instead. */
    type Outbound = UpdateProjectContentHint10$Outbound;
}
export declare function updateProjectContentHint10ToJSON(updateProjectContentHint10: UpdateProjectContentHint10): string;
export declare function updateProjectContentHint10FromJSON(jsonString: string): SafeParseResult<UpdateProjectContentHint10, SDKValidationError>;
/** @internal */
export declare const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type>;
/** @internal */
export declare const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$ {
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly PostgresUser: "postgres-user";
    }>;
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly PostgresUser: "postgres-user";
    }>;
}
/** @internal */
export declare const UpdateProjectContentHint9$inboundSchema: z.ZodType<UpdateProjectContentHint9, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectContentHint9$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const UpdateProjectContentHint9$outboundSchema: z.ZodType<UpdateProjectContentHint9$Outbound, z.ZodTypeDef, UpdateProjectContentHint9>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectContentHint9$ {
    /** @deprecated use `UpdateProjectContentHint9$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectContentHint9, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectContentHint9$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectContentHint9$Outbound, z.ZodTypeDef, UpdateProjectContentHint9>;
    /** @deprecated use `UpdateProjectContentHint9$Outbound` instead. */
    type Outbound = UpdateProjectContentHint9$Outbound;
}
export declare function updateProjectContentHint9ToJSON(updateProjectContentHint9: UpdateProjectContentHint9): string;
export declare function updateProjectContentHint9FromJSON(jsonString: string): SafeParseResult<UpdateProjectContentHint9, SDKValidationError>;
/** @internal */
export declare const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type>;
/** @internal */
export declare const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$ {
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly PostgresPrismaUrl: "postgres-prisma-url";
    }>;
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly PostgresPrismaUrl: "postgres-prisma-url";
    }>;
}
/** @internal */
export declare const UpdateProjectContentHint8$inboundSchema: z.ZodType<UpdateProjectContentHint8, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectContentHint8$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const UpdateProjectContentHint8$outboundSchema: z.ZodType<UpdateProjectContentHint8$Outbound, z.ZodTypeDef, UpdateProjectContentHint8>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectContentHint8$ {
    /** @deprecated use `UpdateProjectContentHint8$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectContentHint8, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectContentHint8$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectContentHint8$Outbound, z.ZodTypeDef, UpdateProjectContentHint8>;
    /** @deprecated use `UpdateProjectContentHint8$Outbound` instead. */
    type Outbound = UpdateProjectContentHint8$Outbound;
}
export declare function updateProjectContentHint8ToJSON(updateProjectContentHint8: UpdateProjectContentHint8): string;
export declare function updateProjectContentHint8FromJSON(jsonString: string): SafeParseResult<UpdateProjectContentHint8, SDKValidationError>;
/** @internal */
export declare const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType>;
/** @internal */
export declare const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$ {
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly PostgresUrlNonPooling: "postgres-url-non-pooling";
    }>;
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly PostgresUrlNonPooling: "postgres-url-non-pooling";
    }>;
}
/** @internal */
export declare const UpdateProjectContentHint7$inboundSchema: z.ZodType<UpdateProjectContentHint7, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectContentHint7$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const UpdateProjectContentHint7$outboundSchema: z.ZodType<UpdateProjectContentHint7$Outbound, z.ZodTypeDef, UpdateProjectContentHint7>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectContentHint7$ {
    /** @deprecated use `UpdateProjectContentHint7$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectContentHint7, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectContentHint7$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectContentHint7$Outbound, z.ZodTypeDef, UpdateProjectContentHint7>;
    /** @deprecated use `UpdateProjectContentHint7$Outbound` instead. */
    type Outbound = UpdateProjectContentHint7$Outbound;
}
export declare function updateProjectContentHint7ToJSON(updateProjectContentHint7: UpdateProjectContentHint7): string;
export declare function updateProjectContentHint7FromJSON(jsonString: string): SafeParseResult<UpdateProjectContentHint7, SDKValidationError>;
/** @internal */
export declare const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType>;
/** @internal */
export declare const UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$ {
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly PostgresUrl: "postgres-url";
    }>;
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly PostgresUrl: "postgres-url";
    }>;
}
/** @internal */
export declare const UpdateProjectContentHint6$inboundSchema: z.ZodType<UpdateProjectContentHint6, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectContentHint6$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const UpdateProjectContentHint6$outboundSchema: z.ZodType<UpdateProjectContentHint6$Outbound, z.ZodTypeDef, UpdateProjectContentHint6>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectContentHint6$ {
    /** @deprecated use `UpdateProjectContentHint6$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectContentHint6, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectContentHint6$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectContentHint6$Outbound, z.ZodTypeDef, UpdateProjectContentHint6>;
    /** @deprecated use `UpdateProjectContentHint6$Outbound` instead. */
    type Outbound = UpdateProjectContentHint6$Outbound;
}
export declare function updateProjectContentHint6ToJSON(updateProjectContentHint6: UpdateProjectContentHint6): string;
export declare function updateProjectContentHint6FromJSON(jsonString: string): SafeParseResult<UpdateProjectContentHint6, SDKValidationError>;
/** @internal */
export declare const UpdateProjectContentHintProjectsResponse200ApplicationJSONType$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectContentHintProjectsResponse200ApplicationJSONType>;
/** @internal */
export declare const UpdateProjectContentHintProjectsResponse200ApplicationJSONType$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectContentHintProjectsResponse200ApplicationJSONType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectContentHintProjectsResponse200ApplicationJSONType$ {
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly BlobReadWriteToken: "blob-read-write-token";
    }>;
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200ApplicationJSONType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly BlobReadWriteToken: "blob-read-write-token";
    }>;
}
/** @internal */
export declare const UpdateProjectContentHint5$inboundSchema: z.ZodType<UpdateProjectContentHint5, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectContentHint5$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const UpdateProjectContentHint5$outboundSchema: z.ZodType<UpdateProjectContentHint5$Outbound, z.ZodTypeDef, UpdateProjectContentHint5>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectContentHint5$ {
    /** @deprecated use `UpdateProjectContentHint5$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectContentHint5, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectContentHint5$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectContentHint5$Outbound, z.ZodTypeDef, UpdateProjectContentHint5>;
    /** @deprecated use `UpdateProjectContentHint5$Outbound` instead. */
    type Outbound = UpdateProjectContentHint5$Outbound;
}
export declare function updateProjectContentHint5ToJSON(updateProjectContentHint5: UpdateProjectContentHint5): string;
export declare function updateProjectContentHint5FromJSON(jsonString: string): SafeParseResult<UpdateProjectContentHint5, SDKValidationError>;
/** @internal */
export declare const UpdateProjectContentHintProjectsResponse200Type$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectContentHintProjectsResponse200Type>;
/** @internal */
export declare const UpdateProjectContentHintProjectsResponse200Type$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectContentHintProjectsResponse200Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectContentHintProjectsResponse200Type$ {
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly RedisRestApiReadOnlyToken: "redis-rest-api-read-only-token";
    }>;
    /** @deprecated use `UpdateProjectContentHintProjectsResponse200Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly RedisRestApiReadOnlyToken: "redis-rest-api-read-only-token";
    }>;
}
/** @internal */
export declare const UpdateProjectContentHint4$inboundSchema: z.ZodType<UpdateProjectContentHint4, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectContentHint4$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const UpdateProjectContentHint4$outboundSchema: z.ZodType<UpdateProjectContentHint4$Outbound, z.ZodTypeDef, UpdateProjectContentHint4>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectContentHint4$ {
    /** @deprecated use `UpdateProjectContentHint4$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectContentHint4, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectContentHint4$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectContentHint4$Outbound, z.ZodTypeDef, UpdateProjectContentHint4>;
    /** @deprecated use `UpdateProjectContentHint4$Outbound` instead. */
    type Outbound = UpdateProjectContentHint4$Outbound;
}
export declare function updateProjectContentHint4ToJSON(updateProjectContentHint4: UpdateProjectContentHint4): string;
export declare function updateProjectContentHint4FromJSON(jsonString: string): SafeParseResult<UpdateProjectContentHint4, SDKValidationError>;
/** @internal */
export declare const UpdateProjectContentHintProjectsResponseType$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectContentHintProjectsResponseType>;
/** @internal */
export declare const UpdateProjectContentHintProjectsResponseType$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectContentHintProjectsResponseType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectContentHintProjectsResponseType$ {
    /** @deprecated use `UpdateProjectContentHintProjectsResponseType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly RedisRestApiToken: "redis-rest-api-token";
    }>;
    /** @deprecated use `UpdateProjectContentHintProjectsResponseType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly RedisRestApiToken: "redis-rest-api-token";
    }>;
}
/** @internal */
export declare const UpdateProjectContentHint3$inboundSchema: z.ZodType<UpdateProjectContentHint3, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectContentHint3$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const UpdateProjectContentHint3$outboundSchema: z.ZodType<UpdateProjectContentHint3$Outbound, z.ZodTypeDef, UpdateProjectContentHint3>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectContentHint3$ {
    /** @deprecated use `UpdateProjectContentHint3$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectContentHint3, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectContentHint3$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectContentHint3$Outbound, z.ZodTypeDef, UpdateProjectContentHint3>;
    /** @deprecated use `UpdateProjectContentHint3$Outbound` instead. */
    type Outbound = UpdateProjectContentHint3$Outbound;
}
export declare function updateProjectContentHint3ToJSON(updateProjectContentHint3: UpdateProjectContentHint3): string;
export declare function updateProjectContentHint3FromJSON(jsonString: string): SafeParseResult<UpdateProjectContentHint3, SDKValidationError>;
/** @internal */
export declare const UpdateProjectContentHintProjectsType$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectContentHintProjectsType>;
/** @internal */
export declare const UpdateProjectContentHintProjectsType$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectContentHintProjectsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectContentHintProjectsType$ {
    /** @deprecated use `UpdateProjectContentHintProjectsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly RedisRestApiUrl: "redis-rest-api-url";
    }>;
    /** @deprecated use `UpdateProjectContentHintProjectsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly RedisRestApiUrl: "redis-rest-api-url";
    }>;
}
/** @internal */
export declare const UpdateProjectContentHint2$inboundSchema: z.ZodType<UpdateProjectContentHint2, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectContentHint2$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const UpdateProjectContentHint2$outboundSchema: z.ZodType<UpdateProjectContentHint2$Outbound, z.ZodTypeDef, UpdateProjectContentHint2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectContentHint2$ {
    /** @deprecated use `UpdateProjectContentHint2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectContentHint2, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectContentHint2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectContentHint2$Outbound, z.ZodTypeDef, UpdateProjectContentHint2>;
    /** @deprecated use `UpdateProjectContentHint2$Outbound` instead. */
    type Outbound = UpdateProjectContentHint2$Outbound;
}
export declare function updateProjectContentHint2ToJSON(updateProjectContentHint2: UpdateProjectContentHint2): string;
export declare function updateProjectContentHint2FromJSON(jsonString: string): SafeParseResult<UpdateProjectContentHint2, SDKValidationError>;
/** @internal */
export declare const UpdateProjectContentHintType$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectContentHintType>;
/** @internal */
export declare const UpdateProjectContentHintType$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectContentHintType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectContentHintType$ {
    /** @deprecated use `UpdateProjectContentHintType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly RedisUrl: "redis-url";
    }>;
    /** @deprecated use `UpdateProjectContentHintType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly RedisUrl: "redis-url";
    }>;
}
/** @internal */
export declare const UpdateProjectContentHint1$inboundSchema: z.ZodType<UpdateProjectContentHint1, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectContentHint1$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const UpdateProjectContentHint1$outboundSchema: z.ZodType<UpdateProjectContentHint1$Outbound, z.ZodTypeDef, UpdateProjectContentHint1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectContentHint1$ {
    /** @deprecated use `UpdateProjectContentHint1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectContentHint1, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectContentHint1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectContentHint1$Outbound, z.ZodTypeDef, UpdateProjectContentHint1>;
    /** @deprecated use `UpdateProjectContentHint1$Outbound` instead. */
    type Outbound = UpdateProjectContentHint1$Outbound;
}
export declare function updateProjectContentHint1ToJSON(updateProjectContentHint1: UpdateProjectContentHint1): string;
export declare function updateProjectContentHint1FromJSON(jsonString: string): SafeParseResult<UpdateProjectContentHint1, SDKValidationError>;
/** @internal */
export declare const UpdateProjectContentHint$inboundSchema: z.ZodType<UpdateProjectContentHint, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectContentHint$Outbound = UpdateProjectContentHint14$Outbound | UpdateProjectContentHint1$Outbound | UpdateProjectContentHint2$Outbound | UpdateProjectContentHint3$Outbound | UpdateProjectContentHint4$Outbound | UpdateProjectContentHint5$Outbound | UpdateProjectContentHint6$Outbound | UpdateProjectContentHint7$Outbound | UpdateProjectContentHint8$Outbound | UpdateProjectContentHint9$Outbound | UpdateProjectContentHint10$Outbound | UpdateProjectContentHint11$Outbound | UpdateProjectContentHint12$Outbound | UpdateProjectContentHint13$Outbound | UpdateProjectContentHint15$Outbound;
/** @internal */
export declare const UpdateProjectContentHint$outboundSchema: z.ZodType<UpdateProjectContentHint$Outbound, z.ZodTypeDef, UpdateProjectContentHint>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectContentHint$ {
    /** @deprecated use `UpdateProjectContentHint$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectContentHint, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectContentHint$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectContentHint$Outbound, z.ZodTypeDef, UpdateProjectContentHint>;
    /** @deprecated use `UpdateProjectContentHint$Outbound` instead. */
    type Outbound = UpdateProjectContentHint$Outbound;
}
export declare function updateProjectContentHintToJSON(updateProjectContentHint: UpdateProjectContentHint): string;
export declare function updateProjectContentHintFromJSON(jsonString: string): SafeParseResult<UpdateProjectContentHint, SDKValidationError>;
/** @internal */
export declare const UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType>;
/** @internal */
export declare const UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType$ {
    /** @deprecated use `UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly FlagsSecret: "flags-secret";
    }>;
    /** @deprecated use `UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly FlagsSecret: "flags-secret";
    }>;
}
/** @internal */
export declare const UpdateProjectInternalContentHint$inboundSchema: z.ZodType<UpdateProjectInternalContentHint, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectInternalContentHint$Outbound = {
    type: string;
    encryptedValue: string;
};
/** @internal */
export declare const UpdateProjectInternalContentHint$outboundSchema: z.ZodType<UpdateProjectInternalContentHint$Outbound, z.ZodTypeDef, UpdateProjectInternalContentHint>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectInternalContentHint$ {
    /** @deprecated use `UpdateProjectInternalContentHint$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectInternalContentHint, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectInternalContentHint$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectInternalContentHint$Outbound, z.ZodTypeDef, UpdateProjectInternalContentHint>;
    /** @deprecated use `UpdateProjectInternalContentHint$Outbound` instead. */
    type Outbound = UpdateProjectInternalContentHint$Outbound;
}
export declare function updateProjectInternalContentHintToJSON(updateProjectInternalContentHint: UpdateProjectInternalContentHint): string;
export declare function updateProjectInternalContentHintFromJSON(jsonString: string): SafeParseResult<UpdateProjectInternalContentHint, SDKValidationError>;
/** @internal */
export declare const UpdateProjectEnv$inboundSchema: z.ZodType<UpdateProjectEnv, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectEnv$Outbound = {
    target?: Array<string> | string | undefined;
    type: string;
    sunsetSecretId?: string | undefined;
    decrypted?: boolean | undefined;
    value: string;
    vsmValue?: string | undefined;
    id?: string | undefined;
    key: string;
    configurationId?: string | null | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    createdBy?: string | null | undefined;
    updatedBy?: string | null | undefined;
    gitBranch?: string | undefined;
    edgeConfigId?: string | null | undefined;
    edgeConfigTokenId?: string | null | undefined;
    contentHint?: UpdateProjectContentHint14$Outbound | UpdateProjectContentHint1$Outbound | UpdateProjectContentHint2$Outbound | UpdateProjectContentHint3$Outbound | UpdateProjectContentHint4$Outbound | UpdateProjectContentHint5$Outbound | UpdateProjectContentHint6$Outbound | UpdateProjectContentHint7$Outbound | UpdateProjectContentHint8$Outbound | UpdateProjectContentHint9$Outbound | UpdateProjectContentHint10$Outbound | UpdateProjectContentHint11$Outbound | UpdateProjectContentHint12$Outbound | UpdateProjectContentHint13$Outbound | UpdateProjectContentHint15$Outbound | null | undefined;
    internalContentHint?: UpdateProjectInternalContentHint$Outbound | null | undefined;
    comment?: string | undefined;
    customEnvironmentIds?: Array<string> | undefined;
};
/** @internal */
export declare const UpdateProjectEnv$outboundSchema: z.ZodType<UpdateProjectEnv$Outbound, z.ZodTypeDef, UpdateProjectEnv>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectEnv$ {
    /** @deprecated use `UpdateProjectEnv$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectEnv, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectEnv$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectEnv$Outbound, z.ZodTypeDef, UpdateProjectEnv>;
    /** @deprecated use `UpdateProjectEnv$Outbound` instead. */
    type Outbound = UpdateProjectEnv$Outbound;
}
export declare function updateProjectEnvToJSON(updateProjectEnv: UpdateProjectEnv): string;
export declare function updateProjectEnvFromJSON(jsonString: string): SafeParseResult<UpdateProjectEnv, SDKValidationError>;
/** @internal */
export declare const UpdateProjectProjectsType$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsType>;
/** @internal */
export declare const UpdateProjectProjectsType$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsType$ {
    /** @deprecated use `UpdateProjectProjectsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Preview: "preview";
        readonly Production: "production";
        readonly Development: "development";
    }>;
    /** @deprecated use `UpdateProjectProjectsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Preview: "preview";
        readonly Production: "production";
        readonly Development: "development";
    }>;
}
/** @internal */
export declare const UpdateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType>;
/** @internal */
export declare const UpdateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$ {
    /** @deprecated use `UpdateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly EndsWith: "endsWith";
        readonly StartsWith: "startsWith";
        readonly Equals: "equals";
    }>;
    /** @deprecated use `UpdateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly EndsWith: "endsWith";
        readonly StartsWith: "startsWith";
        readonly Equals: "equals";
    }>;
}
/** @internal */
export declare const UpdateProjectBranchMatcher$inboundSchema: z.ZodType<UpdateProjectBranchMatcher, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectBranchMatcher$Outbound = {
    type: string;
    pattern: string;
};
/** @internal */
export declare const UpdateProjectBranchMatcher$outboundSchema: z.ZodType<UpdateProjectBranchMatcher$Outbound, z.ZodTypeDef, UpdateProjectBranchMatcher>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectBranchMatcher$ {
    /** @deprecated use `UpdateProjectBranchMatcher$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectBranchMatcher, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectBranchMatcher$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectBranchMatcher$Outbound, z.ZodTypeDef, UpdateProjectBranchMatcher>;
    /** @deprecated use `UpdateProjectBranchMatcher$Outbound` instead. */
    type Outbound = UpdateProjectBranchMatcher$Outbound;
}
export declare function updateProjectBranchMatcherToJSON(updateProjectBranchMatcher: UpdateProjectBranchMatcher): string;
export declare function updateProjectBranchMatcherFromJSON(jsonString: string): SafeParseResult<UpdateProjectBranchMatcher, SDKValidationError>;
/** @internal */
export declare const UpdateProjectVerification$inboundSchema: z.ZodType<UpdateProjectVerification, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectVerification$Outbound = {
    type: string;
    domain: string;
    value: string;
    reason: string;
};
/** @internal */
export declare const UpdateProjectVerification$outboundSchema: z.ZodType<UpdateProjectVerification$Outbound, z.ZodTypeDef, UpdateProjectVerification>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectVerification$ {
    /** @deprecated use `UpdateProjectVerification$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectVerification, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectVerification$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectVerification$Outbound, z.ZodTypeDef, UpdateProjectVerification>;
    /** @deprecated use `UpdateProjectVerification$Outbound` instead. */
    type Outbound = UpdateProjectVerification$Outbound;
}
export declare function updateProjectVerificationToJSON(updateProjectVerification: UpdateProjectVerification): string;
export declare function updateProjectVerificationFromJSON(jsonString: string): SafeParseResult<UpdateProjectVerification, SDKValidationError>;
/** @internal */
export declare const UpdateProjectDomains$inboundSchema: z.ZodType<UpdateProjectDomains, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectDomains$Outbound = {
    name: string;
    apexName: string;
    projectId: string;
    redirect?: string | null | undefined;
    redirectStatusCode?: number | null | undefined;
    gitBranch?: string | null | undefined;
    customEnvironmentId?: string | null | undefined;
    updatedAt?: number | undefined;
    createdAt?: number | undefined;
    verified: boolean;
    verification?: Array<UpdateProjectVerification$Outbound> | undefined;
};
/** @internal */
export declare const UpdateProjectDomains$outboundSchema: z.ZodType<UpdateProjectDomains$Outbound, z.ZodTypeDef, UpdateProjectDomains>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectDomains$ {
    /** @deprecated use `UpdateProjectDomains$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectDomains, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectDomains$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectDomains$Outbound, z.ZodTypeDef, UpdateProjectDomains>;
    /** @deprecated use `UpdateProjectDomains$Outbound` instead. */
    type Outbound = UpdateProjectDomains$Outbound;
}
export declare function updateProjectDomainsToJSON(updateProjectDomains: UpdateProjectDomains): string;
export declare function updateProjectDomainsFromJSON(jsonString: string): SafeParseResult<UpdateProjectDomains, SDKValidationError>;
/** @internal */
export declare const UpdateProjectCustomEnvironments$inboundSchema: z.ZodType<UpdateProjectCustomEnvironments, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectCustomEnvironments$Outbound = {
    id: string;
    slug: string;
    type: string;
    description?: string | undefined;
    branchMatcher?: UpdateProjectBranchMatcher$Outbound | undefined;
    domains?: Array<UpdateProjectDomains$Outbound> | undefined;
    currentDeploymentAliases?: Array<string> | undefined;
    createdAt: number;
    updatedAt: number;
};
/** @internal */
export declare const UpdateProjectCustomEnvironments$outboundSchema: z.ZodType<UpdateProjectCustomEnvironments$Outbound, z.ZodTypeDef, UpdateProjectCustomEnvironments>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectCustomEnvironments$ {
    /** @deprecated use `UpdateProjectCustomEnvironments$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectCustomEnvironments, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectCustomEnvironments$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectCustomEnvironments$Outbound, z.ZodTypeDef, UpdateProjectCustomEnvironments>;
    /** @deprecated use `UpdateProjectCustomEnvironments$Outbound` instead. */
    type Outbound = UpdateProjectCustomEnvironments$Outbound;
}
export declare function updateProjectCustomEnvironmentsToJSON(updateProjectCustomEnvironments: UpdateProjectCustomEnvironments): string;
export declare function updateProjectCustomEnvironmentsFromJSON(jsonString: string): SafeParseResult<UpdateProjectCustomEnvironments, SDKValidationError>;
/** @internal */
export declare const UpdateProjectProjectsFramework$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsFramework>;
/** @internal */
export declare const UpdateProjectProjectsFramework$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsFramework>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsFramework$ {
    /** @deprecated use `UpdateProjectProjectsFramework$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Blitzjs: "blitzjs";
        readonly Nextjs: "nextjs";
        readonly Gatsby: "gatsby";
        readonly Remix: "remix";
        readonly ReactRouter: "react-router";
        readonly Astro: "astro";
        readonly Hexo: "hexo";
        readonly Eleventy: "eleventy";
        readonly Docusaurus2: "docusaurus-2";
        readonly Docusaurus: "docusaurus";
        readonly Preact: "preact";
        readonly Solidstart1: "solidstart-1";
        readonly Solidstart: "solidstart";
        readonly Dojo: "dojo";
        readonly Ember: "ember";
        readonly Vue: "vue";
        readonly Scully: "scully";
        readonly IonicAngular: "ionic-angular";
        readonly Angular: "angular";
        readonly Polymer: "polymer";
        readonly Svelte: "svelte";
        readonly Sveltekit: "sveltekit";
        readonly Sveltekit1: "sveltekit-1";
        readonly IonicReact: "ionic-react";
        readonly CreateReactApp: "create-react-app";
        readonly Gridsome: "gridsome";
        readonly Umijs: "umijs";
        readonly Sapper: "sapper";
        readonly Saber: "saber";
        readonly Stencil: "stencil";
        readonly Nuxtjs: "nuxtjs";
        readonly Redwoodjs: "redwoodjs";
        readonly Hugo: "hugo";
        readonly Jekyll: "jekyll";
        readonly Brunch: "brunch";
        readonly Middleman: "middleman";
        readonly Zola: "zola";
        readonly Hydrogen: "hydrogen";
        readonly Vite: "vite";
        readonly Vitepress: "vitepress";
        readonly Vuepress: "vuepress";
        readonly Parcel: "parcel";
        readonly Fastapi: "fastapi";
        readonly Fasthtml: "fasthtml";
        readonly SanityV3: "sanity-v3";
        readonly Sanity: "sanity";
        readonly Storybook: "storybook";
        readonly Nitro: "nitro";
        readonly Hono: "hono";
        readonly Express: "express";
        readonly Xmcp: "xmcp";
    }>;
    /** @deprecated use `UpdateProjectProjectsFramework$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Blitzjs: "blitzjs";
        readonly Nextjs: "nextjs";
        readonly Gatsby: "gatsby";
        readonly Remix: "remix";
        readonly ReactRouter: "react-router";
        readonly Astro: "astro";
        readonly Hexo: "hexo";
        readonly Eleventy: "eleventy";
        readonly Docusaurus2: "docusaurus-2";
        readonly Docusaurus: "docusaurus";
        readonly Preact: "preact";
        readonly Solidstart1: "solidstart-1";
        readonly Solidstart: "solidstart";
        readonly Dojo: "dojo";
        readonly Ember: "ember";
        readonly Vue: "vue";
        readonly Scully: "scully";
        readonly IonicAngular: "ionic-angular";
        readonly Angular: "angular";
        readonly Polymer: "polymer";
        readonly Svelte: "svelte";
        readonly Sveltekit: "sveltekit";
        readonly Sveltekit1: "sveltekit-1";
        readonly IonicReact: "ionic-react";
        readonly CreateReactApp: "create-react-app";
        readonly Gridsome: "gridsome";
        readonly Umijs: "umijs";
        readonly Sapper: "sapper";
        readonly Saber: "saber";
        readonly Stencil: "stencil";
        readonly Nuxtjs: "nuxtjs";
        readonly Redwoodjs: "redwoodjs";
        readonly Hugo: "hugo";
        readonly Jekyll: "jekyll";
        readonly Brunch: "brunch";
        readonly Middleman: "middleman";
        readonly Zola: "zola";
        readonly Hydrogen: "hydrogen";
        readonly Vite: "vite";
        readonly Vitepress: "vitepress";
        readonly Vuepress: "vuepress";
        readonly Parcel: "parcel";
        readonly Fastapi: "fastapi";
        readonly Fasthtml: "fasthtml";
        readonly SanityV3: "sanity-v3";
        readonly Sanity: "sanity";
        readonly Storybook: "storybook";
        readonly Nitro: "nitro";
        readonly Hono: "hono";
        readonly Express: "express";
        readonly Xmcp: "xmcp";
    }>;
}
/** @internal */
export declare const UpdateProjectIpBuckets$inboundSchema: z.ZodType<UpdateProjectIpBuckets, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectIpBuckets$Outbound = {
    bucket: string;
    supportUntil?: number | undefined;
};
/** @internal */
export declare const UpdateProjectIpBuckets$outboundSchema: z.ZodType<UpdateProjectIpBuckets$Outbound, z.ZodTypeDef, UpdateProjectIpBuckets>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectIpBuckets$ {
    /** @deprecated use `UpdateProjectIpBuckets$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectIpBuckets, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectIpBuckets$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectIpBuckets$Outbound, z.ZodTypeDef, UpdateProjectIpBuckets>;
    /** @deprecated use `UpdateProjectIpBuckets$Outbound` instead. */
    type Outbound = UpdateProjectIpBuckets$Outbound;
}
export declare function updateProjectIpBucketsToJSON(updateProjectIpBuckets: UpdateProjectIpBuckets): string;
export declare function updateProjectIpBucketsFromJSON(jsonString: string): SafeParseResult<UpdateProjectIpBuckets, SDKValidationError>;
/** @internal */
export declare const UpdateProjectAliasAssigned$inboundSchema: z.ZodType<UpdateProjectAliasAssigned, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectAliasAssigned$Outbound = number | boolean;
/** @internal */
export declare const UpdateProjectAliasAssigned$outboundSchema: z.ZodType<UpdateProjectAliasAssigned$Outbound, z.ZodTypeDef, UpdateProjectAliasAssigned>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectAliasAssigned$ {
    /** @deprecated use `UpdateProjectAliasAssigned$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectAliasAssigned, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectAliasAssigned$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectAliasAssigned$Outbound, z.ZodTypeDef, UpdateProjectAliasAssigned>;
    /** @deprecated use `UpdateProjectAliasAssigned$Outbound` instead. */
    type Outbound = UpdateProjectAliasAssigned$Outbound;
}
export declare function updateProjectAliasAssignedToJSON(updateProjectAliasAssigned: UpdateProjectAliasAssigned): string;
export declare function updateProjectAliasAssignedFromJSON(jsonString: string): SafeParseResult<UpdateProjectAliasAssigned, SDKValidationError>;
/** @internal */
export declare const UpdateProjectAliasError$inboundSchema: z.ZodType<UpdateProjectAliasError, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectAliasError$Outbound = {
    code: string;
    message: string;
};
/** @internal */
export declare const UpdateProjectAliasError$outboundSchema: z.ZodType<UpdateProjectAliasError$Outbound, z.ZodTypeDef, UpdateProjectAliasError>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectAliasError$ {
    /** @deprecated use `UpdateProjectAliasError$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectAliasError, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectAliasError$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectAliasError$Outbound, z.ZodTypeDef, UpdateProjectAliasError>;
    /** @deprecated use `UpdateProjectAliasError$Outbound` instead. */
    type Outbound = UpdateProjectAliasError$Outbound;
}
export declare function updateProjectAliasErrorToJSON(updateProjectAliasError: UpdateProjectAliasError): string;
export declare function updateProjectAliasErrorFromJSON(jsonString: string): SafeParseResult<UpdateProjectAliasError, SDKValidationError>;
/** @internal */
export declare const UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType>;
/** @internal */
export declare const UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$ {
    /** @deprecated use `UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly EndsWith: "endsWith";
        readonly StartsWith: "startsWith";
        readonly Equals: "equals";
    }>;
    /** @deprecated use `UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly EndsWith: "endsWith";
        readonly StartsWith: "startsWith";
        readonly Equals: "equals";
    }>;
}
/** @internal */
export declare const UpdateProjectProjectsBranchMatcher$inboundSchema: z.ZodType<UpdateProjectProjectsBranchMatcher, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectProjectsBranchMatcher$Outbound = {
    type: string;
    pattern: string;
};
/** @internal */
export declare const UpdateProjectProjectsBranchMatcher$outboundSchema: z.ZodType<UpdateProjectProjectsBranchMatcher$Outbound, z.ZodTypeDef, UpdateProjectProjectsBranchMatcher>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsBranchMatcher$ {
    /** @deprecated use `UpdateProjectProjectsBranchMatcher$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectProjectsBranchMatcher, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectProjectsBranchMatcher$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectProjectsBranchMatcher$Outbound, z.ZodTypeDef, UpdateProjectProjectsBranchMatcher>;
    /** @deprecated use `UpdateProjectProjectsBranchMatcher$Outbound` instead. */
    type Outbound = UpdateProjectProjectsBranchMatcher$Outbound;
}
export declare function updateProjectProjectsBranchMatcherToJSON(updateProjectProjectsBranchMatcher: UpdateProjectProjectsBranchMatcher): string;
export declare function updateProjectProjectsBranchMatcherFromJSON(jsonString: string): SafeParseResult<UpdateProjectProjectsBranchMatcher, SDKValidationError>;
/** @internal */
export declare const UpdateProjectBuilds$inboundSchema: z.ZodType<UpdateProjectBuilds, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectBuilds$Outbound = {
    use: string;
    src?: string | undefined;
    dest?: string | undefined;
};
/** @internal */
export declare const UpdateProjectBuilds$outboundSchema: z.ZodType<UpdateProjectBuilds$Outbound, z.ZodTypeDef, UpdateProjectBuilds>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectBuilds$ {
    /** @deprecated use `UpdateProjectBuilds$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectBuilds, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectBuilds$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectBuilds$Outbound, z.ZodTypeDef, UpdateProjectBuilds>;
    /** @deprecated use `UpdateProjectBuilds$Outbound` instead. */
    type Outbound = UpdateProjectBuilds$Outbound;
}
export declare function updateProjectBuildsToJSON(updateProjectBuilds: UpdateProjectBuilds): string;
export declare function updateProjectBuildsFromJSON(jsonString: string): SafeParseResult<UpdateProjectBuilds, SDKValidationError>;
/** @internal */
export declare const UpdateProjectChecksConclusion$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectChecksConclusion>;
/** @internal */
export declare const UpdateProjectChecksConclusion$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectChecksConclusion>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectChecksConclusion$ {
    /** @deprecated use `UpdateProjectChecksConclusion$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Succeeded: "succeeded";
        readonly Failed: "failed";
        readonly Skipped: "skipped";
        readonly Canceled: "canceled";
    }>;
    /** @deprecated use `UpdateProjectChecksConclusion$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Succeeded: "succeeded";
        readonly Failed: "failed";
        readonly Skipped: "skipped";
        readonly Canceled: "canceled";
    }>;
}
/** @internal */
export declare const UpdateProjectChecksState$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectChecksState>;
/** @internal */
export declare const UpdateProjectChecksState$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectChecksState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectChecksState$ {
    /** @deprecated use `UpdateProjectChecksState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Registered: "registered";
        readonly Running: "running";
        readonly Completed: "completed";
    }>;
    /** @deprecated use `UpdateProjectChecksState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Registered: "registered";
        readonly Running: "running";
        readonly Completed: "completed";
    }>;
}
/** @internal */
export declare const UpdateProjectCreator$inboundSchema: z.ZodType<UpdateProjectCreator, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectCreator$Outbound = {
    email: string;
    githubLogin?: string | undefined;
    gitlabLogin?: string | undefined;
    uid: string;
    username: string;
};
/** @internal */
export declare const UpdateProjectCreator$outboundSchema: z.ZodType<UpdateProjectCreator$Outbound, z.ZodTypeDef, UpdateProjectCreator>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectCreator$ {
    /** @deprecated use `UpdateProjectCreator$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectCreator, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectCreator$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectCreator$Outbound, z.ZodTypeDef, UpdateProjectCreator>;
    /** @deprecated use `UpdateProjectCreator$Outbound` instead. */
    type Outbound = UpdateProjectCreator$Outbound;
}
export declare function updateProjectCreatorToJSON(updateProjectCreator: UpdateProjectCreator): string;
export declare function updateProjectCreatorFromJSON(jsonString: string): SafeParseResult<UpdateProjectCreator, SDKValidationError>;
/** @internal */
export declare const UpdateProjectOidcTokenClaims$inboundSchema: z.ZodType<UpdateProjectOidcTokenClaims, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectOidcTokenClaims$Outbound = {
    iss: string;
    sub: string;
    scope: string;
    aud: string;
    owner: string;
    owner_id: string;
    project: string;
    project_id: string;
    environment: string;
};
/** @internal */
export declare const UpdateProjectOidcTokenClaims$outboundSchema: z.ZodType<UpdateProjectOidcTokenClaims$Outbound, z.ZodTypeDef, UpdateProjectOidcTokenClaims>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectOidcTokenClaims$ {
    /** @deprecated use `UpdateProjectOidcTokenClaims$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectOidcTokenClaims, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectOidcTokenClaims$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectOidcTokenClaims$Outbound, z.ZodTypeDef, UpdateProjectOidcTokenClaims>;
    /** @deprecated use `UpdateProjectOidcTokenClaims$Outbound` instead. */
    type Outbound = UpdateProjectOidcTokenClaims$Outbound;
}
export declare function updateProjectOidcTokenClaimsToJSON(updateProjectOidcTokenClaims: UpdateProjectOidcTokenClaims): string;
export declare function updateProjectOidcTokenClaimsFromJSON(jsonString: string): SafeParseResult<UpdateProjectOidcTokenClaims, SDKValidationError>;
/** @internal */
export declare const UpdateProjectPlan$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectPlan>;
/** @internal */
export declare const UpdateProjectPlan$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectPlan>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectPlan$ {
    /** @deprecated use `UpdateProjectPlan$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Pro: "pro";
        readonly Enterprise: "enterprise";
        readonly Hobby: "hobby";
    }>;
    /** @deprecated use `UpdateProjectPlan$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Pro: "pro";
        readonly Enterprise: "enterprise";
        readonly Hobby: "hobby";
    }>;
}
/** @internal */
export declare const UpdateProjectReadyState$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectReadyState>;
/** @internal */
export declare const UpdateProjectReadyState$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectReadyState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectReadyState$ {
    /** @deprecated use `UpdateProjectReadyState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Queued: "QUEUED";
        readonly Ready: "READY";
        readonly Canceled: "CANCELED";
    }>;
    /** @deprecated use `UpdateProjectReadyState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Queued: "QUEUED";
        readonly Ready: "READY";
        readonly Canceled: "CANCELED";
    }>;
}
/** @internal */
export declare const UpdateProjectReadySubstate$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectReadySubstate>;
/** @internal */
export declare const UpdateProjectReadySubstate$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectReadySubstate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectReadySubstate$ {
    /** @deprecated use `UpdateProjectReadySubstate$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Staged: "STAGED";
        readonly Rolling: "ROLLING";
        readonly Promoted: "PROMOTED";
    }>;
    /** @deprecated use `UpdateProjectReadySubstate$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Staged: "STAGED";
        readonly Rolling: "ROLLING";
        readonly Promoted: "PROMOTED";
    }>;
}
/** @internal */
export declare const UpdateProjectProjectsResponseType$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsResponseType>;
/** @internal */
export declare const UpdateProjectProjectsResponseType$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsResponseType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsResponseType$ {
    /** @deprecated use `UpdateProjectProjectsResponseType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Lambdas: "LAMBDAS";
    }>;
    /** @deprecated use `UpdateProjectProjectsResponseType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Lambdas: "LAMBDAS";
    }>;
}
/** @internal */
export declare const UpdateProjectLatestDeployments$inboundSchema: z.ZodType<UpdateProjectLatestDeployments, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectLatestDeployments$Outbound = {
    id: string;
    alias?: Array<string> | undefined;
    aliasAssigned?: number | boolean | null | undefined;
    aliasError?: UpdateProjectAliasError$Outbound | null | undefined;
    aliasFinal?: string | null | undefined;
    automaticAliases?: Array<string> | undefined;
    branchMatcher?: UpdateProjectProjectsBranchMatcher$Outbound | undefined;
    buildingAt?: number | undefined;
    builds?: Array<UpdateProjectBuilds$Outbound> | undefined;
    checksConclusion?: string | undefined;
    checksState?: string | undefined;
    connectBuildsEnabled?: boolean | undefined;
    connectConfigurationId?: string | undefined;
    createdAt: number;
    createdIn: string;
    creator: UpdateProjectCreator$Outbound | null;
    deletedAt?: number | undefined;
    deploymentHostname: string;
    forced?: boolean | undefined;
    name: string;
    meta?: {
        [k: string]: string;
    } | undefined;
    monorepoManager?: string | null | undefined;
    oidcTokenClaims?: UpdateProjectOidcTokenClaims$Outbound | undefined;
    plan: string;
    previewCommentsEnabled?: boolean | undefined;
    private: boolean;
    readyAt?: number | undefined;
    readyState: string;
    readySubstate?: string | undefined;
    requestedAt?: number | undefined;
    target?: string | null | undefined;
    teamId?: string | null | undefined;
    type: string;
    url: string;
    userId: string;
    withCache?: boolean | undefined;
};
/** @internal */
export declare const UpdateProjectLatestDeployments$outboundSchema: z.ZodType<UpdateProjectLatestDeployments$Outbound, z.ZodTypeDef, UpdateProjectLatestDeployments>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectLatestDeployments$ {
    /** @deprecated use `UpdateProjectLatestDeployments$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectLatestDeployments, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectLatestDeployments$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectLatestDeployments$Outbound, z.ZodTypeDef, UpdateProjectLatestDeployments>;
    /** @deprecated use `UpdateProjectLatestDeployments$Outbound` instead. */
    type Outbound = UpdateProjectLatestDeployments$Outbound;
}
export declare function updateProjectLatestDeploymentsToJSON(updateProjectLatestDeployments: UpdateProjectLatestDeployments): string;
export declare function updateProjectLatestDeploymentsFromJSON(jsonString: string): SafeParseResult<UpdateProjectLatestDeployments, SDKValidationError>;
/** @internal */
export declare const UpdateProjectLinkProjectsResponse200ApplicationJSONType$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectLinkProjectsResponse200ApplicationJSONType>;
/** @internal */
export declare const UpdateProjectLinkProjectsResponse200ApplicationJSONType$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectLinkProjectsResponse200ApplicationJSONType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectLinkProjectsResponse200ApplicationJSONType$ {
    /** @deprecated use `UpdateProjectLinkProjectsResponse200ApplicationJSONType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
    /** @deprecated use `UpdateProjectLinkProjectsResponse200ApplicationJSONType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
}
/** @internal */
export declare const UpdateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$inboundSchema: z.ZodType<UpdateProjectLinkProjectsResponse200ApplicationJSONDeployHooks, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$Outbound = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};
/** @internal */
export declare const UpdateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$outboundSchema: z.ZodType<UpdateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$Outbound, z.ZodTypeDef, UpdateProjectLinkProjectsResponse200ApplicationJSONDeployHooks>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$ {
    /** @deprecated use `UpdateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectLinkProjectsResponse200ApplicationJSONDeployHooks, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$Outbound, z.ZodTypeDef, UpdateProjectLinkProjectsResponse200ApplicationJSONDeployHooks>;
    /** @deprecated use `UpdateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$Outbound` instead. */
    type Outbound = UpdateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$Outbound;
}
export declare function updateProjectLinkProjectsResponse200ApplicationJSONDeployHooksToJSON(updateProjectLinkProjectsResponse200ApplicationJSONDeployHooks: UpdateProjectLinkProjectsResponse200ApplicationJSONDeployHooks): string;
export declare function updateProjectLinkProjectsResponse200ApplicationJSONDeployHooksFromJSON(jsonString: string): SafeParseResult<UpdateProjectLinkProjectsResponse200ApplicationJSONDeployHooks, SDKValidationError>;
/** @internal */
export declare const UpdateProjectLink5$inboundSchema: z.ZodType<UpdateProjectLink5, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectLink5$Outbound = {
    name: string;
    slug: string;
    owner: string;
    type: string;
    uuid: string;
    workspaceUuid: string;
    createdAt?: number | undefined;
    deployHooks: Array<UpdateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$Outbound>;
    gitCredentialId: string;
    updatedAt?: number | undefined;
    sourceless?: boolean | undefined;
    productionBranch: string;
};
/** @internal */
export declare const UpdateProjectLink5$outboundSchema: z.ZodType<UpdateProjectLink5$Outbound, z.ZodTypeDef, UpdateProjectLink5>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectLink5$ {
    /** @deprecated use `UpdateProjectLink5$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectLink5, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectLink5$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectLink5$Outbound, z.ZodTypeDef, UpdateProjectLink5>;
    /** @deprecated use `UpdateProjectLink5$Outbound` instead. */
    type Outbound = UpdateProjectLink5$Outbound;
}
export declare function updateProjectLink5ToJSON(updateProjectLink5: UpdateProjectLink5): string;
export declare function updateProjectLink5FromJSON(jsonString: string): SafeParseResult<UpdateProjectLink5, SDKValidationError>;
/** @internal */
export declare const UpdateProjectLinkProjectsResponse200Type$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectLinkProjectsResponse200Type>;
/** @internal */
export declare const UpdateProjectLinkProjectsResponse200Type$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectLinkProjectsResponse200Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectLinkProjectsResponse200Type$ {
    /** @deprecated use `UpdateProjectLinkProjectsResponse200Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Gitlab: "gitlab";
    }>;
    /** @deprecated use `UpdateProjectLinkProjectsResponse200Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Gitlab: "gitlab";
    }>;
}
/** @internal */
export declare const UpdateProjectLinkProjectsResponse200DeployHooks$inboundSchema: z.ZodType<UpdateProjectLinkProjectsResponse200DeployHooks, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectLinkProjectsResponse200DeployHooks$Outbound = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};
/** @internal */
export declare const UpdateProjectLinkProjectsResponse200DeployHooks$outboundSchema: z.ZodType<UpdateProjectLinkProjectsResponse200DeployHooks$Outbound, z.ZodTypeDef, UpdateProjectLinkProjectsResponse200DeployHooks>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectLinkProjectsResponse200DeployHooks$ {
    /** @deprecated use `UpdateProjectLinkProjectsResponse200DeployHooks$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectLinkProjectsResponse200DeployHooks, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectLinkProjectsResponse200DeployHooks$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectLinkProjectsResponse200DeployHooks$Outbound, z.ZodTypeDef, UpdateProjectLinkProjectsResponse200DeployHooks>;
    /** @deprecated use `UpdateProjectLinkProjectsResponse200DeployHooks$Outbound` instead. */
    type Outbound = UpdateProjectLinkProjectsResponse200DeployHooks$Outbound;
}
export declare function updateProjectLinkProjectsResponse200DeployHooksToJSON(updateProjectLinkProjectsResponse200DeployHooks: UpdateProjectLinkProjectsResponse200DeployHooks): string;
export declare function updateProjectLinkProjectsResponse200DeployHooksFromJSON(jsonString: string): SafeParseResult<UpdateProjectLinkProjectsResponse200DeployHooks, SDKValidationError>;
/** @internal */
export declare const UpdateProjectLink4$inboundSchema: z.ZodType<UpdateProjectLink4, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectLink4$Outbound = {
    projectId: string;
    projectName: string;
    projectNameWithNamespace: string;
    projectNamespace: string;
    projectOwnerId?: number | undefined;
    projectUrl: string;
    type: string;
    createdAt?: number | undefined;
    deployHooks: Array<UpdateProjectLinkProjectsResponse200DeployHooks$Outbound>;
    gitCredentialId: string;
    updatedAt?: number | undefined;
    sourceless?: boolean | undefined;
    productionBranch: string;
};
/** @internal */
export declare const UpdateProjectLink4$outboundSchema: z.ZodType<UpdateProjectLink4$Outbound, z.ZodTypeDef, UpdateProjectLink4>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectLink4$ {
    /** @deprecated use `UpdateProjectLink4$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectLink4, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectLink4$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectLink4$Outbound, z.ZodTypeDef, UpdateProjectLink4>;
    /** @deprecated use `UpdateProjectLink4$Outbound` instead. */
    type Outbound = UpdateProjectLink4$Outbound;
}
export declare function updateProjectLink4ToJSON(updateProjectLink4: UpdateProjectLink4): string;
export declare function updateProjectLink4FromJSON(jsonString: string): SafeParseResult<UpdateProjectLink4, SDKValidationError>;
/** @internal */
export declare const UpdateProjectLinkProjectsResponseType$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectLinkProjectsResponseType>;
/** @internal */
export declare const UpdateProjectLinkProjectsResponseType$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectLinkProjectsResponseType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectLinkProjectsResponseType$ {
    /** @deprecated use `UpdateProjectLinkProjectsResponseType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly GithubCustomHost: "github-custom-host";
    }>;
    /** @deprecated use `UpdateProjectLinkProjectsResponseType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly GithubCustomHost: "github-custom-host";
    }>;
}
/** @internal */
export declare const UpdateProjectLinkProjectsResponseDeployHooks$inboundSchema: z.ZodType<UpdateProjectLinkProjectsResponseDeployHooks, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectLinkProjectsResponseDeployHooks$Outbound = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};
/** @internal */
export declare const UpdateProjectLinkProjectsResponseDeployHooks$outboundSchema: z.ZodType<UpdateProjectLinkProjectsResponseDeployHooks$Outbound, z.ZodTypeDef, UpdateProjectLinkProjectsResponseDeployHooks>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectLinkProjectsResponseDeployHooks$ {
    /** @deprecated use `UpdateProjectLinkProjectsResponseDeployHooks$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectLinkProjectsResponseDeployHooks, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectLinkProjectsResponseDeployHooks$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectLinkProjectsResponseDeployHooks$Outbound, z.ZodTypeDef, UpdateProjectLinkProjectsResponseDeployHooks>;
    /** @deprecated use `UpdateProjectLinkProjectsResponseDeployHooks$Outbound` instead. */
    type Outbound = UpdateProjectLinkProjectsResponseDeployHooks$Outbound;
}
export declare function updateProjectLinkProjectsResponseDeployHooksToJSON(updateProjectLinkProjectsResponseDeployHooks: UpdateProjectLinkProjectsResponseDeployHooks): string;
export declare function updateProjectLinkProjectsResponseDeployHooksFromJSON(jsonString: string): SafeParseResult<UpdateProjectLinkProjectsResponseDeployHooks, SDKValidationError>;
/** @internal */
export declare const UpdateProjectLink3$inboundSchema: z.ZodType<UpdateProjectLink3, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectLink3$Outbound = {
    org: string;
    repoOwnerId?: number | undefined;
    repo?: string | undefined;
    repoId?: number | undefined;
    type: string;
    host: string;
    createdAt?: number | undefined;
    deployHooks: Array<UpdateProjectLinkProjectsResponseDeployHooks$Outbound>;
    gitCredentialId: string;
    updatedAt?: number | undefined;
    sourceless?: boolean | undefined;
    productionBranch: string;
};
/** @internal */
export declare const UpdateProjectLink3$outboundSchema: z.ZodType<UpdateProjectLink3$Outbound, z.ZodTypeDef, UpdateProjectLink3>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectLink3$ {
    /** @deprecated use `UpdateProjectLink3$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectLink3, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectLink3$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectLink3$Outbound, z.ZodTypeDef, UpdateProjectLink3>;
    /** @deprecated use `UpdateProjectLink3$Outbound` instead. */
    type Outbound = UpdateProjectLink3$Outbound;
}
export declare function updateProjectLink3ToJSON(updateProjectLink3: UpdateProjectLink3): string;
export declare function updateProjectLink3FromJSON(jsonString: string): SafeParseResult<UpdateProjectLink3, SDKValidationError>;
/** @internal */
export declare const UpdateProjectLinkProjectsType$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectLinkProjectsType>;
/** @internal */
export declare const UpdateProjectLinkProjectsType$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectLinkProjectsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectLinkProjectsType$ {
    /** @deprecated use `UpdateProjectLinkProjectsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly GithubLimited: "github-limited";
    }>;
    /** @deprecated use `UpdateProjectLinkProjectsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly GithubLimited: "github-limited";
    }>;
}
/** @internal */
export declare const UpdateProjectLinkProjectsDeployHooks$inboundSchema: z.ZodType<UpdateProjectLinkProjectsDeployHooks, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectLinkProjectsDeployHooks$Outbound = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};
/** @internal */
export declare const UpdateProjectLinkProjectsDeployHooks$outboundSchema: z.ZodType<UpdateProjectLinkProjectsDeployHooks$Outbound, z.ZodTypeDef, UpdateProjectLinkProjectsDeployHooks>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectLinkProjectsDeployHooks$ {
    /** @deprecated use `UpdateProjectLinkProjectsDeployHooks$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectLinkProjectsDeployHooks, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectLinkProjectsDeployHooks$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectLinkProjectsDeployHooks$Outbound, z.ZodTypeDef, UpdateProjectLinkProjectsDeployHooks>;
    /** @deprecated use `UpdateProjectLinkProjectsDeployHooks$Outbound` instead. */
    type Outbound = UpdateProjectLinkProjectsDeployHooks$Outbound;
}
export declare function updateProjectLinkProjectsDeployHooksToJSON(updateProjectLinkProjectsDeployHooks: UpdateProjectLinkProjectsDeployHooks): string;
export declare function updateProjectLinkProjectsDeployHooksFromJSON(jsonString: string): SafeParseResult<UpdateProjectLinkProjectsDeployHooks, SDKValidationError>;
/** @internal */
export declare const UpdateProjectLink2$inboundSchema: z.ZodType<UpdateProjectLink2, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectLink2$Outbound = {
    type: string;
    repo?: string | undefined;
    repoId?: number | undefined;
    updatedAt?: number | undefined;
    createdAt?: number | undefined;
    org: string;
    repoOwnerId?: number | undefined;
    deployHooks: Array<UpdateProjectLinkProjectsDeployHooks$Outbound>;
    gitCredentialId: string;
    sourceless?: boolean | undefined;
    productionBranch: string;
};
/** @internal */
export declare const UpdateProjectLink2$outboundSchema: z.ZodType<UpdateProjectLink2$Outbound, z.ZodTypeDef, UpdateProjectLink2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectLink2$ {
    /** @deprecated use `UpdateProjectLink2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectLink2, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectLink2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectLink2$Outbound, z.ZodTypeDef, UpdateProjectLink2>;
    /** @deprecated use `UpdateProjectLink2$Outbound` instead. */
    type Outbound = UpdateProjectLink2$Outbound;
}
export declare function updateProjectLink2ToJSON(updateProjectLink2: UpdateProjectLink2): string;
export declare function updateProjectLink2FromJSON(jsonString: string): SafeParseResult<UpdateProjectLink2, SDKValidationError>;
/** @internal */
export declare const UpdateProjectLinkType$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectLinkType>;
/** @internal */
export declare const UpdateProjectLinkType$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectLinkType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectLinkType$ {
    /** @deprecated use `UpdateProjectLinkType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
    /** @deprecated use `UpdateProjectLinkType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
}
/** @internal */
export declare const UpdateProjectLinkDeployHooks$inboundSchema: z.ZodType<UpdateProjectLinkDeployHooks, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectLinkDeployHooks$Outbound = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};
/** @internal */
export declare const UpdateProjectLinkDeployHooks$outboundSchema: z.ZodType<UpdateProjectLinkDeployHooks$Outbound, z.ZodTypeDef, UpdateProjectLinkDeployHooks>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectLinkDeployHooks$ {
    /** @deprecated use `UpdateProjectLinkDeployHooks$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectLinkDeployHooks, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectLinkDeployHooks$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectLinkDeployHooks$Outbound, z.ZodTypeDef, UpdateProjectLinkDeployHooks>;
    /** @deprecated use `UpdateProjectLinkDeployHooks$Outbound` instead. */
    type Outbound = UpdateProjectLinkDeployHooks$Outbound;
}
export declare function updateProjectLinkDeployHooksToJSON(updateProjectLinkDeployHooks: UpdateProjectLinkDeployHooks): string;
export declare function updateProjectLinkDeployHooksFromJSON(jsonString: string): SafeParseResult<UpdateProjectLinkDeployHooks, SDKValidationError>;
/** @internal */
export declare const UpdateProjectLink1$inboundSchema: z.ZodType<UpdateProjectLink1, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectLink1$Outbound = {
    org: string;
    repoOwnerId?: number | undefined;
    repo?: string | undefined;
    repoId?: number | undefined;
    type: string;
    createdAt?: number | undefined;
    deployHooks: Array<UpdateProjectLinkDeployHooks$Outbound>;
    gitCredentialId: string;
    updatedAt?: number | undefined;
    sourceless?: boolean | undefined;
    productionBranch: string;
};
/** @internal */
export declare const UpdateProjectLink1$outboundSchema: z.ZodType<UpdateProjectLink1$Outbound, z.ZodTypeDef, UpdateProjectLink1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectLink1$ {
    /** @deprecated use `UpdateProjectLink1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectLink1, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectLink1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectLink1$Outbound, z.ZodTypeDef, UpdateProjectLink1>;
    /** @deprecated use `UpdateProjectLink1$Outbound` instead. */
    type Outbound = UpdateProjectLink1$Outbound;
}
export declare function updateProjectLink1ToJSON(updateProjectLink1: UpdateProjectLink1): string;
export declare function updateProjectLink1FromJSON(jsonString: string): SafeParseResult<UpdateProjectLink1, SDKValidationError>;
/** @internal */
export declare const UpdateProjectLink$inboundSchema: z.ZodType<UpdateProjectLink, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectLink$Outbound = UpdateProjectLink4$Outbound | UpdateProjectLink5$Outbound | UpdateProjectLink3$Outbound | UpdateProjectLink1$Outbound | UpdateProjectLink2$Outbound;
/** @internal */
export declare const UpdateProjectLink$outboundSchema: z.ZodType<UpdateProjectLink$Outbound, z.ZodTypeDef, UpdateProjectLink>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectLink$ {
    /** @deprecated use `UpdateProjectLink$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectLink, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectLink$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectLink$Outbound, z.ZodTypeDef, UpdateProjectLink>;
    /** @deprecated use `UpdateProjectLink$Outbound` instead. */
    type Outbound = UpdateProjectLink$Outbound;
}
export declare function updateProjectLinkToJSON(updateProjectLink: UpdateProjectLink): string;
export declare function updateProjectLinkFromJSON(jsonString: string): SafeParseResult<UpdateProjectLink, SDKValidationError>;
/** @internal */
export declare const UpdateProjectMicrofrontends2$inboundSchema: z.ZodType<UpdateProjectMicrofrontends2, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectMicrofrontends2$Outbound = {
    updatedAt: number;
    groupIds: Array<any>;
    enabled: boolean;
};
/** @internal */
export declare const UpdateProjectMicrofrontends2$outboundSchema: z.ZodType<UpdateProjectMicrofrontends2$Outbound, z.ZodTypeDef, UpdateProjectMicrofrontends2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectMicrofrontends2$ {
    /** @deprecated use `UpdateProjectMicrofrontends2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectMicrofrontends2, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectMicrofrontends2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectMicrofrontends2$Outbound, z.ZodTypeDef, UpdateProjectMicrofrontends2>;
    /** @deprecated use `UpdateProjectMicrofrontends2$Outbound` instead. */
    type Outbound = UpdateProjectMicrofrontends2$Outbound;
}
export declare function updateProjectMicrofrontends2ToJSON(updateProjectMicrofrontends2: UpdateProjectMicrofrontends2): string;
export declare function updateProjectMicrofrontends2FromJSON(jsonString: string): SafeParseResult<UpdateProjectMicrofrontends2, SDKValidationError>;
/** @internal */
export declare const UpdateProjectMicrofrontends1$inboundSchema: z.ZodType<UpdateProjectMicrofrontends1, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectMicrofrontends1$Outbound = {
    updatedAt: number;
    groupIds: Array<string>;
    enabled: boolean;
    isDefaultApp?: boolean | undefined;
    defaultRoute?: string | undefined;
    routeObservabilityToThisProject?: boolean | undefined;
};
/** @internal */
export declare const UpdateProjectMicrofrontends1$outboundSchema: z.ZodType<UpdateProjectMicrofrontends1$Outbound, z.ZodTypeDef, UpdateProjectMicrofrontends1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectMicrofrontends1$ {
    /** @deprecated use `UpdateProjectMicrofrontends1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectMicrofrontends1, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectMicrofrontends1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectMicrofrontends1$Outbound, z.ZodTypeDef, UpdateProjectMicrofrontends1>;
    /** @deprecated use `UpdateProjectMicrofrontends1$Outbound` instead. */
    type Outbound = UpdateProjectMicrofrontends1$Outbound;
}
export declare function updateProjectMicrofrontends1ToJSON(updateProjectMicrofrontends1: UpdateProjectMicrofrontends1): string;
export declare function updateProjectMicrofrontends1FromJSON(jsonString: string): SafeParseResult<UpdateProjectMicrofrontends1, SDKValidationError>;
/** @internal */
export declare const UpdateProjectMicrofrontends$inboundSchema: z.ZodType<UpdateProjectMicrofrontends, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectMicrofrontends$Outbound = UpdateProjectMicrofrontends1$Outbound | UpdateProjectMicrofrontends2$Outbound;
/** @internal */
export declare const UpdateProjectMicrofrontends$outboundSchema: z.ZodType<UpdateProjectMicrofrontends$Outbound, z.ZodTypeDef, UpdateProjectMicrofrontends>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectMicrofrontends$ {
    /** @deprecated use `UpdateProjectMicrofrontends$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectMicrofrontends, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectMicrofrontends$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectMicrofrontends$Outbound, z.ZodTypeDef, UpdateProjectMicrofrontends>;
    /** @deprecated use `UpdateProjectMicrofrontends$Outbound` instead. */
    type Outbound = UpdateProjectMicrofrontends$Outbound;
}
export declare function updateProjectMicrofrontendsToJSON(updateProjectMicrofrontends: UpdateProjectMicrofrontends): string;
export declare function updateProjectMicrofrontendsFromJSON(jsonString: string): SafeParseResult<UpdateProjectMicrofrontends, SDKValidationError>;
/** @internal */
export declare const UpdateProjectProjectsNodeVersion$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsNodeVersion>;
/** @internal */
export declare const UpdateProjectProjectsNodeVersion$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsNodeVersion>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsNodeVersion$ {
    /** @deprecated use `UpdateProjectProjectsNodeVersion$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly TwentyTwoDotX: "22.x";
        readonly TwentyDotX: "20.x";
        readonly EighteenDotX: "18.x";
        readonly SixteenDotX: "16.x";
        readonly FourteenDotX: "14.x";
        readonly TwelveDotX: "12.x";
        readonly TenDotX: "10.x";
        readonly EightDot10DotX: "8.10.x";
    }>;
    /** @deprecated use `UpdateProjectProjectsNodeVersion$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly TwentyTwoDotX: "22.x";
        readonly TwentyDotX: "20.x";
        readonly EighteenDotX: "18.x";
        readonly SixteenDotX: "16.x";
        readonly FourteenDotX: "14.x";
        readonly TwelveDotX: "12.x";
        readonly TenDotX: "10.x";
        readonly EightDot10DotX: "8.10.x";
    }>;
}
/** @internal */
export declare const UpdateProjectProjectsPaths$inboundSchema: z.ZodType<UpdateProjectProjectsPaths, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectProjectsPaths$Outbound = {
    value: string;
};
/** @internal */
export declare const UpdateProjectProjectsPaths$outboundSchema: z.ZodType<UpdateProjectProjectsPaths$Outbound, z.ZodTypeDef, UpdateProjectProjectsPaths>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsPaths$ {
    /** @deprecated use `UpdateProjectProjectsPaths$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectProjectsPaths, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectProjectsPaths$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectProjectsPaths$Outbound, z.ZodTypeDef, UpdateProjectProjectsPaths>;
    /** @deprecated use `UpdateProjectProjectsPaths$Outbound` instead. */
    type Outbound = UpdateProjectProjectsPaths$Outbound;
}
export declare function updateProjectProjectsPathsToJSON(updateProjectProjectsPaths: UpdateProjectProjectsPaths): string;
export declare function updateProjectProjectsPathsFromJSON(jsonString: string): SafeParseResult<UpdateProjectProjectsPaths, SDKValidationError>;
/** @internal */
export declare const UpdateProjectProjectsOptionsAllowlist$inboundSchema: z.ZodType<UpdateProjectProjectsOptionsAllowlist, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectProjectsOptionsAllowlist$Outbound = {
    paths: Array<UpdateProjectProjectsPaths$Outbound>;
};
/** @internal */
export declare const UpdateProjectProjectsOptionsAllowlist$outboundSchema: z.ZodType<UpdateProjectProjectsOptionsAllowlist$Outbound, z.ZodTypeDef, UpdateProjectProjectsOptionsAllowlist>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsOptionsAllowlist$ {
    /** @deprecated use `UpdateProjectProjectsOptionsAllowlist$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectProjectsOptionsAllowlist, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectProjectsOptionsAllowlist$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectProjectsOptionsAllowlist$Outbound, z.ZodTypeDef, UpdateProjectProjectsOptionsAllowlist>;
    /** @deprecated use `UpdateProjectProjectsOptionsAllowlist$Outbound` instead. */
    type Outbound = UpdateProjectProjectsOptionsAllowlist$Outbound;
}
export declare function updateProjectProjectsOptionsAllowlistToJSON(updateProjectProjectsOptionsAllowlist: UpdateProjectProjectsOptionsAllowlist): string;
export declare function updateProjectProjectsOptionsAllowlistFromJSON(jsonString: string): SafeParseResult<UpdateProjectProjectsOptionsAllowlist, SDKValidationError>;
/** @internal */
export declare const UpdateProjectProjectsPasswordProtection$inboundSchema: z.ZodType<UpdateProjectProjectsPasswordProtection, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectProjectsPasswordProtection$Outbound = {};
/** @internal */
export declare const UpdateProjectProjectsPasswordProtection$outboundSchema: z.ZodType<UpdateProjectProjectsPasswordProtection$Outbound, z.ZodTypeDef, UpdateProjectProjectsPasswordProtection>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsPasswordProtection$ {
    /** @deprecated use `UpdateProjectProjectsPasswordProtection$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectProjectsPasswordProtection, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectProjectsPasswordProtection$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectProjectsPasswordProtection$Outbound, z.ZodTypeDef, UpdateProjectProjectsPasswordProtection>;
    /** @deprecated use `UpdateProjectProjectsPasswordProtection$Outbound` instead. */
    type Outbound = UpdateProjectProjectsPasswordProtection$Outbound;
}
export declare function updateProjectProjectsPasswordProtectionToJSON(updateProjectProjectsPasswordProtection: UpdateProjectProjectsPasswordProtection): string;
export declare function updateProjectProjectsPasswordProtectionFromJSON(jsonString: string): SafeParseResult<UpdateProjectProjectsPasswordProtection, SDKValidationError>;
/** @internal */
export declare const UpdateProjectProjectsFunctionDefaultMemoryType$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsFunctionDefaultMemoryType>;
/** @internal */
export declare const UpdateProjectProjectsFunctionDefaultMemoryType$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsFunctionDefaultMemoryType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsFunctionDefaultMemoryType$ {
    /** @deprecated use `UpdateProjectProjectsFunctionDefaultMemoryType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly StandardLegacy: "standard_legacy";
        readonly Standard: "standard";
        readonly Performance: "performance";
    }>;
    /** @deprecated use `UpdateProjectProjectsFunctionDefaultMemoryType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly StandardLegacy: "standard_legacy";
        readonly Standard: "standard";
        readonly Performance: "performance";
    }>;
}
/** @internal */
export declare const UpdateProjectProjectsBuildMachineType$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsBuildMachineType>;
/** @internal */
export declare const UpdateProjectProjectsBuildMachineType$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsBuildMachineType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsBuildMachineType$ {
    /** @deprecated use `UpdateProjectProjectsBuildMachineType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Enhanced: "enhanced";
        readonly Turbo: "turbo";
    }>;
    /** @deprecated use `UpdateProjectProjectsBuildMachineType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Enhanced: "enhanced";
        readonly Turbo: "turbo";
    }>;
}
/** @internal */
export declare const UpdateProjectProjectsResourceConfig$inboundSchema: z.ZodType<UpdateProjectProjectsResourceConfig, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectProjectsResourceConfig$Outbound = {
    elasticConcurrencyEnabled?: boolean | undefined;
    fluid?: boolean | undefined;
    functionDefaultRegions: Array<string>;
    functionDefaultTimeout?: number | undefined;
    functionDefaultMemoryType?: string | undefined;
    functionZeroConfigFailover?: boolean | undefined;
    buildMachineType?: string | undefined;
    isNSNBDisabled?: boolean | undefined;
};
/** @internal */
export declare const UpdateProjectProjectsResourceConfig$outboundSchema: z.ZodType<UpdateProjectProjectsResourceConfig$Outbound, z.ZodTypeDef, UpdateProjectProjectsResourceConfig>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsResourceConfig$ {
    /** @deprecated use `UpdateProjectProjectsResourceConfig$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectProjectsResourceConfig, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectProjectsResourceConfig$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectProjectsResourceConfig$Outbound, z.ZodTypeDef, UpdateProjectProjectsResourceConfig>;
    /** @deprecated use `UpdateProjectProjectsResourceConfig$Outbound` instead. */
    type Outbound = UpdateProjectProjectsResourceConfig$Outbound;
}
export declare function updateProjectProjectsResourceConfigToJSON(updateProjectProjectsResourceConfig: UpdateProjectProjectsResourceConfig): string;
export declare function updateProjectProjectsResourceConfigFromJSON(jsonString: string): SafeParseResult<UpdateProjectProjectsResourceConfig, SDKValidationError>;
/** @internal */
export declare const UpdateProjectRollbackDescription$inboundSchema: z.ZodType<UpdateProjectRollbackDescription, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectRollbackDescription$Outbound = {
    userId: string;
    username: string;
    description: string;
    createdAt: number;
};
/** @internal */
export declare const UpdateProjectRollbackDescription$outboundSchema: z.ZodType<UpdateProjectRollbackDescription$Outbound, z.ZodTypeDef, UpdateProjectRollbackDescription>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectRollbackDescription$ {
    /** @deprecated use `UpdateProjectRollbackDescription$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectRollbackDescription, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectRollbackDescription$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectRollbackDescription$Outbound, z.ZodTypeDef, UpdateProjectRollbackDescription>;
    /** @deprecated use `UpdateProjectRollbackDescription$Outbound` instead. */
    type Outbound = UpdateProjectRollbackDescription$Outbound;
}
export declare function updateProjectRollbackDescriptionToJSON(updateProjectRollbackDescription: UpdateProjectRollbackDescription): string;
export declare function updateProjectRollbackDescriptionFromJSON(jsonString: string): SafeParseResult<UpdateProjectRollbackDescription, SDKValidationError>;
/** @internal */
export declare const UpdateProjectStages$inboundSchema: z.ZodType<UpdateProjectStages, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectStages$Outbound = {
    targetPercentage: number;
    requireApproval?: boolean | undefined;
    duration?: number | undefined;
};
/** @internal */
export declare const UpdateProjectStages$outboundSchema: z.ZodType<UpdateProjectStages$Outbound, z.ZodTypeDef, UpdateProjectStages>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectStages$ {
    /** @deprecated use `UpdateProjectStages$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectStages, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectStages$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectStages$Outbound, z.ZodTypeDef, UpdateProjectStages>;
    /** @deprecated use `UpdateProjectStages$Outbound` instead. */
    type Outbound = UpdateProjectStages$Outbound;
}
export declare function updateProjectStagesToJSON(updateProjectStages: UpdateProjectStages): string;
export declare function updateProjectStagesFromJSON(jsonString: string): SafeParseResult<UpdateProjectStages, SDKValidationError>;
/** @internal */
export declare const UpdateProjectRollingRelease$inboundSchema: z.ZodType<UpdateProjectRollingRelease, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectRollingRelease$Outbound = {
    target: string;
    stages?: Array<UpdateProjectStages$Outbound> | null | undefined;
    canaryResponseHeader?: boolean | undefined;
};
/** @internal */
export declare const UpdateProjectRollingRelease$outboundSchema: z.ZodType<UpdateProjectRollingRelease$Outbound, z.ZodTypeDef, UpdateProjectRollingRelease>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectRollingRelease$ {
    /** @deprecated use `UpdateProjectRollingRelease$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectRollingRelease, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectRollingRelease$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectRollingRelease$Outbound, z.ZodTypeDef, UpdateProjectRollingRelease>;
    /** @deprecated use `UpdateProjectRollingRelease$Outbound` instead. */
    type Outbound = UpdateProjectRollingRelease$Outbound;
}
export declare function updateProjectRollingReleaseToJSON(updateProjectRollingRelease: UpdateProjectRollingRelease): string;
export declare function updateProjectRollingReleaseFromJSON(jsonString: string): SafeParseResult<UpdateProjectRollingRelease, SDKValidationError>;
/** @internal */
export declare const UpdateProjectProjectsResponseFunctionDefaultMemoryType$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsResponseFunctionDefaultMemoryType>;
/** @internal */
export declare const UpdateProjectProjectsResponseFunctionDefaultMemoryType$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsResponseFunctionDefaultMemoryType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsResponseFunctionDefaultMemoryType$ {
    /** @deprecated use `UpdateProjectProjectsResponseFunctionDefaultMemoryType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly StandardLegacy: "standard_legacy";
        readonly Standard: "standard";
        readonly Performance: "performance";
    }>;
    /** @deprecated use `UpdateProjectProjectsResponseFunctionDefaultMemoryType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly StandardLegacy: "standard_legacy";
        readonly Standard: "standard";
        readonly Performance: "performance";
    }>;
}
/** @internal */
export declare const UpdateProjectProjectsResponseBuildMachineType$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsResponseBuildMachineType>;
/** @internal */
export declare const UpdateProjectProjectsResponseBuildMachineType$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsResponseBuildMachineType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsResponseBuildMachineType$ {
    /** @deprecated use `UpdateProjectProjectsResponseBuildMachineType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Enhanced: "enhanced";
        readonly Turbo: "turbo";
    }>;
    /** @deprecated use `UpdateProjectProjectsResponseBuildMachineType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Enhanced: "enhanced";
        readonly Turbo: "turbo";
    }>;
}
/** @internal */
export declare const UpdateProjectDefaultResourceConfig$inboundSchema: z.ZodType<UpdateProjectDefaultResourceConfig, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectDefaultResourceConfig$Outbound = {
    elasticConcurrencyEnabled?: boolean | undefined;
    fluid?: boolean | undefined;
    functionDefaultRegions: Array<string>;
    functionDefaultTimeout?: number | undefined;
    functionDefaultMemoryType?: string | undefined;
    functionZeroConfigFailover?: boolean | undefined;
    buildMachineType?: string | undefined;
    isNSNBDisabled?: boolean | undefined;
};
/** @internal */
export declare const UpdateProjectDefaultResourceConfig$outboundSchema: z.ZodType<UpdateProjectDefaultResourceConfig$Outbound, z.ZodTypeDef, UpdateProjectDefaultResourceConfig>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectDefaultResourceConfig$ {
    /** @deprecated use `UpdateProjectDefaultResourceConfig$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectDefaultResourceConfig, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectDefaultResourceConfig$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectDefaultResourceConfig$Outbound, z.ZodTypeDef, UpdateProjectDefaultResourceConfig>;
    /** @deprecated use `UpdateProjectDefaultResourceConfig$Outbound` instead. */
    type Outbound = UpdateProjectDefaultResourceConfig$Outbound;
}
export declare function updateProjectDefaultResourceConfigToJSON(updateProjectDefaultResourceConfig: UpdateProjectDefaultResourceConfig): string;
export declare function updateProjectDefaultResourceConfigFromJSON(jsonString: string): SafeParseResult<UpdateProjectDefaultResourceConfig, SDKValidationError>;
/** @internal */
export declare const UpdateProjectProjectsResponseDeploymentType$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsResponseDeploymentType>;
/** @internal */
export declare const UpdateProjectProjectsResponseDeploymentType$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsResponseDeploymentType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsResponseDeploymentType$ {
    /** @deprecated use `UpdateProjectProjectsResponseDeploymentType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Preview: "preview";
        readonly All: "all";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
    /** @deprecated use `UpdateProjectProjectsResponseDeploymentType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Preview: "preview";
        readonly All: "all";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
}
/** @internal */
export declare const UpdateProjectProjectsSsoProtection$inboundSchema: z.ZodType<UpdateProjectProjectsSsoProtection, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectProjectsSsoProtection$Outbound = {
    deploymentType: string;
};
/** @internal */
export declare const UpdateProjectProjectsSsoProtection$outboundSchema: z.ZodType<UpdateProjectProjectsSsoProtection$Outbound, z.ZodTypeDef, UpdateProjectProjectsSsoProtection>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsSsoProtection$ {
    /** @deprecated use `UpdateProjectProjectsSsoProtection$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectProjectsSsoProtection, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectProjectsSsoProtection$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectProjectsSsoProtection$Outbound, z.ZodTypeDef, UpdateProjectProjectsSsoProtection>;
    /** @deprecated use `UpdateProjectProjectsSsoProtection$Outbound` instead. */
    type Outbound = UpdateProjectProjectsSsoProtection$Outbound;
}
export declare function updateProjectProjectsSsoProtectionToJSON(updateProjectProjectsSsoProtection: UpdateProjectProjectsSsoProtection): string;
export declare function updateProjectProjectsSsoProtectionFromJSON(jsonString: string): SafeParseResult<UpdateProjectProjectsSsoProtection, SDKValidationError>;
/** @internal */
export declare const UpdateProjectProjectsAliasAssigned$inboundSchema: z.ZodType<UpdateProjectProjectsAliasAssigned, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectProjectsAliasAssigned$Outbound = number | boolean;
/** @internal */
export declare const UpdateProjectProjectsAliasAssigned$outboundSchema: z.ZodType<UpdateProjectProjectsAliasAssigned$Outbound, z.ZodTypeDef, UpdateProjectProjectsAliasAssigned>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsAliasAssigned$ {
    /** @deprecated use `UpdateProjectProjectsAliasAssigned$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectProjectsAliasAssigned, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectProjectsAliasAssigned$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectProjectsAliasAssigned$Outbound, z.ZodTypeDef, UpdateProjectProjectsAliasAssigned>;
    /** @deprecated use `UpdateProjectProjectsAliasAssigned$Outbound` instead. */
    type Outbound = UpdateProjectProjectsAliasAssigned$Outbound;
}
export declare function updateProjectProjectsAliasAssignedToJSON(updateProjectProjectsAliasAssigned: UpdateProjectProjectsAliasAssigned): string;
export declare function updateProjectProjectsAliasAssignedFromJSON(jsonString: string): SafeParseResult<UpdateProjectProjectsAliasAssigned, SDKValidationError>;
/** @internal */
export declare const UpdateProjectProjectsAliasError$inboundSchema: z.ZodType<UpdateProjectProjectsAliasError, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectProjectsAliasError$Outbound = {
    code: string;
    message: string;
};
/** @internal */
export declare const UpdateProjectProjectsAliasError$outboundSchema: z.ZodType<UpdateProjectProjectsAliasError$Outbound, z.ZodTypeDef, UpdateProjectProjectsAliasError>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsAliasError$ {
    /** @deprecated use `UpdateProjectProjectsAliasError$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectProjectsAliasError, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectProjectsAliasError$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectProjectsAliasError$Outbound, z.ZodTypeDef, UpdateProjectProjectsAliasError>;
    /** @deprecated use `UpdateProjectProjectsAliasError$Outbound` instead. */
    type Outbound = UpdateProjectProjectsAliasError$Outbound;
}
export declare function updateProjectProjectsAliasErrorToJSON(updateProjectProjectsAliasError: UpdateProjectProjectsAliasError): string;
export declare function updateProjectProjectsAliasErrorFromJSON(jsonString: string): SafeParseResult<UpdateProjectProjectsAliasError, SDKValidationError>;
/** @internal */
export declare const UpdateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType>;
/** @internal */
export declare const UpdateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$ {
    /** @deprecated use `UpdateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly EndsWith: "endsWith";
        readonly StartsWith: "startsWith";
        readonly Equals: "equals";
    }>;
    /** @deprecated use `UpdateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly EndsWith: "endsWith";
        readonly StartsWith: "startsWith";
        readonly Equals: "equals";
    }>;
}
/** @internal */
export declare const UpdateProjectProjectsResponseBranchMatcher$inboundSchema: z.ZodType<UpdateProjectProjectsResponseBranchMatcher, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectProjectsResponseBranchMatcher$Outbound = {
    type: string;
    pattern: string;
};
/** @internal */
export declare const UpdateProjectProjectsResponseBranchMatcher$outboundSchema: z.ZodType<UpdateProjectProjectsResponseBranchMatcher$Outbound, z.ZodTypeDef, UpdateProjectProjectsResponseBranchMatcher>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsResponseBranchMatcher$ {
    /** @deprecated use `UpdateProjectProjectsResponseBranchMatcher$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectProjectsResponseBranchMatcher, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectProjectsResponseBranchMatcher$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectProjectsResponseBranchMatcher$Outbound, z.ZodTypeDef, UpdateProjectProjectsResponseBranchMatcher>;
    /** @deprecated use `UpdateProjectProjectsResponseBranchMatcher$Outbound` instead. */
    type Outbound = UpdateProjectProjectsResponseBranchMatcher$Outbound;
}
export declare function updateProjectProjectsResponseBranchMatcherToJSON(updateProjectProjectsResponseBranchMatcher: UpdateProjectProjectsResponseBranchMatcher): string;
export declare function updateProjectProjectsResponseBranchMatcherFromJSON(jsonString: string): SafeParseResult<UpdateProjectProjectsResponseBranchMatcher, SDKValidationError>;
/** @internal */
export declare const UpdateProjectProjectsBuilds$inboundSchema: z.ZodType<UpdateProjectProjectsBuilds, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectProjectsBuilds$Outbound = {
    use: string;
    src?: string | undefined;
    dest?: string | undefined;
};
/** @internal */
export declare const UpdateProjectProjectsBuilds$outboundSchema: z.ZodType<UpdateProjectProjectsBuilds$Outbound, z.ZodTypeDef, UpdateProjectProjectsBuilds>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsBuilds$ {
    /** @deprecated use `UpdateProjectProjectsBuilds$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectProjectsBuilds, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectProjectsBuilds$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectProjectsBuilds$Outbound, z.ZodTypeDef, UpdateProjectProjectsBuilds>;
    /** @deprecated use `UpdateProjectProjectsBuilds$Outbound` instead. */
    type Outbound = UpdateProjectProjectsBuilds$Outbound;
}
export declare function updateProjectProjectsBuildsToJSON(updateProjectProjectsBuilds: UpdateProjectProjectsBuilds): string;
export declare function updateProjectProjectsBuildsFromJSON(jsonString: string): SafeParseResult<UpdateProjectProjectsBuilds, SDKValidationError>;
/** @internal */
export declare const UpdateProjectProjectsChecksConclusion$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsChecksConclusion>;
/** @internal */
export declare const UpdateProjectProjectsChecksConclusion$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsChecksConclusion>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsChecksConclusion$ {
    /** @deprecated use `UpdateProjectProjectsChecksConclusion$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Succeeded: "succeeded";
        readonly Failed: "failed";
        readonly Skipped: "skipped";
        readonly Canceled: "canceled";
    }>;
    /** @deprecated use `UpdateProjectProjectsChecksConclusion$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Succeeded: "succeeded";
        readonly Failed: "failed";
        readonly Skipped: "skipped";
        readonly Canceled: "canceled";
    }>;
}
/** @internal */
export declare const UpdateProjectProjectsChecksState$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsChecksState>;
/** @internal */
export declare const UpdateProjectProjectsChecksState$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsChecksState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsChecksState$ {
    /** @deprecated use `UpdateProjectProjectsChecksState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Registered: "registered";
        readonly Running: "running";
        readonly Completed: "completed";
    }>;
    /** @deprecated use `UpdateProjectProjectsChecksState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Registered: "registered";
        readonly Running: "running";
        readonly Completed: "completed";
    }>;
}
/** @internal */
export declare const UpdateProjectProjectsCreator$inboundSchema: z.ZodType<UpdateProjectProjectsCreator, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectProjectsCreator$Outbound = {
    email: string;
    githubLogin?: string | undefined;
    gitlabLogin?: string | undefined;
    uid: string;
    username: string;
};
/** @internal */
export declare const UpdateProjectProjectsCreator$outboundSchema: z.ZodType<UpdateProjectProjectsCreator$Outbound, z.ZodTypeDef, UpdateProjectProjectsCreator>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsCreator$ {
    /** @deprecated use `UpdateProjectProjectsCreator$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectProjectsCreator, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectProjectsCreator$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectProjectsCreator$Outbound, z.ZodTypeDef, UpdateProjectProjectsCreator>;
    /** @deprecated use `UpdateProjectProjectsCreator$Outbound` instead. */
    type Outbound = UpdateProjectProjectsCreator$Outbound;
}
export declare function updateProjectProjectsCreatorToJSON(updateProjectProjectsCreator: UpdateProjectProjectsCreator): string;
export declare function updateProjectProjectsCreatorFromJSON(jsonString: string): SafeParseResult<UpdateProjectProjectsCreator, SDKValidationError>;
/** @internal */
export declare const UpdateProjectProjectsOidcTokenClaims$inboundSchema: z.ZodType<UpdateProjectProjectsOidcTokenClaims, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectProjectsOidcTokenClaims$Outbound = {
    iss: string;
    sub: string;
    scope: string;
    aud: string;
    owner: string;
    owner_id: string;
    project: string;
    project_id: string;
    environment: string;
};
/** @internal */
export declare const UpdateProjectProjectsOidcTokenClaims$outboundSchema: z.ZodType<UpdateProjectProjectsOidcTokenClaims$Outbound, z.ZodTypeDef, UpdateProjectProjectsOidcTokenClaims>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsOidcTokenClaims$ {
    /** @deprecated use `UpdateProjectProjectsOidcTokenClaims$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectProjectsOidcTokenClaims, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectProjectsOidcTokenClaims$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectProjectsOidcTokenClaims$Outbound, z.ZodTypeDef, UpdateProjectProjectsOidcTokenClaims>;
    /** @deprecated use `UpdateProjectProjectsOidcTokenClaims$Outbound` instead. */
    type Outbound = UpdateProjectProjectsOidcTokenClaims$Outbound;
}
export declare function updateProjectProjectsOidcTokenClaimsToJSON(updateProjectProjectsOidcTokenClaims: UpdateProjectProjectsOidcTokenClaims): string;
export declare function updateProjectProjectsOidcTokenClaimsFromJSON(jsonString: string): SafeParseResult<UpdateProjectProjectsOidcTokenClaims, SDKValidationError>;
/** @internal */
export declare const UpdateProjectProjectsPlan$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsPlan>;
/** @internal */
export declare const UpdateProjectProjectsPlan$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsPlan>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsPlan$ {
    /** @deprecated use `UpdateProjectProjectsPlan$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Pro: "pro";
        readonly Enterprise: "enterprise";
        readonly Hobby: "hobby";
    }>;
    /** @deprecated use `UpdateProjectProjectsPlan$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Pro: "pro";
        readonly Enterprise: "enterprise";
        readonly Hobby: "hobby";
    }>;
}
/** @internal */
export declare const UpdateProjectProjectsReadyState$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsReadyState>;
/** @internal */
export declare const UpdateProjectProjectsReadyState$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsReadyState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsReadyState$ {
    /** @deprecated use `UpdateProjectProjectsReadyState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Queued: "QUEUED";
        readonly Ready: "READY";
        readonly Canceled: "CANCELED";
    }>;
    /** @deprecated use `UpdateProjectProjectsReadyState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Queued: "QUEUED";
        readonly Ready: "READY";
        readonly Canceled: "CANCELED";
    }>;
}
/** @internal */
export declare const UpdateProjectProjectsReadySubstate$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsReadySubstate>;
/** @internal */
export declare const UpdateProjectProjectsReadySubstate$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsReadySubstate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsReadySubstate$ {
    /** @deprecated use `UpdateProjectProjectsReadySubstate$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Staged: "STAGED";
        readonly Rolling: "ROLLING";
        readonly Promoted: "PROMOTED";
    }>;
    /** @deprecated use `UpdateProjectProjectsReadySubstate$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Staged: "STAGED";
        readonly Rolling: "ROLLING";
        readonly Promoted: "PROMOTED";
    }>;
}
/** @internal */
export declare const UpdateProjectProjectsResponse200Type$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsResponse200Type>;
/** @internal */
export declare const UpdateProjectProjectsResponse200Type$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsResponse200Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsResponse200Type$ {
    /** @deprecated use `UpdateProjectProjectsResponse200Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Lambdas: "LAMBDAS";
    }>;
    /** @deprecated use `UpdateProjectProjectsResponse200Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Lambdas: "LAMBDAS";
    }>;
}
/** @internal */
export declare const UpdateProjectTargets$inboundSchema: z.ZodType<UpdateProjectTargets, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectTargets$Outbound = {
    id: string;
    alias?: Array<string> | undefined;
    aliasAssigned?: number | boolean | null | undefined;
    aliasError?: UpdateProjectProjectsAliasError$Outbound | null | undefined;
    aliasFinal?: string | null | undefined;
    automaticAliases?: Array<string> | undefined;
    branchMatcher?: UpdateProjectProjectsResponseBranchMatcher$Outbound | undefined;
    buildingAt?: number | undefined;
    builds?: Array<UpdateProjectProjectsBuilds$Outbound> | undefined;
    checksConclusion?: string | undefined;
    checksState?: string | undefined;
    connectBuildsEnabled?: boolean | undefined;
    connectConfigurationId?: string | undefined;
    createdAt: number;
    createdIn: string;
    creator: UpdateProjectProjectsCreator$Outbound | null;
    deletedAt?: number | undefined;
    deploymentHostname: string;
    forced?: boolean | undefined;
    name: string;
    meta?: {
        [k: string]: string;
    } | undefined;
    monorepoManager?: string | null | undefined;
    oidcTokenClaims?: UpdateProjectProjectsOidcTokenClaims$Outbound | undefined;
    plan: string;
    previewCommentsEnabled?: boolean | undefined;
    private: boolean;
    readyAt?: number | undefined;
    readyState: string;
    readySubstate?: string | undefined;
    requestedAt?: number | undefined;
    target?: string | null | undefined;
    teamId?: string | null | undefined;
    type: string;
    url: string;
    userId: string;
    withCache?: boolean | undefined;
};
/** @internal */
export declare const UpdateProjectTargets$outboundSchema: z.ZodType<UpdateProjectTargets$Outbound, z.ZodTypeDef, UpdateProjectTargets>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectTargets$ {
    /** @deprecated use `UpdateProjectTargets$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectTargets, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectTargets$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectTargets$Outbound, z.ZodTypeDef, UpdateProjectTargets>;
    /** @deprecated use `UpdateProjectTargets$Outbound` instead. */
    type Outbound = UpdateProjectTargets$Outbound;
}
export declare function updateProjectTargetsToJSON(updateProjectTargets: UpdateProjectTargets): string;
export declare function updateProjectTargetsFromJSON(jsonString: string): SafeParseResult<UpdateProjectTargets, SDKValidationError>;
/** @internal */
export declare const UpdateProjectPermissions$inboundSchema: z.ZodType<UpdateProjectPermissions, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectPermissions$Outbound = {
    aliasProject?: Array<string> | undefined;
    aliasProtectionBypass?: Array<string> | undefined;
    buildMachine?: Array<string> | undefined;
    productionAliasProtectionBypass?: Array<string> | undefined;
    connectConfigurationLink?: Array<string> | undefined;
    dataCacheNamespace?: Array<string> | undefined;
    deployment?: Array<string> | undefined;
    deploymentBuildLogs?: Array<string> | undefined;
    deploymentCheck?: Array<string> | undefined;
    deploymentCheckPreview?: Array<string> | undefined;
    deploymentCheckReRunFromProductionBranch?: Array<string> | undefined;
    deploymentProductionGit?: Array<string> | undefined;
    deploymentV0?: Array<string> | undefined;
    deploymentPreview?: Array<string> | undefined;
    deploymentPrivate?: Array<string> | undefined;
    deploymentPromote?: Array<string> | undefined;
    deploymentRollback?: Array<string> | undefined;
    edgeCacheNamespace?: Array<string> | undefined;
    environments?: Array<string> | undefined;
    logs?: Array<string> | undefined;
    logsPreset?: Array<string> | undefined;
    passwordProtection?: Array<string> | undefined;
    optionsAllowlist?: Array<string> | undefined;
    job?: Array<string> | undefined;
    observabilityData?: Array<string> | undefined;
    onDemandBuild?: Array<string> | undefined;
    onDemandConcurrency?: Array<string> | undefined;
    project?: Array<string> | undefined;
    projectFromV0?: Array<string> | undefined;
    projectAccessGroup?: Array<string> | undefined;
    projectAnalyticsSampling?: Array<string> | undefined;
    projectCheck?: Array<string> | undefined;
    projectCheckRun?: Array<string> | undefined;
    projectDeploymentHook?: Array<string> | undefined;
    projectDomain?: Array<string> | undefined;
    projectDomainMove?: Array<string> | undefined;
    projectDomainCheckConfig?: Array<string> | undefined;
    projectEnvVars?: Array<string> | undefined;
    projectEnvVarsProduction?: Array<string> | undefined;
    projectEnvVarsUnownedByIntegration?: Array<string> | undefined;
    projectFlags?: Array<string> | undefined;
    projectId?: Array<string> | undefined;
    projectIntegrationConfiguration?: Array<string> | undefined;
    projectLink?: Array<string> | undefined;
    projectMember?: Array<string> | undefined;
    projectMonitoring?: Array<string> | undefined;
    projectPermissions?: Array<string> | undefined;
    projectProductionBranch?: Array<string> | undefined;
    projectTransfer?: Array<string> | undefined;
    projectTransferOut?: Array<string> | undefined;
    projectProtectionBypass?: Array<string> | undefined;
    projectUsage?: Array<string> | undefined;
    projectAnalyticsUsage?: Array<string> | undefined;
    projectSupportCase?: Array<string> | undefined;
    projectSupportCaseComment?: Array<string> | undefined;
    projectDeploymentExpiration?: Array<string> | undefined;
    projectRollingRelease?: Array<string> | undefined;
    projectTier?: Array<string> | undefined;
    projectOIDCToken?: Array<string> | undefined;
    seawallConfig?: Array<string> | undefined;
    skewProtection?: Array<string> | undefined;
    analytics?: Array<string> | undefined;
    trustedIps?: Array<string> | undefined;
    v0Chat?: Array<string> | undefined;
    webAnalytics?: Array<string> | undefined;
    sharedEnvVarConnection?: Array<string> | undefined;
    sonar?: Array<string> | undefined;
    oauth2Connection?: Array<string> | undefined;
    user?: Array<string> | undefined;
    userConnection?: Array<string> | undefined;
    userSudo?: Array<string> | undefined;
    webAuthn?: Array<string> | undefined;
    accessGroup?: Array<string> | undefined;
    aliasGlobal?: Array<string> | undefined;
    analyticsSampling?: Array<string> | undefined;
    analyticsUsage?: Array<string> | undefined;
    auditLog?: Array<string> | undefined;
    billingAddress?: Array<string> | undefined;
    billingInformation?: Array<string> | undefined;
    billingInvoice?: Array<string> | undefined;
    billingInvoiceEmailRecipient?: Array<string> | undefined;
    billingInvoiceLanguage?: Array<string> | undefined;
    billingPlan?: Array<string> | undefined;
    billingPurchaseOrder?: Array<string> | undefined;
    billingRefund?: Array<string> | undefined;
    billingTaxId?: Array<string> | undefined;
    blob?: Array<string> | undefined;
    budget?: Array<string> | undefined;
    cacheArtifact?: Array<string> | undefined;
    cacheArtifactUsageEvent?: Array<string> | undefined;
    codeChecks?: Array<string> | undefined;
    concurrentBuilds?: Array<string> | undefined;
    connect?: Array<string> | undefined;
    connectConfiguration?: Array<string> | undefined;
    defaultDeploymentProtection?: Array<string> | undefined;
    domain?: Array<string> | undefined;
    domainAcceptDelegation?: Array<string> | undefined;
    domainAuthCodes?: Array<string> | undefined;
    domainCertificate?: Array<string> | undefined;
    domainCheckConfig?: Array<string> | undefined;
    domainMove?: Array<string> | undefined;
    domainPurchase?: Array<string> | undefined;
    domainRecord?: Array<string> | undefined;
    domainTransferIn?: Array<string> | undefined;
    event?: Array<string> | undefined;
    ownEvent?: Array<string> | undefined;
    sensitiveEnvironmentVariablePolicy?: Array<string> | undefined;
    fileUpload?: Array<string> | undefined;
    flagsExplorerSubscription?: Array<string> | undefined;
    gitRepository?: Array<string> | undefined;
    ipBlocking?: Array<string> | undefined;
    imageOptimizationNewPrice?: Array<string> | undefined;
    integration?: Array<string> | undefined;
    integrationAccount?: Array<string> | undefined;
    integrationConfiguration?: Array<string> | undefined;
    integrationConfigurationTransfer?: Array<string> | undefined;
    integrationConfigurationProjects?: Array<string> | undefined;
    integrationVercelConfigurationOverride?: Array<string> | undefined;
    integrationConfigurationRole?: Array<string> | undefined;
    integrationSSOSession?: Array<string> | undefined;
    integrationResource?: Array<string> | undefined;
    integrationEvent?: Array<string> | undefined;
    integrationResourceSecrets?: Array<string> | undefined;
    integrationDeploymentAction?: Array<string> | undefined;
    marketplaceInstallationMember?: Array<string> | undefined;
    marketplaceBillingData?: Array<string> | undefined;
    marketplaceInvoice?: Array<string> | undefined;
    marketplaceSettings?: Array<string> | undefined;
    marketplaceExperimentationItem?: Array<string> | undefined;
    marketplaceExperimentationEdgeConfigData?: Array<string> | undefined;
    jobGlobal?: Array<string> | undefined;
    drain?: Array<string> | undefined;
    logDrain?: Array<string> | undefined;
    traceDrain?: Array<string> | undefined;
    Monitoring?: Array<string> | undefined;
    monitoringSettings?: Array<string> | undefined;
    monitoringQuery?: Array<string> | undefined;
    monitoringChart?: Array<string> | undefined;
    monitoringAlert?: Array<string> | undefined;
    notificationDeploymentFailed?: Array<string> | undefined;
    notificationDomainConfiguration?: Array<string> | undefined;
    notificationDomainExpire?: Array<string> | undefined;
    notificationDomainMoved?: Array<string> | undefined;
    notificationDomainPurchase?: Array<string> | undefined;
    notificationDomainRenewal?: Array<string> | undefined;
    notificationDomainTransfer?: Array<string> | undefined;
    notificationDomainUnverified?: Array<string> | undefined;
    NotificationMonitoringAlert?: Array<string> | undefined;
    notificationPaymentFailed?: Array<string> | undefined;
    notificationUsageAlert?: Array<string> | undefined;
    notificationPreferences?: Array<string> | undefined;
    notificationCustomerBudget?: Array<string> | undefined;
    notificationStatementOfReasons?: Array<string> | undefined;
    observabilityConfiguration?: Array<string> | undefined;
    alerts?: Array<string> | undefined;
    observabilityNotebook?: Array<string> | undefined;
    observabilityFunnel?: Array<string> | undefined;
    openTelemetryEndpoint?: Array<string> | undefined;
    vercelAppInstallation?: Array<string> | undefined;
    vercelAppInstallationRequest?: Array<string> | undefined;
    paymentMethod?: Array<string> | undefined;
    permissions?: Array<string> | undefined;
    postgres?: Array<string> | undefined;
    previewDeploymentSuffix?: Array<string> | undefined;
    proTrialOnboarding?: Array<string> | undefined;
    sharedEnvVars?: Array<string> | undefined;
    sharedEnvVarsProduction?: Array<string> | undefined;
    space?: Array<string> | undefined;
    spaceRun?: Array<string> | undefined;
    passwordProtectionInvoiceItem?: Array<string> | undefined;
    rateLimit?: Array<string> | undefined;
    redis?: Array<string> | undefined;
    repository?: Array<string> | undefined;
    remoteCaching?: Array<string> | undefined;
    samlConfig?: Array<string> | undefined;
    secret?: Array<string> | undefined;
    redisStoreTokenSet?: Array<string> | undefined;
    blobStoreTokenSet?: Array<string> | undefined;
    postgresStoreTokenSet?: Array<string> | undefined;
    integrationStoreTokenSet?: Array<string> | undefined;
    integrationResourceReplCommand?: Array<string> | undefined;
    storeTransfer?: Array<string> | undefined;
    supportCase?: Array<string> | undefined;
    supportCaseComment?: Array<string> | undefined;
    dataCacheBillingSettings?: Array<string> | undefined;
    team?: Array<string> | undefined;
    teamAccessRequest?: Array<string> | undefined;
    teamFellowMembership?: Array<string> | undefined;
    teamGitExclusivity?: Array<string> | undefined;
    teamInvite?: Array<string> | undefined;
    teamInviteCode?: Array<string> | undefined;
    teamJoin?: Array<string> | undefined;
    teamMemberMfaStatus?: Array<string> | undefined;
    teamMicrofrontends?: Array<string> | undefined;
    teamOwnMembership?: Array<string> | undefined;
    teamOwnMembershipDisconnectSAML?: Array<string> | undefined;
    token?: Array<string> | undefined;
    usage?: Array<string> | undefined;
    usageCycle?: Array<string> | undefined;
    vpcPeeringConnection?: Array<string> | undefined;
    webAnalyticsPlan?: Array<string> | undefined;
    edgeConfig?: Array<string> | undefined;
    edgeConfigItem?: Array<string> | undefined;
    edgeConfigSchema?: Array<string> | undefined;
    edgeConfigToken?: Array<string> | undefined;
    webhook?: Array<string> | undefined;
    "webhook-event"?: Array<string> | undefined;
    endpointVerification?: Array<string> | undefined;
    projectTransferIn?: Array<string> | undefined;
    oauth2Application?: Array<string> | undefined;
    vercelRun?: Array<string> | undefined;
    vercelRunExec?: Array<string> | undefined;
    apiKey?: Array<string> | undefined;
    apiKeyOwnedBySelf?: Array<string> | undefined;
};
/** @internal */
export declare const UpdateProjectPermissions$outboundSchema: z.ZodType<UpdateProjectPermissions$Outbound, z.ZodTypeDef, UpdateProjectPermissions>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectPermissions$ {
    /** @deprecated use `UpdateProjectPermissions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectPermissions, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectPermissions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectPermissions$Outbound, z.ZodTypeDef, UpdateProjectPermissions>;
    /** @deprecated use `UpdateProjectPermissions$Outbound` instead. */
    type Outbound = UpdateProjectPermissions$Outbound;
}
export declare function updateProjectPermissionsToJSON(updateProjectPermissions: UpdateProjectPermissions): string;
export declare function updateProjectPermissionsFromJSON(jsonString: string): SafeParseResult<UpdateProjectPermissions, SDKValidationError>;
/** @internal */
export declare const UpdateProjectLastRollbackTarget$inboundSchema: z.ZodType<UpdateProjectLastRollbackTarget, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectLastRollbackTarget$Outbound = {};
/** @internal */
export declare const UpdateProjectLastRollbackTarget$outboundSchema: z.ZodType<UpdateProjectLastRollbackTarget$Outbound, z.ZodTypeDef, UpdateProjectLastRollbackTarget>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectLastRollbackTarget$ {
    /** @deprecated use `UpdateProjectLastRollbackTarget$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectLastRollbackTarget, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectLastRollbackTarget$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectLastRollbackTarget$Outbound, z.ZodTypeDef, UpdateProjectLastRollbackTarget>;
    /** @deprecated use `UpdateProjectLastRollbackTarget$Outbound` instead. */
    type Outbound = UpdateProjectLastRollbackTarget$Outbound;
}
export declare function updateProjectLastRollbackTargetToJSON(updateProjectLastRollbackTarget: UpdateProjectLastRollbackTarget): string;
export declare function updateProjectLastRollbackTargetFromJSON(jsonString: string): SafeParseResult<UpdateProjectLastRollbackTarget, SDKValidationError>;
/** @internal */
export declare const UpdateProjectJobStatus$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectJobStatus>;
/** @internal */
export declare const UpdateProjectJobStatus$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectJobStatus>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectJobStatus$ {
    /** @deprecated use `UpdateProjectJobStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Succeeded: "succeeded";
        readonly Failed: "failed";
        readonly Skipped: "skipped";
        readonly Pending: "pending";
        readonly InProgress: "in-progress";
    }>;
    /** @deprecated use `UpdateProjectJobStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Succeeded: "succeeded";
        readonly Failed: "failed";
        readonly Skipped: "skipped";
        readonly Pending: "pending";
        readonly InProgress: "in-progress";
    }>;
}
/** @internal */
export declare const UpdateProjectProjectsResponse200ApplicationJSONType$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsResponse200ApplicationJSONType>;
/** @internal */
export declare const UpdateProjectProjectsResponse200ApplicationJSONType$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsResponse200ApplicationJSONType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsResponse200ApplicationJSONType$ {
    /** @deprecated use `UpdateProjectProjectsResponse200ApplicationJSONType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Promote: "promote";
        readonly Rollback: "rollback";
    }>;
    /** @deprecated use `UpdateProjectProjectsResponse200ApplicationJSONType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Promote: "promote";
        readonly Rollback: "rollback";
    }>;
}
/** @internal */
export declare const UpdateProjectLastAliasRequest$inboundSchema: z.ZodType<UpdateProjectLastAliasRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectLastAliasRequest$Outbound = {
    fromDeploymentId: string;
    toDeploymentId: string;
    fromRollingReleaseId?: string | undefined;
    jobStatus: string;
    requestedAt: number;
    type: string;
};
/** @internal */
export declare const UpdateProjectLastAliasRequest$outboundSchema: z.ZodType<UpdateProjectLastAliasRequest$Outbound, z.ZodTypeDef, UpdateProjectLastAliasRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectLastAliasRequest$ {
    /** @deprecated use `UpdateProjectLastAliasRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectLastAliasRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectLastAliasRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectLastAliasRequest$Outbound, z.ZodTypeDef, UpdateProjectLastAliasRequest>;
    /** @deprecated use `UpdateProjectLastAliasRequest$Outbound` instead. */
    type Outbound = UpdateProjectLastAliasRequest$Outbound;
}
export declare function updateProjectLastAliasRequestToJSON(updateProjectLastAliasRequest: UpdateProjectLastAliasRequest): string;
export declare function updateProjectLastAliasRequestFromJSON(jsonString: string): SafeParseResult<UpdateProjectLastAliasRequest, SDKValidationError>;
/** @internal */
export declare const UpdateProjectProtectionBypassProjectsScope$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectProtectionBypassProjectsScope>;
/** @internal */
export declare const UpdateProjectProtectionBypassProjectsScope$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectProtectionBypassProjectsScope>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProtectionBypassProjectsScope$ {
    /** @deprecated use `UpdateProjectProtectionBypassProjectsScope$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly AutomationBypass: "automation-bypass";
    }>;
    /** @deprecated use `UpdateProjectProtectionBypassProjectsScope$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly AutomationBypass: "automation-bypass";
    }>;
}
/** @internal */
export declare const UpdateProjectProtectionBypass2$inboundSchema: z.ZodType<UpdateProjectProtectionBypass2, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectProtectionBypass2$Outbound = {
    createdAt: number;
    createdBy: string;
    scope: string;
};
/** @internal */
export declare const UpdateProjectProtectionBypass2$outboundSchema: z.ZodType<UpdateProjectProtectionBypass2$Outbound, z.ZodTypeDef, UpdateProjectProtectionBypass2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProtectionBypass2$ {
    /** @deprecated use `UpdateProjectProtectionBypass2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectProtectionBypass2, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectProtectionBypass2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectProtectionBypass2$Outbound, z.ZodTypeDef, UpdateProjectProtectionBypass2>;
    /** @deprecated use `UpdateProjectProtectionBypass2$Outbound` instead. */
    type Outbound = UpdateProjectProtectionBypass2$Outbound;
}
export declare function updateProjectProtectionBypass2ToJSON(updateProjectProtectionBypass2: UpdateProjectProtectionBypass2): string;
export declare function updateProjectProtectionBypass2FromJSON(jsonString: string): SafeParseResult<UpdateProjectProtectionBypass2, SDKValidationError>;
/** @internal */
export declare const UpdateProjectProtectionBypassScope$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectProtectionBypassScope>;
/** @internal */
export declare const UpdateProjectProtectionBypassScope$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectProtectionBypassScope>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProtectionBypassScope$ {
    /** @deprecated use `UpdateProjectProtectionBypassScope$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly IntegrationAutomationBypass: "integration-automation-bypass";
    }>;
    /** @deprecated use `UpdateProjectProtectionBypassScope$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly IntegrationAutomationBypass: "integration-automation-bypass";
    }>;
}
/** @internal */
export declare const UpdateProjectProtectionBypass1$inboundSchema: z.ZodType<UpdateProjectProtectionBypass1, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectProtectionBypass1$Outbound = {
    createdAt: number;
    createdBy: string;
    scope: string;
    integrationId: string;
    configurationId: string;
};
/** @internal */
export declare const UpdateProjectProtectionBypass1$outboundSchema: z.ZodType<UpdateProjectProtectionBypass1$Outbound, z.ZodTypeDef, UpdateProjectProtectionBypass1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProtectionBypass1$ {
    /** @deprecated use `UpdateProjectProtectionBypass1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectProtectionBypass1, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectProtectionBypass1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectProtectionBypass1$Outbound, z.ZodTypeDef, UpdateProjectProtectionBypass1>;
    /** @deprecated use `UpdateProjectProtectionBypass1$Outbound` instead. */
    type Outbound = UpdateProjectProtectionBypass1$Outbound;
}
export declare function updateProjectProtectionBypass1ToJSON(updateProjectProtectionBypass1: UpdateProjectProtectionBypass1): string;
export declare function updateProjectProtectionBypass1FromJSON(jsonString: string): SafeParseResult<UpdateProjectProtectionBypass1, SDKValidationError>;
/** @internal */
export declare const UpdateProjectProtectionBypass$inboundSchema: z.ZodType<UpdateProjectProtectionBypass, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectProtectionBypass$Outbound = UpdateProjectProtectionBypass1$Outbound | UpdateProjectProtectionBypass2$Outbound;
/** @internal */
export declare const UpdateProjectProtectionBypass$outboundSchema: z.ZodType<UpdateProjectProtectionBypass$Outbound, z.ZodTypeDef, UpdateProjectProtectionBypass>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProtectionBypass$ {
    /** @deprecated use `UpdateProjectProtectionBypass$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectProtectionBypass, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectProtectionBypass$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectProtectionBypass$Outbound, z.ZodTypeDef, UpdateProjectProtectionBypass>;
    /** @deprecated use `UpdateProjectProtectionBypass$Outbound` instead. */
    type Outbound = UpdateProjectProtectionBypass$Outbound;
}
export declare function updateProjectProtectionBypassToJSON(updateProjectProtectionBypass: UpdateProjectProtectionBypass): string;
export declare function updateProjectProtectionBypassFromJSON(jsonString: string): SafeParseResult<UpdateProjectProtectionBypass, SDKValidationError>;
/** @internal */
export declare const UpdateProjectTrustedIpsProjectsDeploymentType$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectTrustedIpsProjectsDeploymentType>;
/** @internal */
export declare const UpdateProjectTrustedIpsProjectsDeploymentType$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectTrustedIpsProjectsDeploymentType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectTrustedIpsProjectsDeploymentType$ {
    /** @deprecated use `UpdateProjectTrustedIpsProjectsDeploymentType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Preview: "preview";
        readonly Production: "production";
        readonly All: "all";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
    /** @deprecated use `UpdateProjectTrustedIpsProjectsDeploymentType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Preview: "preview";
        readonly Production: "production";
        readonly All: "all";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
}
/** @internal */
export declare const UpdateProjectTrustedIps2$inboundSchema: z.ZodType<UpdateProjectTrustedIps2, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectTrustedIps2$Outbound = {
    deploymentType: string;
};
/** @internal */
export declare const UpdateProjectTrustedIps2$outboundSchema: z.ZodType<UpdateProjectTrustedIps2$Outbound, z.ZodTypeDef, UpdateProjectTrustedIps2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectTrustedIps2$ {
    /** @deprecated use `UpdateProjectTrustedIps2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectTrustedIps2, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectTrustedIps2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectTrustedIps2$Outbound, z.ZodTypeDef, UpdateProjectTrustedIps2>;
    /** @deprecated use `UpdateProjectTrustedIps2$Outbound` instead. */
    type Outbound = UpdateProjectTrustedIps2$Outbound;
}
export declare function updateProjectTrustedIps2ToJSON(updateProjectTrustedIps2: UpdateProjectTrustedIps2): string;
export declare function updateProjectTrustedIps2FromJSON(jsonString: string): SafeParseResult<UpdateProjectTrustedIps2, SDKValidationError>;
/** @internal */
export declare const UpdateProjectTrustedIpsDeploymentType$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectTrustedIpsDeploymentType>;
/** @internal */
export declare const UpdateProjectTrustedIpsDeploymentType$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectTrustedIpsDeploymentType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectTrustedIpsDeploymentType$ {
    /** @deprecated use `UpdateProjectTrustedIpsDeploymentType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Preview: "preview";
        readonly Production: "production";
        readonly All: "all";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
    /** @deprecated use `UpdateProjectTrustedIpsDeploymentType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Preview: "preview";
        readonly Production: "production";
        readonly All: "all";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
}
/** @internal */
export declare const UpdateProjectTrustedIpsAddresses$inboundSchema: z.ZodType<UpdateProjectTrustedIpsAddresses, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectTrustedIpsAddresses$Outbound = {
    value: string;
    note?: string | undefined;
};
/** @internal */
export declare const UpdateProjectTrustedIpsAddresses$outboundSchema: z.ZodType<UpdateProjectTrustedIpsAddresses$Outbound, z.ZodTypeDef, UpdateProjectTrustedIpsAddresses>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectTrustedIpsAddresses$ {
    /** @deprecated use `UpdateProjectTrustedIpsAddresses$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectTrustedIpsAddresses, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectTrustedIpsAddresses$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectTrustedIpsAddresses$Outbound, z.ZodTypeDef, UpdateProjectTrustedIpsAddresses>;
    /** @deprecated use `UpdateProjectTrustedIpsAddresses$Outbound` instead. */
    type Outbound = UpdateProjectTrustedIpsAddresses$Outbound;
}
export declare function updateProjectTrustedIpsAddressesToJSON(updateProjectTrustedIpsAddresses: UpdateProjectTrustedIpsAddresses): string;
export declare function updateProjectTrustedIpsAddressesFromJSON(jsonString: string): SafeParseResult<UpdateProjectTrustedIpsAddresses, SDKValidationError>;
/** @internal */
export declare const UpdateProjectTrustedIpsProtectionMode$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectTrustedIpsProtectionMode>;
/** @internal */
export declare const UpdateProjectTrustedIpsProtectionMode$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectTrustedIpsProtectionMode>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectTrustedIpsProtectionMode$ {
    /** @deprecated use `UpdateProjectTrustedIpsProtectionMode$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Additional: "additional";
        readonly Exclusive: "exclusive";
    }>;
    /** @deprecated use `UpdateProjectTrustedIpsProtectionMode$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Additional: "additional";
        readonly Exclusive: "exclusive";
    }>;
}
/** @internal */
export declare const UpdateProjectTrustedIps1$inboundSchema: z.ZodType<UpdateProjectTrustedIps1, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectTrustedIps1$Outbound = {
    deploymentType: string;
    addresses: Array<UpdateProjectTrustedIpsAddresses$Outbound>;
    protectionMode: string;
};
/** @internal */
export declare const UpdateProjectTrustedIps1$outboundSchema: z.ZodType<UpdateProjectTrustedIps1$Outbound, z.ZodTypeDef, UpdateProjectTrustedIps1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectTrustedIps1$ {
    /** @deprecated use `UpdateProjectTrustedIps1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectTrustedIps1, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectTrustedIps1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectTrustedIps1$Outbound, z.ZodTypeDef, UpdateProjectTrustedIps1>;
    /** @deprecated use `UpdateProjectTrustedIps1$Outbound` instead. */
    type Outbound = UpdateProjectTrustedIps1$Outbound;
}
export declare function updateProjectTrustedIps1ToJSON(updateProjectTrustedIps1: UpdateProjectTrustedIps1): string;
export declare function updateProjectTrustedIps1FromJSON(jsonString: string): SafeParseResult<UpdateProjectTrustedIps1, SDKValidationError>;
/** @internal */
export declare const UpdateProjectProjectsTrustedIps$inboundSchema: z.ZodType<UpdateProjectProjectsTrustedIps, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectProjectsTrustedIps$Outbound = UpdateProjectTrustedIps1$Outbound | UpdateProjectTrustedIps2$Outbound;
/** @internal */
export declare const UpdateProjectProjectsTrustedIps$outboundSchema: z.ZodType<UpdateProjectProjectsTrustedIps$Outbound, z.ZodTypeDef, UpdateProjectProjectsTrustedIps>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsTrustedIps$ {
    /** @deprecated use `UpdateProjectProjectsTrustedIps$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectProjectsTrustedIps, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectProjectsTrustedIps$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectProjectsTrustedIps$Outbound, z.ZodTypeDef, UpdateProjectProjectsTrustedIps>;
    /** @deprecated use `UpdateProjectProjectsTrustedIps$Outbound` instead. */
    type Outbound = UpdateProjectProjectsTrustedIps$Outbound;
}
export declare function updateProjectProjectsTrustedIpsToJSON(updateProjectProjectsTrustedIps: UpdateProjectProjectsTrustedIps): string;
export declare function updateProjectProjectsTrustedIpsFromJSON(jsonString: string): SafeParseResult<UpdateProjectProjectsTrustedIps, SDKValidationError>;
/** @internal */
export declare const UpdateProjectGitComments$inboundSchema: z.ZodType<UpdateProjectGitComments, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectGitComments$Outbound = {
    onPullRequest: boolean;
    onCommit: boolean;
};
/** @internal */
export declare const UpdateProjectGitComments$outboundSchema: z.ZodType<UpdateProjectGitComments$Outbound, z.ZodTypeDef, UpdateProjectGitComments>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectGitComments$ {
    /** @deprecated use `UpdateProjectGitComments$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectGitComments, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectGitComments$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectGitComments$Outbound, z.ZodTypeDef, UpdateProjectGitComments>;
    /** @deprecated use `UpdateProjectGitComments$Outbound` instead. */
    type Outbound = UpdateProjectGitComments$Outbound;
}
export declare function updateProjectGitCommentsToJSON(updateProjectGitComments: UpdateProjectGitComments): string;
export declare function updateProjectGitCommentsFromJSON(jsonString: string): SafeParseResult<UpdateProjectGitComments, SDKValidationError>;
/** @internal */
export declare const UpdateProjectCreateDeployments$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectCreateDeployments>;
/** @internal */
export declare const UpdateProjectCreateDeployments$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectCreateDeployments>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectCreateDeployments$ {
    /** @deprecated use `UpdateProjectCreateDeployments$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Enabled: "enabled";
        readonly Disabled: "disabled";
    }>;
    /** @deprecated use `UpdateProjectCreateDeployments$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Enabled: "enabled";
        readonly Disabled: "disabled";
    }>;
}
/** @internal */
export declare const UpdateProjectGitProviderOptions$inboundSchema: z.ZodType<UpdateProjectGitProviderOptions, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectGitProviderOptions$Outbound = {
    createDeployments: string;
    disableRepositoryDispatchEvents?: boolean | undefined;
};
/** @internal */
export declare const UpdateProjectGitProviderOptions$outboundSchema: z.ZodType<UpdateProjectGitProviderOptions$Outbound, z.ZodTypeDef, UpdateProjectGitProviderOptions>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectGitProviderOptions$ {
    /** @deprecated use `UpdateProjectGitProviderOptions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectGitProviderOptions, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectGitProviderOptions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectGitProviderOptions$Outbound, z.ZodTypeDef, UpdateProjectGitProviderOptions>;
    /** @deprecated use `UpdateProjectGitProviderOptions$Outbound` instead. */
    type Outbound = UpdateProjectGitProviderOptions$Outbound;
}
export declare function updateProjectGitProviderOptionsToJSON(updateProjectGitProviderOptions: UpdateProjectGitProviderOptions): string;
export declare function updateProjectGitProviderOptionsFromJSON(jsonString: string): SafeParseResult<UpdateProjectGitProviderOptions, SDKValidationError>;
/** @internal */
export declare const UpdateProjectWebAnalytics$inboundSchema: z.ZodType<UpdateProjectWebAnalytics, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectWebAnalytics$Outbound = {
    id: string;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    enabledAt?: number | undefined;
    hasData?: boolean | undefined;
};
/** @internal */
export declare const UpdateProjectWebAnalytics$outboundSchema: z.ZodType<UpdateProjectWebAnalytics$Outbound, z.ZodTypeDef, UpdateProjectWebAnalytics>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectWebAnalytics$ {
    /** @deprecated use `UpdateProjectWebAnalytics$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectWebAnalytics, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectWebAnalytics$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectWebAnalytics$Outbound, z.ZodTypeDef, UpdateProjectWebAnalytics>;
    /** @deprecated use `UpdateProjectWebAnalytics$Outbound` instead. */
    type Outbound = UpdateProjectWebAnalytics$Outbound;
}
export declare function updateProjectWebAnalyticsToJSON(updateProjectWebAnalytics: UpdateProjectWebAnalytics): string;
export declare function updateProjectWebAnalyticsFromJSON(jsonString: string): SafeParseResult<UpdateProjectWebAnalytics, SDKValidationError>;
/** @internal */
export declare const UpdateProjectProjectsResponse200Action$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsResponse200Action>;
/** @internal */
export declare const UpdateProjectProjectsResponse200Action$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsResponse200Action>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsResponse200Action$ {
    /** @deprecated use `UpdateProjectProjectsResponse200Action$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Log: "log";
        readonly Challenge: "challenge";
        readonly Deny: "deny";
    }>;
    /** @deprecated use `UpdateProjectProjectsResponse200Action$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Log: "log";
        readonly Challenge: "challenge";
        readonly Deny: "deny";
    }>;
}
/** @internal */
export declare const UpdateProjectBotFilter$inboundSchema: z.ZodType<UpdateProjectBotFilter, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectBotFilter$Outbound = {
    active: boolean;
    action?: string | undefined;
};
/** @internal */
export declare const UpdateProjectBotFilter$outboundSchema: z.ZodType<UpdateProjectBotFilter$Outbound, z.ZodTypeDef, UpdateProjectBotFilter>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectBotFilter$ {
    /** @deprecated use `UpdateProjectBotFilter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectBotFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectBotFilter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectBotFilter$Outbound, z.ZodTypeDef, UpdateProjectBotFilter>;
    /** @deprecated use `UpdateProjectBotFilter$Outbound` instead. */
    type Outbound = UpdateProjectBotFilter$Outbound;
}
export declare function updateProjectBotFilterToJSON(updateProjectBotFilter: UpdateProjectBotFilter): string;
export declare function updateProjectBotFilterFromJSON(jsonString: string): SafeParseResult<UpdateProjectBotFilter, SDKValidationError>;
/** @internal */
export declare const UpdateProjectProjectsAction$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsAction>;
/** @internal */
export declare const UpdateProjectProjectsAction$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsAction$ {
    /** @deprecated use `UpdateProjectProjectsAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Log: "log";
        readonly Challenge: "challenge";
        readonly Deny: "deny";
    }>;
    /** @deprecated use `UpdateProjectProjectsAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Log: "log";
        readonly Challenge: "challenge";
        readonly Deny: "deny";
    }>;
}
/** @internal */
export declare const UpdateProjectAiBots$inboundSchema: z.ZodType<UpdateProjectAiBots, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectAiBots$Outbound = {
    active: boolean;
    action?: string | undefined;
};
/** @internal */
export declare const UpdateProjectAiBots$outboundSchema: z.ZodType<UpdateProjectAiBots$Outbound, z.ZodTypeDef, UpdateProjectAiBots>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectAiBots$ {
    /** @deprecated use `UpdateProjectAiBots$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectAiBots, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectAiBots$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectAiBots$Outbound, z.ZodTypeDef, UpdateProjectAiBots>;
    /** @deprecated use `UpdateProjectAiBots$Outbound` instead. */
    type Outbound = UpdateProjectAiBots$Outbound;
}
export declare function updateProjectAiBotsToJSON(updateProjectAiBots: UpdateProjectAiBots): string;
export declare function updateProjectAiBotsFromJSON(jsonString: string): SafeParseResult<UpdateProjectAiBots, SDKValidationError>;
/** @internal */
export declare const UpdateProjectProjectsResponseAction$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsResponseAction>;
/** @internal */
export declare const UpdateProjectProjectsResponseAction$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsResponseAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsResponseAction$ {
    /** @deprecated use `UpdateProjectProjectsResponseAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Log: "log";
        readonly Challenge: "challenge";
        readonly Deny: "deny";
    }>;
    /** @deprecated use `UpdateProjectProjectsResponseAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Log: "log";
        readonly Challenge: "challenge";
        readonly Deny: "deny";
    }>;
}
/** @internal */
export declare const UpdateProjectOwasp$inboundSchema: z.ZodType<UpdateProjectOwasp, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectOwasp$Outbound = {
    active: boolean;
    action?: string | undefined;
};
/** @internal */
export declare const UpdateProjectOwasp$outboundSchema: z.ZodType<UpdateProjectOwasp$Outbound, z.ZodTypeDef, UpdateProjectOwasp>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectOwasp$ {
    /** @deprecated use `UpdateProjectOwasp$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectOwasp, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectOwasp$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectOwasp$Outbound, z.ZodTypeDef, UpdateProjectOwasp>;
    /** @deprecated use `UpdateProjectOwasp$Outbound` instead. */
    type Outbound = UpdateProjectOwasp$Outbound;
}
export declare function updateProjectOwaspToJSON(updateProjectOwasp: UpdateProjectOwasp): string;
export declare function updateProjectOwaspFromJSON(jsonString: string): SafeParseResult<UpdateProjectOwasp, SDKValidationError>;
/** @internal */
export declare const UpdateProjectManagedRules$inboundSchema: z.ZodType<UpdateProjectManagedRules, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectManagedRules$Outbound = {
    bot_filter: UpdateProjectBotFilter$Outbound;
    ai_bots: UpdateProjectAiBots$Outbound;
    owasp: UpdateProjectOwasp$Outbound;
};
/** @internal */
export declare const UpdateProjectManagedRules$outboundSchema: z.ZodType<UpdateProjectManagedRules$Outbound, z.ZodTypeDef, UpdateProjectManagedRules>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectManagedRules$ {
    /** @deprecated use `UpdateProjectManagedRules$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectManagedRules, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectManagedRules$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectManagedRules$Outbound, z.ZodTypeDef, UpdateProjectManagedRules>;
    /** @deprecated use `UpdateProjectManagedRules$Outbound` instead. */
    type Outbound = UpdateProjectManagedRules$Outbound;
}
export declare function updateProjectManagedRulesToJSON(updateProjectManagedRules: UpdateProjectManagedRules): string;
export declare function updateProjectManagedRulesFromJSON(jsonString: string): SafeParseResult<UpdateProjectManagedRules, SDKValidationError>;
/** @internal */
export declare const UpdateProjectSecurity$inboundSchema: z.ZodType<UpdateProjectSecurity, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectSecurity$Outbound = {
    attackModeEnabled?: boolean | undefined;
    attackModeUpdatedAt?: number | undefined;
    firewallEnabled?: boolean | undefined;
    firewallUpdatedAt?: number | undefined;
    attackModeActiveUntil?: number | null | undefined;
    firewallConfigVersion?: number | undefined;
    firewallSeawallEnabled?: boolean | undefined;
    ja3Enabled?: boolean | undefined;
    ja4Enabled?: boolean | undefined;
    firewallBypassIps?: Array<string> | undefined;
    managedRules?: UpdateProjectManagedRules$Outbound | null | undefined;
    botIdEnabled?: boolean | undefined;
};
/** @internal */
export declare const UpdateProjectSecurity$outboundSchema: z.ZodType<UpdateProjectSecurity$Outbound, z.ZodTypeDef, UpdateProjectSecurity>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectSecurity$ {
    /** @deprecated use `UpdateProjectSecurity$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectSecurity, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectSecurity$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectSecurity$Outbound, z.ZodTypeDef, UpdateProjectSecurity>;
    /** @deprecated use `UpdateProjectSecurity$Outbound` instead. */
    type Outbound = UpdateProjectSecurity$Outbound;
}
export declare function updateProjectSecurityToJSON(updateProjectSecurity: UpdateProjectSecurity): string;
export declare function updateProjectSecurityFromJSON(jsonString: string): SafeParseResult<UpdateProjectSecurity, SDKValidationError>;
/** @internal */
export declare const UpdateProjectProjectsIssuerMode$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsIssuerMode>;
/** @internal */
export declare const UpdateProjectProjectsIssuerMode$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectProjectsIssuerMode>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsIssuerMode$ {
    /** @deprecated use `UpdateProjectProjectsIssuerMode$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Team: "team";
        readonly Global: "global";
    }>;
    /** @deprecated use `UpdateProjectProjectsIssuerMode$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Team: "team";
        readonly Global: "global";
    }>;
}
/** @internal */
export declare const UpdateProjectProjectsOidcTokenConfig$inboundSchema: z.ZodType<UpdateProjectProjectsOidcTokenConfig, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectProjectsOidcTokenConfig$Outbound = {
    enabled?: boolean | undefined;
    issuerMode?: string | undefined;
};
/** @internal */
export declare const UpdateProjectProjectsOidcTokenConfig$outboundSchema: z.ZodType<UpdateProjectProjectsOidcTokenConfig$Outbound, z.ZodTypeDef, UpdateProjectProjectsOidcTokenConfig>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProjectsOidcTokenConfig$ {
    /** @deprecated use `UpdateProjectProjectsOidcTokenConfig$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectProjectsOidcTokenConfig, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectProjectsOidcTokenConfig$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectProjectsOidcTokenConfig$Outbound, z.ZodTypeDef, UpdateProjectProjectsOidcTokenConfig>;
    /** @deprecated use `UpdateProjectProjectsOidcTokenConfig$Outbound` instead. */
    type Outbound = UpdateProjectProjectsOidcTokenConfig$Outbound;
}
export declare function updateProjectProjectsOidcTokenConfigToJSON(updateProjectProjectsOidcTokenConfig: UpdateProjectProjectsOidcTokenConfig): string;
export declare function updateProjectProjectsOidcTokenConfigFromJSON(jsonString: string): SafeParseResult<UpdateProjectProjectsOidcTokenConfig, SDKValidationError>;
/** @internal */
export declare const UpdateProjectTier$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectTier>;
/** @internal */
export declare const UpdateProjectTier$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectTier>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectTier$ {
    /** @deprecated use `UpdateProjectTier$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Standard: "standard";
        readonly Advanced: "advanced";
        readonly Critical: "critical";
    }>;
    /** @deprecated use `UpdateProjectTier$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Standard: "standard";
        readonly Advanced: "advanced";
        readonly Critical: "critical";
    }>;
}
/** @internal */
export declare const UpdateProjectFeatures$inboundSchema: z.ZodType<UpdateProjectFeatures, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectFeatures$Outbound = {
    webAnalytics?: boolean | undefined;
};
/** @internal */
export declare const UpdateProjectFeatures$outboundSchema: z.ZodType<UpdateProjectFeatures$Outbound, z.ZodTypeDef, UpdateProjectFeatures>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectFeatures$ {
    /** @deprecated use `UpdateProjectFeatures$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectFeatures, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectFeatures$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectFeatures$Outbound, z.ZodTypeDef, UpdateProjectFeatures>;
    /** @deprecated use `UpdateProjectFeatures$Outbound` instead. */
    type Outbound = UpdateProjectFeatures$Outbound;
}
export declare function updateProjectFeaturesToJSON(updateProjectFeatures: UpdateProjectFeatures): string;
export declare function updateProjectFeaturesFromJSON(jsonString: string): SafeParseResult<UpdateProjectFeatures, SDKValidationError>;
/** @internal */
export declare const UpdateProjectHistory$inboundSchema: z.ZodType<UpdateProjectHistory, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectHistory$Outbound = {
    scanner: string;
    reason: string;
    by: string;
    byId: string;
    at: number;
};
/** @internal */
export declare const UpdateProjectHistory$outboundSchema: z.ZodType<UpdateProjectHistory$Outbound, z.ZodTypeDef, UpdateProjectHistory>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectHistory$ {
    /** @deprecated use `UpdateProjectHistory$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectHistory, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectHistory$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectHistory$Outbound, z.ZodTypeDef, UpdateProjectHistory>;
    /** @deprecated use `UpdateProjectHistory$Outbound` instead. */
    type Outbound = UpdateProjectHistory$Outbound;
}
export declare function updateProjectHistoryToJSON(updateProjectHistory: UpdateProjectHistory): string;
export declare function updateProjectHistoryFromJSON(jsonString: string): SafeParseResult<UpdateProjectHistory, SDKValidationError>;
/** @internal */
export declare const UpdateProjectAction$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectAction>;
/** @internal */
export declare const UpdateProjectAction$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectAction$ {
    /** @deprecated use `UpdateProjectAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Blocked: "blocked";
    }>;
    /** @deprecated use `UpdateProjectAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Blocked: "blocked";
    }>;
}
/** @internal */
export declare const UpdateProjectBlock$inboundSchema: z.ZodType<UpdateProjectBlock, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectBlock$Outbound = {
    action: string;
    reason: string;
    statusCode: number;
    createdAt: number;
    caseId?: string | undefined;
    actor?: string | undefined;
    comment?: string | undefined;
    isCascading?: boolean | undefined;
};
/** @internal */
export declare const UpdateProjectBlock$outboundSchema: z.ZodType<UpdateProjectBlock$Outbound, z.ZodTypeDef, UpdateProjectBlock>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectBlock$ {
    /** @deprecated use `UpdateProjectBlock$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectBlock, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectBlock$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectBlock$Outbound, z.ZodTypeDef, UpdateProjectBlock>;
    /** @deprecated use `UpdateProjectBlock$Outbound` instead. */
    type Outbound = UpdateProjectBlock$Outbound;
}
export declare function updateProjectBlockToJSON(updateProjectBlock: UpdateProjectBlock): string;
export declare function updateProjectBlockFromJSON(jsonString: string): SafeParseResult<UpdateProjectBlock, SDKValidationError>;
/** @internal */
export declare const UpdateProjectBlockHistoryProjectsResponse200Action$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectBlockHistoryProjectsResponse200Action>;
/** @internal */
export declare const UpdateProjectBlockHistoryProjectsResponse200Action$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectBlockHistoryProjectsResponse200Action>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectBlockHistoryProjectsResponse200Action$ {
    /** @deprecated use `UpdateProjectBlockHistoryProjectsResponse200Action$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly RouteUnblocked: "route-unblocked";
    }>;
    /** @deprecated use `UpdateProjectBlockHistoryProjectsResponse200Action$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly RouteUnblocked: "route-unblocked";
    }>;
}
/** @internal */
export declare const UpdateProjectHasProjectsResponse200Type$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectHasProjectsResponse200Type>;
/** @internal */
export declare const UpdateProjectHasProjectsResponse200Type$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectHasProjectsResponse200Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectHasProjectsResponse200Type$ {
    /** @deprecated use `UpdateProjectHasProjectsResponse200Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Host: "host";
    }>;
    /** @deprecated use `UpdateProjectHasProjectsResponse200Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Host: "host";
    }>;
}
/** @internal */
export declare const UpdateProjectHasProjectsResponse200Value$inboundSchema: z.ZodType<UpdateProjectHasProjectsResponse200Value, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectHasProjectsResponse200Value$Outbound = {
    eq: string;
};
/** @internal */
export declare const UpdateProjectHasProjectsResponse200Value$outboundSchema: z.ZodType<UpdateProjectHasProjectsResponse200Value$Outbound, z.ZodTypeDef, UpdateProjectHasProjectsResponse200Value>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectHasProjectsResponse200Value$ {
    /** @deprecated use `UpdateProjectHasProjectsResponse200Value$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectHasProjectsResponse200Value, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectHasProjectsResponse200Value$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectHasProjectsResponse200Value$Outbound, z.ZodTypeDef, UpdateProjectHasProjectsResponse200Value>;
    /** @deprecated use `UpdateProjectHasProjectsResponse200Value$Outbound` instead. */
    type Outbound = UpdateProjectHasProjectsResponse200Value$Outbound;
}
export declare function updateProjectHasProjectsResponse200ValueToJSON(updateProjectHasProjectsResponse200Value: UpdateProjectHasProjectsResponse200Value): string;
export declare function updateProjectHasProjectsResponse200ValueFromJSON(jsonString: string): SafeParseResult<UpdateProjectHasProjectsResponse200Value, SDKValidationError>;
/** @internal */
export declare const UpdateProjectHasProjects2$inboundSchema: z.ZodType<UpdateProjectHasProjects2, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectHasProjects2$Outbound = {
    type: string;
    value: UpdateProjectHasProjectsResponse200Value$Outbound;
};
/** @internal */
export declare const UpdateProjectHasProjects2$outboundSchema: z.ZodType<UpdateProjectHasProjects2$Outbound, z.ZodTypeDef, UpdateProjectHasProjects2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectHasProjects2$ {
    /** @deprecated use `UpdateProjectHasProjects2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectHasProjects2, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectHasProjects2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectHasProjects2$Outbound, z.ZodTypeDef, UpdateProjectHasProjects2>;
    /** @deprecated use `UpdateProjectHasProjects2$Outbound` instead. */
    type Outbound = UpdateProjectHasProjects2$Outbound;
}
export declare function updateProjectHasProjects2ToJSON(updateProjectHasProjects2: UpdateProjectHasProjects2): string;
export declare function updateProjectHasProjects2FromJSON(jsonString: string): SafeParseResult<UpdateProjectHasProjects2, SDKValidationError>;
/** @internal */
export declare const UpdateProjectHasProjectsResponseType$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectHasProjectsResponseType>;
/** @internal */
export declare const UpdateProjectHasProjectsResponseType$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectHasProjectsResponseType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectHasProjectsResponseType$ {
    /** @deprecated use `UpdateProjectHasProjectsResponseType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Header: "header";
    }>;
    /** @deprecated use `UpdateProjectHasProjectsResponseType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Header: "header";
    }>;
}
/** @internal */
export declare const UpdateProjectHasProjectsKey$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectHasProjectsKey>;
/** @internal */
export declare const UpdateProjectHasProjectsKey$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectHasProjectsKey>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectHasProjectsKey$ {
    /** @deprecated use `UpdateProjectHasProjectsKey$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly XVercelIpCountry: "x-vercel-ip-country";
    }>;
    /** @deprecated use `UpdateProjectHasProjectsKey$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly XVercelIpCountry: "x-vercel-ip-country";
    }>;
}
/** @internal */
export declare const UpdateProjectHasProjectsResponseValue$inboundSchema: z.ZodType<UpdateProjectHasProjectsResponseValue, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectHasProjectsResponseValue$Outbound = {
    eq: string;
};
/** @internal */
export declare const UpdateProjectHasProjectsResponseValue$outboundSchema: z.ZodType<UpdateProjectHasProjectsResponseValue$Outbound, z.ZodTypeDef, UpdateProjectHasProjectsResponseValue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectHasProjectsResponseValue$ {
    /** @deprecated use `UpdateProjectHasProjectsResponseValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectHasProjectsResponseValue, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectHasProjectsResponseValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectHasProjectsResponseValue$Outbound, z.ZodTypeDef, UpdateProjectHasProjectsResponseValue>;
    /** @deprecated use `UpdateProjectHasProjectsResponseValue$Outbound` instead. */
    type Outbound = UpdateProjectHasProjectsResponseValue$Outbound;
}
export declare function updateProjectHasProjectsResponseValueToJSON(updateProjectHasProjectsResponseValue: UpdateProjectHasProjectsResponseValue): string;
export declare function updateProjectHasProjectsResponseValueFromJSON(jsonString: string): SafeParseResult<UpdateProjectHasProjectsResponseValue, SDKValidationError>;
/** @internal */
export declare const UpdateProjectHasProjects1$inboundSchema: z.ZodType<UpdateProjectHasProjects1, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectHasProjects1$Outbound = {
    type: string;
    key: string;
    value: UpdateProjectHasProjectsResponseValue$Outbound;
};
/** @internal */
export declare const UpdateProjectHasProjects1$outboundSchema: z.ZodType<UpdateProjectHasProjects1$Outbound, z.ZodTypeDef, UpdateProjectHasProjects1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectHasProjects1$ {
    /** @deprecated use `UpdateProjectHasProjects1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectHasProjects1, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectHasProjects1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectHasProjects1$Outbound, z.ZodTypeDef, UpdateProjectHasProjects1>;
    /** @deprecated use `UpdateProjectHasProjects1$Outbound` instead. */
    type Outbound = UpdateProjectHasProjects1$Outbound;
}
export declare function updateProjectHasProjects1ToJSON(updateProjectHasProjects1: UpdateProjectHasProjects1): string;
export declare function updateProjectHasProjects1FromJSON(jsonString: string): SafeParseResult<UpdateProjectHasProjects1, SDKValidationError>;
/** @internal */
export declare const UpdateProjectRouteProjectsHas$inboundSchema: z.ZodType<UpdateProjectRouteProjectsHas, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectRouteProjectsHas$Outbound = UpdateProjectHasProjects1$Outbound | UpdateProjectHasProjects2$Outbound;
/** @internal */
export declare const UpdateProjectRouteProjectsHas$outboundSchema: z.ZodType<UpdateProjectRouteProjectsHas$Outbound, z.ZodTypeDef, UpdateProjectRouteProjectsHas>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectRouteProjectsHas$ {
    /** @deprecated use `UpdateProjectRouteProjectsHas$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectRouteProjectsHas, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectRouteProjectsHas$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectRouteProjectsHas$Outbound, z.ZodTypeDef, UpdateProjectRouteProjectsHas>;
    /** @deprecated use `UpdateProjectRouteProjectsHas$Outbound` instead. */
    type Outbound = UpdateProjectRouteProjectsHas$Outbound;
}
export declare function updateProjectRouteProjectsHasToJSON(updateProjectRouteProjectsHas: UpdateProjectRouteProjectsHas): string;
export declare function updateProjectRouteProjectsHasFromJSON(jsonString: string): SafeParseResult<UpdateProjectRouteProjectsHas, SDKValidationError>;
/** @internal */
export declare const UpdateProjectRouteProjectsAction$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectRouteProjectsAction>;
/** @internal */
export declare const UpdateProjectRouteProjectsAction$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectRouteProjectsAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectRouteProjectsAction$ {
    /** @deprecated use `UpdateProjectRouteProjectsAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly BlockLegalCwc: "block_legal_cwc";
    }>;
    /** @deprecated use `UpdateProjectRouteProjectsAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly BlockLegalCwc: "block_legal_cwc";
    }>;
}
/** @internal */
export declare const UpdateProjectRouteProjectsMitigate$inboundSchema: z.ZodType<UpdateProjectRouteProjectsMitigate, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectRouteProjectsMitigate$Outbound = {
    action: string;
};
/** @internal */
export declare const UpdateProjectRouteProjectsMitigate$outboundSchema: z.ZodType<UpdateProjectRouteProjectsMitigate$Outbound, z.ZodTypeDef, UpdateProjectRouteProjectsMitigate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectRouteProjectsMitigate$ {
    /** @deprecated use `UpdateProjectRouteProjectsMitigate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectRouteProjectsMitigate, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectRouteProjectsMitigate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectRouteProjectsMitigate$Outbound, z.ZodTypeDef, UpdateProjectRouteProjectsMitigate>;
    /** @deprecated use `UpdateProjectRouteProjectsMitigate$Outbound` instead. */
    type Outbound = UpdateProjectRouteProjectsMitigate$Outbound;
}
export declare function updateProjectRouteProjectsMitigateToJSON(updateProjectRouteProjectsMitigate: UpdateProjectRouteProjectsMitigate): string;
export declare function updateProjectRouteProjectsMitigateFromJSON(jsonString: string): SafeParseResult<UpdateProjectRouteProjectsMitigate, SDKValidationError>;
/** @internal */
export declare const UpdateProjectRouteProjects2$inboundSchema: z.ZodType<UpdateProjectRouteProjects2, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectRouteProjects2$Outbound = {
    has: Array<UpdateProjectHasProjects1$Outbound | UpdateProjectHasProjects2$Outbound>;
    mitigate: UpdateProjectRouteProjectsMitigate$Outbound;
    src?: string | undefined;
};
/** @internal */
export declare const UpdateProjectRouteProjects2$outboundSchema: z.ZodType<UpdateProjectRouteProjects2$Outbound, z.ZodTypeDef, UpdateProjectRouteProjects2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectRouteProjects2$ {
    /** @deprecated use `UpdateProjectRouteProjects2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectRouteProjects2, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectRouteProjects2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectRouteProjects2$Outbound, z.ZodTypeDef, UpdateProjectRouteProjects2>;
    /** @deprecated use `UpdateProjectRouteProjects2$Outbound` instead. */
    type Outbound = UpdateProjectRouteProjects2$Outbound;
}
export declare function updateProjectRouteProjects2ToJSON(updateProjectRouteProjects2: UpdateProjectRouteProjects2): string;
export declare function updateProjectRouteProjects2FromJSON(jsonString: string): SafeParseResult<UpdateProjectRouteProjects2, SDKValidationError>;
/** @internal */
export declare const UpdateProjectRouteProjects1$inboundSchema: z.ZodType<UpdateProjectRouteProjects1, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectRouteProjects1$Outbound = {
    src: string;
    status: number;
};
/** @internal */
export declare const UpdateProjectRouteProjects1$outboundSchema: z.ZodType<UpdateProjectRouteProjects1$Outbound, z.ZodTypeDef, UpdateProjectRouteProjects1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectRouteProjects1$ {
    /** @deprecated use `UpdateProjectRouteProjects1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectRouteProjects1, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectRouteProjects1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectRouteProjects1$Outbound, z.ZodTypeDef, UpdateProjectRouteProjects1>;
    /** @deprecated use `UpdateProjectRouteProjects1$Outbound` instead. */
    type Outbound = UpdateProjectRouteProjects1$Outbound;
}
export declare function updateProjectRouteProjects1ToJSON(updateProjectRouteProjects1: UpdateProjectRouteProjects1): string;
export declare function updateProjectRouteProjects1FromJSON(jsonString: string): SafeParseResult<UpdateProjectRouteProjects1, SDKValidationError>;
/** @internal */
export declare const UpdateProjectBlockHistoryProjectsRoute$inboundSchema: z.ZodType<UpdateProjectBlockHistoryProjectsRoute, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectBlockHistoryProjectsRoute$Outbound = UpdateProjectRouteProjects1$Outbound | UpdateProjectRouteProjects2$Outbound;
/** @internal */
export declare const UpdateProjectBlockHistoryProjectsRoute$outboundSchema: z.ZodType<UpdateProjectBlockHistoryProjectsRoute$Outbound, z.ZodTypeDef, UpdateProjectBlockHistoryProjectsRoute>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectBlockHistoryProjectsRoute$ {
    /** @deprecated use `UpdateProjectBlockHistoryProjectsRoute$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectBlockHistoryProjectsRoute, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectBlockHistoryProjectsRoute$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectBlockHistoryProjectsRoute$Outbound, z.ZodTypeDef, UpdateProjectBlockHistoryProjectsRoute>;
    /** @deprecated use `UpdateProjectBlockHistoryProjectsRoute$Outbound` instead. */
    type Outbound = UpdateProjectBlockHistoryProjectsRoute$Outbound;
}
export declare function updateProjectBlockHistoryProjectsRouteToJSON(updateProjectBlockHistoryProjectsRoute: UpdateProjectBlockHistoryProjectsRoute): string;
export declare function updateProjectBlockHistoryProjectsRouteFromJSON(jsonString: string): SafeParseResult<UpdateProjectBlockHistoryProjectsRoute, SDKValidationError>;
/** @internal */
export declare const UpdateProjectBlockHistory4$inboundSchema: z.ZodType<UpdateProjectBlockHistory4, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectBlockHistory4$Outbound = {
    action: string;
    route: UpdateProjectRouteProjects1$Outbound | UpdateProjectRouteProjects2$Outbound;
    statusCode?: number | undefined;
    createdAt: number;
    caseId?: string | undefined;
    actor?: string | undefined;
    comment?: string | undefined;
    isCascading?: boolean | undefined;
};
/** @internal */
export declare const UpdateProjectBlockHistory4$outboundSchema: z.ZodType<UpdateProjectBlockHistory4$Outbound, z.ZodTypeDef, UpdateProjectBlockHistory4>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectBlockHistory4$ {
    /** @deprecated use `UpdateProjectBlockHistory4$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectBlockHistory4, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectBlockHistory4$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectBlockHistory4$Outbound, z.ZodTypeDef, UpdateProjectBlockHistory4>;
    /** @deprecated use `UpdateProjectBlockHistory4$Outbound` instead. */
    type Outbound = UpdateProjectBlockHistory4$Outbound;
}
export declare function updateProjectBlockHistory4ToJSON(updateProjectBlockHistory4: UpdateProjectBlockHistory4): string;
export declare function updateProjectBlockHistory4FromJSON(jsonString: string): SafeParseResult<UpdateProjectBlockHistory4, SDKValidationError>;
/** @internal */
export declare const UpdateProjectBlockHistoryProjectsResponseAction$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectBlockHistoryProjectsResponseAction>;
/** @internal */
export declare const UpdateProjectBlockHistoryProjectsResponseAction$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectBlockHistoryProjectsResponseAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectBlockHistoryProjectsResponseAction$ {
    /** @deprecated use `UpdateProjectBlockHistoryProjectsResponseAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly RouteBlocked: "route-blocked";
    }>;
    /** @deprecated use `UpdateProjectBlockHistoryProjectsResponseAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly RouteBlocked: "route-blocked";
    }>;
}
/** @internal */
export declare const UpdateProjectHasProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectHasProjectsResponse200ApplicationJSONResponseBodyType>;
/** @internal */
export declare const UpdateProjectHasProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectHasProjectsResponse200ApplicationJSONResponseBodyType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectHasProjectsResponse200ApplicationJSONResponseBodyType$ {
    /** @deprecated use `UpdateProjectHasProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Host: "host";
    }>;
    /** @deprecated use `UpdateProjectHasProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Host: "host";
    }>;
}
/** @internal */
export declare const UpdateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$inboundSchema: z.ZodType<UpdateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$Outbound = {
    eq: string;
};
/** @internal */
export declare const UpdateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$outboundSchema: z.ZodType<UpdateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$Outbound, z.ZodTypeDef, UpdateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$ {
    /** @deprecated use `UpdateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$Outbound, z.ZodTypeDef, UpdateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue>;
    /** @deprecated use `UpdateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$Outbound` instead. */
    type Outbound = UpdateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$Outbound;
}
export declare function updateProjectHasProjectsResponse200ApplicationJSONResponseBodyValueToJSON(updateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue: UpdateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue): string;
export declare function updateProjectHasProjectsResponse200ApplicationJSONResponseBodyValueFromJSON(jsonString: string): SafeParseResult<UpdateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue, SDKValidationError>;
/** @internal */
export declare const UpdateProjectHasProjectsResponse2$inboundSchema: z.ZodType<UpdateProjectHasProjectsResponse2, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectHasProjectsResponse2$Outbound = {
    type: string;
    value: UpdateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$Outbound;
};
/** @internal */
export declare const UpdateProjectHasProjectsResponse2$outboundSchema: z.ZodType<UpdateProjectHasProjectsResponse2$Outbound, z.ZodTypeDef, UpdateProjectHasProjectsResponse2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectHasProjectsResponse2$ {
    /** @deprecated use `UpdateProjectHasProjectsResponse2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectHasProjectsResponse2, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectHasProjectsResponse2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectHasProjectsResponse2$Outbound, z.ZodTypeDef, UpdateProjectHasProjectsResponse2>;
    /** @deprecated use `UpdateProjectHasProjectsResponse2$Outbound` instead. */
    type Outbound = UpdateProjectHasProjectsResponse2$Outbound;
}
export declare function updateProjectHasProjectsResponse2ToJSON(updateProjectHasProjectsResponse2: UpdateProjectHasProjectsResponse2): string;
export declare function updateProjectHasProjectsResponse2FromJSON(jsonString: string): SafeParseResult<UpdateProjectHasProjectsResponse2, SDKValidationError>;
/** @internal */
export declare const UpdateProjectHasProjectsResponse200ApplicationJSONType$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectHasProjectsResponse200ApplicationJSONType>;
/** @internal */
export declare const UpdateProjectHasProjectsResponse200ApplicationJSONType$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectHasProjectsResponse200ApplicationJSONType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectHasProjectsResponse200ApplicationJSONType$ {
    /** @deprecated use `UpdateProjectHasProjectsResponse200ApplicationJSONType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Header: "header";
    }>;
    /** @deprecated use `UpdateProjectHasProjectsResponse200ApplicationJSONType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Header: "header";
    }>;
}
/** @internal */
export declare const UpdateProjectHasProjectsResponseKey$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectHasProjectsResponseKey>;
/** @internal */
export declare const UpdateProjectHasProjectsResponseKey$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectHasProjectsResponseKey>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectHasProjectsResponseKey$ {
    /** @deprecated use `UpdateProjectHasProjectsResponseKey$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly XVercelIpCountry: "x-vercel-ip-country";
    }>;
    /** @deprecated use `UpdateProjectHasProjectsResponseKey$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly XVercelIpCountry: "x-vercel-ip-country";
    }>;
}
/** @internal */
export declare const UpdateProjectHasProjectsResponse200ApplicationJSONValue$inboundSchema: z.ZodType<UpdateProjectHasProjectsResponse200ApplicationJSONValue, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectHasProjectsResponse200ApplicationJSONValue$Outbound = {
    eq: string;
};
/** @internal */
export declare const UpdateProjectHasProjectsResponse200ApplicationJSONValue$outboundSchema: z.ZodType<UpdateProjectHasProjectsResponse200ApplicationJSONValue$Outbound, z.ZodTypeDef, UpdateProjectHasProjectsResponse200ApplicationJSONValue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectHasProjectsResponse200ApplicationJSONValue$ {
    /** @deprecated use `UpdateProjectHasProjectsResponse200ApplicationJSONValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectHasProjectsResponse200ApplicationJSONValue, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectHasProjectsResponse200ApplicationJSONValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectHasProjectsResponse200ApplicationJSONValue$Outbound, z.ZodTypeDef, UpdateProjectHasProjectsResponse200ApplicationJSONValue>;
    /** @deprecated use `UpdateProjectHasProjectsResponse200ApplicationJSONValue$Outbound` instead. */
    type Outbound = UpdateProjectHasProjectsResponse200ApplicationJSONValue$Outbound;
}
export declare function updateProjectHasProjectsResponse200ApplicationJSONValueToJSON(updateProjectHasProjectsResponse200ApplicationJSONValue: UpdateProjectHasProjectsResponse200ApplicationJSONValue): string;
export declare function updateProjectHasProjectsResponse200ApplicationJSONValueFromJSON(jsonString: string): SafeParseResult<UpdateProjectHasProjectsResponse200ApplicationJSONValue, SDKValidationError>;
/** @internal */
export declare const UpdateProjectHasProjectsResponse1$inboundSchema: z.ZodType<UpdateProjectHasProjectsResponse1, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectHasProjectsResponse1$Outbound = {
    type: string;
    key: string;
    value: UpdateProjectHasProjectsResponse200ApplicationJSONValue$Outbound;
};
/** @internal */
export declare const UpdateProjectHasProjectsResponse1$outboundSchema: z.ZodType<UpdateProjectHasProjectsResponse1$Outbound, z.ZodTypeDef, UpdateProjectHasProjectsResponse1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectHasProjectsResponse1$ {
    /** @deprecated use `UpdateProjectHasProjectsResponse1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectHasProjectsResponse1, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectHasProjectsResponse1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectHasProjectsResponse1$Outbound, z.ZodTypeDef, UpdateProjectHasProjectsResponse1>;
    /** @deprecated use `UpdateProjectHasProjectsResponse1$Outbound` instead. */
    type Outbound = UpdateProjectHasProjectsResponse1$Outbound;
}
export declare function updateProjectHasProjectsResponse1ToJSON(updateProjectHasProjectsResponse1: UpdateProjectHasProjectsResponse1): string;
export declare function updateProjectHasProjectsResponse1FromJSON(jsonString: string): SafeParseResult<UpdateProjectHasProjectsResponse1, SDKValidationError>;
/** @internal */
export declare const UpdateProjectRouteHas$inboundSchema: z.ZodType<UpdateProjectRouteHas, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectRouteHas$Outbound = UpdateProjectHasProjectsResponse1$Outbound | UpdateProjectHasProjectsResponse2$Outbound;
/** @internal */
export declare const UpdateProjectRouteHas$outboundSchema: z.ZodType<UpdateProjectRouteHas$Outbound, z.ZodTypeDef, UpdateProjectRouteHas>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectRouteHas$ {
    /** @deprecated use `UpdateProjectRouteHas$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectRouteHas, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectRouteHas$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectRouteHas$Outbound, z.ZodTypeDef, UpdateProjectRouteHas>;
    /** @deprecated use `UpdateProjectRouteHas$Outbound` instead. */
    type Outbound = UpdateProjectRouteHas$Outbound;
}
export declare function updateProjectRouteHasToJSON(updateProjectRouteHas: UpdateProjectRouteHas): string;
export declare function updateProjectRouteHasFromJSON(jsonString: string): SafeParseResult<UpdateProjectRouteHas, SDKValidationError>;
/** @internal */
export declare const UpdateProjectRouteAction$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectRouteAction>;
/** @internal */
export declare const UpdateProjectRouteAction$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectRouteAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectRouteAction$ {
    /** @deprecated use `UpdateProjectRouteAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly BlockLegalCwc: "block_legal_cwc";
    }>;
    /** @deprecated use `UpdateProjectRouteAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly BlockLegalCwc: "block_legal_cwc";
    }>;
}
/** @internal */
export declare const UpdateProjectRouteMitigate$inboundSchema: z.ZodType<UpdateProjectRouteMitigate, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectRouteMitigate$Outbound = {
    action: string;
};
/** @internal */
export declare const UpdateProjectRouteMitigate$outboundSchema: z.ZodType<UpdateProjectRouteMitigate$Outbound, z.ZodTypeDef, UpdateProjectRouteMitigate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectRouteMitigate$ {
    /** @deprecated use `UpdateProjectRouteMitigate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectRouteMitigate, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectRouteMitigate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectRouteMitigate$Outbound, z.ZodTypeDef, UpdateProjectRouteMitigate>;
    /** @deprecated use `UpdateProjectRouteMitigate$Outbound` instead. */
    type Outbound = UpdateProjectRouteMitigate$Outbound;
}
export declare function updateProjectRouteMitigateToJSON(updateProjectRouteMitigate: UpdateProjectRouteMitigate): string;
export declare function updateProjectRouteMitigateFromJSON(jsonString: string): SafeParseResult<UpdateProjectRouteMitigate, SDKValidationError>;
/** @internal */
export declare const UpdateProjectRoute2$inboundSchema: z.ZodType<UpdateProjectRoute2, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectRoute2$Outbound = {
    has: Array<UpdateProjectHasProjectsResponse1$Outbound | UpdateProjectHasProjectsResponse2$Outbound>;
    mitigate: UpdateProjectRouteMitigate$Outbound;
    src?: string | undefined;
};
/** @internal */
export declare const UpdateProjectRoute2$outboundSchema: z.ZodType<UpdateProjectRoute2$Outbound, z.ZodTypeDef, UpdateProjectRoute2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectRoute2$ {
    /** @deprecated use `UpdateProjectRoute2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectRoute2, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectRoute2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectRoute2$Outbound, z.ZodTypeDef, UpdateProjectRoute2>;
    /** @deprecated use `UpdateProjectRoute2$Outbound` instead. */
    type Outbound = UpdateProjectRoute2$Outbound;
}
export declare function updateProjectRoute2ToJSON(updateProjectRoute2: UpdateProjectRoute2): string;
export declare function updateProjectRoute2FromJSON(jsonString: string): SafeParseResult<UpdateProjectRoute2, SDKValidationError>;
/** @internal */
export declare const UpdateProjectRoute1$inboundSchema: z.ZodType<UpdateProjectRoute1, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectRoute1$Outbound = {
    src: string;
    status: number;
};
/** @internal */
export declare const UpdateProjectRoute1$outboundSchema: z.ZodType<UpdateProjectRoute1$Outbound, z.ZodTypeDef, UpdateProjectRoute1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectRoute1$ {
    /** @deprecated use `UpdateProjectRoute1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectRoute1, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectRoute1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectRoute1$Outbound, z.ZodTypeDef, UpdateProjectRoute1>;
    /** @deprecated use `UpdateProjectRoute1$Outbound` instead. */
    type Outbound = UpdateProjectRoute1$Outbound;
}
export declare function updateProjectRoute1ToJSON(updateProjectRoute1: UpdateProjectRoute1): string;
export declare function updateProjectRoute1FromJSON(jsonString: string): SafeParseResult<UpdateProjectRoute1, SDKValidationError>;
/** @internal */
export declare const UpdateProjectBlockHistoryRoute$inboundSchema: z.ZodType<UpdateProjectBlockHistoryRoute, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectBlockHistoryRoute$Outbound = UpdateProjectRoute1$Outbound | UpdateProjectRoute2$Outbound;
/** @internal */
export declare const UpdateProjectBlockHistoryRoute$outboundSchema: z.ZodType<UpdateProjectBlockHistoryRoute$Outbound, z.ZodTypeDef, UpdateProjectBlockHistoryRoute>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectBlockHistoryRoute$ {
    /** @deprecated use `UpdateProjectBlockHistoryRoute$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectBlockHistoryRoute, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectBlockHistoryRoute$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectBlockHistoryRoute$Outbound, z.ZodTypeDef, UpdateProjectBlockHistoryRoute>;
    /** @deprecated use `UpdateProjectBlockHistoryRoute$Outbound` instead. */
    type Outbound = UpdateProjectBlockHistoryRoute$Outbound;
}
export declare function updateProjectBlockHistoryRouteToJSON(updateProjectBlockHistoryRoute: UpdateProjectBlockHistoryRoute): string;
export declare function updateProjectBlockHistoryRouteFromJSON(jsonString: string): SafeParseResult<UpdateProjectBlockHistoryRoute, SDKValidationError>;
/** @internal */
export declare const UpdateProjectBlockHistory3$inboundSchema: z.ZodType<UpdateProjectBlockHistory3, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectBlockHistory3$Outbound = {
    action: string;
    route: UpdateProjectRoute1$Outbound | UpdateProjectRoute2$Outbound;
    reason: string;
    createdAt: number;
    caseId?: string | undefined;
    actor?: string | undefined;
    comment?: string | undefined;
    isCascading?: boolean | undefined;
};
/** @internal */
export declare const UpdateProjectBlockHistory3$outboundSchema: z.ZodType<UpdateProjectBlockHistory3$Outbound, z.ZodTypeDef, UpdateProjectBlockHistory3>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectBlockHistory3$ {
    /** @deprecated use `UpdateProjectBlockHistory3$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectBlockHistory3, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectBlockHistory3$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectBlockHistory3$Outbound, z.ZodTypeDef, UpdateProjectBlockHistory3>;
    /** @deprecated use `UpdateProjectBlockHistory3$Outbound` instead. */
    type Outbound = UpdateProjectBlockHistory3$Outbound;
}
export declare function updateProjectBlockHistory3ToJSON(updateProjectBlockHistory3: UpdateProjectBlockHistory3): string;
export declare function updateProjectBlockHistory3FromJSON(jsonString: string): SafeParseResult<UpdateProjectBlockHistory3, SDKValidationError>;
/** @internal */
export declare const UpdateProjectBlockHistoryProjectsAction$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectBlockHistoryProjectsAction>;
/** @internal */
export declare const UpdateProjectBlockHistoryProjectsAction$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectBlockHistoryProjectsAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectBlockHistoryProjectsAction$ {
    /** @deprecated use `UpdateProjectBlockHistoryProjectsAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Unblocked: "unblocked";
    }>;
    /** @deprecated use `UpdateProjectBlockHistoryProjectsAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Unblocked: "unblocked";
    }>;
}
/** @internal */
export declare const UpdateProjectBlockHistory2$inboundSchema: z.ZodType<UpdateProjectBlockHistory2, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectBlockHistory2$Outbound = {
    action: string;
    createdAt: number;
    caseId?: string | undefined;
    actor?: string | undefined;
    comment?: string | undefined;
    isCascading?: boolean | undefined;
};
/** @internal */
export declare const UpdateProjectBlockHistory2$outboundSchema: z.ZodType<UpdateProjectBlockHistory2$Outbound, z.ZodTypeDef, UpdateProjectBlockHistory2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectBlockHistory2$ {
    /** @deprecated use `UpdateProjectBlockHistory2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectBlockHistory2, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectBlockHistory2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectBlockHistory2$Outbound, z.ZodTypeDef, UpdateProjectBlockHistory2>;
    /** @deprecated use `UpdateProjectBlockHistory2$Outbound` instead. */
    type Outbound = UpdateProjectBlockHistory2$Outbound;
}
export declare function updateProjectBlockHistory2ToJSON(updateProjectBlockHistory2: UpdateProjectBlockHistory2): string;
export declare function updateProjectBlockHistory2FromJSON(jsonString: string): SafeParseResult<UpdateProjectBlockHistory2, SDKValidationError>;
/** @internal */
export declare const UpdateProjectBlockHistoryAction$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectBlockHistoryAction>;
/** @internal */
export declare const UpdateProjectBlockHistoryAction$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectBlockHistoryAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectBlockHistoryAction$ {
    /** @deprecated use `UpdateProjectBlockHistoryAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Blocked: "blocked";
    }>;
    /** @deprecated use `UpdateProjectBlockHistoryAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Blocked: "blocked";
    }>;
}
/** @internal */
export declare const UpdateProjectBlockHistory1$inboundSchema: z.ZodType<UpdateProjectBlockHistory1, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectBlockHistory1$Outbound = {
    action: string;
    reason: string;
    statusCode: number;
    createdAt: number;
    caseId?: string | undefined;
    actor?: string | undefined;
    comment?: string | undefined;
    isCascading?: boolean | undefined;
};
/** @internal */
export declare const UpdateProjectBlockHistory1$outboundSchema: z.ZodType<UpdateProjectBlockHistory1$Outbound, z.ZodTypeDef, UpdateProjectBlockHistory1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectBlockHistory1$ {
    /** @deprecated use `UpdateProjectBlockHistory1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectBlockHistory1, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectBlockHistory1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectBlockHistory1$Outbound, z.ZodTypeDef, UpdateProjectBlockHistory1>;
    /** @deprecated use `UpdateProjectBlockHistory1$Outbound` instead. */
    type Outbound = UpdateProjectBlockHistory1$Outbound;
}
export declare function updateProjectBlockHistory1ToJSON(updateProjectBlockHistory1: UpdateProjectBlockHistory1): string;
export declare function updateProjectBlockHistory1FromJSON(jsonString: string): SafeParseResult<UpdateProjectBlockHistory1, SDKValidationError>;
/** @internal */
export declare const UpdateProjectBlockHistory$inboundSchema: z.ZodType<UpdateProjectBlockHistory, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectBlockHistory$Outbound = UpdateProjectBlockHistory1$Outbound | UpdateProjectBlockHistory3$Outbound | UpdateProjectBlockHistory4$Outbound | UpdateProjectBlockHistory2$Outbound;
/** @internal */
export declare const UpdateProjectBlockHistory$outboundSchema: z.ZodType<UpdateProjectBlockHistory$Outbound, z.ZodTypeDef, UpdateProjectBlockHistory>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectBlockHistory$ {
    /** @deprecated use `UpdateProjectBlockHistory$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectBlockHistory, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectBlockHistory$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectBlockHistory$Outbound, z.ZodTypeDef, UpdateProjectBlockHistory>;
    /** @deprecated use `UpdateProjectBlockHistory$Outbound` instead. */
    type Outbound = UpdateProjectBlockHistory$Outbound;
}
export declare function updateProjectBlockHistoryToJSON(updateProjectBlockHistory: UpdateProjectBlockHistory): string;
export declare function updateProjectBlockHistoryFromJSON(jsonString: string): SafeParseResult<UpdateProjectBlockHistory, SDKValidationError>;
/** @internal */
export declare const UpdateProjectAbuse$inboundSchema: z.ZodType<UpdateProjectAbuse, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectAbuse$Outbound = {
    scanner?: string | undefined;
    history: Array<UpdateProjectHistory$Outbound>;
    updatedAt: number;
    block?: UpdateProjectBlock$Outbound | undefined;
    blockHistory?: Array<UpdateProjectBlockHistory1$Outbound | UpdateProjectBlockHistory3$Outbound | UpdateProjectBlockHistory4$Outbound | UpdateProjectBlockHistory2$Outbound> | undefined;
};
/** @internal */
export declare const UpdateProjectAbuse$outboundSchema: z.ZodType<UpdateProjectAbuse$Outbound, z.ZodTypeDef, UpdateProjectAbuse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectAbuse$ {
    /** @deprecated use `UpdateProjectAbuse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectAbuse, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectAbuse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectAbuse$Outbound, z.ZodTypeDef, UpdateProjectAbuse>;
    /** @deprecated use `UpdateProjectAbuse$Outbound` instead. */
    type Outbound = UpdateProjectAbuse$Outbound;
}
export declare function updateProjectAbuseToJSON(updateProjectAbuse: UpdateProjectAbuse): string;
export declare function updateProjectAbuseFromJSON(jsonString: string): SafeParseResult<UpdateProjectAbuse, SDKValidationError>;
/** @internal */
export declare const UpdateProjectHasProjectsType$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectHasProjectsType>;
/** @internal */
export declare const UpdateProjectHasProjectsType$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectHasProjectsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectHasProjectsType$ {
    /** @deprecated use `UpdateProjectHasProjectsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Host: "host";
    }>;
    /** @deprecated use `UpdateProjectHasProjectsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Host: "host";
    }>;
}
/** @internal */
export declare const UpdateProjectHasProjectsValue$inboundSchema: z.ZodType<UpdateProjectHasProjectsValue, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectHasProjectsValue$Outbound = {
    eq: string;
};
/** @internal */
export declare const UpdateProjectHasProjectsValue$outboundSchema: z.ZodType<UpdateProjectHasProjectsValue$Outbound, z.ZodTypeDef, UpdateProjectHasProjectsValue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectHasProjectsValue$ {
    /** @deprecated use `UpdateProjectHasProjectsValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectHasProjectsValue, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectHasProjectsValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectHasProjectsValue$Outbound, z.ZodTypeDef, UpdateProjectHasProjectsValue>;
    /** @deprecated use `UpdateProjectHasProjectsValue$Outbound` instead. */
    type Outbound = UpdateProjectHasProjectsValue$Outbound;
}
export declare function updateProjectHasProjectsValueToJSON(updateProjectHasProjectsValue: UpdateProjectHasProjectsValue): string;
export declare function updateProjectHasProjectsValueFromJSON(jsonString: string): SafeParseResult<UpdateProjectHasProjectsValue, SDKValidationError>;
/** @internal */
export declare const UpdateProjectHas2$inboundSchema: z.ZodType<UpdateProjectHas2, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectHas2$Outbound = {
    type: string;
    value: UpdateProjectHasProjectsValue$Outbound;
};
/** @internal */
export declare const UpdateProjectHas2$outboundSchema: z.ZodType<UpdateProjectHas2$Outbound, z.ZodTypeDef, UpdateProjectHas2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectHas2$ {
    /** @deprecated use `UpdateProjectHas2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectHas2, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectHas2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectHas2$Outbound, z.ZodTypeDef, UpdateProjectHas2>;
    /** @deprecated use `UpdateProjectHas2$Outbound` instead. */
    type Outbound = UpdateProjectHas2$Outbound;
}
export declare function updateProjectHas2ToJSON(updateProjectHas2: UpdateProjectHas2): string;
export declare function updateProjectHas2FromJSON(jsonString: string): SafeParseResult<UpdateProjectHas2, SDKValidationError>;
/** @internal */
export declare const UpdateProjectHasType$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectHasType>;
/** @internal */
export declare const UpdateProjectHasType$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectHasType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectHasType$ {
    /** @deprecated use `UpdateProjectHasType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Header: "header";
    }>;
    /** @deprecated use `UpdateProjectHasType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Header: "header";
    }>;
}
/** @internal */
export declare const UpdateProjectHasKey$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectHasKey>;
/** @internal */
export declare const UpdateProjectHasKey$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectHasKey>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectHasKey$ {
    /** @deprecated use `UpdateProjectHasKey$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly XVercelIpCountry: "x-vercel-ip-country";
    }>;
    /** @deprecated use `UpdateProjectHasKey$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly XVercelIpCountry: "x-vercel-ip-country";
    }>;
}
/** @internal */
export declare const UpdateProjectHasValue$inboundSchema: z.ZodType<UpdateProjectHasValue, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectHasValue$Outbound = {
    eq: string;
};
/** @internal */
export declare const UpdateProjectHasValue$outboundSchema: z.ZodType<UpdateProjectHasValue$Outbound, z.ZodTypeDef, UpdateProjectHasValue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectHasValue$ {
    /** @deprecated use `UpdateProjectHasValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectHasValue, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectHasValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectHasValue$Outbound, z.ZodTypeDef, UpdateProjectHasValue>;
    /** @deprecated use `UpdateProjectHasValue$Outbound` instead. */
    type Outbound = UpdateProjectHasValue$Outbound;
}
export declare function updateProjectHasValueToJSON(updateProjectHasValue: UpdateProjectHasValue): string;
export declare function updateProjectHasValueFromJSON(jsonString: string): SafeParseResult<UpdateProjectHasValue, SDKValidationError>;
/** @internal */
export declare const UpdateProjectHas1$inboundSchema: z.ZodType<UpdateProjectHas1, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectHas1$Outbound = {
    type: string;
    key: string;
    value: UpdateProjectHasValue$Outbound;
};
/** @internal */
export declare const UpdateProjectHas1$outboundSchema: z.ZodType<UpdateProjectHas1$Outbound, z.ZodTypeDef, UpdateProjectHas1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectHas1$ {
    /** @deprecated use `UpdateProjectHas1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectHas1, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectHas1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectHas1$Outbound, z.ZodTypeDef, UpdateProjectHas1>;
    /** @deprecated use `UpdateProjectHas1$Outbound` instead. */
    type Outbound = UpdateProjectHas1$Outbound;
}
export declare function updateProjectHas1ToJSON(updateProjectHas1: UpdateProjectHas1): string;
export declare function updateProjectHas1FromJSON(jsonString: string): SafeParseResult<UpdateProjectHas1, SDKValidationError>;
/** @internal */
export declare const UpdateProjectInternalRoutesHas$inboundSchema: z.ZodType<UpdateProjectInternalRoutesHas, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectInternalRoutesHas$Outbound = UpdateProjectHas1$Outbound | UpdateProjectHas2$Outbound;
/** @internal */
export declare const UpdateProjectInternalRoutesHas$outboundSchema: z.ZodType<UpdateProjectInternalRoutesHas$Outbound, z.ZodTypeDef, UpdateProjectInternalRoutesHas>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectInternalRoutesHas$ {
    /** @deprecated use `UpdateProjectInternalRoutesHas$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectInternalRoutesHas, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectInternalRoutesHas$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectInternalRoutesHas$Outbound, z.ZodTypeDef, UpdateProjectInternalRoutesHas>;
    /** @deprecated use `UpdateProjectInternalRoutesHas$Outbound` instead. */
    type Outbound = UpdateProjectInternalRoutesHas$Outbound;
}
export declare function updateProjectInternalRoutesHasToJSON(updateProjectInternalRoutesHas: UpdateProjectInternalRoutesHas): string;
export declare function updateProjectInternalRoutesHasFromJSON(jsonString: string): SafeParseResult<UpdateProjectInternalRoutesHas, SDKValidationError>;
/** @internal */
export declare const UpdateProjectInternalRoutesAction$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectInternalRoutesAction>;
/** @internal */
export declare const UpdateProjectInternalRoutesAction$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectInternalRoutesAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectInternalRoutesAction$ {
    /** @deprecated use `UpdateProjectInternalRoutesAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly BlockLegalCwc: "block_legal_cwc";
    }>;
    /** @deprecated use `UpdateProjectInternalRoutesAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly BlockLegalCwc: "block_legal_cwc";
    }>;
}
/** @internal */
export declare const UpdateProjectInternalRoutesMitigate$inboundSchema: z.ZodType<UpdateProjectInternalRoutesMitigate, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectInternalRoutesMitigate$Outbound = {
    action: string;
};
/** @internal */
export declare const UpdateProjectInternalRoutesMitigate$outboundSchema: z.ZodType<UpdateProjectInternalRoutesMitigate$Outbound, z.ZodTypeDef, UpdateProjectInternalRoutesMitigate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectInternalRoutesMitigate$ {
    /** @deprecated use `UpdateProjectInternalRoutesMitigate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectInternalRoutesMitigate, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectInternalRoutesMitigate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectInternalRoutesMitigate$Outbound, z.ZodTypeDef, UpdateProjectInternalRoutesMitigate>;
    /** @deprecated use `UpdateProjectInternalRoutesMitigate$Outbound` instead. */
    type Outbound = UpdateProjectInternalRoutesMitigate$Outbound;
}
export declare function updateProjectInternalRoutesMitigateToJSON(updateProjectInternalRoutesMitigate: UpdateProjectInternalRoutesMitigate): string;
export declare function updateProjectInternalRoutesMitigateFromJSON(jsonString: string): SafeParseResult<UpdateProjectInternalRoutesMitigate, SDKValidationError>;
/** @internal */
export declare const UpdateProjectInternalRoutes2$inboundSchema: z.ZodType<UpdateProjectInternalRoutes2, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectInternalRoutes2$Outbound = {
    has: Array<UpdateProjectHas1$Outbound | UpdateProjectHas2$Outbound>;
    mitigate: UpdateProjectInternalRoutesMitigate$Outbound;
    src?: string | undefined;
};
/** @internal */
export declare const UpdateProjectInternalRoutes2$outboundSchema: z.ZodType<UpdateProjectInternalRoutes2$Outbound, z.ZodTypeDef, UpdateProjectInternalRoutes2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectInternalRoutes2$ {
    /** @deprecated use `UpdateProjectInternalRoutes2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectInternalRoutes2, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectInternalRoutes2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectInternalRoutes2$Outbound, z.ZodTypeDef, UpdateProjectInternalRoutes2>;
    /** @deprecated use `UpdateProjectInternalRoutes2$Outbound` instead. */
    type Outbound = UpdateProjectInternalRoutes2$Outbound;
}
export declare function updateProjectInternalRoutes2ToJSON(updateProjectInternalRoutes2: UpdateProjectInternalRoutes2): string;
export declare function updateProjectInternalRoutes2FromJSON(jsonString: string): SafeParseResult<UpdateProjectInternalRoutes2, SDKValidationError>;
/** @internal */
export declare const UpdateProjectInternalRoutes1$inboundSchema: z.ZodType<UpdateProjectInternalRoutes1, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectInternalRoutes1$Outbound = {
    src: string;
    status: number;
};
/** @internal */
export declare const UpdateProjectInternalRoutes1$outboundSchema: z.ZodType<UpdateProjectInternalRoutes1$Outbound, z.ZodTypeDef, UpdateProjectInternalRoutes1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectInternalRoutes1$ {
    /** @deprecated use `UpdateProjectInternalRoutes1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectInternalRoutes1, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectInternalRoutes1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectInternalRoutes1$Outbound, z.ZodTypeDef, UpdateProjectInternalRoutes1>;
    /** @deprecated use `UpdateProjectInternalRoutes1$Outbound` instead. */
    type Outbound = UpdateProjectInternalRoutes1$Outbound;
}
export declare function updateProjectInternalRoutes1ToJSON(updateProjectInternalRoutes1: UpdateProjectInternalRoutes1): string;
export declare function updateProjectInternalRoutes1FromJSON(jsonString: string): SafeParseResult<UpdateProjectInternalRoutes1, SDKValidationError>;
/** @internal */
export declare const UpdateProjectInternalRoutes$inboundSchema: z.ZodType<UpdateProjectInternalRoutes, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectInternalRoutes$Outbound = UpdateProjectInternalRoutes1$Outbound | UpdateProjectInternalRoutes2$Outbound;
/** @internal */
export declare const UpdateProjectInternalRoutes$outboundSchema: z.ZodType<UpdateProjectInternalRoutes$Outbound, z.ZodTypeDef, UpdateProjectInternalRoutes>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectInternalRoutes$ {
    /** @deprecated use `UpdateProjectInternalRoutes$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectInternalRoutes, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectInternalRoutes$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectInternalRoutes$Outbound, z.ZodTypeDef, UpdateProjectInternalRoutes>;
    /** @deprecated use `UpdateProjectInternalRoutes$Outbound` instead. */
    type Outbound = UpdateProjectInternalRoutes$Outbound;
}
export declare function updateProjectInternalRoutesToJSON(updateProjectInternalRoutes: UpdateProjectInternalRoutes): string;
export declare function updateProjectInternalRoutesFromJSON(jsonString: string): SafeParseResult<UpdateProjectInternalRoutes, SDKValidationError>;
/** @internal */
export declare const UpdateProjectResponseBody$inboundSchema: z.ZodType<UpdateProjectResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectResponseBody$Outbound = {
    accountId: string;
    analytics?: UpdateProjectAnalytics$Outbound | undefined;
    speedInsights?: UpdateProjectSpeedInsights$Outbound | undefined;
    autoExposeSystemEnvs?: boolean | undefined;
    autoAssignCustomDomains?: boolean | undefined;
    autoAssignCustomDomainsUpdatedBy?: string | undefined;
    buildCommand?: string | null | undefined;
    commandForIgnoringBuildStep?: string | null | undefined;
    connectConfigurations?: Array<UpdateProjectConnectConfigurations$Outbound> | null | undefined;
    connectConfigurationId?: string | null | undefined;
    connectBuildsEnabled?: boolean | undefined;
    passiveConnectConfigurationId?: string | null | undefined;
    createdAt?: number | undefined;
    customerSupportCodeVisibility?: boolean | undefined;
    crons?: UpdateProjectCrons$Outbound | undefined;
    dataCache?: UpdateProjectDataCache$Outbound | undefined;
    deploymentExpiration?: UpdateProjectDeploymentExpiration$Outbound | null | undefined;
    devCommand?: string | null | undefined;
    directoryListing: boolean;
    installCommand?: string | null | undefined;
    env?: Array<UpdateProjectEnv$Outbound> | undefined;
    customEnvironments?: Array<UpdateProjectCustomEnvironments$Outbound> | undefined;
    framework?: string | null | undefined;
    gitForkProtection?: boolean | undefined;
    gitLFS?: boolean | undefined;
    id: string;
    ipBuckets?: Array<UpdateProjectIpBuckets$Outbound> | undefined;
    latestDeployments?: Array<UpdateProjectLatestDeployments$Outbound> | undefined;
    link?: UpdateProjectLink4$Outbound | UpdateProjectLink5$Outbound | UpdateProjectLink3$Outbound | UpdateProjectLink1$Outbound | UpdateProjectLink2$Outbound | undefined;
    microfrontends?: UpdateProjectMicrofrontends1$Outbound | UpdateProjectMicrofrontends2$Outbound | undefined;
    name: string;
    nodeVersion: string;
    optionsAllowlist?: UpdateProjectProjectsOptionsAllowlist$Outbound | null | undefined;
    outputDirectory?: string | null | undefined;
    passwordProtection?: UpdateProjectProjectsPasswordProtection$Outbound | null | undefined;
    productionDeploymentsFastLane?: boolean | undefined;
    publicSource?: boolean | null | undefined;
    resourceConfig: UpdateProjectProjectsResourceConfig$Outbound;
    rollbackDescription?: UpdateProjectRollbackDescription$Outbound | undefined;
    rollingRelease?: UpdateProjectRollingRelease$Outbound | null | undefined;
    defaultResourceConfig: UpdateProjectDefaultResourceConfig$Outbound;
    rootDirectory?: string | null | undefined;
    serverlessFunctionZeroConfigFailover?: boolean | undefined;
    skewProtectionBoundaryAt?: number | undefined;
    skewProtectionMaxAge?: number | undefined;
    skipGitConnectDuringLink?: boolean | undefined;
    sourceFilesOutsideRootDirectory?: boolean | undefined;
    enableAffectedProjectsDeployments?: boolean | undefined;
    ssoProtection?: UpdateProjectProjectsSsoProtection$Outbound | null | undefined;
    targets?: {
        [k: string]: UpdateProjectTargets$Outbound | null;
    } | undefined;
    transferCompletedAt?: number | undefined;
    transferStartedAt?: number | undefined;
    transferToAccountId?: string | undefined;
    transferredFromAccountId?: string | undefined;
    updatedAt?: number | undefined;
    live?: boolean | undefined;
    enablePreviewFeedback?: boolean | null | undefined;
    enableProductionFeedback?: boolean | null | undefined;
    permissions?: UpdateProjectPermissions$Outbound | undefined;
    lastRollbackTarget?: UpdateProjectLastRollbackTarget$Outbound | null | undefined;
    lastAliasRequest?: UpdateProjectLastAliasRequest$Outbound | null | undefined;
    protectionBypass?: {
        [k: string]: UpdateProjectProtectionBypass1$Outbound | UpdateProjectProtectionBypass2$Outbound;
    } | undefined;
    hasActiveBranches?: boolean | undefined;
    trustedIps?: UpdateProjectTrustedIps1$Outbound | UpdateProjectTrustedIps2$Outbound | null | undefined;
    gitComments?: UpdateProjectGitComments$Outbound | undefined;
    gitProviderOptions?: UpdateProjectGitProviderOptions$Outbound | undefined;
    paused?: boolean | undefined;
    concurrencyBucketName?: string | undefined;
    webAnalytics?: UpdateProjectWebAnalytics$Outbound | undefined;
    security?: UpdateProjectSecurity$Outbound | undefined;
    oidcTokenConfig?: UpdateProjectProjectsOidcTokenConfig$Outbound | undefined;
    tier?: string | undefined;
    features?: UpdateProjectFeatures$Outbound | undefined;
    v0?: boolean | undefined;
    abuse?: UpdateProjectAbuse$Outbound | undefined;
    internalRoutes?: Array<UpdateProjectInternalRoutes1$Outbound | UpdateProjectInternalRoutes2$Outbound> | undefined;
};
/** @internal */
export declare const UpdateProjectResponseBody$outboundSchema: z.ZodType<UpdateProjectResponseBody$Outbound, z.ZodTypeDef, UpdateProjectResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectResponseBody$ {
    /** @deprecated use `UpdateProjectResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectResponseBody$Outbound, z.ZodTypeDef, UpdateProjectResponseBody>;
    /** @deprecated use `UpdateProjectResponseBody$Outbound` instead. */
    type Outbound = UpdateProjectResponseBody$Outbound;
}
export declare function updateProjectResponseBodyToJSON(updateProjectResponseBody: UpdateProjectResponseBody): string;
export declare function updateProjectResponseBodyFromJSON(jsonString: string): SafeParseResult<UpdateProjectResponseBody, SDKValidationError>;
//# sourceMappingURL=updateprojectop.d.ts.map