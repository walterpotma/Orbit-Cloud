/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
/**
 * The current status of the resource
 */
export const GetIntegrationResourceStatus = {
    Ready: "ready",
    Pending: "pending",
    Suspended: "suspended",
    Resumed: "resumed",
    Uninstalled: "uninstalled",
    Error: "error",
};
export const GetIntegrationResourceLevel = {
    Error: "error",
    Info: "info",
    Warn: "warn",
};
/** @internal */
export const GetIntegrationResourceRequest$inboundSchema = z.object({
    integrationConfigurationId: z.string(),
    resourceId: z.string(),
});
/** @internal */
export const GetIntegrationResourceRequest$outboundSchema = z.object({
    integrationConfigurationId: z.string(),
    resourceId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetIntegrationResourceRequest$;
(function (GetIntegrationResourceRequest$) {
    /** @deprecated use `GetIntegrationResourceRequest$inboundSchema` instead. */
    GetIntegrationResourceRequest$.inboundSchema = GetIntegrationResourceRequest$inboundSchema;
    /** @deprecated use `GetIntegrationResourceRequest$outboundSchema` instead. */
    GetIntegrationResourceRequest$.outboundSchema = GetIntegrationResourceRequest$outboundSchema;
})(GetIntegrationResourceRequest$ || (GetIntegrationResourceRequest$ = {}));
export function getIntegrationResourceRequestToJSON(getIntegrationResourceRequest) {
    return JSON.stringify(GetIntegrationResourceRequest$outboundSchema.parse(getIntegrationResourceRequest));
}
export function getIntegrationResourceRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetIntegrationResourceRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetIntegrationResourceRequest' from JSON`);
}
/** @internal */
export const GetIntegrationResourceStatus$inboundSchema = z.nativeEnum(GetIntegrationResourceStatus);
/** @internal */
export const GetIntegrationResourceStatus$outboundSchema = GetIntegrationResourceStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetIntegrationResourceStatus$;
(function (GetIntegrationResourceStatus$) {
    /** @deprecated use `GetIntegrationResourceStatus$inboundSchema` instead. */
    GetIntegrationResourceStatus$.inboundSchema = GetIntegrationResourceStatus$inboundSchema;
    /** @deprecated use `GetIntegrationResourceStatus$outboundSchema` instead. */
    GetIntegrationResourceStatus$.outboundSchema = GetIntegrationResourceStatus$outboundSchema;
})(GetIntegrationResourceStatus$ || (GetIntegrationResourceStatus$ = {}));
/** @internal */
export const Experimentation$inboundSchema = z.object({
    edgeConfigSyncingEnabled: z.boolean().optional(),
    edgeConfigId: z.string().optional(),
    edgeConfigTokenId: z.string().optional(),
});
/** @internal */
export const Experimentation$outboundSchema = z.object({
    edgeConfigSyncingEnabled: z.boolean().optional(),
    edgeConfigId: z.string().optional(),
    edgeConfigTokenId: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Experimentation$;
(function (Experimentation$) {
    /** @deprecated use `Experimentation$inboundSchema` instead. */
    Experimentation$.inboundSchema = Experimentation$inboundSchema;
    /** @deprecated use `Experimentation$outboundSchema` instead. */
    Experimentation$.outboundSchema = Experimentation$outboundSchema;
})(Experimentation$ || (Experimentation$ = {}));
export function experimentationToJSON(experimentation) {
    return JSON.stringify(Experimentation$outboundSchema.parse(experimentation));
}
export function experimentationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Experimentation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Experimentation' from JSON`);
}
/** @internal */
export const ProtocolSettings$inboundSchema = z.object({
    experimentation: z.lazy(() => Experimentation$inboundSchema).optional(),
});
/** @internal */
export const ProtocolSettings$outboundSchema = z.object({
    experimentation: z.lazy(() => Experimentation$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ProtocolSettings$;
(function (ProtocolSettings$) {
    /** @deprecated use `ProtocolSettings$inboundSchema` instead. */
    ProtocolSettings$.inboundSchema = ProtocolSettings$inboundSchema;
    /** @deprecated use `ProtocolSettings$outboundSchema` instead. */
    ProtocolSettings$.outboundSchema = ProtocolSettings$outboundSchema;
})(ProtocolSettings$ || (ProtocolSettings$ = {}));
export function protocolSettingsToJSON(protocolSettings) {
    return JSON.stringify(ProtocolSettings$outboundSchema.parse(protocolSettings));
}
export function protocolSettingsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ProtocolSettings$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ProtocolSettings' from JSON`);
}
/** @internal */
export const GetIntegrationResourceLevel$inboundSchema = z.nativeEnum(GetIntegrationResourceLevel);
/** @internal */
export const GetIntegrationResourceLevel$outboundSchema = GetIntegrationResourceLevel$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetIntegrationResourceLevel$;
(function (GetIntegrationResourceLevel$) {
    /** @deprecated use `GetIntegrationResourceLevel$inboundSchema` instead. */
    GetIntegrationResourceLevel$.inboundSchema = GetIntegrationResourceLevel$inboundSchema;
    /** @deprecated use `GetIntegrationResourceLevel$outboundSchema` instead. */
    GetIntegrationResourceLevel$.outboundSchema = GetIntegrationResourceLevel$outboundSchema;
})(GetIntegrationResourceLevel$ || (GetIntegrationResourceLevel$ = {}));
/** @internal */
export const GetIntegrationResourceNotification$inboundSchema = z.object({
    level: GetIntegrationResourceLevel$inboundSchema,
    title: z.string(),
    message: z.string().optional(),
    href: z.string().optional(),
});
/** @internal */
export const GetIntegrationResourceNotification$outboundSchema = z.object({
    level: GetIntegrationResourceLevel$outboundSchema,
    title: z.string(),
    message: z.string().optional(),
    href: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetIntegrationResourceNotification$;
(function (GetIntegrationResourceNotification$) {
    /** @deprecated use `GetIntegrationResourceNotification$inboundSchema` instead. */
    GetIntegrationResourceNotification$.inboundSchema = GetIntegrationResourceNotification$inboundSchema;
    /** @deprecated use `GetIntegrationResourceNotification$outboundSchema` instead. */
    GetIntegrationResourceNotification$.outboundSchema = GetIntegrationResourceNotification$outboundSchema;
})(GetIntegrationResourceNotification$ || (GetIntegrationResourceNotification$ = {}));
export function getIntegrationResourceNotificationToJSON(getIntegrationResourceNotification) {
    return JSON.stringify(GetIntegrationResourceNotification$outboundSchema.parse(getIntegrationResourceNotification));
}
export function getIntegrationResourceNotificationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetIntegrationResourceNotification$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetIntegrationResourceNotification' from JSON`);
}
/** @internal */
export const GetIntegrationResourceMetadata$inboundSchema = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.string()),
    z.array(z.number()),
]);
/** @internal */
export const GetIntegrationResourceMetadata$outboundSchema = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.string()),
    z.array(z.number()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetIntegrationResourceMetadata$;
(function (GetIntegrationResourceMetadata$) {
    /** @deprecated use `GetIntegrationResourceMetadata$inboundSchema` instead. */
    GetIntegrationResourceMetadata$.inboundSchema = GetIntegrationResourceMetadata$inboundSchema;
    /** @deprecated use `GetIntegrationResourceMetadata$outboundSchema` instead. */
    GetIntegrationResourceMetadata$.outboundSchema = GetIntegrationResourceMetadata$outboundSchema;
})(GetIntegrationResourceMetadata$ || (GetIntegrationResourceMetadata$ = {}));
export function getIntegrationResourceMetadataToJSON(getIntegrationResourceMetadata) {
    return JSON.stringify(GetIntegrationResourceMetadata$outboundSchema.parse(getIntegrationResourceMetadata));
}
export function getIntegrationResourceMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetIntegrationResourceMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetIntegrationResourceMetadata' from JSON`);
}
/** @internal */
export const GetIntegrationResourceResponseBody$inboundSchema = z.object({
    id: z.string(),
    internalId: z.string(),
    name: z.string(),
    status: GetIntegrationResourceStatus$inboundSchema.optional(),
    productId: z.string(),
    protocolSettings: z.lazy(() => ProtocolSettings$inboundSchema).optional(),
    notification: z.lazy(() => GetIntegrationResourceNotification$inboundSchema)
        .optional(),
    billingPlanId: z.string().optional(),
    metadata: z.record(z.union([
        z.string(),
        z.number(),
        z.boolean(),
        z.array(z.string()),
        z.array(z.number()),
    ])).optional(),
});
/** @internal */
export const GetIntegrationResourceResponseBody$outboundSchema = z.object({
    id: z.string(),
    internalId: z.string(),
    name: z.string(),
    status: GetIntegrationResourceStatus$outboundSchema.optional(),
    productId: z.string(),
    protocolSettings: z.lazy(() => ProtocolSettings$outboundSchema).optional(),
    notification: z.lazy(() => GetIntegrationResourceNotification$outboundSchema)
        .optional(),
    billingPlanId: z.string().optional(),
    metadata: z.record(z.union([
        z.string(),
        z.number(),
        z.boolean(),
        z.array(z.string()),
        z.array(z.number()),
    ])).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetIntegrationResourceResponseBody$;
(function (GetIntegrationResourceResponseBody$) {
    /** @deprecated use `GetIntegrationResourceResponseBody$inboundSchema` instead. */
    GetIntegrationResourceResponseBody$.inboundSchema = GetIntegrationResourceResponseBody$inboundSchema;
    /** @deprecated use `GetIntegrationResourceResponseBody$outboundSchema` instead. */
    GetIntegrationResourceResponseBody$.outboundSchema = GetIntegrationResourceResponseBody$outboundSchema;
})(GetIntegrationResourceResponseBody$ || (GetIntegrationResourceResponseBody$ = {}));
export function getIntegrationResourceResponseBodyToJSON(getIntegrationResourceResponseBody) {
    return JSON.stringify(GetIntegrationResourceResponseBody$outboundSchema.parse(getIntegrationResourceResponseBody));
}
export function getIntegrationResourceResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetIntegrationResourceResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetIntegrationResourceResponseBody' from JSON`);
}
//# sourceMappingURL=getintegrationresourceop.js.map