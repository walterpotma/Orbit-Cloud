/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { AuthToken$inboundSchema, AuthToken$outboundSchema, } from "./authtoken.js";
/** @internal */
export const GetAuthTokenRequest$inboundSchema = z.object({
    tokenId: z.string(),
});
/** @internal */
export const GetAuthTokenRequest$outboundSchema = z.object({
    tokenId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetAuthTokenRequest$;
(function (GetAuthTokenRequest$) {
    /** @deprecated use `GetAuthTokenRequest$inboundSchema` instead. */
    GetAuthTokenRequest$.inboundSchema = GetAuthTokenRequest$inboundSchema;
    /** @deprecated use `GetAuthTokenRequest$outboundSchema` instead. */
    GetAuthTokenRequest$.outboundSchema = GetAuthTokenRequest$outboundSchema;
})(GetAuthTokenRequest$ || (GetAuthTokenRequest$ = {}));
export function getAuthTokenRequestToJSON(getAuthTokenRequest) {
    return JSON.stringify(GetAuthTokenRequest$outboundSchema.parse(getAuthTokenRequest));
}
export function getAuthTokenRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetAuthTokenRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetAuthTokenRequest' from JSON`);
}
/** @internal */
export const GetAuthTokenResponseBody$inboundSchema = z.object({
    token: AuthToken$inboundSchema,
});
/** @internal */
export const GetAuthTokenResponseBody$outboundSchema = z.object({
    token: AuthToken$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetAuthTokenResponseBody$;
(function (GetAuthTokenResponseBody$) {
    /** @deprecated use `GetAuthTokenResponseBody$inboundSchema` instead. */
    GetAuthTokenResponseBody$.inboundSchema = GetAuthTokenResponseBody$inboundSchema;
    /** @deprecated use `GetAuthTokenResponseBody$outboundSchema` instead. */
    GetAuthTokenResponseBody$.outboundSchema = GetAuthTokenResponseBody$outboundSchema;
})(GetAuthTokenResponseBody$ || (GetAuthTokenResponseBody$ = {}));
export function getAuthTokenResponseBodyToJSON(getAuthTokenResponseBody) {
    return JSON.stringify(GetAuthTokenResponseBody$outboundSchema.parse(getAuthTokenResponseBody));
}
export function getAuthTokenResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetAuthTokenResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetAuthTokenResponseBody' from JSON`);
}
//# sourceMappingURL=getauthtokenop.js.map