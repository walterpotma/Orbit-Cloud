import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type ListDeploymentAliasesRequest = {
    /**
     * The ID of the deployment the aliases should be listed for
     */
    id: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};
export declare const ListDeploymentAliasesProtectionBypassAliasesResponse200Scope: {
    readonly EmailInvite: "email_invite";
};
export type ListDeploymentAliasesProtectionBypassAliasesResponse200Scope = ClosedEnum<typeof ListDeploymentAliasesProtectionBypassAliasesResponse200Scope>;
/**
 * The protection bypass for the alias
 */
export type ListDeploymentAliasesProtectionBypass4 = {
    createdAt: number;
    lastUpdatedAt: number;
    lastUpdatedBy: string;
    scope: ListDeploymentAliasesProtectionBypassAliasesResponse200Scope;
};
export declare const ListDeploymentAliasesProtectionBypassAliasesResponseScope: {
    readonly AliasProtectionOverride: "alias-protection-override";
};
export type ListDeploymentAliasesProtectionBypassAliasesResponseScope = ClosedEnum<typeof ListDeploymentAliasesProtectionBypassAliasesResponseScope>;
/**
 * The protection bypass for the alias
 */
export type ListDeploymentAliasesProtectionBypass3 = {
    createdAt: number;
    createdBy: string;
    scope: ListDeploymentAliasesProtectionBypassAliasesResponseScope;
};
export declare const ListDeploymentAliasesProtectionBypassAccess: {
    readonly Requested: "requested";
    readonly Granted: "granted";
};
export type ListDeploymentAliasesProtectionBypassAccess = ClosedEnum<typeof ListDeploymentAliasesProtectionBypassAccess>;
export declare const ListDeploymentAliasesProtectionBypassAliasesScope: {
    readonly User: "user";
};
export type ListDeploymentAliasesProtectionBypassAliasesScope = ClosedEnum<typeof ListDeploymentAliasesProtectionBypassAliasesScope>;
/**
 * The protection bypass for the alias
 */
export type ListDeploymentAliasesProtectionBypass2 = {
    createdAt: number;
    lastUpdatedAt: number;
    lastUpdatedBy: string;
    access: ListDeploymentAliasesProtectionBypassAccess;
    scope: ListDeploymentAliasesProtectionBypassAliasesScope;
};
export declare const ListDeploymentAliasesProtectionBypassScope: {
    readonly ShareableLink: "shareable-link";
};
export type ListDeploymentAliasesProtectionBypassScope = ClosedEnum<typeof ListDeploymentAliasesProtectionBypassScope>;
/**
 * The protection bypass for the alias
 */
export type ListDeploymentAliasesProtectionBypass1 = {
    createdAt: number;
    createdBy: string;
    scope: ListDeploymentAliasesProtectionBypassScope;
    expires?: number | undefined;
};
export type ListDeploymentAliasesProtectionBypass = ListDeploymentAliasesProtectionBypass2 | ListDeploymentAliasesProtectionBypass4 | ListDeploymentAliasesProtectionBypass1 | ListDeploymentAliasesProtectionBypass3;
/**
 * A list of the aliases assigned to the deployment
 */
export type Aliases = {
    /**
     * The unique identifier of the alias
     */
    uid: string;
    /**
     * The alias name, it could be a `.vercel.app` subdomain or a custom domain
     */
    alias: string;
    /**
     * The date when the alias was created
     */
    created: Date;
    /**
     * Target destination domain for redirect when the alias is a redirect
     */
    redirect?: string | null | undefined;
    /**
     * The protection bypass for the alias
     */
    protectionBypass?: {
        [k: string]: ListDeploymentAliasesProtectionBypass2 | ListDeploymentAliasesProtectionBypass4 | ListDeploymentAliasesProtectionBypass1 | ListDeploymentAliasesProtectionBypass3;
    } | undefined;
};
/**
 * The list of aliases assigned to the deployment
 */
export type ListDeploymentAliasesResponseBody = {
    /**
     * A list of the aliases assigned to the deployment
     */
    aliases: Array<Aliases>;
};
/** @internal */
export declare const ListDeploymentAliasesRequest$inboundSchema: z.ZodType<ListDeploymentAliasesRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type ListDeploymentAliasesRequest$Outbound = {
    id: string;
    teamId?: string | undefined;
    slug?: string | undefined;
};
/** @internal */
export declare const ListDeploymentAliasesRequest$outboundSchema: z.ZodType<ListDeploymentAliasesRequest$Outbound, z.ZodTypeDef, ListDeploymentAliasesRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ListDeploymentAliasesRequest$ {
    /** @deprecated use `ListDeploymentAliasesRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ListDeploymentAliasesRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `ListDeploymentAliasesRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ListDeploymentAliasesRequest$Outbound, z.ZodTypeDef, ListDeploymentAliasesRequest>;
    /** @deprecated use `ListDeploymentAliasesRequest$Outbound` instead. */
    type Outbound = ListDeploymentAliasesRequest$Outbound;
}
export declare function listDeploymentAliasesRequestToJSON(listDeploymentAliasesRequest: ListDeploymentAliasesRequest): string;
export declare function listDeploymentAliasesRequestFromJSON(jsonString: string): SafeParseResult<ListDeploymentAliasesRequest, SDKValidationError>;
/** @internal */
export declare const ListDeploymentAliasesProtectionBypassAliasesResponse200Scope$inboundSchema: z.ZodNativeEnum<typeof ListDeploymentAliasesProtectionBypassAliasesResponse200Scope>;
/** @internal */
export declare const ListDeploymentAliasesProtectionBypassAliasesResponse200Scope$outboundSchema: z.ZodNativeEnum<typeof ListDeploymentAliasesProtectionBypassAliasesResponse200Scope>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ListDeploymentAliasesProtectionBypassAliasesResponse200Scope$ {
    /** @deprecated use `ListDeploymentAliasesProtectionBypassAliasesResponse200Scope$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly EmailInvite: "email_invite";
    }>;
    /** @deprecated use `ListDeploymentAliasesProtectionBypassAliasesResponse200Scope$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly EmailInvite: "email_invite";
    }>;
}
/** @internal */
export declare const ListDeploymentAliasesProtectionBypass4$inboundSchema: z.ZodType<ListDeploymentAliasesProtectionBypass4, z.ZodTypeDef, unknown>;
/** @internal */
export type ListDeploymentAliasesProtectionBypass4$Outbound = {
    createdAt: number;
    lastUpdatedAt: number;
    lastUpdatedBy: string;
    scope: string;
};
/** @internal */
export declare const ListDeploymentAliasesProtectionBypass4$outboundSchema: z.ZodType<ListDeploymentAliasesProtectionBypass4$Outbound, z.ZodTypeDef, ListDeploymentAliasesProtectionBypass4>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ListDeploymentAliasesProtectionBypass4$ {
    /** @deprecated use `ListDeploymentAliasesProtectionBypass4$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ListDeploymentAliasesProtectionBypass4, z.ZodTypeDef, unknown>;
    /** @deprecated use `ListDeploymentAliasesProtectionBypass4$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ListDeploymentAliasesProtectionBypass4$Outbound, z.ZodTypeDef, ListDeploymentAliasesProtectionBypass4>;
    /** @deprecated use `ListDeploymentAliasesProtectionBypass4$Outbound` instead. */
    type Outbound = ListDeploymentAliasesProtectionBypass4$Outbound;
}
export declare function listDeploymentAliasesProtectionBypass4ToJSON(listDeploymentAliasesProtectionBypass4: ListDeploymentAliasesProtectionBypass4): string;
export declare function listDeploymentAliasesProtectionBypass4FromJSON(jsonString: string): SafeParseResult<ListDeploymentAliasesProtectionBypass4, SDKValidationError>;
/** @internal */
export declare const ListDeploymentAliasesProtectionBypassAliasesResponseScope$inboundSchema: z.ZodNativeEnum<typeof ListDeploymentAliasesProtectionBypassAliasesResponseScope>;
/** @internal */
export declare const ListDeploymentAliasesProtectionBypassAliasesResponseScope$outboundSchema: z.ZodNativeEnum<typeof ListDeploymentAliasesProtectionBypassAliasesResponseScope>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ListDeploymentAliasesProtectionBypassAliasesResponseScope$ {
    /** @deprecated use `ListDeploymentAliasesProtectionBypassAliasesResponseScope$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly AliasProtectionOverride: "alias-protection-override";
    }>;
    /** @deprecated use `ListDeploymentAliasesProtectionBypassAliasesResponseScope$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly AliasProtectionOverride: "alias-protection-override";
    }>;
}
/** @internal */
export declare const ListDeploymentAliasesProtectionBypass3$inboundSchema: z.ZodType<ListDeploymentAliasesProtectionBypass3, z.ZodTypeDef, unknown>;
/** @internal */
export type ListDeploymentAliasesProtectionBypass3$Outbound = {
    createdAt: number;
    createdBy: string;
    scope: string;
};
/** @internal */
export declare const ListDeploymentAliasesProtectionBypass3$outboundSchema: z.ZodType<ListDeploymentAliasesProtectionBypass3$Outbound, z.ZodTypeDef, ListDeploymentAliasesProtectionBypass3>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ListDeploymentAliasesProtectionBypass3$ {
    /** @deprecated use `ListDeploymentAliasesProtectionBypass3$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ListDeploymentAliasesProtectionBypass3, z.ZodTypeDef, unknown>;
    /** @deprecated use `ListDeploymentAliasesProtectionBypass3$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ListDeploymentAliasesProtectionBypass3$Outbound, z.ZodTypeDef, ListDeploymentAliasesProtectionBypass3>;
    /** @deprecated use `ListDeploymentAliasesProtectionBypass3$Outbound` instead. */
    type Outbound = ListDeploymentAliasesProtectionBypass3$Outbound;
}
export declare function listDeploymentAliasesProtectionBypass3ToJSON(listDeploymentAliasesProtectionBypass3: ListDeploymentAliasesProtectionBypass3): string;
export declare function listDeploymentAliasesProtectionBypass3FromJSON(jsonString: string): SafeParseResult<ListDeploymentAliasesProtectionBypass3, SDKValidationError>;
/** @internal */
export declare const ListDeploymentAliasesProtectionBypassAccess$inboundSchema: z.ZodNativeEnum<typeof ListDeploymentAliasesProtectionBypassAccess>;
/** @internal */
export declare const ListDeploymentAliasesProtectionBypassAccess$outboundSchema: z.ZodNativeEnum<typeof ListDeploymentAliasesProtectionBypassAccess>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ListDeploymentAliasesProtectionBypassAccess$ {
    /** @deprecated use `ListDeploymentAliasesProtectionBypassAccess$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Requested: "requested";
        readonly Granted: "granted";
    }>;
    /** @deprecated use `ListDeploymentAliasesProtectionBypassAccess$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Requested: "requested";
        readonly Granted: "granted";
    }>;
}
/** @internal */
export declare const ListDeploymentAliasesProtectionBypassAliasesScope$inboundSchema: z.ZodNativeEnum<typeof ListDeploymentAliasesProtectionBypassAliasesScope>;
/** @internal */
export declare const ListDeploymentAliasesProtectionBypassAliasesScope$outboundSchema: z.ZodNativeEnum<typeof ListDeploymentAliasesProtectionBypassAliasesScope>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ListDeploymentAliasesProtectionBypassAliasesScope$ {
    /** @deprecated use `ListDeploymentAliasesProtectionBypassAliasesScope$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly User: "user";
    }>;
    /** @deprecated use `ListDeploymentAliasesProtectionBypassAliasesScope$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly User: "user";
    }>;
}
/** @internal */
export declare const ListDeploymentAliasesProtectionBypass2$inboundSchema: z.ZodType<ListDeploymentAliasesProtectionBypass2, z.ZodTypeDef, unknown>;
/** @internal */
export type ListDeploymentAliasesProtectionBypass2$Outbound = {
    createdAt: number;
    lastUpdatedAt: number;
    lastUpdatedBy: string;
    access: string;
    scope: string;
};
/** @internal */
export declare const ListDeploymentAliasesProtectionBypass2$outboundSchema: z.ZodType<ListDeploymentAliasesProtectionBypass2$Outbound, z.ZodTypeDef, ListDeploymentAliasesProtectionBypass2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ListDeploymentAliasesProtectionBypass2$ {
    /** @deprecated use `ListDeploymentAliasesProtectionBypass2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ListDeploymentAliasesProtectionBypass2, z.ZodTypeDef, unknown>;
    /** @deprecated use `ListDeploymentAliasesProtectionBypass2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ListDeploymentAliasesProtectionBypass2$Outbound, z.ZodTypeDef, ListDeploymentAliasesProtectionBypass2>;
    /** @deprecated use `ListDeploymentAliasesProtectionBypass2$Outbound` instead. */
    type Outbound = ListDeploymentAliasesProtectionBypass2$Outbound;
}
export declare function listDeploymentAliasesProtectionBypass2ToJSON(listDeploymentAliasesProtectionBypass2: ListDeploymentAliasesProtectionBypass2): string;
export declare function listDeploymentAliasesProtectionBypass2FromJSON(jsonString: string): SafeParseResult<ListDeploymentAliasesProtectionBypass2, SDKValidationError>;
/** @internal */
export declare const ListDeploymentAliasesProtectionBypassScope$inboundSchema: z.ZodNativeEnum<typeof ListDeploymentAliasesProtectionBypassScope>;
/** @internal */
export declare const ListDeploymentAliasesProtectionBypassScope$outboundSchema: z.ZodNativeEnum<typeof ListDeploymentAliasesProtectionBypassScope>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ListDeploymentAliasesProtectionBypassScope$ {
    /** @deprecated use `ListDeploymentAliasesProtectionBypassScope$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly ShareableLink: "shareable-link";
    }>;
    /** @deprecated use `ListDeploymentAliasesProtectionBypassScope$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly ShareableLink: "shareable-link";
    }>;
}
/** @internal */
export declare const ListDeploymentAliasesProtectionBypass1$inboundSchema: z.ZodType<ListDeploymentAliasesProtectionBypass1, z.ZodTypeDef, unknown>;
/** @internal */
export type ListDeploymentAliasesProtectionBypass1$Outbound = {
    createdAt: number;
    createdBy: string;
    scope: string;
    expires?: number | undefined;
};
/** @internal */
export declare const ListDeploymentAliasesProtectionBypass1$outboundSchema: z.ZodType<ListDeploymentAliasesProtectionBypass1$Outbound, z.ZodTypeDef, ListDeploymentAliasesProtectionBypass1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ListDeploymentAliasesProtectionBypass1$ {
    /** @deprecated use `ListDeploymentAliasesProtectionBypass1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ListDeploymentAliasesProtectionBypass1, z.ZodTypeDef, unknown>;
    /** @deprecated use `ListDeploymentAliasesProtectionBypass1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ListDeploymentAliasesProtectionBypass1$Outbound, z.ZodTypeDef, ListDeploymentAliasesProtectionBypass1>;
    /** @deprecated use `ListDeploymentAliasesProtectionBypass1$Outbound` instead. */
    type Outbound = ListDeploymentAliasesProtectionBypass1$Outbound;
}
export declare function listDeploymentAliasesProtectionBypass1ToJSON(listDeploymentAliasesProtectionBypass1: ListDeploymentAliasesProtectionBypass1): string;
export declare function listDeploymentAliasesProtectionBypass1FromJSON(jsonString: string): SafeParseResult<ListDeploymentAliasesProtectionBypass1, SDKValidationError>;
/** @internal */
export declare const ListDeploymentAliasesProtectionBypass$inboundSchema: z.ZodType<ListDeploymentAliasesProtectionBypass, z.ZodTypeDef, unknown>;
/** @internal */
export type ListDeploymentAliasesProtectionBypass$Outbound = ListDeploymentAliasesProtectionBypass2$Outbound | ListDeploymentAliasesProtectionBypass4$Outbound | ListDeploymentAliasesProtectionBypass1$Outbound | ListDeploymentAliasesProtectionBypass3$Outbound;
/** @internal */
export declare const ListDeploymentAliasesProtectionBypass$outboundSchema: z.ZodType<ListDeploymentAliasesProtectionBypass$Outbound, z.ZodTypeDef, ListDeploymentAliasesProtectionBypass>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ListDeploymentAliasesProtectionBypass$ {
    /** @deprecated use `ListDeploymentAliasesProtectionBypass$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ListDeploymentAliasesProtectionBypass, z.ZodTypeDef, unknown>;
    /** @deprecated use `ListDeploymentAliasesProtectionBypass$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ListDeploymentAliasesProtectionBypass$Outbound, z.ZodTypeDef, ListDeploymentAliasesProtectionBypass>;
    /** @deprecated use `ListDeploymentAliasesProtectionBypass$Outbound` instead. */
    type Outbound = ListDeploymentAliasesProtectionBypass$Outbound;
}
export declare function listDeploymentAliasesProtectionBypassToJSON(listDeploymentAliasesProtectionBypass: ListDeploymentAliasesProtectionBypass): string;
export declare function listDeploymentAliasesProtectionBypassFromJSON(jsonString: string): SafeParseResult<ListDeploymentAliasesProtectionBypass, SDKValidationError>;
/** @internal */
export declare const Aliases$inboundSchema: z.ZodType<Aliases, z.ZodTypeDef, unknown>;
/** @internal */
export type Aliases$Outbound = {
    uid: string;
    alias: string;
    created: string;
    redirect?: string | null | undefined;
    protectionBypass?: {
        [k: string]: ListDeploymentAliasesProtectionBypass2$Outbound | ListDeploymentAliasesProtectionBypass4$Outbound | ListDeploymentAliasesProtectionBypass1$Outbound | ListDeploymentAliasesProtectionBypass3$Outbound;
    } | undefined;
};
/** @internal */
export declare const Aliases$outboundSchema: z.ZodType<Aliases$Outbound, z.ZodTypeDef, Aliases>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Aliases$ {
    /** @deprecated use `Aliases$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Aliases, z.ZodTypeDef, unknown>;
    /** @deprecated use `Aliases$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Aliases$Outbound, z.ZodTypeDef, Aliases>;
    /** @deprecated use `Aliases$Outbound` instead. */
    type Outbound = Aliases$Outbound;
}
export declare function aliasesToJSON(aliases: Aliases): string;
export declare function aliasesFromJSON(jsonString: string): SafeParseResult<Aliases, SDKValidationError>;
/** @internal */
export declare const ListDeploymentAliasesResponseBody$inboundSchema: z.ZodType<ListDeploymentAliasesResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type ListDeploymentAliasesResponseBody$Outbound = {
    aliases: Array<Aliases$Outbound>;
};
/** @internal */
export declare const ListDeploymentAliasesResponseBody$outboundSchema: z.ZodType<ListDeploymentAliasesResponseBody$Outbound, z.ZodTypeDef, ListDeploymentAliasesResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ListDeploymentAliasesResponseBody$ {
    /** @deprecated use `ListDeploymentAliasesResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ListDeploymentAliasesResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `ListDeploymentAliasesResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ListDeploymentAliasesResponseBody$Outbound, z.ZodTypeDef, ListDeploymentAliasesResponseBody>;
    /** @deprecated use `ListDeploymentAliasesResponseBody$Outbound` instead. */
    type Outbound = ListDeploymentAliasesResponseBody$Outbound;
}
export declare function listDeploymentAliasesResponseBodyToJSON(listDeploymentAliasesResponseBody: ListDeploymentAliasesResponseBody): string;
export declare function listDeploymentAliasesResponseBodyFromJSON(jsonString: string): SafeParseResult<ListDeploymentAliasesResponseBody, SDKValidationError>;
//# sourceMappingURL=listdeploymentaliasesop.d.ts.map