/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/**
 * Type of matcher. One of \"equals\", \"startsWith\", or \"endsWith\".
 */
export const CreateCustomEnvironmentType = {
    Equals: "equals",
    StartsWith: "startsWith",
    EndsWith: "endsWith",
};
/**
 * The type of environment (production, preview, or development)
 */
export const CreateCustomEnvironmentEnvironmentType = {
    Preview: "preview",
    Production: "production",
    Development: "development",
};
/**
 * The type of matching to perform
 */
export const CreateCustomEnvironmentEnvironmentResponseType = {
    EndsWith: "endsWith",
    StartsWith: "startsWith",
    Equals: "equals",
};
/** @internal */
export const CreateCustomEnvironmentType$inboundSchema = z.nativeEnum(CreateCustomEnvironmentType);
/** @internal */
export const CreateCustomEnvironmentType$outboundSchema = CreateCustomEnvironmentType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateCustomEnvironmentType$;
(function (CreateCustomEnvironmentType$) {
    /** @deprecated use `CreateCustomEnvironmentType$inboundSchema` instead. */
    CreateCustomEnvironmentType$.inboundSchema = CreateCustomEnvironmentType$inboundSchema;
    /** @deprecated use `CreateCustomEnvironmentType$outboundSchema` instead. */
    CreateCustomEnvironmentType$.outboundSchema = CreateCustomEnvironmentType$outboundSchema;
})(CreateCustomEnvironmentType$ || (CreateCustomEnvironmentType$ = {}));
/** @internal */
export const BranchMatcher$inboundSchema = z.object({
    type: CreateCustomEnvironmentType$inboundSchema,
    pattern: z.string(),
});
/** @internal */
export const BranchMatcher$outboundSchema = z.object({
    type: CreateCustomEnvironmentType$outboundSchema,
    pattern: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BranchMatcher$;
(function (BranchMatcher$) {
    /** @deprecated use `BranchMatcher$inboundSchema` instead. */
    BranchMatcher$.inboundSchema = BranchMatcher$inboundSchema;
    /** @deprecated use `BranchMatcher$outboundSchema` instead. */
    BranchMatcher$.outboundSchema = BranchMatcher$outboundSchema;
})(BranchMatcher$ || (BranchMatcher$ = {}));
export function branchMatcherToJSON(branchMatcher) {
    return JSON.stringify(BranchMatcher$outboundSchema.parse(branchMatcher));
}
export function branchMatcherFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BranchMatcher$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BranchMatcher' from JSON`);
}
/** @internal */
export const CreateCustomEnvironmentRequestBody$inboundSchema = z.object({
    slug: z.string().optional(),
    description: z.string().optional(),
    branchMatcher: z.lazy(() => BranchMatcher$inboundSchema).optional(),
    copyEnvVarsFrom: z.string().optional(),
});
/** @internal */
export const CreateCustomEnvironmentRequestBody$outboundSchema = z.object({
    slug: z.string().optional(),
    description: z.string().optional(),
    branchMatcher: z.lazy(() => BranchMatcher$outboundSchema).optional(),
    copyEnvVarsFrom: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateCustomEnvironmentRequestBody$;
(function (CreateCustomEnvironmentRequestBody$) {
    /** @deprecated use `CreateCustomEnvironmentRequestBody$inboundSchema` instead. */
    CreateCustomEnvironmentRequestBody$.inboundSchema = CreateCustomEnvironmentRequestBody$inboundSchema;
    /** @deprecated use `CreateCustomEnvironmentRequestBody$outboundSchema` instead. */
    CreateCustomEnvironmentRequestBody$.outboundSchema = CreateCustomEnvironmentRequestBody$outboundSchema;
})(CreateCustomEnvironmentRequestBody$ || (CreateCustomEnvironmentRequestBody$ = {}));
export function createCustomEnvironmentRequestBodyToJSON(createCustomEnvironmentRequestBody) {
    return JSON.stringify(CreateCustomEnvironmentRequestBody$outboundSchema.parse(createCustomEnvironmentRequestBody));
}
export function createCustomEnvironmentRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateCustomEnvironmentRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateCustomEnvironmentRequestBody' from JSON`);
}
/** @internal */
export const CreateCustomEnvironmentRequest$inboundSchema = z.object({
    idOrName: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => CreateCustomEnvironmentRequestBody$inboundSchema)
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const CreateCustomEnvironmentRequest$outboundSchema = z.object({
    idOrName: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => CreateCustomEnvironmentRequestBody$outboundSchema)
        .optional(),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateCustomEnvironmentRequest$;
(function (CreateCustomEnvironmentRequest$) {
    /** @deprecated use `CreateCustomEnvironmentRequest$inboundSchema` instead. */
    CreateCustomEnvironmentRequest$.inboundSchema = CreateCustomEnvironmentRequest$inboundSchema;
    /** @deprecated use `CreateCustomEnvironmentRequest$outboundSchema` instead. */
    CreateCustomEnvironmentRequest$.outboundSchema = CreateCustomEnvironmentRequest$outboundSchema;
})(CreateCustomEnvironmentRequest$ || (CreateCustomEnvironmentRequest$ = {}));
export function createCustomEnvironmentRequestToJSON(createCustomEnvironmentRequest) {
    return JSON.stringify(CreateCustomEnvironmentRequest$outboundSchema.parse(createCustomEnvironmentRequest));
}
export function createCustomEnvironmentRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateCustomEnvironmentRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateCustomEnvironmentRequest' from JSON`);
}
/** @internal */
export const CreateCustomEnvironmentEnvironmentType$inboundSchema = z.nativeEnum(CreateCustomEnvironmentEnvironmentType);
/** @internal */
export const CreateCustomEnvironmentEnvironmentType$outboundSchema = CreateCustomEnvironmentEnvironmentType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateCustomEnvironmentEnvironmentType$;
(function (CreateCustomEnvironmentEnvironmentType$) {
    /** @deprecated use `CreateCustomEnvironmentEnvironmentType$inboundSchema` instead. */
    CreateCustomEnvironmentEnvironmentType$.inboundSchema = CreateCustomEnvironmentEnvironmentType$inboundSchema;
    /** @deprecated use `CreateCustomEnvironmentEnvironmentType$outboundSchema` instead. */
    CreateCustomEnvironmentEnvironmentType$.outboundSchema = CreateCustomEnvironmentEnvironmentType$outboundSchema;
})(CreateCustomEnvironmentEnvironmentType$ || (CreateCustomEnvironmentEnvironmentType$ = {}));
/** @internal */
export const CreateCustomEnvironmentEnvironmentResponseType$inboundSchema = z
    .nativeEnum(CreateCustomEnvironmentEnvironmentResponseType);
/** @internal */
export const CreateCustomEnvironmentEnvironmentResponseType$outboundSchema = CreateCustomEnvironmentEnvironmentResponseType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateCustomEnvironmentEnvironmentResponseType$;
(function (CreateCustomEnvironmentEnvironmentResponseType$) {
    /** @deprecated use `CreateCustomEnvironmentEnvironmentResponseType$inboundSchema` instead. */
    CreateCustomEnvironmentEnvironmentResponseType$.inboundSchema = CreateCustomEnvironmentEnvironmentResponseType$inboundSchema;
    /** @deprecated use `CreateCustomEnvironmentEnvironmentResponseType$outboundSchema` instead. */
    CreateCustomEnvironmentEnvironmentResponseType$.outboundSchema = CreateCustomEnvironmentEnvironmentResponseType$outboundSchema;
})(CreateCustomEnvironmentEnvironmentResponseType$ || (CreateCustomEnvironmentEnvironmentResponseType$ = {}));
/** @internal */
export const CreateCustomEnvironmentBranchMatcher$inboundSchema = z.object({
    type: CreateCustomEnvironmentEnvironmentResponseType$inboundSchema,
    pattern: z.string(),
});
/** @internal */
export const CreateCustomEnvironmentBranchMatcher$outboundSchema = z.object({
    type: CreateCustomEnvironmentEnvironmentResponseType$outboundSchema,
    pattern: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateCustomEnvironmentBranchMatcher$;
(function (CreateCustomEnvironmentBranchMatcher$) {
    /** @deprecated use `CreateCustomEnvironmentBranchMatcher$inboundSchema` instead. */
    CreateCustomEnvironmentBranchMatcher$.inboundSchema = CreateCustomEnvironmentBranchMatcher$inboundSchema;
    /** @deprecated use `CreateCustomEnvironmentBranchMatcher$outboundSchema` instead. */
    CreateCustomEnvironmentBranchMatcher$.outboundSchema = CreateCustomEnvironmentBranchMatcher$outboundSchema;
})(CreateCustomEnvironmentBranchMatcher$ || (CreateCustomEnvironmentBranchMatcher$ = {}));
export function createCustomEnvironmentBranchMatcherToJSON(createCustomEnvironmentBranchMatcher) {
    return JSON.stringify(CreateCustomEnvironmentBranchMatcher$outboundSchema.parse(createCustomEnvironmentBranchMatcher));
}
export function createCustomEnvironmentBranchMatcherFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateCustomEnvironmentBranchMatcher$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateCustomEnvironmentBranchMatcher' from JSON`);
}
/** @internal */
export const CreateCustomEnvironmentVerification$inboundSchema = z.object({
    type: z.string(),
    domain: z.string(),
    value: z.string(),
    reason: z.string(),
});
/** @internal */
export const CreateCustomEnvironmentVerification$outboundSchema = z.object({
    type: z.string(),
    domain: z.string(),
    value: z.string(),
    reason: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateCustomEnvironmentVerification$;
(function (CreateCustomEnvironmentVerification$) {
    /** @deprecated use `CreateCustomEnvironmentVerification$inboundSchema` instead. */
    CreateCustomEnvironmentVerification$.inboundSchema = CreateCustomEnvironmentVerification$inboundSchema;
    /** @deprecated use `CreateCustomEnvironmentVerification$outboundSchema` instead. */
    CreateCustomEnvironmentVerification$.outboundSchema = CreateCustomEnvironmentVerification$outboundSchema;
})(CreateCustomEnvironmentVerification$ || (CreateCustomEnvironmentVerification$ = {}));
export function createCustomEnvironmentVerificationToJSON(createCustomEnvironmentVerification) {
    return JSON.stringify(CreateCustomEnvironmentVerification$outboundSchema.parse(createCustomEnvironmentVerification));
}
export function createCustomEnvironmentVerificationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateCustomEnvironmentVerification$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateCustomEnvironmentVerification' from JSON`);
}
/** @internal */
export const CreateCustomEnvironmentDomains$inboundSchema = z.object({
    name: z.string(),
    apexName: z.string(),
    projectId: z.string(),
    redirect: z.nullable(z.string()).optional(),
    redirectStatusCode: z.nullable(z.number()).optional(),
    gitBranch: z.nullable(z.string()).optional(),
    customEnvironmentId: z.nullable(z.string()).optional(),
    updatedAt: z.number().optional(),
    createdAt: z.number().optional(),
    verified: z.boolean(),
    verification: z.array(z.lazy(() => CreateCustomEnvironmentVerification$inboundSchema)).optional(),
});
/** @internal */
export const CreateCustomEnvironmentDomains$outboundSchema = z.object({
    name: z.string(),
    apexName: z.string(),
    projectId: z.string(),
    redirect: z.nullable(z.string()).optional(),
    redirectStatusCode: z.nullable(z.number()).optional(),
    gitBranch: z.nullable(z.string()).optional(),
    customEnvironmentId: z.nullable(z.string()).optional(),
    updatedAt: z.number().optional(),
    createdAt: z.number().optional(),
    verified: z.boolean(),
    verification: z.array(z.lazy(() => CreateCustomEnvironmentVerification$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateCustomEnvironmentDomains$;
(function (CreateCustomEnvironmentDomains$) {
    /** @deprecated use `CreateCustomEnvironmentDomains$inboundSchema` instead. */
    CreateCustomEnvironmentDomains$.inboundSchema = CreateCustomEnvironmentDomains$inboundSchema;
    /** @deprecated use `CreateCustomEnvironmentDomains$outboundSchema` instead. */
    CreateCustomEnvironmentDomains$.outboundSchema = CreateCustomEnvironmentDomains$outboundSchema;
})(CreateCustomEnvironmentDomains$ || (CreateCustomEnvironmentDomains$ = {}));
export function createCustomEnvironmentDomainsToJSON(createCustomEnvironmentDomains) {
    return JSON.stringify(CreateCustomEnvironmentDomains$outboundSchema.parse(createCustomEnvironmentDomains));
}
export function createCustomEnvironmentDomainsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateCustomEnvironmentDomains$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateCustomEnvironmentDomains' from JSON`);
}
/** @internal */
export const CreateCustomEnvironmentResponseBody$inboundSchema = z.object({
    id: z.string(),
    slug: z.string(),
    type: CreateCustomEnvironmentEnvironmentType$inboundSchema,
    description: z.string().optional(),
    branchMatcher: z.lazy(() => CreateCustomEnvironmentBranchMatcher$inboundSchema).optional(),
    domains: z.array(z.lazy(() => CreateCustomEnvironmentDomains$inboundSchema))
        .optional(),
    currentDeploymentAliases: z.array(z.string()).optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
});
/** @internal */
export const CreateCustomEnvironmentResponseBody$outboundSchema = z.object({
    id: z.string(),
    slug: z.string(),
    type: CreateCustomEnvironmentEnvironmentType$outboundSchema,
    description: z.string().optional(),
    branchMatcher: z.lazy(() => CreateCustomEnvironmentBranchMatcher$outboundSchema).optional(),
    domains: z.array(z.lazy(() => CreateCustomEnvironmentDomains$outboundSchema))
        .optional(),
    currentDeploymentAliases: z.array(z.string()).optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateCustomEnvironmentResponseBody$;
(function (CreateCustomEnvironmentResponseBody$) {
    /** @deprecated use `CreateCustomEnvironmentResponseBody$inboundSchema` instead. */
    CreateCustomEnvironmentResponseBody$.inboundSchema = CreateCustomEnvironmentResponseBody$inboundSchema;
    /** @deprecated use `CreateCustomEnvironmentResponseBody$outboundSchema` instead. */
    CreateCustomEnvironmentResponseBody$.outboundSchema = CreateCustomEnvironmentResponseBody$outboundSchema;
})(CreateCustomEnvironmentResponseBody$ || (CreateCustomEnvironmentResponseBody$ = {}));
export function createCustomEnvironmentResponseBodyToJSON(createCustomEnvironmentResponseBody) {
    return JSON.stringify(CreateCustomEnvironmentResponseBody$outboundSchema.parse(createCustomEnvironmentResponseBody));
}
export function createCustomEnvironmentResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateCustomEnvironmentResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateCustomEnvironmentResponseBody' from JSON`);
}
//# sourceMappingURL=createcustomenvironmentop.js.map