import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
/**
 * Only return members with the specified team role.
 */
export declare const QueryParamRole: {
    readonly Owner: "OWNER";
    readonly Member: "MEMBER";
    readonly Developer: "DEVELOPER";
    readonly Security: "SECURITY";
    readonly Billing: "BILLING";
    readonly Viewer: "VIEWER";
    readonly ViewerForPlus: "VIEWER_FOR_PLUS";
    readonly Contributor: "CONTRIBUTOR";
};
/**
 * Only return members with the specified team role.
 */
export type QueryParamRole = ClosedEnum<typeof QueryParamRole>;
export type GetTeamMembersRequest = {
    /**
     * Limit how many teams should be returned
     */
    limit?: number | undefined;
    /**
     * Timestamp in milliseconds to only include members added since then.
     */
    since?: number | undefined;
    /**
     * Timestamp in milliseconds to only include members added until then.
     */
    until?: number | undefined;
    /**
     * Search team members by their name, username, and email.
     */
    search?: string | undefined;
    /**
     * Only return members with the specified team role.
     */
    role?: QueryParamRole | undefined;
    /**
     * Exclude members who belong to the specified project.
     */
    excludeProject?: string | undefined;
    /**
     * Include team members who are eligible to be members of the specified project.
     */
    eligibleMembersForProjectId?: string | undefined;
};
/**
 * Information about the GitHub account for this user.
 */
export type GetTeamMembersGithub = {
    login?: string | undefined;
};
/**
 * Information about the GitLab account of this user.
 */
export type GetTeamMembersGitlab = {
    login?: string | undefined;
};
/**
 * Information about the Bitbucket account of this user.
 */
export type GetTeamMembersBitbucket = {
    login?: string | undefined;
};
/**
 * Role of this user in the team.
 */
export declare const GetTeamMembersRole: {
    readonly Owner: "OWNER";
    readonly Member: "MEMBER";
    readonly Developer: "DEVELOPER";
    readonly Security: "SECURITY";
    readonly Billing: "BILLING";
    readonly Viewer: "VIEWER";
    readonly ViewerForPlus: "VIEWER_FOR_PLUS";
    readonly Contributor: "CONTRIBUTOR";
};
/**
 * Role of this user in the team.
 */
export type GetTeamMembersRole = ClosedEnum<typeof GetTeamMembersRole>;
export declare const GetTeamMembersOrigin: {
    readonly Teams: "teams";
    readonly Link: "link";
    readonly Mail: "mail";
    readonly Import: "import";
    readonly Github: "github";
    readonly Gitlab: "gitlab";
    readonly Bitbucket: "bitbucket";
    readonly Saml: "saml";
    readonly Dsync: "dsync";
    readonly Feedback: "feedback";
    readonly OrganizationTeams: "organization-teams";
};
export type GetTeamMembersOrigin = ClosedEnum<typeof GetTeamMembersOrigin>;
export type GetTeamMembersGitUserId = string | number;
/**
 * Map with information about the members origin if they joined by requesting access.
 */
export type GetTeamMembersJoinedFrom = {
    origin: GetTeamMembersOrigin;
    commitId?: string | undefined;
    repoId?: string | undefined;
    repoPath?: string | undefined;
    gitUserId?: string | number | undefined;
    gitUserLogin?: string | undefined;
    ssoUserId?: string | undefined;
    ssoConnectedAt?: number | undefined;
    idpUserId?: string | undefined;
    dsyncUserId?: string | undefined;
    dsyncConnectedAt?: number | undefined;
};
export declare const GetTeamMembersTeamsResponseRole: {
    readonly Admin: "ADMIN";
    readonly ProjectDeveloper: "PROJECT_DEVELOPER";
    readonly ProjectViewer: "PROJECT_VIEWER";
};
export type GetTeamMembersTeamsResponseRole = ClosedEnum<typeof GetTeamMembersTeamsResponseRole>;
/**
 * Array of project memberships
 */
export type GetTeamMembersProjects = {
    name: string;
    id: string;
    role?: GetTeamMembersTeamsResponseRole | undefined;
};
export type GetTeamMembersMembers = {
    /**
     * ID of the file for the Avatar of this member.
     */
    avatar?: string | undefined;
    /**
     * Boolean that indicates if this member was confirmed by an owner.
     */
    confirmed: boolean;
    /**
     * The email of this member.
     */
    email: string;
    /**
     * Information about the GitHub account for this user.
     */
    github?: GetTeamMembersGithub | undefined;
    /**
     * Information about the GitLab account of this user.
     */
    gitlab?: GetTeamMembersGitlab | undefined;
    /**
     * Information about the Bitbucket account of this user.
     */
    bitbucket?: GetTeamMembersBitbucket | undefined;
    /**
     * Role of this user in the team.
     */
    role: GetTeamMembersRole;
    /**
     * The ID of this user.
     */
    uid: string;
    /**
     * The unique username of this user.
     */
    username: string;
    /**
     * The name of this user.
     */
    name?: string | undefined;
    /**
     * Timestamp in milliseconds when this member was added.
     */
    createdAt: number;
    /**
     * Timestamp in milliseconds for when this team member was accepted by an owner.
     */
    accessRequestedAt?: number | undefined;
    /**
     * Map with information about the members origin if they joined by requesting access.
     */
    joinedFrom?: GetTeamMembersJoinedFrom | undefined;
    /**
     * Array of project memberships
     */
    projects?: Array<GetTeamMembersProjects> | undefined;
};
export declare const GetTeamMembersTeamsRole: {
    readonly Owner: "OWNER";
    readonly Member: "MEMBER";
    readonly Developer: "DEVELOPER";
    readonly Security: "SECURITY";
    readonly Billing: "BILLING";
    readonly Viewer: "VIEWER";
    readonly ViewerForPlus: "VIEWER_FOR_PLUS";
    readonly Contributor: "CONTRIBUTOR";
};
export type GetTeamMembersTeamsRole = ClosedEnum<typeof GetTeamMembersTeamsRole>;
export declare const GetTeamMembersTeamRoles: {
    readonly Owner: "OWNER";
    readonly Member: "MEMBER";
    readonly Developer: "DEVELOPER";
    readonly Security: "SECURITY";
    readonly Billing: "BILLING";
    readonly Viewer: "VIEWER";
    readonly ViewerForPlus: "VIEWER_FOR_PLUS";
    readonly Contributor: "CONTRIBUTOR";
};
export type GetTeamMembersTeamRoles = ClosedEnum<typeof GetTeamMembersTeamRoles>;
export declare const GetTeamMembersTeamPermissions: {
    readonly IntegrationManager: "IntegrationManager";
    readonly CreateProject: "CreateProject";
    readonly FullProductionDeployment: "FullProductionDeployment";
    readonly UsageViewer: "UsageViewer";
    readonly EnvVariableManager: "EnvVariableManager";
    readonly EnvironmentManager: "EnvironmentManager";
    readonly V0Builder: "V0Builder";
    readonly V0Chatter: "V0Chatter";
    readonly V0Viewer: "V0Viewer";
};
export type GetTeamMembersTeamPermissions = ClosedEnum<typeof GetTeamMembersTeamPermissions>;
export declare const GetTeamMembersTeamsProjects: {
    readonly Admin: "ADMIN";
    readonly ProjectDeveloper: "PROJECT_DEVELOPER";
    readonly ProjectViewer: "PROJECT_VIEWER";
};
export type GetTeamMembersTeamsProjects = ClosedEnum<typeof GetTeamMembersTeamsProjects>;
export type EmailInviteCodes = {
    accessGroups?: Array<string> | undefined;
    id: string;
    email?: string | undefined;
    role?: GetTeamMembersTeamsRole | undefined;
    teamRoles?: Array<GetTeamMembersTeamRoles> | undefined;
    teamPermissions?: Array<GetTeamMembersTeamPermissions> | undefined;
    isDSyncUser: boolean;
    createdAt?: number | undefined;
    expired?: boolean | undefined;
    projects?: {
        [k: string]: GetTeamMembersTeamsProjects;
    } | undefined;
    entitlements?: Array<string> | undefined;
};
export type GetTeamMembersPagination = {
    hasNext: boolean;
    /**
     * Amount of items in the current page.
     */
    count: number;
    /**
     * Timestamp that must be used to request the next page.
     */
    next: number | null;
    /**
     * Timestamp that must be used to request the previous page.
     */
    prev: number | null;
};
export type GetTeamMembersResponseBody = {
    members: Array<GetTeamMembersMembers>;
    emailInviteCodes?: Array<EmailInviteCodes> | undefined;
    pagination: GetTeamMembersPagination;
};
/** @internal */
export declare const QueryParamRole$inboundSchema: z.ZodNativeEnum<typeof QueryParamRole>;
/** @internal */
export declare const QueryParamRole$outboundSchema: z.ZodNativeEnum<typeof QueryParamRole>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace QueryParamRole$ {
    /** @deprecated use `QueryParamRole$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly ViewerForPlus: "VIEWER_FOR_PLUS";
        readonly Contributor: "CONTRIBUTOR";
    }>;
    /** @deprecated use `QueryParamRole$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly ViewerForPlus: "VIEWER_FOR_PLUS";
        readonly Contributor: "CONTRIBUTOR";
    }>;
}
/** @internal */
export declare const GetTeamMembersRequest$inboundSchema: z.ZodType<GetTeamMembersRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetTeamMembersRequest$Outbound = {
    limit?: number | undefined;
    since?: number | undefined;
    until?: number | undefined;
    search?: string | undefined;
    role?: string | undefined;
    excludeProject?: string | undefined;
    eligibleMembersForProjectId?: string | undefined;
};
/** @internal */
export declare const GetTeamMembersRequest$outboundSchema: z.ZodType<GetTeamMembersRequest$Outbound, z.ZodTypeDef, GetTeamMembersRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetTeamMembersRequest$ {
    /** @deprecated use `GetTeamMembersRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetTeamMembersRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetTeamMembersRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetTeamMembersRequest$Outbound, z.ZodTypeDef, GetTeamMembersRequest>;
    /** @deprecated use `GetTeamMembersRequest$Outbound` instead. */
    type Outbound = GetTeamMembersRequest$Outbound;
}
export declare function getTeamMembersRequestToJSON(getTeamMembersRequest: GetTeamMembersRequest): string;
export declare function getTeamMembersRequestFromJSON(jsonString: string): SafeParseResult<GetTeamMembersRequest, SDKValidationError>;
/** @internal */
export declare const GetTeamMembersGithub$inboundSchema: z.ZodType<GetTeamMembersGithub, z.ZodTypeDef, unknown>;
/** @internal */
export type GetTeamMembersGithub$Outbound = {
    login?: string | undefined;
};
/** @internal */
export declare const GetTeamMembersGithub$outboundSchema: z.ZodType<GetTeamMembersGithub$Outbound, z.ZodTypeDef, GetTeamMembersGithub>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetTeamMembersGithub$ {
    /** @deprecated use `GetTeamMembersGithub$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetTeamMembersGithub, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetTeamMembersGithub$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetTeamMembersGithub$Outbound, z.ZodTypeDef, GetTeamMembersGithub>;
    /** @deprecated use `GetTeamMembersGithub$Outbound` instead. */
    type Outbound = GetTeamMembersGithub$Outbound;
}
export declare function getTeamMembersGithubToJSON(getTeamMembersGithub: GetTeamMembersGithub): string;
export declare function getTeamMembersGithubFromJSON(jsonString: string): SafeParseResult<GetTeamMembersGithub, SDKValidationError>;
/** @internal */
export declare const GetTeamMembersGitlab$inboundSchema: z.ZodType<GetTeamMembersGitlab, z.ZodTypeDef, unknown>;
/** @internal */
export type GetTeamMembersGitlab$Outbound = {
    login?: string | undefined;
};
/** @internal */
export declare const GetTeamMembersGitlab$outboundSchema: z.ZodType<GetTeamMembersGitlab$Outbound, z.ZodTypeDef, GetTeamMembersGitlab>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetTeamMembersGitlab$ {
    /** @deprecated use `GetTeamMembersGitlab$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetTeamMembersGitlab, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetTeamMembersGitlab$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetTeamMembersGitlab$Outbound, z.ZodTypeDef, GetTeamMembersGitlab>;
    /** @deprecated use `GetTeamMembersGitlab$Outbound` instead. */
    type Outbound = GetTeamMembersGitlab$Outbound;
}
export declare function getTeamMembersGitlabToJSON(getTeamMembersGitlab: GetTeamMembersGitlab): string;
export declare function getTeamMembersGitlabFromJSON(jsonString: string): SafeParseResult<GetTeamMembersGitlab, SDKValidationError>;
/** @internal */
export declare const GetTeamMembersBitbucket$inboundSchema: z.ZodType<GetTeamMembersBitbucket, z.ZodTypeDef, unknown>;
/** @internal */
export type GetTeamMembersBitbucket$Outbound = {
    login?: string | undefined;
};
/** @internal */
export declare const GetTeamMembersBitbucket$outboundSchema: z.ZodType<GetTeamMembersBitbucket$Outbound, z.ZodTypeDef, GetTeamMembersBitbucket>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetTeamMembersBitbucket$ {
    /** @deprecated use `GetTeamMembersBitbucket$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetTeamMembersBitbucket, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetTeamMembersBitbucket$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetTeamMembersBitbucket$Outbound, z.ZodTypeDef, GetTeamMembersBitbucket>;
    /** @deprecated use `GetTeamMembersBitbucket$Outbound` instead. */
    type Outbound = GetTeamMembersBitbucket$Outbound;
}
export declare function getTeamMembersBitbucketToJSON(getTeamMembersBitbucket: GetTeamMembersBitbucket): string;
export declare function getTeamMembersBitbucketFromJSON(jsonString: string): SafeParseResult<GetTeamMembersBitbucket, SDKValidationError>;
/** @internal */
export declare const GetTeamMembersRole$inboundSchema: z.ZodNativeEnum<typeof GetTeamMembersRole>;
/** @internal */
export declare const GetTeamMembersRole$outboundSchema: z.ZodNativeEnum<typeof GetTeamMembersRole>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetTeamMembersRole$ {
    /** @deprecated use `GetTeamMembersRole$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly ViewerForPlus: "VIEWER_FOR_PLUS";
        readonly Contributor: "CONTRIBUTOR";
    }>;
    /** @deprecated use `GetTeamMembersRole$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly ViewerForPlus: "VIEWER_FOR_PLUS";
        readonly Contributor: "CONTRIBUTOR";
    }>;
}
/** @internal */
export declare const GetTeamMembersOrigin$inboundSchema: z.ZodNativeEnum<typeof GetTeamMembersOrigin>;
/** @internal */
export declare const GetTeamMembersOrigin$outboundSchema: z.ZodNativeEnum<typeof GetTeamMembersOrigin>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetTeamMembersOrigin$ {
    /** @deprecated use `GetTeamMembersOrigin$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Teams: "teams";
        readonly Link: "link";
        readonly Mail: "mail";
        readonly Import: "import";
        readonly Github: "github";
        readonly Gitlab: "gitlab";
        readonly Bitbucket: "bitbucket";
        readonly Saml: "saml";
        readonly Dsync: "dsync";
        readonly Feedback: "feedback";
        readonly OrganizationTeams: "organization-teams";
    }>;
    /** @deprecated use `GetTeamMembersOrigin$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Teams: "teams";
        readonly Link: "link";
        readonly Mail: "mail";
        readonly Import: "import";
        readonly Github: "github";
        readonly Gitlab: "gitlab";
        readonly Bitbucket: "bitbucket";
        readonly Saml: "saml";
        readonly Dsync: "dsync";
        readonly Feedback: "feedback";
        readonly OrganizationTeams: "organization-teams";
    }>;
}
/** @internal */
export declare const GetTeamMembersGitUserId$inboundSchema: z.ZodType<GetTeamMembersGitUserId, z.ZodTypeDef, unknown>;
/** @internal */
export type GetTeamMembersGitUserId$Outbound = string | number;
/** @internal */
export declare const GetTeamMembersGitUserId$outboundSchema: z.ZodType<GetTeamMembersGitUserId$Outbound, z.ZodTypeDef, GetTeamMembersGitUserId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetTeamMembersGitUserId$ {
    /** @deprecated use `GetTeamMembersGitUserId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetTeamMembersGitUserId, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetTeamMembersGitUserId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetTeamMembersGitUserId$Outbound, z.ZodTypeDef, GetTeamMembersGitUserId>;
    /** @deprecated use `GetTeamMembersGitUserId$Outbound` instead. */
    type Outbound = GetTeamMembersGitUserId$Outbound;
}
export declare function getTeamMembersGitUserIdToJSON(getTeamMembersGitUserId: GetTeamMembersGitUserId): string;
export declare function getTeamMembersGitUserIdFromJSON(jsonString: string): SafeParseResult<GetTeamMembersGitUserId, SDKValidationError>;
/** @internal */
export declare const GetTeamMembersJoinedFrom$inboundSchema: z.ZodType<GetTeamMembersJoinedFrom, z.ZodTypeDef, unknown>;
/** @internal */
export type GetTeamMembersJoinedFrom$Outbound = {
    origin: string;
    commitId?: string | undefined;
    repoId?: string | undefined;
    repoPath?: string | undefined;
    gitUserId?: string | number | undefined;
    gitUserLogin?: string | undefined;
    ssoUserId?: string | undefined;
    ssoConnectedAt?: number | undefined;
    idpUserId?: string | undefined;
    dsyncUserId?: string | undefined;
    dsyncConnectedAt?: number | undefined;
};
/** @internal */
export declare const GetTeamMembersJoinedFrom$outboundSchema: z.ZodType<GetTeamMembersJoinedFrom$Outbound, z.ZodTypeDef, GetTeamMembersJoinedFrom>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetTeamMembersJoinedFrom$ {
    /** @deprecated use `GetTeamMembersJoinedFrom$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetTeamMembersJoinedFrom, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetTeamMembersJoinedFrom$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetTeamMembersJoinedFrom$Outbound, z.ZodTypeDef, GetTeamMembersJoinedFrom>;
    /** @deprecated use `GetTeamMembersJoinedFrom$Outbound` instead. */
    type Outbound = GetTeamMembersJoinedFrom$Outbound;
}
export declare function getTeamMembersJoinedFromToJSON(getTeamMembersJoinedFrom: GetTeamMembersJoinedFrom): string;
export declare function getTeamMembersJoinedFromFromJSON(jsonString: string): SafeParseResult<GetTeamMembersJoinedFrom, SDKValidationError>;
/** @internal */
export declare const GetTeamMembersTeamsResponseRole$inboundSchema: z.ZodNativeEnum<typeof GetTeamMembersTeamsResponseRole>;
/** @internal */
export declare const GetTeamMembersTeamsResponseRole$outboundSchema: z.ZodNativeEnum<typeof GetTeamMembersTeamsResponseRole>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetTeamMembersTeamsResponseRole$ {
    /** @deprecated use `GetTeamMembersTeamsResponseRole$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Admin: "ADMIN";
        readonly ProjectDeveloper: "PROJECT_DEVELOPER";
        readonly ProjectViewer: "PROJECT_VIEWER";
    }>;
    /** @deprecated use `GetTeamMembersTeamsResponseRole$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Admin: "ADMIN";
        readonly ProjectDeveloper: "PROJECT_DEVELOPER";
        readonly ProjectViewer: "PROJECT_VIEWER";
    }>;
}
/** @internal */
export declare const GetTeamMembersProjects$inboundSchema: z.ZodType<GetTeamMembersProjects, z.ZodTypeDef, unknown>;
/** @internal */
export type GetTeamMembersProjects$Outbound = {
    name: string;
    id: string;
    role?: string | undefined;
};
/** @internal */
export declare const GetTeamMembersProjects$outboundSchema: z.ZodType<GetTeamMembersProjects$Outbound, z.ZodTypeDef, GetTeamMembersProjects>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetTeamMembersProjects$ {
    /** @deprecated use `GetTeamMembersProjects$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetTeamMembersProjects, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetTeamMembersProjects$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetTeamMembersProjects$Outbound, z.ZodTypeDef, GetTeamMembersProjects>;
    /** @deprecated use `GetTeamMembersProjects$Outbound` instead. */
    type Outbound = GetTeamMembersProjects$Outbound;
}
export declare function getTeamMembersProjectsToJSON(getTeamMembersProjects: GetTeamMembersProjects): string;
export declare function getTeamMembersProjectsFromJSON(jsonString: string): SafeParseResult<GetTeamMembersProjects, SDKValidationError>;
/** @internal */
export declare const GetTeamMembersMembers$inboundSchema: z.ZodType<GetTeamMembersMembers, z.ZodTypeDef, unknown>;
/** @internal */
export type GetTeamMembersMembers$Outbound = {
    avatar?: string | undefined;
    confirmed: boolean;
    email: string;
    github?: GetTeamMembersGithub$Outbound | undefined;
    gitlab?: GetTeamMembersGitlab$Outbound | undefined;
    bitbucket?: GetTeamMembersBitbucket$Outbound | undefined;
    role: string;
    uid: string;
    username: string;
    name?: string | undefined;
    createdAt: number;
    accessRequestedAt?: number | undefined;
    joinedFrom?: GetTeamMembersJoinedFrom$Outbound | undefined;
    projects?: Array<GetTeamMembersProjects$Outbound> | undefined;
};
/** @internal */
export declare const GetTeamMembersMembers$outboundSchema: z.ZodType<GetTeamMembersMembers$Outbound, z.ZodTypeDef, GetTeamMembersMembers>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetTeamMembersMembers$ {
    /** @deprecated use `GetTeamMembersMembers$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetTeamMembersMembers, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetTeamMembersMembers$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetTeamMembersMembers$Outbound, z.ZodTypeDef, GetTeamMembersMembers>;
    /** @deprecated use `GetTeamMembersMembers$Outbound` instead. */
    type Outbound = GetTeamMembersMembers$Outbound;
}
export declare function getTeamMembersMembersToJSON(getTeamMembersMembers: GetTeamMembersMembers): string;
export declare function getTeamMembersMembersFromJSON(jsonString: string): SafeParseResult<GetTeamMembersMembers, SDKValidationError>;
/** @internal */
export declare const GetTeamMembersTeamsRole$inboundSchema: z.ZodNativeEnum<typeof GetTeamMembersTeamsRole>;
/** @internal */
export declare const GetTeamMembersTeamsRole$outboundSchema: z.ZodNativeEnum<typeof GetTeamMembersTeamsRole>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetTeamMembersTeamsRole$ {
    /** @deprecated use `GetTeamMembersTeamsRole$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly ViewerForPlus: "VIEWER_FOR_PLUS";
        readonly Contributor: "CONTRIBUTOR";
    }>;
    /** @deprecated use `GetTeamMembersTeamsRole$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly ViewerForPlus: "VIEWER_FOR_PLUS";
        readonly Contributor: "CONTRIBUTOR";
    }>;
}
/** @internal */
export declare const GetTeamMembersTeamRoles$inboundSchema: z.ZodNativeEnum<typeof GetTeamMembersTeamRoles>;
/** @internal */
export declare const GetTeamMembersTeamRoles$outboundSchema: z.ZodNativeEnum<typeof GetTeamMembersTeamRoles>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetTeamMembersTeamRoles$ {
    /** @deprecated use `GetTeamMembersTeamRoles$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly ViewerForPlus: "VIEWER_FOR_PLUS";
        readonly Contributor: "CONTRIBUTOR";
    }>;
    /** @deprecated use `GetTeamMembersTeamRoles$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly ViewerForPlus: "VIEWER_FOR_PLUS";
        readonly Contributor: "CONTRIBUTOR";
    }>;
}
/** @internal */
export declare const GetTeamMembersTeamPermissions$inboundSchema: z.ZodNativeEnum<typeof GetTeamMembersTeamPermissions>;
/** @internal */
export declare const GetTeamMembersTeamPermissions$outboundSchema: z.ZodNativeEnum<typeof GetTeamMembersTeamPermissions>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetTeamMembersTeamPermissions$ {
    /** @deprecated use `GetTeamMembersTeamPermissions$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly IntegrationManager: "IntegrationManager";
        readonly CreateProject: "CreateProject";
        readonly FullProductionDeployment: "FullProductionDeployment";
        readonly UsageViewer: "UsageViewer";
        readonly EnvVariableManager: "EnvVariableManager";
        readonly EnvironmentManager: "EnvironmentManager";
        readonly V0Builder: "V0Builder";
        readonly V0Chatter: "V0Chatter";
        readonly V0Viewer: "V0Viewer";
    }>;
    /** @deprecated use `GetTeamMembersTeamPermissions$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly IntegrationManager: "IntegrationManager";
        readonly CreateProject: "CreateProject";
        readonly FullProductionDeployment: "FullProductionDeployment";
        readonly UsageViewer: "UsageViewer";
        readonly EnvVariableManager: "EnvVariableManager";
        readonly EnvironmentManager: "EnvironmentManager";
        readonly V0Builder: "V0Builder";
        readonly V0Chatter: "V0Chatter";
        readonly V0Viewer: "V0Viewer";
    }>;
}
/** @internal */
export declare const GetTeamMembersTeamsProjects$inboundSchema: z.ZodNativeEnum<typeof GetTeamMembersTeamsProjects>;
/** @internal */
export declare const GetTeamMembersTeamsProjects$outboundSchema: z.ZodNativeEnum<typeof GetTeamMembersTeamsProjects>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetTeamMembersTeamsProjects$ {
    /** @deprecated use `GetTeamMembersTeamsProjects$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Admin: "ADMIN";
        readonly ProjectDeveloper: "PROJECT_DEVELOPER";
        readonly ProjectViewer: "PROJECT_VIEWER";
    }>;
    /** @deprecated use `GetTeamMembersTeamsProjects$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Admin: "ADMIN";
        readonly ProjectDeveloper: "PROJECT_DEVELOPER";
        readonly ProjectViewer: "PROJECT_VIEWER";
    }>;
}
/** @internal */
export declare const EmailInviteCodes$inboundSchema: z.ZodType<EmailInviteCodes, z.ZodTypeDef, unknown>;
/** @internal */
export type EmailInviteCodes$Outbound = {
    accessGroups?: Array<string> | undefined;
    id: string;
    email?: string | undefined;
    role?: string | undefined;
    teamRoles?: Array<string> | undefined;
    teamPermissions?: Array<string> | undefined;
    isDSyncUser: boolean;
    createdAt?: number | undefined;
    expired?: boolean | undefined;
    projects?: {
        [k: string]: string;
    } | undefined;
    entitlements?: Array<string> | undefined;
};
/** @internal */
export declare const EmailInviteCodes$outboundSchema: z.ZodType<EmailInviteCodes$Outbound, z.ZodTypeDef, EmailInviteCodes>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EmailInviteCodes$ {
    /** @deprecated use `EmailInviteCodes$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EmailInviteCodes, z.ZodTypeDef, unknown>;
    /** @deprecated use `EmailInviteCodes$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EmailInviteCodes$Outbound, z.ZodTypeDef, EmailInviteCodes>;
    /** @deprecated use `EmailInviteCodes$Outbound` instead. */
    type Outbound = EmailInviteCodes$Outbound;
}
export declare function emailInviteCodesToJSON(emailInviteCodes: EmailInviteCodes): string;
export declare function emailInviteCodesFromJSON(jsonString: string): SafeParseResult<EmailInviteCodes, SDKValidationError>;
/** @internal */
export declare const GetTeamMembersPagination$inboundSchema: z.ZodType<GetTeamMembersPagination, z.ZodTypeDef, unknown>;
/** @internal */
export type GetTeamMembersPagination$Outbound = {
    hasNext: boolean;
    count: number;
    next: number | null;
    prev: number | null;
};
/** @internal */
export declare const GetTeamMembersPagination$outboundSchema: z.ZodType<GetTeamMembersPagination$Outbound, z.ZodTypeDef, GetTeamMembersPagination>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetTeamMembersPagination$ {
    /** @deprecated use `GetTeamMembersPagination$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetTeamMembersPagination, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetTeamMembersPagination$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetTeamMembersPagination$Outbound, z.ZodTypeDef, GetTeamMembersPagination>;
    /** @deprecated use `GetTeamMembersPagination$Outbound` instead. */
    type Outbound = GetTeamMembersPagination$Outbound;
}
export declare function getTeamMembersPaginationToJSON(getTeamMembersPagination: GetTeamMembersPagination): string;
export declare function getTeamMembersPaginationFromJSON(jsonString: string): SafeParseResult<GetTeamMembersPagination, SDKValidationError>;
/** @internal */
export declare const GetTeamMembersResponseBody$inboundSchema: z.ZodType<GetTeamMembersResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type GetTeamMembersResponseBody$Outbound = {
    members: Array<GetTeamMembersMembers$Outbound>;
    emailInviteCodes?: Array<EmailInviteCodes$Outbound> | undefined;
    pagination: GetTeamMembersPagination$Outbound;
};
/** @internal */
export declare const GetTeamMembersResponseBody$outboundSchema: z.ZodType<GetTeamMembersResponseBody$Outbound, z.ZodTypeDef, GetTeamMembersResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetTeamMembersResponseBody$ {
    /** @deprecated use `GetTeamMembersResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetTeamMembersResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetTeamMembersResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetTeamMembersResponseBody$Outbound, z.ZodTypeDef, GetTeamMembersResponseBody>;
    /** @deprecated use `GetTeamMembersResponseBody$Outbound` instead. */
    type Outbound = GetTeamMembersResponseBody$Outbound;
}
export declare function getTeamMembersResponseBodyToJSON(getTeamMembersResponseBody: GetTeamMembersResponseBody): string;
export declare function getTeamMembersResponseBodyFromJSON(jsonString: string): SafeParseResult<GetTeamMembersResponseBody, SDKValidationError>;
//# sourceMappingURL=getteammembersop.d.ts.map