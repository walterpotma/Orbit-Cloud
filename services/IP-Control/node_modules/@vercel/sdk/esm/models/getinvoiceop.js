/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
/**
 * Invoice state.
 */
export const GetInvoiceState = {
    Pending: "pending",
    Scheduled: "scheduled",
    Invoiced: "invoiced",
    Paid: "paid",
    Notpaid: "notpaid",
    RefundRequested: "refund_requested",
    Refunded: "refunded",
};
/** @internal */
export const GetInvoiceRequest$inboundSchema = z.object({
    integrationConfigurationId: z.string(),
    invoiceId: z.string(),
});
/** @internal */
export const GetInvoiceRequest$outboundSchema = z.object({
    integrationConfigurationId: z.string(),
    invoiceId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetInvoiceRequest$;
(function (GetInvoiceRequest$) {
    /** @deprecated use `GetInvoiceRequest$inboundSchema` instead. */
    GetInvoiceRequest$.inboundSchema = GetInvoiceRequest$inboundSchema;
    /** @deprecated use `GetInvoiceRequest$outboundSchema` instead. */
    GetInvoiceRequest$.outboundSchema = GetInvoiceRequest$outboundSchema;
})(GetInvoiceRequest$ || (GetInvoiceRequest$ = {}));
export function getInvoiceRequestToJSON(getInvoiceRequest) {
    return JSON.stringify(GetInvoiceRequest$outboundSchema.parse(getInvoiceRequest));
}
export function getInvoiceRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetInvoiceRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetInvoiceRequest' from JSON`);
}
/** @internal */
export const GetInvoiceState$inboundSchema = z.nativeEnum(GetInvoiceState);
/** @internal */
export const GetInvoiceState$outboundSchema = GetInvoiceState$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetInvoiceState$;
(function (GetInvoiceState$) {
    /** @deprecated use `GetInvoiceState$inboundSchema` instead. */
    GetInvoiceState$.inboundSchema = GetInvoiceState$inboundSchema;
    /** @deprecated use `GetInvoiceState$outboundSchema` instead. */
    GetInvoiceState$.outboundSchema = GetInvoiceState$outboundSchema;
})(GetInvoiceState$ || (GetInvoiceState$ = {}));
/** @internal */
export const GetInvoicePeriod$inboundSchema = z.object({
    start: z.string(),
    end: z.string(),
});
/** @internal */
export const GetInvoicePeriod$outboundSchema = z.object({
    start: z.string(),
    end: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetInvoicePeriod$;
(function (GetInvoicePeriod$) {
    /** @deprecated use `GetInvoicePeriod$inboundSchema` instead. */
    GetInvoicePeriod$.inboundSchema = GetInvoicePeriod$inboundSchema;
    /** @deprecated use `GetInvoicePeriod$outboundSchema` instead. */
    GetInvoicePeriod$.outboundSchema = GetInvoicePeriod$outboundSchema;
})(GetInvoicePeriod$ || (GetInvoicePeriod$ = {}));
export function getInvoicePeriodToJSON(getInvoicePeriod) {
    return JSON.stringify(GetInvoicePeriod$outboundSchema.parse(getInvoicePeriod));
}
export function getInvoicePeriodFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetInvoicePeriod$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetInvoicePeriod' from JSON`);
}
/** @internal */
export const GetInvoiceItems$inboundSchema = z.object({
    billingPlanId: z.string(),
    resourceId: z.string().optional(),
    start: z.string().optional(),
    end: z.string().optional(),
    name: z.string(),
    details: z.string().optional(),
    price: z.string(),
    quantity: z.number(),
    units: z.string(),
    total: z.string(),
});
/** @internal */
export const GetInvoiceItems$outboundSchema = z.object({
    billingPlanId: z.string(),
    resourceId: z.string().optional(),
    start: z.string().optional(),
    end: z.string().optional(),
    name: z.string(),
    details: z.string().optional(),
    price: z.string(),
    quantity: z.number(),
    units: z.string(),
    total: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetInvoiceItems$;
(function (GetInvoiceItems$) {
    /** @deprecated use `GetInvoiceItems$inboundSchema` instead. */
    GetInvoiceItems$.inboundSchema = GetInvoiceItems$inboundSchema;
    /** @deprecated use `GetInvoiceItems$outboundSchema` instead. */
    GetInvoiceItems$.outboundSchema = GetInvoiceItems$outboundSchema;
})(GetInvoiceItems$ || (GetInvoiceItems$ = {}));
export function getInvoiceItemsToJSON(getInvoiceItems) {
    return JSON.stringify(GetInvoiceItems$outboundSchema.parse(getInvoiceItems));
}
export function getInvoiceItemsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetInvoiceItems$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetInvoiceItems' from JSON`);
}
/** @internal */
export const GetInvoiceDiscounts$inboundSchema = z.object({
    billingPlanId: z.string(),
    resourceId: z.string().optional(),
    start: z.string().optional(),
    end: z.string().optional(),
    name: z.string(),
    details: z.string().optional(),
    amount: z.string(),
});
/** @internal */
export const GetInvoiceDiscounts$outboundSchema = z.object({
    billingPlanId: z.string(),
    resourceId: z.string().optional(),
    start: z.string().optional(),
    end: z.string().optional(),
    name: z.string(),
    details: z.string().optional(),
    amount: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetInvoiceDiscounts$;
(function (GetInvoiceDiscounts$) {
    /** @deprecated use `GetInvoiceDiscounts$inboundSchema` instead. */
    GetInvoiceDiscounts$.inboundSchema = GetInvoiceDiscounts$inboundSchema;
    /** @deprecated use `GetInvoiceDiscounts$outboundSchema` instead. */
    GetInvoiceDiscounts$.outboundSchema = GetInvoiceDiscounts$outboundSchema;
})(GetInvoiceDiscounts$ || (GetInvoiceDiscounts$ = {}));
export function getInvoiceDiscountsToJSON(getInvoiceDiscounts) {
    return JSON.stringify(GetInvoiceDiscounts$outboundSchema.parse(getInvoiceDiscounts));
}
export function getInvoiceDiscountsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetInvoiceDiscounts$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetInvoiceDiscounts' from JSON`);
}
/** @internal */
export const GetInvoiceResponseBody$inboundSchema = z.object({
    test: z.boolean().optional(),
    invoiceId: z.string(),
    externalId: z.string().optional(),
    state: GetInvoiceState$inboundSchema,
    invoiceNumber: z.string().optional(),
    invoiceDate: z.string(),
    period: z.lazy(() => GetInvoicePeriod$inboundSchema),
    memo: z.string().optional(),
    items: z.array(z.lazy(() => GetInvoiceItems$inboundSchema)),
    discounts: z.array(z.lazy(() => GetInvoiceDiscounts$inboundSchema))
        .optional(),
    total: z.string(),
    refundReason: z.string().optional(),
    refundTotal: z.string().optional(),
    created: z.string(),
    updated: z.string(),
});
/** @internal */
export const GetInvoiceResponseBody$outboundSchema = z.object({
    test: z.boolean().optional(),
    invoiceId: z.string(),
    externalId: z.string().optional(),
    state: GetInvoiceState$outboundSchema,
    invoiceNumber: z.string().optional(),
    invoiceDate: z.string(),
    period: z.lazy(() => GetInvoicePeriod$outboundSchema),
    memo: z.string().optional(),
    items: z.array(z.lazy(() => GetInvoiceItems$outboundSchema)),
    discounts: z.array(z.lazy(() => GetInvoiceDiscounts$outboundSchema))
        .optional(),
    total: z.string(),
    refundReason: z.string().optional(),
    refundTotal: z.string().optional(),
    created: z.string(),
    updated: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetInvoiceResponseBody$;
(function (GetInvoiceResponseBody$) {
    /** @deprecated use `GetInvoiceResponseBody$inboundSchema` instead. */
    GetInvoiceResponseBody$.inboundSchema = GetInvoiceResponseBody$inboundSchema;
    /** @deprecated use `GetInvoiceResponseBody$outboundSchema` instead. */
    GetInvoiceResponseBody$.outboundSchema = GetInvoiceResponseBody$outboundSchema;
})(GetInvoiceResponseBody$ || (GetInvoiceResponseBody$ = {}));
export function getInvoiceResponseBodyToJSON(getInvoiceResponseBody) {
    return JSON.stringify(GetInvoiceResponseBody$outboundSchema.parse(getInvoiceResponseBody));
}
export function getInvoiceResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetInvoiceResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetInvoiceResponseBody' from JSON`);
}
//# sourceMappingURL=getinvoiceop.js.map