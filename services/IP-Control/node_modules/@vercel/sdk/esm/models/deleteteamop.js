/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/** @internal */
export const DeleteTeamReasons$inboundSchema = z.object({
    slug: z.string(),
    description: z.string(),
});
/** @internal */
export const DeleteTeamReasons$outboundSchema = z.object({
    slug: z.string(),
    description: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DeleteTeamReasons$;
(function (DeleteTeamReasons$) {
    /** @deprecated use `DeleteTeamReasons$inboundSchema` instead. */
    DeleteTeamReasons$.inboundSchema = DeleteTeamReasons$inboundSchema;
    /** @deprecated use `DeleteTeamReasons$outboundSchema` instead. */
    DeleteTeamReasons$.outboundSchema = DeleteTeamReasons$outboundSchema;
})(DeleteTeamReasons$ || (DeleteTeamReasons$ = {}));
export function deleteTeamReasonsToJSON(deleteTeamReasons) {
    return JSON.stringify(DeleteTeamReasons$outboundSchema.parse(deleteTeamReasons));
}
export function deleteTeamReasonsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DeleteTeamReasons$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteTeamReasons' from JSON`);
}
/** @internal */
export const DeleteTeamRequestBody$inboundSchema = z.object({
    reasons: z.array(z.lazy(() => DeleteTeamReasons$inboundSchema)).optional(),
});
/** @internal */
export const DeleteTeamRequestBody$outboundSchema = z.object({
    reasons: z.array(z.lazy(() => DeleteTeamReasons$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DeleteTeamRequestBody$;
(function (DeleteTeamRequestBody$) {
    /** @deprecated use `DeleteTeamRequestBody$inboundSchema` instead. */
    DeleteTeamRequestBody$.inboundSchema = DeleteTeamRequestBody$inboundSchema;
    /** @deprecated use `DeleteTeamRequestBody$outboundSchema` instead. */
    DeleteTeamRequestBody$.outboundSchema = DeleteTeamRequestBody$outboundSchema;
})(DeleteTeamRequestBody$ || (DeleteTeamRequestBody$ = {}));
export function deleteTeamRequestBodyToJSON(deleteTeamRequestBody) {
    return JSON.stringify(DeleteTeamRequestBody$outboundSchema.parse(deleteTeamRequestBody));
}
export function deleteTeamRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DeleteTeamRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteTeamRequestBody' from JSON`);
}
/** @internal */
export const DeleteTeamRequest$inboundSchema = z.object({
    newDefaultTeamId: z.string().optional(),
    teamId: z.string(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => DeleteTeamRequestBody$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const DeleteTeamRequest$outboundSchema = z.object({
    newDefaultTeamId: z.string().optional(),
    teamId: z.string(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => DeleteTeamRequestBody$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DeleteTeamRequest$;
(function (DeleteTeamRequest$) {
    /** @deprecated use `DeleteTeamRequest$inboundSchema` instead. */
    DeleteTeamRequest$.inboundSchema = DeleteTeamRequest$inboundSchema;
    /** @deprecated use `DeleteTeamRequest$outboundSchema` instead. */
    DeleteTeamRequest$.outboundSchema = DeleteTeamRequest$outboundSchema;
})(DeleteTeamRequest$ || (DeleteTeamRequest$ = {}));
export function deleteTeamRequestToJSON(deleteTeamRequest) {
    return JSON.stringify(DeleteTeamRequest$outboundSchema.parse(deleteTeamRequest));
}
export function deleteTeamRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DeleteTeamRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteTeamRequest' from JSON`);
}
/** @internal */
export const DeleteTeamResponseBody$inboundSchema = z.object({
    id: z.string(),
    newDefaultTeamIdError: z.boolean().optional(),
});
/** @internal */
export const DeleteTeamResponseBody$outboundSchema = z.object({
    id: z.string(),
    newDefaultTeamIdError: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DeleteTeamResponseBody$;
(function (DeleteTeamResponseBody$) {
    /** @deprecated use `DeleteTeamResponseBody$inboundSchema` instead. */
    DeleteTeamResponseBody$.inboundSchema = DeleteTeamResponseBody$inboundSchema;
    /** @deprecated use `DeleteTeamResponseBody$outboundSchema` instead. */
    DeleteTeamResponseBody$.outboundSchema = DeleteTeamResponseBody$outboundSchema;
})(DeleteTeamResponseBody$ || (DeleteTeamResponseBody$ = {}));
export function deleteTeamResponseBodyToJSON(deleteTeamResponseBody) {
    return JSON.stringify(DeleteTeamResponseBody$outboundSchema.parse(deleteTeamResponseBody));
}
export function deleteTeamResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DeleteTeamResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteTeamResponseBody' from JSON`);
}
//# sourceMappingURL=deleteteamop.js.map