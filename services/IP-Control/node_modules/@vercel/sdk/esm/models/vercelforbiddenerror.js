/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { VercelError } from "./vercelerror.js";
export class VercelForbiddenError extends VercelError {
    constructor(err, httpMeta) {
        const message = err.error?.message
            || `API error occurred: ${JSON.stringify(err)}`;
        super(message, httpMeta);
        this.data$ = err;
        this.error = err.error;
        this.name = "VercelForbiddenError";
    }
}
/** @internal */
export const VercelForbiddenErrorError$inboundSchema = z.object({
    code: z.string(),
    message: z.string(),
});
/** @internal */
export const VercelForbiddenErrorError$outboundSchema = z.object({
    code: z.string(),
    message: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var VercelForbiddenErrorError$;
(function (VercelForbiddenErrorError$) {
    /** @deprecated use `VercelForbiddenErrorError$inboundSchema` instead. */
    VercelForbiddenErrorError$.inboundSchema = VercelForbiddenErrorError$inboundSchema;
    /** @deprecated use `VercelForbiddenErrorError$outboundSchema` instead. */
    VercelForbiddenErrorError$.outboundSchema = VercelForbiddenErrorError$outboundSchema;
})(VercelForbiddenErrorError$ || (VercelForbiddenErrorError$ = {}));
export function vercelForbiddenErrorErrorToJSON(vercelForbiddenErrorError) {
    return JSON.stringify(VercelForbiddenErrorError$outboundSchema.parse(vercelForbiddenErrorError));
}
export function vercelForbiddenErrorErrorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => VercelForbiddenErrorError$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'VercelForbiddenErrorError' from JSON`);
}
/** @internal */
export const VercelForbiddenError$inboundSchema = z.object({
    error: z.lazy(() => VercelForbiddenErrorError$inboundSchema),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
})
    .transform((v) => {
    return new VercelForbiddenError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
    });
});
/** @internal */
export const VercelForbiddenError$outboundSchema = z.instanceof(VercelForbiddenError)
    .transform(v => v.data$)
    .pipe(z.object({
    error: z.lazy(() => VercelForbiddenErrorError$outboundSchema),
}));
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var VercelForbiddenError$;
(function (VercelForbiddenError$) {
    /** @deprecated use `VercelForbiddenError$inboundSchema` instead. */
    VercelForbiddenError$.inboundSchema = VercelForbiddenError$inboundSchema;
    /** @deprecated use `VercelForbiddenError$outboundSchema` instead. */
    VercelForbiddenError$.outboundSchema = VercelForbiddenError$outboundSchema;
})(VercelForbiddenError$ || (VercelForbiddenError$ = {}));
//# sourceMappingURL=vercelforbiddenerror.js.map