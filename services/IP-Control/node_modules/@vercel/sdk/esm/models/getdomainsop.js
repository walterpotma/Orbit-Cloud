/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Pagination$inboundSchema, Pagination$outboundSchema, } from "./pagination.js";
/**
 * Whether or not the domain is registered with Name.com. If set to `true`, the domain is registered with Name.com.
 */
export const GetDomainsRegistrar = {
    New: "new",
};
/**
 * The type of service the domain is handled by. `external` if the DNS is externally handled, `zeit.world` if handled with Vercel, or `na` if the service is not available.
 */
export const GetDomainsServiceType = {
    ZeitWorld: "zeit.world",
    External: "external",
    Na: "na",
};
/** @internal */
export const GetDomainsRequest$inboundSchema = z.object({
    limit: z.number().optional(),
    since: z.number().optional(),
    until: z.number().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/** @internal */
export const GetDomainsRequest$outboundSchema = z.object({
    limit: z.number().optional(),
    since: z.number().optional(),
    until: z.number().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDomainsRequest$;
(function (GetDomainsRequest$) {
    /** @deprecated use `GetDomainsRequest$inboundSchema` instead. */
    GetDomainsRequest$.inboundSchema = GetDomainsRequest$inboundSchema;
    /** @deprecated use `GetDomainsRequest$outboundSchema` instead. */
    GetDomainsRequest$.outboundSchema = GetDomainsRequest$outboundSchema;
})(GetDomainsRequest$ || (GetDomainsRequest$ = {}));
export function getDomainsRequestToJSON(getDomainsRequest) {
    return JSON.stringify(GetDomainsRequest$outboundSchema.parse(getDomainsRequest));
}
export function getDomainsRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDomainsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDomainsRequest' from JSON`);
}
/** @internal */
export const GetDomainsCreator$inboundSchema = z.object({
    username: z.string(),
    email: z.string(),
    customerId: z.nullable(z.string()).optional(),
    isDomainReseller: z.boolean().optional(),
    id: z.string(),
});
/** @internal */
export const GetDomainsCreator$outboundSchema = z.object({
    username: z.string(),
    email: z.string(),
    customerId: z.nullable(z.string()).optional(),
    isDomainReseller: z.boolean().optional(),
    id: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDomainsCreator$;
(function (GetDomainsCreator$) {
    /** @deprecated use `GetDomainsCreator$inboundSchema` instead. */
    GetDomainsCreator$.inboundSchema = GetDomainsCreator$inboundSchema;
    /** @deprecated use `GetDomainsCreator$outboundSchema` instead. */
    GetDomainsCreator$.outboundSchema = GetDomainsCreator$outboundSchema;
})(GetDomainsCreator$ || (GetDomainsCreator$ = {}));
export function getDomainsCreatorToJSON(getDomainsCreator) {
    return JSON.stringify(GetDomainsCreator$outboundSchema.parse(getDomainsCreator));
}
export function getDomainsCreatorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDomainsCreator$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDomainsCreator' from JSON`);
}
/** @internal */
export const GetDomainsRegistrar$inboundSchema = z.nativeEnum(GetDomainsRegistrar);
/** @internal */
export const GetDomainsRegistrar$outboundSchema = GetDomainsRegistrar$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDomainsRegistrar$;
(function (GetDomainsRegistrar$) {
    /** @deprecated use `GetDomainsRegistrar$inboundSchema` instead. */
    GetDomainsRegistrar$.inboundSchema = GetDomainsRegistrar$inboundSchema;
    /** @deprecated use `GetDomainsRegistrar$outboundSchema` instead. */
    GetDomainsRegistrar$.outboundSchema = GetDomainsRegistrar$outboundSchema;
})(GetDomainsRegistrar$ || (GetDomainsRegistrar$ = {}));
/** @internal */
export const GetDomainsServiceType$inboundSchema = z.nativeEnum(GetDomainsServiceType);
/** @internal */
export const GetDomainsServiceType$outboundSchema = GetDomainsServiceType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDomainsServiceType$;
(function (GetDomainsServiceType$) {
    /** @deprecated use `GetDomainsServiceType$inboundSchema` instead. */
    GetDomainsServiceType$.inboundSchema = GetDomainsServiceType$inboundSchema;
    /** @deprecated use `GetDomainsServiceType$outboundSchema` instead. */
    GetDomainsServiceType$.outboundSchema = GetDomainsServiceType$outboundSchema;
})(GetDomainsServiceType$ || (GetDomainsServiceType$ = {}));
/** @internal */
export const Domains$inboundSchema = z.object({
    verified: z.boolean(),
    nameservers: z.array(z.string()),
    intendedNameservers: z.array(z.string()),
    customNameservers: z.array(z.string()).optional(),
    creator: z.lazy(() => GetDomainsCreator$inboundSchema),
    registrar: GetDomainsRegistrar$inboundSchema.optional(),
    teamId: z.nullable(z.string()),
    createdAt: z.number(),
    boughtAt: z.nullable(z.number()),
    expiresAt: z.nullable(z.number()),
    id: z.string(),
    name: z.string(),
    orderedAt: z.number().optional(),
    renew: z.boolean().optional(),
    serviceType: GetDomainsServiceType$inboundSchema,
    transferredAt: z.nullable(z.number()).optional(),
    transferStartedAt: z.number().optional(),
    userId: z.string(),
});
/** @internal */
export const Domains$outboundSchema = z.object({
    verified: z.boolean(),
    nameservers: z.array(z.string()),
    intendedNameservers: z.array(z.string()),
    customNameservers: z.array(z.string()).optional(),
    creator: z.lazy(() => GetDomainsCreator$outboundSchema),
    registrar: GetDomainsRegistrar$outboundSchema.optional(),
    teamId: z.nullable(z.string()),
    createdAt: z.number(),
    boughtAt: z.nullable(z.number()),
    expiresAt: z.nullable(z.number()),
    id: z.string(),
    name: z.string(),
    orderedAt: z.number().optional(),
    renew: z.boolean().optional(),
    serviceType: GetDomainsServiceType$outboundSchema,
    transferredAt: z.nullable(z.number()).optional(),
    transferStartedAt: z.number().optional(),
    userId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Domains$;
(function (Domains$) {
    /** @deprecated use `Domains$inboundSchema` instead. */
    Domains$.inboundSchema = Domains$inboundSchema;
    /** @deprecated use `Domains$outboundSchema` instead. */
    Domains$.outboundSchema = Domains$outboundSchema;
})(Domains$ || (Domains$ = {}));
export function domainsToJSON(domains) {
    return JSON.stringify(Domains$outboundSchema.parse(domains));
}
export function domainsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Domains$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Domains' from JSON`);
}
/** @internal */
export const GetDomainsResponseBody$inboundSchema = z.object({
    domains: z.array(z.lazy(() => Domains$inboundSchema)),
    pagination: Pagination$inboundSchema,
});
/** @internal */
export const GetDomainsResponseBody$outboundSchema = z.object({
    domains: z.array(z.lazy(() => Domains$outboundSchema)),
    pagination: Pagination$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDomainsResponseBody$;
(function (GetDomainsResponseBody$) {
    /** @deprecated use `GetDomainsResponseBody$inboundSchema` instead. */
    GetDomainsResponseBody$.inboundSchema = GetDomainsResponseBody$inboundSchema;
    /** @deprecated use `GetDomainsResponseBody$outboundSchema` instead. */
    GetDomainsResponseBody$.outboundSchema = GetDomainsResponseBody$outboundSchema;
})(GetDomainsResponseBody$ || (GetDomainsResponseBody$ = {}));
export function getDomainsResponseBodyToJSON(getDomainsResponseBody) {
    return JSON.stringify(GetDomainsResponseBody$outboundSchema.parse(getDomainsResponseBody));
}
export function getDomainsResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDomainsResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDomainsResponseBody' from JSON`);
}
//# sourceMappingURL=getdomainsop.js.map