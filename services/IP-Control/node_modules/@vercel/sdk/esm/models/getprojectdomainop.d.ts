import * as z from "zod";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type GetProjectDomainRequest = {
    /**
     * The unique project identifier or the project name
     */
    idOrName: string;
    /**
     * The project domain name
     */
    domain: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};
/**
 * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
 */
export type Verification = {
    type: string;
    domain: string;
    value: string;
    reason: string;
};
export type GetProjectDomainResponseBody = {
    name: string;
    apexName: string;
    projectId: string;
    redirect?: string | null | undefined;
    redirectStatusCode?: number | null | undefined;
    gitBranch?: string | null | undefined;
    customEnvironmentId?: string | null | undefined;
    updatedAt?: number | undefined;
    createdAt?: number | undefined;
    /**
     * `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.
     */
    verified: boolean;
    /**
     * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
     */
    verification?: Array<Verification> | undefined;
};
/** @internal */
export declare const GetProjectDomainRequest$inboundSchema: z.ZodType<GetProjectDomainRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectDomainRequest$Outbound = {
    idOrName: string;
    domain: string;
    teamId?: string | undefined;
    slug?: string | undefined;
};
/** @internal */
export declare const GetProjectDomainRequest$outboundSchema: z.ZodType<GetProjectDomainRequest$Outbound, z.ZodTypeDef, GetProjectDomainRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectDomainRequest$ {
    /** @deprecated use `GetProjectDomainRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectDomainRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectDomainRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectDomainRequest$Outbound, z.ZodTypeDef, GetProjectDomainRequest>;
    /** @deprecated use `GetProjectDomainRequest$Outbound` instead. */
    type Outbound = GetProjectDomainRequest$Outbound;
}
export declare function getProjectDomainRequestToJSON(getProjectDomainRequest: GetProjectDomainRequest): string;
export declare function getProjectDomainRequestFromJSON(jsonString: string): SafeParseResult<GetProjectDomainRequest, SDKValidationError>;
/** @internal */
export declare const Verification$inboundSchema: z.ZodType<Verification, z.ZodTypeDef, unknown>;
/** @internal */
export type Verification$Outbound = {
    type: string;
    domain: string;
    value: string;
    reason: string;
};
/** @internal */
export declare const Verification$outboundSchema: z.ZodType<Verification$Outbound, z.ZodTypeDef, Verification>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Verification$ {
    /** @deprecated use `Verification$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Verification, z.ZodTypeDef, unknown>;
    /** @deprecated use `Verification$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Verification$Outbound, z.ZodTypeDef, Verification>;
    /** @deprecated use `Verification$Outbound` instead. */
    type Outbound = Verification$Outbound;
}
export declare function verificationToJSON(verification: Verification): string;
export declare function verificationFromJSON(jsonString: string): SafeParseResult<Verification, SDKValidationError>;
/** @internal */
export declare const GetProjectDomainResponseBody$inboundSchema: z.ZodType<GetProjectDomainResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectDomainResponseBody$Outbound = {
    name: string;
    apexName: string;
    projectId: string;
    redirect?: string | null | undefined;
    redirectStatusCode?: number | null | undefined;
    gitBranch?: string | null | undefined;
    customEnvironmentId?: string | null | undefined;
    updatedAt?: number | undefined;
    createdAt?: number | undefined;
    verified: boolean;
    verification?: Array<Verification$Outbound> | undefined;
};
/** @internal */
export declare const GetProjectDomainResponseBody$outboundSchema: z.ZodType<GetProjectDomainResponseBody$Outbound, z.ZodTypeDef, GetProjectDomainResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectDomainResponseBody$ {
    /** @deprecated use `GetProjectDomainResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectDomainResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectDomainResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectDomainResponseBody$Outbound, z.ZodTypeDef, GetProjectDomainResponseBody>;
    /** @deprecated use `GetProjectDomainResponseBody$Outbound` instead. */
    type Outbound = GetProjectDomainResponseBody$Outbound;
}
export declare function getProjectDomainResponseBodyToJSON(getProjectDomainResponseBody: GetProjectDomainResponseBody): string;
export declare function getProjectDomainResponseBodyFromJSON(jsonString: string): SafeParseResult<GetProjectDomainResponseBody, SDKValidationError>;
//# sourceMappingURL=getprojectdomainop.d.ts.map