/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { Vercel } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Certs Get Cert By Id", async () => {
  const testHttpClient = createTestHTTPClient("getCertById");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.certs.getCertById({
    id: "<id>",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    id: "<id>",
    createdAt: 6540.28,
    expiresAt: 6456.07,
    autoRenew: true,
    cns: [
      "<value 1>",
      "<value 2>",
    ],
  });
});

test("Certs Remove Cert", async () => {
  const testHttpClient = createTestHTTPClient("removeCert");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.certs.removeCert({
    id: "<id>",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Certs Issue Cert", async () => {
  const testHttpClient = createTestHTTPClient("issueCert");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.certs.issueCert({
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    id: "<id>",
    createdAt: 8859.68,
    expiresAt: 8499.2,
    autoRenew: true,
    cns: [
      "<value 1>",
      "<value 2>",
    ],
  });
});

test("Certs Upload Cert", async () => {
  const testHttpClient = createTestHTTPClient("uploadCert");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.certs.uploadCert({
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    id: "<id>",
    createdAt: 5621.19,
    expiresAt: 3778.47,
    autoRenew: true,
    cns: [
      "<value 1>",
      "<value 2>",
      "<value 3>",
    ],
  });
});
