/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type RateLimitNotice = {
  remaining: number;
  reset: number;
  resetMs: number;
  total: number;
};

/** @internal */
export const RateLimitNotice$inboundSchema: z.ZodType<
  RateLimitNotice,
  z.ZodTypeDef,
  unknown
> = z.object({
  remaining: z.number().int(),
  reset: z.number().int(),
  resetMs: z.number().int(),
  total: z.number().int(),
});

/** @internal */
export type RateLimitNotice$Outbound = {
  remaining: number;
  reset: number;
  resetMs: number;
  total: number;
};

/** @internal */
export const RateLimitNotice$outboundSchema: z.ZodType<
  RateLimitNotice$Outbound,
  z.ZodTypeDef,
  RateLimitNotice
> = z.object({
  remaining: z.number().int(),
  reset: z.number().int(),
  resetMs: z.number().int(),
  total: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RateLimitNotice$ {
  /** @deprecated use `RateLimitNotice$inboundSchema` instead. */
  export const inboundSchema = RateLimitNotice$inboundSchema;
  /** @deprecated use `RateLimitNotice$outboundSchema` instead. */
  export const outboundSchema = RateLimitNotice$outboundSchema;
  /** @deprecated use `RateLimitNotice$Outbound` instead. */
  export type Outbound = RateLimitNotice$Outbound;
}

export function rateLimitNoticeToJSON(
  rateLimitNotice: RateLimitNotice,
): string {
  return JSON.stringify(RateLimitNotice$outboundSchema.parse(rateLimitNotice));
}

export function rateLimitNoticeFromJSON(
  jsonString: string,
): SafeParseResult<RateLimitNotice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RateLimitNotice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RateLimitNotice' from JSON`,
  );
}
