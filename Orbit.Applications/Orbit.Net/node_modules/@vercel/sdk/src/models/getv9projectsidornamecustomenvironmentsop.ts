/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetV9ProjectsIdOrNameCustomEnvironmentsRequest = {
  /**
   * The unique project identifier or the project name
   */
  idOrName: string;
  /**
   * Fetch custom environments for a specific git branch
   */
  gitBranch?: string | undefined;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
};

/**
 * The maximum number of custom environments allowed either by the team's plan type or a custom override.
 */
export type AccountLimit = {
  total: number;
};

/**
 * The type of environment (production, preview, or development)
 */
export const GetV9ProjectsIdOrNameCustomEnvironmentsType = {
  Preview: "preview",
  Production: "production",
  Development: "development",
} as const;
/**
 * The type of environment (production, preview, or development)
 */
export type GetV9ProjectsIdOrNameCustomEnvironmentsType = ClosedEnum<
  typeof GetV9ProjectsIdOrNameCustomEnvironmentsType
>;

/**
 * The type of matching to perform
 */
export const GetV9ProjectsIdOrNameCustomEnvironmentsEnvironmentType = {
  EndsWith: "endsWith",
  StartsWith: "startsWith",
  Equals: "equals",
} as const;
/**
 * The type of matching to perform
 */
export type GetV9ProjectsIdOrNameCustomEnvironmentsEnvironmentType = ClosedEnum<
  typeof GetV9ProjectsIdOrNameCustomEnvironmentsEnvironmentType
>;

/**
 * Configuration for matching git branches to this environment
 */
export type GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher = {
  /**
   * The type of matching to perform
   */
  type: GetV9ProjectsIdOrNameCustomEnvironmentsEnvironmentType;
  /**
   * The pattern to match against branch names
   */
  pattern: string;
};

/**
 * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
 */
export type GetV9ProjectsIdOrNameCustomEnvironmentsVerification = {
  type: string;
  domain: string;
  value: string;
  reason: string;
};

/**
 * List of domains associated with this environment
 */
export type GetV9ProjectsIdOrNameCustomEnvironmentsDomains = {
  name: string;
  apexName: string;
  projectId: string;
  redirect?: string | null | undefined;
  redirectStatusCode?: number | null | undefined;
  gitBranch?: string | null | undefined;
  customEnvironmentId?: string | null | undefined;
  updatedAt?: number | undefined;
  createdAt?: number | undefined;
  /**
   * `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.
   */
  verified: boolean;
  /**
   * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
   */
  verification?:
    | Array<GetV9ProjectsIdOrNameCustomEnvironmentsVerification>
    | undefined;
};

export type GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments = {
  /**
   * Unique identifier for the custom environment (format: env_*)
   */
  id: string;
  /**
   * URL-friendly name of the environment
   */
  slug: string;
  /**
   * The type of environment (production, preview, or development)
   */
  type: GetV9ProjectsIdOrNameCustomEnvironmentsType;
  /**
   * Optional description of the environment's purpose
   */
  description?: string | undefined;
  /**
   * Configuration for matching git branches to this environment
   */
  branchMatcher?:
    | GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher
    | undefined;
  /**
   * List of domains associated with this environment
   */
  domains?: Array<GetV9ProjectsIdOrNameCustomEnvironmentsDomains> | undefined;
  /**
   * List of aliases for the current deployment
   */
  currentDeploymentAliases?: Array<string> | undefined;
  /**
   * Timestamp when the environment was created
   */
  createdAt: number;
  /**
   * Timestamp when the environment was last updated
   */
  updatedAt: number;
};

export type GetV9ProjectsIdOrNameCustomEnvironmentsResponseBody = {
  /**
   * The maximum number of custom environments allowed either by the team's plan type or a custom override.
   */
  accountLimit: AccountLimit;
  environments: Array<GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments>;
};

/** @internal */
export const GetV9ProjectsIdOrNameCustomEnvironmentsRequest$inboundSchema:
  z.ZodType<
    GetV9ProjectsIdOrNameCustomEnvironmentsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    idOrName: z.string(),
    gitBranch: z.string().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
  });

/** @internal */
export type GetV9ProjectsIdOrNameCustomEnvironmentsRequest$Outbound = {
  idOrName: string;
  gitBranch?: string | undefined;
  teamId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const GetV9ProjectsIdOrNameCustomEnvironmentsRequest$outboundSchema:
  z.ZodType<
    GetV9ProjectsIdOrNameCustomEnvironmentsRequest$Outbound,
    z.ZodTypeDef,
    GetV9ProjectsIdOrNameCustomEnvironmentsRequest
  > = z.object({
    idOrName: z.string(),
    gitBranch: z.string().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV9ProjectsIdOrNameCustomEnvironmentsRequest$ {
  /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetV9ProjectsIdOrNameCustomEnvironmentsRequest$inboundSchema;
  /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV9ProjectsIdOrNameCustomEnvironmentsRequest$outboundSchema;
  /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsRequest$Outbound` instead. */
  export type Outbound =
    GetV9ProjectsIdOrNameCustomEnvironmentsRequest$Outbound;
}

export function getV9ProjectsIdOrNameCustomEnvironmentsRequestToJSON(
  getV9ProjectsIdOrNameCustomEnvironmentsRequest:
    GetV9ProjectsIdOrNameCustomEnvironmentsRequest,
): string {
  return JSON.stringify(
    GetV9ProjectsIdOrNameCustomEnvironmentsRequest$outboundSchema.parse(
      getV9ProjectsIdOrNameCustomEnvironmentsRequest,
    ),
  );
}

export function getV9ProjectsIdOrNameCustomEnvironmentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV9ProjectsIdOrNameCustomEnvironmentsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV9ProjectsIdOrNameCustomEnvironmentsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV9ProjectsIdOrNameCustomEnvironmentsRequest' from JSON`,
  );
}

/** @internal */
export const AccountLimit$inboundSchema: z.ZodType<
  AccountLimit,
  z.ZodTypeDef,
  unknown
> = z.object({
  total: z.number(),
});

/** @internal */
export type AccountLimit$Outbound = {
  total: number;
};

/** @internal */
export const AccountLimit$outboundSchema: z.ZodType<
  AccountLimit$Outbound,
  z.ZodTypeDef,
  AccountLimit
> = z.object({
  total: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountLimit$ {
  /** @deprecated use `AccountLimit$inboundSchema` instead. */
  export const inboundSchema = AccountLimit$inboundSchema;
  /** @deprecated use `AccountLimit$outboundSchema` instead. */
  export const outboundSchema = AccountLimit$outboundSchema;
  /** @deprecated use `AccountLimit$Outbound` instead. */
  export type Outbound = AccountLimit$Outbound;
}

export function accountLimitToJSON(accountLimit: AccountLimit): string {
  return JSON.stringify(AccountLimit$outboundSchema.parse(accountLimit));
}

export function accountLimitFromJSON(
  jsonString: string,
): SafeParseResult<AccountLimit, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountLimit$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountLimit' from JSON`,
  );
}

/** @internal */
export const GetV9ProjectsIdOrNameCustomEnvironmentsType$inboundSchema:
  z.ZodNativeEnum<typeof GetV9ProjectsIdOrNameCustomEnvironmentsType> = z
    .nativeEnum(GetV9ProjectsIdOrNameCustomEnvironmentsType);

/** @internal */
export const GetV9ProjectsIdOrNameCustomEnvironmentsType$outboundSchema:
  z.ZodNativeEnum<typeof GetV9ProjectsIdOrNameCustomEnvironmentsType> =
    GetV9ProjectsIdOrNameCustomEnvironmentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV9ProjectsIdOrNameCustomEnvironmentsType$ {
  /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsType$inboundSchema` instead. */
  export const inboundSchema =
    GetV9ProjectsIdOrNameCustomEnvironmentsType$inboundSchema;
  /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsType$outboundSchema` instead. */
  export const outboundSchema =
    GetV9ProjectsIdOrNameCustomEnvironmentsType$outboundSchema;
}

/** @internal */
export const GetV9ProjectsIdOrNameCustomEnvironmentsEnvironmentType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV9ProjectsIdOrNameCustomEnvironmentsEnvironmentType
  > = z.nativeEnum(GetV9ProjectsIdOrNameCustomEnvironmentsEnvironmentType);

/** @internal */
export const GetV9ProjectsIdOrNameCustomEnvironmentsEnvironmentType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV9ProjectsIdOrNameCustomEnvironmentsEnvironmentType
  > = GetV9ProjectsIdOrNameCustomEnvironmentsEnvironmentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV9ProjectsIdOrNameCustomEnvironmentsEnvironmentType$ {
  /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsEnvironmentType$inboundSchema` instead. */
  export const inboundSchema =
    GetV9ProjectsIdOrNameCustomEnvironmentsEnvironmentType$inboundSchema;
  /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsEnvironmentType$outboundSchema` instead. */
  export const outboundSchema =
    GetV9ProjectsIdOrNameCustomEnvironmentsEnvironmentType$outboundSchema;
}

/** @internal */
export const GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher$inboundSchema:
  z.ZodType<
    GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: GetV9ProjectsIdOrNameCustomEnvironmentsEnvironmentType$inboundSchema,
    pattern: z.string(),
  });

/** @internal */
export type GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher$Outbound = {
  type: string;
  pattern: string;
};

/** @internal */
export const GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher$outboundSchema:
  z.ZodType<
    GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher$Outbound,
    z.ZodTypeDef,
    GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher
  > = z.object({
    type: GetV9ProjectsIdOrNameCustomEnvironmentsEnvironmentType$outboundSchema,
    pattern: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher$ {
  /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher$inboundSchema` instead. */
  export const inboundSchema =
    GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher$inboundSchema;
  /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher$outboundSchema` instead. */
  export const outboundSchema =
    GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher$outboundSchema;
  /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher$Outbound` instead. */
  export type Outbound =
    GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher$Outbound;
}

export function getV9ProjectsIdOrNameCustomEnvironmentsBranchMatcherToJSON(
  getV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher:
    GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher,
): string {
  return JSON.stringify(
    GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher$outboundSchema.parse(
      getV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher,
    ),
  );
}

export function getV9ProjectsIdOrNameCustomEnvironmentsBranchMatcherFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher' from JSON`,
  );
}

/** @internal */
export const GetV9ProjectsIdOrNameCustomEnvironmentsVerification$inboundSchema:
  z.ZodType<
    GetV9ProjectsIdOrNameCustomEnvironmentsVerification,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: z.string(),
    domain: z.string(),
    value: z.string(),
    reason: z.string(),
  });

/** @internal */
export type GetV9ProjectsIdOrNameCustomEnvironmentsVerification$Outbound = {
  type: string;
  domain: string;
  value: string;
  reason: string;
};

/** @internal */
export const GetV9ProjectsIdOrNameCustomEnvironmentsVerification$outboundSchema:
  z.ZodType<
    GetV9ProjectsIdOrNameCustomEnvironmentsVerification$Outbound,
    z.ZodTypeDef,
    GetV9ProjectsIdOrNameCustomEnvironmentsVerification
  > = z.object({
    type: z.string(),
    domain: z.string(),
    value: z.string(),
    reason: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV9ProjectsIdOrNameCustomEnvironmentsVerification$ {
  /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsVerification$inboundSchema` instead. */
  export const inboundSchema =
    GetV9ProjectsIdOrNameCustomEnvironmentsVerification$inboundSchema;
  /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsVerification$outboundSchema` instead. */
  export const outboundSchema =
    GetV9ProjectsIdOrNameCustomEnvironmentsVerification$outboundSchema;
  /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsVerification$Outbound` instead. */
  export type Outbound =
    GetV9ProjectsIdOrNameCustomEnvironmentsVerification$Outbound;
}

export function getV9ProjectsIdOrNameCustomEnvironmentsVerificationToJSON(
  getV9ProjectsIdOrNameCustomEnvironmentsVerification:
    GetV9ProjectsIdOrNameCustomEnvironmentsVerification,
): string {
  return JSON.stringify(
    GetV9ProjectsIdOrNameCustomEnvironmentsVerification$outboundSchema.parse(
      getV9ProjectsIdOrNameCustomEnvironmentsVerification,
    ),
  );
}

export function getV9ProjectsIdOrNameCustomEnvironmentsVerificationFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV9ProjectsIdOrNameCustomEnvironmentsVerification,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV9ProjectsIdOrNameCustomEnvironmentsVerification$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV9ProjectsIdOrNameCustomEnvironmentsVerification' from JSON`,
  );
}

/** @internal */
export const GetV9ProjectsIdOrNameCustomEnvironmentsDomains$inboundSchema:
  z.ZodType<
    GetV9ProjectsIdOrNameCustomEnvironmentsDomains,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    apexName: z.string(),
    projectId: z.string(),
    redirect: z.nullable(z.string()).optional(),
    redirectStatusCode: z.nullable(z.number()).optional(),
    gitBranch: z.nullable(z.string()).optional(),
    customEnvironmentId: z.nullable(z.string()).optional(),
    updatedAt: z.number().optional(),
    createdAt: z.number().optional(),
    verified: z.boolean(),
    verification: z.array(
      z.lazy(() =>
        GetV9ProjectsIdOrNameCustomEnvironmentsVerification$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type GetV9ProjectsIdOrNameCustomEnvironmentsDomains$Outbound = {
  name: string;
  apexName: string;
  projectId: string;
  redirect?: string | null | undefined;
  redirectStatusCode?: number | null | undefined;
  gitBranch?: string | null | undefined;
  customEnvironmentId?: string | null | undefined;
  updatedAt?: number | undefined;
  createdAt?: number | undefined;
  verified: boolean;
  verification?:
    | Array<GetV9ProjectsIdOrNameCustomEnvironmentsVerification$Outbound>
    | undefined;
};

/** @internal */
export const GetV9ProjectsIdOrNameCustomEnvironmentsDomains$outboundSchema:
  z.ZodType<
    GetV9ProjectsIdOrNameCustomEnvironmentsDomains$Outbound,
    z.ZodTypeDef,
    GetV9ProjectsIdOrNameCustomEnvironmentsDomains
  > = z.object({
    name: z.string(),
    apexName: z.string(),
    projectId: z.string(),
    redirect: z.nullable(z.string()).optional(),
    redirectStatusCode: z.nullable(z.number()).optional(),
    gitBranch: z.nullable(z.string()).optional(),
    customEnvironmentId: z.nullable(z.string()).optional(),
    updatedAt: z.number().optional(),
    createdAt: z.number().optional(),
    verified: z.boolean(),
    verification: z.array(
      z.lazy(() =>
        GetV9ProjectsIdOrNameCustomEnvironmentsVerification$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV9ProjectsIdOrNameCustomEnvironmentsDomains$ {
  /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsDomains$inboundSchema` instead. */
  export const inboundSchema =
    GetV9ProjectsIdOrNameCustomEnvironmentsDomains$inboundSchema;
  /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsDomains$outboundSchema` instead. */
  export const outboundSchema =
    GetV9ProjectsIdOrNameCustomEnvironmentsDomains$outboundSchema;
  /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsDomains$Outbound` instead. */
  export type Outbound =
    GetV9ProjectsIdOrNameCustomEnvironmentsDomains$Outbound;
}

export function getV9ProjectsIdOrNameCustomEnvironmentsDomainsToJSON(
  getV9ProjectsIdOrNameCustomEnvironmentsDomains:
    GetV9ProjectsIdOrNameCustomEnvironmentsDomains,
): string {
  return JSON.stringify(
    GetV9ProjectsIdOrNameCustomEnvironmentsDomains$outboundSchema.parse(
      getV9ProjectsIdOrNameCustomEnvironmentsDomains,
    ),
  );
}

export function getV9ProjectsIdOrNameCustomEnvironmentsDomainsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV9ProjectsIdOrNameCustomEnvironmentsDomains,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV9ProjectsIdOrNameCustomEnvironmentsDomains$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV9ProjectsIdOrNameCustomEnvironmentsDomains' from JSON`,
  );
}

/** @internal */
export const GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments$inboundSchema:
  z.ZodType<
    GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string(),
    slug: z.string(),
    type: GetV9ProjectsIdOrNameCustomEnvironmentsType$inboundSchema,
    description: z.string().optional(),
    branchMatcher: z.lazy(() =>
      GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher$inboundSchema
    ).optional(),
    domains: z.array(
      z.lazy(() =>
        GetV9ProjectsIdOrNameCustomEnvironmentsDomains$inboundSchema
      ),
    ).optional(),
    currentDeploymentAliases: z.array(z.string()).optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
  });

/** @internal */
export type GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments$Outbound = {
  id: string;
  slug: string;
  type: string;
  description?: string | undefined;
  branchMatcher?:
    | GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher$Outbound
    | undefined;
  domains?:
    | Array<GetV9ProjectsIdOrNameCustomEnvironmentsDomains$Outbound>
    | undefined;
  currentDeploymentAliases?: Array<string> | undefined;
  createdAt: number;
  updatedAt: number;
};

/** @internal */
export const GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments$outboundSchema:
  z.ZodType<
    GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments$Outbound,
    z.ZodTypeDef,
    GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments
  > = z.object({
    id: z.string(),
    slug: z.string(),
    type: GetV9ProjectsIdOrNameCustomEnvironmentsType$outboundSchema,
    description: z.string().optional(),
    branchMatcher: z.lazy(() =>
      GetV9ProjectsIdOrNameCustomEnvironmentsBranchMatcher$outboundSchema
    ).optional(),
    domains: z.array(
      z.lazy(() =>
        GetV9ProjectsIdOrNameCustomEnvironmentsDomains$outboundSchema
      ),
    ).optional(),
    currentDeploymentAliases: z.array(z.string()).optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments$ {
  /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments$inboundSchema` instead. */
  export const inboundSchema =
    GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments$inboundSchema;
  /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments$outboundSchema` instead. */
  export const outboundSchema =
    GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments$outboundSchema;
  /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments$Outbound` instead. */
  export type Outbound =
    GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments$Outbound;
}

export function getV9ProjectsIdOrNameCustomEnvironmentsEnvironmentsToJSON(
  getV9ProjectsIdOrNameCustomEnvironmentsEnvironments:
    GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments,
): string {
  return JSON.stringify(
    GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments$outboundSchema.parse(
      getV9ProjectsIdOrNameCustomEnvironmentsEnvironments,
    ),
  );
}

export function getV9ProjectsIdOrNameCustomEnvironmentsEnvironmentsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments' from JSON`,
  );
}

/** @internal */
export const GetV9ProjectsIdOrNameCustomEnvironmentsResponseBody$inboundSchema:
  z.ZodType<
    GetV9ProjectsIdOrNameCustomEnvironmentsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    accountLimit: z.lazy(() => AccountLimit$inboundSchema),
    environments: z.array(
      z.lazy(() =>
        GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments$inboundSchema
      ),
    ),
  });

/** @internal */
export type GetV9ProjectsIdOrNameCustomEnvironmentsResponseBody$Outbound = {
  accountLimit: AccountLimit$Outbound;
  environments: Array<
    GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments$Outbound
  >;
};

/** @internal */
export const GetV9ProjectsIdOrNameCustomEnvironmentsResponseBody$outboundSchema:
  z.ZodType<
    GetV9ProjectsIdOrNameCustomEnvironmentsResponseBody$Outbound,
    z.ZodTypeDef,
    GetV9ProjectsIdOrNameCustomEnvironmentsResponseBody
  > = z.object({
    accountLimit: z.lazy(() => AccountLimit$outboundSchema),
    environments: z.array(
      z.lazy(() =>
        GetV9ProjectsIdOrNameCustomEnvironmentsEnvironments$outboundSchema
      ),
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV9ProjectsIdOrNameCustomEnvironmentsResponseBody$ {
  /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetV9ProjectsIdOrNameCustomEnvironmentsResponseBody$inboundSchema;
  /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetV9ProjectsIdOrNameCustomEnvironmentsResponseBody$outboundSchema;
  /** @deprecated use `GetV9ProjectsIdOrNameCustomEnvironmentsResponseBody$Outbound` instead. */
  export type Outbound =
    GetV9ProjectsIdOrNameCustomEnvironmentsResponseBody$Outbound;
}

export function getV9ProjectsIdOrNameCustomEnvironmentsResponseBodyToJSON(
  getV9ProjectsIdOrNameCustomEnvironmentsResponseBody:
    GetV9ProjectsIdOrNameCustomEnvironmentsResponseBody,
): string {
  return JSON.stringify(
    GetV9ProjectsIdOrNameCustomEnvironmentsResponseBody$outboundSchema.parse(
      getV9ProjectsIdOrNameCustomEnvironmentsResponseBody,
    ),
  );
}

export function getV9ProjectsIdOrNameCustomEnvironmentsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV9ProjectsIdOrNameCustomEnvironmentsResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV9ProjectsIdOrNameCustomEnvironmentsResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV9ProjectsIdOrNameCustomEnvironmentsResponseBody' from JSON`,
  );
}
