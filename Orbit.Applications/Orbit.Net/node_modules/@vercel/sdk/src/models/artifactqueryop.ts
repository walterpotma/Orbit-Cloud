/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type ArtifactQueryRequestBody = {
  /**
   * artifact hashes
   */
  hashes: Array<string>;
};

export type ArtifactQueryRequest = {
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
  requestBody: ArtifactQueryRequestBody;
};

export type ResponseBodyError = {
  message: string;
};

export type ResponseBody2 = {
  error: ResponseBodyError;
};

export type ResponseBody1 = {
  size: number;
  taskDurationMs: number;
  tag?: string | undefined;
};

export type ResponseBody = ResponseBody1 | ResponseBody2;

/** @internal */
export const ArtifactQueryRequestBody$inboundSchema: z.ZodType<
  ArtifactQueryRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  hashes: z.array(z.string()),
});

/** @internal */
export type ArtifactQueryRequestBody$Outbound = {
  hashes: Array<string>;
};

/** @internal */
export const ArtifactQueryRequestBody$outboundSchema: z.ZodType<
  ArtifactQueryRequestBody$Outbound,
  z.ZodTypeDef,
  ArtifactQueryRequestBody
> = z.object({
  hashes: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ArtifactQueryRequestBody$ {
  /** @deprecated use `ArtifactQueryRequestBody$inboundSchema` instead. */
  export const inboundSchema = ArtifactQueryRequestBody$inboundSchema;
  /** @deprecated use `ArtifactQueryRequestBody$outboundSchema` instead. */
  export const outboundSchema = ArtifactQueryRequestBody$outboundSchema;
  /** @deprecated use `ArtifactQueryRequestBody$Outbound` instead. */
  export type Outbound = ArtifactQueryRequestBody$Outbound;
}

export function artifactQueryRequestBodyToJSON(
  artifactQueryRequestBody: ArtifactQueryRequestBody,
): string {
  return JSON.stringify(
    ArtifactQueryRequestBody$outboundSchema.parse(artifactQueryRequestBody),
  );
}

export function artifactQueryRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ArtifactQueryRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ArtifactQueryRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ArtifactQueryRequestBody' from JSON`,
  );
}

/** @internal */
export const ArtifactQueryRequest$inboundSchema: z.ZodType<
  ArtifactQueryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  teamId: z.string().optional(),
  slug: z.string().optional(),
  RequestBody: z.lazy(() => ArtifactQueryRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type ArtifactQueryRequest$Outbound = {
  teamId?: string | undefined;
  slug?: string | undefined;
  RequestBody: ArtifactQueryRequestBody$Outbound;
};

/** @internal */
export const ArtifactQueryRequest$outboundSchema: z.ZodType<
  ArtifactQueryRequest$Outbound,
  z.ZodTypeDef,
  ArtifactQueryRequest
> = z.object({
  teamId: z.string().optional(),
  slug: z.string().optional(),
  requestBody: z.lazy(() => ArtifactQueryRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ArtifactQueryRequest$ {
  /** @deprecated use `ArtifactQueryRequest$inboundSchema` instead. */
  export const inboundSchema = ArtifactQueryRequest$inboundSchema;
  /** @deprecated use `ArtifactQueryRequest$outboundSchema` instead. */
  export const outboundSchema = ArtifactQueryRequest$outboundSchema;
  /** @deprecated use `ArtifactQueryRequest$Outbound` instead. */
  export type Outbound = ArtifactQueryRequest$Outbound;
}

export function artifactQueryRequestToJSON(
  artifactQueryRequest: ArtifactQueryRequest,
): string {
  return JSON.stringify(
    ArtifactQueryRequest$outboundSchema.parse(artifactQueryRequest),
  );
}

export function artifactQueryRequestFromJSON(
  jsonString: string,
): SafeParseResult<ArtifactQueryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ArtifactQueryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ArtifactQueryRequest' from JSON`,
  );
}

/** @internal */
export const ResponseBodyError$inboundSchema: z.ZodType<
  ResponseBodyError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type ResponseBodyError$Outbound = {
  message: string;
};

/** @internal */
export const ResponseBodyError$outboundSchema: z.ZodType<
  ResponseBodyError$Outbound,
  z.ZodTypeDef,
  ResponseBodyError
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyError$ {
  /** @deprecated use `ResponseBodyError$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyError$inboundSchema;
  /** @deprecated use `ResponseBodyError$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyError$outboundSchema;
  /** @deprecated use `ResponseBodyError$Outbound` instead. */
  export type Outbound = ResponseBodyError$Outbound;
}

export function responseBodyErrorToJSON(
  responseBodyError: ResponseBodyError,
): string {
  return JSON.stringify(
    ResponseBodyError$outboundSchema.parse(responseBodyError),
  );
}

export function responseBodyErrorFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyError' from JSON`,
  );
}

/** @internal */
export const ResponseBody2$inboundSchema: z.ZodType<
  ResponseBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => ResponseBodyError$inboundSchema),
});

/** @internal */
export type ResponseBody2$Outbound = {
  error: ResponseBodyError$Outbound;
};

/** @internal */
export const ResponseBody2$outboundSchema: z.ZodType<
  ResponseBody2$Outbound,
  z.ZodTypeDef,
  ResponseBody2
> = z.object({
  error: z.lazy(() => ResponseBodyError$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBody2$ {
  /** @deprecated use `ResponseBody2$inboundSchema` instead. */
  export const inboundSchema = ResponseBody2$inboundSchema;
  /** @deprecated use `ResponseBody2$outboundSchema` instead. */
  export const outboundSchema = ResponseBody2$outboundSchema;
  /** @deprecated use `ResponseBody2$Outbound` instead. */
  export type Outbound = ResponseBody2$Outbound;
}

export function responseBody2ToJSON(responseBody2: ResponseBody2): string {
  return JSON.stringify(ResponseBody2$outboundSchema.parse(responseBody2));
}

export function responseBody2FromJSON(
  jsonString: string,
): SafeParseResult<ResponseBody2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBody2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBody2' from JSON`,
  );
}

/** @internal */
export const ResponseBody1$inboundSchema: z.ZodType<
  ResponseBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  size: z.number(),
  taskDurationMs: z.number(),
  tag: z.string().optional(),
});

/** @internal */
export type ResponseBody1$Outbound = {
  size: number;
  taskDurationMs: number;
  tag?: string | undefined;
};

/** @internal */
export const ResponseBody1$outboundSchema: z.ZodType<
  ResponseBody1$Outbound,
  z.ZodTypeDef,
  ResponseBody1
> = z.object({
  size: z.number(),
  taskDurationMs: z.number(),
  tag: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBody1$ {
  /** @deprecated use `ResponseBody1$inboundSchema` instead. */
  export const inboundSchema = ResponseBody1$inboundSchema;
  /** @deprecated use `ResponseBody1$outboundSchema` instead. */
  export const outboundSchema = ResponseBody1$outboundSchema;
  /** @deprecated use `ResponseBody1$Outbound` instead. */
  export type Outbound = ResponseBody1$Outbound;
}

export function responseBody1ToJSON(responseBody1: ResponseBody1): string {
  return JSON.stringify(ResponseBody1$outboundSchema.parse(responseBody1));
}

export function responseBody1FromJSON(
  jsonString: string,
): SafeParseResult<ResponseBody1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBody1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBody1' from JSON`,
  );
}

/** @internal */
export const ResponseBody$inboundSchema: z.ZodType<
  ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ResponseBody1$inboundSchema),
  z.lazy(() => ResponseBody2$inboundSchema),
]);

/** @internal */
export type ResponseBody$Outbound =
  | ResponseBody1$Outbound
  | ResponseBody2$Outbound;

/** @internal */
export const ResponseBody$outboundSchema: z.ZodType<
  ResponseBody$Outbound,
  z.ZodTypeDef,
  ResponseBody
> = z.union([
  z.lazy(() => ResponseBody1$outboundSchema),
  z.lazy(() => ResponseBody2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBody$ {
  /** @deprecated use `ResponseBody$inboundSchema` instead. */
  export const inboundSchema = ResponseBody$inboundSchema;
  /** @deprecated use `ResponseBody$outboundSchema` instead. */
  export const outboundSchema = ResponseBody$outboundSchema;
  /** @deprecated use `ResponseBody$Outbound` instead. */
  export type Outbound = ResponseBody$Outbound;
}

export function responseBodyToJSON(responseBody: ResponseBody): string {
  return JSON.stringify(ResponseBody$outboundSchema.parse(responseBody));
}

export function responseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBody' from JSON`,
  );
}
