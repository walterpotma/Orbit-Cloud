/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ACLAction,
  ACLAction$inboundSchema,
  ACLAction$outboundSchema,
} from "./aclaction.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export const Target2 = {
  Production: "production",
  Preview: "preview",
  Development: "development",
} as const;
export type Target2 = ClosedEnum<typeof Target2>;

export const Target1 = {
  Production: "production",
  Preview: "preview",
  Development: "development",
} as const;
export type Target1 = ClosedEnum<typeof Target1>;

/**
 * Deployment Target or Targets in which the ENV variable will be used
 */
export type CreateProjectTarget = Target1 | Array<Target2>;

/**
 * Type of the ENV variable
 */
export const CreateProjectType = {
  System: "system",
  Secret: "secret",
  Encrypted: "encrypted",
  Plain: "plain",
  Sensitive: "sensitive",
} as const;
/**
 * Type of the ENV variable
 */
export type CreateProjectType = ClosedEnum<typeof CreateProjectType>;

export type EnvironmentVariables = {
  /**
   * Name of the ENV variable
   */
  key: string;
  /**
   * Deployment Target or Targets in which the ENV variable will be used
   */
  target: Target1 | Array<Target2>;
  /**
   * If defined, the git branch of the environment variable (must have target=preview)
   */
  gitBranch?: string | undefined;
  /**
   * Type of the ENV variable
   */
  type?: CreateProjectType | undefined;
  /**
   * Value for the ENV variable
   */
  value: string;
};

/**
 * The framework that is being used for this project. When `null` is used no framework is selected
 */
export const CreateProjectFramework = {
  Blitzjs: "blitzjs",
  Nextjs: "nextjs",
  Gatsby: "gatsby",
  Remix: "remix",
  ReactRouter: "react-router",
  Astro: "astro",
  Hexo: "hexo",
  Eleventy: "eleventy",
  Docusaurus2: "docusaurus-2",
  Docusaurus: "docusaurus",
  Preact: "preact",
  Solidstart1: "solidstart-1",
  Solidstart: "solidstart",
  Dojo: "dojo",
  Ember: "ember",
  Vue: "vue",
  Scully: "scully",
  IonicAngular: "ionic-angular",
  Angular: "angular",
  Polymer: "polymer",
  Svelte: "svelte",
  Sveltekit: "sveltekit",
  Sveltekit1: "sveltekit-1",
  IonicReact: "ionic-react",
  CreateReactApp: "create-react-app",
  Gridsome: "gridsome",
  Umijs: "umijs",
  Sapper: "sapper",
  Saber: "saber",
  Stencil: "stencil",
  Nuxtjs: "nuxtjs",
  Redwoodjs: "redwoodjs",
  Hugo: "hugo",
  Jekyll: "jekyll",
  Brunch: "brunch",
  Middleman: "middleman",
  Zola: "zola",
  Hydrogen: "hydrogen",
  Vite: "vite",
  Vitepress: "vitepress",
  Vuepress: "vuepress",
  Parcel: "parcel",
  Fastapi: "fastapi",
  Fasthtml: "fasthtml",
  SanityV3: "sanity-v3",
  Sanity: "sanity",
  Storybook: "storybook",
  Nitro: "nitro",
  Hono: "hono",
  Express: "express",
  Xmcp: "xmcp",
} as const;
/**
 * The framework that is being used for this project. When `null` is used no framework is selected
 */
export type CreateProjectFramework = ClosedEnum<typeof CreateProjectFramework>;

/**
 * The Git Provider of the repository
 */
export const CreateProjectProjectsType = {
  Github: "github",
  GithubLimited: "github-limited",
  Gitlab: "gitlab",
  Bitbucket: "bitbucket",
} as const;
/**
 * The Git Provider of the repository
 */
export type CreateProjectProjectsType = ClosedEnum<
  typeof CreateProjectProjectsType
>;

/**
 * The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed
 */
export type GitRepository = {
  /**
   * The name of the git repository. For example: \"vercel/next.js\"
   */
  repo: string;
  /**
   * The Git Provider of the repository
   */
  type: CreateProjectProjectsType;
};

export const CreateProjectDeploymentType = {
  All: "all",
  Preview: "preview",
  ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews",
  AllExceptCustomDomains: "all_except_custom_domains",
} as const;
export type CreateProjectDeploymentType = ClosedEnum<
  typeof CreateProjectDeploymentType
>;

/**
 * The Vercel Auth setting for the project (historically named \"SSO Protection\")
 */
export type CreateProjectSsoProtection = {
  deploymentType: CreateProjectDeploymentType;
};

/**
 * team: `https://oidc.vercel.com/[team_slug]` global: `https://oidc.vercel.com`
 */
export const IssuerMode = {
  Team: "team",
  Global: "global",
} as const;
/**
 * team: `https://oidc.vercel.com/[team_slug]` global: `https://oidc.vercel.com`
 */
export type IssuerMode = ClosedEnum<typeof IssuerMode>;

/**
 * OpenID Connect JSON Web Token generation configuration.
 */
export type OidcTokenConfig = {
  /**
   * Whether or not to generate OpenID Connect JSON Web Tokens.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  enabled?: boolean | undefined;
  /**
   * team: `https://oidc.vercel.com/[team_slug]` global: `https://oidc.vercel.com`
   */
  issuerMode?: IssuerMode | undefined;
};

export const FunctionDefaultMemoryType = {
  StandardLegacy: "standard_legacy",
  Standard: "standard",
  Performance: "performance",
} as const;
export type FunctionDefaultMemoryType = ClosedEnum<
  typeof FunctionDefaultMemoryType
>;

export const BuildMachineType = {
  Enhanced: "enhanced",
  Turbo: "turbo",
} as const;
export type BuildMachineType = ClosedEnum<typeof BuildMachineType>;

/**
 * Specifies resource override configuration for the project
 */
export type CreateProjectResourceConfig = {
  fluid?: boolean | undefined;
  /**
   * The regions to deploy Vercel Functions to for this project
   */
  functionDefaultRegions?: Array<string> | undefined;
  functionDefaultTimeout?: number | undefined;
  functionDefaultMemoryType?: FunctionDefaultMemoryType | undefined;
  /**
   * Specifies whether Zero Config Failover is enabled for this project.
   */
  functionZeroConfigFailover?: boolean | undefined;
  elasticConcurrencyEnabled?: boolean | undefined;
  buildMachineType?: BuildMachineType | undefined;
  isNSNBDisabled?: boolean | undefined;
};

export type CreateProjectRequestBody = {
  /**
   * Opt-in to preview toolbar on the project level
   */
  enablePreviewFeedback?: boolean | null | undefined;
  /**
   * Opt-in to production toolbar on the project level
   */
  enableProductionFeedback?: boolean | null | undefined;
  /**
   * Specifies whether preview deployments are disabled for this project.
   */
  previewDeploymentsDisabled?: boolean | null | undefined;
  /**
   * The build command for this project. When `null` is used this value will be automatically detected
   */
  buildCommand?: string | null | undefined;
  commandForIgnoringBuildStep?: string | null | undefined;
  /**
   * The dev command for this project. When `null` is used this value will be automatically detected
   */
  devCommand?: string | null | undefined;
  /**
   * Collection of ENV Variables the Project will use
   */
  environmentVariables?: Array<EnvironmentVariables> | undefined;
  /**
   * The framework that is being used for this project. When `null` is used no framework is selected
   */
  framework?: CreateProjectFramework | undefined;
  /**
   * The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed
   */
  gitRepository?: GitRepository | undefined;
  /**
   * The install command for this project. When `null` is used this value will be automatically detected
   */
  installCommand?: string | null | undefined;
  /**
   * The desired name for the project
   */
  name: string;
  /**
   * Opts-out of the message prompting a CLI user to connect a Git repository in `vercel link`.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  skipGitConnectDuringLink?: boolean | undefined;
  /**
   * The Vercel Auth setting for the project (historically named \"SSO Protection\")
   */
  ssoProtection?: CreateProjectSsoProtection | null | undefined;
  /**
   * The output directory of the project. When `null` is used this value will be automatically detected
   */
  outputDirectory?: string | null | undefined;
  /**
   * Specifies whether the source code and logs of the deployments for this project should be public or not
   */
  publicSource?: boolean | null | undefined;
  /**
   * The name of a directory or relative path to the source code of your project. When `null` is used it will default to the project root
   */
  rootDirectory?: string | null | undefined;
  /**
   * The region to deploy Serverless Functions in this project
   */
  serverlessFunctionRegion?: string | null | undefined;
  /**
   * Specifies whether Zero Config Failover is enabled for this project.
   */
  serverlessFunctionZeroConfigFailover?: boolean | undefined;
  /**
   * OpenID Connect JSON Web Token generation configuration.
   */
  oidcTokenConfig?: OidcTokenConfig | undefined;
  /**
   * Opt-in to skip deployments when there are no changes to the root directory and its dependencies
   */
  enableAffectedProjectsDeployments?: boolean | undefined;
  /**
   * Specifies resource override configuration for the project
   */
  resourceConfig?: CreateProjectResourceConfig | undefined;
};

export type CreateProjectRequest = {
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
  requestBody?: CreateProjectRequestBody | undefined;
};

export type CreateProjectAnalytics = {
  id: string;
  canceledAt?: number | null | undefined;
  disabledAt: number;
  enabledAt: number;
  paidAt?: number | undefined;
  sampleRatePercent?: number | null | undefined;
  spendLimitInDollars?: number | null | undefined;
};

export type CreateProjectSpeedInsights = {
  id: string;
  enabledAt?: number | undefined;
  disabledAt?: number | undefined;
  canceledAt?: number | undefined;
  hasData?: boolean | undefined;
  paidAt?: number | undefined;
};

export const CreateProjectEnvId2 = {
  Preview: "preview",
  Production: "production",
} as const;
export type CreateProjectEnvId2 = ClosedEnum<typeof CreateProjectEnvId2>;

export type CreateProjectEnvId = string | CreateProjectEnvId2;

export type CreateProjectAws = {
  subnetIds: Array<string>;
  securityGroupId: string;
};

export type CreateProjectConnectConfigurations = {
  envId: string | CreateProjectEnvId2;
  connectConfigurationId: string;
  dc?: string | undefined;
  passive: boolean;
  buildsEnabled: boolean;
  aws?: CreateProjectAws | undefined;
  createdAt: number;
  updatedAt: number;
};

export type CreateProjectDefinitions = {
  /**
   * The hostname that should be used.
   */
  host: string;
  /**
   * The path that should be called for the cronjob.
   */
  path: string;
  /**
   * The cron expression.
   */
  schedule: string;
};

export type CreateProjectCrons = {
  /**
   * The time the feature was enabled for this project. Note: It enables automatically with the first Deployment that outputs cronjobs.
   */
  enabledAt: number;
  /**
   * The time the feature was disabled for this project.
   */
  disabledAt: number | null;
  updatedAt: number;
  /**
   * The ID of the Deployment from which the definitions originated.
   */
  deploymentId: string | null;
  definitions: Array<CreateProjectDefinitions>;
};

export type CreateProjectDataCache = {
  userDisabled: boolean;
  storageSizeBytes?: number | null | undefined;
  unlimited?: boolean | undefined;
};

/**
 * Retention policies for deployments. These are enforced at the project level, but we also maintain an instance of this at the team level as a default policy that gets applied to new projects.
 */
export type CreateProjectDeploymentExpiration = {
  /**
   * Number of days to keep non-production deployments (mostly preview deployments) before soft deletion.
   */
  expirationDays?: number | undefined;
  /**
   * Number of days to keep production deployments before soft deletion.
   */
  expirationDaysProduction?: number | undefined;
  /**
   * Number of days to keep canceled deployments before soft deletion.
   */
  expirationDaysCanceled?: number | undefined;
  /**
   * Number of days to keep errored deployments before soft deletion.
   */
  expirationDaysErrored?: number | undefined;
  /**
   * Minimum number of production deployments to keep for this project, even if they are over the production expiration limit.
   */
  deploymentsToKeep?: number | undefined;
};

export const CreateProjectTarget2 = {
  Production: "production",
  Preview: "preview",
  Development: "development",
} as const;
export type CreateProjectTarget2 = ClosedEnum<typeof CreateProjectTarget2>;

export const CreateProjectTarget1 = {
  Production: "production",
  Preview: "preview",
  Development: "development",
} as const;
export type CreateProjectTarget1 = ClosedEnum<typeof CreateProjectTarget1>;

export type CreateProjectProjectsTarget =
  | Array<CreateProjectTarget1>
  | CreateProjectTarget2;

export const CreateProjectProjectsResponseType = {
  System: "system",
  Encrypted: "encrypted",
  Plain: "plain",
  Sensitive: "sensitive",
  Secret: "secret",
} as const;
export type CreateProjectProjectsResponseType = ClosedEnum<
  typeof CreateProjectProjectsResponseType
>;

export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type =
  {
    FlagsConnectionString: "flags-connection-string",
  } as const;
export type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type =
  ClosedEnum<
    typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type
  >;

export type CreateProjectContentHint15 = {
  type:
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type;
  projectId: string;
};

export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type =
  {
    IntegrationStoreSecret: "integration-store-secret",
  } as const;
export type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type =
  ClosedEnum<
    typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type
  >;

export type CreateProjectContentHint14 = {
  type:
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type;
  storeId: string;
  integrationId: string;
  integrationProductId: string;
  integrationConfigurationId: string;
};

export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type =
  {
    PostgresUrlNoSsl: "postgres-url-no-ssl",
  } as const;
export type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type =
  ClosedEnum<
    typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type
  >;

export type CreateProjectContentHint13 = {
  type:
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type;
  storeId: string;
};

export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type =
  {
    PostgresDatabase: "postgres-database",
  } as const;
export type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type =
  ClosedEnum<
    typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type
  >;

export type CreateProjectContentHint12 = {
  type:
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type;
  storeId: string;
};

export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type =
  {
    PostgresPassword: "postgres-password",
  } as const;
export type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type =
  ClosedEnum<
    typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type
  >;

export type CreateProjectContentHint11 = {
  type:
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type;
  storeId: string;
};

export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type =
  {
    PostgresHost: "postgres-host",
  } as const;
export type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type =
  ClosedEnum<
    typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type
  >;

export type CreateProjectContentHint10 = {
  type:
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type;
  storeId: string;
};

export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type =
  {
    PostgresUser: "postgres-user",
  } as const;
export type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type =
  ClosedEnum<
    typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type
  >;

export type CreateProjectContentHint9 = {
  type:
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type;
  storeId: string;
};

export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type =
  {
    PostgresPrismaUrl: "postgres-prisma-url",
  } as const;
export type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type =
  ClosedEnum<
    typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type
  >;

export type CreateProjectContentHint8 = {
  type:
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type;
  storeId: string;
};

export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType =
  {
    PostgresUrlNonPooling: "postgres-url-non-pooling",
  } as const;
export type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType =
  ClosedEnum<
    typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType
  >;

export type CreateProjectContentHint7 = {
  type:
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType;
  storeId: string;
};

export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType =
  {
    PostgresUrl: "postgres-url",
  } as const;
export type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType
  >;

export type CreateProjectContentHint6 = {
  type:
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType;
  storeId: string;
};

export const CreateProjectContentHintProjectsResponse200ApplicationJSONType = {
  BlobReadWriteToken: "blob-read-write-token",
} as const;
export type CreateProjectContentHintProjectsResponse200ApplicationJSONType =
  ClosedEnum<
    typeof CreateProjectContentHintProjectsResponse200ApplicationJSONType
  >;

export type CreateProjectContentHint5 = {
  type: CreateProjectContentHintProjectsResponse200ApplicationJSONType;
  storeId: string;
};

export const CreateProjectContentHintProjectsResponse200Type = {
  RedisRestApiReadOnlyToken: "redis-rest-api-read-only-token",
} as const;
export type CreateProjectContentHintProjectsResponse200Type = ClosedEnum<
  typeof CreateProjectContentHintProjectsResponse200Type
>;

export type CreateProjectContentHint4 = {
  type: CreateProjectContentHintProjectsResponse200Type;
  storeId: string;
};

export const CreateProjectContentHintProjectsResponseType = {
  RedisRestApiToken: "redis-rest-api-token",
} as const;
export type CreateProjectContentHintProjectsResponseType = ClosedEnum<
  typeof CreateProjectContentHintProjectsResponseType
>;

export type CreateProjectContentHint3 = {
  type: CreateProjectContentHintProjectsResponseType;
  storeId: string;
};

export const CreateProjectContentHintProjectsType = {
  RedisRestApiUrl: "redis-rest-api-url",
} as const;
export type CreateProjectContentHintProjectsType = ClosedEnum<
  typeof CreateProjectContentHintProjectsType
>;

export type CreateProjectContentHint2 = {
  type: CreateProjectContentHintProjectsType;
  storeId: string;
};

export const CreateProjectContentHintType = {
  RedisUrl: "redis-url",
} as const;
export type CreateProjectContentHintType = ClosedEnum<
  typeof CreateProjectContentHintType
>;

export type CreateProjectContentHint1 = {
  type: CreateProjectContentHintType;
  storeId: string;
};

export type CreateProjectContentHint =
  | CreateProjectContentHint14
  | CreateProjectContentHint1
  | CreateProjectContentHint2
  | CreateProjectContentHint3
  | CreateProjectContentHint4
  | CreateProjectContentHint5
  | CreateProjectContentHint6
  | CreateProjectContentHint7
  | CreateProjectContentHint8
  | CreateProjectContentHint9
  | CreateProjectContentHint10
  | CreateProjectContentHint11
  | CreateProjectContentHint12
  | CreateProjectContentHint13
  | CreateProjectContentHint15;

export const CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType =
  {
    FlagsSecret: "flags-secret",
  } as const;
export type CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType =
  ClosedEnum<
    typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType
  >;

/**
 * Similar to `contentHints`, but should not be exposed to the user.
 */
export type CreateProjectInternalContentHint = {
  type: CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType;
  /**
   * Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
   */
  encryptedValue: string;
};

export type CreateProjectEnv = {
  target?: Array<CreateProjectTarget1> | CreateProjectTarget2 | undefined;
  type: CreateProjectProjectsResponseType;
  /**
   * This is used to identiy variables that have been migrated from type secret to sensitive.
   */
  sunsetSecretId?: string | undefined;
  decrypted?: boolean | undefined;
  value: string;
  vsmValue?: string | undefined;
  id?: string | undefined;
  key: string;
  configurationId?: string | null | undefined;
  createdAt?: number | undefined;
  updatedAt?: number | undefined;
  createdBy?: string | null | undefined;
  updatedBy?: string | null | undefined;
  gitBranch?: string | undefined;
  edgeConfigId?: string | null | undefined;
  edgeConfigTokenId?: string | null | undefined;
  contentHint?:
    | CreateProjectContentHint14
    | CreateProjectContentHint1
    | CreateProjectContentHint2
    | CreateProjectContentHint3
    | CreateProjectContentHint4
    | CreateProjectContentHint5
    | CreateProjectContentHint6
    | CreateProjectContentHint7
    | CreateProjectContentHint8
    | CreateProjectContentHint9
    | CreateProjectContentHint10
    | CreateProjectContentHint11
    | CreateProjectContentHint12
    | CreateProjectContentHint13
    | CreateProjectContentHint15
    | null
    | undefined;
  /**
   * Similar to `contentHints`, but should not be exposed to the user.
   */
  internalContentHint?: CreateProjectInternalContentHint | null | undefined;
  comment?: string | undefined;
  customEnvironmentIds?: Array<string> | undefined;
};

/**
 * The type of environment (production, preview, or development)
 */
export const CreateProjectProjectsResponse200Type = {
  Preview: "preview",
  Production: "production",
  Development: "development",
} as const;
/**
 * The type of environment (production, preview, or development)
 */
export type CreateProjectProjectsResponse200Type = ClosedEnum<
  typeof CreateProjectProjectsResponse200Type
>;

/**
 * The type of matching to perform
 */
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType =
  {
    EndsWith: "endsWith",
    StartsWith: "startsWith",
    Equals: "equals",
  } as const;
/**
 * The type of matching to perform
 */
export type CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType =
  ClosedEnum<
    typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType
  >;

/**
 * Configuration for matching git branches to this environment
 */
export type CreateProjectBranchMatcher = {
  /**
   * The type of matching to perform
   */
  type:
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType;
  /**
   * The pattern to match against branch names
   */
  pattern: string;
};

/**
 * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
 */
export type CreateProjectVerification = {
  type: string;
  domain: string;
  value: string;
  reason: string;
};

/**
 * List of domains associated with this environment
 */
export type CreateProjectDomains = {
  name: string;
  apexName: string;
  projectId: string;
  redirect?: string | null | undefined;
  redirectStatusCode?: number | null | undefined;
  gitBranch?: string | null | undefined;
  customEnvironmentId?: string | null | undefined;
  updatedAt?: number | undefined;
  createdAt?: number | undefined;
  /**
   * `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.
   */
  verified: boolean;
  /**
   * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
   */
  verification?: Array<CreateProjectVerification> | undefined;
};

/**
 * Internal representation of a custom environment with all required properties
 */
export type CreateProjectCustomEnvironments = {
  /**
   * Unique identifier for the custom environment (format: env_*)
   */
  id: string;
  /**
   * URL-friendly name of the environment
   */
  slug: string;
  /**
   * The type of environment (production, preview, or development)
   */
  type: CreateProjectProjectsResponse200Type;
  /**
   * Optional description of the environment's purpose
   */
  description?: string | undefined;
  /**
   * Configuration for matching git branches to this environment
   */
  branchMatcher?: CreateProjectBranchMatcher | undefined;
  /**
   * List of domains associated with this environment
   */
  domains?: Array<CreateProjectDomains> | undefined;
  /**
   * List of aliases for the current deployment
   */
  currentDeploymentAliases?: Array<string> | undefined;
  /**
   * Timestamp when the environment was created
   */
  createdAt: number;
  /**
   * Timestamp when the environment was last updated
   */
  updatedAt: number;
};

export const CreateProjectProjectsFramework = {
  Blitzjs: "blitzjs",
  Nextjs: "nextjs",
  Gatsby: "gatsby",
  Remix: "remix",
  ReactRouter: "react-router",
  Astro: "astro",
  Hexo: "hexo",
  Eleventy: "eleventy",
  Docusaurus2: "docusaurus-2",
  Docusaurus: "docusaurus",
  Preact: "preact",
  Solidstart1: "solidstart-1",
  Solidstart: "solidstart",
  Dojo: "dojo",
  Ember: "ember",
  Vue: "vue",
  Scully: "scully",
  IonicAngular: "ionic-angular",
  Angular: "angular",
  Polymer: "polymer",
  Svelte: "svelte",
  Sveltekit: "sveltekit",
  Sveltekit1: "sveltekit-1",
  IonicReact: "ionic-react",
  CreateReactApp: "create-react-app",
  Gridsome: "gridsome",
  Umijs: "umijs",
  Sapper: "sapper",
  Saber: "saber",
  Stencil: "stencil",
  Nuxtjs: "nuxtjs",
  Redwoodjs: "redwoodjs",
  Hugo: "hugo",
  Jekyll: "jekyll",
  Brunch: "brunch",
  Middleman: "middleman",
  Zola: "zola",
  Hydrogen: "hydrogen",
  Vite: "vite",
  Vitepress: "vitepress",
  Vuepress: "vuepress",
  Parcel: "parcel",
  Fastapi: "fastapi",
  Fasthtml: "fasthtml",
  SanityV3: "sanity-v3",
  Sanity: "sanity",
  Storybook: "storybook",
  Nitro: "nitro",
  Hono: "hono",
  Express: "express",
  Xmcp: "xmcp",
} as const;
export type CreateProjectProjectsFramework = ClosedEnum<
  typeof CreateProjectProjectsFramework
>;

export type CreateProjectIpBuckets = {
  bucket: string;
  supportUntil?: number | undefined;
};

export type CreateProjectAliasAssigned = number | boolean;

export type CreateProjectAliasError = {
  code: string;
  message: string;
};

/**
 * The type of matching to perform
 */
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType =
  {
    EndsWith: "endsWith",
    StartsWith: "startsWith",
    Equals: "equals",
  } as const;
/**
 * The type of matching to perform
 */
export type CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType =
  ClosedEnum<
    typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType
  >;

export type CreateProjectProjectsBranchMatcher = {
  /**
   * The type of matching to perform
   */
  type:
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType;
  /**
   * The pattern to match against branch names
   */
  pattern: string;
};

export type CreateProjectBuilds = {
  use: string;
  src?: string | undefined;
  dest?: string | undefined;
};

export const CreateProjectChecksConclusion = {
  Succeeded: "succeeded",
  Failed: "failed",
  Skipped: "skipped",
  Canceled: "canceled",
} as const;
export type CreateProjectChecksConclusion = ClosedEnum<
  typeof CreateProjectChecksConclusion
>;

export const CreateProjectChecksState = {
  Registered: "registered",
  Running: "running",
  Completed: "completed",
} as const;
export type CreateProjectChecksState = ClosedEnum<
  typeof CreateProjectChecksState
>;

export type CreateProjectCreator = {
  email: string;
  githubLogin?: string | undefined;
  gitlabLogin?: string | undefined;
  uid: string;
  username: string;
};

export type CreateProjectOidcTokenClaims = {
  iss: string;
  sub: string;
  scope: string;
  aud: string;
  owner: string;
  ownerId: string;
  project: string;
  projectId: string;
  environment: string;
};

export const CreateProjectPlan = {
  Pro: "pro",
  Enterprise: "enterprise",
  Hobby: "hobby",
} as const;
export type CreateProjectPlan = ClosedEnum<typeof CreateProjectPlan>;

export const CreateProjectReadyState = {
  Building: "BUILDING",
  Error: "ERROR",
  Initializing: "INITIALIZING",
  Queued: "QUEUED",
  Ready: "READY",
  Canceled: "CANCELED",
} as const;
export type CreateProjectReadyState = ClosedEnum<
  typeof CreateProjectReadyState
>;

export const CreateProjectReadySubstate = {
  Staged: "STAGED",
  Rolling: "ROLLING",
  Promoted: "PROMOTED",
} as const;
export type CreateProjectReadySubstate = ClosedEnum<
  typeof CreateProjectReadySubstate
>;

export const CreateProjectProjectsResponse200ApplicationJSONType = {
  Lambdas: "LAMBDAS",
} as const;
export type CreateProjectProjectsResponse200ApplicationJSONType = ClosedEnum<
  typeof CreateProjectProjectsResponse200ApplicationJSONType
>;

export type CreateProjectLatestDeployments = {
  id: string;
  alias?: Array<string> | undefined;
  aliasAssigned?: number | boolean | null | undefined;
  aliasError?: CreateProjectAliasError | null | undefined;
  aliasFinal?: string | null | undefined;
  automaticAliases?: Array<string> | undefined;
  branchMatcher?: CreateProjectProjectsBranchMatcher | undefined;
  buildingAt?: number | undefined;
  builds?: Array<CreateProjectBuilds> | undefined;
  checksConclusion?: CreateProjectChecksConclusion | undefined;
  checksState?: CreateProjectChecksState | undefined;
  connectBuildsEnabled?: boolean | undefined;
  connectConfigurationId?: string | undefined;
  createdAt: number;
  createdIn: string;
  creator: CreateProjectCreator | null;
  deletedAt?: number | undefined;
  deploymentHostname: string;
  forced?: boolean | undefined;
  name: string;
  meta?: { [k: string]: string } | undefined;
  monorepoManager?: string | null | undefined;
  oidcTokenClaims?: CreateProjectOidcTokenClaims | undefined;
  plan: CreateProjectPlan;
  /**
   * Whether or not preview comments are enabled for the deployment
   */
  previewCommentsEnabled?: boolean | undefined;
  private: boolean;
  readyAt?: number | undefined;
  readyState: CreateProjectReadyState;
  readySubstate?: CreateProjectReadySubstate | undefined;
  requestedAt?: number | undefined;
  target?: string | null | undefined;
  teamId?: string | null | undefined;
  type: CreateProjectProjectsResponse200ApplicationJSONType;
  url: string;
  userId: string;
  withCache?: boolean | undefined;
};

export const CreateProjectLinkProjectsResponse200ApplicationJSONType = {
  Bitbucket: "bitbucket",
} as const;
export type CreateProjectLinkProjectsResponse200ApplicationJSONType =
  ClosedEnum<typeof CreateProjectLinkProjectsResponse200ApplicationJSONType>;

export type CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks = {
  createdAt?: number | undefined;
  id: string;
  name: string;
  ref: string;
  url: string;
};

export type CreateProjectLink5 = {
  name: string;
  slug: string;
  owner: string;
  type: CreateProjectLinkProjectsResponse200ApplicationJSONType;
  uuid: string;
  workspaceUuid: string;
  createdAt?: number | undefined;
  deployHooks: Array<
    CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks
  >;
  gitCredentialId: string;
  updatedAt?: number | undefined;
  sourceless?: boolean | undefined;
  productionBranch: string;
};

export const CreateProjectLinkProjectsResponse200Type = {
  Gitlab: "gitlab",
} as const;
export type CreateProjectLinkProjectsResponse200Type = ClosedEnum<
  typeof CreateProjectLinkProjectsResponse200Type
>;

export type CreateProjectLinkProjectsResponse200DeployHooks = {
  createdAt?: number | undefined;
  id: string;
  name: string;
  ref: string;
  url: string;
};

export type CreateProjectLink4 = {
  projectId: string;
  projectName: string;
  projectNameWithNamespace: string;
  projectNamespace: string;
  /**
   * A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes. This is the id of the top level group that a namespace belongs to. Gitlab supports group nesting (up to 20 levels).
   */
  projectOwnerId?: number | undefined;
  projectUrl: string;
  type: CreateProjectLinkProjectsResponse200Type;
  createdAt?: number | undefined;
  deployHooks: Array<CreateProjectLinkProjectsResponse200DeployHooks>;
  gitCredentialId: string;
  updatedAt?: number | undefined;
  sourceless?: boolean | undefined;
  productionBranch: string;
};

export const CreateProjectLinkProjectsResponseType = {
  GithubCustomHost: "github-custom-host",
} as const;
export type CreateProjectLinkProjectsResponseType = ClosedEnum<
  typeof CreateProjectLinkProjectsResponseType
>;

export type CreateProjectLinkProjectsResponseDeployHooks = {
  createdAt?: number | undefined;
  id: string;
  name: string;
  ref: string;
  url: string;
};

export type CreateProjectLink3 = {
  org: string;
  /**
   * A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes.
   */
  repoOwnerId?: number | undefined;
  repo?: string | undefined;
  repoId?: number | undefined;
  type: CreateProjectLinkProjectsResponseType;
  host: string;
  createdAt?: number | undefined;
  deployHooks: Array<CreateProjectLinkProjectsResponseDeployHooks>;
  gitCredentialId: string;
  updatedAt?: number | undefined;
  sourceless?: boolean | undefined;
  productionBranch: string;
};

export const CreateProjectLinkProjectsType = {
  GithubLimited: "github-limited",
} as const;
export type CreateProjectLinkProjectsType = ClosedEnum<
  typeof CreateProjectLinkProjectsType
>;

export type CreateProjectLinkProjectsDeployHooks = {
  createdAt?: number | undefined;
  id: string;
  name: string;
  ref: string;
  url: string;
};

export type CreateProjectLink2 = {
  type: CreateProjectLinkProjectsType;
  repo?: string | undefined;
  repoId?: number | undefined;
  updatedAt?: number | undefined;
  createdAt?: number | undefined;
  org: string;
  /**
   * A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes.
   */
  repoOwnerId?: number | undefined;
  deployHooks: Array<CreateProjectLinkProjectsDeployHooks>;
  gitCredentialId: string;
  sourceless?: boolean | undefined;
  productionBranch: string;
};

export const CreateProjectLinkType = {
  Github: "github",
} as const;
export type CreateProjectLinkType = ClosedEnum<typeof CreateProjectLinkType>;

export type CreateProjectLinkDeployHooks = {
  createdAt?: number | undefined;
  id: string;
  name: string;
  ref: string;
  url: string;
};

export type CreateProjectLink1 = {
  org: string;
  /**
   * A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes.
   */
  repoOwnerId?: number | undefined;
  repo?: string | undefined;
  repoId?: number | undefined;
  type: CreateProjectLinkType;
  createdAt?: number | undefined;
  deployHooks: Array<CreateProjectLinkDeployHooks>;
  gitCredentialId: string;
  updatedAt?: number | undefined;
  sourceless?: boolean | undefined;
  productionBranch: string;
};

export type CreateProjectLink =
  | CreateProjectLink4
  | CreateProjectLink5
  | CreateProjectLink3
  | CreateProjectLink1
  | CreateProjectLink2;

export type CreateProjectMicrofrontends2 = {
  updatedAt: number;
  groupIds: Array<any>;
  enabled: boolean;
};

export type CreateProjectMicrofrontends1 = {
  /**
   * Timestamp when the microfrontends settings were last updated.
   */
  updatedAt: number;
  /**
   * The group IDs of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together.
   */
  groupIds: Array<string>;
  /**
   * Whether microfrontends are enabled for this project.
   */
  enabled: boolean;
  /**
   * Whether this project is the default application for the microfrontends group. The default application is the one that is used as the top level shell for the microfrontends group and hosts the other microfrontends.
   */
  isDefaultApp?: boolean | undefined;
  /**
   * A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI. Includes the leading slash, e.g. `/docs`
   */
  defaultRoute?: string | undefined;
  /**
   * Whether observability data should be routed to this microfrontend project or a root project.
   */
  routeObservabilityToThisProject?: boolean | undefined;
};

export type CreateProjectMicrofrontends =
  | CreateProjectMicrofrontends1
  | CreateProjectMicrofrontends2;

export const CreateProjectNodeVersion = {
  TwentyTwoDotX: "22.x",
  TwentyDotX: "20.x",
  EighteenDotX: "18.x",
  SixteenDotX: "16.x",
  FourteenDotX: "14.x",
  TwelveDotX: "12.x",
  TenDotX: "10.x",
  EightDot10DotX: "8.10.x",
} as const;
export type CreateProjectNodeVersion = ClosedEnum<
  typeof CreateProjectNodeVersion
>;

export type CreateProjectPaths = {
  value: string;
};

export type CreateProjectOptionsAllowlist = {
  paths: Array<CreateProjectPaths>;
};

export type CreateProjectPasswordProtection = {};

export const CreateProjectFunctionDefaultMemoryType = {
  StandardLegacy: "standard_legacy",
  Standard: "standard",
  Performance: "performance",
} as const;
export type CreateProjectFunctionDefaultMemoryType = ClosedEnum<
  typeof CreateProjectFunctionDefaultMemoryType
>;

export const CreateProjectBuildMachineType = {
  Enhanced: "enhanced",
  Turbo: "turbo",
} as const;
export type CreateProjectBuildMachineType = ClosedEnum<
  typeof CreateProjectBuildMachineType
>;

export type CreateProjectProjectsResourceConfig = {
  elasticConcurrencyEnabled?: boolean | undefined;
  fluid?: boolean | undefined;
  functionDefaultRegions: Array<string>;
  functionDefaultTimeout?: number | undefined;
  functionDefaultMemoryType?:
    | CreateProjectFunctionDefaultMemoryType
    | undefined;
  functionZeroConfigFailover?: boolean | undefined;
  buildMachineType?: CreateProjectBuildMachineType | undefined;
  isNSNBDisabled?: boolean | undefined;
};

/**
 * Description of why a project was rolled back, and by whom. Note that lastAliasRequest contains the from/to details of the rollback.
 */
export type CreateProjectRollbackDescription = {
  /**
   * The user who rolled back the project.
   */
  userId: string;
  /**
   * The username of the user who rolled back the project.
   */
  username: string;
  /**
   * User-supplied explanation of why they rolled back the project. Limited to 250 characters.
   */
  description: string;
  /**
   * Timestamp of when the rollback was requested.
   */
  createdAt: number;
};

/**
 * An array of all the stages required during a deployment release. Each stage defines a target percentage and advancement rules. The final stage must always have targetPercentage: 100.
 */
export type CreateProjectStages = {
  /**
   * The percentage of traffic to serve to the canary deployment (0-100)
   */
  targetPercentage: number;
  /**
   * Whether or not this stage requires manual approval to proceed
   */
  requireApproval?: boolean | undefined;
  /**
   * Duration in minutes for automatic advancement to the next stage
   */
  duration?: number | undefined;
};

/**
 * Project-level rolling release configuration that defines how deployments should be gradually rolled out
 */
export type CreateProjectRollingRelease = {
  /**
   * The environment that the release targets, currently only supports production. Adding in case we want to configure with alias groups or custom environments.
   */
  target: string;
  /**
   * An array of all the stages required during a deployment release. Each stage defines a target percentage and advancement rules. The final stage must always have targetPercentage: 100.
   */
  stages?: Array<CreateProjectStages> | null | undefined;
  /**
   * Whether the request served by a canary deployment should return a header indicating a canary was served. Defaults to `false` when omitted.
   */
  canaryResponseHeader?: boolean | undefined;
};

export const CreateProjectProjectsFunctionDefaultMemoryType = {
  StandardLegacy: "standard_legacy",
  Standard: "standard",
  Performance: "performance",
} as const;
export type CreateProjectProjectsFunctionDefaultMemoryType = ClosedEnum<
  typeof CreateProjectProjectsFunctionDefaultMemoryType
>;

export const CreateProjectProjectsBuildMachineType = {
  Enhanced: "enhanced",
  Turbo: "turbo",
} as const;
export type CreateProjectProjectsBuildMachineType = ClosedEnum<
  typeof CreateProjectProjectsBuildMachineType
>;

export type CreateProjectDefaultResourceConfig = {
  elasticConcurrencyEnabled?: boolean | undefined;
  fluid?: boolean | undefined;
  functionDefaultRegions: Array<string>;
  functionDefaultTimeout?: number | undefined;
  functionDefaultMemoryType?:
    | CreateProjectProjectsFunctionDefaultMemoryType
    | undefined;
  functionZeroConfigFailover?: boolean | undefined;
  buildMachineType?: CreateProjectProjectsBuildMachineType | undefined;
  isNSNBDisabled?: boolean | undefined;
};

export const CreateProjectProjectsDeploymentType = {
  Preview: "preview",
  All: "all",
  ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews",
  AllExceptCustomDomains: "all_except_custom_domains",
} as const;
export type CreateProjectProjectsDeploymentType = ClosedEnum<
  typeof CreateProjectProjectsDeploymentType
>;

export type CreateProjectProjectsSsoProtection = {
  deploymentType: CreateProjectProjectsDeploymentType;
};

export type CreateProjectProjectsAliasAssigned = number | boolean;

export type CreateProjectProjectsAliasError = {
  code: string;
  message: string;
};

/**
 * The type of matching to perform
 */
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType =
  {
    EndsWith: "endsWith",
    StartsWith: "startsWith",
    Equals: "equals",
  } as const;
/**
 * The type of matching to perform
 */
export type CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType =
  ClosedEnum<
    typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType
  >;

export type CreateProjectProjectsResponseBranchMatcher = {
  /**
   * The type of matching to perform
   */
  type: CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType;
  /**
   * The pattern to match against branch names
   */
  pattern: string;
};

export type CreateProjectProjectsBuilds = {
  use: string;
  src?: string | undefined;
  dest?: string | undefined;
};

export const CreateProjectProjectsChecksConclusion = {
  Succeeded: "succeeded",
  Failed: "failed",
  Skipped: "skipped",
  Canceled: "canceled",
} as const;
export type CreateProjectProjectsChecksConclusion = ClosedEnum<
  typeof CreateProjectProjectsChecksConclusion
>;

export const CreateProjectProjectsChecksState = {
  Registered: "registered",
  Running: "running",
  Completed: "completed",
} as const;
export type CreateProjectProjectsChecksState = ClosedEnum<
  typeof CreateProjectProjectsChecksState
>;

export type CreateProjectProjectsCreator = {
  email: string;
  githubLogin?: string | undefined;
  gitlabLogin?: string | undefined;
  uid: string;
  username: string;
};

export type CreateProjectProjectsOidcTokenClaims = {
  iss: string;
  sub: string;
  scope: string;
  aud: string;
  owner: string;
  ownerId: string;
  project: string;
  projectId: string;
  environment: string;
};

export const CreateProjectProjectsPlan = {
  Pro: "pro",
  Enterprise: "enterprise",
  Hobby: "hobby",
} as const;
export type CreateProjectProjectsPlan = ClosedEnum<
  typeof CreateProjectProjectsPlan
>;

export const CreateProjectProjectsReadyState = {
  Building: "BUILDING",
  Error: "ERROR",
  Initializing: "INITIALIZING",
  Queued: "QUEUED",
  Ready: "READY",
  Canceled: "CANCELED",
} as const;
export type CreateProjectProjectsReadyState = ClosedEnum<
  typeof CreateProjectProjectsReadyState
>;

export const CreateProjectProjectsReadySubstate = {
  Staged: "STAGED",
  Rolling: "ROLLING",
  Promoted: "PROMOTED",
} as const;
export type CreateProjectProjectsReadySubstate = ClosedEnum<
  typeof CreateProjectProjectsReadySubstate
>;

export const CreateProjectProjectsResponse200ApplicationJSONResponseBodyType = {
  Lambdas: "LAMBDAS",
} as const;
export type CreateProjectProjectsResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyType
  >;

export type CreateProjectTargets = {
  id: string;
  alias?: Array<string> | undefined;
  aliasAssigned?: number | boolean | null | undefined;
  aliasError?: CreateProjectProjectsAliasError | null | undefined;
  aliasFinal?: string | null | undefined;
  automaticAliases?: Array<string> | undefined;
  branchMatcher?: CreateProjectProjectsResponseBranchMatcher | undefined;
  buildingAt?: number | undefined;
  builds?: Array<CreateProjectProjectsBuilds> | undefined;
  checksConclusion?: CreateProjectProjectsChecksConclusion | undefined;
  checksState?: CreateProjectProjectsChecksState | undefined;
  connectBuildsEnabled?: boolean | undefined;
  connectConfigurationId?: string | undefined;
  createdAt: number;
  createdIn: string;
  creator: CreateProjectProjectsCreator | null;
  deletedAt?: number | undefined;
  deploymentHostname: string;
  forced?: boolean | undefined;
  name: string;
  meta?: { [k: string]: string } | undefined;
  monorepoManager?: string | null | undefined;
  oidcTokenClaims?: CreateProjectProjectsOidcTokenClaims | undefined;
  plan: CreateProjectProjectsPlan;
  /**
   * Whether or not preview comments are enabled for the deployment
   */
  previewCommentsEnabled?: boolean | undefined;
  private: boolean;
  readyAt?: number | undefined;
  readyState: CreateProjectProjectsReadyState;
  readySubstate?: CreateProjectProjectsReadySubstate | undefined;
  requestedAt?: number | undefined;
  target?: string | null | undefined;
  teamId?: string | null | undefined;
  type: CreateProjectProjectsResponse200ApplicationJSONResponseBodyType;
  url: string;
  userId: string;
  withCache?: boolean | undefined;
};

export type CreateProjectPermissions = {
  aliasProject?: Array<ACLAction> | undefined;
  aliasProtectionBypass?: Array<ACLAction> | undefined;
  buildMachine?: Array<ACLAction> | undefined;
  productionAliasProtectionBypass?: Array<ACLAction> | undefined;
  connectConfigurationLink?: Array<ACLAction> | undefined;
  dataCacheNamespace?: Array<ACLAction> | undefined;
  deployment?: Array<ACLAction> | undefined;
  deploymentBuildLogs?: Array<ACLAction> | undefined;
  deploymentCheck?: Array<ACLAction> | undefined;
  deploymentCheckPreview?: Array<ACLAction> | undefined;
  deploymentCheckReRunFromProductionBranch?: Array<ACLAction> | undefined;
  deploymentProductionGit?: Array<ACLAction> | undefined;
  deploymentV0?: Array<ACLAction> | undefined;
  deploymentPreview?: Array<ACLAction> | undefined;
  deploymentPrivate?: Array<ACLAction> | undefined;
  deploymentPromote?: Array<ACLAction> | undefined;
  deploymentRollback?: Array<ACLAction> | undefined;
  edgeCacheNamespace?: Array<ACLAction> | undefined;
  environments?: Array<ACLAction> | undefined;
  logs?: Array<ACLAction> | undefined;
  logsPreset?: Array<ACLAction> | undefined;
  passwordProtection?: Array<ACLAction> | undefined;
  optionsAllowlist?: Array<ACLAction> | undefined;
  job?: Array<ACLAction> | undefined;
  observabilityData?: Array<ACLAction> | undefined;
  onDemandBuild?: Array<ACLAction> | undefined;
  onDemandConcurrency?: Array<ACLAction> | undefined;
  project?: Array<ACLAction> | undefined;
  projectFromV0?: Array<ACLAction> | undefined;
  projectAccessGroup?: Array<ACLAction> | undefined;
  projectAnalyticsSampling?: Array<ACLAction> | undefined;
  projectCheck?: Array<ACLAction> | undefined;
  projectCheckRun?: Array<ACLAction> | undefined;
  projectDeploymentHook?: Array<ACLAction> | undefined;
  projectDomain?: Array<ACLAction> | undefined;
  projectDomainMove?: Array<ACLAction> | undefined;
  projectDomainCheckConfig?: Array<ACLAction> | undefined;
  projectEnvVars?: Array<ACLAction> | undefined;
  projectEnvVarsProduction?: Array<ACLAction> | undefined;
  projectEnvVarsUnownedByIntegration?: Array<ACLAction> | undefined;
  projectFlags?: Array<ACLAction> | undefined;
  projectId?: Array<ACLAction> | undefined;
  projectIntegrationConfiguration?: Array<ACLAction> | undefined;
  projectLink?: Array<ACLAction> | undefined;
  projectMember?: Array<ACLAction> | undefined;
  projectMonitoring?: Array<ACLAction> | undefined;
  projectPermissions?: Array<ACLAction> | undefined;
  projectProductionBranch?: Array<ACLAction> | undefined;
  projectTransfer?: Array<ACLAction> | undefined;
  projectTransferOut?: Array<ACLAction> | undefined;
  projectProtectionBypass?: Array<ACLAction> | undefined;
  projectUsage?: Array<ACLAction> | undefined;
  projectAnalyticsUsage?: Array<ACLAction> | undefined;
  projectSupportCase?: Array<ACLAction> | undefined;
  projectSupportCaseComment?: Array<ACLAction> | undefined;
  projectDeploymentExpiration?: Array<ACLAction> | undefined;
  projectRollingRelease?: Array<ACLAction> | undefined;
  projectTier?: Array<ACLAction> | undefined;
  projectOIDCToken?: Array<ACLAction> | undefined;
  seawallConfig?: Array<ACLAction> | undefined;
  skewProtection?: Array<ACLAction> | undefined;
  analytics?: Array<ACLAction> | undefined;
  trustedIps?: Array<ACLAction> | undefined;
  v0Chat?: Array<ACLAction> | undefined;
  webAnalytics?: Array<ACLAction> | undefined;
  sharedEnvVarConnection?: Array<ACLAction> | undefined;
  sonar?: Array<ACLAction> | undefined;
  oauth2Connection?: Array<ACLAction> | undefined;
  user?: Array<ACLAction> | undefined;
  userConnection?: Array<ACLAction> | undefined;
  userSudo?: Array<ACLAction> | undefined;
  webAuthn?: Array<ACLAction> | undefined;
  accessGroup?: Array<ACLAction> | undefined;
  aliasGlobal?: Array<ACLAction> | undefined;
  analyticsSampling?: Array<ACLAction> | undefined;
  analyticsUsage?: Array<ACLAction> | undefined;
  auditLog?: Array<ACLAction> | undefined;
  billingAddress?: Array<ACLAction> | undefined;
  billingInformation?: Array<ACLAction> | undefined;
  billingInvoice?: Array<ACLAction> | undefined;
  billingInvoiceEmailRecipient?: Array<ACLAction> | undefined;
  billingInvoiceLanguage?: Array<ACLAction> | undefined;
  billingPlan?: Array<ACLAction> | undefined;
  billingPurchaseOrder?: Array<ACLAction> | undefined;
  billingRefund?: Array<ACLAction> | undefined;
  billingTaxId?: Array<ACLAction> | undefined;
  blob?: Array<ACLAction> | undefined;
  budget?: Array<ACLAction> | undefined;
  cacheArtifact?: Array<ACLAction> | undefined;
  cacheArtifactUsageEvent?: Array<ACLAction> | undefined;
  codeChecks?: Array<ACLAction> | undefined;
  concurrentBuilds?: Array<ACLAction> | undefined;
  connect?: Array<ACLAction> | undefined;
  connectConfiguration?: Array<ACLAction> | undefined;
  defaultDeploymentProtection?: Array<ACLAction> | undefined;
  domain?: Array<ACLAction> | undefined;
  domainAcceptDelegation?: Array<ACLAction> | undefined;
  domainAuthCodes?: Array<ACLAction> | undefined;
  domainCertificate?: Array<ACLAction> | undefined;
  domainCheckConfig?: Array<ACLAction> | undefined;
  domainMove?: Array<ACLAction> | undefined;
  domainPurchase?: Array<ACLAction> | undefined;
  domainRecord?: Array<ACLAction> | undefined;
  domainTransferIn?: Array<ACLAction> | undefined;
  event?: Array<ACLAction> | undefined;
  ownEvent?: Array<ACLAction> | undefined;
  sensitiveEnvironmentVariablePolicy?: Array<ACLAction> | undefined;
  fileUpload?: Array<ACLAction> | undefined;
  flagsExplorerSubscription?: Array<ACLAction> | undefined;
  gitRepository?: Array<ACLAction> | undefined;
  ipBlocking?: Array<ACLAction> | undefined;
  imageOptimizationNewPrice?: Array<ACLAction> | undefined;
  integration?: Array<ACLAction> | undefined;
  integrationAccount?: Array<ACLAction> | undefined;
  integrationConfiguration?: Array<ACLAction> | undefined;
  integrationConfigurationTransfer?: Array<ACLAction> | undefined;
  integrationConfigurationProjects?: Array<ACLAction> | undefined;
  integrationVercelConfigurationOverride?: Array<ACLAction> | undefined;
  integrationConfigurationRole?: Array<ACLAction> | undefined;
  integrationSSOSession?: Array<ACLAction> | undefined;
  integrationResource?: Array<ACLAction> | undefined;
  integrationEvent?: Array<ACLAction> | undefined;
  integrationResourceSecrets?: Array<ACLAction> | undefined;
  integrationDeploymentAction?: Array<ACLAction> | undefined;
  marketplaceInstallationMember?: Array<ACLAction> | undefined;
  marketplaceBillingData?: Array<ACLAction> | undefined;
  marketplaceInvoice?: Array<ACLAction> | undefined;
  marketplaceSettings?: Array<ACLAction> | undefined;
  marketplaceExperimentationItem?: Array<ACLAction> | undefined;
  marketplaceExperimentationEdgeConfigData?: Array<ACLAction> | undefined;
  jobGlobal?: Array<ACLAction> | undefined;
  drain?: Array<ACLAction> | undefined;
  logDrain?: Array<ACLAction> | undefined;
  traceDrain?: Array<ACLAction> | undefined;
  monitoring?: Array<ACLAction> | undefined;
  monitoringSettings?: Array<ACLAction> | undefined;
  monitoringQuery?: Array<ACLAction> | undefined;
  monitoringChart?: Array<ACLAction> | undefined;
  monitoringAlert?: Array<ACLAction> | undefined;
  notificationDeploymentFailed?: Array<ACLAction> | undefined;
  notificationDomainConfiguration?: Array<ACLAction> | undefined;
  notificationDomainExpire?: Array<ACLAction> | undefined;
  notificationDomainMoved?: Array<ACLAction> | undefined;
  notificationDomainPurchase?: Array<ACLAction> | undefined;
  notificationDomainRenewal?: Array<ACLAction> | undefined;
  notificationDomainTransfer?: Array<ACLAction> | undefined;
  notificationDomainUnverified?: Array<ACLAction> | undefined;
  notificationMonitoringAlert?: Array<ACLAction> | undefined;
  notificationPaymentFailed?: Array<ACLAction> | undefined;
  notificationUsageAlert?: Array<ACLAction> | undefined;
  notificationPreferences?: Array<ACLAction> | undefined;
  notificationCustomerBudget?: Array<ACLAction> | undefined;
  notificationStatementOfReasons?: Array<ACLAction> | undefined;
  observabilityConfiguration?: Array<ACLAction> | undefined;
  alerts?: Array<ACLAction> | undefined;
  observabilityNotebook?: Array<ACLAction> | undefined;
  observabilityFunnel?: Array<ACLAction> | undefined;
  openTelemetryEndpoint?: Array<ACLAction> | undefined;
  vercelAppInstallation?: Array<ACLAction> | undefined;
  vercelAppInstallationRequest?: Array<ACLAction> | undefined;
  paymentMethod?: Array<ACLAction> | undefined;
  permissions?: Array<ACLAction> | undefined;
  postgres?: Array<ACLAction> | undefined;
  previewDeploymentSuffix?: Array<ACLAction> | undefined;
  proTrialOnboarding?: Array<ACLAction> | undefined;
  sharedEnvVars?: Array<ACLAction> | undefined;
  sharedEnvVarsProduction?: Array<ACLAction> | undefined;
  space?: Array<ACLAction> | undefined;
  spaceRun?: Array<ACLAction> | undefined;
  passwordProtectionInvoiceItem?: Array<ACLAction> | undefined;
  rateLimit?: Array<ACLAction> | undefined;
  redis?: Array<ACLAction> | undefined;
  repository?: Array<ACLAction> | undefined;
  remoteCaching?: Array<ACLAction> | undefined;
  samlConfig?: Array<ACLAction> | undefined;
  secret?: Array<ACLAction> | undefined;
  redisStoreTokenSet?: Array<ACLAction> | undefined;
  blobStoreTokenSet?: Array<ACLAction> | undefined;
  postgresStoreTokenSet?: Array<ACLAction> | undefined;
  integrationStoreTokenSet?: Array<ACLAction> | undefined;
  integrationResourceReplCommand?: Array<ACLAction> | undefined;
  storeTransfer?: Array<ACLAction> | undefined;
  supportCase?: Array<ACLAction> | undefined;
  supportCaseComment?: Array<ACLAction> | undefined;
  dataCacheBillingSettings?: Array<ACLAction> | undefined;
  team?: Array<ACLAction> | undefined;
  teamAccessRequest?: Array<ACLAction> | undefined;
  teamFellowMembership?: Array<ACLAction> | undefined;
  teamGitExclusivity?: Array<ACLAction> | undefined;
  teamInvite?: Array<ACLAction> | undefined;
  teamInviteCode?: Array<ACLAction> | undefined;
  teamJoin?: Array<ACLAction> | undefined;
  teamMemberMfaStatus?: Array<ACLAction> | undefined;
  teamMicrofrontends?: Array<ACLAction> | undefined;
  teamOwnMembership?: Array<ACLAction> | undefined;
  teamOwnMembershipDisconnectSAML?: Array<ACLAction> | undefined;
  token?: Array<ACLAction> | undefined;
  usage?: Array<ACLAction> | undefined;
  usageCycle?: Array<ACLAction> | undefined;
  vpcPeeringConnection?: Array<ACLAction> | undefined;
  webAnalyticsPlan?: Array<ACLAction> | undefined;
  edgeConfig?: Array<ACLAction> | undefined;
  edgeConfigItem?: Array<ACLAction> | undefined;
  edgeConfigSchema?: Array<ACLAction> | undefined;
  edgeConfigToken?: Array<ACLAction> | undefined;
  webhook?: Array<ACLAction> | undefined;
  webhookEvent?: Array<ACLAction> | undefined;
  endpointVerification?: Array<ACLAction> | undefined;
  projectTransferIn?: Array<ACLAction> | undefined;
  oauth2Application?: Array<ACLAction> | undefined;
  vercelRun?: Array<ACLAction> | undefined;
  vercelRunExec?: Array<ACLAction> | undefined;
  apiKey?: Array<ACLAction> | undefined;
  apiKeyOwnedBySelf?: Array<ACLAction> | undefined;
};

export type CreateProjectLastRollbackTarget = {};

export const CreateProjectJobStatus = {
  Succeeded: "succeeded",
  Failed: "failed",
  Skipped: "skipped",
  Pending: "pending",
  InProgress: "in-progress",
} as const;
export type CreateProjectJobStatus = ClosedEnum<typeof CreateProjectJobStatus>;

export const CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType =
  {
    Promote: "promote",
    Rollback: "rollback",
  } as const;
export type CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType =
  ClosedEnum<
    typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType
  >;

export type CreateProjectLastAliasRequest = {
  fromDeploymentId: string;
  toDeploymentId: string;
  /**
   * If rolling back from a rolling release, fromDeploymentId captures the "base" of that rolling release, and fromRollingReleaseId captures the "target" of that rolling release.
   */
  fromRollingReleaseId?: string | undefined;
  jobStatus: CreateProjectJobStatus;
  requestedAt: number;
  type:
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType;
};

export const CreateProjectProtectionBypassProjectsScope = {
  AutomationBypass: "automation-bypass",
} as const;
export type CreateProjectProtectionBypassProjectsScope = ClosedEnum<
  typeof CreateProjectProtectionBypassProjectsScope
>;

export type CreateProjectProtectionBypass2 = {
  createdAt: number;
  createdBy: string;
  scope: CreateProjectProtectionBypassProjectsScope;
};

export const CreateProjectProtectionBypassScope = {
  IntegrationAutomationBypass: "integration-automation-bypass",
} as const;
export type CreateProjectProtectionBypassScope = ClosedEnum<
  typeof CreateProjectProtectionBypassScope
>;

export type CreateProjectProtectionBypass1 = {
  createdAt: number;
  createdBy: string;
  scope: CreateProjectProtectionBypassScope;
  integrationId: string;
  configurationId: string;
};

export type CreateProjectProtectionBypass =
  | CreateProjectProtectionBypass1
  | CreateProjectProtectionBypass2;

export const CreateProjectTrustedIpsProjectsDeploymentType = {
  Preview: "preview",
  Production: "production",
  All: "all",
  ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews",
  AllExceptCustomDomains: "all_except_custom_domains",
} as const;
export type CreateProjectTrustedIpsProjectsDeploymentType = ClosedEnum<
  typeof CreateProjectTrustedIpsProjectsDeploymentType
>;

export type CreateProjectTrustedIps2 = {
  deploymentType: CreateProjectTrustedIpsProjectsDeploymentType;
};

export const CreateProjectTrustedIpsDeploymentType = {
  Preview: "preview",
  Production: "production",
  All: "all",
  ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews",
  AllExceptCustomDomains: "all_except_custom_domains",
} as const;
export type CreateProjectTrustedIpsDeploymentType = ClosedEnum<
  typeof CreateProjectTrustedIpsDeploymentType
>;

export type TrustedIpsAddresses = {
  value: string;
  note?: string | undefined;
};

export const TrustedIpsProtectionMode = {
  Additional: "additional",
  Exclusive: "exclusive",
} as const;
export type TrustedIpsProtectionMode = ClosedEnum<
  typeof TrustedIpsProtectionMode
>;

export type CreateProjectTrustedIps1 = {
  deploymentType: CreateProjectTrustedIpsDeploymentType;
  addresses: Array<TrustedIpsAddresses>;
  protectionMode: TrustedIpsProtectionMode;
};

export type CreateProjectTrustedIps =
  | CreateProjectTrustedIps1
  | CreateProjectTrustedIps2;

export type CreateProjectGitComments = {
  /**
   * Whether the Vercel bot should comment on PRs
   */
  onPullRequest: boolean;
  /**
   * Whether the Vercel bot should comment on commits
   */
  onCommit: boolean;
};

/**
 * Whether the Vercel bot should automatically create GitHub deployments https://docs.github.com/en/rest/deployments/deployments#about-deployments NOTE: repository-dispatch events should be used instead
 */
export const CreateProjectCreateDeployments = {
  Enabled: "enabled",
  Disabled: "disabled",
} as const;
/**
 * Whether the Vercel bot should automatically create GitHub deployments https://docs.github.com/en/rest/deployments/deployments#about-deployments NOTE: repository-dispatch events should be used instead
 */
export type CreateProjectCreateDeployments = ClosedEnum<
  typeof CreateProjectCreateDeployments
>;

export type CreateProjectGitProviderOptions = {
  /**
   * Whether the Vercel bot should automatically create GitHub deployments https://docs.github.com/en/rest/deployments/deployments#about-deployments NOTE: repository-dispatch events should be used instead
   */
  createDeployments: CreateProjectCreateDeployments;
  /**
   * Whether the Vercel bot should not automatically create GitHub repository-dispatch events on deployment events. https://vercel.com/docs/git/vercel-for-github#repository-dispatch-events
   */
  disableRepositoryDispatchEvents?: boolean | undefined;
};

export type CreateProjectWebAnalytics = {
  id: string;
  disabledAt?: number | undefined;
  canceledAt?: number | undefined;
  enabledAt?: number | undefined;
  hasData?: boolean | undefined;
};

export const CreateProjectProjectsResponse200Action = {
  Log: "log",
  Challenge: "challenge",
  Deny: "deny",
} as const;
export type CreateProjectProjectsResponse200Action = ClosedEnum<
  typeof CreateProjectProjectsResponse200Action
>;

export type CreateProjectBotFilter = {
  active: boolean;
  action?: CreateProjectProjectsResponse200Action | undefined;
};

export const CreateProjectProjectsAction = {
  Log: "log",
  Challenge: "challenge",
  Deny: "deny",
} as const;
export type CreateProjectProjectsAction = ClosedEnum<
  typeof CreateProjectProjectsAction
>;

export type CreateProjectAiBots = {
  active: boolean;
  action?: CreateProjectProjectsAction | undefined;
};

export const CreateProjectProjectsResponseAction = {
  Log: "log",
  Challenge: "challenge",
  Deny: "deny",
} as const;
export type CreateProjectProjectsResponseAction = ClosedEnum<
  typeof CreateProjectProjectsResponseAction
>;

export type CreateProjectOwasp = {
  active: boolean;
  action?: CreateProjectProjectsResponseAction | undefined;
};

export type CreateProjectManagedRules = {
  botFilter: CreateProjectBotFilter;
  aiBots: CreateProjectAiBots;
  owasp: CreateProjectOwasp;
};

export type CreateProjectSecurity = {
  attackModeEnabled?: boolean | undefined;
  attackModeUpdatedAt?: number | undefined;
  firewallEnabled?: boolean | undefined;
  firewallUpdatedAt?: number | undefined;
  attackModeActiveUntil?: number | null | undefined;
  firewallConfigVersion?: number | undefined;
  firewallSeawallEnabled?: boolean | undefined;
  ja3Enabled?: boolean | undefined;
  ja4Enabled?: boolean | undefined;
  firewallBypassIps?: Array<string> | undefined;
  managedRules?: CreateProjectManagedRules | null | undefined;
  botIdEnabled?: boolean | undefined;
};

/**
 * - team: `https://oidc.vercel.com/[team_slug]` - global: `https://oidc.vercel.com`
 */
export const CreateProjectIssuerMode = {
  Team: "team",
  Global: "global",
} as const;
/**
 * - team: `https://oidc.vercel.com/[team_slug]` - global: `https://oidc.vercel.com`
 */
export type CreateProjectIssuerMode = ClosedEnum<
  typeof CreateProjectIssuerMode
>;

export type CreateProjectOidcTokenConfig = {
  /**
   * Whether or not to generate OpenID Connect JSON Web Tokens.
   */
  enabled?: boolean | undefined;
  /**
   * - team: `https://oidc.vercel.com/[team_slug]` - global: `https://oidc.vercel.com`
   */
  issuerMode?: CreateProjectIssuerMode | undefined;
};

export const CreateProjectTier = {
  Standard: "standard",
  Advanced: "advanced",
  Critical: "critical",
} as const;
export type CreateProjectTier = ClosedEnum<typeof CreateProjectTier>;

export type CreateProjectFeatures = {
  webAnalytics?: boolean | undefined;
};

export type CreateProjectHistory = {
  scanner: string;
  reason: string;
  by: string;
  byId: string;
  at: number;
};

export const CreateProjectAction = {
  Blocked: "blocked",
} as const;
export type CreateProjectAction = ClosedEnum<typeof CreateProjectAction>;

export type CreateProjectBlock = {
  action: CreateProjectAction;
  reason: string;
  statusCode: number;
  createdAt: number;
  caseId?: string | undefined;
  actor?: string | undefined;
  comment?: string | undefined;
  isCascading?: boolean | undefined;
};

export const CreateProjectBlockHistoryProjectsResponse200Action = {
  RouteUnblocked: "route-unblocked",
} as const;
export type CreateProjectBlockHistoryProjectsResponse200Action = ClosedEnum<
  typeof CreateProjectBlockHistoryProjectsResponse200Action
>;

export const CreateProjectHasProjectsResponse200Type = {
  Host: "host",
} as const;
export type CreateProjectHasProjectsResponse200Type = ClosedEnum<
  typeof CreateProjectHasProjectsResponse200Type
>;

export type CreateProjectHasProjectsResponse200Value = {
  eq: string;
};

export type CreateProjectHasProjects2 = {
  type: CreateProjectHasProjectsResponse200Type;
  value: CreateProjectHasProjectsResponse200Value;
};

export const CreateProjectHasProjectsResponseType = {
  Header: "header",
} as const;
export type CreateProjectHasProjectsResponseType = ClosedEnum<
  typeof CreateProjectHasProjectsResponseType
>;

export const CreateProjectHasProjectsKey = {
  XVercelIpCountry: "x-vercel-ip-country",
} as const;
export type CreateProjectHasProjectsKey = ClosedEnum<
  typeof CreateProjectHasProjectsKey
>;

export type CreateProjectHasProjectsResponseValue = {
  eq: string;
};

export type CreateProjectHasProjects1 = {
  type: CreateProjectHasProjectsResponseType;
  key: CreateProjectHasProjectsKey;
  value: CreateProjectHasProjectsResponseValue;
};

export type CreateProjectRouteProjectsHas =
  | CreateProjectHasProjects1
  | CreateProjectHasProjects2;

export const CreateProjectRouteProjectsAction = {
  BlockLegalCwc: "block_legal_cwc",
} as const;
export type CreateProjectRouteProjectsAction = ClosedEnum<
  typeof CreateProjectRouteProjectsAction
>;

export type CreateProjectRouteProjectsMitigate = {
  action: CreateProjectRouteProjectsAction;
};

export type CreateProjectRouteProjects2 = {
  has: Array<CreateProjectHasProjects1 | CreateProjectHasProjects2>;
  mitigate: CreateProjectRouteProjectsMitigate;
  src?: string | undefined;
};

export type CreateProjectRouteProjects1 = {
  src: string;
  status: number;
};

export type CreateProjectBlockHistoryProjectsRoute =
  | CreateProjectRouteProjects1
  | CreateProjectRouteProjects2;

export type CreateProjectBlockHistory4 = {
  action: CreateProjectBlockHistoryProjectsResponse200Action;
  route: CreateProjectRouteProjects1 | CreateProjectRouteProjects2;
  statusCode?: number | undefined;
  createdAt: number;
  caseId?: string | undefined;
  actor?: string | undefined;
  comment?: string | undefined;
  isCascading?: boolean | undefined;
};

export const CreateProjectBlockHistoryProjectsResponseAction = {
  RouteBlocked: "route-blocked",
} as const;
export type CreateProjectBlockHistoryProjectsResponseAction = ClosedEnum<
  typeof CreateProjectBlockHistoryProjectsResponseAction
>;

export const CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyType =
  {
    Host: "host",
  } as const;
export type CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyType
  >;

export type CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue =
  {
    eq: string;
  };

export type CreateProjectHasProjectsResponse2 = {
  type: CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyType;
  value: CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue;
};

export const CreateProjectHasProjectsResponse200ApplicationJSONType = {
  Header: "header",
} as const;
export type CreateProjectHasProjectsResponse200ApplicationJSONType = ClosedEnum<
  typeof CreateProjectHasProjectsResponse200ApplicationJSONType
>;

export const CreateProjectHasKey = {
  XVercelIpCountry: "x-vercel-ip-country",
} as const;
export type CreateProjectHasKey = ClosedEnum<typeof CreateProjectHasKey>;

export type CreateProjectHasProjectsResponse200ApplicationJSONValue = {
  eq: string;
};

export type CreateProjectHasProjectsResponse1 = {
  type: CreateProjectHasProjectsResponse200ApplicationJSONType;
  key: CreateProjectHasKey;
  value: CreateProjectHasProjectsResponse200ApplicationJSONValue;
};

export type CreateProjectRouteHas =
  | CreateProjectHasProjectsResponse1
  | CreateProjectHasProjectsResponse2;

export const CreateProjectRouteAction = {
  BlockLegalCwc: "block_legal_cwc",
} as const;
export type CreateProjectRouteAction = ClosedEnum<
  typeof CreateProjectRouteAction
>;

export type CreateProjectRouteMitigate = {
  action: CreateProjectRouteAction;
};

export type CreateProjectRoute2 = {
  has: Array<
    CreateProjectHasProjectsResponse1 | CreateProjectHasProjectsResponse2
  >;
  mitigate: CreateProjectRouteMitigate;
  src?: string | undefined;
};

export type CreateProjectRoute1 = {
  src: string;
  status: number;
};

export type CreateProjectBlockHistoryRoute =
  | CreateProjectRoute1
  | CreateProjectRoute2;

export type CreateProjectBlockHistory3 = {
  action: CreateProjectBlockHistoryProjectsResponseAction;
  route: CreateProjectRoute1 | CreateProjectRoute2;
  reason: string;
  createdAt: number;
  caseId?: string | undefined;
  actor?: string | undefined;
  comment?: string | undefined;
  isCascading?: boolean | undefined;
};

export const CreateProjectBlockHistoryProjectsAction = {
  Unblocked: "unblocked",
} as const;
export type CreateProjectBlockHistoryProjectsAction = ClosedEnum<
  typeof CreateProjectBlockHistoryProjectsAction
>;

export type CreateProjectBlockHistory2 = {
  action: CreateProjectBlockHistoryProjectsAction;
  createdAt: number;
  caseId?: string | undefined;
  actor?: string | undefined;
  comment?: string | undefined;
  isCascading?: boolean | undefined;
};

export const CreateProjectBlockHistoryAction = {
  Blocked: "blocked",
} as const;
export type CreateProjectBlockHistoryAction = ClosedEnum<
  typeof CreateProjectBlockHistoryAction
>;

export type CreateProjectBlockHistory1 = {
  action: CreateProjectBlockHistoryAction;
  reason: string;
  statusCode: number;
  createdAt: number;
  caseId?: string | undefined;
  actor?: string | undefined;
  comment?: string | undefined;
  isCascading?: boolean | undefined;
};

export type CreateProjectBlockHistory =
  | CreateProjectBlockHistory1
  | CreateProjectBlockHistory3
  | CreateProjectBlockHistory4
  | CreateProjectBlockHistory2;

export type CreateProjectAbuse = {
  scanner?: string | undefined;
  history: Array<CreateProjectHistory>;
  updatedAt: number;
  block?: CreateProjectBlock | undefined;
  blockHistory?:
    | Array<
      | CreateProjectBlockHistory1
      | CreateProjectBlockHistory3
      | CreateProjectBlockHistory4
      | CreateProjectBlockHistory2
    >
    | undefined;
};

export const CreateProjectHasProjectsType = {
  Host: "host",
} as const;
export type CreateProjectHasProjectsType = ClosedEnum<
  typeof CreateProjectHasProjectsType
>;

export type CreateProjectHasProjectsValue = {
  eq: string;
};

export type CreateProjectHas2 = {
  type: CreateProjectHasProjectsType;
  value: CreateProjectHasProjectsValue;
};

export const CreateProjectHasType = {
  Header: "header",
} as const;
export type CreateProjectHasType = ClosedEnum<typeof CreateProjectHasType>;

export const HasKey = {
  XVercelIpCountry: "x-vercel-ip-country",
} as const;
export type HasKey = ClosedEnum<typeof HasKey>;

export type CreateProjectHasValue = {
  eq: string;
};

export type CreateProjectHas1 = {
  type: CreateProjectHasType;
  key: HasKey;
  value: CreateProjectHasValue;
};

export type InternalRoutesHas = CreateProjectHas1 | CreateProjectHas2;

export const CreateProjectInternalRoutesAction = {
  BlockLegalCwc: "block_legal_cwc",
} as const;
export type CreateProjectInternalRoutesAction = ClosedEnum<
  typeof CreateProjectInternalRoutesAction
>;

export type InternalRoutesMitigate = {
  action: CreateProjectInternalRoutesAction;
};

export type CreateProjectInternalRoutes2 = {
  has: Array<CreateProjectHas1 | CreateProjectHas2>;
  mitigate: InternalRoutesMitigate;
  src?: string | undefined;
};

export type CreateProjectInternalRoutes1 = {
  src: string;
  status: number;
};

export type CreateProjectInternalRoutes =
  | CreateProjectInternalRoutes1
  | CreateProjectInternalRoutes2;

/**
 * The project was successfuly created
 */
export type CreateProjectResponseBody = {
  accountId: string;
  analytics?: CreateProjectAnalytics | undefined;
  speedInsights?: CreateProjectSpeedInsights | undefined;
  autoExposeSystemEnvs?: boolean | undefined;
  autoAssignCustomDomains?: boolean | undefined;
  autoAssignCustomDomainsUpdatedBy?: string | undefined;
  buildCommand?: string | null | undefined;
  commandForIgnoringBuildStep?: string | null | undefined;
  connectConfigurations?:
    | Array<CreateProjectConnectConfigurations>
    | null
    | undefined;
  connectConfigurationId?: string | null | undefined;
  connectBuildsEnabled?: boolean | undefined;
  passiveConnectConfigurationId?: string | null | undefined;
  createdAt?: number | undefined;
  customerSupportCodeVisibility?: boolean | undefined;
  crons?: CreateProjectCrons | undefined;
  dataCache?: CreateProjectDataCache | undefined;
  /**
   * Retention policies for deployments. These are enforced at the project level, but we also maintain an instance of this at the team level as a default policy that gets applied to new projects.
   */
  deploymentExpiration?: CreateProjectDeploymentExpiration | null | undefined;
  devCommand?: string | null | undefined;
  directoryListing: boolean;
  installCommand?: string | null | undefined;
  env?: Array<CreateProjectEnv> | undefined;
  customEnvironments?: Array<CreateProjectCustomEnvironments> | undefined;
  framework?: CreateProjectProjectsFramework | null | undefined;
  gitForkProtection?: boolean | undefined;
  gitLFS?: boolean | undefined;
  id: string;
  ipBuckets?: Array<CreateProjectIpBuckets> | undefined;
  latestDeployments?: Array<CreateProjectLatestDeployments> | undefined;
  link?:
    | CreateProjectLink4
    | CreateProjectLink5
    | CreateProjectLink3
    | CreateProjectLink1
    | CreateProjectLink2
    | undefined;
  microfrontends?:
    | CreateProjectMicrofrontends1
    | CreateProjectMicrofrontends2
    | undefined;
  name: string;
  nodeVersion: CreateProjectNodeVersion;
  optionsAllowlist?: CreateProjectOptionsAllowlist | null | undefined;
  outputDirectory?: string | null | undefined;
  passwordProtection?: CreateProjectPasswordProtection | null | undefined;
  productionDeploymentsFastLane?: boolean | undefined;
  publicSource?: boolean | null | undefined;
  resourceConfig: CreateProjectProjectsResourceConfig;
  /**
   * Description of why a project was rolled back, and by whom. Note that lastAliasRequest contains the from/to details of the rollback.
   */
  rollbackDescription?: CreateProjectRollbackDescription | undefined;
  /**
   * Project-level rolling release configuration that defines how deployments should be gradually rolled out
   */
  rollingRelease?: CreateProjectRollingRelease | null | undefined;
  defaultResourceConfig: CreateProjectDefaultResourceConfig;
  rootDirectory?: string | null | undefined;
  serverlessFunctionZeroConfigFailover?: boolean | undefined;
  skewProtectionBoundaryAt?: number | undefined;
  skewProtectionMaxAge?: number | undefined;
  skipGitConnectDuringLink?: boolean | undefined;
  sourceFilesOutsideRootDirectory?: boolean | undefined;
  enableAffectedProjectsDeployments?: boolean | undefined;
  ssoProtection?: CreateProjectProjectsSsoProtection | null | undefined;
  targets?: { [k: string]: CreateProjectTargets | null } | undefined;
  transferCompletedAt?: number | undefined;
  transferStartedAt?: number | undefined;
  transferToAccountId?: string | undefined;
  transferredFromAccountId?: string | undefined;
  updatedAt?: number | undefined;
  live?: boolean | undefined;
  enablePreviewFeedback?: boolean | null | undefined;
  enableProductionFeedback?: boolean | null | undefined;
  permissions?: CreateProjectPermissions | undefined;
  lastRollbackTarget?: CreateProjectLastRollbackTarget | null | undefined;
  lastAliasRequest?: CreateProjectLastAliasRequest | null | undefined;
  protectionBypass?: {
    [k: string]:
      | CreateProjectProtectionBypass1
      | CreateProjectProtectionBypass2;
  } | undefined;
  hasActiveBranches?: boolean | undefined;
  trustedIps?:
    | CreateProjectTrustedIps1
    | CreateProjectTrustedIps2
    | null
    | undefined;
  gitComments?: CreateProjectGitComments | undefined;
  gitProviderOptions?: CreateProjectGitProviderOptions | undefined;
  paused?: boolean | undefined;
  concurrencyBucketName?: string | undefined;
  webAnalytics?: CreateProjectWebAnalytics | undefined;
  security?: CreateProjectSecurity | undefined;
  oidcTokenConfig?: CreateProjectOidcTokenConfig | undefined;
  tier?: CreateProjectTier | undefined;
  features?: CreateProjectFeatures | undefined;
  v0?: boolean | undefined;
  abuse?: CreateProjectAbuse | undefined;
  internalRoutes?:
    | Array<CreateProjectInternalRoutes1 | CreateProjectInternalRoutes2>
    | undefined;
};

/** @internal */
export const Target2$inboundSchema: z.ZodNativeEnum<typeof Target2> = z
  .nativeEnum(Target2);

/** @internal */
export const Target2$outboundSchema: z.ZodNativeEnum<typeof Target2> =
  Target2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Target2$ {
  /** @deprecated use `Target2$inboundSchema` instead. */
  export const inboundSchema = Target2$inboundSchema;
  /** @deprecated use `Target2$outboundSchema` instead. */
  export const outboundSchema = Target2$outboundSchema;
}

/** @internal */
export const Target1$inboundSchema: z.ZodNativeEnum<typeof Target1> = z
  .nativeEnum(Target1);

/** @internal */
export const Target1$outboundSchema: z.ZodNativeEnum<typeof Target1> =
  Target1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Target1$ {
  /** @deprecated use `Target1$inboundSchema` instead. */
  export const inboundSchema = Target1$inboundSchema;
  /** @deprecated use `Target1$outboundSchema` instead. */
  export const outboundSchema = Target1$outboundSchema;
}

/** @internal */
export const CreateProjectTarget$inboundSchema: z.ZodType<
  CreateProjectTarget,
  z.ZodTypeDef,
  unknown
> = z.union([Target1$inboundSchema, z.array(Target2$inboundSchema)]);

/** @internal */
export type CreateProjectTarget$Outbound = string | Array<string>;

/** @internal */
export const CreateProjectTarget$outboundSchema: z.ZodType<
  CreateProjectTarget$Outbound,
  z.ZodTypeDef,
  CreateProjectTarget
> = z.union([Target1$outboundSchema, z.array(Target2$outboundSchema)]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectTarget$ {
  /** @deprecated use `CreateProjectTarget$inboundSchema` instead. */
  export const inboundSchema = CreateProjectTarget$inboundSchema;
  /** @deprecated use `CreateProjectTarget$outboundSchema` instead. */
  export const outboundSchema = CreateProjectTarget$outboundSchema;
  /** @deprecated use `CreateProjectTarget$Outbound` instead. */
  export type Outbound = CreateProjectTarget$Outbound;
}

export function createProjectTargetToJSON(
  createProjectTarget: CreateProjectTarget,
): string {
  return JSON.stringify(
    CreateProjectTarget$outboundSchema.parse(createProjectTarget),
  );
}

export function createProjectTargetFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectTarget, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectTarget$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectTarget' from JSON`,
  );
}

/** @internal */
export const CreateProjectType$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectType
> = z.nativeEnum(CreateProjectType);

/** @internal */
export const CreateProjectType$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectType
> = CreateProjectType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectType$ {
  /** @deprecated use `CreateProjectType$inboundSchema` instead. */
  export const inboundSchema = CreateProjectType$inboundSchema;
  /** @deprecated use `CreateProjectType$outboundSchema` instead. */
  export const outboundSchema = CreateProjectType$outboundSchema;
}

/** @internal */
export const EnvironmentVariables$inboundSchema: z.ZodType<
  EnvironmentVariables,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  target: z.union([Target1$inboundSchema, z.array(Target2$inboundSchema)]),
  gitBranch: z.string().optional(),
  type: CreateProjectType$inboundSchema.optional(),
  value: z.string(),
});

/** @internal */
export type EnvironmentVariables$Outbound = {
  key: string;
  target: string | Array<string>;
  gitBranch?: string | undefined;
  type?: string | undefined;
  value: string;
};

/** @internal */
export const EnvironmentVariables$outboundSchema: z.ZodType<
  EnvironmentVariables$Outbound,
  z.ZodTypeDef,
  EnvironmentVariables
> = z.object({
  key: z.string(),
  target: z.union([Target1$outboundSchema, z.array(Target2$outboundSchema)]),
  gitBranch: z.string().optional(),
  type: CreateProjectType$outboundSchema.optional(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentVariables$ {
  /** @deprecated use `EnvironmentVariables$inboundSchema` instead. */
  export const inboundSchema = EnvironmentVariables$inboundSchema;
  /** @deprecated use `EnvironmentVariables$outboundSchema` instead. */
  export const outboundSchema = EnvironmentVariables$outboundSchema;
  /** @deprecated use `EnvironmentVariables$Outbound` instead. */
  export type Outbound = EnvironmentVariables$Outbound;
}

export function environmentVariablesToJSON(
  environmentVariables: EnvironmentVariables,
): string {
  return JSON.stringify(
    EnvironmentVariables$outboundSchema.parse(environmentVariables),
  );
}

export function environmentVariablesFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentVariables, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentVariables$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentVariables' from JSON`,
  );
}

/** @internal */
export const CreateProjectFramework$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectFramework
> = z.nativeEnum(CreateProjectFramework);

/** @internal */
export const CreateProjectFramework$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectFramework
> = CreateProjectFramework$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectFramework$ {
  /** @deprecated use `CreateProjectFramework$inboundSchema` instead. */
  export const inboundSchema = CreateProjectFramework$inboundSchema;
  /** @deprecated use `CreateProjectFramework$outboundSchema` instead. */
  export const outboundSchema = CreateProjectFramework$outboundSchema;
}

/** @internal */
export const CreateProjectProjectsType$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectProjectsType
> = z.nativeEnum(CreateProjectProjectsType);

/** @internal */
export const CreateProjectProjectsType$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectProjectsType
> = CreateProjectProjectsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectProjectsType$ {
  /** @deprecated use `CreateProjectProjectsType$inboundSchema` instead. */
  export const inboundSchema = CreateProjectProjectsType$inboundSchema;
  /** @deprecated use `CreateProjectProjectsType$outboundSchema` instead. */
  export const outboundSchema = CreateProjectProjectsType$outboundSchema;
}

/** @internal */
export const GitRepository$inboundSchema: z.ZodType<
  GitRepository,
  z.ZodTypeDef,
  unknown
> = z.object({
  repo: z.string(),
  type: CreateProjectProjectsType$inboundSchema,
});

/** @internal */
export type GitRepository$Outbound = {
  repo: string;
  type: string;
};

/** @internal */
export const GitRepository$outboundSchema: z.ZodType<
  GitRepository$Outbound,
  z.ZodTypeDef,
  GitRepository
> = z.object({
  repo: z.string(),
  type: CreateProjectProjectsType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitRepository$ {
  /** @deprecated use `GitRepository$inboundSchema` instead. */
  export const inboundSchema = GitRepository$inboundSchema;
  /** @deprecated use `GitRepository$outboundSchema` instead. */
  export const outboundSchema = GitRepository$outboundSchema;
  /** @deprecated use `GitRepository$Outbound` instead. */
  export type Outbound = GitRepository$Outbound;
}

export function gitRepositoryToJSON(gitRepository: GitRepository): string {
  return JSON.stringify(GitRepository$outboundSchema.parse(gitRepository));
}

export function gitRepositoryFromJSON(
  jsonString: string,
): SafeParseResult<GitRepository, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GitRepository$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GitRepository' from JSON`,
  );
}

/** @internal */
export const CreateProjectDeploymentType$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectDeploymentType
> = z.nativeEnum(CreateProjectDeploymentType);

/** @internal */
export const CreateProjectDeploymentType$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectDeploymentType
> = CreateProjectDeploymentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectDeploymentType$ {
  /** @deprecated use `CreateProjectDeploymentType$inboundSchema` instead. */
  export const inboundSchema = CreateProjectDeploymentType$inboundSchema;
  /** @deprecated use `CreateProjectDeploymentType$outboundSchema` instead. */
  export const outboundSchema = CreateProjectDeploymentType$outboundSchema;
}

/** @internal */
export const CreateProjectSsoProtection$inboundSchema: z.ZodType<
  CreateProjectSsoProtection,
  z.ZodTypeDef,
  unknown
> = z.object({
  deploymentType: CreateProjectDeploymentType$inboundSchema,
});

/** @internal */
export type CreateProjectSsoProtection$Outbound = {
  deploymentType: string;
};

/** @internal */
export const CreateProjectSsoProtection$outboundSchema: z.ZodType<
  CreateProjectSsoProtection$Outbound,
  z.ZodTypeDef,
  CreateProjectSsoProtection
> = z.object({
  deploymentType: CreateProjectDeploymentType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectSsoProtection$ {
  /** @deprecated use `CreateProjectSsoProtection$inboundSchema` instead. */
  export const inboundSchema = CreateProjectSsoProtection$inboundSchema;
  /** @deprecated use `CreateProjectSsoProtection$outboundSchema` instead. */
  export const outboundSchema = CreateProjectSsoProtection$outboundSchema;
  /** @deprecated use `CreateProjectSsoProtection$Outbound` instead. */
  export type Outbound = CreateProjectSsoProtection$Outbound;
}

export function createProjectSsoProtectionToJSON(
  createProjectSsoProtection: CreateProjectSsoProtection,
): string {
  return JSON.stringify(
    CreateProjectSsoProtection$outboundSchema.parse(createProjectSsoProtection),
  );
}

export function createProjectSsoProtectionFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectSsoProtection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectSsoProtection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectSsoProtection' from JSON`,
  );
}

/** @internal */
export const IssuerMode$inboundSchema: z.ZodNativeEnum<typeof IssuerMode> = z
  .nativeEnum(IssuerMode);

/** @internal */
export const IssuerMode$outboundSchema: z.ZodNativeEnum<typeof IssuerMode> =
  IssuerMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IssuerMode$ {
  /** @deprecated use `IssuerMode$inboundSchema` instead. */
  export const inboundSchema = IssuerMode$inboundSchema;
  /** @deprecated use `IssuerMode$outboundSchema` instead. */
  export const outboundSchema = IssuerMode$outboundSchema;
}

/** @internal */
export const OidcTokenConfig$inboundSchema: z.ZodType<
  OidcTokenConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean().default(true),
  issuerMode: IssuerMode$inboundSchema.default("team"),
});

/** @internal */
export type OidcTokenConfig$Outbound = {
  enabled: boolean;
  issuerMode: string;
};

/** @internal */
export const OidcTokenConfig$outboundSchema: z.ZodType<
  OidcTokenConfig$Outbound,
  z.ZodTypeDef,
  OidcTokenConfig
> = z.object({
  enabled: z.boolean().default(true),
  issuerMode: IssuerMode$outboundSchema.default("team"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OidcTokenConfig$ {
  /** @deprecated use `OidcTokenConfig$inboundSchema` instead. */
  export const inboundSchema = OidcTokenConfig$inboundSchema;
  /** @deprecated use `OidcTokenConfig$outboundSchema` instead. */
  export const outboundSchema = OidcTokenConfig$outboundSchema;
  /** @deprecated use `OidcTokenConfig$Outbound` instead. */
  export type Outbound = OidcTokenConfig$Outbound;
}

export function oidcTokenConfigToJSON(
  oidcTokenConfig: OidcTokenConfig,
): string {
  return JSON.stringify(OidcTokenConfig$outboundSchema.parse(oidcTokenConfig));
}

export function oidcTokenConfigFromJSON(
  jsonString: string,
): SafeParseResult<OidcTokenConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OidcTokenConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OidcTokenConfig' from JSON`,
  );
}

/** @internal */
export const FunctionDefaultMemoryType$inboundSchema: z.ZodNativeEnum<
  typeof FunctionDefaultMemoryType
> = z.nativeEnum(FunctionDefaultMemoryType);

/** @internal */
export const FunctionDefaultMemoryType$outboundSchema: z.ZodNativeEnum<
  typeof FunctionDefaultMemoryType
> = FunctionDefaultMemoryType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionDefaultMemoryType$ {
  /** @deprecated use `FunctionDefaultMemoryType$inboundSchema` instead. */
  export const inboundSchema = FunctionDefaultMemoryType$inboundSchema;
  /** @deprecated use `FunctionDefaultMemoryType$outboundSchema` instead. */
  export const outboundSchema = FunctionDefaultMemoryType$outboundSchema;
}

/** @internal */
export const BuildMachineType$inboundSchema: z.ZodNativeEnum<
  typeof BuildMachineType
> = z.nativeEnum(BuildMachineType);

/** @internal */
export const BuildMachineType$outboundSchema: z.ZodNativeEnum<
  typeof BuildMachineType
> = BuildMachineType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BuildMachineType$ {
  /** @deprecated use `BuildMachineType$inboundSchema` instead. */
  export const inboundSchema = BuildMachineType$inboundSchema;
  /** @deprecated use `BuildMachineType$outboundSchema` instead. */
  export const outboundSchema = BuildMachineType$outboundSchema;
}

/** @internal */
export const CreateProjectResourceConfig$inboundSchema: z.ZodType<
  CreateProjectResourceConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  fluid: z.boolean().optional(),
  functionDefaultRegions: z.array(z.string()).optional(),
  functionDefaultTimeout: z.number().optional(),
  functionDefaultMemoryType: FunctionDefaultMemoryType$inboundSchema.optional(),
  functionZeroConfigFailover: z.boolean().optional(),
  elasticConcurrencyEnabled: z.boolean().optional(),
  buildMachineType: BuildMachineType$inboundSchema.optional(),
  isNSNBDisabled: z.boolean().optional(),
});

/** @internal */
export type CreateProjectResourceConfig$Outbound = {
  fluid?: boolean | undefined;
  functionDefaultRegions?: Array<string> | undefined;
  functionDefaultTimeout?: number | undefined;
  functionDefaultMemoryType?: string | undefined;
  functionZeroConfigFailover?: boolean | undefined;
  elasticConcurrencyEnabled?: boolean | undefined;
  buildMachineType?: string | undefined;
  isNSNBDisabled?: boolean | undefined;
};

/** @internal */
export const CreateProjectResourceConfig$outboundSchema: z.ZodType<
  CreateProjectResourceConfig$Outbound,
  z.ZodTypeDef,
  CreateProjectResourceConfig
> = z.object({
  fluid: z.boolean().optional(),
  functionDefaultRegions: z.array(z.string()).optional(),
  functionDefaultTimeout: z.number().optional(),
  functionDefaultMemoryType: FunctionDefaultMemoryType$outboundSchema
    .optional(),
  functionZeroConfigFailover: z.boolean().optional(),
  elasticConcurrencyEnabled: z.boolean().optional(),
  buildMachineType: BuildMachineType$outboundSchema.optional(),
  isNSNBDisabled: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectResourceConfig$ {
  /** @deprecated use `CreateProjectResourceConfig$inboundSchema` instead. */
  export const inboundSchema = CreateProjectResourceConfig$inboundSchema;
  /** @deprecated use `CreateProjectResourceConfig$outboundSchema` instead. */
  export const outboundSchema = CreateProjectResourceConfig$outboundSchema;
  /** @deprecated use `CreateProjectResourceConfig$Outbound` instead. */
  export type Outbound = CreateProjectResourceConfig$Outbound;
}

export function createProjectResourceConfigToJSON(
  createProjectResourceConfig: CreateProjectResourceConfig,
): string {
  return JSON.stringify(
    CreateProjectResourceConfig$outboundSchema.parse(
      createProjectResourceConfig,
    ),
  );
}

export function createProjectResourceConfigFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectResourceConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectResourceConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectResourceConfig' from JSON`,
  );
}

/** @internal */
export const CreateProjectRequestBody$inboundSchema: z.ZodType<
  CreateProjectRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  enablePreviewFeedback: z.nullable(z.boolean()).optional(),
  enableProductionFeedback: z.nullable(z.boolean()).optional(),
  previewDeploymentsDisabled: z.nullable(z.boolean()).optional(),
  buildCommand: z.nullable(z.string()).optional(),
  commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
  devCommand: z.nullable(z.string()).optional(),
  environmentVariables: z.array(
    z.lazy(() => EnvironmentVariables$inboundSchema),
  ).optional(),
  framework: CreateProjectFramework$inboundSchema.optional(),
  gitRepository: z.lazy(() => GitRepository$inboundSchema).optional(),
  installCommand: z.nullable(z.string()).optional(),
  name: z.string(),
  skipGitConnectDuringLink: z.boolean().optional(),
  ssoProtection: z.nullable(
    z.lazy(() => CreateProjectSsoProtection$inboundSchema),
  ).optional(),
  outputDirectory: z.nullable(z.string()).optional(),
  publicSource: z.nullable(z.boolean()).optional(),
  rootDirectory: z.nullable(z.string()).optional(),
  serverlessFunctionRegion: z.nullable(z.string()).optional(),
  serverlessFunctionZeroConfigFailover: z.boolean().optional(),
  oidcTokenConfig: z.lazy(() => OidcTokenConfig$inboundSchema).optional(),
  enableAffectedProjectsDeployments: z.boolean().optional(),
  resourceConfig: z.lazy(() => CreateProjectResourceConfig$inboundSchema)
    .optional(),
});

/** @internal */
export type CreateProjectRequestBody$Outbound = {
  enablePreviewFeedback?: boolean | null | undefined;
  enableProductionFeedback?: boolean | null | undefined;
  previewDeploymentsDisabled?: boolean | null | undefined;
  buildCommand?: string | null | undefined;
  commandForIgnoringBuildStep?: string | null | undefined;
  devCommand?: string | null | undefined;
  environmentVariables?: Array<EnvironmentVariables$Outbound> | undefined;
  framework?: string | undefined;
  gitRepository?: GitRepository$Outbound | undefined;
  installCommand?: string | null | undefined;
  name: string;
  skipGitConnectDuringLink?: boolean | undefined;
  ssoProtection?: CreateProjectSsoProtection$Outbound | null | undefined;
  outputDirectory?: string | null | undefined;
  publicSource?: boolean | null | undefined;
  rootDirectory?: string | null | undefined;
  serverlessFunctionRegion?: string | null | undefined;
  serverlessFunctionZeroConfigFailover?: boolean | undefined;
  oidcTokenConfig?: OidcTokenConfig$Outbound | undefined;
  enableAffectedProjectsDeployments?: boolean | undefined;
  resourceConfig?: CreateProjectResourceConfig$Outbound | undefined;
};

/** @internal */
export const CreateProjectRequestBody$outboundSchema: z.ZodType<
  CreateProjectRequestBody$Outbound,
  z.ZodTypeDef,
  CreateProjectRequestBody
> = z.object({
  enablePreviewFeedback: z.nullable(z.boolean()).optional(),
  enableProductionFeedback: z.nullable(z.boolean()).optional(),
  previewDeploymentsDisabled: z.nullable(z.boolean()).optional(),
  buildCommand: z.nullable(z.string()).optional(),
  commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
  devCommand: z.nullable(z.string()).optional(),
  environmentVariables: z.array(
    z.lazy(() => EnvironmentVariables$outboundSchema),
  ).optional(),
  framework: CreateProjectFramework$outboundSchema.optional(),
  gitRepository: z.lazy(() => GitRepository$outboundSchema).optional(),
  installCommand: z.nullable(z.string()).optional(),
  name: z.string(),
  skipGitConnectDuringLink: z.boolean().optional(),
  ssoProtection: z.nullable(
    z.lazy(() => CreateProjectSsoProtection$outboundSchema),
  ).optional(),
  outputDirectory: z.nullable(z.string()).optional(),
  publicSource: z.nullable(z.boolean()).optional(),
  rootDirectory: z.nullable(z.string()).optional(),
  serverlessFunctionRegion: z.nullable(z.string()).optional(),
  serverlessFunctionZeroConfigFailover: z.boolean().optional(),
  oidcTokenConfig: z.lazy(() => OidcTokenConfig$outboundSchema).optional(),
  enableAffectedProjectsDeployments: z.boolean().optional(),
  resourceConfig: z.lazy(() => CreateProjectResourceConfig$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectRequestBody$ {
  /** @deprecated use `CreateProjectRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateProjectRequestBody$inboundSchema;
  /** @deprecated use `CreateProjectRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateProjectRequestBody$outboundSchema;
  /** @deprecated use `CreateProjectRequestBody$Outbound` instead. */
  export type Outbound = CreateProjectRequestBody$Outbound;
}

export function createProjectRequestBodyToJSON(
  createProjectRequestBody: CreateProjectRequestBody,
): string {
  return JSON.stringify(
    CreateProjectRequestBody$outboundSchema.parse(createProjectRequestBody),
  );
}

export function createProjectRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateProjectRequest$inboundSchema: z.ZodType<
  CreateProjectRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  teamId: z.string().optional(),
  slug: z.string().optional(),
  RequestBody: z.lazy(() => CreateProjectRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateProjectRequest$Outbound = {
  teamId?: string | undefined;
  slug?: string | undefined;
  RequestBody?: CreateProjectRequestBody$Outbound | undefined;
};

/** @internal */
export const CreateProjectRequest$outboundSchema: z.ZodType<
  CreateProjectRequest$Outbound,
  z.ZodTypeDef,
  CreateProjectRequest
> = z.object({
  teamId: z.string().optional(),
  slug: z.string().optional(),
  requestBody: z.lazy(() => CreateProjectRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectRequest$ {
  /** @deprecated use `CreateProjectRequest$inboundSchema` instead. */
  export const inboundSchema = CreateProjectRequest$inboundSchema;
  /** @deprecated use `CreateProjectRequest$outboundSchema` instead. */
  export const outboundSchema = CreateProjectRequest$outboundSchema;
  /** @deprecated use `CreateProjectRequest$Outbound` instead. */
  export type Outbound = CreateProjectRequest$Outbound;
}

export function createProjectRequestToJSON(
  createProjectRequest: CreateProjectRequest,
): string {
  return JSON.stringify(
    CreateProjectRequest$outboundSchema.parse(createProjectRequest),
  );
}

export function createProjectRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectRequest' from JSON`,
  );
}

/** @internal */
export const CreateProjectAnalytics$inboundSchema: z.ZodType<
  CreateProjectAnalytics,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  canceledAt: z.nullable(z.number()).optional(),
  disabledAt: z.number(),
  enabledAt: z.number(),
  paidAt: z.number().optional(),
  sampleRatePercent: z.nullable(z.number()).optional(),
  spendLimitInDollars: z.nullable(z.number()).optional(),
});

/** @internal */
export type CreateProjectAnalytics$Outbound = {
  id: string;
  canceledAt?: number | null | undefined;
  disabledAt: number;
  enabledAt: number;
  paidAt?: number | undefined;
  sampleRatePercent?: number | null | undefined;
  spendLimitInDollars?: number | null | undefined;
};

/** @internal */
export const CreateProjectAnalytics$outboundSchema: z.ZodType<
  CreateProjectAnalytics$Outbound,
  z.ZodTypeDef,
  CreateProjectAnalytics
> = z.object({
  id: z.string(),
  canceledAt: z.nullable(z.number()).optional(),
  disabledAt: z.number(),
  enabledAt: z.number(),
  paidAt: z.number().optional(),
  sampleRatePercent: z.nullable(z.number()).optional(),
  spendLimitInDollars: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectAnalytics$ {
  /** @deprecated use `CreateProjectAnalytics$inboundSchema` instead. */
  export const inboundSchema = CreateProjectAnalytics$inboundSchema;
  /** @deprecated use `CreateProjectAnalytics$outboundSchema` instead. */
  export const outboundSchema = CreateProjectAnalytics$outboundSchema;
  /** @deprecated use `CreateProjectAnalytics$Outbound` instead. */
  export type Outbound = CreateProjectAnalytics$Outbound;
}

export function createProjectAnalyticsToJSON(
  createProjectAnalytics: CreateProjectAnalytics,
): string {
  return JSON.stringify(
    CreateProjectAnalytics$outboundSchema.parse(createProjectAnalytics),
  );
}

export function createProjectAnalyticsFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectAnalytics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectAnalytics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectAnalytics' from JSON`,
  );
}

/** @internal */
export const CreateProjectSpeedInsights$inboundSchema: z.ZodType<
  CreateProjectSpeedInsights,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  enabledAt: z.number().optional(),
  disabledAt: z.number().optional(),
  canceledAt: z.number().optional(),
  hasData: z.boolean().optional(),
  paidAt: z.number().optional(),
});

/** @internal */
export type CreateProjectSpeedInsights$Outbound = {
  id: string;
  enabledAt?: number | undefined;
  disabledAt?: number | undefined;
  canceledAt?: number | undefined;
  hasData?: boolean | undefined;
  paidAt?: number | undefined;
};

/** @internal */
export const CreateProjectSpeedInsights$outboundSchema: z.ZodType<
  CreateProjectSpeedInsights$Outbound,
  z.ZodTypeDef,
  CreateProjectSpeedInsights
> = z.object({
  id: z.string(),
  enabledAt: z.number().optional(),
  disabledAt: z.number().optional(),
  canceledAt: z.number().optional(),
  hasData: z.boolean().optional(),
  paidAt: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectSpeedInsights$ {
  /** @deprecated use `CreateProjectSpeedInsights$inboundSchema` instead. */
  export const inboundSchema = CreateProjectSpeedInsights$inboundSchema;
  /** @deprecated use `CreateProjectSpeedInsights$outboundSchema` instead. */
  export const outboundSchema = CreateProjectSpeedInsights$outboundSchema;
  /** @deprecated use `CreateProjectSpeedInsights$Outbound` instead. */
  export type Outbound = CreateProjectSpeedInsights$Outbound;
}

export function createProjectSpeedInsightsToJSON(
  createProjectSpeedInsights: CreateProjectSpeedInsights,
): string {
  return JSON.stringify(
    CreateProjectSpeedInsights$outboundSchema.parse(createProjectSpeedInsights),
  );
}

export function createProjectSpeedInsightsFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectSpeedInsights, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectSpeedInsights$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectSpeedInsights' from JSON`,
  );
}

/** @internal */
export const CreateProjectEnvId2$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectEnvId2
> = z.nativeEnum(CreateProjectEnvId2);

/** @internal */
export const CreateProjectEnvId2$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectEnvId2
> = CreateProjectEnvId2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectEnvId2$ {
  /** @deprecated use `CreateProjectEnvId2$inboundSchema` instead. */
  export const inboundSchema = CreateProjectEnvId2$inboundSchema;
  /** @deprecated use `CreateProjectEnvId2$outboundSchema` instead. */
  export const outboundSchema = CreateProjectEnvId2$outboundSchema;
}

/** @internal */
export const CreateProjectEnvId$inboundSchema: z.ZodType<
  CreateProjectEnvId,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), CreateProjectEnvId2$inboundSchema]);

/** @internal */
export type CreateProjectEnvId$Outbound = string | string;

/** @internal */
export const CreateProjectEnvId$outboundSchema: z.ZodType<
  CreateProjectEnvId$Outbound,
  z.ZodTypeDef,
  CreateProjectEnvId
> = z.union([z.string(), CreateProjectEnvId2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectEnvId$ {
  /** @deprecated use `CreateProjectEnvId$inboundSchema` instead. */
  export const inboundSchema = CreateProjectEnvId$inboundSchema;
  /** @deprecated use `CreateProjectEnvId$outboundSchema` instead. */
  export const outboundSchema = CreateProjectEnvId$outboundSchema;
  /** @deprecated use `CreateProjectEnvId$Outbound` instead. */
  export type Outbound = CreateProjectEnvId$Outbound;
}

export function createProjectEnvIdToJSON(
  createProjectEnvId: CreateProjectEnvId,
): string {
  return JSON.stringify(
    CreateProjectEnvId$outboundSchema.parse(createProjectEnvId),
  );
}

export function createProjectEnvIdFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectEnvId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectEnvId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectEnvId' from JSON`,
  );
}

/** @internal */
export const CreateProjectAws$inboundSchema: z.ZodType<
  CreateProjectAws,
  z.ZodTypeDef,
  unknown
> = z.object({
  subnetIds: z.array(z.string()),
  securityGroupId: z.string(),
});

/** @internal */
export type CreateProjectAws$Outbound = {
  subnetIds: Array<string>;
  securityGroupId: string;
};

/** @internal */
export const CreateProjectAws$outboundSchema: z.ZodType<
  CreateProjectAws$Outbound,
  z.ZodTypeDef,
  CreateProjectAws
> = z.object({
  subnetIds: z.array(z.string()),
  securityGroupId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectAws$ {
  /** @deprecated use `CreateProjectAws$inboundSchema` instead. */
  export const inboundSchema = CreateProjectAws$inboundSchema;
  /** @deprecated use `CreateProjectAws$outboundSchema` instead. */
  export const outboundSchema = CreateProjectAws$outboundSchema;
  /** @deprecated use `CreateProjectAws$Outbound` instead. */
  export type Outbound = CreateProjectAws$Outbound;
}

export function createProjectAwsToJSON(
  createProjectAws: CreateProjectAws,
): string {
  return JSON.stringify(
    CreateProjectAws$outboundSchema.parse(createProjectAws),
  );
}

export function createProjectAwsFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectAws, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectAws$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectAws' from JSON`,
  );
}

/** @internal */
export const CreateProjectConnectConfigurations$inboundSchema: z.ZodType<
  CreateProjectConnectConfigurations,
  z.ZodTypeDef,
  unknown
> = z.object({
  envId: z.union([z.string(), CreateProjectEnvId2$inboundSchema]),
  connectConfigurationId: z.string(),
  dc: z.string().optional(),
  passive: z.boolean(),
  buildsEnabled: z.boolean(),
  aws: z.lazy(() => CreateProjectAws$inboundSchema).optional(),
  createdAt: z.number(),
  updatedAt: z.number(),
});

/** @internal */
export type CreateProjectConnectConfigurations$Outbound = {
  envId: string | string;
  connectConfigurationId: string;
  dc?: string | undefined;
  passive: boolean;
  buildsEnabled: boolean;
  aws?: CreateProjectAws$Outbound | undefined;
  createdAt: number;
  updatedAt: number;
};

/** @internal */
export const CreateProjectConnectConfigurations$outboundSchema: z.ZodType<
  CreateProjectConnectConfigurations$Outbound,
  z.ZodTypeDef,
  CreateProjectConnectConfigurations
> = z.object({
  envId: z.union([z.string(), CreateProjectEnvId2$outboundSchema]),
  connectConfigurationId: z.string(),
  dc: z.string().optional(),
  passive: z.boolean(),
  buildsEnabled: z.boolean(),
  aws: z.lazy(() => CreateProjectAws$outboundSchema).optional(),
  createdAt: z.number(),
  updatedAt: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectConnectConfigurations$ {
  /** @deprecated use `CreateProjectConnectConfigurations$inboundSchema` instead. */
  export const inboundSchema = CreateProjectConnectConfigurations$inboundSchema;
  /** @deprecated use `CreateProjectConnectConfigurations$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectConnectConfigurations$outboundSchema;
  /** @deprecated use `CreateProjectConnectConfigurations$Outbound` instead. */
  export type Outbound = CreateProjectConnectConfigurations$Outbound;
}

export function createProjectConnectConfigurationsToJSON(
  createProjectConnectConfigurations: CreateProjectConnectConfigurations,
): string {
  return JSON.stringify(
    CreateProjectConnectConfigurations$outboundSchema.parse(
      createProjectConnectConfigurations,
    ),
  );
}

export function createProjectConnectConfigurationsFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectConnectConfigurations, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateProjectConnectConfigurations$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectConnectConfigurations' from JSON`,
  );
}

/** @internal */
export const CreateProjectDefinitions$inboundSchema: z.ZodType<
  CreateProjectDefinitions,
  z.ZodTypeDef,
  unknown
> = z.object({
  host: z.string(),
  path: z.string(),
  schedule: z.string(),
});

/** @internal */
export type CreateProjectDefinitions$Outbound = {
  host: string;
  path: string;
  schedule: string;
};

/** @internal */
export const CreateProjectDefinitions$outboundSchema: z.ZodType<
  CreateProjectDefinitions$Outbound,
  z.ZodTypeDef,
  CreateProjectDefinitions
> = z.object({
  host: z.string(),
  path: z.string(),
  schedule: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectDefinitions$ {
  /** @deprecated use `CreateProjectDefinitions$inboundSchema` instead. */
  export const inboundSchema = CreateProjectDefinitions$inboundSchema;
  /** @deprecated use `CreateProjectDefinitions$outboundSchema` instead. */
  export const outboundSchema = CreateProjectDefinitions$outboundSchema;
  /** @deprecated use `CreateProjectDefinitions$Outbound` instead. */
  export type Outbound = CreateProjectDefinitions$Outbound;
}

export function createProjectDefinitionsToJSON(
  createProjectDefinitions: CreateProjectDefinitions,
): string {
  return JSON.stringify(
    CreateProjectDefinitions$outboundSchema.parse(createProjectDefinitions),
  );
}

export function createProjectDefinitionsFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectDefinitions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectDefinitions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectDefinitions' from JSON`,
  );
}

/** @internal */
export const CreateProjectCrons$inboundSchema: z.ZodType<
  CreateProjectCrons,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabledAt: z.number(),
  disabledAt: z.nullable(z.number()),
  updatedAt: z.number(),
  deploymentId: z.nullable(z.string()),
  definitions: z.array(z.lazy(() => CreateProjectDefinitions$inboundSchema)),
});

/** @internal */
export type CreateProjectCrons$Outbound = {
  enabledAt: number;
  disabledAt: number | null;
  updatedAt: number;
  deploymentId: string | null;
  definitions: Array<CreateProjectDefinitions$Outbound>;
};

/** @internal */
export const CreateProjectCrons$outboundSchema: z.ZodType<
  CreateProjectCrons$Outbound,
  z.ZodTypeDef,
  CreateProjectCrons
> = z.object({
  enabledAt: z.number(),
  disabledAt: z.nullable(z.number()),
  updatedAt: z.number(),
  deploymentId: z.nullable(z.string()),
  definitions: z.array(z.lazy(() => CreateProjectDefinitions$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectCrons$ {
  /** @deprecated use `CreateProjectCrons$inboundSchema` instead. */
  export const inboundSchema = CreateProjectCrons$inboundSchema;
  /** @deprecated use `CreateProjectCrons$outboundSchema` instead. */
  export const outboundSchema = CreateProjectCrons$outboundSchema;
  /** @deprecated use `CreateProjectCrons$Outbound` instead. */
  export type Outbound = CreateProjectCrons$Outbound;
}

export function createProjectCronsToJSON(
  createProjectCrons: CreateProjectCrons,
): string {
  return JSON.stringify(
    CreateProjectCrons$outboundSchema.parse(createProjectCrons),
  );
}

export function createProjectCronsFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectCrons, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectCrons$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectCrons' from JSON`,
  );
}

/** @internal */
export const CreateProjectDataCache$inboundSchema: z.ZodType<
  CreateProjectDataCache,
  z.ZodTypeDef,
  unknown
> = z.object({
  userDisabled: z.boolean(),
  storageSizeBytes: z.nullable(z.number()).optional(),
  unlimited: z.boolean().optional(),
});

/** @internal */
export type CreateProjectDataCache$Outbound = {
  userDisabled: boolean;
  storageSizeBytes?: number | null | undefined;
  unlimited?: boolean | undefined;
};

/** @internal */
export const CreateProjectDataCache$outboundSchema: z.ZodType<
  CreateProjectDataCache$Outbound,
  z.ZodTypeDef,
  CreateProjectDataCache
> = z.object({
  userDisabled: z.boolean(),
  storageSizeBytes: z.nullable(z.number()).optional(),
  unlimited: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectDataCache$ {
  /** @deprecated use `CreateProjectDataCache$inboundSchema` instead. */
  export const inboundSchema = CreateProjectDataCache$inboundSchema;
  /** @deprecated use `CreateProjectDataCache$outboundSchema` instead. */
  export const outboundSchema = CreateProjectDataCache$outboundSchema;
  /** @deprecated use `CreateProjectDataCache$Outbound` instead. */
  export type Outbound = CreateProjectDataCache$Outbound;
}

export function createProjectDataCacheToJSON(
  createProjectDataCache: CreateProjectDataCache,
): string {
  return JSON.stringify(
    CreateProjectDataCache$outboundSchema.parse(createProjectDataCache),
  );
}

export function createProjectDataCacheFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectDataCache, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectDataCache$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectDataCache' from JSON`,
  );
}

/** @internal */
export const CreateProjectDeploymentExpiration$inboundSchema: z.ZodType<
  CreateProjectDeploymentExpiration,
  z.ZodTypeDef,
  unknown
> = z.object({
  expirationDays: z.number().optional(),
  expirationDaysProduction: z.number().optional(),
  expirationDaysCanceled: z.number().optional(),
  expirationDaysErrored: z.number().optional(),
  deploymentsToKeep: z.number().optional(),
});

/** @internal */
export type CreateProjectDeploymentExpiration$Outbound = {
  expirationDays?: number | undefined;
  expirationDaysProduction?: number | undefined;
  expirationDaysCanceled?: number | undefined;
  expirationDaysErrored?: number | undefined;
  deploymentsToKeep?: number | undefined;
};

/** @internal */
export const CreateProjectDeploymentExpiration$outboundSchema: z.ZodType<
  CreateProjectDeploymentExpiration$Outbound,
  z.ZodTypeDef,
  CreateProjectDeploymentExpiration
> = z.object({
  expirationDays: z.number().optional(),
  expirationDaysProduction: z.number().optional(),
  expirationDaysCanceled: z.number().optional(),
  expirationDaysErrored: z.number().optional(),
  deploymentsToKeep: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectDeploymentExpiration$ {
  /** @deprecated use `CreateProjectDeploymentExpiration$inboundSchema` instead. */
  export const inboundSchema = CreateProjectDeploymentExpiration$inboundSchema;
  /** @deprecated use `CreateProjectDeploymentExpiration$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectDeploymentExpiration$outboundSchema;
  /** @deprecated use `CreateProjectDeploymentExpiration$Outbound` instead. */
  export type Outbound = CreateProjectDeploymentExpiration$Outbound;
}

export function createProjectDeploymentExpirationToJSON(
  createProjectDeploymentExpiration: CreateProjectDeploymentExpiration,
): string {
  return JSON.stringify(
    CreateProjectDeploymentExpiration$outboundSchema.parse(
      createProjectDeploymentExpiration,
    ),
  );
}

export function createProjectDeploymentExpirationFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectDeploymentExpiration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectDeploymentExpiration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectDeploymentExpiration' from JSON`,
  );
}

/** @internal */
export const CreateProjectTarget2$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectTarget2
> = z.nativeEnum(CreateProjectTarget2);

/** @internal */
export const CreateProjectTarget2$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectTarget2
> = CreateProjectTarget2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectTarget2$ {
  /** @deprecated use `CreateProjectTarget2$inboundSchema` instead. */
  export const inboundSchema = CreateProjectTarget2$inboundSchema;
  /** @deprecated use `CreateProjectTarget2$outboundSchema` instead. */
  export const outboundSchema = CreateProjectTarget2$outboundSchema;
}

/** @internal */
export const CreateProjectTarget1$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectTarget1
> = z.nativeEnum(CreateProjectTarget1);

/** @internal */
export const CreateProjectTarget1$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectTarget1
> = CreateProjectTarget1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectTarget1$ {
  /** @deprecated use `CreateProjectTarget1$inboundSchema` instead. */
  export const inboundSchema = CreateProjectTarget1$inboundSchema;
  /** @deprecated use `CreateProjectTarget1$outboundSchema` instead. */
  export const outboundSchema = CreateProjectTarget1$outboundSchema;
}

/** @internal */
export const CreateProjectProjectsTarget$inboundSchema: z.ZodType<
  CreateProjectProjectsTarget,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.array(CreateProjectTarget1$inboundSchema),
  CreateProjectTarget2$inboundSchema,
]);

/** @internal */
export type CreateProjectProjectsTarget$Outbound = Array<string> | string;

/** @internal */
export const CreateProjectProjectsTarget$outboundSchema: z.ZodType<
  CreateProjectProjectsTarget$Outbound,
  z.ZodTypeDef,
  CreateProjectProjectsTarget
> = z.union([
  z.array(CreateProjectTarget1$outboundSchema),
  CreateProjectTarget2$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectProjectsTarget$ {
  /** @deprecated use `CreateProjectProjectsTarget$inboundSchema` instead. */
  export const inboundSchema = CreateProjectProjectsTarget$inboundSchema;
  /** @deprecated use `CreateProjectProjectsTarget$outboundSchema` instead. */
  export const outboundSchema = CreateProjectProjectsTarget$outboundSchema;
  /** @deprecated use `CreateProjectProjectsTarget$Outbound` instead. */
  export type Outbound = CreateProjectProjectsTarget$Outbound;
}

export function createProjectProjectsTargetToJSON(
  createProjectProjectsTarget: CreateProjectProjectsTarget,
): string {
  return JSON.stringify(
    CreateProjectProjectsTarget$outboundSchema.parse(
      createProjectProjectsTarget,
    ),
  );
}

export function createProjectProjectsTargetFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectProjectsTarget, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectProjectsTarget$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectProjectsTarget' from JSON`,
  );
}

/** @internal */
export const CreateProjectProjectsResponseType$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectProjectsResponseType
> = z.nativeEnum(CreateProjectProjectsResponseType);

/** @internal */
export const CreateProjectProjectsResponseType$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectProjectsResponseType
> = CreateProjectProjectsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectProjectsResponseType$ {
  /** @deprecated use `CreateProjectProjectsResponseType$inboundSchema` instead. */
  export const inboundSchema = CreateProjectProjectsResponseType$inboundSchema;
  /** @deprecated use `CreateProjectProjectsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectProjectsResponseType$outboundSchema;
}

/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type
  > = z.nativeEnum(
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type,
  );

/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type
  > =
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$ {
  /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$inboundSchema;
  /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$outboundSchema;
}

/** @internal */
export const CreateProjectContentHint15$inboundSchema: z.ZodType<
  CreateProjectContentHint15,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$inboundSchema,
  projectId: z.string(),
});

/** @internal */
export type CreateProjectContentHint15$Outbound = {
  type: string;
  projectId: string;
};

/** @internal */
export const CreateProjectContentHint15$outboundSchema: z.ZodType<
  CreateProjectContentHint15$Outbound,
  z.ZodTypeDef,
  CreateProjectContentHint15
> = z.object({
  type:
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$outboundSchema,
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectContentHint15$ {
  /** @deprecated use `CreateProjectContentHint15$inboundSchema` instead. */
  export const inboundSchema = CreateProjectContentHint15$inboundSchema;
  /** @deprecated use `CreateProjectContentHint15$outboundSchema` instead. */
  export const outboundSchema = CreateProjectContentHint15$outboundSchema;
  /** @deprecated use `CreateProjectContentHint15$Outbound` instead. */
  export type Outbound = CreateProjectContentHint15$Outbound;
}

export function createProjectContentHint15ToJSON(
  createProjectContentHint15: CreateProjectContentHint15,
): string {
  return JSON.stringify(
    CreateProjectContentHint15$outboundSchema.parse(createProjectContentHint15),
  );
}

export function createProjectContentHint15FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectContentHint15, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectContentHint15$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectContentHint15' from JSON`,
  );
}

/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type
  > = z.nativeEnum(
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type,
  );

/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type
  > =
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$ {
  /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$inboundSchema;
  /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$outboundSchema;
}

/** @internal */
export const CreateProjectContentHint14$inboundSchema: z.ZodType<
  CreateProjectContentHint14,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$inboundSchema,
  storeId: z.string(),
  integrationId: z.string(),
  integrationProductId: z.string(),
  integrationConfigurationId: z.string(),
});

/** @internal */
export type CreateProjectContentHint14$Outbound = {
  type: string;
  storeId: string;
  integrationId: string;
  integrationProductId: string;
  integrationConfigurationId: string;
};

/** @internal */
export const CreateProjectContentHint14$outboundSchema: z.ZodType<
  CreateProjectContentHint14$Outbound,
  z.ZodTypeDef,
  CreateProjectContentHint14
> = z.object({
  type:
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$outboundSchema,
  storeId: z.string(),
  integrationId: z.string(),
  integrationProductId: z.string(),
  integrationConfigurationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectContentHint14$ {
  /** @deprecated use `CreateProjectContentHint14$inboundSchema` instead. */
  export const inboundSchema = CreateProjectContentHint14$inboundSchema;
  /** @deprecated use `CreateProjectContentHint14$outboundSchema` instead. */
  export const outboundSchema = CreateProjectContentHint14$outboundSchema;
  /** @deprecated use `CreateProjectContentHint14$Outbound` instead. */
  export type Outbound = CreateProjectContentHint14$Outbound;
}

export function createProjectContentHint14ToJSON(
  createProjectContentHint14: CreateProjectContentHint14,
): string {
  return JSON.stringify(
    CreateProjectContentHint14$outboundSchema.parse(createProjectContentHint14),
  );
}

export function createProjectContentHint14FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectContentHint14, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectContentHint14$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectContentHint14' from JSON`,
  );
}

/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type
  > = z.nativeEnum(
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type,
  );

/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type
  > =
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$ {
  /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$inboundSchema;
  /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$outboundSchema;
}

/** @internal */
export const CreateProjectContentHint13$inboundSchema: z.ZodType<
  CreateProjectContentHint13,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$inboundSchema,
  storeId: z.string(),
});

/** @internal */
export type CreateProjectContentHint13$Outbound = {
  type: string;
  storeId: string;
};

/** @internal */
export const CreateProjectContentHint13$outboundSchema: z.ZodType<
  CreateProjectContentHint13$Outbound,
  z.ZodTypeDef,
  CreateProjectContentHint13
> = z.object({
  type:
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$outboundSchema,
  storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectContentHint13$ {
  /** @deprecated use `CreateProjectContentHint13$inboundSchema` instead. */
  export const inboundSchema = CreateProjectContentHint13$inboundSchema;
  /** @deprecated use `CreateProjectContentHint13$outboundSchema` instead. */
  export const outboundSchema = CreateProjectContentHint13$outboundSchema;
  /** @deprecated use `CreateProjectContentHint13$Outbound` instead. */
  export type Outbound = CreateProjectContentHint13$Outbound;
}

export function createProjectContentHint13ToJSON(
  createProjectContentHint13: CreateProjectContentHint13,
): string {
  return JSON.stringify(
    CreateProjectContentHint13$outboundSchema.parse(createProjectContentHint13),
  );
}

export function createProjectContentHint13FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectContentHint13, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectContentHint13$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectContentHint13' from JSON`,
  );
}

/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type
  > = z.nativeEnum(
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type,
  );

/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type
  > =
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$ {
  /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$inboundSchema;
  /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$outboundSchema;
}

/** @internal */
export const CreateProjectContentHint12$inboundSchema: z.ZodType<
  CreateProjectContentHint12,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$inboundSchema,
  storeId: z.string(),
});

/** @internal */
export type CreateProjectContentHint12$Outbound = {
  type: string;
  storeId: string;
};

/** @internal */
export const CreateProjectContentHint12$outboundSchema: z.ZodType<
  CreateProjectContentHint12$Outbound,
  z.ZodTypeDef,
  CreateProjectContentHint12
> = z.object({
  type:
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$outboundSchema,
  storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectContentHint12$ {
  /** @deprecated use `CreateProjectContentHint12$inboundSchema` instead. */
  export const inboundSchema = CreateProjectContentHint12$inboundSchema;
  /** @deprecated use `CreateProjectContentHint12$outboundSchema` instead. */
  export const outboundSchema = CreateProjectContentHint12$outboundSchema;
  /** @deprecated use `CreateProjectContentHint12$Outbound` instead. */
  export type Outbound = CreateProjectContentHint12$Outbound;
}

export function createProjectContentHint12ToJSON(
  createProjectContentHint12: CreateProjectContentHint12,
): string {
  return JSON.stringify(
    CreateProjectContentHint12$outboundSchema.parse(createProjectContentHint12),
  );
}

export function createProjectContentHint12FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectContentHint12, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectContentHint12$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectContentHint12' from JSON`,
  );
}

/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type
  > = z.nativeEnum(
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type,
  );

/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type
  > =
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$ {
  /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$inboundSchema;
  /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$outboundSchema;
}

/** @internal */
export const CreateProjectContentHint11$inboundSchema: z.ZodType<
  CreateProjectContentHint11,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$inboundSchema,
  storeId: z.string(),
});

/** @internal */
export type CreateProjectContentHint11$Outbound = {
  type: string;
  storeId: string;
};

/** @internal */
export const CreateProjectContentHint11$outboundSchema: z.ZodType<
  CreateProjectContentHint11$Outbound,
  z.ZodTypeDef,
  CreateProjectContentHint11
> = z.object({
  type:
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$outboundSchema,
  storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectContentHint11$ {
  /** @deprecated use `CreateProjectContentHint11$inboundSchema` instead. */
  export const inboundSchema = CreateProjectContentHint11$inboundSchema;
  /** @deprecated use `CreateProjectContentHint11$outboundSchema` instead. */
  export const outboundSchema = CreateProjectContentHint11$outboundSchema;
  /** @deprecated use `CreateProjectContentHint11$Outbound` instead. */
  export type Outbound = CreateProjectContentHint11$Outbound;
}

export function createProjectContentHint11ToJSON(
  createProjectContentHint11: CreateProjectContentHint11,
): string {
  return JSON.stringify(
    CreateProjectContentHint11$outboundSchema.parse(createProjectContentHint11),
  );
}

export function createProjectContentHint11FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectContentHint11, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectContentHint11$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectContentHint11' from JSON`,
  );
}

/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type
  > = z.nativeEnum(
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type,
  );

/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type
  > =
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$ {
  /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$inboundSchema;
  /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$outboundSchema;
}

/** @internal */
export const CreateProjectContentHint10$inboundSchema: z.ZodType<
  CreateProjectContentHint10,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$inboundSchema,
  storeId: z.string(),
});

/** @internal */
export type CreateProjectContentHint10$Outbound = {
  type: string;
  storeId: string;
};

/** @internal */
export const CreateProjectContentHint10$outboundSchema: z.ZodType<
  CreateProjectContentHint10$Outbound,
  z.ZodTypeDef,
  CreateProjectContentHint10
> = z.object({
  type:
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$outboundSchema,
  storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectContentHint10$ {
  /** @deprecated use `CreateProjectContentHint10$inboundSchema` instead. */
  export const inboundSchema = CreateProjectContentHint10$inboundSchema;
  /** @deprecated use `CreateProjectContentHint10$outboundSchema` instead. */
  export const outboundSchema = CreateProjectContentHint10$outboundSchema;
  /** @deprecated use `CreateProjectContentHint10$Outbound` instead. */
  export type Outbound = CreateProjectContentHint10$Outbound;
}

export function createProjectContentHint10ToJSON(
  createProjectContentHint10: CreateProjectContentHint10,
): string {
  return JSON.stringify(
    CreateProjectContentHint10$outboundSchema.parse(createProjectContentHint10),
  );
}

export function createProjectContentHint10FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectContentHint10, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectContentHint10$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectContentHint10' from JSON`,
  );
}

/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type
  > = z.nativeEnum(
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type,
  );

/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type
  > =
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$ {
  /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$inboundSchema;
  /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$outboundSchema;
}

/** @internal */
export const CreateProjectContentHint9$inboundSchema: z.ZodType<
  CreateProjectContentHint9,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$inboundSchema,
  storeId: z.string(),
});

/** @internal */
export type CreateProjectContentHint9$Outbound = {
  type: string;
  storeId: string;
};

/** @internal */
export const CreateProjectContentHint9$outboundSchema: z.ZodType<
  CreateProjectContentHint9$Outbound,
  z.ZodTypeDef,
  CreateProjectContentHint9
> = z.object({
  type:
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$outboundSchema,
  storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectContentHint9$ {
  /** @deprecated use `CreateProjectContentHint9$inboundSchema` instead. */
  export const inboundSchema = CreateProjectContentHint9$inboundSchema;
  /** @deprecated use `CreateProjectContentHint9$outboundSchema` instead. */
  export const outboundSchema = CreateProjectContentHint9$outboundSchema;
  /** @deprecated use `CreateProjectContentHint9$Outbound` instead. */
  export type Outbound = CreateProjectContentHint9$Outbound;
}

export function createProjectContentHint9ToJSON(
  createProjectContentHint9: CreateProjectContentHint9,
): string {
  return JSON.stringify(
    CreateProjectContentHint9$outboundSchema.parse(createProjectContentHint9),
  );
}

export function createProjectContentHint9FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectContentHint9, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectContentHint9$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectContentHint9' from JSON`,
  );
}

/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type
  > = z.nativeEnum(
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type,
  );

/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type
  > =
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$ {
  /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$inboundSchema;
  /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$outboundSchema;
}

/** @internal */
export const CreateProjectContentHint8$inboundSchema: z.ZodType<
  CreateProjectContentHint8,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$inboundSchema,
  storeId: z.string(),
});

/** @internal */
export type CreateProjectContentHint8$Outbound = {
  type: string;
  storeId: string;
};

/** @internal */
export const CreateProjectContentHint8$outboundSchema: z.ZodType<
  CreateProjectContentHint8$Outbound,
  z.ZodTypeDef,
  CreateProjectContentHint8
> = z.object({
  type:
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$outboundSchema,
  storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectContentHint8$ {
  /** @deprecated use `CreateProjectContentHint8$inboundSchema` instead. */
  export const inboundSchema = CreateProjectContentHint8$inboundSchema;
  /** @deprecated use `CreateProjectContentHint8$outboundSchema` instead. */
  export const outboundSchema = CreateProjectContentHint8$outboundSchema;
  /** @deprecated use `CreateProjectContentHint8$Outbound` instead. */
  export type Outbound = CreateProjectContentHint8$Outbound;
}

export function createProjectContentHint8ToJSON(
  createProjectContentHint8: CreateProjectContentHint8,
): string {
  return JSON.stringify(
    CreateProjectContentHint8$outboundSchema.parse(createProjectContentHint8),
  );
}

export function createProjectContentHint8FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectContentHint8, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectContentHint8$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectContentHint8' from JSON`,
  );
}

/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType
  > = z.nativeEnum(
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType,
  );

/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType
  > =
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$ {
  /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema;
  /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$outboundSchema;
}

/** @internal */
export const CreateProjectContentHint7$inboundSchema: z.ZodType<
  CreateProjectContentHint7,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema,
  storeId: z.string(),
});

/** @internal */
export type CreateProjectContentHint7$Outbound = {
  type: string;
  storeId: string;
};

/** @internal */
export const CreateProjectContentHint7$outboundSchema: z.ZodType<
  CreateProjectContentHint7$Outbound,
  z.ZodTypeDef,
  CreateProjectContentHint7
> = z.object({
  type:
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$outboundSchema,
  storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectContentHint7$ {
  /** @deprecated use `CreateProjectContentHint7$inboundSchema` instead. */
  export const inboundSchema = CreateProjectContentHint7$inboundSchema;
  /** @deprecated use `CreateProjectContentHint7$outboundSchema` instead. */
  export const outboundSchema = CreateProjectContentHint7$outboundSchema;
  /** @deprecated use `CreateProjectContentHint7$Outbound` instead. */
  export type Outbound = CreateProjectContentHint7$Outbound;
}

export function createProjectContentHint7ToJSON(
  createProjectContentHint7: CreateProjectContentHint7,
): string {
  return JSON.stringify(
    CreateProjectContentHint7$outboundSchema.parse(createProjectContentHint7),
  );
}

export function createProjectContentHint7FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectContentHint7, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectContentHint7$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectContentHint7' from JSON`,
  );
}

/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType
  > =
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const CreateProjectContentHint6$inboundSchema: z.ZodType<
  CreateProjectContentHint6,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema,
  storeId: z.string(),
});

/** @internal */
export type CreateProjectContentHint6$Outbound = {
  type: string;
  storeId: string;
};

/** @internal */
export const CreateProjectContentHint6$outboundSchema: z.ZodType<
  CreateProjectContentHint6$Outbound,
  z.ZodTypeDef,
  CreateProjectContentHint6
> = z.object({
  type:
    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema,
  storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectContentHint6$ {
  /** @deprecated use `CreateProjectContentHint6$inboundSchema` instead. */
  export const inboundSchema = CreateProjectContentHint6$inboundSchema;
  /** @deprecated use `CreateProjectContentHint6$outboundSchema` instead. */
  export const outboundSchema = CreateProjectContentHint6$outboundSchema;
  /** @deprecated use `CreateProjectContentHint6$Outbound` instead. */
  export type Outbound = CreateProjectContentHint6$Outbound;
}

export function createProjectContentHint6ToJSON(
  createProjectContentHint6: CreateProjectContentHint6,
): string {
  return JSON.stringify(
    CreateProjectContentHint6$outboundSchema.parse(createProjectContentHint6),
  );
}

export function createProjectContentHint6FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectContentHint6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectContentHint6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectContentHint6' from JSON`,
  );
}

/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectContentHintProjectsResponse200ApplicationJSONType
  > = z.nativeEnum(
    CreateProjectContentHintProjectsResponse200ApplicationJSONType,
  );

/** @internal */
export const CreateProjectContentHintProjectsResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectContentHintProjectsResponse200ApplicationJSONType
  > =
    CreateProjectContentHintProjectsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectContentHintProjectsResponse200ApplicationJSONType$ {
  /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectContentHintProjectsResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectContentHintProjectsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const CreateProjectContentHint5$inboundSchema: z.ZodType<
  CreateProjectContentHint5,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    CreateProjectContentHintProjectsResponse200ApplicationJSONType$inboundSchema,
  storeId: z.string(),
});

/** @internal */
export type CreateProjectContentHint5$Outbound = {
  type: string;
  storeId: string;
};

/** @internal */
export const CreateProjectContentHint5$outboundSchema: z.ZodType<
  CreateProjectContentHint5$Outbound,
  z.ZodTypeDef,
  CreateProjectContentHint5
> = z.object({
  type:
    CreateProjectContentHintProjectsResponse200ApplicationJSONType$outboundSchema,
  storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectContentHint5$ {
  /** @deprecated use `CreateProjectContentHint5$inboundSchema` instead. */
  export const inboundSchema = CreateProjectContentHint5$inboundSchema;
  /** @deprecated use `CreateProjectContentHint5$outboundSchema` instead. */
  export const outboundSchema = CreateProjectContentHint5$outboundSchema;
  /** @deprecated use `CreateProjectContentHint5$Outbound` instead. */
  export type Outbound = CreateProjectContentHint5$Outbound;
}

export function createProjectContentHint5ToJSON(
  createProjectContentHint5: CreateProjectContentHint5,
): string {
  return JSON.stringify(
    CreateProjectContentHint5$outboundSchema.parse(createProjectContentHint5),
  );
}

export function createProjectContentHint5FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectContentHint5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectContentHint5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectContentHint5' from JSON`,
  );
}

/** @internal */
export const CreateProjectContentHintProjectsResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof CreateProjectContentHintProjectsResponse200Type> = z
    .nativeEnum(CreateProjectContentHintProjectsResponse200Type);

/** @internal */
export const CreateProjectContentHintProjectsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof CreateProjectContentHintProjectsResponse200Type> =
    CreateProjectContentHintProjectsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectContentHintProjectsResponse200Type$ {
  /** @deprecated use `CreateProjectContentHintProjectsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectContentHintProjectsResponse200Type$inboundSchema;
  /** @deprecated use `CreateProjectContentHintProjectsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectContentHintProjectsResponse200Type$outboundSchema;
}

/** @internal */
export const CreateProjectContentHint4$inboundSchema: z.ZodType<
  CreateProjectContentHint4,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateProjectContentHintProjectsResponse200Type$inboundSchema,
  storeId: z.string(),
});

/** @internal */
export type CreateProjectContentHint4$Outbound = {
  type: string;
  storeId: string;
};

/** @internal */
export const CreateProjectContentHint4$outboundSchema: z.ZodType<
  CreateProjectContentHint4$Outbound,
  z.ZodTypeDef,
  CreateProjectContentHint4
> = z.object({
  type: CreateProjectContentHintProjectsResponse200Type$outboundSchema,
  storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectContentHint4$ {
  /** @deprecated use `CreateProjectContentHint4$inboundSchema` instead. */
  export const inboundSchema = CreateProjectContentHint4$inboundSchema;
  /** @deprecated use `CreateProjectContentHint4$outboundSchema` instead. */
  export const outboundSchema = CreateProjectContentHint4$outboundSchema;
  /** @deprecated use `CreateProjectContentHint4$Outbound` instead. */
  export type Outbound = CreateProjectContentHint4$Outbound;
}

export function createProjectContentHint4ToJSON(
  createProjectContentHint4: CreateProjectContentHint4,
): string {
  return JSON.stringify(
    CreateProjectContentHint4$outboundSchema.parse(createProjectContentHint4),
  );
}

export function createProjectContentHint4FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectContentHint4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectContentHint4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectContentHint4' from JSON`,
  );
}

/** @internal */
export const CreateProjectContentHintProjectsResponseType$inboundSchema:
  z.ZodNativeEnum<typeof CreateProjectContentHintProjectsResponseType> = z
    .nativeEnum(CreateProjectContentHintProjectsResponseType);

/** @internal */
export const CreateProjectContentHintProjectsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof CreateProjectContentHintProjectsResponseType> =
    CreateProjectContentHintProjectsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectContentHintProjectsResponseType$ {
  /** @deprecated use `CreateProjectContentHintProjectsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectContentHintProjectsResponseType$inboundSchema;
  /** @deprecated use `CreateProjectContentHintProjectsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectContentHintProjectsResponseType$outboundSchema;
}

/** @internal */
export const CreateProjectContentHint3$inboundSchema: z.ZodType<
  CreateProjectContentHint3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateProjectContentHintProjectsResponseType$inboundSchema,
  storeId: z.string(),
});

/** @internal */
export type CreateProjectContentHint3$Outbound = {
  type: string;
  storeId: string;
};

/** @internal */
export const CreateProjectContentHint3$outboundSchema: z.ZodType<
  CreateProjectContentHint3$Outbound,
  z.ZodTypeDef,
  CreateProjectContentHint3
> = z.object({
  type: CreateProjectContentHintProjectsResponseType$outboundSchema,
  storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectContentHint3$ {
  /** @deprecated use `CreateProjectContentHint3$inboundSchema` instead. */
  export const inboundSchema = CreateProjectContentHint3$inboundSchema;
  /** @deprecated use `CreateProjectContentHint3$outboundSchema` instead. */
  export const outboundSchema = CreateProjectContentHint3$outboundSchema;
  /** @deprecated use `CreateProjectContentHint3$Outbound` instead. */
  export type Outbound = CreateProjectContentHint3$Outbound;
}

export function createProjectContentHint3ToJSON(
  createProjectContentHint3: CreateProjectContentHint3,
): string {
  return JSON.stringify(
    CreateProjectContentHint3$outboundSchema.parse(createProjectContentHint3),
  );
}

export function createProjectContentHint3FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectContentHint3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectContentHint3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectContentHint3' from JSON`,
  );
}

/** @internal */
export const CreateProjectContentHintProjectsType$inboundSchema:
  z.ZodNativeEnum<typeof CreateProjectContentHintProjectsType> = z.nativeEnum(
    CreateProjectContentHintProjectsType,
  );

/** @internal */
export const CreateProjectContentHintProjectsType$outboundSchema:
  z.ZodNativeEnum<typeof CreateProjectContentHintProjectsType> =
    CreateProjectContentHintProjectsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectContentHintProjectsType$ {
  /** @deprecated use `CreateProjectContentHintProjectsType$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectContentHintProjectsType$inboundSchema;
  /** @deprecated use `CreateProjectContentHintProjectsType$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectContentHintProjectsType$outboundSchema;
}

/** @internal */
export const CreateProjectContentHint2$inboundSchema: z.ZodType<
  CreateProjectContentHint2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateProjectContentHintProjectsType$inboundSchema,
  storeId: z.string(),
});

/** @internal */
export type CreateProjectContentHint2$Outbound = {
  type: string;
  storeId: string;
};

/** @internal */
export const CreateProjectContentHint2$outboundSchema: z.ZodType<
  CreateProjectContentHint2$Outbound,
  z.ZodTypeDef,
  CreateProjectContentHint2
> = z.object({
  type: CreateProjectContentHintProjectsType$outboundSchema,
  storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectContentHint2$ {
  /** @deprecated use `CreateProjectContentHint2$inboundSchema` instead. */
  export const inboundSchema = CreateProjectContentHint2$inboundSchema;
  /** @deprecated use `CreateProjectContentHint2$outboundSchema` instead. */
  export const outboundSchema = CreateProjectContentHint2$outboundSchema;
  /** @deprecated use `CreateProjectContentHint2$Outbound` instead. */
  export type Outbound = CreateProjectContentHint2$Outbound;
}

export function createProjectContentHint2ToJSON(
  createProjectContentHint2: CreateProjectContentHint2,
): string {
  return JSON.stringify(
    CreateProjectContentHint2$outboundSchema.parse(createProjectContentHint2),
  );
}

export function createProjectContentHint2FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectContentHint2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectContentHint2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectContentHint2' from JSON`,
  );
}

/** @internal */
export const CreateProjectContentHintType$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectContentHintType
> = z.nativeEnum(CreateProjectContentHintType);

/** @internal */
export const CreateProjectContentHintType$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectContentHintType
> = CreateProjectContentHintType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectContentHintType$ {
  /** @deprecated use `CreateProjectContentHintType$inboundSchema` instead. */
  export const inboundSchema = CreateProjectContentHintType$inboundSchema;
  /** @deprecated use `CreateProjectContentHintType$outboundSchema` instead. */
  export const outboundSchema = CreateProjectContentHintType$outboundSchema;
}

/** @internal */
export const CreateProjectContentHint1$inboundSchema: z.ZodType<
  CreateProjectContentHint1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateProjectContentHintType$inboundSchema,
  storeId: z.string(),
});

/** @internal */
export type CreateProjectContentHint1$Outbound = {
  type: string;
  storeId: string;
};

/** @internal */
export const CreateProjectContentHint1$outboundSchema: z.ZodType<
  CreateProjectContentHint1$Outbound,
  z.ZodTypeDef,
  CreateProjectContentHint1
> = z.object({
  type: CreateProjectContentHintType$outboundSchema,
  storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectContentHint1$ {
  /** @deprecated use `CreateProjectContentHint1$inboundSchema` instead. */
  export const inboundSchema = CreateProjectContentHint1$inboundSchema;
  /** @deprecated use `CreateProjectContentHint1$outboundSchema` instead. */
  export const outboundSchema = CreateProjectContentHint1$outboundSchema;
  /** @deprecated use `CreateProjectContentHint1$Outbound` instead. */
  export type Outbound = CreateProjectContentHint1$Outbound;
}

export function createProjectContentHint1ToJSON(
  createProjectContentHint1: CreateProjectContentHint1,
): string {
  return JSON.stringify(
    CreateProjectContentHint1$outboundSchema.parse(createProjectContentHint1),
  );
}

export function createProjectContentHint1FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectContentHint1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectContentHint1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectContentHint1' from JSON`,
  );
}

/** @internal */
export const CreateProjectContentHint$inboundSchema: z.ZodType<
  CreateProjectContentHint,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateProjectContentHint14$inboundSchema),
  z.lazy(() => CreateProjectContentHint1$inboundSchema),
  z.lazy(() => CreateProjectContentHint2$inboundSchema),
  z.lazy(() => CreateProjectContentHint3$inboundSchema),
  z.lazy(() => CreateProjectContentHint4$inboundSchema),
  z.lazy(() => CreateProjectContentHint5$inboundSchema),
  z.lazy(() => CreateProjectContentHint6$inboundSchema),
  z.lazy(() => CreateProjectContentHint7$inboundSchema),
  z.lazy(() => CreateProjectContentHint8$inboundSchema),
  z.lazy(() => CreateProjectContentHint9$inboundSchema),
  z.lazy(() => CreateProjectContentHint10$inboundSchema),
  z.lazy(() => CreateProjectContentHint11$inboundSchema),
  z.lazy(() => CreateProjectContentHint12$inboundSchema),
  z.lazy(() => CreateProjectContentHint13$inboundSchema),
  z.lazy(() => CreateProjectContentHint15$inboundSchema),
]);

/** @internal */
export type CreateProjectContentHint$Outbound =
  | CreateProjectContentHint14$Outbound
  | CreateProjectContentHint1$Outbound
  | CreateProjectContentHint2$Outbound
  | CreateProjectContentHint3$Outbound
  | CreateProjectContentHint4$Outbound
  | CreateProjectContentHint5$Outbound
  | CreateProjectContentHint6$Outbound
  | CreateProjectContentHint7$Outbound
  | CreateProjectContentHint8$Outbound
  | CreateProjectContentHint9$Outbound
  | CreateProjectContentHint10$Outbound
  | CreateProjectContentHint11$Outbound
  | CreateProjectContentHint12$Outbound
  | CreateProjectContentHint13$Outbound
  | CreateProjectContentHint15$Outbound;

/** @internal */
export const CreateProjectContentHint$outboundSchema: z.ZodType<
  CreateProjectContentHint$Outbound,
  z.ZodTypeDef,
  CreateProjectContentHint
> = z.union([
  z.lazy(() => CreateProjectContentHint14$outboundSchema),
  z.lazy(() => CreateProjectContentHint1$outboundSchema),
  z.lazy(() => CreateProjectContentHint2$outboundSchema),
  z.lazy(() => CreateProjectContentHint3$outboundSchema),
  z.lazy(() => CreateProjectContentHint4$outboundSchema),
  z.lazy(() => CreateProjectContentHint5$outboundSchema),
  z.lazy(() => CreateProjectContentHint6$outboundSchema),
  z.lazy(() => CreateProjectContentHint7$outboundSchema),
  z.lazy(() => CreateProjectContentHint8$outboundSchema),
  z.lazy(() => CreateProjectContentHint9$outboundSchema),
  z.lazy(() => CreateProjectContentHint10$outboundSchema),
  z.lazy(() => CreateProjectContentHint11$outboundSchema),
  z.lazy(() => CreateProjectContentHint12$outboundSchema),
  z.lazy(() => CreateProjectContentHint13$outboundSchema),
  z.lazy(() => CreateProjectContentHint15$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectContentHint$ {
  /** @deprecated use `CreateProjectContentHint$inboundSchema` instead. */
  export const inboundSchema = CreateProjectContentHint$inboundSchema;
  /** @deprecated use `CreateProjectContentHint$outboundSchema` instead. */
  export const outboundSchema = CreateProjectContentHint$outboundSchema;
  /** @deprecated use `CreateProjectContentHint$Outbound` instead. */
  export type Outbound = CreateProjectContentHint$Outbound;
}

export function createProjectContentHintToJSON(
  createProjectContentHint: CreateProjectContentHint,
): string {
  return JSON.stringify(
    CreateProjectContentHint$outboundSchema.parse(createProjectContentHint),
  );
}

export function createProjectContentHintFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectContentHint, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectContentHint$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectContentHint' from JSON`,
  );
}

/** @internal */
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType
  > = z.nativeEnum(
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType,
  );

/** @internal */
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType
  > =
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType$ {
  /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema;
  /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType$outboundSchema;
}

/** @internal */
export const CreateProjectInternalContentHint$inboundSchema: z.ZodType<
  CreateProjectInternalContentHint,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema,
  encryptedValue: z.string(),
});

/** @internal */
export type CreateProjectInternalContentHint$Outbound = {
  type: string;
  encryptedValue: string;
};

/** @internal */
export const CreateProjectInternalContentHint$outboundSchema: z.ZodType<
  CreateProjectInternalContentHint$Outbound,
  z.ZodTypeDef,
  CreateProjectInternalContentHint
> = z.object({
  type:
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType$outboundSchema,
  encryptedValue: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectInternalContentHint$ {
  /** @deprecated use `CreateProjectInternalContentHint$inboundSchema` instead. */
  export const inboundSchema = CreateProjectInternalContentHint$inboundSchema;
  /** @deprecated use `CreateProjectInternalContentHint$outboundSchema` instead. */
  export const outboundSchema = CreateProjectInternalContentHint$outboundSchema;
  /** @deprecated use `CreateProjectInternalContentHint$Outbound` instead. */
  export type Outbound = CreateProjectInternalContentHint$Outbound;
}

export function createProjectInternalContentHintToJSON(
  createProjectInternalContentHint: CreateProjectInternalContentHint,
): string {
  return JSON.stringify(
    CreateProjectInternalContentHint$outboundSchema.parse(
      createProjectInternalContentHint,
    ),
  );
}

export function createProjectInternalContentHintFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectInternalContentHint, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectInternalContentHint$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectInternalContentHint' from JSON`,
  );
}

/** @internal */
export const CreateProjectEnv$inboundSchema: z.ZodType<
  CreateProjectEnv,
  z.ZodTypeDef,
  unknown
> = z.object({
  target: z.union([
    z.array(CreateProjectTarget1$inboundSchema),
    CreateProjectTarget2$inboundSchema,
  ]).optional(),
  type: CreateProjectProjectsResponseType$inboundSchema,
  sunsetSecretId: z.string().optional(),
  decrypted: z.boolean().optional(),
  value: z.string(),
  vsmValue: z.string().optional(),
  id: z.string().optional(),
  key: z.string(),
  configurationId: z.nullable(z.string()).optional(),
  createdAt: z.number().optional(),
  updatedAt: z.number().optional(),
  createdBy: z.nullable(z.string()).optional(),
  updatedBy: z.nullable(z.string()).optional(),
  gitBranch: z.string().optional(),
  edgeConfigId: z.nullable(z.string()).optional(),
  edgeConfigTokenId: z.nullable(z.string()).optional(),
  contentHint: z.nullable(
    z.union([
      z.lazy(() => CreateProjectContentHint14$inboundSchema),
      z.lazy(() => CreateProjectContentHint1$inboundSchema),
      z.lazy(() => CreateProjectContentHint2$inboundSchema),
      z.lazy(() => CreateProjectContentHint3$inboundSchema),
      z.lazy(() => CreateProjectContentHint4$inboundSchema),
      z.lazy(() => CreateProjectContentHint5$inboundSchema),
      z.lazy(() => CreateProjectContentHint6$inboundSchema),
      z.lazy(() => CreateProjectContentHint7$inboundSchema),
      z.lazy(() => CreateProjectContentHint8$inboundSchema),
      z.lazy(() => CreateProjectContentHint9$inboundSchema),
      z.lazy(() => CreateProjectContentHint10$inboundSchema),
      z.lazy(() => CreateProjectContentHint11$inboundSchema),
      z.lazy(() => CreateProjectContentHint12$inboundSchema),
      z.lazy(() => CreateProjectContentHint13$inboundSchema),
      z.lazy(() => CreateProjectContentHint15$inboundSchema),
    ]),
  ).optional(),
  internalContentHint: z.nullable(
    z.lazy(() => CreateProjectInternalContentHint$inboundSchema),
  ).optional(),
  comment: z.string().optional(),
  customEnvironmentIds: z.array(z.string()).optional(),
});

/** @internal */
export type CreateProjectEnv$Outbound = {
  target?: Array<string> | string | undefined;
  type: string;
  sunsetSecretId?: string | undefined;
  decrypted?: boolean | undefined;
  value: string;
  vsmValue?: string | undefined;
  id?: string | undefined;
  key: string;
  configurationId?: string | null | undefined;
  createdAt?: number | undefined;
  updatedAt?: number | undefined;
  createdBy?: string | null | undefined;
  updatedBy?: string | null | undefined;
  gitBranch?: string | undefined;
  edgeConfigId?: string | null | undefined;
  edgeConfigTokenId?: string | null | undefined;
  contentHint?:
    | CreateProjectContentHint14$Outbound
    | CreateProjectContentHint1$Outbound
    | CreateProjectContentHint2$Outbound
    | CreateProjectContentHint3$Outbound
    | CreateProjectContentHint4$Outbound
    | CreateProjectContentHint5$Outbound
    | CreateProjectContentHint6$Outbound
    | CreateProjectContentHint7$Outbound
    | CreateProjectContentHint8$Outbound
    | CreateProjectContentHint9$Outbound
    | CreateProjectContentHint10$Outbound
    | CreateProjectContentHint11$Outbound
    | CreateProjectContentHint12$Outbound
    | CreateProjectContentHint13$Outbound
    | CreateProjectContentHint15$Outbound
    | null
    | undefined;
  internalContentHint?:
    | CreateProjectInternalContentHint$Outbound
    | null
    | undefined;
  comment?: string | undefined;
  customEnvironmentIds?: Array<string> | undefined;
};

/** @internal */
export const CreateProjectEnv$outboundSchema: z.ZodType<
  CreateProjectEnv$Outbound,
  z.ZodTypeDef,
  CreateProjectEnv
> = z.object({
  target: z.union([
    z.array(CreateProjectTarget1$outboundSchema),
    CreateProjectTarget2$outboundSchema,
  ]).optional(),
  type: CreateProjectProjectsResponseType$outboundSchema,
  sunsetSecretId: z.string().optional(),
  decrypted: z.boolean().optional(),
  value: z.string(),
  vsmValue: z.string().optional(),
  id: z.string().optional(),
  key: z.string(),
  configurationId: z.nullable(z.string()).optional(),
  createdAt: z.number().optional(),
  updatedAt: z.number().optional(),
  createdBy: z.nullable(z.string()).optional(),
  updatedBy: z.nullable(z.string()).optional(),
  gitBranch: z.string().optional(),
  edgeConfigId: z.nullable(z.string()).optional(),
  edgeConfigTokenId: z.nullable(z.string()).optional(),
  contentHint: z.nullable(
    z.union([
      z.lazy(() => CreateProjectContentHint14$outboundSchema),
      z.lazy(() => CreateProjectContentHint1$outboundSchema),
      z.lazy(() => CreateProjectContentHint2$outboundSchema),
      z.lazy(() => CreateProjectContentHint3$outboundSchema),
      z.lazy(() => CreateProjectContentHint4$outboundSchema),
      z.lazy(() => CreateProjectContentHint5$outboundSchema),
      z.lazy(() => CreateProjectContentHint6$outboundSchema),
      z.lazy(() => CreateProjectContentHint7$outboundSchema),
      z.lazy(() => CreateProjectContentHint8$outboundSchema),
      z.lazy(() => CreateProjectContentHint9$outboundSchema),
      z.lazy(() => CreateProjectContentHint10$outboundSchema),
      z.lazy(() => CreateProjectContentHint11$outboundSchema),
      z.lazy(() => CreateProjectContentHint12$outboundSchema),
      z.lazy(() => CreateProjectContentHint13$outboundSchema),
      z.lazy(() => CreateProjectContentHint15$outboundSchema),
    ]),
  ).optional(),
  internalContentHint: z.nullable(
    z.lazy(() => CreateProjectInternalContentHint$outboundSchema),
  ).optional(),
  comment: z.string().optional(),
  customEnvironmentIds: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectEnv$ {
  /** @deprecated use `CreateProjectEnv$inboundSchema` instead. */
  export const inboundSchema = CreateProjectEnv$inboundSchema;
  /** @deprecated use `CreateProjectEnv$outboundSchema` instead. */
  export const outboundSchema = CreateProjectEnv$outboundSchema;
  /** @deprecated use `CreateProjectEnv$Outbound` instead. */
  export type Outbound = CreateProjectEnv$Outbound;
}

export function createProjectEnvToJSON(
  createProjectEnv: CreateProjectEnv,
): string {
  return JSON.stringify(
    CreateProjectEnv$outboundSchema.parse(createProjectEnv),
  );
}

export function createProjectEnvFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectEnv, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectEnv$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectEnv' from JSON`,
  );
}

/** @internal */
export const CreateProjectProjectsResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof CreateProjectProjectsResponse200Type> = z.nativeEnum(
    CreateProjectProjectsResponse200Type,
  );

/** @internal */
export const CreateProjectProjectsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof CreateProjectProjectsResponse200Type> =
    CreateProjectProjectsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectProjectsResponse200Type$ {
  /** @deprecated use `CreateProjectProjectsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectProjectsResponse200Type$inboundSchema;
  /** @deprecated use `CreateProjectProjectsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectProjectsResponse200Type$outboundSchema;
}

/** @internal */
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType
  > = z.nativeEnum(
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType,
  );

/** @internal */
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType
  > =
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$ {
  /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$inboundSchema;
  /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$outboundSchema;
}

/** @internal */
export const CreateProjectBranchMatcher$inboundSchema: z.ZodType<
  CreateProjectBranchMatcher,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$inboundSchema,
  pattern: z.string(),
});

/** @internal */
export type CreateProjectBranchMatcher$Outbound = {
  type: string;
  pattern: string;
};

/** @internal */
export const CreateProjectBranchMatcher$outboundSchema: z.ZodType<
  CreateProjectBranchMatcher$Outbound,
  z.ZodTypeDef,
  CreateProjectBranchMatcher
> = z.object({
  type:
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$outboundSchema,
  pattern: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectBranchMatcher$ {
  /** @deprecated use `CreateProjectBranchMatcher$inboundSchema` instead. */
  export const inboundSchema = CreateProjectBranchMatcher$inboundSchema;
  /** @deprecated use `CreateProjectBranchMatcher$outboundSchema` instead. */
  export const outboundSchema = CreateProjectBranchMatcher$outboundSchema;
  /** @deprecated use `CreateProjectBranchMatcher$Outbound` instead. */
  export type Outbound = CreateProjectBranchMatcher$Outbound;
}

export function createProjectBranchMatcherToJSON(
  createProjectBranchMatcher: CreateProjectBranchMatcher,
): string {
  return JSON.stringify(
    CreateProjectBranchMatcher$outboundSchema.parse(createProjectBranchMatcher),
  );
}

export function createProjectBranchMatcherFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectBranchMatcher, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectBranchMatcher$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectBranchMatcher' from JSON`,
  );
}

/** @internal */
export const CreateProjectVerification$inboundSchema: z.ZodType<
  CreateProjectVerification,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  domain: z.string(),
  value: z.string(),
  reason: z.string(),
});

/** @internal */
export type CreateProjectVerification$Outbound = {
  type: string;
  domain: string;
  value: string;
  reason: string;
};

/** @internal */
export const CreateProjectVerification$outboundSchema: z.ZodType<
  CreateProjectVerification$Outbound,
  z.ZodTypeDef,
  CreateProjectVerification
> = z.object({
  type: z.string(),
  domain: z.string(),
  value: z.string(),
  reason: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectVerification$ {
  /** @deprecated use `CreateProjectVerification$inboundSchema` instead. */
  export const inboundSchema = CreateProjectVerification$inboundSchema;
  /** @deprecated use `CreateProjectVerification$outboundSchema` instead. */
  export const outboundSchema = CreateProjectVerification$outboundSchema;
  /** @deprecated use `CreateProjectVerification$Outbound` instead. */
  export type Outbound = CreateProjectVerification$Outbound;
}

export function createProjectVerificationToJSON(
  createProjectVerification: CreateProjectVerification,
): string {
  return JSON.stringify(
    CreateProjectVerification$outboundSchema.parse(createProjectVerification),
  );
}

export function createProjectVerificationFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectVerification, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectVerification$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectVerification' from JSON`,
  );
}

/** @internal */
export const CreateProjectDomains$inboundSchema: z.ZodType<
  CreateProjectDomains,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  apexName: z.string(),
  projectId: z.string(),
  redirect: z.nullable(z.string()).optional(),
  redirectStatusCode: z.nullable(z.number()).optional(),
  gitBranch: z.nullable(z.string()).optional(),
  customEnvironmentId: z.nullable(z.string()).optional(),
  updatedAt: z.number().optional(),
  createdAt: z.number().optional(),
  verified: z.boolean(),
  verification: z.array(z.lazy(() => CreateProjectVerification$inboundSchema))
    .optional(),
});

/** @internal */
export type CreateProjectDomains$Outbound = {
  name: string;
  apexName: string;
  projectId: string;
  redirect?: string | null | undefined;
  redirectStatusCode?: number | null | undefined;
  gitBranch?: string | null | undefined;
  customEnvironmentId?: string | null | undefined;
  updatedAt?: number | undefined;
  createdAt?: number | undefined;
  verified: boolean;
  verification?: Array<CreateProjectVerification$Outbound> | undefined;
};

/** @internal */
export const CreateProjectDomains$outboundSchema: z.ZodType<
  CreateProjectDomains$Outbound,
  z.ZodTypeDef,
  CreateProjectDomains
> = z.object({
  name: z.string(),
  apexName: z.string(),
  projectId: z.string(),
  redirect: z.nullable(z.string()).optional(),
  redirectStatusCode: z.nullable(z.number()).optional(),
  gitBranch: z.nullable(z.string()).optional(),
  customEnvironmentId: z.nullable(z.string()).optional(),
  updatedAt: z.number().optional(),
  createdAt: z.number().optional(),
  verified: z.boolean(),
  verification: z.array(z.lazy(() => CreateProjectVerification$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectDomains$ {
  /** @deprecated use `CreateProjectDomains$inboundSchema` instead. */
  export const inboundSchema = CreateProjectDomains$inboundSchema;
  /** @deprecated use `CreateProjectDomains$outboundSchema` instead. */
  export const outboundSchema = CreateProjectDomains$outboundSchema;
  /** @deprecated use `CreateProjectDomains$Outbound` instead. */
  export type Outbound = CreateProjectDomains$Outbound;
}

export function createProjectDomainsToJSON(
  createProjectDomains: CreateProjectDomains,
): string {
  return JSON.stringify(
    CreateProjectDomains$outboundSchema.parse(createProjectDomains),
  );
}

export function createProjectDomainsFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectDomains, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectDomains$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectDomains' from JSON`,
  );
}

/** @internal */
export const CreateProjectCustomEnvironments$inboundSchema: z.ZodType<
  CreateProjectCustomEnvironments,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  slug: z.string(),
  type: CreateProjectProjectsResponse200Type$inboundSchema,
  description: z.string().optional(),
  branchMatcher: z.lazy(() => CreateProjectBranchMatcher$inboundSchema)
    .optional(),
  domains: z.array(z.lazy(() => CreateProjectDomains$inboundSchema)).optional(),
  currentDeploymentAliases: z.array(z.string()).optional(),
  createdAt: z.number(),
  updatedAt: z.number(),
});

/** @internal */
export type CreateProjectCustomEnvironments$Outbound = {
  id: string;
  slug: string;
  type: string;
  description?: string | undefined;
  branchMatcher?: CreateProjectBranchMatcher$Outbound | undefined;
  domains?: Array<CreateProjectDomains$Outbound> | undefined;
  currentDeploymentAliases?: Array<string> | undefined;
  createdAt: number;
  updatedAt: number;
};

/** @internal */
export const CreateProjectCustomEnvironments$outboundSchema: z.ZodType<
  CreateProjectCustomEnvironments$Outbound,
  z.ZodTypeDef,
  CreateProjectCustomEnvironments
> = z.object({
  id: z.string(),
  slug: z.string(),
  type: CreateProjectProjectsResponse200Type$outboundSchema,
  description: z.string().optional(),
  branchMatcher: z.lazy(() => CreateProjectBranchMatcher$outboundSchema)
    .optional(),
  domains: z.array(z.lazy(() => CreateProjectDomains$outboundSchema))
    .optional(),
  currentDeploymentAliases: z.array(z.string()).optional(),
  createdAt: z.number(),
  updatedAt: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectCustomEnvironments$ {
  /** @deprecated use `CreateProjectCustomEnvironments$inboundSchema` instead. */
  export const inboundSchema = CreateProjectCustomEnvironments$inboundSchema;
  /** @deprecated use `CreateProjectCustomEnvironments$outboundSchema` instead. */
  export const outboundSchema = CreateProjectCustomEnvironments$outboundSchema;
  /** @deprecated use `CreateProjectCustomEnvironments$Outbound` instead. */
  export type Outbound = CreateProjectCustomEnvironments$Outbound;
}

export function createProjectCustomEnvironmentsToJSON(
  createProjectCustomEnvironments: CreateProjectCustomEnvironments,
): string {
  return JSON.stringify(
    CreateProjectCustomEnvironments$outboundSchema.parse(
      createProjectCustomEnvironments,
    ),
  );
}

export function createProjectCustomEnvironmentsFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectCustomEnvironments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectCustomEnvironments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectCustomEnvironments' from JSON`,
  );
}

/** @internal */
export const CreateProjectProjectsFramework$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectProjectsFramework
> = z.nativeEnum(CreateProjectProjectsFramework);

/** @internal */
export const CreateProjectProjectsFramework$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectProjectsFramework
> = CreateProjectProjectsFramework$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectProjectsFramework$ {
  /** @deprecated use `CreateProjectProjectsFramework$inboundSchema` instead. */
  export const inboundSchema = CreateProjectProjectsFramework$inboundSchema;
  /** @deprecated use `CreateProjectProjectsFramework$outboundSchema` instead. */
  export const outboundSchema = CreateProjectProjectsFramework$outboundSchema;
}

/** @internal */
export const CreateProjectIpBuckets$inboundSchema: z.ZodType<
  CreateProjectIpBuckets,
  z.ZodTypeDef,
  unknown
> = z.object({
  bucket: z.string(),
  supportUntil: z.number().optional(),
});

/** @internal */
export type CreateProjectIpBuckets$Outbound = {
  bucket: string;
  supportUntil?: number | undefined;
};

/** @internal */
export const CreateProjectIpBuckets$outboundSchema: z.ZodType<
  CreateProjectIpBuckets$Outbound,
  z.ZodTypeDef,
  CreateProjectIpBuckets
> = z.object({
  bucket: z.string(),
  supportUntil: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectIpBuckets$ {
  /** @deprecated use `CreateProjectIpBuckets$inboundSchema` instead. */
  export const inboundSchema = CreateProjectIpBuckets$inboundSchema;
  /** @deprecated use `CreateProjectIpBuckets$outboundSchema` instead. */
  export const outboundSchema = CreateProjectIpBuckets$outboundSchema;
  /** @deprecated use `CreateProjectIpBuckets$Outbound` instead. */
  export type Outbound = CreateProjectIpBuckets$Outbound;
}

export function createProjectIpBucketsToJSON(
  createProjectIpBuckets: CreateProjectIpBuckets,
): string {
  return JSON.stringify(
    CreateProjectIpBuckets$outboundSchema.parse(createProjectIpBuckets),
  );
}

export function createProjectIpBucketsFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectIpBuckets, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectIpBuckets$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectIpBuckets' from JSON`,
  );
}

/** @internal */
export const CreateProjectAliasAssigned$inboundSchema: z.ZodType<
  CreateProjectAliasAssigned,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.boolean()]);

/** @internal */
export type CreateProjectAliasAssigned$Outbound = number | boolean;

/** @internal */
export const CreateProjectAliasAssigned$outboundSchema: z.ZodType<
  CreateProjectAliasAssigned$Outbound,
  z.ZodTypeDef,
  CreateProjectAliasAssigned
> = z.union([z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectAliasAssigned$ {
  /** @deprecated use `CreateProjectAliasAssigned$inboundSchema` instead. */
  export const inboundSchema = CreateProjectAliasAssigned$inboundSchema;
  /** @deprecated use `CreateProjectAliasAssigned$outboundSchema` instead. */
  export const outboundSchema = CreateProjectAliasAssigned$outboundSchema;
  /** @deprecated use `CreateProjectAliasAssigned$Outbound` instead. */
  export type Outbound = CreateProjectAliasAssigned$Outbound;
}

export function createProjectAliasAssignedToJSON(
  createProjectAliasAssigned: CreateProjectAliasAssigned,
): string {
  return JSON.stringify(
    CreateProjectAliasAssigned$outboundSchema.parse(createProjectAliasAssigned),
  );
}

export function createProjectAliasAssignedFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectAliasAssigned, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectAliasAssigned$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectAliasAssigned' from JSON`,
  );
}

/** @internal */
export const CreateProjectAliasError$inboundSchema: z.ZodType<
  CreateProjectAliasError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
});

/** @internal */
export type CreateProjectAliasError$Outbound = {
  code: string;
  message: string;
};

/** @internal */
export const CreateProjectAliasError$outboundSchema: z.ZodType<
  CreateProjectAliasError$Outbound,
  z.ZodTypeDef,
  CreateProjectAliasError
> = z.object({
  code: z.string(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectAliasError$ {
  /** @deprecated use `CreateProjectAliasError$inboundSchema` instead. */
  export const inboundSchema = CreateProjectAliasError$inboundSchema;
  /** @deprecated use `CreateProjectAliasError$outboundSchema` instead. */
  export const outboundSchema = CreateProjectAliasError$outboundSchema;
  /** @deprecated use `CreateProjectAliasError$Outbound` instead. */
  export type Outbound = CreateProjectAliasError$Outbound;
}

export function createProjectAliasErrorToJSON(
  createProjectAliasError: CreateProjectAliasError,
): string {
  return JSON.stringify(
    CreateProjectAliasError$outboundSchema.parse(createProjectAliasError),
  );
}

export function createProjectAliasErrorFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectAliasError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectAliasError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectAliasError' from JSON`,
  );
}

/** @internal */
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType
  > = z.nativeEnum(
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType,
  );

/** @internal */
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType
  > =
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$ {
  /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$inboundSchema;
  /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$outboundSchema;
}

/** @internal */
export const CreateProjectProjectsBranchMatcher$inboundSchema: z.ZodType<
  CreateProjectProjectsBranchMatcher,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$inboundSchema,
  pattern: z.string(),
});

/** @internal */
export type CreateProjectProjectsBranchMatcher$Outbound = {
  type: string;
  pattern: string;
};

/** @internal */
export const CreateProjectProjectsBranchMatcher$outboundSchema: z.ZodType<
  CreateProjectProjectsBranchMatcher$Outbound,
  z.ZodTypeDef,
  CreateProjectProjectsBranchMatcher
> = z.object({
  type:
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$outboundSchema,
  pattern: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectProjectsBranchMatcher$ {
  /** @deprecated use `CreateProjectProjectsBranchMatcher$inboundSchema` instead. */
  export const inboundSchema = CreateProjectProjectsBranchMatcher$inboundSchema;
  /** @deprecated use `CreateProjectProjectsBranchMatcher$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectProjectsBranchMatcher$outboundSchema;
  /** @deprecated use `CreateProjectProjectsBranchMatcher$Outbound` instead. */
  export type Outbound = CreateProjectProjectsBranchMatcher$Outbound;
}

export function createProjectProjectsBranchMatcherToJSON(
  createProjectProjectsBranchMatcher: CreateProjectProjectsBranchMatcher,
): string {
  return JSON.stringify(
    CreateProjectProjectsBranchMatcher$outboundSchema.parse(
      createProjectProjectsBranchMatcher,
    ),
  );
}

export function createProjectProjectsBranchMatcherFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectProjectsBranchMatcher, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateProjectProjectsBranchMatcher$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectProjectsBranchMatcher' from JSON`,
  );
}

/** @internal */
export const CreateProjectBuilds$inboundSchema: z.ZodType<
  CreateProjectBuilds,
  z.ZodTypeDef,
  unknown
> = z.object({
  use: z.string(),
  src: z.string().optional(),
  dest: z.string().optional(),
});

/** @internal */
export type CreateProjectBuilds$Outbound = {
  use: string;
  src?: string | undefined;
  dest?: string | undefined;
};

/** @internal */
export const CreateProjectBuilds$outboundSchema: z.ZodType<
  CreateProjectBuilds$Outbound,
  z.ZodTypeDef,
  CreateProjectBuilds
> = z.object({
  use: z.string(),
  src: z.string().optional(),
  dest: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectBuilds$ {
  /** @deprecated use `CreateProjectBuilds$inboundSchema` instead. */
  export const inboundSchema = CreateProjectBuilds$inboundSchema;
  /** @deprecated use `CreateProjectBuilds$outboundSchema` instead. */
  export const outboundSchema = CreateProjectBuilds$outboundSchema;
  /** @deprecated use `CreateProjectBuilds$Outbound` instead. */
  export type Outbound = CreateProjectBuilds$Outbound;
}

export function createProjectBuildsToJSON(
  createProjectBuilds: CreateProjectBuilds,
): string {
  return JSON.stringify(
    CreateProjectBuilds$outboundSchema.parse(createProjectBuilds),
  );
}

export function createProjectBuildsFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectBuilds, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectBuilds$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectBuilds' from JSON`,
  );
}

/** @internal */
export const CreateProjectChecksConclusion$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectChecksConclusion
> = z.nativeEnum(CreateProjectChecksConclusion);

/** @internal */
export const CreateProjectChecksConclusion$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectChecksConclusion
> = CreateProjectChecksConclusion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectChecksConclusion$ {
  /** @deprecated use `CreateProjectChecksConclusion$inboundSchema` instead. */
  export const inboundSchema = CreateProjectChecksConclusion$inboundSchema;
  /** @deprecated use `CreateProjectChecksConclusion$outboundSchema` instead. */
  export const outboundSchema = CreateProjectChecksConclusion$outboundSchema;
}

/** @internal */
export const CreateProjectChecksState$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectChecksState
> = z.nativeEnum(CreateProjectChecksState);

/** @internal */
export const CreateProjectChecksState$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectChecksState
> = CreateProjectChecksState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectChecksState$ {
  /** @deprecated use `CreateProjectChecksState$inboundSchema` instead. */
  export const inboundSchema = CreateProjectChecksState$inboundSchema;
  /** @deprecated use `CreateProjectChecksState$outboundSchema` instead. */
  export const outboundSchema = CreateProjectChecksState$outboundSchema;
}

/** @internal */
export const CreateProjectCreator$inboundSchema: z.ZodType<
  CreateProjectCreator,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string(),
  githubLogin: z.string().optional(),
  gitlabLogin: z.string().optional(),
  uid: z.string(),
  username: z.string(),
});

/** @internal */
export type CreateProjectCreator$Outbound = {
  email: string;
  githubLogin?: string | undefined;
  gitlabLogin?: string | undefined;
  uid: string;
  username: string;
};

/** @internal */
export const CreateProjectCreator$outboundSchema: z.ZodType<
  CreateProjectCreator$Outbound,
  z.ZodTypeDef,
  CreateProjectCreator
> = z.object({
  email: z.string(),
  githubLogin: z.string().optional(),
  gitlabLogin: z.string().optional(),
  uid: z.string(),
  username: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectCreator$ {
  /** @deprecated use `CreateProjectCreator$inboundSchema` instead. */
  export const inboundSchema = CreateProjectCreator$inboundSchema;
  /** @deprecated use `CreateProjectCreator$outboundSchema` instead. */
  export const outboundSchema = CreateProjectCreator$outboundSchema;
  /** @deprecated use `CreateProjectCreator$Outbound` instead. */
  export type Outbound = CreateProjectCreator$Outbound;
}

export function createProjectCreatorToJSON(
  createProjectCreator: CreateProjectCreator,
): string {
  return JSON.stringify(
    CreateProjectCreator$outboundSchema.parse(createProjectCreator),
  );
}

export function createProjectCreatorFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectCreator, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectCreator$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectCreator' from JSON`,
  );
}

/** @internal */
export const CreateProjectOidcTokenClaims$inboundSchema: z.ZodType<
  CreateProjectOidcTokenClaims,
  z.ZodTypeDef,
  unknown
> = z.object({
  iss: z.string(),
  sub: z.string(),
  scope: z.string(),
  aud: z.string(),
  owner: z.string(),
  owner_id: z.string(),
  project: z.string(),
  project_id: z.string(),
  environment: z.string(),
}).transform((v) => {
  return remap$(v, {
    "owner_id": "ownerId",
    "project_id": "projectId",
  });
});

/** @internal */
export type CreateProjectOidcTokenClaims$Outbound = {
  iss: string;
  sub: string;
  scope: string;
  aud: string;
  owner: string;
  owner_id: string;
  project: string;
  project_id: string;
  environment: string;
};

/** @internal */
export const CreateProjectOidcTokenClaims$outboundSchema: z.ZodType<
  CreateProjectOidcTokenClaims$Outbound,
  z.ZodTypeDef,
  CreateProjectOidcTokenClaims
> = z.object({
  iss: z.string(),
  sub: z.string(),
  scope: z.string(),
  aud: z.string(),
  owner: z.string(),
  ownerId: z.string(),
  project: z.string(),
  projectId: z.string(),
  environment: z.string(),
}).transform((v) => {
  return remap$(v, {
    ownerId: "owner_id",
    projectId: "project_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectOidcTokenClaims$ {
  /** @deprecated use `CreateProjectOidcTokenClaims$inboundSchema` instead. */
  export const inboundSchema = CreateProjectOidcTokenClaims$inboundSchema;
  /** @deprecated use `CreateProjectOidcTokenClaims$outboundSchema` instead. */
  export const outboundSchema = CreateProjectOidcTokenClaims$outboundSchema;
  /** @deprecated use `CreateProjectOidcTokenClaims$Outbound` instead. */
  export type Outbound = CreateProjectOidcTokenClaims$Outbound;
}

export function createProjectOidcTokenClaimsToJSON(
  createProjectOidcTokenClaims: CreateProjectOidcTokenClaims,
): string {
  return JSON.stringify(
    CreateProjectOidcTokenClaims$outboundSchema.parse(
      createProjectOidcTokenClaims,
    ),
  );
}

export function createProjectOidcTokenClaimsFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectOidcTokenClaims, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectOidcTokenClaims$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectOidcTokenClaims' from JSON`,
  );
}

/** @internal */
export const CreateProjectPlan$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectPlan
> = z.nativeEnum(CreateProjectPlan);

/** @internal */
export const CreateProjectPlan$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectPlan
> = CreateProjectPlan$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectPlan$ {
  /** @deprecated use `CreateProjectPlan$inboundSchema` instead. */
  export const inboundSchema = CreateProjectPlan$inboundSchema;
  /** @deprecated use `CreateProjectPlan$outboundSchema` instead. */
  export const outboundSchema = CreateProjectPlan$outboundSchema;
}

/** @internal */
export const CreateProjectReadyState$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectReadyState
> = z.nativeEnum(CreateProjectReadyState);

/** @internal */
export const CreateProjectReadyState$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectReadyState
> = CreateProjectReadyState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectReadyState$ {
  /** @deprecated use `CreateProjectReadyState$inboundSchema` instead. */
  export const inboundSchema = CreateProjectReadyState$inboundSchema;
  /** @deprecated use `CreateProjectReadyState$outboundSchema` instead. */
  export const outboundSchema = CreateProjectReadyState$outboundSchema;
}

/** @internal */
export const CreateProjectReadySubstate$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectReadySubstate
> = z.nativeEnum(CreateProjectReadySubstate);

/** @internal */
export const CreateProjectReadySubstate$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectReadySubstate
> = CreateProjectReadySubstate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectReadySubstate$ {
  /** @deprecated use `CreateProjectReadySubstate$inboundSchema` instead. */
  export const inboundSchema = CreateProjectReadySubstate$inboundSchema;
  /** @deprecated use `CreateProjectReadySubstate$outboundSchema` instead. */
  export const outboundSchema = CreateProjectReadySubstate$outboundSchema;
}

/** @internal */
export const CreateProjectProjectsResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<typeof CreateProjectProjectsResponse200ApplicationJSONType> =
    z.nativeEnum(CreateProjectProjectsResponse200ApplicationJSONType);

/** @internal */
export const CreateProjectProjectsResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<typeof CreateProjectProjectsResponse200ApplicationJSONType> =
    CreateProjectProjectsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectProjectsResponse200ApplicationJSONType$ {
  /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectProjectsResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectProjectsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const CreateProjectLatestDeployments$inboundSchema: z.ZodType<
  CreateProjectLatestDeployments,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  alias: z.array(z.string()).optional(),
  aliasAssigned: z.nullable(z.union([z.number(), z.boolean()])).optional(),
  aliasError: z.nullable(z.lazy(() => CreateProjectAliasError$inboundSchema))
    .optional(),
  aliasFinal: z.nullable(z.string()).optional(),
  automaticAliases: z.array(z.string()).optional(),
  branchMatcher: z.lazy(() => CreateProjectProjectsBranchMatcher$inboundSchema)
    .optional(),
  buildingAt: z.number().optional(),
  builds: z.array(z.lazy(() => CreateProjectBuilds$inboundSchema)).optional(),
  checksConclusion: CreateProjectChecksConclusion$inboundSchema.optional(),
  checksState: CreateProjectChecksState$inboundSchema.optional(),
  connectBuildsEnabled: z.boolean().optional(),
  connectConfigurationId: z.string().optional(),
  createdAt: z.number(),
  createdIn: z.string(),
  creator: z.nullable(z.lazy(() => CreateProjectCreator$inboundSchema)),
  deletedAt: z.number().optional(),
  deploymentHostname: z.string(),
  forced: z.boolean().optional(),
  name: z.string(),
  meta: z.record(z.string()).optional(),
  monorepoManager: z.nullable(z.string()).optional(),
  oidcTokenClaims: z.lazy(() => CreateProjectOidcTokenClaims$inboundSchema)
    .optional(),
  plan: CreateProjectPlan$inboundSchema,
  previewCommentsEnabled: z.boolean().optional(),
  private: z.boolean(),
  readyAt: z.number().optional(),
  readyState: CreateProjectReadyState$inboundSchema,
  readySubstate: CreateProjectReadySubstate$inboundSchema.optional(),
  requestedAt: z.number().optional(),
  target: z.nullable(z.string()).optional(),
  teamId: z.nullable(z.string()).optional(),
  type: CreateProjectProjectsResponse200ApplicationJSONType$inboundSchema,
  url: z.string(),
  userId: z.string(),
  withCache: z.boolean().optional(),
});

/** @internal */
export type CreateProjectLatestDeployments$Outbound = {
  id: string;
  alias?: Array<string> | undefined;
  aliasAssigned?: number | boolean | null | undefined;
  aliasError?: CreateProjectAliasError$Outbound | null | undefined;
  aliasFinal?: string | null | undefined;
  automaticAliases?: Array<string> | undefined;
  branchMatcher?: CreateProjectProjectsBranchMatcher$Outbound | undefined;
  buildingAt?: number | undefined;
  builds?: Array<CreateProjectBuilds$Outbound> | undefined;
  checksConclusion?: string | undefined;
  checksState?: string | undefined;
  connectBuildsEnabled?: boolean | undefined;
  connectConfigurationId?: string | undefined;
  createdAt: number;
  createdIn: string;
  creator: CreateProjectCreator$Outbound | null;
  deletedAt?: number | undefined;
  deploymentHostname: string;
  forced?: boolean | undefined;
  name: string;
  meta?: { [k: string]: string } | undefined;
  monorepoManager?: string | null | undefined;
  oidcTokenClaims?: CreateProjectOidcTokenClaims$Outbound | undefined;
  plan: string;
  previewCommentsEnabled?: boolean | undefined;
  private: boolean;
  readyAt?: number | undefined;
  readyState: string;
  readySubstate?: string | undefined;
  requestedAt?: number | undefined;
  target?: string | null | undefined;
  teamId?: string | null | undefined;
  type: string;
  url: string;
  userId: string;
  withCache?: boolean | undefined;
};

/** @internal */
export const CreateProjectLatestDeployments$outboundSchema: z.ZodType<
  CreateProjectLatestDeployments$Outbound,
  z.ZodTypeDef,
  CreateProjectLatestDeployments
> = z.object({
  id: z.string(),
  alias: z.array(z.string()).optional(),
  aliasAssigned: z.nullable(z.union([z.number(), z.boolean()])).optional(),
  aliasError: z.nullable(z.lazy(() => CreateProjectAliasError$outboundSchema))
    .optional(),
  aliasFinal: z.nullable(z.string()).optional(),
  automaticAliases: z.array(z.string()).optional(),
  branchMatcher: z.lazy(() => CreateProjectProjectsBranchMatcher$outboundSchema)
    .optional(),
  buildingAt: z.number().optional(),
  builds: z.array(z.lazy(() => CreateProjectBuilds$outboundSchema)).optional(),
  checksConclusion: CreateProjectChecksConclusion$outboundSchema.optional(),
  checksState: CreateProjectChecksState$outboundSchema.optional(),
  connectBuildsEnabled: z.boolean().optional(),
  connectConfigurationId: z.string().optional(),
  createdAt: z.number(),
  createdIn: z.string(),
  creator: z.nullable(z.lazy(() => CreateProjectCreator$outboundSchema)),
  deletedAt: z.number().optional(),
  deploymentHostname: z.string(),
  forced: z.boolean().optional(),
  name: z.string(),
  meta: z.record(z.string()).optional(),
  monorepoManager: z.nullable(z.string()).optional(),
  oidcTokenClaims: z.lazy(() => CreateProjectOidcTokenClaims$outboundSchema)
    .optional(),
  plan: CreateProjectPlan$outboundSchema,
  previewCommentsEnabled: z.boolean().optional(),
  private: z.boolean(),
  readyAt: z.number().optional(),
  readyState: CreateProjectReadyState$outboundSchema,
  readySubstate: CreateProjectReadySubstate$outboundSchema.optional(),
  requestedAt: z.number().optional(),
  target: z.nullable(z.string()).optional(),
  teamId: z.nullable(z.string()).optional(),
  type: CreateProjectProjectsResponse200ApplicationJSONType$outboundSchema,
  url: z.string(),
  userId: z.string(),
  withCache: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectLatestDeployments$ {
  /** @deprecated use `CreateProjectLatestDeployments$inboundSchema` instead. */
  export const inboundSchema = CreateProjectLatestDeployments$inboundSchema;
  /** @deprecated use `CreateProjectLatestDeployments$outboundSchema` instead. */
  export const outboundSchema = CreateProjectLatestDeployments$outboundSchema;
  /** @deprecated use `CreateProjectLatestDeployments$Outbound` instead. */
  export type Outbound = CreateProjectLatestDeployments$Outbound;
}

export function createProjectLatestDeploymentsToJSON(
  createProjectLatestDeployments: CreateProjectLatestDeployments,
): string {
  return JSON.stringify(
    CreateProjectLatestDeployments$outboundSchema.parse(
      createProjectLatestDeployments,
    ),
  );
}

export function createProjectLatestDeploymentsFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectLatestDeployments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectLatestDeployments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectLatestDeployments' from JSON`,
  );
}

/** @internal */
export const CreateProjectLinkProjectsResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectLinkProjectsResponse200ApplicationJSONType
  > = z.nativeEnum(CreateProjectLinkProjectsResponse200ApplicationJSONType);

/** @internal */
export const CreateProjectLinkProjectsResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectLinkProjectsResponse200ApplicationJSONType
  > = CreateProjectLinkProjectsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectLinkProjectsResponse200ApplicationJSONType$ {
  /** @deprecated use `CreateProjectLinkProjectsResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectLinkProjectsResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `CreateProjectLinkProjectsResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectLinkProjectsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$inboundSchema:
  z.ZodType<
    CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
  });

/** @internal */
export type CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$Outbound =
  {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
  };

/** @internal */
export const CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$outboundSchema:
  z.ZodType<
    CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$Outbound,
    z.ZodTypeDef,
    CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks
  > = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$ {
  /** @deprecated use `CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$inboundSchema;
  /** @deprecated use `CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$outboundSchema;
  /** @deprecated use `CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$Outbound` instead. */
  export type Outbound =
    CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$Outbound;
}

export function createProjectLinkProjectsResponse200ApplicationJSONDeployHooksToJSON(
  createProjectLinkProjectsResponse200ApplicationJSONDeployHooks:
    CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks,
): string {
  return JSON.stringify(
    CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$outboundSchema
      .parse(createProjectLinkProjectsResponse200ApplicationJSONDeployHooks),
  );
}

export function createProjectLinkProjectsResponse200ApplicationJSONDeployHooksFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks' from JSON`,
  );
}

/** @internal */
export const CreateProjectLink5$inboundSchema: z.ZodType<
  CreateProjectLink5,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  slug: z.string(),
  owner: z.string(),
  type: CreateProjectLinkProjectsResponse200ApplicationJSONType$inboundSchema,
  uuid: z.string(),
  workspaceUuid: z.string(),
  createdAt: z.number().optional(),
  deployHooks: z.array(
    z.lazy(() =>
      CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$inboundSchema
    ),
  ),
  gitCredentialId: z.string(),
  updatedAt: z.number().optional(),
  sourceless: z.boolean().optional(),
  productionBranch: z.string(),
});

/** @internal */
export type CreateProjectLink5$Outbound = {
  name: string;
  slug: string;
  owner: string;
  type: string;
  uuid: string;
  workspaceUuid: string;
  createdAt?: number | undefined;
  deployHooks: Array<
    CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$Outbound
  >;
  gitCredentialId: string;
  updatedAt?: number | undefined;
  sourceless?: boolean | undefined;
  productionBranch: string;
};

/** @internal */
export const CreateProjectLink5$outboundSchema: z.ZodType<
  CreateProjectLink5$Outbound,
  z.ZodTypeDef,
  CreateProjectLink5
> = z.object({
  name: z.string(),
  slug: z.string(),
  owner: z.string(),
  type: CreateProjectLinkProjectsResponse200ApplicationJSONType$outboundSchema,
  uuid: z.string(),
  workspaceUuid: z.string(),
  createdAt: z.number().optional(),
  deployHooks: z.array(
    z.lazy(() =>
      CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$outboundSchema
    ),
  ),
  gitCredentialId: z.string(),
  updatedAt: z.number().optional(),
  sourceless: z.boolean().optional(),
  productionBranch: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectLink5$ {
  /** @deprecated use `CreateProjectLink5$inboundSchema` instead. */
  export const inboundSchema = CreateProjectLink5$inboundSchema;
  /** @deprecated use `CreateProjectLink5$outboundSchema` instead. */
  export const outboundSchema = CreateProjectLink5$outboundSchema;
  /** @deprecated use `CreateProjectLink5$Outbound` instead. */
  export type Outbound = CreateProjectLink5$Outbound;
}

export function createProjectLink5ToJSON(
  createProjectLink5: CreateProjectLink5,
): string {
  return JSON.stringify(
    CreateProjectLink5$outboundSchema.parse(createProjectLink5),
  );
}

export function createProjectLink5FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectLink5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectLink5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectLink5' from JSON`,
  );
}

/** @internal */
export const CreateProjectLinkProjectsResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof CreateProjectLinkProjectsResponse200Type> = z
    .nativeEnum(CreateProjectLinkProjectsResponse200Type);

/** @internal */
export const CreateProjectLinkProjectsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof CreateProjectLinkProjectsResponse200Type> =
    CreateProjectLinkProjectsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectLinkProjectsResponse200Type$ {
  /** @deprecated use `CreateProjectLinkProjectsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectLinkProjectsResponse200Type$inboundSchema;
  /** @deprecated use `CreateProjectLinkProjectsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectLinkProjectsResponse200Type$outboundSchema;
}

/** @internal */
export const CreateProjectLinkProjectsResponse200DeployHooks$inboundSchema:
  z.ZodType<
    CreateProjectLinkProjectsResponse200DeployHooks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
  });

/** @internal */
export type CreateProjectLinkProjectsResponse200DeployHooks$Outbound = {
  createdAt?: number | undefined;
  id: string;
  name: string;
  ref: string;
  url: string;
};

/** @internal */
export const CreateProjectLinkProjectsResponse200DeployHooks$outboundSchema:
  z.ZodType<
    CreateProjectLinkProjectsResponse200DeployHooks$Outbound,
    z.ZodTypeDef,
    CreateProjectLinkProjectsResponse200DeployHooks
  > = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectLinkProjectsResponse200DeployHooks$ {
  /** @deprecated use `CreateProjectLinkProjectsResponse200DeployHooks$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectLinkProjectsResponse200DeployHooks$inboundSchema;
  /** @deprecated use `CreateProjectLinkProjectsResponse200DeployHooks$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectLinkProjectsResponse200DeployHooks$outboundSchema;
  /** @deprecated use `CreateProjectLinkProjectsResponse200DeployHooks$Outbound` instead. */
  export type Outbound =
    CreateProjectLinkProjectsResponse200DeployHooks$Outbound;
}

export function createProjectLinkProjectsResponse200DeployHooksToJSON(
  createProjectLinkProjectsResponse200DeployHooks:
    CreateProjectLinkProjectsResponse200DeployHooks,
): string {
  return JSON.stringify(
    CreateProjectLinkProjectsResponse200DeployHooks$outboundSchema.parse(
      createProjectLinkProjectsResponse200DeployHooks,
    ),
  );
}

export function createProjectLinkProjectsResponse200DeployHooksFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateProjectLinkProjectsResponse200DeployHooks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateProjectLinkProjectsResponse200DeployHooks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateProjectLinkProjectsResponse200DeployHooks' from JSON`,
  );
}

/** @internal */
export const CreateProjectLink4$inboundSchema: z.ZodType<
  CreateProjectLink4,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectId: z.string(),
  projectName: z.string(),
  projectNameWithNamespace: z.string(),
  projectNamespace: z.string(),
  projectOwnerId: z.number().optional(),
  projectUrl: z.string(),
  type: CreateProjectLinkProjectsResponse200Type$inboundSchema,
  createdAt: z.number().optional(),
  deployHooks: z.array(
    z.lazy(() => CreateProjectLinkProjectsResponse200DeployHooks$inboundSchema),
  ),
  gitCredentialId: z.string(),
  updatedAt: z.number().optional(),
  sourceless: z.boolean().optional(),
  productionBranch: z.string(),
});

/** @internal */
export type CreateProjectLink4$Outbound = {
  projectId: string;
  projectName: string;
  projectNameWithNamespace: string;
  projectNamespace: string;
  projectOwnerId?: number | undefined;
  projectUrl: string;
  type: string;
  createdAt?: number | undefined;
  deployHooks: Array<CreateProjectLinkProjectsResponse200DeployHooks$Outbound>;
  gitCredentialId: string;
  updatedAt?: number | undefined;
  sourceless?: boolean | undefined;
  productionBranch: string;
};

/** @internal */
export const CreateProjectLink4$outboundSchema: z.ZodType<
  CreateProjectLink4$Outbound,
  z.ZodTypeDef,
  CreateProjectLink4
> = z.object({
  projectId: z.string(),
  projectName: z.string(),
  projectNameWithNamespace: z.string(),
  projectNamespace: z.string(),
  projectOwnerId: z.number().optional(),
  projectUrl: z.string(),
  type: CreateProjectLinkProjectsResponse200Type$outboundSchema,
  createdAt: z.number().optional(),
  deployHooks: z.array(
    z.lazy(() =>
      CreateProjectLinkProjectsResponse200DeployHooks$outboundSchema
    ),
  ),
  gitCredentialId: z.string(),
  updatedAt: z.number().optional(),
  sourceless: z.boolean().optional(),
  productionBranch: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectLink4$ {
  /** @deprecated use `CreateProjectLink4$inboundSchema` instead. */
  export const inboundSchema = CreateProjectLink4$inboundSchema;
  /** @deprecated use `CreateProjectLink4$outboundSchema` instead. */
  export const outboundSchema = CreateProjectLink4$outboundSchema;
  /** @deprecated use `CreateProjectLink4$Outbound` instead. */
  export type Outbound = CreateProjectLink4$Outbound;
}

export function createProjectLink4ToJSON(
  createProjectLink4: CreateProjectLink4,
): string {
  return JSON.stringify(
    CreateProjectLink4$outboundSchema.parse(createProjectLink4),
  );
}

export function createProjectLink4FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectLink4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectLink4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectLink4' from JSON`,
  );
}

/** @internal */
export const CreateProjectLinkProjectsResponseType$inboundSchema:
  z.ZodNativeEnum<typeof CreateProjectLinkProjectsResponseType> = z.nativeEnum(
    CreateProjectLinkProjectsResponseType,
  );

/** @internal */
export const CreateProjectLinkProjectsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof CreateProjectLinkProjectsResponseType> =
    CreateProjectLinkProjectsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectLinkProjectsResponseType$ {
  /** @deprecated use `CreateProjectLinkProjectsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectLinkProjectsResponseType$inboundSchema;
  /** @deprecated use `CreateProjectLinkProjectsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectLinkProjectsResponseType$outboundSchema;
}

/** @internal */
export const CreateProjectLinkProjectsResponseDeployHooks$inboundSchema:
  z.ZodType<
    CreateProjectLinkProjectsResponseDeployHooks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
  });

/** @internal */
export type CreateProjectLinkProjectsResponseDeployHooks$Outbound = {
  createdAt?: number | undefined;
  id: string;
  name: string;
  ref: string;
  url: string;
};

/** @internal */
export const CreateProjectLinkProjectsResponseDeployHooks$outboundSchema:
  z.ZodType<
    CreateProjectLinkProjectsResponseDeployHooks$Outbound,
    z.ZodTypeDef,
    CreateProjectLinkProjectsResponseDeployHooks
  > = z.object({
    createdAt: z.number().optional(),
    id: z.string(),
    name: z.string(),
    ref: z.string(),
    url: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectLinkProjectsResponseDeployHooks$ {
  /** @deprecated use `CreateProjectLinkProjectsResponseDeployHooks$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectLinkProjectsResponseDeployHooks$inboundSchema;
  /** @deprecated use `CreateProjectLinkProjectsResponseDeployHooks$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectLinkProjectsResponseDeployHooks$outboundSchema;
  /** @deprecated use `CreateProjectLinkProjectsResponseDeployHooks$Outbound` instead. */
  export type Outbound = CreateProjectLinkProjectsResponseDeployHooks$Outbound;
}

export function createProjectLinkProjectsResponseDeployHooksToJSON(
  createProjectLinkProjectsResponseDeployHooks:
    CreateProjectLinkProjectsResponseDeployHooks,
): string {
  return JSON.stringify(
    CreateProjectLinkProjectsResponseDeployHooks$outboundSchema.parse(
      createProjectLinkProjectsResponseDeployHooks,
    ),
  );
}

export function createProjectLinkProjectsResponseDeployHooksFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateProjectLinkProjectsResponseDeployHooks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateProjectLinkProjectsResponseDeployHooks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateProjectLinkProjectsResponseDeployHooks' from JSON`,
  );
}

/** @internal */
export const CreateProjectLink3$inboundSchema: z.ZodType<
  CreateProjectLink3,
  z.ZodTypeDef,
  unknown
> = z.object({
  org: z.string(),
  repoOwnerId: z.number().optional(),
  repo: z.string().optional(),
  repoId: z.number().optional(),
  type: CreateProjectLinkProjectsResponseType$inboundSchema,
  host: z.string(),
  createdAt: z.number().optional(),
  deployHooks: z.array(
    z.lazy(() => CreateProjectLinkProjectsResponseDeployHooks$inboundSchema),
  ),
  gitCredentialId: z.string(),
  updatedAt: z.number().optional(),
  sourceless: z.boolean().optional(),
  productionBranch: z.string(),
});

/** @internal */
export type CreateProjectLink3$Outbound = {
  org: string;
  repoOwnerId?: number | undefined;
  repo?: string | undefined;
  repoId?: number | undefined;
  type: string;
  host: string;
  createdAt?: number | undefined;
  deployHooks: Array<CreateProjectLinkProjectsResponseDeployHooks$Outbound>;
  gitCredentialId: string;
  updatedAt?: number | undefined;
  sourceless?: boolean | undefined;
  productionBranch: string;
};

/** @internal */
export const CreateProjectLink3$outboundSchema: z.ZodType<
  CreateProjectLink3$Outbound,
  z.ZodTypeDef,
  CreateProjectLink3
> = z.object({
  org: z.string(),
  repoOwnerId: z.number().optional(),
  repo: z.string().optional(),
  repoId: z.number().optional(),
  type: CreateProjectLinkProjectsResponseType$outboundSchema,
  host: z.string(),
  createdAt: z.number().optional(),
  deployHooks: z.array(
    z.lazy(() => CreateProjectLinkProjectsResponseDeployHooks$outboundSchema),
  ),
  gitCredentialId: z.string(),
  updatedAt: z.number().optional(),
  sourceless: z.boolean().optional(),
  productionBranch: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectLink3$ {
  /** @deprecated use `CreateProjectLink3$inboundSchema` instead. */
  export const inboundSchema = CreateProjectLink3$inboundSchema;
  /** @deprecated use `CreateProjectLink3$outboundSchema` instead. */
  export const outboundSchema = CreateProjectLink3$outboundSchema;
  /** @deprecated use `CreateProjectLink3$Outbound` instead. */
  export type Outbound = CreateProjectLink3$Outbound;
}

export function createProjectLink3ToJSON(
  createProjectLink3: CreateProjectLink3,
): string {
  return JSON.stringify(
    CreateProjectLink3$outboundSchema.parse(createProjectLink3),
  );
}

export function createProjectLink3FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectLink3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectLink3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectLink3' from JSON`,
  );
}

/** @internal */
export const CreateProjectLinkProjectsType$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectLinkProjectsType
> = z.nativeEnum(CreateProjectLinkProjectsType);

/** @internal */
export const CreateProjectLinkProjectsType$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectLinkProjectsType
> = CreateProjectLinkProjectsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectLinkProjectsType$ {
  /** @deprecated use `CreateProjectLinkProjectsType$inboundSchema` instead. */
  export const inboundSchema = CreateProjectLinkProjectsType$inboundSchema;
  /** @deprecated use `CreateProjectLinkProjectsType$outboundSchema` instead. */
  export const outboundSchema = CreateProjectLinkProjectsType$outboundSchema;
}

/** @internal */
export const CreateProjectLinkProjectsDeployHooks$inboundSchema: z.ZodType<
  CreateProjectLinkProjectsDeployHooks,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.number().optional(),
  id: z.string(),
  name: z.string(),
  ref: z.string(),
  url: z.string(),
});

/** @internal */
export type CreateProjectLinkProjectsDeployHooks$Outbound = {
  createdAt?: number | undefined;
  id: string;
  name: string;
  ref: string;
  url: string;
};

/** @internal */
export const CreateProjectLinkProjectsDeployHooks$outboundSchema: z.ZodType<
  CreateProjectLinkProjectsDeployHooks$Outbound,
  z.ZodTypeDef,
  CreateProjectLinkProjectsDeployHooks
> = z.object({
  createdAt: z.number().optional(),
  id: z.string(),
  name: z.string(),
  ref: z.string(),
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectLinkProjectsDeployHooks$ {
  /** @deprecated use `CreateProjectLinkProjectsDeployHooks$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectLinkProjectsDeployHooks$inboundSchema;
  /** @deprecated use `CreateProjectLinkProjectsDeployHooks$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectLinkProjectsDeployHooks$outboundSchema;
  /** @deprecated use `CreateProjectLinkProjectsDeployHooks$Outbound` instead. */
  export type Outbound = CreateProjectLinkProjectsDeployHooks$Outbound;
}

export function createProjectLinkProjectsDeployHooksToJSON(
  createProjectLinkProjectsDeployHooks: CreateProjectLinkProjectsDeployHooks,
): string {
  return JSON.stringify(
    CreateProjectLinkProjectsDeployHooks$outboundSchema.parse(
      createProjectLinkProjectsDeployHooks,
    ),
  );
}

export function createProjectLinkProjectsDeployHooksFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectLinkProjectsDeployHooks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateProjectLinkProjectsDeployHooks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectLinkProjectsDeployHooks' from JSON`,
  );
}

/** @internal */
export const CreateProjectLink2$inboundSchema: z.ZodType<
  CreateProjectLink2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateProjectLinkProjectsType$inboundSchema,
  repo: z.string().optional(),
  repoId: z.number().optional(),
  updatedAt: z.number().optional(),
  createdAt: z.number().optional(),
  org: z.string(),
  repoOwnerId: z.number().optional(),
  deployHooks: z.array(
    z.lazy(() => CreateProjectLinkProjectsDeployHooks$inboundSchema),
  ),
  gitCredentialId: z.string(),
  sourceless: z.boolean().optional(),
  productionBranch: z.string(),
});

/** @internal */
export type CreateProjectLink2$Outbound = {
  type: string;
  repo?: string | undefined;
  repoId?: number | undefined;
  updatedAt?: number | undefined;
  createdAt?: number | undefined;
  org: string;
  repoOwnerId?: number | undefined;
  deployHooks: Array<CreateProjectLinkProjectsDeployHooks$Outbound>;
  gitCredentialId: string;
  sourceless?: boolean | undefined;
  productionBranch: string;
};

/** @internal */
export const CreateProjectLink2$outboundSchema: z.ZodType<
  CreateProjectLink2$Outbound,
  z.ZodTypeDef,
  CreateProjectLink2
> = z.object({
  type: CreateProjectLinkProjectsType$outboundSchema,
  repo: z.string().optional(),
  repoId: z.number().optional(),
  updatedAt: z.number().optional(),
  createdAt: z.number().optional(),
  org: z.string(),
  repoOwnerId: z.number().optional(),
  deployHooks: z.array(
    z.lazy(() => CreateProjectLinkProjectsDeployHooks$outboundSchema),
  ),
  gitCredentialId: z.string(),
  sourceless: z.boolean().optional(),
  productionBranch: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectLink2$ {
  /** @deprecated use `CreateProjectLink2$inboundSchema` instead. */
  export const inboundSchema = CreateProjectLink2$inboundSchema;
  /** @deprecated use `CreateProjectLink2$outboundSchema` instead. */
  export const outboundSchema = CreateProjectLink2$outboundSchema;
  /** @deprecated use `CreateProjectLink2$Outbound` instead. */
  export type Outbound = CreateProjectLink2$Outbound;
}

export function createProjectLink2ToJSON(
  createProjectLink2: CreateProjectLink2,
): string {
  return JSON.stringify(
    CreateProjectLink2$outboundSchema.parse(createProjectLink2),
  );
}

export function createProjectLink2FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectLink2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectLink2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectLink2' from JSON`,
  );
}

/** @internal */
export const CreateProjectLinkType$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectLinkType
> = z.nativeEnum(CreateProjectLinkType);

/** @internal */
export const CreateProjectLinkType$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectLinkType
> = CreateProjectLinkType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectLinkType$ {
  /** @deprecated use `CreateProjectLinkType$inboundSchema` instead. */
  export const inboundSchema = CreateProjectLinkType$inboundSchema;
  /** @deprecated use `CreateProjectLinkType$outboundSchema` instead. */
  export const outboundSchema = CreateProjectLinkType$outboundSchema;
}

/** @internal */
export const CreateProjectLinkDeployHooks$inboundSchema: z.ZodType<
  CreateProjectLinkDeployHooks,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.number().optional(),
  id: z.string(),
  name: z.string(),
  ref: z.string(),
  url: z.string(),
});

/** @internal */
export type CreateProjectLinkDeployHooks$Outbound = {
  createdAt?: number | undefined;
  id: string;
  name: string;
  ref: string;
  url: string;
};

/** @internal */
export const CreateProjectLinkDeployHooks$outboundSchema: z.ZodType<
  CreateProjectLinkDeployHooks$Outbound,
  z.ZodTypeDef,
  CreateProjectLinkDeployHooks
> = z.object({
  createdAt: z.number().optional(),
  id: z.string(),
  name: z.string(),
  ref: z.string(),
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectLinkDeployHooks$ {
  /** @deprecated use `CreateProjectLinkDeployHooks$inboundSchema` instead. */
  export const inboundSchema = CreateProjectLinkDeployHooks$inboundSchema;
  /** @deprecated use `CreateProjectLinkDeployHooks$outboundSchema` instead. */
  export const outboundSchema = CreateProjectLinkDeployHooks$outboundSchema;
  /** @deprecated use `CreateProjectLinkDeployHooks$Outbound` instead. */
  export type Outbound = CreateProjectLinkDeployHooks$Outbound;
}

export function createProjectLinkDeployHooksToJSON(
  createProjectLinkDeployHooks: CreateProjectLinkDeployHooks,
): string {
  return JSON.stringify(
    CreateProjectLinkDeployHooks$outboundSchema.parse(
      createProjectLinkDeployHooks,
    ),
  );
}

export function createProjectLinkDeployHooksFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectLinkDeployHooks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectLinkDeployHooks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectLinkDeployHooks' from JSON`,
  );
}

/** @internal */
export const CreateProjectLink1$inboundSchema: z.ZodType<
  CreateProjectLink1,
  z.ZodTypeDef,
  unknown
> = z.object({
  org: z.string(),
  repoOwnerId: z.number().optional(),
  repo: z.string().optional(),
  repoId: z.number().optional(),
  type: CreateProjectLinkType$inboundSchema,
  createdAt: z.number().optional(),
  deployHooks: z.array(
    z.lazy(() => CreateProjectLinkDeployHooks$inboundSchema),
  ),
  gitCredentialId: z.string(),
  updatedAt: z.number().optional(),
  sourceless: z.boolean().optional(),
  productionBranch: z.string(),
});

/** @internal */
export type CreateProjectLink1$Outbound = {
  org: string;
  repoOwnerId?: number | undefined;
  repo?: string | undefined;
  repoId?: number | undefined;
  type: string;
  createdAt?: number | undefined;
  deployHooks: Array<CreateProjectLinkDeployHooks$Outbound>;
  gitCredentialId: string;
  updatedAt?: number | undefined;
  sourceless?: boolean | undefined;
  productionBranch: string;
};

/** @internal */
export const CreateProjectLink1$outboundSchema: z.ZodType<
  CreateProjectLink1$Outbound,
  z.ZodTypeDef,
  CreateProjectLink1
> = z.object({
  org: z.string(),
  repoOwnerId: z.number().optional(),
  repo: z.string().optional(),
  repoId: z.number().optional(),
  type: CreateProjectLinkType$outboundSchema,
  createdAt: z.number().optional(),
  deployHooks: z.array(
    z.lazy(() => CreateProjectLinkDeployHooks$outboundSchema),
  ),
  gitCredentialId: z.string(),
  updatedAt: z.number().optional(),
  sourceless: z.boolean().optional(),
  productionBranch: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectLink1$ {
  /** @deprecated use `CreateProjectLink1$inboundSchema` instead. */
  export const inboundSchema = CreateProjectLink1$inboundSchema;
  /** @deprecated use `CreateProjectLink1$outboundSchema` instead. */
  export const outboundSchema = CreateProjectLink1$outboundSchema;
  /** @deprecated use `CreateProjectLink1$Outbound` instead. */
  export type Outbound = CreateProjectLink1$Outbound;
}

export function createProjectLink1ToJSON(
  createProjectLink1: CreateProjectLink1,
): string {
  return JSON.stringify(
    CreateProjectLink1$outboundSchema.parse(createProjectLink1),
  );
}

export function createProjectLink1FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectLink1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectLink1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectLink1' from JSON`,
  );
}

/** @internal */
export const CreateProjectLink$inboundSchema: z.ZodType<
  CreateProjectLink,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateProjectLink4$inboundSchema),
  z.lazy(() => CreateProjectLink5$inboundSchema),
  z.lazy(() => CreateProjectLink3$inboundSchema),
  z.lazy(() => CreateProjectLink1$inboundSchema),
  z.lazy(() => CreateProjectLink2$inboundSchema),
]);

/** @internal */
export type CreateProjectLink$Outbound =
  | CreateProjectLink4$Outbound
  | CreateProjectLink5$Outbound
  | CreateProjectLink3$Outbound
  | CreateProjectLink1$Outbound
  | CreateProjectLink2$Outbound;

/** @internal */
export const CreateProjectLink$outboundSchema: z.ZodType<
  CreateProjectLink$Outbound,
  z.ZodTypeDef,
  CreateProjectLink
> = z.union([
  z.lazy(() => CreateProjectLink4$outboundSchema),
  z.lazy(() => CreateProjectLink5$outboundSchema),
  z.lazy(() => CreateProjectLink3$outboundSchema),
  z.lazy(() => CreateProjectLink1$outboundSchema),
  z.lazy(() => CreateProjectLink2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectLink$ {
  /** @deprecated use `CreateProjectLink$inboundSchema` instead. */
  export const inboundSchema = CreateProjectLink$inboundSchema;
  /** @deprecated use `CreateProjectLink$outboundSchema` instead. */
  export const outboundSchema = CreateProjectLink$outboundSchema;
  /** @deprecated use `CreateProjectLink$Outbound` instead. */
  export type Outbound = CreateProjectLink$Outbound;
}

export function createProjectLinkToJSON(
  createProjectLink: CreateProjectLink,
): string {
  return JSON.stringify(
    CreateProjectLink$outboundSchema.parse(createProjectLink),
  );
}

export function createProjectLinkFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectLink, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectLink$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectLink' from JSON`,
  );
}

/** @internal */
export const CreateProjectMicrofrontends2$inboundSchema: z.ZodType<
  CreateProjectMicrofrontends2,
  z.ZodTypeDef,
  unknown
> = z.object({
  updatedAt: z.number(),
  groupIds: z.array(z.any()),
  enabled: z.boolean(),
});

/** @internal */
export type CreateProjectMicrofrontends2$Outbound = {
  updatedAt: number;
  groupIds: Array<any>;
  enabled: boolean;
};

/** @internal */
export const CreateProjectMicrofrontends2$outboundSchema: z.ZodType<
  CreateProjectMicrofrontends2$Outbound,
  z.ZodTypeDef,
  CreateProjectMicrofrontends2
> = z.object({
  updatedAt: z.number(),
  groupIds: z.array(z.any()),
  enabled: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectMicrofrontends2$ {
  /** @deprecated use `CreateProjectMicrofrontends2$inboundSchema` instead. */
  export const inboundSchema = CreateProjectMicrofrontends2$inboundSchema;
  /** @deprecated use `CreateProjectMicrofrontends2$outboundSchema` instead. */
  export const outboundSchema = CreateProjectMicrofrontends2$outboundSchema;
  /** @deprecated use `CreateProjectMicrofrontends2$Outbound` instead. */
  export type Outbound = CreateProjectMicrofrontends2$Outbound;
}

export function createProjectMicrofrontends2ToJSON(
  createProjectMicrofrontends2: CreateProjectMicrofrontends2,
): string {
  return JSON.stringify(
    CreateProjectMicrofrontends2$outboundSchema.parse(
      createProjectMicrofrontends2,
    ),
  );
}

export function createProjectMicrofrontends2FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectMicrofrontends2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectMicrofrontends2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectMicrofrontends2' from JSON`,
  );
}

/** @internal */
export const CreateProjectMicrofrontends1$inboundSchema: z.ZodType<
  CreateProjectMicrofrontends1,
  z.ZodTypeDef,
  unknown
> = z.object({
  updatedAt: z.number(),
  groupIds: z.array(z.string()),
  enabled: z.boolean(),
  isDefaultApp: z.boolean().optional(),
  defaultRoute: z.string().optional(),
  routeObservabilityToThisProject: z.boolean().optional(),
});

/** @internal */
export type CreateProjectMicrofrontends1$Outbound = {
  updatedAt: number;
  groupIds: Array<string>;
  enabled: boolean;
  isDefaultApp?: boolean | undefined;
  defaultRoute?: string | undefined;
  routeObservabilityToThisProject?: boolean | undefined;
};

/** @internal */
export const CreateProjectMicrofrontends1$outboundSchema: z.ZodType<
  CreateProjectMicrofrontends1$Outbound,
  z.ZodTypeDef,
  CreateProjectMicrofrontends1
> = z.object({
  updatedAt: z.number(),
  groupIds: z.array(z.string()),
  enabled: z.boolean(),
  isDefaultApp: z.boolean().optional(),
  defaultRoute: z.string().optional(),
  routeObservabilityToThisProject: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectMicrofrontends1$ {
  /** @deprecated use `CreateProjectMicrofrontends1$inboundSchema` instead. */
  export const inboundSchema = CreateProjectMicrofrontends1$inboundSchema;
  /** @deprecated use `CreateProjectMicrofrontends1$outboundSchema` instead. */
  export const outboundSchema = CreateProjectMicrofrontends1$outboundSchema;
  /** @deprecated use `CreateProjectMicrofrontends1$Outbound` instead. */
  export type Outbound = CreateProjectMicrofrontends1$Outbound;
}

export function createProjectMicrofrontends1ToJSON(
  createProjectMicrofrontends1: CreateProjectMicrofrontends1,
): string {
  return JSON.stringify(
    CreateProjectMicrofrontends1$outboundSchema.parse(
      createProjectMicrofrontends1,
    ),
  );
}

export function createProjectMicrofrontends1FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectMicrofrontends1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectMicrofrontends1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectMicrofrontends1' from JSON`,
  );
}

/** @internal */
export const CreateProjectMicrofrontends$inboundSchema: z.ZodType<
  CreateProjectMicrofrontends,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateProjectMicrofrontends1$inboundSchema),
  z.lazy(() => CreateProjectMicrofrontends2$inboundSchema),
]);

/** @internal */
export type CreateProjectMicrofrontends$Outbound =
  | CreateProjectMicrofrontends1$Outbound
  | CreateProjectMicrofrontends2$Outbound;

/** @internal */
export const CreateProjectMicrofrontends$outboundSchema: z.ZodType<
  CreateProjectMicrofrontends$Outbound,
  z.ZodTypeDef,
  CreateProjectMicrofrontends
> = z.union([
  z.lazy(() => CreateProjectMicrofrontends1$outboundSchema),
  z.lazy(() => CreateProjectMicrofrontends2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectMicrofrontends$ {
  /** @deprecated use `CreateProjectMicrofrontends$inboundSchema` instead. */
  export const inboundSchema = CreateProjectMicrofrontends$inboundSchema;
  /** @deprecated use `CreateProjectMicrofrontends$outboundSchema` instead. */
  export const outboundSchema = CreateProjectMicrofrontends$outboundSchema;
  /** @deprecated use `CreateProjectMicrofrontends$Outbound` instead. */
  export type Outbound = CreateProjectMicrofrontends$Outbound;
}

export function createProjectMicrofrontendsToJSON(
  createProjectMicrofrontends: CreateProjectMicrofrontends,
): string {
  return JSON.stringify(
    CreateProjectMicrofrontends$outboundSchema.parse(
      createProjectMicrofrontends,
    ),
  );
}

export function createProjectMicrofrontendsFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectMicrofrontends, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectMicrofrontends$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectMicrofrontends' from JSON`,
  );
}

/** @internal */
export const CreateProjectNodeVersion$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectNodeVersion
> = z.nativeEnum(CreateProjectNodeVersion);

/** @internal */
export const CreateProjectNodeVersion$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectNodeVersion
> = CreateProjectNodeVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectNodeVersion$ {
  /** @deprecated use `CreateProjectNodeVersion$inboundSchema` instead. */
  export const inboundSchema = CreateProjectNodeVersion$inboundSchema;
  /** @deprecated use `CreateProjectNodeVersion$outboundSchema` instead. */
  export const outboundSchema = CreateProjectNodeVersion$outboundSchema;
}

/** @internal */
export const CreateProjectPaths$inboundSchema: z.ZodType<
  CreateProjectPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
});

/** @internal */
export type CreateProjectPaths$Outbound = {
  value: string;
};

/** @internal */
export const CreateProjectPaths$outboundSchema: z.ZodType<
  CreateProjectPaths$Outbound,
  z.ZodTypeDef,
  CreateProjectPaths
> = z.object({
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectPaths$ {
  /** @deprecated use `CreateProjectPaths$inboundSchema` instead. */
  export const inboundSchema = CreateProjectPaths$inboundSchema;
  /** @deprecated use `CreateProjectPaths$outboundSchema` instead. */
  export const outboundSchema = CreateProjectPaths$outboundSchema;
  /** @deprecated use `CreateProjectPaths$Outbound` instead. */
  export type Outbound = CreateProjectPaths$Outbound;
}

export function createProjectPathsToJSON(
  createProjectPaths: CreateProjectPaths,
): string {
  return JSON.stringify(
    CreateProjectPaths$outboundSchema.parse(createProjectPaths),
  );
}

export function createProjectPathsFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectPaths' from JSON`,
  );
}

/** @internal */
export const CreateProjectOptionsAllowlist$inboundSchema: z.ZodType<
  CreateProjectOptionsAllowlist,
  z.ZodTypeDef,
  unknown
> = z.object({
  paths: z.array(z.lazy(() => CreateProjectPaths$inboundSchema)),
});

/** @internal */
export type CreateProjectOptionsAllowlist$Outbound = {
  paths: Array<CreateProjectPaths$Outbound>;
};

/** @internal */
export const CreateProjectOptionsAllowlist$outboundSchema: z.ZodType<
  CreateProjectOptionsAllowlist$Outbound,
  z.ZodTypeDef,
  CreateProjectOptionsAllowlist
> = z.object({
  paths: z.array(z.lazy(() => CreateProjectPaths$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectOptionsAllowlist$ {
  /** @deprecated use `CreateProjectOptionsAllowlist$inboundSchema` instead. */
  export const inboundSchema = CreateProjectOptionsAllowlist$inboundSchema;
  /** @deprecated use `CreateProjectOptionsAllowlist$outboundSchema` instead. */
  export const outboundSchema = CreateProjectOptionsAllowlist$outboundSchema;
  /** @deprecated use `CreateProjectOptionsAllowlist$Outbound` instead. */
  export type Outbound = CreateProjectOptionsAllowlist$Outbound;
}

export function createProjectOptionsAllowlistToJSON(
  createProjectOptionsAllowlist: CreateProjectOptionsAllowlist,
): string {
  return JSON.stringify(
    CreateProjectOptionsAllowlist$outboundSchema.parse(
      createProjectOptionsAllowlist,
    ),
  );
}

export function createProjectOptionsAllowlistFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectOptionsAllowlist, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectOptionsAllowlist$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectOptionsAllowlist' from JSON`,
  );
}

/** @internal */
export const CreateProjectPasswordProtection$inboundSchema: z.ZodType<
  CreateProjectPasswordProtection,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateProjectPasswordProtection$Outbound = {};

/** @internal */
export const CreateProjectPasswordProtection$outboundSchema: z.ZodType<
  CreateProjectPasswordProtection$Outbound,
  z.ZodTypeDef,
  CreateProjectPasswordProtection
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectPasswordProtection$ {
  /** @deprecated use `CreateProjectPasswordProtection$inboundSchema` instead. */
  export const inboundSchema = CreateProjectPasswordProtection$inboundSchema;
  /** @deprecated use `CreateProjectPasswordProtection$outboundSchema` instead. */
  export const outboundSchema = CreateProjectPasswordProtection$outboundSchema;
  /** @deprecated use `CreateProjectPasswordProtection$Outbound` instead. */
  export type Outbound = CreateProjectPasswordProtection$Outbound;
}

export function createProjectPasswordProtectionToJSON(
  createProjectPasswordProtection: CreateProjectPasswordProtection,
): string {
  return JSON.stringify(
    CreateProjectPasswordProtection$outboundSchema.parse(
      createProjectPasswordProtection,
    ),
  );
}

export function createProjectPasswordProtectionFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectPasswordProtection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectPasswordProtection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectPasswordProtection' from JSON`,
  );
}

/** @internal */
export const CreateProjectFunctionDefaultMemoryType$inboundSchema:
  z.ZodNativeEnum<typeof CreateProjectFunctionDefaultMemoryType> = z.nativeEnum(
    CreateProjectFunctionDefaultMemoryType,
  );

/** @internal */
export const CreateProjectFunctionDefaultMemoryType$outboundSchema:
  z.ZodNativeEnum<typeof CreateProjectFunctionDefaultMemoryType> =
    CreateProjectFunctionDefaultMemoryType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectFunctionDefaultMemoryType$ {
  /** @deprecated use `CreateProjectFunctionDefaultMemoryType$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectFunctionDefaultMemoryType$inboundSchema;
  /** @deprecated use `CreateProjectFunctionDefaultMemoryType$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectFunctionDefaultMemoryType$outboundSchema;
}

/** @internal */
export const CreateProjectBuildMachineType$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectBuildMachineType
> = z.nativeEnum(CreateProjectBuildMachineType);

/** @internal */
export const CreateProjectBuildMachineType$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectBuildMachineType
> = CreateProjectBuildMachineType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectBuildMachineType$ {
  /** @deprecated use `CreateProjectBuildMachineType$inboundSchema` instead. */
  export const inboundSchema = CreateProjectBuildMachineType$inboundSchema;
  /** @deprecated use `CreateProjectBuildMachineType$outboundSchema` instead. */
  export const outboundSchema = CreateProjectBuildMachineType$outboundSchema;
}

/** @internal */
export const CreateProjectProjectsResourceConfig$inboundSchema: z.ZodType<
  CreateProjectProjectsResourceConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  elasticConcurrencyEnabled: z.boolean().optional(),
  fluid: z.boolean().optional(),
  functionDefaultRegions: z.array(z.string()),
  functionDefaultTimeout: z.number().optional(),
  functionDefaultMemoryType:
    CreateProjectFunctionDefaultMemoryType$inboundSchema.optional(),
  functionZeroConfigFailover: z.boolean().optional(),
  buildMachineType: CreateProjectBuildMachineType$inboundSchema.optional(),
  isNSNBDisabled: z.boolean().optional(),
});

/** @internal */
export type CreateProjectProjectsResourceConfig$Outbound = {
  elasticConcurrencyEnabled?: boolean | undefined;
  fluid?: boolean | undefined;
  functionDefaultRegions: Array<string>;
  functionDefaultTimeout?: number | undefined;
  functionDefaultMemoryType?: string | undefined;
  functionZeroConfigFailover?: boolean | undefined;
  buildMachineType?: string | undefined;
  isNSNBDisabled?: boolean | undefined;
};

/** @internal */
export const CreateProjectProjectsResourceConfig$outboundSchema: z.ZodType<
  CreateProjectProjectsResourceConfig$Outbound,
  z.ZodTypeDef,
  CreateProjectProjectsResourceConfig
> = z.object({
  elasticConcurrencyEnabled: z.boolean().optional(),
  fluid: z.boolean().optional(),
  functionDefaultRegions: z.array(z.string()),
  functionDefaultTimeout: z.number().optional(),
  functionDefaultMemoryType:
    CreateProjectFunctionDefaultMemoryType$outboundSchema.optional(),
  functionZeroConfigFailover: z.boolean().optional(),
  buildMachineType: CreateProjectBuildMachineType$outboundSchema.optional(),
  isNSNBDisabled: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectProjectsResourceConfig$ {
  /** @deprecated use `CreateProjectProjectsResourceConfig$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectProjectsResourceConfig$inboundSchema;
  /** @deprecated use `CreateProjectProjectsResourceConfig$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectProjectsResourceConfig$outboundSchema;
  /** @deprecated use `CreateProjectProjectsResourceConfig$Outbound` instead. */
  export type Outbound = CreateProjectProjectsResourceConfig$Outbound;
}

export function createProjectProjectsResourceConfigToJSON(
  createProjectProjectsResourceConfig: CreateProjectProjectsResourceConfig,
): string {
  return JSON.stringify(
    CreateProjectProjectsResourceConfig$outboundSchema.parse(
      createProjectProjectsResourceConfig,
    ),
  );
}

export function createProjectProjectsResourceConfigFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectProjectsResourceConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateProjectProjectsResourceConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectProjectsResourceConfig' from JSON`,
  );
}

/** @internal */
export const CreateProjectRollbackDescription$inboundSchema: z.ZodType<
  CreateProjectRollbackDescription,
  z.ZodTypeDef,
  unknown
> = z.object({
  userId: z.string(),
  username: z.string(),
  description: z.string(),
  createdAt: z.number(),
});

/** @internal */
export type CreateProjectRollbackDescription$Outbound = {
  userId: string;
  username: string;
  description: string;
  createdAt: number;
};

/** @internal */
export const CreateProjectRollbackDescription$outboundSchema: z.ZodType<
  CreateProjectRollbackDescription$Outbound,
  z.ZodTypeDef,
  CreateProjectRollbackDescription
> = z.object({
  userId: z.string(),
  username: z.string(),
  description: z.string(),
  createdAt: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectRollbackDescription$ {
  /** @deprecated use `CreateProjectRollbackDescription$inboundSchema` instead. */
  export const inboundSchema = CreateProjectRollbackDescription$inboundSchema;
  /** @deprecated use `CreateProjectRollbackDescription$outboundSchema` instead. */
  export const outboundSchema = CreateProjectRollbackDescription$outboundSchema;
  /** @deprecated use `CreateProjectRollbackDescription$Outbound` instead. */
  export type Outbound = CreateProjectRollbackDescription$Outbound;
}

export function createProjectRollbackDescriptionToJSON(
  createProjectRollbackDescription: CreateProjectRollbackDescription,
): string {
  return JSON.stringify(
    CreateProjectRollbackDescription$outboundSchema.parse(
      createProjectRollbackDescription,
    ),
  );
}

export function createProjectRollbackDescriptionFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectRollbackDescription, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectRollbackDescription$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectRollbackDescription' from JSON`,
  );
}

/** @internal */
export const CreateProjectStages$inboundSchema: z.ZodType<
  CreateProjectStages,
  z.ZodTypeDef,
  unknown
> = z.object({
  targetPercentage: z.number(),
  requireApproval: z.boolean().optional(),
  duration: z.number().optional(),
});

/** @internal */
export type CreateProjectStages$Outbound = {
  targetPercentage: number;
  requireApproval?: boolean | undefined;
  duration?: number | undefined;
};

/** @internal */
export const CreateProjectStages$outboundSchema: z.ZodType<
  CreateProjectStages$Outbound,
  z.ZodTypeDef,
  CreateProjectStages
> = z.object({
  targetPercentage: z.number(),
  requireApproval: z.boolean().optional(),
  duration: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectStages$ {
  /** @deprecated use `CreateProjectStages$inboundSchema` instead. */
  export const inboundSchema = CreateProjectStages$inboundSchema;
  /** @deprecated use `CreateProjectStages$outboundSchema` instead. */
  export const outboundSchema = CreateProjectStages$outboundSchema;
  /** @deprecated use `CreateProjectStages$Outbound` instead. */
  export type Outbound = CreateProjectStages$Outbound;
}

export function createProjectStagesToJSON(
  createProjectStages: CreateProjectStages,
): string {
  return JSON.stringify(
    CreateProjectStages$outboundSchema.parse(createProjectStages),
  );
}

export function createProjectStagesFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectStages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectStages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectStages' from JSON`,
  );
}

/** @internal */
export const CreateProjectRollingRelease$inboundSchema: z.ZodType<
  CreateProjectRollingRelease,
  z.ZodTypeDef,
  unknown
> = z.object({
  target: z.string(),
  stages: z.nullable(z.array(z.lazy(() => CreateProjectStages$inboundSchema)))
    .optional(),
  canaryResponseHeader: z.boolean().optional(),
});

/** @internal */
export type CreateProjectRollingRelease$Outbound = {
  target: string;
  stages?: Array<CreateProjectStages$Outbound> | null | undefined;
  canaryResponseHeader?: boolean | undefined;
};

/** @internal */
export const CreateProjectRollingRelease$outboundSchema: z.ZodType<
  CreateProjectRollingRelease$Outbound,
  z.ZodTypeDef,
  CreateProjectRollingRelease
> = z.object({
  target: z.string(),
  stages: z.nullable(z.array(z.lazy(() => CreateProjectStages$outboundSchema)))
    .optional(),
  canaryResponseHeader: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectRollingRelease$ {
  /** @deprecated use `CreateProjectRollingRelease$inboundSchema` instead. */
  export const inboundSchema = CreateProjectRollingRelease$inboundSchema;
  /** @deprecated use `CreateProjectRollingRelease$outboundSchema` instead. */
  export const outboundSchema = CreateProjectRollingRelease$outboundSchema;
  /** @deprecated use `CreateProjectRollingRelease$Outbound` instead. */
  export type Outbound = CreateProjectRollingRelease$Outbound;
}

export function createProjectRollingReleaseToJSON(
  createProjectRollingRelease: CreateProjectRollingRelease,
): string {
  return JSON.stringify(
    CreateProjectRollingRelease$outboundSchema.parse(
      createProjectRollingRelease,
    ),
  );
}

export function createProjectRollingReleaseFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectRollingRelease, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectRollingRelease$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectRollingRelease' from JSON`,
  );
}

/** @internal */
export const CreateProjectProjectsFunctionDefaultMemoryType$inboundSchema:
  z.ZodNativeEnum<typeof CreateProjectProjectsFunctionDefaultMemoryType> = z
    .nativeEnum(CreateProjectProjectsFunctionDefaultMemoryType);

/** @internal */
export const CreateProjectProjectsFunctionDefaultMemoryType$outboundSchema:
  z.ZodNativeEnum<typeof CreateProjectProjectsFunctionDefaultMemoryType> =
    CreateProjectProjectsFunctionDefaultMemoryType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectProjectsFunctionDefaultMemoryType$ {
  /** @deprecated use `CreateProjectProjectsFunctionDefaultMemoryType$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectProjectsFunctionDefaultMemoryType$inboundSchema;
  /** @deprecated use `CreateProjectProjectsFunctionDefaultMemoryType$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectProjectsFunctionDefaultMemoryType$outboundSchema;
}

/** @internal */
export const CreateProjectProjectsBuildMachineType$inboundSchema:
  z.ZodNativeEnum<typeof CreateProjectProjectsBuildMachineType> = z.nativeEnum(
    CreateProjectProjectsBuildMachineType,
  );

/** @internal */
export const CreateProjectProjectsBuildMachineType$outboundSchema:
  z.ZodNativeEnum<typeof CreateProjectProjectsBuildMachineType> =
    CreateProjectProjectsBuildMachineType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectProjectsBuildMachineType$ {
  /** @deprecated use `CreateProjectProjectsBuildMachineType$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectProjectsBuildMachineType$inboundSchema;
  /** @deprecated use `CreateProjectProjectsBuildMachineType$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectProjectsBuildMachineType$outboundSchema;
}

/** @internal */
export const CreateProjectDefaultResourceConfig$inboundSchema: z.ZodType<
  CreateProjectDefaultResourceConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  elasticConcurrencyEnabled: z.boolean().optional(),
  fluid: z.boolean().optional(),
  functionDefaultRegions: z.array(z.string()),
  functionDefaultTimeout: z.number().optional(),
  functionDefaultMemoryType:
    CreateProjectProjectsFunctionDefaultMemoryType$inboundSchema.optional(),
  functionZeroConfigFailover: z.boolean().optional(),
  buildMachineType: CreateProjectProjectsBuildMachineType$inboundSchema
    .optional(),
  isNSNBDisabled: z.boolean().optional(),
});

/** @internal */
export type CreateProjectDefaultResourceConfig$Outbound = {
  elasticConcurrencyEnabled?: boolean | undefined;
  fluid?: boolean | undefined;
  functionDefaultRegions: Array<string>;
  functionDefaultTimeout?: number | undefined;
  functionDefaultMemoryType?: string | undefined;
  functionZeroConfigFailover?: boolean | undefined;
  buildMachineType?: string | undefined;
  isNSNBDisabled?: boolean | undefined;
};

/** @internal */
export const CreateProjectDefaultResourceConfig$outboundSchema: z.ZodType<
  CreateProjectDefaultResourceConfig$Outbound,
  z.ZodTypeDef,
  CreateProjectDefaultResourceConfig
> = z.object({
  elasticConcurrencyEnabled: z.boolean().optional(),
  fluid: z.boolean().optional(),
  functionDefaultRegions: z.array(z.string()),
  functionDefaultTimeout: z.number().optional(),
  functionDefaultMemoryType:
    CreateProjectProjectsFunctionDefaultMemoryType$outboundSchema.optional(),
  functionZeroConfigFailover: z.boolean().optional(),
  buildMachineType: CreateProjectProjectsBuildMachineType$outboundSchema
    .optional(),
  isNSNBDisabled: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectDefaultResourceConfig$ {
  /** @deprecated use `CreateProjectDefaultResourceConfig$inboundSchema` instead. */
  export const inboundSchema = CreateProjectDefaultResourceConfig$inboundSchema;
  /** @deprecated use `CreateProjectDefaultResourceConfig$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectDefaultResourceConfig$outboundSchema;
  /** @deprecated use `CreateProjectDefaultResourceConfig$Outbound` instead. */
  export type Outbound = CreateProjectDefaultResourceConfig$Outbound;
}

export function createProjectDefaultResourceConfigToJSON(
  createProjectDefaultResourceConfig: CreateProjectDefaultResourceConfig,
): string {
  return JSON.stringify(
    CreateProjectDefaultResourceConfig$outboundSchema.parse(
      createProjectDefaultResourceConfig,
    ),
  );
}

export function createProjectDefaultResourceConfigFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectDefaultResourceConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateProjectDefaultResourceConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectDefaultResourceConfig' from JSON`,
  );
}

/** @internal */
export const CreateProjectProjectsDeploymentType$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectProjectsDeploymentType
> = z.nativeEnum(CreateProjectProjectsDeploymentType);

/** @internal */
export const CreateProjectProjectsDeploymentType$outboundSchema:
  z.ZodNativeEnum<typeof CreateProjectProjectsDeploymentType> =
    CreateProjectProjectsDeploymentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectProjectsDeploymentType$ {
  /** @deprecated use `CreateProjectProjectsDeploymentType$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectProjectsDeploymentType$inboundSchema;
  /** @deprecated use `CreateProjectProjectsDeploymentType$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectProjectsDeploymentType$outboundSchema;
}

/** @internal */
export const CreateProjectProjectsSsoProtection$inboundSchema: z.ZodType<
  CreateProjectProjectsSsoProtection,
  z.ZodTypeDef,
  unknown
> = z.object({
  deploymentType: CreateProjectProjectsDeploymentType$inboundSchema,
});

/** @internal */
export type CreateProjectProjectsSsoProtection$Outbound = {
  deploymentType: string;
};

/** @internal */
export const CreateProjectProjectsSsoProtection$outboundSchema: z.ZodType<
  CreateProjectProjectsSsoProtection$Outbound,
  z.ZodTypeDef,
  CreateProjectProjectsSsoProtection
> = z.object({
  deploymentType: CreateProjectProjectsDeploymentType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectProjectsSsoProtection$ {
  /** @deprecated use `CreateProjectProjectsSsoProtection$inboundSchema` instead. */
  export const inboundSchema = CreateProjectProjectsSsoProtection$inboundSchema;
  /** @deprecated use `CreateProjectProjectsSsoProtection$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectProjectsSsoProtection$outboundSchema;
  /** @deprecated use `CreateProjectProjectsSsoProtection$Outbound` instead. */
  export type Outbound = CreateProjectProjectsSsoProtection$Outbound;
}

export function createProjectProjectsSsoProtectionToJSON(
  createProjectProjectsSsoProtection: CreateProjectProjectsSsoProtection,
): string {
  return JSON.stringify(
    CreateProjectProjectsSsoProtection$outboundSchema.parse(
      createProjectProjectsSsoProtection,
    ),
  );
}

export function createProjectProjectsSsoProtectionFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectProjectsSsoProtection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateProjectProjectsSsoProtection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectProjectsSsoProtection' from JSON`,
  );
}

/** @internal */
export const CreateProjectProjectsAliasAssigned$inboundSchema: z.ZodType<
  CreateProjectProjectsAliasAssigned,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.boolean()]);

/** @internal */
export type CreateProjectProjectsAliasAssigned$Outbound = number | boolean;

/** @internal */
export const CreateProjectProjectsAliasAssigned$outboundSchema: z.ZodType<
  CreateProjectProjectsAliasAssigned$Outbound,
  z.ZodTypeDef,
  CreateProjectProjectsAliasAssigned
> = z.union([z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectProjectsAliasAssigned$ {
  /** @deprecated use `CreateProjectProjectsAliasAssigned$inboundSchema` instead. */
  export const inboundSchema = CreateProjectProjectsAliasAssigned$inboundSchema;
  /** @deprecated use `CreateProjectProjectsAliasAssigned$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectProjectsAliasAssigned$outboundSchema;
  /** @deprecated use `CreateProjectProjectsAliasAssigned$Outbound` instead. */
  export type Outbound = CreateProjectProjectsAliasAssigned$Outbound;
}

export function createProjectProjectsAliasAssignedToJSON(
  createProjectProjectsAliasAssigned: CreateProjectProjectsAliasAssigned,
): string {
  return JSON.stringify(
    CreateProjectProjectsAliasAssigned$outboundSchema.parse(
      createProjectProjectsAliasAssigned,
    ),
  );
}

export function createProjectProjectsAliasAssignedFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectProjectsAliasAssigned, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateProjectProjectsAliasAssigned$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectProjectsAliasAssigned' from JSON`,
  );
}

/** @internal */
export const CreateProjectProjectsAliasError$inboundSchema: z.ZodType<
  CreateProjectProjectsAliasError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
});

/** @internal */
export type CreateProjectProjectsAliasError$Outbound = {
  code: string;
  message: string;
};

/** @internal */
export const CreateProjectProjectsAliasError$outboundSchema: z.ZodType<
  CreateProjectProjectsAliasError$Outbound,
  z.ZodTypeDef,
  CreateProjectProjectsAliasError
> = z.object({
  code: z.string(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectProjectsAliasError$ {
  /** @deprecated use `CreateProjectProjectsAliasError$inboundSchema` instead. */
  export const inboundSchema = CreateProjectProjectsAliasError$inboundSchema;
  /** @deprecated use `CreateProjectProjectsAliasError$outboundSchema` instead. */
  export const outboundSchema = CreateProjectProjectsAliasError$outboundSchema;
  /** @deprecated use `CreateProjectProjectsAliasError$Outbound` instead. */
  export type Outbound = CreateProjectProjectsAliasError$Outbound;
}

export function createProjectProjectsAliasErrorToJSON(
  createProjectProjectsAliasError: CreateProjectProjectsAliasError,
): string {
  return JSON.stringify(
    CreateProjectProjectsAliasError$outboundSchema.parse(
      createProjectProjectsAliasError,
    ),
  );
}

export function createProjectProjectsAliasErrorFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectProjectsAliasError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectProjectsAliasError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectProjectsAliasError' from JSON`,
  );
}

/** @internal */
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType
  > = z.nativeEnum(
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType,
  );

/** @internal */
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType
  > =
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$ {
  /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$inboundSchema;
  /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$outboundSchema;
}

/** @internal */
export const CreateProjectProjectsResponseBranchMatcher$inboundSchema:
  z.ZodType<CreateProjectProjectsResponseBranchMatcher, z.ZodTypeDef, unknown> =
    z.object({
      type:
        CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$inboundSchema,
      pattern: z.string(),
    });

/** @internal */
export type CreateProjectProjectsResponseBranchMatcher$Outbound = {
  type: string;
  pattern: string;
};

/** @internal */
export const CreateProjectProjectsResponseBranchMatcher$outboundSchema:
  z.ZodType<
    CreateProjectProjectsResponseBranchMatcher$Outbound,
    z.ZodTypeDef,
    CreateProjectProjectsResponseBranchMatcher
  > = z.object({
    type:
      CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$outboundSchema,
    pattern: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectProjectsResponseBranchMatcher$ {
  /** @deprecated use `CreateProjectProjectsResponseBranchMatcher$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectProjectsResponseBranchMatcher$inboundSchema;
  /** @deprecated use `CreateProjectProjectsResponseBranchMatcher$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectProjectsResponseBranchMatcher$outboundSchema;
  /** @deprecated use `CreateProjectProjectsResponseBranchMatcher$Outbound` instead. */
  export type Outbound = CreateProjectProjectsResponseBranchMatcher$Outbound;
}

export function createProjectProjectsResponseBranchMatcherToJSON(
  createProjectProjectsResponseBranchMatcher:
    CreateProjectProjectsResponseBranchMatcher,
): string {
  return JSON.stringify(
    CreateProjectProjectsResponseBranchMatcher$outboundSchema.parse(
      createProjectProjectsResponseBranchMatcher,
    ),
  );
}

export function createProjectProjectsResponseBranchMatcherFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateProjectProjectsResponseBranchMatcher,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateProjectProjectsResponseBranchMatcher$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateProjectProjectsResponseBranchMatcher' from JSON`,
  );
}

/** @internal */
export const CreateProjectProjectsBuilds$inboundSchema: z.ZodType<
  CreateProjectProjectsBuilds,
  z.ZodTypeDef,
  unknown
> = z.object({
  use: z.string(),
  src: z.string().optional(),
  dest: z.string().optional(),
});

/** @internal */
export type CreateProjectProjectsBuilds$Outbound = {
  use: string;
  src?: string | undefined;
  dest?: string | undefined;
};

/** @internal */
export const CreateProjectProjectsBuilds$outboundSchema: z.ZodType<
  CreateProjectProjectsBuilds$Outbound,
  z.ZodTypeDef,
  CreateProjectProjectsBuilds
> = z.object({
  use: z.string(),
  src: z.string().optional(),
  dest: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectProjectsBuilds$ {
  /** @deprecated use `CreateProjectProjectsBuilds$inboundSchema` instead. */
  export const inboundSchema = CreateProjectProjectsBuilds$inboundSchema;
  /** @deprecated use `CreateProjectProjectsBuilds$outboundSchema` instead. */
  export const outboundSchema = CreateProjectProjectsBuilds$outboundSchema;
  /** @deprecated use `CreateProjectProjectsBuilds$Outbound` instead. */
  export type Outbound = CreateProjectProjectsBuilds$Outbound;
}

export function createProjectProjectsBuildsToJSON(
  createProjectProjectsBuilds: CreateProjectProjectsBuilds,
): string {
  return JSON.stringify(
    CreateProjectProjectsBuilds$outboundSchema.parse(
      createProjectProjectsBuilds,
    ),
  );
}

export function createProjectProjectsBuildsFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectProjectsBuilds, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectProjectsBuilds$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectProjectsBuilds' from JSON`,
  );
}

/** @internal */
export const CreateProjectProjectsChecksConclusion$inboundSchema:
  z.ZodNativeEnum<typeof CreateProjectProjectsChecksConclusion> = z.nativeEnum(
    CreateProjectProjectsChecksConclusion,
  );

/** @internal */
export const CreateProjectProjectsChecksConclusion$outboundSchema:
  z.ZodNativeEnum<typeof CreateProjectProjectsChecksConclusion> =
    CreateProjectProjectsChecksConclusion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectProjectsChecksConclusion$ {
  /** @deprecated use `CreateProjectProjectsChecksConclusion$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectProjectsChecksConclusion$inboundSchema;
  /** @deprecated use `CreateProjectProjectsChecksConclusion$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectProjectsChecksConclusion$outboundSchema;
}

/** @internal */
export const CreateProjectProjectsChecksState$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectProjectsChecksState
> = z.nativeEnum(CreateProjectProjectsChecksState);

/** @internal */
export const CreateProjectProjectsChecksState$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectProjectsChecksState
> = CreateProjectProjectsChecksState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectProjectsChecksState$ {
  /** @deprecated use `CreateProjectProjectsChecksState$inboundSchema` instead. */
  export const inboundSchema = CreateProjectProjectsChecksState$inboundSchema;
  /** @deprecated use `CreateProjectProjectsChecksState$outboundSchema` instead. */
  export const outboundSchema = CreateProjectProjectsChecksState$outboundSchema;
}

/** @internal */
export const CreateProjectProjectsCreator$inboundSchema: z.ZodType<
  CreateProjectProjectsCreator,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string(),
  githubLogin: z.string().optional(),
  gitlabLogin: z.string().optional(),
  uid: z.string(),
  username: z.string(),
});

/** @internal */
export type CreateProjectProjectsCreator$Outbound = {
  email: string;
  githubLogin?: string | undefined;
  gitlabLogin?: string | undefined;
  uid: string;
  username: string;
};

/** @internal */
export const CreateProjectProjectsCreator$outboundSchema: z.ZodType<
  CreateProjectProjectsCreator$Outbound,
  z.ZodTypeDef,
  CreateProjectProjectsCreator
> = z.object({
  email: z.string(),
  githubLogin: z.string().optional(),
  gitlabLogin: z.string().optional(),
  uid: z.string(),
  username: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectProjectsCreator$ {
  /** @deprecated use `CreateProjectProjectsCreator$inboundSchema` instead. */
  export const inboundSchema = CreateProjectProjectsCreator$inboundSchema;
  /** @deprecated use `CreateProjectProjectsCreator$outboundSchema` instead. */
  export const outboundSchema = CreateProjectProjectsCreator$outboundSchema;
  /** @deprecated use `CreateProjectProjectsCreator$Outbound` instead. */
  export type Outbound = CreateProjectProjectsCreator$Outbound;
}

export function createProjectProjectsCreatorToJSON(
  createProjectProjectsCreator: CreateProjectProjectsCreator,
): string {
  return JSON.stringify(
    CreateProjectProjectsCreator$outboundSchema.parse(
      createProjectProjectsCreator,
    ),
  );
}

export function createProjectProjectsCreatorFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectProjectsCreator, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectProjectsCreator$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectProjectsCreator' from JSON`,
  );
}

/** @internal */
export const CreateProjectProjectsOidcTokenClaims$inboundSchema: z.ZodType<
  CreateProjectProjectsOidcTokenClaims,
  z.ZodTypeDef,
  unknown
> = z.object({
  iss: z.string(),
  sub: z.string(),
  scope: z.string(),
  aud: z.string(),
  owner: z.string(),
  owner_id: z.string(),
  project: z.string(),
  project_id: z.string(),
  environment: z.string(),
}).transform((v) => {
  return remap$(v, {
    "owner_id": "ownerId",
    "project_id": "projectId",
  });
});

/** @internal */
export type CreateProjectProjectsOidcTokenClaims$Outbound = {
  iss: string;
  sub: string;
  scope: string;
  aud: string;
  owner: string;
  owner_id: string;
  project: string;
  project_id: string;
  environment: string;
};

/** @internal */
export const CreateProjectProjectsOidcTokenClaims$outboundSchema: z.ZodType<
  CreateProjectProjectsOidcTokenClaims$Outbound,
  z.ZodTypeDef,
  CreateProjectProjectsOidcTokenClaims
> = z.object({
  iss: z.string(),
  sub: z.string(),
  scope: z.string(),
  aud: z.string(),
  owner: z.string(),
  ownerId: z.string(),
  project: z.string(),
  projectId: z.string(),
  environment: z.string(),
}).transform((v) => {
  return remap$(v, {
    ownerId: "owner_id",
    projectId: "project_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectProjectsOidcTokenClaims$ {
  /** @deprecated use `CreateProjectProjectsOidcTokenClaims$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectProjectsOidcTokenClaims$inboundSchema;
  /** @deprecated use `CreateProjectProjectsOidcTokenClaims$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectProjectsOidcTokenClaims$outboundSchema;
  /** @deprecated use `CreateProjectProjectsOidcTokenClaims$Outbound` instead. */
  export type Outbound = CreateProjectProjectsOidcTokenClaims$Outbound;
}

export function createProjectProjectsOidcTokenClaimsToJSON(
  createProjectProjectsOidcTokenClaims: CreateProjectProjectsOidcTokenClaims,
): string {
  return JSON.stringify(
    CreateProjectProjectsOidcTokenClaims$outboundSchema.parse(
      createProjectProjectsOidcTokenClaims,
    ),
  );
}

export function createProjectProjectsOidcTokenClaimsFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectProjectsOidcTokenClaims, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateProjectProjectsOidcTokenClaims$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectProjectsOidcTokenClaims' from JSON`,
  );
}

/** @internal */
export const CreateProjectProjectsPlan$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectProjectsPlan
> = z.nativeEnum(CreateProjectProjectsPlan);

/** @internal */
export const CreateProjectProjectsPlan$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectProjectsPlan
> = CreateProjectProjectsPlan$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectProjectsPlan$ {
  /** @deprecated use `CreateProjectProjectsPlan$inboundSchema` instead. */
  export const inboundSchema = CreateProjectProjectsPlan$inboundSchema;
  /** @deprecated use `CreateProjectProjectsPlan$outboundSchema` instead. */
  export const outboundSchema = CreateProjectProjectsPlan$outboundSchema;
}

/** @internal */
export const CreateProjectProjectsReadyState$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectProjectsReadyState
> = z.nativeEnum(CreateProjectProjectsReadyState);

/** @internal */
export const CreateProjectProjectsReadyState$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectProjectsReadyState
> = CreateProjectProjectsReadyState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectProjectsReadyState$ {
  /** @deprecated use `CreateProjectProjectsReadyState$inboundSchema` instead. */
  export const inboundSchema = CreateProjectProjectsReadyState$inboundSchema;
  /** @deprecated use `CreateProjectProjectsReadyState$outboundSchema` instead. */
  export const outboundSchema = CreateProjectProjectsReadyState$outboundSchema;
}

/** @internal */
export const CreateProjectProjectsReadySubstate$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectProjectsReadySubstate
> = z.nativeEnum(CreateProjectProjectsReadySubstate);

/** @internal */
export const CreateProjectProjectsReadySubstate$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectProjectsReadySubstate
> = CreateProjectProjectsReadySubstate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectProjectsReadySubstate$ {
  /** @deprecated use `CreateProjectProjectsReadySubstate$inboundSchema` instead. */
  export const inboundSchema = CreateProjectProjectsReadySubstate$inboundSchema;
  /** @deprecated use `CreateProjectProjectsReadySubstate$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectProjectsReadySubstate$outboundSchema;
}

/** @internal */
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyType
  > =
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectProjectsResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const CreateProjectTargets$inboundSchema: z.ZodType<
  CreateProjectTargets,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  alias: z.array(z.string()).optional(),
  aliasAssigned: z.nullable(z.union([z.number(), z.boolean()])).optional(),
  aliasError: z.nullable(
    z.lazy(() => CreateProjectProjectsAliasError$inboundSchema),
  ).optional(),
  aliasFinal: z.nullable(z.string()).optional(),
  automaticAliases: z.array(z.string()).optional(),
  branchMatcher: z.lazy(() =>
    CreateProjectProjectsResponseBranchMatcher$inboundSchema
  ).optional(),
  buildingAt: z.number().optional(),
  builds: z.array(z.lazy(() => CreateProjectProjectsBuilds$inboundSchema))
    .optional(),
  checksConclusion: CreateProjectProjectsChecksConclusion$inboundSchema
    .optional(),
  checksState: CreateProjectProjectsChecksState$inboundSchema.optional(),
  connectBuildsEnabled: z.boolean().optional(),
  connectConfigurationId: z.string().optional(),
  createdAt: z.number(),
  createdIn: z.string(),
  creator: z.nullable(z.lazy(() => CreateProjectProjectsCreator$inboundSchema)),
  deletedAt: z.number().optional(),
  deploymentHostname: z.string(),
  forced: z.boolean().optional(),
  name: z.string(),
  meta: z.record(z.string()).optional(),
  monorepoManager: z.nullable(z.string()).optional(),
  oidcTokenClaims: z.lazy(() =>
    CreateProjectProjectsOidcTokenClaims$inboundSchema
  ).optional(),
  plan: CreateProjectProjectsPlan$inboundSchema,
  previewCommentsEnabled: z.boolean().optional(),
  private: z.boolean(),
  readyAt: z.number().optional(),
  readyState: CreateProjectProjectsReadyState$inboundSchema,
  readySubstate: CreateProjectProjectsReadySubstate$inboundSchema.optional(),
  requestedAt: z.number().optional(),
  target: z.nullable(z.string()).optional(),
  teamId: z.nullable(z.string()).optional(),
  type:
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema,
  url: z.string(),
  userId: z.string(),
  withCache: z.boolean().optional(),
});

/** @internal */
export type CreateProjectTargets$Outbound = {
  id: string;
  alias?: Array<string> | undefined;
  aliasAssigned?: number | boolean | null | undefined;
  aliasError?: CreateProjectProjectsAliasError$Outbound | null | undefined;
  aliasFinal?: string | null | undefined;
  automaticAliases?: Array<string> | undefined;
  branchMatcher?:
    | CreateProjectProjectsResponseBranchMatcher$Outbound
    | undefined;
  buildingAt?: number | undefined;
  builds?: Array<CreateProjectProjectsBuilds$Outbound> | undefined;
  checksConclusion?: string | undefined;
  checksState?: string | undefined;
  connectBuildsEnabled?: boolean | undefined;
  connectConfigurationId?: string | undefined;
  createdAt: number;
  createdIn: string;
  creator: CreateProjectProjectsCreator$Outbound | null;
  deletedAt?: number | undefined;
  deploymentHostname: string;
  forced?: boolean | undefined;
  name: string;
  meta?: { [k: string]: string } | undefined;
  monorepoManager?: string | null | undefined;
  oidcTokenClaims?: CreateProjectProjectsOidcTokenClaims$Outbound | undefined;
  plan: string;
  previewCommentsEnabled?: boolean | undefined;
  private: boolean;
  readyAt?: number | undefined;
  readyState: string;
  readySubstate?: string | undefined;
  requestedAt?: number | undefined;
  target?: string | null | undefined;
  teamId?: string | null | undefined;
  type: string;
  url: string;
  userId: string;
  withCache?: boolean | undefined;
};

/** @internal */
export const CreateProjectTargets$outboundSchema: z.ZodType<
  CreateProjectTargets$Outbound,
  z.ZodTypeDef,
  CreateProjectTargets
> = z.object({
  id: z.string(),
  alias: z.array(z.string()).optional(),
  aliasAssigned: z.nullable(z.union([z.number(), z.boolean()])).optional(),
  aliasError: z.nullable(
    z.lazy(() => CreateProjectProjectsAliasError$outboundSchema),
  ).optional(),
  aliasFinal: z.nullable(z.string()).optional(),
  automaticAliases: z.array(z.string()).optional(),
  branchMatcher: z.lazy(() =>
    CreateProjectProjectsResponseBranchMatcher$outboundSchema
  ).optional(),
  buildingAt: z.number().optional(),
  builds: z.array(z.lazy(() => CreateProjectProjectsBuilds$outboundSchema))
    .optional(),
  checksConclusion: CreateProjectProjectsChecksConclusion$outboundSchema
    .optional(),
  checksState: CreateProjectProjectsChecksState$outboundSchema.optional(),
  connectBuildsEnabled: z.boolean().optional(),
  connectConfigurationId: z.string().optional(),
  createdAt: z.number(),
  createdIn: z.string(),
  creator: z.nullable(
    z.lazy(() => CreateProjectProjectsCreator$outboundSchema),
  ),
  deletedAt: z.number().optional(),
  deploymentHostname: z.string(),
  forced: z.boolean().optional(),
  name: z.string(),
  meta: z.record(z.string()).optional(),
  monorepoManager: z.nullable(z.string()).optional(),
  oidcTokenClaims: z.lazy(() =>
    CreateProjectProjectsOidcTokenClaims$outboundSchema
  ).optional(),
  plan: CreateProjectProjectsPlan$outboundSchema,
  previewCommentsEnabled: z.boolean().optional(),
  private: z.boolean(),
  readyAt: z.number().optional(),
  readyState: CreateProjectProjectsReadyState$outboundSchema,
  readySubstate: CreateProjectProjectsReadySubstate$outboundSchema.optional(),
  requestedAt: z.number().optional(),
  target: z.nullable(z.string()).optional(),
  teamId: z.nullable(z.string()).optional(),
  type:
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema,
  url: z.string(),
  userId: z.string(),
  withCache: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectTargets$ {
  /** @deprecated use `CreateProjectTargets$inboundSchema` instead. */
  export const inboundSchema = CreateProjectTargets$inboundSchema;
  /** @deprecated use `CreateProjectTargets$outboundSchema` instead. */
  export const outboundSchema = CreateProjectTargets$outboundSchema;
  /** @deprecated use `CreateProjectTargets$Outbound` instead. */
  export type Outbound = CreateProjectTargets$Outbound;
}

export function createProjectTargetsToJSON(
  createProjectTargets: CreateProjectTargets,
): string {
  return JSON.stringify(
    CreateProjectTargets$outboundSchema.parse(createProjectTargets),
  );
}

export function createProjectTargetsFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectTargets, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectTargets$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectTargets' from JSON`,
  );
}

/** @internal */
export const CreateProjectPermissions$inboundSchema: z.ZodType<
  CreateProjectPermissions,
  z.ZodTypeDef,
  unknown
> = z.object({
  aliasProject: z.array(ACLAction$inboundSchema).optional(),
  aliasProtectionBypass: z.array(ACLAction$inboundSchema).optional(),
  buildMachine: z.array(ACLAction$inboundSchema).optional(),
  productionAliasProtectionBypass: z.array(ACLAction$inboundSchema).optional(),
  connectConfigurationLink: z.array(ACLAction$inboundSchema).optional(),
  dataCacheNamespace: z.array(ACLAction$inboundSchema).optional(),
  deployment: z.array(ACLAction$inboundSchema).optional(),
  deploymentBuildLogs: z.array(ACLAction$inboundSchema).optional(),
  deploymentCheck: z.array(ACLAction$inboundSchema).optional(),
  deploymentCheckPreview: z.array(ACLAction$inboundSchema).optional(),
  deploymentCheckReRunFromProductionBranch: z.array(ACLAction$inboundSchema)
    .optional(),
  deploymentProductionGit: z.array(ACLAction$inboundSchema).optional(),
  deploymentV0: z.array(ACLAction$inboundSchema).optional(),
  deploymentPreview: z.array(ACLAction$inboundSchema).optional(),
  deploymentPrivate: z.array(ACLAction$inboundSchema).optional(),
  deploymentPromote: z.array(ACLAction$inboundSchema).optional(),
  deploymentRollback: z.array(ACLAction$inboundSchema).optional(),
  edgeCacheNamespace: z.array(ACLAction$inboundSchema).optional(),
  environments: z.array(ACLAction$inboundSchema).optional(),
  logs: z.array(ACLAction$inboundSchema).optional(),
  logsPreset: z.array(ACLAction$inboundSchema).optional(),
  passwordProtection: z.array(ACLAction$inboundSchema).optional(),
  optionsAllowlist: z.array(ACLAction$inboundSchema).optional(),
  job: z.array(ACLAction$inboundSchema).optional(),
  observabilityData: z.array(ACLAction$inboundSchema).optional(),
  onDemandBuild: z.array(ACLAction$inboundSchema).optional(),
  onDemandConcurrency: z.array(ACLAction$inboundSchema).optional(),
  project: z.array(ACLAction$inboundSchema).optional(),
  projectFromV0: z.array(ACLAction$inboundSchema).optional(),
  projectAccessGroup: z.array(ACLAction$inboundSchema).optional(),
  projectAnalyticsSampling: z.array(ACLAction$inboundSchema).optional(),
  projectCheck: z.array(ACLAction$inboundSchema).optional(),
  projectCheckRun: z.array(ACLAction$inboundSchema).optional(),
  projectDeploymentHook: z.array(ACLAction$inboundSchema).optional(),
  projectDomain: z.array(ACLAction$inboundSchema).optional(),
  projectDomainMove: z.array(ACLAction$inboundSchema).optional(),
  projectDomainCheckConfig: z.array(ACLAction$inboundSchema).optional(),
  projectEnvVars: z.array(ACLAction$inboundSchema).optional(),
  projectEnvVarsProduction: z.array(ACLAction$inboundSchema).optional(),
  projectEnvVarsUnownedByIntegration: z.array(ACLAction$inboundSchema)
    .optional(),
  projectFlags: z.array(ACLAction$inboundSchema).optional(),
  projectId: z.array(ACLAction$inboundSchema).optional(),
  projectIntegrationConfiguration: z.array(ACLAction$inboundSchema).optional(),
  projectLink: z.array(ACLAction$inboundSchema).optional(),
  projectMember: z.array(ACLAction$inboundSchema).optional(),
  projectMonitoring: z.array(ACLAction$inboundSchema).optional(),
  projectPermissions: z.array(ACLAction$inboundSchema).optional(),
  projectProductionBranch: z.array(ACLAction$inboundSchema).optional(),
  projectTransfer: z.array(ACLAction$inboundSchema).optional(),
  projectTransferOut: z.array(ACLAction$inboundSchema).optional(),
  projectProtectionBypass: z.array(ACLAction$inboundSchema).optional(),
  projectUsage: z.array(ACLAction$inboundSchema).optional(),
  projectAnalyticsUsage: z.array(ACLAction$inboundSchema).optional(),
  projectSupportCase: z.array(ACLAction$inboundSchema).optional(),
  projectSupportCaseComment: z.array(ACLAction$inboundSchema).optional(),
  projectDeploymentExpiration: z.array(ACLAction$inboundSchema).optional(),
  projectRollingRelease: z.array(ACLAction$inboundSchema).optional(),
  projectTier: z.array(ACLAction$inboundSchema).optional(),
  projectOIDCToken: z.array(ACLAction$inboundSchema).optional(),
  seawallConfig: z.array(ACLAction$inboundSchema).optional(),
  skewProtection: z.array(ACLAction$inboundSchema).optional(),
  analytics: z.array(ACLAction$inboundSchema).optional(),
  trustedIps: z.array(ACLAction$inboundSchema).optional(),
  v0Chat: z.array(ACLAction$inboundSchema).optional(),
  webAnalytics: z.array(ACLAction$inboundSchema).optional(),
  sharedEnvVarConnection: z.array(ACLAction$inboundSchema).optional(),
  sonar: z.array(ACLAction$inboundSchema).optional(),
  oauth2Connection: z.array(ACLAction$inboundSchema).optional(),
  user: z.array(ACLAction$inboundSchema).optional(),
  userConnection: z.array(ACLAction$inboundSchema).optional(),
  userSudo: z.array(ACLAction$inboundSchema).optional(),
  webAuthn: z.array(ACLAction$inboundSchema).optional(),
  accessGroup: z.array(ACLAction$inboundSchema).optional(),
  aliasGlobal: z.array(ACLAction$inboundSchema).optional(),
  analyticsSampling: z.array(ACLAction$inboundSchema).optional(),
  analyticsUsage: z.array(ACLAction$inboundSchema).optional(),
  auditLog: z.array(ACLAction$inboundSchema).optional(),
  billingAddress: z.array(ACLAction$inboundSchema).optional(),
  billingInformation: z.array(ACLAction$inboundSchema).optional(),
  billingInvoice: z.array(ACLAction$inboundSchema).optional(),
  billingInvoiceEmailRecipient: z.array(ACLAction$inboundSchema).optional(),
  billingInvoiceLanguage: z.array(ACLAction$inboundSchema).optional(),
  billingPlan: z.array(ACLAction$inboundSchema).optional(),
  billingPurchaseOrder: z.array(ACLAction$inboundSchema).optional(),
  billingRefund: z.array(ACLAction$inboundSchema).optional(),
  billingTaxId: z.array(ACLAction$inboundSchema).optional(),
  blob: z.array(ACLAction$inboundSchema).optional(),
  budget: z.array(ACLAction$inboundSchema).optional(),
  cacheArtifact: z.array(ACLAction$inboundSchema).optional(),
  cacheArtifactUsageEvent: z.array(ACLAction$inboundSchema).optional(),
  codeChecks: z.array(ACLAction$inboundSchema).optional(),
  concurrentBuilds: z.array(ACLAction$inboundSchema).optional(),
  connect: z.array(ACLAction$inboundSchema).optional(),
  connectConfiguration: z.array(ACLAction$inboundSchema).optional(),
  defaultDeploymentProtection: z.array(ACLAction$inboundSchema).optional(),
  domain: z.array(ACLAction$inboundSchema).optional(),
  domainAcceptDelegation: z.array(ACLAction$inboundSchema).optional(),
  domainAuthCodes: z.array(ACLAction$inboundSchema).optional(),
  domainCertificate: z.array(ACLAction$inboundSchema).optional(),
  domainCheckConfig: z.array(ACLAction$inboundSchema).optional(),
  domainMove: z.array(ACLAction$inboundSchema).optional(),
  domainPurchase: z.array(ACLAction$inboundSchema).optional(),
  domainRecord: z.array(ACLAction$inboundSchema).optional(),
  domainTransferIn: z.array(ACLAction$inboundSchema).optional(),
  event: z.array(ACLAction$inboundSchema).optional(),
  ownEvent: z.array(ACLAction$inboundSchema).optional(),
  sensitiveEnvironmentVariablePolicy: z.array(ACLAction$inboundSchema)
    .optional(),
  fileUpload: z.array(ACLAction$inboundSchema).optional(),
  flagsExplorerSubscription: z.array(ACLAction$inboundSchema).optional(),
  gitRepository: z.array(ACLAction$inboundSchema).optional(),
  ipBlocking: z.array(ACLAction$inboundSchema).optional(),
  imageOptimizationNewPrice: z.array(ACLAction$inboundSchema).optional(),
  integration: z.array(ACLAction$inboundSchema).optional(),
  integrationAccount: z.array(ACLAction$inboundSchema).optional(),
  integrationConfiguration: z.array(ACLAction$inboundSchema).optional(),
  integrationConfigurationTransfer: z.array(ACLAction$inboundSchema).optional(),
  integrationConfigurationProjects: z.array(ACLAction$inboundSchema).optional(),
  integrationVercelConfigurationOverride: z.array(ACLAction$inboundSchema)
    .optional(),
  integrationConfigurationRole: z.array(ACLAction$inboundSchema).optional(),
  integrationSSOSession: z.array(ACLAction$inboundSchema).optional(),
  integrationResource: z.array(ACLAction$inboundSchema).optional(),
  integrationEvent: z.array(ACLAction$inboundSchema).optional(),
  integrationResourceSecrets: z.array(ACLAction$inboundSchema).optional(),
  integrationDeploymentAction: z.array(ACLAction$inboundSchema).optional(),
  marketplaceInstallationMember: z.array(ACLAction$inboundSchema).optional(),
  marketplaceBillingData: z.array(ACLAction$inboundSchema).optional(),
  marketplaceInvoice: z.array(ACLAction$inboundSchema).optional(),
  marketplaceSettings: z.array(ACLAction$inboundSchema).optional(),
  marketplaceExperimentationItem: z.array(ACLAction$inboundSchema).optional(),
  marketplaceExperimentationEdgeConfigData: z.array(ACLAction$inboundSchema)
    .optional(),
  jobGlobal: z.array(ACLAction$inboundSchema).optional(),
  drain: z.array(ACLAction$inboundSchema).optional(),
  logDrain: z.array(ACLAction$inboundSchema).optional(),
  traceDrain: z.array(ACLAction$inboundSchema).optional(),
  Monitoring: z.array(ACLAction$inboundSchema).optional(),
  monitoringSettings: z.array(ACLAction$inboundSchema).optional(),
  monitoringQuery: z.array(ACLAction$inboundSchema).optional(),
  monitoringChart: z.array(ACLAction$inboundSchema).optional(),
  monitoringAlert: z.array(ACLAction$inboundSchema).optional(),
  notificationDeploymentFailed: z.array(ACLAction$inboundSchema).optional(),
  notificationDomainConfiguration: z.array(ACLAction$inboundSchema).optional(),
  notificationDomainExpire: z.array(ACLAction$inboundSchema).optional(),
  notificationDomainMoved: z.array(ACLAction$inboundSchema).optional(),
  notificationDomainPurchase: z.array(ACLAction$inboundSchema).optional(),
  notificationDomainRenewal: z.array(ACLAction$inboundSchema).optional(),
  notificationDomainTransfer: z.array(ACLAction$inboundSchema).optional(),
  notificationDomainUnverified: z.array(ACLAction$inboundSchema).optional(),
  NotificationMonitoringAlert: z.array(ACLAction$inboundSchema).optional(),
  notificationPaymentFailed: z.array(ACLAction$inboundSchema).optional(),
  notificationUsageAlert: z.array(ACLAction$inboundSchema).optional(),
  notificationPreferences: z.array(ACLAction$inboundSchema).optional(),
  notificationCustomerBudget: z.array(ACLAction$inboundSchema).optional(),
  notificationStatementOfReasons: z.array(ACLAction$inboundSchema).optional(),
  observabilityConfiguration: z.array(ACLAction$inboundSchema).optional(),
  alerts: z.array(ACLAction$inboundSchema).optional(),
  observabilityNotebook: z.array(ACLAction$inboundSchema).optional(),
  observabilityFunnel: z.array(ACLAction$inboundSchema).optional(),
  openTelemetryEndpoint: z.array(ACLAction$inboundSchema).optional(),
  vercelAppInstallation: z.array(ACLAction$inboundSchema).optional(),
  vercelAppInstallationRequest: z.array(ACLAction$inboundSchema).optional(),
  paymentMethod: z.array(ACLAction$inboundSchema).optional(),
  permissions: z.array(ACLAction$inboundSchema).optional(),
  postgres: z.array(ACLAction$inboundSchema).optional(),
  previewDeploymentSuffix: z.array(ACLAction$inboundSchema).optional(),
  proTrialOnboarding: z.array(ACLAction$inboundSchema).optional(),
  sharedEnvVars: z.array(ACLAction$inboundSchema).optional(),
  sharedEnvVarsProduction: z.array(ACLAction$inboundSchema).optional(),
  space: z.array(ACLAction$inboundSchema).optional(),
  spaceRun: z.array(ACLAction$inboundSchema).optional(),
  passwordProtectionInvoiceItem: z.array(ACLAction$inboundSchema).optional(),
  rateLimit: z.array(ACLAction$inboundSchema).optional(),
  redis: z.array(ACLAction$inboundSchema).optional(),
  repository: z.array(ACLAction$inboundSchema).optional(),
  remoteCaching: z.array(ACLAction$inboundSchema).optional(),
  samlConfig: z.array(ACLAction$inboundSchema).optional(),
  secret: z.array(ACLAction$inboundSchema).optional(),
  redisStoreTokenSet: z.array(ACLAction$inboundSchema).optional(),
  blobStoreTokenSet: z.array(ACLAction$inboundSchema).optional(),
  postgresStoreTokenSet: z.array(ACLAction$inboundSchema).optional(),
  integrationStoreTokenSet: z.array(ACLAction$inboundSchema).optional(),
  integrationResourceReplCommand: z.array(ACLAction$inboundSchema).optional(),
  storeTransfer: z.array(ACLAction$inboundSchema).optional(),
  supportCase: z.array(ACLAction$inboundSchema).optional(),
  supportCaseComment: z.array(ACLAction$inboundSchema).optional(),
  dataCacheBillingSettings: z.array(ACLAction$inboundSchema).optional(),
  team: z.array(ACLAction$inboundSchema).optional(),
  teamAccessRequest: z.array(ACLAction$inboundSchema).optional(),
  teamFellowMembership: z.array(ACLAction$inboundSchema).optional(),
  teamGitExclusivity: z.array(ACLAction$inboundSchema).optional(),
  teamInvite: z.array(ACLAction$inboundSchema).optional(),
  teamInviteCode: z.array(ACLAction$inboundSchema).optional(),
  teamJoin: z.array(ACLAction$inboundSchema).optional(),
  teamMemberMfaStatus: z.array(ACLAction$inboundSchema).optional(),
  teamMicrofrontends: z.array(ACLAction$inboundSchema).optional(),
  teamOwnMembership: z.array(ACLAction$inboundSchema).optional(),
  teamOwnMembershipDisconnectSAML: z.array(ACLAction$inboundSchema).optional(),
  token: z.array(ACLAction$inboundSchema).optional(),
  usage: z.array(ACLAction$inboundSchema).optional(),
  usageCycle: z.array(ACLAction$inboundSchema).optional(),
  vpcPeeringConnection: z.array(ACLAction$inboundSchema).optional(),
  webAnalyticsPlan: z.array(ACLAction$inboundSchema).optional(),
  edgeConfig: z.array(ACLAction$inboundSchema).optional(),
  edgeConfigItem: z.array(ACLAction$inboundSchema).optional(),
  edgeConfigSchema: z.array(ACLAction$inboundSchema).optional(),
  edgeConfigToken: z.array(ACLAction$inboundSchema).optional(),
  webhook: z.array(ACLAction$inboundSchema).optional(),
  "webhook-event": z.array(ACLAction$inboundSchema).optional(),
  endpointVerification: z.array(ACLAction$inboundSchema).optional(),
  projectTransferIn: z.array(ACLAction$inboundSchema).optional(),
  oauth2Application: z.array(ACLAction$inboundSchema).optional(),
  vercelRun: z.array(ACLAction$inboundSchema).optional(),
  vercelRunExec: z.array(ACLAction$inboundSchema).optional(),
  apiKey: z.array(ACLAction$inboundSchema).optional(),
  apiKeyOwnedBySelf: z.array(ACLAction$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Monitoring": "monitoring",
    "NotificationMonitoringAlert": "notificationMonitoringAlert",
    "webhook-event": "webhookEvent",
  });
});

/** @internal */
export type CreateProjectPermissions$Outbound = {
  aliasProject?: Array<string> | undefined;
  aliasProtectionBypass?: Array<string> | undefined;
  buildMachine?: Array<string> | undefined;
  productionAliasProtectionBypass?: Array<string> | undefined;
  connectConfigurationLink?: Array<string> | undefined;
  dataCacheNamespace?: Array<string> | undefined;
  deployment?: Array<string> | undefined;
  deploymentBuildLogs?: Array<string> | undefined;
  deploymentCheck?: Array<string> | undefined;
  deploymentCheckPreview?: Array<string> | undefined;
  deploymentCheckReRunFromProductionBranch?: Array<string> | undefined;
  deploymentProductionGit?: Array<string> | undefined;
  deploymentV0?: Array<string> | undefined;
  deploymentPreview?: Array<string> | undefined;
  deploymentPrivate?: Array<string> | undefined;
  deploymentPromote?: Array<string> | undefined;
  deploymentRollback?: Array<string> | undefined;
  edgeCacheNamespace?: Array<string> | undefined;
  environments?: Array<string> | undefined;
  logs?: Array<string> | undefined;
  logsPreset?: Array<string> | undefined;
  passwordProtection?: Array<string> | undefined;
  optionsAllowlist?: Array<string> | undefined;
  job?: Array<string> | undefined;
  observabilityData?: Array<string> | undefined;
  onDemandBuild?: Array<string> | undefined;
  onDemandConcurrency?: Array<string> | undefined;
  project?: Array<string> | undefined;
  projectFromV0?: Array<string> | undefined;
  projectAccessGroup?: Array<string> | undefined;
  projectAnalyticsSampling?: Array<string> | undefined;
  projectCheck?: Array<string> | undefined;
  projectCheckRun?: Array<string> | undefined;
  projectDeploymentHook?: Array<string> | undefined;
  projectDomain?: Array<string> | undefined;
  projectDomainMove?: Array<string> | undefined;
  projectDomainCheckConfig?: Array<string> | undefined;
  projectEnvVars?: Array<string> | undefined;
  projectEnvVarsProduction?: Array<string> | undefined;
  projectEnvVarsUnownedByIntegration?: Array<string> | undefined;
  projectFlags?: Array<string> | undefined;
  projectId?: Array<string> | undefined;
  projectIntegrationConfiguration?: Array<string> | undefined;
  projectLink?: Array<string> | undefined;
  projectMember?: Array<string> | undefined;
  projectMonitoring?: Array<string> | undefined;
  projectPermissions?: Array<string> | undefined;
  projectProductionBranch?: Array<string> | undefined;
  projectTransfer?: Array<string> | undefined;
  projectTransferOut?: Array<string> | undefined;
  projectProtectionBypass?: Array<string> | undefined;
  projectUsage?: Array<string> | undefined;
  projectAnalyticsUsage?: Array<string> | undefined;
  projectSupportCase?: Array<string> | undefined;
  projectSupportCaseComment?: Array<string> | undefined;
  projectDeploymentExpiration?: Array<string> | undefined;
  projectRollingRelease?: Array<string> | undefined;
  projectTier?: Array<string> | undefined;
  projectOIDCToken?: Array<string> | undefined;
  seawallConfig?: Array<string> | undefined;
  skewProtection?: Array<string> | undefined;
  analytics?: Array<string> | undefined;
  trustedIps?: Array<string> | undefined;
  v0Chat?: Array<string> | undefined;
  webAnalytics?: Array<string> | undefined;
  sharedEnvVarConnection?: Array<string> | undefined;
  sonar?: Array<string> | undefined;
  oauth2Connection?: Array<string> | undefined;
  user?: Array<string> | undefined;
  userConnection?: Array<string> | undefined;
  userSudo?: Array<string> | undefined;
  webAuthn?: Array<string> | undefined;
  accessGroup?: Array<string> | undefined;
  aliasGlobal?: Array<string> | undefined;
  analyticsSampling?: Array<string> | undefined;
  analyticsUsage?: Array<string> | undefined;
  auditLog?: Array<string> | undefined;
  billingAddress?: Array<string> | undefined;
  billingInformation?: Array<string> | undefined;
  billingInvoice?: Array<string> | undefined;
  billingInvoiceEmailRecipient?: Array<string> | undefined;
  billingInvoiceLanguage?: Array<string> | undefined;
  billingPlan?: Array<string> | undefined;
  billingPurchaseOrder?: Array<string> | undefined;
  billingRefund?: Array<string> | undefined;
  billingTaxId?: Array<string> | undefined;
  blob?: Array<string> | undefined;
  budget?: Array<string> | undefined;
  cacheArtifact?: Array<string> | undefined;
  cacheArtifactUsageEvent?: Array<string> | undefined;
  codeChecks?: Array<string> | undefined;
  concurrentBuilds?: Array<string> | undefined;
  connect?: Array<string> | undefined;
  connectConfiguration?: Array<string> | undefined;
  defaultDeploymentProtection?: Array<string> | undefined;
  domain?: Array<string> | undefined;
  domainAcceptDelegation?: Array<string> | undefined;
  domainAuthCodes?: Array<string> | undefined;
  domainCertificate?: Array<string> | undefined;
  domainCheckConfig?: Array<string> | undefined;
  domainMove?: Array<string> | undefined;
  domainPurchase?: Array<string> | undefined;
  domainRecord?: Array<string> | undefined;
  domainTransferIn?: Array<string> | undefined;
  event?: Array<string> | undefined;
  ownEvent?: Array<string> | undefined;
  sensitiveEnvironmentVariablePolicy?: Array<string> | undefined;
  fileUpload?: Array<string> | undefined;
  flagsExplorerSubscription?: Array<string> | undefined;
  gitRepository?: Array<string> | undefined;
  ipBlocking?: Array<string> | undefined;
  imageOptimizationNewPrice?: Array<string> | undefined;
  integration?: Array<string> | undefined;
  integrationAccount?: Array<string> | undefined;
  integrationConfiguration?: Array<string> | undefined;
  integrationConfigurationTransfer?: Array<string> | undefined;
  integrationConfigurationProjects?: Array<string> | undefined;
  integrationVercelConfigurationOverride?: Array<string> | undefined;
  integrationConfigurationRole?: Array<string> | undefined;
  integrationSSOSession?: Array<string> | undefined;
  integrationResource?: Array<string> | undefined;
  integrationEvent?: Array<string> | undefined;
  integrationResourceSecrets?: Array<string> | undefined;
  integrationDeploymentAction?: Array<string> | undefined;
  marketplaceInstallationMember?: Array<string> | undefined;
  marketplaceBillingData?: Array<string> | undefined;
  marketplaceInvoice?: Array<string> | undefined;
  marketplaceSettings?: Array<string> | undefined;
  marketplaceExperimentationItem?: Array<string> | undefined;
  marketplaceExperimentationEdgeConfigData?: Array<string> | undefined;
  jobGlobal?: Array<string> | undefined;
  drain?: Array<string> | undefined;
  logDrain?: Array<string> | undefined;
  traceDrain?: Array<string> | undefined;
  Monitoring?: Array<string> | undefined;
  monitoringSettings?: Array<string> | undefined;
  monitoringQuery?: Array<string> | undefined;
  monitoringChart?: Array<string> | undefined;
  monitoringAlert?: Array<string> | undefined;
  notificationDeploymentFailed?: Array<string> | undefined;
  notificationDomainConfiguration?: Array<string> | undefined;
  notificationDomainExpire?: Array<string> | undefined;
  notificationDomainMoved?: Array<string> | undefined;
  notificationDomainPurchase?: Array<string> | undefined;
  notificationDomainRenewal?: Array<string> | undefined;
  notificationDomainTransfer?: Array<string> | undefined;
  notificationDomainUnverified?: Array<string> | undefined;
  NotificationMonitoringAlert?: Array<string> | undefined;
  notificationPaymentFailed?: Array<string> | undefined;
  notificationUsageAlert?: Array<string> | undefined;
  notificationPreferences?: Array<string> | undefined;
  notificationCustomerBudget?: Array<string> | undefined;
  notificationStatementOfReasons?: Array<string> | undefined;
  observabilityConfiguration?: Array<string> | undefined;
  alerts?: Array<string> | undefined;
  observabilityNotebook?: Array<string> | undefined;
  observabilityFunnel?: Array<string> | undefined;
  openTelemetryEndpoint?: Array<string> | undefined;
  vercelAppInstallation?: Array<string> | undefined;
  vercelAppInstallationRequest?: Array<string> | undefined;
  paymentMethod?: Array<string> | undefined;
  permissions?: Array<string> | undefined;
  postgres?: Array<string> | undefined;
  previewDeploymentSuffix?: Array<string> | undefined;
  proTrialOnboarding?: Array<string> | undefined;
  sharedEnvVars?: Array<string> | undefined;
  sharedEnvVarsProduction?: Array<string> | undefined;
  space?: Array<string> | undefined;
  spaceRun?: Array<string> | undefined;
  passwordProtectionInvoiceItem?: Array<string> | undefined;
  rateLimit?: Array<string> | undefined;
  redis?: Array<string> | undefined;
  repository?: Array<string> | undefined;
  remoteCaching?: Array<string> | undefined;
  samlConfig?: Array<string> | undefined;
  secret?: Array<string> | undefined;
  redisStoreTokenSet?: Array<string> | undefined;
  blobStoreTokenSet?: Array<string> | undefined;
  postgresStoreTokenSet?: Array<string> | undefined;
  integrationStoreTokenSet?: Array<string> | undefined;
  integrationResourceReplCommand?: Array<string> | undefined;
  storeTransfer?: Array<string> | undefined;
  supportCase?: Array<string> | undefined;
  supportCaseComment?: Array<string> | undefined;
  dataCacheBillingSettings?: Array<string> | undefined;
  team?: Array<string> | undefined;
  teamAccessRequest?: Array<string> | undefined;
  teamFellowMembership?: Array<string> | undefined;
  teamGitExclusivity?: Array<string> | undefined;
  teamInvite?: Array<string> | undefined;
  teamInviteCode?: Array<string> | undefined;
  teamJoin?: Array<string> | undefined;
  teamMemberMfaStatus?: Array<string> | undefined;
  teamMicrofrontends?: Array<string> | undefined;
  teamOwnMembership?: Array<string> | undefined;
  teamOwnMembershipDisconnectSAML?: Array<string> | undefined;
  token?: Array<string> | undefined;
  usage?: Array<string> | undefined;
  usageCycle?: Array<string> | undefined;
  vpcPeeringConnection?: Array<string> | undefined;
  webAnalyticsPlan?: Array<string> | undefined;
  edgeConfig?: Array<string> | undefined;
  edgeConfigItem?: Array<string> | undefined;
  edgeConfigSchema?: Array<string> | undefined;
  edgeConfigToken?: Array<string> | undefined;
  webhook?: Array<string> | undefined;
  "webhook-event"?: Array<string> | undefined;
  endpointVerification?: Array<string> | undefined;
  projectTransferIn?: Array<string> | undefined;
  oauth2Application?: Array<string> | undefined;
  vercelRun?: Array<string> | undefined;
  vercelRunExec?: Array<string> | undefined;
  apiKey?: Array<string> | undefined;
  apiKeyOwnedBySelf?: Array<string> | undefined;
};

/** @internal */
export const CreateProjectPermissions$outboundSchema: z.ZodType<
  CreateProjectPermissions$Outbound,
  z.ZodTypeDef,
  CreateProjectPermissions
> = z.object({
  aliasProject: z.array(ACLAction$outboundSchema).optional(),
  aliasProtectionBypass: z.array(ACLAction$outboundSchema).optional(),
  buildMachine: z.array(ACLAction$outboundSchema).optional(),
  productionAliasProtectionBypass: z.array(ACLAction$outboundSchema).optional(),
  connectConfigurationLink: z.array(ACLAction$outboundSchema).optional(),
  dataCacheNamespace: z.array(ACLAction$outboundSchema).optional(),
  deployment: z.array(ACLAction$outboundSchema).optional(),
  deploymentBuildLogs: z.array(ACLAction$outboundSchema).optional(),
  deploymentCheck: z.array(ACLAction$outboundSchema).optional(),
  deploymentCheckPreview: z.array(ACLAction$outboundSchema).optional(),
  deploymentCheckReRunFromProductionBranch: z.array(ACLAction$outboundSchema)
    .optional(),
  deploymentProductionGit: z.array(ACLAction$outboundSchema).optional(),
  deploymentV0: z.array(ACLAction$outboundSchema).optional(),
  deploymentPreview: z.array(ACLAction$outboundSchema).optional(),
  deploymentPrivate: z.array(ACLAction$outboundSchema).optional(),
  deploymentPromote: z.array(ACLAction$outboundSchema).optional(),
  deploymentRollback: z.array(ACLAction$outboundSchema).optional(),
  edgeCacheNamespace: z.array(ACLAction$outboundSchema).optional(),
  environments: z.array(ACLAction$outboundSchema).optional(),
  logs: z.array(ACLAction$outboundSchema).optional(),
  logsPreset: z.array(ACLAction$outboundSchema).optional(),
  passwordProtection: z.array(ACLAction$outboundSchema).optional(),
  optionsAllowlist: z.array(ACLAction$outboundSchema).optional(),
  job: z.array(ACLAction$outboundSchema).optional(),
  observabilityData: z.array(ACLAction$outboundSchema).optional(),
  onDemandBuild: z.array(ACLAction$outboundSchema).optional(),
  onDemandConcurrency: z.array(ACLAction$outboundSchema).optional(),
  project: z.array(ACLAction$outboundSchema).optional(),
  projectFromV0: z.array(ACLAction$outboundSchema).optional(),
  projectAccessGroup: z.array(ACLAction$outboundSchema).optional(),
  projectAnalyticsSampling: z.array(ACLAction$outboundSchema).optional(),
  projectCheck: z.array(ACLAction$outboundSchema).optional(),
  projectCheckRun: z.array(ACLAction$outboundSchema).optional(),
  projectDeploymentHook: z.array(ACLAction$outboundSchema).optional(),
  projectDomain: z.array(ACLAction$outboundSchema).optional(),
  projectDomainMove: z.array(ACLAction$outboundSchema).optional(),
  projectDomainCheckConfig: z.array(ACLAction$outboundSchema).optional(),
  projectEnvVars: z.array(ACLAction$outboundSchema).optional(),
  projectEnvVarsProduction: z.array(ACLAction$outboundSchema).optional(),
  projectEnvVarsUnownedByIntegration: z.array(ACLAction$outboundSchema)
    .optional(),
  projectFlags: z.array(ACLAction$outboundSchema).optional(),
  projectId: z.array(ACLAction$outboundSchema).optional(),
  projectIntegrationConfiguration: z.array(ACLAction$outboundSchema).optional(),
  projectLink: z.array(ACLAction$outboundSchema).optional(),
  projectMember: z.array(ACLAction$outboundSchema).optional(),
  projectMonitoring: z.array(ACLAction$outboundSchema).optional(),
  projectPermissions: z.array(ACLAction$outboundSchema).optional(),
  projectProductionBranch: z.array(ACLAction$outboundSchema).optional(),
  projectTransfer: z.array(ACLAction$outboundSchema).optional(),
  projectTransferOut: z.array(ACLAction$outboundSchema).optional(),
  projectProtectionBypass: z.array(ACLAction$outboundSchema).optional(),
  projectUsage: z.array(ACLAction$outboundSchema).optional(),
  projectAnalyticsUsage: z.array(ACLAction$outboundSchema).optional(),
  projectSupportCase: z.array(ACLAction$outboundSchema).optional(),
  projectSupportCaseComment: z.array(ACLAction$outboundSchema).optional(),
  projectDeploymentExpiration: z.array(ACLAction$outboundSchema).optional(),
  projectRollingRelease: z.array(ACLAction$outboundSchema).optional(),
  projectTier: z.array(ACLAction$outboundSchema).optional(),
  projectOIDCToken: z.array(ACLAction$outboundSchema).optional(),
  seawallConfig: z.array(ACLAction$outboundSchema).optional(),
  skewProtection: z.array(ACLAction$outboundSchema).optional(),
  analytics: z.array(ACLAction$outboundSchema).optional(),
  trustedIps: z.array(ACLAction$outboundSchema).optional(),
  v0Chat: z.array(ACLAction$outboundSchema).optional(),
  webAnalytics: z.array(ACLAction$outboundSchema).optional(),
  sharedEnvVarConnection: z.array(ACLAction$outboundSchema).optional(),
  sonar: z.array(ACLAction$outboundSchema).optional(),
  oauth2Connection: z.array(ACLAction$outboundSchema).optional(),
  user: z.array(ACLAction$outboundSchema).optional(),
  userConnection: z.array(ACLAction$outboundSchema).optional(),
  userSudo: z.array(ACLAction$outboundSchema).optional(),
  webAuthn: z.array(ACLAction$outboundSchema).optional(),
  accessGroup: z.array(ACLAction$outboundSchema).optional(),
  aliasGlobal: z.array(ACLAction$outboundSchema).optional(),
  analyticsSampling: z.array(ACLAction$outboundSchema).optional(),
  analyticsUsage: z.array(ACLAction$outboundSchema).optional(),
  auditLog: z.array(ACLAction$outboundSchema).optional(),
  billingAddress: z.array(ACLAction$outboundSchema).optional(),
  billingInformation: z.array(ACLAction$outboundSchema).optional(),
  billingInvoice: z.array(ACLAction$outboundSchema).optional(),
  billingInvoiceEmailRecipient: z.array(ACLAction$outboundSchema).optional(),
  billingInvoiceLanguage: z.array(ACLAction$outboundSchema).optional(),
  billingPlan: z.array(ACLAction$outboundSchema).optional(),
  billingPurchaseOrder: z.array(ACLAction$outboundSchema).optional(),
  billingRefund: z.array(ACLAction$outboundSchema).optional(),
  billingTaxId: z.array(ACLAction$outboundSchema).optional(),
  blob: z.array(ACLAction$outboundSchema).optional(),
  budget: z.array(ACLAction$outboundSchema).optional(),
  cacheArtifact: z.array(ACLAction$outboundSchema).optional(),
  cacheArtifactUsageEvent: z.array(ACLAction$outboundSchema).optional(),
  codeChecks: z.array(ACLAction$outboundSchema).optional(),
  concurrentBuilds: z.array(ACLAction$outboundSchema).optional(),
  connect: z.array(ACLAction$outboundSchema).optional(),
  connectConfiguration: z.array(ACLAction$outboundSchema).optional(),
  defaultDeploymentProtection: z.array(ACLAction$outboundSchema).optional(),
  domain: z.array(ACLAction$outboundSchema).optional(),
  domainAcceptDelegation: z.array(ACLAction$outboundSchema).optional(),
  domainAuthCodes: z.array(ACLAction$outboundSchema).optional(),
  domainCertificate: z.array(ACLAction$outboundSchema).optional(),
  domainCheckConfig: z.array(ACLAction$outboundSchema).optional(),
  domainMove: z.array(ACLAction$outboundSchema).optional(),
  domainPurchase: z.array(ACLAction$outboundSchema).optional(),
  domainRecord: z.array(ACLAction$outboundSchema).optional(),
  domainTransferIn: z.array(ACLAction$outboundSchema).optional(),
  event: z.array(ACLAction$outboundSchema).optional(),
  ownEvent: z.array(ACLAction$outboundSchema).optional(),
  sensitiveEnvironmentVariablePolicy: z.array(ACLAction$outboundSchema)
    .optional(),
  fileUpload: z.array(ACLAction$outboundSchema).optional(),
  flagsExplorerSubscription: z.array(ACLAction$outboundSchema).optional(),
  gitRepository: z.array(ACLAction$outboundSchema).optional(),
  ipBlocking: z.array(ACLAction$outboundSchema).optional(),
  imageOptimizationNewPrice: z.array(ACLAction$outboundSchema).optional(),
  integration: z.array(ACLAction$outboundSchema).optional(),
  integrationAccount: z.array(ACLAction$outboundSchema).optional(),
  integrationConfiguration: z.array(ACLAction$outboundSchema).optional(),
  integrationConfigurationTransfer: z.array(ACLAction$outboundSchema)
    .optional(),
  integrationConfigurationProjects: z.array(ACLAction$outboundSchema)
    .optional(),
  integrationVercelConfigurationOverride: z.array(ACLAction$outboundSchema)
    .optional(),
  integrationConfigurationRole: z.array(ACLAction$outboundSchema).optional(),
  integrationSSOSession: z.array(ACLAction$outboundSchema).optional(),
  integrationResource: z.array(ACLAction$outboundSchema).optional(),
  integrationEvent: z.array(ACLAction$outboundSchema).optional(),
  integrationResourceSecrets: z.array(ACLAction$outboundSchema).optional(),
  integrationDeploymentAction: z.array(ACLAction$outboundSchema).optional(),
  marketplaceInstallationMember: z.array(ACLAction$outboundSchema).optional(),
  marketplaceBillingData: z.array(ACLAction$outboundSchema).optional(),
  marketplaceInvoice: z.array(ACLAction$outboundSchema).optional(),
  marketplaceSettings: z.array(ACLAction$outboundSchema).optional(),
  marketplaceExperimentationItem: z.array(ACLAction$outboundSchema).optional(),
  marketplaceExperimentationEdgeConfigData: z.array(ACLAction$outboundSchema)
    .optional(),
  jobGlobal: z.array(ACLAction$outboundSchema).optional(),
  drain: z.array(ACLAction$outboundSchema).optional(),
  logDrain: z.array(ACLAction$outboundSchema).optional(),
  traceDrain: z.array(ACLAction$outboundSchema).optional(),
  monitoring: z.array(ACLAction$outboundSchema).optional(),
  monitoringSettings: z.array(ACLAction$outboundSchema).optional(),
  monitoringQuery: z.array(ACLAction$outboundSchema).optional(),
  monitoringChart: z.array(ACLAction$outboundSchema).optional(),
  monitoringAlert: z.array(ACLAction$outboundSchema).optional(),
  notificationDeploymentFailed: z.array(ACLAction$outboundSchema).optional(),
  notificationDomainConfiguration: z.array(ACLAction$outboundSchema).optional(),
  notificationDomainExpire: z.array(ACLAction$outboundSchema).optional(),
  notificationDomainMoved: z.array(ACLAction$outboundSchema).optional(),
  notificationDomainPurchase: z.array(ACLAction$outboundSchema).optional(),
  notificationDomainRenewal: z.array(ACLAction$outboundSchema).optional(),
  notificationDomainTransfer: z.array(ACLAction$outboundSchema).optional(),
  notificationDomainUnverified: z.array(ACLAction$outboundSchema).optional(),
  notificationMonitoringAlert: z.array(ACLAction$outboundSchema).optional(),
  notificationPaymentFailed: z.array(ACLAction$outboundSchema).optional(),
  notificationUsageAlert: z.array(ACLAction$outboundSchema).optional(),
  notificationPreferences: z.array(ACLAction$outboundSchema).optional(),
  notificationCustomerBudget: z.array(ACLAction$outboundSchema).optional(),
  notificationStatementOfReasons: z.array(ACLAction$outboundSchema).optional(),
  observabilityConfiguration: z.array(ACLAction$outboundSchema).optional(),
  alerts: z.array(ACLAction$outboundSchema).optional(),
  observabilityNotebook: z.array(ACLAction$outboundSchema).optional(),
  observabilityFunnel: z.array(ACLAction$outboundSchema).optional(),
  openTelemetryEndpoint: z.array(ACLAction$outboundSchema).optional(),
  vercelAppInstallation: z.array(ACLAction$outboundSchema).optional(),
  vercelAppInstallationRequest: z.array(ACLAction$outboundSchema).optional(),
  paymentMethod: z.array(ACLAction$outboundSchema).optional(),
  permissions: z.array(ACLAction$outboundSchema).optional(),
  postgres: z.array(ACLAction$outboundSchema).optional(),
  previewDeploymentSuffix: z.array(ACLAction$outboundSchema).optional(),
  proTrialOnboarding: z.array(ACLAction$outboundSchema).optional(),
  sharedEnvVars: z.array(ACLAction$outboundSchema).optional(),
  sharedEnvVarsProduction: z.array(ACLAction$outboundSchema).optional(),
  space: z.array(ACLAction$outboundSchema).optional(),
  spaceRun: z.array(ACLAction$outboundSchema).optional(),
  passwordProtectionInvoiceItem: z.array(ACLAction$outboundSchema).optional(),
  rateLimit: z.array(ACLAction$outboundSchema).optional(),
  redis: z.array(ACLAction$outboundSchema).optional(),
  repository: z.array(ACLAction$outboundSchema).optional(),
  remoteCaching: z.array(ACLAction$outboundSchema).optional(),
  samlConfig: z.array(ACLAction$outboundSchema).optional(),
  secret: z.array(ACLAction$outboundSchema).optional(),
  redisStoreTokenSet: z.array(ACLAction$outboundSchema).optional(),
  blobStoreTokenSet: z.array(ACLAction$outboundSchema).optional(),
  postgresStoreTokenSet: z.array(ACLAction$outboundSchema).optional(),
  integrationStoreTokenSet: z.array(ACLAction$outboundSchema).optional(),
  integrationResourceReplCommand: z.array(ACLAction$outboundSchema).optional(),
  storeTransfer: z.array(ACLAction$outboundSchema).optional(),
  supportCase: z.array(ACLAction$outboundSchema).optional(),
  supportCaseComment: z.array(ACLAction$outboundSchema).optional(),
  dataCacheBillingSettings: z.array(ACLAction$outboundSchema).optional(),
  team: z.array(ACLAction$outboundSchema).optional(),
  teamAccessRequest: z.array(ACLAction$outboundSchema).optional(),
  teamFellowMembership: z.array(ACLAction$outboundSchema).optional(),
  teamGitExclusivity: z.array(ACLAction$outboundSchema).optional(),
  teamInvite: z.array(ACLAction$outboundSchema).optional(),
  teamInviteCode: z.array(ACLAction$outboundSchema).optional(),
  teamJoin: z.array(ACLAction$outboundSchema).optional(),
  teamMemberMfaStatus: z.array(ACLAction$outboundSchema).optional(),
  teamMicrofrontends: z.array(ACLAction$outboundSchema).optional(),
  teamOwnMembership: z.array(ACLAction$outboundSchema).optional(),
  teamOwnMembershipDisconnectSAML: z.array(ACLAction$outboundSchema).optional(),
  token: z.array(ACLAction$outboundSchema).optional(),
  usage: z.array(ACLAction$outboundSchema).optional(),
  usageCycle: z.array(ACLAction$outboundSchema).optional(),
  vpcPeeringConnection: z.array(ACLAction$outboundSchema).optional(),
  webAnalyticsPlan: z.array(ACLAction$outboundSchema).optional(),
  edgeConfig: z.array(ACLAction$outboundSchema).optional(),
  edgeConfigItem: z.array(ACLAction$outboundSchema).optional(),
  edgeConfigSchema: z.array(ACLAction$outboundSchema).optional(),
  edgeConfigToken: z.array(ACLAction$outboundSchema).optional(),
  webhook: z.array(ACLAction$outboundSchema).optional(),
  webhookEvent: z.array(ACLAction$outboundSchema).optional(),
  endpointVerification: z.array(ACLAction$outboundSchema).optional(),
  projectTransferIn: z.array(ACLAction$outboundSchema).optional(),
  oauth2Application: z.array(ACLAction$outboundSchema).optional(),
  vercelRun: z.array(ACLAction$outboundSchema).optional(),
  vercelRunExec: z.array(ACLAction$outboundSchema).optional(),
  apiKey: z.array(ACLAction$outboundSchema).optional(),
  apiKeyOwnedBySelf: z.array(ACLAction$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    monitoring: "Monitoring",
    notificationMonitoringAlert: "NotificationMonitoringAlert",
    webhookEvent: "webhook-event",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectPermissions$ {
  /** @deprecated use `CreateProjectPermissions$inboundSchema` instead. */
  export const inboundSchema = CreateProjectPermissions$inboundSchema;
  /** @deprecated use `CreateProjectPermissions$outboundSchema` instead. */
  export const outboundSchema = CreateProjectPermissions$outboundSchema;
  /** @deprecated use `CreateProjectPermissions$Outbound` instead. */
  export type Outbound = CreateProjectPermissions$Outbound;
}

export function createProjectPermissionsToJSON(
  createProjectPermissions: CreateProjectPermissions,
): string {
  return JSON.stringify(
    CreateProjectPermissions$outboundSchema.parse(createProjectPermissions),
  );
}

export function createProjectPermissionsFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectPermissions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectPermissions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectPermissions' from JSON`,
  );
}

/** @internal */
export const CreateProjectLastRollbackTarget$inboundSchema: z.ZodType<
  CreateProjectLastRollbackTarget,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateProjectLastRollbackTarget$Outbound = {};

/** @internal */
export const CreateProjectLastRollbackTarget$outboundSchema: z.ZodType<
  CreateProjectLastRollbackTarget$Outbound,
  z.ZodTypeDef,
  CreateProjectLastRollbackTarget
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectLastRollbackTarget$ {
  /** @deprecated use `CreateProjectLastRollbackTarget$inboundSchema` instead. */
  export const inboundSchema = CreateProjectLastRollbackTarget$inboundSchema;
  /** @deprecated use `CreateProjectLastRollbackTarget$outboundSchema` instead. */
  export const outboundSchema = CreateProjectLastRollbackTarget$outboundSchema;
  /** @deprecated use `CreateProjectLastRollbackTarget$Outbound` instead. */
  export type Outbound = CreateProjectLastRollbackTarget$Outbound;
}

export function createProjectLastRollbackTargetToJSON(
  createProjectLastRollbackTarget: CreateProjectLastRollbackTarget,
): string {
  return JSON.stringify(
    CreateProjectLastRollbackTarget$outboundSchema.parse(
      createProjectLastRollbackTarget,
    ),
  );
}

export function createProjectLastRollbackTargetFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectLastRollbackTarget, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectLastRollbackTarget$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectLastRollbackTarget' from JSON`,
  );
}

/** @internal */
export const CreateProjectJobStatus$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectJobStatus
> = z.nativeEnum(CreateProjectJobStatus);

/** @internal */
export const CreateProjectJobStatus$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectJobStatus
> = CreateProjectJobStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectJobStatus$ {
  /** @deprecated use `CreateProjectJobStatus$inboundSchema` instead. */
  export const inboundSchema = CreateProjectJobStatus$inboundSchema;
  /** @deprecated use `CreateProjectJobStatus$outboundSchema` instead. */
  export const outboundSchema = CreateProjectJobStatus$outboundSchema;
}

/** @internal */
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType
  > = z.nativeEnum(
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType,
  );

/** @internal */
export const CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType
  > =
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType$ {
  /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType$inboundSchema;
  /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType$outboundSchema;
}

/** @internal */
export const CreateProjectLastAliasRequest$inboundSchema: z.ZodType<
  CreateProjectLastAliasRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fromDeploymentId: z.string(),
  toDeploymentId: z.string(),
  fromRollingReleaseId: z.string().optional(),
  jobStatus: CreateProjectJobStatus$inboundSchema,
  requestedAt: z.number(),
  type:
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType$inboundSchema,
});

/** @internal */
export type CreateProjectLastAliasRequest$Outbound = {
  fromDeploymentId: string;
  toDeploymentId: string;
  fromRollingReleaseId?: string | undefined;
  jobStatus: string;
  requestedAt: number;
  type: string;
};

/** @internal */
export const CreateProjectLastAliasRequest$outboundSchema: z.ZodType<
  CreateProjectLastAliasRequest$Outbound,
  z.ZodTypeDef,
  CreateProjectLastAliasRequest
> = z.object({
  fromDeploymentId: z.string(),
  toDeploymentId: z.string(),
  fromRollingReleaseId: z.string().optional(),
  jobStatus: CreateProjectJobStatus$outboundSchema,
  requestedAt: z.number(),
  type:
    CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectLastAliasRequest$ {
  /** @deprecated use `CreateProjectLastAliasRequest$inboundSchema` instead. */
  export const inboundSchema = CreateProjectLastAliasRequest$inboundSchema;
  /** @deprecated use `CreateProjectLastAliasRequest$outboundSchema` instead. */
  export const outboundSchema = CreateProjectLastAliasRequest$outboundSchema;
  /** @deprecated use `CreateProjectLastAliasRequest$Outbound` instead. */
  export type Outbound = CreateProjectLastAliasRequest$Outbound;
}

export function createProjectLastAliasRequestToJSON(
  createProjectLastAliasRequest: CreateProjectLastAliasRequest,
): string {
  return JSON.stringify(
    CreateProjectLastAliasRequest$outboundSchema.parse(
      createProjectLastAliasRequest,
    ),
  );
}

export function createProjectLastAliasRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectLastAliasRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectLastAliasRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectLastAliasRequest' from JSON`,
  );
}

/** @internal */
export const CreateProjectProtectionBypassProjectsScope$inboundSchema:
  z.ZodNativeEnum<typeof CreateProjectProtectionBypassProjectsScope> = z
    .nativeEnum(CreateProjectProtectionBypassProjectsScope);

/** @internal */
export const CreateProjectProtectionBypassProjectsScope$outboundSchema:
  z.ZodNativeEnum<typeof CreateProjectProtectionBypassProjectsScope> =
    CreateProjectProtectionBypassProjectsScope$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectProtectionBypassProjectsScope$ {
  /** @deprecated use `CreateProjectProtectionBypassProjectsScope$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectProtectionBypassProjectsScope$inboundSchema;
  /** @deprecated use `CreateProjectProtectionBypassProjectsScope$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectProtectionBypassProjectsScope$outboundSchema;
}

/** @internal */
export const CreateProjectProtectionBypass2$inboundSchema: z.ZodType<
  CreateProjectProtectionBypass2,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.number(),
  createdBy: z.string(),
  scope: CreateProjectProtectionBypassProjectsScope$inboundSchema,
});

/** @internal */
export type CreateProjectProtectionBypass2$Outbound = {
  createdAt: number;
  createdBy: string;
  scope: string;
};

/** @internal */
export const CreateProjectProtectionBypass2$outboundSchema: z.ZodType<
  CreateProjectProtectionBypass2$Outbound,
  z.ZodTypeDef,
  CreateProjectProtectionBypass2
> = z.object({
  createdAt: z.number(),
  createdBy: z.string(),
  scope: CreateProjectProtectionBypassProjectsScope$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectProtectionBypass2$ {
  /** @deprecated use `CreateProjectProtectionBypass2$inboundSchema` instead. */
  export const inboundSchema = CreateProjectProtectionBypass2$inboundSchema;
  /** @deprecated use `CreateProjectProtectionBypass2$outboundSchema` instead. */
  export const outboundSchema = CreateProjectProtectionBypass2$outboundSchema;
  /** @deprecated use `CreateProjectProtectionBypass2$Outbound` instead. */
  export type Outbound = CreateProjectProtectionBypass2$Outbound;
}

export function createProjectProtectionBypass2ToJSON(
  createProjectProtectionBypass2: CreateProjectProtectionBypass2,
): string {
  return JSON.stringify(
    CreateProjectProtectionBypass2$outboundSchema.parse(
      createProjectProtectionBypass2,
    ),
  );
}

export function createProjectProtectionBypass2FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectProtectionBypass2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectProtectionBypass2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectProtectionBypass2' from JSON`,
  );
}

/** @internal */
export const CreateProjectProtectionBypassScope$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectProtectionBypassScope
> = z.nativeEnum(CreateProjectProtectionBypassScope);

/** @internal */
export const CreateProjectProtectionBypassScope$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectProtectionBypassScope
> = CreateProjectProtectionBypassScope$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectProtectionBypassScope$ {
  /** @deprecated use `CreateProjectProtectionBypassScope$inboundSchema` instead. */
  export const inboundSchema = CreateProjectProtectionBypassScope$inboundSchema;
  /** @deprecated use `CreateProjectProtectionBypassScope$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectProtectionBypassScope$outboundSchema;
}

/** @internal */
export const CreateProjectProtectionBypass1$inboundSchema: z.ZodType<
  CreateProjectProtectionBypass1,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.number(),
  createdBy: z.string(),
  scope: CreateProjectProtectionBypassScope$inboundSchema,
  integrationId: z.string(),
  configurationId: z.string(),
});

/** @internal */
export type CreateProjectProtectionBypass1$Outbound = {
  createdAt: number;
  createdBy: string;
  scope: string;
  integrationId: string;
  configurationId: string;
};

/** @internal */
export const CreateProjectProtectionBypass1$outboundSchema: z.ZodType<
  CreateProjectProtectionBypass1$Outbound,
  z.ZodTypeDef,
  CreateProjectProtectionBypass1
> = z.object({
  createdAt: z.number(),
  createdBy: z.string(),
  scope: CreateProjectProtectionBypassScope$outboundSchema,
  integrationId: z.string(),
  configurationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectProtectionBypass1$ {
  /** @deprecated use `CreateProjectProtectionBypass1$inboundSchema` instead. */
  export const inboundSchema = CreateProjectProtectionBypass1$inboundSchema;
  /** @deprecated use `CreateProjectProtectionBypass1$outboundSchema` instead. */
  export const outboundSchema = CreateProjectProtectionBypass1$outboundSchema;
  /** @deprecated use `CreateProjectProtectionBypass1$Outbound` instead. */
  export type Outbound = CreateProjectProtectionBypass1$Outbound;
}

export function createProjectProtectionBypass1ToJSON(
  createProjectProtectionBypass1: CreateProjectProtectionBypass1,
): string {
  return JSON.stringify(
    CreateProjectProtectionBypass1$outboundSchema.parse(
      createProjectProtectionBypass1,
    ),
  );
}

export function createProjectProtectionBypass1FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectProtectionBypass1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectProtectionBypass1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectProtectionBypass1' from JSON`,
  );
}

/** @internal */
export const CreateProjectProtectionBypass$inboundSchema: z.ZodType<
  CreateProjectProtectionBypass,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateProjectProtectionBypass1$inboundSchema),
  z.lazy(() => CreateProjectProtectionBypass2$inboundSchema),
]);

/** @internal */
export type CreateProjectProtectionBypass$Outbound =
  | CreateProjectProtectionBypass1$Outbound
  | CreateProjectProtectionBypass2$Outbound;

/** @internal */
export const CreateProjectProtectionBypass$outboundSchema: z.ZodType<
  CreateProjectProtectionBypass$Outbound,
  z.ZodTypeDef,
  CreateProjectProtectionBypass
> = z.union([
  z.lazy(() => CreateProjectProtectionBypass1$outboundSchema),
  z.lazy(() => CreateProjectProtectionBypass2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectProtectionBypass$ {
  /** @deprecated use `CreateProjectProtectionBypass$inboundSchema` instead. */
  export const inboundSchema = CreateProjectProtectionBypass$inboundSchema;
  /** @deprecated use `CreateProjectProtectionBypass$outboundSchema` instead. */
  export const outboundSchema = CreateProjectProtectionBypass$outboundSchema;
  /** @deprecated use `CreateProjectProtectionBypass$Outbound` instead. */
  export type Outbound = CreateProjectProtectionBypass$Outbound;
}

export function createProjectProtectionBypassToJSON(
  createProjectProtectionBypass: CreateProjectProtectionBypass,
): string {
  return JSON.stringify(
    CreateProjectProtectionBypass$outboundSchema.parse(
      createProjectProtectionBypass,
    ),
  );
}

export function createProjectProtectionBypassFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectProtectionBypass, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectProtectionBypass$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectProtectionBypass' from JSON`,
  );
}

/** @internal */
export const CreateProjectTrustedIpsProjectsDeploymentType$inboundSchema:
  z.ZodNativeEnum<typeof CreateProjectTrustedIpsProjectsDeploymentType> = z
    .nativeEnum(CreateProjectTrustedIpsProjectsDeploymentType);

/** @internal */
export const CreateProjectTrustedIpsProjectsDeploymentType$outboundSchema:
  z.ZodNativeEnum<typeof CreateProjectTrustedIpsProjectsDeploymentType> =
    CreateProjectTrustedIpsProjectsDeploymentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectTrustedIpsProjectsDeploymentType$ {
  /** @deprecated use `CreateProjectTrustedIpsProjectsDeploymentType$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectTrustedIpsProjectsDeploymentType$inboundSchema;
  /** @deprecated use `CreateProjectTrustedIpsProjectsDeploymentType$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectTrustedIpsProjectsDeploymentType$outboundSchema;
}

/** @internal */
export const CreateProjectTrustedIps2$inboundSchema: z.ZodType<
  CreateProjectTrustedIps2,
  z.ZodTypeDef,
  unknown
> = z.object({
  deploymentType: CreateProjectTrustedIpsProjectsDeploymentType$inboundSchema,
});

/** @internal */
export type CreateProjectTrustedIps2$Outbound = {
  deploymentType: string;
};

/** @internal */
export const CreateProjectTrustedIps2$outboundSchema: z.ZodType<
  CreateProjectTrustedIps2$Outbound,
  z.ZodTypeDef,
  CreateProjectTrustedIps2
> = z.object({
  deploymentType: CreateProjectTrustedIpsProjectsDeploymentType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectTrustedIps2$ {
  /** @deprecated use `CreateProjectTrustedIps2$inboundSchema` instead. */
  export const inboundSchema = CreateProjectTrustedIps2$inboundSchema;
  /** @deprecated use `CreateProjectTrustedIps2$outboundSchema` instead. */
  export const outboundSchema = CreateProjectTrustedIps2$outboundSchema;
  /** @deprecated use `CreateProjectTrustedIps2$Outbound` instead. */
  export type Outbound = CreateProjectTrustedIps2$Outbound;
}

export function createProjectTrustedIps2ToJSON(
  createProjectTrustedIps2: CreateProjectTrustedIps2,
): string {
  return JSON.stringify(
    CreateProjectTrustedIps2$outboundSchema.parse(createProjectTrustedIps2),
  );
}

export function createProjectTrustedIps2FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectTrustedIps2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectTrustedIps2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectTrustedIps2' from JSON`,
  );
}

/** @internal */
export const CreateProjectTrustedIpsDeploymentType$inboundSchema:
  z.ZodNativeEnum<typeof CreateProjectTrustedIpsDeploymentType> = z.nativeEnum(
    CreateProjectTrustedIpsDeploymentType,
  );

/** @internal */
export const CreateProjectTrustedIpsDeploymentType$outboundSchema:
  z.ZodNativeEnum<typeof CreateProjectTrustedIpsDeploymentType> =
    CreateProjectTrustedIpsDeploymentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectTrustedIpsDeploymentType$ {
  /** @deprecated use `CreateProjectTrustedIpsDeploymentType$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectTrustedIpsDeploymentType$inboundSchema;
  /** @deprecated use `CreateProjectTrustedIpsDeploymentType$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectTrustedIpsDeploymentType$outboundSchema;
}

/** @internal */
export const TrustedIpsAddresses$inboundSchema: z.ZodType<
  TrustedIpsAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
  note: z.string().optional(),
});

/** @internal */
export type TrustedIpsAddresses$Outbound = {
  value: string;
  note?: string | undefined;
};

/** @internal */
export const TrustedIpsAddresses$outboundSchema: z.ZodType<
  TrustedIpsAddresses$Outbound,
  z.ZodTypeDef,
  TrustedIpsAddresses
> = z.object({
  value: z.string(),
  note: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TrustedIpsAddresses$ {
  /** @deprecated use `TrustedIpsAddresses$inboundSchema` instead. */
  export const inboundSchema = TrustedIpsAddresses$inboundSchema;
  /** @deprecated use `TrustedIpsAddresses$outboundSchema` instead. */
  export const outboundSchema = TrustedIpsAddresses$outboundSchema;
  /** @deprecated use `TrustedIpsAddresses$Outbound` instead. */
  export type Outbound = TrustedIpsAddresses$Outbound;
}

export function trustedIpsAddressesToJSON(
  trustedIpsAddresses: TrustedIpsAddresses,
): string {
  return JSON.stringify(
    TrustedIpsAddresses$outboundSchema.parse(trustedIpsAddresses),
  );
}

export function trustedIpsAddressesFromJSON(
  jsonString: string,
): SafeParseResult<TrustedIpsAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TrustedIpsAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TrustedIpsAddresses' from JSON`,
  );
}

/** @internal */
export const TrustedIpsProtectionMode$inboundSchema: z.ZodNativeEnum<
  typeof TrustedIpsProtectionMode
> = z.nativeEnum(TrustedIpsProtectionMode);

/** @internal */
export const TrustedIpsProtectionMode$outboundSchema: z.ZodNativeEnum<
  typeof TrustedIpsProtectionMode
> = TrustedIpsProtectionMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TrustedIpsProtectionMode$ {
  /** @deprecated use `TrustedIpsProtectionMode$inboundSchema` instead. */
  export const inboundSchema = TrustedIpsProtectionMode$inboundSchema;
  /** @deprecated use `TrustedIpsProtectionMode$outboundSchema` instead. */
  export const outboundSchema = TrustedIpsProtectionMode$outboundSchema;
}

/** @internal */
export const CreateProjectTrustedIps1$inboundSchema: z.ZodType<
  CreateProjectTrustedIps1,
  z.ZodTypeDef,
  unknown
> = z.object({
  deploymentType: CreateProjectTrustedIpsDeploymentType$inboundSchema,
  addresses: z.array(z.lazy(() => TrustedIpsAddresses$inboundSchema)),
  protectionMode: TrustedIpsProtectionMode$inboundSchema,
});

/** @internal */
export type CreateProjectTrustedIps1$Outbound = {
  deploymentType: string;
  addresses: Array<TrustedIpsAddresses$Outbound>;
  protectionMode: string;
};

/** @internal */
export const CreateProjectTrustedIps1$outboundSchema: z.ZodType<
  CreateProjectTrustedIps1$Outbound,
  z.ZodTypeDef,
  CreateProjectTrustedIps1
> = z.object({
  deploymentType: CreateProjectTrustedIpsDeploymentType$outboundSchema,
  addresses: z.array(z.lazy(() => TrustedIpsAddresses$outboundSchema)),
  protectionMode: TrustedIpsProtectionMode$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectTrustedIps1$ {
  /** @deprecated use `CreateProjectTrustedIps1$inboundSchema` instead. */
  export const inboundSchema = CreateProjectTrustedIps1$inboundSchema;
  /** @deprecated use `CreateProjectTrustedIps1$outboundSchema` instead. */
  export const outboundSchema = CreateProjectTrustedIps1$outboundSchema;
  /** @deprecated use `CreateProjectTrustedIps1$Outbound` instead. */
  export type Outbound = CreateProjectTrustedIps1$Outbound;
}

export function createProjectTrustedIps1ToJSON(
  createProjectTrustedIps1: CreateProjectTrustedIps1,
): string {
  return JSON.stringify(
    CreateProjectTrustedIps1$outboundSchema.parse(createProjectTrustedIps1),
  );
}

export function createProjectTrustedIps1FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectTrustedIps1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectTrustedIps1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectTrustedIps1' from JSON`,
  );
}

/** @internal */
export const CreateProjectTrustedIps$inboundSchema: z.ZodType<
  CreateProjectTrustedIps,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateProjectTrustedIps1$inboundSchema),
  z.lazy(() => CreateProjectTrustedIps2$inboundSchema),
]);

/** @internal */
export type CreateProjectTrustedIps$Outbound =
  | CreateProjectTrustedIps1$Outbound
  | CreateProjectTrustedIps2$Outbound;

/** @internal */
export const CreateProjectTrustedIps$outboundSchema: z.ZodType<
  CreateProjectTrustedIps$Outbound,
  z.ZodTypeDef,
  CreateProjectTrustedIps
> = z.union([
  z.lazy(() => CreateProjectTrustedIps1$outboundSchema),
  z.lazy(() => CreateProjectTrustedIps2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectTrustedIps$ {
  /** @deprecated use `CreateProjectTrustedIps$inboundSchema` instead. */
  export const inboundSchema = CreateProjectTrustedIps$inboundSchema;
  /** @deprecated use `CreateProjectTrustedIps$outboundSchema` instead. */
  export const outboundSchema = CreateProjectTrustedIps$outboundSchema;
  /** @deprecated use `CreateProjectTrustedIps$Outbound` instead. */
  export type Outbound = CreateProjectTrustedIps$Outbound;
}

export function createProjectTrustedIpsToJSON(
  createProjectTrustedIps: CreateProjectTrustedIps,
): string {
  return JSON.stringify(
    CreateProjectTrustedIps$outboundSchema.parse(createProjectTrustedIps),
  );
}

export function createProjectTrustedIpsFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectTrustedIps, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectTrustedIps$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectTrustedIps' from JSON`,
  );
}

/** @internal */
export const CreateProjectGitComments$inboundSchema: z.ZodType<
  CreateProjectGitComments,
  z.ZodTypeDef,
  unknown
> = z.object({
  onPullRequest: z.boolean(),
  onCommit: z.boolean(),
});

/** @internal */
export type CreateProjectGitComments$Outbound = {
  onPullRequest: boolean;
  onCommit: boolean;
};

/** @internal */
export const CreateProjectGitComments$outboundSchema: z.ZodType<
  CreateProjectGitComments$Outbound,
  z.ZodTypeDef,
  CreateProjectGitComments
> = z.object({
  onPullRequest: z.boolean(),
  onCommit: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectGitComments$ {
  /** @deprecated use `CreateProjectGitComments$inboundSchema` instead. */
  export const inboundSchema = CreateProjectGitComments$inboundSchema;
  /** @deprecated use `CreateProjectGitComments$outboundSchema` instead. */
  export const outboundSchema = CreateProjectGitComments$outboundSchema;
  /** @deprecated use `CreateProjectGitComments$Outbound` instead. */
  export type Outbound = CreateProjectGitComments$Outbound;
}

export function createProjectGitCommentsToJSON(
  createProjectGitComments: CreateProjectGitComments,
): string {
  return JSON.stringify(
    CreateProjectGitComments$outboundSchema.parse(createProjectGitComments),
  );
}

export function createProjectGitCommentsFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectGitComments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectGitComments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectGitComments' from JSON`,
  );
}

/** @internal */
export const CreateProjectCreateDeployments$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectCreateDeployments
> = z.nativeEnum(CreateProjectCreateDeployments);

/** @internal */
export const CreateProjectCreateDeployments$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectCreateDeployments
> = CreateProjectCreateDeployments$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectCreateDeployments$ {
  /** @deprecated use `CreateProjectCreateDeployments$inboundSchema` instead. */
  export const inboundSchema = CreateProjectCreateDeployments$inboundSchema;
  /** @deprecated use `CreateProjectCreateDeployments$outboundSchema` instead. */
  export const outboundSchema = CreateProjectCreateDeployments$outboundSchema;
}

/** @internal */
export const CreateProjectGitProviderOptions$inboundSchema: z.ZodType<
  CreateProjectGitProviderOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  createDeployments: CreateProjectCreateDeployments$inboundSchema,
  disableRepositoryDispatchEvents: z.boolean().optional(),
});

/** @internal */
export type CreateProjectGitProviderOptions$Outbound = {
  createDeployments: string;
  disableRepositoryDispatchEvents?: boolean | undefined;
};

/** @internal */
export const CreateProjectGitProviderOptions$outboundSchema: z.ZodType<
  CreateProjectGitProviderOptions$Outbound,
  z.ZodTypeDef,
  CreateProjectGitProviderOptions
> = z.object({
  createDeployments: CreateProjectCreateDeployments$outboundSchema,
  disableRepositoryDispatchEvents: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectGitProviderOptions$ {
  /** @deprecated use `CreateProjectGitProviderOptions$inboundSchema` instead. */
  export const inboundSchema = CreateProjectGitProviderOptions$inboundSchema;
  /** @deprecated use `CreateProjectGitProviderOptions$outboundSchema` instead. */
  export const outboundSchema = CreateProjectGitProviderOptions$outboundSchema;
  /** @deprecated use `CreateProjectGitProviderOptions$Outbound` instead. */
  export type Outbound = CreateProjectGitProviderOptions$Outbound;
}

export function createProjectGitProviderOptionsToJSON(
  createProjectGitProviderOptions: CreateProjectGitProviderOptions,
): string {
  return JSON.stringify(
    CreateProjectGitProviderOptions$outboundSchema.parse(
      createProjectGitProviderOptions,
    ),
  );
}

export function createProjectGitProviderOptionsFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectGitProviderOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectGitProviderOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectGitProviderOptions' from JSON`,
  );
}

/** @internal */
export const CreateProjectWebAnalytics$inboundSchema: z.ZodType<
  CreateProjectWebAnalytics,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  disabledAt: z.number().optional(),
  canceledAt: z.number().optional(),
  enabledAt: z.number().optional(),
  hasData: z.boolean().optional(),
});

/** @internal */
export type CreateProjectWebAnalytics$Outbound = {
  id: string;
  disabledAt?: number | undefined;
  canceledAt?: number | undefined;
  enabledAt?: number | undefined;
  hasData?: boolean | undefined;
};

/** @internal */
export const CreateProjectWebAnalytics$outboundSchema: z.ZodType<
  CreateProjectWebAnalytics$Outbound,
  z.ZodTypeDef,
  CreateProjectWebAnalytics
> = z.object({
  id: z.string(),
  disabledAt: z.number().optional(),
  canceledAt: z.number().optional(),
  enabledAt: z.number().optional(),
  hasData: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectWebAnalytics$ {
  /** @deprecated use `CreateProjectWebAnalytics$inboundSchema` instead. */
  export const inboundSchema = CreateProjectWebAnalytics$inboundSchema;
  /** @deprecated use `CreateProjectWebAnalytics$outboundSchema` instead. */
  export const outboundSchema = CreateProjectWebAnalytics$outboundSchema;
  /** @deprecated use `CreateProjectWebAnalytics$Outbound` instead. */
  export type Outbound = CreateProjectWebAnalytics$Outbound;
}

export function createProjectWebAnalyticsToJSON(
  createProjectWebAnalytics: CreateProjectWebAnalytics,
): string {
  return JSON.stringify(
    CreateProjectWebAnalytics$outboundSchema.parse(createProjectWebAnalytics),
  );
}

export function createProjectWebAnalyticsFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectWebAnalytics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectWebAnalytics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectWebAnalytics' from JSON`,
  );
}

/** @internal */
export const CreateProjectProjectsResponse200Action$inboundSchema:
  z.ZodNativeEnum<typeof CreateProjectProjectsResponse200Action> = z.nativeEnum(
    CreateProjectProjectsResponse200Action,
  );

/** @internal */
export const CreateProjectProjectsResponse200Action$outboundSchema:
  z.ZodNativeEnum<typeof CreateProjectProjectsResponse200Action> =
    CreateProjectProjectsResponse200Action$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectProjectsResponse200Action$ {
  /** @deprecated use `CreateProjectProjectsResponse200Action$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectProjectsResponse200Action$inboundSchema;
  /** @deprecated use `CreateProjectProjectsResponse200Action$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectProjectsResponse200Action$outboundSchema;
}

/** @internal */
export const CreateProjectBotFilter$inboundSchema: z.ZodType<
  CreateProjectBotFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  active: z.boolean(),
  action: CreateProjectProjectsResponse200Action$inboundSchema.optional(),
});

/** @internal */
export type CreateProjectBotFilter$Outbound = {
  active: boolean;
  action?: string | undefined;
};

/** @internal */
export const CreateProjectBotFilter$outboundSchema: z.ZodType<
  CreateProjectBotFilter$Outbound,
  z.ZodTypeDef,
  CreateProjectBotFilter
> = z.object({
  active: z.boolean(),
  action: CreateProjectProjectsResponse200Action$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectBotFilter$ {
  /** @deprecated use `CreateProjectBotFilter$inboundSchema` instead. */
  export const inboundSchema = CreateProjectBotFilter$inboundSchema;
  /** @deprecated use `CreateProjectBotFilter$outboundSchema` instead. */
  export const outboundSchema = CreateProjectBotFilter$outboundSchema;
  /** @deprecated use `CreateProjectBotFilter$Outbound` instead. */
  export type Outbound = CreateProjectBotFilter$Outbound;
}

export function createProjectBotFilterToJSON(
  createProjectBotFilter: CreateProjectBotFilter,
): string {
  return JSON.stringify(
    CreateProjectBotFilter$outboundSchema.parse(createProjectBotFilter),
  );
}

export function createProjectBotFilterFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectBotFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectBotFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectBotFilter' from JSON`,
  );
}

/** @internal */
export const CreateProjectProjectsAction$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectProjectsAction
> = z.nativeEnum(CreateProjectProjectsAction);

/** @internal */
export const CreateProjectProjectsAction$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectProjectsAction
> = CreateProjectProjectsAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectProjectsAction$ {
  /** @deprecated use `CreateProjectProjectsAction$inboundSchema` instead. */
  export const inboundSchema = CreateProjectProjectsAction$inboundSchema;
  /** @deprecated use `CreateProjectProjectsAction$outboundSchema` instead. */
  export const outboundSchema = CreateProjectProjectsAction$outboundSchema;
}

/** @internal */
export const CreateProjectAiBots$inboundSchema: z.ZodType<
  CreateProjectAiBots,
  z.ZodTypeDef,
  unknown
> = z.object({
  active: z.boolean(),
  action: CreateProjectProjectsAction$inboundSchema.optional(),
});

/** @internal */
export type CreateProjectAiBots$Outbound = {
  active: boolean;
  action?: string | undefined;
};

/** @internal */
export const CreateProjectAiBots$outboundSchema: z.ZodType<
  CreateProjectAiBots$Outbound,
  z.ZodTypeDef,
  CreateProjectAiBots
> = z.object({
  active: z.boolean(),
  action: CreateProjectProjectsAction$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectAiBots$ {
  /** @deprecated use `CreateProjectAiBots$inboundSchema` instead. */
  export const inboundSchema = CreateProjectAiBots$inboundSchema;
  /** @deprecated use `CreateProjectAiBots$outboundSchema` instead. */
  export const outboundSchema = CreateProjectAiBots$outboundSchema;
  /** @deprecated use `CreateProjectAiBots$Outbound` instead. */
  export type Outbound = CreateProjectAiBots$Outbound;
}

export function createProjectAiBotsToJSON(
  createProjectAiBots: CreateProjectAiBots,
): string {
  return JSON.stringify(
    CreateProjectAiBots$outboundSchema.parse(createProjectAiBots),
  );
}

export function createProjectAiBotsFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectAiBots, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectAiBots$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectAiBots' from JSON`,
  );
}

/** @internal */
export const CreateProjectProjectsResponseAction$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectProjectsResponseAction
> = z.nativeEnum(CreateProjectProjectsResponseAction);

/** @internal */
export const CreateProjectProjectsResponseAction$outboundSchema:
  z.ZodNativeEnum<typeof CreateProjectProjectsResponseAction> =
    CreateProjectProjectsResponseAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectProjectsResponseAction$ {
  /** @deprecated use `CreateProjectProjectsResponseAction$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectProjectsResponseAction$inboundSchema;
  /** @deprecated use `CreateProjectProjectsResponseAction$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectProjectsResponseAction$outboundSchema;
}

/** @internal */
export const CreateProjectOwasp$inboundSchema: z.ZodType<
  CreateProjectOwasp,
  z.ZodTypeDef,
  unknown
> = z.object({
  active: z.boolean(),
  action: CreateProjectProjectsResponseAction$inboundSchema.optional(),
});

/** @internal */
export type CreateProjectOwasp$Outbound = {
  active: boolean;
  action?: string | undefined;
};

/** @internal */
export const CreateProjectOwasp$outboundSchema: z.ZodType<
  CreateProjectOwasp$Outbound,
  z.ZodTypeDef,
  CreateProjectOwasp
> = z.object({
  active: z.boolean(),
  action: CreateProjectProjectsResponseAction$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectOwasp$ {
  /** @deprecated use `CreateProjectOwasp$inboundSchema` instead. */
  export const inboundSchema = CreateProjectOwasp$inboundSchema;
  /** @deprecated use `CreateProjectOwasp$outboundSchema` instead. */
  export const outboundSchema = CreateProjectOwasp$outboundSchema;
  /** @deprecated use `CreateProjectOwasp$Outbound` instead. */
  export type Outbound = CreateProjectOwasp$Outbound;
}

export function createProjectOwaspToJSON(
  createProjectOwasp: CreateProjectOwasp,
): string {
  return JSON.stringify(
    CreateProjectOwasp$outboundSchema.parse(createProjectOwasp),
  );
}

export function createProjectOwaspFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectOwasp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectOwasp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectOwasp' from JSON`,
  );
}

/** @internal */
export const CreateProjectManagedRules$inboundSchema: z.ZodType<
  CreateProjectManagedRules,
  z.ZodTypeDef,
  unknown
> = z.object({
  bot_filter: z.lazy(() => CreateProjectBotFilter$inboundSchema),
  ai_bots: z.lazy(() => CreateProjectAiBots$inboundSchema),
  owasp: z.lazy(() => CreateProjectOwasp$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "bot_filter": "botFilter",
    "ai_bots": "aiBots",
  });
});

/** @internal */
export type CreateProjectManagedRules$Outbound = {
  bot_filter: CreateProjectBotFilter$Outbound;
  ai_bots: CreateProjectAiBots$Outbound;
  owasp: CreateProjectOwasp$Outbound;
};

/** @internal */
export const CreateProjectManagedRules$outboundSchema: z.ZodType<
  CreateProjectManagedRules$Outbound,
  z.ZodTypeDef,
  CreateProjectManagedRules
> = z.object({
  botFilter: z.lazy(() => CreateProjectBotFilter$outboundSchema),
  aiBots: z.lazy(() => CreateProjectAiBots$outboundSchema),
  owasp: z.lazy(() => CreateProjectOwasp$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    botFilter: "bot_filter",
    aiBots: "ai_bots",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectManagedRules$ {
  /** @deprecated use `CreateProjectManagedRules$inboundSchema` instead. */
  export const inboundSchema = CreateProjectManagedRules$inboundSchema;
  /** @deprecated use `CreateProjectManagedRules$outboundSchema` instead. */
  export const outboundSchema = CreateProjectManagedRules$outboundSchema;
  /** @deprecated use `CreateProjectManagedRules$Outbound` instead. */
  export type Outbound = CreateProjectManagedRules$Outbound;
}

export function createProjectManagedRulesToJSON(
  createProjectManagedRules: CreateProjectManagedRules,
): string {
  return JSON.stringify(
    CreateProjectManagedRules$outboundSchema.parse(createProjectManagedRules),
  );
}

export function createProjectManagedRulesFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectManagedRules, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectManagedRules$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectManagedRules' from JSON`,
  );
}

/** @internal */
export const CreateProjectSecurity$inboundSchema: z.ZodType<
  CreateProjectSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  attackModeEnabled: z.boolean().optional(),
  attackModeUpdatedAt: z.number().optional(),
  firewallEnabled: z.boolean().optional(),
  firewallUpdatedAt: z.number().optional(),
  attackModeActiveUntil: z.nullable(z.number()).optional(),
  firewallConfigVersion: z.number().optional(),
  firewallSeawallEnabled: z.boolean().optional(),
  ja3Enabled: z.boolean().optional(),
  ja4Enabled: z.boolean().optional(),
  firewallBypassIps: z.array(z.string()).optional(),
  managedRules: z.nullable(
    z.lazy(() => CreateProjectManagedRules$inboundSchema),
  ).optional(),
  botIdEnabled: z.boolean().optional(),
});

/** @internal */
export type CreateProjectSecurity$Outbound = {
  attackModeEnabled?: boolean | undefined;
  attackModeUpdatedAt?: number | undefined;
  firewallEnabled?: boolean | undefined;
  firewallUpdatedAt?: number | undefined;
  attackModeActiveUntil?: number | null | undefined;
  firewallConfigVersion?: number | undefined;
  firewallSeawallEnabled?: boolean | undefined;
  ja3Enabled?: boolean | undefined;
  ja4Enabled?: boolean | undefined;
  firewallBypassIps?: Array<string> | undefined;
  managedRules?: CreateProjectManagedRules$Outbound | null | undefined;
  botIdEnabled?: boolean | undefined;
};

/** @internal */
export const CreateProjectSecurity$outboundSchema: z.ZodType<
  CreateProjectSecurity$Outbound,
  z.ZodTypeDef,
  CreateProjectSecurity
> = z.object({
  attackModeEnabled: z.boolean().optional(),
  attackModeUpdatedAt: z.number().optional(),
  firewallEnabled: z.boolean().optional(),
  firewallUpdatedAt: z.number().optional(),
  attackModeActiveUntil: z.nullable(z.number()).optional(),
  firewallConfigVersion: z.number().optional(),
  firewallSeawallEnabled: z.boolean().optional(),
  ja3Enabled: z.boolean().optional(),
  ja4Enabled: z.boolean().optional(),
  firewallBypassIps: z.array(z.string()).optional(),
  managedRules: z.nullable(
    z.lazy(() => CreateProjectManagedRules$outboundSchema),
  ).optional(),
  botIdEnabled: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectSecurity$ {
  /** @deprecated use `CreateProjectSecurity$inboundSchema` instead. */
  export const inboundSchema = CreateProjectSecurity$inboundSchema;
  /** @deprecated use `CreateProjectSecurity$outboundSchema` instead. */
  export const outboundSchema = CreateProjectSecurity$outboundSchema;
  /** @deprecated use `CreateProjectSecurity$Outbound` instead. */
  export type Outbound = CreateProjectSecurity$Outbound;
}

export function createProjectSecurityToJSON(
  createProjectSecurity: CreateProjectSecurity,
): string {
  return JSON.stringify(
    CreateProjectSecurity$outboundSchema.parse(createProjectSecurity),
  );
}

export function createProjectSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectSecurity' from JSON`,
  );
}

/** @internal */
export const CreateProjectIssuerMode$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectIssuerMode
> = z.nativeEnum(CreateProjectIssuerMode);

/** @internal */
export const CreateProjectIssuerMode$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectIssuerMode
> = CreateProjectIssuerMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectIssuerMode$ {
  /** @deprecated use `CreateProjectIssuerMode$inboundSchema` instead. */
  export const inboundSchema = CreateProjectIssuerMode$inboundSchema;
  /** @deprecated use `CreateProjectIssuerMode$outboundSchema` instead. */
  export const outboundSchema = CreateProjectIssuerMode$outboundSchema;
}

/** @internal */
export const CreateProjectOidcTokenConfig$inboundSchema: z.ZodType<
  CreateProjectOidcTokenConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean().optional(),
  issuerMode: CreateProjectIssuerMode$inboundSchema.optional(),
});

/** @internal */
export type CreateProjectOidcTokenConfig$Outbound = {
  enabled?: boolean | undefined;
  issuerMode?: string | undefined;
};

/** @internal */
export const CreateProjectOidcTokenConfig$outboundSchema: z.ZodType<
  CreateProjectOidcTokenConfig$Outbound,
  z.ZodTypeDef,
  CreateProjectOidcTokenConfig
> = z.object({
  enabled: z.boolean().optional(),
  issuerMode: CreateProjectIssuerMode$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectOidcTokenConfig$ {
  /** @deprecated use `CreateProjectOidcTokenConfig$inboundSchema` instead. */
  export const inboundSchema = CreateProjectOidcTokenConfig$inboundSchema;
  /** @deprecated use `CreateProjectOidcTokenConfig$outboundSchema` instead. */
  export const outboundSchema = CreateProjectOidcTokenConfig$outboundSchema;
  /** @deprecated use `CreateProjectOidcTokenConfig$Outbound` instead. */
  export type Outbound = CreateProjectOidcTokenConfig$Outbound;
}

export function createProjectOidcTokenConfigToJSON(
  createProjectOidcTokenConfig: CreateProjectOidcTokenConfig,
): string {
  return JSON.stringify(
    CreateProjectOidcTokenConfig$outboundSchema.parse(
      createProjectOidcTokenConfig,
    ),
  );
}

export function createProjectOidcTokenConfigFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectOidcTokenConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectOidcTokenConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectOidcTokenConfig' from JSON`,
  );
}

/** @internal */
export const CreateProjectTier$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectTier
> = z.nativeEnum(CreateProjectTier);

/** @internal */
export const CreateProjectTier$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectTier
> = CreateProjectTier$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectTier$ {
  /** @deprecated use `CreateProjectTier$inboundSchema` instead. */
  export const inboundSchema = CreateProjectTier$inboundSchema;
  /** @deprecated use `CreateProjectTier$outboundSchema` instead. */
  export const outboundSchema = CreateProjectTier$outboundSchema;
}

/** @internal */
export const CreateProjectFeatures$inboundSchema: z.ZodType<
  CreateProjectFeatures,
  z.ZodTypeDef,
  unknown
> = z.object({
  webAnalytics: z.boolean().optional(),
});

/** @internal */
export type CreateProjectFeatures$Outbound = {
  webAnalytics?: boolean | undefined;
};

/** @internal */
export const CreateProjectFeatures$outboundSchema: z.ZodType<
  CreateProjectFeatures$Outbound,
  z.ZodTypeDef,
  CreateProjectFeatures
> = z.object({
  webAnalytics: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectFeatures$ {
  /** @deprecated use `CreateProjectFeatures$inboundSchema` instead. */
  export const inboundSchema = CreateProjectFeatures$inboundSchema;
  /** @deprecated use `CreateProjectFeatures$outboundSchema` instead. */
  export const outboundSchema = CreateProjectFeatures$outboundSchema;
  /** @deprecated use `CreateProjectFeatures$Outbound` instead. */
  export type Outbound = CreateProjectFeatures$Outbound;
}

export function createProjectFeaturesToJSON(
  createProjectFeatures: CreateProjectFeatures,
): string {
  return JSON.stringify(
    CreateProjectFeatures$outboundSchema.parse(createProjectFeatures),
  );
}

export function createProjectFeaturesFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectFeatures, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectFeatures$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectFeatures' from JSON`,
  );
}

/** @internal */
export const CreateProjectHistory$inboundSchema: z.ZodType<
  CreateProjectHistory,
  z.ZodTypeDef,
  unknown
> = z.object({
  scanner: z.string(),
  reason: z.string(),
  by: z.string(),
  byId: z.string(),
  at: z.number(),
});

/** @internal */
export type CreateProjectHistory$Outbound = {
  scanner: string;
  reason: string;
  by: string;
  byId: string;
  at: number;
};

/** @internal */
export const CreateProjectHistory$outboundSchema: z.ZodType<
  CreateProjectHistory$Outbound,
  z.ZodTypeDef,
  CreateProjectHistory
> = z.object({
  scanner: z.string(),
  reason: z.string(),
  by: z.string(),
  byId: z.string(),
  at: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectHistory$ {
  /** @deprecated use `CreateProjectHistory$inboundSchema` instead. */
  export const inboundSchema = CreateProjectHistory$inboundSchema;
  /** @deprecated use `CreateProjectHistory$outboundSchema` instead. */
  export const outboundSchema = CreateProjectHistory$outboundSchema;
  /** @deprecated use `CreateProjectHistory$Outbound` instead. */
  export type Outbound = CreateProjectHistory$Outbound;
}

export function createProjectHistoryToJSON(
  createProjectHistory: CreateProjectHistory,
): string {
  return JSON.stringify(
    CreateProjectHistory$outboundSchema.parse(createProjectHistory),
  );
}

export function createProjectHistoryFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectHistory, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectHistory$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectHistory' from JSON`,
  );
}

/** @internal */
export const CreateProjectAction$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectAction
> = z.nativeEnum(CreateProjectAction);

/** @internal */
export const CreateProjectAction$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectAction
> = CreateProjectAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectAction$ {
  /** @deprecated use `CreateProjectAction$inboundSchema` instead. */
  export const inboundSchema = CreateProjectAction$inboundSchema;
  /** @deprecated use `CreateProjectAction$outboundSchema` instead. */
  export const outboundSchema = CreateProjectAction$outboundSchema;
}

/** @internal */
export const CreateProjectBlock$inboundSchema: z.ZodType<
  CreateProjectBlock,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: CreateProjectAction$inboundSchema,
  reason: z.string(),
  statusCode: z.number(),
  createdAt: z.number(),
  caseId: z.string().optional(),
  actor: z.string().optional(),
  comment: z.string().optional(),
  isCascading: z.boolean().optional(),
});

/** @internal */
export type CreateProjectBlock$Outbound = {
  action: string;
  reason: string;
  statusCode: number;
  createdAt: number;
  caseId?: string | undefined;
  actor?: string | undefined;
  comment?: string | undefined;
  isCascading?: boolean | undefined;
};

/** @internal */
export const CreateProjectBlock$outboundSchema: z.ZodType<
  CreateProjectBlock$Outbound,
  z.ZodTypeDef,
  CreateProjectBlock
> = z.object({
  action: CreateProjectAction$outboundSchema,
  reason: z.string(),
  statusCode: z.number(),
  createdAt: z.number(),
  caseId: z.string().optional(),
  actor: z.string().optional(),
  comment: z.string().optional(),
  isCascading: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectBlock$ {
  /** @deprecated use `CreateProjectBlock$inboundSchema` instead. */
  export const inboundSchema = CreateProjectBlock$inboundSchema;
  /** @deprecated use `CreateProjectBlock$outboundSchema` instead. */
  export const outboundSchema = CreateProjectBlock$outboundSchema;
  /** @deprecated use `CreateProjectBlock$Outbound` instead. */
  export type Outbound = CreateProjectBlock$Outbound;
}

export function createProjectBlockToJSON(
  createProjectBlock: CreateProjectBlock,
): string {
  return JSON.stringify(
    CreateProjectBlock$outboundSchema.parse(createProjectBlock),
  );
}

export function createProjectBlockFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectBlock, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectBlock$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectBlock' from JSON`,
  );
}

/** @internal */
export const CreateProjectBlockHistoryProjectsResponse200Action$inboundSchema:
  z.ZodNativeEnum<typeof CreateProjectBlockHistoryProjectsResponse200Action> = z
    .nativeEnum(CreateProjectBlockHistoryProjectsResponse200Action);

/** @internal */
export const CreateProjectBlockHistoryProjectsResponse200Action$outboundSchema:
  z.ZodNativeEnum<typeof CreateProjectBlockHistoryProjectsResponse200Action> =
    CreateProjectBlockHistoryProjectsResponse200Action$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectBlockHistoryProjectsResponse200Action$ {
  /** @deprecated use `CreateProjectBlockHistoryProjectsResponse200Action$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectBlockHistoryProjectsResponse200Action$inboundSchema;
  /** @deprecated use `CreateProjectBlockHistoryProjectsResponse200Action$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectBlockHistoryProjectsResponse200Action$outboundSchema;
}

/** @internal */
export const CreateProjectHasProjectsResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof CreateProjectHasProjectsResponse200Type> = z
    .nativeEnum(CreateProjectHasProjectsResponse200Type);

/** @internal */
export const CreateProjectHasProjectsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof CreateProjectHasProjectsResponse200Type> =
    CreateProjectHasProjectsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectHasProjectsResponse200Type$ {
  /** @deprecated use `CreateProjectHasProjectsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectHasProjectsResponse200Type$inboundSchema;
  /** @deprecated use `CreateProjectHasProjectsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectHasProjectsResponse200Type$outboundSchema;
}

/** @internal */
export const CreateProjectHasProjectsResponse200Value$inboundSchema: z.ZodType<
  CreateProjectHasProjectsResponse200Value,
  z.ZodTypeDef,
  unknown
> = z.object({
  eq: z.string(),
});

/** @internal */
export type CreateProjectHasProjectsResponse200Value$Outbound = {
  eq: string;
};

/** @internal */
export const CreateProjectHasProjectsResponse200Value$outboundSchema: z.ZodType<
  CreateProjectHasProjectsResponse200Value$Outbound,
  z.ZodTypeDef,
  CreateProjectHasProjectsResponse200Value
> = z.object({
  eq: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectHasProjectsResponse200Value$ {
  /** @deprecated use `CreateProjectHasProjectsResponse200Value$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectHasProjectsResponse200Value$inboundSchema;
  /** @deprecated use `CreateProjectHasProjectsResponse200Value$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectHasProjectsResponse200Value$outboundSchema;
  /** @deprecated use `CreateProjectHasProjectsResponse200Value$Outbound` instead. */
  export type Outbound = CreateProjectHasProjectsResponse200Value$Outbound;
}

export function createProjectHasProjectsResponse200ValueToJSON(
  createProjectHasProjectsResponse200Value:
    CreateProjectHasProjectsResponse200Value,
): string {
  return JSON.stringify(
    CreateProjectHasProjectsResponse200Value$outboundSchema.parse(
      createProjectHasProjectsResponse200Value,
    ),
  );
}

export function createProjectHasProjectsResponse200ValueFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateProjectHasProjectsResponse200Value,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateProjectHasProjectsResponse200Value$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateProjectHasProjectsResponse200Value' from JSON`,
  );
}

/** @internal */
export const CreateProjectHasProjects2$inboundSchema: z.ZodType<
  CreateProjectHasProjects2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateProjectHasProjectsResponse200Type$inboundSchema,
  value: z.lazy(() => CreateProjectHasProjectsResponse200Value$inboundSchema),
});

/** @internal */
export type CreateProjectHasProjects2$Outbound = {
  type: string;
  value: CreateProjectHasProjectsResponse200Value$Outbound;
};

/** @internal */
export const CreateProjectHasProjects2$outboundSchema: z.ZodType<
  CreateProjectHasProjects2$Outbound,
  z.ZodTypeDef,
  CreateProjectHasProjects2
> = z.object({
  type: CreateProjectHasProjectsResponse200Type$outboundSchema,
  value: z.lazy(() => CreateProjectHasProjectsResponse200Value$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectHasProjects2$ {
  /** @deprecated use `CreateProjectHasProjects2$inboundSchema` instead. */
  export const inboundSchema = CreateProjectHasProjects2$inboundSchema;
  /** @deprecated use `CreateProjectHasProjects2$outboundSchema` instead. */
  export const outboundSchema = CreateProjectHasProjects2$outboundSchema;
  /** @deprecated use `CreateProjectHasProjects2$Outbound` instead. */
  export type Outbound = CreateProjectHasProjects2$Outbound;
}

export function createProjectHasProjects2ToJSON(
  createProjectHasProjects2: CreateProjectHasProjects2,
): string {
  return JSON.stringify(
    CreateProjectHasProjects2$outboundSchema.parse(createProjectHasProjects2),
  );
}

export function createProjectHasProjects2FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectHasProjects2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectHasProjects2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectHasProjects2' from JSON`,
  );
}

/** @internal */
export const CreateProjectHasProjectsResponseType$inboundSchema:
  z.ZodNativeEnum<typeof CreateProjectHasProjectsResponseType> = z.nativeEnum(
    CreateProjectHasProjectsResponseType,
  );

/** @internal */
export const CreateProjectHasProjectsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof CreateProjectHasProjectsResponseType> =
    CreateProjectHasProjectsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectHasProjectsResponseType$ {
  /** @deprecated use `CreateProjectHasProjectsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectHasProjectsResponseType$inboundSchema;
  /** @deprecated use `CreateProjectHasProjectsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectHasProjectsResponseType$outboundSchema;
}

/** @internal */
export const CreateProjectHasProjectsKey$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectHasProjectsKey
> = z.nativeEnum(CreateProjectHasProjectsKey);

/** @internal */
export const CreateProjectHasProjectsKey$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectHasProjectsKey
> = CreateProjectHasProjectsKey$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectHasProjectsKey$ {
  /** @deprecated use `CreateProjectHasProjectsKey$inboundSchema` instead. */
  export const inboundSchema = CreateProjectHasProjectsKey$inboundSchema;
  /** @deprecated use `CreateProjectHasProjectsKey$outboundSchema` instead. */
  export const outboundSchema = CreateProjectHasProjectsKey$outboundSchema;
}

/** @internal */
export const CreateProjectHasProjectsResponseValue$inboundSchema: z.ZodType<
  CreateProjectHasProjectsResponseValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  eq: z.string(),
});

/** @internal */
export type CreateProjectHasProjectsResponseValue$Outbound = {
  eq: string;
};

/** @internal */
export const CreateProjectHasProjectsResponseValue$outboundSchema: z.ZodType<
  CreateProjectHasProjectsResponseValue$Outbound,
  z.ZodTypeDef,
  CreateProjectHasProjectsResponseValue
> = z.object({
  eq: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectHasProjectsResponseValue$ {
  /** @deprecated use `CreateProjectHasProjectsResponseValue$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectHasProjectsResponseValue$inboundSchema;
  /** @deprecated use `CreateProjectHasProjectsResponseValue$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectHasProjectsResponseValue$outboundSchema;
  /** @deprecated use `CreateProjectHasProjectsResponseValue$Outbound` instead. */
  export type Outbound = CreateProjectHasProjectsResponseValue$Outbound;
}

export function createProjectHasProjectsResponseValueToJSON(
  createProjectHasProjectsResponseValue: CreateProjectHasProjectsResponseValue,
): string {
  return JSON.stringify(
    CreateProjectHasProjectsResponseValue$outboundSchema.parse(
      createProjectHasProjectsResponseValue,
    ),
  );
}

export function createProjectHasProjectsResponseValueFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectHasProjectsResponseValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateProjectHasProjectsResponseValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectHasProjectsResponseValue' from JSON`,
  );
}

/** @internal */
export const CreateProjectHasProjects1$inboundSchema: z.ZodType<
  CreateProjectHasProjects1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateProjectHasProjectsResponseType$inboundSchema,
  key: CreateProjectHasProjectsKey$inboundSchema,
  value: z.lazy(() => CreateProjectHasProjectsResponseValue$inboundSchema),
});

/** @internal */
export type CreateProjectHasProjects1$Outbound = {
  type: string;
  key: string;
  value: CreateProjectHasProjectsResponseValue$Outbound;
};

/** @internal */
export const CreateProjectHasProjects1$outboundSchema: z.ZodType<
  CreateProjectHasProjects1$Outbound,
  z.ZodTypeDef,
  CreateProjectHasProjects1
> = z.object({
  type: CreateProjectHasProjectsResponseType$outboundSchema,
  key: CreateProjectHasProjectsKey$outboundSchema,
  value: z.lazy(() => CreateProjectHasProjectsResponseValue$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectHasProjects1$ {
  /** @deprecated use `CreateProjectHasProjects1$inboundSchema` instead. */
  export const inboundSchema = CreateProjectHasProjects1$inboundSchema;
  /** @deprecated use `CreateProjectHasProjects1$outboundSchema` instead. */
  export const outboundSchema = CreateProjectHasProjects1$outboundSchema;
  /** @deprecated use `CreateProjectHasProjects1$Outbound` instead. */
  export type Outbound = CreateProjectHasProjects1$Outbound;
}

export function createProjectHasProjects1ToJSON(
  createProjectHasProjects1: CreateProjectHasProjects1,
): string {
  return JSON.stringify(
    CreateProjectHasProjects1$outboundSchema.parse(createProjectHasProjects1),
  );
}

export function createProjectHasProjects1FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectHasProjects1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectHasProjects1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectHasProjects1' from JSON`,
  );
}

/** @internal */
export const CreateProjectRouteProjectsHas$inboundSchema: z.ZodType<
  CreateProjectRouteProjectsHas,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateProjectHasProjects1$inboundSchema),
  z.lazy(() => CreateProjectHasProjects2$inboundSchema),
]);

/** @internal */
export type CreateProjectRouteProjectsHas$Outbound =
  | CreateProjectHasProjects1$Outbound
  | CreateProjectHasProjects2$Outbound;

/** @internal */
export const CreateProjectRouteProjectsHas$outboundSchema: z.ZodType<
  CreateProjectRouteProjectsHas$Outbound,
  z.ZodTypeDef,
  CreateProjectRouteProjectsHas
> = z.union([
  z.lazy(() => CreateProjectHasProjects1$outboundSchema),
  z.lazy(() => CreateProjectHasProjects2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectRouteProjectsHas$ {
  /** @deprecated use `CreateProjectRouteProjectsHas$inboundSchema` instead. */
  export const inboundSchema = CreateProjectRouteProjectsHas$inboundSchema;
  /** @deprecated use `CreateProjectRouteProjectsHas$outboundSchema` instead. */
  export const outboundSchema = CreateProjectRouteProjectsHas$outboundSchema;
  /** @deprecated use `CreateProjectRouteProjectsHas$Outbound` instead. */
  export type Outbound = CreateProjectRouteProjectsHas$Outbound;
}

export function createProjectRouteProjectsHasToJSON(
  createProjectRouteProjectsHas: CreateProjectRouteProjectsHas,
): string {
  return JSON.stringify(
    CreateProjectRouteProjectsHas$outboundSchema.parse(
      createProjectRouteProjectsHas,
    ),
  );
}

export function createProjectRouteProjectsHasFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectRouteProjectsHas, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectRouteProjectsHas$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectRouteProjectsHas' from JSON`,
  );
}

/** @internal */
export const CreateProjectRouteProjectsAction$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectRouteProjectsAction
> = z.nativeEnum(CreateProjectRouteProjectsAction);

/** @internal */
export const CreateProjectRouteProjectsAction$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectRouteProjectsAction
> = CreateProjectRouteProjectsAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectRouteProjectsAction$ {
  /** @deprecated use `CreateProjectRouteProjectsAction$inboundSchema` instead. */
  export const inboundSchema = CreateProjectRouteProjectsAction$inboundSchema;
  /** @deprecated use `CreateProjectRouteProjectsAction$outboundSchema` instead. */
  export const outboundSchema = CreateProjectRouteProjectsAction$outboundSchema;
}

/** @internal */
export const CreateProjectRouteProjectsMitigate$inboundSchema: z.ZodType<
  CreateProjectRouteProjectsMitigate,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: CreateProjectRouteProjectsAction$inboundSchema,
});

/** @internal */
export type CreateProjectRouteProjectsMitigate$Outbound = {
  action: string;
};

/** @internal */
export const CreateProjectRouteProjectsMitigate$outboundSchema: z.ZodType<
  CreateProjectRouteProjectsMitigate$Outbound,
  z.ZodTypeDef,
  CreateProjectRouteProjectsMitigate
> = z.object({
  action: CreateProjectRouteProjectsAction$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectRouteProjectsMitigate$ {
  /** @deprecated use `CreateProjectRouteProjectsMitigate$inboundSchema` instead. */
  export const inboundSchema = CreateProjectRouteProjectsMitigate$inboundSchema;
  /** @deprecated use `CreateProjectRouteProjectsMitigate$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectRouteProjectsMitigate$outboundSchema;
  /** @deprecated use `CreateProjectRouteProjectsMitigate$Outbound` instead. */
  export type Outbound = CreateProjectRouteProjectsMitigate$Outbound;
}

export function createProjectRouteProjectsMitigateToJSON(
  createProjectRouteProjectsMitigate: CreateProjectRouteProjectsMitigate,
): string {
  return JSON.stringify(
    CreateProjectRouteProjectsMitigate$outboundSchema.parse(
      createProjectRouteProjectsMitigate,
    ),
  );
}

export function createProjectRouteProjectsMitigateFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectRouteProjectsMitigate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateProjectRouteProjectsMitigate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectRouteProjectsMitigate' from JSON`,
  );
}

/** @internal */
export const CreateProjectRouteProjects2$inboundSchema: z.ZodType<
  CreateProjectRouteProjects2,
  z.ZodTypeDef,
  unknown
> = z.object({
  has: z.array(
    z.union([
      z.lazy(() => CreateProjectHasProjects1$inboundSchema),
      z.lazy(() => CreateProjectHasProjects2$inboundSchema),
    ]),
  ),
  mitigate: z.lazy(() => CreateProjectRouteProjectsMitigate$inboundSchema),
  src: z.string().optional(),
});

/** @internal */
export type CreateProjectRouteProjects2$Outbound = {
  has: Array<
    CreateProjectHasProjects1$Outbound | CreateProjectHasProjects2$Outbound
  >;
  mitigate: CreateProjectRouteProjectsMitigate$Outbound;
  src?: string | undefined;
};

/** @internal */
export const CreateProjectRouteProjects2$outboundSchema: z.ZodType<
  CreateProjectRouteProjects2$Outbound,
  z.ZodTypeDef,
  CreateProjectRouteProjects2
> = z.object({
  has: z.array(
    z.union([
      z.lazy(() => CreateProjectHasProjects1$outboundSchema),
      z.lazy(() => CreateProjectHasProjects2$outboundSchema),
    ]),
  ),
  mitigate: z.lazy(() => CreateProjectRouteProjectsMitigate$outboundSchema),
  src: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectRouteProjects2$ {
  /** @deprecated use `CreateProjectRouteProjects2$inboundSchema` instead. */
  export const inboundSchema = CreateProjectRouteProjects2$inboundSchema;
  /** @deprecated use `CreateProjectRouteProjects2$outboundSchema` instead. */
  export const outboundSchema = CreateProjectRouteProjects2$outboundSchema;
  /** @deprecated use `CreateProjectRouteProjects2$Outbound` instead. */
  export type Outbound = CreateProjectRouteProjects2$Outbound;
}

export function createProjectRouteProjects2ToJSON(
  createProjectRouteProjects2: CreateProjectRouteProjects2,
): string {
  return JSON.stringify(
    CreateProjectRouteProjects2$outboundSchema.parse(
      createProjectRouteProjects2,
    ),
  );
}

export function createProjectRouteProjects2FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectRouteProjects2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectRouteProjects2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectRouteProjects2' from JSON`,
  );
}

/** @internal */
export const CreateProjectRouteProjects1$inboundSchema: z.ZodType<
  CreateProjectRouteProjects1,
  z.ZodTypeDef,
  unknown
> = z.object({
  src: z.string(),
  status: z.number(),
});

/** @internal */
export type CreateProjectRouteProjects1$Outbound = {
  src: string;
  status: number;
};

/** @internal */
export const CreateProjectRouteProjects1$outboundSchema: z.ZodType<
  CreateProjectRouteProjects1$Outbound,
  z.ZodTypeDef,
  CreateProjectRouteProjects1
> = z.object({
  src: z.string(),
  status: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectRouteProjects1$ {
  /** @deprecated use `CreateProjectRouteProjects1$inboundSchema` instead. */
  export const inboundSchema = CreateProjectRouteProjects1$inboundSchema;
  /** @deprecated use `CreateProjectRouteProjects1$outboundSchema` instead. */
  export const outboundSchema = CreateProjectRouteProjects1$outboundSchema;
  /** @deprecated use `CreateProjectRouteProjects1$Outbound` instead. */
  export type Outbound = CreateProjectRouteProjects1$Outbound;
}

export function createProjectRouteProjects1ToJSON(
  createProjectRouteProjects1: CreateProjectRouteProjects1,
): string {
  return JSON.stringify(
    CreateProjectRouteProjects1$outboundSchema.parse(
      createProjectRouteProjects1,
    ),
  );
}

export function createProjectRouteProjects1FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectRouteProjects1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectRouteProjects1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectRouteProjects1' from JSON`,
  );
}

/** @internal */
export const CreateProjectBlockHistoryProjectsRoute$inboundSchema: z.ZodType<
  CreateProjectBlockHistoryProjectsRoute,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateProjectRouteProjects1$inboundSchema),
  z.lazy(() => CreateProjectRouteProjects2$inboundSchema),
]);

/** @internal */
export type CreateProjectBlockHistoryProjectsRoute$Outbound =
  | CreateProjectRouteProjects1$Outbound
  | CreateProjectRouteProjects2$Outbound;

/** @internal */
export const CreateProjectBlockHistoryProjectsRoute$outboundSchema: z.ZodType<
  CreateProjectBlockHistoryProjectsRoute$Outbound,
  z.ZodTypeDef,
  CreateProjectBlockHistoryProjectsRoute
> = z.union([
  z.lazy(() => CreateProjectRouteProjects1$outboundSchema),
  z.lazy(() => CreateProjectRouteProjects2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectBlockHistoryProjectsRoute$ {
  /** @deprecated use `CreateProjectBlockHistoryProjectsRoute$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectBlockHistoryProjectsRoute$inboundSchema;
  /** @deprecated use `CreateProjectBlockHistoryProjectsRoute$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectBlockHistoryProjectsRoute$outboundSchema;
  /** @deprecated use `CreateProjectBlockHistoryProjectsRoute$Outbound` instead. */
  export type Outbound = CreateProjectBlockHistoryProjectsRoute$Outbound;
}

export function createProjectBlockHistoryProjectsRouteToJSON(
  createProjectBlockHistoryProjectsRoute:
    CreateProjectBlockHistoryProjectsRoute,
): string {
  return JSON.stringify(
    CreateProjectBlockHistoryProjectsRoute$outboundSchema.parse(
      createProjectBlockHistoryProjectsRoute,
    ),
  );
}

export function createProjectBlockHistoryProjectsRouteFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectBlockHistoryProjectsRoute, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateProjectBlockHistoryProjectsRoute$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectBlockHistoryProjectsRoute' from JSON`,
  );
}

/** @internal */
export const CreateProjectBlockHistory4$inboundSchema: z.ZodType<
  CreateProjectBlockHistory4,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: CreateProjectBlockHistoryProjectsResponse200Action$inboundSchema,
  route: z.union([
    z.lazy(() => CreateProjectRouteProjects1$inboundSchema),
    z.lazy(() => CreateProjectRouteProjects2$inboundSchema),
  ]),
  statusCode: z.number().optional(),
  createdAt: z.number(),
  caseId: z.string().optional(),
  actor: z.string().optional(),
  comment: z.string().optional(),
  isCascading: z.boolean().optional(),
});

/** @internal */
export type CreateProjectBlockHistory4$Outbound = {
  action: string;
  route:
    | CreateProjectRouteProjects1$Outbound
    | CreateProjectRouteProjects2$Outbound;
  statusCode?: number | undefined;
  createdAt: number;
  caseId?: string | undefined;
  actor?: string | undefined;
  comment?: string | undefined;
  isCascading?: boolean | undefined;
};

/** @internal */
export const CreateProjectBlockHistory4$outboundSchema: z.ZodType<
  CreateProjectBlockHistory4$Outbound,
  z.ZodTypeDef,
  CreateProjectBlockHistory4
> = z.object({
  action: CreateProjectBlockHistoryProjectsResponse200Action$outboundSchema,
  route: z.union([
    z.lazy(() => CreateProjectRouteProjects1$outboundSchema),
    z.lazy(() => CreateProjectRouteProjects2$outboundSchema),
  ]),
  statusCode: z.number().optional(),
  createdAt: z.number(),
  caseId: z.string().optional(),
  actor: z.string().optional(),
  comment: z.string().optional(),
  isCascading: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectBlockHistory4$ {
  /** @deprecated use `CreateProjectBlockHistory4$inboundSchema` instead. */
  export const inboundSchema = CreateProjectBlockHistory4$inboundSchema;
  /** @deprecated use `CreateProjectBlockHistory4$outboundSchema` instead. */
  export const outboundSchema = CreateProjectBlockHistory4$outboundSchema;
  /** @deprecated use `CreateProjectBlockHistory4$Outbound` instead. */
  export type Outbound = CreateProjectBlockHistory4$Outbound;
}

export function createProjectBlockHistory4ToJSON(
  createProjectBlockHistory4: CreateProjectBlockHistory4,
): string {
  return JSON.stringify(
    CreateProjectBlockHistory4$outboundSchema.parse(createProjectBlockHistory4),
  );
}

export function createProjectBlockHistory4FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectBlockHistory4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectBlockHistory4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectBlockHistory4' from JSON`,
  );
}

/** @internal */
export const CreateProjectBlockHistoryProjectsResponseAction$inboundSchema:
  z.ZodNativeEnum<typeof CreateProjectBlockHistoryProjectsResponseAction> = z
    .nativeEnum(CreateProjectBlockHistoryProjectsResponseAction);

/** @internal */
export const CreateProjectBlockHistoryProjectsResponseAction$outboundSchema:
  z.ZodNativeEnum<typeof CreateProjectBlockHistoryProjectsResponseAction> =
    CreateProjectBlockHistoryProjectsResponseAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectBlockHistoryProjectsResponseAction$ {
  /** @deprecated use `CreateProjectBlockHistoryProjectsResponseAction$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectBlockHistoryProjectsResponseAction$inboundSchema;
  /** @deprecated use `CreateProjectBlockHistoryProjectsResponseAction$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectBlockHistoryProjectsResponseAction$outboundSchema;
}

/** @internal */
export const CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyType
  > =
    CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$inboundSchema:
  z.ZodType<
    CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    eq: z.string(),
  });

/** @internal */
export type CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$Outbound =
  {
    eq: string;
  };

/** @internal */
export const CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$outboundSchema:
  z.ZodType<
    CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$Outbound,
    z.ZodTypeDef,
    CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue
  > = z.object({
    eq: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$ {
  /** @deprecated use `CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$inboundSchema;
  /** @deprecated use `CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$outboundSchema;
  /** @deprecated use `CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$Outbound` instead. */
  export type Outbound =
    CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$Outbound;
}

export function createProjectHasProjectsResponse200ApplicationJSONResponseBodyValueToJSON(
  createProjectHasProjectsResponse200ApplicationJSONResponseBodyValue:
    CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue,
): string {
  return JSON.stringify(
    CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$outboundSchema
      .parse(
        createProjectHasProjectsResponse200ApplicationJSONResponseBodyValue,
      ),
  );
}

export function createProjectHasProjectsResponse200ApplicationJSONResponseBodyValueFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue' from JSON`,
  );
}

/** @internal */
export const CreateProjectHasProjectsResponse2$inboundSchema: z.ZodType<
  CreateProjectHasProjectsResponse2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema,
  value: z.lazy(() =>
    CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$inboundSchema
  ),
});

/** @internal */
export type CreateProjectHasProjectsResponse2$Outbound = {
  type: string;
  value:
    CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$Outbound;
};

/** @internal */
export const CreateProjectHasProjectsResponse2$outboundSchema: z.ZodType<
  CreateProjectHasProjectsResponse2$Outbound,
  z.ZodTypeDef,
  CreateProjectHasProjectsResponse2
> = z.object({
  type:
    CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema,
  value: z.lazy(() =>
    CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectHasProjectsResponse2$ {
  /** @deprecated use `CreateProjectHasProjectsResponse2$inboundSchema` instead. */
  export const inboundSchema = CreateProjectHasProjectsResponse2$inboundSchema;
  /** @deprecated use `CreateProjectHasProjectsResponse2$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectHasProjectsResponse2$outboundSchema;
  /** @deprecated use `CreateProjectHasProjectsResponse2$Outbound` instead. */
  export type Outbound = CreateProjectHasProjectsResponse2$Outbound;
}

export function createProjectHasProjectsResponse2ToJSON(
  createProjectHasProjectsResponse2: CreateProjectHasProjectsResponse2,
): string {
  return JSON.stringify(
    CreateProjectHasProjectsResponse2$outboundSchema.parse(
      createProjectHasProjectsResponse2,
    ),
  );
}

export function createProjectHasProjectsResponse2FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectHasProjectsResponse2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectHasProjectsResponse2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectHasProjectsResponse2' from JSON`,
  );
}

/** @internal */
export const CreateProjectHasProjectsResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectHasProjectsResponse200ApplicationJSONType
  > = z.nativeEnum(CreateProjectHasProjectsResponse200ApplicationJSONType);

/** @internal */
export const CreateProjectHasProjectsResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateProjectHasProjectsResponse200ApplicationJSONType
  > = CreateProjectHasProjectsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectHasProjectsResponse200ApplicationJSONType$ {
  /** @deprecated use `CreateProjectHasProjectsResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectHasProjectsResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `CreateProjectHasProjectsResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectHasProjectsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const CreateProjectHasKey$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectHasKey
> = z.nativeEnum(CreateProjectHasKey);

/** @internal */
export const CreateProjectHasKey$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectHasKey
> = CreateProjectHasKey$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectHasKey$ {
  /** @deprecated use `CreateProjectHasKey$inboundSchema` instead. */
  export const inboundSchema = CreateProjectHasKey$inboundSchema;
  /** @deprecated use `CreateProjectHasKey$outboundSchema` instead. */
  export const outboundSchema = CreateProjectHasKey$outboundSchema;
}

/** @internal */
export const CreateProjectHasProjectsResponse200ApplicationJSONValue$inboundSchema:
  z.ZodType<
    CreateProjectHasProjectsResponse200ApplicationJSONValue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    eq: z.string(),
  });

/** @internal */
export type CreateProjectHasProjectsResponse200ApplicationJSONValue$Outbound = {
  eq: string;
};

/** @internal */
export const CreateProjectHasProjectsResponse200ApplicationJSONValue$outboundSchema:
  z.ZodType<
    CreateProjectHasProjectsResponse200ApplicationJSONValue$Outbound,
    z.ZodTypeDef,
    CreateProjectHasProjectsResponse200ApplicationJSONValue
  > = z.object({
    eq: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectHasProjectsResponse200ApplicationJSONValue$ {
  /** @deprecated use `CreateProjectHasProjectsResponse200ApplicationJSONValue$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectHasProjectsResponse200ApplicationJSONValue$inboundSchema;
  /** @deprecated use `CreateProjectHasProjectsResponse200ApplicationJSONValue$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectHasProjectsResponse200ApplicationJSONValue$outboundSchema;
  /** @deprecated use `CreateProjectHasProjectsResponse200ApplicationJSONValue$Outbound` instead. */
  export type Outbound =
    CreateProjectHasProjectsResponse200ApplicationJSONValue$Outbound;
}

export function createProjectHasProjectsResponse200ApplicationJSONValueToJSON(
  createProjectHasProjectsResponse200ApplicationJSONValue:
    CreateProjectHasProjectsResponse200ApplicationJSONValue,
): string {
  return JSON.stringify(
    CreateProjectHasProjectsResponse200ApplicationJSONValue$outboundSchema
      .parse(createProjectHasProjectsResponse200ApplicationJSONValue),
  );
}

export function createProjectHasProjectsResponse200ApplicationJSONValueFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateProjectHasProjectsResponse200ApplicationJSONValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateProjectHasProjectsResponse200ApplicationJSONValue$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectHasProjectsResponse200ApplicationJSONValue' from JSON`,
  );
}

/** @internal */
export const CreateProjectHasProjectsResponse1$inboundSchema: z.ZodType<
  CreateProjectHasProjectsResponse1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateProjectHasProjectsResponse200ApplicationJSONType$inboundSchema,
  key: CreateProjectHasKey$inboundSchema,
  value: z.lazy(() =>
    CreateProjectHasProjectsResponse200ApplicationJSONValue$inboundSchema
  ),
});

/** @internal */
export type CreateProjectHasProjectsResponse1$Outbound = {
  type: string;
  key: string;
  value: CreateProjectHasProjectsResponse200ApplicationJSONValue$Outbound;
};

/** @internal */
export const CreateProjectHasProjectsResponse1$outboundSchema: z.ZodType<
  CreateProjectHasProjectsResponse1$Outbound,
  z.ZodTypeDef,
  CreateProjectHasProjectsResponse1
> = z.object({
  type: CreateProjectHasProjectsResponse200ApplicationJSONType$outboundSchema,
  key: CreateProjectHasKey$outboundSchema,
  value: z.lazy(() =>
    CreateProjectHasProjectsResponse200ApplicationJSONValue$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectHasProjectsResponse1$ {
  /** @deprecated use `CreateProjectHasProjectsResponse1$inboundSchema` instead. */
  export const inboundSchema = CreateProjectHasProjectsResponse1$inboundSchema;
  /** @deprecated use `CreateProjectHasProjectsResponse1$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectHasProjectsResponse1$outboundSchema;
  /** @deprecated use `CreateProjectHasProjectsResponse1$Outbound` instead. */
  export type Outbound = CreateProjectHasProjectsResponse1$Outbound;
}

export function createProjectHasProjectsResponse1ToJSON(
  createProjectHasProjectsResponse1: CreateProjectHasProjectsResponse1,
): string {
  return JSON.stringify(
    CreateProjectHasProjectsResponse1$outboundSchema.parse(
      createProjectHasProjectsResponse1,
    ),
  );
}

export function createProjectHasProjectsResponse1FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectHasProjectsResponse1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectHasProjectsResponse1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectHasProjectsResponse1' from JSON`,
  );
}

/** @internal */
export const CreateProjectRouteHas$inboundSchema: z.ZodType<
  CreateProjectRouteHas,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateProjectHasProjectsResponse1$inboundSchema),
  z.lazy(() => CreateProjectHasProjectsResponse2$inboundSchema),
]);

/** @internal */
export type CreateProjectRouteHas$Outbound =
  | CreateProjectHasProjectsResponse1$Outbound
  | CreateProjectHasProjectsResponse2$Outbound;

/** @internal */
export const CreateProjectRouteHas$outboundSchema: z.ZodType<
  CreateProjectRouteHas$Outbound,
  z.ZodTypeDef,
  CreateProjectRouteHas
> = z.union([
  z.lazy(() => CreateProjectHasProjectsResponse1$outboundSchema),
  z.lazy(() => CreateProjectHasProjectsResponse2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectRouteHas$ {
  /** @deprecated use `CreateProjectRouteHas$inboundSchema` instead. */
  export const inboundSchema = CreateProjectRouteHas$inboundSchema;
  /** @deprecated use `CreateProjectRouteHas$outboundSchema` instead. */
  export const outboundSchema = CreateProjectRouteHas$outboundSchema;
  /** @deprecated use `CreateProjectRouteHas$Outbound` instead. */
  export type Outbound = CreateProjectRouteHas$Outbound;
}

export function createProjectRouteHasToJSON(
  createProjectRouteHas: CreateProjectRouteHas,
): string {
  return JSON.stringify(
    CreateProjectRouteHas$outboundSchema.parse(createProjectRouteHas),
  );
}

export function createProjectRouteHasFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectRouteHas, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectRouteHas$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectRouteHas' from JSON`,
  );
}

/** @internal */
export const CreateProjectRouteAction$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectRouteAction
> = z.nativeEnum(CreateProjectRouteAction);

/** @internal */
export const CreateProjectRouteAction$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectRouteAction
> = CreateProjectRouteAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectRouteAction$ {
  /** @deprecated use `CreateProjectRouteAction$inboundSchema` instead. */
  export const inboundSchema = CreateProjectRouteAction$inboundSchema;
  /** @deprecated use `CreateProjectRouteAction$outboundSchema` instead. */
  export const outboundSchema = CreateProjectRouteAction$outboundSchema;
}

/** @internal */
export const CreateProjectRouteMitigate$inboundSchema: z.ZodType<
  CreateProjectRouteMitigate,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: CreateProjectRouteAction$inboundSchema,
});

/** @internal */
export type CreateProjectRouteMitigate$Outbound = {
  action: string;
};

/** @internal */
export const CreateProjectRouteMitigate$outboundSchema: z.ZodType<
  CreateProjectRouteMitigate$Outbound,
  z.ZodTypeDef,
  CreateProjectRouteMitigate
> = z.object({
  action: CreateProjectRouteAction$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectRouteMitigate$ {
  /** @deprecated use `CreateProjectRouteMitigate$inboundSchema` instead. */
  export const inboundSchema = CreateProjectRouteMitigate$inboundSchema;
  /** @deprecated use `CreateProjectRouteMitigate$outboundSchema` instead. */
  export const outboundSchema = CreateProjectRouteMitigate$outboundSchema;
  /** @deprecated use `CreateProjectRouteMitigate$Outbound` instead. */
  export type Outbound = CreateProjectRouteMitigate$Outbound;
}

export function createProjectRouteMitigateToJSON(
  createProjectRouteMitigate: CreateProjectRouteMitigate,
): string {
  return JSON.stringify(
    CreateProjectRouteMitigate$outboundSchema.parse(createProjectRouteMitigate),
  );
}

export function createProjectRouteMitigateFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectRouteMitigate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectRouteMitigate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectRouteMitigate' from JSON`,
  );
}

/** @internal */
export const CreateProjectRoute2$inboundSchema: z.ZodType<
  CreateProjectRoute2,
  z.ZodTypeDef,
  unknown
> = z.object({
  has: z.array(
    z.union([
      z.lazy(() => CreateProjectHasProjectsResponse1$inboundSchema),
      z.lazy(() => CreateProjectHasProjectsResponse2$inboundSchema),
    ]),
  ),
  mitigate: z.lazy(() => CreateProjectRouteMitigate$inboundSchema),
  src: z.string().optional(),
});

/** @internal */
export type CreateProjectRoute2$Outbound = {
  has: Array<
    | CreateProjectHasProjectsResponse1$Outbound
    | CreateProjectHasProjectsResponse2$Outbound
  >;
  mitigate: CreateProjectRouteMitigate$Outbound;
  src?: string | undefined;
};

/** @internal */
export const CreateProjectRoute2$outboundSchema: z.ZodType<
  CreateProjectRoute2$Outbound,
  z.ZodTypeDef,
  CreateProjectRoute2
> = z.object({
  has: z.array(
    z.union([
      z.lazy(() => CreateProjectHasProjectsResponse1$outboundSchema),
      z.lazy(() => CreateProjectHasProjectsResponse2$outboundSchema),
    ]),
  ),
  mitigate: z.lazy(() => CreateProjectRouteMitigate$outboundSchema),
  src: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectRoute2$ {
  /** @deprecated use `CreateProjectRoute2$inboundSchema` instead. */
  export const inboundSchema = CreateProjectRoute2$inboundSchema;
  /** @deprecated use `CreateProjectRoute2$outboundSchema` instead. */
  export const outboundSchema = CreateProjectRoute2$outboundSchema;
  /** @deprecated use `CreateProjectRoute2$Outbound` instead. */
  export type Outbound = CreateProjectRoute2$Outbound;
}

export function createProjectRoute2ToJSON(
  createProjectRoute2: CreateProjectRoute2,
): string {
  return JSON.stringify(
    CreateProjectRoute2$outboundSchema.parse(createProjectRoute2),
  );
}

export function createProjectRoute2FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectRoute2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectRoute2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectRoute2' from JSON`,
  );
}

/** @internal */
export const CreateProjectRoute1$inboundSchema: z.ZodType<
  CreateProjectRoute1,
  z.ZodTypeDef,
  unknown
> = z.object({
  src: z.string(),
  status: z.number(),
});

/** @internal */
export type CreateProjectRoute1$Outbound = {
  src: string;
  status: number;
};

/** @internal */
export const CreateProjectRoute1$outboundSchema: z.ZodType<
  CreateProjectRoute1$Outbound,
  z.ZodTypeDef,
  CreateProjectRoute1
> = z.object({
  src: z.string(),
  status: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectRoute1$ {
  /** @deprecated use `CreateProjectRoute1$inboundSchema` instead. */
  export const inboundSchema = CreateProjectRoute1$inboundSchema;
  /** @deprecated use `CreateProjectRoute1$outboundSchema` instead. */
  export const outboundSchema = CreateProjectRoute1$outboundSchema;
  /** @deprecated use `CreateProjectRoute1$Outbound` instead. */
  export type Outbound = CreateProjectRoute1$Outbound;
}

export function createProjectRoute1ToJSON(
  createProjectRoute1: CreateProjectRoute1,
): string {
  return JSON.stringify(
    CreateProjectRoute1$outboundSchema.parse(createProjectRoute1),
  );
}

export function createProjectRoute1FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectRoute1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectRoute1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectRoute1' from JSON`,
  );
}

/** @internal */
export const CreateProjectBlockHistoryRoute$inboundSchema: z.ZodType<
  CreateProjectBlockHistoryRoute,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateProjectRoute1$inboundSchema),
  z.lazy(() => CreateProjectRoute2$inboundSchema),
]);

/** @internal */
export type CreateProjectBlockHistoryRoute$Outbound =
  | CreateProjectRoute1$Outbound
  | CreateProjectRoute2$Outbound;

/** @internal */
export const CreateProjectBlockHistoryRoute$outboundSchema: z.ZodType<
  CreateProjectBlockHistoryRoute$Outbound,
  z.ZodTypeDef,
  CreateProjectBlockHistoryRoute
> = z.union([
  z.lazy(() => CreateProjectRoute1$outboundSchema),
  z.lazy(() => CreateProjectRoute2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectBlockHistoryRoute$ {
  /** @deprecated use `CreateProjectBlockHistoryRoute$inboundSchema` instead. */
  export const inboundSchema = CreateProjectBlockHistoryRoute$inboundSchema;
  /** @deprecated use `CreateProjectBlockHistoryRoute$outboundSchema` instead. */
  export const outboundSchema = CreateProjectBlockHistoryRoute$outboundSchema;
  /** @deprecated use `CreateProjectBlockHistoryRoute$Outbound` instead. */
  export type Outbound = CreateProjectBlockHistoryRoute$Outbound;
}

export function createProjectBlockHistoryRouteToJSON(
  createProjectBlockHistoryRoute: CreateProjectBlockHistoryRoute,
): string {
  return JSON.stringify(
    CreateProjectBlockHistoryRoute$outboundSchema.parse(
      createProjectBlockHistoryRoute,
    ),
  );
}

export function createProjectBlockHistoryRouteFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectBlockHistoryRoute, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectBlockHistoryRoute$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectBlockHistoryRoute' from JSON`,
  );
}

/** @internal */
export const CreateProjectBlockHistory3$inboundSchema: z.ZodType<
  CreateProjectBlockHistory3,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: CreateProjectBlockHistoryProjectsResponseAction$inboundSchema,
  route: z.union([
    z.lazy(() => CreateProjectRoute1$inboundSchema),
    z.lazy(() => CreateProjectRoute2$inboundSchema),
  ]),
  reason: z.string(),
  createdAt: z.number(),
  caseId: z.string().optional(),
  actor: z.string().optional(),
  comment: z.string().optional(),
  isCascading: z.boolean().optional(),
});

/** @internal */
export type CreateProjectBlockHistory3$Outbound = {
  action: string;
  route: CreateProjectRoute1$Outbound | CreateProjectRoute2$Outbound;
  reason: string;
  createdAt: number;
  caseId?: string | undefined;
  actor?: string | undefined;
  comment?: string | undefined;
  isCascading?: boolean | undefined;
};

/** @internal */
export const CreateProjectBlockHistory3$outboundSchema: z.ZodType<
  CreateProjectBlockHistory3$Outbound,
  z.ZodTypeDef,
  CreateProjectBlockHistory3
> = z.object({
  action: CreateProjectBlockHistoryProjectsResponseAction$outboundSchema,
  route: z.union([
    z.lazy(() => CreateProjectRoute1$outboundSchema),
    z.lazy(() => CreateProjectRoute2$outboundSchema),
  ]),
  reason: z.string(),
  createdAt: z.number(),
  caseId: z.string().optional(),
  actor: z.string().optional(),
  comment: z.string().optional(),
  isCascading: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectBlockHistory3$ {
  /** @deprecated use `CreateProjectBlockHistory3$inboundSchema` instead. */
  export const inboundSchema = CreateProjectBlockHistory3$inboundSchema;
  /** @deprecated use `CreateProjectBlockHistory3$outboundSchema` instead. */
  export const outboundSchema = CreateProjectBlockHistory3$outboundSchema;
  /** @deprecated use `CreateProjectBlockHistory3$Outbound` instead. */
  export type Outbound = CreateProjectBlockHistory3$Outbound;
}

export function createProjectBlockHistory3ToJSON(
  createProjectBlockHistory3: CreateProjectBlockHistory3,
): string {
  return JSON.stringify(
    CreateProjectBlockHistory3$outboundSchema.parse(createProjectBlockHistory3),
  );
}

export function createProjectBlockHistory3FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectBlockHistory3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectBlockHistory3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectBlockHistory3' from JSON`,
  );
}

/** @internal */
export const CreateProjectBlockHistoryProjectsAction$inboundSchema:
  z.ZodNativeEnum<typeof CreateProjectBlockHistoryProjectsAction> = z
    .nativeEnum(CreateProjectBlockHistoryProjectsAction);

/** @internal */
export const CreateProjectBlockHistoryProjectsAction$outboundSchema:
  z.ZodNativeEnum<typeof CreateProjectBlockHistoryProjectsAction> =
    CreateProjectBlockHistoryProjectsAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectBlockHistoryProjectsAction$ {
  /** @deprecated use `CreateProjectBlockHistoryProjectsAction$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectBlockHistoryProjectsAction$inboundSchema;
  /** @deprecated use `CreateProjectBlockHistoryProjectsAction$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectBlockHistoryProjectsAction$outboundSchema;
}

/** @internal */
export const CreateProjectBlockHistory2$inboundSchema: z.ZodType<
  CreateProjectBlockHistory2,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: CreateProjectBlockHistoryProjectsAction$inboundSchema,
  createdAt: z.number(),
  caseId: z.string().optional(),
  actor: z.string().optional(),
  comment: z.string().optional(),
  isCascading: z.boolean().optional(),
});

/** @internal */
export type CreateProjectBlockHistory2$Outbound = {
  action: string;
  createdAt: number;
  caseId?: string | undefined;
  actor?: string | undefined;
  comment?: string | undefined;
  isCascading?: boolean | undefined;
};

/** @internal */
export const CreateProjectBlockHistory2$outboundSchema: z.ZodType<
  CreateProjectBlockHistory2$Outbound,
  z.ZodTypeDef,
  CreateProjectBlockHistory2
> = z.object({
  action: CreateProjectBlockHistoryProjectsAction$outboundSchema,
  createdAt: z.number(),
  caseId: z.string().optional(),
  actor: z.string().optional(),
  comment: z.string().optional(),
  isCascading: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectBlockHistory2$ {
  /** @deprecated use `CreateProjectBlockHistory2$inboundSchema` instead. */
  export const inboundSchema = CreateProjectBlockHistory2$inboundSchema;
  /** @deprecated use `CreateProjectBlockHistory2$outboundSchema` instead. */
  export const outboundSchema = CreateProjectBlockHistory2$outboundSchema;
  /** @deprecated use `CreateProjectBlockHistory2$Outbound` instead. */
  export type Outbound = CreateProjectBlockHistory2$Outbound;
}

export function createProjectBlockHistory2ToJSON(
  createProjectBlockHistory2: CreateProjectBlockHistory2,
): string {
  return JSON.stringify(
    CreateProjectBlockHistory2$outboundSchema.parse(createProjectBlockHistory2),
  );
}

export function createProjectBlockHistory2FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectBlockHistory2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectBlockHistory2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectBlockHistory2' from JSON`,
  );
}

/** @internal */
export const CreateProjectBlockHistoryAction$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectBlockHistoryAction
> = z.nativeEnum(CreateProjectBlockHistoryAction);

/** @internal */
export const CreateProjectBlockHistoryAction$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectBlockHistoryAction
> = CreateProjectBlockHistoryAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectBlockHistoryAction$ {
  /** @deprecated use `CreateProjectBlockHistoryAction$inboundSchema` instead. */
  export const inboundSchema = CreateProjectBlockHistoryAction$inboundSchema;
  /** @deprecated use `CreateProjectBlockHistoryAction$outboundSchema` instead. */
  export const outboundSchema = CreateProjectBlockHistoryAction$outboundSchema;
}

/** @internal */
export const CreateProjectBlockHistory1$inboundSchema: z.ZodType<
  CreateProjectBlockHistory1,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: CreateProjectBlockHistoryAction$inboundSchema,
  reason: z.string(),
  statusCode: z.number(),
  createdAt: z.number(),
  caseId: z.string().optional(),
  actor: z.string().optional(),
  comment: z.string().optional(),
  isCascading: z.boolean().optional(),
});

/** @internal */
export type CreateProjectBlockHistory1$Outbound = {
  action: string;
  reason: string;
  statusCode: number;
  createdAt: number;
  caseId?: string | undefined;
  actor?: string | undefined;
  comment?: string | undefined;
  isCascading?: boolean | undefined;
};

/** @internal */
export const CreateProjectBlockHistory1$outboundSchema: z.ZodType<
  CreateProjectBlockHistory1$Outbound,
  z.ZodTypeDef,
  CreateProjectBlockHistory1
> = z.object({
  action: CreateProjectBlockHistoryAction$outboundSchema,
  reason: z.string(),
  statusCode: z.number(),
  createdAt: z.number(),
  caseId: z.string().optional(),
  actor: z.string().optional(),
  comment: z.string().optional(),
  isCascading: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectBlockHistory1$ {
  /** @deprecated use `CreateProjectBlockHistory1$inboundSchema` instead. */
  export const inboundSchema = CreateProjectBlockHistory1$inboundSchema;
  /** @deprecated use `CreateProjectBlockHistory1$outboundSchema` instead. */
  export const outboundSchema = CreateProjectBlockHistory1$outboundSchema;
  /** @deprecated use `CreateProjectBlockHistory1$Outbound` instead. */
  export type Outbound = CreateProjectBlockHistory1$Outbound;
}

export function createProjectBlockHistory1ToJSON(
  createProjectBlockHistory1: CreateProjectBlockHistory1,
): string {
  return JSON.stringify(
    CreateProjectBlockHistory1$outboundSchema.parse(createProjectBlockHistory1),
  );
}

export function createProjectBlockHistory1FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectBlockHistory1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectBlockHistory1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectBlockHistory1' from JSON`,
  );
}

/** @internal */
export const CreateProjectBlockHistory$inboundSchema: z.ZodType<
  CreateProjectBlockHistory,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateProjectBlockHistory1$inboundSchema),
  z.lazy(() => CreateProjectBlockHistory3$inboundSchema),
  z.lazy(() => CreateProjectBlockHistory4$inboundSchema),
  z.lazy(() => CreateProjectBlockHistory2$inboundSchema),
]);

/** @internal */
export type CreateProjectBlockHistory$Outbound =
  | CreateProjectBlockHistory1$Outbound
  | CreateProjectBlockHistory3$Outbound
  | CreateProjectBlockHistory4$Outbound
  | CreateProjectBlockHistory2$Outbound;

/** @internal */
export const CreateProjectBlockHistory$outboundSchema: z.ZodType<
  CreateProjectBlockHistory$Outbound,
  z.ZodTypeDef,
  CreateProjectBlockHistory
> = z.union([
  z.lazy(() => CreateProjectBlockHistory1$outboundSchema),
  z.lazy(() => CreateProjectBlockHistory3$outboundSchema),
  z.lazy(() => CreateProjectBlockHistory4$outboundSchema),
  z.lazy(() => CreateProjectBlockHistory2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectBlockHistory$ {
  /** @deprecated use `CreateProjectBlockHistory$inboundSchema` instead. */
  export const inboundSchema = CreateProjectBlockHistory$inboundSchema;
  /** @deprecated use `CreateProjectBlockHistory$outboundSchema` instead. */
  export const outboundSchema = CreateProjectBlockHistory$outboundSchema;
  /** @deprecated use `CreateProjectBlockHistory$Outbound` instead. */
  export type Outbound = CreateProjectBlockHistory$Outbound;
}

export function createProjectBlockHistoryToJSON(
  createProjectBlockHistory: CreateProjectBlockHistory,
): string {
  return JSON.stringify(
    CreateProjectBlockHistory$outboundSchema.parse(createProjectBlockHistory),
  );
}

export function createProjectBlockHistoryFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectBlockHistory, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectBlockHistory$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectBlockHistory' from JSON`,
  );
}

/** @internal */
export const CreateProjectAbuse$inboundSchema: z.ZodType<
  CreateProjectAbuse,
  z.ZodTypeDef,
  unknown
> = z.object({
  scanner: z.string().optional(),
  history: z.array(z.lazy(() => CreateProjectHistory$inboundSchema)),
  updatedAt: z.number(),
  block: z.lazy(() => CreateProjectBlock$inboundSchema).optional(),
  blockHistory: z.array(
    z.union([
      z.lazy(() => CreateProjectBlockHistory1$inboundSchema),
      z.lazy(() => CreateProjectBlockHistory3$inboundSchema),
      z.lazy(() => CreateProjectBlockHistory4$inboundSchema),
      z.lazy(() => CreateProjectBlockHistory2$inboundSchema),
    ]),
  ).optional(),
});

/** @internal */
export type CreateProjectAbuse$Outbound = {
  scanner?: string | undefined;
  history: Array<CreateProjectHistory$Outbound>;
  updatedAt: number;
  block?: CreateProjectBlock$Outbound | undefined;
  blockHistory?:
    | Array<
      | CreateProjectBlockHistory1$Outbound
      | CreateProjectBlockHistory3$Outbound
      | CreateProjectBlockHistory4$Outbound
      | CreateProjectBlockHistory2$Outbound
    >
    | undefined;
};

/** @internal */
export const CreateProjectAbuse$outboundSchema: z.ZodType<
  CreateProjectAbuse$Outbound,
  z.ZodTypeDef,
  CreateProjectAbuse
> = z.object({
  scanner: z.string().optional(),
  history: z.array(z.lazy(() => CreateProjectHistory$outboundSchema)),
  updatedAt: z.number(),
  block: z.lazy(() => CreateProjectBlock$outboundSchema).optional(),
  blockHistory: z.array(
    z.union([
      z.lazy(() => CreateProjectBlockHistory1$outboundSchema),
      z.lazy(() => CreateProjectBlockHistory3$outboundSchema),
      z.lazy(() => CreateProjectBlockHistory4$outboundSchema),
      z.lazy(() => CreateProjectBlockHistory2$outboundSchema),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectAbuse$ {
  /** @deprecated use `CreateProjectAbuse$inboundSchema` instead. */
  export const inboundSchema = CreateProjectAbuse$inboundSchema;
  /** @deprecated use `CreateProjectAbuse$outboundSchema` instead. */
  export const outboundSchema = CreateProjectAbuse$outboundSchema;
  /** @deprecated use `CreateProjectAbuse$Outbound` instead. */
  export type Outbound = CreateProjectAbuse$Outbound;
}

export function createProjectAbuseToJSON(
  createProjectAbuse: CreateProjectAbuse,
): string {
  return JSON.stringify(
    CreateProjectAbuse$outboundSchema.parse(createProjectAbuse),
  );
}

export function createProjectAbuseFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectAbuse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectAbuse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectAbuse' from JSON`,
  );
}

/** @internal */
export const CreateProjectHasProjectsType$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectHasProjectsType
> = z.nativeEnum(CreateProjectHasProjectsType);

/** @internal */
export const CreateProjectHasProjectsType$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectHasProjectsType
> = CreateProjectHasProjectsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectHasProjectsType$ {
  /** @deprecated use `CreateProjectHasProjectsType$inboundSchema` instead. */
  export const inboundSchema = CreateProjectHasProjectsType$inboundSchema;
  /** @deprecated use `CreateProjectHasProjectsType$outboundSchema` instead. */
  export const outboundSchema = CreateProjectHasProjectsType$outboundSchema;
}

/** @internal */
export const CreateProjectHasProjectsValue$inboundSchema: z.ZodType<
  CreateProjectHasProjectsValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  eq: z.string(),
});

/** @internal */
export type CreateProjectHasProjectsValue$Outbound = {
  eq: string;
};

/** @internal */
export const CreateProjectHasProjectsValue$outboundSchema: z.ZodType<
  CreateProjectHasProjectsValue$Outbound,
  z.ZodTypeDef,
  CreateProjectHasProjectsValue
> = z.object({
  eq: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectHasProjectsValue$ {
  /** @deprecated use `CreateProjectHasProjectsValue$inboundSchema` instead. */
  export const inboundSchema = CreateProjectHasProjectsValue$inboundSchema;
  /** @deprecated use `CreateProjectHasProjectsValue$outboundSchema` instead. */
  export const outboundSchema = CreateProjectHasProjectsValue$outboundSchema;
  /** @deprecated use `CreateProjectHasProjectsValue$Outbound` instead. */
  export type Outbound = CreateProjectHasProjectsValue$Outbound;
}

export function createProjectHasProjectsValueToJSON(
  createProjectHasProjectsValue: CreateProjectHasProjectsValue,
): string {
  return JSON.stringify(
    CreateProjectHasProjectsValue$outboundSchema.parse(
      createProjectHasProjectsValue,
    ),
  );
}

export function createProjectHasProjectsValueFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectHasProjectsValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectHasProjectsValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectHasProjectsValue' from JSON`,
  );
}

/** @internal */
export const CreateProjectHas2$inboundSchema: z.ZodType<
  CreateProjectHas2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateProjectHasProjectsType$inboundSchema,
  value: z.lazy(() => CreateProjectHasProjectsValue$inboundSchema),
});

/** @internal */
export type CreateProjectHas2$Outbound = {
  type: string;
  value: CreateProjectHasProjectsValue$Outbound;
};

/** @internal */
export const CreateProjectHas2$outboundSchema: z.ZodType<
  CreateProjectHas2$Outbound,
  z.ZodTypeDef,
  CreateProjectHas2
> = z.object({
  type: CreateProjectHasProjectsType$outboundSchema,
  value: z.lazy(() => CreateProjectHasProjectsValue$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectHas2$ {
  /** @deprecated use `CreateProjectHas2$inboundSchema` instead. */
  export const inboundSchema = CreateProjectHas2$inboundSchema;
  /** @deprecated use `CreateProjectHas2$outboundSchema` instead. */
  export const outboundSchema = CreateProjectHas2$outboundSchema;
  /** @deprecated use `CreateProjectHas2$Outbound` instead. */
  export type Outbound = CreateProjectHas2$Outbound;
}

export function createProjectHas2ToJSON(
  createProjectHas2: CreateProjectHas2,
): string {
  return JSON.stringify(
    CreateProjectHas2$outboundSchema.parse(createProjectHas2),
  );
}

export function createProjectHas2FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectHas2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectHas2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectHas2' from JSON`,
  );
}

/** @internal */
export const CreateProjectHasType$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectHasType
> = z.nativeEnum(CreateProjectHasType);

/** @internal */
export const CreateProjectHasType$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectHasType
> = CreateProjectHasType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectHasType$ {
  /** @deprecated use `CreateProjectHasType$inboundSchema` instead. */
  export const inboundSchema = CreateProjectHasType$inboundSchema;
  /** @deprecated use `CreateProjectHasType$outboundSchema` instead. */
  export const outboundSchema = CreateProjectHasType$outboundSchema;
}

/** @internal */
export const HasKey$inboundSchema: z.ZodNativeEnum<typeof HasKey> = z
  .nativeEnum(HasKey);

/** @internal */
export const HasKey$outboundSchema: z.ZodNativeEnum<typeof HasKey> =
  HasKey$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HasKey$ {
  /** @deprecated use `HasKey$inboundSchema` instead. */
  export const inboundSchema = HasKey$inboundSchema;
  /** @deprecated use `HasKey$outboundSchema` instead. */
  export const outboundSchema = HasKey$outboundSchema;
}

/** @internal */
export const CreateProjectHasValue$inboundSchema: z.ZodType<
  CreateProjectHasValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  eq: z.string(),
});

/** @internal */
export type CreateProjectHasValue$Outbound = {
  eq: string;
};

/** @internal */
export const CreateProjectHasValue$outboundSchema: z.ZodType<
  CreateProjectHasValue$Outbound,
  z.ZodTypeDef,
  CreateProjectHasValue
> = z.object({
  eq: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectHasValue$ {
  /** @deprecated use `CreateProjectHasValue$inboundSchema` instead. */
  export const inboundSchema = CreateProjectHasValue$inboundSchema;
  /** @deprecated use `CreateProjectHasValue$outboundSchema` instead. */
  export const outboundSchema = CreateProjectHasValue$outboundSchema;
  /** @deprecated use `CreateProjectHasValue$Outbound` instead. */
  export type Outbound = CreateProjectHasValue$Outbound;
}

export function createProjectHasValueToJSON(
  createProjectHasValue: CreateProjectHasValue,
): string {
  return JSON.stringify(
    CreateProjectHasValue$outboundSchema.parse(createProjectHasValue),
  );
}

export function createProjectHasValueFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectHasValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectHasValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectHasValue' from JSON`,
  );
}

/** @internal */
export const CreateProjectHas1$inboundSchema: z.ZodType<
  CreateProjectHas1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateProjectHasType$inboundSchema,
  key: HasKey$inboundSchema,
  value: z.lazy(() => CreateProjectHasValue$inboundSchema),
});

/** @internal */
export type CreateProjectHas1$Outbound = {
  type: string;
  key: string;
  value: CreateProjectHasValue$Outbound;
};

/** @internal */
export const CreateProjectHas1$outboundSchema: z.ZodType<
  CreateProjectHas1$Outbound,
  z.ZodTypeDef,
  CreateProjectHas1
> = z.object({
  type: CreateProjectHasType$outboundSchema,
  key: HasKey$outboundSchema,
  value: z.lazy(() => CreateProjectHasValue$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectHas1$ {
  /** @deprecated use `CreateProjectHas1$inboundSchema` instead. */
  export const inboundSchema = CreateProjectHas1$inboundSchema;
  /** @deprecated use `CreateProjectHas1$outboundSchema` instead. */
  export const outboundSchema = CreateProjectHas1$outboundSchema;
  /** @deprecated use `CreateProjectHas1$Outbound` instead. */
  export type Outbound = CreateProjectHas1$Outbound;
}

export function createProjectHas1ToJSON(
  createProjectHas1: CreateProjectHas1,
): string {
  return JSON.stringify(
    CreateProjectHas1$outboundSchema.parse(createProjectHas1),
  );
}

export function createProjectHas1FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectHas1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectHas1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectHas1' from JSON`,
  );
}

/** @internal */
export const InternalRoutesHas$inboundSchema: z.ZodType<
  InternalRoutesHas,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateProjectHas1$inboundSchema),
  z.lazy(() => CreateProjectHas2$inboundSchema),
]);

/** @internal */
export type InternalRoutesHas$Outbound =
  | CreateProjectHas1$Outbound
  | CreateProjectHas2$Outbound;

/** @internal */
export const InternalRoutesHas$outboundSchema: z.ZodType<
  InternalRoutesHas$Outbound,
  z.ZodTypeDef,
  InternalRoutesHas
> = z.union([
  z.lazy(() => CreateProjectHas1$outboundSchema),
  z.lazy(() => CreateProjectHas2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InternalRoutesHas$ {
  /** @deprecated use `InternalRoutesHas$inboundSchema` instead. */
  export const inboundSchema = InternalRoutesHas$inboundSchema;
  /** @deprecated use `InternalRoutesHas$outboundSchema` instead. */
  export const outboundSchema = InternalRoutesHas$outboundSchema;
  /** @deprecated use `InternalRoutesHas$Outbound` instead. */
  export type Outbound = InternalRoutesHas$Outbound;
}

export function internalRoutesHasToJSON(
  internalRoutesHas: InternalRoutesHas,
): string {
  return JSON.stringify(
    InternalRoutesHas$outboundSchema.parse(internalRoutesHas),
  );
}

export function internalRoutesHasFromJSON(
  jsonString: string,
): SafeParseResult<InternalRoutesHas, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InternalRoutesHas$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InternalRoutesHas' from JSON`,
  );
}

/** @internal */
export const CreateProjectInternalRoutesAction$inboundSchema: z.ZodNativeEnum<
  typeof CreateProjectInternalRoutesAction
> = z.nativeEnum(CreateProjectInternalRoutesAction);

/** @internal */
export const CreateProjectInternalRoutesAction$outboundSchema: z.ZodNativeEnum<
  typeof CreateProjectInternalRoutesAction
> = CreateProjectInternalRoutesAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectInternalRoutesAction$ {
  /** @deprecated use `CreateProjectInternalRoutesAction$inboundSchema` instead. */
  export const inboundSchema = CreateProjectInternalRoutesAction$inboundSchema;
  /** @deprecated use `CreateProjectInternalRoutesAction$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectInternalRoutesAction$outboundSchema;
}

/** @internal */
export const InternalRoutesMitigate$inboundSchema: z.ZodType<
  InternalRoutesMitigate,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: CreateProjectInternalRoutesAction$inboundSchema,
});

/** @internal */
export type InternalRoutesMitigate$Outbound = {
  action: string;
};

/** @internal */
export const InternalRoutesMitigate$outboundSchema: z.ZodType<
  InternalRoutesMitigate$Outbound,
  z.ZodTypeDef,
  InternalRoutesMitigate
> = z.object({
  action: CreateProjectInternalRoutesAction$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InternalRoutesMitigate$ {
  /** @deprecated use `InternalRoutesMitigate$inboundSchema` instead. */
  export const inboundSchema = InternalRoutesMitigate$inboundSchema;
  /** @deprecated use `InternalRoutesMitigate$outboundSchema` instead. */
  export const outboundSchema = InternalRoutesMitigate$outboundSchema;
  /** @deprecated use `InternalRoutesMitigate$Outbound` instead. */
  export type Outbound = InternalRoutesMitigate$Outbound;
}

export function internalRoutesMitigateToJSON(
  internalRoutesMitigate: InternalRoutesMitigate,
): string {
  return JSON.stringify(
    InternalRoutesMitigate$outboundSchema.parse(internalRoutesMitigate),
  );
}

export function internalRoutesMitigateFromJSON(
  jsonString: string,
): SafeParseResult<InternalRoutesMitigate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InternalRoutesMitigate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InternalRoutesMitigate' from JSON`,
  );
}

/** @internal */
export const CreateProjectInternalRoutes2$inboundSchema: z.ZodType<
  CreateProjectInternalRoutes2,
  z.ZodTypeDef,
  unknown
> = z.object({
  has: z.array(
    z.union([
      z.lazy(() => CreateProjectHas1$inboundSchema),
      z.lazy(() => CreateProjectHas2$inboundSchema),
    ]),
  ),
  mitigate: z.lazy(() => InternalRoutesMitigate$inboundSchema),
  src: z.string().optional(),
});

/** @internal */
export type CreateProjectInternalRoutes2$Outbound = {
  has: Array<CreateProjectHas1$Outbound | CreateProjectHas2$Outbound>;
  mitigate: InternalRoutesMitigate$Outbound;
  src?: string | undefined;
};

/** @internal */
export const CreateProjectInternalRoutes2$outboundSchema: z.ZodType<
  CreateProjectInternalRoutes2$Outbound,
  z.ZodTypeDef,
  CreateProjectInternalRoutes2
> = z.object({
  has: z.array(
    z.union([
      z.lazy(() => CreateProjectHas1$outboundSchema),
      z.lazy(() => CreateProjectHas2$outboundSchema),
    ]),
  ),
  mitigate: z.lazy(() => InternalRoutesMitigate$outboundSchema),
  src: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectInternalRoutes2$ {
  /** @deprecated use `CreateProjectInternalRoutes2$inboundSchema` instead. */
  export const inboundSchema = CreateProjectInternalRoutes2$inboundSchema;
  /** @deprecated use `CreateProjectInternalRoutes2$outboundSchema` instead. */
  export const outboundSchema = CreateProjectInternalRoutes2$outboundSchema;
  /** @deprecated use `CreateProjectInternalRoutes2$Outbound` instead. */
  export type Outbound = CreateProjectInternalRoutes2$Outbound;
}

export function createProjectInternalRoutes2ToJSON(
  createProjectInternalRoutes2: CreateProjectInternalRoutes2,
): string {
  return JSON.stringify(
    CreateProjectInternalRoutes2$outboundSchema.parse(
      createProjectInternalRoutes2,
    ),
  );
}

export function createProjectInternalRoutes2FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectInternalRoutes2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectInternalRoutes2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectInternalRoutes2' from JSON`,
  );
}

/** @internal */
export const CreateProjectInternalRoutes1$inboundSchema: z.ZodType<
  CreateProjectInternalRoutes1,
  z.ZodTypeDef,
  unknown
> = z.object({
  src: z.string(),
  status: z.number(),
});

/** @internal */
export type CreateProjectInternalRoutes1$Outbound = {
  src: string;
  status: number;
};

/** @internal */
export const CreateProjectInternalRoutes1$outboundSchema: z.ZodType<
  CreateProjectInternalRoutes1$Outbound,
  z.ZodTypeDef,
  CreateProjectInternalRoutes1
> = z.object({
  src: z.string(),
  status: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectInternalRoutes1$ {
  /** @deprecated use `CreateProjectInternalRoutes1$inboundSchema` instead. */
  export const inboundSchema = CreateProjectInternalRoutes1$inboundSchema;
  /** @deprecated use `CreateProjectInternalRoutes1$outboundSchema` instead. */
  export const outboundSchema = CreateProjectInternalRoutes1$outboundSchema;
  /** @deprecated use `CreateProjectInternalRoutes1$Outbound` instead. */
  export type Outbound = CreateProjectInternalRoutes1$Outbound;
}

export function createProjectInternalRoutes1ToJSON(
  createProjectInternalRoutes1: CreateProjectInternalRoutes1,
): string {
  return JSON.stringify(
    CreateProjectInternalRoutes1$outboundSchema.parse(
      createProjectInternalRoutes1,
    ),
  );
}

export function createProjectInternalRoutes1FromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectInternalRoutes1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectInternalRoutes1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectInternalRoutes1' from JSON`,
  );
}

/** @internal */
export const CreateProjectInternalRoutes$inboundSchema: z.ZodType<
  CreateProjectInternalRoutes,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateProjectInternalRoutes1$inboundSchema),
  z.lazy(() => CreateProjectInternalRoutes2$inboundSchema),
]);

/** @internal */
export type CreateProjectInternalRoutes$Outbound =
  | CreateProjectInternalRoutes1$Outbound
  | CreateProjectInternalRoutes2$Outbound;

/** @internal */
export const CreateProjectInternalRoutes$outboundSchema: z.ZodType<
  CreateProjectInternalRoutes$Outbound,
  z.ZodTypeDef,
  CreateProjectInternalRoutes
> = z.union([
  z.lazy(() => CreateProjectInternalRoutes1$outboundSchema),
  z.lazy(() => CreateProjectInternalRoutes2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectInternalRoutes$ {
  /** @deprecated use `CreateProjectInternalRoutes$inboundSchema` instead. */
  export const inboundSchema = CreateProjectInternalRoutes$inboundSchema;
  /** @deprecated use `CreateProjectInternalRoutes$outboundSchema` instead. */
  export const outboundSchema = CreateProjectInternalRoutes$outboundSchema;
  /** @deprecated use `CreateProjectInternalRoutes$Outbound` instead. */
  export type Outbound = CreateProjectInternalRoutes$Outbound;
}

export function createProjectInternalRoutesToJSON(
  createProjectInternalRoutes: CreateProjectInternalRoutes,
): string {
  return JSON.stringify(
    CreateProjectInternalRoutes$outboundSchema.parse(
      createProjectInternalRoutes,
    ),
  );
}

export function createProjectInternalRoutesFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectInternalRoutes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectInternalRoutes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectInternalRoutes' from JSON`,
  );
}

/** @internal */
export const CreateProjectResponseBody$inboundSchema: z.ZodType<
  CreateProjectResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountId: z.string(),
  analytics: z.lazy(() => CreateProjectAnalytics$inboundSchema).optional(),
  speedInsights: z.lazy(() => CreateProjectSpeedInsights$inboundSchema)
    .optional(),
  autoExposeSystemEnvs: z.boolean().optional(),
  autoAssignCustomDomains: z.boolean().optional(),
  autoAssignCustomDomainsUpdatedBy: z.string().optional(),
  buildCommand: z.nullable(z.string()).optional(),
  commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
  connectConfigurations: z.nullable(
    z.array(z.lazy(() => CreateProjectConnectConfigurations$inboundSchema)),
  ).optional(),
  connectConfigurationId: z.nullable(z.string()).optional(),
  connectBuildsEnabled: z.boolean().optional(),
  passiveConnectConfigurationId: z.nullable(z.string()).optional(),
  createdAt: z.number().optional(),
  customerSupportCodeVisibility: z.boolean().optional(),
  crons: z.lazy(() => CreateProjectCrons$inboundSchema).optional(),
  dataCache: z.lazy(() => CreateProjectDataCache$inboundSchema).optional(),
  deploymentExpiration: z.nullable(
    z.lazy(() => CreateProjectDeploymentExpiration$inboundSchema),
  ).optional(),
  devCommand: z.nullable(z.string()).optional(),
  directoryListing: z.boolean(),
  installCommand: z.nullable(z.string()).optional(),
  env: z.array(z.lazy(() => CreateProjectEnv$inboundSchema)).optional(),
  customEnvironments: z.array(
    z.lazy(() => CreateProjectCustomEnvironments$inboundSchema),
  ).optional(),
  framework: z.nullable(CreateProjectProjectsFramework$inboundSchema)
    .optional(),
  gitForkProtection: z.boolean().optional(),
  gitLFS: z.boolean().optional(),
  id: z.string(),
  ipBuckets: z.array(z.lazy(() => CreateProjectIpBuckets$inboundSchema))
    .optional(),
  latestDeployments: z.array(
    z.lazy(() => CreateProjectLatestDeployments$inboundSchema),
  ).optional(),
  link: z.union([
    z.lazy(() => CreateProjectLink4$inboundSchema),
    z.lazy(() => CreateProjectLink5$inboundSchema),
    z.lazy(() => CreateProjectLink3$inboundSchema),
    z.lazy(() => CreateProjectLink1$inboundSchema),
    z.lazy(() => CreateProjectLink2$inboundSchema),
  ]).optional(),
  microfrontends: z.union([
    z.lazy(() => CreateProjectMicrofrontends1$inboundSchema),
    z.lazy(() => CreateProjectMicrofrontends2$inboundSchema),
  ]).optional(),
  name: z.string(),
  nodeVersion: CreateProjectNodeVersion$inboundSchema,
  optionsAllowlist: z.nullable(
    z.lazy(() => CreateProjectOptionsAllowlist$inboundSchema),
  ).optional(),
  outputDirectory: z.nullable(z.string()).optional(),
  passwordProtection: z.nullable(
    z.lazy(() => CreateProjectPasswordProtection$inboundSchema),
  ).optional(),
  productionDeploymentsFastLane: z.boolean().optional(),
  publicSource: z.nullable(z.boolean()).optional(),
  resourceConfig: z.lazy(() =>
    CreateProjectProjectsResourceConfig$inboundSchema
  ),
  rollbackDescription: z.lazy(() =>
    CreateProjectRollbackDescription$inboundSchema
  ).optional(),
  rollingRelease: z.nullable(
    z.lazy(() => CreateProjectRollingRelease$inboundSchema),
  ).optional(),
  defaultResourceConfig: z.lazy(() =>
    CreateProjectDefaultResourceConfig$inboundSchema
  ),
  rootDirectory: z.nullable(z.string()).optional(),
  serverlessFunctionZeroConfigFailover: z.boolean().optional(),
  skewProtectionBoundaryAt: z.number().optional(),
  skewProtectionMaxAge: z.number().optional(),
  skipGitConnectDuringLink: z.boolean().optional(),
  sourceFilesOutsideRootDirectory: z.boolean().optional(),
  enableAffectedProjectsDeployments: z.boolean().optional(),
  ssoProtection: z.nullable(
    z.lazy(() => CreateProjectProjectsSsoProtection$inboundSchema),
  ).optional(),
  targets: z.record(
    z.nullable(z.lazy(() => CreateProjectTargets$inboundSchema)),
  ).optional(),
  transferCompletedAt: z.number().optional(),
  transferStartedAt: z.number().optional(),
  transferToAccountId: z.string().optional(),
  transferredFromAccountId: z.string().optional(),
  updatedAt: z.number().optional(),
  live: z.boolean().optional(),
  enablePreviewFeedback: z.nullable(z.boolean()).optional(),
  enableProductionFeedback: z.nullable(z.boolean()).optional(),
  permissions: z.lazy(() => CreateProjectPermissions$inboundSchema).optional(),
  lastRollbackTarget: z.nullable(
    z.lazy(() => CreateProjectLastRollbackTarget$inboundSchema),
  ).optional(),
  lastAliasRequest: z.nullable(
    z.lazy(() => CreateProjectLastAliasRequest$inboundSchema),
  ).optional(),
  protectionBypass: z.record(
    z.union([
      z.lazy(() => CreateProjectProtectionBypass1$inboundSchema),
      z.lazy(() => CreateProjectProtectionBypass2$inboundSchema),
    ]),
  ).optional(),
  hasActiveBranches: z.boolean().optional(),
  trustedIps: z.nullable(
    z.union([
      z.lazy(() => CreateProjectTrustedIps1$inboundSchema),
      z.lazy(() => CreateProjectTrustedIps2$inboundSchema),
    ]),
  ).optional(),
  gitComments: z.lazy(() => CreateProjectGitComments$inboundSchema).optional(),
  gitProviderOptions: z.lazy(() =>
    CreateProjectGitProviderOptions$inboundSchema
  ).optional(),
  paused: z.boolean().optional(),
  concurrencyBucketName: z.string().optional(),
  webAnalytics: z.lazy(() => CreateProjectWebAnalytics$inboundSchema)
    .optional(),
  security: z.lazy(() => CreateProjectSecurity$inboundSchema).optional(),
  oidcTokenConfig: z.lazy(() => CreateProjectOidcTokenConfig$inboundSchema)
    .optional(),
  tier: CreateProjectTier$inboundSchema.optional(),
  features: z.lazy(() => CreateProjectFeatures$inboundSchema).optional(),
  v0: z.boolean().optional(),
  abuse: z.lazy(() => CreateProjectAbuse$inboundSchema).optional(),
  internalRoutes: z.array(
    z.union([
      z.lazy(() => CreateProjectInternalRoutes1$inboundSchema),
      z.lazy(() => CreateProjectInternalRoutes2$inboundSchema),
    ]),
  ).optional(),
});

/** @internal */
export type CreateProjectResponseBody$Outbound = {
  accountId: string;
  analytics?: CreateProjectAnalytics$Outbound | undefined;
  speedInsights?: CreateProjectSpeedInsights$Outbound | undefined;
  autoExposeSystemEnvs?: boolean | undefined;
  autoAssignCustomDomains?: boolean | undefined;
  autoAssignCustomDomainsUpdatedBy?: string | undefined;
  buildCommand?: string | null | undefined;
  commandForIgnoringBuildStep?: string | null | undefined;
  connectConfigurations?:
    | Array<CreateProjectConnectConfigurations$Outbound>
    | null
    | undefined;
  connectConfigurationId?: string | null | undefined;
  connectBuildsEnabled?: boolean | undefined;
  passiveConnectConfigurationId?: string | null | undefined;
  createdAt?: number | undefined;
  customerSupportCodeVisibility?: boolean | undefined;
  crons?: CreateProjectCrons$Outbound | undefined;
  dataCache?: CreateProjectDataCache$Outbound | undefined;
  deploymentExpiration?:
    | CreateProjectDeploymentExpiration$Outbound
    | null
    | undefined;
  devCommand?: string | null | undefined;
  directoryListing: boolean;
  installCommand?: string | null | undefined;
  env?: Array<CreateProjectEnv$Outbound> | undefined;
  customEnvironments?:
    | Array<CreateProjectCustomEnvironments$Outbound>
    | undefined;
  framework?: string | null | undefined;
  gitForkProtection?: boolean | undefined;
  gitLFS?: boolean | undefined;
  id: string;
  ipBuckets?: Array<CreateProjectIpBuckets$Outbound> | undefined;
  latestDeployments?:
    | Array<CreateProjectLatestDeployments$Outbound>
    | undefined;
  link?:
    | CreateProjectLink4$Outbound
    | CreateProjectLink5$Outbound
    | CreateProjectLink3$Outbound
    | CreateProjectLink1$Outbound
    | CreateProjectLink2$Outbound
    | undefined;
  microfrontends?:
    | CreateProjectMicrofrontends1$Outbound
    | CreateProjectMicrofrontends2$Outbound
    | undefined;
  name: string;
  nodeVersion: string;
  optionsAllowlist?: CreateProjectOptionsAllowlist$Outbound | null | undefined;
  outputDirectory?: string | null | undefined;
  passwordProtection?:
    | CreateProjectPasswordProtection$Outbound
    | null
    | undefined;
  productionDeploymentsFastLane?: boolean | undefined;
  publicSource?: boolean | null | undefined;
  resourceConfig: CreateProjectProjectsResourceConfig$Outbound;
  rollbackDescription?: CreateProjectRollbackDescription$Outbound | undefined;
  rollingRelease?: CreateProjectRollingRelease$Outbound | null | undefined;
  defaultResourceConfig: CreateProjectDefaultResourceConfig$Outbound;
  rootDirectory?: string | null | undefined;
  serverlessFunctionZeroConfigFailover?: boolean | undefined;
  skewProtectionBoundaryAt?: number | undefined;
  skewProtectionMaxAge?: number | undefined;
  skipGitConnectDuringLink?: boolean | undefined;
  sourceFilesOutsideRootDirectory?: boolean | undefined;
  enableAffectedProjectsDeployments?: boolean | undefined;
  ssoProtection?:
    | CreateProjectProjectsSsoProtection$Outbound
    | null
    | undefined;
  targets?: { [k: string]: CreateProjectTargets$Outbound | null } | undefined;
  transferCompletedAt?: number | undefined;
  transferStartedAt?: number | undefined;
  transferToAccountId?: string | undefined;
  transferredFromAccountId?: string | undefined;
  updatedAt?: number | undefined;
  live?: boolean | undefined;
  enablePreviewFeedback?: boolean | null | undefined;
  enableProductionFeedback?: boolean | null | undefined;
  permissions?: CreateProjectPermissions$Outbound | undefined;
  lastRollbackTarget?:
    | CreateProjectLastRollbackTarget$Outbound
    | null
    | undefined;
  lastAliasRequest?: CreateProjectLastAliasRequest$Outbound | null | undefined;
  protectionBypass?: {
    [k: string]:
      | CreateProjectProtectionBypass1$Outbound
      | CreateProjectProtectionBypass2$Outbound;
  } | undefined;
  hasActiveBranches?: boolean | undefined;
  trustedIps?:
    | CreateProjectTrustedIps1$Outbound
    | CreateProjectTrustedIps2$Outbound
    | null
    | undefined;
  gitComments?: CreateProjectGitComments$Outbound | undefined;
  gitProviderOptions?: CreateProjectGitProviderOptions$Outbound | undefined;
  paused?: boolean | undefined;
  concurrencyBucketName?: string | undefined;
  webAnalytics?: CreateProjectWebAnalytics$Outbound | undefined;
  security?: CreateProjectSecurity$Outbound | undefined;
  oidcTokenConfig?: CreateProjectOidcTokenConfig$Outbound | undefined;
  tier?: string | undefined;
  features?: CreateProjectFeatures$Outbound | undefined;
  v0?: boolean | undefined;
  abuse?: CreateProjectAbuse$Outbound | undefined;
  internalRoutes?:
    | Array<
      | CreateProjectInternalRoutes1$Outbound
      | CreateProjectInternalRoutes2$Outbound
    >
    | undefined;
};

/** @internal */
export const CreateProjectResponseBody$outboundSchema: z.ZodType<
  CreateProjectResponseBody$Outbound,
  z.ZodTypeDef,
  CreateProjectResponseBody
> = z.object({
  accountId: z.string(),
  analytics: z.lazy(() => CreateProjectAnalytics$outboundSchema).optional(),
  speedInsights: z.lazy(() => CreateProjectSpeedInsights$outboundSchema)
    .optional(),
  autoExposeSystemEnvs: z.boolean().optional(),
  autoAssignCustomDomains: z.boolean().optional(),
  autoAssignCustomDomainsUpdatedBy: z.string().optional(),
  buildCommand: z.nullable(z.string()).optional(),
  commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
  connectConfigurations: z.nullable(
    z.array(z.lazy(() => CreateProjectConnectConfigurations$outboundSchema)),
  ).optional(),
  connectConfigurationId: z.nullable(z.string()).optional(),
  connectBuildsEnabled: z.boolean().optional(),
  passiveConnectConfigurationId: z.nullable(z.string()).optional(),
  createdAt: z.number().optional(),
  customerSupportCodeVisibility: z.boolean().optional(),
  crons: z.lazy(() => CreateProjectCrons$outboundSchema).optional(),
  dataCache: z.lazy(() => CreateProjectDataCache$outboundSchema).optional(),
  deploymentExpiration: z.nullable(
    z.lazy(() => CreateProjectDeploymentExpiration$outboundSchema),
  ).optional(),
  devCommand: z.nullable(z.string()).optional(),
  directoryListing: z.boolean(),
  installCommand: z.nullable(z.string()).optional(),
  env: z.array(z.lazy(() => CreateProjectEnv$outboundSchema)).optional(),
  customEnvironments: z.array(
    z.lazy(() => CreateProjectCustomEnvironments$outboundSchema),
  ).optional(),
  framework: z.nullable(CreateProjectProjectsFramework$outboundSchema)
    .optional(),
  gitForkProtection: z.boolean().optional(),
  gitLFS: z.boolean().optional(),
  id: z.string(),
  ipBuckets: z.array(z.lazy(() => CreateProjectIpBuckets$outboundSchema))
    .optional(),
  latestDeployments: z.array(
    z.lazy(() => CreateProjectLatestDeployments$outboundSchema),
  ).optional(),
  link: z.union([
    z.lazy(() => CreateProjectLink4$outboundSchema),
    z.lazy(() => CreateProjectLink5$outboundSchema),
    z.lazy(() => CreateProjectLink3$outboundSchema),
    z.lazy(() => CreateProjectLink1$outboundSchema),
    z.lazy(() => CreateProjectLink2$outboundSchema),
  ]).optional(),
  microfrontends: z.union([
    z.lazy(() => CreateProjectMicrofrontends1$outboundSchema),
    z.lazy(() => CreateProjectMicrofrontends2$outboundSchema),
  ]).optional(),
  name: z.string(),
  nodeVersion: CreateProjectNodeVersion$outboundSchema,
  optionsAllowlist: z.nullable(
    z.lazy(() => CreateProjectOptionsAllowlist$outboundSchema),
  ).optional(),
  outputDirectory: z.nullable(z.string()).optional(),
  passwordProtection: z.nullable(
    z.lazy(() => CreateProjectPasswordProtection$outboundSchema),
  ).optional(),
  productionDeploymentsFastLane: z.boolean().optional(),
  publicSource: z.nullable(z.boolean()).optional(),
  resourceConfig: z.lazy(() =>
    CreateProjectProjectsResourceConfig$outboundSchema
  ),
  rollbackDescription: z.lazy(() =>
    CreateProjectRollbackDescription$outboundSchema
  ).optional(),
  rollingRelease: z.nullable(
    z.lazy(() => CreateProjectRollingRelease$outboundSchema),
  ).optional(),
  defaultResourceConfig: z.lazy(() =>
    CreateProjectDefaultResourceConfig$outboundSchema
  ),
  rootDirectory: z.nullable(z.string()).optional(),
  serverlessFunctionZeroConfigFailover: z.boolean().optional(),
  skewProtectionBoundaryAt: z.number().optional(),
  skewProtectionMaxAge: z.number().optional(),
  skipGitConnectDuringLink: z.boolean().optional(),
  sourceFilesOutsideRootDirectory: z.boolean().optional(),
  enableAffectedProjectsDeployments: z.boolean().optional(),
  ssoProtection: z.nullable(
    z.lazy(() => CreateProjectProjectsSsoProtection$outboundSchema),
  ).optional(),
  targets: z.record(
    z.nullable(z.lazy(() => CreateProjectTargets$outboundSchema)),
  ).optional(),
  transferCompletedAt: z.number().optional(),
  transferStartedAt: z.number().optional(),
  transferToAccountId: z.string().optional(),
  transferredFromAccountId: z.string().optional(),
  updatedAt: z.number().optional(),
  live: z.boolean().optional(),
  enablePreviewFeedback: z.nullable(z.boolean()).optional(),
  enableProductionFeedback: z.nullable(z.boolean()).optional(),
  permissions: z.lazy(() => CreateProjectPermissions$outboundSchema).optional(),
  lastRollbackTarget: z.nullable(
    z.lazy(() => CreateProjectLastRollbackTarget$outboundSchema),
  ).optional(),
  lastAliasRequest: z.nullable(
    z.lazy(() => CreateProjectLastAliasRequest$outboundSchema),
  ).optional(),
  protectionBypass: z.record(
    z.union([
      z.lazy(() => CreateProjectProtectionBypass1$outboundSchema),
      z.lazy(() => CreateProjectProtectionBypass2$outboundSchema),
    ]),
  ).optional(),
  hasActiveBranches: z.boolean().optional(),
  trustedIps: z.nullable(
    z.union([
      z.lazy(() => CreateProjectTrustedIps1$outboundSchema),
      z.lazy(() => CreateProjectTrustedIps2$outboundSchema),
    ]),
  ).optional(),
  gitComments: z.lazy(() => CreateProjectGitComments$outboundSchema).optional(),
  gitProviderOptions: z.lazy(() =>
    CreateProjectGitProviderOptions$outboundSchema
  ).optional(),
  paused: z.boolean().optional(),
  concurrencyBucketName: z.string().optional(),
  webAnalytics: z.lazy(() => CreateProjectWebAnalytics$outboundSchema)
    .optional(),
  security: z.lazy(() => CreateProjectSecurity$outboundSchema).optional(),
  oidcTokenConfig: z.lazy(() => CreateProjectOidcTokenConfig$outboundSchema)
    .optional(),
  tier: CreateProjectTier$outboundSchema.optional(),
  features: z.lazy(() => CreateProjectFeatures$outboundSchema).optional(),
  v0: z.boolean().optional(),
  abuse: z.lazy(() => CreateProjectAbuse$outboundSchema).optional(),
  internalRoutes: z.array(
    z.union([
      z.lazy(() => CreateProjectInternalRoutes1$outboundSchema),
      z.lazy(() => CreateProjectInternalRoutes2$outboundSchema),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectResponseBody$ {
  /** @deprecated use `CreateProjectResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateProjectResponseBody$inboundSchema;
  /** @deprecated use `CreateProjectResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateProjectResponseBody$outboundSchema;
  /** @deprecated use `CreateProjectResponseBody$Outbound` instead. */
  export type Outbound = CreateProjectResponseBody$Outbound;
}

export function createProjectResponseBodyToJSON(
  createProjectResponseBody: CreateProjectResponseBody,
): string {
  return JSON.stringify(
    CreateProjectResponseBody$outboundSchema.parse(createProjectResponseBody),
  );
}

export function createProjectResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProjectResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectResponseBody' from JSON`,
  );
}
