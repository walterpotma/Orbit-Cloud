/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type CreateEdgeConfigRequestBody = {
  slug: string;
  items?: { [k: string]: any } | undefined;
};

export type CreateEdgeConfigRequest = {
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
  requestBody: CreateEdgeConfigRequestBody;
};

/**
 * Keeps track of the current state of the Edge Config while it gets transferred.
 */
export type CreateEdgeConfigTransfer = {
  fromAccountId: string;
  startedAt: number;
  doneAt: number | null;
};

export type CreateEdgeConfigSchema = {};

export const CreateEdgeConfigPurposeType = {
  Experimentation: "experimentation",
} as const;
export type CreateEdgeConfigPurposeType = ClosedEnum<
  typeof CreateEdgeConfigPurposeType
>;

export type Purpose2 = {
  type: CreateEdgeConfigPurposeType;
  resourceId: string;
};

export const PurposeType = {
  Flags: "flags",
} as const;
export type PurposeType = ClosedEnum<typeof PurposeType>;

export type Purpose1 = {
  type: PurposeType;
  projectId: string;
};

export type CreateEdgeConfigPurpose = Purpose1 | Purpose2;

/**
 * An Edge Config
 */
export type CreateEdgeConfigResponseBody = {
  createdAt: number;
  updatedAt: number;
  deletedAt?: number | undefined;
  id: string;
  /**
   * Name for the Edge Config Names are not unique. Must start with an alphabetic character and can contain only alphanumeric characters and underscores).
   */
  slug: string;
  ownerId: string;
  digest: string;
  /**
   * Keeps track of the current state of the Edge Config while it gets transferred.
   */
  transfer?: CreateEdgeConfigTransfer | undefined;
  schema?: CreateEdgeConfigSchema | undefined;
  purpose?: Purpose1 | Purpose2 | undefined;
  /**
   * Timestamp of when the Edge Config was synced to DynamoDB initially. It is only set when syncing the entire Edge Config, not when updating.
   */
  syncedToDynamoAt?: number | undefined;
  sizeInBytes: number;
  itemCount: number;
};

/** @internal */
export const CreateEdgeConfigRequestBody$inboundSchema: z.ZodType<
  CreateEdgeConfigRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  slug: z.string(),
  items: z.record(z.any()).optional(),
});

/** @internal */
export type CreateEdgeConfigRequestBody$Outbound = {
  slug: string;
  items?: { [k: string]: any } | undefined;
};

/** @internal */
export const CreateEdgeConfigRequestBody$outboundSchema: z.ZodType<
  CreateEdgeConfigRequestBody$Outbound,
  z.ZodTypeDef,
  CreateEdgeConfigRequestBody
> = z.object({
  slug: z.string(),
  items: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEdgeConfigRequestBody$ {
  /** @deprecated use `CreateEdgeConfigRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateEdgeConfigRequestBody$inboundSchema;
  /** @deprecated use `CreateEdgeConfigRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateEdgeConfigRequestBody$outboundSchema;
  /** @deprecated use `CreateEdgeConfigRequestBody$Outbound` instead. */
  export type Outbound = CreateEdgeConfigRequestBody$Outbound;
}

export function createEdgeConfigRequestBodyToJSON(
  createEdgeConfigRequestBody: CreateEdgeConfigRequestBody,
): string {
  return JSON.stringify(
    CreateEdgeConfigRequestBody$outboundSchema.parse(
      createEdgeConfigRequestBody,
    ),
  );
}

export function createEdgeConfigRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateEdgeConfigRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateEdgeConfigRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateEdgeConfigRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateEdgeConfigRequest$inboundSchema: z.ZodType<
  CreateEdgeConfigRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  teamId: z.string().optional(),
  slug: z.string().optional(),
  RequestBody: z.lazy(() => CreateEdgeConfigRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateEdgeConfigRequest$Outbound = {
  teamId?: string | undefined;
  slug?: string | undefined;
  RequestBody: CreateEdgeConfigRequestBody$Outbound;
};

/** @internal */
export const CreateEdgeConfigRequest$outboundSchema: z.ZodType<
  CreateEdgeConfigRequest$Outbound,
  z.ZodTypeDef,
  CreateEdgeConfigRequest
> = z.object({
  teamId: z.string().optional(),
  slug: z.string().optional(),
  requestBody: z.lazy(() => CreateEdgeConfigRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEdgeConfigRequest$ {
  /** @deprecated use `CreateEdgeConfigRequest$inboundSchema` instead. */
  export const inboundSchema = CreateEdgeConfigRequest$inboundSchema;
  /** @deprecated use `CreateEdgeConfigRequest$outboundSchema` instead. */
  export const outboundSchema = CreateEdgeConfigRequest$outboundSchema;
  /** @deprecated use `CreateEdgeConfigRequest$Outbound` instead. */
  export type Outbound = CreateEdgeConfigRequest$Outbound;
}

export function createEdgeConfigRequestToJSON(
  createEdgeConfigRequest: CreateEdgeConfigRequest,
): string {
  return JSON.stringify(
    CreateEdgeConfigRequest$outboundSchema.parse(createEdgeConfigRequest),
  );
}

export function createEdgeConfigRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateEdgeConfigRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateEdgeConfigRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateEdgeConfigRequest' from JSON`,
  );
}

/** @internal */
export const CreateEdgeConfigTransfer$inboundSchema: z.ZodType<
  CreateEdgeConfigTransfer,
  z.ZodTypeDef,
  unknown
> = z.object({
  fromAccountId: z.string(),
  startedAt: z.number(),
  doneAt: z.nullable(z.number()),
});

/** @internal */
export type CreateEdgeConfigTransfer$Outbound = {
  fromAccountId: string;
  startedAt: number;
  doneAt: number | null;
};

/** @internal */
export const CreateEdgeConfigTransfer$outboundSchema: z.ZodType<
  CreateEdgeConfigTransfer$Outbound,
  z.ZodTypeDef,
  CreateEdgeConfigTransfer
> = z.object({
  fromAccountId: z.string(),
  startedAt: z.number(),
  doneAt: z.nullable(z.number()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEdgeConfigTransfer$ {
  /** @deprecated use `CreateEdgeConfigTransfer$inboundSchema` instead. */
  export const inboundSchema = CreateEdgeConfigTransfer$inboundSchema;
  /** @deprecated use `CreateEdgeConfigTransfer$outboundSchema` instead. */
  export const outboundSchema = CreateEdgeConfigTransfer$outboundSchema;
  /** @deprecated use `CreateEdgeConfigTransfer$Outbound` instead. */
  export type Outbound = CreateEdgeConfigTransfer$Outbound;
}

export function createEdgeConfigTransferToJSON(
  createEdgeConfigTransfer: CreateEdgeConfigTransfer,
): string {
  return JSON.stringify(
    CreateEdgeConfigTransfer$outboundSchema.parse(createEdgeConfigTransfer),
  );
}

export function createEdgeConfigTransferFromJSON(
  jsonString: string,
): SafeParseResult<CreateEdgeConfigTransfer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateEdgeConfigTransfer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateEdgeConfigTransfer' from JSON`,
  );
}

/** @internal */
export const CreateEdgeConfigSchema$inboundSchema: z.ZodType<
  CreateEdgeConfigSchema,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateEdgeConfigSchema$Outbound = {};

/** @internal */
export const CreateEdgeConfigSchema$outboundSchema: z.ZodType<
  CreateEdgeConfigSchema$Outbound,
  z.ZodTypeDef,
  CreateEdgeConfigSchema
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEdgeConfigSchema$ {
  /** @deprecated use `CreateEdgeConfigSchema$inboundSchema` instead. */
  export const inboundSchema = CreateEdgeConfigSchema$inboundSchema;
  /** @deprecated use `CreateEdgeConfigSchema$outboundSchema` instead. */
  export const outboundSchema = CreateEdgeConfigSchema$outboundSchema;
  /** @deprecated use `CreateEdgeConfigSchema$Outbound` instead. */
  export type Outbound = CreateEdgeConfigSchema$Outbound;
}

export function createEdgeConfigSchemaToJSON(
  createEdgeConfigSchema: CreateEdgeConfigSchema,
): string {
  return JSON.stringify(
    CreateEdgeConfigSchema$outboundSchema.parse(createEdgeConfigSchema),
  );
}

export function createEdgeConfigSchemaFromJSON(
  jsonString: string,
): SafeParseResult<CreateEdgeConfigSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateEdgeConfigSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateEdgeConfigSchema' from JSON`,
  );
}

/** @internal */
export const CreateEdgeConfigPurposeType$inboundSchema: z.ZodNativeEnum<
  typeof CreateEdgeConfigPurposeType
> = z.nativeEnum(CreateEdgeConfigPurposeType);

/** @internal */
export const CreateEdgeConfigPurposeType$outboundSchema: z.ZodNativeEnum<
  typeof CreateEdgeConfigPurposeType
> = CreateEdgeConfigPurposeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEdgeConfigPurposeType$ {
  /** @deprecated use `CreateEdgeConfigPurposeType$inboundSchema` instead. */
  export const inboundSchema = CreateEdgeConfigPurposeType$inboundSchema;
  /** @deprecated use `CreateEdgeConfigPurposeType$outboundSchema` instead. */
  export const outboundSchema = CreateEdgeConfigPurposeType$outboundSchema;
}

/** @internal */
export const Purpose2$inboundSchema: z.ZodType<
  Purpose2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateEdgeConfigPurposeType$inboundSchema,
  resourceId: z.string(),
});

/** @internal */
export type Purpose2$Outbound = {
  type: string;
  resourceId: string;
};

/** @internal */
export const Purpose2$outboundSchema: z.ZodType<
  Purpose2$Outbound,
  z.ZodTypeDef,
  Purpose2
> = z.object({
  type: CreateEdgeConfigPurposeType$outboundSchema,
  resourceId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Purpose2$ {
  /** @deprecated use `Purpose2$inboundSchema` instead. */
  export const inboundSchema = Purpose2$inboundSchema;
  /** @deprecated use `Purpose2$outboundSchema` instead. */
  export const outboundSchema = Purpose2$outboundSchema;
  /** @deprecated use `Purpose2$Outbound` instead. */
  export type Outbound = Purpose2$Outbound;
}

export function purpose2ToJSON(purpose2: Purpose2): string {
  return JSON.stringify(Purpose2$outboundSchema.parse(purpose2));
}

export function purpose2FromJSON(
  jsonString: string,
): SafeParseResult<Purpose2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Purpose2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Purpose2' from JSON`,
  );
}

/** @internal */
export const PurposeType$inboundSchema: z.ZodNativeEnum<typeof PurposeType> = z
  .nativeEnum(PurposeType);

/** @internal */
export const PurposeType$outboundSchema: z.ZodNativeEnum<typeof PurposeType> =
  PurposeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PurposeType$ {
  /** @deprecated use `PurposeType$inboundSchema` instead. */
  export const inboundSchema = PurposeType$inboundSchema;
  /** @deprecated use `PurposeType$outboundSchema` instead. */
  export const outboundSchema = PurposeType$outboundSchema;
}

/** @internal */
export const Purpose1$inboundSchema: z.ZodType<
  Purpose1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: PurposeType$inboundSchema,
  projectId: z.string(),
});

/** @internal */
export type Purpose1$Outbound = {
  type: string;
  projectId: string;
};

/** @internal */
export const Purpose1$outboundSchema: z.ZodType<
  Purpose1$Outbound,
  z.ZodTypeDef,
  Purpose1
> = z.object({
  type: PurposeType$outboundSchema,
  projectId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Purpose1$ {
  /** @deprecated use `Purpose1$inboundSchema` instead. */
  export const inboundSchema = Purpose1$inboundSchema;
  /** @deprecated use `Purpose1$outboundSchema` instead. */
  export const outboundSchema = Purpose1$outboundSchema;
  /** @deprecated use `Purpose1$Outbound` instead. */
  export type Outbound = Purpose1$Outbound;
}

export function purpose1ToJSON(purpose1: Purpose1): string {
  return JSON.stringify(Purpose1$outboundSchema.parse(purpose1));
}

export function purpose1FromJSON(
  jsonString: string,
): SafeParseResult<Purpose1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Purpose1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Purpose1' from JSON`,
  );
}

/** @internal */
export const CreateEdgeConfigPurpose$inboundSchema: z.ZodType<
  CreateEdgeConfigPurpose,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Purpose1$inboundSchema),
  z.lazy(() => Purpose2$inboundSchema),
]);

/** @internal */
export type CreateEdgeConfigPurpose$Outbound =
  | Purpose1$Outbound
  | Purpose2$Outbound;

/** @internal */
export const CreateEdgeConfigPurpose$outboundSchema: z.ZodType<
  CreateEdgeConfigPurpose$Outbound,
  z.ZodTypeDef,
  CreateEdgeConfigPurpose
> = z.union([
  z.lazy(() => Purpose1$outboundSchema),
  z.lazy(() => Purpose2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEdgeConfigPurpose$ {
  /** @deprecated use `CreateEdgeConfigPurpose$inboundSchema` instead. */
  export const inboundSchema = CreateEdgeConfigPurpose$inboundSchema;
  /** @deprecated use `CreateEdgeConfigPurpose$outboundSchema` instead. */
  export const outboundSchema = CreateEdgeConfigPurpose$outboundSchema;
  /** @deprecated use `CreateEdgeConfigPurpose$Outbound` instead. */
  export type Outbound = CreateEdgeConfigPurpose$Outbound;
}

export function createEdgeConfigPurposeToJSON(
  createEdgeConfigPurpose: CreateEdgeConfigPurpose,
): string {
  return JSON.stringify(
    CreateEdgeConfigPurpose$outboundSchema.parse(createEdgeConfigPurpose),
  );
}

export function createEdgeConfigPurposeFromJSON(
  jsonString: string,
): SafeParseResult<CreateEdgeConfigPurpose, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateEdgeConfigPurpose$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateEdgeConfigPurpose' from JSON`,
  );
}

/** @internal */
export const CreateEdgeConfigResponseBody$inboundSchema: z.ZodType<
  CreateEdgeConfigResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.number(),
  updatedAt: z.number(),
  deletedAt: z.number().optional(),
  id: z.string(),
  slug: z.string(),
  ownerId: z.string(),
  digest: z.string(),
  transfer: z.lazy(() => CreateEdgeConfigTransfer$inboundSchema).optional(),
  schema: z.lazy(() => CreateEdgeConfigSchema$inboundSchema).optional(),
  purpose: z.union([
    z.lazy(() => Purpose1$inboundSchema),
    z.lazy(() => Purpose2$inboundSchema),
  ]).optional(),
  syncedToDynamoAt: z.number().optional(),
  sizeInBytes: z.number(),
  itemCount: z.number(),
});

/** @internal */
export type CreateEdgeConfigResponseBody$Outbound = {
  createdAt: number;
  updatedAt: number;
  deletedAt?: number | undefined;
  id: string;
  slug: string;
  ownerId: string;
  digest: string;
  transfer?: CreateEdgeConfigTransfer$Outbound | undefined;
  schema?: CreateEdgeConfigSchema$Outbound | undefined;
  purpose?: Purpose1$Outbound | Purpose2$Outbound | undefined;
  syncedToDynamoAt?: number | undefined;
  sizeInBytes: number;
  itemCount: number;
};

/** @internal */
export const CreateEdgeConfigResponseBody$outboundSchema: z.ZodType<
  CreateEdgeConfigResponseBody$Outbound,
  z.ZodTypeDef,
  CreateEdgeConfigResponseBody
> = z.object({
  createdAt: z.number(),
  updatedAt: z.number(),
  deletedAt: z.number().optional(),
  id: z.string(),
  slug: z.string(),
  ownerId: z.string(),
  digest: z.string(),
  transfer: z.lazy(() => CreateEdgeConfigTransfer$outboundSchema).optional(),
  schema: z.lazy(() => CreateEdgeConfigSchema$outboundSchema).optional(),
  purpose: z.union([
    z.lazy(() => Purpose1$outboundSchema),
    z.lazy(() => Purpose2$outboundSchema),
  ]).optional(),
  syncedToDynamoAt: z.number().optional(),
  sizeInBytes: z.number(),
  itemCount: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEdgeConfigResponseBody$ {
  /** @deprecated use `CreateEdgeConfigResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateEdgeConfigResponseBody$inboundSchema;
  /** @deprecated use `CreateEdgeConfigResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateEdgeConfigResponseBody$outboundSchema;
  /** @deprecated use `CreateEdgeConfigResponseBody$Outbound` instead. */
  export type Outbound = CreateEdgeConfigResponseBody$Outbound;
}

export function createEdgeConfigResponseBodyToJSON(
  createEdgeConfigResponseBody: CreateEdgeConfigResponseBody,
): string {
  return JSON.stringify(
    CreateEdgeConfigResponseBody$outboundSchema.parse(
      createEdgeConfigResponseBody,
    ),
  );
}

export function createEdgeConfigResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateEdgeConfigResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateEdgeConfigResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateEdgeConfigResponseBody' from JSON`,
  );
}
