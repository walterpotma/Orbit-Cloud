/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AuthToken,
  AuthToken$inboundSchema,
  AuthToken$Outbound,
  AuthToken$outboundSchema,
} from "./authtoken.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetAuthTokenRequest = {
  /**
   * The identifier of the token to retrieve. The special value \"current\" may be supplied, which returns the metadata for the token that the current HTTP request is authenticated with.
   */
  tokenId: string;
};

/**
 * Successful response.
 */
export type GetAuthTokenResponseBody = {
  /**
   * Authentication token metadata.
   */
  token: AuthToken;
};

/** @internal */
export const GetAuthTokenRequest$inboundSchema: z.ZodType<
  GetAuthTokenRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tokenId: z.string(),
});

/** @internal */
export type GetAuthTokenRequest$Outbound = {
  tokenId: string;
};

/** @internal */
export const GetAuthTokenRequest$outboundSchema: z.ZodType<
  GetAuthTokenRequest$Outbound,
  z.ZodTypeDef,
  GetAuthTokenRequest
> = z.object({
  tokenId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAuthTokenRequest$ {
  /** @deprecated use `GetAuthTokenRequest$inboundSchema` instead. */
  export const inboundSchema = GetAuthTokenRequest$inboundSchema;
  /** @deprecated use `GetAuthTokenRequest$outboundSchema` instead. */
  export const outboundSchema = GetAuthTokenRequest$outboundSchema;
  /** @deprecated use `GetAuthTokenRequest$Outbound` instead. */
  export type Outbound = GetAuthTokenRequest$Outbound;
}

export function getAuthTokenRequestToJSON(
  getAuthTokenRequest: GetAuthTokenRequest,
): string {
  return JSON.stringify(
    GetAuthTokenRequest$outboundSchema.parse(getAuthTokenRequest),
  );
}

export function getAuthTokenRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAuthTokenRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAuthTokenRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAuthTokenRequest' from JSON`,
  );
}

/** @internal */
export const GetAuthTokenResponseBody$inboundSchema: z.ZodType<
  GetAuthTokenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: AuthToken$inboundSchema,
});

/** @internal */
export type GetAuthTokenResponseBody$Outbound = {
  token: AuthToken$Outbound;
};

/** @internal */
export const GetAuthTokenResponseBody$outboundSchema: z.ZodType<
  GetAuthTokenResponseBody$Outbound,
  z.ZodTypeDef,
  GetAuthTokenResponseBody
> = z.object({
  token: AuthToken$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAuthTokenResponseBody$ {
  /** @deprecated use `GetAuthTokenResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetAuthTokenResponseBody$inboundSchema;
  /** @deprecated use `GetAuthTokenResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetAuthTokenResponseBody$outboundSchema;
  /** @deprecated use `GetAuthTokenResponseBody$Outbound` instead. */
  export type Outbound = GetAuthTokenResponseBody$Outbound;
}

export function getAuthTokenResponseBodyToJSON(
  getAuthTokenResponseBody: GetAuthTokenResponseBody,
): string {
  return JSON.stringify(
    GetAuthTokenResponseBody$outboundSchema.parse(getAuthTokenResponseBody),
  );
}

export function getAuthTokenResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetAuthTokenResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAuthTokenResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAuthTokenResponseBody' from JSON`,
  );
}
