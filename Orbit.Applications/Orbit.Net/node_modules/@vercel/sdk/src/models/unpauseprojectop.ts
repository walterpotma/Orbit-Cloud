/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type UnpauseProjectRequest = {
  /**
   * The unique project identifier
   */
  projectId: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
};

/** @internal */
export const UnpauseProjectRequest$inboundSchema: z.ZodType<
  UnpauseProjectRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectId: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/** @internal */
export type UnpauseProjectRequest$Outbound = {
  projectId: string;
  teamId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const UnpauseProjectRequest$outboundSchema: z.ZodType<
  UnpauseProjectRequest$Outbound,
  z.ZodTypeDef,
  UnpauseProjectRequest
> = z.object({
  projectId: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnpauseProjectRequest$ {
  /** @deprecated use `UnpauseProjectRequest$inboundSchema` instead. */
  export const inboundSchema = UnpauseProjectRequest$inboundSchema;
  /** @deprecated use `UnpauseProjectRequest$outboundSchema` instead. */
  export const outboundSchema = UnpauseProjectRequest$outboundSchema;
  /** @deprecated use `UnpauseProjectRequest$Outbound` instead. */
  export type Outbound = UnpauseProjectRequest$Outbound;
}

export function unpauseProjectRequestToJSON(
  unpauseProjectRequest: UnpauseProjectRequest,
): string {
  return JSON.stringify(
    UnpauseProjectRequest$outboundSchema.parse(unpauseProjectRequest),
  );
}

export function unpauseProjectRequestFromJSON(
  jsonString: string,
): SafeParseResult<UnpauseProjectRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnpauseProjectRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnpauseProjectRequest' from JSON`,
  );
}
