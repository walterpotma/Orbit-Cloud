/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansRequest =
  {
    integrationIdOrSlug: string;
    productIdOrSlug: string;
    metadata?: string | undefined;
  };

export const GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansType =
  {
    Prepayment: "prepayment",
    Subscription: "subscription",
  } as const;
export type GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansType =
  ClosedEnum<
    typeof GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansType
  >;

export const GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansScope =
  {
    Installation: "installation",
    Resource: "resource",
  } as const;
export type GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansScope =
  ClosedEnum<
    typeof GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansScope
  >;

export type GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansDetails =
  {
    label: string;
    value?: string | undefined;
  };

export type HighlightedDetails = {
  label: string;
  value?: string | undefined;
};

export type Quote = {
  line: string;
  amount: string;
};

export type Plans = {
  type:
    GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansType;
  id: string;
  name: string;
  scope:
    GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansScope;
  description: string;
  paymentMethodRequired: boolean;
  preauthorizationAmount?: number | undefined;
  initialCharge?: string | undefined;
  minimumAmount?: string | undefined;
  maximumAmount?: string | undefined;
  maximumAmountAutoPurchasePerPeriod?: string | undefined;
  cost?: string | undefined;
  details?:
    | Array<
      GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansDetails
    >
    | undefined;
  highlightedDetails?: Array<HighlightedDetails> | undefined;
  quote?: Array<Quote> | undefined;
  effectiveDate?: string | undefined;
  disabled?: boolean | undefined;
};

export type GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansResponseBody =
  {
    plans: Array<Plans>;
  };

/** @internal */
export const GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansRequest$inboundSchema:
  z.ZodType<
    GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    integrationIdOrSlug: z.string(),
    productIdOrSlug: z.string(),
    metadata: z.string().optional(),
  });

/** @internal */
export type GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansRequest$Outbound =
  {
    integrationIdOrSlug: string;
    productIdOrSlug: string;
    metadata?: string | undefined;
  };

/** @internal */
export const GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansRequest$outboundSchema:
  z.ZodType<
    GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansRequest$Outbound,
    z.ZodTypeDef,
    GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansRequest
  > = z.object({
    integrationIdOrSlug: z.string(),
    productIdOrSlug: z.string(),
    metadata: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansRequest$ {
  /** @deprecated use `GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansRequest$inboundSchema;
  /** @deprecated use `GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansRequest$outboundSchema;
  /** @deprecated use `GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansRequest$Outbound` instead. */
  export type Outbound =
    GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansRequest$Outbound;
}

export function getV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansRequestToJSON(
  getV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansRequest:
    GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansRequest,
): string {
  return JSON.stringify(
    GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansRequest$outboundSchema
      .parse(
        getV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansRequest,
      ),
  );
}

export function getV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansRequest' from JSON`,
  );
}

/** @internal */
export const GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansType
  > = z.nativeEnum(
    GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansType,
  );

/** @internal */
export const GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansType
  > =
    GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansType$ {
  /** @deprecated use `GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansType$inboundSchema` instead. */
  export const inboundSchema =
    GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansType$inboundSchema;
  /** @deprecated use `GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansType$outboundSchema` instead. */
  export const outboundSchema =
    GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansType$outboundSchema;
}

/** @internal */
export const GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansScope$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansScope
  > = z.nativeEnum(
    GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansScope,
  );

/** @internal */
export const GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansScope$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansScope
  > =
    GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansScope$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansScope$ {
  /** @deprecated use `GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansScope$inboundSchema` instead. */
  export const inboundSchema =
    GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansScope$inboundSchema;
  /** @deprecated use `GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansScope$outboundSchema` instead. */
  export const outboundSchema =
    GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansScope$outboundSchema;
}

/** @internal */
export const GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansDetails$inboundSchema:
  z.ZodType<
    GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string(),
    value: z.string().optional(),
  });

/** @internal */
export type GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansDetails$Outbound =
  {
    label: string;
    value?: string | undefined;
  };

/** @internal */
export const GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansDetails$outboundSchema:
  z.ZodType<
    GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansDetails$Outbound,
    z.ZodTypeDef,
    GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansDetails
  > = z.object({
    label: z.string(),
    value: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansDetails$ {
  /** @deprecated use `GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansDetails$inboundSchema` instead. */
  export const inboundSchema =
    GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansDetails$inboundSchema;
  /** @deprecated use `GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansDetails$outboundSchema` instead. */
  export const outboundSchema =
    GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansDetails$outboundSchema;
  /** @deprecated use `GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansDetails$Outbound` instead. */
  export type Outbound =
    GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansDetails$Outbound;
}

export function getV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansDetailsToJSON(
  getV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansDetails:
    GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansDetails,
): string {
  return JSON.stringify(
    GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansDetails$outboundSchema
      .parse(
        getV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansDetails,
      ),
  );
}

export function getV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansDetails$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansDetails' from JSON`,
  );
}

/** @internal */
export const HighlightedDetails$inboundSchema: z.ZodType<
  HighlightedDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string(),
  value: z.string().optional(),
});

/** @internal */
export type HighlightedDetails$Outbound = {
  label: string;
  value?: string | undefined;
};

/** @internal */
export const HighlightedDetails$outboundSchema: z.ZodType<
  HighlightedDetails$Outbound,
  z.ZodTypeDef,
  HighlightedDetails
> = z.object({
  label: z.string(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HighlightedDetails$ {
  /** @deprecated use `HighlightedDetails$inboundSchema` instead. */
  export const inboundSchema = HighlightedDetails$inboundSchema;
  /** @deprecated use `HighlightedDetails$outboundSchema` instead. */
  export const outboundSchema = HighlightedDetails$outboundSchema;
  /** @deprecated use `HighlightedDetails$Outbound` instead. */
  export type Outbound = HighlightedDetails$Outbound;
}

export function highlightedDetailsToJSON(
  highlightedDetails: HighlightedDetails,
): string {
  return JSON.stringify(
    HighlightedDetails$outboundSchema.parse(highlightedDetails),
  );
}

export function highlightedDetailsFromJSON(
  jsonString: string,
): SafeParseResult<HighlightedDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HighlightedDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HighlightedDetails' from JSON`,
  );
}

/** @internal */
export const Quote$inboundSchema: z.ZodType<Quote, z.ZodTypeDef, unknown> = z
  .object({
    line: z.string(),
    amount: z.string(),
  });

/** @internal */
export type Quote$Outbound = {
  line: string;
  amount: string;
};

/** @internal */
export const Quote$outboundSchema: z.ZodType<
  Quote$Outbound,
  z.ZodTypeDef,
  Quote
> = z.object({
  line: z.string(),
  amount: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Quote$ {
  /** @deprecated use `Quote$inboundSchema` instead. */
  export const inboundSchema = Quote$inboundSchema;
  /** @deprecated use `Quote$outboundSchema` instead. */
  export const outboundSchema = Quote$outboundSchema;
  /** @deprecated use `Quote$Outbound` instead. */
  export type Outbound = Quote$Outbound;
}

export function quoteToJSON(quote: Quote): string {
  return JSON.stringify(Quote$outboundSchema.parse(quote));
}

export function quoteFromJSON(
  jsonString: string,
): SafeParseResult<Quote, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Quote$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Quote' from JSON`,
  );
}

/** @internal */
export const Plans$inboundSchema: z.ZodType<Plans, z.ZodTypeDef, unknown> = z
  .object({
    type:
      GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansType$inboundSchema,
    id: z.string(),
    name: z.string(),
    scope:
      GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansScope$inboundSchema,
    description: z.string(),
    paymentMethodRequired: z.boolean(),
    preauthorizationAmount: z.number().optional(),
    initialCharge: z.string().optional(),
    minimumAmount: z.string().optional(),
    maximumAmount: z.string().optional(),
    maximumAmountAutoPurchasePerPeriod: z.string().optional(),
    cost: z.string().optional(),
    details: z.array(
      z.lazy(() =>
        GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansDetails$inboundSchema
      ),
    ).optional(),
    highlightedDetails: z.array(z.lazy(() => HighlightedDetails$inboundSchema))
      .optional(),
    quote: z.array(z.lazy(() => Quote$inboundSchema)).optional(),
    effectiveDate: z.string().optional(),
    disabled: z.boolean().optional(),
  });

/** @internal */
export type Plans$Outbound = {
  type: string;
  id: string;
  name: string;
  scope: string;
  description: string;
  paymentMethodRequired: boolean;
  preauthorizationAmount?: number | undefined;
  initialCharge?: string | undefined;
  minimumAmount?: string | undefined;
  maximumAmount?: string | undefined;
  maximumAmountAutoPurchasePerPeriod?: string | undefined;
  cost?: string | undefined;
  details?:
    | Array<
      GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansDetails$Outbound
    >
    | undefined;
  highlightedDetails?: Array<HighlightedDetails$Outbound> | undefined;
  quote?: Array<Quote$Outbound> | undefined;
  effectiveDate?: string | undefined;
  disabled?: boolean | undefined;
};

/** @internal */
export const Plans$outboundSchema: z.ZodType<
  Plans$Outbound,
  z.ZodTypeDef,
  Plans
> = z.object({
  type:
    GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansType$outboundSchema,
  id: z.string(),
  name: z.string(),
  scope:
    GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansScope$outboundSchema,
  description: z.string(),
  paymentMethodRequired: z.boolean(),
  preauthorizationAmount: z.number().optional(),
  initialCharge: z.string().optional(),
  minimumAmount: z.string().optional(),
  maximumAmount: z.string().optional(),
  maximumAmountAutoPurchasePerPeriod: z.string().optional(),
  cost: z.string().optional(),
  details: z.array(
    z.lazy(() =>
      GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansDetails$outboundSchema
    ),
  ).optional(),
  highlightedDetails: z.array(z.lazy(() => HighlightedDetails$outboundSchema))
    .optional(),
  quote: z.array(z.lazy(() => Quote$outboundSchema)).optional(),
  effectiveDate: z.string().optional(),
  disabled: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Plans$ {
  /** @deprecated use `Plans$inboundSchema` instead. */
  export const inboundSchema = Plans$inboundSchema;
  /** @deprecated use `Plans$outboundSchema` instead. */
  export const outboundSchema = Plans$outboundSchema;
  /** @deprecated use `Plans$Outbound` instead. */
  export type Outbound = Plans$Outbound;
}

export function plansToJSON(plans: Plans): string {
  return JSON.stringify(Plans$outboundSchema.parse(plans));
}

export function plansFromJSON(
  jsonString: string,
): SafeParseResult<Plans, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Plans$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Plans' from JSON`,
  );
}

/** @internal */
export const GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansResponseBody$inboundSchema:
  z.ZodType<
    GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    plans: z.array(z.lazy(() => Plans$inboundSchema)),
  });

/** @internal */
export type GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansResponseBody$Outbound =
  {
    plans: Array<Plans$Outbound>;
  };

/** @internal */
export const GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansResponseBody$outboundSchema:
  z.ZodType<
    GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansResponseBody$Outbound,
    z.ZodTypeDef,
    GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansResponseBody
  > = z.object({
    plans: z.array(z.lazy(() => Plans$outboundSchema)),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansResponseBody$ {
  /** @deprecated use `GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansResponseBody$inboundSchema;
  /** @deprecated use `GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansResponseBody$outboundSchema;
  /** @deprecated use `GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansResponseBody$Outbound` instead. */
  export type Outbound =
    GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansResponseBody$Outbound;
}

export function getV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansResponseBodyToJSON(
  getV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansResponseBody:
    GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansResponseBody,
): string {
  return JSON.stringify(
    GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansResponseBody$outboundSchema
      .parse(
        getV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansResponseBody,
      ),
  );
}

export function getV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansResponseBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV1IntegrationsIntegrationIntegrationIdOrSlugProductsProductIdOrSlugPlansResponseBody' from JSON`,
  );
}
