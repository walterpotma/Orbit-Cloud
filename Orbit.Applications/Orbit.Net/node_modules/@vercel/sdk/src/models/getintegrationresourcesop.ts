/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetIntegrationResourcesRequest = {
  integrationConfigurationId: string;
};

/**
 * The current status of the resource
 */
export const GetIntegrationResourcesStatus = {
  Ready: "ready",
  Pending: "pending",
  Suspended: "suspended",
  Resumed: "resumed",
  Uninstalled: "uninstalled",
  Error: "error",
} as const;
/**
 * The current status of the resource
 */
export type GetIntegrationResourcesStatus = ClosedEnum<
  typeof GetIntegrationResourcesStatus
>;

export type GetIntegrationResourcesExperimentation = {
  edgeConfigSyncingEnabled?: boolean | undefined;
  edgeConfigId?: string | undefined;
  edgeConfigTokenId?: string | undefined;
};

/**
 * Any settings provided for the resource to support its product's protocols
 */
export type GetIntegrationResourcesProtocolSettings = {
  experimentation?: GetIntegrationResourcesExperimentation | undefined;
};

export const GetIntegrationResourcesLevel = {
  Error: "error",
  Info: "info",
  Warn: "warn",
} as const;
export type GetIntegrationResourcesLevel = ClosedEnum<
  typeof GetIntegrationResourcesLevel
>;

/**
 * The notification, if set, displayed to the user when viewing the resource in Vercel
 */
export type GetIntegrationResourcesNotification = {
  level: GetIntegrationResourcesLevel;
  title: string;
  message?: string | undefined;
  href?: string | undefined;
};

export type GetIntegrationResourcesMetadata =
  | string
  | number
  | boolean
  | Array<string>
  | Array<number>;

export type Resources = {
  /**
   * The ID provided by the partner for the given resource
   */
  partnerId: string;
  /**
   * The ID assigned by Vercel for the given resource
   */
  internalId: string;
  /**
   * The name of the resource as it is recorded in Vercel
   */
  name: string;
  /**
   * The current status of the resource
   */
  status?: GetIntegrationResourcesStatus | undefined;
  /**
   * The ID of the product the resource is derived from
   */
  productId: string;
  /**
   * Any settings provided for the resource to support its product's protocols
   */
  protocolSettings?: GetIntegrationResourcesProtocolSettings | undefined;
  /**
   * The notification, if set, displayed to the user when viewing the resource in Vercel
   */
  notification?: GetIntegrationResourcesNotification | undefined;
  /**
   * The ID of the billing plan the resource is subscribed to, if applicable
   */
  billingPlanId?: string | undefined;
  /**
   * The configured metadata for the resource as defined by its product's Metadata Schema
   */
  metadata?: {
    [k: string]: string | number | boolean | Array<string> | Array<number>;
  } | undefined;
};

export type GetIntegrationResourcesResponseBody = {
  resources: Array<Resources>;
};

/** @internal */
export const GetIntegrationResourcesRequest$inboundSchema: z.ZodType<
  GetIntegrationResourcesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  integrationConfigurationId: z.string(),
});

/** @internal */
export type GetIntegrationResourcesRequest$Outbound = {
  integrationConfigurationId: string;
};

/** @internal */
export const GetIntegrationResourcesRequest$outboundSchema: z.ZodType<
  GetIntegrationResourcesRequest$Outbound,
  z.ZodTypeDef,
  GetIntegrationResourcesRequest
> = z.object({
  integrationConfigurationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIntegrationResourcesRequest$ {
  /** @deprecated use `GetIntegrationResourcesRequest$inboundSchema` instead. */
  export const inboundSchema = GetIntegrationResourcesRequest$inboundSchema;
  /** @deprecated use `GetIntegrationResourcesRequest$outboundSchema` instead. */
  export const outboundSchema = GetIntegrationResourcesRequest$outboundSchema;
  /** @deprecated use `GetIntegrationResourcesRequest$Outbound` instead. */
  export type Outbound = GetIntegrationResourcesRequest$Outbound;
}

export function getIntegrationResourcesRequestToJSON(
  getIntegrationResourcesRequest: GetIntegrationResourcesRequest,
): string {
  return JSON.stringify(
    GetIntegrationResourcesRequest$outboundSchema.parse(
      getIntegrationResourcesRequest,
    ),
  );
}

export function getIntegrationResourcesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetIntegrationResourcesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetIntegrationResourcesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetIntegrationResourcesRequest' from JSON`,
  );
}

/** @internal */
export const GetIntegrationResourcesStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetIntegrationResourcesStatus
> = z.nativeEnum(GetIntegrationResourcesStatus);

/** @internal */
export const GetIntegrationResourcesStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetIntegrationResourcesStatus
> = GetIntegrationResourcesStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIntegrationResourcesStatus$ {
  /** @deprecated use `GetIntegrationResourcesStatus$inboundSchema` instead. */
  export const inboundSchema = GetIntegrationResourcesStatus$inboundSchema;
  /** @deprecated use `GetIntegrationResourcesStatus$outboundSchema` instead. */
  export const outboundSchema = GetIntegrationResourcesStatus$outboundSchema;
}

/** @internal */
export const GetIntegrationResourcesExperimentation$inboundSchema: z.ZodType<
  GetIntegrationResourcesExperimentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  edgeConfigSyncingEnabled: z.boolean().optional(),
  edgeConfigId: z.string().optional(),
  edgeConfigTokenId: z.string().optional(),
});

/** @internal */
export type GetIntegrationResourcesExperimentation$Outbound = {
  edgeConfigSyncingEnabled?: boolean | undefined;
  edgeConfigId?: string | undefined;
  edgeConfigTokenId?: string | undefined;
};

/** @internal */
export const GetIntegrationResourcesExperimentation$outboundSchema: z.ZodType<
  GetIntegrationResourcesExperimentation$Outbound,
  z.ZodTypeDef,
  GetIntegrationResourcesExperimentation
> = z.object({
  edgeConfigSyncingEnabled: z.boolean().optional(),
  edgeConfigId: z.string().optional(),
  edgeConfigTokenId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIntegrationResourcesExperimentation$ {
  /** @deprecated use `GetIntegrationResourcesExperimentation$inboundSchema` instead. */
  export const inboundSchema =
    GetIntegrationResourcesExperimentation$inboundSchema;
  /** @deprecated use `GetIntegrationResourcesExperimentation$outboundSchema` instead. */
  export const outboundSchema =
    GetIntegrationResourcesExperimentation$outboundSchema;
  /** @deprecated use `GetIntegrationResourcesExperimentation$Outbound` instead. */
  export type Outbound = GetIntegrationResourcesExperimentation$Outbound;
}

export function getIntegrationResourcesExperimentationToJSON(
  getIntegrationResourcesExperimentation:
    GetIntegrationResourcesExperimentation,
): string {
  return JSON.stringify(
    GetIntegrationResourcesExperimentation$outboundSchema.parse(
      getIntegrationResourcesExperimentation,
    ),
  );
}

export function getIntegrationResourcesExperimentationFromJSON(
  jsonString: string,
): SafeParseResult<GetIntegrationResourcesExperimentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetIntegrationResourcesExperimentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetIntegrationResourcesExperimentation' from JSON`,
  );
}

/** @internal */
export const GetIntegrationResourcesProtocolSettings$inboundSchema: z.ZodType<
  GetIntegrationResourcesProtocolSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  experimentation: z.lazy(() =>
    GetIntegrationResourcesExperimentation$inboundSchema
  ).optional(),
});

/** @internal */
export type GetIntegrationResourcesProtocolSettings$Outbound = {
  experimentation?: GetIntegrationResourcesExperimentation$Outbound | undefined;
};

/** @internal */
export const GetIntegrationResourcesProtocolSettings$outboundSchema: z.ZodType<
  GetIntegrationResourcesProtocolSettings$Outbound,
  z.ZodTypeDef,
  GetIntegrationResourcesProtocolSettings
> = z.object({
  experimentation: z.lazy(() =>
    GetIntegrationResourcesExperimentation$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIntegrationResourcesProtocolSettings$ {
  /** @deprecated use `GetIntegrationResourcesProtocolSettings$inboundSchema` instead. */
  export const inboundSchema =
    GetIntegrationResourcesProtocolSettings$inboundSchema;
  /** @deprecated use `GetIntegrationResourcesProtocolSettings$outboundSchema` instead. */
  export const outboundSchema =
    GetIntegrationResourcesProtocolSettings$outboundSchema;
  /** @deprecated use `GetIntegrationResourcesProtocolSettings$Outbound` instead. */
  export type Outbound = GetIntegrationResourcesProtocolSettings$Outbound;
}

export function getIntegrationResourcesProtocolSettingsToJSON(
  getIntegrationResourcesProtocolSettings:
    GetIntegrationResourcesProtocolSettings,
): string {
  return JSON.stringify(
    GetIntegrationResourcesProtocolSettings$outboundSchema.parse(
      getIntegrationResourcesProtocolSettings,
    ),
  );
}

export function getIntegrationResourcesProtocolSettingsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetIntegrationResourcesProtocolSettings,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetIntegrationResourcesProtocolSettings$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetIntegrationResourcesProtocolSettings' from JSON`,
  );
}

/** @internal */
export const GetIntegrationResourcesLevel$inboundSchema: z.ZodNativeEnum<
  typeof GetIntegrationResourcesLevel
> = z.nativeEnum(GetIntegrationResourcesLevel);

/** @internal */
export const GetIntegrationResourcesLevel$outboundSchema: z.ZodNativeEnum<
  typeof GetIntegrationResourcesLevel
> = GetIntegrationResourcesLevel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIntegrationResourcesLevel$ {
  /** @deprecated use `GetIntegrationResourcesLevel$inboundSchema` instead. */
  export const inboundSchema = GetIntegrationResourcesLevel$inboundSchema;
  /** @deprecated use `GetIntegrationResourcesLevel$outboundSchema` instead. */
  export const outboundSchema = GetIntegrationResourcesLevel$outboundSchema;
}

/** @internal */
export const GetIntegrationResourcesNotification$inboundSchema: z.ZodType<
  GetIntegrationResourcesNotification,
  z.ZodTypeDef,
  unknown
> = z.object({
  level: GetIntegrationResourcesLevel$inboundSchema,
  title: z.string(),
  message: z.string().optional(),
  href: z.string().optional(),
});

/** @internal */
export type GetIntegrationResourcesNotification$Outbound = {
  level: string;
  title: string;
  message?: string | undefined;
  href?: string | undefined;
};

/** @internal */
export const GetIntegrationResourcesNotification$outboundSchema: z.ZodType<
  GetIntegrationResourcesNotification$Outbound,
  z.ZodTypeDef,
  GetIntegrationResourcesNotification
> = z.object({
  level: GetIntegrationResourcesLevel$outboundSchema,
  title: z.string(),
  message: z.string().optional(),
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIntegrationResourcesNotification$ {
  /** @deprecated use `GetIntegrationResourcesNotification$inboundSchema` instead. */
  export const inboundSchema =
    GetIntegrationResourcesNotification$inboundSchema;
  /** @deprecated use `GetIntegrationResourcesNotification$outboundSchema` instead. */
  export const outboundSchema =
    GetIntegrationResourcesNotification$outboundSchema;
  /** @deprecated use `GetIntegrationResourcesNotification$Outbound` instead. */
  export type Outbound = GetIntegrationResourcesNotification$Outbound;
}

export function getIntegrationResourcesNotificationToJSON(
  getIntegrationResourcesNotification: GetIntegrationResourcesNotification,
): string {
  return JSON.stringify(
    GetIntegrationResourcesNotification$outboundSchema.parse(
      getIntegrationResourcesNotification,
    ),
  );
}

export function getIntegrationResourcesNotificationFromJSON(
  jsonString: string,
): SafeParseResult<GetIntegrationResourcesNotification, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetIntegrationResourcesNotification$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetIntegrationResourcesNotification' from JSON`,
  );
}

/** @internal */
export const GetIntegrationResourcesMetadata$inboundSchema: z.ZodType<
  GetIntegrationResourcesMetadata,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.number()),
]);

/** @internal */
export type GetIntegrationResourcesMetadata$Outbound =
  | string
  | number
  | boolean
  | Array<string>
  | Array<number>;

/** @internal */
export const GetIntegrationResourcesMetadata$outboundSchema: z.ZodType<
  GetIntegrationResourcesMetadata$Outbound,
  z.ZodTypeDef,
  GetIntegrationResourcesMetadata
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.number()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIntegrationResourcesMetadata$ {
  /** @deprecated use `GetIntegrationResourcesMetadata$inboundSchema` instead. */
  export const inboundSchema = GetIntegrationResourcesMetadata$inboundSchema;
  /** @deprecated use `GetIntegrationResourcesMetadata$outboundSchema` instead. */
  export const outboundSchema = GetIntegrationResourcesMetadata$outboundSchema;
  /** @deprecated use `GetIntegrationResourcesMetadata$Outbound` instead. */
  export type Outbound = GetIntegrationResourcesMetadata$Outbound;
}

export function getIntegrationResourcesMetadataToJSON(
  getIntegrationResourcesMetadata: GetIntegrationResourcesMetadata,
): string {
  return JSON.stringify(
    GetIntegrationResourcesMetadata$outboundSchema.parse(
      getIntegrationResourcesMetadata,
    ),
  );
}

export function getIntegrationResourcesMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetIntegrationResourcesMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetIntegrationResourcesMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetIntegrationResourcesMetadata' from JSON`,
  );
}

/** @internal */
export const Resources$inboundSchema: z.ZodType<
  Resources,
  z.ZodTypeDef,
  unknown
> = z.object({
  partnerId: z.string(),
  internalId: z.string(),
  name: z.string(),
  status: GetIntegrationResourcesStatus$inboundSchema.optional(),
  productId: z.string(),
  protocolSettings: z.lazy(() =>
    GetIntegrationResourcesProtocolSettings$inboundSchema
  ).optional(),
  notification: z.lazy(() => GetIntegrationResourcesNotification$inboundSchema)
    .optional(),
  billingPlanId: z.string().optional(),
  metadata: z.record(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.number()),
    ]),
  ).optional(),
});

/** @internal */
export type Resources$Outbound = {
  partnerId: string;
  internalId: string;
  name: string;
  status?: string | undefined;
  productId: string;
  protocolSettings?:
    | GetIntegrationResourcesProtocolSettings$Outbound
    | undefined;
  notification?: GetIntegrationResourcesNotification$Outbound | undefined;
  billingPlanId?: string | undefined;
  metadata?: {
    [k: string]: string | number | boolean | Array<string> | Array<number>;
  } | undefined;
};

/** @internal */
export const Resources$outboundSchema: z.ZodType<
  Resources$Outbound,
  z.ZodTypeDef,
  Resources
> = z.object({
  partnerId: z.string(),
  internalId: z.string(),
  name: z.string(),
  status: GetIntegrationResourcesStatus$outboundSchema.optional(),
  productId: z.string(),
  protocolSettings: z.lazy(() =>
    GetIntegrationResourcesProtocolSettings$outboundSchema
  ).optional(),
  notification: z.lazy(() => GetIntegrationResourcesNotification$outboundSchema)
    .optional(),
  billingPlanId: z.string().optional(),
  metadata: z.record(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.number()),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Resources$ {
  /** @deprecated use `Resources$inboundSchema` instead. */
  export const inboundSchema = Resources$inboundSchema;
  /** @deprecated use `Resources$outboundSchema` instead. */
  export const outboundSchema = Resources$outboundSchema;
  /** @deprecated use `Resources$Outbound` instead. */
  export type Outbound = Resources$Outbound;
}

export function resourcesToJSON(resources: Resources): string {
  return JSON.stringify(Resources$outboundSchema.parse(resources));
}

export function resourcesFromJSON(
  jsonString: string,
): SafeParseResult<Resources, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Resources$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Resources' from JSON`,
  );
}

/** @internal */
export const GetIntegrationResourcesResponseBody$inboundSchema: z.ZodType<
  GetIntegrationResourcesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  resources: z.array(z.lazy(() => Resources$inboundSchema)),
});

/** @internal */
export type GetIntegrationResourcesResponseBody$Outbound = {
  resources: Array<Resources$Outbound>;
};

/** @internal */
export const GetIntegrationResourcesResponseBody$outboundSchema: z.ZodType<
  GetIntegrationResourcesResponseBody$Outbound,
  z.ZodTypeDef,
  GetIntegrationResourcesResponseBody
> = z.object({
  resources: z.array(z.lazy(() => Resources$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIntegrationResourcesResponseBody$ {
  /** @deprecated use `GetIntegrationResourcesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetIntegrationResourcesResponseBody$inboundSchema;
  /** @deprecated use `GetIntegrationResourcesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetIntegrationResourcesResponseBody$outboundSchema;
  /** @deprecated use `GetIntegrationResourcesResponseBody$Outbound` instead. */
  export type Outbound = GetIntegrationResourcesResponseBody$Outbound;
}

export function getIntegrationResourcesResponseBodyToJSON(
  getIntegrationResourcesResponseBody: GetIntegrationResourcesResponseBody,
): string {
  return JSON.stringify(
    GetIntegrationResourcesResponseBody$outboundSchema.parse(
      getIntegrationResourcesResponseBody,
    ),
  );
}

export function getIntegrationResourcesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetIntegrationResourcesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetIntegrationResourcesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetIntegrationResourcesResponseBody' from JSON`,
  );
}
