/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetInvoiceRequest = {
  integrationConfigurationId: string;
  invoiceId: string;
};

/**
 * Invoice state.
 */
export const GetInvoiceState = {
  Pending: "pending",
  Scheduled: "scheduled",
  Invoiced: "invoiced",
  Paid: "paid",
  Notpaid: "notpaid",
  RefundRequested: "refund_requested",
  Refunded: "refunded",
} as const;
/**
 * Invoice state.
 */
export type GetInvoiceState = ClosedEnum<typeof GetInvoiceState>;

/**
 * Subscription period for this billing cycle. ISO 8601 timestamps.
 */
export type GetInvoicePeriod = {
  start: string;
  end: string;
};

/**
 * Invoice items.
 */
export type GetInvoiceItems = {
  /**
   * Partner's billing plan ID.
   */
  billingPlanId: string;
  /**
   * Partner's resource ID. If not specified, indicates installation-wide item.
   */
  resourceId?: string | undefined;
  /**
   * Start and end are only needed if different from the period's start/end. ISO 8601 timestamp.
   */
  start?: string | undefined;
  /**
   * Start and end are only needed if different from the period's start/end. ISO 8601 timestamp.
   */
  end?: string | undefined;
  /**
   * Invoice item name.
   */
  name: string;
  /**
   * Additional item details.
   */
  details?: string | undefined;
  /**
   * Item price. A dollar-based decimal string.
   */
  price: string;
  /**
   * Item quantity.
   */
  quantity: number;
  /**
   * Units for item's quantity.
   */
  units: string;
  /**
   * Item total. A dollar-based decimal string.
   */
  total: string;
};

/**
 * Invoice discounts.
 */
export type GetInvoiceDiscounts = {
  /**
   * Partner's billing plan ID.
   */
  billingPlanId: string;
  /**
   * Partner's resource ID. If not specified, indicates installation-wide discount.
   */
  resourceId?: string | undefined;
  /**
   * Start and end are only needed if different from the period's start/end. ISO 8601 timestamp.
   */
  start?: string | undefined;
  /**
   * Start and end are only needed if different from the period's start/end. ISO 8601 timestamp.
   */
  end?: string | undefined;
  /**
   * Discount name.
   */
  name: string;
  /**
   * Additional discount details.
   */
  details?: string | undefined;
  /**
   * Discount amount. A dollar-based decimal string.
   */
  amount: string;
};

export type GetInvoiceResponseBody = {
  /**
   * Whether the invoice is in the testmode (no real transaction created).
   */
  test?: boolean | undefined;
  /**
   * Vercel Marketplace Invoice ID.
   */
  invoiceId: string;
  /**
   * Partner-supplied Invoice ID, if applicable.
   */
  externalId?: string | undefined;
  /**
   * Invoice state.
   */
  state: GetInvoiceState;
  /**
   * User-readable invoice number.
   */
  invoiceNumber?: string | undefined;
  /**
   * Invoice date. ISO 8601 timestamp.
   */
  invoiceDate: string;
  /**
   * Subscription period for this billing cycle. ISO 8601 timestamps.
   */
  period: GetInvoicePeriod;
  /**
   * Additional memo for the invoice.
   */
  memo?: string | undefined;
  /**
   * Invoice items.
   */
  items: Array<GetInvoiceItems>;
  /**
   * Invoice discounts.
   */
  discounts?: Array<GetInvoiceDiscounts> | undefined;
  /**
   * Invoice total amount. A dollar-based decimal string.
   */
  total: string;
  /**
   * The reason for refund. Only applicable for states "refunded" or "refund_request".
   */
  refundReason?: string | undefined;
  /**
   * Refund amount. Only applicable for states "refunded" or "refund_request". A dollar-based decimal string.
   */
  refundTotal?: string | undefined;
  /**
   * System creation date. ISO 8601 timestamp.
   */
  created: string;
  /**
   * System update date. ISO 8601 timestamp.
   */
  updated: string;
};

/** @internal */
export const GetInvoiceRequest$inboundSchema: z.ZodType<
  GetInvoiceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  integrationConfigurationId: z.string(),
  invoiceId: z.string(),
});

/** @internal */
export type GetInvoiceRequest$Outbound = {
  integrationConfigurationId: string;
  invoiceId: string;
};

/** @internal */
export const GetInvoiceRequest$outboundSchema: z.ZodType<
  GetInvoiceRequest$Outbound,
  z.ZodTypeDef,
  GetInvoiceRequest
> = z.object({
  integrationConfigurationId: z.string(),
  invoiceId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInvoiceRequest$ {
  /** @deprecated use `GetInvoiceRequest$inboundSchema` instead. */
  export const inboundSchema = GetInvoiceRequest$inboundSchema;
  /** @deprecated use `GetInvoiceRequest$outboundSchema` instead. */
  export const outboundSchema = GetInvoiceRequest$outboundSchema;
  /** @deprecated use `GetInvoiceRequest$Outbound` instead. */
  export type Outbound = GetInvoiceRequest$Outbound;
}

export function getInvoiceRequestToJSON(
  getInvoiceRequest: GetInvoiceRequest,
): string {
  return JSON.stringify(
    GetInvoiceRequest$outboundSchema.parse(getInvoiceRequest),
  );
}

export function getInvoiceRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetInvoiceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInvoiceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInvoiceRequest' from JSON`,
  );
}

/** @internal */
export const GetInvoiceState$inboundSchema: z.ZodNativeEnum<
  typeof GetInvoiceState
> = z.nativeEnum(GetInvoiceState);

/** @internal */
export const GetInvoiceState$outboundSchema: z.ZodNativeEnum<
  typeof GetInvoiceState
> = GetInvoiceState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInvoiceState$ {
  /** @deprecated use `GetInvoiceState$inboundSchema` instead. */
  export const inboundSchema = GetInvoiceState$inboundSchema;
  /** @deprecated use `GetInvoiceState$outboundSchema` instead. */
  export const outboundSchema = GetInvoiceState$outboundSchema;
}

/** @internal */
export const GetInvoicePeriod$inboundSchema: z.ZodType<
  GetInvoicePeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  start: z.string(),
  end: z.string(),
});

/** @internal */
export type GetInvoicePeriod$Outbound = {
  start: string;
  end: string;
};

/** @internal */
export const GetInvoicePeriod$outboundSchema: z.ZodType<
  GetInvoicePeriod$Outbound,
  z.ZodTypeDef,
  GetInvoicePeriod
> = z.object({
  start: z.string(),
  end: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInvoicePeriod$ {
  /** @deprecated use `GetInvoicePeriod$inboundSchema` instead. */
  export const inboundSchema = GetInvoicePeriod$inboundSchema;
  /** @deprecated use `GetInvoicePeriod$outboundSchema` instead. */
  export const outboundSchema = GetInvoicePeriod$outboundSchema;
  /** @deprecated use `GetInvoicePeriod$Outbound` instead. */
  export type Outbound = GetInvoicePeriod$Outbound;
}

export function getInvoicePeriodToJSON(
  getInvoicePeriod: GetInvoicePeriod,
): string {
  return JSON.stringify(
    GetInvoicePeriod$outboundSchema.parse(getInvoicePeriod),
  );
}

export function getInvoicePeriodFromJSON(
  jsonString: string,
): SafeParseResult<GetInvoicePeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInvoicePeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInvoicePeriod' from JSON`,
  );
}

/** @internal */
export const GetInvoiceItems$inboundSchema: z.ZodType<
  GetInvoiceItems,
  z.ZodTypeDef,
  unknown
> = z.object({
  billingPlanId: z.string(),
  resourceId: z.string().optional(),
  start: z.string().optional(),
  end: z.string().optional(),
  name: z.string(),
  details: z.string().optional(),
  price: z.string(),
  quantity: z.number(),
  units: z.string(),
  total: z.string(),
});

/** @internal */
export type GetInvoiceItems$Outbound = {
  billingPlanId: string;
  resourceId?: string | undefined;
  start?: string | undefined;
  end?: string | undefined;
  name: string;
  details?: string | undefined;
  price: string;
  quantity: number;
  units: string;
  total: string;
};

/** @internal */
export const GetInvoiceItems$outboundSchema: z.ZodType<
  GetInvoiceItems$Outbound,
  z.ZodTypeDef,
  GetInvoiceItems
> = z.object({
  billingPlanId: z.string(),
  resourceId: z.string().optional(),
  start: z.string().optional(),
  end: z.string().optional(),
  name: z.string(),
  details: z.string().optional(),
  price: z.string(),
  quantity: z.number(),
  units: z.string(),
  total: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInvoiceItems$ {
  /** @deprecated use `GetInvoiceItems$inboundSchema` instead. */
  export const inboundSchema = GetInvoiceItems$inboundSchema;
  /** @deprecated use `GetInvoiceItems$outboundSchema` instead. */
  export const outboundSchema = GetInvoiceItems$outboundSchema;
  /** @deprecated use `GetInvoiceItems$Outbound` instead. */
  export type Outbound = GetInvoiceItems$Outbound;
}

export function getInvoiceItemsToJSON(
  getInvoiceItems: GetInvoiceItems,
): string {
  return JSON.stringify(GetInvoiceItems$outboundSchema.parse(getInvoiceItems));
}

export function getInvoiceItemsFromJSON(
  jsonString: string,
): SafeParseResult<GetInvoiceItems, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInvoiceItems$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInvoiceItems' from JSON`,
  );
}

/** @internal */
export const GetInvoiceDiscounts$inboundSchema: z.ZodType<
  GetInvoiceDiscounts,
  z.ZodTypeDef,
  unknown
> = z.object({
  billingPlanId: z.string(),
  resourceId: z.string().optional(),
  start: z.string().optional(),
  end: z.string().optional(),
  name: z.string(),
  details: z.string().optional(),
  amount: z.string(),
});

/** @internal */
export type GetInvoiceDiscounts$Outbound = {
  billingPlanId: string;
  resourceId?: string | undefined;
  start?: string | undefined;
  end?: string | undefined;
  name: string;
  details?: string | undefined;
  amount: string;
};

/** @internal */
export const GetInvoiceDiscounts$outboundSchema: z.ZodType<
  GetInvoiceDiscounts$Outbound,
  z.ZodTypeDef,
  GetInvoiceDiscounts
> = z.object({
  billingPlanId: z.string(),
  resourceId: z.string().optional(),
  start: z.string().optional(),
  end: z.string().optional(),
  name: z.string(),
  details: z.string().optional(),
  amount: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInvoiceDiscounts$ {
  /** @deprecated use `GetInvoiceDiscounts$inboundSchema` instead. */
  export const inboundSchema = GetInvoiceDiscounts$inboundSchema;
  /** @deprecated use `GetInvoiceDiscounts$outboundSchema` instead. */
  export const outboundSchema = GetInvoiceDiscounts$outboundSchema;
  /** @deprecated use `GetInvoiceDiscounts$Outbound` instead. */
  export type Outbound = GetInvoiceDiscounts$Outbound;
}

export function getInvoiceDiscountsToJSON(
  getInvoiceDiscounts: GetInvoiceDiscounts,
): string {
  return JSON.stringify(
    GetInvoiceDiscounts$outboundSchema.parse(getInvoiceDiscounts),
  );
}

export function getInvoiceDiscountsFromJSON(
  jsonString: string,
): SafeParseResult<GetInvoiceDiscounts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInvoiceDiscounts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInvoiceDiscounts' from JSON`,
  );
}

/** @internal */
export const GetInvoiceResponseBody$inboundSchema: z.ZodType<
  GetInvoiceResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  test: z.boolean().optional(),
  invoiceId: z.string(),
  externalId: z.string().optional(),
  state: GetInvoiceState$inboundSchema,
  invoiceNumber: z.string().optional(),
  invoiceDate: z.string(),
  period: z.lazy(() => GetInvoicePeriod$inboundSchema),
  memo: z.string().optional(),
  items: z.array(z.lazy(() => GetInvoiceItems$inboundSchema)),
  discounts: z.array(z.lazy(() => GetInvoiceDiscounts$inboundSchema))
    .optional(),
  total: z.string(),
  refundReason: z.string().optional(),
  refundTotal: z.string().optional(),
  created: z.string(),
  updated: z.string(),
});

/** @internal */
export type GetInvoiceResponseBody$Outbound = {
  test?: boolean | undefined;
  invoiceId: string;
  externalId?: string | undefined;
  state: string;
  invoiceNumber?: string | undefined;
  invoiceDate: string;
  period: GetInvoicePeriod$Outbound;
  memo?: string | undefined;
  items: Array<GetInvoiceItems$Outbound>;
  discounts?: Array<GetInvoiceDiscounts$Outbound> | undefined;
  total: string;
  refundReason?: string | undefined;
  refundTotal?: string | undefined;
  created: string;
  updated: string;
};

/** @internal */
export const GetInvoiceResponseBody$outboundSchema: z.ZodType<
  GetInvoiceResponseBody$Outbound,
  z.ZodTypeDef,
  GetInvoiceResponseBody
> = z.object({
  test: z.boolean().optional(),
  invoiceId: z.string(),
  externalId: z.string().optional(),
  state: GetInvoiceState$outboundSchema,
  invoiceNumber: z.string().optional(),
  invoiceDate: z.string(),
  period: z.lazy(() => GetInvoicePeriod$outboundSchema),
  memo: z.string().optional(),
  items: z.array(z.lazy(() => GetInvoiceItems$outboundSchema)),
  discounts: z.array(z.lazy(() => GetInvoiceDiscounts$outboundSchema))
    .optional(),
  total: z.string(),
  refundReason: z.string().optional(),
  refundTotal: z.string().optional(),
  created: z.string(),
  updated: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInvoiceResponseBody$ {
  /** @deprecated use `GetInvoiceResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetInvoiceResponseBody$inboundSchema;
  /** @deprecated use `GetInvoiceResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetInvoiceResponseBody$outboundSchema;
  /** @deprecated use `GetInvoiceResponseBody$Outbound` instead. */
  export type Outbound = GetInvoiceResponseBody$Outbound;
}

export function getInvoiceResponseBodyToJSON(
  getInvoiceResponseBody: GetInvoiceResponseBody,
): string {
  return JSON.stringify(
    GetInvoiceResponseBody$outboundSchema.parse(getInvoiceResponseBody),
  );
}

export function getInvoiceResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetInvoiceResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInvoiceResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInvoiceResponseBody' from JSON`,
  );
}
