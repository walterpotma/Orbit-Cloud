/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * A map of environments to override values for the secret, used for setting different values across deployments in production, preview, and development environments. Note: the same value will be used for all deployments in the given environment.
 */
export type UpdateResourceSecretsByIdEnvironmentOverrides = {
  /**
   * Value used for development environment.
   */
  development?: string | undefined;
  /**
   * Value used for preview environment.
   */
  preview?: string | undefined;
  /**
   * Value used for production environment.
   */
  production?: string | undefined;
};

export type UpdateResourceSecretsByIdSecrets = {
  name: string;
  value: string;
  prefix?: string | undefined;
  /**
   * A map of environments to override values for the secret, used for setting different values across deployments in production, preview, and development environments. Note: the same value will be used for all deployments in the given environment.
   */
  environmentOverrides?:
    | UpdateResourceSecretsByIdEnvironmentOverrides
    | undefined;
};

export type UpdateResourceSecretsByIdRequestBody = {
  secrets: Array<UpdateResourceSecretsByIdSecrets>;
  /**
   * If true, will only overwrite the provided secrets instead of replacing all secrets.
   */
  partial?: boolean | undefined;
};

export type UpdateResourceSecretsByIdRequest = {
  integrationConfigurationId: string;
  resourceId: string;
  requestBody?: UpdateResourceSecretsByIdRequestBody | undefined;
};

/** @internal */
export const UpdateResourceSecretsByIdEnvironmentOverrides$inboundSchema:
  z.ZodType<
    UpdateResourceSecretsByIdEnvironmentOverrides,
    z.ZodTypeDef,
    unknown
  > = z.object({
    development: z.string().optional(),
    preview: z.string().optional(),
    production: z.string().optional(),
  });

/** @internal */
export type UpdateResourceSecretsByIdEnvironmentOverrides$Outbound = {
  development?: string | undefined;
  preview?: string | undefined;
  production?: string | undefined;
};

/** @internal */
export const UpdateResourceSecretsByIdEnvironmentOverrides$outboundSchema:
  z.ZodType<
    UpdateResourceSecretsByIdEnvironmentOverrides$Outbound,
    z.ZodTypeDef,
    UpdateResourceSecretsByIdEnvironmentOverrides
  > = z.object({
    development: z.string().optional(),
    preview: z.string().optional(),
    production: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateResourceSecretsByIdEnvironmentOverrides$ {
  /** @deprecated use `UpdateResourceSecretsByIdEnvironmentOverrides$inboundSchema` instead. */
  export const inboundSchema =
    UpdateResourceSecretsByIdEnvironmentOverrides$inboundSchema;
  /** @deprecated use `UpdateResourceSecretsByIdEnvironmentOverrides$outboundSchema` instead. */
  export const outboundSchema =
    UpdateResourceSecretsByIdEnvironmentOverrides$outboundSchema;
  /** @deprecated use `UpdateResourceSecretsByIdEnvironmentOverrides$Outbound` instead. */
  export type Outbound = UpdateResourceSecretsByIdEnvironmentOverrides$Outbound;
}

export function updateResourceSecretsByIdEnvironmentOverridesToJSON(
  updateResourceSecretsByIdEnvironmentOverrides:
    UpdateResourceSecretsByIdEnvironmentOverrides,
): string {
  return JSON.stringify(
    UpdateResourceSecretsByIdEnvironmentOverrides$outboundSchema.parse(
      updateResourceSecretsByIdEnvironmentOverrides,
    ),
  );
}

export function updateResourceSecretsByIdEnvironmentOverridesFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateResourceSecretsByIdEnvironmentOverrides,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateResourceSecretsByIdEnvironmentOverrides$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateResourceSecretsByIdEnvironmentOverrides' from JSON`,
  );
}

/** @internal */
export const UpdateResourceSecretsByIdSecrets$inboundSchema: z.ZodType<
  UpdateResourceSecretsByIdSecrets,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
  prefix: z.string().optional(),
  environmentOverrides: z.lazy(() =>
    UpdateResourceSecretsByIdEnvironmentOverrides$inboundSchema
  ).optional(),
});

/** @internal */
export type UpdateResourceSecretsByIdSecrets$Outbound = {
  name: string;
  value: string;
  prefix?: string | undefined;
  environmentOverrides?:
    | UpdateResourceSecretsByIdEnvironmentOverrides$Outbound
    | undefined;
};

/** @internal */
export const UpdateResourceSecretsByIdSecrets$outboundSchema: z.ZodType<
  UpdateResourceSecretsByIdSecrets$Outbound,
  z.ZodTypeDef,
  UpdateResourceSecretsByIdSecrets
> = z.object({
  name: z.string(),
  value: z.string(),
  prefix: z.string().optional(),
  environmentOverrides: z.lazy(() =>
    UpdateResourceSecretsByIdEnvironmentOverrides$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateResourceSecretsByIdSecrets$ {
  /** @deprecated use `UpdateResourceSecretsByIdSecrets$inboundSchema` instead. */
  export const inboundSchema = UpdateResourceSecretsByIdSecrets$inboundSchema;
  /** @deprecated use `UpdateResourceSecretsByIdSecrets$outboundSchema` instead. */
  export const outboundSchema = UpdateResourceSecretsByIdSecrets$outboundSchema;
  /** @deprecated use `UpdateResourceSecretsByIdSecrets$Outbound` instead. */
  export type Outbound = UpdateResourceSecretsByIdSecrets$Outbound;
}

export function updateResourceSecretsByIdSecretsToJSON(
  updateResourceSecretsByIdSecrets: UpdateResourceSecretsByIdSecrets,
): string {
  return JSON.stringify(
    UpdateResourceSecretsByIdSecrets$outboundSchema.parse(
      updateResourceSecretsByIdSecrets,
    ),
  );
}

export function updateResourceSecretsByIdSecretsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateResourceSecretsByIdSecrets, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateResourceSecretsByIdSecrets$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateResourceSecretsByIdSecrets' from JSON`,
  );
}

/** @internal */
export const UpdateResourceSecretsByIdRequestBody$inboundSchema: z.ZodType<
  UpdateResourceSecretsByIdRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  secrets: z.array(
    z.lazy(() => UpdateResourceSecretsByIdSecrets$inboundSchema),
  ),
  partial: z.boolean().optional(),
});

/** @internal */
export type UpdateResourceSecretsByIdRequestBody$Outbound = {
  secrets: Array<UpdateResourceSecretsByIdSecrets$Outbound>;
  partial?: boolean | undefined;
};

/** @internal */
export const UpdateResourceSecretsByIdRequestBody$outboundSchema: z.ZodType<
  UpdateResourceSecretsByIdRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateResourceSecretsByIdRequestBody
> = z.object({
  secrets: z.array(
    z.lazy(() => UpdateResourceSecretsByIdSecrets$outboundSchema),
  ),
  partial: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateResourceSecretsByIdRequestBody$ {
  /** @deprecated use `UpdateResourceSecretsByIdRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    UpdateResourceSecretsByIdRequestBody$inboundSchema;
  /** @deprecated use `UpdateResourceSecretsByIdRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateResourceSecretsByIdRequestBody$outboundSchema;
  /** @deprecated use `UpdateResourceSecretsByIdRequestBody$Outbound` instead. */
  export type Outbound = UpdateResourceSecretsByIdRequestBody$Outbound;
}

export function updateResourceSecretsByIdRequestBodyToJSON(
  updateResourceSecretsByIdRequestBody: UpdateResourceSecretsByIdRequestBody,
): string {
  return JSON.stringify(
    UpdateResourceSecretsByIdRequestBody$outboundSchema.parse(
      updateResourceSecretsByIdRequestBody,
    ),
  );
}

export function updateResourceSecretsByIdRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateResourceSecretsByIdRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateResourceSecretsByIdRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateResourceSecretsByIdRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateResourceSecretsByIdRequest$inboundSchema: z.ZodType<
  UpdateResourceSecretsByIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  integrationConfigurationId: z.string(),
  resourceId: z.string(),
  RequestBody: z.lazy(() => UpdateResourceSecretsByIdRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateResourceSecretsByIdRequest$Outbound = {
  integrationConfigurationId: string;
  resourceId: string;
  RequestBody?: UpdateResourceSecretsByIdRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateResourceSecretsByIdRequest$outboundSchema: z.ZodType<
  UpdateResourceSecretsByIdRequest$Outbound,
  z.ZodTypeDef,
  UpdateResourceSecretsByIdRequest
> = z.object({
  integrationConfigurationId: z.string(),
  resourceId: z.string(),
  requestBody: z.lazy(() => UpdateResourceSecretsByIdRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateResourceSecretsByIdRequest$ {
  /** @deprecated use `UpdateResourceSecretsByIdRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateResourceSecretsByIdRequest$inboundSchema;
  /** @deprecated use `UpdateResourceSecretsByIdRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateResourceSecretsByIdRequest$outboundSchema;
  /** @deprecated use `UpdateResourceSecretsByIdRequest$Outbound` instead. */
  export type Outbound = UpdateResourceSecretsByIdRequest$Outbound;
}

export function updateResourceSecretsByIdRequestToJSON(
  updateResourceSecretsByIdRequest: UpdateResourceSecretsByIdRequest,
): string {
  return JSON.stringify(
    UpdateResourceSecretsByIdRequest$outboundSchema.parse(
      updateResourceSecretsByIdRequest,
    ),
  );
}

export function updateResourceSecretsByIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateResourceSecretsByIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateResourceSecretsByIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateResourceSecretsByIdRequest' from JSON`,
  );
}
