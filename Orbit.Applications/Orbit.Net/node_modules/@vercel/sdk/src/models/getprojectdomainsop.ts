/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Pagination,
  Pagination$inboundSchema,
  Pagination$Outbound,
  Pagination$outboundSchema,
} from "./pagination.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Filters only production domains when set to `true`.
 */
export const Production = {
  True: "true",
  False: "false",
} as const;
/**
 * Filters only production domains when set to `true`.
 */
export type Production = ClosedEnum<typeof Production>;

/**
 * Filters on the target of the domain. Can be either \"production\", \"preview\"
 */
export const QueryParamTarget = {
  Production: "production",
  Preview: "preview",
} as const;
/**
 * Filters on the target of the domain. Can be either \"production\", \"preview\"
 */
export type QueryParamTarget = ClosedEnum<typeof QueryParamTarget>;

/**
 * Excludes redirect project domains when \"false\". Includes redirect project domains when \"true\" (default).
 */
export const Redirects = {
  True: "true",
  False: "false",
} as const;
/**
 * Excludes redirect project domains when \"false\". Includes redirect project domains when \"true\" (default).
 */
export type Redirects = ClosedEnum<typeof Redirects>;

/**
 * Filters domains based on their verification status.
 */
export const Verified = {
  True: "true",
  False: "false",
} as const;
/**
 * Filters domains based on their verification status.
 */
export type Verified = ClosedEnum<typeof Verified>;

/**
 * Domains sort order by createdAt
 */
export const Order = {
  Asc: "ASC",
  Desc: "DESC",
} as const;
/**
 * Domains sort order by createdAt
 */
export type Order = ClosedEnum<typeof Order>;

export type GetProjectDomainsRequest = {
  /**
   * The unique project identifier or the project name
   */
  idOrName: string;
  /**
   * Filters only production domains when set to `true`.
   */
  production?: Production | undefined;
  /**
   * Filters on the target of the domain. Can be either \"production\", \"preview\"
   */
  target?: QueryParamTarget | undefined;
  /**
   * The unique custom environment identifier within the project
   */
  customEnvironmentId?: string | undefined;
  /**
   * Filters domains based on specific branch.
   */
  gitBranch?: string | undefined;
  /**
   * Excludes redirect project domains when \"false\". Includes redirect project domains when \"true\" (default).
   */
  redirects?: Redirects | undefined;
  /**
   * Filters domains based on their redirect target.
   */
  redirect?: string | undefined;
  /**
   * Filters domains based on their verification status.
   */
  verified?: Verified | undefined;
  /**
   * Maximum number of domains to list from a request (max 100).
   */
  limit?: number | undefined;
  /**
   * Get domains created after this JavaScript timestamp.
   */
  since?: number | undefined;
  /**
   * Get domains created before this JavaScript timestamp.
   */
  until?: number | undefined;
  /**
   * Domains sort order by createdAt
   */
  order?: Order | undefined;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
};

/**
 * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
 */
export type GetProjectDomainsResponseBodyVerification = {
  type: string;
  domain: string;
  value: string;
  reason: string;
};

export type GetProjectDomainsResponseBodyDomains = {
  name: string;
  apexName: string;
  projectId: string;
  redirect?: string | null | undefined;
  redirectStatusCode?: number | null | undefined;
  gitBranch?: string | null | undefined;
  customEnvironmentId?: string | null | undefined;
  updatedAt?: number | undefined;
  createdAt?: number | undefined;
  /**
   * `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.
   */
  verified: boolean;
  /**
   * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
   */
  verification?: Array<GetProjectDomainsResponseBodyVerification> | undefined;
};

export type GetProjectDomainsResponseBody2 = {
  domains: Array<GetProjectDomainsResponseBodyDomains>;
  /**
   * This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.
   */
  pagination: Pagination;
};

/**
 * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
 */
export type ResponseBodyVerification = {
  type: string;
  domain: string;
  value: string;
  reason: string;
};

export type ResponseBodyDomains = {
  name: string;
  apexName: string;
  projectId: string;
  redirect?: string | null | undefined;
  redirectStatusCode?: number | null | undefined;
  gitBranch?: string | null | undefined;
  customEnvironmentId?: string | null | undefined;
  updatedAt?: number | undefined;
  createdAt?: number | undefined;
  /**
   * `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.
   */
  verified: boolean;
  /**
   * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
   */
  verification?: Array<ResponseBodyVerification> | undefined;
};

export type GetProjectDomainsResponseBodyPagination = {
  count: number;
  next: number | null;
  prev: number | null;
};

export type GetProjectDomainsResponseBody1 = {
  domains: Array<ResponseBodyDomains>;
  pagination: GetProjectDomainsResponseBodyPagination;
};

/**
 * Successful response retrieving a list of domains
 */
export type GetProjectDomainsResponseBody =
  | GetProjectDomainsResponseBody1
  | GetProjectDomainsResponseBody2;

/** @internal */
export const Production$inboundSchema: z.ZodNativeEnum<typeof Production> = z
  .nativeEnum(Production);

/** @internal */
export const Production$outboundSchema: z.ZodNativeEnum<typeof Production> =
  Production$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Production$ {
  /** @deprecated use `Production$inboundSchema` instead. */
  export const inboundSchema = Production$inboundSchema;
  /** @deprecated use `Production$outboundSchema` instead. */
  export const outboundSchema = Production$outboundSchema;
}

/** @internal */
export const QueryParamTarget$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamTarget
> = z.nativeEnum(QueryParamTarget);

/** @internal */
export const QueryParamTarget$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamTarget
> = QueryParamTarget$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamTarget$ {
  /** @deprecated use `QueryParamTarget$inboundSchema` instead. */
  export const inboundSchema = QueryParamTarget$inboundSchema;
  /** @deprecated use `QueryParamTarget$outboundSchema` instead. */
  export const outboundSchema = QueryParamTarget$outboundSchema;
}

/** @internal */
export const Redirects$inboundSchema: z.ZodNativeEnum<typeof Redirects> = z
  .nativeEnum(Redirects);

/** @internal */
export const Redirects$outboundSchema: z.ZodNativeEnum<typeof Redirects> =
  Redirects$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Redirects$ {
  /** @deprecated use `Redirects$inboundSchema` instead. */
  export const inboundSchema = Redirects$inboundSchema;
  /** @deprecated use `Redirects$outboundSchema` instead. */
  export const outboundSchema = Redirects$outboundSchema;
}

/** @internal */
export const Verified$inboundSchema: z.ZodNativeEnum<typeof Verified> = z
  .nativeEnum(Verified);

/** @internal */
export const Verified$outboundSchema: z.ZodNativeEnum<typeof Verified> =
  Verified$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Verified$ {
  /** @deprecated use `Verified$inboundSchema` instead. */
  export const inboundSchema = Verified$inboundSchema;
  /** @deprecated use `Verified$outboundSchema` instead. */
  export const outboundSchema = Verified$outboundSchema;
}

/** @internal */
export const Order$inboundSchema: z.ZodNativeEnum<typeof Order> = z.nativeEnum(
  Order,
);

/** @internal */
export const Order$outboundSchema: z.ZodNativeEnum<typeof Order> =
  Order$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Order$ {
  /** @deprecated use `Order$inboundSchema` instead. */
  export const inboundSchema = Order$inboundSchema;
  /** @deprecated use `Order$outboundSchema` instead. */
  export const outboundSchema = Order$outboundSchema;
}

/** @internal */
export const GetProjectDomainsRequest$inboundSchema: z.ZodType<
  GetProjectDomainsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  idOrName: z.string(),
  production: Production$inboundSchema.default("false"),
  target: QueryParamTarget$inboundSchema.optional(),
  customEnvironmentId: z.string().optional(),
  gitBranch: z.string().optional(),
  redirects: Redirects$inboundSchema.default("true"),
  redirect: z.string().optional(),
  verified: Verified$inboundSchema.optional(),
  limit: z.number().optional(),
  since: z.number().optional(),
  until: z.number().optional(),
  order: Order$inboundSchema.default("DESC"),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/** @internal */
export type GetProjectDomainsRequest$Outbound = {
  idOrName: string;
  production: string;
  target?: string | undefined;
  customEnvironmentId?: string | undefined;
  gitBranch?: string | undefined;
  redirects: string;
  redirect?: string | undefined;
  verified?: string | undefined;
  limit?: number | undefined;
  since?: number | undefined;
  until?: number | undefined;
  order: string;
  teamId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const GetProjectDomainsRequest$outboundSchema: z.ZodType<
  GetProjectDomainsRequest$Outbound,
  z.ZodTypeDef,
  GetProjectDomainsRequest
> = z.object({
  idOrName: z.string(),
  production: Production$outboundSchema.default("false"),
  target: QueryParamTarget$outboundSchema.optional(),
  customEnvironmentId: z.string().optional(),
  gitBranch: z.string().optional(),
  redirects: Redirects$outboundSchema.default("true"),
  redirect: z.string().optional(),
  verified: Verified$outboundSchema.optional(),
  limit: z.number().optional(),
  since: z.number().optional(),
  until: z.number().optional(),
  order: Order$outboundSchema.default("DESC"),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectDomainsRequest$ {
  /** @deprecated use `GetProjectDomainsRequest$inboundSchema` instead. */
  export const inboundSchema = GetProjectDomainsRequest$inboundSchema;
  /** @deprecated use `GetProjectDomainsRequest$outboundSchema` instead. */
  export const outboundSchema = GetProjectDomainsRequest$outboundSchema;
  /** @deprecated use `GetProjectDomainsRequest$Outbound` instead. */
  export type Outbound = GetProjectDomainsRequest$Outbound;
}

export function getProjectDomainsRequestToJSON(
  getProjectDomainsRequest: GetProjectDomainsRequest,
): string {
  return JSON.stringify(
    GetProjectDomainsRequest$outboundSchema.parse(getProjectDomainsRequest),
  );
}

export function getProjectDomainsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetProjectDomainsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProjectDomainsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProjectDomainsRequest' from JSON`,
  );
}

/** @internal */
export const GetProjectDomainsResponseBodyVerification$inboundSchema: z.ZodType<
  GetProjectDomainsResponseBodyVerification,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  domain: z.string(),
  value: z.string(),
  reason: z.string(),
});

/** @internal */
export type GetProjectDomainsResponseBodyVerification$Outbound = {
  type: string;
  domain: string;
  value: string;
  reason: string;
};

/** @internal */
export const GetProjectDomainsResponseBodyVerification$outboundSchema:
  z.ZodType<
    GetProjectDomainsResponseBodyVerification$Outbound,
    z.ZodTypeDef,
    GetProjectDomainsResponseBodyVerification
  > = z.object({
    type: z.string(),
    domain: z.string(),
    value: z.string(),
    reason: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectDomainsResponseBodyVerification$ {
  /** @deprecated use `GetProjectDomainsResponseBodyVerification$inboundSchema` instead. */
  export const inboundSchema =
    GetProjectDomainsResponseBodyVerification$inboundSchema;
  /** @deprecated use `GetProjectDomainsResponseBodyVerification$outboundSchema` instead. */
  export const outboundSchema =
    GetProjectDomainsResponseBodyVerification$outboundSchema;
  /** @deprecated use `GetProjectDomainsResponseBodyVerification$Outbound` instead. */
  export type Outbound = GetProjectDomainsResponseBodyVerification$Outbound;
}

export function getProjectDomainsResponseBodyVerificationToJSON(
  getProjectDomainsResponseBodyVerification:
    GetProjectDomainsResponseBodyVerification,
): string {
  return JSON.stringify(
    GetProjectDomainsResponseBodyVerification$outboundSchema.parse(
      getProjectDomainsResponseBodyVerification,
    ),
  );
}

export function getProjectDomainsResponseBodyVerificationFromJSON(
  jsonString: string,
): SafeParseResult<
  GetProjectDomainsResponseBodyVerification,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetProjectDomainsResponseBodyVerification$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetProjectDomainsResponseBodyVerification' from JSON`,
  );
}

/** @internal */
export const GetProjectDomainsResponseBodyDomains$inboundSchema: z.ZodType<
  GetProjectDomainsResponseBodyDomains,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  apexName: z.string(),
  projectId: z.string(),
  redirect: z.nullable(z.string()).optional(),
  redirectStatusCode: z.nullable(z.number()).optional(),
  gitBranch: z.nullable(z.string()).optional(),
  customEnvironmentId: z.nullable(z.string()).optional(),
  updatedAt: z.number().optional(),
  createdAt: z.number().optional(),
  verified: z.boolean(),
  verification: z.array(
    z.lazy(() => GetProjectDomainsResponseBodyVerification$inboundSchema),
  ).optional(),
});

/** @internal */
export type GetProjectDomainsResponseBodyDomains$Outbound = {
  name: string;
  apexName: string;
  projectId: string;
  redirect?: string | null | undefined;
  redirectStatusCode?: number | null | undefined;
  gitBranch?: string | null | undefined;
  customEnvironmentId?: string | null | undefined;
  updatedAt?: number | undefined;
  createdAt?: number | undefined;
  verified: boolean;
  verification?:
    | Array<GetProjectDomainsResponseBodyVerification$Outbound>
    | undefined;
};

/** @internal */
export const GetProjectDomainsResponseBodyDomains$outboundSchema: z.ZodType<
  GetProjectDomainsResponseBodyDomains$Outbound,
  z.ZodTypeDef,
  GetProjectDomainsResponseBodyDomains
> = z.object({
  name: z.string(),
  apexName: z.string(),
  projectId: z.string(),
  redirect: z.nullable(z.string()).optional(),
  redirectStatusCode: z.nullable(z.number()).optional(),
  gitBranch: z.nullable(z.string()).optional(),
  customEnvironmentId: z.nullable(z.string()).optional(),
  updatedAt: z.number().optional(),
  createdAt: z.number().optional(),
  verified: z.boolean(),
  verification: z.array(
    z.lazy(() => GetProjectDomainsResponseBodyVerification$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectDomainsResponseBodyDomains$ {
  /** @deprecated use `GetProjectDomainsResponseBodyDomains$inboundSchema` instead. */
  export const inboundSchema =
    GetProjectDomainsResponseBodyDomains$inboundSchema;
  /** @deprecated use `GetProjectDomainsResponseBodyDomains$outboundSchema` instead. */
  export const outboundSchema =
    GetProjectDomainsResponseBodyDomains$outboundSchema;
  /** @deprecated use `GetProjectDomainsResponseBodyDomains$Outbound` instead. */
  export type Outbound = GetProjectDomainsResponseBodyDomains$Outbound;
}

export function getProjectDomainsResponseBodyDomainsToJSON(
  getProjectDomainsResponseBodyDomains: GetProjectDomainsResponseBodyDomains,
): string {
  return JSON.stringify(
    GetProjectDomainsResponseBodyDomains$outboundSchema.parse(
      getProjectDomainsResponseBodyDomains,
    ),
  );
}

export function getProjectDomainsResponseBodyDomainsFromJSON(
  jsonString: string,
): SafeParseResult<GetProjectDomainsResponseBodyDomains, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetProjectDomainsResponseBodyDomains$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProjectDomainsResponseBodyDomains' from JSON`,
  );
}

/** @internal */
export const GetProjectDomainsResponseBody2$inboundSchema: z.ZodType<
  GetProjectDomainsResponseBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  domains: z.array(
    z.lazy(() => GetProjectDomainsResponseBodyDomains$inboundSchema),
  ),
  pagination: Pagination$inboundSchema,
});

/** @internal */
export type GetProjectDomainsResponseBody2$Outbound = {
  domains: Array<GetProjectDomainsResponseBodyDomains$Outbound>;
  pagination: Pagination$Outbound;
};

/** @internal */
export const GetProjectDomainsResponseBody2$outboundSchema: z.ZodType<
  GetProjectDomainsResponseBody2$Outbound,
  z.ZodTypeDef,
  GetProjectDomainsResponseBody2
> = z.object({
  domains: z.array(
    z.lazy(() => GetProjectDomainsResponseBodyDomains$outboundSchema),
  ),
  pagination: Pagination$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectDomainsResponseBody2$ {
  /** @deprecated use `GetProjectDomainsResponseBody2$inboundSchema` instead. */
  export const inboundSchema = GetProjectDomainsResponseBody2$inboundSchema;
  /** @deprecated use `GetProjectDomainsResponseBody2$outboundSchema` instead. */
  export const outboundSchema = GetProjectDomainsResponseBody2$outboundSchema;
  /** @deprecated use `GetProjectDomainsResponseBody2$Outbound` instead. */
  export type Outbound = GetProjectDomainsResponseBody2$Outbound;
}

export function getProjectDomainsResponseBody2ToJSON(
  getProjectDomainsResponseBody2: GetProjectDomainsResponseBody2,
): string {
  return JSON.stringify(
    GetProjectDomainsResponseBody2$outboundSchema.parse(
      getProjectDomainsResponseBody2,
    ),
  );
}

export function getProjectDomainsResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<GetProjectDomainsResponseBody2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProjectDomainsResponseBody2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProjectDomainsResponseBody2' from JSON`,
  );
}

/** @internal */
export const ResponseBodyVerification$inboundSchema: z.ZodType<
  ResponseBodyVerification,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  domain: z.string(),
  value: z.string(),
  reason: z.string(),
});

/** @internal */
export type ResponseBodyVerification$Outbound = {
  type: string;
  domain: string;
  value: string;
  reason: string;
};

/** @internal */
export const ResponseBodyVerification$outboundSchema: z.ZodType<
  ResponseBodyVerification$Outbound,
  z.ZodTypeDef,
  ResponseBodyVerification
> = z.object({
  type: z.string(),
  domain: z.string(),
  value: z.string(),
  reason: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyVerification$ {
  /** @deprecated use `ResponseBodyVerification$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyVerification$inboundSchema;
  /** @deprecated use `ResponseBodyVerification$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyVerification$outboundSchema;
  /** @deprecated use `ResponseBodyVerification$Outbound` instead. */
  export type Outbound = ResponseBodyVerification$Outbound;
}

export function responseBodyVerificationToJSON(
  responseBodyVerification: ResponseBodyVerification,
): string {
  return JSON.stringify(
    ResponseBodyVerification$outboundSchema.parse(responseBodyVerification),
  );
}

export function responseBodyVerificationFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyVerification, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyVerification$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyVerification' from JSON`,
  );
}

/** @internal */
export const ResponseBodyDomains$inboundSchema: z.ZodType<
  ResponseBodyDomains,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  apexName: z.string(),
  projectId: z.string(),
  redirect: z.nullable(z.string()).optional(),
  redirectStatusCode: z.nullable(z.number()).optional(),
  gitBranch: z.nullable(z.string()).optional(),
  customEnvironmentId: z.nullable(z.string()).optional(),
  updatedAt: z.number().optional(),
  createdAt: z.number().optional(),
  verified: z.boolean(),
  verification: z.array(z.lazy(() => ResponseBodyVerification$inboundSchema))
    .optional(),
});

/** @internal */
export type ResponseBodyDomains$Outbound = {
  name: string;
  apexName: string;
  projectId: string;
  redirect?: string | null | undefined;
  redirectStatusCode?: number | null | undefined;
  gitBranch?: string | null | undefined;
  customEnvironmentId?: string | null | undefined;
  updatedAt?: number | undefined;
  createdAt?: number | undefined;
  verified: boolean;
  verification?: Array<ResponseBodyVerification$Outbound> | undefined;
};

/** @internal */
export const ResponseBodyDomains$outboundSchema: z.ZodType<
  ResponseBodyDomains$Outbound,
  z.ZodTypeDef,
  ResponseBodyDomains
> = z.object({
  name: z.string(),
  apexName: z.string(),
  projectId: z.string(),
  redirect: z.nullable(z.string()).optional(),
  redirectStatusCode: z.nullable(z.number()).optional(),
  gitBranch: z.nullable(z.string()).optional(),
  customEnvironmentId: z.nullable(z.string()).optional(),
  updatedAt: z.number().optional(),
  createdAt: z.number().optional(),
  verified: z.boolean(),
  verification: z.array(z.lazy(() => ResponseBodyVerification$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyDomains$ {
  /** @deprecated use `ResponseBodyDomains$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyDomains$inboundSchema;
  /** @deprecated use `ResponseBodyDomains$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyDomains$outboundSchema;
  /** @deprecated use `ResponseBodyDomains$Outbound` instead. */
  export type Outbound = ResponseBodyDomains$Outbound;
}

export function responseBodyDomainsToJSON(
  responseBodyDomains: ResponseBodyDomains,
): string {
  return JSON.stringify(
    ResponseBodyDomains$outboundSchema.parse(responseBodyDomains),
  );
}

export function responseBodyDomainsFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyDomains, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyDomains$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyDomains' from JSON`,
  );
}

/** @internal */
export const GetProjectDomainsResponseBodyPagination$inboundSchema: z.ZodType<
  GetProjectDomainsResponseBodyPagination,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number(),
  next: z.nullable(z.number()),
  prev: z.nullable(z.number()),
});

/** @internal */
export type GetProjectDomainsResponseBodyPagination$Outbound = {
  count: number;
  next: number | null;
  prev: number | null;
};

/** @internal */
export const GetProjectDomainsResponseBodyPagination$outboundSchema: z.ZodType<
  GetProjectDomainsResponseBodyPagination$Outbound,
  z.ZodTypeDef,
  GetProjectDomainsResponseBodyPagination
> = z.object({
  count: z.number(),
  next: z.nullable(z.number()),
  prev: z.nullable(z.number()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectDomainsResponseBodyPagination$ {
  /** @deprecated use `GetProjectDomainsResponseBodyPagination$inboundSchema` instead. */
  export const inboundSchema =
    GetProjectDomainsResponseBodyPagination$inboundSchema;
  /** @deprecated use `GetProjectDomainsResponseBodyPagination$outboundSchema` instead. */
  export const outboundSchema =
    GetProjectDomainsResponseBodyPagination$outboundSchema;
  /** @deprecated use `GetProjectDomainsResponseBodyPagination$Outbound` instead. */
  export type Outbound = GetProjectDomainsResponseBodyPagination$Outbound;
}

export function getProjectDomainsResponseBodyPaginationToJSON(
  getProjectDomainsResponseBodyPagination:
    GetProjectDomainsResponseBodyPagination,
): string {
  return JSON.stringify(
    GetProjectDomainsResponseBodyPagination$outboundSchema.parse(
      getProjectDomainsResponseBodyPagination,
    ),
  );
}

export function getProjectDomainsResponseBodyPaginationFromJSON(
  jsonString: string,
): SafeParseResult<
  GetProjectDomainsResponseBodyPagination,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetProjectDomainsResponseBodyPagination$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetProjectDomainsResponseBodyPagination' from JSON`,
  );
}

/** @internal */
export const GetProjectDomainsResponseBody1$inboundSchema: z.ZodType<
  GetProjectDomainsResponseBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  domains: z.array(z.lazy(() => ResponseBodyDomains$inboundSchema)),
  pagination: z.lazy(() =>
    GetProjectDomainsResponseBodyPagination$inboundSchema
  ),
});

/** @internal */
export type GetProjectDomainsResponseBody1$Outbound = {
  domains: Array<ResponseBodyDomains$Outbound>;
  pagination: GetProjectDomainsResponseBodyPagination$Outbound;
};

/** @internal */
export const GetProjectDomainsResponseBody1$outboundSchema: z.ZodType<
  GetProjectDomainsResponseBody1$Outbound,
  z.ZodTypeDef,
  GetProjectDomainsResponseBody1
> = z.object({
  domains: z.array(z.lazy(() => ResponseBodyDomains$outboundSchema)),
  pagination: z.lazy(() =>
    GetProjectDomainsResponseBodyPagination$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectDomainsResponseBody1$ {
  /** @deprecated use `GetProjectDomainsResponseBody1$inboundSchema` instead. */
  export const inboundSchema = GetProjectDomainsResponseBody1$inboundSchema;
  /** @deprecated use `GetProjectDomainsResponseBody1$outboundSchema` instead. */
  export const outboundSchema = GetProjectDomainsResponseBody1$outboundSchema;
  /** @deprecated use `GetProjectDomainsResponseBody1$Outbound` instead. */
  export type Outbound = GetProjectDomainsResponseBody1$Outbound;
}

export function getProjectDomainsResponseBody1ToJSON(
  getProjectDomainsResponseBody1: GetProjectDomainsResponseBody1,
): string {
  return JSON.stringify(
    GetProjectDomainsResponseBody1$outboundSchema.parse(
      getProjectDomainsResponseBody1,
    ),
  );
}

export function getProjectDomainsResponseBody1FromJSON(
  jsonString: string,
): SafeParseResult<GetProjectDomainsResponseBody1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProjectDomainsResponseBody1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProjectDomainsResponseBody1' from JSON`,
  );
}

/** @internal */
export const GetProjectDomainsResponseBody$inboundSchema: z.ZodType<
  GetProjectDomainsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetProjectDomainsResponseBody1$inboundSchema),
  z.lazy(() => GetProjectDomainsResponseBody2$inboundSchema),
]);

/** @internal */
export type GetProjectDomainsResponseBody$Outbound =
  | GetProjectDomainsResponseBody1$Outbound
  | GetProjectDomainsResponseBody2$Outbound;

/** @internal */
export const GetProjectDomainsResponseBody$outboundSchema: z.ZodType<
  GetProjectDomainsResponseBody$Outbound,
  z.ZodTypeDef,
  GetProjectDomainsResponseBody
> = z.union([
  z.lazy(() => GetProjectDomainsResponseBody1$outboundSchema),
  z.lazy(() => GetProjectDomainsResponseBody2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectDomainsResponseBody$ {
  /** @deprecated use `GetProjectDomainsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetProjectDomainsResponseBody$inboundSchema;
  /** @deprecated use `GetProjectDomainsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetProjectDomainsResponseBody$outboundSchema;
  /** @deprecated use `GetProjectDomainsResponseBody$Outbound` instead. */
  export type Outbound = GetProjectDomainsResponseBody$Outbound;
}

export function getProjectDomainsResponseBodyToJSON(
  getProjectDomainsResponseBody: GetProjectDomainsResponseBody,
): string {
  return JSON.stringify(
    GetProjectDomainsResponseBody$outboundSchema.parse(
      getProjectDomainsResponseBody,
    ),
  );
}

export function getProjectDomainsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetProjectDomainsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProjectDomainsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProjectDomainsResponseBody' from JSON`,
  );
}
