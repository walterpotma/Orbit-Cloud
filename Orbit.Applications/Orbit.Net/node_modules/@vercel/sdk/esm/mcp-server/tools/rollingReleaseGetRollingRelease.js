/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { rollingReleaseGetRollingRelease } from "../../funcs/rollingReleaseGetRollingRelease.js";
import { GetRollingReleaseRequest$inboundSchema } from "../../models/getrollingreleaseop.js";
import { formatResult } from "../tools.js";
const args = {
    request: GetRollingReleaseRequest$inboundSchema,
};
export const tool$rollingReleaseGetRollingRelease = {
    name: "rolling-release-get-rolling-release",
    description: `Get the active rolling release information for a project

Return the Rolling Release for a project, regardless of whether the rollout is active, aborted, or completed. If the feature is enabled but no deployment has occurred yet, null will be returned.`,
    args,
    tool: async (client, args, ctx) => {
        const [result, apiCall] = await rollingReleaseGetRollingRelease(client, args.request, { fetchOptions: { signal: ctx.signal } }).$inspect();
        if (!result.ok) {
            return {
                content: [{ type: "text", text: result.error.message }],
                isError: true,
            };
        }
        const value = result.value;
        return formatResult(value, apiCall);
    },
};
//# sourceMappingURL=rollingReleaseGetRollingRelease.js.map