import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type GetTeamAccessRequestRequest = {
    userId: string;
    teamId: string;
};
export declare const GetTeamAccessRequestOrigin: {
    readonly Link: "link";
    readonly Mail: "mail";
    readonly Import: "import";
    readonly Teams: "teams";
    readonly Github: "github";
    readonly Gitlab: "gitlab";
    readonly Bitbucket: "bitbucket";
    readonly Saml: "saml";
    readonly Dsync: "dsync";
    readonly Feedback: "feedback";
    readonly OrganizationTeams: "organization-teams";
};
export type GetTeamAccessRequestOrigin = ClosedEnum<typeof GetTeamAccessRequestOrigin>;
export type GetTeamAccessRequestGitUserId = string | number;
/**
 * A map that describes the origin from where the user joined.
 */
export type GetTeamAccessRequestJoinedFrom = {
    origin: GetTeamAccessRequestOrigin;
    commitId?: string | undefined;
    repoId?: string | undefined;
    repoPath?: string | undefined;
    gitUserId?: string | number | undefined;
    gitUserLogin?: string | undefined;
    ssoUserId?: string | undefined;
    ssoConnectedAt?: number | undefined;
    idpUserId?: string | undefined;
    dsyncUserId?: string | undefined;
    dsyncConnectedAt?: number | undefined;
};
/**
 * Map of the connected GitHub account.
 */
export type GetTeamAccessRequestGithub = {
    login?: string | undefined;
};
/**
 * Map of the connected GitLab account.
 */
export type GetTeamAccessRequestGitlab = {
    login?: string | undefined;
};
/**
 * Map of the connected Bitbucket account.
 */
export type GetTeamAccessRequestBitbucket = {
    login?: string | undefined;
};
/**
 * Successfully
 */
export type GetTeamAccessRequestResponseBody = {
    /**
     * The slug of the team.
     */
    teamSlug: string;
    /**
     * The name of the team.
     */
    teamName: string;
    /**
     * Current status of the membership. Will be `true` if confirmed, if pending it'll be `false`.
     */
    confirmed: boolean;
    /**
     * A map that describes the origin from where the user joined.
     */
    joinedFrom: GetTeamAccessRequestJoinedFrom;
    /**
     * Timestamp in milliseconds when the user requested access to the team.
     */
    accessRequestedAt: number;
    /**
     * Map of the connected GitHub account.
     */
    github: GetTeamAccessRequestGithub | null;
    /**
     * Map of the connected GitLab account.
     */
    gitlab: GetTeamAccessRequestGitlab | null;
    /**
     * Map of the connected Bitbucket account.
     */
    bitbucket: GetTeamAccessRequestBitbucket | null;
};
/** @internal */
export declare const GetTeamAccessRequestRequest$inboundSchema: z.ZodType<GetTeamAccessRequestRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetTeamAccessRequestRequest$Outbound = {
    userId: string;
    teamId: string;
};
/** @internal */
export declare const GetTeamAccessRequestRequest$outboundSchema: z.ZodType<GetTeamAccessRequestRequest$Outbound, z.ZodTypeDef, GetTeamAccessRequestRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetTeamAccessRequestRequest$ {
    /** @deprecated use `GetTeamAccessRequestRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetTeamAccessRequestRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetTeamAccessRequestRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetTeamAccessRequestRequest$Outbound, z.ZodTypeDef, GetTeamAccessRequestRequest>;
    /** @deprecated use `GetTeamAccessRequestRequest$Outbound` instead. */
    type Outbound = GetTeamAccessRequestRequest$Outbound;
}
export declare function getTeamAccessRequestRequestToJSON(getTeamAccessRequestRequest: GetTeamAccessRequestRequest): string;
export declare function getTeamAccessRequestRequestFromJSON(jsonString: string): SafeParseResult<GetTeamAccessRequestRequest, SDKValidationError>;
/** @internal */
export declare const GetTeamAccessRequestOrigin$inboundSchema: z.ZodNativeEnum<typeof GetTeamAccessRequestOrigin>;
/** @internal */
export declare const GetTeamAccessRequestOrigin$outboundSchema: z.ZodNativeEnum<typeof GetTeamAccessRequestOrigin>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetTeamAccessRequestOrigin$ {
    /** @deprecated use `GetTeamAccessRequestOrigin$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Link: "link";
        readonly Mail: "mail";
        readonly Import: "import";
        readonly Teams: "teams";
        readonly Github: "github";
        readonly Gitlab: "gitlab";
        readonly Bitbucket: "bitbucket";
        readonly Saml: "saml";
        readonly Dsync: "dsync";
        readonly Feedback: "feedback";
        readonly OrganizationTeams: "organization-teams";
    }>;
    /** @deprecated use `GetTeamAccessRequestOrigin$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Link: "link";
        readonly Mail: "mail";
        readonly Import: "import";
        readonly Teams: "teams";
        readonly Github: "github";
        readonly Gitlab: "gitlab";
        readonly Bitbucket: "bitbucket";
        readonly Saml: "saml";
        readonly Dsync: "dsync";
        readonly Feedback: "feedback";
        readonly OrganizationTeams: "organization-teams";
    }>;
}
/** @internal */
export declare const GetTeamAccessRequestGitUserId$inboundSchema: z.ZodType<GetTeamAccessRequestGitUserId, z.ZodTypeDef, unknown>;
/** @internal */
export type GetTeamAccessRequestGitUserId$Outbound = string | number;
/** @internal */
export declare const GetTeamAccessRequestGitUserId$outboundSchema: z.ZodType<GetTeamAccessRequestGitUserId$Outbound, z.ZodTypeDef, GetTeamAccessRequestGitUserId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetTeamAccessRequestGitUserId$ {
    /** @deprecated use `GetTeamAccessRequestGitUserId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetTeamAccessRequestGitUserId, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetTeamAccessRequestGitUserId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetTeamAccessRequestGitUserId$Outbound, z.ZodTypeDef, GetTeamAccessRequestGitUserId>;
    /** @deprecated use `GetTeamAccessRequestGitUserId$Outbound` instead. */
    type Outbound = GetTeamAccessRequestGitUserId$Outbound;
}
export declare function getTeamAccessRequestGitUserIdToJSON(getTeamAccessRequestGitUserId: GetTeamAccessRequestGitUserId): string;
export declare function getTeamAccessRequestGitUserIdFromJSON(jsonString: string): SafeParseResult<GetTeamAccessRequestGitUserId, SDKValidationError>;
/** @internal */
export declare const GetTeamAccessRequestJoinedFrom$inboundSchema: z.ZodType<GetTeamAccessRequestJoinedFrom, z.ZodTypeDef, unknown>;
/** @internal */
export type GetTeamAccessRequestJoinedFrom$Outbound = {
    origin: string;
    commitId?: string | undefined;
    repoId?: string | undefined;
    repoPath?: string | undefined;
    gitUserId?: string | number | undefined;
    gitUserLogin?: string | undefined;
    ssoUserId?: string | undefined;
    ssoConnectedAt?: number | undefined;
    idpUserId?: string | undefined;
    dsyncUserId?: string | undefined;
    dsyncConnectedAt?: number | undefined;
};
/** @internal */
export declare const GetTeamAccessRequestJoinedFrom$outboundSchema: z.ZodType<GetTeamAccessRequestJoinedFrom$Outbound, z.ZodTypeDef, GetTeamAccessRequestJoinedFrom>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetTeamAccessRequestJoinedFrom$ {
    /** @deprecated use `GetTeamAccessRequestJoinedFrom$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetTeamAccessRequestJoinedFrom, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetTeamAccessRequestJoinedFrom$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetTeamAccessRequestJoinedFrom$Outbound, z.ZodTypeDef, GetTeamAccessRequestJoinedFrom>;
    /** @deprecated use `GetTeamAccessRequestJoinedFrom$Outbound` instead. */
    type Outbound = GetTeamAccessRequestJoinedFrom$Outbound;
}
export declare function getTeamAccessRequestJoinedFromToJSON(getTeamAccessRequestJoinedFrom: GetTeamAccessRequestJoinedFrom): string;
export declare function getTeamAccessRequestJoinedFromFromJSON(jsonString: string): SafeParseResult<GetTeamAccessRequestJoinedFrom, SDKValidationError>;
/** @internal */
export declare const GetTeamAccessRequestGithub$inboundSchema: z.ZodType<GetTeamAccessRequestGithub, z.ZodTypeDef, unknown>;
/** @internal */
export type GetTeamAccessRequestGithub$Outbound = {
    login?: string | undefined;
};
/** @internal */
export declare const GetTeamAccessRequestGithub$outboundSchema: z.ZodType<GetTeamAccessRequestGithub$Outbound, z.ZodTypeDef, GetTeamAccessRequestGithub>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetTeamAccessRequestGithub$ {
    /** @deprecated use `GetTeamAccessRequestGithub$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetTeamAccessRequestGithub, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetTeamAccessRequestGithub$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetTeamAccessRequestGithub$Outbound, z.ZodTypeDef, GetTeamAccessRequestGithub>;
    /** @deprecated use `GetTeamAccessRequestGithub$Outbound` instead. */
    type Outbound = GetTeamAccessRequestGithub$Outbound;
}
export declare function getTeamAccessRequestGithubToJSON(getTeamAccessRequestGithub: GetTeamAccessRequestGithub): string;
export declare function getTeamAccessRequestGithubFromJSON(jsonString: string): SafeParseResult<GetTeamAccessRequestGithub, SDKValidationError>;
/** @internal */
export declare const GetTeamAccessRequestGitlab$inboundSchema: z.ZodType<GetTeamAccessRequestGitlab, z.ZodTypeDef, unknown>;
/** @internal */
export type GetTeamAccessRequestGitlab$Outbound = {
    login?: string | undefined;
};
/** @internal */
export declare const GetTeamAccessRequestGitlab$outboundSchema: z.ZodType<GetTeamAccessRequestGitlab$Outbound, z.ZodTypeDef, GetTeamAccessRequestGitlab>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetTeamAccessRequestGitlab$ {
    /** @deprecated use `GetTeamAccessRequestGitlab$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetTeamAccessRequestGitlab, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetTeamAccessRequestGitlab$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetTeamAccessRequestGitlab$Outbound, z.ZodTypeDef, GetTeamAccessRequestGitlab>;
    /** @deprecated use `GetTeamAccessRequestGitlab$Outbound` instead. */
    type Outbound = GetTeamAccessRequestGitlab$Outbound;
}
export declare function getTeamAccessRequestGitlabToJSON(getTeamAccessRequestGitlab: GetTeamAccessRequestGitlab): string;
export declare function getTeamAccessRequestGitlabFromJSON(jsonString: string): SafeParseResult<GetTeamAccessRequestGitlab, SDKValidationError>;
/** @internal */
export declare const GetTeamAccessRequestBitbucket$inboundSchema: z.ZodType<GetTeamAccessRequestBitbucket, z.ZodTypeDef, unknown>;
/** @internal */
export type GetTeamAccessRequestBitbucket$Outbound = {
    login?: string | undefined;
};
/** @internal */
export declare const GetTeamAccessRequestBitbucket$outboundSchema: z.ZodType<GetTeamAccessRequestBitbucket$Outbound, z.ZodTypeDef, GetTeamAccessRequestBitbucket>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetTeamAccessRequestBitbucket$ {
    /** @deprecated use `GetTeamAccessRequestBitbucket$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetTeamAccessRequestBitbucket, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetTeamAccessRequestBitbucket$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetTeamAccessRequestBitbucket$Outbound, z.ZodTypeDef, GetTeamAccessRequestBitbucket>;
    /** @deprecated use `GetTeamAccessRequestBitbucket$Outbound` instead. */
    type Outbound = GetTeamAccessRequestBitbucket$Outbound;
}
export declare function getTeamAccessRequestBitbucketToJSON(getTeamAccessRequestBitbucket: GetTeamAccessRequestBitbucket): string;
export declare function getTeamAccessRequestBitbucketFromJSON(jsonString: string): SafeParseResult<GetTeamAccessRequestBitbucket, SDKValidationError>;
/** @internal */
export declare const GetTeamAccessRequestResponseBody$inboundSchema: z.ZodType<GetTeamAccessRequestResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type GetTeamAccessRequestResponseBody$Outbound = {
    teamSlug: string;
    teamName: string;
    confirmed: boolean;
    joinedFrom: GetTeamAccessRequestJoinedFrom$Outbound;
    accessRequestedAt: number;
    github: GetTeamAccessRequestGithub$Outbound | null;
    gitlab: GetTeamAccessRequestGitlab$Outbound | null;
    bitbucket: GetTeamAccessRequestBitbucket$Outbound | null;
};
/** @internal */
export declare const GetTeamAccessRequestResponseBody$outboundSchema: z.ZodType<GetTeamAccessRequestResponseBody$Outbound, z.ZodTypeDef, GetTeamAccessRequestResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetTeamAccessRequestResponseBody$ {
    /** @deprecated use `GetTeamAccessRequestResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetTeamAccessRequestResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetTeamAccessRequestResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetTeamAccessRequestResponseBody$Outbound, z.ZodTypeDef, GetTeamAccessRequestResponseBody>;
    /** @deprecated use `GetTeamAccessRequestResponseBody$Outbound` instead. */
    type Outbound = GetTeamAccessRequestResponseBody$Outbound;
}
export declare function getTeamAccessRequestResponseBodyToJSON(getTeamAccessRequestResponseBody: GetTeamAccessRequestResponseBody): string;
export declare function getTeamAccessRequestResponseBodyFromJSON(jsonString: string): SafeParseResult<GetTeamAccessRequestResponseBody, SDKValidationError>;
//# sourceMappingURL=getteamaccessrequestop.d.ts.map