/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/** @internal */
export const ConnectIntegrationResourceToProjectRequestBody$inboundSchema = z.object({
    projectId: z.string(),
});
/** @internal */
export const ConnectIntegrationResourceToProjectRequestBody$outboundSchema = z.object({
    projectId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ConnectIntegrationResourceToProjectRequestBody$;
(function (ConnectIntegrationResourceToProjectRequestBody$) {
    /** @deprecated use `ConnectIntegrationResourceToProjectRequestBody$inboundSchema` instead. */
    ConnectIntegrationResourceToProjectRequestBody$.inboundSchema = ConnectIntegrationResourceToProjectRequestBody$inboundSchema;
    /** @deprecated use `ConnectIntegrationResourceToProjectRequestBody$outboundSchema` instead. */
    ConnectIntegrationResourceToProjectRequestBody$.outboundSchema = ConnectIntegrationResourceToProjectRequestBody$outboundSchema;
})(ConnectIntegrationResourceToProjectRequestBody$ || (ConnectIntegrationResourceToProjectRequestBody$ = {}));
export function connectIntegrationResourceToProjectRequestBodyToJSON(connectIntegrationResourceToProjectRequestBody) {
    return JSON.stringify(ConnectIntegrationResourceToProjectRequestBody$outboundSchema.parse(connectIntegrationResourceToProjectRequestBody));
}
export function connectIntegrationResourceToProjectRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ConnectIntegrationResourceToProjectRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ConnectIntegrationResourceToProjectRequestBody' from JSON`);
}
/** @internal */
export const ConnectIntegrationResourceToProjectRequest$inboundSchema = z.object({
    integrationConfigurationId: z.string(),
    resourceId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => ConnectIntegrationResourceToProjectRequestBody$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const ConnectIntegrationResourceToProjectRequest$outboundSchema = z.object({
    integrationConfigurationId: z.string(),
    resourceId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => ConnectIntegrationResourceToProjectRequestBody$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ConnectIntegrationResourceToProjectRequest$;
(function (ConnectIntegrationResourceToProjectRequest$) {
    /** @deprecated use `ConnectIntegrationResourceToProjectRequest$inboundSchema` instead. */
    ConnectIntegrationResourceToProjectRequest$.inboundSchema = ConnectIntegrationResourceToProjectRequest$inboundSchema;
    /** @deprecated use `ConnectIntegrationResourceToProjectRequest$outboundSchema` instead. */
    ConnectIntegrationResourceToProjectRequest$.outboundSchema = ConnectIntegrationResourceToProjectRequest$outboundSchema;
})(ConnectIntegrationResourceToProjectRequest$ || (ConnectIntegrationResourceToProjectRequest$ = {}));
export function connectIntegrationResourceToProjectRequestToJSON(connectIntegrationResourceToProjectRequest) {
    return JSON.stringify(ConnectIntegrationResourceToProjectRequest$outboundSchema.parse(connectIntegrationResourceToProjectRequest));
}
export function connectIntegrationResourceToProjectRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ConnectIntegrationResourceToProjectRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ConnectIntegrationResourceToProjectRequest' from JSON`);
}
//# sourceMappingURL=connectintegrationresourcetoprojectop.js.map