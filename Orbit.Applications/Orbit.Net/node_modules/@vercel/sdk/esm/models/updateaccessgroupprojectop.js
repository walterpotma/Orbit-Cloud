/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/**
 * The project role that will be added to this Access Group.
 */
export const UpdateAccessGroupProjectRole = {
    Admin: "ADMIN",
    ProjectViewer: "PROJECT_VIEWER",
    ProjectDeveloper: "PROJECT_DEVELOPER",
};
export const UpdateAccessGroupProjectAccessGroupsRole = {
    Admin: "ADMIN",
    ProjectDeveloper: "PROJECT_DEVELOPER",
    ProjectViewer: "PROJECT_VIEWER",
};
/** @internal */
export const UpdateAccessGroupProjectRole$inboundSchema = z.nativeEnum(UpdateAccessGroupProjectRole);
/** @internal */
export const UpdateAccessGroupProjectRole$outboundSchema = UpdateAccessGroupProjectRole$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateAccessGroupProjectRole$;
(function (UpdateAccessGroupProjectRole$) {
    /** @deprecated use `UpdateAccessGroupProjectRole$inboundSchema` instead. */
    UpdateAccessGroupProjectRole$.inboundSchema = UpdateAccessGroupProjectRole$inboundSchema;
    /** @deprecated use `UpdateAccessGroupProjectRole$outboundSchema` instead. */
    UpdateAccessGroupProjectRole$.outboundSchema = UpdateAccessGroupProjectRole$outboundSchema;
})(UpdateAccessGroupProjectRole$ || (UpdateAccessGroupProjectRole$ = {}));
/** @internal */
export const UpdateAccessGroupProjectRequestBody$inboundSchema = z.object({
    role: UpdateAccessGroupProjectRole$inboundSchema,
});
/** @internal */
export const UpdateAccessGroupProjectRequestBody$outboundSchema = z.object({
    role: UpdateAccessGroupProjectRole$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateAccessGroupProjectRequestBody$;
(function (UpdateAccessGroupProjectRequestBody$) {
    /** @deprecated use `UpdateAccessGroupProjectRequestBody$inboundSchema` instead. */
    UpdateAccessGroupProjectRequestBody$.inboundSchema = UpdateAccessGroupProjectRequestBody$inboundSchema;
    /** @deprecated use `UpdateAccessGroupProjectRequestBody$outboundSchema` instead. */
    UpdateAccessGroupProjectRequestBody$.outboundSchema = UpdateAccessGroupProjectRequestBody$outboundSchema;
})(UpdateAccessGroupProjectRequestBody$ || (UpdateAccessGroupProjectRequestBody$ = {}));
export function updateAccessGroupProjectRequestBodyToJSON(updateAccessGroupProjectRequestBody) {
    return JSON.stringify(UpdateAccessGroupProjectRequestBody$outboundSchema.parse(updateAccessGroupProjectRequestBody));
}
export function updateAccessGroupProjectRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateAccessGroupProjectRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateAccessGroupProjectRequestBody' from JSON`);
}
/** @internal */
export const UpdateAccessGroupProjectRequest$inboundSchema = z.object({
    accessGroupIdOrName: z.string(),
    projectId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => UpdateAccessGroupProjectRequestBody$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const UpdateAccessGroupProjectRequest$outboundSchema = z.object({
    accessGroupIdOrName: z.string(),
    projectId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => UpdateAccessGroupProjectRequestBody$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateAccessGroupProjectRequest$;
(function (UpdateAccessGroupProjectRequest$) {
    /** @deprecated use `UpdateAccessGroupProjectRequest$inboundSchema` instead. */
    UpdateAccessGroupProjectRequest$.inboundSchema = UpdateAccessGroupProjectRequest$inboundSchema;
    /** @deprecated use `UpdateAccessGroupProjectRequest$outboundSchema` instead. */
    UpdateAccessGroupProjectRequest$.outboundSchema = UpdateAccessGroupProjectRequest$outboundSchema;
})(UpdateAccessGroupProjectRequest$ || (UpdateAccessGroupProjectRequest$ = {}));
export function updateAccessGroupProjectRequestToJSON(updateAccessGroupProjectRequest) {
    return JSON.stringify(UpdateAccessGroupProjectRequest$outboundSchema.parse(updateAccessGroupProjectRequest));
}
export function updateAccessGroupProjectRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateAccessGroupProjectRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateAccessGroupProjectRequest' from JSON`);
}
/** @internal */
export const UpdateAccessGroupProjectAccessGroupsRole$inboundSchema = z
    .nativeEnum(UpdateAccessGroupProjectAccessGroupsRole);
/** @internal */
export const UpdateAccessGroupProjectAccessGroupsRole$outboundSchema = UpdateAccessGroupProjectAccessGroupsRole$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateAccessGroupProjectAccessGroupsRole$;
(function (UpdateAccessGroupProjectAccessGroupsRole$) {
    /** @deprecated use `UpdateAccessGroupProjectAccessGroupsRole$inboundSchema` instead. */
    UpdateAccessGroupProjectAccessGroupsRole$.inboundSchema = UpdateAccessGroupProjectAccessGroupsRole$inboundSchema;
    /** @deprecated use `UpdateAccessGroupProjectAccessGroupsRole$outboundSchema` instead. */
    UpdateAccessGroupProjectAccessGroupsRole$.outboundSchema = UpdateAccessGroupProjectAccessGroupsRole$outboundSchema;
})(UpdateAccessGroupProjectAccessGroupsRole$ || (UpdateAccessGroupProjectAccessGroupsRole$ = {}));
/** @internal */
export const UpdateAccessGroupProjectResponseBody$inboundSchema = z.object({
    teamId: z.string(),
    accessGroupId: z.string(),
    projectId: z.string(),
    role: UpdateAccessGroupProjectAccessGroupsRole$inboundSchema,
    createdAt: z.string(),
    updatedAt: z.string(),
});
/** @internal */
export const UpdateAccessGroupProjectResponseBody$outboundSchema = z.object({
    teamId: z.string(),
    accessGroupId: z.string(),
    projectId: z.string(),
    role: UpdateAccessGroupProjectAccessGroupsRole$outboundSchema,
    createdAt: z.string(),
    updatedAt: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateAccessGroupProjectResponseBody$;
(function (UpdateAccessGroupProjectResponseBody$) {
    /** @deprecated use `UpdateAccessGroupProjectResponseBody$inboundSchema` instead. */
    UpdateAccessGroupProjectResponseBody$.inboundSchema = UpdateAccessGroupProjectResponseBody$inboundSchema;
    /** @deprecated use `UpdateAccessGroupProjectResponseBody$outboundSchema` instead. */
    UpdateAccessGroupProjectResponseBody$.outboundSchema = UpdateAccessGroupProjectResponseBody$outboundSchema;
})(UpdateAccessGroupProjectResponseBody$ || (UpdateAccessGroupProjectResponseBody$ = {}));
export function updateAccessGroupProjectResponseBodyToJSON(updateAccessGroupProjectResponseBody) {
    return JSON.stringify(UpdateAccessGroupProjectResponseBody$outboundSchema.parse(updateAccessGroupProjectResponseBody));
}
export function updateAccessGroupProjectResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateAccessGroupProjectResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateAccessGroupProjectResponseBody' from JSON`);
}
//# sourceMappingURL=updateaccessgroupprojectop.js.map