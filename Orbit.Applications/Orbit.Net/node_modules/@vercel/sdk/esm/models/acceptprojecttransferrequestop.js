/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../lib/schemas.js";
export const AcceptProjectTransferRequestResponseBodyStatus = {
    Fulfilled: "fulfilled",
    Errored: "errored",
};
/** @internal */
export const PaidFeatures$inboundSchema = z.object({
    concurrentBuilds: z.nullable(z.number().int()).optional(),
    passwordProtection: z.nullable(z.boolean()).optional(),
    previewDeploymentSuffix: z.nullable(z.boolean()).optional(),
});
/** @internal */
export const PaidFeatures$outboundSchema = z.object({
    concurrentBuilds: z.nullable(z.number().int()).optional(),
    passwordProtection: z.nullable(z.boolean()).optional(),
    previewDeploymentSuffix: z.nullable(z.boolean()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PaidFeatures$;
(function (PaidFeatures$) {
    /** @deprecated use `PaidFeatures$inboundSchema` instead. */
    PaidFeatures$.inboundSchema = PaidFeatures$inboundSchema;
    /** @deprecated use `PaidFeatures$outboundSchema` instead. */
    PaidFeatures$.outboundSchema = PaidFeatures$outboundSchema;
})(PaidFeatures$ || (PaidFeatures$ = {}));
export function paidFeaturesToJSON(paidFeatures) {
    return JSON.stringify(PaidFeatures$outboundSchema.parse(paidFeatures));
}
export function paidFeaturesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PaidFeatures$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PaidFeatures' from JSON`);
}
/** @internal */
export const AcceptedPolicies$inboundSchema = collectExtraKeys$(z.object({
    eula: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    privacy: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).catchall(z.string().datetime({ offset: true }).transform(v => new Date(v))), "additionalProperties", true);
/** @internal */
export const AcceptedPolicies$outboundSchema = z.object({
    eula: z.date().transform(v => v.toISOString()),
    privacy: z.date().transform(v => v.toISOString()),
    additionalProperties: z.record(z.date().transform(v => v.toISOString())),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AcceptedPolicies$;
(function (AcceptedPolicies$) {
    /** @deprecated use `AcceptedPolicies$inboundSchema` instead. */
    AcceptedPolicies$.inboundSchema = AcceptedPolicies$inboundSchema;
    /** @deprecated use `AcceptedPolicies$outboundSchema` instead. */
    AcceptedPolicies$.outboundSchema = AcceptedPolicies$outboundSchema;
})(AcceptedPolicies$ || (AcceptedPolicies$ = {}));
export function acceptedPoliciesToJSON(acceptedPolicies) {
    return JSON.stringify(AcceptedPolicies$outboundSchema.parse(acceptedPolicies));
}
export function acceptedPoliciesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AcceptedPolicies$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AcceptedPolicies' from JSON`);
}
/** @internal */
export const AcceptProjectTransferRequestRequestBody$inboundSchema = z.object({
    newProjectName: z.string().optional(),
    paidFeatures: z.lazy(() => PaidFeatures$inboundSchema).optional(),
    acceptedPolicies: z.record(z.lazy(() => AcceptedPolicies$inboundSchema))
        .optional(),
});
/** @internal */
export const AcceptProjectTransferRequestRequestBody$outboundSchema = z.object({
    newProjectName: z.string().optional(),
    paidFeatures: z.lazy(() => PaidFeatures$outboundSchema).optional(),
    acceptedPolicies: z.record(z.lazy(() => AcceptedPolicies$outboundSchema))
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AcceptProjectTransferRequestRequestBody$;
(function (AcceptProjectTransferRequestRequestBody$) {
    /** @deprecated use `AcceptProjectTransferRequestRequestBody$inboundSchema` instead. */
    AcceptProjectTransferRequestRequestBody$.inboundSchema = AcceptProjectTransferRequestRequestBody$inboundSchema;
    /** @deprecated use `AcceptProjectTransferRequestRequestBody$outboundSchema` instead. */
    AcceptProjectTransferRequestRequestBody$.outboundSchema = AcceptProjectTransferRequestRequestBody$outboundSchema;
})(AcceptProjectTransferRequestRequestBody$ || (AcceptProjectTransferRequestRequestBody$ = {}));
export function acceptProjectTransferRequestRequestBodyToJSON(acceptProjectTransferRequestRequestBody) {
    return JSON.stringify(AcceptProjectTransferRequestRequestBody$outboundSchema.parse(acceptProjectTransferRequestRequestBody));
}
export function acceptProjectTransferRequestRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AcceptProjectTransferRequestRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AcceptProjectTransferRequestRequestBody' from JSON`);
}
/** @internal */
export const AcceptProjectTransferRequestRequest$inboundSchema = z.object({
    code: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => AcceptProjectTransferRequestRequestBody$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const AcceptProjectTransferRequestRequest$outboundSchema = z.object({
    code: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => AcceptProjectTransferRequestRequestBody$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AcceptProjectTransferRequestRequest$;
(function (AcceptProjectTransferRequestRequest$) {
    /** @deprecated use `AcceptProjectTransferRequestRequest$inboundSchema` instead. */
    AcceptProjectTransferRequestRequest$.inboundSchema = AcceptProjectTransferRequestRequest$inboundSchema;
    /** @deprecated use `AcceptProjectTransferRequestRequest$outboundSchema` instead. */
    AcceptProjectTransferRequestRequest$.outboundSchema = AcceptProjectTransferRequestRequest$outboundSchema;
})(AcceptProjectTransferRequestRequest$ || (AcceptProjectTransferRequestRequest$ = {}));
export function acceptProjectTransferRequestRequestToJSON(acceptProjectTransferRequestRequest) {
    return JSON.stringify(AcceptProjectTransferRequestRequest$outboundSchema.parse(acceptProjectTransferRequestRequest));
}
export function acceptProjectTransferRequestRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AcceptProjectTransferRequestRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AcceptProjectTransferRequestRequest' from JSON`);
}
/** @internal */
export const AcceptProjectTransferRequestResponseBody2$inboundSchema = z.object({});
/** @internal */
export const AcceptProjectTransferRequestResponseBody2$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AcceptProjectTransferRequestResponseBody2$;
(function (AcceptProjectTransferRequestResponseBody2$) {
    /** @deprecated use `AcceptProjectTransferRequestResponseBody2$inboundSchema` instead. */
    AcceptProjectTransferRequestResponseBody2$.inboundSchema = AcceptProjectTransferRequestResponseBody2$inboundSchema;
    /** @deprecated use `AcceptProjectTransferRequestResponseBody2$outboundSchema` instead. */
    AcceptProjectTransferRequestResponseBody2$.outboundSchema = AcceptProjectTransferRequestResponseBody2$outboundSchema;
})(AcceptProjectTransferRequestResponseBody2$ || (AcceptProjectTransferRequestResponseBody2$ = {}));
export function acceptProjectTransferRequestResponseBody2ToJSON(acceptProjectTransferRequestResponseBody2) {
    return JSON.stringify(AcceptProjectTransferRequestResponseBody2$outboundSchema.parse(acceptProjectTransferRequestResponseBody2));
}
export function acceptProjectTransferRequestResponseBody2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => AcceptProjectTransferRequestResponseBody2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AcceptProjectTransferRequestResponseBody2' from JSON`);
}
/** @internal */
export const AcceptProjectTransferRequestResponseBodyStatus$inboundSchema = z
    .nativeEnum(AcceptProjectTransferRequestResponseBodyStatus);
/** @internal */
export const AcceptProjectTransferRequestResponseBodyStatus$outboundSchema = AcceptProjectTransferRequestResponseBodyStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AcceptProjectTransferRequestResponseBodyStatus$;
(function (AcceptProjectTransferRequestResponseBodyStatus$) {
    /** @deprecated use `AcceptProjectTransferRequestResponseBodyStatus$inboundSchema` instead. */
    AcceptProjectTransferRequestResponseBodyStatus$.inboundSchema = AcceptProjectTransferRequestResponseBodyStatus$inboundSchema;
    /** @deprecated use `AcceptProjectTransferRequestResponseBodyStatus$outboundSchema` instead. */
    AcceptProjectTransferRequestResponseBodyStatus$.outboundSchema = AcceptProjectTransferRequestResponseBodyStatus$outboundSchema;
})(AcceptProjectTransferRequestResponseBodyStatus$ || (AcceptProjectTransferRequestResponseBodyStatus$ = {}));
/** @internal */
export const AcceptProjectTransferRequestResponseBodyError$inboundSchema = z.object({});
/** @internal */
export const AcceptProjectTransferRequestResponseBodyError$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AcceptProjectTransferRequestResponseBodyError$;
(function (AcceptProjectTransferRequestResponseBodyError$) {
    /** @deprecated use `AcceptProjectTransferRequestResponseBodyError$inboundSchema` instead. */
    AcceptProjectTransferRequestResponseBodyError$.inboundSchema = AcceptProjectTransferRequestResponseBodyError$inboundSchema;
    /** @deprecated use `AcceptProjectTransferRequestResponseBodyError$outboundSchema` instead. */
    AcceptProjectTransferRequestResponseBodyError$.outboundSchema = AcceptProjectTransferRequestResponseBodyError$outboundSchema;
})(AcceptProjectTransferRequestResponseBodyError$ || (AcceptProjectTransferRequestResponseBodyError$ = {}));
export function acceptProjectTransferRequestResponseBodyErrorToJSON(acceptProjectTransferRequestResponseBodyError) {
    return JSON.stringify(AcceptProjectTransferRequestResponseBodyError$outboundSchema.parse(acceptProjectTransferRequestResponseBodyError));
}
export function acceptProjectTransferRequestResponseBodyErrorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AcceptProjectTransferRequestResponseBodyError$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AcceptProjectTransferRequestResponseBodyError' from JSON`);
}
/** @internal */
export const AcceptProjectTransferRequestResponseBodyResult$inboundSchema = z.object({
    status: AcceptProjectTransferRequestResponseBodyStatus$inboundSchema,
    error: z.lazy(() => AcceptProjectTransferRequestResponseBodyError$inboundSchema).optional(),
    code: z.string().optional(),
});
/** @internal */
export const AcceptProjectTransferRequestResponseBodyResult$outboundSchema = z.object({
    status: AcceptProjectTransferRequestResponseBodyStatus$outboundSchema,
    error: z.lazy(() => AcceptProjectTransferRequestResponseBodyError$outboundSchema).optional(),
    code: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AcceptProjectTransferRequestResponseBodyResult$;
(function (AcceptProjectTransferRequestResponseBodyResult$) {
    /** @deprecated use `AcceptProjectTransferRequestResponseBodyResult$inboundSchema` instead. */
    AcceptProjectTransferRequestResponseBodyResult$.inboundSchema = AcceptProjectTransferRequestResponseBodyResult$inboundSchema;
    /** @deprecated use `AcceptProjectTransferRequestResponseBodyResult$outboundSchema` instead. */
    AcceptProjectTransferRequestResponseBodyResult$.outboundSchema = AcceptProjectTransferRequestResponseBodyResult$outboundSchema;
})(AcceptProjectTransferRequestResponseBodyResult$ || (AcceptProjectTransferRequestResponseBodyResult$ = {}));
export function acceptProjectTransferRequestResponseBodyResultToJSON(acceptProjectTransferRequestResponseBodyResult) {
    return JSON.stringify(AcceptProjectTransferRequestResponseBodyResult$outboundSchema.parse(acceptProjectTransferRequestResponseBodyResult));
}
export function acceptProjectTransferRequestResponseBodyResultFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AcceptProjectTransferRequestResponseBodyResult$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AcceptProjectTransferRequestResponseBodyResult' from JSON`);
}
/** @internal */
export const PartnerCalls$inboundSchema = z.object({
    installationId: z.string(),
    resourceIds: z.array(z.string()),
    result: z.lazy(() => AcceptProjectTransferRequestResponseBodyResult$inboundSchema),
});
/** @internal */
export const PartnerCalls$outboundSchema = z.object({
    installationId: z.string(),
    resourceIds: z.array(z.string()),
    result: z.lazy(() => AcceptProjectTransferRequestResponseBodyResult$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartnerCalls$;
(function (PartnerCalls$) {
    /** @deprecated use `PartnerCalls$inboundSchema` instead. */
    PartnerCalls$.inboundSchema = PartnerCalls$inboundSchema;
    /** @deprecated use `PartnerCalls$outboundSchema` instead. */
    PartnerCalls$.outboundSchema = PartnerCalls$outboundSchema;
})(PartnerCalls$ || (PartnerCalls$ = {}));
export function partnerCallsToJSON(partnerCalls) {
    return JSON.stringify(PartnerCalls$outboundSchema.parse(partnerCalls));
}
export function partnerCallsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartnerCalls$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartnerCalls' from JSON`);
}
/** @internal */
export const ResourceTransferErrors$inboundSchema = z.object({});
/** @internal */
export const ResourceTransferErrors$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResourceTransferErrors$;
(function (ResourceTransferErrors$) {
    /** @deprecated use `ResourceTransferErrors$inboundSchema` instead. */
    ResourceTransferErrors$.inboundSchema = ResourceTransferErrors$inboundSchema;
    /** @deprecated use `ResourceTransferErrors$outboundSchema` instead. */
    ResourceTransferErrors$.outboundSchema = ResourceTransferErrors$outboundSchema;
})(ResourceTransferErrors$ || (ResourceTransferErrors$ = {}));
export function resourceTransferErrorsToJSON(resourceTransferErrors) {
    return JSON.stringify(ResourceTransferErrors$outboundSchema.parse(resourceTransferErrors));
}
export function resourceTransferErrorsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResourceTransferErrors$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResourceTransferErrors' from JSON`);
}
/** @internal */
export const AcceptProjectTransferRequestResponseBody1$inboundSchema = z.object({
    partnerCalls: z.array(z.lazy(() => PartnerCalls$inboundSchema)),
    resourceTransferErrors: z.array(z.lazy(() => ResourceTransferErrors$inboundSchema)),
});
/** @internal */
export const AcceptProjectTransferRequestResponseBody1$outboundSchema = z.object({
    partnerCalls: z.array(z.lazy(() => PartnerCalls$outboundSchema)),
    resourceTransferErrors: z.array(z.lazy(() => ResourceTransferErrors$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AcceptProjectTransferRequestResponseBody1$;
(function (AcceptProjectTransferRequestResponseBody1$) {
    /** @deprecated use `AcceptProjectTransferRequestResponseBody1$inboundSchema` instead. */
    AcceptProjectTransferRequestResponseBody1$.inboundSchema = AcceptProjectTransferRequestResponseBody1$inboundSchema;
    /** @deprecated use `AcceptProjectTransferRequestResponseBody1$outboundSchema` instead. */
    AcceptProjectTransferRequestResponseBody1$.outboundSchema = AcceptProjectTransferRequestResponseBody1$outboundSchema;
})(AcceptProjectTransferRequestResponseBody1$ || (AcceptProjectTransferRequestResponseBody1$ = {}));
export function acceptProjectTransferRequestResponseBody1ToJSON(acceptProjectTransferRequestResponseBody1) {
    return JSON.stringify(AcceptProjectTransferRequestResponseBody1$outboundSchema.parse(acceptProjectTransferRequestResponseBody1));
}
export function acceptProjectTransferRequestResponseBody1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => AcceptProjectTransferRequestResponseBody1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AcceptProjectTransferRequestResponseBody1' from JSON`);
}
/** @internal */
export const AcceptProjectTransferRequestResponseBody$inboundSchema = z.union([
    z.lazy(() => AcceptProjectTransferRequestResponseBody1$inboundSchema),
    z.lazy(() => AcceptProjectTransferRequestResponseBody2$inboundSchema),
]);
/** @internal */
export const AcceptProjectTransferRequestResponseBody$outboundSchema = z.union([
    z.lazy(() => AcceptProjectTransferRequestResponseBody1$outboundSchema),
    z.lazy(() => AcceptProjectTransferRequestResponseBody2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AcceptProjectTransferRequestResponseBody$;
(function (AcceptProjectTransferRequestResponseBody$) {
    /** @deprecated use `AcceptProjectTransferRequestResponseBody$inboundSchema` instead. */
    AcceptProjectTransferRequestResponseBody$.inboundSchema = AcceptProjectTransferRequestResponseBody$inboundSchema;
    /** @deprecated use `AcceptProjectTransferRequestResponseBody$outboundSchema` instead. */
    AcceptProjectTransferRequestResponseBody$.outboundSchema = AcceptProjectTransferRequestResponseBody$outboundSchema;
})(AcceptProjectTransferRequestResponseBody$ || (AcceptProjectTransferRequestResponseBody$ = {}));
export function acceptProjectTransferRequestResponseBodyToJSON(acceptProjectTransferRequestResponseBody) {
    return JSON.stringify(AcceptProjectTransferRequestResponseBody$outboundSchema.parse(acceptProjectTransferRequestResponseBody));
}
export function acceptProjectTransferRequestResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AcceptProjectTransferRequestResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AcceptProjectTransferRequestResponseBody' from JSON`);
}
//# sourceMappingURL=acceptprojecttransferrequestop.js.map