import * as z from "zod";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type UploadArtifactRequest = {
    /**
     * The artifact size in bytes
     */
    contentLength: number;
    /**
     * The time taken to generate the uploaded artifact in milliseconds.
     */
    xArtifactDuration?: number | undefined;
    /**
     * The continuous integration or delivery environment where this artifact was generated.
     */
    xArtifactClientCi?: string | undefined;
    /**
     * 1 if the client is an interactive shell. Otherwise 0
     */
    xArtifactClientInteractive?: number | undefined;
    /**
     * The base64 encoded tag for this artifact. The value is sent back to clients when the artifact is downloaded as the header `x-artifact-tag`
     */
    xArtifactTag?: string | undefined;
    /**
     * The artifact hash
     */
    hash: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};
/**
 * File successfully uploaded
 */
export type UploadArtifactResponseBody = {
    /**
     * Array of URLs where the artifact was updated
     */
    urls: Array<string>;
};
/** @internal */
export declare const UploadArtifactRequest$inboundSchema: z.ZodType<UploadArtifactRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type UploadArtifactRequest$Outbound = {
    "Content-Length": number;
    "x-artifact-duration"?: number | undefined;
    "x-artifact-client-ci"?: string | undefined;
    "x-artifact-client-interactive"?: number | undefined;
    "x-artifact-tag"?: string | undefined;
    hash: string;
    teamId?: string | undefined;
    slug?: string | undefined;
    RequestBody: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};
/** @internal */
export declare const UploadArtifactRequest$outboundSchema: z.ZodType<UploadArtifactRequest$Outbound, z.ZodTypeDef, UploadArtifactRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UploadArtifactRequest$ {
    /** @deprecated use `UploadArtifactRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UploadArtifactRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `UploadArtifactRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UploadArtifactRequest$Outbound, z.ZodTypeDef, UploadArtifactRequest>;
    /** @deprecated use `UploadArtifactRequest$Outbound` instead. */
    type Outbound = UploadArtifactRequest$Outbound;
}
export declare function uploadArtifactRequestToJSON(uploadArtifactRequest: UploadArtifactRequest): string;
export declare function uploadArtifactRequestFromJSON(jsonString: string): SafeParseResult<UploadArtifactRequest, SDKValidationError>;
/** @internal */
export declare const UploadArtifactResponseBody$inboundSchema: z.ZodType<UploadArtifactResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type UploadArtifactResponseBody$Outbound = {
    urls: Array<string>;
};
/** @internal */
export declare const UploadArtifactResponseBody$outboundSchema: z.ZodType<UploadArtifactResponseBody$Outbound, z.ZodTypeDef, UploadArtifactResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UploadArtifactResponseBody$ {
    /** @deprecated use `UploadArtifactResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UploadArtifactResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `UploadArtifactResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UploadArtifactResponseBody$Outbound, z.ZodTypeDef, UploadArtifactResponseBody>;
    /** @deprecated use `UploadArtifactResponseBody$Outbound` instead. */
    type Outbound = UploadArtifactResponseBody$Outbound;
}
export declare function uploadArtifactResponseBodyToJSON(uploadArtifactResponseBody: UploadArtifactResponseBody): string;
export declare function uploadArtifactResponseBodyFromJSON(jsonString: string): SafeParseResult<UploadArtifactResponseBody, SDKValidationError>;
//# sourceMappingURL=uploadartifactop.d.ts.map