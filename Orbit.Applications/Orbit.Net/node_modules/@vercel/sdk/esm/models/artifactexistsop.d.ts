import * as z from "zod";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type ArtifactExistsRequest = {
    /**
     * The artifact hash
     */
    hash: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};
/** @internal */
export declare const ArtifactExistsRequest$inboundSchema: z.ZodType<ArtifactExistsRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type ArtifactExistsRequest$Outbound = {
    hash: string;
    teamId?: string | undefined;
    slug?: string | undefined;
};
/** @internal */
export declare const ArtifactExistsRequest$outboundSchema: z.ZodType<ArtifactExistsRequest$Outbound, z.ZodTypeDef, ArtifactExistsRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ArtifactExistsRequest$ {
    /** @deprecated use `ArtifactExistsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ArtifactExistsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `ArtifactExistsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ArtifactExistsRequest$Outbound, z.ZodTypeDef, ArtifactExistsRequest>;
    /** @deprecated use `ArtifactExistsRequest$Outbound` instead. */
    type Outbound = ArtifactExistsRequest$Outbound;
}
export declare function artifactExistsRequestToJSON(artifactExistsRequest: ArtifactExistsRequest): string;
export declare function artifactExistsRequestFromJSON(jsonString: string): SafeParseResult<ArtifactExistsRequest, SDKValidationError>;
//# sourceMappingURL=artifactexistsop.d.ts.map