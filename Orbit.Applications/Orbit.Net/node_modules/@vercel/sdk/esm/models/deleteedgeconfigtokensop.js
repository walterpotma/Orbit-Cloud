/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/** @internal */
export const DeleteEdgeConfigTokensRequestBody$inboundSchema = z.object({
    tokens: z.array(z.string()),
});
/** @internal */
export const DeleteEdgeConfigTokensRequestBody$outboundSchema = z.object({
    tokens: z.array(z.string()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DeleteEdgeConfigTokensRequestBody$;
(function (DeleteEdgeConfigTokensRequestBody$) {
    /** @deprecated use `DeleteEdgeConfigTokensRequestBody$inboundSchema` instead. */
    DeleteEdgeConfigTokensRequestBody$.inboundSchema = DeleteEdgeConfigTokensRequestBody$inboundSchema;
    /** @deprecated use `DeleteEdgeConfigTokensRequestBody$outboundSchema` instead. */
    DeleteEdgeConfigTokensRequestBody$.outboundSchema = DeleteEdgeConfigTokensRequestBody$outboundSchema;
})(DeleteEdgeConfigTokensRequestBody$ || (DeleteEdgeConfigTokensRequestBody$ = {}));
export function deleteEdgeConfigTokensRequestBodyToJSON(deleteEdgeConfigTokensRequestBody) {
    return JSON.stringify(DeleteEdgeConfigTokensRequestBody$outboundSchema.parse(deleteEdgeConfigTokensRequestBody));
}
export function deleteEdgeConfigTokensRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DeleteEdgeConfigTokensRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteEdgeConfigTokensRequestBody' from JSON`);
}
/** @internal */
export const DeleteEdgeConfigTokensRequest$inboundSchema = z.object({
    edgeConfigId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => DeleteEdgeConfigTokensRequestBody$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const DeleteEdgeConfigTokensRequest$outboundSchema = z.object({
    edgeConfigId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => DeleteEdgeConfigTokensRequestBody$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DeleteEdgeConfigTokensRequest$;
(function (DeleteEdgeConfigTokensRequest$) {
    /** @deprecated use `DeleteEdgeConfigTokensRequest$inboundSchema` instead. */
    DeleteEdgeConfigTokensRequest$.inboundSchema = DeleteEdgeConfigTokensRequest$inboundSchema;
    /** @deprecated use `DeleteEdgeConfigTokensRequest$outboundSchema` instead. */
    DeleteEdgeConfigTokensRequest$.outboundSchema = DeleteEdgeConfigTokensRequest$outboundSchema;
})(DeleteEdgeConfigTokensRequest$ || (DeleteEdgeConfigTokensRequest$ = {}));
export function deleteEdgeConfigTokensRequestToJSON(deleteEdgeConfigTokensRequest) {
    return JSON.stringify(DeleteEdgeConfigTokensRequest$outboundSchema.parse(deleteEdgeConfigTokensRequest));
}
export function deleteEdgeConfigTokensRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DeleteEdgeConfigTokensRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteEdgeConfigTokensRequest' from JSON`);
}
//# sourceMappingURL=deleteedgeconfigtokensop.js.map