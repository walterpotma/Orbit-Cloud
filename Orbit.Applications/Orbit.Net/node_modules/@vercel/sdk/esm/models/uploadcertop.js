/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/** @internal */
export const UploadCertRequestBody$inboundSchema = z.object({
    ca: z.string(),
    key: z.string(),
    cert: z.string(),
    skipValidation: z.boolean().optional(),
});
/** @internal */
export const UploadCertRequestBody$outboundSchema = z.object({
    ca: z.string(),
    key: z.string(),
    cert: z.string(),
    skipValidation: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UploadCertRequestBody$;
(function (UploadCertRequestBody$) {
    /** @deprecated use `UploadCertRequestBody$inboundSchema` instead. */
    UploadCertRequestBody$.inboundSchema = UploadCertRequestBody$inboundSchema;
    /** @deprecated use `UploadCertRequestBody$outboundSchema` instead. */
    UploadCertRequestBody$.outboundSchema = UploadCertRequestBody$outboundSchema;
})(UploadCertRequestBody$ || (UploadCertRequestBody$ = {}));
export function uploadCertRequestBodyToJSON(uploadCertRequestBody) {
    return JSON.stringify(UploadCertRequestBody$outboundSchema.parse(uploadCertRequestBody));
}
export function uploadCertRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UploadCertRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UploadCertRequestBody' from JSON`);
}
/** @internal */
export const UploadCertRequest$inboundSchema = z.object({
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => UploadCertRequestBody$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const UploadCertRequest$outboundSchema = z.object({
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => UploadCertRequestBody$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UploadCertRequest$;
(function (UploadCertRequest$) {
    /** @deprecated use `UploadCertRequest$inboundSchema` instead. */
    UploadCertRequest$.inboundSchema = UploadCertRequest$inboundSchema;
    /** @deprecated use `UploadCertRequest$outboundSchema` instead. */
    UploadCertRequest$.outboundSchema = UploadCertRequest$outboundSchema;
})(UploadCertRequest$ || (UploadCertRequest$ = {}));
export function uploadCertRequestToJSON(uploadCertRequest) {
    return JSON.stringify(UploadCertRequest$outboundSchema.parse(uploadCertRequest));
}
export function uploadCertRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UploadCertRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UploadCertRequest' from JSON`);
}
/** @internal */
export const UploadCertResponseBody$inboundSchema = z.object({
    id: z.string(),
    createdAt: z.number(),
    expiresAt: z.number(),
    autoRenew: z.boolean(),
    cns: z.array(z.string()),
});
/** @internal */
export const UploadCertResponseBody$outboundSchema = z.object({
    id: z.string(),
    createdAt: z.number(),
    expiresAt: z.number(),
    autoRenew: z.boolean(),
    cns: z.array(z.string()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UploadCertResponseBody$;
(function (UploadCertResponseBody$) {
    /** @deprecated use `UploadCertResponseBody$inboundSchema` instead. */
    UploadCertResponseBody$.inboundSchema = UploadCertResponseBody$inboundSchema;
    /** @deprecated use `UploadCertResponseBody$outboundSchema` instead. */
    UploadCertResponseBody$.outboundSchema = UploadCertResponseBody$outboundSchema;
})(UploadCertResponseBody$ || (UploadCertResponseBody$ = {}));
export function uploadCertResponseBodyToJSON(uploadCertResponseBody) {
    return JSON.stringify(UploadCertResponseBody$outboundSchema.parse(uploadCertResponseBody));
}
export function uploadCertResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UploadCertResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UploadCertResponseBody' from JSON`);
}
//# sourceMappingURL=uploadcertop.js.map