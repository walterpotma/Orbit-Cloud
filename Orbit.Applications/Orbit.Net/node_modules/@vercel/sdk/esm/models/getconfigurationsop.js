/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
export const View = {
    Account: "account",
    Project: "project",
};
export const InstallationType = {
    Marketplace: "marketplace",
    External: "external",
};
export const TagIds = {
    TagAi: "tag_ai",
    TagAnalytics: "tag_analytics",
    TagAuthentication: "tag_authentication",
    TagCms: "tag_cms",
    TagCodeRepository: "tag_code_repository",
    TagCommerce: "tag_commerce",
    TagDatabases: "tag_databases",
    TagDevTools: "tag_dev_tools",
    TagExperimentation: "tag_experimentation",
    TagFlags: "tag_flags",
    TagLogging: "tag_logging",
    TagMessaging: "tag_messaging",
    TagMonitoring: "tag_monitoring",
    TagObservability: "tag_observability",
    TagPerformance: "tag_performance",
    TagProductivity: "tag_productivity",
    TagSearching: "tag_searching",
    TagSecurity: "tag_security",
    TagTesting: "tag_testing",
    TagVideo: "tag_video",
    TagWorkflow: "tag_workflow",
};
/**
 * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
 */
export const GetConfigurationsResponseBodyIntegrationsSource = {
    Marketplace: "marketplace",
    DeployButton: "deploy-button",
    External: "external",
    V0: "v0",
    ResourceClaims: "resource-claims",
};
export const GetConfigurationsResponseBodyIntegrationsType = {
    IntegrationConfiguration: "integration-configuration",
};
export const ResponseBodyDisabledReason = {
    DisabledByOwner: "disabled-by-owner",
    FeatureNotAvailable: "feature-not-available",
    DisabledByAdmin: "disabled-by-admin",
    OriginalOwnerLeftTheTeam: "original-owner-left-the-team",
    AccountPlanDowngrade: "account-plan-downgrade",
    OriginalOwnerRoleDowngraded: "original-owner-role-downgraded",
};
/**
 * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
 */
export const GetConfigurationsResponseBodyInstallationType = {
    Marketplace: "marketplace",
    External: "external",
};
/**
 * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
 */
export const GetConfigurationsResponseBodySource = {
    Marketplace: "marketplace",
    DeployButton: "deploy-button",
    External: "external",
    V0: "v0",
    ResourceClaims: "resource-claims",
};
export const GetConfigurationsResponseBodyType = {
    IntegrationConfiguration: "integration-configuration",
};
export const DisabledReason = {
    DisabledByOwner: "disabled-by-owner",
    FeatureNotAvailable: "feature-not-available",
    DisabledByAdmin: "disabled-by-admin",
    OriginalOwnerLeftTheTeam: "original-owner-left-the-team",
    AccountPlanDowngrade: "account-plan-downgrade",
    OriginalOwnerRoleDowngraded: "original-owner-role-downgraded",
};
/**
 * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
 */
export const ResponseBodyInstallationType = {
    Marketplace: "marketplace",
    External: "external",
};
/** @internal */
export const View$inboundSchema = z.nativeEnum(View);
/** @internal */
export const View$outboundSchema = View$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var View$;
(function (View$) {
    /** @deprecated use `View$inboundSchema` instead. */
    View$.inboundSchema = View$inboundSchema;
    /** @deprecated use `View$outboundSchema` instead. */
    View$.outboundSchema = View$outboundSchema;
})(View$ || (View$ = {}));
/** @internal */
export const InstallationType$inboundSchema = z.nativeEnum(InstallationType);
/** @internal */
export const InstallationType$outboundSchema = InstallationType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InstallationType$;
(function (InstallationType$) {
    /** @deprecated use `InstallationType$inboundSchema` instead. */
    InstallationType$.inboundSchema = InstallationType$inboundSchema;
    /** @deprecated use `InstallationType$outboundSchema` instead. */
    InstallationType$.outboundSchema = InstallationType$outboundSchema;
})(InstallationType$ || (InstallationType$ = {}));
/** @internal */
export const GetConfigurationsRequest$inboundSchema = z.object({
    view: View$inboundSchema,
    installationType: InstallationType$inboundSchema.optional(),
    integrationIdOrSlug: z.string().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/** @internal */
export const GetConfigurationsRequest$outboundSchema = z.object({
    view: View$outboundSchema,
    installationType: InstallationType$outboundSchema.optional(),
    integrationIdOrSlug: z.string().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetConfigurationsRequest$;
(function (GetConfigurationsRequest$) {
    /** @deprecated use `GetConfigurationsRequest$inboundSchema` instead. */
    GetConfigurationsRequest$.inboundSchema = GetConfigurationsRequest$inboundSchema;
    /** @deprecated use `GetConfigurationsRequest$outboundSchema` instead. */
    GetConfigurationsRequest$.outboundSchema = GetConfigurationsRequest$outboundSchema;
})(GetConfigurationsRequest$ || (GetConfigurationsRequest$ = {}));
export function getConfigurationsRequestToJSON(getConfigurationsRequest) {
    return JSON.stringify(GetConfigurationsRequest$outboundSchema.parse(getConfigurationsRequest));
}
export function getConfigurationsRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetConfigurationsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetConfigurationsRequest' from JSON`);
}
/** @internal */
export const TagIds$inboundSchema = z
    .nativeEnum(TagIds);
/** @internal */
export const TagIds$outboundSchema = TagIds$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TagIds$;
(function (TagIds$) {
    /** @deprecated use `TagIds$inboundSchema` instead. */
    TagIds$.inboundSchema = TagIds$inboundSchema;
    /** @deprecated use `TagIds$outboundSchema` instead. */
    TagIds$.outboundSchema = TagIds$outboundSchema;
})(TagIds$ || (TagIds$ = {}));
/** @internal */
export const ResponseBodyIntegration$inboundSchema = z.object({
    name: z.string(),
    icon: z.string(),
    isLegacy: z.boolean(),
    flags: z.array(z.string()).optional(),
    assignedBetaLabelAt: z.number().optional(),
    tagIds: z.array(TagIds$inboundSchema).optional(),
});
/** @internal */
export const ResponseBodyIntegration$outboundSchema = z.object({
    name: z.string(),
    icon: z.string(),
    isLegacy: z.boolean(),
    flags: z.array(z.string()).optional(),
    assignedBetaLabelAt: z.number().optional(),
    tagIds: z.array(TagIds$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyIntegration$;
(function (ResponseBodyIntegration$) {
    /** @deprecated use `ResponseBodyIntegration$inboundSchema` instead. */
    ResponseBodyIntegration$.inboundSchema = ResponseBodyIntegration$inboundSchema;
    /** @deprecated use `ResponseBodyIntegration$outboundSchema` instead. */
    ResponseBodyIntegration$.outboundSchema = ResponseBodyIntegration$outboundSchema;
})(ResponseBodyIntegration$ || (ResponseBodyIntegration$ = {}));
export function responseBodyIntegrationToJSON(responseBodyIntegration) {
    return JSON.stringify(ResponseBodyIntegration$outboundSchema.parse(responseBodyIntegration));
}
export function responseBodyIntegrationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyIntegration$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyIntegration' from JSON`);
}
/** @internal */
export const GetConfigurationsResponseBodyIntegrationsSource$inboundSchema = z
    .nativeEnum(GetConfigurationsResponseBodyIntegrationsSource);
/** @internal */
export const GetConfigurationsResponseBodyIntegrationsSource$outboundSchema = GetConfigurationsResponseBodyIntegrationsSource$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetConfigurationsResponseBodyIntegrationsSource$;
(function (GetConfigurationsResponseBodyIntegrationsSource$) {
    /** @deprecated use `GetConfigurationsResponseBodyIntegrationsSource$inboundSchema` instead. */
    GetConfigurationsResponseBodyIntegrationsSource$.inboundSchema = GetConfigurationsResponseBodyIntegrationsSource$inboundSchema;
    /** @deprecated use `GetConfigurationsResponseBodyIntegrationsSource$outboundSchema` instead. */
    GetConfigurationsResponseBodyIntegrationsSource$.outboundSchema = GetConfigurationsResponseBodyIntegrationsSource$outboundSchema;
})(GetConfigurationsResponseBodyIntegrationsSource$ || (GetConfigurationsResponseBodyIntegrationsSource$ = {}));
/** @internal */
export const GetConfigurationsResponseBodyIntegrationsType$inboundSchema = z
    .nativeEnum(GetConfigurationsResponseBodyIntegrationsType);
/** @internal */
export const GetConfigurationsResponseBodyIntegrationsType$outboundSchema = GetConfigurationsResponseBodyIntegrationsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetConfigurationsResponseBodyIntegrationsType$;
(function (GetConfigurationsResponseBodyIntegrationsType$) {
    /** @deprecated use `GetConfigurationsResponseBodyIntegrationsType$inboundSchema` instead. */
    GetConfigurationsResponseBodyIntegrationsType$.inboundSchema = GetConfigurationsResponseBodyIntegrationsType$inboundSchema;
    /** @deprecated use `GetConfigurationsResponseBodyIntegrationsType$outboundSchema` instead. */
    GetConfigurationsResponseBodyIntegrationsType$.outboundSchema = GetConfigurationsResponseBodyIntegrationsType$outboundSchema;
})(GetConfigurationsResponseBodyIntegrationsType$ || (GetConfigurationsResponseBodyIntegrationsType$ = {}));
/** @internal */
export const ResponseBodyDisabledReason$inboundSchema = z.nativeEnum(ResponseBodyDisabledReason);
/** @internal */
export const ResponseBodyDisabledReason$outboundSchema = ResponseBodyDisabledReason$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyDisabledReason$;
(function (ResponseBodyDisabledReason$) {
    /** @deprecated use `ResponseBodyDisabledReason$inboundSchema` instead. */
    ResponseBodyDisabledReason$.inboundSchema = ResponseBodyDisabledReason$inboundSchema;
    /** @deprecated use `ResponseBodyDisabledReason$outboundSchema` instead. */
    ResponseBodyDisabledReason$.outboundSchema = ResponseBodyDisabledReason$outboundSchema;
})(ResponseBodyDisabledReason$ || (ResponseBodyDisabledReason$ = {}));
/** @internal */
export const GetConfigurationsResponseBodyInstallationType$inboundSchema = z
    .nativeEnum(GetConfigurationsResponseBodyInstallationType);
/** @internal */
export const GetConfigurationsResponseBodyInstallationType$outboundSchema = GetConfigurationsResponseBodyInstallationType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetConfigurationsResponseBodyInstallationType$;
(function (GetConfigurationsResponseBodyInstallationType$) {
    /** @deprecated use `GetConfigurationsResponseBodyInstallationType$inboundSchema` instead. */
    GetConfigurationsResponseBodyInstallationType$.inboundSchema = GetConfigurationsResponseBodyInstallationType$inboundSchema;
    /** @deprecated use `GetConfigurationsResponseBodyInstallationType$outboundSchema` instead. */
    GetConfigurationsResponseBodyInstallationType$.outboundSchema = GetConfigurationsResponseBodyInstallationType$outboundSchema;
})(GetConfigurationsResponseBodyInstallationType$ || (GetConfigurationsResponseBodyInstallationType$ = {}));
/** @internal */
export const GetConfigurationsResponseBody2$inboundSchema = z.object({
    integration: z.lazy(() => ResponseBodyIntegration$inboundSchema),
    completedAt: z.number().optional(),
    createdAt: z.number(),
    id: z.string(),
    integrationId: z.string(),
    ownerId: z.string(),
    projects: z.array(z.string()).optional(),
    source: GetConfigurationsResponseBodyIntegrationsSource$inboundSchema
        .optional(),
    slug: z.string(),
    teamId: z.nullable(z.string()).optional(),
    type: GetConfigurationsResponseBodyIntegrationsType$inboundSchema,
    updatedAt: z.number(),
    userId: z.string(),
    scopes: z.array(z.string()),
    disabledAt: z.number().optional(),
    deletedAt: z.nullable(z.number()).optional(),
    deleteRequestedAt: z.nullable(z.number()).optional(),
    disabledReason: ResponseBodyDisabledReason$inboundSchema.optional(),
    installationType: GetConfigurationsResponseBodyInstallationType$inboundSchema
        .optional(),
});
/** @internal */
export const GetConfigurationsResponseBody2$outboundSchema = z.object({
    integration: z.lazy(() => ResponseBodyIntegration$outboundSchema),
    completedAt: z.number().optional(),
    createdAt: z.number(),
    id: z.string(),
    integrationId: z.string(),
    ownerId: z.string(),
    projects: z.array(z.string()).optional(),
    source: GetConfigurationsResponseBodyIntegrationsSource$outboundSchema
        .optional(),
    slug: z.string(),
    teamId: z.nullable(z.string()).optional(),
    type: GetConfigurationsResponseBodyIntegrationsType$outboundSchema,
    updatedAt: z.number(),
    userId: z.string(),
    scopes: z.array(z.string()),
    disabledAt: z.number().optional(),
    deletedAt: z.nullable(z.number()).optional(),
    deleteRequestedAt: z.nullable(z.number()).optional(),
    disabledReason: ResponseBodyDisabledReason$outboundSchema.optional(),
    installationType: GetConfigurationsResponseBodyInstallationType$outboundSchema
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetConfigurationsResponseBody2$;
(function (GetConfigurationsResponseBody2$) {
    /** @deprecated use `GetConfigurationsResponseBody2$inboundSchema` instead. */
    GetConfigurationsResponseBody2$.inboundSchema = GetConfigurationsResponseBody2$inboundSchema;
    /** @deprecated use `GetConfigurationsResponseBody2$outboundSchema` instead. */
    GetConfigurationsResponseBody2$.outboundSchema = GetConfigurationsResponseBody2$outboundSchema;
})(GetConfigurationsResponseBody2$ || (GetConfigurationsResponseBody2$ = {}));
export function getConfigurationsResponseBody2ToJSON(getConfigurationsResponseBody2) {
    return JSON.stringify(GetConfigurationsResponseBody2$outboundSchema.parse(getConfigurationsResponseBody2));
}
export function getConfigurationsResponseBody2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetConfigurationsResponseBody2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetConfigurationsResponseBody2' from JSON`);
}
/** @internal */
export const GetConfigurationsResponseBodySource$inboundSchema = z.nativeEnum(GetConfigurationsResponseBodySource);
/** @internal */
export const GetConfigurationsResponseBodySource$outboundSchema = GetConfigurationsResponseBodySource$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetConfigurationsResponseBodySource$;
(function (GetConfigurationsResponseBodySource$) {
    /** @deprecated use `GetConfigurationsResponseBodySource$inboundSchema` instead. */
    GetConfigurationsResponseBodySource$.inboundSchema = GetConfigurationsResponseBodySource$inboundSchema;
    /** @deprecated use `GetConfigurationsResponseBodySource$outboundSchema` instead. */
    GetConfigurationsResponseBodySource$.outboundSchema = GetConfigurationsResponseBodySource$outboundSchema;
})(GetConfigurationsResponseBodySource$ || (GetConfigurationsResponseBodySource$ = {}));
/** @internal */
export const GetConfigurationsResponseBodyType$inboundSchema = z.nativeEnum(GetConfigurationsResponseBodyType);
/** @internal */
export const GetConfigurationsResponseBodyType$outboundSchema = GetConfigurationsResponseBodyType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetConfigurationsResponseBodyType$;
(function (GetConfigurationsResponseBodyType$) {
    /** @deprecated use `GetConfigurationsResponseBodyType$inboundSchema` instead. */
    GetConfigurationsResponseBodyType$.inboundSchema = GetConfigurationsResponseBodyType$inboundSchema;
    /** @deprecated use `GetConfigurationsResponseBodyType$outboundSchema` instead. */
    GetConfigurationsResponseBodyType$.outboundSchema = GetConfigurationsResponseBodyType$outboundSchema;
})(GetConfigurationsResponseBodyType$ || (GetConfigurationsResponseBodyType$ = {}));
/** @internal */
export const DisabledReason$inboundSchema = z.nativeEnum(DisabledReason);
/** @internal */
export const DisabledReason$outboundSchema = DisabledReason$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DisabledReason$;
(function (DisabledReason$) {
    /** @deprecated use `DisabledReason$inboundSchema` instead. */
    DisabledReason$.inboundSchema = DisabledReason$inboundSchema;
    /** @deprecated use `DisabledReason$outboundSchema` instead. */
    DisabledReason$.outboundSchema = DisabledReason$outboundSchema;
})(DisabledReason$ || (DisabledReason$ = {}));
/** @internal */
export const ResponseBodyInstallationType$inboundSchema = z.nativeEnum(ResponseBodyInstallationType);
/** @internal */
export const ResponseBodyInstallationType$outboundSchema = ResponseBodyInstallationType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyInstallationType$;
(function (ResponseBodyInstallationType$) {
    /** @deprecated use `ResponseBodyInstallationType$inboundSchema` instead. */
    ResponseBodyInstallationType$.inboundSchema = ResponseBodyInstallationType$inboundSchema;
    /** @deprecated use `ResponseBodyInstallationType$outboundSchema` instead. */
    ResponseBodyInstallationType$.outboundSchema = ResponseBodyInstallationType$outboundSchema;
})(ResponseBodyInstallationType$ || (ResponseBodyInstallationType$ = {}));
/** @internal */
export const GetConfigurationsResponseBody1$inboundSchema = z.object({
    completedAt: z.number().optional(),
    createdAt: z.number().optional(),
    id: z.string().optional(),
    integrationId: z.string().optional(),
    ownerId: z.string().optional(),
    projects: z.array(z.string()).optional(),
    source: GetConfigurationsResponseBodySource$inboundSchema.optional(),
    slug: z.string().optional(),
    teamId: z.nullable(z.string()).optional(),
    type: GetConfigurationsResponseBodyType$inboundSchema.optional(),
    updatedAt: z.number().optional(),
    userId: z.string().optional(),
    scopes: z.array(z.string()).optional(),
    disabledAt: z.number().optional(),
    deletedAt: z.nullable(z.number()).optional(),
    deleteRequestedAt: z.nullable(z.number()).optional(),
    disabledReason: DisabledReason$inboundSchema.optional(),
    installationType: ResponseBodyInstallationType$inboundSchema.optional(),
});
/** @internal */
export const GetConfigurationsResponseBody1$outboundSchema = z.object({
    completedAt: z.number().optional(),
    createdAt: z.number().optional(),
    id: z.string().optional(),
    integrationId: z.string().optional(),
    ownerId: z.string().optional(),
    projects: z.array(z.string()).optional(),
    source: GetConfigurationsResponseBodySource$outboundSchema.optional(),
    slug: z.string().optional(),
    teamId: z.nullable(z.string()).optional(),
    type: GetConfigurationsResponseBodyType$outboundSchema.optional(),
    updatedAt: z.number().optional(),
    userId: z.string().optional(),
    scopes: z.array(z.string()).optional(),
    disabledAt: z.number().optional(),
    deletedAt: z.nullable(z.number()).optional(),
    deleteRequestedAt: z.nullable(z.number()).optional(),
    disabledReason: DisabledReason$outboundSchema.optional(),
    installationType: ResponseBodyInstallationType$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetConfigurationsResponseBody1$;
(function (GetConfigurationsResponseBody1$) {
    /** @deprecated use `GetConfigurationsResponseBody1$inboundSchema` instead. */
    GetConfigurationsResponseBody1$.inboundSchema = GetConfigurationsResponseBody1$inboundSchema;
    /** @deprecated use `GetConfigurationsResponseBody1$outboundSchema` instead. */
    GetConfigurationsResponseBody1$.outboundSchema = GetConfigurationsResponseBody1$outboundSchema;
})(GetConfigurationsResponseBody1$ || (GetConfigurationsResponseBody1$ = {}));
export function getConfigurationsResponseBody1ToJSON(getConfigurationsResponseBody1) {
    return JSON.stringify(GetConfigurationsResponseBody1$outboundSchema.parse(getConfigurationsResponseBody1));
}
export function getConfigurationsResponseBody1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetConfigurationsResponseBody1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetConfigurationsResponseBody1' from JSON`);
}
/** @internal */
export const GetConfigurationsResponseBody$inboundSchema = z.union([
    z.array(z.lazy(() => GetConfigurationsResponseBody1$inboundSchema)),
    z.array(z.lazy(() => GetConfigurationsResponseBody2$inboundSchema)),
]);
/** @internal */
export const GetConfigurationsResponseBody$outboundSchema = z.union([
    z.array(z.lazy(() => GetConfigurationsResponseBody1$outboundSchema)),
    z.array(z.lazy(() => GetConfigurationsResponseBody2$outboundSchema)),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetConfigurationsResponseBody$;
(function (GetConfigurationsResponseBody$) {
    /** @deprecated use `GetConfigurationsResponseBody$inboundSchema` instead. */
    GetConfigurationsResponseBody$.inboundSchema = GetConfigurationsResponseBody$inboundSchema;
    /** @deprecated use `GetConfigurationsResponseBody$outboundSchema` instead. */
    GetConfigurationsResponseBody$.outboundSchema = GetConfigurationsResponseBody$outboundSchema;
})(GetConfigurationsResponseBody$ || (GetConfigurationsResponseBody$ = {}));
export function getConfigurationsResponseBodyToJSON(getConfigurationsResponseBody) {
    return JSON.stringify(GetConfigurationsResponseBody$outboundSchema.parse(getConfigurationsResponseBody));
}
export function getConfigurationsResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetConfigurationsResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetConfigurationsResponseBody' from JSON`);
}
//# sourceMappingURL=getconfigurationsop.js.map