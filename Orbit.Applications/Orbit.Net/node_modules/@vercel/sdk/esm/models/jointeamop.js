/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/** @internal */
export const JoinTeamRequestBody$inboundSchema = z.object({
    inviteCode: z.string().optional(),
});
/** @internal */
export const JoinTeamRequestBody$outboundSchema = z.object({
    inviteCode: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var JoinTeamRequestBody$;
(function (JoinTeamRequestBody$) {
    /** @deprecated use `JoinTeamRequestBody$inboundSchema` instead. */
    JoinTeamRequestBody$.inboundSchema = JoinTeamRequestBody$inboundSchema;
    /** @deprecated use `JoinTeamRequestBody$outboundSchema` instead. */
    JoinTeamRequestBody$.outboundSchema = JoinTeamRequestBody$outboundSchema;
})(JoinTeamRequestBody$ || (JoinTeamRequestBody$ = {}));
export function joinTeamRequestBodyToJSON(joinTeamRequestBody) {
    return JSON.stringify(JoinTeamRequestBody$outboundSchema.parse(joinTeamRequestBody));
}
export function joinTeamRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => JoinTeamRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JoinTeamRequestBody' from JSON`);
}
/** @internal */
export const JoinTeamRequest$inboundSchema = z.object({
    teamId: z.string(),
    RequestBody: z.lazy(() => JoinTeamRequestBody$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const JoinTeamRequest$outboundSchema = z.object({
    teamId: z.string(),
    requestBody: z.lazy(() => JoinTeamRequestBody$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var JoinTeamRequest$;
(function (JoinTeamRequest$) {
    /** @deprecated use `JoinTeamRequest$inboundSchema` instead. */
    JoinTeamRequest$.inboundSchema = JoinTeamRequest$inboundSchema;
    /** @deprecated use `JoinTeamRequest$outboundSchema` instead. */
    JoinTeamRequest$.outboundSchema = JoinTeamRequest$outboundSchema;
})(JoinTeamRequest$ || (JoinTeamRequest$ = {}));
export function joinTeamRequestToJSON(joinTeamRequest) {
    return JSON.stringify(JoinTeamRequest$outboundSchema.parse(joinTeamRequest));
}
export function joinTeamRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => JoinTeamRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JoinTeamRequest' from JSON`);
}
/** @internal */
export const JoinTeamResponseBody$inboundSchema = z.object({
    teamId: z.string(),
    slug: z.string(),
    name: z.string(),
    from: z.string(),
});
/** @internal */
export const JoinTeamResponseBody$outboundSchema = z.object({
    teamId: z.string(),
    slug: z.string(),
    name: z.string(),
    from: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var JoinTeamResponseBody$;
(function (JoinTeamResponseBody$) {
    /** @deprecated use `JoinTeamResponseBody$inboundSchema` instead. */
    JoinTeamResponseBody$.inboundSchema = JoinTeamResponseBody$inboundSchema;
    /** @deprecated use `JoinTeamResponseBody$outboundSchema` instead. */
    JoinTeamResponseBody$.outboundSchema = JoinTeamResponseBody$outboundSchema;
})(JoinTeamResponseBody$ || (JoinTeamResponseBody$ = {}));
export function joinTeamResponseBodyToJSON(joinTeamResponseBody) {
    return JSON.stringify(JoinTeamResponseBody$outboundSchema.parse(joinTeamResponseBody));
}
export function joinTeamResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => JoinTeamResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JoinTeamResponseBody' from JSON`);
}
//# sourceMappingURL=jointeamop.js.map