import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
/**
 * String indicating the type of file tree entry.
 */
export declare const Type: {
    readonly Directory: "directory";
    readonly File: "file";
    readonly Symlink: "symlink";
    readonly Lambda: "lambda";
    readonly Middleware: "middleware";
    readonly Invalid: "invalid";
};
/**
 * String indicating the type of file tree entry.
 */
export type Type = ClosedEnum<typeof Type>;
/**
 * A deployment file tree entry
 */
export type FileTree = {
    /**
     * The name of the file tree entry
     */
    name: string;
    /**
     * String indicating the type of file tree entry.
     */
    type: Type;
    /**
     * The unique identifier of the file (only valid for the `file` type)
     */
    uid?: string | undefined;
    /**
     * The list of children files of the directory (only valid for the `directory` type)
     */
    children?: Array<FileTree> | undefined;
    /**
     * The content-type of the file (only valid for the `file` type)
     */
    contentType?: string | undefined;
    /**
     * The file "mode" indicating file type and permissions.
     */
    mode: number;
    /**
     * Not currently used. See `file-list-to-tree.ts`.
     */
    symlink?: string | undefined;
};
/** @internal */
export declare const Type$inboundSchema: z.ZodNativeEnum<typeof Type>;
/** @internal */
export declare const Type$outboundSchema: z.ZodNativeEnum<typeof Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Type$ {
    /** @deprecated use `Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Directory: "directory";
        readonly File: "file";
        readonly Symlink: "symlink";
        readonly Lambda: "lambda";
        readonly Middleware: "middleware";
        readonly Invalid: "invalid";
    }>;
    /** @deprecated use `Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Directory: "directory";
        readonly File: "file";
        readonly Symlink: "symlink";
        readonly Lambda: "lambda";
        readonly Middleware: "middleware";
        readonly Invalid: "invalid";
    }>;
}
/** @internal */
export declare const FileTree$inboundSchema: z.ZodType<FileTree, z.ZodTypeDef, unknown>;
/** @internal */
export type FileTree$Outbound = {
    name: string;
    type: string;
    uid?: string | undefined;
    children?: Array<FileTree$Outbound> | undefined;
    contentType?: string | undefined;
    mode: number;
    symlink?: string | undefined;
};
/** @internal */
export declare const FileTree$outboundSchema: z.ZodType<FileTree$Outbound, z.ZodTypeDef, FileTree>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FileTree$ {
    /** @deprecated use `FileTree$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FileTree, z.ZodTypeDef, unknown>;
    /** @deprecated use `FileTree$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FileTree$Outbound, z.ZodTypeDef, FileTree>;
    /** @deprecated use `FileTree$Outbound` instead. */
    type Outbound = FileTree$Outbound;
}
export declare function fileTreeToJSON(fileTree: FileTree): string;
export declare function fileTreeFromJSON(jsonString: string): SafeParseResult<FileTree, SDKValidationError>;
//# sourceMappingURL=filetree.d.ts.map