import * as z from "zod";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type GetTeamRequest = {
    slug?: string | undefined;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId: string;
};
/** @internal */
export declare const GetTeamRequest$inboundSchema: z.ZodType<GetTeamRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetTeamRequest$Outbound = {
    slug?: string | undefined;
    teamId: string;
};
/** @internal */
export declare const GetTeamRequest$outboundSchema: z.ZodType<GetTeamRequest$Outbound, z.ZodTypeDef, GetTeamRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetTeamRequest$ {
    /** @deprecated use `GetTeamRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetTeamRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetTeamRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetTeamRequest$Outbound, z.ZodTypeDef, GetTeamRequest>;
    /** @deprecated use `GetTeamRequest$Outbound` instead. */
    type Outbound = GetTeamRequest$Outbound;
}
export declare function getTeamRequestToJSON(getTeamRequest: GetTeamRequest): string;
export declare function getTeamRequestFromJSON(jsonString: string): SafeParseResult<GetTeamRequest, SDKValidationError>;
//# sourceMappingURL=getteamop.d.ts.map