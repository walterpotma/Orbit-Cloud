import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
/**
 * Optional instructions for revoking and regenerating a automation bypass
 */
export type Revoke = {
    /**
     * Automation bypass to revoked
     */
    secret: string;
    /**
     * Whether or not a new automation bypass should be created after the provided secret is revoked
     */
    regenerate: boolean;
};
/**
 * Generate a new secret. If neither generate or revoke are provided, a new random secret will be generated.
 */
export type Generate = {
    /**
     * Optional value of the secret to generate, don't send it for oauth2 tokens
     */
    secret?: string | undefined;
};
export type UpdateProjectProtectionBypassRequestBody = {
    /**
     * Optional instructions for revoking and regenerating a automation bypass
     */
    revoke?: Revoke | undefined;
    /**
     * Generate a new secret. If neither generate or revoke are provided, a new random secret will be generated.
     */
    generate?: Generate | undefined;
};
export type UpdateProjectProtectionBypassRequest = {
    /**
     * The unique project identifier or the project name
     */
    idOrName: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody: UpdateProjectProtectionBypassRequestBody;
};
export declare const UpdateProjectProtectionBypassProtectionBypassProjectsScope: {
    readonly AutomationBypass: "automation-bypass";
};
export type UpdateProjectProtectionBypassProtectionBypassProjectsScope = ClosedEnum<typeof UpdateProjectProtectionBypassProtectionBypassProjectsScope>;
export type UpdateProjectProtectionBypassProtectionBypass2 = {
    createdAt: number;
    createdBy: string;
    scope: UpdateProjectProtectionBypassProtectionBypassProjectsScope;
};
export declare const UpdateProjectProtectionBypassProtectionBypassScope: {
    readonly IntegrationAutomationBypass: "integration-automation-bypass";
};
export type UpdateProjectProtectionBypassProtectionBypassScope = ClosedEnum<typeof UpdateProjectProtectionBypassProtectionBypassScope>;
export type UpdateProjectProtectionBypassProtectionBypass1 = {
    createdAt: number;
    createdBy: string;
    scope: UpdateProjectProtectionBypassProtectionBypassScope;
    integrationId: string;
    configurationId: string;
};
export type UpdateProjectProtectionBypassProtectionBypass = UpdateProjectProtectionBypassProtectionBypass1 | UpdateProjectProtectionBypassProtectionBypass2;
export type UpdateProjectProtectionBypassResponseBody = {
    protectionBypass?: {
        [k: string]: UpdateProjectProtectionBypassProtectionBypass1 | UpdateProjectProtectionBypassProtectionBypass2;
    } | undefined;
};
/** @internal */
export declare const Revoke$inboundSchema: z.ZodType<Revoke, z.ZodTypeDef, unknown>;
/** @internal */
export type Revoke$Outbound = {
    secret: string;
    regenerate: boolean;
};
/** @internal */
export declare const Revoke$outboundSchema: z.ZodType<Revoke$Outbound, z.ZodTypeDef, Revoke>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Revoke$ {
    /** @deprecated use `Revoke$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Revoke, z.ZodTypeDef, unknown>;
    /** @deprecated use `Revoke$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Revoke$Outbound, z.ZodTypeDef, Revoke>;
    /** @deprecated use `Revoke$Outbound` instead. */
    type Outbound = Revoke$Outbound;
}
export declare function revokeToJSON(revoke: Revoke): string;
export declare function revokeFromJSON(jsonString: string): SafeParseResult<Revoke, SDKValidationError>;
/** @internal */
export declare const Generate$inboundSchema: z.ZodType<Generate, z.ZodTypeDef, unknown>;
/** @internal */
export type Generate$Outbound = {
    secret?: string | undefined;
};
/** @internal */
export declare const Generate$outboundSchema: z.ZodType<Generate$Outbound, z.ZodTypeDef, Generate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Generate$ {
    /** @deprecated use `Generate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Generate, z.ZodTypeDef, unknown>;
    /** @deprecated use `Generate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Generate$Outbound, z.ZodTypeDef, Generate>;
    /** @deprecated use `Generate$Outbound` instead. */
    type Outbound = Generate$Outbound;
}
export declare function generateToJSON(generate: Generate): string;
export declare function generateFromJSON(jsonString: string): SafeParseResult<Generate, SDKValidationError>;
/** @internal */
export declare const UpdateProjectProtectionBypassRequestBody$inboundSchema: z.ZodType<UpdateProjectProtectionBypassRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectProtectionBypassRequestBody$Outbound = {
    revoke?: Revoke$Outbound | undefined;
    generate?: Generate$Outbound | undefined;
};
/** @internal */
export declare const UpdateProjectProtectionBypassRequestBody$outboundSchema: z.ZodType<UpdateProjectProtectionBypassRequestBody$Outbound, z.ZodTypeDef, UpdateProjectProtectionBypassRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProtectionBypassRequestBody$ {
    /** @deprecated use `UpdateProjectProtectionBypassRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectProtectionBypassRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectProtectionBypassRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectProtectionBypassRequestBody$Outbound, z.ZodTypeDef, UpdateProjectProtectionBypassRequestBody>;
    /** @deprecated use `UpdateProjectProtectionBypassRequestBody$Outbound` instead. */
    type Outbound = UpdateProjectProtectionBypassRequestBody$Outbound;
}
export declare function updateProjectProtectionBypassRequestBodyToJSON(updateProjectProtectionBypassRequestBody: UpdateProjectProtectionBypassRequestBody): string;
export declare function updateProjectProtectionBypassRequestBodyFromJSON(jsonString: string): SafeParseResult<UpdateProjectProtectionBypassRequestBody, SDKValidationError>;
/** @internal */
export declare const UpdateProjectProtectionBypassRequest$inboundSchema: z.ZodType<UpdateProjectProtectionBypassRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectProtectionBypassRequest$Outbound = {
    idOrName: string;
    teamId?: string | undefined;
    slug?: string | undefined;
    RequestBody: UpdateProjectProtectionBypassRequestBody$Outbound;
};
/** @internal */
export declare const UpdateProjectProtectionBypassRequest$outboundSchema: z.ZodType<UpdateProjectProtectionBypassRequest$Outbound, z.ZodTypeDef, UpdateProjectProtectionBypassRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProtectionBypassRequest$ {
    /** @deprecated use `UpdateProjectProtectionBypassRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectProtectionBypassRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectProtectionBypassRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectProtectionBypassRequest$Outbound, z.ZodTypeDef, UpdateProjectProtectionBypassRequest>;
    /** @deprecated use `UpdateProjectProtectionBypassRequest$Outbound` instead. */
    type Outbound = UpdateProjectProtectionBypassRequest$Outbound;
}
export declare function updateProjectProtectionBypassRequestToJSON(updateProjectProtectionBypassRequest: UpdateProjectProtectionBypassRequest): string;
export declare function updateProjectProtectionBypassRequestFromJSON(jsonString: string): SafeParseResult<UpdateProjectProtectionBypassRequest, SDKValidationError>;
/** @internal */
export declare const UpdateProjectProtectionBypassProtectionBypassProjectsScope$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectProtectionBypassProtectionBypassProjectsScope>;
/** @internal */
export declare const UpdateProjectProtectionBypassProtectionBypassProjectsScope$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectProtectionBypassProtectionBypassProjectsScope>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProtectionBypassProtectionBypassProjectsScope$ {
    /** @deprecated use `UpdateProjectProtectionBypassProtectionBypassProjectsScope$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly AutomationBypass: "automation-bypass";
    }>;
    /** @deprecated use `UpdateProjectProtectionBypassProtectionBypassProjectsScope$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly AutomationBypass: "automation-bypass";
    }>;
}
/** @internal */
export declare const UpdateProjectProtectionBypassProtectionBypass2$inboundSchema: z.ZodType<UpdateProjectProtectionBypassProtectionBypass2, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectProtectionBypassProtectionBypass2$Outbound = {
    createdAt: number;
    createdBy: string;
    scope: string;
};
/** @internal */
export declare const UpdateProjectProtectionBypassProtectionBypass2$outboundSchema: z.ZodType<UpdateProjectProtectionBypassProtectionBypass2$Outbound, z.ZodTypeDef, UpdateProjectProtectionBypassProtectionBypass2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProtectionBypassProtectionBypass2$ {
    /** @deprecated use `UpdateProjectProtectionBypassProtectionBypass2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectProtectionBypassProtectionBypass2, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectProtectionBypassProtectionBypass2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectProtectionBypassProtectionBypass2$Outbound, z.ZodTypeDef, UpdateProjectProtectionBypassProtectionBypass2>;
    /** @deprecated use `UpdateProjectProtectionBypassProtectionBypass2$Outbound` instead. */
    type Outbound = UpdateProjectProtectionBypassProtectionBypass2$Outbound;
}
export declare function updateProjectProtectionBypassProtectionBypass2ToJSON(updateProjectProtectionBypassProtectionBypass2: UpdateProjectProtectionBypassProtectionBypass2): string;
export declare function updateProjectProtectionBypassProtectionBypass2FromJSON(jsonString: string): SafeParseResult<UpdateProjectProtectionBypassProtectionBypass2, SDKValidationError>;
/** @internal */
export declare const UpdateProjectProtectionBypassProtectionBypassScope$inboundSchema: z.ZodNativeEnum<typeof UpdateProjectProtectionBypassProtectionBypassScope>;
/** @internal */
export declare const UpdateProjectProtectionBypassProtectionBypassScope$outboundSchema: z.ZodNativeEnum<typeof UpdateProjectProtectionBypassProtectionBypassScope>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProtectionBypassProtectionBypassScope$ {
    /** @deprecated use `UpdateProjectProtectionBypassProtectionBypassScope$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly IntegrationAutomationBypass: "integration-automation-bypass";
    }>;
    /** @deprecated use `UpdateProjectProtectionBypassProtectionBypassScope$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly IntegrationAutomationBypass: "integration-automation-bypass";
    }>;
}
/** @internal */
export declare const UpdateProjectProtectionBypassProtectionBypass1$inboundSchema: z.ZodType<UpdateProjectProtectionBypassProtectionBypass1, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectProtectionBypassProtectionBypass1$Outbound = {
    createdAt: number;
    createdBy: string;
    scope: string;
    integrationId: string;
    configurationId: string;
};
/** @internal */
export declare const UpdateProjectProtectionBypassProtectionBypass1$outboundSchema: z.ZodType<UpdateProjectProtectionBypassProtectionBypass1$Outbound, z.ZodTypeDef, UpdateProjectProtectionBypassProtectionBypass1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProtectionBypassProtectionBypass1$ {
    /** @deprecated use `UpdateProjectProtectionBypassProtectionBypass1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectProtectionBypassProtectionBypass1, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectProtectionBypassProtectionBypass1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectProtectionBypassProtectionBypass1$Outbound, z.ZodTypeDef, UpdateProjectProtectionBypassProtectionBypass1>;
    /** @deprecated use `UpdateProjectProtectionBypassProtectionBypass1$Outbound` instead. */
    type Outbound = UpdateProjectProtectionBypassProtectionBypass1$Outbound;
}
export declare function updateProjectProtectionBypassProtectionBypass1ToJSON(updateProjectProtectionBypassProtectionBypass1: UpdateProjectProtectionBypassProtectionBypass1): string;
export declare function updateProjectProtectionBypassProtectionBypass1FromJSON(jsonString: string): SafeParseResult<UpdateProjectProtectionBypassProtectionBypass1, SDKValidationError>;
/** @internal */
export declare const UpdateProjectProtectionBypassProtectionBypass$inboundSchema: z.ZodType<UpdateProjectProtectionBypassProtectionBypass, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectProtectionBypassProtectionBypass$Outbound = UpdateProjectProtectionBypassProtectionBypass1$Outbound | UpdateProjectProtectionBypassProtectionBypass2$Outbound;
/** @internal */
export declare const UpdateProjectProtectionBypassProtectionBypass$outboundSchema: z.ZodType<UpdateProjectProtectionBypassProtectionBypass$Outbound, z.ZodTypeDef, UpdateProjectProtectionBypassProtectionBypass>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProtectionBypassProtectionBypass$ {
    /** @deprecated use `UpdateProjectProtectionBypassProtectionBypass$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectProtectionBypassProtectionBypass, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectProtectionBypassProtectionBypass$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectProtectionBypassProtectionBypass$Outbound, z.ZodTypeDef, UpdateProjectProtectionBypassProtectionBypass>;
    /** @deprecated use `UpdateProjectProtectionBypassProtectionBypass$Outbound` instead. */
    type Outbound = UpdateProjectProtectionBypassProtectionBypass$Outbound;
}
export declare function updateProjectProtectionBypassProtectionBypassToJSON(updateProjectProtectionBypassProtectionBypass: UpdateProjectProtectionBypassProtectionBypass): string;
export declare function updateProjectProtectionBypassProtectionBypassFromJSON(jsonString: string): SafeParseResult<UpdateProjectProtectionBypassProtectionBypass, SDKValidationError>;
/** @internal */
export declare const UpdateProjectProtectionBypassResponseBody$inboundSchema: z.ZodType<UpdateProjectProtectionBypassResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectProtectionBypassResponseBody$Outbound = {
    protectionBypass?: {
        [k: string]: UpdateProjectProtectionBypassProtectionBypass1$Outbound | UpdateProjectProtectionBypassProtectionBypass2$Outbound;
    } | undefined;
};
/** @internal */
export declare const UpdateProjectProtectionBypassResponseBody$outboundSchema: z.ZodType<UpdateProjectProtectionBypassResponseBody$Outbound, z.ZodTypeDef, UpdateProjectProtectionBypassResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectProtectionBypassResponseBody$ {
    /** @deprecated use `UpdateProjectProtectionBypassResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectProtectionBypassResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectProtectionBypassResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectProtectionBypassResponseBody$Outbound, z.ZodTypeDef, UpdateProjectProtectionBypassResponseBody>;
    /** @deprecated use `UpdateProjectProtectionBypassResponseBody$Outbound` instead. */
    type Outbound = UpdateProjectProtectionBypassResponseBody$Outbound;
}
export declare function updateProjectProtectionBypassResponseBodyToJSON(updateProjectProtectionBypassResponseBody: UpdateProjectProtectionBypassResponseBody): string;
export declare function updateProjectProtectionBypassResponseBodyFromJSON(jsonString: string): SafeParseResult<UpdateProjectProtectionBypassResponseBody, SDKValidationError>;
//# sourceMappingURL=updateprojectprotectionbypassop.d.ts.map