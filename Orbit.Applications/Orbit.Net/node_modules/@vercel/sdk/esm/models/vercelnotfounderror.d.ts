import * as z from "zod";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
import { VercelError } from "./vercelerror.js";
export type VercelNotFoundErrorError = {
    code: string;
    message: string;
};
export type VercelNotFoundErrorData = {
    error: VercelNotFoundErrorError;
};
export declare class VercelNotFoundError extends VercelError {
    error: VercelNotFoundErrorError;
    /** The original data that was passed to this error instance. */
    data$: VercelNotFoundErrorData;
    constructor(err: VercelNotFoundErrorData, httpMeta: {
        response: Response;
        request: Request;
        body: string;
    });
}
/** @internal */
export declare const VercelNotFoundErrorError$inboundSchema: z.ZodType<VercelNotFoundErrorError, z.ZodTypeDef, unknown>;
/** @internal */
export type VercelNotFoundErrorError$Outbound = {
    code: string;
    message: string;
};
/** @internal */
export declare const VercelNotFoundErrorError$outboundSchema: z.ZodType<VercelNotFoundErrorError$Outbound, z.ZodTypeDef, VercelNotFoundErrorError>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace VercelNotFoundErrorError$ {
    /** @deprecated use `VercelNotFoundErrorError$inboundSchema` instead. */
    const inboundSchema: z.ZodType<VercelNotFoundErrorError, z.ZodTypeDef, unknown>;
    /** @deprecated use `VercelNotFoundErrorError$outboundSchema` instead. */
    const outboundSchema: z.ZodType<VercelNotFoundErrorError$Outbound, z.ZodTypeDef, VercelNotFoundErrorError>;
    /** @deprecated use `VercelNotFoundErrorError$Outbound` instead. */
    type Outbound = VercelNotFoundErrorError$Outbound;
}
export declare function vercelNotFoundErrorErrorToJSON(vercelNotFoundErrorError: VercelNotFoundErrorError): string;
export declare function vercelNotFoundErrorErrorFromJSON(jsonString: string): SafeParseResult<VercelNotFoundErrorError, SDKValidationError>;
/** @internal */
export declare const VercelNotFoundError$inboundSchema: z.ZodType<VercelNotFoundError, z.ZodTypeDef, unknown>;
/** @internal */
export type VercelNotFoundError$Outbound = {
    error: VercelNotFoundErrorError$Outbound;
};
/** @internal */
export declare const VercelNotFoundError$outboundSchema: z.ZodType<VercelNotFoundError$Outbound, z.ZodTypeDef, VercelNotFoundError>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace VercelNotFoundError$ {
    /** @deprecated use `VercelNotFoundError$inboundSchema` instead. */
    const inboundSchema: z.ZodType<VercelNotFoundError, z.ZodTypeDef, unknown>;
    /** @deprecated use `VercelNotFoundError$outboundSchema` instead. */
    const outboundSchema: z.ZodType<VercelNotFoundError$Outbound, z.ZodTypeDef, VercelNotFoundError>;
    /** @deprecated use `VercelNotFoundError$Outbound` instead. */
    type Outbound = VercelNotFoundError$Outbound;
}
//# sourceMappingURL=vercelnotfounderror.d.ts.map