/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
export const GetTeamAccessRequestOrigin = {
    Link: "link",
    Mail: "mail",
    Import: "import",
    Teams: "teams",
    Github: "github",
    Gitlab: "gitlab",
    Bitbucket: "bitbucket",
    Saml: "saml",
    Dsync: "dsync",
    Feedback: "feedback",
    OrganizationTeams: "organization-teams",
};
/** @internal */
export const GetTeamAccessRequestRequest$inboundSchema = z.object({
    userId: z.string(),
    teamId: z.string(),
});
/** @internal */
export const GetTeamAccessRequestRequest$outboundSchema = z.object({
    userId: z.string(),
    teamId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetTeamAccessRequestRequest$;
(function (GetTeamAccessRequestRequest$) {
    /** @deprecated use `GetTeamAccessRequestRequest$inboundSchema` instead. */
    GetTeamAccessRequestRequest$.inboundSchema = GetTeamAccessRequestRequest$inboundSchema;
    /** @deprecated use `GetTeamAccessRequestRequest$outboundSchema` instead. */
    GetTeamAccessRequestRequest$.outboundSchema = GetTeamAccessRequestRequest$outboundSchema;
})(GetTeamAccessRequestRequest$ || (GetTeamAccessRequestRequest$ = {}));
export function getTeamAccessRequestRequestToJSON(getTeamAccessRequestRequest) {
    return JSON.stringify(GetTeamAccessRequestRequest$outboundSchema.parse(getTeamAccessRequestRequest));
}
export function getTeamAccessRequestRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetTeamAccessRequestRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetTeamAccessRequestRequest' from JSON`);
}
/** @internal */
export const GetTeamAccessRequestOrigin$inboundSchema = z.nativeEnum(GetTeamAccessRequestOrigin);
/** @internal */
export const GetTeamAccessRequestOrigin$outboundSchema = GetTeamAccessRequestOrigin$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetTeamAccessRequestOrigin$;
(function (GetTeamAccessRequestOrigin$) {
    /** @deprecated use `GetTeamAccessRequestOrigin$inboundSchema` instead. */
    GetTeamAccessRequestOrigin$.inboundSchema = GetTeamAccessRequestOrigin$inboundSchema;
    /** @deprecated use `GetTeamAccessRequestOrigin$outboundSchema` instead. */
    GetTeamAccessRequestOrigin$.outboundSchema = GetTeamAccessRequestOrigin$outboundSchema;
})(GetTeamAccessRequestOrigin$ || (GetTeamAccessRequestOrigin$ = {}));
/** @internal */
export const GetTeamAccessRequestGitUserId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const GetTeamAccessRequestGitUserId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetTeamAccessRequestGitUserId$;
(function (GetTeamAccessRequestGitUserId$) {
    /** @deprecated use `GetTeamAccessRequestGitUserId$inboundSchema` instead. */
    GetTeamAccessRequestGitUserId$.inboundSchema = GetTeamAccessRequestGitUserId$inboundSchema;
    /** @deprecated use `GetTeamAccessRequestGitUserId$outboundSchema` instead. */
    GetTeamAccessRequestGitUserId$.outboundSchema = GetTeamAccessRequestGitUserId$outboundSchema;
})(GetTeamAccessRequestGitUserId$ || (GetTeamAccessRequestGitUserId$ = {}));
export function getTeamAccessRequestGitUserIdToJSON(getTeamAccessRequestGitUserId) {
    return JSON.stringify(GetTeamAccessRequestGitUserId$outboundSchema.parse(getTeamAccessRequestGitUserId));
}
export function getTeamAccessRequestGitUserIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetTeamAccessRequestGitUserId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetTeamAccessRequestGitUserId' from JSON`);
}
/** @internal */
export const GetTeamAccessRequestJoinedFrom$inboundSchema = z.object({
    origin: GetTeamAccessRequestOrigin$inboundSchema,
    commitId: z.string().optional(),
    repoId: z.string().optional(),
    repoPath: z.string().optional(),
    gitUserId: z.union([z.string(), z.number()]).optional(),
    gitUserLogin: z.string().optional(),
    ssoUserId: z.string().optional(),
    ssoConnectedAt: z.number().optional(),
    idpUserId: z.string().optional(),
    dsyncUserId: z.string().optional(),
    dsyncConnectedAt: z.number().optional(),
});
/** @internal */
export const GetTeamAccessRequestJoinedFrom$outboundSchema = z.object({
    origin: GetTeamAccessRequestOrigin$outboundSchema,
    commitId: z.string().optional(),
    repoId: z.string().optional(),
    repoPath: z.string().optional(),
    gitUserId: z.union([z.string(), z.number()]).optional(),
    gitUserLogin: z.string().optional(),
    ssoUserId: z.string().optional(),
    ssoConnectedAt: z.number().optional(),
    idpUserId: z.string().optional(),
    dsyncUserId: z.string().optional(),
    dsyncConnectedAt: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetTeamAccessRequestJoinedFrom$;
(function (GetTeamAccessRequestJoinedFrom$) {
    /** @deprecated use `GetTeamAccessRequestJoinedFrom$inboundSchema` instead. */
    GetTeamAccessRequestJoinedFrom$.inboundSchema = GetTeamAccessRequestJoinedFrom$inboundSchema;
    /** @deprecated use `GetTeamAccessRequestJoinedFrom$outboundSchema` instead. */
    GetTeamAccessRequestJoinedFrom$.outboundSchema = GetTeamAccessRequestJoinedFrom$outboundSchema;
})(GetTeamAccessRequestJoinedFrom$ || (GetTeamAccessRequestJoinedFrom$ = {}));
export function getTeamAccessRequestJoinedFromToJSON(getTeamAccessRequestJoinedFrom) {
    return JSON.stringify(GetTeamAccessRequestJoinedFrom$outboundSchema.parse(getTeamAccessRequestJoinedFrom));
}
export function getTeamAccessRequestJoinedFromFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetTeamAccessRequestJoinedFrom$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetTeamAccessRequestJoinedFrom' from JSON`);
}
/** @internal */
export const GetTeamAccessRequestGithub$inboundSchema = z.object({
    login: z.string().optional(),
});
/** @internal */
export const GetTeamAccessRequestGithub$outboundSchema = z.object({
    login: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetTeamAccessRequestGithub$;
(function (GetTeamAccessRequestGithub$) {
    /** @deprecated use `GetTeamAccessRequestGithub$inboundSchema` instead. */
    GetTeamAccessRequestGithub$.inboundSchema = GetTeamAccessRequestGithub$inboundSchema;
    /** @deprecated use `GetTeamAccessRequestGithub$outboundSchema` instead. */
    GetTeamAccessRequestGithub$.outboundSchema = GetTeamAccessRequestGithub$outboundSchema;
})(GetTeamAccessRequestGithub$ || (GetTeamAccessRequestGithub$ = {}));
export function getTeamAccessRequestGithubToJSON(getTeamAccessRequestGithub) {
    return JSON.stringify(GetTeamAccessRequestGithub$outboundSchema.parse(getTeamAccessRequestGithub));
}
export function getTeamAccessRequestGithubFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetTeamAccessRequestGithub$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetTeamAccessRequestGithub' from JSON`);
}
/** @internal */
export const GetTeamAccessRequestGitlab$inboundSchema = z.object({
    login: z.string().optional(),
});
/** @internal */
export const GetTeamAccessRequestGitlab$outboundSchema = z.object({
    login: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetTeamAccessRequestGitlab$;
(function (GetTeamAccessRequestGitlab$) {
    /** @deprecated use `GetTeamAccessRequestGitlab$inboundSchema` instead. */
    GetTeamAccessRequestGitlab$.inboundSchema = GetTeamAccessRequestGitlab$inboundSchema;
    /** @deprecated use `GetTeamAccessRequestGitlab$outboundSchema` instead. */
    GetTeamAccessRequestGitlab$.outboundSchema = GetTeamAccessRequestGitlab$outboundSchema;
})(GetTeamAccessRequestGitlab$ || (GetTeamAccessRequestGitlab$ = {}));
export function getTeamAccessRequestGitlabToJSON(getTeamAccessRequestGitlab) {
    return JSON.stringify(GetTeamAccessRequestGitlab$outboundSchema.parse(getTeamAccessRequestGitlab));
}
export function getTeamAccessRequestGitlabFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetTeamAccessRequestGitlab$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetTeamAccessRequestGitlab' from JSON`);
}
/** @internal */
export const GetTeamAccessRequestBitbucket$inboundSchema = z.object({
    login: z.string().optional(),
});
/** @internal */
export const GetTeamAccessRequestBitbucket$outboundSchema = z.object({
    login: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetTeamAccessRequestBitbucket$;
(function (GetTeamAccessRequestBitbucket$) {
    /** @deprecated use `GetTeamAccessRequestBitbucket$inboundSchema` instead. */
    GetTeamAccessRequestBitbucket$.inboundSchema = GetTeamAccessRequestBitbucket$inboundSchema;
    /** @deprecated use `GetTeamAccessRequestBitbucket$outboundSchema` instead. */
    GetTeamAccessRequestBitbucket$.outboundSchema = GetTeamAccessRequestBitbucket$outboundSchema;
})(GetTeamAccessRequestBitbucket$ || (GetTeamAccessRequestBitbucket$ = {}));
export function getTeamAccessRequestBitbucketToJSON(getTeamAccessRequestBitbucket) {
    return JSON.stringify(GetTeamAccessRequestBitbucket$outboundSchema.parse(getTeamAccessRequestBitbucket));
}
export function getTeamAccessRequestBitbucketFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetTeamAccessRequestBitbucket$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetTeamAccessRequestBitbucket' from JSON`);
}
/** @internal */
export const GetTeamAccessRequestResponseBody$inboundSchema = z.object({
    teamSlug: z.string(),
    teamName: z.string(),
    confirmed: z.boolean(),
    joinedFrom: z.lazy(() => GetTeamAccessRequestJoinedFrom$inboundSchema),
    accessRequestedAt: z.number(),
    github: z.nullable(z.lazy(() => GetTeamAccessRequestGithub$inboundSchema)),
    gitlab: z.nullable(z.lazy(() => GetTeamAccessRequestGitlab$inboundSchema)),
    bitbucket: z.nullable(z.lazy(() => GetTeamAccessRequestBitbucket$inboundSchema)),
});
/** @internal */
export const GetTeamAccessRequestResponseBody$outboundSchema = z.object({
    teamSlug: z.string(),
    teamName: z.string(),
    confirmed: z.boolean(),
    joinedFrom: z.lazy(() => GetTeamAccessRequestJoinedFrom$outboundSchema),
    accessRequestedAt: z.number(),
    github: z.nullable(z.lazy(() => GetTeamAccessRequestGithub$outboundSchema)),
    gitlab: z.nullable(z.lazy(() => GetTeamAccessRequestGitlab$outboundSchema)),
    bitbucket: z.nullable(z.lazy(() => GetTeamAccessRequestBitbucket$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetTeamAccessRequestResponseBody$;
(function (GetTeamAccessRequestResponseBody$) {
    /** @deprecated use `GetTeamAccessRequestResponseBody$inboundSchema` instead. */
    GetTeamAccessRequestResponseBody$.inboundSchema = GetTeamAccessRequestResponseBody$inboundSchema;
    /** @deprecated use `GetTeamAccessRequestResponseBody$outboundSchema` instead. */
    GetTeamAccessRequestResponseBody$.outboundSchema = GetTeamAccessRequestResponseBody$outboundSchema;
})(GetTeamAccessRequestResponseBody$ || (GetTeamAccessRequestResponseBody$ = {}));
export function getTeamAccessRequestResponseBodyToJSON(getTeamAccessRequestResponseBody) {
    return JSON.stringify(GetTeamAccessRequestResponseBody$outboundSchema.parse(getTeamAccessRequestResponseBody));
}
export function getTeamAccessRequestResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetTeamAccessRequestResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetTeamAccessRequestResponseBody' from JSON`);
}
//# sourceMappingURL=getteamaccessrequestop.js.map