/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/**
 * The current status of the check
 */
export const Status = {
    Running: "running",
    Completed: "completed",
};
/**
 * The result of the check being run
 */
export const Conclusion = {
    Canceled: "canceled",
    Failed: "failed",
    Neutral: "neutral",
    Succeeded: "succeeded",
    Skipped: "skipped",
};
export const UpdateCheckSource = {
    WebVitals: "web-vitals",
};
export const UpdateCheckChecksSource = {
    WebVitals: "web-vitals",
};
export const UpdateCheckChecksRequestSource = {
    WebVitals: "web-vitals",
};
export const UpdateCheckChecksRequestRequestBodySource = {
    WebVitals: "web-vitals",
};
export const UpdateCheckChecksRequestRequestBodyOutputSource = {
    WebVitals: "web-vitals",
};
export const UpdateCheckStatus = {
    Registered: "registered",
    Running: "running",
    Completed: "completed",
};
export const UpdateCheckConclusion = {
    Canceled: "canceled",
    Failed: "failed",
    Neutral: "neutral",
    Succeeded: "succeeded",
    Skipped: "skipped",
    Stale: "stale",
};
export const UpdateCheckChecksResponseSource = {
    WebVitals: "web-vitals",
};
export const UpdateCheckChecksResponse200Source = {
    WebVitals: "web-vitals",
};
export const UpdateCheckChecksResponse200ApplicationJSONSource = {
    WebVitals: "web-vitals",
};
export const UpdateCheckChecksResponse200ApplicationJSONResponseBodySource = {
    WebVitals: "web-vitals",
};
export const UpdateCheckChecksResponse200ApplicationJSONResponseBodyOutputSource = {
    WebVitals: "web-vitals",
};
/** @internal */
export const Status$inboundSchema = z
    .nativeEnum(Status);
/** @internal */
export const Status$outboundSchema = Status$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Status$;
(function (Status$) {
    /** @deprecated use `Status$inboundSchema` instead. */
    Status$.inboundSchema = Status$inboundSchema;
    /** @deprecated use `Status$outboundSchema` instead. */
    Status$.outboundSchema = Status$outboundSchema;
})(Status$ || (Status$ = {}));
/** @internal */
export const Conclusion$inboundSchema = z
    .nativeEnum(Conclusion);
/** @internal */
export const Conclusion$outboundSchema = Conclusion$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Conclusion$;
(function (Conclusion$) {
    /** @deprecated use `Conclusion$inboundSchema` instead. */
    Conclusion$.inboundSchema = Conclusion$inboundSchema;
    /** @deprecated use `Conclusion$outboundSchema` instead. */
    Conclusion$.outboundSchema = Conclusion$outboundSchema;
})(Conclusion$ || (Conclusion$ = {}));
/** @internal */
export const UpdateCheckSource$inboundSchema = z.nativeEnum(UpdateCheckSource);
/** @internal */
export const UpdateCheckSource$outboundSchema = UpdateCheckSource$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateCheckSource$;
(function (UpdateCheckSource$) {
    /** @deprecated use `UpdateCheckSource$inboundSchema` instead. */
    UpdateCheckSource$.inboundSchema = UpdateCheckSource$inboundSchema;
    /** @deprecated use `UpdateCheckSource$outboundSchema` instead. */
    UpdateCheckSource$.outboundSchema = UpdateCheckSource$outboundSchema;
})(UpdateCheckSource$ || (UpdateCheckSource$ = {}));
/** @internal */
export const Fcp$inboundSchema = z
    .object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: UpdateCheckSource$inboundSchema,
});
/** @internal */
export const Fcp$outboundSchema = z
    .object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: UpdateCheckSource$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Fcp$;
(function (Fcp$) {
    /** @deprecated use `Fcp$inboundSchema` instead. */
    Fcp$.inboundSchema = Fcp$inboundSchema;
    /** @deprecated use `Fcp$outboundSchema` instead. */
    Fcp$.outboundSchema = Fcp$outboundSchema;
})(Fcp$ || (Fcp$ = {}));
export function fcpToJSON(fcp) {
    return JSON.stringify(Fcp$outboundSchema.parse(fcp));
}
export function fcpFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Fcp$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Fcp' from JSON`);
}
/** @internal */
export const UpdateCheckChecksSource$inboundSchema = z.nativeEnum(UpdateCheckChecksSource);
/** @internal */
export const UpdateCheckChecksSource$outboundSchema = UpdateCheckChecksSource$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateCheckChecksSource$;
(function (UpdateCheckChecksSource$) {
    /** @deprecated use `UpdateCheckChecksSource$inboundSchema` instead. */
    UpdateCheckChecksSource$.inboundSchema = UpdateCheckChecksSource$inboundSchema;
    /** @deprecated use `UpdateCheckChecksSource$outboundSchema` instead. */
    UpdateCheckChecksSource$.outboundSchema = UpdateCheckChecksSource$outboundSchema;
})(UpdateCheckChecksSource$ || (UpdateCheckChecksSource$ = {}));
/** @internal */
export const Lcp$inboundSchema = z
    .object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: UpdateCheckChecksSource$inboundSchema,
});
/** @internal */
export const Lcp$outboundSchema = z
    .object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: UpdateCheckChecksSource$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Lcp$;
(function (Lcp$) {
    /** @deprecated use `Lcp$inboundSchema` instead. */
    Lcp$.inboundSchema = Lcp$inboundSchema;
    /** @deprecated use `Lcp$outboundSchema` instead. */
    Lcp$.outboundSchema = Lcp$outboundSchema;
})(Lcp$ || (Lcp$ = {}));
export function lcpToJSON(lcp) {
    return JSON.stringify(Lcp$outboundSchema.parse(lcp));
}
export function lcpFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Lcp$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Lcp' from JSON`);
}
/** @internal */
export const UpdateCheckChecksRequestSource$inboundSchema = z.nativeEnum(UpdateCheckChecksRequestSource);
/** @internal */
export const UpdateCheckChecksRequestSource$outboundSchema = UpdateCheckChecksRequestSource$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateCheckChecksRequestSource$;
(function (UpdateCheckChecksRequestSource$) {
    /** @deprecated use `UpdateCheckChecksRequestSource$inboundSchema` instead. */
    UpdateCheckChecksRequestSource$.inboundSchema = UpdateCheckChecksRequestSource$inboundSchema;
    /** @deprecated use `UpdateCheckChecksRequestSource$outboundSchema` instead. */
    UpdateCheckChecksRequestSource$.outboundSchema = UpdateCheckChecksRequestSource$outboundSchema;
})(UpdateCheckChecksRequestSource$ || (UpdateCheckChecksRequestSource$ = {}));
/** @internal */
export const Cls$inboundSchema = z
    .object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: UpdateCheckChecksRequestSource$inboundSchema,
});
/** @internal */
export const Cls$outboundSchema = z
    .object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: UpdateCheckChecksRequestSource$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Cls$;
(function (Cls$) {
    /** @deprecated use `Cls$inboundSchema` instead. */
    Cls$.inboundSchema = Cls$inboundSchema;
    /** @deprecated use `Cls$outboundSchema` instead. */
    Cls$.outboundSchema = Cls$outboundSchema;
})(Cls$ || (Cls$ = {}));
export function clsToJSON(cls) {
    return JSON.stringify(Cls$outboundSchema.parse(cls));
}
export function clsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Cls$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Cls' from JSON`);
}
/** @internal */
export const UpdateCheckChecksRequestRequestBodySource$inboundSchema = z
    .nativeEnum(UpdateCheckChecksRequestRequestBodySource);
/** @internal */
export const UpdateCheckChecksRequestRequestBodySource$outboundSchema = UpdateCheckChecksRequestRequestBodySource$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateCheckChecksRequestRequestBodySource$;
(function (UpdateCheckChecksRequestRequestBodySource$) {
    /** @deprecated use `UpdateCheckChecksRequestRequestBodySource$inboundSchema` instead. */
    UpdateCheckChecksRequestRequestBodySource$.inboundSchema = UpdateCheckChecksRequestRequestBodySource$inboundSchema;
    /** @deprecated use `UpdateCheckChecksRequestRequestBodySource$outboundSchema` instead. */
    UpdateCheckChecksRequestRequestBodySource$.outboundSchema = UpdateCheckChecksRequestRequestBodySource$outboundSchema;
})(UpdateCheckChecksRequestRequestBodySource$ || (UpdateCheckChecksRequestRequestBodySource$ = {}));
/** @internal */
export const Tbt$inboundSchema = z
    .object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: UpdateCheckChecksRequestRequestBodySource$inboundSchema,
});
/** @internal */
export const Tbt$outboundSchema = z
    .object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: UpdateCheckChecksRequestRequestBodySource$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Tbt$;
(function (Tbt$) {
    /** @deprecated use `Tbt$inboundSchema` instead. */
    Tbt$.inboundSchema = Tbt$inboundSchema;
    /** @deprecated use `Tbt$outboundSchema` instead. */
    Tbt$.outboundSchema = Tbt$outboundSchema;
})(Tbt$ || (Tbt$ = {}));
export function tbtToJSON(tbt) {
    return JSON.stringify(Tbt$outboundSchema.parse(tbt));
}
export function tbtFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Tbt$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Tbt' from JSON`);
}
/** @internal */
export const UpdateCheckChecksRequestRequestBodyOutputSource$inboundSchema = z
    .nativeEnum(UpdateCheckChecksRequestRequestBodyOutputSource);
/** @internal */
export const UpdateCheckChecksRequestRequestBodyOutputSource$outboundSchema = UpdateCheckChecksRequestRequestBodyOutputSource$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateCheckChecksRequestRequestBodyOutputSource$;
(function (UpdateCheckChecksRequestRequestBodyOutputSource$) {
    /** @deprecated use `UpdateCheckChecksRequestRequestBodyOutputSource$inboundSchema` instead. */
    UpdateCheckChecksRequestRequestBodyOutputSource$.inboundSchema = UpdateCheckChecksRequestRequestBodyOutputSource$inboundSchema;
    /** @deprecated use `UpdateCheckChecksRequestRequestBodyOutputSource$outboundSchema` instead. */
    UpdateCheckChecksRequestRequestBodyOutputSource$.outboundSchema = UpdateCheckChecksRequestRequestBodyOutputSource$outboundSchema;
})(UpdateCheckChecksRequestRequestBodyOutputSource$ || (UpdateCheckChecksRequestRequestBodyOutputSource$ = {}));
/** @internal */
export const VirtualExperienceScore$inboundSchema = z.object({
    value: z.nullable(z.number().int()),
    previousValue: z.number().int().optional(),
    source: UpdateCheckChecksRequestRequestBodyOutputSource$inboundSchema,
});
/** @internal */
export const VirtualExperienceScore$outboundSchema = z.object({
    value: z.nullable(z.number().int()),
    previousValue: z.number().int().optional(),
    source: UpdateCheckChecksRequestRequestBodyOutputSource$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var VirtualExperienceScore$;
(function (VirtualExperienceScore$) {
    /** @deprecated use `VirtualExperienceScore$inboundSchema` instead. */
    VirtualExperienceScore$.inboundSchema = VirtualExperienceScore$inboundSchema;
    /** @deprecated use `VirtualExperienceScore$outboundSchema` instead. */
    VirtualExperienceScore$.outboundSchema = VirtualExperienceScore$outboundSchema;
})(VirtualExperienceScore$ || (VirtualExperienceScore$ = {}));
export function virtualExperienceScoreToJSON(virtualExperienceScore) {
    return JSON.stringify(VirtualExperienceScore$outboundSchema.parse(virtualExperienceScore));
}
export function virtualExperienceScoreFromJSON(jsonString) {
    return safeParse(jsonString, (x) => VirtualExperienceScore$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'VirtualExperienceScore' from JSON`);
}
/** @internal */
export const Metrics$inboundSchema = z.object({
    FCP: z.lazy(() => Fcp$inboundSchema),
    LCP: z.lazy(() => Lcp$inboundSchema),
    CLS: z.lazy(() => Cls$inboundSchema),
    TBT: z.lazy(() => Tbt$inboundSchema),
    virtualExperienceScore: z.lazy(() => VirtualExperienceScore$inboundSchema)
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "FCP": "fcp",
        "LCP": "lcp",
        "CLS": "cls",
        "TBT": "tbt",
    });
});
/** @internal */
export const Metrics$outboundSchema = z.object({
    fcp: z.lazy(() => Fcp$outboundSchema),
    lcp: z.lazy(() => Lcp$outboundSchema),
    cls: z.lazy(() => Cls$outboundSchema),
    tbt: z.lazy(() => Tbt$outboundSchema),
    virtualExperienceScore: z.lazy(() => VirtualExperienceScore$outboundSchema)
        .optional(),
}).transform((v) => {
    return remap$(v, {
        fcp: "FCP",
        lcp: "LCP",
        cls: "CLS",
        tbt: "TBT",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Metrics$;
(function (Metrics$) {
    /** @deprecated use `Metrics$inboundSchema` instead. */
    Metrics$.inboundSchema = Metrics$inboundSchema;
    /** @deprecated use `Metrics$outboundSchema` instead. */
    Metrics$.outboundSchema = Metrics$outboundSchema;
})(Metrics$ || (Metrics$ = {}));
export function metricsToJSON(metrics) {
    return JSON.stringify(Metrics$outboundSchema.parse(metrics));
}
export function metricsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Metrics$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Metrics' from JSON`);
}
/** @internal */
export const Output$inboundSchema = z
    .object({
    metrics: z.lazy(() => Metrics$inboundSchema).optional(),
});
/** @internal */
export const Output$outboundSchema = z.object({
    metrics: z.lazy(() => Metrics$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Output$;
(function (Output$) {
    /** @deprecated use `Output$inboundSchema` instead. */
    Output$.inboundSchema = Output$inboundSchema;
    /** @deprecated use `Output$outboundSchema` instead. */
    Output$.outboundSchema = Output$outboundSchema;
})(Output$ || (Output$ = {}));
export function outputToJSON(output) {
    return JSON.stringify(Output$outboundSchema.parse(output));
}
export function outputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Output$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Output' from JSON`);
}
/** @internal */
export const UpdateCheckRequestBody$inboundSchema = z.object({
    name: z.string().optional(),
    path: z.string().optional(),
    status: Status$inboundSchema.optional(),
    conclusion: Conclusion$inboundSchema.optional(),
    detailsUrl: z.string().optional(),
    output: z.lazy(() => Output$inboundSchema).optional(),
    externalId: z.string().optional(),
});
/** @internal */
export const UpdateCheckRequestBody$outboundSchema = z.object({
    name: z.string().optional(),
    path: z.string().optional(),
    status: Status$outboundSchema.optional(),
    conclusion: Conclusion$outboundSchema.optional(),
    detailsUrl: z.string().optional(),
    output: z.lazy(() => Output$outboundSchema).optional(),
    externalId: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateCheckRequestBody$;
(function (UpdateCheckRequestBody$) {
    /** @deprecated use `UpdateCheckRequestBody$inboundSchema` instead. */
    UpdateCheckRequestBody$.inboundSchema = UpdateCheckRequestBody$inboundSchema;
    /** @deprecated use `UpdateCheckRequestBody$outboundSchema` instead. */
    UpdateCheckRequestBody$.outboundSchema = UpdateCheckRequestBody$outboundSchema;
})(UpdateCheckRequestBody$ || (UpdateCheckRequestBody$ = {}));
export function updateCheckRequestBodyToJSON(updateCheckRequestBody) {
    return JSON.stringify(UpdateCheckRequestBody$outboundSchema.parse(updateCheckRequestBody));
}
export function updateCheckRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateCheckRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateCheckRequestBody' from JSON`);
}
/** @internal */
export const UpdateCheckRequest$inboundSchema = z.object({
    deploymentId: z.string(),
    checkId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => UpdateCheckRequestBody$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const UpdateCheckRequest$outboundSchema = z.object({
    deploymentId: z.string(),
    checkId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => UpdateCheckRequestBody$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateCheckRequest$;
(function (UpdateCheckRequest$) {
    /** @deprecated use `UpdateCheckRequest$inboundSchema` instead. */
    UpdateCheckRequest$.inboundSchema = UpdateCheckRequest$inboundSchema;
    /** @deprecated use `UpdateCheckRequest$outboundSchema` instead. */
    UpdateCheckRequest$.outboundSchema = UpdateCheckRequest$outboundSchema;
})(UpdateCheckRequest$ || (UpdateCheckRequest$ = {}));
export function updateCheckRequestToJSON(updateCheckRequest) {
    return JSON.stringify(UpdateCheckRequest$outboundSchema.parse(updateCheckRequest));
}
export function updateCheckRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateCheckRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateCheckRequest' from JSON`);
}
/** @internal */
export const UpdateCheckStatus$inboundSchema = z.nativeEnum(UpdateCheckStatus);
/** @internal */
export const UpdateCheckStatus$outboundSchema = UpdateCheckStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateCheckStatus$;
(function (UpdateCheckStatus$) {
    /** @deprecated use `UpdateCheckStatus$inboundSchema` instead. */
    UpdateCheckStatus$.inboundSchema = UpdateCheckStatus$inboundSchema;
    /** @deprecated use `UpdateCheckStatus$outboundSchema` instead. */
    UpdateCheckStatus$.outboundSchema = UpdateCheckStatus$outboundSchema;
})(UpdateCheckStatus$ || (UpdateCheckStatus$ = {}));
/** @internal */
export const UpdateCheckConclusion$inboundSchema = z.nativeEnum(UpdateCheckConclusion);
/** @internal */
export const UpdateCheckConclusion$outboundSchema = UpdateCheckConclusion$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateCheckConclusion$;
(function (UpdateCheckConclusion$) {
    /** @deprecated use `UpdateCheckConclusion$inboundSchema` instead. */
    UpdateCheckConclusion$.inboundSchema = UpdateCheckConclusion$inboundSchema;
    /** @deprecated use `UpdateCheckConclusion$outboundSchema` instead. */
    UpdateCheckConclusion$.outboundSchema = UpdateCheckConclusion$outboundSchema;
})(UpdateCheckConclusion$ || (UpdateCheckConclusion$ = {}));
/** @internal */
export const UpdateCheckChecksResponseSource$inboundSchema = z.nativeEnum(UpdateCheckChecksResponseSource);
/** @internal */
export const UpdateCheckChecksResponseSource$outboundSchema = UpdateCheckChecksResponseSource$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateCheckChecksResponseSource$;
(function (UpdateCheckChecksResponseSource$) {
    /** @deprecated use `UpdateCheckChecksResponseSource$inboundSchema` instead. */
    UpdateCheckChecksResponseSource$.inboundSchema = UpdateCheckChecksResponseSource$inboundSchema;
    /** @deprecated use `UpdateCheckChecksResponseSource$outboundSchema` instead. */
    UpdateCheckChecksResponseSource$.outboundSchema = UpdateCheckChecksResponseSource$outboundSchema;
})(UpdateCheckChecksResponseSource$ || (UpdateCheckChecksResponseSource$ = {}));
/** @internal */
export const UpdateCheckFCP$inboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: UpdateCheckChecksResponseSource$inboundSchema,
});
/** @internal */
export const UpdateCheckFCP$outboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: UpdateCheckChecksResponseSource$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateCheckFCP$;
(function (UpdateCheckFCP$) {
    /** @deprecated use `UpdateCheckFCP$inboundSchema` instead. */
    UpdateCheckFCP$.inboundSchema = UpdateCheckFCP$inboundSchema;
    /** @deprecated use `UpdateCheckFCP$outboundSchema` instead. */
    UpdateCheckFCP$.outboundSchema = UpdateCheckFCP$outboundSchema;
})(UpdateCheckFCP$ || (UpdateCheckFCP$ = {}));
export function updateCheckFCPToJSON(updateCheckFCP) {
    return JSON.stringify(UpdateCheckFCP$outboundSchema.parse(updateCheckFCP));
}
export function updateCheckFCPFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateCheckFCP$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateCheckFCP' from JSON`);
}
/** @internal */
export const UpdateCheckChecksResponse200Source$inboundSchema = z.nativeEnum(UpdateCheckChecksResponse200Source);
/** @internal */
export const UpdateCheckChecksResponse200Source$outboundSchema = UpdateCheckChecksResponse200Source$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateCheckChecksResponse200Source$;
(function (UpdateCheckChecksResponse200Source$) {
    /** @deprecated use `UpdateCheckChecksResponse200Source$inboundSchema` instead. */
    UpdateCheckChecksResponse200Source$.inboundSchema = UpdateCheckChecksResponse200Source$inboundSchema;
    /** @deprecated use `UpdateCheckChecksResponse200Source$outboundSchema` instead. */
    UpdateCheckChecksResponse200Source$.outboundSchema = UpdateCheckChecksResponse200Source$outboundSchema;
})(UpdateCheckChecksResponse200Source$ || (UpdateCheckChecksResponse200Source$ = {}));
/** @internal */
export const UpdateCheckLCP$inboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: UpdateCheckChecksResponse200Source$inboundSchema,
});
/** @internal */
export const UpdateCheckLCP$outboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: UpdateCheckChecksResponse200Source$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateCheckLCP$;
(function (UpdateCheckLCP$) {
    /** @deprecated use `UpdateCheckLCP$inboundSchema` instead. */
    UpdateCheckLCP$.inboundSchema = UpdateCheckLCP$inboundSchema;
    /** @deprecated use `UpdateCheckLCP$outboundSchema` instead. */
    UpdateCheckLCP$.outboundSchema = UpdateCheckLCP$outboundSchema;
})(UpdateCheckLCP$ || (UpdateCheckLCP$ = {}));
export function updateCheckLCPToJSON(updateCheckLCP) {
    return JSON.stringify(UpdateCheckLCP$outboundSchema.parse(updateCheckLCP));
}
export function updateCheckLCPFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateCheckLCP$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateCheckLCP' from JSON`);
}
/** @internal */
export const UpdateCheckChecksResponse200ApplicationJSONSource$inboundSchema = z
    .nativeEnum(UpdateCheckChecksResponse200ApplicationJSONSource);
/** @internal */
export const UpdateCheckChecksResponse200ApplicationJSONSource$outboundSchema = UpdateCheckChecksResponse200ApplicationJSONSource$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateCheckChecksResponse200ApplicationJSONSource$;
(function (UpdateCheckChecksResponse200ApplicationJSONSource$) {
    /** @deprecated use `UpdateCheckChecksResponse200ApplicationJSONSource$inboundSchema` instead. */
    UpdateCheckChecksResponse200ApplicationJSONSource$.inboundSchema = UpdateCheckChecksResponse200ApplicationJSONSource$inboundSchema;
    /** @deprecated use `UpdateCheckChecksResponse200ApplicationJSONSource$outboundSchema` instead. */
    UpdateCheckChecksResponse200ApplicationJSONSource$.outboundSchema = UpdateCheckChecksResponse200ApplicationJSONSource$outboundSchema;
})(UpdateCheckChecksResponse200ApplicationJSONSource$ || (UpdateCheckChecksResponse200ApplicationJSONSource$ = {}));
/** @internal */
export const UpdateCheckCLS$inboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: UpdateCheckChecksResponse200ApplicationJSONSource$inboundSchema,
});
/** @internal */
export const UpdateCheckCLS$outboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: UpdateCheckChecksResponse200ApplicationJSONSource$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateCheckCLS$;
(function (UpdateCheckCLS$) {
    /** @deprecated use `UpdateCheckCLS$inboundSchema` instead. */
    UpdateCheckCLS$.inboundSchema = UpdateCheckCLS$inboundSchema;
    /** @deprecated use `UpdateCheckCLS$outboundSchema` instead. */
    UpdateCheckCLS$.outboundSchema = UpdateCheckCLS$outboundSchema;
})(UpdateCheckCLS$ || (UpdateCheckCLS$ = {}));
export function updateCheckCLSToJSON(updateCheckCLS) {
    return JSON.stringify(UpdateCheckCLS$outboundSchema.parse(updateCheckCLS));
}
export function updateCheckCLSFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateCheckCLS$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateCheckCLS' from JSON`);
}
/** @internal */
export const UpdateCheckChecksResponse200ApplicationJSONResponseBodySource$inboundSchema = z.nativeEnum(UpdateCheckChecksResponse200ApplicationJSONResponseBodySource);
/** @internal */
export const UpdateCheckChecksResponse200ApplicationJSONResponseBodySource$outboundSchema = UpdateCheckChecksResponse200ApplicationJSONResponseBodySource$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateCheckChecksResponse200ApplicationJSONResponseBodySource$;
(function (UpdateCheckChecksResponse200ApplicationJSONResponseBodySource$) {
    /** @deprecated use `UpdateCheckChecksResponse200ApplicationJSONResponseBodySource$inboundSchema` instead. */
    UpdateCheckChecksResponse200ApplicationJSONResponseBodySource$.inboundSchema = UpdateCheckChecksResponse200ApplicationJSONResponseBodySource$inboundSchema;
    /** @deprecated use `UpdateCheckChecksResponse200ApplicationJSONResponseBodySource$outboundSchema` instead. */
    UpdateCheckChecksResponse200ApplicationJSONResponseBodySource$.outboundSchema = UpdateCheckChecksResponse200ApplicationJSONResponseBodySource$outboundSchema;
})(UpdateCheckChecksResponse200ApplicationJSONResponseBodySource$ || (UpdateCheckChecksResponse200ApplicationJSONResponseBodySource$ = {}));
/** @internal */
export const UpdateCheckTBT$inboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: UpdateCheckChecksResponse200ApplicationJSONResponseBodySource$inboundSchema,
});
/** @internal */
export const UpdateCheckTBT$outboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: UpdateCheckChecksResponse200ApplicationJSONResponseBodySource$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateCheckTBT$;
(function (UpdateCheckTBT$) {
    /** @deprecated use `UpdateCheckTBT$inboundSchema` instead. */
    UpdateCheckTBT$.inboundSchema = UpdateCheckTBT$inboundSchema;
    /** @deprecated use `UpdateCheckTBT$outboundSchema` instead. */
    UpdateCheckTBT$.outboundSchema = UpdateCheckTBT$outboundSchema;
})(UpdateCheckTBT$ || (UpdateCheckTBT$ = {}));
export function updateCheckTBTToJSON(updateCheckTBT) {
    return JSON.stringify(UpdateCheckTBT$outboundSchema.parse(updateCheckTBT));
}
export function updateCheckTBTFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateCheckTBT$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateCheckTBT' from JSON`);
}
/** @internal */
export const UpdateCheckChecksResponse200ApplicationJSONResponseBodyOutputSource$inboundSchema = z.nativeEnum(UpdateCheckChecksResponse200ApplicationJSONResponseBodyOutputSource);
/** @internal */
export const UpdateCheckChecksResponse200ApplicationJSONResponseBodyOutputSource$outboundSchema = UpdateCheckChecksResponse200ApplicationJSONResponseBodyOutputSource$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateCheckChecksResponse200ApplicationJSONResponseBodyOutputSource$;
(function (UpdateCheckChecksResponse200ApplicationJSONResponseBodyOutputSource$) {
    /** @deprecated use `UpdateCheckChecksResponse200ApplicationJSONResponseBodyOutputSource$inboundSchema` instead. */
    UpdateCheckChecksResponse200ApplicationJSONResponseBodyOutputSource$.inboundSchema = UpdateCheckChecksResponse200ApplicationJSONResponseBodyOutputSource$inboundSchema;
    /** @deprecated use `UpdateCheckChecksResponse200ApplicationJSONResponseBodyOutputSource$outboundSchema` instead. */
    UpdateCheckChecksResponse200ApplicationJSONResponseBodyOutputSource$.outboundSchema = UpdateCheckChecksResponse200ApplicationJSONResponseBodyOutputSource$outboundSchema;
})(UpdateCheckChecksResponse200ApplicationJSONResponseBodyOutputSource$ || (UpdateCheckChecksResponse200ApplicationJSONResponseBodyOutputSource$ = {}));
/** @internal */
export const UpdateCheckVirtualExperienceScore$inboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: UpdateCheckChecksResponse200ApplicationJSONResponseBodyOutputSource$inboundSchema,
});
/** @internal */
export const UpdateCheckVirtualExperienceScore$outboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: UpdateCheckChecksResponse200ApplicationJSONResponseBodyOutputSource$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateCheckVirtualExperienceScore$;
(function (UpdateCheckVirtualExperienceScore$) {
    /** @deprecated use `UpdateCheckVirtualExperienceScore$inboundSchema` instead. */
    UpdateCheckVirtualExperienceScore$.inboundSchema = UpdateCheckVirtualExperienceScore$inboundSchema;
    /** @deprecated use `UpdateCheckVirtualExperienceScore$outboundSchema` instead. */
    UpdateCheckVirtualExperienceScore$.outboundSchema = UpdateCheckVirtualExperienceScore$outboundSchema;
})(UpdateCheckVirtualExperienceScore$ || (UpdateCheckVirtualExperienceScore$ = {}));
export function updateCheckVirtualExperienceScoreToJSON(updateCheckVirtualExperienceScore) {
    return JSON.stringify(UpdateCheckVirtualExperienceScore$outboundSchema.parse(updateCheckVirtualExperienceScore));
}
export function updateCheckVirtualExperienceScoreFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateCheckVirtualExperienceScore$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateCheckVirtualExperienceScore' from JSON`);
}
/** @internal */
export const UpdateCheckMetrics$inboundSchema = z.object({
    FCP: z.lazy(() => UpdateCheckFCP$inboundSchema),
    LCP: z.lazy(() => UpdateCheckLCP$inboundSchema),
    CLS: z.lazy(() => UpdateCheckCLS$inboundSchema),
    TBT: z.lazy(() => UpdateCheckTBT$inboundSchema),
    virtualExperienceScore: z.lazy(() => UpdateCheckVirtualExperienceScore$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "FCP": "fcp",
        "LCP": "lcp",
        "CLS": "cls",
        "TBT": "tbt",
    });
});
/** @internal */
export const UpdateCheckMetrics$outboundSchema = z.object({
    fcp: z.lazy(() => UpdateCheckFCP$outboundSchema),
    lcp: z.lazy(() => UpdateCheckLCP$outboundSchema),
    cls: z.lazy(() => UpdateCheckCLS$outboundSchema),
    tbt: z.lazy(() => UpdateCheckTBT$outboundSchema),
    virtualExperienceScore: z.lazy(() => UpdateCheckVirtualExperienceScore$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        fcp: "FCP",
        lcp: "LCP",
        cls: "CLS",
        tbt: "TBT",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateCheckMetrics$;
(function (UpdateCheckMetrics$) {
    /** @deprecated use `UpdateCheckMetrics$inboundSchema` instead. */
    UpdateCheckMetrics$.inboundSchema = UpdateCheckMetrics$inboundSchema;
    /** @deprecated use `UpdateCheckMetrics$outboundSchema` instead. */
    UpdateCheckMetrics$.outboundSchema = UpdateCheckMetrics$outboundSchema;
})(UpdateCheckMetrics$ || (UpdateCheckMetrics$ = {}));
export function updateCheckMetricsToJSON(updateCheckMetrics) {
    return JSON.stringify(UpdateCheckMetrics$outboundSchema.parse(updateCheckMetrics));
}
export function updateCheckMetricsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateCheckMetrics$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateCheckMetrics' from JSON`);
}
/** @internal */
export const UpdateCheckOutput$inboundSchema = z.object({
    metrics: z.lazy(() => UpdateCheckMetrics$inboundSchema).optional(),
});
/** @internal */
export const UpdateCheckOutput$outboundSchema = z.object({
    metrics: z.lazy(() => UpdateCheckMetrics$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateCheckOutput$;
(function (UpdateCheckOutput$) {
    /** @deprecated use `UpdateCheckOutput$inboundSchema` instead. */
    UpdateCheckOutput$.inboundSchema = UpdateCheckOutput$inboundSchema;
    /** @deprecated use `UpdateCheckOutput$outboundSchema` instead. */
    UpdateCheckOutput$.outboundSchema = UpdateCheckOutput$outboundSchema;
})(UpdateCheckOutput$ || (UpdateCheckOutput$ = {}));
export function updateCheckOutputToJSON(updateCheckOutput) {
    return JSON.stringify(UpdateCheckOutput$outboundSchema.parse(updateCheckOutput));
}
export function updateCheckOutputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateCheckOutput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateCheckOutput' from JSON`);
}
/** @internal */
export const UpdateCheckResponseBody$inboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    path: z.string().optional(),
    status: UpdateCheckStatus$inboundSchema,
    conclusion: UpdateCheckConclusion$inboundSchema.optional(),
    blocking: z.boolean(),
    output: z.lazy(() => UpdateCheckOutput$inboundSchema).optional(),
    detailsUrl: z.string().optional(),
    integrationId: z.string(),
    deploymentId: z.string(),
    externalId: z.string().optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
    startedAt: z.number().optional(),
    completedAt: z.number().optional(),
    rerequestable: z.boolean().optional(),
});
/** @internal */
export const UpdateCheckResponseBody$outboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    path: z.string().optional(),
    status: UpdateCheckStatus$outboundSchema,
    conclusion: UpdateCheckConclusion$outboundSchema.optional(),
    blocking: z.boolean(),
    output: z.lazy(() => UpdateCheckOutput$outboundSchema).optional(),
    detailsUrl: z.string().optional(),
    integrationId: z.string(),
    deploymentId: z.string(),
    externalId: z.string().optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
    startedAt: z.number().optional(),
    completedAt: z.number().optional(),
    rerequestable: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateCheckResponseBody$;
(function (UpdateCheckResponseBody$) {
    /** @deprecated use `UpdateCheckResponseBody$inboundSchema` instead. */
    UpdateCheckResponseBody$.inboundSchema = UpdateCheckResponseBody$inboundSchema;
    /** @deprecated use `UpdateCheckResponseBody$outboundSchema` instead. */
    UpdateCheckResponseBody$.outboundSchema = UpdateCheckResponseBody$outboundSchema;
})(UpdateCheckResponseBody$ || (UpdateCheckResponseBody$ = {}));
export function updateCheckResponseBodyToJSON(updateCheckResponseBody) {
    return JSON.stringify(UpdateCheckResponseBody$outboundSchema.parse(updateCheckResponseBody));
}
export function updateCheckResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateCheckResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateCheckResponseBody' from JSON`);
}
//# sourceMappingURL=updatecheckop.js.map