/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/**
 * Whether or not the domain is registered with Name.com. If set to `true`, the domain is registered with Name.com.
 */
export const CreateOrTransferDomainRegistrar = {
    New: "new",
};
/**
 * The type of service the domain is handled by. `external` if the DNS is externally handled, `zeit.world` if handled with Vercel, or `na` if the service is not available.
 */
export const CreateOrTransferDomainServiceType = {
    ZeitWorld: "zeit.world",
    External: "external",
    Na: "na",
};
/** @internal */
export const CreateOrTransferDomainRequestBody3$inboundSchema = z.object({
    name: z.string(),
    method: z.string(),
    authCode: z.string().optional(),
    expectedPrice: z.number().optional(),
});
/** @internal */
export const CreateOrTransferDomainRequestBody3$outboundSchema = z.object({
    name: z.string(),
    method: z.string(),
    authCode: z.string().optional(),
    expectedPrice: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateOrTransferDomainRequestBody3$;
(function (CreateOrTransferDomainRequestBody3$) {
    /** @deprecated use `CreateOrTransferDomainRequestBody3$inboundSchema` instead. */
    CreateOrTransferDomainRequestBody3$.inboundSchema = CreateOrTransferDomainRequestBody3$inboundSchema;
    /** @deprecated use `CreateOrTransferDomainRequestBody3$outboundSchema` instead. */
    CreateOrTransferDomainRequestBody3$.outboundSchema = CreateOrTransferDomainRequestBody3$outboundSchema;
})(CreateOrTransferDomainRequestBody3$ || (CreateOrTransferDomainRequestBody3$ = {}));
export function createOrTransferDomainRequestBody3ToJSON(createOrTransferDomainRequestBody3) {
    return JSON.stringify(CreateOrTransferDomainRequestBody3$outboundSchema.parse(createOrTransferDomainRequestBody3));
}
export function createOrTransferDomainRequestBody3FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateOrTransferDomainRequestBody3$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateOrTransferDomainRequestBody3' from JSON`);
}
/** @internal */
export const CreateOrTransferDomainRequestBody2$inboundSchema = z.object({
    name: z.string(),
    method: z.string(),
    token: z.string().optional(),
});
/** @internal */
export const CreateOrTransferDomainRequestBody2$outboundSchema = z.object({
    name: z.string(),
    method: z.string(),
    token: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateOrTransferDomainRequestBody2$;
(function (CreateOrTransferDomainRequestBody2$) {
    /** @deprecated use `CreateOrTransferDomainRequestBody2$inboundSchema` instead. */
    CreateOrTransferDomainRequestBody2$.inboundSchema = CreateOrTransferDomainRequestBody2$inboundSchema;
    /** @deprecated use `CreateOrTransferDomainRequestBody2$outboundSchema` instead. */
    CreateOrTransferDomainRequestBody2$.outboundSchema = CreateOrTransferDomainRequestBody2$outboundSchema;
})(CreateOrTransferDomainRequestBody2$ || (CreateOrTransferDomainRequestBody2$ = {}));
export function createOrTransferDomainRequestBody2ToJSON(createOrTransferDomainRequestBody2) {
    return JSON.stringify(CreateOrTransferDomainRequestBody2$outboundSchema.parse(createOrTransferDomainRequestBody2));
}
export function createOrTransferDomainRequestBody2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateOrTransferDomainRequestBody2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateOrTransferDomainRequestBody2' from JSON`);
}
/** @internal */
export const CreateOrTransferDomainRequestBody1$inboundSchema = z.object({
    name: z.string(),
    cdnEnabled: z.boolean().optional(),
    zone: z.boolean().optional(),
    method: z.string().optional(),
});
/** @internal */
export const CreateOrTransferDomainRequestBody1$outboundSchema = z.object({
    name: z.string(),
    cdnEnabled: z.boolean().optional(),
    zone: z.boolean().optional(),
    method: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateOrTransferDomainRequestBody1$;
(function (CreateOrTransferDomainRequestBody1$) {
    /** @deprecated use `CreateOrTransferDomainRequestBody1$inboundSchema` instead. */
    CreateOrTransferDomainRequestBody1$.inboundSchema = CreateOrTransferDomainRequestBody1$inboundSchema;
    /** @deprecated use `CreateOrTransferDomainRequestBody1$outboundSchema` instead. */
    CreateOrTransferDomainRequestBody1$.outboundSchema = CreateOrTransferDomainRequestBody1$outboundSchema;
})(CreateOrTransferDomainRequestBody1$ || (CreateOrTransferDomainRequestBody1$ = {}));
export function createOrTransferDomainRequestBody1ToJSON(createOrTransferDomainRequestBody1) {
    return JSON.stringify(CreateOrTransferDomainRequestBody1$outboundSchema.parse(createOrTransferDomainRequestBody1));
}
export function createOrTransferDomainRequestBody1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateOrTransferDomainRequestBody1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateOrTransferDomainRequestBody1' from JSON`);
}
/** @internal */
export const CreateOrTransferDomainRequestBody$inboundSchema = z.union([
    z.lazy(() => CreateOrTransferDomainRequestBody2$inboundSchema),
    z.lazy(() => CreateOrTransferDomainRequestBody3$inboundSchema),
    z.lazy(() => CreateOrTransferDomainRequestBody1$inboundSchema),
]);
/** @internal */
export const CreateOrTransferDomainRequestBody$outboundSchema = z.union([
    z.lazy(() => CreateOrTransferDomainRequestBody2$outboundSchema),
    z.lazy(() => CreateOrTransferDomainRequestBody3$outboundSchema),
    z.lazy(() => CreateOrTransferDomainRequestBody1$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateOrTransferDomainRequestBody$;
(function (CreateOrTransferDomainRequestBody$) {
    /** @deprecated use `CreateOrTransferDomainRequestBody$inboundSchema` instead. */
    CreateOrTransferDomainRequestBody$.inboundSchema = CreateOrTransferDomainRequestBody$inboundSchema;
    /** @deprecated use `CreateOrTransferDomainRequestBody$outboundSchema` instead. */
    CreateOrTransferDomainRequestBody$.outboundSchema = CreateOrTransferDomainRequestBody$outboundSchema;
})(CreateOrTransferDomainRequestBody$ || (CreateOrTransferDomainRequestBody$ = {}));
export function createOrTransferDomainRequestBodyToJSON(createOrTransferDomainRequestBody) {
    return JSON.stringify(CreateOrTransferDomainRequestBody$outboundSchema.parse(createOrTransferDomainRequestBody));
}
export function createOrTransferDomainRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateOrTransferDomainRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateOrTransferDomainRequestBody' from JSON`);
}
/** @internal */
export const CreateOrTransferDomainRequest$inboundSchema = z.object({
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.union([
        z.lazy(() => CreateOrTransferDomainRequestBody2$inboundSchema),
        z.lazy(() => CreateOrTransferDomainRequestBody3$inboundSchema),
        z.lazy(() => CreateOrTransferDomainRequestBody1$inboundSchema),
    ]).optional(),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const CreateOrTransferDomainRequest$outboundSchema = z.object({
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.union([
        z.lazy(() => CreateOrTransferDomainRequestBody2$outboundSchema),
        z.lazy(() => CreateOrTransferDomainRequestBody3$outboundSchema),
        z.lazy(() => CreateOrTransferDomainRequestBody1$outboundSchema),
    ]).optional(),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateOrTransferDomainRequest$;
(function (CreateOrTransferDomainRequest$) {
    /** @deprecated use `CreateOrTransferDomainRequest$inboundSchema` instead. */
    CreateOrTransferDomainRequest$.inboundSchema = CreateOrTransferDomainRequest$inboundSchema;
    /** @deprecated use `CreateOrTransferDomainRequest$outboundSchema` instead. */
    CreateOrTransferDomainRequest$.outboundSchema = CreateOrTransferDomainRequest$outboundSchema;
})(CreateOrTransferDomainRequest$ || (CreateOrTransferDomainRequest$ = {}));
export function createOrTransferDomainRequestToJSON(createOrTransferDomainRequest) {
    return JSON.stringify(CreateOrTransferDomainRequest$outboundSchema.parse(createOrTransferDomainRequest));
}
export function createOrTransferDomainRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateOrTransferDomainRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateOrTransferDomainRequest' from JSON`);
}
/** @internal */
export const CreateOrTransferDomainCreator$inboundSchema = z.object({
    username: z.string(),
    email: z.string(),
    customerId: z.nullable(z.string()).optional(),
    isDomainReseller: z.boolean().optional(),
    id: z.string(),
});
/** @internal */
export const CreateOrTransferDomainCreator$outboundSchema = z.object({
    username: z.string(),
    email: z.string(),
    customerId: z.nullable(z.string()).optional(),
    isDomainReseller: z.boolean().optional(),
    id: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateOrTransferDomainCreator$;
(function (CreateOrTransferDomainCreator$) {
    /** @deprecated use `CreateOrTransferDomainCreator$inboundSchema` instead. */
    CreateOrTransferDomainCreator$.inboundSchema = CreateOrTransferDomainCreator$inboundSchema;
    /** @deprecated use `CreateOrTransferDomainCreator$outboundSchema` instead. */
    CreateOrTransferDomainCreator$.outboundSchema = CreateOrTransferDomainCreator$outboundSchema;
})(CreateOrTransferDomainCreator$ || (CreateOrTransferDomainCreator$ = {}));
export function createOrTransferDomainCreatorToJSON(createOrTransferDomainCreator) {
    return JSON.stringify(CreateOrTransferDomainCreator$outboundSchema.parse(createOrTransferDomainCreator));
}
export function createOrTransferDomainCreatorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateOrTransferDomainCreator$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateOrTransferDomainCreator' from JSON`);
}
/** @internal */
export const CreateOrTransferDomainRegistrar$inboundSchema = z.nativeEnum(CreateOrTransferDomainRegistrar);
/** @internal */
export const CreateOrTransferDomainRegistrar$outboundSchema = CreateOrTransferDomainRegistrar$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateOrTransferDomainRegistrar$;
(function (CreateOrTransferDomainRegistrar$) {
    /** @deprecated use `CreateOrTransferDomainRegistrar$inboundSchema` instead. */
    CreateOrTransferDomainRegistrar$.inboundSchema = CreateOrTransferDomainRegistrar$inboundSchema;
    /** @deprecated use `CreateOrTransferDomainRegistrar$outboundSchema` instead. */
    CreateOrTransferDomainRegistrar$.outboundSchema = CreateOrTransferDomainRegistrar$outboundSchema;
})(CreateOrTransferDomainRegistrar$ || (CreateOrTransferDomainRegistrar$ = {}));
/** @internal */
export const CreateOrTransferDomainServiceType$inboundSchema = z.nativeEnum(CreateOrTransferDomainServiceType);
/** @internal */
export const CreateOrTransferDomainServiceType$outboundSchema = CreateOrTransferDomainServiceType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateOrTransferDomainServiceType$;
(function (CreateOrTransferDomainServiceType$) {
    /** @deprecated use `CreateOrTransferDomainServiceType$inboundSchema` instead. */
    CreateOrTransferDomainServiceType$.inboundSchema = CreateOrTransferDomainServiceType$inboundSchema;
    /** @deprecated use `CreateOrTransferDomainServiceType$outboundSchema` instead. */
    CreateOrTransferDomainServiceType$.outboundSchema = CreateOrTransferDomainServiceType$outboundSchema;
})(CreateOrTransferDomainServiceType$ || (CreateOrTransferDomainServiceType$ = {}));
/** @internal */
export const CreateOrTransferDomainDomain$inboundSchema = z.object({
    verified: z.boolean(),
    nameservers: z.array(z.string()),
    intendedNameservers: z.array(z.string()),
    customNameservers: z.array(z.string()).optional(),
    creator: z.lazy(() => CreateOrTransferDomainCreator$inboundSchema),
    registrar: CreateOrTransferDomainRegistrar$inboundSchema.optional(),
    name: z.string(),
    boughtAt: z.nullable(z.number()),
    createdAt: z.number(),
    expiresAt: z.nullable(z.number()),
    id: z.string(),
    orderedAt: z.number().optional(),
    renew: z.boolean().optional(),
    serviceType: CreateOrTransferDomainServiceType$inboundSchema,
    transferredAt: z.nullable(z.number()).optional(),
    transferStartedAt: z.number().optional(),
    userId: z.string(),
    teamId: z.nullable(z.string()),
});
/** @internal */
export const CreateOrTransferDomainDomain$outboundSchema = z.object({
    verified: z.boolean(),
    nameservers: z.array(z.string()),
    intendedNameservers: z.array(z.string()),
    customNameservers: z.array(z.string()).optional(),
    creator: z.lazy(() => CreateOrTransferDomainCreator$outboundSchema),
    registrar: CreateOrTransferDomainRegistrar$outboundSchema.optional(),
    name: z.string(),
    boughtAt: z.nullable(z.number()),
    createdAt: z.number(),
    expiresAt: z.nullable(z.number()),
    id: z.string(),
    orderedAt: z.number().optional(),
    renew: z.boolean().optional(),
    serviceType: CreateOrTransferDomainServiceType$outboundSchema,
    transferredAt: z.nullable(z.number()).optional(),
    transferStartedAt: z.number().optional(),
    userId: z.string(),
    teamId: z.nullable(z.string()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateOrTransferDomainDomain$;
(function (CreateOrTransferDomainDomain$) {
    /** @deprecated use `CreateOrTransferDomainDomain$inboundSchema` instead. */
    CreateOrTransferDomainDomain$.inboundSchema = CreateOrTransferDomainDomain$inboundSchema;
    /** @deprecated use `CreateOrTransferDomainDomain$outboundSchema` instead. */
    CreateOrTransferDomainDomain$.outboundSchema = CreateOrTransferDomainDomain$outboundSchema;
})(CreateOrTransferDomainDomain$ || (CreateOrTransferDomainDomain$ = {}));
export function createOrTransferDomainDomainToJSON(createOrTransferDomainDomain) {
    return JSON.stringify(CreateOrTransferDomainDomain$outboundSchema.parse(createOrTransferDomainDomain));
}
export function createOrTransferDomainDomainFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateOrTransferDomainDomain$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateOrTransferDomainDomain' from JSON`);
}
/** @internal */
export const CreateOrTransferDomainResponseBody$inboundSchema = z.object({
    domain: z.lazy(() => CreateOrTransferDomainDomain$inboundSchema),
});
/** @internal */
export const CreateOrTransferDomainResponseBody$outboundSchema = z.object({
    domain: z.lazy(() => CreateOrTransferDomainDomain$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateOrTransferDomainResponseBody$;
(function (CreateOrTransferDomainResponseBody$) {
    /** @deprecated use `CreateOrTransferDomainResponseBody$inboundSchema` instead. */
    CreateOrTransferDomainResponseBody$.inboundSchema = CreateOrTransferDomainResponseBody$inboundSchema;
    /** @deprecated use `CreateOrTransferDomainResponseBody$outboundSchema` instead. */
    CreateOrTransferDomainResponseBody$.outboundSchema = CreateOrTransferDomainResponseBody$outboundSchema;
})(CreateOrTransferDomainResponseBody$ || (CreateOrTransferDomainResponseBody$ = {}));
export function createOrTransferDomainResponseBodyToJSON(createOrTransferDomainResponseBody) {
    return JSON.stringify(CreateOrTransferDomainResponseBody$outboundSchema.parse(createOrTransferDomainResponseBody));
}
export function createOrTransferDomainResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateOrTransferDomainResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateOrTransferDomainResponseBody' from JSON`);
}
//# sourceMappingURL=createortransferdomainop.js.map