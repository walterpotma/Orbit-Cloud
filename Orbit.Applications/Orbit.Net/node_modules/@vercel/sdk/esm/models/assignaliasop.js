/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/** @internal */
export const AssignAliasRequestBody$inboundSchema = z.object({
    alias: z.string().optional(),
    redirect: z.nullable(z.string()).optional(),
});
/** @internal */
export const AssignAliasRequestBody$outboundSchema = z.object({
    alias: z.string().optional(),
    redirect: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AssignAliasRequestBody$;
(function (AssignAliasRequestBody$) {
    /** @deprecated use `AssignAliasRequestBody$inboundSchema` instead. */
    AssignAliasRequestBody$.inboundSchema = AssignAliasRequestBody$inboundSchema;
    /** @deprecated use `AssignAliasRequestBody$outboundSchema` instead. */
    AssignAliasRequestBody$.outboundSchema = AssignAliasRequestBody$outboundSchema;
})(AssignAliasRequestBody$ || (AssignAliasRequestBody$ = {}));
export function assignAliasRequestBodyToJSON(assignAliasRequestBody) {
    return JSON.stringify(AssignAliasRequestBody$outboundSchema.parse(assignAliasRequestBody));
}
export function assignAliasRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AssignAliasRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AssignAliasRequestBody' from JSON`);
}
/** @internal */
export const AssignAliasRequest$inboundSchema = z.object({
    id: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => AssignAliasRequestBody$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const AssignAliasRequest$outboundSchema = z.object({
    id: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => AssignAliasRequestBody$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AssignAliasRequest$;
(function (AssignAliasRequest$) {
    /** @deprecated use `AssignAliasRequest$inboundSchema` instead. */
    AssignAliasRequest$.inboundSchema = AssignAliasRequest$inboundSchema;
    /** @deprecated use `AssignAliasRequest$outboundSchema` instead. */
    AssignAliasRequest$.outboundSchema = AssignAliasRequest$outboundSchema;
})(AssignAliasRequest$ || (AssignAliasRequest$ = {}));
export function assignAliasRequestToJSON(assignAliasRequest) {
    return JSON.stringify(AssignAliasRequest$outboundSchema.parse(assignAliasRequest));
}
export function assignAliasRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AssignAliasRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AssignAliasRequest' from JSON`);
}
/** @internal */
export const AssignAliasResponseBody$inboundSchema = z.object({
    uid: z.string(),
    alias: z.string(),
    created: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    oldDeploymentId: z.nullable(z.string()).optional(),
});
/** @internal */
export const AssignAliasResponseBody$outboundSchema = z.object({
    uid: z.string(),
    alias: z.string(),
    created: z.date().transform(v => v.toISOString()),
    oldDeploymentId: z.nullable(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AssignAliasResponseBody$;
(function (AssignAliasResponseBody$) {
    /** @deprecated use `AssignAliasResponseBody$inboundSchema` instead. */
    AssignAliasResponseBody$.inboundSchema = AssignAliasResponseBody$inboundSchema;
    /** @deprecated use `AssignAliasResponseBody$outboundSchema` instead. */
    AssignAliasResponseBody$.outboundSchema = AssignAliasResponseBody$outboundSchema;
})(AssignAliasResponseBody$ || (AssignAliasResponseBody$ = {}));
export function assignAliasResponseBodyToJSON(assignAliasResponseBody) {
    return JSON.stringify(AssignAliasResponseBody$outboundSchema.parse(assignAliasResponseBody));
}
export function assignAliasResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AssignAliasResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AssignAliasResponseBody' from JSON`);
}
//# sourceMappingURL=assignaliasop.js.map