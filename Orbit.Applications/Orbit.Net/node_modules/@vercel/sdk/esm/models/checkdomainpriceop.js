/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
/**
 * In which status of the domain the price needs to be checked.
 */
export const QueryParamType = {
    New: "new",
    Renewal: "renewal",
    Transfer: "transfer",
    Redemption: "redemption",
};
/** @internal */
export const QueryParamType$inboundSchema = z.nativeEnum(QueryParamType);
/** @internal */
export const QueryParamType$outboundSchema = QueryParamType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var QueryParamType$;
(function (QueryParamType$) {
    /** @deprecated use `QueryParamType$inboundSchema` instead. */
    QueryParamType$.inboundSchema = QueryParamType$inboundSchema;
    /** @deprecated use `QueryParamType$outboundSchema` instead. */
    QueryParamType$.outboundSchema = QueryParamType$outboundSchema;
})(QueryParamType$ || (QueryParamType$ = {}));
/** @internal */
export const CheckDomainPriceRequest$inboundSchema = z.object({
    name: z.string(),
    type: QueryParamType$inboundSchema.optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/** @internal */
export const CheckDomainPriceRequest$outboundSchema = z.object({
    name: z.string(),
    type: QueryParamType$outboundSchema.optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckDomainPriceRequest$;
(function (CheckDomainPriceRequest$) {
    /** @deprecated use `CheckDomainPriceRequest$inboundSchema` instead. */
    CheckDomainPriceRequest$.inboundSchema = CheckDomainPriceRequest$inboundSchema;
    /** @deprecated use `CheckDomainPriceRequest$outboundSchema` instead. */
    CheckDomainPriceRequest$.outboundSchema = CheckDomainPriceRequest$outboundSchema;
})(CheckDomainPriceRequest$ || (CheckDomainPriceRequest$ = {}));
export function checkDomainPriceRequestToJSON(checkDomainPriceRequest) {
    return JSON.stringify(CheckDomainPriceRequest$outboundSchema.parse(checkDomainPriceRequest));
}
export function checkDomainPriceRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckDomainPriceRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckDomainPriceRequest' from JSON`);
}
/** @internal */
export const CheckDomainPriceResponseBody$inboundSchema = z.object({
    price: z.number(),
    period: z.number(),
});
/** @internal */
export const CheckDomainPriceResponseBody$outboundSchema = z.object({
    price: z.number(),
    period: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckDomainPriceResponseBody$;
(function (CheckDomainPriceResponseBody$) {
    /** @deprecated use `CheckDomainPriceResponseBody$inboundSchema` instead. */
    CheckDomainPriceResponseBody$.inboundSchema = CheckDomainPriceResponseBody$inboundSchema;
    /** @deprecated use `CheckDomainPriceResponseBody$outboundSchema` instead. */
    CheckDomainPriceResponseBody$.outboundSchema = CheckDomainPriceResponseBody$outboundSchema;
})(CheckDomainPriceResponseBody$ || (CheckDomainPriceResponseBody$ = {}));
export function checkDomainPriceResponseBodyToJSON(checkDomainPriceResponseBody) {
    return JSON.stringify(CheckDomainPriceResponseBody$outboundSchema.parse(checkDomainPriceResponseBody));
}
export function checkDomainPriceResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckDomainPriceResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckDomainPriceResponseBody' from JSON`);
}
//# sourceMappingURL=checkdomainpriceop.js.map