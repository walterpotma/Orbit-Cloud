import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type PatchTeamRoles2 = {
    accessGroupId: string;
};
export declare const PatchTeamRoles1: {
    readonly Owner: "OWNER";
    readonly Member: "MEMBER";
    readonly Developer: "DEVELOPER";
    readonly Security: "SECURITY";
    readonly Billing: "BILLING";
    readonly Viewer: "VIEWER";
    readonly ViewerForPlus: "VIEWER_FOR_PLUS";
    readonly Contributor: "CONTRIBUTOR";
};
export type PatchTeamRoles1 = ClosedEnum<typeof PatchTeamRoles1>;
export type PatchTeamRoles = PatchTeamRoles2 | PatchTeamRoles1;
export type PatchTeamSaml = {
    /**
     * Require that members of the team use SAML Single Sign-On.
     */
    enforced?: boolean | undefined;
    /**
     * Directory groups to role or access group mappings.
     */
    roles?: {
        [k: string]: PatchTeamRoles2 | PatchTeamRoles1;
    } | undefined;
};
/**
 * Whether or not remote caching is enabled for the team
 */
export type PatchTeamRemoteCaching = {
    /**
     * Enable or disable remote caching for the team.
     */
    enabled?: boolean | undefined;
};
/**
 * Specify if the password will apply to every Deployment Target or just Preview
 */
export declare const PatchTeamDeploymentType: {
    readonly All: "all";
    readonly Preview: "preview";
    readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
    readonly AllExceptCustomDomains: "all_except_custom_domains";
};
/**
 * Specify if the password will apply to every Deployment Target or just Preview
 */
export type PatchTeamDeploymentType = ClosedEnum<typeof PatchTeamDeploymentType>;
/**
 * Allows to protect project deployments with a password
 */
export type PatchTeamPasswordProtection = {
    /**
     * Specify if the password will apply to every Deployment Target or just Preview
     */
    deploymentType: PatchTeamDeploymentType;
    /**
     * The password that will be used to protect Project Deployments
     */
    password?: string | null | undefined;
};
/**
 * Specify if the Vercel Authentication (SSO Protection) will apply to every Deployment Target or just Preview
 */
export declare const PatchTeamTeamsDeploymentType: {
    readonly All: "all";
    readonly Preview: "preview";
    readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
    readonly AllExceptCustomDomains: "all_except_custom_domains";
};
/**
 * Specify if the Vercel Authentication (SSO Protection) will apply to every Deployment Target or just Preview
 */
export type PatchTeamTeamsDeploymentType = ClosedEnum<typeof PatchTeamTeamsDeploymentType>;
/**
 * Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team
 */
export type PatchTeamSsoProtection = {
    /**
     * Specify if the Vercel Authentication (SSO Protection) will apply to every Deployment Target or just Preview
     */
    deploymentType?: PatchTeamTeamsDeploymentType | undefined;
};
/**
 * Default deployment protection settings for new projects.
 */
export type PatchTeamDefaultDeploymentProtection = {
    /**
     * Allows to protect project deployments with a password
     */
    passwordProtection?: PatchTeamPasswordProtection | null | undefined;
    /**
     * Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team
     */
    ssoProtection?: PatchTeamSsoProtection | null | undefined;
};
/**
 * The time period to keep non-production deployments for
 */
export declare const Expiration: {
    readonly Oney: "1y";
    readonly Sixm: "6m";
    readonly Threem: "3m";
    readonly Twom: "2m";
    readonly Onem: "1m";
    readonly Twow: "2w";
    readonly Onew: "1w";
    readonly Oned: "1d";
    readonly Unlimited: "unlimited";
};
/**
 * The time period to keep non-production deployments for
 */
export type Expiration = ClosedEnum<typeof Expiration>;
/**
 * The time period to keep production deployments for
 */
export declare const ExpirationProduction: {
    readonly Oney: "1y";
    readonly Sixm: "6m";
    readonly Threem: "3m";
    readonly Twom: "2m";
    readonly Onem: "1m";
    readonly Twow: "2w";
    readonly Onew: "1w";
    readonly Oned: "1d";
    readonly Unlimited: "unlimited";
};
/**
 * The time period to keep production deployments for
 */
export type ExpirationProduction = ClosedEnum<typeof ExpirationProduction>;
/**
 * The time period to keep canceled deployments for
 */
export declare const ExpirationCanceled: {
    readonly Oney: "1y";
    readonly Sixm: "6m";
    readonly Threem: "3m";
    readonly Twom: "2m";
    readonly Onem: "1m";
    readonly Twow: "2w";
    readonly Onew: "1w";
    readonly Oned: "1d";
    readonly Unlimited: "unlimited";
};
/**
 * The time period to keep canceled deployments for
 */
export type ExpirationCanceled = ClosedEnum<typeof ExpirationCanceled>;
/**
 * The time period to keep errored deployments for
 */
export declare const ExpirationErrored: {
    readonly Oney: "1y";
    readonly Sixm: "6m";
    readonly Threem: "3m";
    readonly Twom: "2m";
    readonly Onem: "1m";
    readonly Twow: "2w";
    readonly Onew: "1w";
    readonly Oned: "1d";
    readonly Unlimited: "unlimited";
};
/**
 * The time period to keep errored deployments for
 */
export type ExpirationErrored = ClosedEnum<typeof ExpirationErrored>;
export type PatchTeamDefaultExpirationSettings = {
    /**
     * The time period to keep non-production deployments for
     */
    expiration?: Expiration | undefined;
    /**
     * The time period to keep production deployments for
     */
    expirationProduction?: ExpirationProduction | undefined;
    /**
     * The time period to keep canceled deployments for
     */
    expirationCanceled?: ExpirationCanceled | undefined;
    /**
     * The time period to keep errored deployments for
     */
    expirationErrored?: ExpirationErrored | undefined;
};
export type PatchTeamRequestBody = {
    /**
     * The hash value of an uploaded image.
     */
    avatar?: string | undefined;
    /**
     * A short text that describes the team.
     */
    description?: string | undefined;
    emailDomain?: string | null | undefined;
    /**
     * The name of the team.
     */
    name?: string | undefined;
    /**
     * Suffix that will be used for all preview deployments.
     */
    previewDeploymentSuffix?: string | null | undefined;
    /**
     * Create a new invite code and replace the current one.
     */
    regenerateInviteCode?: boolean | undefined;
    saml?: PatchTeamSaml | undefined;
    /**
     * A new slug for the team.
     */
    slug?: string | undefined;
    /**
     * Enable preview toolbar: one of on, off or default.
     */
    enablePreviewFeedback?: string | undefined;
    /**
     * Enable production toolbar: one of on, off or default.
     */
    enableProductionFeedback?: string | undefined;
    /**
     * Sensitive environment variable policy: one of on, off or default.
     */
    sensitiveEnvironmentVariablePolicy?: string | undefined;
    /**
     * Whether or not remote caching is enabled for the team
     */
    remoteCaching?: PatchTeamRemoteCaching | undefined;
    /**
     * Display or hide IP addresses in Monitoring queries.
     */
    hideIpAddresses?: boolean | undefined;
    /**
     * Display or hide IP addresses in Log Drains.
     */
    hideIpAddressesInLogDrains?: boolean | undefined;
    /**
     * Default deployment protection settings for new projects.
     */
    defaultDeploymentProtection?: PatchTeamDefaultDeploymentProtection | undefined;
    defaultExpirationSettings?: PatchTeamDefaultExpirationSettings | undefined;
};
export type PatchTeamRequest = {
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId: string;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody: PatchTeamRequestBody;
};
/** @internal */
export declare const PatchTeamRoles2$inboundSchema: z.ZodType<PatchTeamRoles2, z.ZodTypeDef, unknown>;
/** @internal */
export type PatchTeamRoles2$Outbound = {
    accessGroupId: string;
};
/** @internal */
export declare const PatchTeamRoles2$outboundSchema: z.ZodType<PatchTeamRoles2$Outbound, z.ZodTypeDef, PatchTeamRoles2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PatchTeamRoles2$ {
    /** @deprecated use `PatchTeamRoles2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PatchTeamRoles2, z.ZodTypeDef, unknown>;
    /** @deprecated use `PatchTeamRoles2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PatchTeamRoles2$Outbound, z.ZodTypeDef, PatchTeamRoles2>;
    /** @deprecated use `PatchTeamRoles2$Outbound` instead. */
    type Outbound = PatchTeamRoles2$Outbound;
}
export declare function patchTeamRoles2ToJSON(patchTeamRoles2: PatchTeamRoles2): string;
export declare function patchTeamRoles2FromJSON(jsonString: string): SafeParseResult<PatchTeamRoles2, SDKValidationError>;
/** @internal */
export declare const PatchTeamRoles1$inboundSchema: z.ZodNativeEnum<typeof PatchTeamRoles1>;
/** @internal */
export declare const PatchTeamRoles1$outboundSchema: z.ZodNativeEnum<typeof PatchTeamRoles1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PatchTeamRoles1$ {
    /** @deprecated use `PatchTeamRoles1$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly ViewerForPlus: "VIEWER_FOR_PLUS";
        readonly Contributor: "CONTRIBUTOR";
    }>;
    /** @deprecated use `PatchTeamRoles1$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly ViewerForPlus: "VIEWER_FOR_PLUS";
        readonly Contributor: "CONTRIBUTOR";
    }>;
}
/** @internal */
export declare const PatchTeamRoles$inboundSchema: z.ZodType<PatchTeamRoles, z.ZodTypeDef, unknown>;
/** @internal */
export type PatchTeamRoles$Outbound = PatchTeamRoles2$Outbound | string;
/** @internal */
export declare const PatchTeamRoles$outboundSchema: z.ZodType<PatchTeamRoles$Outbound, z.ZodTypeDef, PatchTeamRoles>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PatchTeamRoles$ {
    /** @deprecated use `PatchTeamRoles$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PatchTeamRoles, z.ZodTypeDef, unknown>;
    /** @deprecated use `PatchTeamRoles$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PatchTeamRoles$Outbound, z.ZodTypeDef, PatchTeamRoles>;
    /** @deprecated use `PatchTeamRoles$Outbound` instead. */
    type Outbound = PatchTeamRoles$Outbound;
}
export declare function patchTeamRolesToJSON(patchTeamRoles: PatchTeamRoles): string;
export declare function patchTeamRolesFromJSON(jsonString: string): SafeParseResult<PatchTeamRoles, SDKValidationError>;
/** @internal */
export declare const PatchTeamSaml$inboundSchema: z.ZodType<PatchTeamSaml, z.ZodTypeDef, unknown>;
/** @internal */
export type PatchTeamSaml$Outbound = {
    enforced?: boolean | undefined;
    roles?: {
        [k: string]: PatchTeamRoles2$Outbound | string;
    } | undefined;
};
/** @internal */
export declare const PatchTeamSaml$outboundSchema: z.ZodType<PatchTeamSaml$Outbound, z.ZodTypeDef, PatchTeamSaml>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PatchTeamSaml$ {
    /** @deprecated use `PatchTeamSaml$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PatchTeamSaml, z.ZodTypeDef, unknown>;
    /** @deprecated use `PatchTeamSaml$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PatchTeamSaml$Outbound, z.ZodTypeDef, PatchTeamSaml>;
    /** @deprecated use `PatchTeamSaml$Outbound` instead. */
    type Outbound = PatchTeamSaml$Outbound;
}
export declare function patchTeamSamlToJSON(patchTeamSaml: PatchTeamSaml): string;
export declare function patchTeamSamlFromJSON(jsonString: string): SafeParseResult<PatchTeamSaml, SDKValidationError>;
/** @internal */
export declare const PatchTeamRemoteCaching$inboundSchema: z.ZodType<PatchTeamRemoteCaching, z.ZodTypeDef, unknown>;
/** @internal */
export type PatchTeamRemoteCaching$Outbound = {
    enabled?: boolean | undefined;
};
/** @internal */
export declare const PatchTeamRemoteCaching$outboundSchema: z.ZodType<PatchTeamRemoteCaching$Outbound, z.ZodTypeDef, PatchTeamRemoteCaching>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PatchTeamRemoteCaching$ {
    /** @deprecated use `PatchTeamRemoteCaching$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PatchTeamRemoteCaching, z.ZodTypeDef, unknown>;
    /** @deprecated use `PatchTeamRemoteCaching$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PatchTeamRemoteCaching$Outbound, z.ZodTypeDef, PatchTeamRemoteCaching>;
    /** @deprecated use `PatchTeamRemoteCaching$Outbound` instead. */
    type Outbound = PatchTeamRemoteCaching$Outbound;
}
export declare function patchTeamRemoteCachingToJSON(patchTeamRemoteCaching: PatchTeamRemoteCaching): string;
export declare function patchTeamRemoteCachingFromJSON(jsonString: string): SafeParseResult<PatchTeamRemoteCaching, SDKValidationError>;
/** @internal */
export declare const PatchTeamDeploymentType$inboundSchema: z.ZodNativeEnum<typeof PatchTeamDeploymentType>;
/** @internal */
export declare const PatchTeamDeploymentType$outboundSchema: z.ZodNativeEnum<typeof PatchTeamDeploymentType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PatchTeamDeploymentType$ {
    /** @deprecated use `PatchTeamDeploymentType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly All: "all";
        readonly Preview: "preview";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
    /** @deprecated use `PatchTeamDeploymentType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly All: "all";
        readonly Preview: "preview";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
}
/** @internal */
export declare const PatchTeamPasswordProtection$inboundSchema: z.ZodType<PatchTeamPasswordProtection, z.ZodTypeDef, unknown>;
/** @internal */
export type PatchTeamPasswordProtection$Outbound = {
    deploymentType: string;
    password?: string | null | undefined;
};
/** @internal */
export declare const PatchTeamPasswordProtection$outboundSchema: z.ZodType<PatchTeamPasswordProtection$Outbound, z.ZodTypeDef, PatchTeamPasswordProtection>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PatchTeamPasswordProtection$ {
    /** @deprecated use `PatchTeamPasswordProtection$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PatchTeamPasswordProtection, z.ZodTypeDef, unknown>;
    /** @deprecated use `PatchTeamPasswordProtection$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PatchTeamPasswordProtection$Outbound, z.ZodTypeDef, PatchTeamPasswordProtection>;
    /** @deprecated use `PatchTeamPasswordProtection$Outbound` instead. */
    type Outbound = PatchTeamPasswordProtection$Outbound;
}
export declare function patchTeamPasswordProtectionToJSON(patchTeamPasswordProtection: PatchTeamPasswordProtection): string;
export declare function patchTeamPasswordProtectionFromJSON(jsonString: string): SafeParseResult<PatchTeamPasswordProtection, SDKValidationError>;
/** @internal */
export declare const PatchTeamTeamsDeploymentType$inboundSchema: z.ZodNativeEnum<typeof PatchTeamTeamsDeploymentType>;
/** @internal */
export declare const PatchTeamTeamsDeploymentType$outboundSchema: z.ZodNativeEnum<typeof PatchTeamTeamsDeploymentType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PatchTeamTeamsDeploymentType$ {
    /** @deprecated use `PatchTeamTeamsDeploymentType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly All: "all";
        readonly Preview: "preview";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
    /** @deprecated use `PatchTeamTeamsDeploymentType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly All: "all";
        readonly Preview: "preview";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
}
/** @internal */
export declare const PatchTeamSsoProtection$inboundSchema: z.ZodType<PatchTeamSsoProtection, z.ZodTypeDef, unknown>;
/** @internal */
export type PatchTeamSsoProtection$Outbound = {
    deploymentType: string;
};
/** @internal */
export declare const PatchTeamSsoProtection$outboundSchema: z.ZodType<PatchTeamSsoProtection$Outbound, z.ZodTypeDef, PatchTeamSsoProtection>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PatchTeamSsoProtection$ {
    /** @deprecated use `PatchTeamSsoProtection$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PatchTeamSsoProtection, z.ZodTypeDef, unknown>;
    /** @deprecated use `PatchTeamSsoProtection$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PatchTeamSsoProtection$Outbound, z.ZodTypeDef, PatchTeamSsoProtection>;
    /** @deprecated use `PatchTeamSsoProtection$Outbound` instead. */
    type Outbound = PatchTeamSsoProtection$Outbound;
}
export declare function patchTeamSsoProtectionToJSON(patchTeamSsoProtection: PatchTeamSsoProtection): string;
export declare function patchTeamSsoProtectionFromJSON(jsonString: string): SafeParseResult<PatchTeamSsoProtection, SDKValidationError>;
/** @internal */
export declare const PatchTeamDefaultDeploymentProtection$inboundSchema: z.ZodType<PatchTeamDefaultDeploymentProtection, z.ZodTypeDef, unknown>;
/** @internal */
export type PatchTeamDefaultDeploymentProtection$Outbound = {
    passwordProtection?: PatchTeamPasswordProtection$Outbound | null | undefined;
    ssoProtection?: PatchTeamSsoProtection$Outbound | null | undefined;
};
/** @internal */
export declare const PatchTeamDefaultDeploymentProtection$outboundSchema: z.ZodType<PatchTeamDefaultDeploymentProtection$Outbound, z.ZodTypeDef, PatchTeamDefaultDeploymentProtection>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PatchTeamDefaultDeploymentProtection$ {
    /** @deprecated use `PatchTeamDefaultDeploymentProtection$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PatchTeamDefaultDeploymentProtection, z.ZodTypeDef, unknown>;
    /** @deprecated use `PatchTeamDefaultDeploymentProtection$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PatchTeamDefaultDeploymentProtection$Outbound, z.ZodTypeDef, PatchTeamDefaultDeploymentProtection>;
    /** @deprecated use `PatchTeamDefaultDeploymentProtection$Outbound` instead. */
    type Outbound = PatchTeamDefaultDeploymentProtection$Outbound;
}
export declare function patchTeamDefaultDeploymentProtectionToJSON(patchTeamDefaultDeploymentProtection: PatchTeamDefaultDeploymentProtection): string;
export declare function patchTeamDefaultDeploymentProtectionFromJSON(jsonString: string): SafeParseResult<PatchTeamDefaultDeploymentProtection, SDKValidationError>;
/** @internal */
export declare const Expiration$inboundSchema: z.ZodNativeEnum<typeof Expiration>;
/** @internal */
export declare const Expiration$outboundSchema: z.ZodNativeEnum<typeof Expiration>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Expiration$ {
    /** @deprecated use `Expiration$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Oney: "1y";
        readonly Sixm: "6m";
        readonly Threem: "3m";
        readonly Twom: "2m";
        readonly Onem: "1m";
        readonly Twow: "2w";
        readonly Onew: "1w";
        readonly Oned: "1d";
        readonly Unlimited: "unlimited";
    }>;
    /** @deprecated use `Expiration$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Oney: "1y";
        readonly Sixm: "6m";
        readonly Threem: "3m";
        readonly Twom: "2m";
        readonly Onem: "1m";
        readonly Twow: "2w";
        readonly Onew: "1w";
        readonly Oned: "1d";
        readonly Unlimited: "unlimited";
    }>;
}
/** @internal */
export declare const ExpirationProduction$inboundSchema: z.ZodNativeEnum<typeof ExpirationProduction>;
/** @internal */
export declare const ExpirationProduction$outboundSchema: z.ZodNativeEnum<typeof ExpirationProduction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ExpirationProduction$ {
    /** @deprecated use `ExpirationProduction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Oney: "1y";
        readonly Sixm: "6m";
        readonly Threem: "3m";
        readonly Twom: "2m";
        readonly Onem: "1m";
        readonly Twow: "2w";
        readonly Onew: "1w";
        readonly Oned: "1d";
        readonly Unlimited: "unlimited";
    }>;
    /** @deprecated use `ExpirationProduction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Oney: "1y";
        readonly Sixm: "6m";
        readonly Threem: "3m";
        readonly Twom: "2m";
        readonly Onem: "1m";
        readonly Twow: "2w";
        readonly Onew: "1w";
        readonly Oned: "1d";
        readonly Unlimited: "unlimited";
    }>;
}
/** @internal */
export declare const ExpirationCanceled$inboundSchema: z.ZodNativeEnum<typeof ExpirationCanceled>;
/** @internal */
export declare const ExpirationCanceled$outboundSchema: z.ZodNativeEnum<typeof ExpirationCanceled>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ExpirationCanceled$ {
    /** @deprecated use `ExpirationCanceled$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Oney: "1y";
        readonly Sixm: "6m";
        readonly Threem: "3m";
        readonly Twom: "2m";
        readonly Onem: "1m";
        readonly Twow: "2w";
        readonly Onew: "1w";
        readonly Oned: "1d";
        readonly Unlimited: "unlimited";
    }>;
    /** @deprecated use `ExpirationCanceled$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Oney: "1y";
        readonly Sixm: "6m";
        readonly Threem: "3m";
        readonly Twom: "2m";
        readonly Onem: "1m";
        readonly Twow: "2w";
        readonly Onew: "1w";
        readonly Oned: "1d";
        readonly Unlimited: "unlimited";
    }>;
}
/** @internal */
export declare const ExpirationErrored$inboundSchema: z.ZodNativeEnum<typeof ExpirationErrored>;
/** @internal */
export declare const ExpirationErrored$outboundSchema: z.ZodNativeEnum<typeof ExpirationErrored>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ExpirationErrored$ {
    /** @deprecated use `ExpirationErrored$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Oney: "1y";
        readonly Sixm: "6m";
        readonly Threem: "3m";
        readonly Twom: "2m";
        readonly Onem: "1m";
        readonly Twow: "2w";
        readonly Onew: "1w";
        readonly Oned: "1d";
        readonly Unlimited: "unlimited";
    }>;
    /** @deprecated use `ExpirationErrored$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Oney: "1y";
        readonly Sixm: "6m";
        readonly Threem: "3m";
        readonly Twom: "2m";
        readonly Onem: "1m";
        readonly Twow: "2w";
        readonly Onew: "1w";
        readonly Oned: "1d";
        readonly Unlimited: "unlimited";
    }>;
}
/** @internal */
export declare const PatchTeamDefaultExpirationSettings$inboundSchema: z.ZodType<PatchTeamDefaultExpirationSettings, z.ZodTypeDef, unknown>;
/** @internal */
export type PatchTeamDefaultExpirationSettings$Outbound = {
    expiration?: string | undefined;
    expirationProduction?: string | undefined;
    expirationCanceled?: string | undefined;
    expirationErrored?: string | undefined;
};
/** @internal */
export declare const PatchTeamDefaultExpirationSettings$outboundSchema: z.ZodType<PatchTeamDefaultExpirationSettings$Outbound, z.ZodTypeDef, PatchTeamDefaultExpirationSettings>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PatchTeamDefaultExpirationSettings$ {
    /** @deprecated use `PatchTeamDefaultExpirationSettings$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PatchTeamDefaultExpirationSettings, z.ZodTypeDef, unknown>;
    /** @deprecated use `PatchTeamDefaultExpirationSettings$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PatchTeamDefaultExpirationSettings$Outbound, z.ZodTypeDef, PatchTeamDefaultExpirationSettings>;
    /** @deprecated use `PatchTeamDefaultExpirationSettings$Outbound` instead. */
    type Outbound = PatchTeamDefaultExpirationSettings$Outbound;
}
export declare function patchTeamDefaultExpirationSettingsToJSON(patchTeamDefaultExpirationSettings: PatchTeamDefaultExpirationSettings): string;
export declare function patchTeamDefaultExpirationSettingsFromJSON(jsonString: string): SafeParseResult<PatchTeamDefaultExpirationSettings, SDKValidationError>;
/** @internal */
export declare const PatchTeamRequestBody$inboundSchema: z.ZodType<PatchTeamRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type PatchTeamRequestBody$Outbound = {
    avatar?: string | undefined;
    description?: string | undefined;
    emailDomain?: string | null | undefined;
    name?: string | undefined;
    previewDeploymentSuffix?: string | null | undefined;
    regenerateInviteCode?: boolean | undefined;
    saml?: PatchTeamSaml$Outbound | undefined;
    slug?: string | undefined;
    enablePreviewFeedback?: string | undefined;
    enableProductionFeedback?: string | undefined;
    sensitiveEnvironmentVariablePolicy?: string | undefined;
    remoteCaching?: PatchTeamRemoteCaching$Outbound | undefined;
    hideIpAddresses?: boolean | undefined;
    hideIpAddressesInLogDrains?: boolean | undefined;
    defaultDeploymentProtection?: PatchTeamDefaultDeploymentProtection$Outbound | undefined;
    defaultExpirationSettings?: PatchTeamDefaultExpirationSettings$Outbound | undefined;
};
/** @internal */
export declare const PatchTeamRequestBody$outboundSchema: z.ZodType<PatchTeamRequestBody$Outbound, z.ZodTypeDef, PatchTeamRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PatchTeamRequestBody$ {
    /** @deprecated use `PatchTeamRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PatchTeamRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `PatchTeamRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PatchTeamRequestBody$Outbound, z.ZodTypeDef, PatchTeamRequestBody>;
    /** @deprecated use `PatchTeamRequestBody$Outbound` instead. */
    type Outbound = PatchTeamRequestBody$Outbound;
}
export declare function patchTeamRequestBodyToJSON(patchTeamRequestBody: PatchTeamRequestBody): string;
export declare function patchTeamRequestBodyFromJSON(jsonString: string): SafeParseResult<PatchTeamRequestBody, SDKValidationError>;
/** @internal */
export declare const PatchTeamRequest$inboundSchema: z.ZodType<PatchTeamRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type PatchTeamRequest$Outbound = {
    teamId: string;
    slug?: string | undefined;
    RequestBody: PatchTeamRequestBody$Outbound;
};
/** @internal */
export declare const PatchTeamRequest$outboundSchema: z.ZodType<PatchTeamRequest$Outbound, z.ZodTypeDef, PatchTeamRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PatchTeamRequest$ {
    /** @deprecated use `PatchTeamRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PatchTeamRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `PatchTeamRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PatchTeamRequest$Outbound, z.ZodTypeDef, PatchTeamRequest>;
    /** @deprecated use `PatchTeamRequest$Outbound` instead. */
    type Outbound = PatchTeamRequest$Outbound;
}
export declare function patchTeamRequestToJSON(patchTeamRequest: PatchTeamRequest): string;
export declare function patchTeamRequestFromJSON(jsonString: string): SafeParseResult<PatchTeamRequest, SDKValidationError>;
//# sourceMappingURL=patchteamop.d.ts.map