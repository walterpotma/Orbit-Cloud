/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/**
 * The project role that will be added to this Access Group. \"null\" will remove this project level role.
 */
export const CreateAccessGroupRole = {
    Admin: "ADMIN",
    ProjectViewer: "PROJECT_VIEWER",
    ProjectDeveloper: "PROJECT_DEVELOPER",
};
export const CreateAccessGroupEntitlements = {
    V0: "v0",
};
/** @internal */
export const CreateAccessGroupRole$inboundSchema = z.nativeEnum(CreateAccessGroupRole);
/** @internal */
export const CreateAccessGroupRole$outboundSchema = CreateAccessGroupRole$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateAccessGroupRole$;
(function (CreateAccessGroupRole$) {
    /** @deprecated use `CreateAccessGroupRole$inboundSchema` instead. */
    CreateAccessGroupRole$.inboundSchema = CreateAccessGroupRole$inboundSchema;
    /** @deprecated use `CreateAccessGroupRole$outboundSchema` instead. */
    CreateAccessGroupRole$.outboundSchema = CreateAccessGroupRole$outboundSchema;
})(CreateAccessGroupRole$ || (CreateAccessGroupRole$ = {}));
/** @internal */
export const CreateAccessGroupProjects$inboundSchema = z.object({
    projectId: z.string(),
    role: z.nullable(CreateAccessGroupRole$inboundSchema),
});
/** @internal */
export const CreateAccessGroupProjects$outboundSchema = z.object({
    projectId: z.string(),
    role: z.nullable(CreateAccessGroupRole$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateAccessGroupProjects$;
(function (CreateAccessGroupProjects$) {
    /** @deprecated use `CreateAccessGroupProjects$inboundSchema` instead. */
    CreateAccessGroupProjects$.inboundSchema = CreateAccessGroupProjects$inboundSchema;
    /** @deprecated use `CreateAccessGroupProjects$outboundSchema` instead. */
    CreateAccessGroupProjects$.outboundSchema = CreateAccessGroupProjects$outboundSchema;
})(CreateAccessGroupProjects$ || (CreateAccessGroupProjects$ = {}));
export function createAccessGroupProjectsToJSON(createAccessGroupProjects) {
    return JSON.stringify(CreateAccessGroupProjects$outboundSchema.parse(createAccessGroupProjects));
}
export function createAccessGroupProjectsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateAccessGroupProjects$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateAccessGroupProjects' from JSON`);
}
/** @internal */
export const CreateAccessGroupRequestBody$inboundSchema = z.object({
    name: z.string(),
    projects: z.array(z.lazy(() => CreateAccessGroupProjects$inboundSchema))
        .optional(),
    membersToAdd: z.array(z.string()).optional(),
});
/** @internal */
export const CreateAccessGroupRequestBody$outboundSchema = z.object({
    name: z.string(),
    projects: z.array(z.lazy(() => CreateAccessGroupProjects$outboundSchema))
        .optional(),
    membersToAdd: z.array(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateAccessGroupRequestBody$;
(function (CreateAccessGroupRequestBody$) {
    /** @deprecated use `CreateAccessGroupRequestBody$inboundSchema` instead. */
    CreateAccessGroupRequestBody$.inboundSchema = CreateAccessGroupRequestBody$inboundSchema;
    /** @deprecated use `CreateAccessGroupRequestBody$outboundSchema` instead. */
    CreateAccessGroupRequestBody$.outboundSchema = CreateAccessGroupRequestBody$outboundSchema;
})(CreateAccessGroupRequestBody$ || (CreateAccessGroupRequestBody$ = {}));
export function createAccessGroupRequestBodyToJSON(createAccessGroupRequestBody) {
    return JSON.stringify(CreateAccessGroupRequestBody$outboundSchema.parse(createAccessGroupRequestBody));
}
export function createAccessGroupRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateAccessGroupRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateAccessGroupRequestBody' from JSON`);
}
/** @internal */
export const CreateAccessGroupRequest$inboundSchema = z.object({
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => CreateAccessGroupRequestBody$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const CreateAccessGroupRequest$outboundSchema = z.object({
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => CreateAccessGroupRequestBody$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateAccessGroupRequest$;
(function (CreateAccessGroupRequest$) {
    /** @deprecated use `CreateAccessGroupRequest$inboundSchema` instead. */
    CreateAccessGroupRequest$.inboundSchema = CreateAccessGroupRequest$inboundSchema;
    /** @deprecated use `CreateAccessGroupRequest$outboundSchema` instead. */
    CreateAccessGroupRequest$.outboundSchema = CreateAccessGroupRequest$outboundSchema;
})(CreateAccessGroupRequest$ || (CreateAccessGroupRequest$ = {}));
export function createAccessGroupRequestToJSON(createAccessGroupRequest) {
    return JSON.stringify(CreateAccessGroupRequest$outboundSchema.parse(createAccessGroupRequest));
}
export function createAccessGroupRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateAccessGroupRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateAccessGroupRequest' from JSON`);
}
/** @internal */
export const CreateAccessGroupEntitlements$inboundSchema = z.nativeEnum(CreateAccessGroupEntitlements);
/** @internal */
export const CreateAccessGroupEntitlements$outboundSchema = CreateAccessGroupEntitlements$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateAccessGroupEntitlements$;
(function (CreateAccessGroupEntitlements$) {
    /** @deprecated use `CreateAccessGroupEntitlements$inboundSchema` instead. */
    CreateAccessGroupEntitlements$.inboundSchema = CreateAccessGroupEntitlements$inboundSchema;
    /** @deprecated use `CreateAccessGroupEntitlements$outboundSchema` instead. */
    CreateAccessGroupEntitlements$.outboundSchema = CreateAccessGroupEntitlements$outboundSchema;
})(CreateAccessGroupEntitlements$ || (CreateAccessGroupEntitlements$ = {}));
/** @internal */
export const CreateAccessGroupResponseBody$inboundSchema = z.object({
    entitlements: z.array(CreateAccessGroupEntitlements$inboundSchema),
    membersCount: z.number(),
    projectsCount: z.number(),
    name: z.string(),
    createdAt: z.string(),
    teamId: z.string(),
    updatedAt: z.string(),
    accessGroupId: z.string(),
    teamRoles: z.array(z.string()).optional(),
    teamPermissions: z.array(z.string()).optional(),
});
/** @internal */
export const CreateAccessGroupResponseBody$outboundSchema = z.object({
    entitlements: z.array(CreateAccessGroupEntitlements$outboundSchema),
    membersCount: z.number(),
    projectsCount: z.number(),
    name: z.string(),
    createdAt: z.string(),
    teamId: z.string(),
    updatedAt: z.string(),
    accessGroupId: z.string(),
    teamRoles: z.array(z.string()).optional(),
    teamPermissions: z.array(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateAccessGroupResponseBody$;
(function (CreateAccessGroupResponseBody$) {
    /** @deprecated use `CreateAccessGroupResponseBody$inboundSchema` instead. */
    CreateAccessGroupResponseBody$.inboundSchema = CreateAccessGroupResponseBody$inboundSchema;
    /** @deprecated use `CreateAccessGroupResponseBody$outboundSchema` instead. */
    CreateAccessGroupResponseBody$.outboundSchema = CreateAccessGroupResponseBody$outboundSchema;
})(CreateAccessGroupResponseBody$ || (CreateAccessGroupResponseBody$ = {}));
export function createAccessGroupResponseBodyToJSON(createAccessGroupResponseBody) {
    return JSON.stringify(CreateAccessGroupResponseBody$outboundSchema.parse(createAccessGroupResponseBody));
}
export function createAccessGroupResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateAccessGroupResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateAccessGroupResponseBody' from JSON`);
}
//# sourceMappingURL=createaccessgroupop.js.map