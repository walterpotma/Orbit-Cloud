import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type GetIntegrationResourceRequest = {
    /**
     * The ID of the integration configuration (installation) the resource belongs to
     */
    integrationConfigurationId: string;
    /**
     * The ID provided by the 3rd party provider for the given resource
     */
    resourceId: string;
};
/**
 * The current status of the resource
 */
export declare const GetIntegrationResourceStatus: {
    readonly Ready: "ready";
    readonly Pending: "pending";
    readonly Suspended: "suspended";
    readonly Resumed: "resumed";
    readonly Uninstalled: "uninstalled";
    readonly Error: "error";
};
/**
 * The current status of the resource
 */
export type GetIntegrationResourceStatus = ClosedEnum<typeof GetIntegrationResourceStatus>;
export type Experimentation = {
    edgeConfigSyncingEnabled?: boolean | undefined;
    edgeConfigId?: string | undefined;
    edgeConfigTokenId?: string | undefined;
};
/**
 * Any settings provided for the resource to support its product's protocols
 */
export type ProtocolSettings = {
    experimentation?: Experimentation | undefined;
};
export declare const GetIntegrationResourceLevel: {
    readonly Error: "error";
    readonly Info: "info";
    readonly Warn: "warn";
};
export type GetIntegrationResourceLevel = ClosedEnum<typeof GetIntegrationResourceLevel>;
/**
 * The notification, if set, displayed to the user when viewing the resource in Vercel
 */
export type GetIntegrationResourceNotification = {
    level: GetIntegrationResourceLevel;
    title: string;
    message?: string | undefined;
    href?: string | undefined;
};
export type GetIntegrationResourceMetadata = string | number | boolean | Array<string> | Array<number>;
export type GetIntegrationResourceResponseBody = {
    /**
     * The ID provided by the 3rd party provider for the given resource
     */
    id: string;
    /**
     * The ID assigned by Vercel for the given resource
     */
    internalId: string;
    /**
     * The name of the resource as it is recorded in Vercel
     */
    name: string;
    /**
     * The current status of the resource
     */
    status?: GetIntegrationResourceStatus | undefined;
    /**
     * The ID of the product the resource is derived from
     */
    productId: string;
    /**
     * Any settings provided for the resource to support its product's protocols
     */
    protocolSettings?: ProtocolSettings | undefined;
    /**
     * The notification, if set, displayed to the user when viewing the resource in Vercel
     */
    notification?: GetIntegrationResourceNotification | undefined;
    /**
     * The ID of the billing plan the resource is subscribed to, if applicable
     */
    billingPlanId?: string | undefined;
    /**
     * The configured metadata for the resource as defined by its product's Metadata Schema
     */
    metadata?: {
        [k: string]: string | number | boolean | Array<string> | Array<number>;
    } | undefined;
};
/** @internal */
export declare const GetIntegrationResourceRequest$inboundSchema: z.ZodType<GetIntegrationResourceRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetIntegrationResourceRequest$Outbound = {
    integrationConfigurationId: string;
    resourceId: string;
};
/** @internal */
export declare const GetIntegrationResourceRequest$outboundSchema: z.ZodType<GetIntegrationResourceRequest$Outbound, z.ZodTypeDef, GetIntegrationResourceRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetIntegrationResourceRequest$ {
    /** @deprecated use `GetIntegrationResourceRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetIntegrationResourceRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetIntegrationResourceRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetIntegrationResourceRequest$Outbound, z.ZodTypeDef, GetIntegrationResourceRequest>;
    /** @deprecated use `GetIntegrationResourceRequest$Outbound` instead. */
    type Outbound = GetIntegrationResourceRequest$Outbound;
}
export declare function getIntegrationResourceRequestToJSON(getIntegrationResourceRequest: GetIntegrationResourceRequest): string;
export declare function getIntegrationResourceRequestFromJSON(jsonString: string): SafeParseResult<GetIntegrationResourceRequest, SDKValidationError>;
/** @internal */
export declare const GetIntegrationResourceStatus$inboundSchema: z.ZodNativeEnum<typeof GetIntegrationResourceStatus>;
/** @internal */
export declare const GetIntegrationResourceStatus$outboundSchema: z.ZodNativeEnum<typeof GetIntegrationResourceStatus>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetIntegrationResourceStatus$ {
    /** @deprecated use `GetIntegrationResourceStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Ready: "ready";
        readonly Pending: "pending";
        readonly Suspended: "suspended";
        readonly Resumed: "resumed";
        readonly Uninstalled: "uninstalled";
        readonly Error: "error";
    }>;
    /** @deprecated use `GetIntegrationResourceStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Ready: "ready";
        readonly Pending: "pending";
        readonly Suspended: "suspended";
        readonly Resumed: "resumed";
        readonly Uninstalled: "uninstalled";
        readonly Error: "error";
    }>;
}
/** @internal */
export declare const Experimentation$inboundSchema: z.ZodType<Experimentation, z.ZodTypeDef, unknown>;
/** @internal */
export type Experimentation$Outbound = {
    edgeConfigSyncingEnabled?: boolean | undefined;
    edgeConfigId?: string | undefined;
    edgeConfigTokenId?: string | undefined;
};
/** @internal */
export declare const Experimentation$outboundSchema: z.ZodType<Experimentation$Outbound, z.ZodTypeDef, Experimentation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Experimentation$ {
    /** @deprecated use `Experimentation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Experimentation, z.ZodTypeDef, unknown>;
    /** @deprecated use `Experimentation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Experimentation$Outbound, z.ZodTypeDef, Experimentation>;
    /** @deprecated use `Experimentation$Outbound` instead. */
    type Outbound = Experimentation$Outbound;
}
export declare function experimentationToJSON(experimentation: Experimentation): string;
export declare function experimentationFromJSON(jsonString: string): SafeParseResult<Experimentation, SDKValidationError>;
/** @internal */
export declare const ProtocolSettings$inboundSchema: z.ZodType<ProtocolSettings, z.ZodTypeDef, unknown>;
/** @internal */
export type ProtocolSettings$Outbound = {
    experimentation?: Experimentation$Outbound | undefined;
};
/** @internal */
export declare const ProtocolSettings$outboundSchema: z.ZodType<ProtocolSettings$Outbound, z.ZodTypeDef, ProtocolSettings>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ProtocolSettings$ {
    /** @deprecated use `ProtocolSettings$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ProtocolSettings, z.ZodTypeDef, unknown>;
    /** @deprecated use `ProtocolSettings$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ProtocolSettings$Outbound, z.ZodTypeDef, ProtocolSettings>;
    /** @deprecated use `ProtocolSettings$Outbound` instead. */
    type Outbound = ProtocolSettings$Outbound;
}
export declare function protocolSettingsToJSON(protocolSettings: ProtocolSettings): string;
export declare function protocolSettingsFromJSON(jsonString: string): SafeParseResult<ProtocolSettings, SDKValidationError>;
/** @internal */
export declare const GetIntegrationResourceLevel$inboundSchema: z.ZodNativeEnum<typeof GetIntegrationResourceLevel>;
/** @internal */
export declare const GetIntegrationResourceLevel$outboundSchema: z.ZodNativeEnum<typeof GetIntegrationResourceLevel>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetIntegrationResourceLevel$ {
    /** @deprecated use `GetIntegrationResourceLevel$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Error: "error";
        readonly Info: "info";
        readonly Warn: "warn";
    }>;
    /** @deprecated use `GetIntegrationResourceLevel$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Error: "error";
        readonly Info: "info";
        readonly Warn: "warn";
    }>;
}
/** @internal */
export declare const GetIntegrationResourceNotification$inboundSchema: z.ZodType<GetIntegrationResourceNotification, z.ZodTypeDef, unknown>;
/** @internal */
export type GetIntegrationResourceNotification$Outbound = {
    level: string;
    title: string;
    message?: string | undefined;
    href?: string | undefined;
};
/** @internal */
export declare const GetIntegrationResourceNotification$outboundSchema: z.ZodType<GetIntegrationResourceNotification$Outbound, z.ZodTypeDef, GetIntegrationResourceNotification>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetIntegrationResourceNotification$ {
    /** @deprecated use `GetIntegrationResourceNotification$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetIntegrationResourceNotification, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetIntegrationResourceNotification$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetIntegrationResourceNotification$Outbound, z.ZodTypeDef, GetIntegrationResourceNotification>;
    /** @deprecated use `GetIntegrationResourceNotification$Outbound` instead. */
    type Outbound = GetIntegrationResourceNotification$Outbound;
}
export declare function getIntegrationResourceNotificationToJSON(getIntegrationResourceNotification: GetIntegrationResourceNotification): string;
export declare function getIntegrationResourceNotificationFromJSON(jsonString: string): SafeParseResult<GetIntegrationResourceNotification, SDKValidationError>;
/** @internal */
export declare const GetIntegrationResourceMetadata$inboundSchema: z.ZodType<GetIntegrationResourceMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type GetIntegrationResourceMetadata$Outbound = string | number | boolean | Array<string> | Array<number>;
/** @internal */
export declare const GetIntegrationResourceMetadata$outboundSchema: z.ZodType<GetIntegrationResourceMetadata$Outbound, z.ZodTypeDef, GetIntegrationResourceMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetIntegrationResourceMetadata$ {
    /** @deprecated use `GetIntegrationResourceMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetIntegrationResourceMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetIntegrationResourceMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetIntegrationResourceMetadata$Outbound, z.ZodTypeDef, GetIntegrationResourceMetadata>;
    /** @deprecated use `GetIntegrationResourceMetadata$Outbound` instead. */
    type Outbound = GetIntegrationResourceMetadata$Outbound;
}
export declare function getIntegrationResourceMetadataToJSON(getIntegrationResourceMetadata: GetIntegrationResourceMetadata): string;
export declare function getIntegrationResourceMetadataFromJSON(jsonString: string): SafeParseResult<GetIntegrationResourceMetadata, SDKValidationError>;
/** @internal */
export declare const GetIntegrationResourceResponseBody$inboundSchema: z.ZodType<GetIntegrationResourceResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type GetIntegrationResourceResponseBody$Outbound = {
    id: string;
    internalId: string;
    name: string;
    status?: string | undefined;
    productId: string;
    protocolSettings?: ProtocolSettings$Outbound | undefined;
    notification?: GetIntegrationResourceNotification$Outbound | undefined;
    billingPlanId?: string | undefined;
    metadata?: {
        [k: string]: string | number | boolean | Array<string> | Array<number>;
    } | undefined;
};
/** @internal */
export declare const GetIntegrationResourceResponseBody$outboundSchema: z.ZodType<GetIntegrationResourceResponseBody$Outbound, z.ZodTypeDef, GetIntegrationResourceResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetIntegrationResourceResponseBody$ {
    /** @deprecated use `GetIntegrationResourceResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetIntegrationResourceResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetIntegrationResourceResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetIntegrationResourceResponseBody$Outbound, z.ZodTypeDef, GetIntegrationResourceResponseBody>;
    /** @deprecated use `GetIntegrationResourceResponseBody$Outbound` instead. */
    type Outbound = GetIntegrationResourceResponseBody$Outbound;
}
export declare function getIntegrationResourceResponseBodyToJSON(getIntegrationResourceResponseBody: GetIntegrationResourceResponseBody): string;
export declare function getIntegrationResourceResponseBodyFromJSON(jsonString: string): SafeParseResult<GetIntegrationResourceResponseBody, SDKValidationError>;
//# sourceMappingURL=getintegrationresourceop.d.ts.map