import * as z from "zod";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type MoveProjectDomainRequestBody = {
    /**
     * The unique target project identifier
     */
    projectId: string;
};
export type MoveProjectDomainRequest = {
    /**
     * The unique project identifier or the project name
     */
    idOrName: string;
    /**
     * The project domain name
     */
    domain: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody?: MoveProjectDomainRequestBody | undefined;
};
/**
 * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
 */
export type MoveProjectDomainVerification = {
    type: string;
    domain: string;
    value: string;
    reason: string;
};
/**
 * The domain was updated successfuly
 */
export type MoveProjectDomainResponseBody = {
    name: string;
    apexName: string;
    projectId: string;
    redirect?: string | null | undefined;
    redirectStatusCode?: number | null | undefined;
    gitBranch?: string | null | undefined;
    customEnvironmentId?: string | null | undefined;
    updatedAt?: number | undefined;
    createdAt?: number | undefined;
    /**
     * `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.
     */
    verified: boolean;
    /**
     * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
     */
    verification?: Array<MoveProjectDomainVerification> | undefined;
};
/** @internal */
export declare const MoveProjectDomainRequestBody$inboundSchema: z.ZodType<MoveProjectDomainRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type MoveProjectDomainRequestBody$Outbound = {
    projectId: string;
};
/** @internal */
export declare const MoveProjectDomainRequestBody$outboundSchema: z.ZodType<MoveProjectDomainRequestBody$Outbound, z.ZodTypeDef, MoveProjectDomainRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MoveProjectDomainRequestBody$ {
    /** @deprecated use `MoveProjectDomainRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<MoveProjectDomainRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `MoveProjectDomainRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<MoveProjectDomainRequestBody$Outbound, z.ZodTypeDef, MoveProjectDomainRequestBody>;
    /** @deprecated use `MoveProjectDomainRequestBody$Outbound` instead. */
    type Outbound = MoveProjectDomainRequestBody$Outbound;
}
export declare function moveProjectDomainRequestBodyToJSON(moveProjectDomainRequestBody: MoveProjectDomainRequestBody): string;
export declare function moveProjectDomainRequestBodyFromJSON(jsonString: string): SafeParseResult<MoveProjectDomainRequestBody, SDKValidationError>;
/** @internal */
export declare const MoveProjectDomainRequest$inboundSchema: z.ZodType<MoveProjectDomainRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type MoveProjectDomainRequest$Outbound = {
    idOrName: string;
    domain: string;
    teamId?: string | undefined;
    slug?: string | undefined;
    RequestBody?: MoveProjectDomainRequestBody$Outbound | undefined;
};
/** @internal */
export declare const MoveProjectDomainRequest$outboundSchema: z.ZodType<MoveProjectDomainRequest$Outbound, z.ZodTypeDef, MoveProjectDomainRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MoveProjectDomainRequest$ {
    /** @deprecated use `MoveProjectDomainRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<MoveProjectDomainRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `MoveProjectDomainRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<MoveProjectDomainRequest$Outbound, z.ZodTypeDef, MoveProjectDomainRequest>;
    /** @deprecated use `MoveProjectDomainRequest$Outbound` instead. */
    type Outbound = MoveProjectDomainRequest$Outbound;
}
export declare function moveProjectDomainRequestToJSON(moveProjectDomainRequest: MoveProjectDomainRequest): string;
export declare function moveProjectDomainRequestFromJSON(jsonString: string): SafeParseResult<MoveProjectDomainRequest, SDKValidationError>;
/** @internal */
export declare const MoveProjectDomainVerification$inboundSchema: z.ZodType<MoveProjectDomainVerification, z.ZodTypeDef, unknown>;
/** @internal */
export type MoveProjectDomainVerification$Outbound = {
    type: string;
    domain: string;
    value: string;
    reason: string;
};
/** @internal */
export declare const MoveProjectDomainVerification$outboundSchema: z.ZodType<MoveProjectDomainVerification$Outbound, z.ZodTypeDef, MoveProjectDomainVerification>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MoveProjectDomainVerification$ {
    /** @deprecated use `MoveProjectDomainVerification$inboundSchema` instead. */
    const inboundSchema: z.ZodType<MoveProjectDomainVerification, z.ZodTypeDef, unknown>;
    /** @deprecated use `MoveProjectDomainVerification$outboundSchema` instead. */
    const outboundSchema: z.ZodType<MoveProjectDomainVerification$Outbound, z.ZodTypeDef, MoveProjectDomainVerification>;
    /** @deprecated use `MoveProjectDomainVerification$Outbound` instead. */
    type Outbound = MoveProjectDomainVerification$Outbound;
}
export declare function moveProjectDomainVerificationToJSON(moveProjectDomainVerification: MoveProjectDomainVerification): string;
export declare function moveProjectDomainVerificationFromJSON(jsonString: string): SafeParseResult<MoveProjectDomainVerification, SDKValidationError>;
/** @internal */
export declare const MoveProjectDomainResponseBody$inboundSchema: z.ZodType<MoveProjectDomainResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type MoveProjectDomainResponseBody$Outbound = {
    name: string;
    apexName: string;
    projectId: string;
    redirect?: string | null | undefined;
    redirectStatusCode?: number | null | undefined;
    gitBranch?: string | null | undefined;
    customEnvironmentId?: string | null | undefined;
    updatedAt?: number | undefined;
    createdAt?: number | undefined;
    verified: boolean;
    verification?: Array<MoveProjectDomainVerification$Outbound> | undefined;
};
/** @internal */
export declare const MoveProjectDomainResponseBody$outboundSchema: z.ZodType<MoveProjectDomainResponseBody$Outbound, z.ZodTypeDef, MoveProjectDomainResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MoveProjectDomainResponseBody$ {
    /** @deprecated use `MoveProjectDomainResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<MoveProjectDomainResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `MoveProjectDomainResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<MoveProjectDomainResponseBody$Outbound, z.ZodTypeDef, MoveProjectDomainResponseBody>;
    /** @deprecated use `MoveProjectDomainResponseBody$Outbound` instead. */
    type Outbound = MoveProjectDomainResponseBody$Outbound;
}
export declare function moveProjectDomainResponseBodyToJSON(moveProjectDomainResponseBody: MoveProjectDomainResponseBody): string;
export declare function moveProjectDomainResponseBodyFromJSON(jsonString: string): SafeParseResult<MoveProjectDomainResponseBody, SDKValidationError>;
//# sourceMappingURL=moveprojectdomainop.d.ts.map