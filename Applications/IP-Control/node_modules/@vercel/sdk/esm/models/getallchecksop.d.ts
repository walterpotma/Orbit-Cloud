import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type GetAllChecksRequest = {
    /**
     * The deployment to get all checks for
     */
    deploymentId: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};
export declare const GetAllChecksConclusion: {
    readonly Canceled: "canceled";
    readonly Failed: "failed";
    readonly Neutral: "neutral";
    readonly Succeeded: "succeeded";
    readonly Skipped: "skipped";
    readonly Stale: "stale";
};
export type GetAllChecksConclusion = ClosedEnum<typeof GetAllChecksConclusion>;
export declare const GetAllChecksSource: {
    readonly WebVitals: "web-vitals";
};
export type GetAllChecksSource = ClosedEnum<typeof GetAllChecksSource>;
export type GetAllChecksFCP = {
    value: number | null;
    previousValue?: number | undefined;
    source: GetAllChecksSource;
};
export declare const GetAllChecksChecksSource: {
    readonly WebVitals: "web-vitals";
};
export type GetAllChecksChecksSource = ClosedEnum<typeof GetAllChecksChecksSource>;
export type GetAllChecksLCP = {
    value: number | null;
    previousValue?: number | undefined;
    source: GetAllChecksChecksSource;
};
export declare const GetAllChecksChecksResponseSource: {
    readonly WebVitals: "web-vitals";
};
export type GetAllChecksChecksResponseSource = ClosedEnum<typeof GetAllChecksChecksResponseSource>;
export type GetAllChecksCLS = {
    value: number | null;
    previousValue?: number | undefined;
    source: GetAllChecksChecksResponseSource;
};
export declare const GetAllChecksChecksResponse200Source: {
    readonly WebVitals: "web-vitals";
};
export type GetAllChecksChecksResponse200Source = ClosedEnum<typeof GetAllChecksChecksResponse200Source>;
export type GetAllChecksTBT = {
    value: number | null;
    previousValue?: number | undefined;
    source: GetAllChecksChecksResponse200Source;
};
export declare const GetAllChecksChecksResponse200ApplicationJSONSource: {
    readonly WebVitals: "web-vitals";
};
export type GetAllChecksChecksResponse200ApplicationJSONSource = ClosedEnum<typeof GetAllChecksChecksResponse200ApplicationJSONSource>;
export type GetAllChecksVirtualExperienceScore = {
    value: number | null;
    previousValue?: number | undefined;
    source: GetAllChecksChecksResponse200ApplicationJSONSource;
};
export type GetAllChecksMetrics = {
    fcp: GetAllChecksFCP;
    lcp: GetAllChecksLCP;
    cls: GetAllChecksCLS;
    tbt: GetAllChecksTBT;
    virtualExperienceScore?: GetAllChecksVirtualExperienceScore | undefined;
};
export type GetAllChecksOutput = {
    metrics?: GetAllChecksMetrics | undefined;
};
export declare const GetAllChecksStatus: {
    readonly Registered: "registered";
    readonly Running: "running";
    readonly Completed: "completed";
};
export type GetAllChecksStatus = ClosedEnum<typeof GetAllChecksStatus>;
export type Checks = {
    completedAt?: number | undefined;
    conclusion?: GetAllChecksConclusion | undefined;
    createdAt: number;
    detailsUrl?: string | undefined;
    id: string;
    integrationId: string;
    name: string;
    output?: GetAllChecksOutput | undefined;
    path?: string | undefined;
    rerequestable: boolean;
    blocking: boolean;
    startedAt?: number | undefined;
    status: GetAllChecksStatus;
    updatedAt: number;
};
export type GetAllChecksResponseBody = {
    checks: Array<Checks>;
};
/** @internal */
export declare const GetAllChecksRequest$inboundSchema: z.ZodType<GetAllChecksRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetAllChecksRequest$Outbound = {
    deploymentId: string;
    teamId?: string | undefined;
    slug?: string | undefined;
};
/** @internal */
export declare const GetAllChecksRequest$outboundSchema: z.ZodType<GetAllChecksRequest$Outbound, z.ZodTypeDef, GetAllChecksRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAllChecksRequest$ {
    /** @deprecated use `GetAllChecksRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetAllChecksRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetAllChecksRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetAllChecksRequest$Outbound, z.ZodTypeDef, GetAllChecksRequest>;
    /** @deprecated use `GetAllChecksRequest$Outbound` instead. */
    type Outbound = GetAllChecksRequest$Outbound;
}
export declare function getAllChecksRequestToJSON(getAllChecksRequest: GetAllChecksRequest): string;
export declare function getAllChecksRequestFromJSON(jsonString: string): SafeParseResult<GetAllChecksRequest, SDKValidationError>;
/** @internal */
export declare const GetAllChecksConclusion$inboundSchema: z.ZodNativeEnum<typeof GetAllChecksConclusion>;
/** @internal */
export declare const GetAllChecksConclusion$outboundSchema: z.ZodNativeEnum<typeof GetAllChecksConclusion>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAllChecksConclusion$ {
    /** @deprecated use `GetAllChecksConclusion$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Canceled: "canceled";
        readonly Failed: "failed";
        readonly Neutral: "neutral";
        readonly Succeeded: "succeeded";
        readonly Skipped: "skipped";
        readonly Stale: "stale";
    }>;
    /** @deprecated use `GetAllChecksConclusion$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Canceled: "canceled";
        readonly Failed: "failed";
        readonly Neutral: "neutral";
        readonly Succeeded: "succeeded";
        readonly Skipped: "skipped";
        readonly Stale: "stale";
    }>;
}
/** @internal */
export declare const GetAllChecksSource$inboundSchema: z.ZodNativeEnum<typeof GetAllChecksSource>;
/** @internal */
export declare const GetAllChecksSource$outboundSchema: z.ZodNativeEnum<typeof GetAllChecksSource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAllChecksSource$ {
    /** @deprecated use `GetAllChecksSource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
    /** @deprecated use `GetAllChecksSource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
}
/** @internal */
export declare const GetAllChecksFCP$inboundSchema: z.ZodType<GetAllChecksFCP, z.ZodTypeDef, unknown>;
/** @internal */
export type GetAllChecksFCP$Outbound = {
    value: number | null;
    previousValue?: number | undefined;
    source: string;
};
/** @internal */
export declare const GetAllChecksFCP$outboundSchema: z.ZodType<GetAllChecksFCP$Outbound, z.ZodTypeDef, GetAllChecksFCP>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAllChecksFCP$ {
    /** @deprecated use `GetAllChecksFCP$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetAllChecksFCP, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetAllChecksFCP$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetAllChecksFCP$Outbound, z.ZodTypeDef, GetAllChecksFCP>;
    /** @deprecated use `GetAllChecksFCP$Outbound` instead. */
    type Outbound = GetAllChecksFCP$Outbound;
}
export declare function getAllChecksFCPToJSON(getAllChecksFCP: GetAllChecksFCP): string;
export declare function getAllChecksFCPFromJSON(jsonString: string): SafeParseResult<GetAllChecksFCP, SDKValidationError>;
/** @internal */
export declare const GetAllChecksChecksSource$inboundSchema: z.ZodNativeEnum<typeof GetAllChecksChecksSource>;
/** @internal */
export declare const GetAllChecksChecksSource$outboundSchema: z.ZodNativeEnum<typeof GetAllChecksChecksSource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAllChecksChecksSource$ {
    /** @deprecated use `GetAllChecksChecksSource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
    /** @deprecated use `GetAllChecksChecksSource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
}
/** @internal */
export declare const GetAllChecksLCP$inboundSchema: z.ZodType<GetAllChecksLCP, z.ZodTypeDef, unknown>;
/** @internal */
export type GetAllChecksLCP$Outbound = {
    value: number | null;
    previousValue?: number | undefined;
    source: string;
};
/** @internal */
export declare const GetAllChecksLCP$outboundSchema: z.ZodType<GetAllChecksLCP$Outbound, z.ZodTypeDef, GetAllChecksLCP>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAllChecksLCP$ {
    /** @deprecated use `GetAllChecksLCP$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetAllChecksLCP, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetAllChecksLCP$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetAllChecksLCP$Outbound, z.ZodTypeDef, GetAllChecksLCP>;
    /** @deprecated use `GetAllChecksLCP$Outbound` instead. */
    type Outbound = GetAllChecksLCP$Outbound;
}
export declare function getAllChecksLCPToJSON(getAllChecksLCP: GetAllChecksLCP): string;
export declare function getAllChecksLCPFromJSON(jsonString: string): SafeParseResult<GetAllChecksLCP, SDKValidationError>;
/** @internal */
export declare const GetAllChecksChecksResponseSource$inboundSchema: z.ZodNativeEnum<typeof GetAllChecksChecksResponseSource>;
/** @internal */
export declare const GetAllChecksChecksResponseSource$outboundSchema: z.ZodNativeEnum<typeof GetAllChecksChecksResponseSource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAllChecksChecksResponseSource$ {
    /** @deprecated use `GetAllChecksChecksResponseSource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
    /** @deprecated use `GetAllChecksChecksResponseSource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
}
/** @internal */
export declare const GetAllChecksCLS$inboundSchema: z.ZodType<GetAllChecksCLS, z.ZodTypeDef, unknown>;
/** @internal */
export type GetAllChecksCLS$Outbound = {
    value: number | null;
    previousValue?: number | undefined;
    source: string;
};
/** @internal */
export declare const GetAllChecksCLS$outboundSchema: z.ZodType<GetAllChecksCLS$Outbound, z.ZodTypeDef, GetAllChecksCLS>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAllChecksCLS$ {
    /** @deprecated use `GetAllChecksCLS$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetAllChecksCLS, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetAllChecksCLS$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetAllChecksCLS$Outbound, z.ZodTypeDef, GetAllChecksCLS>;
    /** @deprecated use `GetAllChecksCLS$Outbound` instead. */
    type Outbound = GetAllChecksCLS$Outbound;
}
export declare function getAllChecksCLSToJSON(getAllChecksCLS: GetAllChecksCLS): string;
export declare function getAllChecksCLSFromJSON(jsonString: string): SafeParseResult<GetAllChecksCLS, SDKValidationError>;
/** @internal */
export declare const GetAllChecksChecksResponse200Source$inboundSchema: z.ZodNativeEnum<typeof GetAllChecksChecksResponse200Source>;
/** @internal */
export declare const GetAllChecksChecksResponse200Source$outboundSchema: z.ZodNativeEnum<typeof GetAllChecksChecksResponse200Source>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAllChecksChecksResponse200Source$ {
    /** @deprecated use `GetAllChecksChecksResponse200Source$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
    /** @deprecated use `GetAllChecksChecksResponse200Source$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
}
/** @internal */
export declare const GetAllChecksTBT$inboundSchema: z.ZodType<GetAllChecksTBT, z.ZodTypeDef, unknown>;
/** @internal */
export type GetAllChecksTBT$Outbound = {
    value: number | null;
    previousValue?: number | undefined;
    source: string;
};
/** @internal */
export declare const GetAllChecksTBT$outboundSchema: z.ZodType<GetAllChecksTBT$Outbound, z.ZodTypeDef, GetAllChecksTBT>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAllChecksTBT$ {
    /** @deprecated use `GetAllChecksTBT$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetAllChecksTBT, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetAllChecksTBT$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetAllChecksTBT$Outbound, z.ZodTypeDef, GetAllChecksTBT>;
    /** @deprecated use `GetAllChecksTBT$Outbound` instead. */
    type Outbound = GetAllChecksTBT$Outbound;
}
export declare function getAllChecksTBTToJSON(getAllChecksTBT: GetAllChecksTBT): string;
export declare function getAllChecksTBTFromJSON(jsonString: string): SafeParseResult<GetAllChecksTBT, SDKValidationError>;
/** @internal */
export declare const GetAllChecksChecksResponse200ApplicationJSONSource$inboundSchema: z.ZodNativeEnum<typeof GetAllChecksChecksResponse200ApplicationJSONSource>;
/** @internal */
export declare const GetAllChecksChecksResponse200ApplicationJSONSource$outboundSchema: z.ZodNativeEnum<typeof GetAllChecksChecksResponse200ApplicationJSONSource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAllChecksChecksResponse200ApplicationJSONSource$ {
    /** @deprecated use `GetAllChecksChecksResponse200ApplicationJSONSource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
    /** @deprecated use `GetAllChecksChecksResponse200ApplicationJSONSource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
}
/** @internal */
export declare const GetAllChecksVirtualExperienceScore$inboundSchema: z.ZodType<GetAllChecksVirtualExperienceScore, z.ZodTypeDef, unknown>;
/** @internal */
export type GetAllChecksVirtualExperienceScore$Outbound = {
    value: number | null;
    previousValue?: number | undefined;
    source: string;
};
/** @internal */
export declare const GetAllChecksVirtualExperienceScore$outboundSchema: z.ZodType<GetAllChecksVirtualExperienceScore$Outbound, z.ZodTypeDef, GetAllChecksVirtualExperienceScore>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAllChecksVirtualExperienceScore$ {
    /** @deprecated use `GetAllChecksVirtualExperienceScore$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetAllChecksVirtualExperienceScore, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetAllChecksVirtualExperienceScore$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetAllChecksVirtualExperienceScore$Outbound, z.ZodTypeDef, GetAllChecksVirtualExperienceScore>;
    /** @deprecated use `GetAllChecksVirtualExperienceScore$Outbound` instead. */
    type Outbound = GetAllChecksVirtualExperienceScore$Outbound;
}
export declare function getAllChecksVirtualExperienceScoreToJSON(getAllChecksVirtualExperienceScore: GetAllChecksVirtualExperienceScore): string;
export declare function getAllChecksVirtualExperienceScoreFromJSON(jsonString: string): SafeParseResult<GetAllChecksVirtualExperienceScore, SDKValidationError>;
/** @internal */
export declare const GetAllChecksMetrics$inboundSchema: z.ZodType<GetAllChecksMetrics, z.ZodTypeDef, unknown>;
/** @internal */
export type GetAllChecksMetrics$Outbound = {
    FCP: GetAllChecksFCP$Outbound;
    LCP: GetAllChecksLCP$Outbound;
    CLS: GetAllChecksCLS$Outbound;
    TBT: GetAllChecksTBT$Outbound;
    virtualExperienceScore?: GetAllChecksVirtualExperienceScore$Outbound | undefined;
};
/** @internal */
export declare const GetAllChecksMetrics$outboundSchema: z.ZodType<GetAllChecksMetrics$Outbound, z.ZodTypeDef, GetAllChecksMetrics>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAllChecksMetrics$ {
    /** @deprecated use `GetAllChecksMetrics$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetAllChecksMetrics, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetAllChecksMetrics$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetAllChecksMetrics$Outbound, z.ZodTypeDef, GetAllChecksMetrics>;
    /** @deprecated use `GetAllChecksMetrics$Outbound` instead. */
    type Outbound = GetAllChecksMetrics$Outbound;
}
export declare function getAllChecksMetricsToJSON(getAllChecksMetrics: GetAllChecksMetrics): string;
export declare function getAllChecksMetricsFromJSON(jsonString: string): SafeParseResult<GetAllChecksMetrics, SDKValidationError>;
/** @internal */
export declare const GetAllChecksOutput$inboundSchema: z.ZodType<GetAllChecksOutput, z.ZodTypeDef, unknown>;
/** @internal */
export type GetAllChecksOutput$Outbound = {
    metrics?: GetAllChecksMetrics$Outbound | undefined;
};
/** @internal */
export declare const GetAllChecksOutput$outboundSchema: z.ZodType<GetAllChecksOutput$Outbound, z.ZodTypeDef, GetAllChecksOutput>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAllChecksOutput$ {
    /** @deprecated use `GetAllChecksOutput$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetAllChecksOutput, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetAllChecksOutput$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetAllChecksOutput$Outbound, z.ZodTypeDef, GetAllChecksOutput>;
    /** @deprecated use `GetAllChecksOutput$Outbound` instead. */
    type Outbound = GetAllChecksOutput$Outbound;
}
export declare function getAllChecksOutputToJSON(getAllChecksOutput: GetAllChecksOutput): string;
export declare function getAllChecksOutputFromJSON(jsonString: string): SafeParseResult<GetAllChecksOutput, SDKValidationError>;
/** @internal */
export declare const GetAllChecksStatus$inboundSchema: z.ZodNativeEnum<typeof GetAllChecksStatus>;
/** @internal */
export declare const GetAllChecksStatus$outboundSchema: z.ZodNativeEnum<typeof GetAllChecksStatus>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAllChecksStatus$ {
    /** @deprecated use `GetAllChecksStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Registered: "registered";
        readonly Running: "running";
        readonly Completed: "completed";
    }>;
    /** @deprecated use `GetAllChecksStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Registered: "registered";
        readonly Running: "running";
        readonly Completed: "completed";
    }>;
}
/** @internal */
export declare const Checks$inboundSchema: z.ZodType<Checks, z.ZodTypeDef, unknown>;
/** @internal */
export type Checks$Outbound = {
    completedAt?: number | undefined;
    conclusion?: string | undefined;
    createdAt: number;
    detailsUrl?: string | undefined;
    id: string;
    integrationId: string;
    name: string;
    output?: GetAllChecksOutput$Outbound | undefined;
    path?: string | undefined;
    rerequestable: boolean;
    blocking: boolean;
    startedAt?: number | undefined;
    status: string;
    updatedAt: number;
};
/** @internal */
export declare const Checks$outboundSchema: z.ZodType<Checks$Outbound, z.ZodTypeDef, Checks>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Checks$ {
    /** @deprecated use `Checks$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Checks, z.ZodTypeDef, unknown>;
    /** @deprecated use `Checks$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Checks$Outbound, z.ZodTypeDef, Checks>;
    /** @deprecated use `Checks$Outbound` instead. */
    type Outbound = Checks$Outbound;
}
export declare function checksToJSON(checks: Checks): string;
export declare function checksFromJSON(jsonString: string): SafeParseResult<Checks, SDKValidationError>;
/** @internal */
export declare const GetAllChecksResponseBody$inboundSchema: z.ZodType<GetAllChecksResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type GetAllChecksResponseBody$Outbound = {
    checks: Array<Checks$Outbound>;
};
/** @internal */
export declare const GetAllChecksResponseBody$outboundSchema: z.ZodType<GetAllChecksResponseBody$Outbound, z.ZodTypeDef, GetAllChecksResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAllChecksResponseBody$ {
    /** @deprecated use `GetAllChecksResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetAllChecksResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetAllChecksResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetAllChecksResponseBody$Outbound, z.ZodTypeDef, GetAllChecksResponseBody>;
    /** @deprecated use `GetAllChecksResponseBody$Outbound` instead. */
    type Outbound = GetAllChecksResponseBody$Outbound;
}
export declare function getAllChecksResponseBodyToJSON(getAllChecksResponseBody: GetAllChecksResponseBody): string;
export declare function getAllChecksResponseBodyFromJSON(jsonString: string): SafeParseResult<GetAllChecksResponseBody, SDKValidationError>;
//# sourceMappingURL=getallchecksop.d.ts.map