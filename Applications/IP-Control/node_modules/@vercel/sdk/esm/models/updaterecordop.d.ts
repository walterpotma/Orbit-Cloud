import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
/**
 * The type of the DNS record
 */
export declare const UpdateRecordType: {
    readonly A: "A";
    readonly Aaaa: "AAAA";
    readonly Alias: "ALIAS";
    readonly Caa: "CAA";
    readonly Cname: "CNAME";
    readonly Https: "HTTPS";
    readonly Mx: "MX";
    readonly Srv: "SRV";
    readonly Txt: "TXT";
    readonly Ns: "NS";
};
/**
 * The type of the DNS record
 */
export type UpdateRecordType = ClosedEnum<typeof UpdateRecordType>;
export type Srv = {
    target: string | null;
    weight: number | null;
    port: number | null;
    priority: number | null;
};
export type Https = {
    priority: number | null;
    target: string | null;
    params?: string | null | undefined;
};
export type UpdateRecordRequestBody = {
    /**
     * The name of the DNS record
     */
    name?: string | null | undefined;
    /**
     * The value of the DNS record
     */
    value?: string | null | undefined;
    /**
     * The type of the DNS record
     */
    type?: UpdateRecordType | null | undefined;
    /**
     * The Time to live (TTL) value of the DNS record
     */
    ttl?: number | null | undefined;
    /**
     * The MX priority value of the DNS record
     */
    mxPriority?: number | null | undefined;
    srv?: Srv | null | undefined;
    https?: Https | null | undefined;
    /**
     * A comment to add context on what this DNS record is for
     */
    comment?: string | undefined;
};
export type UpdateRecordRequest = {
    /**
     * The id of the DNS record
     */
    recordId: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody: UpdateRecordRequestBody;
};
export declare const RecordType: {
    readonly A: "A";
    readonly Aaaa: "AAAA";
    readonly Alias: "ALIAS";
    readonly Caa: "CAA";
    readonly Cname: "CNAME";
    readonly Https: "HTTPS";
    readonly Mx: "MX";
    readonly Srv: "SRV";
    readonly Txt: "TXT";
    readonly Ns: "NS";
};
export type RecordType = ClosedEnum<typeof RecordType>;
export declare const UpdateRecordDnsType: {
    readonly Record: "record";
    readonly RecordSys: "record-sys";
};
export type UpdateRecordDnsType = ClosedEnum<typeof UpdateRecordDnsType>;
export type UpdateRecordResponseBody = {
    createdAt?: number | null | undefined;
    creator: string;
    domain: string;
    id: string;
    name: string;
    recordType: RecordType;
    ttl?: number | undefined;
    type: UpdateRecordDnsType;
    value: string;
    comment?: string | undefined;
};
/** @internal */
export declare const UpdateRecordType$inboundSchema: z.ZodNativeEnum<typeof UpdateRecordType>;
/** @internal */
export declare const UpdateRecordType$outboundSchema: z.ZodNativeEnum<typeof UpdateRecordType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateRecordType$ {
    /** @deprecated use `UpdateRecordType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly A: "A";
        readonly Aaaa: "AAAA";
        readonly Alias: "ALIAS";
        readonly Caa: "CAA";
        readonly Cname: "CNAME";
        readonly Https: "HTTPS";
        readonly Mx: "MX";
        readonly Srv: "SRV";
        readonly Txt: "TXT";
        readonly Ns: "NS";
    }>;
    /** @deprecated use `UpdateRecordType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly A: "A";
        readonly Aaaa: "AAAA";
        readonly Alias: "ALIAS";
        readonly Caa: "CAA";
        readonly Cname: "CNAME";
        readonly Https: "HTTPS";
        readonly Mx: "MX";
        readonly Srv: "SRV";
        readonly Txt: "TXT";
        readonly Ns: "NS";
    }>;
}
/** @internal */
export declare const Srv$inboundSchema: z.ZodType<Srv, z.ZodTypeDef, unknown>;
/** @internal */
export type Srv$Outbound = {
    target: string | null;
    weight: number | null;
    port: number | null;
    priority: number | null;
};
/** @internal */
export declare const Srv$outboundSchema: z.ZodType<Srv$Outbound, z.ZodTypeDef, Srv>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Srv$ {
    /** @deprecated use `Srv$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Srv, z.ZodTypeDef, unknown>;
    /** @deprecated use `Srv$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Srv$Outbound, z.ZodTypeDef, Srv>;
    /** @deprecated use `Srv$Outbound` instead. */
    type Outbound = Srv$Outbound;
}
export declare function srvToJSON(srv: Srv): string;
export declare function srvFromJSON(jsonString: string): SafeParseResult<Srv, SDKValidationError>;
/** @internal */
export declare const Https$inboundSchema: z.ZodType<Https, z.ZodTypeDef, unknown>;
/** @internal */
export type Https$Outbound = {
    priority: number | null;
    target: string | null;
    params?: string | null | undefined;
};
/** @internal */
export declare const Https$outboundSchema: z.ZodType<Https$Outbound, z.ZodTypeDef, Https>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Https$ {
    /** @deprecated use `Https$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Https, z.ZodTypeDef, unknown>;
    /** @deprecated use `Https$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Https$Outbound, z.ZodTypeDef, Https>;
    /** @deprecated use `Https$Outbound` instead. */
    type Outbound = Https$Outbound;
}
export declare function httpsToJSON(https: Https): string;
export declare function httpsFromJSON(jsonString: string): SafeParseResult<Https, SDKValidationError>;
/** @internal */
export declare const UpdateRecordRequestBody$inboundSchema: z.ZodType<UpdateRecordRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateRecordRequestBody$Outbound = {
    name?: string | null | undefined;
    value?: string | null | undefined;
    type?: string | null | undefined;
    ttl?: number | null | undefined;
    mxPriority?: number | null | undefined;
    srv?: Srv$Outbound | null | undefined;
    https?: Https$Outbound | null | undefined;
    comment?: string | undefined;
};
/** @internal */
export declare const UpdateRecordRequestBody$outboundSchema: z.ZodType<UpdateRecordRequestBody$Outbound, z.ZodTypeDef, UpdateRecordRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateRecordRequestBody$ {
    /** @deprecated use `UpdateRecordRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateRecordRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateRecordRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateRecordRequestBody$Outbound, z.ZodTypeDef, UpdateRecordRequestBody>;
    /** @deprecated use `UpdateRecordRequestBody$Outbound` instead. */
    type Outbound = UpdateRecordRequestBody$Outbound;
}
export declare function updateRecordRequestBodyToJSON(updateRecordRequestBody: UpdateRecordRequestBody): string;
export declare function updateRecordRequestBodyFromJSON(jsonString: string): SafeParseResult<UpdateRecordRequestBody, SDKValidationError>;
/** @internal */
export declare const UpdateRecordRequest$inboundSchema: z.ZodType<UpdateRecordRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateRecordRequest$Outbound = {
    recordId: string;
    teamId?: string | undefined;
    slug?: string | undefined;
    RequestBody: UpdateRecordRequestBody$Outbound;
};
/** @internal */
export declare const UpdateRecordRequest$outboundSchema: z.ZodType<UpdateRecordRequest$Outbound, z.ZodTypeDef, UpdateRecordRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateRecordRequest$ {
    /** @deprecated use `UpdateRecordRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateRecordRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateRecordRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateRecordRequest$Outbound, z.ZodTypeDef, UpdateRecordRequest>;
    /** @deprecated use `UpdateRecordRequest$Outbound` instead. */
    type Outbound = UpdateRecordRequest$Outbound;
}
export declare function updateRecordRequestToJSON(updateRecordRequest: UpdateRecordRequest): string;
export declare function updateRecordRequestFromJSON(jsonString: string): SafeParseResult<UpdateRecordRequest, SDKValidationError>;
/** @internal */
export declare const RecordType$inboundSchema: z.ZodNativeEnum<typeof RecordType>;
/** @internal */
export declare const RecordType$outboundSchema: z.ZodNativeEnum<typeof RecordType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RecordType$ {
    /** @deprecated use `RecordType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly A: "A";
        readonly Aaaa: "AAAA";
        readonly Alias: "ALIAS";
        readonly Caa: "CAA";
        readonly Cname: "CNAME";
        readonly Https: "HTTPS";
        readonly Mx: "MX";
        readonly Srv: "SRV";
        readonly Txt: "TXT";
        readonly Ns: "NS";
    }>;
    /** @deprecated use `RecordType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly A: "A";
        readonly Aaaa: "AAAA";
        readonly Alias: "ALIAS";
        readonly Caa: "CAA";
        readonly Cname: "CNAME";
        readonly Https: "HTTPS";
        readonly Mx: "MX";
        readonly Srv: "SRV";
        readonly Txt: "TXT";
        readonly Ns: "NS";
    }>;
}
/** @internal */
export declare const UpdateRecordDnsType$inboundSchema: z.ZodNativeEnum<typeof UpdateRecordDnsType>;
/** @internal */
export declare const UpdateRecordDnsType$outboundSchema: z.ZodNativeEnum<typeof UpdateRecordDnsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateRecordDnsType$ {
    /** @deprecated use `UpdateRecordDnsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Record: "record";
        readonly RecordSys: "record-sys";
    }>;
    /** @deprecated use `UpdateRecordDnsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Record: "record";
        readonly RecordSys: "record-sys";
    }>;
}
/** @internal */
export declare const UpdateRecordResponseBody$inboundSchema: z.ZodType<UpdateRecordResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateRecordResponseBody$Outbound = {
    createdAt?: number | null | undefined;
    creator: string;
    domain: string;
    id: string;
    name: string;
    recordType: string;
    ttl?: number | undefined;
    type: string;
    value: string;
    comment?: string | undefined;
};
/** @internal */
export declare const UpdateRecordResponseBody$outboundSchema: z.ZodType<UpdateRecordResponseBody$Outbound, z.ZodTypeDef, UpdateRecordResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateRecordResponseBody$ {
    /** @deprecated use `UpdateRecordResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateRecordResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateRecordResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateRecordResponseBody$Outbound, z.ZodTypeDef, UpdateRecordResponseBody>;
    /** @deprecated use `UpdateRecordResponseBody$Outbound` instead. */
    type Outbound = UpdateRecordResponseBody$Outbound;
}
export declare function updateRecordResponseBodyToJSON(updateRecordResponseBody: UpdateRecordResponseBody): string;
export declare function updateRecordResponseBodyFromJSON(jsonString: string): SafeParseResult<UpdateRecordResponseBody, SDKValidationError>;
//# sourceMappingURL=updaterecordop.d.ts.map