import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
/**
 * The origin of the request.
 */
export declare const RequestAccessToTeamOrigin: {
    readonly Import: "import";
    readonly Teams: "teams";
    readonly Github: "github";
    readonly Gitlab: "gitlab";
    readonly Bitbucket: "bitbucket";
    readonly Feedback: "feedback";
    readonly OrganizationTeams: "organization-teams";
};
/**
 * The origin of the request.
 */
export type RequestAccessToTeamOrigin = ClosedEnum<typeof RequestAccessToTeamOrigin>;
/**
 * The ID of the Git account of the user who requests access.
 */
export type RequestAccessToTeamGitUserId = string | number;
export type RequestAccessToTeamJoinedFrom = {
    /**
     * The origin of the request.
     */
    origin: RequestAccessToTeamOrigin;
    /**
     * The commit sha if the origin is a git provider.
     */
    commitId?: string | undefined;
    /**
     * The ID of the repository for the given Git provider.
     */
    repoId?: string | undefined;
    /**
     * The path to the repository for the given Git provider.
     */
    repoPath?: string | undefined;
    /**
     * The ID of the Git account of the user who requests access.
     */
    gitUserId?: string | number | undefined;
    /**
     * The login name for the Git account of the user who requests access.
     */
    gitUserLogin?: string | undefined;
};
export type RequestAccessToTeamRequestBody = {
    joinedFrom: RequestAccessToTeamJoinedFrom;
};
export type RequestAccessToTeamRequest = {
    teamId: string;
    requestBody: RequestAccessToTeamRequestBody;
};
export declare const RequestAccessToTeamTeamsOrigin: {
    readonly Import: "import";
    readonly Teams: "teams";
    readonly Github: "github";
    readonly Gitlab: "gitlab";
    readonly Bitbucket: "bitbucket";
    readonly Feedback: "feedback";
    readonly OrganizationTeams: "organization-teams";
    readonly Link: "link";
    readonly Mail: "mail";
    readonly Saml: "saml";
    readonly Dsync: "dsync";
};
export type RequestAccessToTeamTeamsOrigin = ClosedEnum<typeof RequestAccessToTeamTeamsOrigin>;
export type RequestAccessToTeamTeamsGitUserId = string | number;
export type RequestAccessToTeamTeamsJoinedFrom = {
    origin: RequestAccessToTeamTeamsOrigin;
    commitId?: string | undefined;
    repoId?: string | undefined;
    repoPath?: string | undefined;
    gitUserId?: string | number | undefined;
    gitUserLogin?: string | undefined;
    ssoUserId?: string | undefined;
    ssoConnectedAt?: number | undefined;
    idpUserId?: string | undefined;
    dsyncUserId?: string | undefined;
    dsyncConnectedAt?: number | undefined;
};
export type Github = {
    login?: string | undefined;
};
export type Gitlab = {
    login?: string | undefined;
};
export type Bitbucket = {
    login?: string | undefined;
};
/**
 * Successfuly requested access to the team.
 */
export type RequestAccessToTeamResponseBody = {
    teamSlug: string;
    teamName: string;
    confirmed?: boolean | undefined;
    joinedFrom?: RequestAccessToTeamTeamsJoinedFrom | undefined;
    accessRequestedAt?: number | undefined;
    github: Github | null;
    gitlab: Gitlab | null;
    bitbucket: Bitbucket | null;
};
/** @internal */
export declare const RequestAccessToTeamOrigin$inboundSchema: z.ZodNativeEnum<typeof RequestAccessToTeamOrigin>;
/** @internal */
export declare const RequestAccessToTeamOrigin$outboundSchema: z.ZodNativeEnum<typeof RequestAccessToTeamOrigin>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RequestAccessToTeamOrigin$ {
    /** @deprecated use `RequestAccessToTeamOrigin$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Import: "import";
        readonly Teams: "teams";
        readonly Github: "github";
        readonly Gitlab: "gitlab";
        readonly Bitbucket: "bitbucket";
        readonly Feedback: "feedback";
        readonly OrganizationTeams: "organization-teams";
    }>;
    /** @deprecated use `RequestAccessToTeamOrigin$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Import: "import";
        readonly Teams: "teams";
        readonly Github: "github";
        readonly Gitlab: "gitlab";
        readonly Bitbucket: "bitbucket";
        readonly Feedback: "feedback";
        readonly OrganizationTeams: "organization-teams";
    }>;
}
/** @internal */
export declare const RequestAccessToTeamGitUserId$inboundSchema: z.ZodType<RequestAccessToTeamGitUserId, z.ZodTypeDef, unknown>;
/** @internal */
export type RequestAccessToTeamGitUserId$Outbound = string | number;
/** @internal */
export declare const RequestAccessToTeamGitUserId$outboundSchema: z.ZodType<RequestAccessToTeamGitUserId$Outbound, z.ZodTypeDef, RequestAccessToTeamGitUserId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RequestAccessToTeamGitUserId$ {
    /** @deprecated use `RequestAccessToTeamGitUserId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RequestAccessToTeamGitUserId, z.ZodTypeDef, unknown>;
    /** @deprecated use `RequestAccessToTeamGitUserId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RequestAccessToTeamGitUserId$Outbound, z.ZodTypeDef, RequestAccessToTeamGitUserId>;
    /** @deprecated use `RequestAccessToTeamGitUserId$Outbound` instead. */
    type Outbound = RequestAccessToTeamGitUserId$Outbound;
}
export declare function requestAccessToTeamGitUserIdToJSON(requestAccessToTeamGitUserId: RequestAccessToTeamGitUserId): string;
export declare function requestAccessToTeamGitUserIdFromJSON(jsonString: string): SafeParseResult<RequestAccessToTeamGitUserId, SDKValidationError>;
/** @internal */
export declare const RequestAccessToTeamJoinedFrom$inboundSchema: z.ZodType<RequestAccessToTeamJoinedFrom, z.ZodTypeDef, unknown>;
/** @internal */
export type RequestAccessToTeamJoinedFrom$Outbound = {
    origin: string;
    commitId?: string | undefined;
    repoId?: string | undefined;
    repoPath?: string | undefined;
    gitUserId?: string | number | undefined;
    gitUserLogin?: string | undefined;
};
/** @internal */
export declare const RequestAccessToTeamJoinedFrom$outboundSchema: z.ZodType<RequestAccessToTeamJoinedFrom$Outbound, z.ZodTypeDef, RequestAccessToTeamJoinedFrom>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RequestAccessToTeamJoinedFrom$ {
    /** @deprecated use `RequestAccessToTeamJoinedFrom$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RequestAccessToTeamJoinedFrom, z.ZodTypeDef, unknown>;
    /** @deprecated use `RequestAccessToTeamJoinedFrom$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RequestAccessToTeamJoinedFrom$Outbound, z.ZodTypeDef, RequestAccessToTeamJoinedFrom>;
    /** @deprecated use `RequestAccessToTeamJoinedFrom$Outbound` instead. */
    type Outbound = RequestAccessToTeamJoinedFrom$Outbound;
}
export declare function requestAccessToTeamJoinedFromToJSON(requestAccessToTeamJoinedFrom: RequestAccessToTeamJoinedFrom): string;
export declare function requestAccessToTeamJoinedFromFromJSON(jsonString: string): SafeParseResult<RequestAccessToTeamJoinedFrom, SDKValidationError>;
/** @internal */
export declare const RequestAccessToTeamRequestBody$inboundSchema: z.ZodType<RequestAccessToTeamRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type RequestAccessToTeamRequestBody$Outbound = {
    joinedFrom: RequestAccessToTeamJoinedFrom$Outbound;
};
/** @internal */
export declare const RequestAccessToTeamRequestBody$outboundSchema: z.ZodType<RequestAccessToTeamRequestBody$Outbound, z.ZodTypeDef, RequestAccessToTeamRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RequestAccessToTeamRequestBody$ {
    /** @deprecated use `RequestAccessToTeamRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RequestAccessToTeamRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `RequestAccessToTeamRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RequestAccessToTeamRequestBody$Outbound, z.ZodTypeDef, RequestAccessToTeamRequestBody>;
    /** @deprecated use `RequestAccessToTeamRequestBody$Outbound` instead. */
    type Outbound = RequestAccessToTeamRequestBody$Outbound;
}
export declare function requestAccessToTeamRequestBodyToJSON(requestAccessToTeamRequestBody: RequestAccessToTeamRequestBody): string;
export declare function requestAccessToTeamRequestBodyFromJSON(jsonString: string): SafeParseResult<RequestAccessToTeamRequestBody, SDKValidationError>;
/** @internal */
export declare const RequestAccessToTeamRequest$inboundSchema: z.ZodType<RequestAccessToTeamRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type RequestAccessToTeamRequest$Outbound = {
    teamId: string;
    RequestBody: RequestAccessToTeamRequestBody$Outbound;
};
/** @internal */
export declare const RequestAccessToTeamRequest$outboundSchema: z.ZodType<RequestAccessToTeamRequest$Outbound, z.ZodTypeDef, RequestAccessToTeamRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RequestAccessToTeamRequest$ {
    /** @deprecated use `RequestAccessToTeamRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RequestAccessToTeamRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `RequestAccessToTeamRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RequestAccessToTeamRequest$Outbound, z.ZodTypeDef, RequestAccessToTeamRequest>;
    /** @deprecated use `RequestAccessToTeamRequest$Outbound` instead. */
    type Outbound = RequestAccessToTeamRequest$Outbound;
}
export declare function requestAccessToTeamRequestToJSON(requestAccessToTeamRequest: RequestAccessToTeamRequest): string;
export declare function requestAccessToTeamRequestFromJSON(jsonString: string): SafeParseResult<RequestAccessToTeamRequest, SDKValidationError>;
/** @internal */
export declare const RequestAccessToTeamTeamsOrigin$inboundSchema: z.ZodNativeEnum<typeof RequestAccessToTeamTeamsOrigin>;
/** @internal */
export declare const RequestAccessToTeamTeamsOrigin$outboundSchema: z.ZodNativeEnum<typeof RequestAccessToTeamTeamsOrigin>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RequestAccessToTeamTeamsOrigin$ {
    /** @deprecated use `RequestAccessToTeamTeamsOrigin$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Import: "import";
        readonly Teams: "teams";
        readonly Github: "github";
        readonly Gitlab: "gitlab";
        readonly Bitbucket: "bitbucket";
        readonly Feedback: "feedback";
        readonly OrganizationTeams: "organization-teams";
        readonly Link: "link";
        readonly Mail: "mail";
        readonly Saml: "saml";
        readonly Dsync: "dsync";
    }>;
    /** @deprecated use `RequestAccessToTeamTeamsOrigin$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Import: "import";
        readonly Teams: "teams";
        readonly Github: "github";
        readonly Gitlab: "gitlab";
        readonly Bitbucket: "bitbucket";
        readonly Feedback: "feedback";
        readonly OrganizationTeams: "organization-teams";
        readonly Link: "link";
        readonly Mail: "mail";
        readonly Saml: "saml";
        readonly Dsync: "dsync";
    }>;
}
/** @internal */
export declare const RequestAccessToTeamTeamsGitUserId$inboundSchema: z.ZodType<RequestAccessToTeamTeamsGitUserId, z.ZodTypeDef, unknown>;
/** @internal */
export type RequestAccessToTeamTeamsGitUserId$Outbound = string | number;
/** @internal */
export declare const RequestAccessToTeamTeamsGitUserId$outboundSchema: z.ZodType<RequestAccessToTeamTeamsGitUserId$Outbound, z.ZodTypeDef, RequestAccessToTeamTeamsGitUserId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RequestAccessToTeamTeamsGitUserId$ {
    /** @deprecated use `RequestAccessToTeamTeamsGitUserId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RequestAccessToTeamTeamsGitUserId, z.ZodTypeDef, unknown>;
    /** @deprecated use `RequestAccessToTeamTeamsGitUserId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RequestAccessToTeamTeamsGitUserId$Outbound, z.ZodTypeDef, RequestAccessToTeamTeamsGitUserId>;
    /** @deprecated use `RequestAccessToTeamTeamsGitUserId$Outbound` instead. */
    type Outbound = RequestAccessToTeamTeamsGitUserId$Outbound;
}
export declare function requestAccessToTeamTeamsGitUserIdToJSON(requestAccessToTeamTeamsGitUserId: RequestAccessToTeamTeamsGitUserId): string;
export declare function requestAccessToTeamTeamsGitUserIdFromJSON(jsonString: string): SafeParseResult<RequestAccessToTeamTeamsGitUserId, SDKValidationError>;
/** @internal */
export declare const RequestAccessToTeamTeamsJoinedFrom$inboundSchema: z.ZodType<RequestAccessToTeamTeamsJoinedFrom, z.ZodTypeDef, unknown>;
/** @internal */
export type RequestAccessToTeamTeamsJoinedFrom$Outbound = {
    origin: string;
    commitId?: string | undefined;
    repoId?: string | undefined;
    repoPath?: string | undefined;
    gitUserId?: string | number | undefined;
    gitUserLogin?: string | undefined;
    ssoUserId?: string | undefined;
    ssoConnectedAt?: number | undefined;
    idpUserId?: string | undefined;
    dsyncUserId?: string | undefined;
    dsyncConnectedAt?: number | undefined;
};
/** @internal */
export declare const RequestAccessToTeamTeamsJoinedFrom$outboundSchema: z.ZodType<RequestAccessToTeamTeamsJoinedFrom$Outbound, z.ZodTypeDef, RequestAccessToTeamTeamsJoinedFrom>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RequestAccessToTeamTeamsJoinedFrom$ {
    /** @deprecated use `RequestAccessToTeamTeamsJoinedFrom$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RequestAccessToTeamTeamsJoinedFrom, z.ZodTypeDef, unknown>;
    /** @deprecated use `RequestAccessToTeamTeamsJoinedFrom$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RequestAccessToTeamTeamsJoinedFrom$Outbound, z.ZodTypeDef, RequestAccessToTeamTeamsJoinedFrom>;
    /** @deprecated use `RequestAccessToTeamTeamsJoinedFrom$Outbound` instead. */
    type Outbound = RequestAccessToTeamTeamsJoinedFrom$Outbound;
}
export declare function requestAccessToTeamTeamsJoinedFromToJSON(requestAccessToTeamTeamsJoinedFrom: RequestAccessToTeamTeamsJoinedFrom): string;
export declare function requestAccessToTeamTeamsJoinedFromFromJSON(jsonString: string): SafeParseResult<RequestAccessToTeamTeamsJoinedFrom, SDKValidationError>;
/** @internal */
export declare const Github$inboundSchema: z.ZodType<Github, z.ZodTypeDef, unknown>;
/** @internal */
export type Github$Outbound = {
    login?: string | undefined;
};
/** @internal */
export declare const Github$outboundSchema: z.ZodType<Github$Outbound, z.ZodTypeDef, Github>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Github$ {
    /** @deprecated use `Github$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Github, z.ZodTypeDef, unknown>;
    /** @deprecated use `Github$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Github$Outbound, z.ZodTypeDef, Github>;
    /** @deprecated use `Github$Outbound` instead. */
    type Outbound = Github$Outbound;
}
export declare function githubToJSON(github: Github): string;
export declare function githubFromJSON(jsonString: string): SafeParseResult<Github, SDKValidationError>;
/** @internal */
export declare const Gitlab$inboundSchema: z.ZodType<Gitlab, z.ZodTypeDef, unknown>;
/** @internal */
export type Gitlab$Outbound = {
    login?: string | undefined;
};
/** @internal */
export declare const Gitlab$outboundSchema: z.ZodType<Gitlab$Outbound, z.ZodTypeDef, Gitlab>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Gitlab$ {
    /** @deprecated use `Gitlab$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Gitlab, z.ZodTypeDef, unknown>;
    /** @deprecated use `Gitlab$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Gitlab$Outbound, z.ZodTypeDef, Gitlab>;
    /** @deprecated use `Gitlab$Outbound` instead. */
    type Outbound = Gitlab$Outbound;
}
export declare function gitlabToJSON(gitlab: Gitlab): string;
export declare function gitlabFromJSON(jsonString: string): SafeParseResult<Gitlab, SDKValidationError>;
/** @internal */
export declare const Bitbucket$inboundSchema: z.ZodType<Bitbucket, z.ZodTypeDef, unknown>;
/** @internal */
export type Bitbucket$Outbound = {
    login?: string | undefined;
};
/** @internal */
export declare const Bitbucket$outboundSchema: z.ZodType<Bitbucket$Outbound, z.ZodTypeDef, Bitbucket>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Bitbucket$ {
    /** @deprecated use `Bitbucket$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Bitbucket, z.ZodTypeDef, unknown>;
    /** @deprecated use `Bitbucket$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Bitbucket$Outbound, z.ZodTypeDef, Bitbucket>;
    /** @deprecated use `Bitbucket$Outbound` instead. */
    type Outbound = Bitbucket$Outbound;
}
export declare function bitbucketToJSON(bitbucket: Bitbucket): string;
export declare function bitbucketFromJSON(jsonString: string): SafeParseResult<Bitbucket, SDKValidationError>;
/** @internal */
export declare const RequestAccessToTeamResponseBody$inboundSchema: z.ZodType<RequestAccessToTeamResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type RequestAccessToTeamResponseBody$Outbound = {
    teamSlug: string;
    teamName: string;
    confirmed?: boolean | undefined;
    joinedFrom?: RequestAccessToTeamTeamsJoinedFrom$Outbound | undefined;
    accessRequestedAt?: number | undefined;
    github: Github$Outbound | null;
    gitlab: Gitlab$Outbound | null;
    bitbucket: Bitbucket$Outbound | null;
};
/** @internal */
export declare const RequestAccessToTeamResponseBody$outboundSchema: z.ZodType<RequestAccessToTeamResponseBody$Outbound, z.ZodTypeDef, RequestAccessToTeamResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RequestAccessToTeamResponseBody$ {
    /** @deprecated use `RequestAccessToTeamResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RequestAccessToTeamResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `RequestAccessToTeamResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RequestAccessToTeamResponseBody$Outbound, z.ZodTypeDef, RequestAccessToTeamResponseBody>;
    /** @deprecated use `RequestAccessToTeamResponseBody$Outbound` instead. */
    type Outbound = RequestAccessToTeamResponseBody$Outbound;
}
export declare function requestAccessToTeamResponseBodyToJSON(requestAccessToTeamResponseBody: RequestAccessToTeamResponseBody): string;
export declare function requestAccessToTeamResponseBodyFromJSON(jsonString: string): SafeParseResult<RequestAccessToTeamResponseBody, SDKValidationError>;
//# sourceMappingURL=requestaccesstoteamop.d.ts.map