/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/**
 * Status code for domain redirect
 */
export const RedirectStatusCode = {
    ThreeHundredAndOne: 301,
    ThreeHundredAndTwo: 302,
    ThreeHundredAndSeven: 307,
    ThreeHundredAndEight: 308,
};
/** @internal */
export const RedirectStatusCode$inboundSchema = z.nativeEnum(RedirectStatusCode);
/** @internal */
export const RedirectStatusCode$outboundSchema = RedirectStatusCode$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RedirectStatusCode$;
(function (RedirectStatusCode$) {
    /** @deprecated use `RedirectStatusCode$inboundSchema` instead. */
    RedirectStatusCode$.inboundSchema = RedirectStatusCode$inboundSchema;
    /** @deprecated use `RedirectStatusCode$outboundSchema` instead. */
    RedirectStatusCode$.outboundSchema = RedirectStatusCode$outboundSchema;
})(RedirectStatusCode$ || (RedirectStatusCode$ = {}));
/** @internal */
export const UpdateProjectDomainRequestBody$inboundSchema = z.object({
    gitBranch: z.nullable(z.string()).optional(),
    redirect: z.nullable(z.string()).optional(),
    redirectStatusCode: z.nullable(RedirectStatusCode$inboundSchema).optional(),
});
/** @internal */
export const UpdateProjectDomainRequestBody$outboundSchema = z.object({
    gitBranch: z.nullable(z.string()).optional(),
    redirect: z.nullable(z.string()).optional(),
    redirectStatusCode: z.nullable(RedirectStatusCode$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDomainRequestBody$;
(function (UpdateProjectDomainRequestBody$) {
    /** @deprecated use `UpdateProjectDomainRequestBody$inboundSchema` instead. */
    UpdateProjectDomainRequestBody$.inboundSchema = UpdateProjectDomainRequestBody$inboundSchema;
    /** @deprecated use `UpdateProjectDomainRequestBody$outboundSchema` instead. */
    UpdateProjectDomainRequestBody$.outboundSchema = UpdateProjectDomainRequestBody$outboundSchema;
})(UpdateProjectDomainRequestBody$ || (UpdateProjectDomainRequestBody$ = {}));
export function updateProjectDomainRequestBodyToJSON(updateProjectDomainRequestBody) {
    return JSON.stringify(UpdateProjectDomainRequestBody$outboundSchema.parse(updateProjectDomainRequestBody));
}
export function updateProjectDomainRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDomainRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDomainRequestBody' from JSON`);
}
/** @internal */
export const UpdateProjectDomainRequest$inboundSchema = z.object({
    idOrName: z.string(),
    domain: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => UpdateProjectDomainRequestBody$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const UpdateProjectDomainRequest$outboundSchema = z.object({
    idOrName: z.string(),
    domain: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => UpdateProjectDomainRequestBody$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDomainRequest$;
(function (UpdateProjectDomainRequest$) {
    /** @deprecated use `UpdateProjectDomainRequest$inboundSchema` instead. */
    UpdateProjectDomainRequest$.inboundSchema = UpdateProjectDomainRequest$inboundSchema;
    /** @deprecated use `UpdateProjectDomainRequest$outboundSchema` instead. */
    UpdateProjectDomainRequest$.outboundSchema = UpdateProjectDomainRequest$outboundSchema;
})(UpdateProjectDomainRequest$ || (UpdateProjectDomainRequest$ = {}));
export function updateProjectDomainRequestToJSON(updateProjectDomainRequest) {
    return JSON.stringify(UpdateProjectDomainRequest$outboundSchema.parse(updateProjectDomainRequest));
}
export function updateProjectDomainRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDomainRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDomainRequest' from JSON`);
}
/** @internal */
export const UpdateProjectDomainVerification$inboundSchema = z.object({
    type: z.string(),
    domain: z.string(),
    value: z.string(),
    reason: z.string(),
});
/** @internal */
export const UpdateProjectDomainVerification$outboundSchema = z.object({
    type: z.string(),
    domain: z.string(),
    value: z.string(),
    reason: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDomainVerification$;
(function (UpdateProjectDomainVerification$) {
    /** @deprecated use `UpdateProjectDomainVerification$inboundSchema` instead. */
    UpdateProjectDomainVerification$.inboundSchema = UpdateProjectDomainVerification$inboundSchema;
    /** @deprecated use `UpdateProjectDomainVerification$outboundSchema` instead. */
    UpdateProjectDomainVerification$.outboundSchema = UpdateProjectDomainVerification$outboundSchema;
})(UpdateProjectDomainVerification$ || (UpdateProjectDomainVerification$ = {}));
export function updateProjectDomainVerificationToJSON(updateProjectDomainVerification) {
    return JSON.stringify(UpdateProjectDomainVerification$outboundSchema.parse(updateProjectDomainVerification));
}
export function updateProjectDomainVerificationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDomainVerification$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDomainVerification' from JSON`);
}
/** @internal */
export const UpdateProjectDomainResponseBody$inboundSchema = z.object({
    name: z.string(),
    apexName: z.string(),
    projectId: z.string(),
    redirect: z.nullable(z.string()).optional(),
    redirectStatusCode: z.nullable(z.number()).optional(),
    gitBranch: z.nullable(z.string()).optional(),
    customEnvironmentId: z.nullable(z.string()).optional(),
    updatedAt: z.number().optional(),
    createdAt: z.number().optional(),
    verified: z.boolean(),
    verification: z.array(z.lazy(() => UpdateProjectDomainVerification$inboundSchema)).optional(),
});
/** @internal */
export const UpdateProjectDomainResponseBody$outboundSchema = z.object({
    name: z.string(),
    apexName: z.string(),
    projectId: z.string(),
    redirect: z.nullable(z.string()).optional(),
    redirectStatusCode: z.nullable(z.number()).optional(),
    gitBranch: z.nullable(z.string()).optional(),
    customEnvironmentId: z.nullable(z.string()).optional(),
    updatedAt: z.number().optional(),
    createdAt: z.number().optional(),
    verified: z.boolean(),
    verification: z.array(z.lazy(() => UpdateProjectDomainVerification$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectDomainResponseBody$;
(function (UpdateProjectDomainResponseBody$) {
    /** @deprecated use `UpdateProjectDomainResponseBody$inboundSchema` instead. */
    UpdateProjectDomainResponseBody$.inboundSchema = UpdateProjectDomainResponseBody$inboundSchema;
    /** @deprecated use `UpdateProjectDomainResponseBody$outboundSchema` instead. */
    UpdateProjectDomainResponseBody$.outboundSchema = UpdateProjectDomainResponseBody$outboundSchema;
})(UpdateProjectDomainResponseBody$ || (UpdateProjectDomainResponseBody$ = {}));
export function updateProjectDomainResponseBodyToJSON(updateProjectDomainResponseBody) {
    return JSON.stringify(UpdateProjectDomainResponseBody$outboundSchema.parse(updateProjectDomainResponseBody));
}
export function updateProjectDomainResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectDomainResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectDomainResponseBody' from JSON`);
}
//# sourceMappingURL=updateprojectdomainop.js.map