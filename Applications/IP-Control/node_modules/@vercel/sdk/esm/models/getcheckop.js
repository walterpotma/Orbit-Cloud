/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
export const GetCheckStatus = {
    Registered: "registered",
    Running: "running",
    Completed: "completed",
};
export const GetCheckConclusion = {
    Canceled: "canceled",
    Failed: "failed",
    Neutral: "neutral",
    Succeeded: "succeeded",
    Skipped: "skipped",
    Stale: "stale",
};
export const GetCheckSource = {
    WebVitals: "web-vitals",
};
export const GetCheckChecksSource = {
    WebVitals: "web-vitals",
};
export const GetCheckChecksResponseSource = {
    WebVitals: "web-vitals",
};
export const GetCheckChecksResponse200Source = {
    WebVitals: "web-vitals",
};
export const GetCheckChecksResponse200ApplicationJSONSource = {
    WebVitals: "web-vitals",
};
/** @internal */
export const GetCheckRequest$inboundSchema = z.object({
    deploymentId: z.string(),
    checkId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/** @internal */
export const GetCheckRequest$outboundSchema = z.object({
    deploymentId: z.string(),
    checkId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetCheckRequest$;
(function (GetCheckRequest$) {
    /** @deprecated use `GetCheckRequest$inboundSchema` instead. */
    GetCheckRequest$.inboundSchema = GetCheckRequest$inboundSchema;
    /** @deprecated use `GetCheckRequest$outboundSchema` instead. */
    GetCheckRequest$.outboundSchema = GetCheckRequest$outboundSchema;
})(GetCheckRequest$ || (GetCheckRequest$ = {}));
export function getCheckRequestToJSON(getCheckRequest) {
    return JSON.stringify(GetCheckRequest$outboundSchema.parse(getCheckRequest));
}
export function getCheckRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetCheckRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetCheckRequest' from JSON`);
}
/** @internal */
export const GetCheckStatus$inboundSchema = z.nativeEnum(GetCheckStatus);
/** @internal */
export const GetCheckStatus$outboundSchema = GetCheckStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetCheckStatus$;
(function (GetCheckStatus$) {
    /** @deprecated use `GetCheckStatus$inboundSchema` instead. */
    GetCheckStatus$.inboundSchema = GetCheckStatus$inboundSchema;
    /** @deprecated use `GetCheckStatus$outboundSchema` instead. */
    GetCheckStatus$.outboundSchema = GetCheckStatus$outboundSchema;
})(GetCheckStatus$ || (GetCheckStatus$ = {}));
/** @internal */
export const GetCheckConclusion$inboundSchema = z.nativeEnum(GetCheckConclusion);
/** @internal */
export const GetCheckConclusion$outboundSchema = GetCheckConclusion$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetCheckConclusion$;
(function (GetCheckConclusion$) {
    /** @deprecated use `GetCheckConclusion$inboundSchema` instead. */
    GetCheckConclusion$.inboundSchema = GetCheckConclusion$inboundSchema;
    /** @deprecated use `GetCheckConclusion$outboundSchema` instead. */
    GetCheckConclusion$.outboundSchema = GetCheckConclusion$outboundSchema;
})(GetCheckConclusion$ || (GetCheckConclusion$ = {}));
/** @internal */
export const GetCheckSource$inboundSchema = z.nativeEnum(GetCheckSource);
/** @internal */
export const GetCheckSource$outboundSchema = GetCheckSource$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetCheckSource$;
(function (GetCheckSource$) {
    /** @deprecated use `GetCheckSource$inboundSchema` instead. */
    GetCheckSource$.inboundSchema = GetCheckSource$inboundSchema;
    /** @deprecated use `GetCheckSource$outboundSchema` instead. */
    GetCheckSource$.outboundSchema = GetCheckSource$outboundSchema;
})(GetCheckSource$ || (GetCheckSource$ = {}));
/** @internal */
export const GetCheckFCP$inboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: GetCheckSource$inboundSchema,
});
/** @internal */
export const GetCheckFCP$outboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: GetCheckSource$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetCheckFCP$;
(function (GetCheckFCP$) {
    /** @deprecated use `GetCheckFCP$inboundSchema` instead. */
    GetCheckFCP$.inboundSchema = GetCheckFCP$inboundSchema;
    /** @deprecated use `GetCheckFCP$outboundSchema` instead. */
    GetCheckFCP$.outboundSchema = GetCheckFCP$outboundSchema;
})(GetCheckFCP$ || (GetCheckFCP$ = {}));
export function getCheckFCPToJSON(getCheckFCP) {
    return JSON.stringify(GetCheckFCP$outboundSchema.parse(getCheckFCP));
}
export function getCheckFCPFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetCheckFCP$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetCheckFCP' from JSON`);
}
/** @internal */
export const GetCheckChecksSource$inboundSchema = z.nativeEnum(GetCheckChecksSource);
/** @internal */
export const GetCheckChecksSource$outboundSchema = GetCheckChecksSource$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetCheckChecksSource$;
(function (GetCheckChecksSource$) {
    /** @deprecated use `GetCheckChecksSource$inboundSchema` instead. */
    GetCheckChecksSource$.inboundSchema = GetCheckChecksSource$inboundSchema;
    /** @deprecated use `GetCheckChecksSource$outboundSchema` instead. */
    GetCheckChecksSource$.outboundSchema = GetCheckChecksSource$outboundSchema;
})(GetCheckChecksSource$ || (GetCheckChecksSource$ = {}));
/** @internal */
export const GetCheckLCP$inboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: GetCheckChecksSource$inboundSchema,
});
/** @internal */
export const GetCheckLCP$outboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: GetCheckChecksSource$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetCheckLCP$;
(function (GetCheckLCP$) {
    /** @deprecated use `GetCheckLCP$inboundSchema` instead. */
    GetCheckLCP$.inboundSchema = GetCheckLCP$inboundSchema;
    /** @deprecated use `GetCheckLCP$outboundSchema` instead. */
    GetCheckLCP$.outboundSchema = GetCheckLCP$outboundSchema;
})(GetCheckLCP$ || (GetCheckLCP$ = {}));
export function getCheckLCPToJSON(getCheckLCP) {
    return JSON.stringify(GetCheckLCP$outboundSchema.parse(getCheckLCP));
}
export function getCheckLCPFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetCheckLCP$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetCheckLCP' from JSON`);
}
/** @internal */
export const GetCheckChecksResponseSource$inboundSchema = z.nativeEnum(GetCheckChecksResponseSource);
/** @internal */
export const GetCheckChecksResponseSource$outboundSchema = GetCheckChecksResponseSource$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetCheckChecksResponseSource$;
(function (GetCheckChecksResponseSource$) {
    /** @deprecated use `GetCheckChecksResponseSource$inboundSchema` instead. */
    GetCheckChecksResponseSource$.inboundSchema = GetCheckChecksResponseSource$inboundSchema;
    /** @deprecated use `GetCheckChecksResponseSource$outboundSchema` instead. */
    GetCheckChecksResponseSource$.outboundSchema = GetCheckChecksResponseSource$outboundSchema;
})(GetCheckChecksResponseSource$ || (GetCheckChecksResponseSource$ = {}));
/** @internal */
export const GetCheckCLS$inboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: GetCheckChecksResponseSource$inboundSchema,
});
/** @internal */
export const GetCheckCLS$outboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: GetCheckChecksResponseSource$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetCheckCLS$;
(function (GetCheckCLS$) {
    /** @deprecated use `GetCheckCLS$inboundSchema` instead. */
    GetCheckCLS$.inboundSchema = GetCheckCLS$inboundSchema;
    /** @deprecated use `GetCheckCLS$outboundSchema` instead. */
    GetCheckCLS$.outboundSchema = GetCheckCLS$outboundSchema;
})(GetCheckCLS$ || (GetCheckCLS$ = {}));
export function getCheckCLSToJSON(getCheckCLS) {
    return JSON.stringify(GetCheckCLS$outboundSchema.parse(getCheckCLS));
}
export function getCheckCLSFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetCheckCLS$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetCheckCLS' from JSON`);
}
/** @internal */
export const GetCheckChecksResponse200Source$inboundSchema = z.nativeEnum(GetCheckChecksResponse200Source);
/** @internal */
export const GetCheckChecksResponse200Source$outboundSchema = GetCheckChecksResponse200Source$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetCheckChecksResponse200Source$;
(function (GetCheckChecksResponse200Source$) {
    /** @deprecated use `GetCheckChecksResponse200Source$inboundSchema` instead. */
    GetCheckChecksResponse200Source$.inboundSchema = GetCheckChecksResponse200Source$inboundSchema;
    /** @deprecated use `GetCheckChecksResponse200Source$outboundSchema` instead. */
    GetCheckChecksResponse200Source$.outboundSchema = GetCheckChecksResponse200Source$outboundSchema;
})(GetCheckChecksResponse200Source$ || (GetCheckChecksResponse200Source$ = {}));
/** @internal */
export const GetCheckTBT$inboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: GetCheckChecksResponse200Source$inboundSchema,
});
/** @internal */
export const GetCheckTBT$outboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: GetCheckChecksResponse200Source$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetCheckTBT$;
(function (GetCheckTBT$) {
    /** @deprecated use `GetCheckTBT$inboundSchema` instead. */
    GetCheckTBT$.inboundSchema = GetCheckTBT$inboundSchema;
    /** @deprecated use `GetCheckTBT$outboundSchema` instead. */
    GetCheckTBT$.outboundSchema = GetCheckTBT$outboundSchema;
})(GetCheckTBT$ || (GetCheckTBT$ = {}));
export function getCheckTBTToJSON(getCheckTBT) {
    return JSON.stringify(GetCheckTBT$outboundSchema.parse(getCheckTBT));
}
export function getCheckTBTFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetCheckTBT$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetCheckTBT' from JSON`);
}
/** @internal */
export const GetCheckChecksResponse200ApplicationJSONSource$inboundSchema = z
    .nativeEnum(GetCheckChecksResponse200ApplicationJSONSource);
/** @internal */
export const GetCheckChecksResponse200ApplicationJSONSource$outboundSchema = GetCheckChecksResponse200ApplicationJSONSource$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetCheckChecksResponse200ApplicationJSONSource$;
(function (GetCheckChecksResponse200ApplicationJSONSource$) {
    /** @deprecated use `GetCheckChecksResponse200ApplicationJSONSource$inboundSchema` instead. */
    GetCheckChecksResponse200ApplicationJSONSource$.inboundSchema = GetCheckChecksResponse200ApplicationJSONSource$inboundSchema;
    /** @deprecated use `GetCheckChecksResponse200ApplicationJSONSource$outboundSchema` instead. */
    GetCheckChecksResponse200ApplicationJSONSource$.outboundSchema = GetCheckChecksResponse200ApplicationJSONSource$outboundSchema;
})(GetCheckChecksResponse200ApplicationJSONSource$ || (GetCheckChecksResponse200ApplicationJSONSource$ = {}));
/** @internal */
export const GetCheckVirtualExperienceScore$inboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: GetCheckChecksResponse200ApplicationJSONSource$inboundSchema,
});
/** @internal */
export const GetCheckVirtualExperienceScore$outboundSchema = z.object({
    value: z.nullable(z.number()),
    previousValue: z.number().optional(),
    source: GetCheckChecksResponse200ApplicationJSONSource$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetCheckVirtualExperienceScore$;
(function (GetCheckVirtualExperienceScore$) {
    /** @deprecated use `GetCheckVirtualExperienceScore$inboundSchema` instead. */
    GetCheckVirtualExperienceScore$.inboundSchema = GetCheckVirtualExperienceScore$inboundSchema;
    /** @deprecated use `GetCheckVirtualExperienceScore$outboundSchema` instead. */
    GetCheckVirtualExperienceScore$.outboundSchema = GetCheckVirtualExperienceScore$outboundSchema;
})(GetCheckVirtualExperienceScore$ || (GetCheckVirtualExperienceScore$ = {}));
export function getCheckVirtualExperienceScoreToJSON(getCheckVirtualExperienceScore) {
    return JSON.stringify(GetCheckVirtualExperienceScore$outboundSchema.parse(getCheckVirtualExperienceScore));
}
export function getCheckVirtualExperienceScoreFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetCheckVirtualExperienceScore$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetCheckVirtualExperienceScore' from JSON`);
}
/** @internal */
export const GetCheckMetrics$inboundSchema = z.object({
    FCP: z.lazy(() => GetCheckFCP$inboundSchema),
    LCP: z.lazy(() => GetCheckLCP$inboundSchema),
    CLS: z.lazy(() => GetCheckCLS$inboundSchema),
    TBT: z.lazy(() => GetCheckTBT$inboundSchema),
    virtualExperienceScore: z.lazy(() => GetCheckVirtualExperienceScore$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "FCP": "fcp",
        "LCP": "lcp",
        "CLS": "cls",
        "TBT": "tbt",
    });
});
/** @internal */
export const GetCheckMetrics$outboundSchema = z.object({
    fcp: z.lazy(() => GetCheckFCP$outboundSchema),
    lcp: z.lazy(() => GetCheckLCP$outboundSchema),
    cls: z.lazy(() => GetCheckCLS$outboundSchema),
    tbt: z.lazy(() => GetCheckTBT$outboundSchema),
    virtualExperienceScore: z.lazy(() => GetCheckVirtualExperienceScore$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        fcp: "FCP",
        lcp: "LCP",
        cls: "CLS",
        tbt: "TBT",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetCheckMetrics$;
(function (GetCheckMetrics$) {
    /** @deprecated use `GetCheckMetrics$inboundSchema` instead. */
    GetCheckMetrics$.inboundSchema = GetCheckMetrics$inboundSchema;
    /** @deprecated use `GetCheckMetrics$outboundSchema` instead. */
    GetCheckMetrics$.outboundSchema = GetCheckMetrics$outboundSchema;
})(GetCheckMetrics$ || (GetCheckMetrics$ = {}));
export function getCheckMetricsToJSON(getCheckMetrics) {
    return JSON.stringify(GetCheckMetrics$outboundSchema.parse(getCheckMetrics));
}
export function getCheckMetricsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetCheckMetrics$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetCheckMetrics' from JSON`);
}
/** @internal */
export const GetCheckOutput$inboundSchema = z.object({
    metrics: z.lazy(() => GetCheckMetrics$inboundSchema).optional(),
});
/** @internal */
export const GetCheckOutput$outboundSchema = z.object({
    metrics: z.lazy(() => GetCheckMetrics$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetCheckOutput$;
(function (GetCheckOutput$) {
    /** @deprecated use `GetCheckOutput$inboundSchema` instead. */
    GetCheckOutput$.inboundSchema = GetCheckOutput$inboundSchema;
    /** @deprecated use `GetCheckOutput$outboundSchema` instead. */
    GetCheckOutput$.outboundSchema = GetCheckOutput$outboundSchema;
})(GetCheckOutput$ || (GetCheckOutput$ = {}));
export function getCheckOutputToJSON(getCheckOutput) {
    return JSON.stringify(GetCheckOutput$outboundSchema.parse(getCheckOutput));
}
export function getCheckOutputFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetCheckOutput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetCheckOutput' from JSON`);
}
/** @internal */
export const GetCheckResponseBody$inboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    path: z.string().optional(),
    status: GetCheckStatus$inboundSchema,
    conclusion: GetCheckConclusion$inboundSchema.optional(),
    blocking: z.boolean(),
    output: z.lazy(() => GetCheckOutput$inboundSchema).optional(),
    detailsUrl: z.string().optional(),
    integrationId: z.string(),
    deploymentId: z.string(),
    externalId: z.string().optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
    startedAt: z.number().optional(),
    completedAt: z.number().optional(),
    rerequestable: z.boolean().optional(),
});
/** @internal */
export const GetCheckResponseBody$outboundSchema = z.object({
    id: z.string(),
    name: z.string(),
    path: z.string().optional(),
    status: GetCheckStatus$outboundSchema,
    conclusion: GetCheckConclusion$outboundSchema.optional(),
    blocking: z.boolean(),
    output: z.lazy(() => GetCheckOutput$outboundSchema).optional(),
    detailsUrl: z.string().optional(),
    integrationId: z.string(),
    deploymentId: z.string(),
    externalId: z.string().optional(),
    createdAt: z.number(),
    updatedAt: z.number(),
    startedAt: z.number().optional(),
    completedAt: z.number().optional(),
    rerequestable: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetCheckResponseBody$;
(function (GetCheckResponseBody$) {
    /** @deprecated use `GetCheckResponseBody$inboundSchema` instead. */
    GetCheckResponseBody$.inboundSchema = GetCheckResponseBody$inboundSchema;
    /** @deprecated use `GetCheckResponseBody$outboundSchema` instead. */
    GetCheckResponseBody$.outboundSchema = GetCheckResponseBody$outboundSchema;
})(GetCheckResponseBody$ || (GetCheckResponseBody$ = {}));
export function getCheckResponseBodyToJSON(getCheckResponseBody) {
    return JSON.stringify(GetCheckResponseBody$outboundSchema.parse(getCheckResponseBody));
}
export function getCheckResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetCheckResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetCheckResponseBody' from JSON`);
}
//# sourceMappingURL=getcheckop.js.map