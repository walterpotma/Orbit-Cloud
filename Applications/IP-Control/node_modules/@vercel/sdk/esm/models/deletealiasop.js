/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
export const DeleteAliasStatus = {
    Success: "SUCCESS",
};
/** @internal */
export const DeleteAliasRequest$inboundSchema = z.object({
    aliasId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/** @internal */
export const DeleteAliasRequest$outboundSchema = z.object({
    aliasId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DeleteAliasRequest$;
(function (DeleteAliasRequest$) {
    /** @deprecated use `DeleteAliasRequest$inboundSchema` instead. */
    DeleteAliasRequest$.inboundSchema = DeleteAliasRequest$inboundSchema;
    /** @deprecated use `DeleteAliasRequest$outboundSchema` instead. */
    DeleteAliasRequest$.outboundSchema = DeleteAliasRequest$outboundSchema;
})(DeleteAliasRequest$ || (DeleteAliasRequest$ = {}));
export function deleteAliasRequestToJSON(deleteAliasRequest) {
    return JSON.stringify(DeleteAliasRequest$outboundSchema.parse(deleteAliasRequest));
}
export function deleteAliasRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DeleteAliasRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteAliasRequest' from JSON`);
}
/** @internal */
export const DeleteAliasStatus$inboundSchema = z.nativeEnum(DeleteAliasStatus);
/** @internal */
export const DeleteAliasStatus$outboundSchema = DeleteAliasStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DeleteAliasStatus$;
(function (DeleteAliasStatus$) {
    /** @deprecated use `DeleteAliasStatus$inboundSchema` instead. */
    DeleteAliasStatus$.inboundSchema = DeleteAliasStatus$inboundSchema;
    /** @deprecated use `DeleteAliasStatus$outboundSchema` instead. */
    DeleteAliasStatus$.outboundSchema = DeleteAliasStatus$outboundSchema;
})(DeleteAliasStatus$ || (DeleteAliasStatus$ = {}));
/** @internal */
export const DeleteAliasResponseBody$inboundSchema = z.object({
    status: DeleteAliasStatus$inboundSchema,
});
/** @internal */
export const DeleteAliasResponseBody$outboundSchema = z.object({
    status: DeleteAliasStatus$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DeleteAliasResponseBody$;
(function (DeleteAliasResponseBody$) {
    /** @deprecated use `DeleteAliasResponseBody$inboundSchema` instead. */
    DeleteAliasResponseBody$.inboundSchema = DeleteAliasResponseBody$inboundSchema;
    /** @deprecated use `DeleteAliasResponseBody$outboundSchema` instead. */
    DeleteAliasResponseBody$.outboundSchema = DeleteAliasResponseBody$outboundSchema;
})(DeleteAliasResponseBody$ || (DeleteAliasResponseBody$ = {}));
export function deleteAliasResponseBodyToJSON(deleteAliasResponseBody) {
    return JSON.stringify(DeleteAliasResponseBody$outboundSchema.parse(deleteAliasResponseBody));
}
export function deleteAliasResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DeleteAliasResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteAliasResponseBody' from JSON`);
}
//# sourceMappingURL=deletealiasop.js.map