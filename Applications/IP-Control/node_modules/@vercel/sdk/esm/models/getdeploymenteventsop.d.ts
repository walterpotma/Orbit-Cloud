import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
/**
 * Order of the returned events based on the timestamp.
 */
export declare const Direction: {
    readonly Backward: "backward";
    readonly Forward: "forward";
};
/**
 * Order of the returned events based on the timestamp.
 */
export type Direction = ClosedEnum<typeof Direction>;
/**
 * HTTP status code range to filter events by.
 */
export type StatusCode = number | string;
export type GetDeploymentEventsRequest = {
    /**
     * The unique identifier or hostname of the deployment.
     */
    idOrUrl: string;
    /**
     * Order of the returned events based on the timestamp.
     */
    direction?: Direction | undefined;
    /**
     * When enabled, this endpoint will return live events as they happen.
     */
    follow?: number | undefined;
    /**
     * Maximum number of events to return. Provide `-1` to return all available logs.
     */
    limit?: number | undefined;
    /**
     * Deployment build ID.
     */
    name?: string | undefined;
    /**
     * Timestamp for when build logs should be pulled from.
     */
    since?: number | undefined;
    /**
     * Timestamp for when the build logs should be pulled up until.
     */
    until?: number | undefined;
    /**
     * HTTP status code range to filter events by.
     */
    statusCode?: number | string | undefined;
    delimiter?: number | undefined;
    builds?: number | undefined;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};
export type ResponseBodyInfo = {
    type: string;
    name: string;
    entrypoint?: string | undefined;
    path?: string | undefined;
    step?: string | undefined;
    readyState?: string | undefined;
};
export declare const GetDeploymentEventsResponseBodyDeploymentsResponseType: {
    readonly Delimiter: "delimiter";
    readonly Command: "command";
    readonly Stdout: "stdout";
    readonly Stderr: "stderr";
    readonly Exit: "exit";
    readonly DeploymentState: "deployment-state";
    readonly Middleware: "middleware";
    readonly MiddlewareInvocation: "middleware-invocation";
    readonly EdgeFunctionInvocation: "edge-function-invocation";
    readonly Metric: "metric";
    readonly Report: "report";
    readonly Fatal: "fatal";
};
export type GetDeploymentEventsResponseBodyDeploymentsResponseType = ClosedEnum<typeof GetDeploymentEventsResponseBodyDeploymentsResponseType>;
export declare const ResponseBodyLevel: {
    readonly Error: "error";
    readonly Warning: "warning";
};
export type ResponseBodyLevel = ClosedEnum<typeof ResponseBodyLevel>;
export type GetDeploymentEventsResponseBodyDeployments2 = {
    created: number;
    date: number;
    deploymentId: string;
    id: string;
    info: ResponseBodyInfo;
    serial: string;
    text?: string | undefined;
    type: GetDeploymentEventsResponseBodyDeploymentsResponseType;
    level?: ResponseBodyLevel | undefined;
};
export declare const GetDeploymentEventsResponseBodyDeploymentsType: {
    readonly Delimiter: "delimiter";
    readonly Command: "command";
    readonly Stdout: "stdout";
    readonly Stderr: "stderr";
    readonly Exit: "exit";
    readonly DeploymentState: "deployment-state";
    readonly Middleware: "middleware";
    readonly MiddlewareInvocation: "middleware-invocation";
    readonly EdgeFunctionInvocation: "edge-function-invocation";
    readonly Metric: "metric";
    readonly Report: "report";
    readonly Fatal: "fatal";
};
export type GetDeploymentEventsResponseBodyDeploymentsType = ClosedEnum<typeof GetDeploymentEventsResponseBodyDeploymentsType>;
export type GetDeploymentEventsResponseBodyInfo = {
    type: string;
    name: string;
    entrypoint?: string | undefined;
    path?: string | undefined;
    step?: string | undefined;
    readyState?: string | undefined;
};
export declare const ResponseBodyVercelCache: {
    readonly Miss: "MISS";
    readonly Hit: "HIT";
    readonly Stale: "STALE";
    readonly Bypass: "BYPASS";
    readonly Prerender: "PRERENDER";
    readonly Revalidated: "REVALIDATED";
};
export type ResponseBodyVercelCache = ClosedEnum<typeof ResponseBodyVercelCache>;
export declare const ResponseBodyWafAction: {
    readonly Log: "log";
    readonly Challenge: "challenge";
    readonly Deny: "deny";
    readonly Bypass: "bypass";
    readonly RateLimit: "rate_limit";
};
export type ResponseBodyWafAction = ClosedEnum<typeof ResponseBodyWafAction>;
export type ResponseBodyProxy = {
    timestamp: number;
    method: string;
    host: string;
    path: string;
    statusCode?: number | undefined;
    userAgent: Array<string>;
    referer: string;
    clientIp?: string | undefined;
    region: string;
    scheme?: string | undefined;
    responseByteSize?: number | undefined;
    cacheId?: string | undefined;
    pathType?: string | undefined;
    pathTypeVariant?: string | undefined;
    vercelId?: string | undefined;
    vercelCache?: ResponseBodyVercelCache | undefined;
    lambdaRegion?: string | undefined;
    wafAction?: ResponseBodyWafAction | undefined;
    wafRuleId?: string | undefined;
};
export type ResponseBodyPayload = {
    deploymentId: string;
    info?: GetDeploymentEventsResponseBodyInfo | undefined;
    text?: string | undefined;
    id: string;
    date: number;
    serial: string;
    created?: number | undefined;
    statusCode?: number | undefined;
    requestId?: string | undefined;
    proxy?: ResponseBodyProxy | undefined;
};
export type GetDeploymentEventsResponseBodyDeployments1 = {
    type: GetDeploymentEventsResponseBodyDeploymentsType;
    created: number;
    payload: ResponseBodyPayload;
};
export type GetDeploymentEventsResponseBody = GetDeploymentEventsResponseBodyDeployments2 | GetDeploymentEventsResponseBodyDeployments1;
export type Info = {
    type: string;
    name: string;
    entrypoint?: string | undefined;
    path?: string | undefined;
    step?: string | undefined;
    readyState?: string | undefined;
};
export declare const GetDeploymentEventsResponseBodyType: {
    readonly Delimiter: "delimiter";
    readonly Command: "command";
    readonly Stdout: "stdout";
    readonly Stderr: "stderr";
    readonly Exit: "exit";
    readonly DeploymentState: "deployment-state";
    readonly Middleware: "middleware";
    readonly MiddlewareInvocation: "middleware-invocation";
    readonly EdgeFunctionInvocation: "edge-function-invocation";
    readonly Metric: "metric";
    readonly Report: "report";
    readonly Fatal: "fatal";
};
export type GetDeploymentEventsResponseBodyType = ClosedEnum<typeof GetDeploymentEventsResponseBodyType>;
export declare const GetDeploymentEventsResponseBodyLevel: {
    readonly Error: "error";
    readonly Warning: "warning";
};
export type GetDeploymentEventsResponseBodyLevel = ClosedEnum<typeof GetDeploymentEventsResponseBodyLevel>;
export type GetDeploymentEventsResponseBody2 = {
    created: number;
    date: number;
    deploymentId: string;
    id: string;
    info: Info;
    serial: string;
    text?: string | undefined;
    type: GetDeploymentEventsResponseBodyType;
    level?: GetDeploymentEventsResponseBodyLevel | undefined;
};
export declare const ResponseBodyType: {
    readonly Delimiter: "delimiter";
    readonly Command: "command";
    readonly Stdout: "stdout";
    readonly Stderr: "stderr";
    readonly Exit: "exit";
    readonly DeploymentState: "deployment-state";
    readonly Middleware: "middleware";
    readonly MiddlewareInvocation: "middleware-invocation";
    readonly EdgeFunctionInvocation: "edge-function-invocation";
    readonly Metric: "metric";
    readonly Report: "report";
    readonly Fatal: "fatal";
};
export type ResponseBodyType = ClosedEnum<typeof ResponseBodyType>;
export type GetDeploymentEventsResponseBodyDeploymentsInfo = {
    type: string;
    name: string;
    entrypoint?: string | undefined;
    path?: string | undefined;
    step?: string | undefined;
    readyState?: string | undefined;
};
export declare const VercelCache: {
    readonly Miss: "MISS";
    readonly Hit: "HIT";
    readonly Stale: "STALE";
    readonly Bypass: "BYPASS";
    readonly Prerender: "PRERENDER";
    readonly Revalidated: "REVALIDATED";
};
export type VercelCache = ClosedEnum<typeof VercelCache>;
export declare const WafAction: {
    readonly Log: "log";
    readonly Challenge: "challenge";
    readonly Deny: "deny";
    readonly Bypass: "bypass";
    readonly RateLimit: "rate_limit";
};
export type WafAction = ClosedEnum<typeof WafAction>;
export type Proxy = {
    timestamp: number;
    method: string;
    host: string;
    path: string;
    statusCode?: number | undefined;
    userAgent: Array<string>;
    referer: string;
    clientIp?: string | undefined;
    region: string;
    scheme?: string | undefined;
    responseByteSize?: number | undefined;
    cacheId?: string | undefined;
    pathType?: string | undefined;
    pathTypeVariant?: string | undefined;
    vercelId?: string | undefined;
    vercelCache?: VercelCache | undefined;
    lambdaRegion?: string | undefined;
    wafAction?: WafAction | undefined;
    wafRuleId?: string | undefined;
};
export type GetDeploymentEventsResponseBodyPayload = {
    deploymentId: string;
    info?: GetDeploymentEventsResponseBodyDeploymentsInfo | undefined;
    text?: string | undefined;
    id: string;
    date: number;
    serial: string;
    created?: number | undefined;
    statusCode?: number | undefined;
    requestId?: string | undefined;
    proxy?: Proxy | undefined;
};
export type GetDeploymentEventsResponseBody1 = {
    type: ResponseBodyType;
    created: number;
    payload: GetDeploymentEventsResponseBodyPayload;
};
export type GetDeploymentEventsDeploymentsResponseBody = GetDeploymentEventsResponseBody2 | GetDeploymentEventsResponseBody1;
export type GetDeploymentEventsResponse = Array<GetDeploymentEventsResponseBody2 | GetDeploymentEventsResponseBody1 | null> | GetDeploymentEventsResponseBodyDeployments2 | GetDeploymentEventsResponseBodyDeployments1;
/** @internal */
export declare const Direction$inboundSchema: z.ZodNativeEnum<typeof Direction>;
/** @internal */
export declare const Direction$outboundSchema: z.ZodNativeEnum<typeof Direction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Direction$ {
    /** @deprecated use `Direction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Backward: "backward";
        readonly Forward: "forward";
    }>;
    /** @deprecated use `Direction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Backward: "backward";
        readonly Forward: "forward";
    }>;
}
/** @internal */
export declare const StatusCode$inboundSchema: z.ZodType<StatusCode, z.ZodTypeDef, unknown>;
/** @internal */
export type StatusCode$Outbound = number | string;
/** @internal */
export declare const StatusCode$outboundSchema: z.ZodType<StatusCode$Outbound, z.ZodTypeDef, StatusCode>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace StatusCode$ {
    /** @deprecated use `StatusCode$inboundSchema` instead. */
    const inboundSchema: z.ZodType<StatusCode, z.ZodTypeDef, unknown>;
    /** @deprecated use `StatusCode$outboundSchema` instead. */
    const outboundSchema: z.ZodType<StatusCode$Outbound, z.ZodTypeDef, StatusCode>;
    /** @deprecated use `StatusCode$Outbound` instead. */
    type Outbound = StatusCode$Outbound;
}
export declare function statusCodeToJSON(statusCode: StatusCode): string;
export declare function statusCodeFromJSON(jsonString: string): SafeParseResult<StatusCode, SDKValidationError>;
/** @internal */
export declare const GetDeploymentEventsRequest$inboundSchema: z.ZodType<GetDeploymentEventsRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentEventsRequest$Outbound = {
    idOrUrl: string;
    direction: string;
    follow?: number | undefined;
    limit?: number | undefined;
    name?: string | undefined;
    since?: number | undefined;
    until?: number | undefined;
    statusCode?: number | string | undefined;
    delimiter?: number | undefined;
    builds?: number | undefined;
    teamId?: string | undefined;
    slug?: string | undefined;
};
/** @internal */
export declare const GetDeploymentEventsRequest$outboundSchema: z.ZodType<GetDeploymentEventsRequest$Outbound, z.ZodTypeDef, GetDeploymentEventsRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentEventsRequest$ {
    /** @deprecated use `GetDeploymentEventsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentEventsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentEventsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentEventsRequest$Outbound, z.ZodTypeDef, GetDeploymentEventsRequest>;
    /** @deprecated use `GetDeploymentEventsRequest$Outbound` instead. */
    type Outbound = GetDeploymentEventsRequest$Outbound;
}
export declare function getDeploymentEventsRequestToJSON(getDeploymentEventsRequest: GetDeploymentEventsRequest): string;
export declare function getDeploymentEventsRequestFromJSON(jsonString: string): SafeParseResult<GetDeploymentEventsRequest, SDKValidationError>;
/** @internal */
export declare const ResponseBodyInfo$inboundSchema: z.ZodType<ResponseBodyInfo, z.ZodTypeDef, unknown>;
/** @internal */
export type ResponseBodyInfo$Outbound = {
    type: string;
    name: string;
    entrypoint?: string | undefined;
    path?: string | undefined;
    step?: string | undefined;
    readyState?: string | undefined;
};
/** @internal */
export declare const ResponseBodyInfo$outboundSchema: z.ZodType<ResponseBodyInfo$Outbound, z.ZodTypeDef, ResponseBodyInfo>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyInfo$ {
    /** @deprecated use `ResponseBodyInfo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseBodyInfo, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseBodyInfo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseBodyInfo$Outbound, z.ZodTypeDef, ResponseBodyInfo>;
    /** @deprecated use `ResponseBodyInfo$Outbound` instead. */
    type Outbound = ResponseBodyInfo$Outbound;
}
export declare function responseBodyInfoToJSON(responseBodyInfo: ResponseBodyInfo): string;
export declare function responseBodyInfoFromJSON(jsonString: string): SafeParseResult<ResponseBodyInfo, SDKValidationError>;
/** @internal */
export declare const GetDeploymentEventsResponseBodyDeploymentsResponseType$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentEventsResponseBodyDeploymentsResponseType>;
/** @internal */
export declare const GetDeploymentEventsResponseBodyDeploymentsResponseType$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentEventsResponseBodyDeploymentsResponseType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentEventsResponseBodyDeploymentsResponseType$ {
    /** @deprecated use `GetDeploymentEventsResponseBodyDeploymentsResponseType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Delimiter: "delimiter";
        readonly Command: "command";
        readonly Stdout: "stdout";
        readonly Stderr: "stderr";
        readonly Exit: "exit";
        readonly DeploymentState: "deployment-state";
        readonly Middleware: "middleware";
        readonly MiddlewareInvocation: "middleware-invocation";
        readonly EdgeFunctionInvocation: "edge-function-invocation";
        readonly Metric: "metric";
        readonly Report: "report";
        readonly Fatal: "fatal";
    }>;
    /** @deprecated use `GetDeploymentEventsResponseBodyDeploymentsResponseType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Delimiter: "delimiter";
        readonly Command: "command";
        readonly Stdout: "stdout";
        readonly Stderr: "stderr";
        readonly Exit: "exit";
        readonly DeploymentState: "deployment-state";
        readonly Middleware: "middleware";
        readonly MiddlewareInvocation: "middleware-invocation";
        readonly EdgeFunctionInvocation: "edge-function-invocation";
        readonly Metric: "metric";
        readonly Report: "report";
        readonly Fatal: "fatal";
    }>;
}
/** @internal */
export declare const ResponseBodyLevel$inboundSchema: z.ZodNativeEnum<typeof ResponseBodyLevel>;
/** @internal */
export declare const ResponseBodyLevel$outboundSchema: z.ZodNativeEnum<typeof ResponseBodyLevel>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyLevel$ {
    /** @deprecated use `ResponseBodyLevel$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Error: "error";
        readonly Warning: "warning";
    }>;
    /** @deprecated use `ResponseBodyLevel$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Error: "error";
        readonly Warning: "warning";
    }>;
}
/** @internal */
export declare const GetDeploymentEventsResponseBodyDeployments2$inboundSchema: z.ZodType<GetDeploymentEventsResponseBodyDeployments2, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentEventsResponseBodyDeployments2$Outbound = {
    created: number;
    date: number;
    deploymentId: string;
    id: string;
    info: ResponseBodyInfo$Outbound;
    serial: string;
    text?: string | undefined;
    type: string;
    level?: string | undefined;
};
/** @internal */
export declare const GetDeploymentEventsResponseBodyDeployments2$outboundSchema: z.ZodType<GetDeploymentEventsResponseBodyDeployments2$Outbound, z.ZodTypeDef, GetDeploymentEventsResponseBodyDeployments2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentEventsResponseBodyDeployments2$ {
    /** @deprecated use `GetDeploymentEventsResponseBodyDeployments2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentEventsResponseBodyDeployments2, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentEventsResponseBodyDeployments2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentEventsResponseBodyDeployments2$Outbound, z.ZodTypeDef, GetDeploymentEventsResponseBodyDeployments2>;
    /** @deprecated use `GetDeploymentEventsResponseBodyDeployments2$Outbound` instead. */
    type Outbound = GetDeploymentEventsResponseBodyDeployments2$Outbound;
}
export declare function getDeploymentEventsResponseBodyDeployments2ToJSON(getDeploymentEventsResponseBodyDeployments2: GetDeploymentEventsResponseBodyDeployments2): string;
export declare function getDeploymentEventsResponseBodyDeployments2FromJSON(jsonString: string): SafeParseResult<GetDeploymentEventsResponseBodyDeployments2, SDKValidationError>;
/** @internal */
export declare const GetDeploymentEventsResponseBodyDeploymentsType$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentEventsResponseBodyDeploymentsType>;
/** @internal */
export declare const GetDeploymentEventsResponseBodyDeploymentsType$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentEventsResponseBodyDeploymentsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentEventsResponseBodyDeploymentsType$ {
    /** @deprecated use `GetDeploymentEventsResponseBodyDeploymentsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Delimiter: "delimiter";
        readonly Command: "command";
        readonly Stdout: "stdout";
        readonly Stderr: "stderr";
        readonly Exit: "exit";
        readonly DeploymentState: "deployment-state";
        readonly Middleware: "middleware";
        readonly MiddlewareInvocation: "middleware-invocation";
        readonly EdgeFunctionInvocation: "edge-function-invocation";
        readonly Metric: "metric";
        readonly Report: "report";
        readonly Fatal: "fatal";
    }>;
    /** @deprecated use `GetDeploymentEventsResponseBodyDeploymentsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Delimiter: "delimiter";
        readonly Command: "command";
        readonly Stdout: "stdout";
        readonly Stderr: "stderr";
        readonly Exit: "exit";
        readonly DeploymentState: "deployment-state";
        readonly Middleware: "middleware";
        readonly MiddlewareInvocation: "middleware-invocation";
        readonly EdgeFunctionInvocation: "edge-function-invocation";
        readonly Metric: "metric";
        readonly Report: "report";
        readonly Fatal: "fatal";
    }>;
}
/** @internal */
export declare const GetDeploymentEventsResponseBodyInfo$inboundSchema: z.ZodType<GetDeploymentEventsResponseBodyInfo, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentEventsResponseBodyInfo$Outbound = {
    type: string;
    name: string;
    entrypoint?: string | undefined;
    path?: string | undefined;
    step?: string | undefined;
    readyState?: string | undefined;
};
/** @internal */
export declare const GetDeploymentEventsResponseBodyInfo$outboundSchema: z.ZodType<GetDeploymentEventsResponseBodyInfo$Outbound, z.ZodTypeDef, GetDeploymentEventsResponseBodyInfo>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentEventsResponseBodyInfo$ {
    /** @deprecated use `GetDeploymentEventsResponseBodyInfo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentEventsResponseBodyInfo, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentEventsResponseBodyInfo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentEventsResponseBodyInfo$Outbound, z.ZodTypeDef, GetDeploymentEventsResponseBodyInfo>;
    /** @deprecated use `GetDeploymentEventsResponseBodyInfo$Outbound` instead. */
    type Outbound = GetDeploymentEventsResponseBodyInfo$Outbound;
}
export declare function getDeploymentEventsResponseBodyInfoToJSON(getDeploymentEventsResponseBodyInfo: GetDeploymentEventsResponseBodyInfo): string;
export declare function getDeploymentEventsResponseBodyInfoFromJSON(jsonString: string): SafeParseResult<GetDeploymentEventsResponseBodyInfo, SDKValidationError>;
/** @internal */
export declare const ResponseBodyVercelCache$inboundSchema: z.ZodNativeEnum<typeof ResponseBodyVercelCache>;
/** @internal */
export declare const ResponseBodyVercelCache$outboundSchema: z.ZodNativeEnum<typeof ResponseBodyVercelCache>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyVercelCache$ {
    /** @deprecated use `ResponseBodyVercelCache$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Miss: "MISS";
        readonly Hit: "HIT";
        readonly Stale: "STALE";
        readonly Bypass: "BYPASS";
        readonly Prerender: "PRERENDER";
        readonly Revalidated: "REVALIDATED";
    }>;
    /** @deprecated use `ResponseBodyVercelCache$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Miss: "MISS";
        readonly Hit: "HIT";
        readonly Stale: "STALE";
        readonly Bypass: "BYPASS";
        readonly Prerender: "PRERENDER";
        readonly Revalidated: "REVALIDATED";
    }>;
}
/** @internal */
export declare const ResponseBodyWafAction$inboundSchema: z.ZodNativeEnum<typeof ResponseBodyWafAction>;
/** @internal */
export declare const ResponseBodyWafAction$outboundSchema: z.ZodNativeEnum<typeof ResponseBodyWafAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyWafAction$ {
    /** @deprecated use `ResponseBodyWafAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Log: "log";
        readonly Challenge: "challenge";
        readonly Deny: "deny";
        readonly Bypass: "bypass";
        readonly RateLimit: "rate_limit";
    }>;
    /** @deprecated use `ResponseBodyWafAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Log: "log";
        readonly Challenge: "challenge";
        readonly Deny: "deny";
        readonly Bypass: "bypass";
        readonly RateLimit: "rate_limit";
    }>;
}
/** @internal */
export declare const ResponseBodyProxy$inboundSchema: z.ZodType<ResponseBodyProxy, z.ZodTypeDef, unknown>;
/** @internal */
export type ResponseBodyProxy$Outbound = {
    timestamp: number;
    method: string;
    host: string;
    path: string;
    statusCode?: number | undefined;
    userAgent: Array<string>;
    referer: string;
    clientIp?: string | undefined;
    region: string;
    scheme?: string | undefined;
    responseByteSize?: number | undefined;
    cacheId?: string | undefined;
    pathType?: string | undefined;
    pathTypeVariant?: string | undefined;
    vercelId?: string | undefined;
    vercelCache?: string | undefined;
    lambdaRegion?: string | undefined;
    wafAction?: string | undefined;
    wafRuleId?: string | undefined;
};
/** @internal */
export declare const ResponseBodyProxy$outboundSchema: z.ZodType<ResponseBodyProxy$Outbound, z.ZodTypeDef, ResponseBodyProxy>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyProxy$ {
    /** @deprecated use `ResponseBodyProxy$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseBodyProxy, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseBodyProxy$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseBodyProxy$Outbound, z.ZodTypeDef, ResponseBodyProxy>;
    /** @deprecated use `ResponseBodyProxy$Outbound` instead. */
    type Outbound = ResponseBodyProxy$Outbound;
}
export declare function responseBodyProxyToJSON(responseBodyProxy: ResponseBodyProxy): string;
export declare function responseBodyProxyFromJSON(jsonString: string): SafeParseResult<ResponseBodyProxy, SDKValidationError>;
/** @internal */
export declare const ResponseBodyPayload$inboundSchema: z.ZodType<ResponseBodyPayload, z.ZodTypeDef, unknown>;
/** @internal */
export type ResponseBodyPayload$Outbound = {
    deploymentId: string;
    info?: GetDeploymentEventsResponseBodyInfo$Outbound | undefined;
    text?: string | undefined;
    id: string;
    date: number;
    serial: string;
    created?: number | undefined;
    statusCode?: number | undefined;
    requestId?: string | undefined;
    proxy?: ResponseBodyProxy$Outbound | undefined;
};
/** @internal */
export declare const ResponseBodyPayload$outboundSchema: z.ZodType<ResponseBodyPayload$Outbound, z.ZodTypeDef, ResponseBodyPayload>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyPayload$ {
    /** @deprecated use `ResponseBodyPayload$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseBodyPayload, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseBodyPayload$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseBodyPayload$Outbound, z.ZodTypeDef, ResponseBodyPayload>;
    /** @deprecated use `ResponseBodyPayload$Outbound` instead. */
    type Outbound = ResponseBodyPayload$Outbound;
}
export declare function responseBodyPayloadToJSON(responseBodyPayload: ResponseBodyPayload): string;
export declare function responseBodyPayloadFromJSON(jsonString: string): SafeParseResult<ResponseBodyPayload, SDKValidationError>;
/** @internal */
export declare const GetDeploymentEventsResponseBodyDeployments1$inboundSchema: z.ZodType<GetDeploymentEventsResponseBodyDeployments1, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentEventsResponseBodyDeployments1$Outbound = {
    type: string;
    created: number;
    payload: ResponseBodyPayload$Outbound;
};
/** @internal */
export declare const GetDeploymentEventsResponseBodyDeployments1$outboundSchema: z.ZodType<GetDeploymentEventsResponseBodyDeployments1$Outbound, z.ZodTypeDef, GetDeploymentEventsResponseBodyDeployments1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentEventsResponseBodyDeployments1$ {
    /** @deprecated use `GetDeploymentEventsResponseBodyDeployments1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentEventsResponseBodyDeployments1, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentEventsResponseBodyDeployments1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentEventsResponseBodyDeployments1$Outbound, z.ZodTypeDef, GetDeploymentEventsResponseBodyDeployments1>;
    /** @deprecated use `GetDeploymentEventsResponseBodyDeployments1$Outbound` instead. */
    type Outbound = GetDeploymentEventsResponseBodyDeployments1$Outbound;
}
export declare function getDeploymentEventsResponseBodyDeployments1ToJSON(getDeploymentEventsResponseBodyDeployments1: GetDeploymentEventsResponseBodyDeployments1): string;
export declare function getDeploymentEventsResponseBodyDeployments1FromJSON(jsonString: string): SafeParseResult<GetDeploymentEventsResponseBodyDeployments1, SDKValidationError>;
/** @internal */
export declare const GetDeploymentEventsResponseBody$inboundSchema: z.ZodType<GetDeploymentEventsResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentEventsResponseBody$Outbound = GetDeploymentEventsResponseBodyDeployments2$Outbound | GetDeploymentEventsResponseBodyDeployments1$Outbound;
/** @internal */
export declare const GetDeploymentEventsResponseBody$outboundSchema: z.ZodType<GetDeploymentEventsResponseBody$Outbound, z.ZodTypeDef, GetDeploymentEventsResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentEventsResponseBody$ {
    /** @deprecated use `GetDeploymentEventsResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentEventsResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentEventsResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentEventsResponseBody$Outbound, z.ZodTypeDef, GetDeploymentEventsResponseBody>;
    /** @deprecated use `GetDeploymentEventsResponseBody$Outbound` instead. */
    type Outbound = GetDeploymentEventsResponseBody$Outbound;
}
export declare function getDeploymentEventsResponseBodyToJSON(getDeploymentEventsResponseBody: GetDeploymentEventsResponseBody): string;
export declare function getDeploymentEventsResponseBodyFromJSON(jsonString: string): SafeParseResult<GetDeploymentEventsResponseBody, SDKValidationError>;
/** @internal */
export declare const Info$inboundSchema: z.ZodType<Info, z.ZodTypeDef, unknown>;
/** @internal */
export type Info$Outbound = {
    type: string;
    name: string;
    entrypoint?: string | undefined;
    path?: string | undefined;
    step?: string | undefined;
    readyState?: string | undefined;
};
/** @internal */
export declare const Info$outboundSchema: z.ZodType<Info$Outbound, z.ZodTypeDef, Info>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Info$ {
    /** @deprecated use `Info$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Info, z.ZodTypeDef, unknown>;
    /** @deprecated use `Info$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Info$Outbound, z.ZodTypeDef, Info>;
    /** @deprecated use `Info$Outbound` instead. */
    type Outbound = Info$Outbound;
}
export declare function infoToJSON(info: Info): string;
export declare function infoFromJSON(jsonString: string): SafeParseResult<Info, SDKValidationError>;
/** @internal */
export declare const GetDeploymentEventsResponseBodyType$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentEventsResponseBodyType>;
/** @internal */
export declare const GetDeploymentEventsResponseBodyType$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentEventsResponseBodyType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentEventsResponseBodyType$ {
    /** @deprecated use `GetDeploymentEventsResponseBodyType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Delimiter: "delimiter";
        readonly Command: "command";
        readonly Stdout: "stdout";
        readonly Stderr: "stderr";
        readonly Exit: "exit";
        readonly DeploymentState: "deployment-state";
        readonly Middleware: "middleware";
        readonly MiddlewareInvocation: "middleware-invocation";
        readonly EdgeFunctionInvocation: "edge-function-invocation";
        readonly Metric: "metric";
        readonly Report: "report";
        readonly Fatal: "fatal";
    }>;
    /** @deprecated use `GetDeploymentEventsResponseBodyType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Delimiter: "delimiter";
        readonly Command: "command";
        readonly Stdout: "stdout";
        readonly Stderr: "stderr";
        readonly Exit: "exit";
        readonly DeploymentState: "deployment-state";
        readonly Middleware: "middleware";
        readonly MiddlewareInvocation: "middleware-invocation";
        readonly EdgeFunctionInvocation: "edge-function-invocation";
        readonly Metric: "metric";
        readonly Report: "report";
        readonly Fatal: "fatal";
    }>;
}
/** @internal */
export declare const GetDeploymentEventsResponseBodyLevel$inboundSchema: z.ZodNativeEnum<typeof GetDeploymentEventsResponseBodyLevel>;
/** @internal */
export declare const GetDeploymentEventsResponseBodyLevel$outboundSchema: z.ZodNativeEnum<typeof GetDeploymentEventsResponseBodyLevel>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentEventsResponseBodyLevel$ {
    /** @deprecated use `GetDeploymentEventsResponseBodyLevel$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Error: "error";
        readonly Warning: "warning";
    }>;
    /** @deprecated use `GetDeploymentEventsResponseBodyLevel$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Error: "error";
        readonly Warning: "warning";
    }>;
}
/** @internal */
export declare const GetDeploymentEventsResponseBody2$inboundSchema: z.ZodType<GetDeploymentEventsResponseBody2, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentEventsResponseBody2$Outbound = {
    created: number;
    date: number;
    deploymentId: string;
    id: string;
    info: Info$Outbound;
    serial: string;
    text?: string | undefined;
    type: string;
    level?: string | undefined;
};
/** @internal */
export declare const GetDeploymentEventsResponseBody2$outboundSchema: z.ZodType<GetDeploymentEventsResponseBody2$Outbound, z.ZodTypeDef, GetDeploymentEventsResponseBody2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentEventsResponseBody2$ {
    /** @deprecated use `GetDeploymentEventsResponseBody2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentEventsResponseBody2, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentEventsResponseBody2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentEventsResponseBody2$Outbound, z.ZodTypeDef, GetDeploymentEventsResponseBody2>;
    /** @deprecated use `GetDeploymentEventsResponseBody2$Outbound` instead. */
    type Outbound = GetDeploymentEventsResponseBody2$Outbound;
}
export declare function getDeploymentEventsResponseBody2ToJSON(getDeploymentEventsResponseBody2: GetDeploymentEventsResponseBody2): string;
export declare function getDeploymentEventsResponseBody2FromJSON(jsonString: string): SafeParseResult<GetDeploymentEventsResponseBody2, SDKValidationError>;
/** @internal */
export declare const ResponseBodyType$inboundSchema: z.ZodNativeEnum<typeof ResponseBodyType>;
/** @internal */
export declare const ResponseBodyType$outboundSchema: z.ZodNativeEnum<typeof ResponseBodyType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyType$ {
    /** @deprecated use `ResponseBodyType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Delimiter: "delimiter";
        readonly Command: "command";
        readonly Stdout: "stdout";
        readonly Stderr: "stderr";
        readonly Exit: "exit";
        readonly DeploymentState: "deployment-state";
        readonly Middleware: "middleware";
        readonly MiddlewareInvocation: "middleware-invocation";
        readonly EdgeFunctionInvocation: "edge-function-invocation";
        readonly Metric: "metric";
        readonly Report: "report";
        readonly Fatal: "fatal";
    }>;
    /** @deprecated use `ResponseBodyType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Delimiter: "delimiter";
        readonly Command: "command";
        readonly Stdout: "stdout";
        readonly Stderr: "stderr";
        readonly Exit: "exit";
        readonly DeploymentState: "deployment-state";
        readonly Middleware: "middleware";
        readonly MiddlewareInvocation: "middleware-invocation";
        readonly EdgeFunctionInvocation: "edge-function-invocation";
        readonly Metric: "metric";
        readonly Report: "report";
        readonly Fatal: "fatal";
    }>;
}
/** @internal */
export declare const GetDeploymentEventsResponseBodyDeploymentsInfo$inboundSchema: z.ZodType<GetDeploymentEventsResponseBodyDeploymentsInfo, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentEventsResponseBodyDeploymentsInfo$Outbound = {
    type: string;
    name: string;
    entrypoint?: string | undefined;
    path?: string | undefined;
    step?: string | undefined;
    readyState?: string | undefined;
};
/** @internal */
export declare const GetDeploymentEventsResponseBodyDeploymentsInfo$outboundSchema: z.ZodType<GetDeploymentEventsResponseBodyDeploymentsInfo$Outbound, z.ZodTypeDef, GetDeploymentEventsResponseBodyDeploymentsInfo>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentEventsResponseBodyDeploymentsInfo$ {
    /** @deprecated use `GetDeploymentEventsResponseBodyDeploymentsInfo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentEventsResponseBodyDeploymentsInfo, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentEventsResponseBodyDeploymentsInfo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentEventsResponseBodyDeploymentsInfo$Outbound, z.ZodTypeDef, GetDeploymentEventsResponseBodyDeploymentsInfo>;
    /** @deprecated use `GetDeploymentEventsResponseBodyDeploymentsInfo$Outbound` instead. */
    type Outbound = GetDeploymentEventsResponseBodyDeploymentsInfo$Outbound;
}
export declare function getDeploymentEventsResponseBodyDeploymentsInfoToJSON(getDeploymentEventsResponseBodyDeploymentsInfo: GetDeploymentEventsResponseBodyDeploymentsInfo): string;
export declare function getDeploymentEventsResponseBodyDeploymentsInfoFromJSON(jsonString: string): SafeParseResult<GetDeploymentEventsResponseBodyDeploymentsInfo, SDKValidationError>;
/** @internal */
export declare const VercelCache$inboundSchema: z.ZodNativeEnum<typeof VercelCache>;
/** @internal */
export declare const VercelCache$outboundSchema: z.ZodNativeEnum<typeof VercelCache>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace VercelCache$ {
    /** @deprecated use `VercelCache$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Miss: "MISS";
        readonly Hit: "HIT";
        readonly Stale: "STALE";
        readonly Bypass: "BYPASS";
        readonly Prerender: "PRERENDER";
        readonly Revalidated: "REVALIDATED";
    }>;
    /** @deprecated use `VercelCache$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Miss: "MISS";
        readonly Hit: "HIT";
        readonly Stale: "STALE";
        readonly Bypass: "BYPASS";
        readonly Prerender: "PRERENDER";
        readonly Revalidated: "REVALIDATED";
    }>;
}
/** @internal */
export declare const WafAction$inboundSchema: z.ZodNativeEnum<typeof WafAction>;
/** @internal */
export declare const WafAction$outboundSchema: z.ZodNativeEnum<typeof WafAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace WafAction$ {
    /** @deprecated use `WafAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Log: "log";
        readonly Challenge: "challenge";
        readonly Deny: "deny";
        readonly Bypass: "bypass";
        readonly RateLimit: "rate_limit";
    }>;
    /** @deprecated use `WafAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Log: "log";
        readonly Challenge: "challenge";
        readonly Deny: "deny";
        readonly Bypass: "bypass";
        readonly RateLimit: "rate_limit";
    }>;
}
/** @internal */
export declare const Proxy$inboundSchema: z.ZodType<Proxy, z.ZodTypeDef, unknown>;
/** @internal */
export type Proxy$Outbound = {
    timestamp: number;
    method: string;
    host: string;
    path: string;
    statusCode?: number | undefined;
    userAgent: Array<string>;
    referer: string;
    clientIp?: string | undefined;
    region: string;
    scheme?: string | undefined;
    responseByteSize?: number | undefined;
    cacheId?: string | undefined;
    pathType?: string | undefined;
    pathTypeVariant?: string | undefined;
    vercelId?: string | undefined;
    vercelCache?: string | undefined;
    lambdaRegion?: string | undefined;
    wafAction?: string | undefined;
    wafRuleId?: string | undefined;
};
/** @internal */
export declare const Proxy$outboundSchema: z.ZodType<Proxy$Outbound, z.ZodTypeDef, Proxy>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Proxy$ {
    /** @deprecated use `Proxy$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Proxy, z.ZodTypeDef, unknown>;
    /** @deprecated use `Proxy$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Proxy$Outbound, z.ZodTypeDef, Proxy>;
    /** @deprecated use `Proxy$Outbound` instead. */
    type Outbound = Proxy$Outbound;
}
export declare function proxyToJSON(proxy: Proxy): string;
export declare function proxyFromJSON(jsonString: string): SafeParseResult<Proxy, SDKValidationError>;
/** @internal */
export declare const GetDeploymentEventsResponseBodyPayload$inboundSchema: z.ZodType<GetDeploymentEventsResponseBodyPayload, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentEventsResponseBodyPayload$Outbound = {
    deploymentId: string;
    info?: GetDeploymentEventsResponseBodyDeploymentsInfo$Outbound | undefined;
    text?: string | undefined;
    id: string;
    date: number;
    serial: string;
    created?: number | undefined;
    statusCode?: number | undefined;
    requestId?: string | undefined;
    proxy?: Proxy$Outbound | undefined;
};
/** @internal */
export declare const GetDeploymentEventsResponseBodyPayload$outboundSchema: z.ZodType<GetDeploymentEventsResponseBodyPayload$Outbound, z.ZodTypeDef, GetDeploymentEventsResponseBodyPayload>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentEventsResponseBodyPayload$ {
    /** @deprecated use `GetDeploymentEventsResponseBodyPayload$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentEventsResponseBodyPayload, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentEventsResponseBodyPayload$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentEventsResponseBodyPayload$Outbound, z.ZodTypeDef, GetDeploymentEventsResponseBodyPayload>;
    /** @deprecated use `GetDeploymentEventsResponseBodyPayload$Outbound` instead. */
    type Outbound = GetDeploymentEventsResponseBodyPayload$Outbound;
}
export declare function getDeploymentEventsResponseBodyPayloadToJSON(getDeploymentEventsResponseBodyPayload: GetDeploymentEventsResponseBodyPayload): string;
export declare function getDeploymentEventsResponseBodyPayloadFromJSON(jsonString: string): SafeParseResult<GetDeploymentEventsResponseBodyPayload, SDKValidationError>;
/** @internal */
export declare const GetDeploymentEventsResponseBody1$inboundSchema: z.ZodType<GetDeploymentEventsResponseBody1, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentEventsResponseBody1$Outbound = {
    type: string;
    created: number;
    payload: GetDeploymentEventsResponseBodyPayload$Outbound;
};
/** @internal */
export declare const GetDeploymentEventsResponseBody1$outboundSchema: z.ZodType<GetDeploymentEventsResponseBody1$Outbound, z.ZodTypeDef, GetDeploymentEventsResponseBody1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentEventsResponseBody1$ {
    /** @deprecated use `GetDeploymentEventsResponseBody1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentEventsResponseBody1, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentEventsResponseBody1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentEventsResponseBody1$Outbound, z.ZodTypeDef, GetDeploymentEventsResponseBody1>;
    /** @deprecated use `GetDeploymentEventsResponseBody1$Outbound` instead. */
    type Outbound = GetDeploymentEventsResponseBody1$Outbound;
}
export declare function getDeploymentEventsResponseBody1ToJSON(getDeploymentEventsResponseBody1: GetDeploymentEventsResponseBody1): string;
export declare function getDeploymentEventsResponseBody1FromJSON(jsonString: string): SafeParseResult<GetDeploymentEventsResponseBody1, SDKValidationError>;
/** @internal */
export declare const GetDeploymentEventsDeploymentsResponseBody$inboundSchema: z.ZodType<GetDeploymentEventsDeploymentsResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentEventsDeploymentsResponseBody$Outbound = GetDeploymentEventsResponseBody2$Outbound | GetDeploymentEventsResponseBody1$Outbound;
/** @internal */
export declare const GetDeploymentEventsDeploymentsResponseBody$outboundSchema: z.ZodType<GetDeploymentEventsDeploymentsResponseBody$Outbound, z.ZodTypeDef, GetDeploymentEventsDeploymentsResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentEventsDeploymentsResponseBody$ {
    /** @deprecated use `GetDeploymentEventsDeploymentsResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentEventsDeploymentsResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentEventsDeploymentsResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentEventsDeploymentsResponseBody$Outbound, z.ZodTypeDef, GetDeploymentEventsDeploymentsResponseBody>;
    /** @deprecated use `GetDeploymentEventsDeploymentsResponseBody$Outbound` instead. */
    type Outbound = GetDeploymentEventsDeploymentsResponseBody$Outbound;
}
export declare function getDeploymentEventsDeploymentsResponseBodyToJSON(getDeploymentEventsDeploymentsResponseBody: GetDeploymentEventsDeploymentsResponseBody): string;
export declare function getDeploymentEventsDeploymentsResponseBodyFromJSON(jsonString: string): SafeParseResult<GetDeploymentEventsDeploymentsResponseBody, SDKValidationError>;
/** @internal */
export declare const GetDeploymentEventsResponse$inboundSchema: z.ZodType<GetDeploymentEventsResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentEventsResponse$Outbound = Array<GetDeploymentEventsResponseBody2$Outbound | GetDeploymentEventsResponseBody1$Outbound | null> | GetDeploymentEventsResponseBodyDeployments2$Outbound | GetDeploymentEventsResponseBodyDeployments1$Outbound;
/** @internal */
export declare const GetDeploymentEventsResponse$outboundSchema: z.ZodType<GetDeploymentEventsResponse$Outbound, z.ZodTypeDef, GetDeploymentEventsResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentEventsResponse$ {
    /** @deprecated use `GetDeploymentEventsResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentEventsResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentEventsResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentEventsResponse$Outbound, z.ZodTypeDef, GetDeploymentEventsResponse>;
    /** @deprecated use `GetDeploymentEventsResponse$Outbound` instead. */
    type Outbound = GetDeploymentEventsResponse$Outbound;
}
export declare function getDeploymentEventsResponseToJSON(getDeploymentEventsResponse: GetDeploymentEventsResponse): string;
export declare function getDeploymentEventsResponseFromJSON(jsonString: string): SafeParseResult<GetDeploymentEventsResponse, SDKValidationError>;
//# sourceMappingURL=getdeploymenteventsop.d.ts.map