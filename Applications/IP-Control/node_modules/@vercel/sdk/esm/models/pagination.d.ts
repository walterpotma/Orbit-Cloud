import * as z from "zod";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
/**
 * This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.
 */
export type Pagination = {
    /**
     * Amount of items in the current page.
     */
    count: number;
    /**
     * Timestamp that must be used to request the next page.
     */
    next: number | null;
    /**
     * Timestamp that must be used to request the previous page.
     */
    prev: number | null;
};
/** @internal */
export declare const Pagination$inboundSchema: z.ZodType<Pagination, z.ZodTypeDef, unknown>;
/** @internal */
export type Pagination$Outbound = {
    count: number;
    next: number | null;
    prev: number | null;
};
/** @internal */
export declare const Pagination$outboundSchema: z.ZodType<Pagination$Outbound, z.ZodTypeDef, Pagination>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Pagination$ {
    /** @deprecated use `Pagination$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Pagination, z.ZodTypeDef, unknown>;
    /** @deprecated use `Pagination$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Pagination$Outbound, z.ZodTypeDef, Pagination>;
    /** @deprecated use `Pagination$Outbound` instead. */
    type Outbound = Pagination$Outbound;
}
export declare function paginationToJSON(pagination: Pagination): string;
export declare function paginationFromJSON(jsonString: string): SafeParseResult<Pagination, SDKValidationError>;
//# sourceMappingURL=pagination.d.ts.map