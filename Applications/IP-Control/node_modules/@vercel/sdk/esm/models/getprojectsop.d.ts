import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { ACLAction } from "./aclaction.js";
import { Pagination, Pagination$Outbound } from "./pagination.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
/**
 * Specifies whether PRs from Git forks should require a team member's authorization before it can be deployed
 */
export declare const GitForkProtection: {
    readonly One: "1";
    readonly Zero: "0";
};
/**
 * Specifies whether PRs from Git forks should require a team member's authorization before it can be deployed
 */
export type GitForkProtection = ClosedEnum<typeof GitForkProtection>;
/**
 * Filter results by projects with elastic concurrency enabled
 */
export declare const ElasticConcurrencyEnabled: {
    readonly One: "1";
    readonly Zero: "0";
};
/**
 * Filter results by projects with elastic concurrency enabled
 */
export type ElasticConcurrencyEnabled = ClosedEnum<typeof ElasticConcurrencyEnabled>;
/**
 * Sort results by elastic concurrency status. desc = enabled projects first, asc = disabled projects first
 */
export declare const SortByElasticConcurrency: {
    readonly Desc: "desc";
    readonly Asc: "asc";
};
/**
 * Sort results by elastic concurrency status. desc = enabled projects first, asc = disabled projects first
 */
export type SortByElasticConcurrency = ClosedEnum<typeof SortByElasticConcurrency>;
export type GetProjectsRequest = {
    /**
     * Query only projects updated after the given timestamp
     */
    from?: string | undefined;
    /**
     * Specifies whether PRs from Git forks should require a team member's authorization before it can be deployed
     */
    gitForkProtection?: GitForkProtection | undefined;
    /**
     * Limit the number of projects returned
     */
    limit?: string | undefined;
    /**
     * Search projects by the name field
     */
    search?: string | undefined;
    /**
     * Filter results by repo. Also used for project count
     */
    repo?: string | undefined;
    /**
     * Filter results by Repository ID.
     */
    repoId?: string | undefined;
    /**
     * Filter results by Repository URL.
     */
    repoUrl?: string | undefined;
    /**
     * Filter results by excluding those projects that belong to a repo
     */
    excludeRepos?: string | undefined;
    /**
     * Filter results by connected Edge Config ID
     */
    edgeConfigId?: string | undefined;
    /**
     * Filter results by connected Edge Config Token ID
     */
    edgeConfigTokenId?: string | undefined;
    deprecated?: boolean | undefined;
    /**
     * Filter results by projects with elastic concurrency enabled
     */
    elasticConcurrencyEnabled?: ElasticConcurrencyEnabled | undefined;
    /**
     * Sort results by elastic concurrency status. desc = enabled projects first, asc = disabled projects first
     */
    sortByElasticConcurrency?: SortByElasticConcurrency | undefined;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};
export type GetProjectsAnalytics = {
    id: string;
    canceledAt?: number | null | undefined;
    disabledAt: number;
    enabledAt: number;
    paidAt?: number | undefined;
    sampleRatePercent?: number | null | undefined;
    spendLimitInDollars?: number | null | undefined;
};
export type GetProjectsSpeedInsights = {
    id: string;
    enabledAt?: number | undefined;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    hasData?: boolean | undefined;
    paidAt?: number | undefined;
};
export declare const GetProjectsEnvId2: {
    readonly Preview: "preview";
    readonly Production: "production";
};
export type GetProjectsEnvId2 = ClosedEnum<typeof GetProjectsEnvId2>;
export type GetProjectsEnvId = string | GetProjectsEnvId2;
export type GetProjectsAws = {
    subnetIds: Array<string>;
    securityGroupId: string;
};
export type GetProjectsConnectConfigurations = {
    envId: string | GetProjectsEnvId2;
    connectConfigurationId: string;
    dc?: string | undefined;
    passive: boolean;
    buildsEnabled: boolean;
    aws?: GetProjectsAws | undefined;
    createdAt: number;
    updatedAt: number;
};
export type GetProjectsDefinitions = {
    /**
     * The hostname that should be used.
     */
    host: string;
    /**
     * The path that should be called for the cronjob.
     */
    path: string;
    /**
     * The cron expression.
     */
    schedule: string;
};
export type GetProjectsCrons = {
    /**
     * The time the feature was enabled for this project. Note: It enables automatically with the first Deployment that outputs cronjobs.
     */
    enabledAt: number;
    /**
     * The time the feature was disabled for this project.
     */
    disabledAt: number | null;
    updatedAt: number;
    /**
     * The ID of the Deployment from which the definitions originated.
     */
    deploymentId: string | null;
    definitions: Array<GetProjectsDefinitions>;
};
export type GetProjectsDataCache = {
    userDisabled: boolean;
    storageSizeBytes?: number | null | undefined;
    unlimited?: boolean | undefined;
};
/**
 * Retention policies for deployments. These are enforced at the project level, but we also maintain an instance of this at the team level as a default policy that gets applied to new projects.
 */
export type GetProjectsDeploymentExpiration = {
    /**
     * Number of days to keep non-production deployments (mostly preview deployments) before soft deletion.
     */
    expirationDays?: number | undefined;
    /**
     * Number of days to keep production deployments before soft deletion.
     */
    expirationDaysProduction?: number | undefined;
    /**
     * Number of days to keep canceled deployments before soft deletion.
     */
    expirationDaysCanceled?: number | undefined;
    /**
     * Number of days to keep errored deployments before soft deletion.
     */
    expirationDaysErrored?: number | undefined;
    /**
     * Minimum number of production deployments to keep for this project, even if they are over the production expiration limit.
     */
    deploymentsToKeep?: number | undefined;
};
export declare const GetProjectsTarget2: {
    readonly Production: "production";
    readonly Preview: "preview";
    readonly Development: "development";
};
export type GetProjectsTarget2 = ClosedEnum<typeof GetProjectsTarget2>;
export declare const GetProjectsTarget1: {
    readonly Production: "production";
    readonly Preview: "preview";
    readonly Development: "development";
};
export type GetProjectsTarget1 = ClosedEnum<typeof GetProjectsTarget1>;
export type GetProjectsTarget = Array<GetProjectsTarget1> | GetProjectsTarget2;
export declare const GetProjectsType: {
    readonly System: "system";
    readonly Encrypted: "encrypted";
    readonly Plain: "plain";
    readonly Sensitive: "sensitive";
    readonly Secret: "secret";
};
export type GetProjectsType = ClosedEnum<typeof GetProjectsType>;
export declare const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv15Type: {
    readonly FlagsConnectionString: "flags-connection-string";
};
export type GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv15Type = ClosedEnum<typeof GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv15Type>;
export type GetProjectsContentHint15 = {
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv15Type;
    projectId: string;
};
export declare const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv14Type: {
    readonly IntegrationStoreSecret: "integration-store-secret";
};
export type GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv14Type = ClosedEnum<typeof GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv14Type>;
export type GetProjectsContentHint14 = {
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv14Type;
    storeId: string;
    integrationId: string;
    integrationProductId: string;
    integrationConfigurationId: string;
};
export declare const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv13Type: {
    readonly PostgresUrlNoSsl: "postgres-url-no-ssl";
};
export type GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv13Type = ClosedEnum<typeof GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv13Type>;
export type GetProjectsContentHint13 = {
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv13Type;
    storeId: string;
};
export declare const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv12Type: {
    readonly PostgresDatabase: "postgres-database";
};
export type GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv12Type = ClosedEnum<typeof GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv12Type>;
export type GetProjectsContentHint12 = {
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv12Type;
    storeId: string;
};
export declare const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv11Type: {
    readonly PostgresPassword: "postgres-password";
};
export type GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv11Type = ClosedEnum<typeof GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv11Type>;
export type GetProjectsContentHint11 = {
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv11Type;
    storeId: string;
};
export declare const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv10Type: {
    readonly PostgresHost: "postgres-host";
};
export type GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv10Type = ClosedEnum<typeof GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv10Type>;
export type GetProjectsContentHint10 = {
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv10Type;
    storeId: string;
};
export declare const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv9Type: {
    readonly PostgresUser: "postgres-user";
};
export type GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv9Type = ClosedEnum<typeof GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv9Type>;
export type GetProjectsContentHint9 = {
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv9Type;
    storeId: string;
};
export declare const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType: {
    readonly PostgresPrismaUrl: "postgres-prisma-url";
};
export type GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType = ClosedEnum<typeof GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType>;
export type GetProjectsContentHint8 = {
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType;
    storeId: string;
};
export declare const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsType: {
    readonly PostgresUrlNonPooling: "postgres-url-non-pooling";
};
export type GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsType = ClosedEnum<typeof GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsType>;
export type GetProjectsContentHint7 = {
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsType;
    storeId: string;
};
export declare const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyType: {
    readonly PostgresUrl: "postgres-url";
};
export type GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyType = ClosedEnum<typeof GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyType>;
export type GetProjectsContentHint6 = {
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyType;
    storeId: string;
};
export declare const GetProjectsContentHintProjectsResponse200ApplicationJSONType: {
    readonly BlobReadWriteToken: "blob-read-write-token";
};
export type GetProjectsContentHintProjectsResponse200ApplicationJSONType = ClosedEnum<typeof GetProjectsContentHintProjectsResponse200ApplicationJSONType>;
export type GetProjectsContentHint5 = {
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONType;
    storeId: string;
};
export declare const GetProjectsContentHintProjectsResponse200Type: {
    readonly RedisRestApiReadOnlyToken: "redis-rest-api-read-only-token";
};
export type GetProjectsContentHintProjectsResponse200Type = ClosedEnum<typeof GetProjectsContentHintProjectsResponse200Type>;
export type GetProjectsContentHint4 = {
    type: GetProjectsContentHintProjectsResponse200Type;
    storeId: string;
};
export declare const GetProjectsContentHintProjectsResponseType: {
    readonly RedisRestApiToken: "redis-rest-api-token";
};
export type GetProjectsContentHintProjectsResponseType = ClosedEnum<typeof GetProjectsContentHintProjectsResponseType>;
export type GetProjectsContentHint3 = {
    type: GetProjectsContentHintProjectsResponseType;
    storeId: string;
};
export declare const GetProjectsContentHintProjectsType: {
    readonly RedisRestApiUrl: "redis-rest-api-url";
};
export type GetProjectsContentHintProjectsType = ClosedEnum<typeof GetProjectsContentHintProjectsType>;
export type GetProjectsContentHint2 = {
    type: GetProjectsContentHintProjectsType;
    storeId: string;
};
export declare const GetProjectsContentHintType: {
    readonly RedisUrl: "redis-url";
};
export type GetProjectsContentHintType = ClosedEnum<typeof GetProjectsContentHintType>;
export type GetProjectsContentHint1 = {
    type: GetProjectsContentHintType;
    storeId: string;
};
export type GetProjectsContentHint = GetProjectsContentHint14 | GetProjectsContentHint1 | GetProjectsContentHint2 | GetProjectsContentHint3 | GetProjectsContentHint4 | GetProjectsContentHint5 | GetProjectsContentHint6 | GetProjectsContentHint7 | GetProjectsContentHint8 | GetProjectsContentHint9 | GetProjectsContentHint10 | GetProjectsContentHint11 | GetProjectsContentHint12 | GetProjectsContentHint13 | GetProjectsContentHint15;
export declare const GetProjectsProjectsResponse200ApplicationJSONResponseBodyType: {
    readonly FlagsSecret: "flags-secret";
};
export type GetProjectsProjectsResponse200ApplicationJSONResponseBodyType = ClosedEnum<typeof GetProjectsProjectsResponse200ApplicationJSONResponseBodyType>;
/**
 * Similar to `contentHints`, but should not be exposed to the user.
 */
export type GetProjectsInternalContentHint = {
    type: GetProjectsProjectsResponse200ApplicationJSONResponseBodyType;
    /**
     * Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
     */
    encryptedValue: string;
};
export type GetProjectsEnv = {
    target?: Array<GetProjectsTarget1> | GetProjectsTarget2 | undefined;
    type: GetProjectsType;
    /**
     * This is used to identiy variables that have been migrated from type secret to sensitive.
     */
    sunsetSecretId?: string | undefined;
    decrypted?: boolean | undefined;
    value: string;
    vsmValue?: string | undefined;
    id?: string | undefined;
    key: string;
    configurationId?: string | null | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    createdBy?: string | null | undefined;
    updatedBy?: string | null | undefined;
    gitBranch?: string | undefined;
    edgeConfigId?: string | null | undefined;
    edgeConfigTokenId?: string | null | undefined;
    contentHint?: GetProjectsContentHint14 | GetProjectsContentHint1 | GetProjectsContentHint2 | GetProjectsContentHint3 | GetProjectsContentHint4 | GetProjectsContentHint5 | GetProjectsContentHint6 | GetProjectsContentHint7 | GetProjectsContentHint8 | GetProjectsContentHint9 | GetProjectsContentHint10 | GetProjectsContentHint11 | GetProjectsContentHint12 | GetProjectsContentHint13 | GetProjectsContentHint15 | null | undefined;
    /**
     * Similar to `contentHints`, but should not be exposed to the user.
     */
    internalContentHint?: GetProjectsInternalContentHint | null | undefined;
    comment?: string | undefined;
    customEnvironmentIds?: Array<string> | undefined;
};
/**
 * The type of environment (production, preview, or development)
 */
export declare const GetProjectsProjectsType: {
    readonly Preview: "preview";
    readonly Production: "production";
    readonly Development: "development";
};
/**
 * The type of environment (production, preview, or development)
 */
export type GetProjectsProjectsType = ClosedEnum<typeof GetProjectsProjectsType>;
/**
 * The type of matching to perform
 */
export declare const GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsCustomEnvironmentsType: {
    readonly EndsWith: "endsWith";
    readonly StartsWith: "startsWith";
    readonly Equals: "equals";
};
/**
 * The type of matching to perform
 */
export type GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsCustomEnvironmentsType = ClosedEnum<typeof GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsCustomEnvironmentsType>;
/**
 * Configuration for matching git branches to this environment
 */
export type GetProjectsBranchMatcher = {
    /**
     * The type of matching to perform
     */
    type: GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsCustomEnvironmentsType;
    /**
     * The pattern to match against branch names
     */
    pattern: string;
};
/**
 * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
 */
export type GetProjectsVerification = {
    type: string;
    domain: string;
    value: string;
    reason: string;
};
/**
 * List of domains associated with this environment
 */
export type GetProjectsDomains = {
    name: string;
    apexName: string;
    projectId: string;
    redirect?: string | null | undefined;
    redirectStatusCode?: number | null | undefined;
    gitBranch?: string | null | undefined;
    customEnvironmentId?: string | null | undefined;
    updatedAt?: number | undefined;
    createdAt?: number | undefined;
    /**
     * `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.
     */
    verified: boolean;
    /**
     * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
     */
    verification?: Array<GetProjectsVerification> | undefined;
};
/**
 * Internal representation of a custom environment with all required properties
 */
export type GetProjectsCustomEnvironments = {
    /**
     * Unique identifier for the custom environment (format: env_*)
     */
    id: string;
    /**
     * URL-friendly name of the environment
     */
    slug: string;
    /**
     * The type of environment (production, preview, or development)
     */
    type: GetProjectsProjectsType;
    /**
     * Optional description of the environment's purpose
     */
    description?: string | undefined;
    /**
     * Configuration for matching git branches to this environment
     */
    branchMatcher?: GetProjectsBranchMatcher | undefined;
    /**
     * List of domains associated with this environment
     */
    domains?: Array<GetProjectsDomains> | undefined;
    /**
     * List of aliases for the current deployment
     */
    currentDeploymentAliases?: Array<string> | undefined;
    /**
     * Timestamp when the environment was created
     */
    createdAt: number;
    /**
     * Timestamp when the environment was last updated
     */
    updatedAt: number;
};
export declare const GetProjectsFramework: {
    readonly Blitzjs: "blitzjs";
    readonly Nextjs: "nextjs";
    readonly Gatsby: "gatsby";
    readonly Remix: "remix";
    readonly ReactRouter: "react-router";
    readonly Astro: "astro";
    readonly Hexo: "hexo";
    readonly Eleventy: "eleventy";
    readonly Docusaurus2: "docusaurus-2";
    readonly Docusaurus: "docusaurus";
    readonly Preact: "preact";
    readonly Solidstart1: "solidstart-1";
    readonly Solidstart: "solidstart";
    readonly Dojo: "dojo";
    readonly Ember: "ember";
    readonly Vue: "vue";
    readonly Scully: "scully";
    readonly IonicAngular: "ionic-angular";
    readonly Angular: "angular";
    readonly Polymer: "polymer";
    readonly Svelte: "svelte";
    readonly Sveltekit: "sveltekit";
    readonly Sveltekit1: "sveltekit-1";
    readonly IonicReact: "ionic-react";
    readonly CreateReactApp: "create-react-app";
    readonly Gridsome: "gridsome";
    readonly Umijs: "umijs";
    readonly Sapper: "sapper";
    readonly Saber: "saber";
    readonly Stencil: "stencil";
    readonly Nuxtjs: "nuxtjs";
    readonly Redwoodjs: "redwoodjs";
    readonly Hugo: "hugo";
    readonly Jekyll: "jekyll";
    readonly Brunch: "brunch";
    readonly Middleman: "middleman";
    readonly Zola: "zola";
    readonly Hydrogen: "hydrogen";
    readonly Vite: "vite";
    readonly Vitepress: "vitepress";
    readonly Vuepress: "vuepress";
    readonly Parcel: "parcel";
    readonly Fastapi: "fastapi";
    readonly Fasthtml: "fasthtml";
    readonly SanityV3: "sanity-v3";
    readonly Sanity: "sanity";
    readonly Storybook: "storybook";
    readonly Nitro: "nitro";
    readonly Hono: "hono";
    readonly Express: "express";
    readonly Xmcp: "xmcp";
};
export type GetProjectsFramework = ClosedEnum<typeof GetProjectsFramework>;
export type GetProjectsIpBuckets = {
    bucket: string;
    supportUntil?: number | undefined;
};
export type GetProjectsAliasAssigned = number | boolean;
export type GetProjectsAliasError = {
    code: string;
    message: string;
};
/**
 * The type of matching to perform
 */
export declare const GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsLatestDeploymentsType: {
    readonly EndsWith: "endsWith";
    readonly StartsWith: "startsWith";
    readonly Equals: "equals";
};
/**
 * The type of matching to perform
 */
export type GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsLatestDeploymentsType = ClosedEnum<typeof GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsLatestDeploymentsType>;
export type GetProjectsProjectsBranchMatcher = {
    /**
     * The type of matching to perform
     */
    type: GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsLatestDeploymentsType;
    /**
     * The pattern to match against branch names
     */
    pattern: string;
};
export type GetProjectsBuilds = {
    use: string;
    src?: string | undefined;
    dest?: string | undefined;
};
export declare const GetProjectsChecksConclusion: {
    readonly Succeeded: "succeeded";
    readonly Failed: "failed";
    readonly Skipped: "skipped";
    readonly Canceled: "canceled";
};
export type GetProjectsChecksConclusion = ClosedEnum<typeof GetProjectsChecksConclusion>;
export declare const GetProjectsChecksState: {
    readonly Registered: "registered";
    readonly Running: "running";
    readonly Completed: "completed";
};
export type GetProjectsChecksState = ClosedEnum<typeof GetProjectsChecksState>;
export type GetProjectsCreator = {
    email: string;
    githubLogin?: string | undefined;
    gitlabLogin?: string | undefined;
    uid: string;
    username: string;
};
export type GetProjectsOidcTokenClaims = {
    iss: string;
    sub: string;
    scope: string;
    aud: string;
    owner: string;
    ownerId: string;
    project: string;
    projectId: string;
    environment: string;
};
export declare const GetProjectsPlan: {
    readonly Pro: "pro";
    readonly Enterprise: "enterprise";
    readonly Hobby: "hobby";
};
export type GetProjectsPlan = ClosedEnum<typeof GetProjectsPlan>;
export declare const GetProjectsReadyState: {
    readonly Building: "BUILDING";
    readonly Error: "ERROR";
    readonly Initializing: "INITIALIZING";
    readonly Queued: "QUEUED";
    readonly Ready: "READY";
    readonly Canceled: "CANCELED";
};
export type GetProjectsReadyState = ClosedEnum<typeof GetProjectsReadyState>;
export declare const GetProjectsReadySubstate: {
    readonly Staged: "STAGED";
    readonly Rolling: "ROLLING";
    readonly Promoted: "PROMOTED";
};
export type GetProjectsReadySubstate = ClosedEnum<typeof GetProjectsReadySubstate>;
export declare const GetProjectsProjectsResponseType: {
    readonly Lambdas: "LAMBDAS";
};
export type GetProjectsProjectsResponseType = ClosedEnum<typeof GetProjectsProjectsResponseType>;
export type GetProjectsLatestDeployments = {
    id: string;
    alias?: Array<string> | undefined;
    aliasAssigned?: number | boolean | null | undefined;
    aliasError?: GetProjectsAliasError | null | undefined;
    aliasFinal?: string | null | undefined;
    automaticAliases?: Array<string> | undefined;
    branchMatcher?: GetProjectsProjectsBranchMatcher | undefined;
    buildingAt?: number | undefined;
    builds?: Array<GetProjectsBuilds> | undefined;
    checksConclusion?: GetProjectsChecksConclusion | undefined;
    checksState?: GetProjectsChecksState | undefined;
    connectBuildsEnabled?: boolean | undefined;
    connectConfigurationId?: string | undefined;
    createdAt: number;
    createdIn: string;
    creator: GetProjectsCreator | null;
    deletedAt?: number | undefined;
    deploymentHostname: string;
    forced?: boolean | undefined;
    name: string;
    meta?: {
        [k: string]: string;
    } | undefined;
    monorepoManager?: string | null | undefined;
    oidcTokenClaims?: GetProjectsOidcTokenClaims | undefined;
    plan: GetProjectsPlan;
    /**
     * Whether or not preview comments are enabled for the deployment
     */
    previewCommentsEnabled?: boolean | undefined;
    private: boolean;
    readyAt?: number | undefined;
    readyState: GetProjectsReadyState;
    readySubstate?: GetProjectsReadySubstate | undefined;
    requestedAt?: number | undefined;
    target?: string | null | undefined;
    teamId?: string | null | undefined;
    type: GetProjectsProjectsResponseType;
    url: string;
    userId: string;
    withCache?: boolean | undefined;
};
export declare const GetProjectsLinkProjectsResponse200ApplicationJSONType: {
    readonly Bitbucket: "bitbucket";
};
export type GetProjectsLinkProjectsResponse200ApplicationJSONType = ClosedEnum<typeof GetProjectsLinkProjectsResponse200ApplicationJSONType>;
export type GetProjectsLinkProjectsResponse200ApplicationJSONDeployHooks = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};
export type GetProjectsLink5 = {
    name: string;
    slug: string;
    owner: string;
    type: GetProjectsLinkProjectsResponse200ApplicationJSONType;
    uuid: string;
    workspaceUuid: string;
    createdAt?: number | undefined;
    deployHooks: Array<GetProjectsLinkProjectsResponse200ApplicationJSONDeployHooks>;
    gitCredentialId: string;
    updatedAt?: number | undefined;
    sourceless?: boolean | undefined;
    productionBranch: string;
};
export declare const GetProjectsLinkProjectsResponse200Type: {
    readonly Gitlab: "gitlab";
};
export type GetProjectsLinkProjectsResponse200Type = ClosedEnum<typeof GetProjectsLinkProjectsResponse200Type>;
export type GetProjectsLinkProjectsResponse200DeployHooks = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};
export type GetProjectsLink4 = {
    projectId: string;
    projectName: string;
    projectNameWithNamespace: string;
    projectNamespace: string;
    /**
     * A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes. This is the id of the top level group that a namespace belongs to. Gitlab supports group nesting (up to 20 levels).
     */
    projectOwnerId?: number | undefined;
    projectUrl: string;
    type: GetProjectsLinkProjectsResponse200Type;
    createdAt?: number | undefined;
    deployHooks: Array<GetProjectsLinkProjectsResponse200DeployHooks>;
    gitCredentialId: string;
    updatedAt?: number | undefined;
    sourceless?: boolean | undefined;
    productionBranch: string;
};
export declare const GetProjectsLinkProjectsResponseType: {
    readonly GithubCustomHost: "github-custom-host";
};
export type GetProjectsLinkProjectsResponseType = ClosedEnum<typeof GetProjectsLinkProjectsResponseType>;
export type GetProjectsLinkProjectsResponseDeployHooks = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};
export type GetProjectsLink3 = {
    org: string;
    /**
     * A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes.
     */
    repoOwnerId?: number | undefined;
    repo?: string | undefined;
    repoId?: number | undefined;
    type: GetProjectsLinkProjectsResponseType;
    host: string;
    createdAt?: number | undefined;
    deployHooks: Array<GetProjectsLinkProjectsResponseDeployHooks>;
    gitCredentialId: string;
    updatedAt?: number | undefined;
    sourceless?: boolean | undefined;
    productionBranch: string;
};
export declare const GetProjectsLinkProjectsType: {
    readonly GithubLimited: "github-limited";
};
export type GetProjectsLinkProjectsType = ClosedEnum<typeof GetProjectsLinkProjectsType>;
export type GetProjectsLinkProjectsDeployHooks = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};
export type GetProjectsLink2 = {
    type: GetProjectsLinkProjectsType;
    repo?: string | undefined;
    repoId?: number | undefined;
    updatedAt?: number | undefined;
    createdAt?: number | undefined;
    org: string;
    /**
     * A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes.
     */
    repoOwnerId?: number | undefined;
    deployHooks: Array<GetProjectsLinkProjectsDeployHooks>;
    gitCredentialId: string;
    sourceless?: boolean | undefined;
    productionBranch: string;
};
export declare const GetProjectsLinkType: {
    readonly Github: "github";
};
export type GetProjectsLinkType = ClosedEnum<typeof GetProjectsLinkType>;
export type GetProjectsLinkDeployHooks = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};
export type GetProjectsLink1 = {
    org: string;
    /**
     * A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes.
     */
    repoOwnerId?: number | undefined;
    repo?: string | undefined;
    repoId?: number | undefined;
    type: GetProjectsLinkType;
    createdAt?: number | undefined;
    deployHooks: Array<GetProjectsLinkDeployHooks>;
    gitCredentialId: string;
    updatedAt?: number | undefined;
    sourceless?: boolean | undefined;
    productionBranch: string;
};
export type GetProjectsLink = GetProjectsLink4 | GetProjectsLink5 | GetProjectsLink3 | GetProjectsLink1 | GetProjectsLink2;
export type GetProjectsMicrofrontends2 = {
    updatedAt: number;
    groupIds: Array<any>;
    enabled: boolean;
};
export type GetProjectsMicrofrontends1 = {
    /**
     * Timestamp when the microfrontends settings were last updated.
     */
    updatedAt: number;
    /**
     * The group IDs of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together.
     */
    groupIds: Array<string>;
    /**
     * Whether microfrontends are enabled for this project.
     */
    enabled: boolean;
    /**
     * Whether this project is the default application for the microfrontends group. The default application is the one that is used as the top level shell for the microfrontends group and hosts the other microfrontends.
     */
    isDefaultApp?: boolean | undefined;
    /**
     * A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI. Includes the leading slash, e.g. `/docs`
     */
    defaultRoute?: string | undefined;
    /**
     * Whether observability data should be routed to this microfrontend project or a root project.
     */
    routeObservabilityToThisProject?: boolean | undefined;
};
export type GetProjectsMicrofrontends = GetProjectsMicrofrontends1 | GetProjectsMicrofrontends2;
export declare const GetProjectsNodeVersion: {
    readonly TwentyTwoDotX: "22.x";
    readonly TwentyDotX: "20.x";
    readonly EighteenDotX: "18.x";
    readonly SixteenDotX: "16.x";
    readonly FourteenDotX: "14.x";
    readonly TwelveDotX: "12.x";
    readonly TenDotX: "10.x";
    readonly EightDot10DotX: "8.10.x";
};
export type GetProjectsNodeVersion = ClosedEnum<typeof GetProjectsNodeVersion>;
export type GetProjectsPaths = {
    value: string;
};
export type GetProjectsOptionsAllowlist = {
    paths: Array<GetProjectsPaths>;
};
export type GetProjectsPasswordProtection = {};
export declare const GetProjectsFunctionDefaultMemoryType: {
    readonly StandardLegacy: "standard_legacy";
    readonly Standard: "standard";
    readonly Performance: "performance";
};
export type GetProjectsFunctionDefaultMemoryType = ClosedEnum<typeof GetProjectsFunctionDefaultMemoryType>;
export declare const GetProjectsBuildMachineType: {
    readonly Enhanced: "enhanced";
    readonly Turbo: "turbo";
};
export type GetProjectsBuildMachineType = ClosedEnum<typeof GetProjectsBuildMachineType>;
export type GetProjectsResourceConfig = {
    elasticConcurrencyEnabled?: boolean | undefined;
    fluid?: boolean | undefined;
    functionDefaultRegions: Array<string>;
    functionDefaultTimeout?: number | undefined;
    functionDefaultMemoryType?: GetProjectsFunctionDefaultMemoryType | undefined;
    functionZeroConfigFailover?: boolean | undefined;
    buildMachineType?: GetProjectsBuildMachineType | undefined;
    isNSNBDisabled?: boolean | undefined;
};
/**
 * Description of why a project was rolled back, and by whom. Note that lastAliasRequest contains the from/to details of the rollback.
 */
export type GetProjectsRollbackDescription = {
    /**
     * The user who rolled back the project.
     */
    userId: string;
    /**
     * The username of the user who rolled back the project.
     */
    username: string;
    /**
     * User-supplied explanation of why they rolled back the project. Limited to 250 characters.
     */
    description: string;
    /**
     * Timestamp of when the rollback was requested.
     */
    createdAt: number;
};
/**
 * An array of all the stages required during a deployment release. Each stage defines a target percentage and advancement rules. The final stage must always have targetPercentage: 100.
 */
export type GetProjectsStages = {
    /**
     * The percentage of traffic to serve to the canary deployment (0-100)
     */
    targetPercentage: number;
    /**
     * Whether or not this stage requires manual approval to proceed
     */
    requireApproval?: boolean | undefined;
    /**
     * Duration in minutes for automatic advancement to the next stage
     */
    duration?: number | undefined;
};
/**
 * Project-level rolling release configuration that defines how deployments should be gradually rolled out
 */
export type GetProjectsRollingRelease = {
    /**
     * The environment that the release targets, currently only supports production. Adding in case we want to configure with alias groups or custom environments.
     */
    target: string;
    /**
     * An array of all the stages required during a deployment release. Each stage defines a target percentage and advancement rules. The final stage must always have targetPercentage: 100.
     */
    stages?: Array<GetProjectsStages> | null | undefined;
    /**
     * Whether the request served by a canary deployment should return a header indicating a canary was served. Defaults to `false` when omitted.
     */
    canaryResponseHeader?: boolean | undefined;
};
export declare const GetProjectsProjectsFunctionDefaultMemoryType: {
    readonly StandardLegacy: "standard_legacy";
    readonly Standard: "standard";
    readonly Performance: "performance";
};
export type GetProjectsProjectsFunctionDefaultMemoryType = ClosedEnum<typeof GetProjectsProjectsFunctionDefaultMemoryType>;
export declare const GetProjectsProjectsBuildMachineType: {
    readonly Enhanced: "enhanced";
    readonly Turbo: "turbo";
};
export type GetProjectsProjectsBuildMachineType = ClosedEnum<typeof GetProjectsProjectsBuildMachineType>;
export type GetProjectsDefaultResourceConfig = {
    elasticConcurrencyEnabled?: boolean | undefined;
    fluid?: boolean | undefined;
    functionDefaultRegions: Array<string>;
    functionDefaultTimeout?: number | undefined;
    functionDefaultMemoryType?: GetProjectsProjectsFunctionDefaultMemoryType | undefined;
    functionZeroConfigFailover?: boolean | undefined;
    buildMachineType?: GetProjectsProjectsBuildMachineType | undefined;
    isNSNBDisabled?: boolean | undefined;
};
export declare const GetProjectsDeploymentType: {
    readonly Preview: "preview";
    readonly All: "all";
    readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
    readonly AllExceptCustomDomains: "all_except_custom_domains";
};
export type GetProjectsDeploymentType = ClosedEnum<typeof GetProjectsDeploymentType>;
export type GetProjectsSsoProtection = {
    deploymentType: GetProjectsDeploymentType;
};
export type GetProjectsProjectsAliasAssigned = number | boolean;
export type GetProjectsProjectsAliasError = {
    code: string;
    message: string;
};
/**
 * The type of matching to perform
 */
export declare const GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsType: {
    readonly EndsWith: "endsWith";
    readonly StartsWith: "startsWith";
    readonly Equals: "equals";
};
/**
 * The type of matching to perform
 */
export type GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsType = ClosedEnum<typeof GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsType>;
export type GetProjectsProjectsResponseBranchMatcher = {
    /**
     * The type of matching to perform
     */
    type: GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsType;
    /**
     * The pattern to match against branch names
     */
    pattern: string;
};
export type GetProjectsProjectsBuilds = {
    use: string;
    src?: string | undefined;
    dest?: string | undefined;
};
export declare const GetProjectsProjectsChecksConclusion: {
    readonly Succeeded: "succeeded";
    readonly Failed: "failed";
    readonly Skipped: "skipped";
    readonly Canceled: "canceled";
};
export type GetProjectsProjectsChecksConclusion = ClosedEnum<typeof GetProjectsProjectsChecksConclusion>;
export declare const GetProjectsProjectsChecksState: {
    readonly Registered: "registered";
    readonly Running: "running";
    readonly Completed: "completed";
};
export type GetProjectsProjectsChecksState = ClosedEnum<typeof GetProjectsProjectsChecksState>;
export type GetProjectsProjectsCreator = {
    email: string;
    githubLogin?: string | undefined;
    gitlabLogin?: string | undefined;
    uid: string;
    username: string;
};
export type GetProjectsProjectsOidcTokenClaims = {
    iss: string;
    sub: string;
    scope: string;
    aud: string;
    owner: string;
    ownerId: string;
    project: string;
    projectId: string;
    environment: string;
};
export declare const GetProjectsProjectsPlan: {
    readonly Pro: "pro";
    readonly Enterprise: "enterprise";
    readonly Hobby: "hobby";
};
export type GetProjectsProjectsPlan = ClosedEnum<typeof GetProjectsProjectsPlan>;
export declare const GetProjectsProjectsReadyState: {
    readonly Building: "BUILDING";
    readonly Error: "ERROR";
    readonly Initializing: "INITIALIZING";
    readonly Queued: "QUEUED";
    readonly Ready: "READY";
    readonly Canceled: "CANCELED";
};
export type GetProjectsProjectsReadyState = ClosedEnum<typeof GetProjectsProjectsReadyState>;
export declare const GetProjectsProjectsReadySubstate: {
    readonly Staged: "STAGED";
    readonly Rolling: "ROLLING";
    readonly Promoted: "PROMOTED";
};
export type GetProjectsProjectsReadySubstate = ClosedEnum<typeof GetProjectsProjectsReadySubstate>;
export declare const GetProjectsProjectsResponse200Type: {
    readonly Lambdas: "LAMBDAS";
};
export type GetProjectsProjectsResponse200Type = ClosedEnum<typeof GetProjectsProjectsResponse200Type>;
export type GetProjectsTargets = {
    id: string;
    alias?: Array<string> | undefined;
    aliasAssigned?: number | boolean | null | undefined;
    aliasError?: GetProjectsProjectsAliasError | null | undefined;
    aliasFinal?: string | null | undefined;
    automaticAliases?: Array<string> | undefined;
    branchMatcher?: GetProjectsProjectsResponseBranchMatcher | undefined;
    buildingAt?: number | undefined;
    builds?: Array<GetProjectsProjectsBuilds> | undefined;
    checksConclusion?: GetProjectsProjectsChecksConclusion | undefined;
    checksState?: GetProjectsProjectsChecksState | undefined;
    connectBuildsEnabled?: boolean | undefined;
    connectConfigurationId?: string | undefined;
    createdAt: number;
    createdIn: string;
    creator: GetProjectsProjectsCreator | null;
    deletedAt?: number | undefined;
    deploymentHostname: string;
    forced?: boolean | undefined;
    name: string;
    meta?: {
        [k: string]: string;
    } | undefined;
    monorepoManager?: string | null | undefined;
    oidcTokenClaims?: GetProjectsProjectsOidcTokenClaims | undefined;
    plan: GetProjectsProjectsPlan;
    /**
     * Whether or not preview comments are enabled for the deployment
     */
    previewCommentsEnabled?: boolean | undefined;
    private: boolean;
    readyAt?: number | undefined;
    readyState: GetProjectsProjectsReadyState;
    readySubstate?: GetProjectsProjectsReadySubstate | undefined;
    requestedAt?: number | undefined;
    target?: string | null | undefined;
    teamId?: string | null | undefined;
    type: GetProjectsProjectsResponse200Type;
    url: string;
    userId: string;
    withCache?: boolean | undefined;
};
export type GetProjectsPermissions = {
    aliasProject?: Array<ACLAction> | undefined;
    aliasProtectionBypass?: Array<ACLAction> | undefined;
    buildMachine?: Array<ACLAction> | undefined;
    productionAliasProtectionBypass?: Array<ACLAction> | undefined;
    connectConfigurationLink?: Array<ACLAction> | undefined;
    dataCacheNamespace?: Array<ACLAction> | undefined;
    deployment?: Array<ACLAction> | undefined;
    deploymentBuildLogs?: Array<ACLAction> | undefined;
    deploymentCheck?: Array<ACLAction> | undefined;
    deploymentCheckPreview?: Array<ACLAction> | undefined;
    deploymentCheckReRunFromProductionBranch?: Array<ACLAction> | undefined;
    deploymentProductionGit?: Array<ACLAction> | undefined;
    deploymentV0?: Array<ACLAction> | undefined;
    deploymentPreview?: Array<ACLAction> | undefined;
    deploymentPrivate?: Array<ACLAction> | undefined;
    deploymentPromote?: Array<ACLAction> | undefined;
    deploymentRollback?: Array<ACLAction> | undefined;
    edgeCacheNamespace?: Array<ACLAction> | undefined;
    environments?: Array<ACLAction> | undefined;
    logs?: Array<ACLAction> | undefined;
    logsPreset?: Array<ACLAction> | undefined;
    passwordProtection?: Array<ACLAction> | undefined;
    optionsAllowlist?: Array<ACLAction> | undefined;
    job?: Array<ACLAction> | undefined;
    observabilityData?: Array<ACLAction> | undefined;
    onDemandBuild?: Array<ACLAction> | undefined;
    onDemandConcurrency?: Array<ACLAction> | undefined;
    project?: Array<ACLAction> | undefined;
    projectFromV0?: Array<ACLAction> | undefined;
    projectAccessGroup?: Array<ACLAction> | undefined;
    projectAnalyticsSampling?: Array<ACLAction> | undefined;
    projectCheck?: Array<ACLAction> | undefined;
    projectCheckRun?: Array<ACLAction> | undefined;
    projectDeploymentHook?: Array<ACLAction> | undefined;
    projectDomain?: Array<ACLAction> | undefined;
    projectDomainMove?: Array<ACLAction> | undefined;
    projectDomainCheckConfig?: Array<ACLAction> | undefined;
    projectEnvVars?: Array<ACLAction> | undefined;
    projectEnvVarsProduction?: Array<ACLAction> | undefined;
    projectEnvVarsUnownedByIntegration?: Array<ACLAction> | undefined;
    projectFlags?: Array<ACLAction> | undefined;
    projectId?: Array<ACLAction> | undefined;
    projectIntegrationConfiguration?: Array<ACLAction> | undefined;
    projectLink?: Array<ACLAction> | undefined;
    projectMember?: Array<ACLAction> | undefined;
    projectMonitoring?: Array<ACLAction> | undefined;
    projectPermissions?: Array<ACLAction> | undefined;
    projectProductionBranch?: Array<ACLAction> | undefined;
    projectTransfer?: Array<ACLAction> | undefined;
    projectTransferOut?: Array<ACLAction> | undefined;
    projectProtectionBypass?: Array<ACLAction> | undefined;
    projectUsage?: Array<ACLAction> | undefined;
    projectAnalyticsUsage?: Array<ACLAction> | undefined;
    projectSupportCase?: Array<ACLAction> | undefined;
    projectSupportCaseComment?: Array<ACLAction> | undefined;
    projectDeploymentExpiration?: Array<ACLAction> | undefined;
    projectRollingRelease?: Array<ACLAction> | undefined;
    projectTier?: Array<ACLAction> | undefined;
    projectOIDCToken?: Array<ACLAction> | undefined;
    seawallConfig?: Array<ACLAction> | undefined;
    skewProtection?: Array<ACLAction> | undefined;
    analytics?: Array<ACLAction> | undefined;
    trustedIps?: Array<ACLAction> | undefined;
    v0Chat?: Array<ACLAction> | undefined;
    webAnalytics?: Array<ACLAction> | undefined;
    sharedEnvVarConnection?: Array<ACLAction> | undefined;
    sonar?: Array<ACLAction> | undefined;
    oauth2Connection?: Array<ACLAction> | undefined;
    user?: Array<ACLAction> | undefined;
    userConnection?: Array<ACLAction> | undefined;
    userSudo?: Array<ACLAction> | undefined;
    webAuthn?: Array<ACLAction> | undefined;
    accessGroup?: Array<ACLAction> | undefined;
    aliasGlobal?: Array<ACLAction> | undefined;
    analyticsSampling?: Array<ACLAction> | undefined;
    analyticsUsage?: Array<ACLAction> | undefined;
    auditLog?: Array<ACLAction> | undefined;
    billingAddress?: Array<ACLAction> | undefined;
    billingInformation?: Array<ACLAction> | undefined;
    billingInvoice?: Array<ACLAction> | undefined;
    billingInvoiceEmailRecipient?: Array<ACLAction> | undefined;
    billingInvoiceLanguage?: Array<ACLAction> | undefined;
    billingPlan?: Array<ACLAction> | undefined;
    billingPurchaseOrder?: Array<ACLAction> | undefined;
    billingRefund?: Array<ACLAction> | undefined;
    billingTaxId?: Array<ACLAction> | undefined;
    blob?: Array<ACLAction> | undefined;
    budget?: Array<ACLAction> | undefined;
    cacheArtifact?: Array<ACLAction> | undefined;
    cacheArtifactUsageEvent?: Array<ACLAction> | undefined;
    codeChecks?: Array<ACLAction> | undefined;
    concurrentBuilds?: Array<ACLAction> | undefined;
    connect?: Array<ACLAction> | undefined;
    connectConfiguration?: Array<ACLAction> | undefined;
    defaultDeploymentProtection?: Array<ACLAction> | undefined;
    domain?: Array<ACLAction> | undefined;
    domainAcceptDelegation?: Array<ACLAction> | undefined;
    domainAuthCodes?: Array<ACLAction> | undefined;
    domainCertificate?: Array<ACLAction> | undefined;
    domainCheckConfig?: Array<ACLAction> | undefined;
    domainMove?: Array<ACLAction> | undefined;
    domainPurchase?: Array<ACLAction> | undefined;
    domainRecord?: Array<ACLAction> | undefined;
    domainTransferIn?: Array<ACLAction> | undefined;
    event?: Array<ACLAction> | undefined;
    ownEvent?: Array<ACLAction> | undefined;
    sensitiveEnvironmentVariablePolicy?: Array<ACLAction> | undefined;
    fileUpload?: Array<ACLAction> | undefined;
    flagsExplorerSubscription?: Array<ACLAction> | undefined;
    gitRepository?: Array<ACLAction> | undefined;
    ipBlocking?: Array<ACLAction> | undefined;
    imageOptimizationNewPrice?: Array<ACLAction> | undefined;
    integration?: Array<ACLAction> | undefined;
    integrationAccount?: Array<ACLAction> | undefined;
    integrationConfiguration?: Array<ACLAction> | undefined;
    integrationConfigurationTransfer?: Array<ACLAction> | undefined;
    integrationConfigurationProjects?: Array<ACLAction> | undefined;
    integrationVercelConfigurationOverride?: Array<ACLAction> | undefined;
    integrationConfigurationRole?: Array<ACLAction> | undefined;
    integrationSSOSession?: Array<ACLAction> | undefined;
    integrationResource?: Array<ACLAction> | undefined;
    integrationEvent?: Array<ACLAction> | undefined;
    integrationResourceSecrets?: Array<ACLAction> | undefined;
    integrationDeploymentAction?: Array<ACLAction> | undefined;
    marketplaceInstallationMember?: Array<ACLAction> | undefined;
    marketplaceBillingData?: Array<ACLAction> | undefined;
    marketplaceInvoice?: Array<ACLAction> | undefined;
    marketplaceSettings?: Array<ACLAction> | undefined;
    marketplaceExperimentationItem?: Array<ACLAction> | undefined;
    marketplaceExperimentationEdgeConfigData?: Array<ACLAction> | undefined;
    jobGlobal?: Array<ACLAction> | undefined;
    drain?: Array<ACLAction> | undefined;
    logDrain?: Array<ACLAction> | undefined;
    traceDrain?: Array<ACLAction> | undefined;
    monitoring?: Array<ACLAction> | undefined;
    monitoringSettings?: Array<ACLAction> | undefined;
    monitoringQuery?: Array<ACLAction> | undefined;
    monitoringChart?: Array<ACLAction> | undefined;
    monitoringAlert?: Array<ACLAction> | undefined;
    notificationDeploymentFailed?: Array<ACLAction> | undefined;
    notificationDomainConfiguration?: Array<ACLAction> | undefined;
    notificationDomainExpire?: Array<ACLAction> | undefined;
    notificationDomainMoved?: Array<ACLAction> | undefined;
    notificationDomainPurchase?: Array<ACLAction> | undefined;
    notificationDomainRenewal?: Array<ACLAction> | undefined;
    notificationDomainTransfer?: Array<ACLAction> | undefined;
    notificationDomainUnverified?: Array<ACLAction> | undefined;
    notificationMonitoringAlert?: Array<ACLAction> | undefined;
    notificationPaymentFailed?: Array<ACLAction> | undefined;
    notificationUsageAlert?: Array<ACLAction> | undefined;
    notificationPreferences?: Array<ACLAction> | undefined;
    notificationCustomerBudget?: Array<ACLAction> | undefined;
    notificationStatementOfReasons?: Array<ACLAction> | undefined;
    observabilityConfiguration?: Array<ACLAction> | undefined;
    alerts?: Array<ACLAction> | undefined;
    observabilityNotebook?: Array<ACLAction> | undefined;
    observabilityFunnel?: Array<ACLAction> | undefined;
    openTelemetryEndpoint?: Array<ACLAction> | undefined;
    vercelAppInstallation?: Array<ACLAction> | undefined;
    vercelAppInstallationRequest?: Array<ACLAction> | undefined;
    paymentMethod?: Array<ACLAction> | undefined;
    permissions?: Array<ACLAction> | undefined;
    postgres?: Array<ACLAction> | undefined;
    previewDeploymentSuffix?: Array<ACLAction> | undefined;
    proTrialOnboarding?: Array<ACLAction> | undefined;
    sharedEnvVars?: Array<ACLAction> | undefined;
    sharedEnvVarsProduction?: Array<ACLAction> | undefined;
    space?: Array<ACLAction> | undefined;
    spaceRun?: Array<ACLAction> | undefined;
    passwordProtectionInvoiceItem?: Array<ACLAction> | undefined;
    rateLimit?: Array<ACLAction> | undefined;
    redis?: Array<ACLAction> | undefined;
    repository?: Array<ACLAction> | undefined;
    remoteCaching?: Array<ACLAction> | undefined;
    samlConfig?: Array<ACLAction> | undefined;
    secret?: Array<ACLAction> | undefined;
    redisStoreTokenSet?: Array<ACLAction> | undefined;
    blobStoreTokenSet?: Array<ACLAction> | undefined;
    postgresStoreTokenSet?: Array<ACLAction> | undefined;
    integrationStoreTokenSet?: Array<ACLAction> | undefined;
    integrationResourceReplCommand?: Array<ACLAction> | undefined;
    storeTransfer?: Array<ACLAction> | undefined;
    supportCase?: Array<ACLAction> | undefined;
    supportCaseComment?: Array<ACLAction> | undefined;
    dataCacheBillingSettings?: Array<ACLAction> | undefined;
    team?: Array<ACLAction> | undefined;
    teamAccessRequest?: Array<ACLAction> | undefined;
    teamFellowMembership?: Array<ACLAction> | undefined;
    teamGitExclusivity?: Array<ACLAction> | undefined;
    teamInvite?: Array<ACLAction> | undefined;
    teamInviteCode?: Array<ACLAction> | undefined;
    teamJoin?: Array<ACLAction> | undefined;
    teamMemberMfaStatus?: Array<ACLAction> | undefined;
    teamMicrofrontends?: Array<ACLAction> | undefined;
    teamOwnMembership?: Array<ACLAction> | undefined;
    teamOwnMembershipDisconnectSAML?: Array<ACLAction> | undefined;
    token?: Array<ACLAction> | undefined;
    usage?: Array<ACLAction> | undefined;
    usageCycle?: Array<ACLAction> | undefined;
    vpcPeeringConnection?: Array<ACLAction> | undefined;
    webAnalyticsPlan?: Array<ACLAction> | undefined;
    edgeConfig?: Array<ACLAction> | undefined;
    edgeConfigItem?: Array<ACLAction> | undefined;
    edgeConfigSchema?: Array<ACLAction> | undefined;
    edgeConfigToken?: Array<ACLAction> | undefined;
    webhook?: Array<ACLAction> | undefined;
    webhookEvent?: Array<ACLAction> | undefined;
    endpointVerification?: Array<ACLAction> | undefined;
    projectTransferIn?: Array<ACLAction> | undefined;
    oauth2Application?: Array<ACLAction> | undefined;
    vercelRun?: Array<ACLAction> | undefined;
    vercelRunExec?: Array<ACLAction> | undefined;
    apiKey?: Array<ACLAction> | undefined;
    apiKeyOwnedBySelf?: Array<ACLAction> | undefined;
};
export type GetProjectsLastRollbackTarget = {};
export declare const GetProjectsJobStatus: {
    readonly Succeeded: "succeeded";
    readonly Failed: "failed";
    readonly Skipped: "skipped";
    readonly Pending: "pending";
    readonly InProgress: "in-progress";
};
export type GetProjectsJobStatus = ClosedEnum<typeof GetProjectsJobStatus>;
export declare const GetProjectsProjectsResponse200ApplicationJSONType: {
    readonly Promote: "promote";
    readonly Rollback: "rollback";
};
export type GetProjectsProjectsResponse200ApplicationJSONType = ClosedEnum<typeof GetProjectsProjectsResponse200ApplicationJSONType>;
export type GetProjectsLastAliasRequest = {
    fromDeploymentId: string;
    toDeploymentId: string;
    /**
     * If rolling back from a rolling release, fromDeploymentId captures the "base" of that rolling release, and fromRollingReleaseId captures the "target" of that rolling release.
     */
    fromRollingReleaseId?: string | undefined;
    jobStatus: GetProjectsJobStatus;
    requestedAt: number;
    type: GetProjectsProjectsResponse200ApplicationJSONType;
};
export declare const GetProjectsProtectionBypassProjectsScope: {
    readonly AutomationBypass: "automation-bypass";
};
export type GetProjectsProtectionBypassProjectsScope = ClosedEnum<typeof GetProjectsProtectionBypassProjectsScope>;
export type GetProjectsProtectionBypass2 = {
    createdAt: number;
    createdBy: string;
    scope: GetProjectsProtectionBypassProjectsScope;
};
export declare const GetProjectsProtectionBypassScope: {
    readonly IntegrationAutomationBypass: "integration-automation-bypass";
};
export type GetProjectsProtectionBypassScope = ClosedEnum<typeof GetProjectsProtectionBypassScope>;
export type GetProjectsProtectionBypass1 = {
    createdAt: number;
    createdBy: string;
    scope: GetProjectsProtectionBypassScope;
    integrationId: string;
    configurationId: string;
};
export type GetProjectsProtectionBypass = GetProjectsProtectionBypass1 | GetProjectsProtectionBypass2;
export declare const GetProjectsTrustedIpsProjectsDeploymentType: {
    readonly Preview: "preview";
    readonly Production: "production";
    readonly All: "all";
    readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
    readonly AllExceptCustomDomains: "all_except_custom_domains";
};
export type GetProjectsTrustedIpsProjectsDeploymentType = ClosedEnum<typeof GetProjectsTrustedIpsProjectsDeploymentType>;
export type GetProjectsTrustedIps2 = {
    deploymentType: GetProjectsTrustedIpsProjectsDeploymentType;
};
export declare const GetProjectsTrustedIpsDeploymentType: {
    readonly Preview: "preview";
    readonly Production: "production";
    readonly All: "all";
    readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
    readonly AllExceptCustomDomains: "all_except_custom_domains";
};
export type GetProjectsTrustedIpsDeploymentType = ClosedEnum<typeof GetProjectsTrustedIpsDeploymentType>;
export type GetProjectsTrustedIpsAddresses = {
    value: string;
    note?: string | undefined;
};
export declare const GetProjectsTrustedIpsProtectionMode: {
    readonly Additional: "additional";
    readonly Exclusive: "exclusive";
};
export type GetProjectsTrustedIpsProtectionMode = ClosedEnum<typeof GetProjectsTrustedIpsProtectionMode>;
export type GetProjectsTrustedIps1 = {
    deploymentType: GetProjectsTrustedIpsDeploymentType;
    addresses: Array<GetProjectsTrustedIpsAddresses>;
    protectionMode: GetProjectsTrustedIpsProtectionMode;
};
export type GetProjectsTrustedIps = GetProjectsTrustedIps1 | GetProjectsTrustedIps2;
export type GetProjectsGitComments = {
    /**
     * Whether the Vercel bot should comment on PRs
     */
    onPullRequest: boolean;
    /**
     * Whether the Vercel bot should comment on commits
     */
    onCommit: boolean;
};
/**
 * Whether the Vercel bot should automatically create GitHub deployments https://docs.github.com/en/rest/deployments/deployments#about-deployments NOTE: repository-dispatch events should be used instead
 */
export declare const GetProjectsCreateDeployments: {
    readonly Enabled: "enabled";
    readonly Disabled: "disabled";
};
/**
 * Whether the Vercel bot should automatically create GitHub deployments https://docs.github.com/en/rest/deployments/deployments#about-deployments NOTE: repository-dispatch events should be used instead
 */
export type GetProjectsCreateDeployments = ClosedEnum<typeof GetProjectsCreateDeployments>;
export type GetProjectsGitProviderOptions = {
    /**
     * Whether the Vercel bot should automatically create GitHub deployments https://docs.github.com/en/rest/deployments/deployments#about-deployments NOTE: repository-dispatch events should be used instead
     */
    createDeployments: GetProjectsCreateDeployments;
    /**
     * Whether the Vercel bot should not automatically create GitHub repository-dispatch events on deployment events. https://vercel.com/docs/git/vercel-for-github#repository-dispatch-events
     */
    disableRepositoryDispatchEvents?: boolean | undefined;
};
export type GetProjectsWebAnalytics = {
    id: string;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    enabledAt?: number | undefined;
    hasData?: boolean | undefined;
};
export declare const GetProjectsProjectsResponse200Action: {
    readonly Log: "log";
    readonly Challenge: "challenge";
    readonly Deny: "deny";
};
export type GetProjectsProjectsResponse200Action = ClosedEnum<typeof GetProjectsProjectsResponse200Action>;
export type GetProjectsBotFilter = {
    active: boolean;
    action?: GetProjectsProjectsResponse200Action | undefined;
};
export declare const GetProjectsProjectsAction: {
    readonly Log: "log";
    readonly Challenge: "challenge";
    readonly Deny: "deny";
};
export type GetProjectsProjectsAction = ClosedEnum<typeof GetProjectsProjectsAction>;
export type GetProjectsAiBots = {
    active: boolean;
    action?: GetProjectsProjectsAction | undefined;
};
export declare const GetProjectsProjectsResponseAction: {
    readonly Log: "log";
    readonly Challenge: "challenge";
    readonly Deny: "deny";
};
export type GetProjectsProjectsResponseAction = ClosedEnum<typeof GetProjectsProjectsResponseAction>;
export type GetProjectsOwasp = {
    active: boolean;
    action?: GetProjectsProjectsResponseAction | undefined;
};
export type GetProjectsManagedRules = {
    botFilter: GetProjectsBotFilter;
    aiBots: GetProjectsAiBots;
    owasp: GetProjectsOwasp;
};
export type GetProjectsSecurity = {
    attackModeEnabled?: boolean | undefined;
    attackModeUpdatedAt?: number | undefined;
    firewallEnabled?: boolean | undefined;
    firewallUpdatedAt?: number | undefined;
    attackModeActiveUntil?: number | null | undefined;
    firewallConfigVersion?: number | undefined;
    firewallSeawallEnabled?: boolean | undefined;
    ja3Enabled?: boolean | undefined;
    ja4Enabled?: boolean | undefined;
    firewallBypassIps?: Array<string> | undefined;
    managedRules?: GetProjectsManagedRules | null | undefined;
    botIdEnabled?: boolean | undefined;
};
/**
 * - team: `https://oidc.vercel.com/[team_slug]` - global: `https://oidc.vercel.com`
 */
export declare const GetProjectsIssuerMode: {
    readonly Team: "team";
    readonly Global: "global";
};
/**
 * - team: `https://oidc.vercel.com/[team_slug]` - global: `https://oidc.vercel.com`
 */
export type GetProjectsIssuerMode = ClosedEnum<typeof GetProjectsIssuerMode>;
export type GetProjectsOidcTokenConfig = {
    /**
     * Whether or not to generate OpenID Connect JSON Web Tokens.
     */
    enabled?: boolean | undefined;
    /**
     * - team: `https://oidc.vercel.com/[team_slug]` - global: `https://oidc.vercel.com`
     */
    issuerMode?: GetProjectsIssuerMode | undefined;
};
export declare const GetProjectsTier: {
    readonly Standard: "standard";
    readonly Advanced: "advanced";
    readonly Critical: "critical";
};
export type GetProjectsTier = ClosedEnum<typeof GetProjectsTier>;
export type GetProjectsFeatures = {
    webAnalytics?: boolean | undefined;
};
export type GetProjectsHistory = {
    scanner: string;
    reason: string;
    by: string;
    byId: string;
    at: number;
};
export declare const GetProjectsAction: {
    readonly Blocked: "blocked";
};
export type GetProjectsAction = ClosedEnum<typeof GetProjectsAction>;
export type GetProjectsBlock = {
    action: GetProjectsAction;
    reason: string;
    statusCode: number;
    createdAt: number;
    caseId?: string | undefined;
    actor?: string | undefined;
    comment?: string | undefined;
    isCascading?: boolean | undefined;
};
export declare const GetProjectsBlockHistoryProjectsResponse200Action: {
    readonly RouteUnblocked: "route-unblocked";
};
export type GetProjectsBlockHistoryProjectsResponse200Action = ClosedEnum<typeof GetProjectsBlockHistoryProjectsResponse200Action>;
export declare const GetProjectsHasProjectsResponse200Type: {
    readonly Host: "host";
};
export type GetProjectsHasProjectsResponse200Type = ClosedEnum<typeof GetProjectsHasProjectsResponse200Type>;
export type GetProjectsHasProjectsResponse200Value = {
    eq: string;
};
export type GetProjectsHasProjects2 = {
    type: GetProjectsHasProjectsResponse200Type;
    value: GetProjectsHasProjectsResponse200Value;
};
export declare const GetProjectsHasProjectsResponseType: {
    readonly Header: "header";
};
export type GetProjectsHasProjectsResponseType = ClosedEnum<typeof GetProjectsHasProjectsResponseType>;
export declare const GetProjectsHasProjectsKey: {
    readonly XVercelIpCountry: "x-vercel-ip-country";
};
export type GetProjectsHasProjectsKey = ClosedEnum<typeof GetProjectsHasProjectsKey>;
export type GetProjectsHasProjectsResponseValue = {
    eq: string;
};
export type GetProjectsHasProjects1 = {
    type: GetProjectsHasProjectsResponseType;
    key: GetProjectsHasProjectsKey;
    value: GetProjectsHasProjectsResponseValue;
};
export type GetProjectsRouteProjectsHas = GetProjectsHasProjects1 | GetProjectsHasProjects2;
export declare const GetProjectsRouteProjectsAction: {
    readonly BlockLegalCwc: "block_legal_cwc";
};
export type GetProjectsRouteProjectsAction = ClosedEnum<typeof GetProjectsRouteProjectsAction>;
export type GetProjectsRouteProjectsMitigate = {
    action: GetProjectsRouteProjectsAction;
};
export type GetProjectsRouteProjects2 = {
    has: Array<GetProjectsHasProjects1 | GetProjectsHasProjects2>;
    mitigate: GetProjectsRouteProjectsMitigate;
    src?: string | undefined;
};
export type GetProjectsRouteProjects1 = {
    src: string;
    status: number;
};
export type GetProjectsBlockHistoryProjectsRoute = GetProjectsRouteProjects1 | GetProjectsRouteProjects2;
export type GetProjectsBlockHistory4 = {
    action: GetProjectsBlockHistoryProjectsResponse200Action;
    route: GetProjectsRouteProjects1 | GetProjectsRouteProjects2;
    statusCode?: number | undefined;
    createdAt: number;
    caseId?: string | undefined;
    actor?: string | undefined;
    comment?: string | undefined;
    isCascading?: boolean | undefined;
};
export declare const GetProjectsBlockHistoryProjectsResponseAction: {
    readonly RouteBlocked: "route-blocked";
};
export type GetProjectsBlockHistoryProjectsResponseAction = ClosedEnum<typeof GetProjectsBlockHistoryProjectsResponseAction>;
export declare const GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyType: {
    readonly Host: "host";
};
export type GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyType = ClosedEnum<typeof GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyType>;
export type GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue = {
    eq: string;
};
export type GetProjectsHasProjectsResponse2 = {
    type: GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyType;
    value: GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue;
};
export declare const GetProjectsHasProjectsResponse200ApplicationJSONType: {
    readonly Header: "header";
};
export type GetProjectsHasProjectsResponse200ApplicationJSONType = ClosedEnum<typeof GetProjectsHasProjectsResponse200ApplicationJSONType>;
export declare const GetProjectsHasProjectsResponseKey: {
    readonly XVercelIpCountry: "x-vercel-ip-country";
};
export type GetProjectsHasProjectsResponseKey = ClosedEnum<typeof GetProjectsHasProjectsResponseKey>;
export type GetProjectsHasProjectsResponse200ApplicationJSONValue = {
    eq: string;
};
export type GetProjectsHasProjectsResponse1 = {
    type: GetProjectsHasProjectsResponse200ApplicationJSONType;
    key: GetProjectsHasProjectsResponseKey;
    value: GetProjectsHasProjectsResponse200ApplicationJSONValue;
};
export type GetProjectsRouteHas = GetProjectsHasProjectsResponse1 | GetProjectsHasProjectsResponse2;
export declare const GetProjectsRouteAction: {
    readonly BlockLegalCwc: "block_legal_cwc";
};
export type GetProjectsRouteAction = ClosedEnum<typeof GetProjectsRouteAction>;
export type GetProjectsRouteMitigate = {
    action: GetProjectsRouteAction;
};
export type GetProjectsRoute2 = {
    has: Array<GetProjectsHasProjectsResponse1 | GetProjectsHasProjectsResponse2>;
    mitigate: GetProjectsRouteMitigate;
    src?: string | undefined;
};
export type GetProjectsRoute1 = {
    src: string;
    status: number;
};
export type GetProjectsBlockHistoryRoute = GetProjectsRoute1 | GetProjectsRoute2;
export type GetProjectsBlockHistory3 = {
    action: GetProjectsBlockHistoryProjectsResponseAction;
    route: GetProjectsRoute1 | GetProjectsRoute2;
    reason: string;
    createdAt: number;
    caseId?: string | undefined;
    actor?: string | undefined;
    comment?: string | undefined;
    isCascading?: boolean | undefined;
};
export declare const GetProjectsBlockHistoryProjectsAction: {
    readonly Unblocked: "unblocked";
};
export type GetProjectsBlockHistoryProjectsAction = ClosedEnum<typeof GetProjectsBlockHistoryProjectsAction>;
export type GetProjectsBlockHistory2 = {
    action: GetProjectsBlockHistoryProjectsAction;
    createdAt: number;
    caseId?: string | undefined;
    actor?: string | undefined;
    comment?: string | undefined;
    isCascading?: boolean | undefined;
};
export declare const GetProjectsBlockHistoryAction: {
    readonly Blocked: "blocked";
};
export type GetProjectsBlockHistoryAction = ClosedEnum<typeof GetProjectsBlockHistoryAction>;
export type GetProjectsBlockHistory1 = {
    action: GetProjectsBlockHistoryAction;
    reason: string;
    statusCode: number;
    createdAt: number;
    caseId?: string | undefined;
    actor?: string | undefined;
    comment?: string | undefined;
    isCascading?: boolean | undefined;
};
export type GetProjectsBlockHistory = GetProjectsBlockHistory1 | GetProjectsBlockHistory3 | GetProjectsBlockHistory4 | GetProjectsBlockHistory2;
export type GetProjectsAbuse = {
    scanner?: string | undefined;
    history: Array<GetProjectsHistory>;
    updatedAt: number;
    block?: GetProjectsBlock | undefined;
    blockHistory?: Array<GetProjectsBlockHistory1 | GetProjectsBlockHistory3 | GetProjectsBlockHistory4 | GetProjectsBlockHistory2> | undefined;
};
export declare const GetProjectsHasProjectsType: {
    readonly Host: "host";
};
export type GetProjectsHasProjectsType = ClosedEnum<typeof GetProjectsHasProjectsType>;
export type GetProjectsHasProjectsValue = {
    eq: string;
};
export type GetProjectsHas2 = {
    type: GetProjectsHasProjectsType;
    value: GetProjectsHasProjectsValue;
};
export declare const GetProjectsHasType: {
    readonly Header: "header";
};
export type GetProjectsHasType = ClosedEnum<typeof GetProjectsHasType>;
export declare const GetProjectsHasKey: {
    readonly XVercelIpCountry: "x-vercel-ip-country";
};
export type GetProjectsHasKey = ClosedEnum<typeof GetProjectsHasKey>;
export type GetProjectsHasValue = {
    eq: string;
};
export type GetProjectsHas1 = {
    type: GetProjectsHasType;
    key: GetProjectsHasKey;
    value: GetProjectsHasValue;
};
export type GetProjectsInternalRoutesHas = GetProjectsHas1 | GetProjectsHas2;
export declare const GetProjectsInternalRoutesAction: {
    readonly BlockLegalCwc: "block_legal_cwc";
};
export type GetProjectsInternalRoutesAction = ClosedEnum<typeof GetProjectsInternalRoutesAction>;
export type GetProjectsInternalRoutesMitigate = {
    action: GetProjectsInternalRoutesAction;
};
export type GetProjectsInternalRoutes2 = {
    has: Array<GetProjectsHas1 | GetProjectsHas2>;
    mitigate: GetProjectsInternalRoutesMitigate;
    src?: string | undefined;
};
export type GetProjectsInternalRoutes1 = {
    src: string;
    status: number;
};
export type GetProjectsInternalRoutes = GetProjectsInternalRoutes1 | GetProjectsInternalRoutes2;
export type GetProjectsProjects = {
    accountId: string;
    analytics?: GetProjectsAnalytics | undefined;
    speedInsights?: GetProjectsSpeedInsights | undefined;
    autoExposeSystemEnvs?: boolean | undefined;
    autoAssignCustomDomains?: boolean | undefined;
    autoAssignCustomDomainsUpdatedBy?: string | undefined;
    buildCommand?: string | null | undefined;
    commandForIgnoringBuildStep?: string | null | undefined;
    connectConfigurations?: Array<GetProjectsConnectConfigurations> | null | undefined;
    connectConfigurationId?: string | null | undefined;
    connectBuildsEnabled?: boolean | undefined;
    passiveConnectConfigurationId?: string | null | undefined;
    createdAt?: number | undefined;
    customerSupportCodeVisibility?: boolean | undefined;
    crons?: GetProjectsCrons | undefined;
    dataCache?: GetProjectsDataCache | undefined;
    /**
     * Retention policies for deployments. These are enforced at the project level, but we also maintain an instance of this at the team level as a default policy that gets applied to new projects.
     */
    deploymentExpiration?: GetProjectsDeploymentExpiration | null | undefined;
    devCommand?: string | null | undefined;
    directoryListing: boolean;
    installCommand?: string | null | undefined;
    env?: Array<GetProjectsEnv> | undefined;
    customEnvironments?: Array<GetProjectsCustomEnvironments> | undefined;
    framework?: GetProjectsFramework | null | undefined;
    gitForkProtection?: boolean | undefined;
    gitLFS?: boolean | undefined;
    id: string;
    ipBuckets?: Array<GetProjectsIpBuckets> | undefined;
    latestDeployments?: Array<GetProjectsLatestDeployments> | undefined;
    link?: GetProjectsLink4 | GetProjectsLink5 | GetProjectsLink3 | GetProjectsLink1 | GetProjectsLink2 | undefined;
    microfrontends?: GetProjectsMicrofrontends1 | GetProjectsMicrofrontends2 | undefined;
    name: string;
    nodeVersion: GetProjectsNodeVersion;
    optionsAllowlist?: GetProjectsOptionsAllowlist | null | undefined;
    outputDirectory?: string | null | undefined;
    passwordProtection?: GetProjectsPasswordProtection | null | undefined;
    productionDeploymentsFastLane?: boolean | undefined;
    publicSource?: boolean | null | undefined;
    resourceConfig: GetProjectsResourceConfig;
    /**
     * Description of why a project was rolled back, and by whom. Note that lastAliasRequest contains the from/to details of the rollback.
     */
    rollbackDescription?: GetProjectsRollbackDescription | undefined;
    /**
     * Project-level rolling release configuration that defines how deployments should be gradually rolled out
     */
    rollingRelease?: GetProjectsRollingRelease | null | undefined;
    defaultResourceConfig: GetProjectsDefaultResourceConfig;
    rootDirectory?: string | null | undefined;
    serverlessFunctionZeroConfigFailover?: boolean | undefined;
    skewProtectionBoundaryAt?: number | undefined;
    skewProtectionMaxAge?: number | undefined;
    skipGitConnectDuringLink?: boolean | undefined;
    sourceFilesOutsideRootDirectory?: boolean | undefined;
    enableAffectedProjectsDeployments?: boolean | undefined;
    ssoProtection?: GetProjectsSsoProtection | null | undefined;
    targets?: {
        [k: string]: GetProjectsTargets | null;
    } | undefined;
    transferCompletedAt?: number | undefined;
    transferStartedAt?: number | undefined;
    transferToAccountId?: string | undefined;
    transferredFromAccountId?: string | undefined;
    updatedAt?: number | undefined;
    live?: boolean | undefined;
    enablePreviewFeedback?: boolean | null | undefined;
    enableProductionFeedback?: boolean | null | undefined;
    permissions?: GetProjectsPermissions | undefined;
    lastRollbackTarget?: GetProjectsLastRollbackTarget | null | undefined;
    lastAliasRequest?: GetProjectsLastAliasRequest | null | undefined;
    protectionBypass?: {
        [k: string]: GetProjectsProtectionBypass1 | GetProjectsProtectionBypass2;
    } | undefined;
    hasActiveBranches?: boolean | undefined;
    trustedIps?: GetProjectsTrustedIps1 | GetProjectsTrustedIps2 | null | undefined;
    gitComments?: GetProjectsGitComments | undefined;
    gitProviderOptions?: GetProjectsGitProviderOptions | undefined;
    paused?: boolean | undefined;
    concurrencyBucketName?: string | undefined;
    webAnalytics?: GetProjectsWebAnalytics | undefined;
    security?: GetProjectsSecurity | undefined;
    oidcTokenConfig?: GetProjectsOidcTokenConfig | undefined;
    tier?: GetProjectsTier | undefined;
    features?: GetProjectsFeatures | undefined;
    v0?: boolean | undefined;
    abuse?: GetProjectsAbuse | undefined;
    internalRoutes?: Array<GetProjectsInternalRoutes1 | GetProjectsInternalRoutes2> | undefined;
};
/**
 * The paginated list of projects
 */
export type GetProjectsResponseBody = {
    projects: Array<GetProjectsProjects>;
    /**
     * This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.
     */
    pagination: Pagination;
};
/** @internal */
export declare const GitForkProtection$inboundSchema: z.ZodNativeEnum<typeof GitForkProtection>;
/** @internal */
export declare const GitForkProtection$outboundSchema: z.ZodNativeEnum<typeof GitForkProtection>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GitForkProtection$ {
    /** @deprecated use `GitForkProtection$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly One: "1";
        readonly Zero: "0";
    }>;
    /** @deprecated use `GitForkProtection$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly One: "1";
        readonly Zero: "0";
    }>;
}
/** @internal */
export declare const ElasticConcurrencyEnabled$inboundSchema: z.ZodNativeEnum<typeof ElasticConcurrencyEnabled>;
/** @internal */
export declare const ElasticConcurrencyEnabled$outboundSchema: z.ZodNativeEnum<typeof ElasticConcurrencyEnabled>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ElasticConcurrencyEnabled$ {
    /** @deprecated use `ElasticConcurrencyEnabled$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly One: "1";
        readonly Zero: "0";
    }>;
    /** @deprecated use `ElasticConcurrencyEnabled$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly One: "1";
        readonly Zero: "0";
    }>;
}
/** @internal */
export declare const SortByElasticConcurrency$inboundSchema: z.ZodNativeEnum<typeof SortByElasticConcurrency>;
/** @internal */
export declare const SortByElasticConcurrency$outboundSchema: z.ZodNativeEnum<typeof SortByElasticConcurrency>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SortByElasticConcurrency$ {
    /** @deprecated use `SortByElasticConcurrency$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Desc: "desc";
        readonly Asc: "asc";
    }>;
    /** @deprecated use `SortByElasticConcurrency$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Desc: "desc";
        readonly Asc: "asc";
    }>;
}
/** @internal */
export declare const GetProjectsRequest$inboundSchema: z.ZodType<GetProjectsRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsRequest$Outbound = {
    from?: string | undefined;
    gitForkProtection?: string | undefined;
    limit?: string | undefined;
    search?: string | undefined;
    repo?: string | undefined;
    repoId?: string | undefined;
    repoUrl?: string | undefined;
    excludeRepos?: string | undefined;
    edgeConfigId?: string | undefined;
    edgeConfigTokenId?: string | undefined;
    deprecated?: boolean | undefined;
    elasticConcurrencyEnabled?: string | undefined;
    sortByElasticConcurrency?: string | undefined;
    teamId?: string | undefined;
    slug?: string | undefined;
};
/** @internal */
export declare const GetProjectsRequest$outboundSchema: z.ZodType<GetProjectsRequest$Outbound, z.ZodTypeDef, GetProjectsRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsRequest$ {
    /** @deprecated use `GetProjectsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsRequest$Outbound, z.ZodTypeDef, GetProjectsRequest>;
    /** @deprecated use `GetProjectsRequest$Outbound` instead. */
    type Outbound = GetProjectsRequest$Outbound;
}
export declare function getProjectsRequestToJSON(getProjectsRequest: GetProjectsRequest): string;
export declare function getProjectsRequestFromJSON(jsonString: string): SafeParseResult<GetProjectsRequest, SDKValidationError>;
/** @internal */
export declare const GetProjectsAnalytics$inboundSchema: z.ZodType<GetProjectsAnalytics, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsAnalytics$Outbound = {
    id: string;
    canceledAt?: number | null | undefined;
    disabledAt: number;
    enabledAt: number;
    paidAt?: number | undefined;
    sampleRatePercent?: number | null | undefined;
    spendLimitInDollars?: number | null | undefined;
};
/** @internal */
export declare const GetProjectsAnalytics$outboundSchema: z.ZodType<GetProjectsAnalytics$Outbound, z.ZodTypeDef, GetProjectsAnalytics>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsAnalytics$ {
    /** @deprecated use `GetProjectsAnalytics$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsAnalytics, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsAnalytics$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsAnalytics$Outbound, z.ZodTypeDef, GetProjectsAnalytics>;
    /** @deprecated use `GetProjectsAnalytics$Outbound` instead. */
    type Outbound = GetProjectsAnalytics$Outbound;
}
export declare function getProjectsAnalyticsToJSON(getProjectsAnalytics: GetProjectsAnalytics): string;
export declare function getProjectsAnalyticsFromJSON(jsonString: string): SafeParseResult<GetProjectsAnalytics, SDKValidationError>;
/** @internal */
export declare const GetProjectsSpeedInsights$inboundSchema: z.ZodType<GetProjectsSpeedInsights, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsSpeedInsights$Outbound = {
    id: string;
    enabledAt?: number | undefined;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    hasData?: boolean | undefined;
    paidAt?: number | undefined;
};
/** @internal */
export declare const GetProjectsSpeedInsights$outboundSchema: z.ZodType<GetProjectsSpeedInsights$Outbound, z.ZodTypeDef, GetProjectsSpeedInsights>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsSpeedInsights$ {
    /** @deprecated use `GetProjectsSpeedInsights$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsSpeedInsights, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsSpeedInsights$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsSpeedInsights$Outbound, z.ZodTypeDef, GetProjectsSpeedInsights>;
    /** @deprecated use `GetProjectsSpeedInsights$Outbound` instead. */
    type Outbound = GetProjectsSpeedInsights$Outbound;
}
export declare function getProjectsSpeedInsightsToJSON(getProjectsSpeedInsights: GetProjectsSpeedInsights): string;
export declare function getProjectsSpeedInsightsFromJSON(jsonString: string): SafeParseResult<GetProjectsSpeedInsights, SDKValidationError>;
/** @internal */
export declare const GetProjectsEnvId2$inboundSchema: z.ZodNativeEnum<typeof GetProjectsEnvId2>;
/** @internal */
export declare const GetProjectsEnvId2$outboundSchema: z.ZodNativeEnum<typeof GetProjectsEnvId2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsEnvId2$ {
    /** @deprecated use `GetProjectsEnvId2$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Preview: "preview";
        readonly Production: "production";
    }>;
    /** @deprecated use `GetProjectsEnvId2$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Preview: "preview";
        readonly Production: "production";
    }>;
}
/** @internal */
export declare const GetProjectsEnvId$inboundSchema: z.ZodType<GetProjectsEnvId, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsEnvId$Outbound = string | string;
/** @internal */
export declare const GetProjectsEnvId$outboundSchema: z.ZodType<GetProjectsEnvId$Outbound, z.ZodTypeDef, GetProjectsEnvId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsEnvId$ {
    /** @deprecated use `GetProjectsEnvId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<string, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsEnvId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<string, z.ZodTypeDef, string>;
    /** @deprecated use `GetProjectsEnvId$Outbound` instead. */
    type Outbound = GetProjectsEnvId$Outbound;
}
export declare function getProjectsEnvIdToJSON(getProjectsEnvId: GetProjectsEnvId): string;
export declare function getProjectsEnvIdFromJSON(jsonString: string): SafeParseResult<GetProjectsEnvId, SDKValidationError>;
/** @internal */
export declare const GetProjectsAws$inboundSchema: z.ZodType<GetProjectsAws, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsAws$Outbound = {
    subnetIds: Array<string>;
    securityGroupId: string;
};
/** @internal */
export declare const GetProjectsAws$outboundSchema: z.ZodType<GetProjectsAws$Outbound, z.ZodTypeDef, GetProjectsAws>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsAws$ {
    /** @deprecated use `GetProjectsAws$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsAws, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsAws$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsAws$Outbound, z.ZodTypeDef, GetProjectsAws>;
    /** @deprecated use `GetProjectsAws$Outbound` instead. */
    type Outbound = GetProjectsAws$Outbound;
}
export declare function getProjectsAwsToJSON(getProjectsAws: GetProjectsAws): string;
export declare function getProjectsAwsFromJSON(jsonString: string): SafeParseResult<GetProjectsAws, SDKValidationError>;
/** @internal */
export declare const GetProjectsConnectConfigurations$inboundSchema: z.ZodType<GetProjectsConnectConfigurations, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsConnectConfigurations$Outbound = {
    envId: string | string;
    connectConfigurationId: string;
    dc?: string | undefined;
    passive: boolean;
    buildsEnabled: boolean;
    aws?: GetProjectsAws$Outbound | undefined;
    createdAt: number;
    updatedAt: number;
};
/** @internal */
export declare const GetProjectsConnectConfigurations$outboundSchema: z.ZodType<GetProjectsConnectConfigurations$Outbound, z.ZodTypeDef, GetProjectsConnectConfigurations>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsConnectConfigurations$ {
    /** @deprecated use `GetProjectsConnectConfigurations$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsConnectConfigurations, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsConnectConfigurations$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsConnectConfigurations$Outbound, z.ZodTypeDef, GetProjectsConnectConfigurations>;
    /** @deprecated use `GetProjectsConnectConfigurations$Outbound` instead. */
    type Outbound = GetProjectsConnectConfigurations$Outbound;
}
export declare function getProjectsConnectConfigurationsToJSON(getProjectsConnectConfigurations: GetProjectsConnectConfigurations): string;
export declare function getProjectsConnectConfigurationsFromJSON(jsonString: string): SafeParseResult<GetProjectsConnectConfigurations, SDKValidationError>;
/** @internal */
export declare const GetProjectsDefinitions$inboundSchema: z.ZodType<GetProjectsDefinitions, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsDefinitions$Outbound = {
    host: string;
    path: string;
    schedule: string;
};
/** @internal */
export declare const GetProjectsDefinitions$outboundSchema: z.ZodType<GetProjectsDefinitions$Outbound, z.ZodTypeDef, GetProjectsDefinitions>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsDefinitions$ {
    /** @deprecated use `GetProjectsDefinitions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsDefinitions, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsDefinitions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsDefinitions$Outbound, z.ZodTypeDef, GetProjectsDefinitions>;
    /** @deprecated use `GetProjectsDefinitions$Outbound` instead. */
    type Outbound = GetProjectsDefinitions$Outbound;
}
export declare function getProjectsDefinitionsToJSON(getProjectsDefinitions: GetProjectsDefinitions): string;
export declare function getProjectsDefinitionsFromJSON(jsonString: string): SafeParseResult<GetProjectsDefinitions, SDKValidationError>;
/** @internal */
export declare const GetProjectsCrons$inboundSchema: z.ZodType<GetProjectsCrons, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsCrons$Outbound = {
    enabledAt: number;
    disabledAt: number | null;
    updatedAt: number;
    deploymentId: string | null;
    definitions: Array<GetProjectsDefinitions$Outbound>;
};
/** @internal */
export declare const GetProjectsCrons$outboundSchema: z.ZodType<GetProjectsCrons$Outbound, z.ZodTypeDef, GetProjectsCrons>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsCrons$ {
    /** @deprecated use `GetProjectsCrons$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsCrons, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsCrons$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsCrons$Outbound, z.ZodTypeDef, GetProjectsCrons>;
    /** @deprecated use `GetProjectsCrons$Outbound` instead. */
    type Outbound = GetProjectsCrons$Outbound;
}
export declare function getProjectsCronsToJSON(getProjectsCrons: GetProjectsCrons): string;
export declare function getProjectsCronsFromJSON(jsonString: string): SafeParseResult<GetProjectsCrons, SDKValidationError>;
/** @internal */
export declare const GetProjectsDataCache$inboundSchema: z.ZodType<GetProjectsDataCache, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsDataCache$Outbound = {
    userDisabled: boolean;
    storageSizeBytes?: number | null | undefined;
    unlimited?: boolean | undefined;
};
/** @internal */
export declare const GetProjectsDataCache$outboundSchema: z.ZodType<GetProjectsDataCache$Outbound, z.ZodTypeDef, GetProjectsDataCache>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsDataCache$ {
    /** @deprecated use `GetProjectsDataCache$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsDataCache, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsDataCache$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsDataCache$Outbound, z.ZodTypeDef, GetProjectsDataCache>;
    /** @deprecated use `GetProjectsDataCache$Outbound` instead. */
    type Outbound = GetProjectsDataCache$Outbound;
}
export declare function getProjectsDataCacheToJSON(getProjectsDataCache: GetProjectsDataCache): string;
export declare function getProjectsDataCacheFromJSON(jsonString: string): SafeParseResult<GetProjectsDataCache, SDKValidationError>;
/** @internal */
export declare const GetProjectsDeploymentExpiration$inboundSchema: z.ZodType<GetProjectsDeploymentExpiration, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsDeploymentExpiration$Outbound = {
    expirationDays?: number | undefined;
    expirationDaysProduction?: number | undefined;
    expirationDaysCanceled?: number | undefined;
    expirationDaysErrored?: number | undefined;
    deploymentsToKeep?: number | undefined;
};
/** @internal */
export declare const GetProjectsDeploymentExpiration$outboundSchema: z.ZodType<GetProjectsDeploymentExpiration$Outbound, z.ZodTypeDef, GetProjectsDeploymentExpiration>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsDeploymentExpiration$ {
    /** @deprecated use `GetProjectsDeploymentExpiration$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsDeploymentExpiration, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsDeploymentExpiration$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsDeploymentExpiration$Outbound, z.ZodTypeDef, GetProjectsDeploymentExpiration>;
    /** @deprecated use `GetProjectsDeploymentExpiration$Outbound` instead. */
    type Outbound = GetProjectsDeploymentExpiration$Outbound;
}
export declare function getProjectsDeploymentExpirationToJSON(getProjectsDeploymentExpiration: GetProjectsDeploymentExpiration): string;
export declare function getProjectsDeploymentExpirationFromJSON(jsonString: string): SafeParseResult<GetProjectsDeploymentExpiration, SDKValidationError>;
/** @internal */
export declare const GetProjectsTarget2$inboundSchema: z.ZodNativeEnum<typeof GetProjectsTarget2>;
/** @internal */
export declare const GetProjectsTarget2$outboundSchema: z.ZodNativeEnum<typeof GetProjectsTarget2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsTarget2$ {
    /** @deprecated use `GetProjectsTarget2$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Production: "production";
        readonly Preview: "preview";
        readonly Development: "development";
    }>;
    /** @deprecated use `GetProjectsTarget2$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Production: "production";
        readonly Preview: "preview";
        readonly Development: "development";
    }>;
}
/** @internal */
export declare const GetProjectsTarget1$inboundSchema: z.ZodNativeEnum<typeof GetProjectsTarget1>;
/** @internal */
export declare const GetProjectsTarget1$outboundSchema: z.ZodNativeEnum<typeof GetProjectsTarget1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsTarget1$ {
    /** @deprecated use `GetProjectsTarget1$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Production: "production";
        readonly Preview: "preview";
        readonly Development: "development";
    }>;
    /** @deprecated use `GetProjectsTarget1$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Production: "production";
        readonly Preview: "preview";
        readonly Development: "development";
    }>;
}
/** @internal */
export declare const GetProjectsTarget$inboundSchema: z.ZodType<GetProjectsTarget, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsTarget$Outbound = Array<string> | string;
/** @internal */
export declare const GetProjectsTarget$outboundSchema: z.ZodType<GetProjectsTarget$Outbound, z.ZodTypeDef, GetProjectsTarget>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsTarget$ {
    /** @deprecated use `GetProjectsTarget$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsTarget, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsTarget$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsTarget$Outbound, z.ZodTypeDef, GetProjectsTarget>;
    /** @deprecated use `GetProjectsTarget$Outbound` instead. */
    type Outbound = GetProjectsTarget$Outbound;
}
export declare function getProjectsTargetToJSON(getProjectsTarget: GetProjectsTarget): string;
export declare function getProjectsTargetFromJSON(jsonString: string): SafeParseResult<GetProjectsTarget, SDKValidationError>;
/** @internal */
export declare const GetProjectsType$inboundSchema: z.ZodNativeEnum<typeof GetProjectsType>;
/** @internal */
export declare const GetProjectsType$outboundSchema: z.ZodNativeEnum<typeof GetProjectsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsType$ {
    /** @deprecated use `GetProjectsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly System: "system";
        readonly Encrypted: "encrypted";
        readonly Plain: "plain";
        readonly Sensitive: "sensitive";
        readonly Secret: "secret";
    }>;
    /** @deprecated use `GetProjectsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly System: "system";
        readonly Encrypted: "encrypted";
        readonly Plain: "plain";
        readonly Sensitive: "sensitive";
        readonly Secret: "secret";
    }>;
}
/** @internal */
export declare const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv15Type$inboundSchema: z.ZodNativeEnum<typeof GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv15Type>;
/** @internal */
export declare const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv15Type$outboundSchema: z.ZodNativeEnum<typeof GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv15Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv15Type$ {
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv15Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly FlagsConnectionString: "flags-connection-string";
    }>;
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv15Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly FlagsConnectionString: "flags-connection-string";
    }>;
}
/** @internal */
export declare const GetProjectsContentHint15$inboundSchema: z.ZodType<GetProjectsContentHint15, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsContentHint15$Outbound = {
    type: string;
    projectId: string;
};
/** @internal */
export declare const GetProjectsContentHint15$outboundSchema: z.ZodType<GetProjectsContentHint15$Outbound, z.ZodTypeDef, GetProjectsContentHint15>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsContentHint15$ {
    /** @deprecated use `GetProjectsContentHint15$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsContentHint15, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsContentHint15$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsContentHint15$Outbound, z.ZodTypeDef, GetProjectsContentHint15>;
    /** @deprecated use `GetProjectsContentHint15$Outbound` instead. */
    type Outbound = GetProjectsContentHint15$Outbound;
}
export declare function getProjectsContentHint15ToJSON(getProjectsContentHint15: GetProjectsContentHint15): string;
export declare function getProjectsContentHint15FromJSON(jsonString: string): SafeParseResult<GetProjectsContentHint15, SDKValidationError>;
/** @internal */
export declare const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv14Type$inboundSchema: z.ZodNativeEnum<typeof GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv14Type>;
/** @internal */
export declare const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv14Type$outboundSchema: z.ZodNativeEnum<typeof GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv14Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv14Type$ {
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv14Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly IntegrationStoreSecret: "integration-store-secret";
    }>;
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv14Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly IntegrationStoreSecret: "integration-store-secret";
    }>;
}
/** @internal */
export declare const GetProjectsContentHint14$inboundSchema: z.ZodType<GetProjectsContentHint14, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsContentHint14$Outbound = {
    type: string;
    storeId: string;
    integrationId: string;
    integrationProductId: string;
    integrationConfigurationId: string;
};
/** @internal */
export declare const GetProjectsContentHint14$outboundSchema: z.ZodType<GetProjectsContentHint14$Outbound, z.ZodTypeDef, GetProjectsContentHint14>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsContentHint14$ {
    /** @deprecated use `GetProjectsContentHint14$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsContentHint14, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsContentHint14$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsContentHint14$Outbound, z.ZodTypeDef, GetProjectsContentHint14>;
    /** @deprecated use `GetProjectsContentHint14$Outbound` instead. */
    type Outbound = GetProjectsContentHint14$Outbound;
}
export declare function getProjectsContentHint14ToJSON(getProjectsContentHint14: GetProjectsContentHint14): string;
export declare function getProjectsContentHint14FromJSON(jsonString: string): SafeParseResult<GetProjectsContentHint14, SDKValidationError>;
/** @internal */
export declare const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv13Type$inboundSchema: z.ZodNativeEnum<typeof GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv13Type>;
/** @internal */
export declare const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv13Type$outboundSchema: z.ZodNativeEnum<typeof GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv13Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv13Type$ {
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv13Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly PostgresUrlNoSsl: "postgres-url-no-ssl";
    }>;
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv13Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly PostgresUrlNoSsl: "postgres-url-no-ssl";
    }>;
}
/** @internal */
export declare const GetProjectsContentHint13$inboundSchema: z.ZodType<GetProjectsContentHint13, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsContentHint13$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const GetProjectsContentHint13$outboundSchema: z.ZodType<GetProjectsContentHint13$Outbound, z.ZodTypeDef, GetProjectsContentHint13>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsContentHint13$ {
    /** @deprecated use `GetProjectsContentHint13$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsContentHint13, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsContentHint13$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsContentHint13$Outbound, z.ZodTypeDef, GetProjectsContentHint13>;
    /** @deprecated use `GetProjectsContentHint13$Outbound` instead. */
    type Outbound = GetProjectsContentHint13$Outbound;
}
export declare function getProjectsContentHint13ToJSON(getProjectsContentHint13: GetProjectsContentHint13): string;
export declare function getProjectsContentHint13FromJSON(jsonString: string): SafeParseResult<GetProjectsContentHint13, SDKValidationError>;
/** @internal */
export declare const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv12Type$inboundSchema: z.ZodNativeEnum<typeof GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv12Type>;
/** @internal */
export declare const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv12Type$outboundSchema: z.ZodNativeEnum<typeof GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv12Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv12Type$ {
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv12Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly PostgresDatabase: "postgres-database";
    }>;
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv12Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly PostgresDatabase: "postgres-database";
    }>;
}
/** @internal */
export declare const GetProjectsContentHint12$inboundSchema: z.ZodType<GetProjectsContentHint12, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsContentHint12$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const GetProjectsContentHint12$outboundSchema: z.ZodType<GetProjectsContentHint12$Outbound, z.ZodTypeDef, GetProjectsContentHint12>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsContentHint12$ {
    /** @deprecated use `GetProjectsContentHint12$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsContentHint12, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsContentHint12$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsContentHint12$Outbound, z.ZodTypeDef, GetProjectsContentHint12>;
    /** @deprecated use `GetProjectsContentHint12$Outbound` instead. */
    type Outbound = GetProjectsContentHint12$Outbound;
}
export declare function getProjectsContentHint12ToJSON(getProjectsContentHint12: GetProjectsContentHint12): string;
export declare function getProjectsContentHint12FromJSON(jsonString: string): SafeParseResult<GetProjectsContentHint12, SDKValidationError>;
/** @internal */
export declare const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv11Type$inboundSchema: z.ZodNativeEnum<typeof GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv11Type>;
/** @internal */
export declare const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv11Type$outboundSchema: z.ZodNativeEnum<typeof GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv11Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv11Type$ {
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv11Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly PostgresPassword: "postgres-password";
    }>;
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv11Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly PostgresPassword: "postgres-password";
    }>;
}
/** @internal */
export declare const GetProjectsContentHint11$inboundSchema: z.ZodType<GetProjectsContentHint11, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsContentHint11$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const GetProjectsContentHint11$outboundSchema: z.ZodType<GetProjectsContentHint11$Outbound, z.ZodTypeDef, GetProjectsContentHint11>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsContentHint11$ {
    /** @deprecated use `GetProjectsContentHint11$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsContentHint11, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsContentHint11$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsContentHint11$Outbound, z.ZodTypeDef, GetProjectsContentHint11>;
    /** @deprecated use `GetProjectsContentHint11$Outbound` instead. */
    type Outbound = GetProjectsContentHint11$Outbound;
}
export declare function getProjectsContentHint11ToJSON(getProjectsContentHint11: GetProjectsContentHint11): string;
export declare function getProjectsContentHint11FromJSON(jsonString: string): SafeParseResult<GetProjectsContentHint11, SDKValidationError>;
/** @internal */
export declare const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv10Type$inboundSchema: z.ZodNativeEnum<typeof GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv10Type>;
/** @internal */
export declare const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv10Type$outboundSchema: z.ZodNativeEnum<typeof GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv10Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv10Type$ {
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv10Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly PostgresHost: "postgres-host";
    }>;
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv10Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly PostgresHost: "postgres-host";
    }>;
}
/** @internal */
export declare const GetProjectsContentHint10$inboundSchema: z.ZodType<GetProjectsContentHint10, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsContentHint10$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const GetProjectsContentHint10$outboundSchema: z.ZodType<GetProjectsContentHint10$Outbound, z.ZodTypeDef, GetProjectsContentHint10>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsContentHint10$ {
    /** @deprecated use `GetProjectsContentHint10$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsContentHint10, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsContentHint10$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsContentHint10$Outbound, z.ZodTypeDef, GetProjectsContentHint10>;
    /** @deprecated use `GetProjectsContentHint10$Outbound` instead. */
    type Outbound = GetProjectsContentHint10$Outbound;
}
export declare function getProjectsContentHint10ToJSON(getProjectsContentHint10: GetProjectsContentHint10): string;
export declare function getProjectsContentHint10FromJSON(jsonString: string): SafeParseResult<GetProjectsContentHint10, SDKValidationError>;
/** @internal */
export declare const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv9Type$inboundSchema: z.ZodNativeEnum<typeof GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv9Type>;
/** @internal */
export declare const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv9Type$outboundSchema: z.ZodNativeEnum<typeof GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv9Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv9Type$ {
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv9Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly PostgresUser: "postgres-user";
    }>;
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv9Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly PostgresUser: "postgres-user";
    }>;
}
/** @internal */
export declare const GetProjectsContentHint9$inboundSchema: z.ZodType<GetProjectsContentHint9, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsContentHint9$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const GetProjectsContentHint9$outboundSchema: z.ZodType<GetProjectsContentHint9$Outbound, z.ZodTypeDef, GetProjectsContentHint9>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsContentHint9$ {
    /** @deprecated use `GetProjectsContentHint9$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsContentHint9, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsContentHint9$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsContentHint9$Outbound, z.ZodTypeDef, GetProjectsContentHint9>;
    /** @deprecated use `GetProjectsContentHint9$Outbound` instead. */
    type Outbound = GetProjectsContentHint9$Outbound;
}
export declare function getProjectsContentHint9ToJSON(getProjectsContentHint9: GetProjectsContentHint9): string;
export declare function getProjectsContentHint9FromJSON(jsonString: string): SafeParseResult<GetProjectsContentHint9, SDKValidationError>;
/** @internal */
export declare const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType$inboundSchema: z.ZodNativeEnum<typeof GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType>;
/** @internal */
export declare const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType$outboundSchema: z.ZodNativeEnum<typeof GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType$ {
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly PostgresPrismaUrl: "postgres-prisma-url";
    }>;
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly PostgresPrismaUrl: "postgres-prisma-url";
    }>;
}
/** @internal */
export declare const GetProjectsContentHint8$inboundSchema: z.ZodType<GetProjectsContentHint8, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsContentHint8$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const GetProjectsContentHint8$outboundSchema: z.ZodType<GetProjectsContentHint8$Outbound, z.ZodTypeDef, GetProjectsContentHint8>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsContentHint8$ {
    /** @deprecated use `GetProjectsContentHint8$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsContentHint8, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsContentHint8$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsContentHint8$Outbound, z.ZodTypeDef, GetProjectsContentHint8>;
    /** @deprecated use `GetProjectsContentHint8$Outbound` instead. */
    type Outbound = GetProjectsContentHint8$Outbound;
}
export declare function getProjectsContentHint8ToJSON(getProjectsContentHint8: GetProjectsContentHint8): string;
export declare function getProjectsContentHint8FromJSON(jsonString: string): SafeParseResult<GetProjectsContentHint8, SDKValidationError>;
/** @internal */
export declare const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsType$inboundSchema: z.ZodNativeEnum<typeof GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsType>;
/** @internal */
export declare const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsType$outboundSchema: z.ZodNativeEnum<typeof GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsType$ {
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly PostgresUrlNonPooling: "postgres-url-non-pooling";
    }>;
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly PostgresUrlNonPooling: "postgres-url-non-pooling";
    }>;
}
/** @internal */
export declare const GetProjectsContentHint7$inboundSchema: z.ZodType<GetProjectsContentHint7, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsContentHint7$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const GetProjectsContentHint7$outboundSchema: z.ZodType<GetProjectsContentHint7$Outbound, z.ZodTypeDef, GetProjectsContentHint7>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsContentHint7$ {
    /** @deprecated use `GetProjectsContentHint7$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsContentHint7, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsContentHint7$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsContentHint7$Outbound, z.ZodTypeDef, GetProjectsContentHint7>;
    /** @deprecated use `GetProjectsContentHint7$Outbound` instead. */
    type Outbound = GetProjectsContentHint7$Outbound;
}
export declare function getProjectsContentHint7ToJSON(getProjectsContentHint7: GetProjectsContentHint7): string;
export declare function getProjectsContentHint7FromJSON(jsonString: string): SafeParseResult<GetProjectsContentHint7, SDKValidationError>;
/** @internal */
export declare const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema: z.ZodNativeEnum<typeof GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyType>;
/** @internal */
export declare const GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema: z.ZodNativeEnum<typeof GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyType$ {
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly PostgresUrl: "postgres-url";
    }>;
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly PostgresUrl: "postgres-url";
    }>;
}
/** @internal */
export declare const GetProjectsContentHint6$inboundSchema: z.ZodType<GetProjectsContentHint6, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsContentHint6$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const GetProjectsContentHint6$outboundSchema: z.ZodType<GetProjectsContentHint6$Outbound, z.ZodTypeDef, GetProjectsContentHint6>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsContentHint6$ {
    /** @deprecated use `GetProjectsContentHint6$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsContentHint6, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsContentHint6$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsContentHint6$Outbound, z.ZodTypeDef, GetProjectsContentHint6>;
    /** @deprecated use `GetProjectsContentHint6$Outbound` instead. */
    type Outbound = GetProjectsContentHint6$Outbound;
}
export declare function getProjectsContentHint6ToJSON(getProjectsContentHint6: GetProjectsContentHint6): string;
export declare function getProjectsContentHint6FromJSON(jsonString: string): SafeParseResult<GetProjectsContentHint6, SDKValidationError>;
/** @internal */
export declare const GetProjectsContentHintProjectsResponse200ApplicationJSONType$inboundSchema: z.ZodNativeEnum<typeof GetProjectsContentHintProjectsResponse200ApplicationJSONType>;
/** @internal */
export declare const GetProjectsContentHintProjectsResponse200ApplicationJSONType$outboundSchema: z.ZodNativeEnum<typeof GetProjectsContentHintProjectsResponse200ApplicationJSONType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsContentHintProjectsResponse200ApplicationJSONType$ {
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly BlobReadWriteToken: "blob-read-write-token";
    }>;
    /** @deprecated use `GetProjectsContentHintProjectsResponse200ApplicationJSONType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly BlobReadWriteToken: "blob-read-write-token";
    }>;
}
/** @internal */
export declare const GetProjectsContentHint5$inboundSchema: z.ZodType<GetProjectsContentHint5, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsContentHint5$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const GetProjectsContentHint5$outboundSchema: z.ZodType<GetProjectsContentHint5$Outbound, z.ZodTypeDef, GetProjectsContentHint5>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsContentHint5$ {
    /** @deprecated use `GetProjectsContentHint5$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsContentHint5, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsContentHint5$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsContentHint5$Outbound, z.ZodTypeDef, GetProjectsContentHint5>;
    /** @deprecated use `GetProjectsContentHint5$Outbound` instead. */
    type Outbound = GetProjectsContentHint5$Outbound;
}
export declare function getProjectsContentHint5ToJSON(getProjectsContentHint5: GetProjectsContentHint5): string;
export declare function getProjectsContentHint5FromJSON(jsonString: string): SafeParseResult<GetProjectsContentHint5, SDKValidationError>;
/** @internal */
export declare const GetProjectsContentHintProjectsResponse200Type$inboundSchema: z.ZodNativeEnum<typeof GetProjectsContentHintProjectsResponse200Type>;
/** @internal */
export declare const GetProjectsContentHintProjectsResponse200Type$outboundSchema: z.ZodNativeEnum<typeof GetProjectsContentHintProjectsResponse200Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsContentHintProjectsResponse200Type$ {
    /** @deprecated use `GetProjectsContentHintProjectsResponse200Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly RedisRestApiReadOnlyToken: "redis-rest-api-read-only-token";
    }>;
    /** @deprecated use `GetProjectsContentHintProjectsResponse200Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly RedisRestApiReadOnlyToken: "redis-rest-api-read-only-token";
    }>;
}
/** @internal */
export declare const GetProjectsContentHint4$inboundSchema: z.ZodType<GetProjectsContentHint4, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsContentHint4$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const GetProjectsContentHint4$outboundSchema: z.ZodType<GetProjectsContentHint4$Outbound, z.ZodTypeDef, GetProjectsContentHint4>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsContentHint4$ {
    /** @deprecated use `GetProjectsContentHint4$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsContentHint4, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsContentHint4$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsContentHint4$Outbound, z.ZodTypeDef, GetProjectsContentHint4>;
    /** @deprecated use `GetProjectsContentHint4$Outbound` instead. */
    type Outbound = GetProjectsContentHint4$Outbound;
}
export declare function getProjectsContentHint4ToJSON(getProjectsContentHint4: GetProjectsContentHint4): string;
export declare function getProjectsContentHint4FromJSON(jsonString: string): SafeParseResult<GetProjectsContentHint4, SDKValidationError>;
/** @internal */
export declare const GetProjectsContentHintProjectsResponseType$inboundSchema: z.ZodNativeEnum<typeof GetProjectsContentHintProjectsResponseType>;
/** @internal */
export declare const GetProjectsContentHintProjectsResponseType$outboundSchema: z.ZodNativeEnum<typeof GetProjectsContentHintProjectsResponseType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsContentHintProjectsResponseType$ {
    /** @deprecated use `GetProjectsContentHintProjectsResponseType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly RedisRestApiToken: "redis-rest-api-token";
    }>;
    /** @deprecated use `GetProjectsContentHintProjectsResponseType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly RedisRestApiToken: "redis-rest-api-token";
    }>;
}
/** @internal */
export declare const GetProjectsContentHint3$inboundSchema: z.ZodType<GetProjectsContentHint3, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsContentHint3$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const GetProjectsContentHint3$outboundSchema: z.ZodType<GetProjectsContentHint3$Outbound, z.ZodTypeDef, GetProjectsContentHint3>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsContentHint3$ {
    /** @deprecated use `GetProjectsContentHint3$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsContentHint3, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsContentHint3$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsContentHint3$Outbound, z.ZodTypeDef, GetProjectsContentHint3>;
    /** @deprecated use `GetProjectsContentHint3$Outbound` instead. */
    type Outbound = GetProjectsContentHint3$Outbound;
}
export declare function getProjectsContentHint3ToJSON(getProjectsContentHint3: GetProjectsContentHint3): string;
export declare function getProjectsContentHint3FromJSON(jsonString: string): SafeParseResult<GetProjectsContentHint3, SDKValidationError>;
/** @internal */
export declare const GetProjectsContentHintProjectsType$inboundSchema: z.ZodNativeEnum<typeof GetProjectsContentHintProjectsType>;
/** @internal */
export declare const GetProjectsContentHintProjectsType$outboundSchema: z.ZodNativeEnum<typeof GetProjectsContentHintProjectsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsContentHintProjectsType$ {
    /** @deprecated use `GetProjectsContentHintProjectsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly RedisRestApiUrl: "redis-rest-api-url";
    }>;
    /** @deprecated use `GetProjectsContentHintProjectsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly RedisRestApiUrl: "redis-rest-api-url";
    }>;
}
/** @internal */
export declare const GetProjectsContentHint2$inboundSchema: z.ZodType<GetProjectsContentHint2, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsContentHint2$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const GetProjectsContentHint2$outboundSchema: z.ZodType<GetProjectsContentHint2$Outbound, z.ZodTypeDef, GetProjectsContentHint2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsContentHint2$ {
    /** @deprecated use `GetProjectsContentHint2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsContentHint2, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsContentHint2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsContentHint2$Outbound, z.ZodTypeDef, GetProjectsContentHint2>;
    /** @deprecated use `GetProjectsContentHint2$Outbound` instead. */
    type Outbound = GetProjectsContentHint2$Outbound;
}
export declare function getProjectsContentHint2ToJSON(getProjectsContentHint2: GetProjectsContentHint2): string;
export declare function getProjectsContentHint2FromJSON(jsonString: string): SafeParseResult<GetProjectsContentHint2, SDKValidationError>;
/** @internal */
export declare const GetProjectsContentHintType$inboundSchema: z.ZodNativeEnum<typeof GetProjectsContentHintType>;
/** @internal */
export declare const GetProjectsContentHintType$outboundSchema: z.ZodNativeEnum<typeof GetProjectsContentHintType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsContentHintType$ {
    /** @deprecated use `GetProjectsContentHintType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly RedisUrl: "redis-url";
    }>;
    /** @deprecated use `GetProjectsContentHintType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly RedisUrl: "redis-url";
    }>;
}
/** @internal */
export declare const GetProjectsContentHint1$inboundSchema: z.ZodType<GetProjectsContentHint1, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsContentHint1$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const GetProjectsContentHint1$outboundSchema: z.ZodType<GetProjectsContentHint1$Outbound, z.ZodTypeDef, GetProjectsContentHint1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsContentHint1$ {
    /** @deprecated use `GetProjectsContentHint1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsContentHint1, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsContentHint1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsContentHint1$Outbound, z.ZodTypeDef, GetProjectsContentHint1>;
    /** @deprecated use `GetProjectsContentHint1$Outbound` instead. */
    type Outbound = GetProjectsContentHint1$Outbound;
}
export declare function getProjectsContentHint1ToJSON(getProjectsContentHint1: GetProjectsContentHint1): string;
export declare function getProjectsContentHint1FromJSON(jsonString: string): SafeParseResult<GetProjectsContentHint1, SDKValidationError>;
/** @internal */
export declare const GetProjectsContentHint$inboundSchema: z.ZodType<GetProjectsContentHint, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsContentHint$Outbound = GetProjectsContentHint14$Outbound | GetProjectsContentHint1$Outbound | GetProjectsContentHint2$Outbound | GetProjectsContentHint3$Outbound | GetProjectsContentHint4$Outbound | GetProjectsContentHint5$Outbound | GetProjectsContentHint6$Outbound | GetProjectsContentHint7$Outbound | GetProjectsContentHint8$Outbound | GetProjectsContentHint9$Outbound | GetProjectsContentHint10$Outbound | GetProjectsContentHint11$Outbound | GetProjectsContentHint12$Outbound | GetProjectsContentHint13$Outbound | GetProjectsContentHint15$Outbound;
/** @internal */
export declare const GetProjectsContentHint$outboundSchema: z.ZodType<GetProjectsContentHint$Outbound, z.ZodTypeDef, GetProjectsContentHint>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsContentHint$ {
    /** @deprecated use `GetProjectsContentHint$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsContentHint, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsContentHint$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsContentHint$Outbound, z.ZodTypeDef, GetProjectsContentHint>;
    /** @deprecated use `GetProjectsContentHint$Outbound` instead. */
    type Outbound = GetProjectsContentHint$Outbound;
}
export declare function getProjectsContentHintToJSON(getProjectsContentHint: GetProjectsContentHint): string;
export declare function getProjectsContentHintFromJSON(jsonString: string): SafeParseResult<GetProjectsContentHint, SDKValidationError>;
/** @internal */
export declare const GetProjectsProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema: z.ZodNativeEnum<typeof GetProjectsProjectsResponse200ApplicationJSONResponseBodyType>;
/** @internal */
export declare const GetProjectsProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema: z.ZodNativeEnum<typeof GetProjectsProjectsResponse200ApplicationJSONResponseBodyType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsProjectsResponse200ApplicationJSONResponseBodyType$ {
    /** @deprecated use `GetProjectsProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly FlagsSecret: "flags-secret";
    }>;
    /** @deprecated use `GetProjectsProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly FlagsSecret: "flags-secret";
    }>;
}
/** @internal */
export declare const GetProjectsInternalContentHint$inboundSchema: z.ZodType<GetProjectsInternalContentHint, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsInternalContentHint$Outbound = {
    type: string;
    encryptedValue: string;
};
/** @internal */
export declare const GetProjectsInternalContentHint$outboundSchema: z.ZodType<GetProjectsInternalContentHint$Outbound, z.ZodTypeDef, GetProjectsInternalContentHint>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsInternalContentHint$ {
    /** @deprecated use `GetProjectsInternalContentHint$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsInternalContentHint, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsInternalContentHint$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsInternalContentHint$Outbound, z.ZodTypeDef, GetProjectsInternalContentHint>;
    /** @deprecated use `GetProjectsInternalContentHint$Outbound` instead. */
    type Outbound = GetProjectsInternalContentHint$Outbound;
}
export declare function getProjectsInternalContentHintToJSON(getProjectsInternalContentHint: GetProjectsInternalContentHint): string;
export declare function getProjectsInternalContentHintFromJSON(jsonString: string): SafeParseResult<GetProjectsInternalContentHint, SDKValidationError>;
/** @internal */
export declare const GetProjectsEnv$inboundSchema: z.ZodType<GetProjectsEnv, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsEnv$Outbound = {
    target?: Array<string> | string | undefined;
    type: string;
    sunsetSecretId?: string | undefined;
    decrypted?: boolean | undefined;
    value: string;
    vsmValue?: string | undefined;
    id?: string | undefined;
    key: string;
    configurationId?: string | null | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    createdBy?: string | null | undefined;
    updatedBy?: string | null | undefined;
    gitBranch?: string | undefined;
    edgeConfigId?: string | null | undefined;
    edgeConfigTokenId?: string | null | undefined;
    contentHint?: GetProjectsContentHint14$Outbound | GetProjectsContentHint1$Outbound | GetProjectsContentHint2$Outbound | GetProjectsContentHint3$Outbound | GetProjectsContentHint4$Outbound | GetProjectsContentHint5$Outbound | GetProjectsContentHint6$Outbound | GetProjectsContentHint7$Outbound | GetProjectsContentHint8$Outbound | GetProjectsContentHint9$Outbound | GetProjectsContentHint10$Outbound | GetProjectsContentHint11$Outbound | GetProjectsContentHint12$Outbound | GetProjectsContentHint13$Outbound | GetProjectsContentHint15$Outbound | null | undefined;
    internalContentHint?: GetProjectsInternalContentHint$Outbound | null | undefined;
    comment?: string | undefined;
    customEnvironmentIds?: Array<string> | undefined;
};
/** @internal */
export declare const GetProjectsEnv$outboundSchema: z.ZodType<GetProjectsEnv$Outbound, z.ZodTypeDef, GetProjectsEnv>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsEnv$ {
    /** @deprecated use `GetProjectsEnv$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsEnv, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsEnv$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsEnv$Outbound, z.ZodTypeDef, GetProjectsEnv>;
    /** @deprecated use `GetProjectsEnv$Outbound` instead. */
    type Outbound = GetProjectsEnv$Outbound;
}
export declare function getProjectsEnvToJSON(getProjectsEnv: GetProjectsEnv): string;
export declare function getProjectsEnvFromJSON(jsonString: string): SafeParseResult<GetProjectsEnv, SDKValidationError>;
/** @internal */
export declare const GetProjectsProjectsType$inboundSchema: z.ZodNativeEnum<typeof GetProjectsProjectsType>;
/** @internal */
export declare const GetProjectsProjectsType$outboundSchema: z.ZodNativeEnum<typeof GetProjectsProjectsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsProjectsType$ {
    /** @deprecated use `GetProjectsProjectsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Preview: "preview";
        readonly Production: "production";
        readonly Development: "development";
    }>;
    /** @deprecated use `GetProjectsProjectsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Preview: "preview";
        readonly Production: "production";
        readonly Development: "development";
    }>;
}
/** @internal */
export declare const GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsCustomEnvironmentsType$inboundSchema: z.ZodNativeEnum<typeof GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsCustomEnvironmentsType>;
/** @internal */
export declare const GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsCustomEnvironmentsType$outboundSchema: z.ZodNativeEnum<typeof GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsCustomEnvironmentsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsCustomEnvironmentsType$ {
    /** @deprecated use `GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsCustomEnvironmentsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly EndsWith: "endsWith";
        readonly StartsWith: "startsWith";
        readonly Equals: "equals";
    }>;
    /** @deprecated use `GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsCustomEnvironmentsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly EndsWith: "endsWith";
        readonly StartsWith: "startsWith";
        readonly Equals: "equals";
    }>;
}
/** @internal */
export declare const GetProjectsBranchMatcher$inboundSchema: z.ZodType<GetProjectsBranchMatcher, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsBranchMatcher$Outbound = {
    type: string;
    pattern: string;
};
/** @internal */
export declare const GetProjectsBranchMatcher$outboundSchema: z.ZodType<GetProjectsBranchMatcher$Outbound, z.ZodTypeDef, GetProjectsBranchMatcher>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsBranchMatcher$ {
    /** @deprecated use `GetProjectsBranchMatcher$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsBranchMatcher, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsBranchMatcher$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsBranchMatcher$Outbound, z.ZodTypeDef, GetProjectsBranchMatcher>;
    /** @deprecated use `GetProjectsBranchMatcher$Outbound` instead. */
    type Outbound = GetProjectsBranchMatcher$Outbound;
}
export declare function getProjectsBranchMatcherToJSON(getProjectsBranchMatcher: GetProjectsBranchMatcher): string;
export declare function getProjectsBranchMatcherFromJSON(jsonString: string): SafeParseResult<GetProjectsBranchMatcher, SDKValidationError>;
/** @internal */
export declare const GetProjectsVerification$inboundSchema: z.ZodType<GetProjectsVerification, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsVerification$Outbound = {
    type: string;
    domain: string;
    value: string;
    reason: string;
};
/** @internal */
export declare const GetProjectsVerification$outboundSchema: z.ZodType<GetProjectsVerification$Outbound, z.ZodTypeDef, GetProjectsVerification>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsVerification$ {
    /** @deprecated use `GetProjectsVerification$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsVerification, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsVerification$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsVerification$Outbound, z.ZodTypeDef, GetProjectsVerification>;
    /** @deprecated use `GetProjectsVerification$Outbound` instead. */
    type Outbound = GetProjectsVerification$Outbound;
}
export declare function getProjectsVerificationToJSON(getProjectsVerification: GetProjectsVerification): string;
export declare function getProjectsVerificationFromJSON(jsonString: string): SafeParseResult<GetProjectsVerification, SDKValidationError>;
/** @internal */
export declare const GetProjectsDomains$inboundSchema: z.ZodType<GetProjectsDomains, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsDomains$Outbound = {
    name: string;
    apexName: string;
    projectId: string;
    redirect?: string | null | undefined;
    redirectStatusCode?: number | null | undefined;
    gitBranch?: string | null | undefined;
    customEnvironmentId?: string | null | undefined;
    updatedAt?: number | undefined;
    createdAt?: number | undefined;
    verified: boolean;
    verification?: Array<GetProjectsVerification$Outbound> | undefined;
};
/** @internal */
export declare const GetProjectsDomains$outboundSchema: z.ZodType<GetProjectsDomains$Outbound, z.ZodTypeDef, GetProjectsDomains>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsDomains$ {
    /** @deprecated use `GetProjectsDomains$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsDomains, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsDomains$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsDomains$Outbound, z.ZodTypeDef, GetProjectsDomains>;
    /** @deprecated use `GetProjectsDomains$Outbound` instead. */
    type Outbound = GetProjectsDomains$Outbound;
}
export declare function getProjectsDomainsToJSON(getProjectsDomains: GetProjectsDomains): string;
export declare function getProjectsDomainsFromJSON(jsonString: string): SafeParseResult<GetProjectsDomains, SDKValidationError>;
/** @internal */
export declare const GetProjectsCustomEnvironments$inboundSchema: z.ZodType<GetProjectsCustomEnvironments, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsCustomEnvironments$Outbound = {
    id: string;
    slug: string;
    type: string;
    description?: string | undefined;
    branchMatcher?: GetProjectsBranchMatcher$Outbound | undefined;
    domains?: Array<GetProjectsDomains$Outbound> | undefined;
    currentDeploymentAliases?: Array<string> | undefined;
    createdAt: number;
    updatedAt: number;
};
/** @internal */
export declare const GetProjectsCustomEnvironments$outboundSchema: z.ZodType<GetProjectsCustomEnvironments$Outbound, z.ZodTypeDef, GetProjectsCustomEnvironments>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsCustomEnvironments$ {
    /** @deprecated use `GetProjectsCustomEnvironments$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsCustomEnvironments, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsCustomEnvironments$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsCustomEnvironments$Outbound, z.ZodTypeDef, GetProjectsCustomEnvironments>;
    /** @deprecated use `GetProjectsCustomEnvironments$Outbound` instead. */
    type Outbound = GetProjectsCustomEnvironments$Outbound;
}
export declare function getProjectsCustomEnvironmentsToJSON(getProjectsCustomEnvironments: GetProjectsCustomEnvironments): string;
export declare function getProjectsCustomEnvironmentsFromJSON(jsonString: string): SafeParseResult<GetProjectsCustomEnvironments, SDKValidationError>;
/** @internal */
export declare const GetProjectsFramework$inboundSchema: z.ZodNativeEnum<typeof GetProjectsFramework>;
/** @internal */
export declare const GetProjectsFramework$outboundSchema: z.ZodNativeEnum<typeof GetProjectsFramework>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsFramework$ {
    /** @deprecated use `GetProjectsFramework$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Blitzjs: "blitzjs";
        readonly Nextjs: "nextjs";
        readonly Gatsby: "gatsby";
        readonly Remix: "remix";
        readonly ReactRouter: "react-router";
        readonly Astro: "astro";
        readonly Hexo: "hexo";
        readonly Eleventy: "eleventy";
        readonly Docusaurus2: "docusaurus-2";
        readonly Docusaurus: "docusaurus";
        readonly Preact: "preact";
        readonly Solidstart1: "solidstart-1";
        readonly Solidstart: "solidstart";
        readonly Dojo: "dojo";
        readonly Ember: "ember";
        readonly Vue: "vue";
        readonly Scully: "scully";
        readonly IonicAngular: "ionic-angular";
        readonly Angular: "angular";
        readonly Polymer: "polymer";
        readonly Svelte: "svelte";
        readonly Sveltekit: "sveltekit";
        readonly Sveltekit1: "sveltekit-1";
        readonly IonicReact: "ionic-react";
        readonly CreateReactApp: "create-react-app";
        readonly Gridsome: "gridsome";
        readonly Umijs: "umijs";
        readonly Sapper: "sapper";
        readonly Saber: "saber";
        readonly Stencil: "stencil";
        readonly Nuxtjs: "nuxtjs";
        readonly Redwoodjs: "redwoodjs";
        readonly Hugo: "hugo";
        readonly Jekyll: "jekyll";
        readonly Brunch: "brunch";
        readonly Middleman: "middleman";
        readonly Zola: "zola";
        readonly Hydrogen: "hydrogen";
        readonly Vite: "vite";
        readonly Vitepress: "vitepress";
        readonly Vuepress: "vuepress";
        readonly Parcel: "parcel";
        readonly Fastapi: "fastapi";
        readonly Fasthtml: "fasthtml";
        readonly SanityV3: "sanity-v3";
        readonly Sanity: "sanity";
        readonly Storybook: "storybook";
        readonly Nitro: "nitro";
        readonly Hono: "hono";
        readonly Express: "express";
        readonly Xmcp: "xmcp";
    }>;
    /** @deprecated use `GetProjectsFramework$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Blitzjs: "blitzjs";
        readonly Nextjs: "nextjs";
        readonly Gatsby: "gatsby";
        readonly Remix: "remix";
        readonly ReactRouter: "react-router";
        readonly Astro: "astro";
        readonly Hexo: "hexo";
        readonly Eleventy: "eleventy";
        readonly Docusaurus2: "docusaurus-2";
        readonly Docusaurus: "docusaurus";
        readonly Preact: "preact";
        readonly Solidstart1: "solidstart-1";
        readonly Solidstart: "solidstart";
        readonly Dojo: "dojo";
        readonly Ember: "ember";
        readonly Vue: "vue";
        readonly Scully: "scully";
        readonly IonicAngular: "ionic-angular";
        readonly Angular: "angular";
        readonly Polymer: "polymer";
        readonly Svelte: "svelte";
        readonly Sveltekit: "sveltekit";
        readonly Sveltekit1: "sveltekit-1";
        readonly IonicReact: "ionic-react";
        readonly CreateReactApp: "create-react-app";
        readonly Gridsome: "gridsome";
        readonly Umijs: "umijs";
        readonly Sapper: "sapper";
        readonly Saber: "saber";
        readonly Stencil: "stencil";
        readonly Nuxtjs: "nuxtjs";
        readonly Redwoodjs: "redwoodjs";
        readonly Hugo: "hugo";
        readonly Jekyll: "jekyll";
        readonly Brunch: "brunch";
        readonly Middleman: "middleman";
        readonly Zola: "zola";
        readonly Hydrogen: "hydrogen";
        readonly Vite: "vite";
        readonly Vitepress: "vitepress";
        readonly Vuepress: "vuepress";
        readonly Parcel: "parcel";
        readonly Fastapi: "fastapi";
        readonly Fasthtml: "fasthtml";
        readonly SanityV3: "sanity-v3";
        readonly Sanity: "sanity";
        readonly Storybook: "storybook";
        readonly Nitro: "nitro";
        readonly Hono: "hono";
        readonly Express: "express";
        readonly Xmcp: "xmcp";
    }>;
}
/** @internal */
export declare const GetProjectsIpBuckets$inboundSchema: z.ZodType<GetProjectsIpBuckets, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsIpBuckets$Outbound = {
    bucket: string;
    supportUntil?: number | undefined;
};
/** @internal */
export declare const GetProjectsIpBuckets$outboundSchema: z.ZodType<GetProjectsIpBuckets$Outbound, z.ZodTypeDef, GetProjectsIpBuckets>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsIpBuckets$ {
    /** @deprecated use `GetProjectsIpBuckets$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsIpBuckets, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsIpBuckets$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsIpBuckets$Outbound, z.ZodTypeDef, GetProjectsIpBuckets>;
    /** @deprecated use `GetProjectsIpBuckets$Outbound` instead. */
    type Outbound = GetProjectsIpBuckets$Outbound;
}
export declare function getProjectsIpBucketsToJSON(getProjectsIpBuckets: GetProjectsIpBuckets): string;
export declare function getProjectsIpBucketsFromJSON(jsonString: string): SafeParseResult<GetProjectsIpBuckets, SDKValidationError>;
/** @internal */
export declare const GetProjectsAliasAssigned$inboundSchema: z.ZodType<GetProjectsAliasAssigned, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsAliasAssigned$Outbound = number | boolean;
/** @internal */
export declare const GetProjectsAliasAssigned$outboundSchema: z.ZodType<GetProjectsAliasAssigned$Outbound, z.ZodTypeDef, GetProjectsAliasAssigned>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsAliasAssigned$ {
    /** @deprecated use `GetProjectsAliasAssigned$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsAliasAssigned, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsAliasAssigned$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsAliasAssigned$Outbound, z.ZodTypeDef, GetProjectsAliasAssigned>;
    /** @deprecated use `GetProjectsAliasAssigned$Outbound` instead. */
    type Outbound = GetProjectsAliasAssigned$Outbound;
}
export declare function getProjectsAliasAssignedToJSON(getProjectsAliasAssigned: GetProjectsAliasAssigned): string;
export declare function getProjectsAliasAssignedFromJSON(jsonString: string): SafeParseResult<GetProjectsAliasAssigned, SDKValidationError>;
/** @internal */
export declare const GetProjectsAliasError$inboundSchema: z.ZodType<GetProjectsAliasError, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsAliasError$Outbound = {
    code: string;
    message: string;
};
/** @internal */
export declare const GetProjectsAliasError$outboundSchema: z.ZodType<GetProjectsAliasError$Outbound, z.ZodTypeDef, GetProjectsAliasError>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsAliasError$ {
    /** @deprecated use `GetProjectsAliasError$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsAliasError, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsAliasError$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsAliasError$Outbound, z.ZodTypeDef, GetProjectsAliasError>;
    /** @deprecated use `GetProjectsAliasError$Outbound` instead. */
    type Outbound = GetProjectsAliasError$Outbound;
}
export declare function getProjectsAliasErrorToJSON(getProjectsAliasError: GetProjectsAliasError): string;
export declare function getProjectsAliasErrorFromJSON(jsonString: string): SafeParseResult<GetProjectsAliasError, SDKValidationError>;
/** @internal */
export declare const GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsLatestDeploymentsType$inboundSchema: z.ZodNativeEnum<typeof GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsLatestDeploymentsType>;
/** @internal */
export declare const GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsLatestDeploymentsType$outboundSchema: z.ZodNativeEnum<typeof GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsLatestDeploymentsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsLatestDeploymentsType$ {
    /** @deprecated use `GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsLatestDeploymentsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly EndsWith: "endsWith";
        readonly StartsWith: "startsWith";
        readonly Equals: "equals";
    }>;
    /** @deprecated use `GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsLatestDeploymentsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly EndsWith: "endsWith";
        readonly StartsWith: "startsWith";
        readonly Equals: "equals";
    }>;
}
/** @internal */
export declare const GetProjectsProjectsBranchMatcher$inboundSchema: z.ZodType<GetProjectsProjectsBranchMatcher, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsProjectsBranchMatcher$Outbound = {
    type: string;
    pattern: string;
};
/** @internal */
export declare const GetProjectsProjectsBranchMatcher$outboundSchema: z.ZodType<GetProjectsProjectsBranchMatcher$Outbound, z.ZodTypeDef, GetProjectsProjectsBranchMatcher>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsProjectsBranchMatcher$ {
    /** @deprecated use `GetProjectsProjectsBranchMatcher$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsProjectsBranchMatcher, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsProjectsBranchMatcher$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsProjectsBranchMatcher$Outbound, z.ZodTypeDef, GetProjectsProjectsBranchMatcher>;
    /** @deprecated use `GetProjectsProjectsBranchMatcher$Outbound` instead. */
    type Outbound = GetProjectsProjectsBranchMatcher$Outbound;
}
export declare function getProjectsProjectsBranchMatcherToJSON(getProjectsProjectsBranchMatcher: GetProjectsProjectsBranchMatcher): string;
export declare function getProjectsProjectsBranchMatcherFromJSON(jsonString: string): SafeParseResult<GetProjectsProjectsBranchMatcher, SDKValidationError>;
/** @internal */
export declare const GetProjectsBuilds$inboundSchema: z.ZodType<GetProjectsBuilds, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsBuilds$Outbound = {
    use: string;
    src?: string | undefined;
    dest?: string | undefined;
};
/** @internal */
export declare const GetProjectsBuilds$outboundSchema: z.ZodType<GetProjectsBuilds$Outbound, z.ZodTypeDef, GetProjectsBuilds>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsBuilds$ {
    /** @deprecated use `GetProjectsBuilds$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsBuilds, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsBuilds$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsBuilds$Outbound, z.ZodTypeDef, GetProjectsBuilds>;
    /** @deprecated use `GetProjectsBuilds$Outbound` instead. */
    type Outbound = GetProjectsBuilds$Outbound;
}
export declare function getProjectsBuildsToJSON(getProjectsBuilds: GetProjectsBuilds): string;
export declare function getProjectsBuildsFromJSON(jsonString: string): SafeParseResult<GetProjectsBuilds, SDKValidationError>;
/** @internal */
export declare const GetProjectsChecksConclusion$inboundSchema: z.ZodNativeEnum<typeof GetProjectsChecksConclusion>;
/** @internal */
export declare const GetProjectsChecksConclusion$outboundSchema: z.ZodNativeEnum<typeof GetProjectsChecksConclusion>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsChecksConclusion$ {
    /** @deprecated use `GetProjectsChecksConclusion$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Succeeded: "succeeded";
        readonly Failed: "failed";
        readonly Skipped: "skipped";
        readonly Canceled: "canceled";
    }>;
    /** @deprecated use `GetProjectsChecksConclusion$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Succeeded: "succeeded";
        readonly Failed: "failed";
        readonly Skipped: "skipped";
        readonly Canceled: "canceled";
    }>;
}
/** @internal */
export declare const GetProjectsChecksState$inboundSchema: z.ZodNativeEnum<typeof GetProjectsChecksState>;
/** @internal */
export declare const GetProjectsChecksState$outboundSchema: z.ZodNativeEnum<typeof GetProjectsChecksState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsChecksState$ {
    /** @deprecated use `GetProjectsChecksState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Registered: "registered";
        readonly Running: "running";
        readonly Completed: "completed";
    }>;
    /** @deprecated use `GetProjectsChecksState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Registered: "registered";
        readonly Running: "running";
        readonly Completed: "completed";
    }>;
}
/** @internal */
export declare const GetProjectsCreator$inboundSchema: z.ZodType<GetProjectsCreator, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsCreator$Outbound = {
    email: string;
    githubLogin?: string | undefined;
    gitlabLogin?: string | undefined;
    uid: string;
    username: string;
};
/** @internal */
export declare const GetProjectsCreator$outboundSchema: z.ZodType<GetProjectsCreator$Outbound, z.ZodTypeDef, GetProjectsCreator>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsCreator$ {
    /** @deprecated use `GetProjectsCreator$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsCreator, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsCreator$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsCreator$Outbound, z.ZodTypeDef, GetProjectsCreator>;
    /** @deprecated use `GetProjectsCreator$Outbound` instead. */
    type Outbound = GetProjectsCreator$Outbound;
}
export declare function getProjectsCreatorToJSON(getProjectsCreator: GetProjectsCreator): string;
export declare function getProjectsCreatorFromJSON(jsonString: string): SafeParseResult<GetProjectsCreator, SDKValidationError>;
/** @internal */
export declare const GetProjectsOidcTokenClaims$inboundSchema: z.ZodType<GetProjectsOidcTokenClaims, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsOidcTokenClaims$Outbound = {
    iss: string;
    sub: string;
    scope: string;
    aud: string;
    owner: string;
    owner_id: string;
    project: string;
    project_id: string;
    environment: string;
};
/** @internal */
export declare const GetProjectsOidcTokenClaims$outboundSchema: z.ZodType<GetProjectsOidcTokenClaims$Outbound, z.ZodTypeDef, GetProjectsOidcTokenClaims>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsOidcTokenClaims$ {
    /** @deprecated use `GetProjectsOidcTokenClaims$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsOidcTokenClaims, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsOidcTokenClaims$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsOidcTokenClaims$Outbound, z.ZodTypeDef, GetProjectsOidcTokenClaims>;
    /** @deprecated use `GetProjectsOidcTokenClaims$Outbound` instead. */
    type Outbound = GetProjectsOidcTokenClaims$Outbound;
}
export declare function getProjectsOidcTokenClaimsToJSON(getProjectsOidcTokenClaims: GetProjectsOidcTokenClaims): string;
export declare function getProjectsOidcTokenClaimsFromJSON(jsonString: string): SafeParseResult<GetProjectsOidcTokenClaims, SDKValidationError>;
/** @internal */
export declare const GetProjectsPlan$inboundSchema: z.ZodNativeEnum<typeof GetProjectsPlan>;
/** @internal */
export declare const GetProjectsPlan$outboundSchema: z.ZodNativeEnum<typeof GetProjectsPlan>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsPlan$ {
    /** @deprecated use `GetProjectsPlan$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Pro: "pro";
        readonly Enterprise: "enterprise";
        readonly Hobby: "hobby";
    }>;
    /** @deprecated use `GetProjectsPlan$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Pro: "pro";
        readonly Enterprise: "enterprise";
        readonly Hobby: "hobby";
    }>;
}
/** @internal */
export declare const GetProjectsReadyState$inboundSchema: z.ZodNativeEnum<typeof GetProjectsReadyState>;
/** @internal */
export declare const GetProjectsReadyState$outboundSchema: z.ZodNativeEnum<typeof GetProjectsReadyState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsReadyState$ {
    /** @deprecated use `GetProjectsReadyState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Queued: "QUEUED";
        readonly Ready: "READY";
        readonly Canceled: "CANCELED";
    }>;
    /** @deprecated use `GetProjectsReadyState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Queued: "QUEUED";
        readonly Ready: "READY";
        readonly Canceled: "CANCELED";
    }>;
}
/** @internal */
export declare const GetProjectsReadySubstate$inboundSchema: z.ZodNativeEnum<typeof GetProjectsReadySubstate>;
/** @internal */
export declare const GetProjectsReadySubstate$outboundSchema: z.ZodNativeEnum<typeof GetProjectsReadySubstate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsReadySubstate$ {
    /** @deprecated use `GetProjectsReadySubstate$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Staged: "STAGED";
        readonly Rolling: "ROLLING";
        readonly Promoted: "PROMOTED";
    }>;
    /** @deprecated use `GetProjectsReadySubstate$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Staged: "STAGED";
        readonly Rolling: "ROLLING";
        readonly Promoted: "PROMOTED";
    }>;
}
/** @internal */
export declare const GetProjectsProjectsResponseType$inboundSchema: z.ZodNativeEnum<typeof GetProjectsProjectsResponseType>;
/** @internal */
export declare const GetProjectsProjectsResponseType$outboundSchema: z.ZodNativeEnum<typeof GetProjectsProjectsResponseType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsProjectsResponseType$ {
    /** @deprecated use `GetProjectsProjectsResponseType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Lambdas: "LAMBDAS";
    }>;
    /** @deprecated use `GetProjectsProjectsResponseType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Lambdas: "LAMBDAS";
    }>;
}
/** @internal */
export declare const GetProjectsLatestDeployments$inboundSchema: z.ZodType<GetProjectsLatestDeployments, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsLatestDeployments$Outbound = {
    id: string;
    alias?: Array<string> | undefined;
    aliasAssigned?: number | boolean | null | undefined;
    aliasError?: GetProjectsAliasError$Outbound | null | undefined;
    aliasFinal?: string | null | undefined;
    automaticAliases?: Array<string> | undefined;
    branchMatcher?: GetProjectsProjectsBranchMatcher$Outbound | undefined;
    buildingAt?: number | undefined;
    builds?: Array<GetProjectsBuilds$Outbound> | undefined;
    checksConclusion?: string | undefined;
    checksState?: string | undefined;
    connectBuildsEnabled?: boolean | undefined;
    connectConfigurationId?: string | undefined;
    createdAt: number;
    createdIn: string;
    creator: GetProjectsCreator$Outbound | null;
    deletedAt?: number | undefined;
    deploymentHostname: string;
    forced?: boolean | undefined;
    name: string;
    meta?: {
        [k: string]: string;
    } | undefined;
    monorepoManager?: string | null | undefined;
    oidcTokenClaims?: GetProjectsOidcTokenClaims$Outbound | undefined;
    plan: string;
    previewCommentsEnabled?: boolean | undefined;
    private: boolean;
    readyAt?: number | undefined;
    readyState: string;
    readySubstate?: string | undefined;
    requestedAt?: number | undefined;
    target?: string | null | undefined;
    teamId?: string | null | undefined;
    type: string;
    url: string;
    userId: string;
    withCache?: boolean | undefined;
};
/** @internal */
export declare const GetProjectsLatestDeployments$outboundSchema: z.ZodType<GetProjectsLatestDeployments$Outbound, z.ZodTypeDef, GetProjectsLatestDeployments>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsLatestDeployments$ {
    /** @deprecated use `GetProjectsLatestDeployments$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsLatestDeployments, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsLatestDeployments$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsLatestDeployments$Outbound, z.ZodTypeDef, GetProjectsLatestDeployments>;
    /** @deprecated use `GetProjectsLatestDeployments$Outbound` instead. */
    type Outbound = GetProjectsLatestDeployments$Outbound;
}
export declare function getProjectsLatestDeploymentsToJSON(getProjectsLatestDeployments: GetProjectsLatestDeployments): string;
export declare function getProjectsLatestDeploymentsFromJSON(jsonString: string): SafeParseResult<GetProjectsLatestDeployments, SDKValidationError>;
/** @internal */
export declare const GetProjectsLinkProjectsResponse200ApplicationJSONType$inboundSchema: z.ZodNativeEnum<typeof GetProjectsLinkProjectsResponse200ApplicationJSONType>;
/** @internal */
export declare const GetProjectsLinkProjectsResponse200ApplicationJSONType$outboundSchema: z.ZodNativeEnum<typeof GetProjectsLinkProjectsResponse200ApplicationJSONType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsLinkProjectsResponse200ApplicationJSONType$ {
    /** @deprecated use `GetProjectsLinkProjectsResponse200ApplicationJSONType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
    /** @deprecated use `GetProjectsLinkProjectsResponse200ApplicationJSONType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
}
/** @internal */
export declare const GetProjectsLinkProjectsResponse200ApplicationJSONDeployHooks$inboundSchema: z.ZodType<GetProjectsLinkProjectsResponse200ApplicationJSONDeployHooks, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsLinkProjectsResponse200ApplicationJSONDeployHooks$Outbound = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};
/** @internal */
export declare const GetProjectsLinkProjectsResponse200ApplicationJSONDeployHooks$outboundSchema: z.ZodType<GetProjectsLinkProjectsResponse200ApplicationJSONDeployHooks$Outbound, z.ZodTypeDef, GetProjectsLinkProjectsResponse200ApplicationJSONDeployHooks>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsLinkProjectsResponse200ApplicationJSONDeployHooks$ {
    /** @deprecated use `GetProjectsLinkProjectsResponse200ApplicationJSONDeployHooks$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsLinkProjectsResponse200ApplicationJSONDeployHooks, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsLinkProjectsResponse200ApplicationJSONDeployHooks$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsLinkProjectsResponse200ApplicationJSONDeployHooks$Outbound, z.ZodTypeDef, GetProjectsLinkProjectsResponse200ApplicationJSONDeployHooks>;
    /** @deprecated use `GetProjectsLinkProjectsResponse200ApplicationJSONDeployHooks$Outbound` instead. */
    type Outbound = GetProjectsLinkProjectsResponse200ApplicationJSONDeployHooks$Outbound;
}
export declare function getProjectsLinkProjectsResponse200ApplicationJSONDeployHooksToJSON(getProjectsLinkProjectsResponse200ApplicationJSONDeployHooks: GetProjectsLinkProjectsResponse200ApplicationJSONDeployHooks): string;
export declare function getProjectsLinkProjectsResponse200ApplicationJSONDeployHooksFromJSON(jsonString: string): SafeParseResult<GetProjectsLinkProjectsResponse200ApplicationJSONDeployHooks, SDKValidationError>;
/** @internal */
export declare const GetProjectsLink5$inboundSchema: z.ZodType<GetProjectsLink5, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsLink5$Outbound = {
    name: string;
    slug: string;
    owner: string;
    type: string;
    uuid: string;
    workspaceUuid: string;
    createdAt?: number | undefined;
    deployHooks: Array<GetProjectsLinkProjectsResponse200ApplicationJSONDeployHooks$Outbound>;
    gitCredentialId: string;
    updatedAt?: number | undefined;
    sourceless?: boolean | undefined;
    productionBranch: string;
};
/** @internal */
export declare const GetProjectsLink5$outboundSchema: z.ZodType<GetProjectsLink5$Outbound, z.ZodTypeDef, GetProjectsLink5>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsLink5$ {
    /** @deprecated use `GetProjectsLink5$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsLink5, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsLink5$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsLink5$Outbound, z.ZodTypeDef, GetProjectsLink5>;
    /** @deprecated use `GetProjectsLink5$Outbound` instead. */
    type Outbound = GetProjectsLink5$Outbound;
}
export declare function getProjectsLink5ToJSON(getProjectsLink5: GetProjectsLink5): string;
export declare function getProjectsLink5FromJSON(jsonString: string): SafeParseResult<GetProjectsLink5, SDKValidationError>;
/** @internal */
export declare const GetProjectsLinkProjectsResponse200Type$inboundSchema: z.ZodNativeEnum<typeof GetProjectsLinkProjectsResponse200Type>;
/** @internal */
export declare const GetProjectsLinkProjectsResponse200Type$outboundSchema: z.ZodNativeEnum<typeof GetProjectsLinkProjectsResponse200Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsLinkProjectsResponse200Type$ {
    /** @deprecated use `GetProjectsLinkProjectsResponse200Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Gitlab: "gitlab";
    }>;
    /** @deprecated use `GetProjectsLinkProjectsResponse200Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Gitlab: "gitlab";
    }>;
}
/** @internal */
export declare const GetProjectsLinkProjectsResponse200DeployHooks$inboundSchema: z.ZodType<GetProjectsLinkProjectsResponse200DeployHooks, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsLinkProjectsResponse200DeployHooks$Outbound = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};
/** @internal */
export declare const GetProjectsLinkProjectsResponse200DeployHooks$outboundSchema: z.ZodType<GetProjectsLinkProjectsResponse200DeployHooks$Outbound, z.ZodTypeDef, GetProjectsLinkProjectsResponse200DeployHooks>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsLinkProjectsResponse200DeployHooks$ {
    /** @deprecated use `GetProjectsLinkProjectsResponse200DeployHooks$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsLinkProjectsResponse200DeployHooks, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsLinkProjectsResponse200DeployHooks$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsLinkProjectsResponse200DeployHooks$Outbound, z.ZodTypeDef, GetProjectsLinkProjectsResponse200DeployHooks>;
    /** @deprecated use `GetProjectsLinkProjectsResponse200DeployHooks$Outbound` instead. */
    type Outbound = GetProjectsLinkProjectsResponse200DeployHooks$Outbound;
}
export declare function getProjectsLinkProjectsResponse200DeployHooksToJSON(getProjectsLinkProjectsResponse200DeployHooks: GetProjectsLinkProjectsResponse200DeployHooks): string;
export declare function getProjectsLinkProjectsResponse200DeployHooksFromJSON(jsonString: string): SafeParseResult<GetProjectsLinkProjectsResponse200DeployHooks, SDKValidationError>;
/** @internal */
export declare const GetProjectsLink4$inboundSchema: z.ZodType<GetProjectsLink4, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsLink4$Outbound = {
    projectId: string;
    projectName: string;
    projectNameWithNamespace: string;
    projectNamespace: string;
    projectOwnerId?: number | undefined;
    projectUrl: string;
    type: string;
    createdAt?: number | undefined;
    deployHooks: Array<GetProjectsLinkProjectsResponse200DeployHooks$Outbound>;
    gitCredentialId: string;
    updatedAt?: number | undefined;
    sourceless?: boolean | undefined;
    productionBranch: string;
};
/** @internal */
export declare const GetProjectsLink4$outboundSchema: z.ZodType<GetProjectsLink4$Outbound, z.ZodTypeDef, GetProjectsLink4>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsLink4$ {
    /** @deprecated use `GetProjectsLink4$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsLink4, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsLink4$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsLink4$Outbound, z.ZodTypeDef, GetProjectsLink4>;
    /** @deprecated use `GetProjectsLink4$Outbound` instead. */
    type Outbound = GetProjectsLink4$Outbound;
}
export declare function getProjectsLink4ToJSON(getProjectsLink4: GetProjectsLink4): string;
export declare function getProjectsLink4FromJSON(jsonString: string): SafeParseResult<GetProjectsLink4, SDKValidationError>;
/** @internal */
export declare const GetProjectsLinkProjectsResponseType$inboundSchema: z.ZodNativeEnum<typeof GetProjectsLinkProjectsResponseType>;
/** @internal */
export declare const GetProjectsLinkProjectsResponseType$outboundSchema: z.ZodNativeEnum<typeof GetProjectsLinkProjectsResponseType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsLinkProjectsResponseType$ {
    /** @deprecated use `GetProjectsLinkProjectsResponseType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly GithubCustomHost: "github-custom-host";
    }>;
    /** @deprecated use `GetProjectsLinkProjectsResponseType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly GithubCustomHost: "github-custom-host";
    }>;
}
/** @internal */
export declare const GetProjectsLinkProjectsResponseDeployHooks$inboundSchema: z.ZodType<GetProjectsLinkProjectsResponseDeployHooks, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsLinkProjectsResponseDeployHooks$Outbound = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};
/** @internal */
export declare const GetProjectsLinkProjectsResponseDeployHooks$outboundSchema: z.ZodType<GetProjectsLinkProjectsResponseDeployHooks$Outbound, z.ZodTypeDef, GetProjectsLinkProjectsResponseDeployHooks>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsLinkProjectsResponseDeployHooks$ {
    /** @deprecated use `GetProjectsLinkProjectsResponseDeployHooks$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsLinkProjectsResponseDeployHooks, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsLinkProjectsResponseDeployHooks$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsLinkProjectsResponseDeployHooks$Outbound, z.ZodTypeDef, GetProjectsLinkProjectsResponseDeployHooks>;
    /** @deprecated use `GetProjectsLinkProjectsResponseDeployHooks$Outbound` instead. */
    type Outbound = GetProjectsLinkProjectsResponseDeployHooks$Outbound;
}
export declare function getProjectsLinkProjectsResponseDeployHooksToJSON(getProjectsLinkProjectsResponseDeployHooks: GetProjectsLinkProjectsResponseDeployHooks): string;
export declare function getProjectsLinkProjectsResponseDeployHooksFromJSON(jsonString: string): SafeParseResult<GetProjectsLinkProjectsResponseDeployHooks, SDKValidationError>;
/** @internal */
export declare const GetProjectsLink3$inboundSchema: z.ZodType<GetProjectsLink3, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsLink3$Outbound = {
    org: string;
    repoOwnerId?: number | undefined;
    repo?: string | undefined;
    repoId?: number | undefined;
    type: string;
    host: string;
    createdAt?: number | undefined;
    deployHooks: Array<GetProjectsLinkProjectsResponseDeployHooks$Outbound>;
    gitCredentialId: string;
    updatedAt?: number | undefined;
    sourceless?: boolean | undefined;
    productionBranch: string;
};
/** @internal */
export declare const GetProjectsLink3$outboundSchema: z.ZodType<GetProjectsLink3$Outbound, z.ZodTypeDef, GetProjectsLink3>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsLink3$ {
    /** @deprecated use `GetProjectsLink3$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsLink3, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsLink3$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsLink3$Outbound, z.ZodTypeDef, GetProjectsLink3>;
    /** @deprecated use `GetProjectsLink3$Outbound` instead. */
    type Outbound = GetProjectsLink3$Outbound;
}
export declare function getProjectsLink3ToJSON(getProjectsLink3: GetProjectsLink3): string;
export declare function getProjectsLink3FromJSON(jsonString: string): SafeParseResult<GetProjectsLink3, SDKValidationError>;
/** @internal */
export declare const GetProjectsLinkProjectsType$inboundSchema: z.ZodNativeEnum<typeof GetProjectsLinkProjectsType>;
/** @internal */
export declare const GetProjectsLinkProjectsType$outboundSchema: z.ZodNativeEnum<typeof GetProjectsLinkProjectsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsLinkProjectsType$ {
    /** @deprecated use `GetProjectsLinkProjectsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly GithubLimited: "github-limited";
    }>;
    /** @deprecated use `GetProjectsLinkProjectsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly GithubLimited: "github-limited";
    }>;
}
/** @internal */
export declare const GetProjectsLinkProjectsDeployHooks$inboundSchema: z.ZodType<GetProjectsLinkProjectsDeployHooks, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsLinkProjectsDeployHooks$Outbound = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};
/** @internal */
export declare const GetProjectsLinkProjectsDeployHooks$outboundSchema: z.ZodType<GetProjectsLinkProjectsDeployHooks$Outbound, z.ZodTypeDef, GetProjectsLinkProjectsDeployHooks>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsLinkProjectsDeployHooks$ {
    /** @deprecated use `GetProjectsLinkProjectsDeployHooks$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsLinkProjectsDeployHooks, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsLinkProjectsDeployHooks$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsLinkProjectsDeployHooks$Outbound, z.ZodTypeDef, GetProjectsLinkProjectsDeployHooks>;
    /** @deprecated use `GetProjectsLinkProjectsDeployHooks$Outbound` instead. */
    type Outbound = GetProjectsLinkProjectsDeployHooks$Outbound;
}
export declare function getProjectsLinkProjectsDeployHooksToJSON(getProjectsLinkProjectsDeployHooks: GetProjectsLinkProjectsDeployHooks): string;
export declare function getProjectsLinkProjectsDeployHooksFromJSON(jsonString: string): SafeParseResult<GetProjectsLinkProjectsDeployHooks, SDKValidationError>;
/** @internal */
export declare const GetProjectsLink2$inboundSchema: z.ZodType<GetProjectsLink2, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsLink2$Outbound = {
    type: string;
    repo?: string | undefined;
    repoId?: number | undefined;
    updatedAt?: number | undefined;
    createdAt?: number | undefined;
    org: string;
    repoOwnerId?: number | undefined;
    deployHooks: Array<GetProjectsLinkProjectsDeployHooks$Outbound>;
    gitCredentialId: string;
    sourceless?: boolean | undefined;
    productionBranch: string;
};
/** @internal */
export declare const GetProjectsLink2$outboundSchema: z.ZodType<GetProjectsLink2$Outbound, z.ZodTypeDef, GetProjectsLink2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsLink2$ {
    /** @deprecated use `GetProjectsLink2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsLink2, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsLink2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsLink2$Outbound, z.ZodTypeDef, GetProjectsLink2>;
    /** @deprecated use `GetProjectsLink2$Outbound` instead. */
    type Outbound = GetProjectsLink2$Outbound;
}
export declare function getProjectsLink2ToJSON(getProjectsLink2: GetProjectsLink2): string;
export declare function getProjectsLink2FromJSON(jsonString: string): SafeParseResult<GetProjectsLink2, SDKValidationError>;
/** @internal */
export declare const GetProjectsLinkType$inboundSchema: z.ZodNativeEnum<typeof GetProjectsLinkType>;
/** @internal */
export declare const GetProjectsLinkType$outboundSchema: z.ZodNativeEnum<typeof GetProjectsLinkType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsLinkType$ {
    /** @deprecated use `GetProjectsLinkType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
    /** @deprecated use `GetProjectsLinkType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
}
/** @internal */
export declare const GetProjectsLinkDeployHooks$inboundSchema: z.ZodType<GetProjectsLinkDeployHooks, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsLinkDeployHooks$Outbound = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};
/** @internal */
export declare const GetProjectsLinkDeployHooks$outboundSchema: z.ZodType<GetProjectsLinkDeployHooks$Outbound, z.ZodTypeDef, GetProjectsLinkDeployHooks>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsLinkDeployHooks$ {
    /** @deprecated use `GetProjectsLinkDeployHooks$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsLinkDeployHooks, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsLinkDeployHooks$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsLinkDeployHooks$Outbound, z.ZodTypeDef, GetProjectsLinkDeployHooks>;
    /** @deprecated use `GetProjectsLinkDeployHooks$Outbound` instead. */
    type Outbound = GetProjectsLinkDeployHooks$Outbound;
}
export declare function getProjectsLinkDeployHooksToJSON(getProjectsLinkDeployHooks: GetProjectsLinkDeployHooks): string;
export declare function getProjectsLinkDeployHooksFromJSON(jsonString: string): SafeParseResult<GetProjectsLinkDeployHooks, SDKValidationError>;
/** @internal */
export declare const GetProjectsLink1$inboundSchema: z.ZodType<GetProjectsLink1, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsLink1$Outbound = {
    org: string;
    repoOwnerId?: number | undefined;
    repo?: string | undefined;
    repoId?: number | undefined;
    type: string;
    createdAt?: number | undefined;
    deployHooks: Array<GetProjectsLinkDeployHooks$Outbound>;
    gitCredentialId: string;
    updatedAt?: number | undefined;
    sourceless?: boolean | undefined;
    productionBranch: string;
};
/** @internal */
export declare const GetProjectsLink1$outboundSchema: z.ZodType<GetProjectsLink1$Outbound, z.ZodTypeDef, GetProjectsLink1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsLink1$ {
    /** @deprecated use `GetProjectsLink1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsLink1, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsLink1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsLink1$Outbound, z.ZodTypeDef, GetProjectsLink1>;
    /** @deprecated use `GetProjectsLink1$Outbound` instead. */
    type Outbound = GetProjectsLink1$Outbound;
}
export declare function getProjectsLink1ToJSON(getProjectsLink1: GetProjectsLink1): string;
export declare function getProjectsLink1FromJSON(jsonString: string): SafeParseResult<GetProjectsLink1, SDKValidationError>;
/** @internal */
export declare const GetProjectsLink$inboundSchema: z.ZodType<GetProjectsLink, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsLink$Outbound = GetProjectsLink4$Outbound | GetProjectsLink5$Outbound | GetProjectsLink3$Outbound | GetProjectsLink1$Outbound | GetProjectsLink2$Outbound;
/** @internal */
export declare const GetProjectsLink$outboundSchema: z.ZodType<GetProjectsLink$Outbound, z.ZodTypeDef, GetProjectsLink>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsLink$ {
    /** @deprecated use `GetProjectsLink$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsLink, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsLink$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsLink$Outbound, z.ZodTypeDef, GetProjectsLink>;
    /** @deprecated use `GetProjectsLink$Outbound` instead. */
    type Outbound = GetProjectsLink$Outbound;
}
export declare function getProjectsLinkToJSON(getProjectsLink: GetProjectsLink): string;
export declare function getProjectsLinkFromJSON(jsonString: string): SafeParseResult<GetProjectsLink, SDKValidationError>;
/** @internal */
export declare const GetProjectsMicrofrontends2$inboundSchema: z.ZodType<GetProjectsMicrofrontends2, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsMicrofrontends2$Outbound = {
    updatedAt: number;
    groupIds: Array<any>;
    enabled: boolean;
};
/** @internal */
export declare const GetProjectsMicrofrontends2$outboundSchema: z.ZodType<GetProjectsMicrofrontends2$Outbound, z.ZodTypeDef, GetProjectsMicrofrontends2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsMicrofrontends2$ {
    /** @deprecated use `GetProjectsMicrofrontends2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsMicrofrontends2, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsMicrofrontends2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsMicrofrontends2$Outbound, z.ZodTypeDef, GetProjectsMicrofrontends2>;
    /** @deprecated use `GetProjectsMicrofrontends2$Outbound` instead. */
    type Outbound = GetProjectsMicrofrontends2$Outbound;
}
export declare function getProjectsMicrofrontends2ToJSON(getProjectsMicrofrontends2: GetProjectsMicrofrontends2): string;
export declare function getProjectsMicrofrontends2FromJSON(jsonString: string): SafeParseResult<GetProjectsMicrofrontends2, SDKValidationError>;
/** @internal */
export declare const GetProjectsMicrofrontends1$inboundSchema: z.ZodType<GetProjectsMicrofrontends1, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsMicrofrontends1$Outbound = {
    updatedAt: number;
    groupIds: Array<string>;
    enabled: boolean;
    isDefaultApp?: boolean | undefined;
    defaultRoute?: string | undefined;
    routeObservabilityToThisProject?: boolean | undefined;
};
/** @internal */
export declare const GetProjectsMicrofrontends1$outboundSchema: z.ZodType<GetProjectsMicrofrontends1$Outbound, z.ZodTypeDef, GetProjectsMicrofrontends1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsMicrofrontends1$ {
    /** @deprecated use `GetProjectsMicrofrontends1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsMicrofrontends1, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsMicrofrontends1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsMicrofrontends1$Outbound, z.ZodTypeDef, GetProjectsMicrofrontends1>;
    /** @deprecated use `GetProjectsMicrofrontends1$Outbound` instead. */
    type Outbound = GetProjectsMicrofrontends1$Outbound;
}
export declare function getProjectsMicrofrontends1ToJSON(getProjectsMicrofrontends1: GetProjectsMicrofrontends1): string;
export declare function getProjectsMicrofrontends1FromJSON(jsonString: string): SafeParseResult<GetProjectsMicrofrontends1, SDKValidationError>;
/** @internal */
export declare const GetProjectsMicrofrontends$inboundSchema: z.ZodType<GetProjectsMicrofrontends, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsMicrofrontends$Outbound = GetProjectsMicrofrontends1$Outbound | GetProjectsMicrofrontends2$Outbound;
/** @internal */
export declare const GetProjectsMicrofrontends$outboundSchema: z.ZodType<GetProjectsMicrofrontends$Outbound, z.ZodTypeDef, GetProjectsMicrofrontends>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsMicrofrontends$ {
    /** @deprecated use `GetProjectsMicrofrontends$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsMicrofrontends, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsMicrofrontends$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsMicrofrontends$Outbound, z.ZodTypeDef, GetProjectsMicrofrontends>;
    /** @deprecated use `GetProjectsMicrofrontends$Outbound` instead. */
    type Outbound = GetProjectsMicrofrontends$Outbound;
}
export declare function getProjectsMicrofrontendsToJSON(getProjectsMicrofrontends: GetProjectsMicrofrontends): string;
export declare function getProjectsMicrofrontendsFromJSON(jsonString: string): SafeParseResult<GetProjectsMicrofrontends, SDKValidationError>;
/** @internal */
export declare const GetProjectsNodeVersion$inboundSchema: z.ZodNativeEnum<typeof GetProjectsNodeVersion>;
/** @internal */
export declare const GetProjectsNodeVersion$outboundSchema: z.ZodNativeEnum<typeof GetProjectsNodeVersion>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsNodeVersion$ {
    /** @deprecated use `GetProjectsNodeVersion$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly TwentyTwoDotX: "22.x";
        readonly TwentyDotX: "20.x";
        readonly EighteenDotX: "18.x";
        readonly SixteenDotX: "16.x";
        readonly FourteenDotX: "14.x";
        readonly TwelveDotX: "12.x";
        readonly TenDotX: "10.x";
        readonly EightDot10DotX: "8.10.x";
    }>;
    /** @deprecated use `GetProjectsNodeVersion$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly TwentyTwoDotX: "22.x";
        readonly TwentyDotX: "20.x";
        readonly EighteenDotX: "18.x";
        readonly SixteenDotX: "16.x";
        readonly FourteenDotX: "14.x";
        readonly TwelveDotX: "12.x";
        readonly TenDotX: "10.x";
        readonly EightDot10DotX: "8.10.x";
    }>;
}
/** @internal */
export declare const GetProjectsPaths$inboundSchema: z.ZodType<GetProjectsPaths, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsPaths$Outbound = {
    value: string;
};
/** @internal */
export declare const GetProjectsPaths$outboundSchema: z.ZodType<GetProjectsPaths$Outbound, z.ZodTypeDef, GetProjectsPaths>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsPaths$ {
    /** @deprecated use `GetProjectsPaths$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsPaths, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsPaths$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsPaths$Outbound, z.ZodTypeDef, GetProjectsPaths>;
    /** @deprecated use `GetProjectsPaths$Outbound` instead. */
    type Outbound = GetProjectsPaths$Outbound;
}
export declare function getProjectsPathsToJSON(getProjectsPaths: GetProjectsPaths): string;
export declare function getProjectsPathsFromJSON(jsonString: string): SafeParseResult<GetProjectsPaths, SDKValidationError>;
/** @internal */
export declare const GetProjectsOptionsAllowlist$inboundSchema: z.ZodType<GetProjectsOptionsAllowlist, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsOptionsAllowlist$Outbound = {
    paths: Array<GetProjectsPaths$Outbound>;
};
/** @internal */
export declare const GetProjectsOptionsAllowlist$outboundSchema: z.ZodType<GetProjectsOptionsAllowlist$Outbound, z.ZodTypeDef, GetProjectsOptionsAllowlist>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsOptionsAllowlist$ {
    /** @deprecated use `GetProjectsOptionsAllowlist$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsOptionsAllowlist, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsOptionsAllowlist$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsOptionsAllowlist$Outbound, z.ZodTypeDef, GetProjectsOptionsAllowlist>;
    /** @deprecated use `GetProjectsOptionsAllowlist$Outbound` instead. */
    type Outbound = GetProjectsOptionsAllowlist$Outbound;
}
export declare function getProjectsOptionsAllowlistToJSON(getProjectsOptionsAllowlist: GetProjectsOptionsAllowlist): string;
export declare function getProjectsOptionsAllowlistFromJSON(jsonString: string): SafeParseResult<GetProjectsOptionsAllowlist, SDKValidationError>;
/** @internal */
export declare const GetProjectsPasswordProtection$inboundSchema: z.ZodType<GetProjectsPasswordProtection, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsPasswordProtection$Outbound = {};
/** @internal */
export declare const GetProjectsPasswordProtection$outboundSchema: z.ZodType<GetProjectsPasswordProtection$Outbound, z.ZodTypeDef, GetProjectsPasswordProtection>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsPasswordProtection$ {
    /** @deprecated use `GetProjectsPasswordProtection$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsPasswordProtection, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsPasswordProtection$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsPasswordProtection$Outbound, z.ZodTypeDef, GetProjectsPasswordProtection>;
    /** @deprecated use `GetProjectsPasswordProtection$Outbound` instead. */
    type Outbound = GetProjectsPasswordProtection$Outbound;
}
export declare function getProjectsPasswordProtectionToJSON(getProjectsPasswordProtection: GetProjectsPasswordProtection): string;
export declare function getProjectsPasswordProtectionFromJSON(jsonString: string): SafeParseResult<GetProjectsPasswordProtection, SDKValidationError>;
/** @internal */
export declare const GetProjectsFunctionDefaultMemoryType$inboundSchema: z.ZodNativeEnum<typeof GetProjectsFunctionDefaultMemoryType>;
/** @internal */
export declare const GetProjectsFunctionDefaultMemoryType$outboundSchema: z.ZodNativeEnum<typeof GetProjectsFunctionDefaultMemoryType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsFunctionDefaultMemoryType$ {
    /** @deprecated use `GetProjectsFunctionDefaultMemoryType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly StandardLegacy: "standard_legacy";
        readonly Standard: "standard";
        readonly Performance: "performance";
    }>;
    /** @deprecated use `GetProjectsFunctionDefaultMemoryType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly StandardLegacy: "standard_legacy";
        readonly Standard: "standard";
        readonly Performance: "performance";
    }>;
}
/** @internal */
export declare const GetProjectsBuildMachineType$inboundSchema: z.ZodNativeEnum<typeof GetProjectsBuildMachineType>;
/** @internal */
export declare const GetProjectsBuildMachineType$outboundSchema: z.ZodNativeEnum<typeof GetProjectsBuildMachineType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsBuildMachineType$ {
    /** @deprecated use `GetProjectsBuildMachineType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Enhanced: "enhanced";
        readonly Turbo: "turbo";
    }>;
    /** @deprecated use `GetProjectsBuildMachineType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Enhanced: "enhanced";
        readonly Turbo: "turbo";
    }>;
}
/** @internal */
export declare const GetProjectsResourceConfig$inboundSchema: z.ZodType<GetProjectsResourceConfig, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsResourceConfig$Outbound = {
    elasticConcurrencyEnabled?: boolean | undefined;
    fluid?: boolean | undefined;
    functionDefaultRegions: Array<string>;
    functionDefaultTimeout?: number | undefined;
    functionDefaultMemoryType?: string | undefined;
    functionZeroConfigFailover?: boolean | undefined;
    buildMachineType?: string | undefined;
    isNSNBDisabled?: boolean | undefined;
};
/** @internal */
export declare const GetProjectsResourceConfig$outboundSchema: z.ZodType<GetProjectsResourceConfig$Outbound, z.ZodTypeDef, GetProjectsResourceConfig>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsResourceConfig$ {
    /** @deprecated use `GetProjectsResourceConfig$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsResourceConfig, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsResourceConfig$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsResourceConfig$Outbound, z.ZodTypeDef, GetProjectsResourceConfig>;
    /** @deprecated use `GetProjectsResourceConfig$Outbound` instead. */
    type Outbound = GetProjectsResourceConfig$Outbound;
}
export declare function getProjectsResourceConfigToJSON(getProjectsResourceConfig: GetProjectsResourceConfig): string;
export declare function getProjectsResourceConfigFromJSON(jsonString: string): SafeParseResult<GetProjectsResourceConfig, SDKValidationError>;
/** @internal */
export declare const GetProjectsRollbackDescription$inboundSchema: z.ZodType<GetProjectsRollbackDescription, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsRollbackDescription$Outbound = {
    userId: string;
    username: string;
    description: string;
    createdAt: number;
};
/** @internal */
export declare const GetProjectsRollbackDescription$outboundSchema: z.ZodType<GetProjectsRollbackDescription$Outbound, z.ZodTypeDef, GetProjectsRollbackDescription>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsRollbackDescription$ {
    /** @deprecated use `GetProjectsRollbackDescription$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsRollbackDescription, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsRollbackDescription$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsRollbackDescription$Outbound, z.ZodTypeDef, GetProjectsRollbackDescription>;
    /** @deprecated use `GetProjectsRollbackDescription$Outbound` instead. */
    type Outbound = GetProjectsRollbackDescription$Outbound;
}
export declare function getProjectsRollbackDescriptionToJSON(getProjectsRollbackDescription: GetProjectsRollbackDescription): string;
export declare function getProjectsRollbackDescriptionFromJSON(jsonString: string): SafeParseResult<GetProjectsRollbackDescription, SDKValidationError>;
/** @internal */
export declare const GetProjectsStages$inboundSchema: z.ZodType<GetProjectsStages, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsStages$Outbound = {
    targetPercentage: number;
    requireApproval?: boolean | undefined;
    duration?: number | undefined;
};
/** @internal */
export declare const GetProjectsStages$outboundSchema: z.ZodType<GetProjectsStages$Outbound, z.ZodTypeDef, GetProjectsStages>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsStages$ {
    /** @deprecated use `GetProjectsStages$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsStages, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsStages$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsStages$Outbound, z.ZodTypeDef, GetProjectsStages>;
    /** @deprecated use `GetProjectsStages$Outbound` instead. */
    type Outbound = GetProjectsStages$Outbound;
}
export declare function getProjectsStagesToJSON(getProjectsStages: GetProjectsStages): string;
export declare function getProjectsStagesFromJSON(jsonString: string): SafeParseResult<GetProjectsStages, SDKValidationError>;
/** @internal */
export declare const GetProjectsRollingRelease$inboundSchema: z.ZodType<GetProjectsRollingRelease, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsRollingRelease$Outbound = {
    target: string;
    stages?: Array<GetProjectsStages$Outbound> | null | undefined;
    canaryResponseHeader?: boolean | undefined;
};
/** @internal */
export declare const GetProjectsRollingRelease$outboundSchema: z.ZodType<GetProjectsRollingRelease$Outbound, z.ZodTypeDef, GetProjectsRollingRelease>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsRollingRelease$ {
    /** @deprecated use `GetProjectsRollingRelease$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsRollingRelease, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsRollingRelease$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsRollingRelease$Outbound, z.ZodTypeDef, GetProjectsRollingRelease>;
    /** @deprecated use `GetProjectsRollingRelease$Outbound` instead. */
    type Outbound = GetProjectsRollingRelease$Outbound;
}
export declare function getProjectsRollingReleaseToJSON(getProjectsRollingRelease: GetProjectsRollingRelease): string;
export declare function getProjectsRollingReleaseFromJSON(jsonString: string): SafeParseResult<GetProjectsRollingRelease, SDKValidationError>;
/** @internal */
export declare const GetProjectsProjectsFunctionDefaultMemoryType$inboundSchema: z.ZodNativeEnum<typeof GetProjectsProjectsFunctionDefaultMemoryType>;
/** @internal */
export declare const GetProjectsProjectsFunctionDefaultMemoryType$outboundSchema: z.ZodNativeEnum<typeof GetProjectsProjectsFunctionDefaultMemoryType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsProjectsFunctionDefaultMemoryType$ {
    /** @deprecated use `GetProjectsProjectsFunctionDefaultMemoryType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly StandardLegacy: "standard_legacy";
        readonly Standard: "standard";
        readonly Performance: "performance";
    }>;
    /** @deprecated use `GetProjectsProjectsFunctionDefaultMemoryType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly StandardLegacy: "standard_legacy";
        readonly Standard: "standard";
        readonly Performance: "performance";
    }>;
}
/** @internal */
export declare const GetProjectsProjectsBuildMachineType$inboundSchema: z.ZodNativeEnum<typeof GetProjectsProjectsBuildMachineType>;
/** @internal */
export declare const GetProjectsProjectsBuildMachineType$outboundSchema: z.ZodNativeEnum<typeof GetProjectsProjectsBuildMachineType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsProjectsBuildMachineType$ {
    /** @deprecated use `GetProjectsProjectsBuildMachineType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Enhanced: "enhanced";
        readonly Turbo: "turbo";
    }>;
    /** @deprecated use `GetProjectsProjectsBuildMachineType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Enhanced: "enhanced";
        readonly Turbo: "turbo";
    }>;
}
/** @internal */
export declare const GetProjectsDefaultResourceConfig$inboundSchema: z.ZodType<GetProjectsDefaultResourceConfig, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsDefaultResourceConfig$Outbound = {
    elasticConcurrencyEnabled?: boolean | undefined;
    fluid?: boolean | undefined;
    functionDefaultRegions: Array<string>;
    functionDefaultTimeout?: number | undefined;
    functionDefaultMemoryType?: string | undefined;
    functionZeroConfigFailover?: boolean | undefined;
    buildMachineType?: string | undefined;
    isNSNBDisabled?: boolean | undefined;
};
/** @internal */
export declare const GetProjectsDefaultResourceConfig$outboundSchema: z.ZodType<GetProjectsDefaultResourceConfig$Outbound, z.ZodTypeDef, GetProjectsDefaultResourceConfig>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsDefaultResourceConfig$ {
    /** @deprecated use `GetProjectsDefaultResourceConfig$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsDefaultResourceConfig, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsDefaultResourceConfig$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsDefaultResourceConfig$Outbound, z.ZodTypeDef, GetProjectsDefaultResourceConfig>;
    /** @deprecated use `GetProjectsDefaultResourceConfig$Outbound` instead. */
    type Outbound = GetProjectsDefaultResourceConfig$Outbound;
}
export declare function getProjectsDefaultResourceConfigToJSON(getProjectsDefaultResourceConfig: GetProjectsDefaultResourceConfig): string;
export declare function getProjectsDefaultResourceConfigFromJSON(jsonString: string): SafeParseResult<GetProjectsDefaultResourceConfig, SDKValidationError>;
/** @internal */
export declare const GetProjectsDeploymentType$inboundSchema: z.ZodNativeEnum<typeof GetProjectsDeploymentType>;
/** @internal */
export declare const GetProjectsDeploymentType$outboundSchema: z.ZodNativeEnum<typeof GetProjectsDeploymentType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsDeploymentType$ {
    /** @deprecated use `GetProjectsDeploymentType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Preview: "preview";
        readonly All: "all";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
    /** @deprecated use `GetProjectsDeploymentType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Preview: "preview";
        readonly All: "all";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
}
/** @internal */
export declare const GetProjectsSsoProtection$inboundSchema: z.ZodType<GetProjectsSsoProtection, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsSsoProtection$Outbound = {
    deploymentType: string;
};
/** @internal */
export declare const GetProjectsSsoProtection$outboundSchema: z.ZodType<GetProjectsSsoProtection$Outbound, z.ZodTypeDef, GetProjectsSsoProtection>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsSsoProtection$ {
    /** @deprecated use `GetProjectsSsoProtection$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsSsoProtection, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsSsoProtection$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsSsoProtection$Outbound, z.ZodTypeDef, GetProjectsSsoProtection>;
    /** @deprecated use `GetProjectsSsoProtection$Outbound` instead. */
    type Outbound = GetProjectsSsoProtection$Outbound;
}
export declare function getProjectsSsoProtectionToJSON(getProjectsSsoProtection: GetProjectsSsoProtection): string;
export declare function getProjectsSsoProtectionFromJSON(jsonString: string): SafeParseResult<GetProjectsSsoProtection, SDKValidationError>;
/** @internal */
export declare const GetProjectsProjectsAliasAssigned$inboundSchema: z.ZodType<GetProjectsProjectsAliasAssigned, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsProjectsAliasAssigned$Outbound = number | boolean;
/** @internal */
export declare const GetProjectsProjectsAliasAssigned$outboundSchema: z.ZodType<GetProjectsProjectsAliasAssigned$Outbound, z.ZodTypeDef, GetProjectsProjectsAliasAssigned>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsProjectsAliasAssigned$ {
    /** @deprecated use `GetProjectsProjectsAliasAssigned$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsProjectsAliasAssigned, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsProjectsAliasAssigned$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsProjectsAliasAssigned$Outbound, z.ZodTypeDef, GetProjectsProjectsAliasAssigned>;
    /** @deprecated use `GetProjectsProjectsAliasAssigned$Outbound` instead. */
    type Outbound = GetProjectsProjectsAliasAssigned$Outbound;
}
export declare function getProjectsProjectsAliasAssignedToJSON(getProjectsProjectsAliasAssigned: GetProjectsProjectsAliasAssigned): string;
export declare function getProjectsProjectsAliasAssignedFromJSON(jsonString: string): SafeParseResult<GetProjectsProjectsAliasAssigned, SDKValidationError>;
/** @internal */
export declare const GetProjectsProjectsAliasError$inboundSchema: z.ZodType<GetProjectsProjectsAliasError, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsProjectsAliasError$Outbound = {
    code: string;
    message: string;
};
/** @internal */
export declare const GetProjectsProjectsAliasError$outboundSchema: z.ZodType<GetProjectsProjectsAliasError$Outbound, z.ZodTypeDef, GetProjectsProjectsAliasError>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsProjectsAliasError$ {
    /** @deprecated use `GetProjectsProjectsAliasError$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsProjectsAliasError, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsProjectsAliasError$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsProjectsAliasError$Outbound, z.ZodTypeDef, GetProjectsProjectsAliasError>;
    /** @deprecated use `GetProjectsProjectsAliasError$Outbound` instead. */
    type Outbound = GetProjectsProjectsAliasError$Outbound;
}
export declare function getProjectsProjectsAliasErrorToJSON(getProjectsProjectsAliasError: GetProjectsProjectsAliasError): string;
export declare function getProjectsProjectsAliasErrorFromJSON(jsonString: string): SafeParseResult<GetProjectsProjectsAliasError, SDKValidationError>;
/** @internal */
export declare const GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsType$inboundSchema: z.ZodNativeEnum<typeof GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsType>;
/** @internal */
export declare const GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsType$outboundSchema: z.ZodNativeEnum<typeof GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsType$ {
    /** @deprecated use `GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly EndsWith: "endsWith";
        readonly StartsWith: "startsWith";
        readonly Equals: "equals";
    }>;
    /** @deprecated use `GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly EndsWith: "endsWith";
        readonly StartsWith: "startsWith";
        readonly Equals: "equals";
    }>;
}
/** @internal */
export declare const GetProjectsProjectsResponseBranchMatcher$inboundSchema: z.ZodType<GetProjectsProjectsResponseBranchMatcher, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsProjectsResponseBranchMatcher$Outbound = {
    type: string;
    pattern: string;
};
/** @internal */
export declare const GetProjectsProjectsResponseBranchMatcher$outboundSchema: z.ZodType<GetProjectsProjectsResponseBranchMatcher$Outbound, z.ZodTypeDef, GetProjectsProjectsResponseBranchMatcher>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsProjectsResponseBranchMatcher$ {
    /** @deprecated use `GetProjectsProjectsResponseBranchMatcher$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsProjectsResponseBranchMatcher, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsProjectsResponseBranchMatcher$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsProjectsResponseBranchMatcher$Outbound, z.ZodTypeDef, GetProjectsProjectsResponseBranchMatcher>;
    /** @deprecated use `GetProjectsProjectsResponseBranchMatcher$Outbound` instead. */
    type Outbound = GetProjectsProjectsResponseBranchMatcher$Outbound;
}
export declare function getProjectsProjectsResponseBranchMatcherToJSON(getProjectsProjectsResponseBranchMatcher: GetProjectsProjectsResponseBranchMatcher): string;
export declare function getProjectsProjectsResponseBranchMatcherFromJSON(jsonString: string): SafeParseResult<GetProjectsProjectsResponseBranchMatcher, SDKValidationError>;
/** @internal */
export declare const GetProjectsProjectsBuilds$inboundSchema: z.ZodType<GetProjectsProjectsBuilds, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsProjectsBuilds$Outbound = {
    use: string;
    src?: string | undefined;
    dest?: string | undefined;
};
/** @internal */
export declare const GetProjectsProjectsBuilds$outboundSchema: z.ZodType<GetProjectsProjectsBuilds$Outbound, z.ZodTypeDef, GetProjectsProjectsBuilds>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsProjectsBuilds$ {
    /** @deprecated use `GetProjectsProjectsBuilds$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsProjectsBuilds, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsProjectsBuilds$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsProjectsBuilds$Outbound, z.ZodTypeDef, GetProjectsProjectsBuilds>;
    /** @deprecated use `GetProjectsProjectsBuilds$Outbound` instead. */
    type Outbound = GetProjectsProjectsBuilds$Outbound;
}
export declare function getProjectsProjectsBuildsToJSON(getProjectsProjectsBuilds: GetProjectsProjectsBuilds): string;
export declare function getProjectsProjectsBuildsFromJSON(jsonString: string): SafeParseResult<GetProjectsProjectsBuilds, SDKValidationError>;
/** @internal */
export declare const GetProjectsProjectsChecksConclusion$inboundSchema: z.ZodNativeEnum<typeof GetProjectsProjectsChecksConclusion>;
/** @internal */
export declare const GetProjectsProjectsChecksConclusion$outboundSchema: z.ZodNativeEnum<typeof GetProjectsProjectsChecksConclusion>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsProjectsChecksConclusion$ {
    /** @deprecated use `GetProjectsProjectsChecksConclusion$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Succeeded: "succeeded";
        readonly Failed: "failed";
        readonly Skipped: "skipped";
        readonly Canceled: "canceled";
    }>;
    /** @deprecated use `GetProjectsProjectsChecksConclusion$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Succeeded: "succeeded";
        readonly Failed: "failed";
        readonly Skipped: "skipped";
        readonly Canceled: "canceled";
    }>;
}
/** @internal */
export declare const GetProjectsProjectsChecksState$inboundSchema: z.ZodNativeEnum<typeof GetProjectsProjectsChecksState>;
/** @internal */
export declare const GetProjectsProjectsChecksState$outboundSchema: z.ZodNativeEnum<typeof GetProjectsProjectsChecksState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsProjectsChecksState$ {
    /** @deprecated use `GetProjectsProjectsChecksState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Registered: "registered";
        readonly Running: "running";
        readonly Completed: "completed";
    }>;
    /** @deprecated use `GetProjectsProjectsChecksState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Registered: "registered";
        readonly Running: "running";
        readonly Completed: "completed";
    }>;
}
/** @internal */
export declare const GetProjectsProjectsCreator$inboundSchema: z.ZodType<GetProjectsProjectsCreator, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsProjectsCreator$Outbound = {
    email: string;
    githubLogin?: string | undefined;
    gitlabLogin?: string | undefined;
    uid: string;
    username: string;
};
/** @internal */
export declare const GetProjectsProjectsCreator$outboundSchema: z.ZodType<GetProjectsProjectsCreator$Outbound, z.ZodTypeDef, GetProjectsProjectsCreator>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsProjectsCreator$ {
    /** @deprecated use `GetProjectsProjectsCreator$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsProjectsCreator, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsProjectsCreator$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsProjectsCreator$Outbound, z.ZodTypeDef, GetProjectsProjectsCreator>;
    /** @deprecated use `GetProjectsProjectsCreator$Outbound` instead. */
    type Outbound = GetProjectsProjectsCreator$Outbound;
}
export declare function getProjectsProjectsCreatorToJSON(getProjectsProjectsCreator: GetProjectsProjectsCreator): string;
export declare function getProjectsProjectsCreatorFromJSON(jsonString: string): SafeParseResult<GetProjectsProjectsCreator, SDKValidationError>;
/** @internal */
export declare const GetProjectsProjectsOidcTokenClaims$inboundSchema: z.ZodType<GetProjectsProjectsOidcTokenClaims, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsProjectsOidcTokenClaims$Outbound = {
    iss: string;
    sub: string;
    scope: string;
    aud: string;
    owner: string;
    owner_id: string;
    project: string;
    project_id: string;
    environment: string;
};
/** @internal */
export declare const GetProjectsProjectsOidcTokenClaims$outboundSchema: z.ZodType<GetProjectsProjectsOidcTokenClaims$Outbound, z.ZodTypeDef, GetProjectsProjectsOidcTokenClaims>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsProjectsOidcTokenClaims$ {
    /** @deprecated use `GetProjectsProjectsOidcTokenClaims$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsProjectsOidcTokenClaims, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsProjectsOidcTokenClaims$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsProjectsOidcTokenClaims$Outbound, z.ZodTypeDef, GetProjectsProjectsOidcTokenClaims>;
    /** @deprecated use `GetProjectsProjectsOidcTokenClaims$Outbound` instead. */
    type Outbound = GetProjectsProjectsOidcTokenClaims$Outbound;
}
export declare function getProjectsProjectsOidcTokenClaimsToJSON(getProjectsProjectsOidcTokenClaims: GetProjectsProjectsOidcTokenClaims): string;
export declare function getProjectsProjectsOidcTokenClaimsFromJSON(jsonString: string): SafeParseResult<GetProjectsProjectsOidcTokenClaims, SDKValidationError>;
/** @internal */
export declare const GetProjectsProjectsPlan$inboundSchema: z.ZodNativeEnum<typeof GetProjectsProjectsPlan>;
/** @internal */
export declare const GetProjectsProjectsPlan$outboundSchema: z.ZodNativeEnum<typeof GetProjectsProjectsPlan>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsProjectsPlan$ {
    /** @deprecated use `GetProjectsProjectsPlan$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Pro: "pro";
        readonly Enterprise: "enterprise";
        readonly Hobby: "hobby";
    }>;
    /** @deprecated use `GetProjectsProjectsPlan$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Pro: "pro";
        readonly Enterprise: "enterprise";
        readonly Hobby: "hobby";
    }>;
}
/** @internal */
export declare const GetProjectsProjectsReadyState$inboundSchema: z.ZodNativeEnum<typeof GetProjectsProjectsReadyState>;
/** @internal */
export declare const GetProjectsProjectsReadyState$outboundSchema: z.ZodNativeEnum<typeof GetProjectsProjectsReadyState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsProjectsReadyState$ {
    /** @deprecated use `GetProjectsProjectsReadyState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Queued: "QUEUED";
        readonly Ready: "READY";
        readonly Canceled: "CANCELED";
    }>;
    /** @deprecated use `GetProjectsProjectsReadyState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Queued: "QUEUED";
        readonly Ready: "READY";
        readonly Canceled: "CANCELED";
    }>;
}
/** @internal */
export declare const GetProjectsProjectsReadySubstate$inboundSchema: z.ZodNativeEnum<typeof GetProjectsProjectsReadySubstate>;
/** @internal */
export declare const GetProjectsProjectsReadySubstate$outboundSchema: z.ZodNativeEnum<typeof GetProjectsProjectsReadySubstate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsProjectsReadySubstate$ {
    /** @deprecated use `GetProjectsProjectsReadySubstate$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Staged: "STAGED";
        readonly Rolling: "ROLLING";
        readonly Promoted: "PROMOTED";
    }>;
    /** @deprecated use `GetProjectsProjectsReadySubstate$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Staged: "STAGED";
        readonly Rolling: "ROLLING";
        readonly Promoted: "PROMOTED";
    }>;
}
/** @internal */
export declare const GetProjectsProjectsResponse200Type$inboundSchema: z.ZodNativeEnum<typeof GetProjectsProjectsResponse200Type>;
/** @internal */
export declare const GetProjectsProjectsResponse200Type$outboundSchema: z.ZodNativeEnum<typeof GetProjectsProjectsResponse200Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsProjectsResponse200Type$ {
    /** @deprecated use `GetProjectsProjectsResponse200Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Lambdas: "LAMBDAS";
    }>;
    /** @deprecated use `GetProjectsProjectsResponse200Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Lambdas: "LAMBDAS";
    }>;
}
/** @internal */
export declare const GetProjectsTargets$inboundSchema: z.ZodType<GetProjectsTargets, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsTargets$Outbound = {
    id: string;
    alias?: Array<string> | undefined;
    aliasAssigned?: number | boolean | null | undefined;
    aliasError?: GetProjectsProjectsAliasError$Outbound | null | undefined;
    aliasFinal?: string | null | undefined;
    automaticAliases?: Array<string> | undefined;
    branchMatcher?: GetProjectsProjectsResponseBranchMatcher$Outbound | undefined;
    buildingAt?: number | undefined;
    builds?: Array<GetProjectsProjectsBuilds$Outbound> | undefined;
    checksConclusion?: string | undefined;
    checksState?: string | undefined;
    connectBuildsEnabled?: boolean | undefined;
    connectConfigurationId?: string | undefined;
    createdAt: number;
    createdIn: string;
    creator: GetProjectsProjectsCreator$Outbound | null;
    deletedAt?: number | undefined;
    deploymentHostname: string;
    forced?: boolean | undefined;
    name: string;
    meta?: {
        [k: string]: string;
    } | undefined;
    monorepoManager?: string | null | undefined;
    oidcTokenClaims?: GetProjectsProjectsOidcTokenClaims$Outbound | undefined;
    plan: string;
    previewCommentsEnabled?: boolean | undefined;
    private: boolean;
    readyAt?: number | undefined;
    readyState: string;
    readySubstate?: string | undefined;
    requestedAt?: number | undefined;
    target?: string | null | undefined;
    teamId?: string | null | undefined;
    type: string;
    url: string;
    userId: string;
    withCache?: boolean | undefined;
};
/** @internal */
export declare const GetProjectsTargets$outboundSchema: z.ZodType<GetProjectsTargets$Outbound, z.ZodTypeDef, GetProjectsTargets>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsTargets$ {
    /** @deprecated use `GetProjectsTargets$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsTargets, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsTargets$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsTargets$Outbound, z.ZodTypeDef, GetProjectsTargets>;
    /** @deprecated use `GetProjectsTargets$Outbound` instead. */
    type Outbound = GetProjectsTargets$Outbound;
}
export declare function getProjectsTargetsToJSON(getProjectsTargets: GetProjectsTargets): string;
export declare function getProjectsTargetsFromJSON(jsonString: string): SafeParseResult<GetProjectsTargets, SDKValidationError>;
/** @internal */
export declare const GetProjectsPermissions$inboundSchema: z.ZodType<GetProjectsPermissions, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsPermissions$Outbound = {
    aliasProject?: Array<string> | undefined;
    aliasProtectionBypass?: Array<string> | undefined;
    buildMachine?: Array<string> | undefined;
    productionAliasProtectionBypass?: Array<string> | undefined;
    connectConfigurationLink?: Array<string> | undefined;
    dataCacheNamespace?: Array<string> | undefined;
    deployment?: Array<string> | undefined;
    deploymentBuildLogs?: Array<string> | undefined;
    deploymentCheck?: Array<string> | undefined;
    deploymentCheckPreview?: Array<string> | undefined;
    deploymentCheckReRunFromProductionBranch?: Array<string> | undefined;
    deploymentProductionGit?: Array<string> | undefined;
    deploymentV0?: Array<string> | undefined;
    deploymentPreview?: Array<string> | undefined;
    deploymentPrivate?: Array<string> | undefined;
    deploymentPromote?: Array<string> | undefined;
    deploymentRollback?: Array<string> | undefined;
    edgeCacheNamespace?: Array<string> | undefined;
    environments?: Array<string> | undefined;
    logs?: Array<string> | undefined;
    logsPreset?: Array<string> | undefined;
    passwordProtection?: Array<string> | undefined;
    optionsAllowlist?: Array<string> | undefined;
    job?: Array<string> | undefined;
    observabilityData?: Array<string> | undefined;
    onDemandBuild?: Array<string> | undefined;
    onDemandConcurrency?: Array<string> | undefined;
    project?: Array<string> | undefined;
    projectFromV0?: Array<string> | undefined;
    projectAccessGroup?: Array<string> | undefined;
    projectAnalyticsSampling?: Array<string> | undefined;
    projectCheck?: Array<string> | undefined;
    projectCheckRun?: Array<string> | undefined;
    projectDeploymentHook?: Array<string> | undefined;
    projectDomain?: Array<string> | undefined;
    projectDomainMove?: Array<string> | undefined;
    projectDomainCheckConfig?: Array<string> | undefined;
    projectEnvVars?: Array<string> | undefined;
    projectEnvVarsProduction?: Array<string> | undefined;
    projectEnvVarsUnownedByIntegration?: Array<string> | undefined;
    projectFlags?: Array<string> | undefined;
    projectId?: Array<string> | undefined;
    projectIntegrationConfiguration?: Array<string> | undefined;
    projectLink?: Array<string> | undefined;
    projectMember?: Array<string> | undefined;
    projectMonitoring?: Array<string> | undefined;
    projectPermissions?: Array<string> | undefined;
    projectProductionBranch?: Array<string> | undefined;
    projectTransfer?: Array<string> | undefined;
    projectTransferOut?: Array<string> | undefined;
    projectProtectionBypass?: Array<string> | undefined;
    projectUsage?: Array<string> | undefined;
    projectAnalyticsUsage?: Array<string> | undefined;
    projectSupportCase?: Array<string> | undefined;
    projectSupportCaseComment?: Array<string> | undefined;
    projectDeploymentExpiration?: Array<string> | undefined;
    projectRollingRelease?: Array<string> | undefined;
    projectTier?: Array<string> | undefined;
    projectOIDCToken?: Array<string> | undefined;
    seawallConfig?: Array<string> | undefined;
    skewProtection?: Array<string> | undefined;
    analytics?: Array<string> | undefined;
    trustedIps?: Array<string> | undefined;
    v0Chat?: Array<string> | undefined;
    webAnalytics?: Array<string> | undefined;
    sharedEnvVarConnection?: Array<string> | undefined;
    sonar?: Array<string> | undefined;
    oauth2Connection?: Array<string> | undefined;
    user?: Array<string> | undefined;
    userConnection?: Array<string> | undefined;
    userSudo?: Array<string> | undefined;
    webAuthn?: Array<string> | undefined;
    accessGroup?: Array<string> | undefined;
    aliasGlobal?: Array<string> | undefined;
    analyticsSampling?: Array<string> | undefined;
    analyticsUsage?: Array<string> | undefined;
    auditLog?: Array<string> | undefined;
    billingAddress?: Array<string> | undefined;
    billingInformation?: Array<string> | undefined;
    billingInvoice?: Array<string> | undefined;
    billingInvoiceEmailRecipient?: Array<string> | undefined;
    billingInvoiceLanguage?: Array<string> | undefined;
    billingPlan?: Array<string> | undefined;
    billingPurchaseOrder?: Array<string> | undefined;
    billingRefund?: Array<string> | undefined;
    billingTaxId?: Array<string> | undefined;
    blob?: Array<string> | undefined;
    budget?: Array<string> | undefined;
    cacheArtifact?: Array<string> | undefined;
    cacheArtifactUsageEvent?: Array<string> | undefined;
    codeChecks?: Array<string> | undefined;
    concurrentBuilds?: Array<string> | undefined;
    connect?: Array<string> | undefined;
    connectConfiguration?: Array<string> | undefined;
    defaultDeploymentProtection?: Array<string> | undefined;
    domain?: Array<string> | undefined;
    domainAcceptDelegation?: Array<string> | undefined;
    domainAuthCodes?: Array<string> | undefined;
    domainCertificate?: Array<string> | undefined;
    domainCheckConfig?: Array<string> | undefined;
    domainMove?: Array<string> | undefined;
    domainPurchase?: Array<string> | undefined;
    domainRecord?: Array<string> | undefined;
    domainTransferIn?: Array<string> | undefined;
    event?: Array<string> | undefined;
    ownEvent?: Array<string> | undefined;
    sensitiveEnvironmentVariablePolicy?: Array<string> | undefined;
    fileUpload?: Array<string> | undefined;
    flagsExplorerSubscription?: Array<string> | undefined;
    gitRepository?: Array<string> | undefined;
    ipBlocking?: Array<string> | undefined;
    imageOptimizationNewPrice?: Array<string> | undefined;
    integration?: Array<string> | undefined;
    integrationAccount?: Array<string> | undefined;
    integrationConfiguration?: Array<string> | undefined;
    integrationConfigurationTransfer?: Array<string> | undefined;
    integrationConfigurationProjects?: Array<string> | undefined;
    integrationVercelConfigurationOverride?: Array<string> | undefined;
    integrationConfigurationRole?: Array<string> | undefined;
    integrationSSOSession?: Array<string> | undefined;
    integrationResource?: Array<string> | undefined;
    integrationEvent?: Array<string> | undefined;
    integrationResourceSecrets?: Array<string> | undefined;
    integrationDeploymentAction?: Array<string> | undefined;
    marketplaceInstallationMember?: Array<string> | undefined;
    marketplaceBillingData?: Array<string> | undefined;
    marketplaceInvoice?: Array<string> | undefined;
    marketplaceSettings?: Array<string> | undefined;
    marketplaceExperimentationItem?: Array<string> | undefined;
    marketplaceExperimentationEdgeConfigData?: Array<string> | undefined;
    jobGlobal?: Array<string> | undefined;
    drain?: Array<string> | undefined;
    logDrain?: Array<string> | undefined;
    traceDrain?: Array<string> | undefined;
    Monitoring?: Array<string> | undefined;
    monitoringSettings?: Array<string> | undefined;
    monitoringQuery?: Array<string> | undefined;
    monitoringChart?: Array<string> | undefined;
    monitoringAlert?: Array<string> | undefined;
    notificationDeploymentFailed?: Array<string> | undefined;
    notificationDomainConfiguration?: Array<string> | undefined;
    notificationDomainExpire?: Array<string> | undefined;
    notificationDomainMoved?: Array<string> | undefined;
    notificationDomainPurchase?: Array<string> | undefined;
    notificationDomainRenewal?: Array<string> | undefined;
    notificationDomainTransfer?: Array<string> | undefined;
    notificationDomainUnverified?: Array<string> | undefined;
    NotificationMonitoringAlert?: Array<string> | undefined;
    notificationPaymentFailed?: Array<string> | undefined;
    notificationUsageAlert?: Array<string> | undefined;
    notificationPreferences?: Array<string> | undefined;
    notificationCustomerBudget?: Array<string> | undefined;
    notificationStatementOfReasons?: Array<string> | undefined;
    observabilityConfiguration?: Array<string> | undefined;
    alerts?: Array<string> | undefined;
    observabilityNotebook?: Array<string> | undefined;
    observabilityFunnel?: Array<string> | undefined;
    openTelemetryEndpoint?: Array<string> | undefined;
    vercelAppInstallation?: Array<string> | undefined;
    vercelAppInstallationRequest?: Array<string> | undefined;
    paymentMethod?: Array<string> | undefined;
    permissions?: Array<string> | undefined;
    postgres?: Array<string> | undefined;
    previewDeploymentSuffix?: Array<string> | undefined;
    proTrialOnboarding?: Array<string> | undefined;
    sharedEnvVars?: Array<string> | undefined;
    sharedEnvVarsProduction?: Array<string> | undefined;
    space?: Array<string> | undefined;
    spaceRun?: Array<string> | undefined;
    passwordProtectionInvoiceItem?: Array<string> | undefined;
    rateLimit?: Array<string> | undefined;
    redis?: Array<string> | undefined;
    repository?: Array<string> | undefined;
    remoteCaching?: Array<string> | undefined;
    samlConfig?: Array<string> | undefined;
    secret?: Array<string> | undefined;
    redisStoreTokenSet?: Array<string> | undefined;
    blobStoreTokenSet?: Array<string> | undefined;
    postgresStoreTokenSet?: Array<string> | undefined;
    integrationStoreTokenSet?: Array<string> | undefined;
    integrationResourceReplCommand?: Array<string> | undefined;
    storeTransfer?: Array<string> | undefined;
    supportCase?: Array<string> | undefined;
    supportCaseComment?: Array<string> | undefined;
    dataCacheBillingSettings?: Array<string> | undefined;
    team?: Array<string> | undefined;
    teamAccessRequest?: Array<string> | undefined;
    teamFellowMembership?: Array<string> | undefined;
    teamGitExclusivity?: Array<string> | undefined;
    teamInvite?: Array<string> | undefined;
    teamInviteCode?: Array<string> | undefined;
    teamJoin?: Array<string> | undefined;
    teamMemberMfaStatus?: Array<string> | undefined;
    teamMicrofrontends?: Array<string> | undefined;
    teamOwnMembership?: Array<string> | undefined;
    teamOwnMembershipDisconnectSAML?: Array<string> | undefined;
    token?: Array<string> | undefined;
    usage?: Array<string> | undefined;
    usageCycle?: Array<string> | undefined;
    vpcPeeringConnection?: Array<string> | undefined;
    webAnalyticsPlan?: Array<string> | undefined;
    edgeConfig?: Array<string> | undefined;
    edgeConfigItem?: Array<string> | undefined;
    edgeConfigSchema?: Array<string> | undefined;
    edgeConfigToken?: Array<string> | undefined;
    webhook?: Array<string> | undefined;
    "webhook-event"?: Array<string> | undefined;
    endpointVerification?: Array<string> | undefined;
    projectTransferIn?: Array<string> | undefined;
    oauth2Application?: Array<string> | undefined;
    vercelRun?: Array<string> | undefined;
    vercelRunExec?: Array<string> | undefined;
    apiKey?: Array<string> | undefined;
    apiKeyOwnedBySelf?: Array<string> | undefined;
};
/** @internal */
export declare const GetProjectsPermissions$outboundSchema: z.ZodType<GetProjectsPermissions$Outbound, z.ZodTypeDef, GetProjectsPermissions>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsPermissions$ {
    /** @deprecated use `GetProjectsPermissions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsPermissions, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsPermissions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsPermissions$Outbound, z.ZodTypeDef, GetProjectsPermissions>;
    /** @deprecated use `GetProjectsPermissions$Outbound` instead. */
    type Outbound = GetProjectsPermissions$Outbound;
}
export declare function getProjectsPermissionsToJSON(getProjectsPermissions: GetProjectsPermissions): string;
export declare function getProjectsPermissionsFromJSON(jsonString: string): SafeParseResult<GetProjectsPermissions, SDKValidationError>;
/** @internal */
export declare const GetProjectsLastRollbackTarget$inboundSchema: z.ZodType<GetProjectsLastRollbackTarget, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsLastRollbackTarget$Outbound = {};
/** @internal */
export declare const GetProjectsLastRollbackTarget$outboundSchema: z.ZodType<GetProjectsLastRollbackTarget$Outbound, z.ZodTypeDef, GetProjectsLastRollbackTarget>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsLastRollbackTarget$ {
    /** @deprecated use `GetProjectsLastRollbackTarget$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsLastRollbackTarget, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsLastRollbackTarget$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsLastRollbackTarget$Outbound, z.ZodTypeDef, GetProjectsLastRollbackTarget>;
    /** @deprecated use `GetProjectsLastRollbackTarget$Outbound` instead. */
    type Outbound = GetProjectsLastRollbackTarget$Outbound;
}
export declare function getProjectsLastRollbackTargetToJSON(getProjectsLastRollbackTarget: GetProjectsLastRollbackTarget): string;
export declare function getProjectsLastRollbackTargetFromJSON(jsonString: string): SafeParseResult<GetProjectsLastRollbackTarget, SDKValidationError>;
/** @internal */
export declare const GetProjectsJobStatus$inboundSchema: z.ZodNativeEnum<typeof GetProjectsJobStatus>;
/** @internal */
export declare const GetProjectsJobStatus$outboundSchema: z.ZodNativeEnum<typeof GetProjectsJobStatus>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsJobStatus$ {
    /** @deprecated use `GetProjectsJobStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Succeeded: "succeeded";
        readonly Failed: "failed";
        readonly Skipped: "skipped";
        readonly Pending: "pending";
        readonly InProgress: "in-progress";
    }>;
    /** @deprecated use `GetProjectsJobStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Succeeded: "succeeded";
        readonly Failed: "failed";
        readonly Skipped: "skipped";
        readonly Pending: "pending";
        readonly InProgress: "in-progress";
    }>;
}
/** @internal */
export declare const GetProjectsProjectsResponse200ApplicationJSONType$inboundSchema: z.ZodNativeEnum<typeof GetProjectsProjectsResponse200ApplicationJSONType>;
/** @internal */
export declare const GetProjectsProjectsResponse200ApplicationJSONType$outboundSchema: z.ZodNativeEnum<typeof GetProjectsProjectsResponse200ApplicationJSONType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsProjectsResponse200ApplicationJSONType$ {
    /** @deprecated use `GetProjectsProjectsResponse200ApplicationJSONType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Promote: "promote";
        readonly Rollback: "rollback";
    }>;
    /** @deprecated use `GetProjectsProjectsResponse200ApplicationJSONType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Promote: "promote";
        readonly Rollback: "rollback";
    }>;
}
/** @internal */
export declare const GetProjectsLastAliasRequest$inboundSchema: z.ZodType<GetProjectsLastAliasRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsLastAliasRequest$Outbound = {
    fromDeploymentId: string;
    toDeploymentId: string;
    fromRollingReleaseId?: string | undefined;
    jobStatus: string;
    requestedAt: number;
    type: string;
};
/** @internal */
export declare const GetProjectsLastAliasRequest$outboundSchema: z.ZodType<GetProjectsLastAliasRequest$Outbound, z.ZodTypeDef, GetProjectsLastAliasRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsLastAliasRequest$ {
    /** @deprecated use `GetProjectsLastAliasRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsLastAliasRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsLastAliasRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsLastAliasRequest$Outbound, z.ZodTypeDef, GetProjectsLastAliasRequest>;
    /** @deprecated use `GetProjectsLastAliasRequest$Outbound` instead. */
    type Outbound = GetProjectsLastAliasRequest$Outbound;
}
export declare function getProjectsLastAliasRequestToJSON(getProjectsLastAliasRequest: GetProjectsLastAliasRequest): string;
export declare function getProjectsLastAliasRequestFromJSON(jsonString: string): SafeParseResult<GetProjectsLastAliasRequest, SDKValidationError>;
/** @internal */
export declare const GetProjectsProtectionBypassProjectsScope$inboundSchema: z.ZodNativeEnum<typeof GetProjectsProtectionBypassProjectsScope>;
/** @internal */
export declare const GetProjectsProtectionBypassProjectsScope$outboundSchema: z.ZodNativeEnum<typeof GetProjectsProtectionBypassProjectsScope>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsProtectionBypassProjectsScope$ {
    /** @deprecated use `GetProjectsProtectionBypassProjectsScope$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly AutomationBypass: "automation-bypass";
    }>;
    /** @deprecated use `GetProjectsProtectionBypassProjectsScope$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly AutomationBypass: "automation-bypass";
    }>;
}
/** @internal */
export declare const GetProjectsProtectionBypass2$inboundSchema: z.ZodType<GetProjectsProtectionBypass2, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsProtectionBypass2$Outbound = {
    createdAt: number;
    createdBy: string;
    scope: string;
};
/** @internal */
export declare const GetProjectsProtectionBypass2$outboundSchema: z.ZodType<GetProjectsProtectionBypass2$Outbound, z.ZodTypeDef, GetProjectsProtectionBypass2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsProtectionBypass2$ {
    /** @deprecated use `GetProjectsProtectionBypass2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsProtectionBypass2, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsProtectionBypass2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsProtectionBypass2$Outbound, z.ZodTypeDef, GetProjectsProtectionBypass2>;
    /** @deprecated use `GetProjectsProtectionBypass2$Outbound` instead. */
    type Outbound = GetProjectsProtectionBypass2$Outbound;
}
export declare function getProjectsProtectionBypass2ToJSON(getProjectsProtectionBypass2: GetProjectsProtectionBypass2): string;
export declare function getProjectsProtectionBypass2FromJSON(jsonString: string): SafeParseResult<GetProjectsProtectionBypass2, SDKValidationError>;
/** @internal */
export declare const GetProjectsProtectionBypassScope$inboundSchema: z.ZodNativeEnum<typeof GetProjectsProtectionBypassScope>;
/** @internal */
export declare const GetProjectsProtectionBypassScope$outboundSchema: z.ZodNativeEnum<typeof GetProjectsProtectionBypassScope>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsProtectionBypassScope$ {
    /** @deprecated use `GetProjectsProtectionBypassScope$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly IntegrationAutomationBypass: "integration-automation-bypass";
    }>;
    /** @deprecated use `GetProjectsProtectionBypassScope$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly IntegrationAutomationBypass: "integration-automation-bypass";
    }>;
}
/** @internal */
export declare const GetProjectsProtectionBypass1$inboundSchema: z.ZodType<GetProjectsProtectionBypass1, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsProtectionBypass1$Outbound = {
    createdAt: number;
    createdBy: string;
    scope: string;
    integrationId: string;
    configurationId: string;
};
/** @internal */
export declare const GetProjectsProtectionBypass1$outboundSchema: z.ZodType<GetProjectsProtectionBypass1$Outbound, z.ZodTypeDef, GetProjectsProtectionBypass1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsProtectionBypass1$ {
    /** @deprecated use `GetProjectsProtectionBypass1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsProtectionBypass1, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsProtectionBypass1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsProtectionBypass1$Outbound, z.ZodTypeDef, GetProjectsProtectionBypass1>;
    /** @deprecated use `GetProjectsProtectionBypass1$Outbound` instead. */
    type Outbound = GetProjectsProtectionBypass1$Outbound;
}
export declare function getProjectsProtectionBypass1ToJSON(getProjectsProtectionBypass1: GetProjectsProtectionBypass1): string;
export declare function getProjectsProtectionBypass1FromJSON(jsonString: string): SafeParseResult<GetProjectsProtectionBypass1, SDKValidationError>;
/** @internal */
export declare const GetProjectsProtectionBypass$inboundSchema: z.ZodType<GetProjectsProtectionBypass, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsProtectionBypass$Outbound = GetProjectsProtectionBypass1$Outbound | GetProjectsProtectionBypass2$Outbound;
/** @internal */
export declare const GetProjectsProtectionBypass$outboundSchema: z.ZodType<GetProjectsProtectionBypass$Outbound, z.ZodTypeDef, GetProjectsProtectionBypass>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsProtectionBypass$ {
    /** @deprecated use `GetProjectsProtectionBypass$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsProtectionBypass, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsProtectionBypass$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsProtectionBypass$Outbound, z.ZodTypeDef, GetProjectsProtectionBypass>;
    /** @deprecated use `GetProjectsProtectionBypass$Outbound` instead. */
    type Outbound = GetProjectsProtectionBypass$Outbound;
}
export declare function getProjectsProtectionBypassToJSON(getProjectsProtectionBypass: GetProjectsProtectionBypass): string;
export declare function getProjectsProtectionBypassFromJSON(jsonString: string): SafeParseResult<GetProjectsProtectionBypass, SDKValidationError>;
/** @internal */
export declare const GetProjectsTrustedIpsProjectsDeploymentType$inboundSchema: z.ZodNativeEnum<typeof GetProjectsTrustedIpsProjectsDeploymentType>;
/** @internal */
export declare const GetProjectsTrustedIpsProjectsDeploymentType$outboundSchema: z.ZodNativeEnum<typeof GetProjectsTrustedIpsProjectsDeploymentType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsTrustedIpsProjectsDeploymentType$ {
    /** @deprecated use `GetProjectsTrustedIpsProjectsDeploymentType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Preview: "preview";
        readonly Production: "production";
        readonly All: "all";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
    /** @deprecated use `GetProjectsTrustedIpsProjectsDeploymentType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Preview: "preview";
        readonly Production: "production";
        readonly All: "all";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
}
/** @internal */
export declare const GetProjectsTrustedIps2$inboundSchema: z.ZodType<GetProjectsTrustedIps2, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsTrustedIps2$Outbound = {
    deploymentType: string;
};
/** @internal */
export declare const GetProjectsTrustedIps2$outboundSchema: z.ZodType<GetProjectsTrustedIps2$Outbound, z.ZodTypeDef, GetProjectsTrustedIps2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsTrustedIps2$ {
    /** @deprecated use `GetProjectsTrustedIps2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsTrustedIps2, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsTrustedIps2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsTrustedIps2$Outbound, z.ZodTypeDef, GetProjectsTrustedIps2>;
    /** @deprecated use `GetProjectsTrustedIps2$Outbound` instead. */
    type Outbound = GetProjectsTrustedIps2$Outbound;
}
export declare function getProjectsTrustedIps2ToJSON(getProjectsTrustedIps2: GetProjectsTrustedIps2): string;
export declare function getProjectsTrustedIps2FromJSON(jsonString: string): SafeParseResult<GetProjectsTrustedIps2, SDKValidationError>;
/** @internal */
export declare const GetProjectsTrustedIpsDeploymentType$inboundSchema: z.ZodNativeEnum<typeof GetProjectsTrustedIpsDeploymentType>;
/** @internal */
export declare const GetProjectsTrustedIpsDeploymentType$outboundSchema: z.ZodNativeEnum<typeof GetProjectsTrustedIpsDeploymentType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsTrustedIpsDeploymentType$ {
    /** @deprecated use `GetProjectsTrustedIpsDeploymentType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Preview: "preview";
        readonly Production: "production";
        readonly All: "all";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
    /** @deprecated use `GetProjectsTrustedIpsDeploymentType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Preview: "preview";
        readonly Production: "production";
        readonly All: "all";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
}
/** @internal */
export declare const GetProjectsTrustedIpsAddresses$inboundSchema: z.ZodType<GetProjectsTrustedIpsAddresses, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsTrustedIpsAddresses$Outbound = {
    value: string;
    note?: string | undefined;
};
/** @internal */
export declare const GetProjectsTrustedIpsAddresses$outboundSchema: z.ZodType<GetProjectsTrustedIpsAddresses$Outbound, z.ZodTypeDef, GetProjectsTrustedIpsAddresses>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsTrustedIpsAddresses$ {
    /** @deprecated use `GetProjectsTrustedIpsAddresses$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsTrustedIpsAddresses, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsTrustedIpsAddresses$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsTrustedIpsAddresses$Outbound, z.ZodTypeDef, GetProjectsTrustedIpsAddresses>;
    /** @deprecated use `GetProjectsTrustedIpsAddresses$Outbound` instead. */
    type Outbound = GetProjectsTrustedIpsAddresses$Outbound;
}
export declare function getProjectsTrustedIpsAddressesToJSON(getProjectsTrustedIpsAddresses: GetProjectsTrustedIpsAddresses): string;
export declare function getProjectsTrustedIpsAddressesFromJSON(jsonString: string): SafeParseResult<GetProjectsTrustedIpsAddresses, SDKValidationError>;
/** @internal */
export declare const GetProjectsTrustedIpsProtectionMode$inboundSchema: z.ZodNativeEnum<typeof GetProjectsTrustedIpsProtectionMode>;
/** @internal */
export declare const GetProjectsTrustedIpsProtectionMode$outboundSchema: z.ZodNativeEnum<typeof GetProjectsTrustedIpsProtectionMode>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsTrustedIpsProtectionMode$ {
    /** @deprecated use `GetProjectsTrustedIpsProtectionMode$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Additional: "additional";
        readonly Exclusive: "exclusive";
    }>;
    /** @deprecated use `GetProjectsTrustedIpsProtectionMode$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Additional: "additional";
        readonly Exclusive: "exclusive";
    }>;
}
/** @internal */
export declare const GetProjectsTrustedIps1$inboundSchema: z.ZodType<GetProjectsTrustedIps1, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsTrustedIps1$Outbound = {
    deploymentType: string;
    addresses: Array<GetProjectsTrustedIpsAddresses$Outbound>;
    protectionMode: string;
};
/** @internal */
export declare const GetProjectsTrustedIps1$outboundSchema: z.ZodType<GetProjectsTrustedIps1$Outbound, z.ZodTypeDef, GetProjectsTrustedIps1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsTrustedIps1$ {
    /** @deprecated use `GetProjectsTrustedIps1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsTrustedIps1, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsTrustedIps1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsTrustedIps1$Outbound, z.ZodTypeDef, GetProjectsTrustedIps1>;
    /** @deprecated use `GetProjectsTrustedIps1$Outbound` instead. */
    type Outbound = GetProjectsTrustedIps1$Outbound;
}
export declare function getProjectsTrustedIps1ToJSON(getProjectsTrustedIps1: GetProjectsTrustedIps1): string;
export declare function getProjectsTrustedIps1FromJSON(jsonString: string): SafeParseResult<GetProjectsTrustedIps1, SDKValidationError>;
/** @internal */
export declare const GetProjectsTrustedIps$inboundSchema: z.ZodType<GetProjectsTrustedIps, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsTrustedIps$Outbound = GetProjectsTrustedIps1$Outbound | GetProjectsTrustedIps2$Outbound;
/** @internal */
export declare const GetProjectsTrustedIps$outboundSchema: z.ZodType<GetProjectsTrustedIps$Outbound, z.ZodTypeDef, GetProjectsTrustedIps>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsTrustedIps$ {
    /** @deprecated use `GetProjectsTrustedIps$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsTrustedIps, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsTrustedIps$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsTrustedIps$Outbound, z.ZodTypeDef, GetProjectsTrustedIps>;
    /** @deprecated use `GetProjectsTrustedIps$Outbound` instead. */
    type Outbound = GetProjectsTrustedIps$Outbound;
}
export declare function getProjectsTrustedIpsToJSON(getProjectsTrustedIps: GetProjectsTrustedIps): string;
export declare function getProjectsTrustedIpsFromJSON(jsonString: string): SafeParseResult<GetProjectsTrustedIps, SDKValidationError>;
/** @internal */
export declare const GetProjectsGitComments$inboundSchema: z.ZodType<GetProjectsGitComments, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsGitComments$Outbound = {
    onPullRequest: boolean;
    onCommit: boolean;
};
/** @internal */
export declare const GetProjectsGitComments$outboundSchema: z.ZodType<GetProjectsGitComments$Outbound, z.ZodTypeDef, GetProjectsGitComments>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsGitComments$ {
    /** @deprecated use `GetProjectsGitComments$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsGitComments, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsGitComments$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsGitComments$Outbound, z.ZodTypeDef, GetProjectsGitComments>;
    /** @deprecated use `GetProjectsGitComments$Outbound` instead. */
    type Outbound = GetProjectsGitComments$Outbound;
}
export declare function getProjectsGitCommentsToJSON(getProjectsGitComments: GetProjectsGitComments): string;
export declare function getProjectsGitCommentsFromJSON(jsonString: string): SafeParseResult<GetProjectsGitComments, SDKValidationError>;
/** @internal */
export declare const GetProjectsCreateDeployments$inboundSchema: z.ZodNativeEnum<typeof GetProjectsCreateDeployments>;
/** @internal */
export declare const GetProjectsCreateDeployments$outboundSchema: z.ZodNativeEnum<typeof GetProjectsCreateDeployments>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsCreateDeployments$ {
    /** @deprecated use `GetProjectsCreateDeployments$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Enabled: "enabled";
        readonly Disabled: "disabled";
    }>;
    /** @deprecated use `GetProjectsCreateDeployments$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Enabled: "enabled";
        readonly Disabled: "disabled";
    }>;
}
/** @internal */
export declare const GetProjectsGitProviderOptions$inboundSchema: z.ZodType<GetProjectsGitProviderOptions, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsGitProviderOptions$Outbound = {
    createDeployments: string;
    disableRepositoryDispatchEvents?: boolean | undefined;
};
/** @internal */
export declare const GetProjectsGitProviderOptions$outboundSchema: z.ZodType<GetProjectsGitProviderOptions$Outbound, z.ZodTypeDef, GetProjectsGitProviderOptions>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsGitProviderOptions$ {
    /** @deprecated use `GetProjectsGitProviderOptions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsGitProviderOptions, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsGitProviderOptions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsGitProviderOptions$Outbound, z.ZodTypeDef, GetProjectsGitProviderOptions>;
    /** @deprecated use `GetProjectsGitProviderOptions$Outbound` instead. */
    type Outbound = GetProjectsGitProviderOptions$Outbound;
}
export declare function getProjectsGitProviderOptionsToJSON(getProjectsGitProviderOptions: GetProjectsGitProviderOptions): string;
export declare function getProjectsGitProviderOptionsFromJSON(jsonString: string): SafeParseResult<GetProjectsGitProviderOptions, SDKValidationError>;
/** @internal */
export declare const GetProjectsWebAnalytics$inboundSchema: z.ZodType<GetProjectsWebAnalytics, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsWebAnalytics$Outbound = {
    id: string;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    enabledAt?: number | undefined;
    hasData?: boolean | undefined;
};
/** @internal */
export declare const GetProjectsWebAnalytics$outboundSchema: z.ZodType<GetProjectsWebAnalytics$Outbound, z.ZodTypeDef, GetProjectsWebAnalytics>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsWebAnalytics$ {
    /** @deprecated use `GetProjectsWebAnalytics$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsWebAnalytics, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsWebAnalytics$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsWebAnalytics$Outbound, z.ZodTypeDef, GetProjectsWebAnalytics>;
    /** @deprecated use `GetProjectsWebAnalytics$Outbound` instead. */
    type Outbound = GetProjectsWebAnalytics$Outbound;
}
export declare function getProjectsWebAnalyticsToJSON(getProjectsWebAnalytics: GetProjectsWebAnalytics): string;
export declare function getProjectsWebAnalyticsFromJSON(jsonString: string): SafeParseResult<GetProjectsWebAnalytics, SDKValidationError>;
/** @internal */
export declare const GetProjectsProjectsResponse200Action$inboundSchema: z.ZodNativeEnum<typeof GetProjectsProjectsResponse200Action>;
/** @internal */
export declare const GetProjectsProjectsResponse200Action$outboundSchema: z.ZodNativeEnum<typeof GetProjectsProjectsResponse200Action>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsProjectsResponse200Action$ {
    /** @deprecated use `GetProjectsProjectsResponse200Action$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Log: "log";
        readonly Challenge: "challenge";
        readonly Deny: "deny";
    }>;
    /** @deprecated use `GetProjectsProjectsResponse200Action$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Log: "log";
        readonly Challenge: "challenge";
        readonly Deny: "deny";
    }>;
}
/** @internal */
export declare const GetProjectsBotFilter$inboundSchema: z.ZodType<GetProjectsBotFilter, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsBotFilter$Outbound = {
    active: boolean;
    action?: string | undefined;
};
/** @internal */
export declare const GetProjectsBotFilter$outboundSchema: z.ZodType<GetProjectsBotFilter$Outbound, z.ZodTypeDef, GetProjectsBotFilter>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsBotFilter$ {
    /** @deprecated use `GetProjectsBotFilter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsBotFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsBotFilter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsBotFilter$Outbound, z.ZodTypeDef, GetProjectsBotFilter>;
    /** @deprecated use `GetProjectsBotFilter$Outbound` instead. */
    type Outbound = GetProjectsBotFilter$Outbound;
}
export declare function getProjectsBotFilterToJSON(getProjectsBotFilter: GetProjectsBotFilter): string;
export declare function getProjectsBotFilterFromJSON(jsonString: string): SafeParseResult<GetProjectsBotFilter, SDKValidationError>;
/** @internal */
export declare const GetProjectsProjectsAction$inboundSchema: z.ZodNativeEnum<typeof GetProjectsProjectsAction>;
/** @internal */
export declare const GetProjectsProjectsAction$outboundSchema: z.ZodNativeEnum<typeof GetProjectsProjectsAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsProjectsAction$ {
    /** @deprecated use `GetProjectsProjectsAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Log: "log";
        readonly Challenge: "challenge";
        readonly Deny: "deny";
    }>;
    /** @deprecated use `GetProjectsProjectsAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Log: "log";
        readonly Challenge: "challenge";
        readonly Deny: "deny";
    }>;
}
/** @internal */
export declare const GetProjectsAiBots$inboundSchema: z.ZodType<GetProjectsAiBots, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsAiBots$Outbound = {
    active: boolean;
    action?: string | undefined;
};
/** @internal */
export declare const GetProjectsAiBots$outboundSchema: z.ZodType<GetProjectsAiBots$Outbound, z.ZodTypeDef, GetProjectsAiBots>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsAiBots$ {
    /** @deprecated use `GetProjectsAiBots$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsAiBots, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsAiBots$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsAiBots$Outbound, z.ZodTypeDef, GetProjectsAiBots>;
    /** @deprecated use `GetProjectsAiBots$Outbound` instead. */
    type Outbound = GetProjectsAiBots$Outbound;
}
export declare function getProjectsAiBotsToJSON(getProjectsAiBots: GetProjectsAiBots): string;
export declare function getProjectsAiBotsFromJSON(jsonString: string): SafeParseResult<GetProjectsAiBots, SDKValidationError>;
/** @internal */
export declare const GetProjectsProjectsResponseAction$inboundSchema: z.ZodNativeEnum<typeof GetProjectsProjectsResponseAction>;
/** @internal */
export declare const GetProjectsProjectsResponseAction$outboundSchema: z.ZodNativeEnum<typeof GetProjectsProjectsResponseAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsProjectsResponseAction$ {
    /** @deprecated use `GetProjectsProjectsResponseAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Log: "log";
        readonly Challenge: "challenge";
        readonly Deny: "deny";
    }>;
    /** @deprecated use `GetProjectsProjectsResponseAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Log: "log";
        readonly Challenge: "challenge";
        readonly Deny: "deny";
    }>;
}
/** @internal */
export declare const GetProjectsOwasp$inboundSchema: z.ZodType<GetProjectsOwasp, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsOwasp$Outbound = {
    active: boolean;
    action?: string | undefined;
};
/** @internal */
export declare const GetProjectsOwasp$outboundSchema: z.ZodType<GetProjectsOwasp$Outbound, z.ZodTypeDef, GetProjectsOwasp>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsOwasp$ {
    /** @deprecated use `GetProjectsOwasp$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsOwasp, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsOwasp$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsOwasp$Outbound, z.ZodTypeDef, GetProjectsOwasp>;
    /** @deprecated use `GetProjectsOwasp$Outbound` instead. */
    type Outbound = GetProjectsOwasp$Outbound;
}
export declare function getProjectsOwaspToJSON(getProjectsOwasp: GetProjectsOwasp): string;
export declare function getProjectsOwaspFromJSON(jsonString: string): SafeParseResult<GetProjectsOwasp, SDKValidationError>;
/** @internal */
export declare const GetProjectsManagedRules$inboundSchema: z.ZodType<GetProjectsManagedRules, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsManagedRules$Outbound = {
    bot_filter: GetProjectsBotFilter$Outbound;
    ai_bots: GetProjectsAiBots$Outbound;
    owasp: GetProjectsOwasp$Outbound;
};
/** @internal */
export declare const GetProjectsManagedRules$outboundSchema: z.ZodType<GetProjectsManagedRules$Outbound, z.ZodTypeDef, GetProjectsManagedRules>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsManagedRules$ {
    /** @deprecated use `GetProjectsManagedRules$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsManagedRules, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsManagedRules$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsManagedRules$Outbound, z.ZodTypeDef, GetProjectsManagedRules>;
    /** @deprecated use `GetProjectsManagedRules$Outbound` instead. */
    type Outbound = GetProjectsManagedRules$Outbound;
}
export declare function getProjectsManagedRulesToJSON(getProjectsManagedRules: GetProjectsManagedRules): string;
export declare function getProjectsManagedRulesFromJSON(jsonString: string): SafeParseResult<GetProjectsManagedRules, SDKValidationError>;
/** @internal */
export declare const GetProjectsSecurity$inboundSchema: z.ZodType<GetProjectsSecurity, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsSecurity$Outbound = {
    attackModeEnabled?: boolean | undefined;
    attackModeUpdatedAt?: number | undefined;
    firewallEnabled?: boolean | undefined;
    firewallUpdatedAt?: number | undefined;
    attackModeActiveUntil?: number | null | undefined;
    firewallConfigVersion?: number | undefined;
    firewallSeawallEnabled?: boolean | undefined;
    ja3Enabled?: boolean | undefined;
    ja4Enabled?: boolean | undefined;
    firewallBypassIps?: Array<string> | undefined;
    managedRules?: GetProjectsManagedRules$Outbound | null | undefined;
    botIdEnabled?: boolean | undefined;
};
/** @internal */
export declare const GetProjectsSecurity$outboundSchema: z.ZodType<GetProjectsSecurity$Outbound, z.ZodTypeDef, GetProjectsSecurity>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsSecurity$ {
    /** @deprecated use `GetProjectsSecurity$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsSecurity, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsSecurity$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsSecurity$Outbound, z.ZodTypeDef, GetProjectsSecurity>;
    /** @deprecated use `GetProjectsSecurity$Outbound` instead. */
    type Outbound = GetProjectsSecurity$Outbound;
}
export declare function getProjectsSecurityToJSON(getProjectsSecurity: GetProjectsSecurity): string;
export declare function getProjectsSecurityFromJSON(jsonString: string): SafeParseResult<GetProjectsSecurity, SDKValidationError>;
/** @internal */
export declare const GetProjectsIssuerMode$inboundSchema: z.ZodNativeEnum<typeof GetProjectsIssuerMode>;
/** @internal */
export declare const GetProjectsIssuerMode$outboundSchema: z.ZodNativeEnum<typeof GetProjectsIssuerMode>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsIssuerMode$ {
    /** @deprecated use `GetProjectsIssuerMode$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Team: "team";
        readonly Global: "global";
    }>;
    /** @deprecated use `GetProjectsIssuerMode$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Team: "team";
        readonly Global: "global";
    }>;
}
/** @internal */
export declare const GetProjectsOidcTokenConfig$inboundSchema: z.ZodType<GetProjectsOidcTokenConfig, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsOidcTokenConfig$Outbound = {
    enabled?: boolean | undefined;
    issuerMode?: string | undefined;
};
/** @internal */
export declare const GetProjectsOidcTokenConfig$outboundSchema: z.ZodType<GetProjectsOidcTokenConfig$Outbound, z.ZodTypeDef, GetProjectsOidcTokenConfig>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsOidcTokenConfig$ {
    /** @deprecated use `GetProjectsOidcTokenConfig$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsOidcTokenConfig, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsOidcTokenConfig$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsOidcTokenConfig$Outbound, z.ZodTypeDef, GetProjectsOidcTokenConfig>;
    /** @deprecated use `GetProjectsOidcTokenConfig$Outbound` instead. */
    type Outbound = GetProjectsOidcTokenConfig$Outbound;
}
export declare function getProjectsOidcTokenConfigToJSON(getProjectsOidcTokenConfig: GetProjectsOidcTokenConfig): string;
export declare function getProjectsOidcTokenConfigFromJSON(jsonString: string): SafeParseResult<GetProjectsOidcTokenConfig, SDKValidationError>;
/** @internal */
export declare const GetProjectsTier$inboundSchema: z.ZodNativeEnum<typeof GetProjectsTier>;
/** @internal */
export declare const GetProjectsTier$outboundSchema: z.ZodNativeEnum<typeof GetProjectsTier>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsTier$ {
    /** @deprecated use `GetProjectsTier$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Standard: "standard";
        readonly Advanced: "advanced";
        readonly Critical: "critical";
    }>;
    /** @deprecated use `GetProjectsTier$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Standard: "standard";
        readonly Advanced: "advanced";
        readonly Critical: "critical";
    }>;
}
/** @internal */
export declare const GetProjectsFeatures$inboundSchema: z.ZodType<GetProjectsFeatures, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsFeatures$Outbound = {
    webAnalytics?: boolean | undefined;
};
/** @internal */
export declare const GetProjectsFeatures$outboundSchema: z.ZodType<GetProjectsFeatures$Outbound, z.ZodTypeDef, GetProjectsFeatures>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsFeatures$ {
    /** @deprecated use `GetProjectsFeatures$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsFeatures, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsFeatures$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsFeatures$Outbound, z.ZodTypeDef, GetProjectsFeatures>;
    /** @deprecated use `GetProjectsFeatures$Outbound` instead. */
    type Outbound = GetProjectsFeatures$Outbound;
}
export declare function getProjectsFeaturesToJSON(getProjectsFeatures: GetProjectsFeatures): string;
export declare function getProjectsFeaturesFromJSON(jsonString: string): SafeParseResult<GetProjectsFeatures, SDKValidationError>;
/** @internal */
export declare const GetProjectsHistory$inboundSchema: z.ZodType<GetProjectsHistory, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsHistory$Outbound = {
    scanner: string;
    reason: string;
    by: string;
    byId: string;
    at: number;
};
/** @internal */
export declare const GetProjectsHistory$outboundSchema: z.ZodType<GetProjectsHistory$Outbound, z.ZodTypeDef, GetProjectsHistory>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsHistory$ {
    /** @deprecated use `GetProjectsHistory$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsHistory, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsHistory$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsHistory$Outbound, z.ZodTypeDef, GetProjectsHistory>;
    /** @deprecated use `GetProjectsHistory$Outbound` instead. */
    type Outbound = GetProjectsHistory$Outbound;
}
export declare function getProjectsHistoryToJSON(getProjectsHistory: GetProjectsHistory): string;
export declare function getProjectsHistoryFromJSON(jsonString: string): SafeParseResult<GetProjectsHistory, SDKValidationError>;
/** @internal */
export declare const GetProjectsAction$inboundSchema: z.ZodNativeEnum<typeof GetProjectsAction>;
/** @internal */
export declare const GetProjectsAction$outboundSchema: z.ZodNativeEnum<typeof GetProjectsAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsAction$ {
    /** @deprecated use `GetProjectsAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Blocked: "blocked";
    }>;
    /** @deprecated use `GetProjectsAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Blocked: "blocked";
    }>;
}
/** @internal */
export declare const GetProjectsBlock$inboundSchema: z.ZodType<GetProjectsBlock, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsBlock$Outbound = {
    action: string;
    reason: string;
    statusCode: number;
    createdAt: number;
    caseId?: string | undefined;
    actor?: string | undefined;
    comment?: string | undefined;
    isCascading?: boolean | undefined;
};
/** @internal */
export declare const GetProjectsBlock$outboundSchema: z.ZodType<GetProjectsBlock$Outbound, z.ZodTypeDef, GetProjectsBlock>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsBlock$ {
    /** @deprecated use `GetProjectsBlock$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsBlock, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsBlock$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsBlock$Outbound, z.ZodTypeDef, GetProjectsBlock>;
    /** @deprecated use `GetProjectsBlock$Outbound` instead. */
    type Outbound = GetProjectsBlock$Outbound;
}
export declare function getProjectsBlockToJSON(getProjectsBlock: GetProjectsBlock): string;
export declare function getProjectsBlockFromJSON(jsonString: string): SafeParseResult<GetProjectsBlock, SDKValidationError>;
/** @internal */
export declare const GetProjectsBlockHistoryProjectsResponse200Action$inboundSchema: z.ZodNativeEnum<typeof GetProjectsBlockHistoryProjectsResponse200Action>;
/** @internal */
export declare const GetProjectsBlockHistoryProjectsResponse200Action$outboundSchema: z.ZodNativeEnum<typeof GetProjectsBlockHistoryProjectsResponse200Action>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsBlockHistoryProjectsResponse200Action$ {
    /** @deprecated use `GetProjectsBlockHistoryProjectsResponse200Action$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly RouteUnblocked: "route-unblocked";
    }>;
    /** @deprecated use `GetProjectsBlockHistoryProjectsResponse200Action$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly RouteUnblocked: "route-unblocked";
    }>;
}
/** @internal */
export declare const GetProjectsHasProjectsResponse200Type$inboundSchema: z.ZodNativeEnum<typeof GetProjectsHasProjectsResponse200Type>;
/** @internal */
export declare const GetProjectsHasProjectsResponse200Type$outboundSchema: z.ZodNativeEnum<typeof GetProjectsHasProjectsResponse200Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsHasProjectsResponse200Type$ {
    /** @deprecated use `GetProjectsHasProjectsResponse200Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Host: "host";
    }>;
    /** @deprecated use `GetProjectsHasProjectsResponse200Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Host: "host";
    }>;
}
/** @internal */
export declare const GetProjectsHasProjectsResponse200Value$inboundSchema: z.ZodType<GetProjectsHasProjectsResponse200Value, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsHasProjectsResponse200Value$Outbound = {
    eq: string;
};
/** @internal */
export declare const GetProjectsHasProjectsResponse200Value$outboundSchema: z.ZodType<GetProjectsHasProjectsResponse200Value$Outbound, z.ZodTypeDef, GetProjectsHasProjectsResponse200Value>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsHasProjectsResponse200Value$ {
    /** @deprecated use `GetProjectsHasProjectsResponse200Value$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsHasProjectsResponse200Value, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsHasProjectsResponse200Value$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsHasProjectsResponse200Value$Outbound, z.ZodTypeDef, GetProjectsHasProjectsResponse200Value>;
    /** @deprecated use `GetProjectsHasProjectsResponse200Value$Outbound` instead. */
    type Outbound = GetProjectsHasProjectsResponse200Value$Outbound;
}
export declare function getProjectsHasProjectsResponse200ValueToJSON(getProjectsHasProjectsResponse200Value: GetProjectsHasProjectsResponse200Value): string;
export declare function getProjectsHasProjectsResponse200ValueFromJSON(jsonString: string): SafeParseResult<GetProjectsHasProjectsResponse200Value, SDKValidationError>;
/** @internal */
export declare const GetProjectsHasProjects2$inboundSchema: z.ZodType<GetProjectsHasProjects2, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsHasProjects2$Outbound = {
    type: string;
    value: GetProjectsHasProjectsResponse200Value$Outbound;
};
/** @internal */
export declare const GetProjectsHasProjects2$outboundSchema: z.ZodType<GetProjectsHasProjects2$Outbound, z.ZodTypeDef, GetProjectsHasProjects2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsHasProjects2$ {
    /** @deprecated use `GetProjectsHasProjects2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsHasProjects2, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsHasProjects2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsHasProjects2$Outbound, z.ZodTypeDef, GetProjectsHasProjects2>;
    /** @deprecated use `GetProjectsHasProjects2$Outbound` instead. */
    type Outbound = GetProjectsHasProjects2$Outbound;
}
export declare function getProjectsHasProjects2ToJSON(getProjectsHasProjects2: GetProjectsHasProjects2): string;
export declare function getProjectsHasProjects2FromJSON(jsonString: string): SafeParseResult<GetProjectsHasProjects2, SDKValidationError>;
/** @internal */
export declare const GetProjectsHasProjectsResponseType$inboundSchema: z.ZodNativeEnum<typeof GetProjectsHasProjectsResponseType>;
/** @internal */
export declare const GetProjectsHasProjectsResponseType$outboundSchema: z.ZodNativeEnum<typeof GetProjectsHasProjectsResponseType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsHasProjectsResponseType$ {
    /** @deprecated use `GetProjectsHasProjectsResponseType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Header: "header";
    }>;
    /** @deprecated use `GetProjectsHasProjectsResponseType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Header: "header";
    }>;
}
/** @internal */
export declare const GetProjectsHasProjectsKey$inboundSchema: z.ZodNativeEnum<typeof GetProjectsHasProjectsKey>;
/** @internal */
export declare const GetProjectsHasProjectsKey$outboundSchema: z.ZodNativeEnum<typeof GetProjectsHasProjectsKey>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsHasProjectsKey$ {
    /** @deprecated use `GetProjectsHasProjectsKey$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly XVercelIpCountry: "x-vercel-ip-country";
    }>;
    /** @deprecated use `GetProjectsHasProjectsKey$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly XVercelIpCountry: "x-vercel-ip-country";
    }>;
}
/** @internal */
export declare const GetProjectsHasProjectsResponseValue$inboundSchema: z.ZodType<GetProjectsHasProjectsResponseValue, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsHasProjectsResponseValue$Outbound = {
    eq: string;
};
/** @internal */
export declare const GetProjectsHasProjectsResponseValue$outboundSchema: z.ZodType<GetProjectsHasProjectsResponseValue$Outbound, z.ZodTypeDef, GetProjectsHasProjectsResponseValue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsHasProjectsResponseValue$ {
    /** @deprecated use `GetProjectsHasProjectsResponseValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsHasProjectsResponseValue, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsHasProjectsResponseValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsHasProjectsResponseValue$Outbound, z.ZodTypeDef, GetProjectsHasProjectsResponseValue>;
    /** @deprecated use `GetProjectsHasProjectsResponseValue$Outbound` instead. */
    type Outbound = GetProjectsHasProjectsResponseValue$Outbound;
}
export declare function getProjectsHasProjectsResponseValueToJSON(getProjectsHasProjectsResponseValue: GetProjectsHasProjectsResponseValue): string;
export declare function getProjectsHasProjectsResponseValueFromJSON(jsonString: string): SafeParseResult<GetProjectsHasProjectsResponseValue, SDKValidationError>;
/** @internal */
export declare const GetProjectsHasProjects1$inboundSchema: z.ZodType<GetProjectsHasProjects1, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsHasProjects1$Outbound = {
    type: string;
    key: string;
    value: GetProjectsHasProjectsResponseValue$Outbound;
};
/** @internal */
export declare const GetProjectsHasProjects1$outboundSchema: z.ZodType<GetProjectsHasProjects1$Outbound, z.ZodTypeDef, GetProjectsHasProjects1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsHasProjects1$ {
    /** @deprecated use `GetProjectsHasProjects1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsHasProjects1, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsHasProjects1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsHasProjects1$Outbound, z.ZodTypeDef, GetProjectsHasProjects1>;
    /** @deprecated use `GetProjectsHasProjects1$Outbound` instead. */
    type Outbound = GetProjectsHasProjects1$Outbound;
}
export declare function getProjectsHasProjects1ToJSON(getProjectsHasProjects1: GetProjectsHasProjects1): string;
export declare function getProjectsHasProjects1FromJSON(jsonString: string): SafeParseResult<GetProjectsHasProjects1, SDKValidationError>;
/** @internal */
export declare const GetProjectsRouteProjectsHas$inboundSchema: z.ZodType<GetProjectsRouteProjectsHas, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsRouteProjectsHas$Outbound = GetProjectsHasProjects1$Outbound | GetProjectsHasProjects2$Outbound;
/** @internal */
export declare const GetProjectsRouteProjectsHas$outboundSchema: z.ZodType<GetProjectsRouteProjectsHas$Outbound, z.ZodTypeDef, GetProjectsRouteProjectsHas>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsRouteProjectsHas$ {
    /** @deprecated use `GetProjectsRouteProjectsHas$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsRouteProjectsHas, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsRouteProjectsHas$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsRouteProjectsHas$Outbound, z.ZodTypeDef, GetProjectsRouteProjectsHas>;
    /** @deprecated use `GetProjectsRouteProjectsHas$Outbound` instead. */
    type Outbound = GetProjectsRouteProjectsHas$Outbound;
}
export declare function getProjectsRouteProjectsHasToJSON(getProjectsRouteProjectsHas: GetProjectsRouteProjectsHas): string;
export declare function getProjectsRouteProjectsHasFromJSON(jsonString: string): SafeParseResult<GetProjectsRouteProjectsHas, SDKValidationError>;
/** @internal */
export declare const GetProjectsRouteProjectsAction$inboundSchema: z.ZodNativeEnum<typeof GetProjectsRouteProjectsAction>;
/** @internal */
export declare const GetProjectsRouteProjectsAction$outboundSchema: z.ZodNativeEnum<typeof GetProjectsRouteProjectsAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsRouteProjectsAction$ {
    /** @deprecated use `GetProjectsRouteProjectsAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly BlockLegalCwc: "block_legal_cwc";
    }>;
    /** @deprecated use `GetProjectsRouteProjectsAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly BlockLegalCwc: "block_legal_cwc";
    }>;
}
/** @internal */
export declare const GetProjectsRouteProjectsMitigate$inboundSchema: z.ZodType<GetProjectsRouteProjectsMitigate, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsRouteProjectsMitigate$Outbound = {
    action: string;
};
/** @internal */
export declare const GetProjectsRouteProjectsMitigate$outboundSchema: z.ZodType<GetProjectsRouteProjectsMitigate$Outbound, z.ZodTypeDef, GetProjectsRouteProjectsMitigate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsRouteProjectsMitigate$ {
    /** @deprecated use `GetProjectsRouteProjectsMitigate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsRouteProjectsMitigate, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsRouteProjectsMitigate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsRouteProjectsMitigate$Outbound, z.ZodTypeDef, GetProjectsRouteProjectsMitigate>;
    /** @deprecated use `GetProjectsRouteProjectsMitigate$Outbound` instead. */
    type Outbound = GetProjectsRouteProjectsMitigate$Outbound;
}
export declare function getProjectsRouteProjectsMitigateToJSON(getProjectsRouteProjectsMitigate: GetProjectsRouteProjectsMitigate): string;
export declare function getProjectsRouteProjectsMitigateFromJSON(jsonString: string): SafeParseResult<GetProjectsRouteProjectsMitigate, SDKValidationError>;
/** @internal */
export declare const GetProjectsRouteProjects2$inboundSchema: z.ZodType<GetProjectsRouteProjects2, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsRouteProjects2$Outbound = {
    has: Array<GetProjectsHasProjects1$Outbound | GetProjectsHasProjects2$Outbound>;
    mitigate: GetProjectsRouteProjectsMitigate$Outbound;
    src?: string | undefined;
};
/** @internal */
export declare const GetProjectsRouteProjects2$outboundSchema: z.ZodType<GetProjectsRouteProjects2$Outbound, z.ZodTypeDef, GetProjectsRouteProjects2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsRouteProjects2$ {
    /** @deprecated use `GetProjectsRouteProjects2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsRouteProjects2, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsRouteProjects2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsRouteProjects2$Outbound, z.ZodTypeDef, GetProjectsRouteProjects2>;
    /** @deprecated use `GetProjectsRouteProjects2$Outbound` instead. */
    type Outbound = GetProjectsRouteProjects2$Outbound;
}
export declare function getProjectsRouteProjects2ToJSON(getProjectsRouteProjects2: GetProjectsRouteProjects2): string;
export declare function getProjectsRouteProjects2FromJSON(jsonString: string): SafeParseResult<GetProjectsRouteProjects2, SDKValidationError>;
/** @internal */
export declare const GetProjectsRouteProjects1$inboundSchema: z.ZodType<GetProjectsRouteProjects1, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsRouteProjects1$Outbound = {
    src: string;
    status: number;
};
/** @internal */
export declare const GetProjectsRouteProjects1$outboundSchema: z.ZodType<GetProjectsRouteProjects1$Outbound, z.ZodTypeDef, GetProjectsRouteProjects1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsRouteProjects1$ {
    /** @deprecated use `GetProjectsRouteProjects1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsRouteProjects1, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsRouteProjects1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsRouteProjects1$Outbound, z.ZodTypeDef, GetProjectsRouteProjects1>;
    /** @deprecated use `GetProjectsRouteProjects1$Outbound` instead. */
    type Outbound = GetProjectsRouteProjects1$Outbound;
}
export declare function getProjectsRouteProjects1ToJSON(getProjectsRouteProjects1: GetProjectsRouteProjects1): string;
export declare function getProjectsRouteProjects1FromJSON(jsonString: string): SafeParseResult<GetProjectsRouteProjects1, SDKValidationError>;
/** @internal */
export declare const GetProjectsBlockHistoryProjectsRoute$inboundSchema: z.ZodType<GetProjectsBlockHistoryProjectsRoute, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsBlockHistoryProjectsRoute$Outbound = GetProjectsRouteProjects1$Outbound | GetProjectsRouteProjects2$Outbound;
/** @internal */
export declare const GetProjectsBlockHistoryProjectsRoute$outboundSchema: z.ZodType<GetProjectsBlockHistoryProjectsRoute$Outbound, z.ZodTypeDef, GetProjectsBlockHistoryProjectsRoute>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsBlockHistoryProjectsRoute$ {
    /** @deprecated use `GetProjectsBlockHistoryProjectsRoute$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsBlockHistoryProjectsRoute, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsBlockHistoryProjectsRoute$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsBlockHistoryProjectsRoute$Outbound, z.ZodTypeDef, GetProjectsBlockHistoryProjectsRoute>;
    /** @deprecated use `GetProjectsBlockHistoryProjectsRoute$Outbound` instead. */
    type Outbound = GetProjectsBlockHistoryProjectsRoute$Outbound;
}
export declare function getProjectsBlockHistoryProjectsRouteToJSON(getProjectsBlockHistoryProjectsRoute: GetProjectsBlockHistoryProjectsRoute): string;
export declare function getProjectsBlockHistoryProjectsRouteFromJSON(jsonString: string): SafeParseResult<GetProjectsBlockHistoryProjectsRoute, SDKValidationError>;
/** @internal */
export declare const GetProjectsBlockHistory4$inboundSchema: z.ZodType<GetProjectsBlockHistory4, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsBlockHistory4$Outbound = {
    action: string;
    route: GetProjectsRouteProjects1$Outbound | GetProjectsRouteProjects2$Outbound;
    statusCode?: number | undefined;
    createdAt: number;
    caseId?: string | undefined;
    actor?: string | undefined;
    comment?: string | undefined;
    isCascading?: boolean | undefined;
};
/** @internal */
export declare const GetProjectsBlockHistory4$outboundSchema: z.ZodType<GetProjectsBlockHistory4$Outbound, z.ZodTypeDef, GetProjectsBlockHistory4>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsBlockHistory4$ {
    /** @deprecated use `GetProjectsBlockHistory4$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsBlockHistory4, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsBlockHistory4$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsBlockHistory4$Outbound, z.ZodTypeDef, GetProjectsBlockHistory4>;
    /** @deprecated use `GetProjectsBlockHistory4$Outbound` instead. */
    type Outbound = GetProjectsBlockHistory4$Outbound;
}
export declare function getProjectsBlockHistory4ToJSON(getProjectsBlockHistory4: GetProjectsBlockHistory4): string;
export declare function getProjectsBlockHistory4FromJSON(jsonString: string): SafeParseResult<GetProjectsBlockHistory4, SDKValidationError>;
/** @internal */
export declare const GetProjectsBlockHistoryProjectsResponseAction$inboundSchema: z.ZodNativeEnum<typeof GetProjectsBlockHistoryProjectsResponseAction>;
/** @internal */
export declare const GetProjectsBlockHistoryProjectsResponseAction$outboundSchema: z.ZodNativeEnum<typeof GetProjectsBlockHistoryProjectsResponseAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsBlockHistoryProjectsResponseAction$ {
    /** @deprecated use `GetProjectsBlockHistoryProjectsResponseAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly RouteBlocked: "route-blocked";
    }>;
    /** @deprecated use `GetProjectsBlockHistoryProjectsResponseAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly RouteBlocked: "route-blocked";
    }>;
}
/** @internal */
export declare const GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema: z.ZodNativeEnum<typeof GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyType>;
/** @internal */
export declare const GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema: z.ZodNativeEnum<typeof GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyType$ {
    /** @deprecated use `GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Host: "host";
    }>;
    /** @deprecated use `GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Host: "host";
    }>;
}
/** @internal */
export declare const GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue$inboundSchema: z.ZodType<GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue$Outbound = {
    eq: string;
};
/** @internal */
export declare const GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue$outboundSchema: z.ZodType<GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue$Outbound, z.ZodTypeDef, GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue$ {
    /** @deprecated use `GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue$Outbound, z.ZodTypeDef, GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue>;
    /** @deprecated use `GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue$Outbound` instead. */
    type Outbound = GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue$Outbound;
}
export declare function getProjectsHasProjectsResponse200ApplicationJSONResponseBodyValueToJSON(getProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue: GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue): string;
export declare function getProjectsHasProjectsResponse200ApplicationJSONResponseBodyValueFromJSON(jsonString: string): SafeParseResult<GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue, SDKValidationError>;
/** @internal */
export declare const GetProjectsHasProjectsResponse2$inboundSchema: z.ZodType<GetProjectsHasProjectsResponse2, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsHasProjectsResponse2$Outbound = {
    type: string;
    value: GetProjectsHasProjectsResponse200ApplicationJSONResponseBodyValue$Outbound;
};
/** @internal */
export declare const GetProjectsHasProjectsResponse2$outboundSchema: z.ZodType<GetProjectsHasProjectsResponse2$Outbound, z.ZodTypeDef, GetProjectsHasProjectsResponse2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsHasProjectsResponse2$ {
    /** @deprecated use `GetProjectsHasProjectsResponse2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsHasProjectsResponse2, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsHasProjectsResponse2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsHasProjectsResponse2$Outbound, z.ZodTypeDef, GetProjectsHasProjectsResponse2>;
    /** @deprecated use `GetProjectsHasProjectsResponse2$Outbound` instead. */
    type Outbound = GetProjectsHasProjectsResponse2$Outbound;
}
export declare function getProjectsHasProjectsResponse2ToJSON(getProjectsHasProjectsResponse2: GetProjectsHasProjectsResponse2): string;
export declare function getProjectsHasProjectsResponse2FromJSON(jsonString: string): SafeParseResult<GetProjectsHasProjectsResponse2, SDKValidationError>;
/** @internal */
export declare const GetProjectsHasProjectsResponse200ApplicationJSONType$inboundSchema: z.ZodNativeEnum<typeof GetProjectsHasProjectsResponse200ApplicationJSONType>;
/** @internal */
export declare const GetProjectsHasProjectsResponse200ApplicationJSONType$outboundSchema: z.ZodNativeEnum<typeof GetProjectsHasProjectsResponse200ApplicationJSONType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsHasProjectsResponse200ApplicationJSONType$ {
    /** @deprecated use `GetProjectsHasProjectsResponse200ApplicationJSONType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Header: "header";
    }>;
    /** @deprecated use `GetProjectsHasProjectsResponse200ApplicationJSONType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Header: "header";
    }>;
}
/** @internal */
export declare const GetProjectsHasProjectsResponseKey$inboundSchema: z.ZodNativeEnum<typeof GetProjectsHasProjectsResponseKey>;
/** @internal */
export declare const GetProjectsHasProjectsResponseKey$outboundSchema: z.ZodNativeEnum<typeof GetProjectsHasProjectsResponseKey>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsHasProjectsResponseKey$ {
    /** @deprecated use `GetProjectsHasProjectsResponseKey$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly XVercelIpCountry: "x-vercel-ip-country";
    }>;
    /** @deprecated use `GetProjectsHasProjectsResponseKey$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly XVercelIpCountry: "x-vercel-ip-country";
    }>;
}
/** @internal */
export declare const GetProjectsHasProjectsResponse200ApplicationJSONValue$inboundSchema: z.ZodType<GetProjectsHasProjectsResponse200ApplicationJSONValue, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsHasProjectsResponse200ApplicationJSONValue$Outbound = {
    eq: string;
};
/** @internal */
export declare const GetProjectsHasProjectsResponse200ApplicationJSONValue$outboundSchema: z.ZodType<GetProjectsHasProjectsResponse200ApplicationJSONValue$Outbound, z.ZodTypeDef, GetProjectsHasProjectsResponse200ApplicationJSONValue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsHasProjectsResponse200ApplicationJSONValue$ {
    /** @deprecated use `GetProjectsHasProjectsResponse200ApplicationJSONValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsHasProjectsResponse200ApplicationJSONValue, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsHasProjectsResponse200ApplicationJSONValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsHasProjectsResponse200ApplicationJSONValue$Outbound, z.ZodTypeDef, GetProjectsHasProjectsResponse200ApplicationJSONValue>;
    /** @deprecated use `GetProjectsHasProjectsResponse200ApplicationJSONValue$Outbound` instead. */
    type Outbound = GetProjectsHasProjectsResponse200ApplicationJSONValue$Outbound;
}
export declare function getProjectsHasProjectsResponse200ApplicationJSONValueToJSON(getProjectsHasProjectsResponse200ApplicationJSONValue: GetProjectsHasProjectsResponse200ApplicationJSONValue): string;
export declare function getProjectsHasProjectsResponse200ApplicationJSONValueFromJSON(jsonString: string): SafeParseResult<GetProjectsHasProjectsResponse200ApplicationJSONValue, SDKValidationError>;
/** @internal */
export declare const GetProjectsHasProjectsResponse1$inboundSchema: z.ZodType<GetProjectsHasProjectsResponse1, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsHasProjectsResponse1$Outbound = {
    type: string;
    key: string;
    value: GetProjectsHasProjectsResponse200ApplicationJSONValue$Outbound;
};
/** @internal */
export declare const GetProjectsHasProjectsResponse1$outboundSchema: z.ZodType<GetProjectsHasProjectsResponse1$Outbound, z.ZodTypeDef, GetProjectsHasProjectsResponse1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsHasProjectsResponse1$ {
    /** @deprecated use `GetProjectsHasProjectsResponse1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsHasProjectsResponse1, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsHasProjectsResponse1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsHasProjectsResponse1$Outbound, z.ZodTypeDef, GetProjectsHasProjectsResponse1>;
    /** @deprecated use `GetProjectsHasProjectsResponse1$Outbound` instead. */
    type Outbound = GetProjectsHasProjectsResponse1$Outbound;
}
export declare function getProjectsHasProjectsResponse1ToJSON(getProjectsHasProjectsResponse1: GetProjectsHasProjectsResponse1): string;
export declare function getProjectsHasProjectsResponse1FromJSON(jsonString: string): SafeParseResult<GetProjectsHasProjectsResponse1, SDKValidationError>;
/** @internal */
export declare const GetProjectsRouteHas$inboundSchema: z.ZodType<GetProjectsRouteHas, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsRouteHas$Outbound = GetProjectsHasProjectsResponse1$Outbound | GetProjectsHasProjectsResponse2$Outbound;
/** @internal */
export declare const GetProjectsRouteHas$outboundSchema: z.ZodType<GetProjectsRouteHas$Outbound, z.ZodTypeDef, GetProjectsRouteHas>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsRouteHas$ {
    /** @deprecated use `GetProjectsRouteHas$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsRouteHas, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsRouteHas$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsRouteHas$Outbound, z.ZodTypeDef, GetProjectsRouteHas>;
    /** @deprecated use `GetProjectsRouteHas$Outbound` instead. */
    type Outbound = GetProjectsRouteHas$Outbound;
}
export declare function getProjectsRouteHasToJSON(getProjectsRouteHas: GetProjectsRouteHas): string;
export declare function getProjectsRouteHasFromJSON(jsonString: string): SafeParseResult<GetProjectsRouteHas, SDKValidationError>;
/** @internal */
export declare const GetProjectsRouteAction$inboundSchema: z.ZodNativeEnum<typeof GetProjectsRouteAction>;
/** @internal */
export declare const GetProjectsRouteAction$outboundSchema: z.ZodNativeEnum<typeof GetProjectsRouteAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsRouteAction$ {
    /** @deprecated use `GetProjectsRouteAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly BlockLegalCwc: "block_legal_cwc";
    }>;
    /** @deprecated use `GetProjectsRouteAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly BlockLegalCwc: "block_legal_cwc";
    }>;
}
/** @internal */
export declare const GetProjectsRouteMitigate$inboundSchema: z.ZodType<GetProjectsRouteMitigate, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsRouteMitigate$Outbound = {
    action: string;
};
/** @internal */
export declare const GetProjectsRouteMitigate$outboundSchema: z.ZodType<GetProjectsRouteMitigate$Outbound, z.ZodTypeDef, GetProjectsRouteMitigate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsRouteMitigate$ {
    /** @deprecated use `GetProjectsRouteMitigate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsRouteMitigate, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsRouteMitigate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsRouteMitigate$Outbound, z.ZodTypeDef, GetProjectsRouteMitigate>;
    /** @deprecated use `GetProjectsRouteMitigate$Outbound` instead. */
    type Outbound = GetProjectsRouteMitigate$Outbound;
}
export declare function getProjectsRouteMitigateToJSON(getProjectsRouteMitigate: GetProjectsRouteMitigate): string;
export declare function getProjectsRouteMitigateFromJSON(jsonString: string): SafeParseResult<GetProjectsRouteMitigate, SDKValidationError>;
/** @internal */
export declare const GetProjectsRoute2$inboundSchema: z.ZodType<GetProjectsRoute2, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsRoute2$Outbound = {
    has: Array<GetProjectsHasProjectsResponse1$Outbound | GetProjectsHasProjectsResponse2$Outbound>;
    mitigate: GetProjectsRouteMitigate$Outbound;
    src?: string | undefined;
};
/** @internal */
export declare const GetProjectsRoute2$outboundSchema: z.ZodType<GetProjectsRoute2$Outbound, z.ZodTypeDef, GetProjectsRoute2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsRoute2$ {
    /** @deprecated use `GetProjectsRoute2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsRoute2, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsRoute2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsRoute2$Outbound, z.ZodTypeDef, GetProjectsRoute2>;
    /** @deprecated use `GetProjectsRoute2$Outbound` instead. */
    type Outbound = GetProjectsRoute2$Outbound;
}
export declare function getProjectsRoute2ToJSON(getProjectsRoute2: GetProjectsRoute2): string;
export declare function getProjectsRoute2FromJSON(jsonString: string): SafeParseResult<GetProjectsRoute2, SDKValidationError>;
/** @internal */
export declare const GetProjectsRoute1$inboundSchema: z.ZodType<GetProjectsRoute1, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsRoute1$Outbound = {
    src: string;
    status: number;
};
/** @internal */
export declare const GetProjectsRoute1$outboundSchema: z.ZodType<GetProjectsRoute1$Outbound, z.ZodTypeDef, GetProjectsRoute1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsRoute1$ {
    /** @deprecated use `GetProjectsRoute1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsRoute1, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsRoute1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsRoute1$Outbound, z.ZodTypeDef, GetProjectsRoute1>;
    /** @deprecated use `GetProjectsRoute1$Outbound` instead. */
    type Outbound = GetProjectsRoute1$Outbound;
}
export declare function getProjectsRoute1ToJSON(getProjectsRoute1: GetProjectsRoute1): string;
export declare function getProjectsRoute1FromJSON(jsonString: string): SafeParseResult<GetProjectsRoute1, SDKValidationError>;
/** @internal */
export declare const GetProjectsBlockHistoryRoute$inboundSchema: z.ZodType<GetProjectsBlockHistoryRoute, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsBlockHistoryRoute$Outbound = GetProjectsRoute1$Outbound | GetProjectsRoute2$Outbound;
/** @internal */
export declare const GetProjectsBlockHistoryRoute$outboundSchema: z.ZodType<GetProjectsBlockHistoryRoute$Outbound, z.ZodTypeDef, GetProjectsBlockHistoryRoute>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsBlockHistoryRoute$ {
    /** @deprecated use `GetProjectsBlockHistoryRoute$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsBlockHistoryRoute, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsBlockHistoryRoute$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsBlockHistoryRoute$Outbound, z.ZodTypeDef, GetProjectsBlockHistoryRoute>;
    /** @deprecated use `GetProjectsBlockHistoryRoute$Outbound` instead. */
    type Outbound = GetProjectsBlockHistoryRoute$Outbound;
}
export declare function getProjectsBlockHistoryRouteToJSON(getProjectsBlockHistoryRoute: GetProjectsBlockHistoryRoute): string;
export declare function getProjectsBlockHistoryRouteFromJSON(jsonString: string): SafeParseResult<GetProjectsBlockHistoryRoute, SDKValidationError>;
/** @internal */
export declare const GetProjectsBlockHistory3$inboundSchema: z.ZodType<GetProjectsBlockHistory3, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsBlockHistory3$Outbound = {
    action: string;
    route: GetProjectsRoute1$Outbound | GetProjectsRoute2$Outbound;
    reason: string;
    createdAt: number;
    caseId?: string | undefined;
    actor?: string | undefined;
    comment?: string | undefined;
    isCascading?: boolean | undefined;
};
/** @internal */
export declare const GetProjectsBlockHistory3$outboundSchema: z.ZodType<GetProjectsBlockHistory3$Outbound, z.ZodTypeDef, GetProjectsBlockHistory3>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsBlockHistory3$ {
    /** @deprecated use `GetProjectsBlockHistory3$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsBlockHistory3, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsBlockHistory3$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsBlockHistory3$Outbound, z.ZodTypeDef, GetProjectsBlockHistory3>;
    /** @deprecated use `GetProjectsBlockHistory3$Outbound` instead. */
    type Outbound = GetProjectsBlockHistory3$Outbound;
}
export declare function getProjectsBlockHistory3ToJSON(getProjectsBlockHistory3: GetProjectsBlockHistory3): string;
export declare function getProjectsBlockHistory3FromJSON(jsonString: string): SafeParseResult<GetProjectsBlockHistory3, SDKValidationError>;
/** @internal */
export declare const GetProjectsBlockHistoryProjectsAction$inboundSchema: z.ZodNativeEnum<typeof GetProjectsBlockHistoryProjectsAction>;
/** @internal */
export declare const GetProjectsBlockHistoryProjectsAction$outboundSchema: z.ZodNativeEnum<typeof GetProjectsBlockHistoryProjectsAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsBlockHistoryProjectsAction$ {
    /** @deprecated use `GetProjectsBlockHistoryProjectsAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Unblocked: "unblocked";
    }>;
    /** @deprecated use `GetProjectsBlockHistoryProjectsAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Unblocked: "unblocked";
    }>;
}
/** @internal */
export declare const GetProjectsBlockHistory2$inboundSchema: z.ZodType<GetProjectsBlockHistory2, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsBlockHistory2$Outbound = {
    action: string;
    createdAt: number;
    caseId?: string | undefined;
    actor?: string | undefined;
    comment?: string | undefined;
    isCascading?: boolean | undefined;
};
/** @internal */
export declare const GetProjectsBlockHistory2$outboundSchema: z.ZodType<GetProjectsBlockHistory2$Outbound, z.ZodTypeDef, GetProjectsBlockHistory2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsBlockHistory2$ {
    /** @deprecated use `GetProjectsBlockHistory2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsBlockHistory2, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsBlockHistory2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsBlockHistory2$Outbound, z.ZodTypeDef, GetProjectsBlockHistory2>;
    /** @deprecated use `GetProjectsBlockHistory2$Outbound` instead. */
    type Outbound = GetProjectsBlockHistory2$Outbound;
}
export declare function getProjectsBlockHistory2ToJSON(getProjectsBlockHistory2: GetProjectsBlockHistory2): string;
export declare function getProjectsBlockHistory2FromJSON(jsonString: string): SafeParseResult<GetProjectsBlockHistory2, SDKValidationError>;
/** @internal */
export declare const GetProjectsBlockHistoryAction$inboundSchema: z.ZodNativeEnum<typeof GetProjectsBlockHistoryAction>;
/** @internal */
export declare const GetProjectsBlockHistoryAction$outboundSchema: z.ZodNativeEnum<typeof GetProjectsBlockHistoryAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsBlockHistoryAction$ {
    /** @deprecated use `GetProjectsBlockHistoryAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Blocked: "blocked";
    }>;
    /** @deprecated use `GetProjectsBlockHistoryAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Blocked: "blocked";
    }>;
}
/** @internal */
export declare const GetProjectsBlockHistory1$inboundSchema: z.ZodType<GetProjectsBlockHistory1, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsBlockHistory1$Outbound = {
    action: string;
    reason: string;
    statusCode: number;
    createdAt: number;
    caseId?: string | undefined;
    actor?: string | undefined;
    comment?: string | undefined;
    isCascading?: boolean | undefined;
};
/** @internal */
export declare const GetProjectsBlockHistory1$outboundSchema: z.ZodType<GetProjectsBlockHistory1$Outbound, z.ZodTypeDef, GetProjectsBlockHistory1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsBlockHistory1$ {
    /** @deprecated use `GetProjectsBlockHistory1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsBlockHistory1, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsBlockHistory1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsBlockHistory1$Outbound, z.ZodTypeDef, GetProjectsBlockHistory1>;
    /** @deprecated use `GetProjectsBlockHistory1$Outbound` instead. */
    type Outbound = GetProjectsBlockHistory1$Outbound;
}
export declare function getProjectsBlockHistory1ToJSON(getProjectsBlockHistory1: GetProjectsBlockHistory1): string;
export declare function getProjectsBlockHistory1FromJSON(jsonString: string): SafeParseResult<GetProjectsBlockHistory1, SDKValidationError>;
/** @internal */
export declare const GetProjectsBlockHistory$inboundSchema: z.ZodType<GetProjectsBlockHistory, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsBlockHistory$Outbound = GetProjectsBlockHistory1$Outbound | GetProjectsBlockHistory3$Outbound | GetProjectsBlockHistory4$Outbound | GetProjectsBlockHistory2$Outbound;
/** @internal */
export declare const GetProjectsBlockHistory$outboundSchema: z.ZodType<GetProjectsBlockHistory$Outbound, z.ZodTypeDef, GetProjectsBlockHistory>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsBlockHistory$ {
    /** @deprecated use `GetProjectsBlockHistory$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsBlockHistory, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsBlockHistory$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsBlockHistory$Outbound, z.ZodTypeDef, GetProjectsBlockHistory>;
    /** @deprecated use `GetProjectsBlockHistory$Outbound` instead. */
    type Outbound = GetProjectsBlockHistory$Outbound;
}
export declare function getProjectsBlockHistoryToJSON(getProjectsBlockHistory: GetProjectsBlockHistory): string;
export declare function getProjectsBlockHistoryFromJSON(jsonString: string): SafeParseResult<GetProjectsBlockHistory, SDKValidationError>;
/** @internal */
export declare const GetProjectsAbuse$inboundSchema: z.ZodType<GetProjectsAbuse, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsAbuse$Outbound = {
    scanner?: string | undefined;
    history: Array<GetProjectsHistory$Outbound>;
    updatedAt: number;
    block?: GetProjectsBlock$Outbound | undefined;
    blockHistory?: Array<GetProjectsBlockHistory1$Outbound | GetProjectsBlockHistory3$Outbound | GetProjectsBlockHistory4$Outbound | GetProjectsBlockHistory2$Outbound> | undefined;
};
/** @internal */
export declare const GetProjectsAbuse$outboundSchema: z.ZodType<GetProjectsAbuse$Outbound, z.ZodTypeDef, GetProjectsAbuse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsAbuse$ {
    /** @deprecated use `GetProjectsAbuse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsAbuse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsAbuse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsAbuse$Outbound, z.ZodTypeDef, GetProjectsAbuse>;
    /** @deprecated use `GetProjectsAbuse$Outbound` instead. */
    type Outbound = GetProjectsAbuse$Outbound;
}
export declare function getProjectsAbuseToJSON(getProjectsAbuse: GetProjectsAbuse): string;
export declare function getProjectsAbuseFromJSON(jsonString: string): SafeParseResult<GetProjectsAbuse, SDKValidationError>;
/** @internal */
export declare const GetProjectsHasProjectsType$inboundSchema: z.ZodNativeEnum<typeof GetProjectsHasProjectsType>;
/** @internal */
export declare const GetProjectsHasProjectsType$outboundSchema: z.ZodNativeEnum<typeof GetProjectsHasProjectsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsHasProjectsType$ {
    /** @deprecated use `GetProjectsHasProjectsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Host: "host";
    }>;
    /** @deprecated use `GetProjectsHasProjectsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Host: "host";
    }>;
}
/** @internal */
export declare const GetProjectsHasProjectsValue$inboundSchema: z.ZodType<GetProjectsHasProjectsValue, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsHasProjectsValue$Outbound = {
    eq: string;
};
/** @internal */
export declare const GetProjectsHasProjectsValue$outboundSchema: z.ZodType<GetProjectsHasProjectsValue$Outbound, z.ZodTypeDef, GetProjectsHasProjectsValue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsHasProjectsValue$ {
    /** @deprecated use `GetProjectsHasProjectsValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsHasProjectsValue, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsHasProjectsValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsHasProjectsValue$Outbound, z.ZodTypeDef, GetProjectsHasProjectsValue>;
    /** @deprecated use `GetProjectsHasProjectsValue$Outbound` instead. */
    type Outbound = GetProjectsHasProjectsValue$Outbound;
}
export declare function getProjectsHasProjectsValueToJSON(getProjectsHasProjectsValue: GetProjectsHasProjectsValue): string;
export declare function getProjectsHasProjectsValueFromJSON(jsonString: string): SafeParseResult<GetProjectsHasProjectsValue, SDKValidationError>;
/** @internal */
export declare const GetProjectsHas2$inboundSchema: z.ZodType<GetProjectsHas2, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsHas2$Outbound = {
    type: string;
    value: GetProjectsHasProjectsValue$Outbound;
};
/** @internal */
export declare const GetProjectsHas2$outboundSchema: z.ZodType<GetProjectsHas2$Outbound, z.ZodTypeDef, GetProjectsHas2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsHas2$ {
    /** @deprecated use `GetProjectsHas2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsHas2, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsHas2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsHas2$Outbound, z.ZodTypeDef, GetProjectsHas2>;
    /** @deprecated use `GetProjectsHas2$Outbound` instead. */
    type Outbound = GetProjectsHas2$Outbound;
}
export declare function getProjectsHas2ToJSON(getProjectsHas2: GetProjectsHas2): string;
export declare function getProjectsHas2FromJSON(jsonString: string): SafeParseResult<GetProjectsHas2, SDKValidationError>;
/** @internal */
export declare const GetProjectsHasType$inboundSchema: z.ZodNativeEnum<typeof GetProjectsHasType>;
/** @internal */
export declare const GetProjectsHasType$outboundSchema: z.ZodNativeEnum<typeof GetProjectsHasType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsHasType$ {
    /** @deprecated use `GetProjectsHasType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Header: "header";
    }>;
    /** @deprecated use `GetProjectsHasType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Header: "header";
    }>;
}
/** @internal */
export declare const GetProjectsHasKey$inboundSchema: z.ZodNativeEnum<typeof GetProjectsHasKey>;
/** @internal */
export declare const GetProjectsHasKey$outboundSchema: z.ZodNativeEnum<typeof GetProjectsHasKey>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsHasKey$ {
    /** @deprecated use `GetProjectsHasKey$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly XVercelIpCountry: "x-vercel-ip-country";
    }>;
    /** @deprecated use `GetProjectsHasKey$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly XVercelIpCountry: "x-vercel-ip-country";
    }>;
}
/** @internal */
export declare const GetProjectsHasValue$inboundSchema: z.ZodType<GetProjectsHasValue, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsHasValue$Outbound = {
    eq: string;
};
/** @internal */
export declare const GetProjectsHasValue$outboundSchema: z.ZodType<GetProjectsHasValue$Outbound, z.ZodTypeDef, GetProjectsHasValue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsHasValue$ {
    /** @deprecated use `GetProjectsHasValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsHasValue, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsHasValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsHasValue$Outbound, z.ZodTypeDef, GetProjectsHasValue>;
    /** @deprecated use `GetProjectsHasValue$Outbound` instead. */
    type Outbound = GetProjectsHasValue$Outbound;
}
export declare function getProjectsHasValueToJSON(getProjectsHasValue: GetProjectsHasValue): string;
export declare function getProjectsHasValueFromJSON(jsonString: string): SafeParseResult<GetProjectsHasValue, SDKValidationError>;
/** @internal */
export declare const GetProjectsHas1$inboundSchema: z.ZodType<GetProjectsHas1, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsHas1$Outbound = {
    type: string;
    key: string;
    value: GetProjectsHasValue$Outbound;
};
/** @internal */
export declare const GetProjectsHas1$outboundSchema: z.ZodType<GetProjectsHas1$Outbound, z.ZodTypeDef, GetProjectsHas1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsHas1$ {
    /** @deprecated use `GetProjectsHas1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsHas1, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsHas1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsHas1$Outbound, z.ZodTypeDef, GetProjectsHas1>;
    /** @deprecated use `GetProjectsHas1$Outbound` instead. */
    type Outbound = GetProjectsHas1$Outbound;
}
export declare function getProjectsHas1ToJSON(getProjectsHas1: GetProjectsHas1): string;
export declare function getProjectsHas1FromJSON(jsonString: string): SafeParseResult<GetProjectsHas1, SDKValidationError>;
/** @internal */
export declare const GetProjectsInternalRoutesHas$inboundSchema: z.ZodType<GetProjectsInternalRoutesHas, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsInternalRoutesHas$Outbound = GetProjectsHas1$Outbound | GetProjectsHas2$Outbound;
/** @internal */
export declare const GetProjectsInternalRoutesHas$outboundSchema: z.ZodType<GetProjectsInternalRoutesHas$Outbound, z.ZodTypeDef, GetProjectsInternalRoutesHas>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsInternalRoutesHas$ {
    /** @deprecated use `GetProjectsInternalRoutesHas$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsInternalRoutesHas, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsInternalRoutesHas$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsInternalRoutesHas$Outbound, z.ZodTypeDef, GetProjectsInternalRoutesHas>;
    /** @deprecated use `GetProjectsInternalRoutesHas$Outbound` instead. */
    type Outbound = GetProjectsInternalRoutesHas$Outbound;
}
export declare function getProjectsInternalRoutesHasToJSON(getProjectsInternalRoutesHas: GetProjectsInternalRoutesHas): string;
export declare function getProjectsInternalRoutesHasFromJSON(jsonString: string): SafeParseResult<GetProjectsInternalRoutesHas, SDKValidationError>;
/** @internal */
export declare const GetProjectsInternalRoutesAction$inboundSchema: z.ZodNativeEnum<typeof GetProjectsInternalRoutesAction>;
/** @internal */
export declare const GetProjectsInternalRoutesAction$outboundSchema: z.ZodNativeEnum<typeof GetProjectsInternalRoutesAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsInternalRoutesAction$ {
    /** @deprecated use `GetProjectsInternalRoutesAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly BlockLegalCwc: "block_legal_cwc";
    }>;
    /** @deprecated use `GetProjectsInternalRoutesAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly BlockLegalCwc: "block_legal_cwc";
    }>;
}
/** @internal */
export declare const GetProjectsInternalRoutesMitigate$inboundSchema: z.ZodType<GetProjectsInternalRoutesMitigate, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsInternalRoutesMitigate$Outbound = {
    action: string;
};
/** @internal */
export declare const GetProjectsInternalRoutesMitigate$outboundSchema: z.ZodType<GetProjectsInternalRoutesMitigate$Outbound, z.ZodTypeDef, GetProjectsInternalRoutesMitigate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsInternalRoutesMitigate$ {
    /** @deprecated use `GetProjectsInternalRoutesMitigate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsInternalRoutesMitigate, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsInternalRoutesMitigate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsInternalRoutesMitigate$Outbound, z.ZodTypeDef, GetProjectsInternalRoutesMitigate>;
    /** @deprecated use `GetProjectsInternalRoutesMitigate$Outbound` instead. */
    type Outbound = GetProjectsInternalRoutesMitigate$Outbound;
}
export declare function getProjectsInternalRoutesMitigateToJSON(getProjectsInternalRoutesMitigate: GetProjectsInternalRoutesMitigate): string;
export declare function getProjectsInternalRoutesMitigateFromJSON(jsonString: string): SafeParseResult<GetProjectsInternalRoutesMitigate, SDKValidationError>;
/** @internal */
export declare const GetProjectsInternalRoutes2$inboundSchema: z.ZodType<GetProjectsInternalRoutes2, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsInternalRoutes2$Outbound = {
    has: Array<GetProjectsHas1$Outbound | GetProjectsHas2$Outbound>;
    mitigate: GetProjectsInternalRoutesMitigate$Outbound;
    src?: string | undefined;
};
/** @internal */
export declare const GetProjectsInternalRoutes2$outboundSchema: z.ZodType<GetProjectsInternalRoutes2$Outbound, z.ZodTypeDef, GetProjectsInternalRoutes2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsInternalRoutes2$ {
    /** @deprecated use `GetProjectsInternalRoutes2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsInternalRoutes2, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsInternalRoutes2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsInternalRoutes2$Outbound, z.ZodTypeDef, GetProjectsInternalRoutes2>;
    /** @deprecated use `GetProjectsInternalRoutes2$Outbound` instead. */
    type Outbound = GetProjectsInternalRoutes2$Outbound;
}
export declare function getProjectsInternalRoutes2ToJSON(getProjectsInternalRoutes2: GetProjectsInternalRoutes2): string;
export declare function getProjectsInternalRoutes2FromJSON(jsonString: string): SafeParseResult<GetProjectsInternalRoutes2, SDKValidationError>;
/** @internal */
export declare const GetProjectsInternalRoutes1$inboundSchema: z.ZodType<GetProjectsInternalRoutes1, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsInternalRoutes1$Outbound = {
    src: string;
    status: number;
};
/** @internal */
export declare const GetProjectsInternalRoutes1$outboundSchema: z.ZodType<GetProjectsInternalRoutes1$Outbound, z.ZodTypeDef, GetProjectsInternalRoutes1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsInternalRoutes1$ {
    /** @deprecated use `GetProjectsInternalRoutes1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsInternalRoutes1, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsInternalRoutes1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsInternalRoutes1$Outbound, z.ZodTypeDef, GetProjectsInternalRoutes1>;
    /** @deprecated use `GetProjectsInternalRoutes1$Outbound` instead. */
    type Outbound = GetProjectsInternalRoutes1$Outbound;
}
export declare function getProjectsInternalRoutes1ToJSON(getProjectsInternalRoutes1: GetProjectsInternalRoutes1): string;
export declare function getProjectsInternalRoutes1FromJSON(jsonString: string): SafeParseResult<GetProjectsInternalRoutes1, SDKValidationError>;
/** @internal */
export declare const GetProjectsInternalRoutes$inboundSchema: z.ZodType<GetProjectsInternalRoutes, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsInternalRoutes$Outbound = GetProjectsInternalRoutes1$Outbound | GetProjectsInternalRoutes2$Outbound;
/** @internal */
export declare const GetProjectsInternalRoutes$outboundSchema: z.ZodType<GetProjectsInternalRoutes$Outbound, z.ZodTypeDef, GetProjectsInternalRoutes>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsInternalRoutes$ {
    /** @deprecated use `GetProjectsInternalRoutes$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsInternalRoutes, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsInternalRoutes$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsInternalRoutes$Outbound, z.ZodTypeDef, GetProjectsInternalRoutes>;
    /** @deprecated use `GetProjectsInternalRoutes$Outbound` instead. */
    type Outbound = GetProjectsInternalRoutes$Outbound;
}
export declare function getProjectsInternalRoutesToJSON(getProjectsInternalRoutes: GetProjectsInternalRoutes): string;
export declare function getProjectsInternalRoutesFromJSON(jsonString: string): SafeParseResult<GetProjectsInternalRoutes, SDKValidationError>;
/** @internal */
export declare const GetProjectsProjects$inboundSchema: z.ZodType<GetProjectsProjects, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsProjects$Outbound = {
    accountId: string;
    analytics?: GetProjectsAnalytics$Outbound | undefined;
    speedInsights?: GetProjectsSpeedInsights$Outbound | undefined;
    autoExposeSystemEnvs?: boolean | undefined;
    autoAssignCustomDomains?: boolean | undefined;
    autoAssignCustomDomainsUpdatedBy?: string | undefined;
    buildCommand?: string | null | undefined;
    commandForIgnoringBuildStep?: string | null | undefined;
    connectConfigurations?: Array<GetProjectsConnectConfigurations$Outbound> | null | undefined;
    connectConfigurationId?: string | null | undefined;
    connectBuildsEnabled?: boolean | undefined;
    passiveConnectConfigurationId?: string | null | undefined;
    createdAt?: number | undefined;
    customerSupportCodeVisibility?: boolean | undefined;
    crons?: GetProjectsCrons$Outbound | undefined;
    dataCache?: GetProjectsDataCache$Outbound | undefined;
    deploymentExpiration?: GetProjectsDeploymentExpiration$Outbound | null | undefined;
    devCommand?: string | null | undefined;
    directoryListing: boolean;
    installCommand?: string | null | undefined;
    env?: Array<GetProjectsEnv$Outbound> | undefined;
    customEnvironments?: Array<GetProjectsCustomEnvironments$Outbound> | undefined;
    framework?: string | null | undefined;
    gitForkProtection?: boolean | undefined;
    gitLFS?: boolean | undefined;
    id: string;
    ipBuckets?: Array<GetProjectsIpBuckets$Outbound> | undefined;
    latestDeployments?: Array<GetProjectsLatestDeployments$Outbound> | undefined;
    link?: GetProjectsLink4$Outbound | GetProjectsLink5$Outbound | GetProjectsLink3$Outbound | GetProjectsLink1$Outbound | GetProjectsLink2$Outbound | undefined;
    microfrontends?: GetProjectsMicrofrontends1$Outbound | GetProjectsMicrofrontends2$Outbound | undefined;
    name: string;
    nodeVersion: string;
    optionsAllowlist?: GetProjectsOptionsAllowlist$Outbound | null | undefined;
    outputDirectory?: string | null | undefined;
    passwordProtection?: GetProjectsPasswordProtection$Outbound | null | undefined;
    productionDeploymentsFastLane?: boolean | undefined;
    publicSource?: boolean | null | undefined;
    resourceConfig: GetProjectsResourceConfig$Outbound;
    rollbackDescription?: GetProjectsRollbackDescription$Outbound | undefined;
    rollingRelease?: GetProjectsRollingRelease$Outbound | null | undefined;
    defaultResourceConfig: GetProjectsDefaultResourceConfig$Outbound;
    rootDirectory?: string | null | undefined;
    serverlessFunctionZeroConfigFailover?: boolean | undefined;
    skewProtectionBoundaryAt?: number | undefined;
    skewProtectionMaxAge?: number | undefined;
    skipGitConnectDuringLink?: boolean | undefined;
    sourceFilesOutsideRootDirectory?: boolean | undefined;
    enableAffectedProjectsDeployments?: boolean | undefined;
    ssoProtection?: GetProjectsSsoProtection$Outbound | null | undefined;
    targets?: {
        [k: string]: GetProjectsTargets$Outbound | null;
    } | undefined;
    transferCompletedAt?: number | undefined;
    transferStartedAt?: number | undefined;
    transferToAccountId?: string | undefined;
    transferredFromAccountId?: string | undefined;
    updatedAt?: number | undefined;
    live?: boolean | undefined;
    enablePreviewFeedback?: boolean | null | undefined;
    enableProductionFeedback?: boolean | null | undefined;
    permissions?: GetProjectsPermissions$Outbound | undefined;
    lastRollbackTarget?: GetProjectsLastRollbackTarget$Outbound | null | undefined;
    lastAliasRequest?: GetProjectsLastAliasRequest$Outbound | null | undefined;
    protectionBypass?: {
        [k: string]: GetProjectsProtectionBypass1$Outbound | GetProjectsProtectionBypass2$Outbound;
    } | undefined;
    hasActiveBranches?: boolean | undefined;
    trustedIps?: GetProjectsTrustedIps1$Outbound | GetProjectsTrustedIps2$Outbound | null | undefined;
    gitComments?: GetProjectsGitComments$Outbound | undefined;
    gitProviderOptions?: GetProjectsGitProviderOptions$Outbound | undefined;
    paused?: boolean | undefined;
    concurrencyBucketName?: string | undefined;
    webAnalytics?: GetProjectsWebAnalytics$Outbound | undefined;
    security?: GetProjectsSecurity$Outbound | undefined;
    oidcTokenConfig?: GetProjectsOidcTokenConfig$Outbound | undefined;
    tier?: string | undefined;
    features?: GetProjectsFeatures$Outbound | undefined;
    v0?: boolean | undefined;
    abuse?: GetProjectsAbuse$Outbound | undefined;
    internalRoutes?: Array<GetProjectsInternalRoutes1$Outbound | GetProjectsInternalRoutes2$Outbound> | undefined;
};
/** @internal */
export declare const GetProjectsProjects$outboundSchema: z.ZodType<GetProjectsProjects$Outbound, z.ZodTypeDef, GetProjectsProjects>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsProjects$ {
    /** @deprecated use `GetProjectsProjects$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsProjects, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsProjects$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsProjects$Outbound, z.ZodTypeDef, GetProjectsProjects>;
    /** @deprecated use `GetProjectsProjects$Outbound` instead. */
    type Outbound = GetProjectsProjects$Outbound;
}
export declare function getProjectsProjectsToJSON(getProjectsProjects: GetProjectsProjects): string;
export declare function getProjectsProjectsFromJSON(jsonString: string): SafeParseResult<GetProjectsProjects, SDKValidationError>;
/** @internal */
export declare const GetProjectsResponseBody$inboundSchema: z.ZodType<GetProjectsResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type GetProjectsResponseBody$Outbound = {
    projects: Array<GetProjectsProjects$Outbound>;
    pagination: Pagination$Outbound;
};
/** @internal */
export declare const GetProjectsResponseBody$outboundSchema: z.ZodType<GetProjectsResponseBody$Outbound, z.ZodTypeDef, GetProjectsResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetProjectsResponseBody$ {
    /** @deprecated use `GetProjectsResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetProjectsResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetProjectsResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetProjectsResponseBody$Outbound, z.ZodTypeDef, GetProjectsResponseBody>;
    /** @deprecated use `GetProjectsResponseBody$Outbound` instead. */
    type Outbound = GetProjectsResponseBody$Outbound;
}
export declare function getProjectsResponseBodyToJSON(getProjectsResponseBody: GetProjectsResponseBody): string;
export declare function getProjectsResponseBodyFromJSON(jsonString: string): SafeParseResult<GetProjectsResponseBody, SDKValidationError>;
//# sourceMappingURL=getprojectsop.d.ts.map