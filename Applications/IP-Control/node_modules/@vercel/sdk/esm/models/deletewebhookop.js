/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
/** @internal */
export const DeleteWebhookRequest$inboundSchema = z.object({
    id: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/** @internal */
export const DeleteWebhookRequest$outboundSchema = z.object({
    id: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DeleteWebhookRequest$;
(function (DeleteWebhookRequest$) {
    /** @deprecated use `DeleteWebhookRequest$inboundSchema` instead. */
    DeleteWebhookRequest$.inboundSchema = DeleteWebhookRequest$inboundSchema;
    /** @deprecated use `DeleteWebhookRequest$outboundSchema` instead. */
    DeleteWebhookRequest$.outboundSchema = DeleteWebhookRequest$outboundSchema;
})(DeleteWebhookRequest$ || (DeleteWebhookRequest$ = {}));
export function deleteWebhookRequestToJSON(deleteWebhookRequest) {
    return JSON.stringify(DeleteWebhookRequest$outboundSchema.parse(deleteWebhookRequest));
}
export function deleteWebhookRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DeleteWebhookRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteWebhookRequest' from JSON`);
}
//# sourceMappingURL=deletewebhookop.js.map