/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Pagination$inboundSchema, Pagination$outboundSchema, } from "./pagination.js";
export const GetRecordsResponseBodyDnsType = {
    A: "A",
    Aaaa: "AAAA",
    Alias: "ALIAS",
    Caa: "CAA",
    Cname: "CNAME",
    Https: "HTTPS",
    Mx: "MX",
    Srv: "SRV",
    Txt: "TXT",
    Ns: "NS",
};
export const GetRecordsResponseBodyType = {
    A: "A",
    Aaaa: "AAAA",
    Alias: "ALIAS",
    Caa: "CAA",
    Cname: "CNAME",
    Https: "HTTPS",
    Mx: "MX",
    Srv: "SRV",
    Txt: "TXT",
    Ns: "NS",
};
/** @internal */
export const GetRecordsRequest$inboundSchema = z.object({
    domain: z.string(),
    limit: z.string().optional(),
    since: z.string().optional(),
    until: z.string().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/** @internal */
export const GetRecordsRequest$outboundSchema = z.object({
    domain: z.string(),
    limit: z.string().optional(),
    since: z.string().optional(),
    until: z.string().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetRecordsRequest$;
(function (GetRecordsRequest$) {
    /** @deprecated use `GetRecordsRequest$inboundSchema` instead. */
    GetRecordsRequest$.inboundSchema = GetRecordsRequest$inboundSchema;
    /** @deprecated use `GetRecordsRequest$outboundSchema` instead. */
    GetRecordsRequest$.outboundSchema = GetRecordsRequest$outboundSchema;
})(GetRecordsRequest$ || (GetRecordsRequest$ = {}));
export function getRecordsRequestToJSON(getRecordsRequest) {
    return JSON.stringify(GetRecordsRequest$outboundSchema.parse(getRecordsRequest));
}
export function getRecordsRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetRecordsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetRecordsRequest' from JSON`);
}
/** @internal */
export const GetRecordsResponseBodyDnsType$inboundSchema = z.nativeEnum(GetRecordsResponseBodyDnsType);
/** @internal */
export const GetRecordsResponseBodyDnsType$outboundSchema = GetRecordsResponseBodyDnsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetRecordsResponseBodyDnsType$;
(function (GetRecordsResponseBodyDnsType$) {
    /** @deprecated use `GetRecordsResponseBodyDnsType$inboundSchema` instead. */
    GetRecordsResponseBodyDnsType$.inboundSchema = GetRecordsResponseBodyDnsType$inboundSchema;
    /** @deprecated use `GetRecordsResponseBodyDnsType$outboundSchema` instead. */
    GetRecordsResponseBodyDnsType$.outboundSchema = GetRecordsResponseBodyDnsType$outboundSchema;
})(GetRecordsResponseBodyDnsType$ || (GetRecordsResponseBodyDnsType$ = {}));
/** @internal */
export const ResponseBodyRecords$inboundSchema = z.object({
    id: z.string(),
    slug: z.string(),
    name: z.string(),
    type: GetRecordsResponseBodyDnsType$inboundSchema,
    value: z.string(),
    mxPriority: z.number().optional(),
    priority: z.number().optional(),
    creator: z.string(),
    created: z.nullable(z.number()),
    updated: z.nullable(z.number()),
    createdAt: z.nullable(z.number()),
    updatedAt: z.nullable(z.number()),
    ttl: z.number().optional(),
    comment: z.string().optional(),
});
/** @internal */
export const ResponseBodyRecords$outboundSchema = z.object({
    id: z.string(),
    slug: z.string(),
    name: z.string(),
    type: GetRecordsResponseBodyDnsType$outboundSchema,
    value: z.string(),
    mxPriority: z.number().optional(),
    priority: z.number().optional(),
    creator: z.string(),
    created: z.nullable(z.number()),
    updated: z.nullable(z.number()),
    createdAt: z.nullable(z.number()),
    updatedAt: z.nullable(z.number()),
    ttl: z.number().optional(),
    comment: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyRecords$;
(function (ResponseBodyRecords$) {
    /** @deprecated use `ResponseBodyRecords$inboundSchema` instead. */
    ResponseBodyRecords$.inboundSchema = ResponseBodyRecords$inboundSchema;
    /** @deprecated use `ResponseBodyRecords$outboundSchema` instead. */
    ResponseBodyRecords$.outboundSchema = ResponseBodyRecords$outboundSchema;
})(ResponseBodyRecords$ || (ResponseBodyRecords$ = {}));
export function responseBodyRecordsToJSON(responseBodyRecords) {
    return JSON.stringify(ResponseBodyRecords$outboundSchema.parse(responseBodyRecords));
}
export function responseBodyRecordsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyRecords$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyRecords' from JSON`);
}
/** @internal */
export const ResponseBody3$inboundSchema = z.object({
    records: z.array(z.lazy(() => ResponseBodyRecords$inboundSchema)),
    pagination: Pagination$inboundSchema,
});
/** @internal */
export const ResponseBody3$outboundSchema = z.object({
    records: z.array(z.lazy(() => ResponseBodyRecords$outboundSchema)),
    pagination: Pagination$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBody3$;
(function (ResponseBody3$) {
    /** @deprecated use `ResponseBody3$inboundSchema` instead. */
    ResponseBody3$.inboundSchema = ResponseBody3$inboundSchema;
    /** @deprecated use `ResponseBody3$outboundSchema` instead. */
    ResponseBody3$.outboundSchema = ResponseBody3$outboundSchema;
})(ResponseBody3$ || (ResponseBody3$ = {}));
export function responseBody3ToJSON(responseBody3) {
    return JSON.stringify(ResponseBody3$outboundSchema.parse(responseBody3));
}
export function responseBody3FromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBody3$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBody3' from JSON`);
}
/** @internal */
export const GetRecordsResponseBodyType$inboundSchema = z.nativeEnum(GetRecordsResponseBodyType);
/** @internal */
export const GetRecordsResponseBodyType$outboundSchema = GetRecordsResponseBodyType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetRecordsResponseBodyType$;
(function (GetRecordsResponseBodyType$) {
    /** @deprecated use `GetRecordsResponseBodyType$inboundSchema` instead. */
    GetRecordsResponseBodyType$.inboundSchema = GetRecordsResponseBodyType$inboundSchema;
    /** @deprecated use `GetRecordsResponseBodyType$outboundSchema` instead. */
    GetRecordsResponseBodyType$.outboundSchema = GetRecordsResponseBodyType$outboundSchema;
})(GetRecordsResponseBodyType$ || (GetRecordsResponseBodyType$ = {}));
/** @internal */
export const Records$inboundSchema = z.object({
    id: z.string(),
    slug: z.string(),
    name: z.string(),
    type: GetRecordsResponseBodyType$inboundSchema,
    value: z.string(),
    mxPriority: z.number().optional(),
    priority: z.number().optional(),
    creator: z.string(),
    created: z.nullable(z.number()),
    updated: z.nullable(z.number()),
    createdAt: z.nullable(z.number()),
    updatedAt: z.nullable(z.number()),
    ttl: z.number().optional(),
    comment: z.string().optional(),
});
/** @internal */
export const Records$outboundSchema = z.object({
    id: z.string(),
    slug: z.string(),
    name: z.string(),
    type: GetRecordsResponseBodyType$outboundSchema,
    value: z.string(),
    mxPriority: z.number().optional(),
    priority: z.number().optional(),
    creator: z.string(),
    created: z.nullable(z.number()),
    updated: z.nullable(z.number()),
    createdAt: z.nullable(z.number()),
    updatedAt: z.nullable(z.number()),
    ttl: z.number().optional(),
    comment: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Records$;
(function (Records$) {
    /** @deprecated use `Records$inboundSchema` instead. */
    Records$.inboundSchema = Records$inboundSchema;
    /** @deprecated use `Records$outboundSchema` instead. */
    Records$.outboundSchema = Records$outboundSchema;
})(Records$ || (Records$ = {}));
export function recordsToJSON(records) {
    return JSON.stringify(Records$outboundSchema.parse(records));
}
export function recordsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Records$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Records' from JSON`);
}
/** @internal */
export const GetRecordsResponseBody2$inboundSchema = z.object({
    records: z.array(z.lazy(() => Records$inboundSchema)),
});
/** @internal */
export const GetRecordsResponseBody2$outboundSchema = z.object({
    records: z.array(z.lazy(() => Records$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetRecordsResponseBody2$;
(function (GetRecordsResponseBody2$) {
    /** @deprecated use `GetRecordsResponseBody2$inboundSchema` instead. */
    GetRecordsResponseBody2$.inboundSchema = GetRecordsResponseBody2$inboundSchema;
    /** @deprecated use `GetRecordsResponseBody2$outboundSchema` instead. */
    GetRecordsResponseBody2$.outboundSchema = GetRecordsResponseBody2$outboundSchema;
})(GetRecordsResponseBody2$ || (GetRecordsResponseBody2$ = {}));
export function getRecordsResponseBody2ToJSON(getRecordsResponseBody2) {
    return JSON.stringify(GetRecordsResponseBody2$outboundSchema.parse(getRecordsResponseBody2));
}
export function getRecordsResponseBody2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetRecordsResponseBody2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetRecordsResponseBody2' from JSON`);
}
/** @internal */
export const GetRecordsResponseBody$inboundSchema = z.union([
    z.lazy(() => ResponseBody3$inboundSchema),
    z.lazy(() => GetRecordsResponseBody2$inboundSchema),
    z.string(),
]);
/** @internal */
export const GetRecordsResponseBody$outboundSchema = z.union([
    z.lazy(() => ResponseBody3$outboundSchema),
    z.lazy(() => GetRecordsResponseBody2$outboundSchema),
    z.string(),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetRecordsResponseBody$;
(function (GetRecordsResponseBody$) {
    /** @deprecated use `GetRecordsResponseBody$inboundSchema` instead. */
    GetRecordsResponseBody$.inboundSchema = GetRecordsResponseBody$inboundSchema;
    /** @deprecated use `GetRecordsResponseBody$outboundSchema` instead. */
    GetRecordsResponseBody$.outboundSchema = GetRecordsResponseBody$outboundSchema;
})(GetRecordsResponseBody$ || (GetRecordsResponseBody$ = {}));
export function getRecordsResponseBodyToJSON(getRecordsResponseBody) {
    return JSON.stringify(GetRecordsResponseBody$outboundSchema.parse(getRecordsResponseBody));
}
export function getRecordsResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetRecordsResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetRecordsResponseBody' from JSON`);
}
//# sourceMappingURL=getrecordsop.js.map