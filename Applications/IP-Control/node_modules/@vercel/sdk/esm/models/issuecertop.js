/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/** @internal */
export const IssueCertRequestBody$inboundSchema = z.object({
    cns: z.array(z.string()).optional(),
});
/** @internal */
export const IssueCertRequestBody$outboundSchema = z.object({
    cns: z.array(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IssueCertRequestBody$;
(function (IssueCertRequestBody$) {
    /** @deprecated use `IssueCertRequestBody$inboundSchema` instead. */
    IssueCertRequestBody$.inboundSchema = IssueCertRequestBody$inboundSchema;
    /** @deprecated use `IssueCertRequestBody$outboundSchema` instead. */
    IssueCertRequestBody$.outboundSchema = IssueCertRequestBody$outboundSchema;
})(IssueCertRequestBody$ || (IssueCertRequestBody$ = {}));
export function issueCertRequestBodyToJSON(issueCertRequestBody) {
    return JSON.stringify(IssueCertRequestBody$outboundSchema.parse(issueCertRequestBody));
}
export function issueCertRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IssueCertRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IssueCertRequestBody' from JSON`);
}
/** @internal */
export const IssueCertRequest$inboundSchema = z.object({
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => IssueCertRequestBody$inboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const IssueCertRequest$outboundSchema = z.object({
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => IssueCertRequestBody$outboundSchema).optional(),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IssueCertRequest$;
(function (IssueCertRequest$) {
    /** @deprecated use `IssueCertRequest$inboundSchema` instead. */
    IssueCertRequest$.inboundSchema = IssueCertRequest$inboundSchema;
    /** @deprecated use `IssueCertRequest$outboundSchema` instead. */
    IssueCertRequest$.outboundSchema = IssueCertRequest$outboundSchema;
})(IssueCertRequest$ || (IssueCertRequest$ = {}));
export function issueCertRequestToJSON(issueCertRequest) {
    return JSON.stringify(IssueCertRequest$outboundSchema.parse(issueCertRequest));
}
export function issueCertRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IssueCertRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IssueCertRequest' from JSON`);
}
/** @internal */
export const IssueCertResponseBody$inboundSchema = z.object({
    id: z.string(),
    createdAt: z.number(),
    expiresAt: z.number(),
    autoRenew: z.boolean(),
    cns: z.array(z.string()),
});
/** @internal */
export const IssueCertResponseBody$outboundSchema = z.object({
    id: z.string(),
    createdAt: z.number(),
    expiresAt: z.number(),
    autoRenew: z.boolean(),
    cns: z.array(z.string()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var IssueCertResponseBody$;
(function (IssueCertResponseBody$) {
    /** @deprecated use `IssueCertResponseBody$inboundSchema` instead. */
    IssueCertResponseBody$.inboundSchema = IssueCertResponseBody$inboundSchema;
    /** @deprecated use `IssueCertResponseBody$outboundSchema` instead. */
    IssueCertResponseBody$.outboundSchema = IssueCertResponseBody$outboundSchema;
})(IssueCertResponseBody$ || (IssueCertResponseBody$ = {}));
export function issueCertResponseBodyToJSON(issueCertResponseBody) {
    return JSON.stringify(IssueCertResponseBody$outboundSchema.parse(issueCertResponseBody));
}
export function issueCertResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => IssueCertResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'IssueCertResponseBody' from JSON`);
}
//# sourceMappingURL=issuecertop.js.map