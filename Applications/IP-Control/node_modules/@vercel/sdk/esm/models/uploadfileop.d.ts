import * as z from "zod";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type UploadFileRequest = {
    /**
     * The file size in bytes
     */
    contentLength?: number | undefined;
    /**
     * The file SHA1 used to check the integrity
     */
    xVercelDigest?: string | undefined;
    /**
     * The file SHA1 used to check the integrity
     */
    xNowDigest?: string | undefined;
    /**
     * The file size as an alternative to `Content-Length`
     */
    xNowSize?: number | undefined;
    /**
     * Shared secret token set by v0 deployments. When present and valid, the API applies an extended rate limit.
     */
    xInternalV0Token?: string | undefined;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody?: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array | undefined;
};
export type UploadFileResponseBody2 = {};
export type UploadFileResponseBody1 = {
    /**
     * Array of URLs where the file was updated
     */
    urls: Array<string>;
};
/**
 * File already uploaded
 *
 * @remarks
 * File successfully uploaded
 */
export type UploadFileResponseBody = UploadFileResponseBody1 | UploadFileResponseBody2;
/** @internal */
export declare const UploadFileRequest$inboundSchema: z.ZodType<UploadFileRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type UploadFileRequest$Outbound = {
    "Content-Length"?: number | undefined;
    "x-vercel-digest"?: string | undefined;
    "x-now-digest"?: string | undefined;
    "x-now-size"?: number | undefined;
    "x-internal-v0-token"?: string | undefined;
    teamId?: string | undefined;
    slug?: string | undefined;
    RequestBody?: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array | undefined;
};
/** @internal */
export declare const UploadFileRequest$outboundSchema: z.ZodType<UploadFileRequest$Outbound, z.ZodTypeDef, UploadFileRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UploadFileRequest$ {
    /** @deprecated use `UploadFileRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UploadFileRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `UploadFileRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UploadFileRequest$Outbound, z.ZodTypeDef, UploadFileRequest>;
    /** @deprecated use `UploadFileRequest$Outbound` instead. */
    type Outbound = UploadFileRequest$Outbound;
}
export declare function uploadFileRequestToJSON(uploadFileRequest: UploadFileRequest): string;
export declare function uploadFileRequestFromJSON(jsonString: string): SafeParseResult<UploadFileRequest, SDKValidationError>;
/** @internal */
export declare const UploadFileResponseBody2$inboundSchema: z.ZodType<UploadFileResponseBody2, z.ZodTypeDef, unknown>;
/** @internal */
export type UploadFileResponseBody2$Outbound = {};
/** @internal */
export declare const UploadFileResponseBody2$outboundSchema: z.ZodType<UploadFileResponseBody2$Outbound, z.ZodTypeDef, UploadFileResponseBody2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UploadFileResponseBody2$ {
    /** @deprecated use `UploadFileResponseBody2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UploadFileResponseBody2, z.ZodTypeDef, unknown>;
    /** @deprecated use `UploadFileResponseBody2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UploadFileResponseBody2$Outbound, z.ZodTypeDef, UploadFileResponseBody2>;
    /** @deprecated use `UploadFileResponseBody2$Outbound` instead. */
    type Outbound = UploadFileResponseBody2$Outbound;
}
export declare function uploadFileResponseBody2ToJSON(uploadFileResponseBody2: UploadFileResponseBody2): string;
export declare function uploadFileResponseBody2FromJSON(jsonString: string): SafeParseResult<UploadFileResponseBody2, SDKValidationError>;
/** @internal */
export declare const UploadFileResponseBody1$inboundSchema: z.ZodType<UploadFileResponseBody1, z.ZodTypeDef, unknown>;
/** @internal */
export type UploadFileResponseBody1$Outbound = {
    urls: Array<string>;
};
/** @internal */
export declare const UploadFileResponseBody1$outboundSchema: z.ZodType<UploadFileResponseBody1$Outbound, z.ZodTypeDef, UploadFileResponseBody1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UploadFileResponseBody1$ {
    /** @deprecated use `UploadFileResponseBody1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UploadFileResponseBody1, z.ZodTypeDef, unknown>;
    /** @deprecated use `UploadFileResponseBody1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UploadFileResponseBody1$Outbound, z.ZodTypeDef, UploadFileResponseBody1>;
    /** @deprecated use `UploadFileResponseBody1$Outbound` instead. */
    type Outbound = UploadFileResponseBody1$Outbound;
}
export declare function uploadFileResponseBody1ToJSON(uploadFileResponseBody1: UploadFileResponseBody1): string;
export declare function uploadFileResponseBody1FromJSON(jsonString: string): SafeParseResult<UploadFileResponseBody1, SDKValidationError>;
/** @internal */
export declare const UploadFileResponseBody$inboundSchema: z.ZodType<UploadFileResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type UploadFileResponseBody$Outbound = UploadFileResponseBody1$Outbound | UploadFileResponseBody2$Outbound;
/** @internal */
export declare const UploadFileResponseBody$outboundSchema: z.ZodType<UploadFileResponseBody$Outbound, z.ZodTypeDef, UploadFileResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UploadFileResponseBody$ {
    /** @deprecated use `UploadFileResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UploadFileResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `UploadFileResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UploadFileResponseBody$Outbound, z.ZodTypeDef, UploadFileResponseBody>;
    /** @deprecated use `UploadFileResponseBody$Outbound` instead. */
    type Outbound = UploadFileResponseBody$Outbound;
}
export declare function uploadFileResponseBodyToJSON(uploadFileResponseBody: UploadFileResponseBody): string;
export declare function uploadFileResponseBodyFromJSON(jsonString: string): SafeParseResult<UploadFileResponseBody, SDKValidationError>;
//# sourceMappingURL=uploadfileop.d.ts.map