import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { ACLAction } from "./aclaction.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export declare const Target2: {
    readonly Production: "production";
    readonly Preview: "preview";
    readonly Development: "development";
};
export type Target2 = ClosedEnum<typeof Target2>;
export declare const Target1: {
    readonly Production: "production";
    readonly Preview: "preview";
    readonly Development: "development";
};
export type Target1 = ClosedEnum<typeof Target1>;
/**
 * Deployment Target or Targets in which the ENV variable will be used
 */
export type CreateProjectTarget = Target1 | Array<Target2>;
/**
 * Type of the ENV variable
 */
export declare const CreateProjectType: {
    readonly System: "system";
    readonly Secret: "secret";
    readonly Encrypted: "encrypted";
    readonly Plain: "plain";
    readonly Sensitive: "sensitive";
};
/**
 * Type of the ENV variable
 */
export type CreateProjectType = ClosedEnum<typeof CreateProjectType>;
export type EnvironmentVariables = {
    /**
     * Name of the ENV variable
     */
    key: string;
    /**
     * Deployment Target or Targets in which the ENV variable will be used
     */
    target: Target1 | Array<Target2>;
    /**
     * If defined, the git branch of the environment variable (must have target=preview)
     */
    gitBranch?: string | undefined;
    /**
     * Type of the ENV variable
     */
    type?: CreateProjectType | undefined;
    /**
     * Value for the ENV variable
     */
    value: string;
};
/**
 * The framework that is being used for this project. When `null` is used no framework is selected
 */
export declare const CreateProjectFramework: {
    readonly Blitzjs: "blitzjs";
    readonly Nextjs: "nextjs";
    readonly Gatsby: "gatsby";
    readonly Remix: "remix";
    readonly ReactRouter: "react-router";
    readonly Astro: "astro";
    readonly Hexo: "hexo";
    readonly Eleventy: "eleventy";
    readonly Docusaurus2: "docusaurus-2";
    readonly Docusaurus: "docusaurus";
    readonly Preact: "preact";
    readonly Solidstart1: "solidstart-1";
    readonly Solidstart: "solidstart";
    readonly Dojo: "dojo";
    readonly Ember: "ember";
    readonly Vue: "vue";
    readonly Scully: "scully";
    readonly IonicAngular: "ionic-angular";
    readonly Angular: "angular";
    readonly Polymer: "polymer";
    readonly Svelte: "svelte";
    readonly Sveltekit: "sveltekit";
    readonly Sveltekit1: "sveltekit-1";
    readonly IonicReact: "ionic-react";
    readonly CreateReactApp: "create-react-app";
    readonly Gridsome: "gridsome";
    readonly Umijs: "umijs";
    readonly Sapper: "sapper";
    readonly Saber: "saber";
    readonly Stencil: "stencil";
    readonly Nuxtjs: "nuxtjs";
    readonly Redwoodjs: "redwoodjs";
    readonly Hugo: "hugo";
    readonly Jekyll: "jekyll";
    readonly Brunch: "brunch";
    readonly Middleman: "middleman";
    readonly Zola: "zola";
    readonly Hydrogen: "hydrogen";
    readonly Vite: "vite";
    readonly Vitepress: "vitepress";
    readonly Vuepress: "vuepress";
    readonly Parcel: "parcel";
    readonly Fastapi: "fastapi";
    readonly Fasthtml: "fasthtml";
    readonly SanityV3: "sanity-v3";
    readonly Sanity: "sanity";
    readonly Storybook: "storybook";
    readonly Nitro: "nitro";
    readonly Hono: "hono";
    readonly Express: "express";
    readonly Xmcp: "xmcp";
};
/**
 * The framework that is being used for this project. When `null` is used no framework is selected
 */
export type CreateProjectFramework = ClosedEnum<typeof CreateProjectFramework>;
/**
 * The Git Provider of the repository
 */
export declare const CreateProjectProjectsType: {
    readonly Github: "github";
    readonly GithubLimited: "github-limited";
    readonly Gitlab: "gitlab";
    readonly Bitbucket: "bitbucket";
};
/**
 * The Git Provider of the repository
 */
export type CreateProjectProjectsType = ClosedEnum<typeof CreateProjectProjectsType>;
/**
 * The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed
 */
export type GitRepository = {
    /**
     * The name of the git repository. For example: \"vercel/next.js\"
     */
    repo: string;
    /**
     * The Git Provider of the repository
     */
    type: CreateProjectProjectsType;
};
export declare const CreateProjectDeploymentType: {
    readonly All: "all";
    readonly Preview: "preview";
    readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
    readonly AllExceptCustomDomains: "all_except_custom_domains";
};
export type CreateProjectDeploymentType = ClosedEnum<typeof CreateProjectDeploymentType>;
/**
 * The Vercel Auth setting for the project (historically named \"SSO Protection\")
 */
export type CreateProjectSsoProtection = {
    deploymentType: CreateProjectDeploymentType;
};
/**
 * team: `https://oidc.vercel.com/[team_slug]` global: `https://oidc.vercel.com`
 */
export declare const IssuerMode: {
    readonly Team: "team";
    readonly Global: "global";
};
/**
 * team: `https://oidc.vercel.com/[team_slug]` global: `https://oidc.vercel.com`
 */
export type IssuerMode = ClosedEnum<typeof IssuerMode>;
/**
 * OpenID Connect JSON Web Token generation configuration.
 */
export type OidcTokenConfig = {
    /**
     * Whether or not to generate OpenID Connect JSON Web Tokens.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    enabled?: boolean | undefined;
    /**
     * team: `https://oidc.vercel.com/[team_slug]` global: `https://oidc.vercel.com`
     */
    issuerMode?: IssuerMode | undefined;
};
export declare const FunctionDefaultMemoryType: {
    readonly StandardLegacy: "standard_legacy";
    readonly Standard: "standard";
    readonly Performance: "performance";
};
export type FunctionDefaultMemoryType = ClosedEnum<typeof FunctionDefaultMemoryType>;
export declare const BuildMachineType: {
    readonly Enhanced: "enhanced";
    readonly Turbo: "turbo";
};
export type BuildMachineType = ClosedEnum<typeof BuildMachineType>;
/**
 * Specifies resource override configuration for the project
 */
export type CreateProjectResourceConfig = {
    fluid?: boolean | undefined;
    /**
     * The regions to deploy Vercel Functions to for this project
     */
    functionDefaultRegions?: Array<string> | undefined;
    functionDefaultTimeout?: number | undefined;
    functionDefaultMemoryType?: FunctionDefaultMemoryType | undefined;
    /**
     * Specifies whether Zero Config Failover is enabled for this project.
     */
    functionZeroConfigFailover?: boolean | undefined;
    elasticConcurrencyEnabled?: boolean | undefined;
    buildMachineType?: BuildMachineType | undefined;
    isNSNBDisabled?: boolean | undefined;
};
export type CreateProjectRequestBody = {
    /**
     * Opt-in to preview toolbar on the project level
     */
    enablePreviewFeedback?: boolean | null | undefined;
    /**
     * Opt-in to production toolbar on the project level
     */
    enableProductionFeedback?: boolean | null | undefined;
    /**
     * Specifies whether preview deployments are disabled for this project.
     */
    previewDeploymentsDisabled?: boolean | null | undefined;
    /**
     * The build command for this project. When `null` is used this value will be automatically detected
     */
    buildCommand?: string | null | undefined;
    commandForIgnoringBuildStep?: string | null | undefined;
    /**
     * The dev command for this project. When `null` is used this value will be automatically detected
     */
    devCommand?: string | null | undefined;
    /**
     * Collection of ENV Variables the Project will use
     */
    environmentVariables?: Array<EnvironmentVariables> | undefined;
    /**
     * The framework that is being used for this project. When `null` is used no framework is selected
     */
    framework?: CreateProjectFramework | undefined;
    /**
     * The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed
     */
    gitRepository?: GitRepository | undefined;
    /**
     * The install command for this project. When `null` is used this value will be automatically detected
     */
    installCommand?: string | null | undefined;
    /**
     * The desired name for the project
     */
    name: string;
    /**
     * Opts-out of the message prompting a CLI user to connect a Git repository in `vercel link`.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    skipGitConnectDuringLink?: boolean | undefined;
    /**
     * The Vercel Auth setting for the project (historically named \"SSO Protection\")
     */
    ssoProtection?: CreateProjectSsoProtection | null | undefined;
    /**
     * The output directory of the project. When `null` is used this value will be automatically detected
     */
    outputDirectory?: string | null | undefined;
    /**
     * Specifies whether the source code and logs of the deployments for this project should be public or not
     */
    publicSource?: boolean | null | undefined;
    /**
     * The name of a directory or relative path to the source code of your project. When `null` is used it will default to the project root
     */
    rootDirectory?: string | null | undefined;
    /**
     * The region to deploy Serverless Functions in this project
     */
    serverlessFunctionRegion?: string | null | undefined;
    /**
     * Specifies whether Zero Config Failover is enabled for this project.
     */
    serverlessFunctionZeroConfigFailover?: boolean | undefined;
    /**
     * OpenID Connect JSON Web Token generation configuration.
     */
    oidcTokenConfig?: OidcTokenConfig | undefined;
    /**
     * Opt-in to skip deployments when there are no changes to the root directory and its dependencies
     */
    enableAffectedProjectsDeployments?: boolean | undefined;
    /**
     * Specifies resource override configuration for the project
     */
    resourceConfig?: CreateProjectResourceConfig | undefined;
};
export type CreateProjectRequest = {
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody?: CreateProjectRequestBody | undefined;
};
export type CreateProjectAnalytics = {
    id: string;
    canceledAt?: number | null | undefined;
    disabledAt: number;
    enabledAt: number;
    paidAt?: number | undefined;
    sampleRatePercent?: number | null | undefined;
    spendLimitInDollars?: number | null | undefined;
};
export type CreateProjectSpeedInsights = {
    id: string;
    enabledAt?: number | undefined;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    hasData?: boolean | undefined;
    paidAt?: number | undefined;
};
export declare const CreateProjectEnvId2: {
    readonly Preview: "preview";
    readonly Production: "production";
};
export type CreateProjectEnvId2 = ClosedEnum<typeof CreateProjectEnvId2>;
export type CreateProjectEnvId = string | CreateProjectEnvId2;
export type CreateProjectAws = {
    subnetIds: Array<string>;
    securityGroupId: string;
};
export type CreateProjectConnectConfigurations = {
    envId: string | CreateProjectEnvId2;
    connectConfigurationId: string;
    dc?: string | undefined;
    passive: boolean;
    buildsEnabled: boolean;
    aws?: CreateProjectAws | undefined;
    createdAt: number;
    updatedAt: number;
};
export type CreateProjectDefinitions = {
    /**
     * The hostname that should be used.
     */
    host: string;
    /**
     * The path that should be called for the cronjob.
     */
    path: string;
    /**
     * The cron expression.
     */
    schedule: string;
};
export type CreateProjectCrons = {
    /**
     * The time the feature was enabled for this project. Note: It enables automatically with the first Deployment that outputs cronjobs.
     */
    enabledAt: number;
    /**
     * The time the feature was disabled for this project.
     */
    disabledAt: number | null;
    updatedAt: number;
    /**
     * The ID of the Deployment from which the definitions originated.
     */
    deploymentId: string | null;
    definitions: Array<CreateProjectDefinitions>;
};
export type CreateProjectDataCache = {
    userDisabled: boolean;
    storageSizeBytes?: number | null | undefined;
    unlimited?: boolean | undefined;
};
/**
 * Retention policies for deployments. These are enforced at the project level, but we also maintain an instance of this at the team level as a default policy that gets applied to new projects.
 */
export type CreateProjectDeploymentExpiration = {
    /**
     * Number of days to keep non-production deployments (mostly preview deployments) before soft deletion.
     */
    expirationDays?: number | undefined;
    /**
     * Number of days to keep production deployments before soft deletion.
     */
    expirationDaysProduction?: number | undefined;
    /**
     * Number of days to keep canceled deployments before soft deletion.
     */
    expirationDaysCanceled?: number | undefined;
    /**
     * Number of days to keep errored deployments before soft deletion.
     */
    expirationDaysErrored?: number | undefined;
    /**
     * Minimum number of production deployments to keep for this project, even if they are over the production expiration limit.
     */
    deploymentsToKeep?: number | undefined;
};
export declare const CreateProjectTarget2: {
    readonly Production: "production";
    readonly Preview: "preview";
    readonly Development: "development";
};
export type CreateProjectTarget2 = ClosedEnum<typeof CreateProjectTarget2>;
export declare const CreateProjectTarget1: {
    readonly Production: "production";
    readonly Preview: "preview";
    readonly Development: "development";
};
export type CreateProjectTarget1 = ClosedEnum<typeof CreateProjectTarget1>;
export type CreateProjectProjectsTarget = Array<CreateProjectTarget1> | CreateProjectTarget2;
export declare const CreateProjectProjectsResponseType: {
    readonly System: "system";
    readonly Encrypted: "encrypted";
    readonly Plain: "plain";
    readonly Sensitive: "sensitive";
    readonly Secret: "secret";
};
export type CreateProjectProjectsResponseType = ClosedEnum<typeof CreateProjectProjectsResponseType>;
export declare const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type: {
    readonly FlagsConnectionString: "flags-connection-string";
};
export type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type = ClosedEnum<typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type>;
export type CreateProjectContentHint15 = {
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type;
    projectId: string;
};
export declare const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type: {
    readonly IntegrationStoreSecret: "integration-store-secret";
};
export type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type = ClosedEnum<typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type>;
export type CreateProjectContentHint14 = {
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type;
    storeId: string;
    integrationId: string;
    integrationProductId: string;
    integrationConfigurationId: string;
};
export declare const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type: {
    readonly PostgresUrlNoSsl: "postgres-url-no-ssl";
};
export type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type = ClosedEnum<typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type>;
export type CreateProjectContentHint13 = {
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type;
    storeId: string;
};
export declare const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type: {
    readonly PostgresDatabase: "postgres-database";
};
export type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type = ClosedEnum<typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type>;
export type CreateProjectContentHint12 = {
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type;
    storeId: string;
};
export declare const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type: {
    readonly PostgresPassword: "postgres-password";
};
export type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type = ClosedEnum<typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type>;
export type CreateProjectContentHint11 = {
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type;
    storeId: string;
};
export declare const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type: {
    readonly PostgresHost: "postgres-host";
};
export type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type = ClosedEnum<typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type>;
export type CreateProjectContentHint10 = {
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type;
    storeId: string;
};
export declare const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type: {
    readonly PostgresUser: "postgres-user";
};
export type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type = ClosedEnum<typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type>;
export type CreateProjectContentHint9 = {
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type;
    storeId: string;
};
export declare const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type: {
    readonly PostgresPrismaUrl: "postgres-prisma-url";
};
export type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type = ClosedEnum<typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type>;
export type CreateProjectContentHint8 = {
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type;
    storeId: string;
};
export declare const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType: {
    readonly PostgresUrlNonPooling: "postgres-url-non-pooling";
};
export type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType = ClosedEnum<typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType>;
export type CreateProjectContentHint7 = {
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType;
    storeId: string;
};
export declare const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType: {
    readonly PostgresUrl: "postgres-url";
};
export type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType = ClosedEnum<typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType>;
export type CreateProjectContentHint6 = {
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType;
    storeId: string;
};
export declare const CreateProjectContentHintProjectsResponse200ApplicationJSONType: {
    readonly BlobReadWriteToken: "blob-read-write-token";
};
export type CreateProjectContentHintProjectsResponse200ApplicationJSONType = ClosedEnum<typeof CreateProjectContentHintProjectsResponse200ApplicationJSONType>;
export type CreateProjectContentHint5 = {
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONType;
    storeId: string;
};
export declare const CreateProjectContentHintProjectsResponse200Type: {
    readonly RedisRestApiReadOnlyToken: "redis-rest-api-read-only-token";
};
export type CreateProjectContentHintProjectsResponse200Type = ClosedEnum<typeof CreateProjectContentHintProjectsResponse200Type>;
export type CreateProjectContentHint4 = {
    type: CreateProjectContentHintProjectsResponse200Type;
    storeId: string;
};
export declare const CreateProjectContentHintProjectsResponseType: {
    readonly RedisRestApiToken: "redis-rest-api-token";
};
export type CreateProjectContentHintProjectsResponseType = ClosedEnum<typeof CreateProjectContentHintProjectsResponseType>;
export type CreateProjectContentHint3 = {
    type: CreateProjectContentHintProjectsResponseType;
    storeId: string;
};
export declare const CreateProjectContentHintProjectsType: {
    readonly RedisRestApiUrl: "redis-rest-api-url";
};
export type CreateProjectContentHintProjectsType = ClosedEnum<typeof CreateProjectContentHintProjectsType>;
export type CreateProjectContentHint2 = {
    type: CreateProjectContentHintProjectsType;
    storeId: string;
};
export declare const CreateProjectContentHintType: {
    readonly RedisUrl: "redis-url";
};
export type CreateProjectContentHintType = ClosedEnum<typeof CreateProjectContentHintType>;
export type CreateProjectContentHint1 = {
    type: CreateProjectContentHintType;
    storeId: string;
};
export type CreateProjectContentHint = CreateProjectContentHint14 | CreateProjectContentHint1 | CreateProjectContentHint2 | CreateProjectContentHint3 | CreateProjectContentHint4 | CreateProjectContentHint5 | CreateProjectContentHint6 | CreateProjectContentHint7 | CreateProjectContentHint8 | CreateProjectContentHint9 | CreateProjectContentHint10 | CreateProjectContentHint11 | CreateProjectContentHint12 | CreateProjectContentHint13 | CreateProjectContentHint15;
export declare const CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType: {
    readonly FlagsSecret: "flags-secret";
};
export type CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType = ClosedEnum<typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType>;
/**
 * Similar to `contentHints`, but should not be exposed to the user.
 */
export type CreateProjectInternalContentHint = {
    type: CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType;
    /**
     * Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
     */
    encryptedValue: string;
};
export type CreateProjectEnv = {
    target?: Array<CreateProjectTarget1> | CreateProjectTarget2 | undefined;
    type: CreateProjectProjectsResponseType;
    /**
     * This is used to identiy variables that have been migrated from type secret to sensitive.
     */
    sunsetSecretId?: string | undefined;
    decrypted?: boolean | undefined;
    value: string;
    vsmValue?: string | undefined;
    id?: string | undefined;
    key: string;
    configurationId?: string | null | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    createdBy?: string | null | undefined;
    updatedBy?: string | null | undefined;
    gitBranch?: string | undefined;
    edgeConfigId?: string | null | undefined;
    edgeConfigTokenId?: string | null | undefined;
    contentHint?: CreateProjectContentHint14 | CreateProjectContentHint1 | CreateProjectContentHint2 | CreateProjectContentHint3 | CreateProjectContentHint4 | CreateProjectContentHint5 | CreateProjectContentHint6 | CreateProjectContentHint7 | CreateProjectContentHint8 | CreateProjectContentHint9 | CreateProjectContentHint10 | CreateProjectContentHint11 | CreateProjectContentHint12 | CreateProjectContentHint13 | CreateProjectContentHint15 | null | undefined;
    /**
     * Similar to `contentHints`, but should not be exposed to the user.
     */
    internalContentHint?: CreateProjectInternalContentHint | null | undefined;
    comment?: string | undefined;
    customEnvironmentIds?: Array<string> | undefined;
};
/**
 * The type of environment (production, preview, or development)
 */
export declare const CreateProjectProjectsResponse200Type: {
    readonly Preview: "preview";
    readonly Production: "production";
    readonly Development: "development";
};
/**
 * The type of environment (production, preview, or development)
 */
export type CreateProjectProjectsResponse200Type = ClosedEnum<typeof CreateProjectProjectsResponse200Type>;
/**
 * The type of matching to perform
 */
export declare const CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType: {
    readonly EndsWith: "endsWith";
    readonly StartsWith: "startsWith";
    readonly Equals: "equals";
};
/**
 * The type of matching to perform
 */
export type CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType = ClosedEnum<typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType>;
/**
 * Configuration for matching git branches to this environment
 */
export type CreateProjectBranchMatcher = {
    /**
     * The type of matching to perform
     */
    type: CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType;
    /**
     * The pattern to match against branch names
     */
    pattern: string;
};
/**
 * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
 */
export type CreateProjectVerification = {
    type: string;
    domain: string;
    value: string;
    reason: string;
};
/**
 * List of domains associated with this environment
 */
export type CreateProjectDomains = {
    name: string;
    apexName: string;
    projectId: string;
    redirect?: string | null | undefined;
    redirectStatusCode?: number | null | undefined;
    gitBranch?: string | null | undefined;
    customEnvironmentId?: string | null | undefined;
    updatedAt?: number | undefined;
    createdAt?: number | undefined;
    /**
     * `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.
     */
    verified: boolean;
    /**
     * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
     */
    verification?: Array<CreateProjectVerification> | undefined;
};
/**
 * Internal representation of a custom environment with all required properties
 */
export type CreateProjectCustomEnvironments = {
    /**
     * Unique identifier for the custom environment (format: env_*)
     */
    id: string;
    /**
     * URL-friendly name of the environment
     */
    slug: string;
    /**
     * The type of environment (production, preview, or development)
     */
    type: CreateProjectProjectsResponse200Type;
    /**
     * Optional description of the environment's purpose
     */
    description?: string | undefined;
    /**
     * Configuration for matching git branches to this environment
     */
    branchMatcher?: CreateProjectBranchMatcher | undefined;
    /**
     * List of domains associated with this environment
     */
    domains?: Array<CreateProjectDomains> | undefined;
    /**
     * List of aliases for the current deployment
     */
    currentDeploymentAliases?: Array<string> | undefined;
    /**
     * Timestamp when the environment was created
     */
    createdAt: number;
    /**
     * Timestamp when the environment was last updated
     */
    updatedAt: number;
};
export declare const CreateProjectProjectsFramework: {
    readonly Blitzjs: "blitzjs";
    readonly Nextjs: "nextjs";
    readonly Gatsby: "gatsby";
    readonly Remix: "remix";
    readonly ReactRouter: "react-router";
    readonly Astro: "astro";
    readonly Hexo: "hexo";
    readonly Eleventy: "eleventy";
    readonly Docusaurus2: "docusaurus-2";
    readonly Docusaurus: "docusaurus";
    readonly Preact: "preact";
    readonly Solidstart1: "solidstart-1";
    readonly Solidstart: "solidstart";
    readonly Dojo: "dojo";
    readonly Ember: "ember";
    readonly Vue: "vue";
    readonly Scully: "scully";
    readonly IonicAngular: "ionic-angular";
    readonly Angular: "angular";
    readonly Polymer: "polymer";
    readonly Svelte: "svelte";
    readonly Sveltekit: "sveltekit";
    readonly Sveltekit1: "sveltekit-1";
    readonly IonicReact: "ionic-react";
    readonly CreateReactApp: "create-react-app";
    readonly Gridsome: "gridsome";
    readonly Umijs: "umijs";
    readonly Sapper: "sapper";
    readonly Saber: "saber";
    readonly Stencil: "stencil";
    readonly Nuxtjs: "nuxtjs";
    readonly Redwoodjs: "redwoodjs";
    readonly Hugo: "hugo";
    readonly Jekyll: "jekyll";
    readonly Brunch: "brunch";
    readonly Middleman: "middleman";
    readonly Zola: "zola";
    readonly Hydrogen: "hydrogen";
    readonly Vite: "vite";
    readonly Vitepress: "vitepress";
    readonly Vuepress: "vuepress";
    readonly Parcel: "parcel";
    readonly Fastapi: "fastapi";
    readonly Fasthtml: "fasthtml";
    readonly SanityV3: "sanity-v3";
    readonly Sanity: "sanity";
    readonly Storybook: "storybook";
    readonly Nitro: "nitro";
    readonly Hono: "hono";
    readonly Express: "express";
    readonly Xmcp: "xmcp";
};
export type CreateProjectProjectsFramework = ClosedEnum<typeof CreateProjectProjectsFramework>;
export type CreateProjectIpBuckets = {
    bucket: string;
    supportUntil?: number | undefined;
};
export type CreateProjectAliasAssigned = number | boolean;
export type CreateProjectAliasError = {
    code: string;
    message: string;
};
/**
 * The type of matching to perform
 */
export declare const CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType: {
    readonly EndsWith: "endsWith";
    readonly StartsWith: "startsWith";
    readonly Equals: "equals";
};
/**
 * The type of matching to perform
 */
export type CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType = ClosedEnum<typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType>;
export type CreateProjectProjectsBranchMatcher = {
    /**
     * The type of matching to perform
     */
    type: CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType;
    /**
     * The pattern to match against branch names
     */
    pattern: string;
};
export type CreateProjectBuilds = {
    use: string;
    src?: string | undefined;
    dest?: string | undefined;
};
export declare const CreateProjectChecksConclusion: {
    readonly Succeeded: "succeeded";
    readonly Failed: "failed";
    readonly Skipped: "skipped";
    readonly Canceled: "canceled";
};
export type CreateProjectChecksConclusion = ClosedEnum<typeof CreateProjectChecksConclusion>;
export declare const CreateProjectChecksState: {
    readonly Registered: "registered";
    readonly Running: "running";
    readonly Completed: "completed";
};
export type CreateProjectChecksState = ClosedEnum<typeof CreateProjectChecksState>;
export type CreateProjectCreator = {
    email: string;
    githubLogin?: string | undefined;
    gitlabLogin?: string | undefined;
    uid: string;
    username: string;
};
export type CreateProjectOidcTokenClaims = {
    iss: string;
    sub: string;
    scope: string;
    aud: string;
    owner: string;
    ownerId: string;
    project: string;
    projectId: string;
    environment: string;
};
export declare const CreateProjectPlan: {
    readonly Pro: "pro";
    readonly Enterprise: "enterprise";
    readonly Hobby: "hobby";
};
export type CreateProjectPlan = ClosedEnum<typeof CreateProjectPlan>;
export declare const CreateProjectReadyState: {
    readonly Building: "BUILDING";
    readonly Error: "ERROR";
    readonly Initializing: "INITIALIZING";
    readonly Queued: "QUEUED";
    readonly Ready: "READY";
    readonly Canceled: "CANCELED";
};
export type CreateProjectReadyState = ClosedEnum<typeof CreateProjectReadyState>;
export declare const CreateProjectReadySubstate: {
    readonly Staged: "STAGED";
    readonly Rolling: "ROLLING";
    readonly Promoted: "PROMOTED";
};
export type CreateProjectReadySubstate = ClosedEnum<typeof CreateProjectReadySubstate>;
export declare const CreateProjectProjectsResponse200ApplicationJSONType: {
    readonly Lambdas: "LAMBDAS";
};
export type CreateProjectProjectsResponse200ApplicationJSONType = ClosedEnum<typeof CreateProjectProjectsResponse200ApplicationJSONType>;
export type CreateProjectLatestDeployments = {
    id: string;
    alias?: Array<string> | undefined;
    aliasAssigned?: number | boolean | null | undefined;
    aliasError?: CreateProjectAliasError | null | undefined;
    aliasFinal?: string | null | undefined;
    automaticAliases?: Array<string> | undefined;
    branchMatcher?: CreateProjectProjectsBranchMatcher | undefined;
    buildingAt?: number | undefined;
    builds?: Array<CreateProjectBuilds> | undefined;
    checksConclusion?: CreateProjectChecksConclusion | undefined;
    checksState?: CreateProjectChecksState | undefined;
    connectBuildsEnabled?: boolean | undefined;
    connectConfigurationId?: string | undefined;
    createdAt: number;
    createdIn: string;
    creator: CreateProjectCreator | null;
    deletedAt?: number | undefined;
    deploymentHostname: string;
    forced?: boolean | undefined;
    name: string;
    meta?: {
        [k: string]: string;
    } | undefined;
    monorepoManager?: string | null | undefined;
    oidcTokenClaims?: CreateProjectOidcTokenClaims | undefined;
    plan: CreateProjectPlan;
    /**
     * Whether or not preview comments are enabled for the deployment
     */
    previewCommentsEnabled?: boolean | undefined;
    private: boolean;
    readyAt?: number | undefined;
    readyState: CreateProjectReadyState;
    readySubstate?: CreateProjectReadySubstate | undefined;
    requestedAt?: number | undefined;
    target?: string | null | undefined;
    teamId?: string | null | undefined;
    type: CreateProjectProjectsResponse200ApplicationJSONType;
    url: string;
    userId: string;
    withCache?: boolean | undefined;
};
export declare const CreateProjectLinkProjectsResponse200ApplicationJSONType: {
    readonly Bitbucket: "bitbucket";
};
export type CreateProjectLinkProjectsResponse200ApplicationJSONType = ClosedEnum<typeof CreateProjectLinkProjectsResponse200ApplicationJSONType>;
export type CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};
export type CreateProjectLink5 = {
    name: string;
    slug: string;
    owner: string;
    type: CreateProjectLinkProjectsResponse200ApplicationJSONType;
    uuid: string;
    workspaceUuid: string;
    createdAt?: number | undefined;
    deployHooks: Array<CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks>;
    gitCredentialId: string;
    updatedAt?: number | undefined;
    sourceless?: boolean | undefined;
    productionBranch: string;
};
export declare const CreateProjectLinkProjectsResponse200Type: {
    readonly Gitlab: "gitlab";
};
export type CreateProjectLinkProjectsResponse200Type = ClosedEnum<typeof CreateProjectLinkProjectsResponse200Type>;
export type CreateProjectLinkProjectsResponse200DeployHooks = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};
export type CreateProjectLink4 = {
    projectId: string;
    projectName: string;
    projectNameWithNamespace: string;
    projectNamespace: string;
    /**
     * A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes. This is the id of the top level group that a namespace belongs to. Gitlab supports group nesting (up to 20 levels).
     */
    projectOwnerId?: number | undefined;
    projectUrl: string;
    type: CreateProjectLinkProjectsResponse200Type;
    createdAt?: number | undefined;
    deployHooks: Array<CreateProjectLinkProjectsResponse200DeployHooks>;
    gitCredentialId: string;
    updatedAt?: number | undefined;
    sourceless?: boolean | undefined;
    productionBranch: string;
};
export declare const CreateProjectLinkProjectsResponseType: {
    readonly GithubCustomHost: "github-custom-host";
};
export type CreateProjectLinkProjectsResponseType = ClosedEnum<typeof CreateProjectLinkProjectsResponseType>;
export type CreateProjectLinkProjectsResponseDeployHooks = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};
export type CreateProjectLink3 = {
    org: string;
    /**
     * A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes.
     */
    repoOwnerId?: number | undefined;
    repo?: string | undefined;
    repoId?: number | undefined;
    type: CreateProjectLinkProjectsResponseType;
    host: string;
    createdAt?: number | undefined;
    deployHooks: Array<CreateProjectLinkProjectsResponseDeployHooks>;
    gitCredentialId: string;
    updatedAt?: number | undefined;
    sourceless?: boolean | undefined;
    productionBranch: string;
};
export declare const CreateProjectLinkProjectsType: {
    readonly GithubLimited: "github-limited";
};
export type CreateProjectLinkProjectsType = ClosedEnum<typeof CreateProjectLinkProjectsType>;
export type CreateProjectLinkProjectsDeployHooks = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};
export type CreateProjectLink2 = {
    type: CreateProjectLinkProjectsType;
    repo?: string | undefined;
    repoId?: number | undefined;
    updatedAt?: number | undefined;
    createdAt?: number | undefined;
    org: string;
    /**
     * A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes.
     */
    repoOwnerId?: number | undefined;
    deployHooks: Array<CreateProjectLinkProjectsDeployHooks>;
    gitCredentialId: string;
    sourceless?: boolean | undefined;
    productionBranch: string;
};
export declare const CreateProjectLinkType: {
    readonly Github: "github";
};
export type CreateProjectLinkType = ClosedEnum<typeof CreateProjectLinkType>;
export type CreateProjectLinkDeployHooks = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};
export type CreateProjectLink1 = {
    org: string;
    /**
     * A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes.
     */
    repoOwnerId?: number | undefined;
    repo?: string | undefined;
    repoId?: number | undefined;
    type: CreateProjectLinkType;
    createdAt?: number | undefined;
    deployHooks: Array<CreateProjectLinkDeployHooks>;
    gitCredentialId: string;
    updatedAt?: number | undefined;
    sourceless?: boolean | undefined;
    productionBranch: string;
};
export type CreateProjectLink = CreateProjectLink4 | CreateProjectLink5 | CreateProjectLink3 | CreateProjectLink1 | CreateProjectLink2;
export type CreateProjectMicrofrontends2 = {
    updatedAt: number;
    groupIds: Array<any>;
    enabled: boolean;
};
export type CreateProjectMicrofrontends1 = {
    /**
     * Timestamp when the microfrontends settings were last updated.
     */
    updatedAt: number;
    /**
     * The group IDs of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together.
     */
    groupIds: Array<string>;
    /**
     * Whether microfrontends are enabled for this project.
     */
    enabled: boolean;
    /**
     * Whether this project is the default application for the microfrontends group. The default application is the one that is used as the top level shell for the microfrontends group and hosts the other microfrontends.
     */
    isDefaultApp?: boolean | undefined;
    /**
     * A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI. Includes the leading slash, e.g. `/docs`
     */
    defaultRoute?: string | undefined;
    /**
     * Whether observability data should be routed to this microfrontend project or a root project.
     */
    routeObservabilityToThisProject?: boolean | undefined;
};
export type CreateProjectMicrofrontends = CreateProjectMicrofrontends1 | CreateProjectMicrofrontends2;
export declare const CreateProjectNodeVersion: {
    readonly TwentyTwoDotX: "22.x";
    readonly TwentyDotX: "20.x";
    readonly EighteenDotX: "18.x";
    readonly SixteenDotX: "16.x";
    readonly FourteenDotX: "14.x";
    readonly TwelveDotX: "12.x";
    readonly TenDotX: "10.x";
    readonly EightDot10DotX: "8.10.x";
};
export type CreateProjectNodeVersion = ClosedEnum<typeof CreateProjectNodeVersion>;
export type CreateProjectPaths = {
    value: string;
};
export type CreateProjectOptionsAllowlist = {
    paths: Array<CreateProjectPaths>;
};
export type CreateProjectPasswordProtection = {};
export declare const CreateProjectFunctionDefaultMemoryType: {
    readonly StandardLegacy: "standard_legacy";
    readonly Standard: "standard";
    readonly Performance: "performance";
};
export type CreateProjectFunctionDefaultMemoryType = ClosedEnum<typeof CreateProjectFunctionDefaultMemoryType>;
export declare const CreateProjectBuildMachineType: {
    readonly Enhanced: "enhanced";
    readonly Turbo: "turbo";
};
export type CreateProjectBuildMachineType = ClosedEnum<typeof CreateProjectBuildMachineType>;
export type CreateProjectProjectsResourceConfig = {
    elasticConcurrencyEnabled?: boolean | undefined;
    fluid?: boolean | undefined;
    functionDefaultRegions: Array<string>;
    functionDefaultTimeout?: number | undefined;
    functionDefaultMemoryType?: CreateProjectFunctionDefaultMemoryType | undefined;
    functionZeroConfigFailover?: boolean | undefined;
    buildMachineType?: CreateProjectBuildMachineType | undefined;
    isNSNBDisabled?: boolean | undefined;
};
/**
 * Description of why a project was rolled back, and by whom. Note that lastAliasRequest contains the from/to details of the rollback.
 */
export type CreateProjectRollbackDescription = {
    /**
     * The user who rolled back the project.
     */
    userId: string;
    /**
     * The username of the user who rolled back the project.
     */
    username: string;
    /**
     * User-supplied explanation of why they rolled back the project. Limited to 250 characters.
     */
    description: string;
    /**
     * Timestamp of when the rollback was requested.
     */
    createdAt: number;
};
/**
 * An array of all the stages required during a deployment release. Each stage defines a target percentage and advancement rules. The final stage must always have targetPercentage: 100.
 */
export type CreateProjectStages = {
    /**
     * The percentage of traffic to serve to the canary deployment (0-100)
     */
    targetPercentage: number;
    /**
     * Whether or not this stage requires manual approval to proceed
     */
    requireApproval?: boolean | undefined;
    /**
     * Duration in minutes for automatic advancement to the next stage
     */
    duration?: number | undefined;
};
/**
 * Project-level rolling release configuration that defines how deployments should be gradually rolled out
 */
export type CreateProjectRollingRelease = {
    /**
     * The environment that the release targets, currently only supports production. Adding in case we want to configure with alias groups or custom environments.
     */
    target: string;
    /**
     * An array of all the stages required during a deployment release. Each stage defines a target percentage and advancement rules. The final stage must always have targetPercentage: 100.
     */
    stages?: Array<CreateProjectStages> | null | undefined;
    /**
     * Whether the request served by a canary deployment should return a header indicating a canary was served. Defaults to `false` when omitted.
     */
    canaryResponseHeader?: boolean | undefined;
};
export declare const CreateProjectProjectsFunctionDefaultMemoryType: {
    readonly StandardLegacy: "standard_legacy";
    readonly Standard: "standard";
    readonly Performance: "performance";
};
export type CreateProjectProjectsFunctionDefaultMemoryType = ClosedEnum<typeof CreateProjectProjectsFunctionDefaultMemoryType>;
export declare const CreateProjectProjectsBuildMachineType: {
    readonly Enhanced: "enhanced";
    readonly Turbo: "turbo";
};
export type CreateProjectProjectsBuildMachineType = ClosedEnum<typeof CreateProjectProjectsBuildMachineType>;
export type CreateProjectDefaultResourceConfig = {
    elasticConcurrencyEnabled?: boolean | undefined;
    fluid?: boolean | undefined;
    functionDefaultRegions: Array<string>;
    functionDefaultTimeout?: number | undefined;
    functionDefaultMemoryType?: CreateProjectProjectsFunctionDefaultMemoryType | undefined;
    functionZeroConfigFailover?: boolean | undefined;
    buildMachineType?: CreateProjectProjectsBuildMachineType | undefined;
    isNSNBDisabled?: boolean | undefined;
};
export declare const CreateProjectProjectsDeploymentType: {
    readonly Preview: "preview";
    readonly All: "all";
    readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
    readonly AllExceptCustomDomains: "all_except_custom_domains";
};
export type CreateProjectProjectsDeploymentType = ClosedEnum<typeof CreateProjectProjectsDeploymentType>;
export type CreateProjectProjectsSsoProtection = {
    deploymentType: CreateProjectProjectsDeploymentType;
};
export type CreateProjectProjectsAliasAssigned = number | boolean;
export type CreateProjectProjectsAliasError = {
    code: string;
    message: string;
};
/**
 * The type of matching to perform
 */
export declare const CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType: {
    readonly EndsWith: "endsWith";
    readonly StartsWith: "startsWith";
    readonly Equals: "equals";
};
/**
 * The type of matching to perform
 */
export type CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType = ClosedEnum<typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType>;
export type CreateProjectProjectsResponseBranchMatcher = {
    /**
     * The type of matching to perform
     */
    type: CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType;
    /**
     * The pattern to match against branch names
     */
    pattern: string;
};
export type CreateProjectProjectsBuilds = {
    use: string;
    src?: string | undefined;
    dest?: string | undefined;
};
export declare const CreateProjectProjectsChecksConclusion: {
    readonly Succeeded: "succeeded";
    readonly Failed: "failed";
    readonly Skipped: "skipped";
    readonly Canceled: "canceled";
};
export type CreateProjectProjectsChecksConclusion = ClosedEnum<typeof CreateProjectProjectsChecksConclusion>;
export declare const CreateProjectProjectsChecksState: {
    readonly Registered: "registered";
    readonly Running: "running";
    readonly Completed: "completed";
};
export type CreateProjectProjectsChecksState = ClosedEnum<typeof CreateProjectProjectsChecksState>;
export type CreateProjectProjectsCreator = {
    email: string;
    githubLogin?: string | undefined;
    gitlabLogin?: string | undefined;
    uid: string;
    username: string;
};
export type CreateProjectProjectsOidcTokenClaims = {
    iss: string;
    sub: string;
    scope: string;
    aud: string;
    owner: string;
    ownerId: string;
    project: string;
    projectId: string;
    environment: string;
};
export declare const CreateProjectProjectsPlan: {
    readonly Pro: "pro";
    readonly Enterprise: "enterprise";
    readonly Hobby: "hobby";
};
export type CreateProjectProjectsPlan = ClosedEnum<typeof CreateProjectProjectsPlan>;
export declare const CreateProjectProjectsReadyState: {
    readonly Building: "BUILDING";
    readonly Error: "ERROR";
    readonly Initializing: "INITIALIZING";
    readonly Queued: "QUEUED";
    readonly Ready: "READY";
    readonly Canceled: "CANCELED";
};
export type CreateProjectProjectsReadyState = ClosedEnum<typeof CreateProjectProjectsReadyState>;
export declare const CreateProjectProjectsReadySubstate: {
    readonly Staged: "STAGED";
    readonly Rolling: "ROLLING";
    readonly Promoted: "PROMOTED";
};
export type CreateProjectProjectsReadySubstate = ClosedEnum<typeof CreateProjectProjectsReadySubstate>;
export declare const CreateProjectProjectsResponse200ApplicationJSONResponseBodyType: {
    readonly Lambdas: "LAMBDAS";
};
export type CreateProjectProjectsResponse200ApplicationJSONResponseBodyType = ClosedEnum<typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyType>;
export type CreateProjectTargets = {
    id: string;
    alias?: Array<string> | undefined;
    aliasAssigned?: number | boolean | null | undefined;
    aliasError?: CreateProjectProjectsAliasError | null | undefined;
    aliasFinal?: string | null | undefined;
    automaticAliases?: Array<string> | undefined;
    branchMatcher?: CreateProjectProjectsResponseBranchMatcher | undefined;
    buildingAt?: number | undefined;
    builds?: Array<CreateProjectProjectsBuilds> | undefined;
    checksConclusion?: CreateProjectProjectsChecksConclusion | undefined;
    checksState?: CreateProjectProjectsChecksState | undefined;
    connectBuildsEnabled?: boolean | undefined;
    connectConfigurationId?: string | undefined;
    createdAt: number;
    createdIn: string;
    creator: CreateProjectProjectsCreator | null;
    deletedAt?: number | undefined;
    deploymentHostname: string;
    forced?: boolean | undefined;
    name: string;
    meta?: {
        [k: string]: string;
    } | undefined;
    monorepoManager?: string | null | undefined;
    oidcTokenClaims?: CreateProjectProjectsOidcTokenClaims | undefined;
    plan: CreateProjectProjectsPlan;
    /**
     * Whether or not preview comments are enabled for the deployment
     */
    previewCommentsEnabled?: boolean | undefined;
    private: boolean;
    readyAt?: number | undefined;
    readyState: CreateProjectProjectsReadyState;
    readySubstate?: CreateProjectProjectsReadySubstate | undefined;
    requestedAt?: number | undefined;
    target?: string | null | undefined;
    teamId?: string | null | undefined;
    type: CreateProjectProjectsResponse200ApplicationJSONResponseBodyType;
    url: string;
    userId: string;
    withCache?: boolean | undefined;
};
export type CreateProjectPermissions = {
    aliasProject?: Array<ACLAction> | undefined;
    aliasProtectionBypass?: Array<ACLAction> | undefined;
    buildMachine?: Array<ACLAction> | undefined;
    productionAliasProtectionBypass?: Array<ACLAction> | undefined;
    connectConfigurationLink?: Array<ACLAction> | undefined;
    dataCacheNamespace?: Array<ACLAction> | undefined;
    deployment?: Array<ACLAction> | undefined;
    deploymentBuildLogs?: Array<ACLAction> | undefined;
    deploymentCheck?: Array<ACLAction> | undefined;
    deploymentCheckPreview?: Array<ACLAction> | undefined;
    deploymentCheckReRunFromProductionBranch?: Array<ACLAction> | undefined;
    deploymentProductionGit?: Array<ACLAction> | undefined;
    deploymentV0?: Array<ACLAction> | undefined;
    deploymentPreview?: Array<ACLAction> | undefined;
    deploymentPrivate?: Array<ACLAction> | undefined;
    deploymentPromote?: Array<ACLAction> | undefined;
    deploymentRollback?: Array<ACLAction> | undefined;
    edgeCacheNamespace?: Array<ACLAction> | undefined;
    environments?: Array<ACLAction> | undefined;
    logs?: Array<ACLAction> | undefined;
    logsPreset?: Array<ACLAction> | undefined;
    passwordProtection?: Array<ACLAction> | undefined;
    optionsAllowlist?: Array<ACLAction> | undefined;
    job?: Array<ACLAction> | undefined;
    observabilityData?: Array<ACLAction> | undefined;
    onDemandBuild?: Array<ACLAction> | undefined;
    onDemandConcurrency?: Array<ACLAction> | undefined;
    project?: Array<ACLAction> | undefined;
    projectFromV0?: Array<ACLAction> | undefined;
    projectAccessGroup?: Array<ACLAction> | undefined;
    projectAnalyticsSampling?: Array<ACLAction> | undefined;
    projectCheck?: Array<ACLAction> | undefined;
    projectCheckRun?: Array<ACLAction> | undefined;
    projectDeploymentHook?: Array<ACLAction> | undefined;
    projectDomain?: Array<ACLAction> | undefined;
    projectDomainMove?: Array<ACLAction> | undefined;
    projectDomainCheckConfig?: Array<ACLAction> | undefined;
    projectEnvVars?: Array<ACLAction> | undefined;
    projectEnvVarsProduction?: Array<ACLAction> | undefined;
    projectEnvVarsUnownedByIntegration?: Array<ACLAction> | undefined;
    projectFlags?: Array<ACLAction> | undefined;
    projectId?: Array<ACLAction> | undefined;
    projectIntegrationConfiguration?: Array<ACLAction> | undefined;
    projectLink?: Array<ACLAction> | undefined;
    projectMember?: Array<ACLAction> | undefined;
    projectMonitoring?: Array<ACLAction> | undefined;
    projectPermissions?: Array<ACLAction> | undefined;
    projectProductionBranch?: Array<ACLAction> | undefined;
    projectTransfer?: Array<ACLAction> | undefined;
    projectTransferOut?: Array<ACLAction> | undefined;
    projectProtectionBypass?: Array<ACLAction> | undefined;
    projectUsage?: Array<ACLAction> | undefined;
    projectAnalyticsUsage?: Array<ACLAction> | undefined;
    projectSupportCase?: Array<ACLAction> | undefined;
    projectSupportCaseComment?: Array<ACLAction> | undefined;
    projectDeploymentExpiration?: Array<ACLAction> | undefined;
    projectRollingRelease?: Array<ACLAction> | undefined;
    projectTier?: Array<ACLAction> | undefined;
    projectOIDCToken?: Array<ACLAction> | undefined;
    seawallConfig?: Array<ACLAction> | undefined;
    skewProtection?: Array<ACLAction> | undefined;
    analytics?: Array<ACLAction> | undefined;
    trustedIps?: Array<ACLAction> | undefined;
    v0Chat?: Array<ACLAction> | undefined;
    webAnalytics?: Array<ACLAction> | undefined;
    sharedEnvVarConnection?: Array<ACLAction> | undefined;
    sonar?: Array<ACLAction> | undefined;
    oauth2Connection?: Array<ACLAction> | undefined;
    user?: Array<ACLAction> | undefined;
    userConnection?: Array<ACLAction> | undefined;
    userSudo?: Array<ACLAction> | undefined;
    webAuthn?: Array<ACLAction> | undefined;
    accessGroup?: Array<ACLAction> | undefined;
    aliasGlobal?: Array<ACLAction> | undefined;
    analyticsSampling?: Array<ACLAction> | undefined;
    analyticsUsage?: Array<ACLAction> | undefined;
    auditLog?: Array<ACLAction> | undefined;
    billingAddress?: Array<ACLAction> | undefined;
    billingInformation?: Array<ACLAction> | undefined;
    billingInvoice?: Array<ACLAction> | undefined;
    billingInvoiceEmailRecipient?: Array<ACLAction> | undefined;
    billingInvoiceLanguage?: Array<ACLAction> | undefined;
    billingPlan?: Array<ACLAction> | undefined;
    billingPurchaseOrder?: Array<ACLAction> | undefined;
    billingRefund?: Array<ACLAction> | undefined;
    billingTaxId?: Array<ACLAction> | undefined;
    blob?: Array<ACLAction> | undefined;
    budget?: Array<ACLAction> | undefined;
    cacheArtifact?: Array<ACLAction> | undefined;
    cacheArtifactUsageEvent?: Array<ACLAction> | undefined;
    codeChecks?: Array<ACLAction> | undefined;
    concurrentBuilds?: Array<ACLAction> | undefined;
    connect?: Array<ACLAction> | undefined;
    connectConfiguration?: Array<ACLAction> | undefined;
    defaultDeploymentProtection?: Array<ACLAction> | undefined;
    domain?: Array<ACLAction> | undefined;
    domainAcceptDelegation?: Array<ACLAction> | undefined;
    domainAuthCodes?: Array<ACLAction> | undefined;
    domainCertificate?: Array<ACLAction> | undefined;
    domainCheckConfig?: Array<ACLAction> | undefined;
    domainMove?: Array<ACLAction> | undefined;
    domainPurchase?: Array<ACLAction> | undefined;
    domainRecord?: Array<ACLAction> | undefined;
    domainTransferIn?: Array<ACLAction> | undefined;
    event?: Array<ACLAction> | undefined;
    ownEvent?: Array<ACLAction> | undefined;
    sensitiveEnvironmentVariablePolicy?: Array<ACLAction> | undefined;
    fileUpload?: Array<ACLAction> | undefined;
    flagsExplorerSubscription?: Array<ACLAction> | undefined;
    gitRepository?: Array<ACLAction> | undefined;
    ipBlocking?: Array<ACLAction> | undefined;
    imageOptimizationNewPrice?: Array<ACLAction> | undefined;
    integration?: Array<ACLAction> | undefined;
    integrationAccount?: Array<ACLAction> | undefined;
    integrationConfiguration?: Array<ACLAction> | undefined;
    integrationConfigurationTransfer?: Array<ACLAction> | undefined;
    integrationConfigurationProjects?: Array<ACLAction> | undefined;
    integrationVercelConfigurationOverride?: Array<ACLAction> | undefined;
    integrationConfigurationRole?: Array<ACLAction> | undefined;
    integrationSSOSession?: Array<ACLAction> | undefined;
    integrationResource?: Array<ACLAction> | undefined;
    integrationEvent?: Array<ACLAction> | undefined;
    integrationResourceSecrets?: Array<ACLAction> | undefined;
    integrationDeploymentAction?: Array<ACLAction> | undefined;
    marketplaceInstallationMember?: Array<ACLAction> | undefined;
    marketplaceBillingData?: Array<ACLAction> | undefined;
    marketplaceInvoice?: Array<ACLAction> | undefined;
    marketplaceSettings?: Array<ACLAction> | undefined;
    marketplaceExperimentationItem?: Array<ACLAction> | undefined;
    marketplaceExperimentationEdgeConfigData?: Array<ACLAction> | undefined;
    jobGlobal?: Array<ACLAction> | undefined;
    drain?: Array<ACLAction> | undefined;
    logDrain?: Array<ACLAction> | undefined;
    traceDrain?: Array<ACLAction> | undefined;
    monitoring?: Array<ACLAction> | undefined;
    monitoringSettings?: Array<ACLAction> | undefined;
    monitoringQuery?: Array<ACLAction> | undefined;
    monitoringChart?: Array<ACLAction> | undefined;
    monitoringAlert?: Array<ACLAction> | undefined;
    notificationDeploymentFailed?: Array<ACLAction> | undefined;
    notificationDomainConfiguration?: Array<ACLAction> | undefined;
    notificationDomainExpire?: Array<ACLAction> | undefined;
    notificationDomainMoved?: Array<ACLAction> | undefined;
    notificationDomainPurchase?: Array<ACLAction> | undefined;
    notificationDomainRenewal?: Array<ACLAction> | undefined;
    notificationDomainTransfer?: Array<ACLAction> | undefined;
    notificationDomainUnverified?: Array<ACLAction> | undefined;
    notificationMonitoringAlert?: Array<ACLAction> | undefined;
    notificationPaymentFailed?: Array<ACLAction> | undefined;
    notificationUsageAlert?: Array<ACLAction> | undefined;
    notificationPreferences?: Array<ACLAction> | undefined;
    notificationCustomerBudget?: Array<ACLAction> | undefined;
    notificationStatementOfReasons?: Array<ACLAction> | undefined;
    observabilityConfiguration?: Array<ACLAction> | undefined;
    alerts?: Array<ACLAction> | undefined;
    observabilityNotebook?: Array<ACLAction> | undefined;
    observabilityFunnel?: Array<ACLAction> | undefined;
    openTelemetryEndpoint?: Array<ACLAction> | undefined;
    vercelAppInstallation?: Array<ACLAction> | undefined;
    vercelAppInstallationRequest?: Array<ACLAction> | undefined;
    paymentMethod?: Array<ACLAction> | undefined;
    permissions?: Array<ACLAction> | undefined;
    postgres?: Array<ACLAction> | undefined;
    previewDeploymentSuffix?: Array<ACLAction> | undefined;
    proTrialOnboarding?: Array<ACLAction> | undefined;
    sharedEnvVars?: Array<ACLAction> | undefined;
    sharedEnvVarsProduction?: Array<ACLAction> | undefined;
    space?: Array<ACLAction> | undefined;
    spaceRun?: Array<ACLAction> | undefined;
    passwordProtectionInvoiceItem?: Array<ACLAction> | undefined;
    rateLimit?: Array<ACLAction> | undefined;
    redis?: Array<ACLAction> | undefined;
    repository?: Array<ACLAction> | undefined;
    remoteCaching?: Array<ACLAction> | undefined;
    samlConfig?: Array<ACLAction> | undefined;
    secret?: Array<ACLAction> | undefined;
    redisStoreTokenSet?: Array<ACLAction> | undefined;
    blobStoreTokenSet?: Array<ACLAction> | undefined;
    postgresStoreTokenSet?: Array<ACLAction> | undefined;
    integrationStoreTokenSet?: Array<ACLAction> | undefined;
    integrationResourceReplCommand?: Array<ACLAction> | undefined;
    storeTransfer?: Array<ACLAction> | undefined;
    supportCase?: Array<ACLAction> | undefined;
    supportCaseComment?: Array<ACLAction> | undefined;
    dataCacheBillingSettings?: Array<ACLAction> | undefined;
    team?: Array<ACLAction> | undefined;
    teamAccessRequest?: Array<ACLAction> | undefined;
    teamFellowMembership?: Array<ACLAction> | undefined;
    teamGitExclusivity?: Array<ACLAction> | undefined;
    teamInvite?: Array<ACLAction> | undefined;
    teamInviteCode?: Array<ACLAction> | undefined;
    teamJoin?: Array<ACLAction> | undefined;
    teamMemberMfaStatus?: Array<ACLAction> | undefined;
    teamMicrofrontends?: Array<ACLAction> | undefined;
    teamOwnMembership?: Array<ACLAction> | undefined;
    teamOwnMembershipDisconnectSAML?: Array<ACLAction> | undefined;
    token?: Array<ACLAction> | undefined;
    usage?: Array<ACLAction> | undefined;
    usageCycle?: Array<ACLAction> | undefined;
    vpcPeeringConnection?: Array<ACLAction> | undefined;
    webAnalyticsPlan?: Array<ACLAction> | undefined;
    edgeConfig?: Array<ACLAction> | undefined;
    edgeConfigItem?: Array<ACLAction> | undefined;
    edgeConfigSchema?: Array<ACLAction> | undefined;
    edgeConfigToken?: Array<ACLAction> | undefined;
    webhook?: Array<ACLAction> | undefined;
    webhookEvent?: Array<ACLAction> | undefined;
    endpointVerification?: Array<ACLAction> | undefined;
    projectTransferIn?: Array<ACLAction> | undefined;
    oauth2Application?: Array<ACLAction> | undefined;
    vercelRun?: Array<ACLAction> | undefined;
    vercelRunExec?: Array<ACLAction> | undefined;
    apiKey?: Array<ACLAction> | undefined;
    apiKeyOwnedBySelf?: Array<ACLAction> | undefined;
};
export type CreateProjectLastRollbackTarget = {};
export declare const CreateProjectJobStatus: {
    readonly Succeeded: "succeeded";
    readonly Failed: "failed";
    readonly Skipped: "skipped";
    readonly Pending: "pending";
    readonly InProgress: "in-progress";
};
export type CreateProjectJobStatus = ClosedEnum<typeof CreateProjectJobStatus>;
export declare const CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType: {
    readonly Promote: "promote";
    readonly Rollback: "rollback";
};
export type CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType = ClosedEnum<typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType>;
export type CreateProjectLastAliasRequest = {
    fromDeploymentId: string;
    toDeploymentId: string;
    /**
     * If rolling back from a rolling release, fromDeploymentId captures the "base" of that rolling release, and fromRollingReleaseId captures the "target" of that rolling release.
     */
    fromRollingReleaseId?: string | undefined;
    jobStatus: CreateProjectJobStatus;
    requestedAt: number;
    type: CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType;
};
export declare const CreateProjectProtectionBypassProjectsScope: {
    readonly AutomationBypass: "automation-bypass";
};
export type CreateProjectProtectionBypassProjectsScope = ClosedEnum<typeof CreateProjectProtectionBypassProjectsScope>;
export type CreateProjectProtectionBypass2 = {
    createdAt: number;
    createdBy: string;
    scope: CreateProjectProtectionBypassProjectsScope;
};
export declare const CreateProjectProtectionBypassScope: {
    readonly IntegrationAutomationBypass: "integration-automation-bypass";
};
export type CreateProjectProtectionBypassScope = ClosedEnum<typeof CreateProjectProtectionBypassScope>;
export type CreateProjectProtectionBypass1 = {
    createdAt: number;
    createdBy: string;
    scope: CreateProjectProtectionBypassScope;
    integrationId: string;
    configurationId: string;
};
export type CreateProjectProtectionBypass = CreateProjectProtectionBypass1 | CreateProjectProtectionBypass2;
export declare const CreateProjectTrustedIpsProjectsDeploymentType: {
    readonly Preview: "preview";
    readonly Production: "production";
    readonly All: "all";
    readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
    readonly AllExceptCustomDomains: "all_except_custom_domains";
};
export type CreateProjectTrustedIpsProjectsDeploymentType = ClosedEnum<typeof CreateProjectTrustedIpsProjectsDeploymentType>;
export type CreateProjectTrustedIps2 = {
    deploymentType: CreateProjectTrustedIpsProjectsDeploymentType;
};
export declare const CreateProjectTrustedIpsDeploymentType: {
    readonly Preview: "preview";
    readonly Production: "production";
    readonly All: "all";
    readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
    readonly AllExceptCustomDomains: "all_except_custom_domains";
};
export type CreateProjectTrustedIpsDeploymentType = ClosedEnum<typeof CreateProjectTrustedIpsDeploymentType>;
export type TrustedIpsAddresses = {
    value: string;
    note?: string | undefined;
};
export declare const TrustedIpsProtectionMode: {
    readonly Additional: "additional";
    readonly Exclusive: "exclusive";
};
export type TrustedIpsProtectionMode = ClosedEnum<typeof TrustedIpsProtectionMode>;
export type CreateProjectTrustedIps1 = {
    deploymentType: CreateProjectTrustedIpsDeploymentType;
    addresses: Array<TrustedIpsAddresses>;
    protectionMode: TrustedIpsProtectionMode;
};
export type CreateProjectTrustedIps = CreateProjectTrustedIps1 | CreateProjectTrustedIps2;
export type CreateProjectGitComments = {
    /**
     * Whether the Vercel bot should comment on PRs
     */
    onPullRequest: boolean;
    /**
     * Whether the Vercel bot should comment on commits
     */
    onCommit: boolean;
};
/**
 * Whether the Vercel bot should automatically create GitHub deployments https://docs.github.com/en/rest/deployments/deployments#about-deployments NOTE: repository-dispatch events should be used instead
 */
export declare const CreateProjectCreateDeployments: {
    readonly Enabled: "enabled";
    readonly Disabled: "disabled";
};
/**
 * Whether the Vercel bot should automatically create GitHub deployments https://docs.github.com/en/rest/deployments/deployments#about-deployments NOTE: repository-dispatch events should be used instead
 */
export type CreateProjectCreateDeployments = ClosedEnum<typeof CreateProjectCreateDeployments>;
export type CreateProjectGitProviderOptions = {
    /**
     * Whether the Vercel bot should automatically create GitHub deployments https://docs.github.com/en/rest/deployments/deployments#about-deployments NOTE: repository-dispatch events should be used instead
     */
    createDeployments: CreateProjectCreateDeployments;
    /**
     * Whether the Vercel bot should not automatically create GitHub repository-dispatch events on deployment events. https://vercel.com/docs/git/vercel-for-github#repository-dispatch-events
     */
    disableRepositoryDispatchEvents?: boolean | undefined;
};
export type CreateProjectWebAnalytics = {
    id: string;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    enabledAt?: number | undefined;
    hasData?: boolean | undefined;
};
export declare const CreateProjectProjectsResponse200Action: {
    readonly Log: "log";
    readonly Challenge: "challenge";
    readonly Deny: "deny";
};
export type CreateProjectProjectsResponse200Action = ClosedEnum<typeof CreateProjectProjectsResponse200Action>;
export type CreateProjectBotFilter = {
    active: boolean;
    action?: CreateProjectProjectsResponse200Action | undefined;
};
export declare const CreateProjectProjectsAction: {
    readonly Log: "log";
    readonly Challenge: "challenge";
    readonly Deny: "deny";
};
export type CreateProjectProjectsAction = ClosedEnum<typeof CreateProjectProjectsAction>;
export type CreateProjectAiBots = {
    active: boolean;
    action?: CreateProjectProjectsAction | undefined;
};
export declare const CreateProjectProjectsResponseAction: {
    readonly Log: "log";
    readonly Challenge: "challenge";
    readonly Deny: "deny";
};
export type CreateProjectProjectsResponseAction = ClosedEnum<typeof CreateProjectProjectsResponseAction>;
export type CreateProjectOwasp = {
    active: boolean;
    action?: CreateProjectProjectsResponseAction | undefined;
};
export type CreateProjectManagedRules = {
    botFilter: CreateProjectBotFilter;
    aiBots: CreateProjectAiBots;
    owasp: CreateProjectOwasp;
};
export type CreateProjectSecurity = {
    attackModeEnabled?: boolean | undefined;
    attackModeUpdatedAt?: number | undefined;
    firewallEnabled?: boolean | undefined;
    firewallUpdatedAt?: number | undefined;
    attackModeActiveUntil?: number | null | undefined;
    firewallConfigVersion?: number | undefined;
    firewallSeawallEnabled?: boolean | undefined;
    ja3Enabled?: boolean | undefined;
    ja4Enabled?: boolean | undefined;
    firewallBypassIps?: Array<string> | undefined;
    managedRules?: CreateProjectManagedRules | null | undefined;
    botIdEnabled?: boolean | undefined;
};
/**
 * - team: `https://oidc.vercel.com/[team_slug]` - global: `https://oidc.vercel.com`
 */
export declare const CreateProjectIssuerMode: {
    readonly Team: "team";
    readonly Global: "global";
};
/**
 * - team: `https://oidc.vercel.com/[team_slug]` - global: `https://oidc.vercel.com`
 */
export type CreateProjectIssuerMode = ClosedEnum<typeof CreateProjectIssuerMode>;
export type CreateProjectOidcTokenConfig = {
    /**
     * Whether or not to generate OpenID Connect JSON Web Tokens.
     */
    enabled?: boolean | undefined;
    /**
     * - team: `https://oidc.vercel.com/[team_slug]` - global: `https://oidc.vercel.com`
     */
    issuerMode?: CreateProjectIssuerMode | undefined;
};
export declare const CreateProjectTier: {
    readonly Standard: "standard";
    readonly Advanced: "advanced";
    readonly Critical: "critical";
};
export type CreateProjectTier = ClosedEnum<typeof CreateProjectTier>;
export type CreateProjectFeatures = {
    webAnalytics?: boolean | undefined;
};
export type CreateProjectHistory = {
    scanner: string;
    reason: string;
    by: string;
    byId: string;
    at: number;
};
export declare const CreateProjectAction: {
    readonly Blocked: "blocked";
};
export type CreateProjectAction = ClosedEnum<typeof CreateProjectAction>;
export type CreateProjectBlock = {
    action: CreateProjectAction;
    reason: string;
    statusCode: number;
    createdAt: number;
    caseId?: string | undefined;
    actor?: string | undefined;
    comment?: string | undefined;
    isCascading?: boolean | undefined;
};
export declare const CreateProjectBlockHistoryProjectsResponse200Action: {
    readonly RouteUnblocked: "route-unblocked";
};
export type CreateProjectBlockHistoryProjectsResponse200Action = ClosedEnum<typeof CreateProjectBlockHistoryProjectsResponse200Action>;
export declare const CreateProjectHasProjectsResponse200Type: {
    readonly Host: "host";
};
export type CreateProjectHasProjectsResponse200Type = ClosedEnum<typeof CreateProjectHasProjectsResponse200Type>;
export type CreateProjectHasProjectsResponse200Value = {
    eq: string;
};
export type CreateProjectHasProjects2 = {
    type: CreateProjectHasProjectsResponse200Type;
    value: CreateProjectHasProjectsResponse200Value;
};
export declare const CreateProjectHasProjectsResponseType: {
    readonly Header: "header";
};
export type CreateProjectHasProjectsResponseType = ClosedEnum<typeof CreateProjectHasProjectsResponseType>;
export declare const CreateProjectHasProjectsKey: {
    readonly XVercelIpCountry: "x-vercel-ip-country";
};
export type CreateProjectHasProjectsKey = ClosedEnum<typeof CreateProjectHasProjectsKey>;
export type CreateProjectHasProjectsResponseValue = {
    eq: string;
};
export type CreateProjectHasProjects1 = {
    type: CreateProjectHasProjectsResponseType;
    key: CreateProjectHasProjectsKey;
    value: CreateProjectHasProjectsResponseValue;
};
export type CreateProjectRouteProjectsHas = CreateProjectHasProjects1 | CreateProjectHasProjects2;
export declare const CreateProjectRouteProjectsAction: {
    readonly BlockLegalCwc: "block_legal_cwc";
};
export type CreateProjectRouteProjectsAction = ClosedEnum<typeof CreateProjectRouteProjectsAction>;
export type CreateProjectRouteProjectsMitigate = {
    action: CreateProjectRouteProjectsAction;
};
export type CreateProjectRouteProjects2 = {
    has: Array<CreateProjectHasProjects1 | CreateProjectHasProjects2>;
    mitigate: CreateProjectRouteProjectsMitigate;
    src?: string | undefined;
};
export type CreateProjectRouteProjects1 = {
    src: string;
    status: number;
};
export type CreateProjectBlockHistoryProjectsRoute = CreateProjectRouteProjects1 | CreateProjectRouteProjects2;
export type CreateProjectBlockHistory4 = {
    action: CreateProjectBlockHistoryProjectsResponse200Action;
    route: CreateProjectRouteProjects1 | CreateProjectRouteProjects2;
    statusCode?: number | undefined;
    createdAt: number;
    caseId?: string | undefined;
    actor?: string | undefined;
    comment?: string | undefined;
    isCascading?: boolean | undefined;
};
export declare const CreateProjectBlockHistoryProjectsResponseAction: {
    readonly RouteBlocked: "route-blocked";
};
export type CreateProjectBlockHistoryProjectsResponseAction = ClosedEnum<typeof CreateProjectBlockHistoryProjectsResponseAction>;
export declare const CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyType: {
    readonly Host: "host";
};
export type CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyType = ClosedEnum<typeof CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyType>;
export type CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue = {
    eq: string;
};
export type CreateProjectHasProjectsResponse2 = {
    type: CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyType;
    value: CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue;
};
export declare const CreateProjectHasProjectsResponse200ApplicationJSONType: {
    readonly Header: "header";
};
export type CreateProjectHasProjectsResponse200ApplicationJSONType = ClosedEnum<typeof CreateProjectHasProjectsResponse200ApplicationJSONType>;
export declare const CreateProjectHasKey: {
    readonly XVercelIpCountry: "x-vercel-ip-country";
};
export type CreateProjectHasKey = ClosedEnum<typeof CreateProjectHasKey>;
export type CreateProjectHasProjectsResponse200ApplicationJSONValue = {
    eq: string;
};
export type CreateProjectHasProjectsResponse1 = {
    type: CreateProjectHasProjectsResponse200ApplicationJSONType;
    key: CreateProjectHasKey;
    value: CreateProjectHasProjectsResponse200ApplicationJSONValue;
};
export type CreateProjectRouteHas = CreateProjectHasProjectsResponse1 | CreateProjectHasProjectsResponse2;
export declare const CreateProjectRouteAction: {
    readonly BlockLegalCwc: "block_legal_cwc";
};
export type CreateProjectRouteAction = ClosedEnum<typeof CreateProjectRouteAction>;
export type CreateProjectRouteMitigate = {
    action: CreateProjectRouteAction;
};
export type CreateProjectRoute2 = {
    has: Array<CreateProjectHasProjectsResponse1 | CreateProjectHasProjectsResponse2>;
    mitigate: CreateProjectRouteMitigate;
    src?: string | undefined;
};
export type CreateProjectRoute1 = {
    src: string;
    status: number;
};
export type CreateProjectBlockHistoryRoute = CreateProjectRoute1 | CreateProjectRoute2;
export type CreateProjectBlockHistory3 = {
    action: CreateProjectBlockHistoryProjectsResponseAction;
    route: CreateProjectRoute1 | CreateProjectRoute2;
    reason: string;
    createdAt: number;
    caseId?: string | undefined;
    actor?: string | undefined;
    comment?: string | undefined;
    isCascading?: boolean | undefined;
};
export declare const CreateProjectBlockHistoryProjectsAction: {
    readonly Unblocked: "unblocked";
};
export type CreateProjectBlockHistoryProjectsAction = ClosedEnum<typeof CreateProjectBlockHistoryProjectsAction>;
export type CreateProjectBlockHistory2 = {
    action: CreateProjectBlockHistoryProjectsAction;
    createdAt: number;
    caseId?: string | undefined;
    actor?: string | undefined;
    comment?: string | undefined;
    isCascading?: boolean | undefined;
};
export declare const CreateProjectBlockHistoryAction: {
    readonly Blocked: "blocked";
};
export type CreateProjectBlockHistoryAction = ClosedEnum<typeof CreateProjectBlockHistoryAction>;
export type CreateProjectBlockHistory1 = {
    action: CreateProjectBlockHistoryAction;
    reason: string;
    statusCode: number;
    createdAt: number;
    caseId?: string | undefined;
    actor?: string | undefined;
    comment?: string | undefined;
    isCascading?: boolean | undefined;
};
export type CreateProjectBlockHistory = CreateProjectBlockHistory1 | CreateProjectBlockHistory3 | CreateProjectBlockHistory4 | CreateProjectBlockHistory2;
export type CreateProjectAbuse = {
    scanner?: string | undefined;
    history: Array<CreateProjectHistory>;
    updatedAt: number;
    block?: CreateProjectBlock | undefined;
    blockHistory?: Array<CreateProjectBlockHistory1 | CreateProjectBlockHistory3 | CreateProjectBlockHistory4 | CreateProjectBlockHistory2> | undefined;
};
export declare const CreateProjectHasProjectsType: {
    readonly Host: "host";
};
export type CreateProjectHasProjectsType = ClosedEnum<typeof CreateProjectHasProjectsType>;
export type CreateProjectHasProjectsValue = {
    eq: string;
};
export type CreateProjectHas2 = {
    type: CreateProjectHasProjectsType;
    value: CreateProjectHasProjectsValue;
};
export declare const CreateProjectHasType: {
    readonly Header: "header";
};
export type CreateProjectHasType = ClosedEnum<typeof CreateProjectHasType>;
export declare const HasKey: {
    readonly XVercelIpCountry: "x-vercel-ip-country";
};
export type HasKey = ClosedEnum<typeof HasKey>;
export type CreateProjectHasValue = {
    eq: string;
};
export type CreateProjectHas1 = {
    type: CreateProjectHasType;
    key: HasKey;
    value: CreateProjectHasValue;
};
export type InternalRoutesHas = CreateProjectHas1 | CreateProjectHas2;
export declare const CreateProjectInternalRoutesAction: {
    readonly BlockLegalCwc: "block_legal_cwc";
};
export type CreateProjectInternalRoutesAction = ClosedEnum<typeof CreateProjectInternalRoutesAction>;
export type InternalRoutesMitigate = {
    action: CreateProjectInternalRoutesAction;
};
export type CreateProjectInternalRoutes2 = {
    has: Array<CreateProjectHas1 | CreateProjectHas2>;
    mitigate: InternalRoutesMitigate;
    src?: string | undefined;
};
export type CreateProjectInternalRoutes1 = {
    src: string;
    status: number;
};
export type CreateProjectInternalRoutes = CreateProjectInternalRoutes1 | CreateProjectInternalRoutes2;
/**
 * The project was successfuly created
 */
export type CreateProjectResponseBody = {
    accountId: string;
    analytics?: CreateProjectAnalytics | undefined;
    speedInsights?: CreateProjectSpeedInsights | undefined;
    autoExposeSystemEnvs?: boolean | undefined;
    autoAssignCustomDomains?: boolean | undefined;
    autoAssignCustomDomainsUpdatedBy?: string | undefined;
    buildCommand?: string | null | undefined;
    commandForIgnoringBuildStep?: string | null | undefined;
    connectConfigurations?: Array<CreateProjectConnectConfigurations> | null | undefined;
    connectConfigurationId?: string | null | undefined;
    connectBuildsEnabled?: boolean | undefined;
    passiveConnectConfigurationId?: string | null | undefined;
    createdAt?: number | undefined;
    customerSupportCodeVisibility?: boolean | undefined;
    crons?: CreateProjectCrons | undefined;
    dataCache?: CreateProjectDataCache | undefined;
    /**
     * Retention policies for deployments. These are enforced at the project level, but we also maintain an instance of this at the team level as a default policy that gets applied to new projects.
     */
    deploymentExpiration?: CreateProjectDeploymentExpiration | null | undefined;
    devCommand?: string | null | undefined;
    directoryListing: boolean;
    installCommand?: string | null | undefined;
    env?: Array<CreateProjectEnv> | undefined;
    customEnvironments?: Array<CreateProjectCustomEnvironments> | undefined;
    framework?: CreateProjectProjectsFramework | null | undefined;
    gitForkProtection?: boolean | undefined;
    gitLFS?: boolean | undefined;
    id: string;
    ipBuckets?: Array<CreateProjectIpBuckets> | undefined;
    latestDeployments?: Array<CreateProjectLatestDeployments> | undefined;
    link?: CreateProjectLink4 | CreateProjectLink5 | CreateProjectLink3 | CreateProjectLink1 | CreateProjectLink2 | undefined;
    microfrontends?: CreateProjectMicrofrontends1 | CreateProjectMicrofrontends2 | undefined;
    name: string;
    nodeVersion: CreateProjectNodeVersion;
    optionsAllowlist?: CreateProjectOptionsAllowlist | null | undefined;
    outputDirectory?: string | null | undefined;
    passwordProtection?: CreateProjectPasswordProtection | null | undefined;
    productionDeploymentsFastLane?: boolean | undefined;
    publicSource?: boolean | null | undefined;
    resourceConfig: CreateProjectProjectsResourceConfig;
    /**
     * Description of why a project was rolled back, and by whom. Note that lastAliasRequest contains the from/to details of the rollback.
     */
    rollbackDescription?: CreateProjectRollbackDescription | undefined;
    /**
     * Project-level rolling release configuration that defines how deployments should be gradually rolled out
     */
    rollingRelease?: CreateProjectRollingRelease | null | undefined;
    defaultResourceConfig: CreateProjectDefaultResourceConfig;
    rootDirectory?: string | null | undefined;
    serverlessFunctionZeroConfigFailover?: boolean | undefined;
    skewProtectionBoundaryAt?: number | undefined;
    skewProtectionMaxAge?: number | undefined;
    skipGitConnectDuringLink?: boolean | undefined;
    sourceFilesOutsideRootDirectory?: boolean | undefined;
    enableAffectedProjectsDeployments?: boolean | undefined;
    ssoProtection?: CreateProjectProjectsSsoProtection | null | undefined;
    targets?: {
        [k: string]: CreateProjectTargets | null;
    } | undefined;
    transferCompletedAt?: number | undefined;
    transferStartedAt?: number | undefined;
    transferToAccountId?: string | undefined;
    transferredFromAccountId?: string | undefined;
    updatedAt?: number | undefined;
    live?: boolean | undefined;
    enablePreviewFeedback?: boolean | null | undefined;
    enableProductionFeedback?: boolean | null | undefined;
    permissions?: CreateProjectPermissions | undefined;
    lastRollbackTarget?: CreateProjectLastRollbackTarget | null | undefined;
    lastAliasRequest?: CreateProjectLastAliasRequest | null | undefined;
    protectionBypass?: {
        [k: string]: CreateProjectProtectionBypass1 | CreateProjectProtectionBypass2;
    } | undefined;
    hasActiveBranches?: boolean | undefined;
    trustedIps?: CreateProjectTrustedIps1 | CreateProjectTrustedIps2 | null | undefined;
    gitComments?: CreateProjectGitComments | undefined;
    gitProviderOptions?: CreateProjectGitProviderOptions | undefined;
    paused?: boolean | undefined;
    concurrencyBucketName?: string | undefined;
    webAnalytics?: CreateProjectWebAnalytics | undefined;
    security?: CreateProjectSecurity | undefined;
    oidcTokenConfig?: CreateProjectOidcTokenConfig | undefined;
    tier?: CreateProjectTier | undefined;
    features?: CreateProjectFeatures | undefined;
    v0?: boolean | undefined;
    abuse?: CreateProjectAbuse | undefined;
    internalRoutes?: Array<CreateProjectInternalRoutes1 | CreateProjectInternalRoutes2> | undefined;
};
/** @internal */
export declare const Target2$inboundSchema: z.ZodNativeEnum<typeof Target2>;
/** @internal */
export declare const Target2$outboundSchema: z.ZodNativeEnum<typeof Target2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Target2$ {
    /** @deprecated use `Target2$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Production: "production";
        readonly Preview: "preview";
        readonly Development: "development";
    }>;
    /** @deprecated use `Target2$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Production: "production";
        readonly Preview: "preview";
        readonly Development: "development";
    }>;
}
/** @internal */
export declare const Target1$inboundSchema: z.ZodNativeEnum<typeof Target1>;
/** @internal */
export declare const Target1$outboundSchema: z.ZodNativeEnum<typeof Target1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Target1$ {
    /** @deprecated use `Target1$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Production: "production";
        readonly Preview: "preview";
        readonly Development: "development";
    }>;
    /** @deprecated use `Target1$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Production: "production";
        readonly Preview: "preview";
        readonly Development: "development";
    }>;
}
/** @internal */
export declare const CreateProjectTarget$inboundSchema: z.ZodType<CreateProjectTarget, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectTarget$Outbound = string | Array<string>;
/** @internal */
export declare const CreateProjectTarget$outboundSchema: z.ZodType<CreateProjectTarget$Outbound, z.ZodTypeDef, CreateProjectTarget>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectTarget$ {
    /** @deprecated use `CreateProjectTarget$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectTarget, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectTarget$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectTarget$Outbound, z.ZodTypeDef, CreateProjectTarget>;
    /** @deprecated use `CreateProjectTarget$Outbound` instead. */
    type Outbound = CreateProjectTarget$Outbound;
}
export declare function createProjectTargetToJSON(createProjectTarget: CreateProjectTarget): string;
export declare function createProjectTargetFromJSON(jsonString: string): SafeParseResult<CreateProjectTarget, SDKValidationError>;
/** @internal */
export declare const CreateProjectType$inboundSchema: z.ZodNativeEnum<typeof CreateProjectType>;
/** @internal */
export declare const CreateProjectType$outboundSchema: z.ZodNativeEnum<typeof CreateProjectType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectType$ {
    /** @deprecated use `CreateProjectType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly System: "system";
        readonly Secret: "secret";
        readonly Encrypted: "encrypted";
        readonly Plain: "plain";
        readonly Sensitive: "sensitive";
    }>;
    /** @deprecated use `CreateProjectType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly System: "system";
        readonly Secret: "secret";
        readonly Encrypted: "encrypted";
        readonly Plain: "plain";
        readonly Sensitive: "sensitive";
    }>;
}
/** @internal */
export declare const EnvironmentVariables$inboundSchema: z.ZodType<EnvironmentVariables, z.ZodTypeDef, unknown>;
/** @internal */
export type EnvironmentVariables$Outbound = {
    key: string;
    target: string | Array<string>;
    gitBranch?: string | undefined;
    type?: string | undefined;
    value: string;
};
/** @internal */
export declare const EnvironmentVariables$outboundSchema: z.ZodType<EnvironmentVariables$Outbound, z.ZodTypeDef, EnvironmentVariables>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EnvironmentVariables$ {
    /** @deprecated use `EnvironmentVariables$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EnvironmentVariables, z.ZodTypeDef, unknown>;
    /** @deprecated use `EnvironmentVariables$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EnvironmentVariables$Outbound, z.ZodTypeDef, EnvironmentVariables>;
    /** @deprecated use `EnvironmentVariables$Outbound` instead. */
    type Outbound = EnvironmentVariables$Outbound;
}
export declare function environmentVariablesToJSON(environmentVariables: EnvironmentVariables): string;
export declare function environmentVariablesFromJSON(jsonString: string): SafeParseResult<EnvironmentVariables, SDKValidationError>;
/** @internal */
export declare const CreateProjectFramework$inboundSchema: z.ZodNativeEnum<typeof CreateProjectFramework>;
/** @internal */
export declare const CreateProjectFramework$outboundSchema: z.ZodNativeEnum<typeof CreateProjectFramework>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectFramework$ {
    /** @deprecated use `CreateProjectFramework$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Blitzjs: "blitzjs";
        readonly Nextjs: "nextjs";
        readonly Gatsby: "gatsby";
        readonly Remix: "remix";
        readonly ReactRouter: "react-router";
        readonly Astro: "astro";
        readonly Hexo: "hexo";
        readonly Eleventy: "eleventy";
        readonly Docusaurus2: "docusaurus-2";
        readonly Docusaurus: "docusaurus";
        readonly Preact: "preact";
        readonly Solidstart1: "solidstart-1";
        readonly Solidstart: "solidstart";
        readonly Dojo: "dojo";
        readonly Ember: "ember";
        readonly Vue: "vue";
        readonly Scully: "scully";
        readonly IonicAngular: "ionic-angular";
        readonly Angular: "angular";
        readonly Polymer: "polymer";
        readonly Svelte: "svelte";
        readonly Sveltekit: "sveltekit";
        readonly Sveltekit1: "sveltekit-1";
        readonly IonicReact: "ionic-react";
        readonly CreateReactApp: "create-react-app";
        readonly Gridsome: "gridsome";
        readonly Umijs: "umijs";
        readonly Sapper: "sapper";
        readonly Saber: "saber";
        readonly Stencil: "stencil";
        readonly Nuxtjs: "nuxtjs";
        readonly Redwoodjs: "redwoodjs";
        readonly Hugo: "hugo";
        readonly Jekyll: "jekyll";
        readonly Brunch: "brunch";
        readonly Middleman: "middleman";
        readonly Zola: "zola";
        readonly Hydrogen: "hydrogen";
        readonly Vite: "vite";
        readonly Vitepress: "vitepress";
        readonly Vuepress: "vuepress";
        readonly Parcel: "parcel";
        readonly Fastapi: "fastapi";
        readonly Fasthtml: "fasthtml";
        readonly SanityV3: "sanity-v3";
        readonly Sanity: "sanity";
        readonly Storybook: "storybook";
        readonly Nitro: "nitro";
        readonly Hono: "hono";
        readonly Express: "express";
        readonly Xmcp: "xmcp";
    }>;
    /** @deprecated use `CreateProjectFramework$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Blitzjs: "blitzjs";
        readonly Nextjs: "nextjs";
        readonly Gatsby: "gatsby";
        readonly Remix: "remix";
        readonly ReactRouter: "react-router";
        readonly Astro: "astro";
        readonly Hexo: "hexo";
        readonly Eleventy: "eleventy";
        readonly Docusaurus2: "docusaurus-2";
        readonly Docusaurus: "docusaurus";
        readonly Preact: "preact";
        readonly Solidstart1: "solidstart-1";
        readonly Solidstart: "solidstart";
        readonly Dojo: "dojo";
        readonly Ember: "ember";
        readonly Vue: "vue";
        readonly Scully: "scully";
        readonly IonicAngular: "ionic-angular";
        readonly Angular: "angular";
        readonly Polymer: "polymer";
        readonly Svelte: "svelte";
        readonly Sveltekit: "sveltekit";
        readonly Sveltekit1: "sveltekit-1";
        readonly IonicReact: "ionic-react";
        readonly CreateReactApp: "create-react-app";
        readonly Gridsome: "gridsome";
        readonly Umijs: "umijs";
        readonly Sapper: "sapper";
        readonly Saber: "saber";
        readonly Stencil: "stencil";
        readonly Nuxtjs: "nuxtjs";
        readonly Redwoodjs: "redwoodjs";
        readonly Hugo: "hugo";
        readonly Jekyll: "jekyll";
        readonly Brunch: "brunch";
        readonly Middleman: "middleman";
        readonly Zola: "zola";
        readonly Hydrogen: "hydrogen";
        readonly Vite: "vite";
        readonly Vitepress: "vitepress";
        readonly Vuepress: "vuepress";
        readonly Parcel: "parcel";
        readonly Fastapi: "fastapi";
        readonly Fasthtml: "fasthtml";
        readonly SanityV3: "sanity-v3";
        readonly Sanity: "sanity";
        readonly Storybook: "storybook";
        readonly Nitro: "nitro";
        readonly Hono: "hono";
        readonly Express: "express";
        readonly Xmcp: "xmcp";
    }>;
}
/** @internal */
export declare const CreateProjectProjectsType$inboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsType>;
/** @internal */
export declare const CreateProjectProjectsType$outboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectProjectsType$ {
    /** @deprecated use `CreateProjectProjectsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
        readonly GithubLimited: "github-limited";
        readonly Gitlab: "gitlab";
        readonly Bitbucket: "bitbucket";
    }>;
    /** @deprecated use `CreateProjectProjectsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
        readonly GithubLimited: "github-limited";
        readonly Gitlab: "gitlab";
        readonly Bitbucket: "bitbucket";
    }>;
}
/** @internal */
export declare const GitRepository$inboundSchema: z.ZodType<GitRepository, z.ZodTypeDef, unknown>;
/** @internal */
export type GitRepository$Outbound = {
    repo: string;
    type: string;
};
/** @internal */
export declare const GitRepository$outboundSchema: z.ZodType<GitRepository$Outbound, z.ZodTypeDef, GitRepository>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GitRepository$ {
    /** @deprecated use `GitRepository$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GitRepository, z.ZodTypeDef, unknown>;
    /** @deprecated use `GitRepository$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GitRepository$Outbound, z.ZodTypeDef, GitRepository>;
    /** @deprecated use `GitRepository$Outbound` instead. */
    type Outbound = GitRepository$Outbound;
}
export declare function gitRepositoryToJSON(gitRepository: GitRepository): string;
export declare function gitRepositoryFromJSON(jsonString: string): SafeParseResult<GitRepository, SDKValidationError>;
/** @internal */
export declare const CreateProjectDeploymentType$inboundSchema: z.ZodNativeEnum<typeof CreateProjectDeploymentType>;
/** @internal */
export declare const CreateProjectDeploymentType$outboundSchema: z.ZodNativeEnum<typeof CreateProjectDeploymentType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectDeploymentType$ {
    /** @deprecated use `CreateProjectDeploymentType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly All: "all";
        readonly Preview: "preview";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
    /** @deprecated use `CreateProjectDeploymentType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly All: "all";
        readonly Preview: "preview";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
}
/** @internal */
export declare const CreateProjectSsoProtection$inboundSchema: z.ZodType<CreateProjectSsoProtection, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectSsoProtection$Outbound = {
    deploymentType: string;
};
/** @internal */
export declare const CreateProjectSsoProtection$outboundSchema: z.ZodType<CreateProjectSsoProtection$Outbound, z.ZodTypeDef, CreateProjectSsoProtection>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectSsoProtection$ {
    /** @deprecated use `CreateProjectSsoProtection$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectSsoProtection, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectSsoProtection$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectSsoProtection$Outbound, z.ZodTypeDef, CreateProjectSsoProtection>;
    /** @deprecated use `CreateProjectSsoProtection$Outbound` instead. */
    type Outbound = CreateProjectSsoProtection$Outbound;
}
export declare function createProjectSsoProtectionToJSON(createProjectSsoProtection: CreateProjectSsoProtection): string;
export declare function createProjectSsoProtectionFromJSON(jsonString: string): SafeParseResult<CreateProjectSsoProtection, SDKValidationError>;
/** @internal */
export declare const IssuerMode$inboundSchema: z.ZodNativeEnum<typeof IssuerMode>;
/** @internal */
export declare const IssuerMode$outboundSchema: z.ZodNativeEnum<typeof IssuerMode>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace IssuerMode$ {
    /** @deprecated use `IssuerMode$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Team: "team";
        readonly Global: "global";
    }>;
    /** @deprecated use `IssuerMode$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Team: "team";
        readonly Global: "global";
    }>;
}
/** @internal */
export declare const OidcTokenConfig$inboundSchema: z.ZodType<OidcTokenConfig, z.ZodTypeDef, unknown>;
/** @internal */
export type OidcTokenConfig$Outbound = {
    enabled: boolean;
    issuerMode: string;
};
/** @internal */
export declare const OidcTokenConfig$outboundSchema: z.ZodType<OidcTokenConfig$Outbound, z.ZodTypeDef, OidcTokenConfig>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OidcTokenConfig$ {
    /** @deprecated use `OidcTokenConfig$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OidcTokenConfig, z.ZodTypeDef, unknown>;
    /** @deprecated use `OidcTokenConfig$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OidcTokenConfig$Outbound, z.ZodTypeDef, OidcTokenConfig>;
    /** @deprecated use `OidcTokenConfig$Outbound` instead. */
    type Outbound = OidcTokenConfig$Outbound;
}
export declare function oidcTokenConfigToJSON(oidcTokenConfig: OidcTokenConfig): string;
export declare function oidcTokenConfigFromJSON(jsonString: string): SafeParseResult<OidcTokenConfig, SDKValidationError>;
/** @internal */
export declare const FunctionDefaultMemoryType$inboundSchema: z.ZodNativeEnum<typeof FunctionDefaultMemoryType>;
/** @internal */
export declare const FunctionDefaultMemoryType$outboundSchema: z.ZodNativeEnum<typeof FunctionDefaultMemoryType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FunctionDefaultMemoryType$ {
    /** @deprecated use `FunctionDefaultMemoryType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly StandardLegacy: "standard_legacy";
        readonly Standard: "standard";
        readonly Performance: "performance";
    }>;
    /** @deprecated use `FunctionDefaultMemoryType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly StandardLegacy: "standard_legacy";
        readonly Standard: "standard";
        readonly Performance: "performance";
    }>;
}
/** @internal */
export declare const BuildMachineType$inboundSchema: z.ZodNativeEnum<typeof BuildMachineType>;
/** @internal */
export declare const BuildMachineType$outboundSchema: z.ZodNativeEnum<typeof BuildMachineType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BuildMachineType$ {
    /** @deprecated use `BuildMachineType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Enhanced: "enhanced";
        readonly Turbo: "turbo";
    }>;
    /** @deprecated use `BuildMachineType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Enhanced: "enhanced";
        readonly Turbo: "turbo";
    }>;
}
/** @internal */
export declare const CreateProjectResourceConfig$inboundSchema: z.ZodType<CreateProjectResourceConfig, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectResourceConfig$Outbound = {
    fluid?: boolean | undefined;
    functionDefaultRegions?: Array<string> | undefined;
    functionDefaultTimeout?: number | undefined;
    functionDefaultMemoryType?: string | undefined;
    functionZeroConfigFailover?: boolean | undefined;
    elasticConcurrencyEnabled?: boolean | undefined;
    buildMachineType?: string | undefined;
    isNSNBDisabled?: boolean | undefined;
};
/** @internal */
export declare const CreateProjectResourceConfig$outboundSchema: z.ZodType<CreateProjectResourceConfig$Outbound, z.ZodTypeDef, CreateProjectResourceConfig>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectResourceConfig$ {
    /** @deprecated use `CreateProjectResourceConfig$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectResourceConfig, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectResourceConfig$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectResourceConfig$Outbound, z.ZodTypeDef, CreateProjectResourceConfig>;
    /** @deprecated use `CreateProjectResourceConfig$Outbound` instead. */
    type Outbound = CreateProjectResourceConfig$Outbound;
}
export declare function createProjectResourceConfigToJSON(createProjectResourceConfig: CreateProjectResourceConfig): string;
export declare function createProjectResourceConfigFromJSON(jsonString: string): SafeParseResult<CreateProjectResourceConfig, SDKValidationError>;
/** @internal */
export declare const CreateProjectRequestBody$inboundSchema: z.ZodType<CreateProjectRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectRequestBody$Outbound = {
    enablePreviewFeedback?: boolean | null | undefined;
    enableProductionFeedback?: boolean | null | undefined;
    previewDeploymentsDisabled?: boolean | null | undefined;
    buildCommand?: string | null | undefined;
    commandForIgnoringBuildStep?: string | null | undefined;
    devCommand?: string | null | undefined;
    environmentVariables?: Array<EnvironmentVariables$Outbound> | undefined;
    framework?: string | undefined;
    gitRepository?: GitRepository$Outbound | undefined;
    installCommand?: string | null | undefined;
    name: string;
    skipGitConnectDuringLink?: boolean | undefined;
    ssoProtection?: CreateProjectSsoProtection$Outbound | null | undefined;
    outputDirectory?: string | null | undefined;
    publicSource?: boolean | null | undefined;
    rootDirectory?: string | null | undefined;
    serverlessFunctionRegion?: string | null | undefined;
    serverlessFunctionZeroConfigFailover?: boolean | undefined;
    oidcTokenConfig?: OidcTokenConfig$Outbound | undefined;
    enableAffectedProjectsDeployments?: boolean | undefined;
    resourceConfig?: CreateProjectResourceConfig$Outbound | undefined;
};
/** @internal */
export declare const CreateProjectRequestBody$outboundSchema: z.ZodType<CreateProjectRequestBody$Outbound, z.ZodTypeDef, CreateProjectRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectRequestBody$ {
    /** @deprecated use `CreateProjectRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectRequestBody$Outbound, z.ZodTypeDef, CreateProjectRequestBody>;
    /** @deprecated use `CreateProjectRequestBody$Outbound` instead. */
    type Outbound = CreateProjectRequestBody$Outbound;
}
export declare function createProjectRequestBodyToJSON(createProjectRequestBody: CreateProjectRequestBody): string;
export declare function createProjectRequestBodyFromJSON(jsonString: string): SafeParseResult<CreateProjectRequestBody, SDKValidationError>;
/** @internal */
export declare const CreateProjectRequest$inboundSchema: z.ZodType<CreateProjectRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectRequest$Outbound = {
    teamId?: string | undefined;
    slug?: string | undefined;
    RequestBody?: CreateProjectRequestBody$Outbound | undefined;
};
/** @internal */
export declare const CreateProjectRequest$outboundSchema: z.ZodType<CreateProjectRequest$Outbound, z.ZodTypeDef, CreateProjectRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectRequest$ {
    /** @deprecated use `CreateProjectRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectRequest$Outbound, z.ZodTypeDef, CreateProjectRequest>;
    /** @deprecated use `CreateProjectRequest$Outbound` instead. */
    type Outbound = CreateProjectRequest$Outbound;
}
export declare function createProjectRequestToJSON(createProjectRequest: CreateProjectRequest): string;
export declare function createProjectRequestFromJSON(jsonString: string): SafeParseResult<CreateProjectRequest, SDKValidationError>;
/** @internal */
export declare const CreateProjectAnalytics$inboundSchema: z.ZodType<CreateProjectAnalytics, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectAnalytics$Outbound = {
    id: string;
    canceledAt?: number | null | undefined;
    disabledAt: number;
    enabledAt: number;
    paidAt?: number | undefined;
    sampleRatePercent?: number | null | undefined;
    spendLimitInDollars?: number | null | undefined;
};
/** @internal */
export declare const CreateProjectAnalytics$outboundSchema: z.ZodType<CreateProjectAnalytics$Outbound, z.ZodTypeDef, CreateProjectAnalytics>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectAnalytics$ {
    /** @deprecated use `CreateProjectAnalytics$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectAnalytics, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectAnalytics$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectAnalytics$Outbound, z.ZodTypeDef, CreateProjectAnalytics>;
    /** @deprecated use `CreateProjectAnalytics$Outbound` instead. */
    type Outbound = CreateProjectAnalytics$Outbound;
}
export declare function createProjectAnalyticsToJSON(createProjectAnalytics: CreateProjectAnalytics): string;
export declare function createProjectAnalyticsFromJSON(jsonString: string): SafeParseResult<CreateProjectAnalytics, SDKValidationError>;
/** @internal */
export declare const CreateProjectSpeedInsights$inboundSchema: z.ZodType<CreateProjectSpeedInsights, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectSpeedInsights$Outbound = {
    id: string;
    enabledAt?: number | undefined;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    hasData?: boolean | undefined;
    paidAt?: number | undefined;
};
/** @internal */
export declare const CreateProjectSpeedInsights$outboundSchema: z.ZodType<CreateProjectSpeedInsights$Outbound, z.ZodTypeDef, CreateProjectSpeedInsights>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectSpeedInsights$ {
    /** @deprecated use `CreateProjectSpeedInsights$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectSpeedInsights, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectSpeedInsights$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectSpeedInsights$Outbound, z.ZodTypeDef, CreateProjectSpeedInsights>;
    /** @deprecated use `CreateProjectSpeedInsights$Outbound` instead. */
    type Outbound = CreateProjectSpeedInsights$Outbound;
}
export declare function createProjectSpeedInsightsToJSON(createProjectSpeedInsights: CreateProjectSpeedInsights): string;
export declare function createProjectSpeedInsightsFromJSON(jsonString: string): SafeParseResult<CreateProjectSpeedInsights, SDKValidationError>;
/** @internal */
export declare const CreateProjectEnvId2$inboundSchema: z.ZodNativeEnum<typeof CreateProjectEnvId2>;
/** @internal */
export declare const CreateProjectEnvId2$outboundSchema: z.ZodNativeEnum<typeof CreateProjectEnvId2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectEnvId2$ {
    /** @deprecated use `CreateProjectEnvId2$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Preview: "preview";
        readonly Production: "production";
    }>;
    /** @deprecated use `CreateProjectEnvId2$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Preview: "preview";
        readonly Production: "production";
    }>;
}
/** @internal */
export declare const CreateProjectEnvId$inboundSchema: z.ZodType<CreateProjectEnvId, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectEnvId$Outbound = string | string;
/** @internal */
export declare const CreateProjectEnvId$outboundSchema: z.ZodType<CreateProjectEnvId$Outbound, z.ZodTypeDef, CreateProjectEnvId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectEnvId$ {
    /** @deprecated use `CreateProjectEnvId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<string, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectEnvId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<string, z.ZodTypeDef, string>;
    /** @deprecated use `CreateProjectEnvId$Outbound` instead. */
    type Outbound = CreateProjectEnvId$Outbound;
}
export declare function createProjectEnvIdToJSON(createProjectEnvId: CreateProjectEnvId): string;
export declare function createProjectEnvIdFromJSON(jsonString: string): SafeParseResult<CreateProjectEnvId, SDKValidationError>;
/** @internal */
export declare const CreateProjectAws$inboundSchema: z.ZodType<CreateProjectAws, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectAws$Outbound = {
    subnetIds: Array<string>;
    securityGroupId: string;
};
/** @internal */
export declare const CreateProjectAws$outboundSchema: z.ZodType<CreateProjectAws$Outbound, z.ZodTypeDef, CreateProjectAws>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectAws$ {
    /** @deprecated use `CreateProjectAws$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectAws, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectAws$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectAws$Outbound, z.ZodTypeDef, CreateProjectAws>;
    /** @deprecated use `CreateProjectAws$Outbound` instead. */
    type Outbound = CreateProjectAws$Outbound;
}
export declare function createProjectAwsToJSON(createProjectAws: CreateProjectAws): string;
export declare function createProjectAwsFromJSON(jsonString: string): SafeParseResult<CreateProjectAws, SDKValidationError>;
/** @internal */
export declare const CreateProjectConnectConfigurations$inboundSchema: z.ZodType<CreateProjectConnectConfigurations, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectConnectConfigurations$Outbound = {
    envId: string | string;
    connectConfigurationId: string;
    dc?: string | undefined;
    passive: boolean;
    buildsEnabled: boolean;
    aws?: CreateProjectAws$Outbound | undefined;
    createdAt: number;
    updatedAt: number;
};
/** @internal */
export declare const CreateProjectConnectConfigurations$outboundSchema: z.ZodType<CreateProjectConnectConfigurations$Outbound, z.ZodTypeDef, CreateProjectConnectConfigurations>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectConnectConfigurations$ {
    /** @deprecated use `CreateProjectConnectConfigurations$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectConnectConfigurations, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectConnectConfigurations$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectConnectConfigurations$Outbound, z.ZodTypeDef, CreateProjectConnectConfigurations>;
    /** @deprecated use `CreateProjectConnectConfigurations$Outbound` instead. */
    type Outbound = CreateProjectConnectConfigurations$Outbound;
}
export declare function createProjectConnectConfigurationsToJSON(createProjectConnectConfigurations: CreateProjectConnectConfigurations): string;
export declare function createProjectConnectConfigurationsFromJSON(jsonString: string): SafeParseResult<CreateProjectConnectConfigurations, SDKValidationError>;
/** @internal */
export declare const CreateProjectDefinitions$inboundSchema: z.ZodType<CreateProjectDefinitions, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectDefinitions$Outbound = {
    host: string;
    path: string;
    schedule: string;
};
/** @internal */
export declare const CreateProjectDefinitions$outboundSchema: z.ZodType<CreateProjectDefinitions$Outbound, z.ZodTypeDef, CreateProjectDefinitions>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectDefinitions$ {
    /** @deprecated use `CreateProjectDefinitions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectDefinitions, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectDefinitions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectDefinitions$Outbound, z.ZodTypeDef, CreateProjectDefinitions>;
    /** @deprecated use `CreateProjectDefinitions$Outbound` instead. */
    type Outbound = CreateProjectDefinitions$Outbound;
}
export declare function createProjectDefinitionsToJSON(createProjectDefinitions: CreateProjectDefinitions): string;
export declare function createProjectDefinitionsFromJSON(jsonString: string): SafeParseResult<CreateProjectDefinitions, SDKValidationError>;
/** @internal */
export declare const CreateProjectCrons$inboundSchema: z.ZodType<CreateProjectCrons, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectCrons$Outbound = {
    enabledAt: number;
    disabledAt: number | null;
    updatedAt: number;
    deploymentId: string | null;
    definitions: Array<CreateProjectDefinitions$Outbound>;
};
/** @internal */
export declare const CreateProjectCrons$outboundSchema: z.ZodType<CreateProjectCrons$Outbound, z.ZodTypeDef, CreateProjectCrons>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectCrons$ {
    /** @deprecated use `CreateProjectCrons$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectCrons, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectCrons$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectCrons$Outbound, z.ZodTypeDef, CreateProjectCrons>;
    /** @deprecated use `CreateProjectCrons$Outbound` instead. */
    type Outbound = CreateProjectCrons$Outbound;
}
export declare function createProjectCronsToJSON(createProjectCrons: CreateProjectCrons): string;
export declare function createProjectCronsFromJSON(jsonString: string): SafeParseResult<CreateProjectCrons, SDKValidationError>;
/** @internal */
export declare const CreateProjectDataCache$inboundSchema: z.ZodType<CreateProjectDataCache, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectDataCache$Outbound = {
    userDisabled: boolean;
    storageSizeBytes?: number | null | undefined;
    unlimited?: boolean | undefined;
};
/** @internal */
export declare const CreateProjectDataCache$outboundSchema: z.ZodType<CreateProjectDataCache$Outbound, z.ZodTypeDef, CreateProjectDataCache>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectDataCache$ {
    /** @deprecated use `CreateProjectDataCache$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectDataCache, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectDataCache$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectDataCache$Outbound, z.ZodTypeDef, CreateProjectDataCache>;
    /** @deprecated use `CreateProjectDataCache$Outbound` instead. */
    type Outbound = CreateProjectDataCache$Outbound;
}
export declare function createProjectDataCacheToJSON(createProjectDataCache: CreateProjectDataCache): string;
export declare function createProjectDataCacheFromJSON(jsonString: string): SafeParseResult<CreateProjectDataCache, SDKValidationError>;
/** @internal */
export declare const CreateProjectDeploymentExpiration$inboundSchema: z.ZodType<CreateProjectDeploymentExpiration, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectDeploymentExpiration$Outbound = {
    expirationDays?: number | undefined;
    expirationDaysProduction?: number | undefined;
    expirationDaysCanceled?: number | undefined;
    expirationDaysErrored?: number | undefined;
    deploymentsToKeep?: number | undefined;
};
/** @internal */
export declare const CreateProjectDeploymentExpiration$outboundSchema: z.ZodType<CreateProjectDeploymentExpiration$Outbound, z.ZodTypeDef, CreateProjectDeploymentExpiration>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectDeploymentExpiration$ {
    /** @deprecated use `CreateProjectDeploymentExpiration$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectDeploymentExpiration, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectDeploymentExpiration$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectDeploymentExpiration$Outbound, z.ZodTypeDef, CreateProjectDeploymentExpiration>;
    /** @deprecated use `CreateProjectDeploymentExpiration$Outbound` instead. */
    type Outbound = CreateProjectDeploymentExpiration$Outbound;
}
export declare function createProjectDeploymentExpirationToJSON(createProjectDeploymentExpiration: CreateProjectDeploymentExpiration): string;
export declare function createProjectDeploymentExpirationFromJSON(jsonString: string): SafeParseResult<CreateProjectDeploymentExpiration, SDKValidationError>;
/** @internal */
export declare const CreateProjectTarget2$inboundSchema: z.ZodNativeEnum<typeof CreateProjectTarget2>;
/** @internal */
export declare const CreateProjectTarget2$outboundSchema: z.ZodNativeEnum<typeof CreateProjectTarget2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectTarget2$ {
    /** @deprecated use `CreateProjectTarget2$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Production: "production";
        readonly Preview: "preview";
        readonly Development: "development";
    }>;
    /** @deprecated use `CreateProjectTarget2$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Production: "production";
        readonly Preview: "preview";
        readonly Development: "development";
    }>;
}
/** @internal */
export declare const CreateProjectTarget1$inboundSchema: z.ZodNativeEnum<typeof CreateProjectTarget1>;
/** @internal */
export declare const CreateProjectTarget1$outboundSchema: z.ZodNativeEnum<typeof CreateProjectTarget1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectTarget1$ {
    /** @deprecated use `CreateProjectTarget1$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Production: "production";
        readonly Preview: "preview";
        readonly Development: "development";
    }>;
    /** @deprecated use `CreateProjectTarget1$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Production: "production";
        readonly Preview: "preview";
        readonly Development: "development";
    }>;
}
/** @internal */
export declare const CreateProjectProjectsTarget$inboundSchema: z.ZodType<CreateProjectProjectsTarget, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectProjectsTarget$Outbound = Array<string> | string;
/** @internal */
export declare const CreateProjectProjectsTarget$outboundSchema: z.ZodType<CreateProjectProjectsTarget$Outbound, z.ZodTypeDef, CreateProjectProjectsTarget>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectProjectsTarget$ {
    /** @deprecated use `CreateProjectProjectsTarget$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectProjectsTarget, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectProjectsTarget$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectProjectsTarget$Outbound, z.ZodTypeDef, CreateProjectProjectsTarget>;
    /** @deprecated use `CreateProjectProjectsTarget$Outbound` instead. */
    type Outbound = CreateProjectProjectsTarget$Outbound;
}
export declare function createProjectProjectsTargetToJSON(createProjectProjectsTarget: CreateProjectProjectsTarget): string;
export declare function createProjectProjectsTargetFromJSON(jsonString: string): SafeParseResult<CreateProjectProjectsTarget, SDKValidationError>;
/** @internal */
export declare const CreateProjectProjectsResponseType$inboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsResponseType>;
/** @internal */
export declare const CreateProjectProjectsResponseType$outboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsResponseType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectProjectsResponseType$ {
    /** @deprecated use `CreateProjectProjectsResponseType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly System: "system";
        readonly Encrypted: "encrypted";
        readonly Plain: "plain";
        readonly Sensitive: "sensitive";
        readonly Secret: "secret";
    }>;
    /** @deprecated use `CreateProjectProjectsResponseType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly System: "system";
        readonly Encrypted: "encrypted";
        readonly Plain: "plain";
        readonly Sensitive: "sensitive";
        readonly Secret: "secret";
    }>;
}
/** @internal */
export declare const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$inboundSchema: z.ZodNativeEnum<typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type>;
/** @internal */
export declare const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$outboundSchema: z.ZodNativeEnum<typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$ {
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly FlagsConnectionString: "flags-connection-string";
    }>;
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly FlagsConnectionString: "flags-connection-string";
    }>;
}
/** @internal */
export declare const CreateProjectContentHint15$inboundSchema: z.ZodType<CreateProjectContentHint15, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectContentHint15$Outbound = {
    type: string;
    projectId: string;
};
/** @internal */
export declare const CreateProjectContentHint15$outboundSchema: z.ZodType<CreateProjectContentHint15$Outbound, z.ZodTypeDef, CreateProjectContentHint15>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectContentHint15$ {
    /** @deprecated use `CreateProjectContentHint15$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectContentHint15, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectContentHint15$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectContentHint15$Outbound, z.ZodTypeDef, CreateProjectContentHint15>;
    /** @deprecated use `CreateProjectContentHint15$Outbound` instead. */
    type Outbound = CreateProjectContentHint15$Outbound;
}
export declare function createProjectContentHint15ToJSON(createProjectContentHint15: CreateProjectContentHint15): string;
export declare function createProjectContentHint15FromJSON(jsonString: string): SafeParseResult<CreateProjectContentHint15, SDKValidationError>;
/** @internal */
export declare const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$inboundSchema: z.ZodNativeEnum<typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type>;
/** @internal */
export declare const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$outboundSchema: z.ZodNativeEnum<typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$ {
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly IntegrationStoreSecret: "integration-store-secret";
    }>;
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly IntegrationStoreSecret: "integration-store-secret";
    }>;
}
/** @internal */
export declare const CreateProjectContentHint14$inboundSchema: z.ZodType<CreateProjectContentHint14, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectContentHint14$Outbound = {
    type: string;
    storeId: string;
    integrationId: string;
    integrationProductId: string;
    integrationConfigurationId: string;
};
/** @internal */
export declare const CreateProjectContentHint14$outboundSchema: z.ZodType<CreateProjectContentHint14$Outbound, z.ZodTypeDef, CreateProjectContentHint14>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectContentHint14$ {
    /** @deprecated use `CreateProjectContentHint14$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectContentHint14, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectContentHint14$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectContentHint14$Outbound, z.ZodTypeDef, CreateProjectContentHint14>;
    /** @deprecated use `CreateProjectContentHint14$Outbound` instead. */
    type Outbound = CreateProjectContentHint14$Outbound;
}
export declare function createProjectContentHint14ToJSON(createProjectContentHint14: CreateProjectContentHint14): string;
export declare function createProjectContentHint14FromJSON(jsonString: string): SafeParseResult<CreateProjectContentHint14, SDKValidationError>;
/** @internal */
export declare const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$inboundSchema: z.ZodNativeEnum<typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type>;
/** @internal */
export declare const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$outboundSchema: z.ZodNativeEnum<typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$ {
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly PostgresUrlNoSsl: "postgres-url-no-ssl";
    }>;
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly PostgresUrlNoSsl: "postgres-url-no-ssl";
    }>;
}
/** @internal */
export declare const CreateProjectContentHint13$inboundSchema: z.ZodType<CreateProjectContentHint13, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectContentHint13$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const CreateProjectContentHint13$outboundSchema: z.ZodType<CreateProjectContentHint13$Outbound, z.ZodTypeDef, CreateProjectContentHint13>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectContentHint13$ {
    /** @deprecated use `CreateProjectContentHint13$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectContentHint13, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectContentHint13$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectContentHint13$Outbound, z.ZodTypeDef, CreateProjectContentHint13>;
    /** @deprecated use `CreateProjectContentHint13$Outbound` instead. */
    type Outbound = CreateProjectContentHint13$Outbound;
}
export declare function createProjectContentHint13ToJSON(createProjectContentHint13: CreateProjectContentHint13): string;
export declare function createProjectContentHint13FromJSON(jsonString: string): SafeParseResult<CreateProjectContentHint13, SDKValidationError>;
/** @internal */
export declare const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$inboundSchema: z.ZodNativeEnum<typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type>;
/** @internal */
export declare const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$outboundSchema: z.ZodNativeEnum<typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$ {
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly PostgresDatabase: "postgres-database";
    }>;
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly PostgresDatabase: "postgres-database";
    }>;
}
/** @internal */
export declare const CreateProjectContentHint12$inboundSchema: z.ZodType<CreateProjectContentHint12, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectContentHint12$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const CreateProjectContentHint12$outboundSchema: z.ZodType<CreateProjectContentHint12$Outbound, z.ZodTypeDef, CreateProjectContentHint12>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectContentHint12$ {
    /** @deprecated use `CreateProjectContentHint12$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectContentHint12, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectContentHint12$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectContentHint12$Outbound, z.ZodTypeDef, CreateProjectContentHint12>;
    /** @deprecated use `CreateProjectContentHint12$Outbound` instead. */
    type Outbound = CreateProjectContentHint12$Outbound;
}
export declare function createProjectContentHint12ToJSON(createProjectContentHint12: CreateProjectContentHint12): string;
export declare function createProjectContentHint12FromJSON(jsonString: string): SafeParseResult<CreateProjectContentHint12, SDKValidationError>;
/** @internal */
export declare const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$inboundSchema: z.ZodNativeEnum<typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type>;
/** @internal */
export declare const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$outboundSchema: z.ZodNativeEnum<typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$ {
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly PostgresPassword: "postgres-password";
    }>;
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly PostgresPassword: "postgres-password";
    }>;
}
/** @internal */
export declare const CreateProjectContentHint11$inboundSchema: z.ZodType<CreateProjectContentHint11, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectContentHint11$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const CreateProjectContentHint11$outboundSchema: z.ZodType<CreateProjectContentHint11$Outbound, z.ZodTypeDef, CreateProjectContentHint11>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectContentHint11$ {
    /** @deprecated use `CreateProjectContentHint11$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectContentHint11, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectContentHint11$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectContentHint11$Outbound, z.ZodTypeDef, CreateProjectContentHint11>;
    /** @deprecated use `CreateProjectContentHint11$Outbound` instead. */
    type Outbound = CreateProjectContentHint11$Outbound;
}
export declare function createProjectContentHint11ToJSON(createProjectContentHint11: CreateProjectContentHint11): string;
export declare function createProjectContentHint11FromJSON(jsonString: string): SafeParseResult<CreateProjectContentHint11, SDKValidationError>;
/** @internal */
export declare const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$inboundSchema: z.ZodNativeEnum<typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type>;
/** @internal */
export declare const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$outboundSchema: z.ZodNativeEnum<typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$ {
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly PostgresHost: "postgres-host";
    }>;
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly PostgresHost: "postgres-host";
    }>;
}
/** @internal */
export declare const CreateProjectContentHint10$inboundSchema: z.ZodType<CreateProjectContentHint10, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectContentHint10$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const CreateProjectContentHint10$outboundSchema: z.ZodType<CreateProjectContentHint10$Outbound, z.ZodTypeDef, CreateProjectContentHint10>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectContentHint10$ {
    /** @deprecated use `CreateProjectContentHint10$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectContentHint10, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectContentHint10$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectContentHint10$Outbound, z.ZodTypeDef, CreateProjectContentHint10>;
    /** @deprecated use `CreateProjectContentHint10$Outbound` instead. */
    type Outbound = CreateProjectContentHint10$Outbound;
}
export declare function createProjectContentHint10ToJSON(createProjectContentHint10: CreateProjectContentHint10): string;
export declare function createProjectContentHint10FromJSON(jsonString: string): SafeParseResult<CreateProjectContentHint10, SDKValidationError>;
/** @internal */
export declare const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$inboundSchema: z.ZodNativeEnum<typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type>;
/** @internal */
export declare const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$outboundSchema: z.ZodNativeEnum<typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$ {
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly PostgresUser: "postgres-user";
    }>;
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly PostgresUser: "postgres-user";
    }>;
}
/** @internal */
export declare const CreateProjectContentHint9$inboundSchema: z.ZodType<CreateProjectContentHint9, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectContentHint9$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const CreateProjectContentHint9$outboundSchema: z.ZodType<CreateProjectContentHint9$Outbound, z.ZodTypeDef, CreateProjectContentHint9>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectContentHint9$ {
    /** @deprecated use `CreateProjectContentHint9$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectContentHint9, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectContentHint9$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectContentHint9$Outbound, z.ZodTypeDef, CreateProjectContentHint9>;
    /** @deprecated use `CreateProjectContentHint9$Outbound` instead. */
    type Outbound = CreateProjectContentHint9$Outbound;
}
export declare function createProjectContentHint9ToJSON(createProjectContentHint9: CreateProjectContentHint9): string;
export declare function createProjectContentHint9FromJSON(jsonString: string): SafeParseResult<CreateProjectContentHint9, SDKValidationError>;
/** @internal */
export declare const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$inboundSchema: z.ZodNativeEnum<typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type>;
/** @internal */
export declare const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$outboundSchema: z.ZodNativeEnum<typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$ {
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly PostgresPrismaUrl: "postgres-prisma-url";
    }>;
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly PostgresPrismaUrl: "postgres-prisma-url";
    }>;
}
/** @internal */
export declare const CreateProjectContentHint8$inboundSchema: z.ZodType<CreateProjectContentHint8, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectContentHint8$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const CreateProjectContentHint8$outboundSchema: z.ZodType<CreateProjectContentHint8$Outbound, z.ZodTypeDef, CreateProjectContentHint8>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectContentHint8$ {
    /** @deprecated use `CreateProjectContentHint8$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectContentHint8, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectContentHint8$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectContentHint8$Outbound, z.ZodTypeDef, CreateProjectContentHint8>;
    /** @deprecated use `CreateProjectContentHint8$Outbound` instead. */
    type Outbound = CreateProjectContentHint8$Outbound;
}
export declare function createProjectContentHint8ToJSON(createProjectContentHint8: CreateProjectContentHint8): string;
export declare function createProjectContentHint8FromJSON(jsonString: string): SafeParseResult<CreateProjectContentHint8, SDKValidationError>;
/** @internal */
export declare const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema: z.ZodNativeEnum<typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType>;
/** @internal */
export declare const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$outboundSchema: z.ZodNativeEnum<typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$ {
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly PostgresUrlNonPooling: "postgres-url-non-pooling";
    }>;
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly PostgresUrlNonPooling: "postgres-url-non-pooling";
    }>;
}
/** @internal */
export declare const CreateProjectContentHint7$inboundSchema: z.ZodType<CreateProjectContentHint7, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectContentHint7$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const CreateProjectContentHint7$outboundSchema: z.ZodType<CreateProjectContentHint7$Outbound, z.ZodTypeDef, CreateProjectContentHint7>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectContentHint7$ {
    /** @deprecated use `CreateProjectContentHint7$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectContentHint7, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectContentHint7$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectContentHint7$Outbound, z.ZodTypeDef, CreateProjectContentHint7>;
    /** @deprecated use `CreateProjectContentHint7$Outbound` instead. */
    type Outbound = CreateProjectContentHint7$Outbound;
}
export declare function createProjectContentHint7ToJSON(createProjectContentHint7: CreateProjectContentHint7): string;
export declare function createProjectContentHint7FromJSON(jsonString: string): SafeParseResult<CreateProjectContentHint7, SDKValidationError>;
/** @internal */
export declare const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema: z.ZodNativeEnum<typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType>;
/** @internal */
export declare const CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema: z.ZodNativeEnum<typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$ {
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly PostgresUrl: "postgres-url";
    }>;
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly PostgresUrl: "postgres-url";
    }>;
}
/** @internal */
export declare const CreateProjectContentHint6$inboundSchema: z.ZodType<CreateProjectContentHint6, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectContentHint6$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const CreateProjectContentHint6$outboundSchema: z.ZodType<CreateProjectContentHint6$Outbound, z.ZodTypeDef, CreateProjectContentHint6>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectContentHint6$ {
    /** @deprecated use `CreateProjectContentHint6$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectContentHint6, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectContentHint6$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectContentHint6$Outbound, z.ZodTypeDef, CreateProjectContentHint6>;
    /** @deprecated use `CreateProjectContentHint6$Outbound` instead. */
    type Outbound = CreateProjectContentHint6$Outbound;
}
export declare function createProjectContentHint6ToJSON(createProjectContentHint6: CreateProjectContentHint6): string;
export declare function createProjectContentHint6FromJSON(jsonString: string): SafeParseResult<CreateProjectContentHint6, SDKValidationError>;
/** @internal */
export declare const CreateProjectContentHintProjectsResponse200ApplicationJSONType$inboundSchema: z.ZodNativeEnum<typeof CreateProjectContentHintProjectsResponse200ApplicationJSONType>;
/** @internal */
export declare const CreateProjectContentHintProjectsResponse200ApplicationJSONType$outboundSchema: z.ZodNativeEnum<typeof CreateProjectContentHintProjectsResponse200ApplicationJSONType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectContentHintProjectsResponse200ApplicationJSONType$ {
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly BlobReadWriteToken: "blob-read-write-token";
    }>;
    /** @deprecated use `CreateProjectContentHintProjectsResponse200ApplicationJSONType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly BlobReadWriteToken: "blob-read-write-token";
    }>;
}
/** @internal */
export declare const CreateProjectContentHint5$inboundSchema: z.ZodType<CreateProjectContentHint5, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectContentHint5$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const CreateProjectContentHint5$outboundSchema: z.ZodType<CreateProjectContentHint5$Outbound, z.ZodTypeDef, CreateProjectContentHint5>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectContentHint5$ {
    /** @deprecated use `CreateProjectContentHint5$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectContentHint5, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectContentHint5$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectContentHint5$Outbound, z.ZodTypeDef, CreateProjectContentHint5>;
    /** @deprecated use `CreateProjectContentHint5$Outbound` instead. */
    type Outbound = CreateProjectContentHint5$Outbound;
}
export declare function createProjectContentHint5ToJSON(createProjectContentHint5: CreateProjectContentHint5): string;
export declare function createProjectContentHint5FromJSON(jsonString: string): SafeParseResult<CreateProjectContentHint5, SDKValidationError>;
/** @internal */
export declare const CreateProjectContentHintProjectsResponse200Type$inboundSchema: z.ZodNativeEnum<typeof CreateProjectContentHintProjectsResponse200Type>;
/** @internal */
export declare const CreateProjectContentHintProjectsResponse200Type$outboundSchema: z.ZodNativeEnum<typeof CreateProjectContentHintProjectsResponse200Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectContentHintProjectsResponse200Type$ {
    /** @deprecated use `CreateProjectContentHintProjectsResponse200Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly RedisRestApiReadOnlyToken: "redis-rest-api-read-only-token";
    }>;
    /** @deprecated use `CreateProjectContentHintProjectsResponse200Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly RedisRestApiReadOnlyToken: "redis-rest-api-read-only-token";
    }>;
}
/** @internal */
export declare const CreateProjectContentHint4$inboundSchema: z.ZodType<CreateProjectContentHint4, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectContentHint4$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const CreateProjectContentHint4$outboundSchema: z.ZodType<CreateProjectContentHint4$Outbound, z.ZodTypeDef, CreateProjectContentHint4>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectContentHint4$ {
    /** @deprecated use `CreateProjectContentHint4$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectContentHint4, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectContentHint4$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectContentHint4$Outbound, z.ZodTypeDef, CreateProjectContentHint4>;
    /** @deprecated use `CreateProjectContentHint4$Outbound` instead. */
    type Outbound = CreateProjectContentHint4$Outbound;
}
export declare function createProjectContentHint4ToJSON(createProjectContentHint4: CreateProjectContentHint4): string;
export declare function createProjectContentHint4FromJSON(jsonString: string): SafeParseResult<CreateProjectContentHint4, SDKValidationError>;
/** @internal */
export declare const CreateProjectContentHintProjectsResponseType$inboundSchema: z.ZodNativeEnum<typeof CreateProjectContentHintProjectsResponseType>;
/** @internal */
export declare const CreateProjectContentHintProjectsResponseType$outboundSchema: z.ZodNativeEnum<typeof CreateProjectContentHintProjectsResponseType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectContentHintProjectsResponseType$ {
    /** @deprecated use `CreateProjectContentHintProjectsResponseType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly RedisRestApiToken: "redis-rest-api-token";
    }>;
    /** @deprecated use `CreateProjectContentHintProjectsResponseType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly RedisRestApiToken: "redis-rest-api-token";
    }>;
}
/** @internal */
export declare const CreateProjectContentHint3$inboundSchema: z.ZodType<CreateProjectContentHint3, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectContentHint3$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const CreateProjectContentHint3$outboundSchema: z.ZodType<CreateProjectContentHint3$Outbound, z.ZodTypeDef, CreateProjectContentHint3>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectContentHint3$ {
    /** @deprecated use `CreateProjectContentHint3$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectContentHint3, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectContentHint3$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectContentHint3$Outbound, z.ZodTypeDef, CreateProjectContentHint3>;
    /** @deprecated use `CreateProjectContentHint3$Outbound` instead. */
    type Outbound = CreateProjectContentHint3$Outbound;
}
export declare function createProjectContentHint3ToJSON(createProjectContentHint3: CreateProjectContentHint3): string;
export declare function createProjectContentHint3FromJSON(jsonString: string): SafeParseResult<CreateProjectContentHint3, SDKValidationError>;
/** @internal */
export declare const CreateProjectContentHintProjectsType$inboundSchema: z.ZodNativeEnum<typeof CreateProjectContentHintProjectsType>;
/** @internal */
export declare const CreateProjectContentHintProjectsType$outboundSchema: z.ZodNativeEnum<typeof CreateProjectContentHintProjectsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectContentHintProjectsType$ {
    /** @deprecated use `CreateProjectContentHintProjectsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly RedisRestApiUrl: "redis-rest-api-url";
    }>;
    /** @deprecated use `CreateProjectContentHintProjectsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly RedisRestApiUrl: "redis-rest-api-url";
    }>;
}
/** @internal */
export declare const CreateProjectContentHint2$inboundSchema: z.ZodType<CreateProjectContentHint2, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectContentHint2$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const CreateProjectContentHint2$outboundSchema: z.ZodType<CreateProjectContentHint2$Outbound, z.ZodTypeDef, CreateProjectContentHint2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectContentHint2$ {
    /** @deprecated use `CreateProjectContentHint2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectContentHint2, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectContentHint2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectContentHint2$Outbound, z.ZodTypeDef, CreateProjectContentHint2>;
    /** @deprecated use `CreateProjectContentHint2$Outbound` instead. */
    type Outbound = CreateProjectContentHint2$Outbound;
}
export declare function createProjectContentHint2ToJSON(createProjectContentHint2: CreateProjectContentHint2): string;
export declare function createProjectContentHint2FromJSON(jsonString: string): SafeParseResult<CreateProjectContentHint2, SDKValidationError>;
/** @internal */
export declare const CreateProjectContentHintType$inboundSchema: z.ZodNativeEnum<typeof CreateProjectContentHintType>;
/** @internal */
export declare const CreateProjectContentHintType$outboundSchema: z.ZodNativeEnum<typeof CreateProjectContentHintType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectContentHintType$ {
    /** @deprecated use `CreateProjectContentHintType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly RedisUrl: "redis-url";
    }>;
    /** @deprecated use `CreateProjectContentHintType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly RedisUrl: "redis-url";
    }>;
}
/** @internal */
export declare const CreateProjectContentHint1$inboundSchema: z.ZodType<CreateProjectContentHint1, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectContentHint1$Outbound = {
    type: string;
    storeId: string;
};
/** @internal */
export declare const CreateProjectContentHint1$outboundSchema: z.ZodType<CreateProjectContentHint1$Outbound, z.ZodTypeDef, CreateProjectContentHint1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectContentHint1$ {
    /** @deprecated use `CreateProjectContentHint1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectContentHint1, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectContentHint1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectContentHint1$Outbound, z.ZodTypeDef, CreateProjectContentHint1>;
    /** @deprecated use `CreateProjectContentHint1$Outbound` instead. */
    type Outbound = CreateProjectContentHint1$Outbound;
}
export declare function createProjectContentHint1ToJSON(createProjectContentHint1: CreateProjectContentHint1): string;
export declare function createProjectContentHint1FromJSON(jsonString: string): SafeParseResult<CreateProjectContentHint1, SDKValidationError>;
/** @internal */
export declare const CreateProjectContentHint$inboundSchema: z.ZodType<CreateProjectContentHint, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectContentHint$Outbound = CreateProjectContentHint14$Outbound | CreateProjectContentHint1$Outbound | CreateProjectContentHint2$Outbound | CreateProjectContentHint3$Outbound | CreateProjectContentHint4$Outbound | CreateProjectContentHint5$Outbound | CreateProjectContentHint6$Outbound | CreateProjectContentHint7$Outbound | CreateProjectContentHint8$Outbound | CreateProjectContentHint9$Outbound | CreateProjectContentHint10$Outbound | CreateProjectContentHint11$Outbound | CreateProjectContentHint12$Outbound | CreateProjectContentHint13$Outbound | CreateProjectContentHint15$Outbound;
/** @internal */
export declare const CreateProjectContentHint$outboundSchema: z.ZodType<CreateProjectContentHint$Outbound, z.ZodTypeDef, CreateProjectContentHint>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectContentHint$ {
    /** @deprecated use `CreateProjectContentHint$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectContentHint, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectContentHint$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectContentHint$Outbound, z.ZodTypeDef, CreateProjectContentHint>;
    /** @deprecated use `CreateProjectContentHint$Outbound` instead. */
    type Outbound = CreateProjectContentHint$Outbound;
}
export declare function createProjectContentHintToJSON(createProjectContentHint: CreateProjectContentHint): string;
export declare function createProjectContentHintFromJSON(jsonString: string): SafeParseResult<CreateProjectContentHint, SDKValidationError>;
/** @internal */
export declare const CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType>;
/** @internal */
export declare const CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType$outboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType$ {
    /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly FlagsSecret: "flags-secret";
    }>;
    /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly FlagsSecret: "flags-secret";
    }>;
}
/** @internal */
export declare const CreateProjectInternalContentHint$inboundSchema: z.ZodType<CreateProjectInternalContentHint, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectInternalContentHint$Outbound = {
    type: string;
    encryptedValue: string;
};
/** @internal */
export declare const CreateProjectInternalContentHint$outboundSchema: z.ZodType<CreateProjectInternalContentHint$Outbound, z.ZodTypeDef, CreateProjectInternalContentHint>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectInternalContentHint$ {
    /** @deprecated use `CreateProjectInternalContentHint$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectInternalContentHint, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectInternalContentHint$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectInternalContentHint$Outbound, z.ZodTypeDef, CreateProjectInternalContentHint>;
    /** @deprecated use `CreateProjectInternalContentHint$Outbound` instead. */
    type Outbound = CreateProjectInternalContentHint$Outbound;
}
export declare function createProjectInternalContentHintToJSON(createProjectInternalContentHint: CreateProjectInternalContentHint): string;
export declare function createProjectInternalContentHintFromJSON(jsonString: string): SafeParseResult<CreateProjectInternalContentHint, SDKValidationError>;
/** @internal */
export declare const CreateProjectEnv$inboundSchema: z.ZodType<CreateProjectEnv, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectEnv$Outbound = {
    target?: Array<string> | string | undefined;
    type: string;
    sunsetSecretId?: string | undefined;
    decrypted?: boolean | undefined;
    value: string;
    vsmValue?: string | undefined;
    id?: string | undefined;
    key: string;
    configurationId?: string | null | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    createdBy?: string | null | undefined;
    updatedBy?: string | null | undefined;
    gitBranch?: string | undefined;
    edgeConfigId?: string | null | undefined;
    edgeConfigTokenId?: string | null | undefined;
    contentHint?: CreateProjectContentHint14$Outbound | CreateProjectContentHint1$Outbound | CreateProjectContentHint2$Outbound | CreateProjectContentHint3$Outbound | CreateProjectContentHint4$Outbound | CreateProjectContentHint5$Outbound | CreateProjectContentHint6$Outbound | CreateProjectContentHint7$Outbound | CreateProjectContentHint8$Outbound | CreateProjectContentHint9$Outbound | CreateProjectContentHint10$Outbound | CreateProjectContentHint11$Outbound | CreateProjectContentHint12$Outbound | CreateProjectContentHint13$Outbound | CreateProjectContentHint15$Outbound | null | undefined;
    internalContentHint?: CreateProjectInternalContentHint$Outbound | null | undefined;
    comment?: string | undefined;
    customEnvironmentIds?: Array<string> | undefined;
};
/** @internal */
export declare const CreateProjectEnv$outboundSchema: z.ZodType<CreateProjectEnv$Outbound, z.ZodTypeDef, CreateProjectEnv>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectEnv$ {
    /** @deprecated use `CreateProjectEnv$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectEnv, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectEnv$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectEnv$Outbound, z.ZodTypeDef, CreateProjectEnv>;
    /** @deprecated use `CreateProjectEnv$Outbound` instead. */
    type Outbound = CreateProjectEnv$Outbound;
}
export declare function createProjectEnvToJSON(createProjectEnv: CreateProjectEnv): string;
export declare function createProjectEnvFromJSON(jsonString: string): SafeParseResult<CreateProjectEnv, SDKValidationError>;
/** @internal */
export declare const CreateProjectProjectsResponse200Type$inboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsResponse200Type>;
/** @internal */
export declare const CreateProjectProjectsResponse200Type$outboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsResponse200Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectProjectsResponse200Type$ {
    /** @deprecated use `CreateProjectProjectsResponse200Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Preview: "preview";
        readonly Production: "production";
        readonly Development: "development";
    }>;
    /** @deprecated use `CreateProjectProjectsResponse200Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Preview: "preview";
        readonly Production: "production";
        readonly Development: "development";
    }>;
}
/** @internal */
export declare const CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$inboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType>;
/** @internal */
export declare const CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$outboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$ {
    /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly EndsWith: "endsWith";
        readonly StartsWith: "startsWith";
        readonly Equals: "equals";
    }>;
    /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodyCustomEnvironmentsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly EndsWith: "endsWith";
        readonly StartsWith: "startsWith";
        readonly Equals: "equals";
    }>;
}
/** @internal */
export declare const CreateProjectBranchMatcher$inboundSchema: z.ZodType<CreateProjectBranchMatcher, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectBranchMatcher$Outbound = {
    type: string;
    pattern: string;
};
/** @internal */
export declare const CreateProjectBranchMatcher$outboundSchema: z.ZodType<CreateProjectBranchMatcher$Outbound, z.ZodTypeDef, CreateProjectBranchMatcher>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectBranchMatcher$ {
    /** @deprecated use `CreateProjectBranchMatcher$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectBranchMatcher, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectBranchMatcher$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectBranchMatcher$Outbound, z.ZodTypeDef, CreateProjectBranchMatcher>;
    /** @deprecated use `CreateProjectBranchMatcher$Outbound` instead. */
    type Outbound = CreateProjectBranchMatcher$Outbound;
}
export declare function createProjectBranchMatcherToJSON(createProjectBranchMatcher: CreateProjectBranchMatcher): string;
export declare function createProjectBranchMatcherFromJSON(jsonString: string): SafeParseResult<CreateProjectBranchMatcher, SDKValidationError>;
/** @internal */
export declare const CreateProjectVerification$inboundSchema: z.ZodType<CreateProjectVerification, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectVerification$Outbound = {
    type: string;
    domain: string;
    value: string;
    reason: string;
};
/** @internal */
export declare const CreateProjectVerification$outboundSchema: z.ZodType<CreateProjectVerification$Outbound, z.ZodTypeDef, CreateProjectVerification>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectVerification$ {
    /** @deprecated use `CreateProjectVerification$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectVerification, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectVerification$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectVerification$Outbound, z.ZodTypeDef, CreateProjectVerification>;
    /** @deprecated use `CreateProjectVerification$Outbound` instead. */
    type Outbound = CreateProjectVerification$Outbound;
}
export declare function createProjectVerificationToJSON(createProjectVerification: CreateProjectVerification): string;
export declare function createProjectVerificationFromJSON(jsonString: string): SafeParseResult<CreateProjectVerification, SDKValidationError>;
/** @internal */
export declare const CreateProjectDomains$inboundSchema: z.ZodType<CreateProjectDomains, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectDomains$Outbound = {
    name: string;
    apexName: string;
    projectId: string;
    redirect?: string | null | undefined;
    redirectStatusCode?: number | null | undefined;
    gitBranch?: string | null | undefined;
    customEnvironmentId?: string | null | undefined;
    updatedAt?: number | undefined;
    createdAt?: number | undefined;
    verified: boolean;
    verification?: Array<CreateProjectVerification$Outbound> | undefined;
};
/** @internal */
export declare const CreateProjectDomains$outboundSchema: z.ZodType<CreateProjectDomains$Outbound, z.ZodTypeDef, CreateProjectDomains>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectDomains$ {
    /** @deprecated use `CreateProjectDomains$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectDomains, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectDomains$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectDomains$Outbound, z.ZodTypeDef, CreateProjectDomains>;
    /** @deprecated use `CreateProjectDomains$Outbound` instead. */
    type Outbound = CreateProjectDomains$Outbound;
}
export declare function createProjectDomainsToJSON(createProjectDomains: CreateProjectDomains): string;
export declare function createProjectDomainsFromJSON(jsonString: string): SafeParseResult<CreateProjectDomains, SDKValidationError>;
/** @internal */
export declare const CreateProjectCustomEnvironments$inboundSchema: z.ZodType<CreateProjectCustomEnvironments, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectCustomEnvironments$Outbound = {
    id: string;
    slug: string;
    type: string;
    description?: string | undefined;
    branchMatcher?: CreateProjectBranchMatcher$Outbound | undefined;
    domains?: Array<CreateProjectDomains$Outbound> | undefined;
    currentDeploymentAliases?: Array<string> | undefined;
    createdAt: number;
    updatedAt: number;
};
/** @internal */
export declare const CreateProjectCustomEnvironments$outboundSchema: z.ZodType<CreateProjectCustomEnvironments$Outbound, z.ZodTypeDef, CreateProjectCustomEnvironments>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectCustomEnvironments$ {
    /** @deprecated use `CreateProjectCustomEnvironments$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectCustomEnvironments, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectCustomEnvironments$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectCustomEnvironments$Outbound, z.ZodTypeDef, CreateProjectCustomEnvironments>;
    /** @deprecated use `CreateProjectCustomEnvironments$Outbound` instead. */
    type Outbound = CreateProjectCustomEnvironments$Outbound;
}
export declare function createProjectCustomEnvironmentsToJSON(createProjectCustomEnvironments: CreateProjectCustomEnvironments): string;
export declare function createProjectCustomEnvironmentsFromJSON(jsonString: string): SafeParseResult<CreateProjectCustomEnvironments, SDKValidationError>;
/** @internal */
export declare const CreateProjectProjectsFramework$inboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsFramework>;
/** @internal */
export declare const CreateProjectProjectsFramework$outboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsFramework>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectProjectsFramework$ {
    /** @deprecated use `CreateProjectProjectsFramework$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Blitzjs: "blitzjs";
        readonly Nextjs: "nextjs";
        readonly Gatsby: "gatsby";
        readonly Remix: "remix";
        readonly ReactRouter: "react-router";
        readonly Astro: "astro";
        readonly Hexo: "hexo";
        readonly Eleventy: "eleventy";
        readonly Docusaurus2: "docusaurus-2";
        readonly Docusaurus: "docusaurus";
        readonly Preact: "preact";
        readonly Solidstart1: "solidstart-1";
        readonly Solidstart: "solidstart";
        readonly Dojo: "dojo";
        readonly Ember: "ember";
        readonly Vue: "vue";
        readonly Scully: "scully";
        readonly IonicAngular: "ionic-angular";
        readonly Angular: "angular";
        readonly Polymer: "polymer";
        readonly Svelte: "svelte";
        readonly Sveltekit: "sveltekit";
        readonly Sveltekit1: "sveltekit-1";
        readonly IonicReact: "ionic-react";
        readonly CreateReactApp: "create-react-app";
        readonly Gridsome: "gridsome";
        readonly Umijs: "umijs";
        readonly Sapper: "sapper";
        readonly Saber: "saber";
        readonly Stencil: "stencil";
        readonly Nuxtjs: "nuxtjs";
        readonly Redwoodjs: "redwoodjs";
        readonly Hugo: "hugo";
        readonly Jekyll: "jekyll";
        readonly Brunch: "brunch";
        readonly Middleman: "middleman";
        readonly Zola: "zola";
        readonly Hydrogen: "hydrogen";
        readonly Vite: "vite";
        readonly Vitepress: "vitepress";
        readonly Vuepress: "vuepress";
        readonly Parcel: "parcel";
        readonly Fastapi: "fastapi";
        readonly Fasthtml: "fasthtml";
        readonly SanityV3: "sanity-v3";
        readonly Sanity: "sanity";
        readonly Storybook: "storybook";
        readonly Nitro: "nitro";
        readonly Hono: "hono";
        readonly Express: "express";
        readonly Xmcp: "xmcp";
    }>;
    /** @deprecated use `CreateProjectProjectsFramework$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Blitzjs: "blitzjs";
        readonly Nextjs: "nextjs";
        readonly Gatsby: "gatsby";
        readonly Remix: "remix";
        readonly ReactRouter: "react-router";
        readonly Astro: "astro";
        readonly Hexo: "hexo";
        readonly Eleventy: "eleventy";
        readonly Docusaurus2: "docusaurus-2";
        readonly Docusaurus: "docusaurus";
        readonly Preact: "preact";
        readonly Solidstart1: "solidstart-1";
        readonly Solidstart: "solidstart";
        readonly Dojo: "dojo";
        readonly Ember: "ember";
        readonly Vue: "vue";
        readonly Scully: "scully";
        readonly IonicAngular: "ionic-angular";
        readonly Angular: "angular";
        readonly Polymer: "polymer";
        readonly Svelte: "svelte";
        readonly Sveltekit: "sveltekit";
        readonly Sveltekit1: "sveltekit-1";
        readonly IonicReact: "ionic-react";
        readonly CreateReactApp: "create-react-app";
        readonly Gridsome: "gridsome";
        readonly Umijs: "umijs";
        readonly Sapper: "sapper";
        readonly Saber: "saber";
        readonly Stencil: "stencil";
        readonly Nuxtjs: "nuxtjs";
        readonly Redwoodjs: "redwoodjs";
        readonly Hugo: "hugo";
        readonly Jekyll: "jekyll";
        readonly Brunch: "brunch";
        readonly Middleman: "middleman";
        readonly Zola: "zola";
        readonly Hydrogen: "hydrogen";
        readonly Vite: "vite";
        readonly Vitepress: "vitepress";
        readonly Vuepress: "vuepress";
        readonly Parcel: "parcel";
        readonly Fastapi: "fastapi";
        readonly Fasthtml: "fasthtml";
        readonly SanityV3: "sanity-v3";
        readonly Sanity: "sanity";
        readonly Storybook: "storybook";
        readonly Nitro: "nitro";
        readonly Hono: "hono";
        readonly Express: "express";
        readonly Xmcp: "xmcp";
    }>;
}
/** @internal */
export declare const CreateProjectIpBuckets$inboundSchema: z.ZodType<CreateProjectIpBuckets, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectIpBuckets$Outbound = {
    bucket: string;
    supportUntil?: number | undefined;
};
/** @internal */
export declare const CreateProjectIpBuckets$outboundSchema: z.ZodType<CreateProjectIpBuckets$Outbound, z.ZodTypeDef, CreateProjectIpBuckets>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectIpBuckets$ {
    /** @deprecated use `CreateProjectIpBuckets$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectIpBuckets, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectIpBuckets$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectIpBuckets$Outbound, z.ZodTypeDef, CreateProjectIpBuckets>;
    /** @deprecated use `CreateProjectIpBuckets$Outbound` instead. */
    type Outbound = CreateProjectIpBuckets$Outbound;
}
export declare function createProjectIpBucketsToJSON(createProjectIpBuckets: CreateProjectIpBuckets): string;
export declare function createProjectIpBucketsFromJSON(jsonString: string): SafeParseResult<CreateProjectIpBuckets, SDKValidationError>;
/** @internal */
export declare const CreateProjectAliasAssigned$inboundSchema: z.ZodType<CreateProjectAliasAssigned, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectAliasAssigned$Outbound = number | boolean;
/** @internal */
export declare const CreateProjectAliasAssigned$outboundSchema: z.ZodType<CreateProjectAliasAssigned$Outbound, z.ZodTypeDef, CreateProjectAliasAssigned>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectAliasAssigned$ {
    /** @deprecated use `CreateProjectAliasAssigned$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectAliasAssigned, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectAliasAssigned$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectAliasAssigned$Outbound, z.ZodTypeDef, CreateProjectAliasAssigned>;
    /** @deprecated use `CreateProjectAliasAssigned$Outbound` instead. */
    type Outbound = CreateProjectAliasAssigned$Outbound;
}
export declare function createProjectAliasAssignedToJSON(createProjectAliasAssigned: CreateProjectAliasAssigned): string;
export declare function createProjectAliasAssignedFromJSON(jsonString: string): SafeParseResult<CreateProjectAliasAssigned, SDKValidationError>;
/** @internal */
export declare const CreateProjectAliasError$inboundSchema: z.ZodType<CreateProjectAliasError, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectAliasError$Outbound = {
    code: string;
    message: string;
};
/** @internal */
export declare const CreateProjectAliasError$outboundSchema: z.ZodType<CreateProjectAliasError$Outbound, z.ZodTypeDef, CreateProjectAliasError>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectAliasError$ {
    /** @deprecated use `CreateProjectAliasError$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectAliasError, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectAliasError$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectAliasError$Outbound, z.ZodTypeDef, CreateProjectAliasError>;
    /** @deprecated use `CreateProjectAliasError$Outbound` instead. */
    type Outbound = CreateProjectAliasError$Outbound;
}
export declare function createProjectAliasErrorToJSON(createProjectAliasError: CreateProjectAliasError): string;
export declare function createProjectAliasErrorFromJSON(jsonString: string): SafeParseResult<CreateProjectAliasError, SDKValidationError>;
/** @internal */
export declare const CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$inboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType>;
/** @internal */
export declare const CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$outboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$ {
    /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly EndsWith: "endsWith";
        readonly StartsWith: "startsWith";
        readonly Equals: "equals";
    }>;
    /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly EndsWith: "endsWith";
        readonly StartsWith: "startsWith";
        readonly Equals: "equals";
    }>;
}
/** @internal */
export declare const CreateProjectProjectsBranchMatcher$inboundSchema: z.ZodType<CreateProjectProjectsBranchMatcher, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectProjectsBranchMatcher$Outbound = {
    type: string;
    pattern: string;
};
/** @internal */
export declare const CreateProjectProjectsBranchMatcher$outboundSchema: z.ZodType<CreateProjectProjectsBranchMatcher$Outbound, z.ZodTypeDef, CreateProjectProjectsBranchMatcher>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectProjectsBranchMatcher$ {
    /** @deprecated use `CreateProjectProjectsBranchMatcher$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectProjectsBranchMatcher, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectProjectsBranchMatcher$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectProjectsBranchMatcher$Outbound, z.ZodTypeDef, CreateProjectProjectsBranchMatcher>;
    /** @deprecated use `CreateProjectProjectsBranchMatcher$Outbound` instead. */
    type Outbound = CreateProjectProjectsBranchMatcher$Outbound;
}
export declare function createProjectProjectsBranchMatcherToJSON(createProjectProjectsBranchMatcher: CreateProjectProjectsBranchMatcher): string;
export declare function createProjectProjectsBranchMatcherFromJSON(jsonString: string): SafeParseResult<CreateProjectProjectsBranchMatcher, SDKValidationError>;
/** @internal */
export declare const CreateProjectBuilds$inboundSchema: z.ZodType<CreateProjectBuilds, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectBuilds$Outbound = {
    use: string;
    src?: string | undefined;
    dest?: string | undefined;
};
/** @internal */
export declare const CreateProjectBuilds$outboundSchema: z.ZodType<CreateProjectBuilds$Outbound, z.ZodTypeDef, CreateProjectBuilds>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectBuilds$ {
    /** @deprecated use `CreateProjectBuilds$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectBuilds, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectBuilds$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectBuilds$Outbound, z.ZodTypeDef, CreateProjectBuilds>;
    /** @deprecated use `CreateProjectBuilds$Outbound` instead. */
    type Outbound = CreateProjectBuilds$Outbound;
}
export declare function createProjectBuildsToJSON(createProjectBuilds: CreateProjectBuilds): string;
export declare function createProjectBuildsFromJSON(jsonString: string): SafeParseResult<CreateProjectBuilds, SDKValidationError>;
/** @internal */
export declare const CreateProjectChecksConclusion$inboundSchema: z.ZodNativeEnum<typeof CreateProjectChecksConclusion>;
/** @internal */
export declare const CreateProjectChecksConclusion$outboundSchema: z.ZodNativeEnum<typeof CreateProjectChecksConclusion>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectChecksConclusion$ {
    /** @deprecated use `CreateProjectChecksConclusion$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Succeeded: "succeeded";
        readonly Failed: "failed";
        readonly Skipped: "skipped";
        readonly Canceled: "canceled";
    }>;
    /** @deprecated use `CreateProjectChecksConclusion$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Succeeded: "succeeded";
        readonly Failed: "failed";
        readonly Skipped: "skipped";
        readonly Canceled: "canceled";
    }>;
}
/** @internal */
export declare const CreateProjectChecksState$inboundSchema: z.ZodNativeEnum<typeof CreateProjectChecksState>;
/** @internal */
export declare const CreateProjectChecksState$outboundSchema: z.ZodNativeEnum<typeof CreateProjectChecksState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectChecksState$ {
    /** @deprecated use `CreateProjectChecksState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Registered: "registered";
        readonly Running: "running";
        readonly Completed: "completed";
    }>;
    /** @deprecated use `CreateProjectChecksState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Registered: "registered";
        readonly Running: "running";
        readonly Completed: "completed";
    }>;
}
/** @internal */
export declare const CreateProjectCreator$inboundSchema: z.ZodType<CreateProjectCreator, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectCreator$Outbound = {
    email: string;
    githubLogin?: string | undefined;
    gitlabLogin?: string | undefined;
    uid: string;
    username: string;
};
/** @internal */
export declare const CreateProjectCreator$outboundSchema: z.ZodType<CreateProjectCreator$Outbound, z.ZodTypeDef, CreateProjectCreator>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectCreator$ {
    /** @deprecated use `CreateProjectCreator$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectCreator, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectCreator$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectCreator$Outbound, z.ZodTypeDef, CreateProjectCreator>;
    /** @deprecated use `CreateProjectCreator$Outbound` instead. */
    type Outbound = CreateProjectCreator$Outbound;
}
export declare function createProjectCreatorToJSON(createProjectCreator: CreateProjectCreator): string;
export declare function createProjectCreatorFromJSON(jsonString: string): SafeParseResult<CreateProjectCreator, SDKValidationError>;
/** @internal */
export declare const CreateProjectOidcTokenClaims$inboundSchema: z.ZodType<CreateProjectOidcTokenClaims, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectOidcTokenClaims$Outbound = {
    iss: string;
    sub: string;
    scope: string;
    aud: string;
    owner: string;
    owner_id: string;
    project: string;
    project_id: string;
    environment: string;
};
/** @internal */
export declare const CreateProjectOidcTokenClaims$outboundSchema: z.ZodType<CreateProjectOidcTokenClaims$Outbound, z.ZodTypeDef, CreateProjectOidcTokenClaims>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectOidcTokenClaims$ {
    /** @deprecated use `CreateProjectOidcTokenClaims$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectOidcTokenClaims, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectOidcTokenClaims$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectOidcTokenClaims$Outbound, z.ZodTypeDef, CreateProjectOidcTokenClaims>;
    /** @deprecated use `CreateProjectOidcTokenClaims$Outbound` instead. */
    type Outbound = CreateProjectOidcTokenClaims$Outbound;
}
export declare function createProjectOidcTokenClaimsToJSON(createProjectOidcTokenClaims: CreateProjectOidcTokenClaims): string;
export declare function createProjectOidcTokenClaimsFromJSON(jsonString: string): SafeParseResult<CreateProjectOidcTokenClaims, SDKValidationError>;
/** @internal */
export declare const CreateProjectPlan$inboundSchema: z.ZodNativeEnum<typeof CreateProjectPlan>;
/** @internal */
export declare const CreateProjectPlan$outboundSchema: z.ZodNativeEnum<typeof CreateProjectPlan>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectPlan$ {
    /** @deprecated use `CreateProjectPlan$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Pro: "pro";
        readonly Enterprise: "enterprise";
        readonly Hobby: "hobby";
    }>;
    /** @deprecated use `CreateProjectPlan$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Pro: "pro";
        readonly Enterprise: "enterprise";
        readonly Hobby: "hobby";
    }>;
}
/** @internal */
export declare const CreateProjectReadyState$inboundSchema: z.ZodNativeEnum<typeof CreateProjectReadyState>;
/** @internal */
export declare const CreateProjectReadyState$outboundSchema: z.ZodNativeEnum<typeof CreateProjectReadyState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectReadyState$ {
    /** @deprecated use `CreateProjectReadyState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Queued: "QUEUED";
        readonly Ready: "READY";
        readonly Canceled: "CANCELED";
    }>;
    /** @deprecated use `CreateProjectReadyState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Queued: "QUEUED";
        readonly Ready: "READY";
        readonly Canceled: "CANCELED";
    }>;
}
/** @internal */
export declare const CreateProjectReadySubstate$inboundSchema: z.ZodNativeEnum<typeof CreateProjectReadySubstate>;
/** @internal */
export declare const CreateProjectReadySubstate$outboundSchema: z.ZodNativeEnum<typeof CreateProjectReadySubstate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectReadySubstate$ {
    /** @deprecated use `CreateProjectReadySubstate$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Staged: "STAGED";
        readonly Rolling: "ROLLING";
        readonly Promoted: "PROMOTED";
    }>;
    /** @deprecated use `CreateProjectReadySubstate$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Staged: "STAGED";
        readonly Rolling: "ROLLING";
        readonly Promoted: "PROMOTED";
    }>;
}
/** @internal */
export declare const CreateProjectProjectsResponse200ApplicationJSONType$inboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsResponse200ApplicationJSONType>;
/** @internal */
export declare const CreateProjectProjectsResponse200ApplicationJSONType$outboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsResponse200ApplicationJSONType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectProjectsResponse200ApplicationJSONType$ {
    /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Lambdas: "LAMBDAS";
    }>;
    /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Lambdas: "LAMBDAS";
    }>;
}
/** @internal */
export declare const CreateProjectLatestDeployments$inboundSchema: z.ZodType<CreateProjectLatestDeployments, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectLatestDeployments$Outbound = {
    id: string;
    alias?: Array<string> | undefined;
    aliasAssigned?: number | boolean | null | undefined;
    aliasError?: CreateProjectAliasError$Outbound | null | undefined;
    aliasFinal?: string | null | undefined;
    automaticAliases?: Array<string> | undefined;
    branchMatcher?: CreateProjectProjectsBranchMatcher$Outbound | undefined;
    buildingAt?: number | undefined;
    builds?: Array<CreateProjectBuilds$Outbound> | undefined;
    checksConclusion?: string | undefined;
    checksState?: string | undefined;
    connectBuildsEnabled?: boolean | undefined;
    connectConfigurationId?: string | undefined;
    createdAt: number;
    createdIn: string;
    creator: CreateProjectCreator$Outbound | null;
    deletedAt?: number | undefined;
    deploymentHostname: string;
    forced?: boolean | undefined;
    name: string;
    meta?: {
        [k: string]: string;
    } | undefined;
    monorepoManager?: string | null | undefined;
    oidcTokenClaims?: CreateProjectOidcTokenClaims$Outbound | undefined;
    plan: string;
    previewCommentsEnabled?: boolean | undefined;
    private: boolean;
    readyAt?: number | undefined;
    readyState: string;
    readySubstate?: string | undefined;
    requestedAt?: number | undefined;
    target?: string | null | undefined;
    teamId?: string | null | undefined;
    type: string;
    url: string;
    userId: string;
    withCache?: boolean | undefined;
};
/** @internal */
export declare const CreateProjectLatestDeployments$outboundSchema: z.ZodType<CreateProjectLatestDeployments$Outbound, z.ZodTypeDef, CreateProjectLatestDeployments>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectLatestDeployments$ {
    /** @deprecated use `CreateProjectLatestDeployments$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectLatestDeployments, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectLatestDeployments$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectLatestDeployments$Outbound, z.ZodTypeDef, CreateProjectLatestDeployments>;
    /** @deprecated use `CreateProjectLatestDeployments$Outbound` instead. */
    type Outbound = CreateProjectLatestDeployments$Outbound;
}
export declare function createProjectLatestDeploymentsToJSON(createProjectLatestDeployments: CreateProjectLatestDeployments): string;
export declare function createProjectLatestDeploymentsFromJSON(jsonString: string): SafeParseResult<CreateProjectLatestDeployments, SDKValidationError>;
/** @internal */
export declare const CreateProjectLinkProjectsResponse200ApplicationJSONType$inboundSchema: z.ZodNativeEnum<typeof CreateProjectLinkProjectsResponse200ApplicationJSONType>;
/** @internal */
export declare const CreateProjectLinkProjectsResponse200ApplicationJSONType$outboundSchema: z.ZodNativeEnum<typeof CreateProjectLinkProjectsResponse200ApplicationJSONType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectLinkProjectsResponse200ApplicationJSONType$ {
    /** @deprecated use `CreateProjectLinkProjectsResponse200ApplicationJSONType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
    /** @deprecated use `CreateProjectLinkProjectsResponse200ApplicationJSONType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
}
/** @internal */
export declare const CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$inboundSchema: z.ZodType<CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$Outbound = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};
/** @internal */
export declare const CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$outboundSchema: z.ZodType<CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$Outbound, z.ZodTypeDef, CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$ {
    /** @deprecated use `CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$Outbound, z.ZodTypeDef, CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks>;
    /** @deprecated use `CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$Outbound` instead. */
    type Outbound = CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$Outbound;
}
export declare function createProjectLinkProjectsResponse200ApplicationJSONDeployHooksToJSON(createProjectLinkProjectsResponse200ApplicationJSONDeployHooks: CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks): string;
export declare function createProjectLinkProjectsResponse200ApplicationJSONDeployHooksFromJSON(jsonString: string): SafeParseResult<CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks, SDKValidationError>;
/** @internal */
export declare const CreateProjectLink5$inboundSchema: z.ZodType<CreateProjectLink5, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectLink5$Outbound = {
    name: string;
    slug: string;
    owner: string;
    type: string;
    uuid: string;
    workspaceUuid: string;
    createdAt?: number | undefined;
    deployHooks: Array<CreateProjectLinkProjectsResponse200ApplicationJSONDeployHooks$Outbound>;
    gitCredentialId: string;
    updatedAt?: number | undefined;
    sourceless?: boolean | undefined;
    productionBranch: string;
};
/** @internal */
export declare const CreateProjectLink5$outboundSchema: z.ZodType<CreateProjectLink5$Outbound, z.ZodTypeDef, CreateProjectLink5>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectLink5$ {
    /** @deprecated use `CreateProjectLink5$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectLink5, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectLink5$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectLink5$Outbound, z.ZodTypeDef, CreateProjectLink5>;
    /** @deprecated use `CreateProjectLink5$Outbound` instead. */
    type Outbound = CreateProjectLink5$Outbound;
}
export declare function createProjectLink5ToJSON(createProjectLink5: CreateProjectLink5): string;
export declare function createProjectLink5FromJSON(jsonString: string): SafeParseResult<CreateProjectLink5, SDKValidationError>;
/** @internal */
export declare const CreateProjectLinkProjectsResponse200Type$inboundSchema: z.ZodNativeEnum<typeof CreateProjectLinkProjectsResponse200Type>;
/** @internal */
export declare const CreateProjectLinkProjectsResponse200Type$outboundSchema: z.ZodNativeEnum<typeof CreateProjectLinkProjectsResponse200Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectLinkProjectsResponse200Type$ {
    /** @deprecated use `CreateProjectLinkProjectsResponse200Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Gitlab: "gitlab";
    }>;
    /** @deprecated use `CreateProjectLinkProjectsResponse200Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Gitlab: "gitlab";
    }>;
}
/** @internal */
export declare const CreateProjectLinkProjectsResponse200DeployHooks$inboundSchema: z.ZodType<CreateProjectLinkProjectsResponse200DeployHooks, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectLinkProjectsResponse200DeployHooks$Outbound = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};
/** @internal */
export declare const CreateProjectLinkProjectsResponse200DeployHooks$outboundSchema: z.ZodType<CreateProjectLinkProjectsResponse200DeployHooks$Outbound, z.ZodTypeDef, CreateProjectLinkProjectsResponse200DeployHooks>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectLinkProjectsResponse200DeployHooks$ {
    /** @deprecated use `CreateProjectLinkProjectsResponse200DeployHooks$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectLinkProjectsResponse200DeployHooks, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectLinkProjectsResponse200DeployHooks$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectLinkProjectsResponse200DeployHooks$Outbound, z.ZodTypeDef, CreateProjectLinkProjectsResponse200DeployHooks>;
    /** @deprecated use `CreateProjectLinkProjectsResponse200DeployHooks$Outbound` instead. */
    type Outbound = CreateProjectLinkProjectsResponse200DeployHooks$Outbound;
}
export declare function createProjectLinkProjectsResponse200DeployHooksToJSON(createProjectLinkProjectsResponse200DeployHooks: CreateProjectLinkProjectsResponse200DeployHooks): string;
export declare function createProjectLinkProjectsResponse200DeployHooksFromJSON(jsonString: string): SafeParseResult<CreateProjectLinkProjectsResponse200DeployHooks, SDKValidationError>;
/** @internal */
export declare const CreateProjectLink4$inboundSchema: z.ZodType<CreateProjectLink4, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectLink4$Outbound = {
    projectId: string;
    projectName: string;
    projectNameWithNamespace: string;
    projectNamespace: string;
    projectOwnerId?: number | undefined;
    projectUrl: string;
    type: string;
    createdAt?: number | undefined;
    deployHooks: Array<CreateProjectLinkProjectsResponse200DeployHooks$Outbound>;
    gitCredentialId: string;
    updatedAt?: number | undefined;
    sourceless?: boolean | undefined;
    productionBranch: string;
};
/** @internal */
export declare const CreateProjectLink4$outboundSchema: z.ZodType<CreateProjectLink4$Outbound, z.ZodTypeDef, CreateProjectLink4>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectLink4$ {
    /** @deprecated use `CreateProjectLink4$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectLink4, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectLink4$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectLink4$Outbound, z.ZodTypeDef, CreateProjectLink4>;
    /** @deprecated use `CreateProjectLink4$Outbound` instead. */
    type Outbound = CreateProjectLink4$Outbound;
}
export declare function createProjectLink4ToJSON(createProjectLink4: CreateProjectLink4): string;
export declare function createProjectLink4FromJSON(jsonString: string): SafeParseResult<CreateProjectLink4, SDKValidationError>;
/** @internal */
export declare const CreateProjectLinkProjectsResponseType$inboundSchema: z.ZodNativeEnum<typeof CreateProjectLinkProjectsResponseType>;
/** @internal */
export declare const CreateProjectLinkProjectsResponseType$outboundSchema: z.ZodNativeEnum<typeof CreateProjectLinkProjectsResponseType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectLinkProjectsResponseType$ {
    /** @deprecated use `CreateProjectLinkProjectsResponseType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly GithubCustomHost: "github-custom-host";
    }>;
    /** @deprecated use `CreateProjectLinkProjectsResponseType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly GithubCustomHost: "github-custom-host";
    }>;
}
/** @internal */
export declare const CreateProjectLinkProjectsResponseDeployHooks$inboundSchema: z.ZodType<CreateProjectLinkProjectsResponseDeployHooks, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectLinkProjectsResponseDeployHooks$Outbound = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};
/** @internal */
export declare const CreateProjectLinkProjectsResponseDeployHooks$outboundSchema: z.ZodType<CreateProjectLinkProjectsResponseDeployHooks$Outbound, z.ZodTypeDef, CreateProjectLinkProjectsResponseDeployHooks>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectLinkProjectsResponseDeployHooks$ {
    /** @deprecated use `CreateProjectLinkProjectsResponseDeployHooks$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectLinkProjectsResponseDeployHooks, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectLinkProjectsResponseDeployHooks$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectLinkProjectsResponseDeployHooks$Outbound, z.ZodTypeDef, CreateProjectLinkProjectsResponseDeployHooks>;
    /** @deprecated use `CreateProjectLinkProjectsResponseDeployHooks$Outbound` instead. */
    type Outbound = CreateProjectLinkProjectsResponseDeployHooks$Outbound;
}
export declare function createProjectLinkProjectsResponseDeployHooksToJSON(createProjectLinkProjectsResponseDeployHooks: CreateProjectLinkProjectsResponseDeployHooks): string;
export declare function createProjectLinkProjectsResponseDeployHooksFromJSON(jsonString: string): SafeParseResult<CreateProjectLinkProjectsResponseDeployHooks, SDKValidationError>;
/** @internal */
export declare const CreateProjectLink3$inboundSchema: z.ZodType<CreateProjectLink3, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectLink3$Outbound = {
    org: string;
    repoOwnerId?: number | undefined;
    repo?: string | undefined;
    repoId?: number | undefined;
    type: string;
    host: string;
    createdAt?: number | undefined;
    deployHooks: Array<CreateProjectLinkProjectsResponseDeployHooks$Outbound>;
    gitCredentialId: string;
    updatedAt?: number | undefined;
    sourceless?: boolean | undefined;
    productionBranch: string;
};
/** @internal */
export declare const CreateProjectLink3$outboundSchema: z.ZodType<CreateProjectLink3$Outbound, z.ZodTypeDef, CreateProjectLink3>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectLink3$ {
    /** @deprecated use `CreateProjectLink3$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectLink3, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectLink3$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectLink3$Outbound, z.ZodTypeDef, CreateProjectLink3>;
    /** @deprecated use `CreateProjectLink3$Outbound` instead. */
    type Outbound = CreateProjectLink3$Outbound;
}
export declare function createProjectLink3ToJSON(createProjectLink3: CreateProjectLink3): string;
export declare function createProjectLink3FromJSON(jsonString: string): SafeParseResult<CreateProjectLink3, SDKValidationError>;
/** @internal */
export declare const CreateProjectLinkProjectsType$inboundSchema: z.ZodNativeEnum<typeof CreateProjectLinkProjectsType>;
/** @internal */
export declare const CreateProjectLinkProjectsType$outboundSchema: z.ZodNativeEnum<typeof CreateProjectLinkProjectsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectLinkProjectsType$ {
    /** @deprecated use `CreateProjectLinkProjectsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly GithubLimited: "github-limited";
    }>;
    /** @deprecated use `CreateProjectLinkProjectsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly GithubLimited: "github-limited";
    }>;
}
/** @internal */
export declare const CreateProjectLinkProjectsDeployHooks$inboundSchema: z.ZodType<CreateProjectLinkProjectsDeployHooks, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectLinkProjectsDeployHooks$Outbound = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};
/** @internal */
export declare const CreateProjectLinkProjectsDeployHooks$outboundSchema: z.ZodType<CreateProjectLinkProjectsDeployHooks$Outbound, z.ZodTypeDef, CreateProjectLinkProjectsDeployHooks>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectLinkProjectsDeployHooks$ {
    /** @deprecated use `CreateProjectLinkProjectsDeployHooks$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectLinkProjectsDeployHooks, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectLinkProjectsDeployHooks$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectLinkProjectsDeployHooks$Outbound, z.ZodTypeDef, CreateProjectLinkProjectsDeployHooks>;
    /** @deprecated use `CreateProjectLinkProjectsDeployHooks$Outbound` instead. */
    type Outbound = CreateProjectLinkProjectsDeployHooks$Outbound;
}
export declare function createProjectLinkProjectsDeployHooksToJSON(createProjectLinkProjectsDeployHooks: CreateProjectLinkProjectsDeployHooks): string;
export declare function createProjectLinkProjectsDeployHooksFromJSON(jsonString: string): SafeParseResult<CreateProjectLinkProjectsDeployHooks, SDKValidationError>;
/** @internal */
export declare const CreateProjectLink2$inboundSchema: z.ZodType<CreateProjectLink2, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectLink2$Outbound = {
    type: string;
    repo?: string | undefined;
    repoId?: number | undefined;
    updatedAt?: number | undefined;
    createdAt?: number | undefined;
    org: string;
    repoOwnerId?: number | undefined;
    deployHooks: Array<CreateProjectLinkProjectsDeployHooks$Outbound>;
    gitCredentialId: string;
    sourceless?: boolean | undefined;
    productionBranch: string;
};
/** @internal */
export declare const CreateProjectLink2$outboundSchema: z.ZodType<CreateProjectLink2$Outbound, z.ZodTypeDef, CreateProjectLink2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectLink2$ {
    /** @deprecated use `CreateProjectLink2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectLink2, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectLink2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectLink2$Outbound, z.ZodTypeDef, CreateProjectLink2>;
    /** @deprecated use `CreateProjectLink2$Outbound` instead. */
    type Outbound = CreateProjectLink2$Outbound;
}
export declare function createProjectLink2ToJSON(createProjectLink2: CreateProjectLink2): string;
export declare function createProjectLink2FromJSON(jsonString: string): SafeParseResult<CreateProjectLink2, SDKValidationError>;
/** @internal */
export declare const CreateProjectLinkType$inboundSchema: z.ZodNativeEnum<typeof CreateProjectLinkType>;
/** @internal */
export declare const CreateProjectLinkType$outboundSchema: z.ZodNativeEnum<typeof CreateProjectLinkType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectLinkType$ {
    /** @deprecated use `CreateProjectLinkType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
    /** @deprecated use `CreateProjectLinkType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
}
/** @internal */
export declare const CreateProjectLinkDeployHooks$inboundSchema: z.ZodType<CreateProjectLinkDeployHooks, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectLinkDeployHooks$Outbound = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};
/** @internal */
export declare const CreateProjectLinkDeployHooks$outboundSchema: z.ZodType<CreateProjectLinkDeployHooks$Outbound, z.ZodTypeDef, CreateProjectLinkDeployHooks>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectLinkDeployHooks$ {
    /** @deprecated use `CreateProjectLinkDeployHooks$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectLinkDeployHooks, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectLinkDeployHooks$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectLinkDeployHooks$Outbound, z.ZodTypeDef, CreateProjectLinkDeployHooks>;
    /** @deprecated use `CreateProjectLinkDeployHooks$Outbound` instead. */
    type Outbound = CreateProjectLinkDeployHooks$Outbound;
}
export declare function createProjectLinkDeployHooksToJSON(createProjectLinkDeployHooks: CreateProjectLinkDeployHooks): string;
export declare function createProjectLinkDeployHooksFromJSON(jsonString: string): SafeParseResult<CreateProjectLinkDeployHooks, SDKValidationError>;
/** @internal */
export declare const CreateProjectLink1$inboundSchema: z.ZodType<CreateProjectLink1, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectLink1$Outbound = {
    org: string;
    repoOwnerId?: number | undefined;
    repo?: string | undefined;
    repoId?: number | undefined;
    type: string;
    createdAt?: number | undefined;
    deployHooks: Array<CreateProjectLinkDeployHooks$Outbound>;
    gitCredentialId: string;
    updatedAt?: number | undefined;
    sourceless?: boolean | undefined;
    productionBranch: string;
};
/** @internal */
export declare const CreateProjectLink1$outboundSchema: z.ZodType<CreateProjectLink1$Outbound, z.ZodTypeDef, CreateProjectLink1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectLink1$ {
    /** @deprecated use `CreateProjectLink1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectLink1, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectLink1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectLink1$Outbound, z.ZodTypeDef, CreateProjectLink1>;
    /** @deprecated use `CreateProjectLink1$Outbound` instead. */
    type Outbound = CreateProjectLink1$Outbound;
}
export declare function createProjectLink1ToJSON(createProjectLink1: CreateProjectLink1): string;
export declare function createProjectLink1FromJSON(jsonString: string): SafeParseResult<CreateProjectLink1, SDKValidationError>;
/** @internal */
export declare const CreateProjectLink$inboundSchema: z.ZodType<CreateProjectLink, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectLink$Outbound = CreateProjectLink4$Outbound | CreateProjectLink5$Outbound | CreateProjectLink3$Outbound | CreateProjectLink1$Outbound | CreateProjectLink2$Outbound;
/** @internal */
export declare const CreateProjectLink$outboundSchema: z.ZodType<CreateProjectLink$Outbound, z.ZodTypeDef, CreateProjectLink>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectLink$ {
    /** @deprecated use `CreateProjectLink$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectLink, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectLink$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectLink$Outbound, z.ZodTypeDef, CreateProjectLink>;
    /** @deprecated use `CreateProjectLink$Outbound` instead. */
    type Outbound = CreateProjectLink$Outbound;
}
export declare function createProjectLinkToJSON(createProjectLink: CreateProjectLink): string;
export declare function createProjectLinkFromJSON(jsonString: string): SafeParseResult<CreateProjectLink, SDKValidationError>;
/** @internal */
export declare const CreateProjectMicrofrontends2$inboundSchema: z.ZodType<CreateProjectMicrofrontends2, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectMicrofrontends2$Outbound = {
    updatedAt: number;
    groupIds: Array<any>;
    enabled: boolean;
};
/** @internal */
export declare const CreateProjectMicrofrontends2$outboundSchema: z.ZodType<CreateProjectMicrofrontends2$Outbound, z.ZodTypeDef, CreateProjectMicrofrontends2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectMicrofrontends2$ {
    /** @deprecated use `CreateProjectMicrofrontends2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectMicrofrontends2, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectMicrofrontends2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectMicrofrontends2$Outbound, z.ZodTypeDef, CreateProjectMicrofrontends2>;
    /** @deprecated use `CreateProjectMicrofrontends2$Outbound` instead. */
    type Outbound = CreateProjectMicrofrontends2$Outbound;
}
export declare function createProjectMicrofrontends2ToJSON(createProjectMicrofrontends2: CreateProjectMicrofrontends2): string;
export declare function createProjectMicrofrontends2FromJSON(jsonString: string): SafeParseResult<CreateProjectMicrofrontends2, SDKValidationError>;
/** @internal */
export declare const CreateProjectMicrofrontends1$inboundSchema: z.ZodType<CreateProjectMicrofrontends1, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectMicrofrontends1$Outbound = {
    updatedAt: number;
    groupIds: Array<string>;
    enabled: boolean;
    isDefaultApp?: boolean | undefined;
    defaultRoute?: string | undefined;
    routeObservabilityToThisProject?: boolean | undefined;
};
/** @internal */
export declare const CreateProjectMicrofrontends1$outboundSchema: z.ZodType<CreateProjectMicrofrontends1$Outbound, z.ZodTypeDef, CreateProjectMicrofrontends1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectMicrofrontends1$ {
    /** @deprecated use `CreateProjectMicrofrontends1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectMicrofrontends1, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectMicrofrontends1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectMicrofrontends1$Outbound, z.ZodTypeDef, CreateProjectMicrofrontends1>;
    /** @deprecated use `CreateProjectMicrofrontends1$Outbound` instead. */
    type Outbound = CreateProjectMicrofrontends1$Outbound;
}
export declare function createProjectMicrofrontends1ToJSON(createProjectMicrofrontends1: CreateProjectMicrofrontends1): string;
export declare function createProjectMicrofrontends1FromJSON(jsonString: string): SafeParseResult<CreateProjectMicrofrontends1, SDKValidationError>;
/** @internal */
export declare const CreateProjectMicrofrontends$inboundSchema: z.ZodType<CreateProjectMicrofrontends, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectMicrofrontends$Outbound = CreateProjectMicrofrontends1$Outbound | CreateProjectMicrofrontends2$Outbound;
/** @internal */
export declare const CreateProjectMicrofrontends$outboundSchema: z.ZodType<CreateProjectMicrofrontends$Outbound, z.ZodTypeDef, CreateProjectMicrofrontends>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectMicrofrontends$ {
    /** @deprecated use `CreateProjectMicrofrontends$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectMicrofrontends, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectMicrofrontends$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectMicrofrontends$Outbound, z.ZodTypeDef, CreateProjectMicrofrontends>;
    /** @deprecated use `CreateProjectMicrofrontends$Outbound` instead. */
    type Outbound = CreateProjectMicrofrontends$Outbound;
}
export declare function createProjectMicrofrontendsToJSON(createProjectMicrofrontends: CreateProjectMicrofrontends): string;
export declare function createProjectMicrofrontendsFromJSON(jsonString: string): SafeParseResult<CreateProjectMicrofrontends, SDKValidationError>;
/** @internal */
export declare const CreateProjectNodeVersion$inboundSchema: z.ZodNativeEnum<typeof CreateProjectNodeVersion>;
/** @internal */
export declare const CreateProjectNodeVersion$outboundSchema: z.ZodNativeEnum<typeof CreateProjectNodeVersion>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectNodeVersion$ {
    /** @deprecated use `CreateProjectNodeVersion$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly TwentyTwoDotX: "22.x";
        readonly TwentyDotX: "20.x";
        readonly EighteenDotX: "18.x";
        readonly SixteenDotX: "16.x";
        readonly FourteenDotX: "14.x";
        readonly TwelveDotX: "12.x";
        readonly TenDotX: "10.x";
        readonly EightDot10DotX: "8.10.x";
    }>;
    /** @deprecated use `CreateProjectNodeVersion$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly TwentyTwoDotX: "22.x";
        readonly TwentyDotX: "20.x";
        readonly EighteenDotX: "18.x";
        readonly SixteenDotX: "16.x";
        readonly FourteenDotX: "14.x";
        readonly TwelveDotX: "12.x";
        readonly TenDotX: "10.x";
        readonly EightDot10DotX: "8.10.x";
    }>;
}
/** @internal */
export declare const CreateProjectPaths$inboundSchema: z.ZodType<CreateProjectPaths, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectPaths$Outbound = {
    value: string;
};
/** @internal */
export declare const CreateProjectPaths$outboundSchema: z.ZodType<CreateProjectPaths$Outbound, z.ZodTypeDef, CreateProjectPaths>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectPaths$ {
    /** @deprecated use `CreateProjectPaths$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectPaths, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectPaths$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectPaths$Outbound, z.ZodTypeDef, CreateProjectPaths>;
    /** @deprecated use `CreateProjectPaths$Outbound` instead. */
    type Outbound = CreateProjectPaths$Outbound;
}
export declare function createProjectPathsToJSON(createProjectPaths: CreateProjectPaths): string;
export declare function createProjectPathsFromJSON(jsonString: string): SafeParseResult<CreateProjectPaths, SDKValidationError>;
/** @internal */
export declare const CreateProjectOptionsAllowlist$inboundSchema: z.ZodType<CreateProjectOptionsAllowlist, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectOptionsAllowlist$Outbound = {
    paths: Array<CreateProjectPaths$Outbound>;
};
/** @internal */
export declare const CreateProjectOptionsAllowlist$outboundSchema: z.ZodType<CreateProjectOptionsAllowlist$Outbound, z.ZodTypeDef, CreateProjectOptionsAllowlist>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectOptionsAllowlist$ {
    /** @deprecated use `CreateProjectOptionsAllowlist$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectOptionsAllowlist, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectOptionsAllowlist$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectOptionsAllowlist$Outbound, z.ZodTypeDef, CreateProjectOptionsAllowlist>;
    /** @deprecated use `CreateProjectOptionsAllowlist$Outbound` instead. */
    type Outbound = CreateProjectOptionsAllowlist$Outbound;
}
export declare function createProjectOptionsAllowlistToJSON(createProjectOptionsAllowlist: CreateProjectOptionsAllowlist): string;
export declare function createProjectOptionsAllowlistFromJSON(jsonString: string): SafeParseResult<CreateProjectOptionsAllowlist, SDKValidationError>;
/** @internal */
export declare const CreateProjectPasswordProtection$inboundSchema: z.ZodType<CreateProjectPasswordProtection, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectPasswordProtection$Outbound = {};
/** @internal */
export declare const CreateProjectPasswordProtection$outboundSchema: z.ZodType<CreateProjectPasswordProtection$Outbound, z.ZodTypeDef, CreateProjectPasswordProtection>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectPasswordProtection$ {
    /** @deprecated use `CreateProjectPasswordProtection$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectPasswordProtection, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectPasswordProtection$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectPasswordProtection$Outbound, z.ZodTypeDef, CreateProjectPasswordProtection>;
    /** @deprecated use `CreateProjectPasswordProtection$Outbound` instead. */
    type Outbound = CreateProjectPasswordProtection$Outbound;
}
export declare function createProjectPasswordProtectionToJSON(createProjectPasswordProtection: CreateProjectPasswordProtection): string;
export declare function createProjectPasswordProtectionFromJSON(jsonString: string): SafeParseResult<CreateProjectPasswordProtection, SDKValidationError>;
/** @internal */
export declare const CreateProjectFunctionDefaultMemoryType$inboundSchema: z.ZodNativeEnum<typeof CreateProjectFunctionDefaultMemoryType>;
/** @internal */
export declare const CreateProjectFunctionDefaultMemoryType$outboundSchema: z.ZodNativeEnum<typeof CreateProjectFunctionDefaultMemoryType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectFunctionDefaultMemoryType$ {
    /** @deprecated use `CreateProjectFunctionDefaultMemoryType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly StandardLegacy: "standard_legacy";
        readonly Standard: "standard";
        readonly Performance: "performance";
    }>;
    /** @deprecated use `CreateProjectFunctionDefaultMemoryType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly StandardLegacy: "standard_legacy";
        readonly Standard: "standard";
        readonly Performance: "performance";
    }>;
}
/** @internal */
export declare const CreateProjectBuildMachineType$inboundSchema: z.ZodNativeEnum<typeof CreateProjectBuildMachineType>;
/** @internal */
export declare const CreateProjectBuildMachineType$outboundSchema: z.ZodNativeEnum<typeof CreateProjectBuildMachineType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectBuildMachineType$ {
    /** @deprecated use `CreateProjectBuildMachineType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Enhanced: "enhanced";
        readonly Turbo: "turbo";
    }>;
    /** @deprecated use `CreateProjectBuildMachineType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Enhanced: "enhanced";
        readonly Turbo: "turbo";
    }>;
}
/** @internal */
export declare const CreateProjectProjectsResourceConfig$inboundSchema: z.ZodType<CreateProjectProjectsResourceConfig, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectProjectsResourceConfig$Outbound = {
    elasticConcurrencyEnabled?: boolean | undefined;
    fluid?: boolean | undefined;
    functionDefaultRegions: Array<string>;
    functionDefaultTimeout?: number | undefined;
    functionDefaultMemoryType?: string | undefined;
    functionZeroConfigFailover?: boolean | undefined;
    buildMachineType?: string | undefined;
    isNSNBDisabled?: boolean | undefined;
};
/** @internal */
export declare const CreateProjectProjectsResourceConfig$outboundSchema: z.ZodType<CreateProjectProjectsResourceConfig$Outbound, z.ZodTypeDef, CreateProjectProjectsResourceConfig>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectProjectsResourceConfig$ {
    /** @deprecated use `CreateProjectProjectsResourceConfig$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectProjectsResourceConfig, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectProjectsResourceConfig$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectProjectsResourceConfig$Outbound, z.ZodTypeDef, CreateProjectProjectsResourceConfig>;
    /** @deprecated use `CreateProjectProjectsResourceConfig$Outbound` instead. */
    type Outbound = CreateProjectProjectsResourceConfig$Outbound;
}
export declare function createProjectProjectsResourceConfigToJSON(createProjectProjectsResourceConfig: CreateProjectProjectsResourceConfig): string;
export declare function createProjectProjectsResourceConfigFromJSON(jsonString: string): SafeParseResult<CreateProjectProjectsResourceConfig, SDKValidationError>;
/** @internal */
export declare const CreateProjectRollbackDescription$inboundSchema: z.ZodType<CreateProjectRollbackDescription, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectRollbackDescription$Outbound = {
    userId: string;
    username: string;
    description: string;
    createdAt: number;
};
/** @internal */
export declare const CreateProjectRollbackDescription$outboundSchema: z.ZodType<CreateProjectRollbackDescription$Outbound, z.ZodTypeDef, CreateProjectRollbackDescription>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectRollbackDescription$ {
    /** @deprecated use `CreateProjectRollbackDescription$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectRollbackDescription, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectRollbackDescription$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectRollbackDescription$Outbound, z.ZodTypeDef, CreateProjectRollbackDescription>;
    /** @deprecated use `CreateProjectRollbackDescription$Outbound` instead. */
    type Outbound = CreateProjectRollbackDescription$Outbound;
}
export declare function createProjectRollbackDescriptionToJSON(createProjectRollbackDescription: CreateProjectRollbackDescription): string;
export declare function createProjectRollbackDescriptionFromJSON(jsonString: string): SafeParseResult<CreateProjectRollbackDescription, SDKValidationError>;
/** @internal */
export declare const CreateProjectStages$inboundSchema: z.ZodType<CreateProjectStages, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectStages$Outbound = {
    targetPercentage: number;
    requireApproval?: boolean | undefined;
    duration?: number | undefined;
};
/** @internal */
export declare const CreateProjectStages$outboundSchema: z.ZodType<CreateProjectStages$Outbound, z.ZodTypeDef, CreateProjectStages>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectStages$ {
    /** @deprecated use `CreateProjectStages$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectStages, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectStages$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectStages$Outbound, z.ZodTypeDef, CreateProjectStages>;
    /** @deprecated use `CreateProjectStages$Outbound` instead. */
    type Outbound = CreateProjectStages$Outbound;
}
export declare function createProjectStagesToJSON(createProjectStages: CreateProjectStages): string;
export declare function createProjectStagesFromJSON(jsonString: string): SafeParseResult<CreateProjectStages, SDKValidationError>;
/** @internal */
export declare const CreateProjectRollingRelease$inboundSchema: z.ZodType<CreateProjectRollingRelease, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectRollingRelease$Outbound = {
    target: string;
    stages?: Array<CreateProjectStages$Outbound> | null | undefined;
    canaryResponseHeader?: boolean | undefined;
};
/** @internal */
export declare const CreateProjectRollingRelease$outboundSchema: z.ZodType<CreateProjectRollingRelease$Outbound, z.ZodTypeDef, CreateProjectRollingRelease>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectRollingRelease$ {
    /** @deprecated use `CreateProjectRollingRelease$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectRollingRelease, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectRollingRelease$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectRollingRelease$Outbound, z.ZodTypeDef, CreateProjectRollingRelease>;
    /** @deprecated use `CreateProjectRollingRelease$Outbound` instead. */
    type Outbound = CreateProjectRollingRelease$Outbound;
}
export declare function createProjectRollingReleaseToJSON(createProjectRollingRelease: CreateProjectRollingRelease): string;
export declare function createProjectRollingReleaseFromJSON(jsonString: string): SafeParseResult<CreateProjectRollingRelease, SDKValidationError>;
/** @internal */
export declare const CreateProjectProjectsFunctionDefaultMemoryType$inboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsFunctionDefaultMemoryType>;
/** @internal */
export declare const CreateProjectProjectsFunctionDefaultMemoryType$outboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsFunctionDefaultMemoryType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectProjectsFunctionDefaultMemoryType$ {
    /** @deprecated use `CreateProjectProjectsFunctionDefaultMemoryType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly StandardLegacy: "standard_legacy";
        readonly Standard: "standard";
        readonly Performance: "performance";
    }>;
    /** @deprecated use `CreateProjectProjectsFunctionDefaultMemoryType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly StandardLegacy: "standard_legacy";
        readonly Standard: "standard";
        readonly Performance: "performance";
    }>;
}
/** @internal */
export declare const CreateProjectProjectsBuildMachineType$inboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsBuildMachineType>;
/** @internal */
export declare const CreateProjectProjectsBuildMachineType$outboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsBuildMachineType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectProjectsBuildMachineType$ {
    /** @deprecated use `CreateProjectProjectsBuildMachineType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Enhanced: "enhanced";
        readonly Turbo: "turbo";
    }>;
    /** @deprecated use `CreateProjectProjectsBuildMachineType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Enhanced: "enhanced";
        readonly Turbo: "turbo";
    }>;
}
/** @internal */
export declare const CreateProjectDefaultResourceConfig$inboundSchema: z.ZodType<CreateProjectDefaultResourceConfig, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectDefaultResourceConfig$Outbound = {
    elasticConcurrencyEnabled?: boolean | undefined;
    fluid?: boolean | undefined;
    functionDefaultRegions: Array<string>;
    functionDefaultTimeout?: number | undefined;
    functionDefaultMemoryType?: string | undefined;
    functionZeroConfigFailover?: boolean | undefined;
    buildMachineType?: string | undefined;
    isNSNBDisabled?: boolean | undefined;
};
/** @internal */
export declare const CreateProjectDefaultResourceConfig$outboundSchema: z.ZodType<CreateProjectDefaultResourceConfig$Outbound, z.ZodTypeDef, CreateProjectDefaultResourceConfig>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectDefaultResourceConfig$ {
    /** @deprecated use `CreateProjectDefaultResourceConfig$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectDefaultResourceConfig, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectDefaultResourceConfig$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectDefaultResourceConfig$Outbound, z.ZodTypeDef, CreateProjectDefaultResourceConfig>;
    /** @deprecated use `CreateProjectDefaultResourceConfig$Outbound` instead. */
    type Outbound = CreateProjectDefaultResourceConfig$Outbound;
}
export declare function createProjectDefaultResourceConfigToJSON(createProjectDefaultResourceConfig: CreateProjectDefaultResourceConfig): string;
export declare function createProjectDefaultResourceConfigFromJSON(jsonString: string): SafeParseResult<CreateProjectDefaultResourceConfig, SDKValidationError>;
/** @internal */
export declare const CreateProjectProjectsDeploymentType$inboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsDeploymentType>;
/** @internal */
export declare const CreateProjectProjectsDeploymentType$outboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsDeploymentType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectProjectsDeploymentType$ {
    /** @deprecated use `CreateProjectProjectsDeploymentType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Preview: "preview";
        readonly All: "all";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
    /** @deprecated use `CreateProjectProjectsDeploymentType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Preview: "preview";
        readonly All: "all";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
}
/** @internal */
export declare const CreateProjectProjectsSsoProtection$inboundSchema: z.ZodType<CreateProjectProjectsSsoProtection, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectProjectsSsoProtection$Outbound = {
    deploymentType: string;
};
/** @internal */
export declare const CreateProjectProjectsSsoProtection$outboundSchema: z.ZodType<CreateProjectProjectsSsoProtection$Outbound, z.ZodTypeDef, CreateProjectProjectsSsoProtection>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectProjectsSsoProtection$ {
    /** @deprecated use `CreateProjectProjectsSsoProtection$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectProjectsSsoProtection, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectProjectsSsoProtection$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectProjectsSsoProtection$Outbound, z.ZodTypeDef, CreateProjectProjectsSsoProtection>;
    /** @deprecated use `CreateProjectProjectsSsoProtection$Outbound` instead. */
    type Outbound = CreateProjectProjectsSsoProtection$Outbound;
}
export declare function createProjectProjectsSsoProtectionToJSON(createProjectProjectsSsoProtection: CreateProjectProjectsSsoProtection): string;
export declare function createProjectProjectsSsoProtectionFromJSON(jsonString: string): SafeParseResult<CreateProjectProjectsSsoProtection, SDKValidationError>;
/** @internal */
export declare const CreateProjectProjectsAliasAssigned$inboundSchema: z.ZodType<CreateProjectProjectsAliasAssigned, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectProjectsAliasAssigned$Outbound = number | boolean;
/** @internal */
export declare const CreateProjectProjectsAliasAssigned$outboundSchema: z.ZodType<CreateProjectProjectsAliasAssigned$Outbound, z.ZodTypeDef, CreateProjectProjectsAliasAssigned>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectProjectsAliasAssigned$ {
    /** @deprecated use `CreateProjectProjectsAliasAssigned$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectProjectsAliasAssigned, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectProjectsAliasAssigned$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectProjectsAliasAssigned$Outbound, z.ZodTypeDef, CreateProjectProjectsAliasAssigned>;
    /** @deprecated use `CreateProjectProjectsAliasAssigned$Outbound` instead. */
    type Outbound = CreateProjectProjectsAliasAssigned$Outbound;
}
export declare function createProjectProjectsAliasAssignedToJSON(createProjectProjectsAliasAssigned: CreateProjectProjectsAliasAssigned): string;
export declare function createProjectProjectsAliasAssignedFromJSON(jsonString: string): SafeParseResult<CreateProjectProjectsAliasAssigned, SDKValidationError>;
/** @internal */
export declare const CreateProjectProjectsAliasError$inboundSchema: z.ZodType<CreateProjectProjectsAliasError, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectProjectsAliasError$Outbound = {
    code: string;
    message: string;
};
/** @internal */
export declare const CreateProjectProjectsAliasError$outboundSchema: z.ZodType<CreateProjectProjectsAliasError$Outbound, z.ZodTypeDef, CreateProjectProjectsAliasError>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectProjectsAliasError$ {
    /** @deprecated use `CreateProjectProjectsAliasError$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectProjectsAliasError, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectProjectsAliasError$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectProjectsAliasError$Outbound, z.ZodTypeDef, CreateProjectProjectsAliasError>;
    /** @deprecated use `CreateProjectProjectsAliasError$Outbound` instead. */
    type Outbound = CreateProjectProjectsAliasError$Outbound;
}
export declare function createProjectProjectsAliasErrorToJSON(createProjectProjectsAliasError: CreateProjectProjectsAliasError): string;
export declare function createProjectProjectsAliasErrorFromJSON(jsonString: string): SafeParseResult<CreateProjectProjectsAliasError, SDKValidationError>;
/** @internal */
export declare const CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$inboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType>;
/** @internal */
export declare const CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$outboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$ {
    /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly EndsWith: "endsWith";
        readonly StartsWith: "startsWith";
        readonly Equals: "equals";
    }>;
    /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly EndsWith: "endsWith";
        readonly StartsWith: "startsWith";
        readonly Equals: "equals";
    }>;
}
/** @internal */
export declare const CreateProjectProjectsResponseBranchMatcher$inboundSchema: z.ZodType<CreateProjectProjectsResponseBranchMatcher, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectProjectsResponseBranchMatcher$Outbound = {
    type: string;
    pattern: string;
};
/** @internal */
export declare const CreateProjectProjectsResponseBranchMatcher$outboundSchema: z.ZodType<CreateProjectProjectsResponseBranchMatcher$Outbound, z.ZodTypeDef, CreateProjectProjectsResponseBranchMatcher>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectProjectsResponseBranchMatcher$ {
    /** @deprecated use `CreateProjectProjectsResponseBranchMatcher$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectProjectsResponseBranchMatcher, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectProjectsResponseBranchMatcher$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectProjectsResponseBranchMatcher$Outbound, z.ZodTypeDef, CreateProjectProjectsResponseBranchMatcher>;
    /** @deprecated use `CreateProjectProjectsResponseBranchMatcher$Outbound` instead. */
    type Outbound = CreateProjectProjectsResponseBranchMatcher$Outbound;
}
export declare function createProjectProjectsResponseBranchMatcherToJSON(createProjectProjectsResponseBranchMatcher: CreateProjectProjectsResponseBranchMatcher): string;
export declare function createProjectProjectsResponseBranchMatcherFromJSON(jsonString: string): SafeParseResult<CreateProjectProjectsResponseBranchMatcher, SDKValidationError>;
/** @internal */
export declare const CreateProjectProjectsBuilds$inboundSchema: z.ZodType<CreateProjectProjectsBuilds, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectProjectsBuilds$Outbound = {
    use: string;
    src?: string | undefined;
    dest?: string | undefined;
};
/** @internal */
export declare const CreateProjectProjectsBuilds$outboundSchema: z.ZodType<CreateProjectProjectsBuilds$Outbound, z.ZodTypeDef, CreateProjectProjectsBuilds>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectProjectsBuilds$ {
    /** @deprecated use `CreateProjectProjectsBuilds$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectProjectsBuilds, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectProjectsBuilds$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectProjectsBuilds$Outbound, z.ZodTypeDef, CreateProjectProjectsBuilds>;
    /** @deprecated use `CreateProjectProjectsBuilds$Outbound` instead. */
    type Outbound = CreateProjectProjectsBuilds$Outbound;
}
export declare function createProjectProjectsBuildsToJSON(createProjectProjectsBuilds: CreateProjectProjectsBuilds): string;
export declare function createProjectProjectsBuildsFromJSON(jsonString: string): SafeParseResult<CreateProjectProjectsBuilds, SDKValidationError>;
/** @internal */
export declare const CreateProjectProjectsChecksConclusion$inboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsChecksConclusion>;
/** @internal */
export declare const CreateProjectProjectsChecksConclusion$outboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsChecksConclusion>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectProjectsChecksConclusion$ {
    /** @deprecated use `CreateProjectProjectsChecksConclusion$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Succeeded: "succeeded";
        readonly Failed: "failed";
        readonly Skipped: "skipped";
        readonly Canceled: "canceled";
    }>;
    /** @deprecated use `CreateProjectProjectsChecksConclusion$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Succeeded: "succeeded";
        readonly Failed: "failed";
        readonly Skipped: "skipped";
        readonly Canceled: "canceled";
    }>;
}
/** @internal */
export declare const CreateProjectProjectsChecksState$inboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsChecksState>;
/** @internal */
export declare const CreateProjectProjectsChecksState$outboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsChecksState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectProjectsChecksState$ {
    /** @deprecated use `CreateProjectProjectsChecksState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Registered: "registered";
        readonly Running: "running";
        readonly Completed: "completed";
    }>;
    /** @deprecated use `CreateProjectProjectsChecksState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Registered: "registered";
        readonly Running: "running";
        readonly Completed: "completed";
    }>;
}
/** @internal */
export declare const CreateProjectProjectsCreator$inboundSchema: z.ZodType<CreateProjectProjectsCreator, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectProjectsCreator$Outbound = {
    email: string;
    githubLogin?: string | undefined;
    gitlabLogin?: string | undefined;
    uid: string;
    username: string;
};
/** @internal */
export declare const CreateProjectProjectsCreator$outboundSchema: z.ZodType<CreateProjectProjectsCreator$Outbound, z.ZodTypeDef, CreateProjectProjectsCreator>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectProjectsCreator$ {
    /** @deprecated use `CreateProjectProjectsCreator$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectProjectsCreator, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectProjectsCreator$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectProjectsCreator$Outbound, z.ZodTypeDef, CreateProjectProjectsCreator>;
    /** @deprecated use `CreateProjectProjectsCreator$Outbound` instead. */
    type Outbound = CreateProjectProjectsCreator$Outbound;
}
export declare function createProjectProjectsCreatorToJSON(createProjectProjectsCreator: CreateProjectProjectsCreator): string;
export declare function createProjectProjectsCreatorFromJSON(jsonString: string): SafeParseResult<CreateProjectProjectsCreator, SDKValidationError>;
/** @internal */
export declare const CreateProjectProjectsOidcTokenClaims$inboundSchema: z.ZodType<CreateProjectProjectsOidcTokenClaims, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectProjectsOidcTokenClaims$Outbound = {
    iss: string;
    sub: string;
    scope: string;
    aud: string;
    owner: string;
    owner_id: string;
    project: string;
    project_id: string;
    environment: string;
};
/** @internal */
export declare const CreateProjectProjectsOidcTokenClaims$outboundSchema: z.ZodType<CreateProjectProjectsOidcTokenClaims$Outbound, z.ZodTypeDef, CreateProjectProjectsOidcTokenClaims>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectProjectsOidcTokenClaims$ {
    /** @deprecated use `CreateProjectProjectsOidcTokenClaims$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectProjectsOidcTokenClaims, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectProjectsOidcTokenClaims$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectProjectsOidcTokenClaims$Outbound, z.ZodTypeDef, CreateProjectProjectsOidcTokenClaims>;
    /** @deprecated use `CreateProjectProjectsOidcTokenClaims$Outbound` instead. */
    type Outbound = CreateProjectProjectsOidcTokenClaims$Outbound;
}
export declare function createProjectProjectsOidcTokenClaimsToJSON(createProjectProjectsOidcTokenClaims: CreateProjectProjectsOidcTokenClaims): string;
export declare function createProjectProjectsOidcTokenClaimsFromJSON(jsonString: string): SafeParseResult<CreateProjectProjectsOidcTokenClaims, SDKValidationError>;
/** @internal */
export declare const CreateProjectProjectsPlan$inboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsPlan>;
/** @internal */
export declare const CreateProjectProjectsPlan$outboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsPlan>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectProjectsPlan$ {
    /** @deprecated use `CreateProjectProjectsPlan$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Pro: "pro";
        readonly Enterprise: "enterprise";
        readonly Hobby: "hobby";
    }>;
    /** @deprecated use `CreateProjectProjectsPlan$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Pro: "pro";
        readonly Enterprise: "enterprise";
        readonly Hobby: "hobby";
    }>;
}
/** @internal */
export declare const CreateProjectProjectsReadyState$inboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsReadyState>;
/** @internal */
export declare const CreateProjectProjectsReadyState$outboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsReadyState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectProjectsReadyState$ {
    /** @deprecated use `CreateProjectProjectsReadyState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Queued: "QUEUED";
        readonly Ready: "READY";
        readonly Canceled: "CANCELED";
    }>;
    /** @deprecated use `CreateProjectProjectsReadyState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Queued: "QUEUED";
        readonly Ready: "READY";
        readonly Canceled: "CANCELED";
    }>;
}
/** @internal */
export declare const CreateProjectProjectsReadySubstate$inboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsReadySubstate>;
/** @internal */
export declare const CreateProjectProjectsReadySubstate$outboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsReadySubstate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectProjectsReadySubstate$ {
    /** @deprecated use `CreateProjectProjectsReadySubstate$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Staged: "STAGED";
        readonly Rolling: "ROLLING";
        readonly Promoted: "PROMOTED";
    }>;
    /** @deprecated use `CreateProjectProjectsReadySubstate$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Staged: "STAGED";
        readonly Rolling: "ROLLING";
        readonly Promoted: "PROMOTED";
    }>;
}
/** @internal */
export declare const CreateProjectProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyType>;
/** @internal */
export declare const CreateProjectProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectProjectsResponse200ApplicationJSONResponseBodyType$ {
    /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Lambdas: "LAMBDAS";
    }>;
    /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Lambdas: "LAMBDAS";
    }>;
}
/** @internal */
export declare const CreateProjectTargets$inboundSchema: z.ZodType<CreateProjectTargets, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectTargets$Outbound = {
    id: string;
    alias?: Array<string> | undefined;
    aliasAssigned?: number | boolean | null | undefined;
    aliasError?: CreateProjectProjectsAliasError$Outbound | null | undefined;
    aliasFinal?: string | null | undefined;
    automaticAliases?: Array<string> | undefined;
    branchMatcher?: CreateProjectProjectsResponseBranchMatcher$Outbound | undefined;
    buildingAt?: number | undefined;
    builds?: Array<CreateProjectProjectsBuilds$Outbound> | undefined;
    checksConclusion?: string | undefined;
    checksState?: string | undefined;
    connectBuildsEnabled?: boolean | undefined;
    connectConfigurationId?: string | undefined;
    createdAt: number;
    createdIn: string;
    creator: CreateProjectProjectsCreator$Outbound | null;
    deletedAt?: number | undefined;
    deploymentHostname: string;
    forced?: boolean | undefined;
    name: string;
    meta?: {
        [k: string]: string;
    } | undefined;
    monorepoManager?: string | null | undefined;
    oidcTokenClaims?: CreateProjectProjectsOidcTokenClaims$Outbound | undefined;
    plan: string;
    previewCommentsEnabled?: boolean | undefined;
    private: boolean;
    readyAt?: number | undefined;
    readyState: string;
    readySubstate?: string | undefined;
    requestedAt?: number | undefined;
    target?: string | null | undefined;
    teamId?: string | null | undefined;
    type: string;
    url: string;
    userId: string;
    withCache?: boolean | undefined;
};
/** @internal */
export declare const CreateProjectTargets$outboundSchema: z.ZodType<CreateProjectTargets$Outbound, z.ZodTypeDef, CreateProjectTargets>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectTargets$ {
    /** @deprecated use `CreateProjectTargets$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectTargets, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectTargets$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectTargets$Outbound, z.ZodTypeDef, CreateProjectTargets>;
    /** @deprecated use `CreateProjectTargets$Outbound` instead. */
    type Outbound = CreateProjectTargets$Outbound;
}
export declare function createProjectTargetsToJSON(createProjectTargets: CreateProjectTargets): string;
export declare function createProjectTargetsFromJSON(jsonString: string): SafeParseResult<CreateProjectTargets, SDKValidationError>;
/** @internal */
export declare const CreateProjectPermissions$inboundSchema: z.ZodType<CreateProjectPermissions, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectPermissions$Outbound = {
    aliasProject?: Array<string> | undefined;
    aliasProtectionBypass?: Array<string> | undefined;
    buildMachine?: Array<string> | undefined;
    productionAliasProtectionBypass?: Array<string> | undefined;
    connectConfigurationLink?: Array<string> | undefined;
    dataCacheNamespace?: Array<string> | undefined;
    deployment?: Array<string> | undefined;
    deploymentBuildLogs?: Array<string> | undefined;
    deploymentCheck?: Array<string> | undefined;
    deploymentCheckPreview?: Array<string> | undefined;
    deploymentCheckReRunFromProductionBranch?: Array<string> | undefined;
    deploymentProductionGit?: Array<string> | undefined;
    deploymentV0?: Array<string> | undefined;
    deploymentPreview?: Array<string> | undefined;
    deploymentPrivate?: Array<string> | undefined;
    deploymentPromote?: Array<string> | undefined;
    deploymentRollback?: Array<string> | undefined;
    edgeCacheNamespace?: Array<string> | undefined;
    environments?: Array<string> | undefined;
    logs?: Array<string> | undefined;
    logsPreset?: Array<string> | undefined;
    passwordProtection?: Array<string> | undefined;
    optionsAllowlist?: Array<string> | undefined;
    job?: Array<string> | undefined;
    observabilityData?: Array<string> | undefined;
    onDemandBuild?: Array<string> | undefined;
    onDemandConcurrency?: Array<string> | undefined;
    project?: Array<string> | undefined;
    projectFromV0?: Array<string> | undefined;
    projectAccessGroup?: Array<string> | undefined;
    projectAnalyticsSampling?: Array<string> | undefined;
    projectCheck?: Array<string> | undefined;
    projectCheckRun?: Array<string> | undefined;
    projectDeploymentHook?: Array<string> | undefined;
    projectDomain?: Array<string> | undefined;
    projectDomainMove?: Array<string> | undefined;
    projectDomainCheckConfig?: Array<string> | undefined;
    projectEnvVars?: Array<string> | undefined;
    projectEnvVarsProduction?: Array<string> | undefined;
    projectEnvVarsUnownedByIntegration?: Array<string> | undefined;
    projectFlags?: Array<string> | undefined;
    projectId?: Array<string> | undefined;
    projectIntegrationConfiguration?: Array<string> | undefined;
    projectLink?: Array<string> | undefined;
    projectMember?: Array<string> | undefined;
    projectMonitoring?: Array<string> | undefined;
    projectPermissions?: Array<string> | undefined;
    projectProductionBranch?: Array<string> | undefined;
    projectTransfer?: Array<string> | undefined;
    projectTransferOut?: Array<string> | undefined;
    projectProtectionBypass?: Array<string> | undefined;
    projectUsage?: Array<string> | undefined;
    projectAnalyticsUsage?: Array<string> | undefined;
    projectSupportCase?: Array<string> | undefined;
    projectSupportCaseComment?: Array<string> | undefined;
    projectDeploymentExpiration?: Array<string> | undefined;
    projectRollingRelease?: Array<string> | undefined;
    projectTier?: Array<string> | undefined;
    projectOIDCToken?: Array<string> | undefined;
    seawallConfig?: Array<string> | undefined;
    skewProtection?: Array<string> | undefined;
    analytics?: Array<string> | undefined;
    trustedIps?: Array<string> | undefined;
    v0Chat?: Array<string> | undefined;
    webAnalytics?: Array<string> | undefined;
    sharedEnvVarConnection?: Array<string> | undefined;
    sonar?: Array<string> | undefined;
    oauth2Connection?: Array<string> | undefined;
    user?: Array<string> | undefined;
    userConnection?: Array<string> | undefined;
    userSudo?: Array<string> | undefined;
    webAuthn?: Array<string> | undefined;
    accessGroup?: Array<string> | undefined;
    aliasGlobal?: Array<string> | undefined;
    analyticsSampling?: Array<string> | undefined;
    analyticsUsage?: Array<string> | undefined;
    auditLog?: Array<string> | undefined;
    billingAddress?: Array<string> | undefined;
    billingInformation?: Array<string> | undefined;
    billingInvoice?: Array<string> | undefined;
    billingInvoiceEmailRecipient?: Array<string> | undefined;
    billingInvoiceLanguage?: Array<string> | undefined;
    billingPlan?: Array<string> | undefined;
    billingPurchaseOrder?: Array<string> | undefined;
    billingRefund?: Array<string> | undefined;
    billingTaxId?: Array<string> | undefined;
    blob?: Array<string> | undefined;
    budget?: Array<string> | undefined;
    cacheArtifact?: Array<string> | undefined;
    cacheArtifactUsageEvent?: Array<string> | undefined;
    codeChecks?: Array<string> | undefined;
    concurrentBuilds?: Array<string> | undefined;
    connect?: Array<string> | undefined;
    connectConfiguration?: Array<string> | undefined;
    defaultDeploymentProtection?: Array<string> | undefined;
    domain?: Array<string> | undefined;
    domainAcceptDelegation?: Array<string> | undefined;
    domainAuthCodes?: Array<string> | undefined;
    domainCertificate?: Array<string> | undefined;
    domainCheckConfig?: Array<string> | undefined;
    domainMove?: Array<string> | undefined;
    domainPurchase?: Array<string> | undefined;
    domainRecord?: Array<string> | undefined;
    domainTransferIn?: Array<string> | undefined;
    event?: Array<string> | undefined;
    ownEvent?: Array<string> | undefined;
    sensitiveEnvironmentVariablePolicy?: Array<string> | undefined;
    fileUpload?: Array<string> | undefined;
    flagsExplorerSubscription?: Array<string> | undefined;
    gitRepository?: Array<string> | undefined;
    ipBlocking?: Array<string> | undefined;
    imageOptimizationNewPrice?: Array<string> | undefined;
    integration?: Array<string> | undefined;
    integrationAccount?: Array<string> | undefined;
    integrationConfiguration?: Array<string> | undefined;
    integrationConfigurationTransfer?: Array<string> | undefined;
    integrationConfigurationProjects?: Array<string> | undefined;
    integrationVercelConfigurationOverride?: Array<string> | undefined;
    integrationConfigurationRole?: Array<string> | undefined;
    integrationSSOSession?: Array<string> | undefined;
    integrationResource?: Array<string> | undefined;
    integrationEvent?: Array<string> | undefined;
    integrationResourceSecrets?: Array<string> | undefined;
    integrationDeploymentAction?: Array<string> | undefined;
    marketplaceInstallationMember?: Array<string> | undefined;
    marketplaceBillingData?: Array<string> | undefined;
    marketplaceInvoice?: Array<string> | undefined;
    marketplaceSettings?: Array<string> | undefined;
    marketplaceExperimentationItem?: Array<string> | undefined;
    marketplaceExperimentationEdgeConfigData?: Array<string> | undefined;
    jobGlobal?: Array<string> | undefined;
    drain?: Array<string> | undefined;
    logDrain?: Array<string> | undefined;
    traceDrain?: Array<string> | undefined;
    Monitoring?: Array<string> | undefined;
    monitoringSettings?: Array<string> | undefined;
    monitoringQuery?: Array<string> | undefined;
    monitoringChart?: Array<string> | undefined;
    monitoringAlert?: Array<string> | undefined;
    notificationDeploymentFailed?: Array<string> | undefined;
    notificationDomainConfiguration?: Array<string> | undefined;
    notificationDomainExpire?: Array<string> | undefined;
    notificationDomainMoved?: Array<string> | undefined;
    notificationDomainPurchase?: Array<string> | undefined;
    notificationDomainRenewal?: Array<string> | undefined;
    notificationDomainTransfer?: Array<string> | undefined;
    notificationDomainUnverified?: Array<string> | undefined;
    NotificationMonitoringAlert?: Array<string> | undefined;
    notificationPaymentFailed?: Array<string> | undefined;
    notificationUsageAlert?: Array<string> | undefined;
    notificationPreferences?: Array<string> | undefined;
    notificationCustomerBudget?: Array<string> | undefined;
    notificationStatementOfReasons?: Array<string> | undefined;
    observabilityConfiguration?: Array<string> | undefined;
    alerts?: Array<string> | undefined;
    observabilityNotebook?: Array<string> | undefined;
    observabilityFunnel?: Array<string> | undefined;
    openTelemetryEndpoint?: Array<string> | undefined;
    vercelAppInstallation?: Array<string> | undefined;
    vercelAppInstallationRequest?: Array<string> | undefined;
    paymentMethod?: Array<string> | undefined;
    permissions?: Array<string> | undefined;
    postgres?: Array<string> | undefined;
    previewDeploymentSuffix?: Array<string> | undefined;
    proTrialOnboarding?: Array<string> | undefined;
    sharedEnvVars?: Array<string> | undefined;
    sharedEnvVarsProduction?: Array<string> | undefined;
    space?: Array<string> | undefined;
    spaceRun?: Array<string> | undefined;
    passwordProtectionInvoiceItem?: Array<string> | undefined;
    rateLimit?: Array<string> | undefined;
    redis?: Array<string> | undefined;
    repository?: Array<string> | undefined;
    remoteCaching?: Array<string> | undefined;
    samlConfig?: Array<string> | undefined;
    secret?: Array<string> | undefined;
    redisStoreTokenSet?: Array<string> | undefined;
    blobStoreTokenSet?: Array<string> | undefined;
    postgresStoreTokenSet?: Array<string> | undefined;
    integrationStoreTokenSet?: Array<string> | undefined;
    integrationResourceReplCommand?: Array<string> | undefined;
    storeTransfer?: Array<string> | undefined;
    supportCase?: Array<string> | undefined;
    supportCaseComment?: Array<string> | undefined;
    dataCacheBillingSettings?: Array<string> | undefined;
    team?: Array<string> | undefined;
    teamAccessRequest?: Array<string> | undefined;
    teamFellowMembership?: Array<string> | undefined;
    teamGitExclusivity?: Array<string> | undefined;
    teamInvite?: Array<string> | undefined;
    teamInviteCode?: Array<string> | undefined;
    teamJoin?: Array<string> | undefined;
    teamMemberMfaStatus?: Array<string> | undefined;
    teamMicrofrontends?: Array<string> | undefined;
    teamOwnMembership?: Array<string> | undefined;
    teamOwnMembershipDisconnectSAML?: Array<string> | undefined;
    token?: Array<string> | undefined;
    usage?: Array<string> | undefined;
    usageCycle?: Array<string> | undefined;
    vpcPeeringConnection?: Array<string> | undefined;
    webAnalyticsPlan?: Array<string> | undefined;
    edgeConfig?: Array<string> | undefined;
    edgeConfigItem?: Array<string> | undefined;
    edgeConfigSchema?: Array<string> | undefined;
    edgeConfigToken?: Array<string> | undefined;
    webhook?: Array<string> | undefined;
    "webhook-event"?: Array<string> | undefined;
    endpointVerification?: Array<string> | undefined;
    projectTransferIn?: Array<string> | undefined;
    oauth2Application?: Array<string> | undefined;
    vercelRun?: Array<string> | undefined;
    vercelRunExec?: Array<string> | undefined;
    apiKey?: Array<string> | undefined;
    apiKeyOwnedBySelf?: Array<string> | undefined;
};
/** @internal */
export declare const CreateProjectPermissions$outboundSchema: z.ZodType<CreateProjectPermissions$Outbound, z.ZodTypeDef, CreateProjectPermissions>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectPermissions$ {
    /** @deprecated use `CreateProjectPermissions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectPermissions, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectPermissions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectPermissions$Outbound, z.ZodTypeDef, CreateProjectPermissions>;
    /** @deprecated use `CreateProjectPermissions$Outbound` instead. */
    type Outbound = CreateProjectPermissions$Outbound;
}
export declare function createProjectPermissionsToJSON(createProjectPermissions: CreateProjectPermissions): string;
export declare function createProjectPermissionsFromJSON(jsonString: string): SafeParseResult<CreateProjectPermissions, SDKValidationError>;
/** @internal */
export declare const CreateProjectLastRollbackTarget$inboundSchema: z.ZodType<CreateProjectLastRollbackTarget, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectLastRollbackTarget$Outbound = {};
/** @internal */
export declare const CreateProjectLastRollbackTarget$outboundSchema: z.ZodType<CreateProjectLastRollbackTarget$Outbound, z.ZodTypeDef, CreateProjectLastRollbackTarget>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectLastRollbackTarget$ {
    /** @deprecated use `CreateProjectLastRollbackTarget$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectLastRollbackTarget, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectLastRollbackTarget$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectLastRollbackTarget$Outbound, z.ZodTypeDef, CreateProjectLastRollbackTarget>;
    /** @deprecated use `CreateProjectLastRollbackTarget$Outbound` instead. */
    type Outbound = CreateProjectLastRollbackTarget$Outbound;
}
export declare function createProjectLastRollbackTargetToJSON(createProjectLastRollbackTarget: CreateProjectLastRollbackTarget): string;
export declare function createProjectLastRollbackTargetFromJSON(jsonString: string): SafeParseResult<CreateProjectLastRollbackTarget, SDKValidationError>;
/** @internal */
export declare const CreateProjectJobStatus$inboundSchema: z.ZodNativeEnum<typeof CreateProjectJobStatus>;
/** @internal */
export declare const CreateProjectJobStatus$outboundSchema: z.ZodNativeEnum<typeof CreateProjectJobStatus>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectJobStatus$ {
    /** @deprecated use `CreateProjectJobStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Succeeded: "succeeded";
        readonly Failed: "failed";
        readonly Skipped: "skipped";
        readonly Pending: "pending";
        readonly InProgress: "in-progress";
    }>;
    /** @deprecated use `CreateProjectJobStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Succeeded: "succeeded";
        readonly Failed: "failed";
        readonly Skipped: "skipped";
        readonly Pending: "pending";
        readonly InProgress: "in-progress";
    }>;
}
/** @internal */
export declare const CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType$inboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType>;
/** @internal */
export declare const CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType$outboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType$ {
    /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Promote: "promote";
        readonly Rollback: "rollback";
    }>;
    /** @deprecated use `CreateProjectProjectsResponse200ApplicationJSONResponseBodyLastAliasRequestType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Promote: "promote";
        readonly Rollback: "rollback";
    }>;
}
/** @internal */
export declare const CreateProjectLastAliasRequest$inboundSchema: z.ZodType<CreateProjectLastAliasRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectLastAliasRequest$Outbound = {
    fromDeploymentId: string;
    toDeploymentId: string;
    fromRollingReleaseId?: string | undefined;
    jobStatus: string;
    requestedAt: number;
    type: string;
};
/** @internal */
export declare const CreateProjectLastAliasRequest$outboundSchema: z.ZodType<CreateProjectLastAliasRequest$Outbound, z.ZodTypeDef, CreateProjectLastAliasRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectLastAliasRequest$ {
    /** @deprecated use `CreateProjectLastAliasRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectLastAliasRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectLastAliasRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectLastAliasRequest$Outbound, z.ZodTypeDef, CreateProjectLastAliasRequest>;
    /** @deprecated use `CreateProjectLastAliasRequest$Outbound` instead. */
    type Outbound = CreateProjectLastAliasRequest$Outbound;
}
export declare function createProjectLastAliasRequestToJSON(createProjectLastAliasRequest: CreateProjectLastAliasRequest): string;
export declare function createProjectLastAliasRequestFromJSON(jsonString: string): SafeParseResult<CreateProjectLastAliasRequest, SDKValidationError>;
/** @internal */
export declare const CreateProjectProtectionBypassProjectsScope$inboundSchema: z.ZodNativeEnum<typeof CreateProjectProtectionBypassProjectsScope>;
/** @internal */
export declare const CreateProjectProtectionBypassProjectsScope$outboundSchema: z.ZodNativeEnum<typeof CreateProjectProtectionBypassProjectsScope>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectProtectionBypassProjectsScope$ {
    /** @deprecated use `CreateProjectProtectionBypassProjectsScope$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly AutomationBypass: "automation-bypass";
    }>;
    /** @deprecated use `CreateProjectProtectionBypassProjectsScope$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly AutomationBypass: "automation-bypass";
    }>;
}
/** @internal */
export declare const CreateProjectProtectionBypass2$inboundSchema: z.ZodType<CreateProjectProtectionBypass2, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectProtectionBypass2$Outbound = {
    createdAt: number;
    createdBy: string;
    scope: string;
};
/** @internal */
export declare const CreateProjectProtectionBypass2$outboundSchema: z.ZodType<CreateProjectProtectionBypass2$Outbound, z.ZodTypeDef, CreateProjectProtectionBypass2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectProtectionBypass2$ {
    /** @deprecated use `CreateProjectProtectionBypass2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectProtectionBypass2, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectProtectionBypass2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectProtectionBypass2$Outbound, z.ZodTypeDef, CreateProjectProtectionBypass2>;
    /** @deprecated use `CreateProjectProtectionBypass2$Outbound` instead. */
    type Outbound = CreateProjectProtectionBypass2$Outbound;
}
export declare function createProjectProtectionBypass2ToJSON(createProjectProtectionBypass2: CreateProjectProtectionBypass2): string;
export declare function createProjectProtectionBypass2FromJSON(jsonString: string): SafeParseResult<CreateProjectProtectionBypass2, SDKValidationError>;
/** @internal */
export declare const CreateProjectProtectionBypassScope$inboundSchema: z.ZodNativeEnum<typeof CreateProjectProtectionBypassScope>;
/** @internal */
export declare const CreateProjectProtectionBypassScope$outboundSchema: z.ZodNativeEnum<typeof CreateProjectProtectionBypassScope>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectProtectionBypassScope$ {
    /** @deprecated use `CreateProjectProtectionBypassScope$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly IntegrationAutomationBypass: "integration-automation-bypass";
    }>;
    /** @deprecated use `CreateProjectProtectionBypassScope$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly IntegrationAutomationBypass: "integration-automation-bypass";
    }>;
}
/** @internal */
export declare const CreateProjectProtectionBypass1$inboundSchema: z.ZodType<CreateProjectProtectionBypass1, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectProtectionBypass1$Outbound = {
    createdAt: number;
    createdBy: string;
    scope: string;
    integrationId: string;
    configurationId: string;
};
/** @internal */
export declare const CreateProjectProtectionBypass1$outboundSchema: z.ZodType<CreateProjectProtectionBypass1$Outbound, z.ZodTypeDef, CreateProjectProtectionBypass1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectProtectionBypass1$ {
    /** @deprecated use `CreateProjectProtectionBypass1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectProtectionBypass1, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectProtectionBypass1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectProtectionBypass1$Outbound, z.ZodTypeDef, CreateProjectProtectionBypass1>;
    /** @deprecated use `CreateProjectProtectionBypass1$Outbound` instead. */
    type Outbound = CreateProjectProtectionBypass1$Outbound;
}
export declare function createProjectProtectionBypass1ToJSON(createProjectProtectionBypass1: CreateProjectProtectionBypass1): string;
export declare function createProjectProtectionBypass1FromJSON(jsonString: string): SafeParseResult<CreateProjectProtectionBypass1, SDKValidationError>;
/** @internal */
export declare const CreateProjectProtectionBypass$inboundSchema: z.ZodType<CreateProjectProtectionBypass, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectProtectionBypass$Outbound = CreateProjectProtectionBypass1$Outbound | CreateProjectProtectionBypass2$Outbound;
/** @internal */
export declare const CreateProjectProtectionBypass$outboundSchema: z.ZodType<CreateProjectProtectionBypass$Outbound, z.ZodTypeDef, CreateProjectProtectionBypass>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectProtectionBypass$ {
    /** @deprecated use `CreateProjectProtectionBypass$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectProtectionBypass, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectProtectionBypass$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectProtectionBypass$Outbound, z.ZodTypeDef, CreateProjectProtectionBypass>;
    /** @deprecated use `CreateProjectProtectionBypass$Outbound` instead. */
    type Outbound = CreateProjectProtectionBypass$Outbound;
}
export declare function createProjectProtectionBypassToJSON(createProjectProtectionBypass: CreateProjectProtectionBypass): string;
export declare function createProjectProtectionBypassFromJSON(jsonString: string): SafeParseResult<CreateProjectProtectionBypass, SDKValidationError>;
/** @internal */
export declare const CreateProjectTrustedIpsProjectsDeploymentType$inboundSchema: z.ZodNativeEnum<typeof CreateProjectTrustedIpsProjectsDeploymentType>;
/** @internal */
export declare const CreateProjectTrustedIpsProjectsDeploymentType$outboundSchema: z.ZodNativeEnum<typeof CreateProjectTrustedIpsProjectsDeploymentType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectTrustedIpsProjectsDeploymentType$ {
    /** @deprecated use `CreateProjectTrustedIpsProjectsDeploymentType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Preview: "preview";
        readonly Production: "production";
        readonly All: "all";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
    /** @deprecated use `CreateProjectTrustedIpsProjectsDeploymentType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Preview: "preview";
        readonly Production: "production";
        readonly All: "all";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
}
/** @internal */
export declare const CreateProjectTrustedIps2$inboundSchema: z.ZodType<CreateProjectTrustedIps2, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectTrustedIps2$Outbound = {
    deploymentType: string;
};
/** @internal */
export declare const CreateProjectTrustedIps2$outboundSchema: z.ZodType<CreateProjectTrustedIps2$Outbound, z.ZodTypeDef, CreateProjectTrustedIps2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectTrustedIps2$ {
    /** @deprecated use `CreateProjectTrustedIps2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectTrustedIps2, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectTrustedIps2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectTrustedIps2$Outbound, z.ZodTypeDef, CreateProjectTrustedIps2>;
    /** @deprecated use `CreateProjectTrustedIps2$Outbound` instead. */
    type Outbound = CreateProjectTrustedIps2$Outbound;
}
export declare function createProjectTrustedIps2ToJSON(createProjectTrustedIps2: CreateProjectTrustedIps2): string;
export declare function createProjectTrustedIps2FromJSON(jsonString: string): SafeParseResult<CreateProjectTrustedIps2, SDKValidationError>;
/** @internal */
export declare const CreateProjectTrustedIpsDeploymentType$inboundSchema: z.ZodNativeEnum<typeof CreateProjectTrustedIpsDeploymentType>;
/** @internal */
export declare const CreateProjectTrustedIpsDeploymentType$outboundSchema: z.ZodNativeEnum<typeof CreateProjectTrustedIpsDeploymentType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectTrustedIpsDeploymentType$ {
    /** @deprecated use `CreateProjectTrustedIpsDeploymentType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Preview: "preview";
        readonly Production: "production";
        readonly All: "all";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
    /** @deprecated use `CreateProjectTrustedIpsDeploymentType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Preview: "preview";
        readonly Production: "production";
        readonly All: "all";
        readonly ProdDeploymentUrlsAndAllPreviews: "prod_deployment_urls_and_all_previews";
        readonly AllExceptCustomDomains: "all_except_custom_domains";
    }>;
}
/** @internal */
export declare const TrustedIpsAddresses$inboundSchema: z.ZodType<TrustedIpsAddresses, z.ZodTypeDef, unknown>;
/** @internal */
export type TrustedIpsAddresses$Outbound = {
    value: string;
    note?: string | undefined;
};
/** @internal */
export declare const TrustedIpsAddresses$outboundSchema: z.ZodType<TrustedIpsAddresses$Outbound, z.ZodTypeDef, TrustedIpsAddresses>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TrustedIpsAddresses$ {
    /** @deprecated use `TrustedIpsAddresses$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TrustedIpsAddresses, z.ZodTypeDef, unknown>;
    /** @deprecated use `TrustedIpsAddresses$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TrustedIpsAddresses$Outbound, z.ZodTypeDef, TrustedIpsAddresses>;
    /** @deprecated use `TrustedIpsAddresses$Outbound` instead. */
    type Outbound = TrustedIpsAddresses$Outbound;
}
export declare function trustedIpsAddressesToJSON(trustedIpsAddresses: TrustedIpsAddresses): string;
export declare function trustedIpsAddressesFromJSON(jsonString: string): SafeParseResult<TrustedIpsAddresses, SDKValidationError>;
/** @internal */
export declare const TrustedIpsProtectionMode$inboundSchema: z.ZodNativeEnum<typeof TrustedIpsProtectionMode>;
/** @internal */
export declare const TrustedIpsProtectionMode$outboundSchema: z.ZodNativeEnum<typeof TrustedIpsProtectionMode>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TrustedIpsProtectionMode$ {
    /** @deprecated use `TrustedIpsProtectionMode$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Additional: "additional";
        readonly Exclusive: "exclusive";
    }>;
    /** @deprecated use `TrustedIpsProtectionMode$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Additional: "additional";
        readonly Exclusive: "exclusive";
    }>;
}
/** @internal */
export declare const CreateProjectTrustedIps1$inboundSchema: z.ZodType<CreateProjectTrustedIps1, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectTrustedIps1$Outbound = {
    deploymentType: string;
    addresses: Array<TrustedIpsAddresses$Outbound>;
    protectionMode: string;
};
/** @internal */
export declare const CreateProjectTrustedIps1$outboundSchema: z.ZodType<CreateProjectTrustedIps1$Outbound, z.ZodTypeDef, CreateProjectTrustedIps1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectTrustedIps1$ {
    /** @deprecated use `CreateProjectTrustedIps1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectTrustedIps1, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectTrustedIps1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectTrustedIps1$Outbound, z.ZodTypeDef, CreateProjectTrustedIps1>;
    /** @deprecated use `CreateProjectTrustedIps1$Outbound` instead. */
    type Outbound = CreateProjectTrustedIps1$Outbound;
}
export declare function createProjectTrustedIps1ToJSON(createProjectTrustedIps1: CreateProjectTrustedIps1): string;
export declare function createProjectTrustedIps1FromJSON(jsonString: string): SafeParseResult<CreateProjectTrustedIps1, SDKValidationError>;
/** @internal */
export declare const CreateProjectTrustedIps$inboundSchema: z.ZodType<CreateProjectTrustedIps, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectTrustedIps$Outbound = CreateProjectTrustedIps1$Outbound | CreateProjectTrustedIps2$Outbound;
/** @internal */
export declare const CreateProjectTrustedIps$outboundSchema: z.ZodType<CreateProjectTrustedIps$Outbound, z.ZodTypeDef, CreateProjectTrustedIps>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectTrustedIps$ {
    /** @deprecated use `CreateProjectTrustedIps$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectTrustedIps, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectTrustedIps$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectTrustedIps$Outbound, z.ZodTypeDef, CreateProjectTrustedIps>;
    /** @deprecated use `CreateProjectTrustedIps$Outbound` instead. */
    type Outbound = CreateProjectTrustedIps$Outbound;
}
export declare function createProjectTrustedIpsToJSON(createProjectTrustedIps: CreateProjectTrustedIps): string;
export declare function createProjectTrustedIpsFromJSON(jsonString: string): SafeParseResult<CreateProjectTrustedIps, SDKValidationError>;
/** @internal */
export declare const CreateProjectGitComments$inboundSchema: z.ZodType<CreateProjectGitComments, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectGitComments$Outbound = {
    onPullRequest: boolean;
    onCommit: boolean;
};
/** @internal */
export declare const CreateProjectGitComments$outboundSchema: z.ZodType<CreateProjectGitComments$Outbound, z.ZodTypeDef, CreateProjectGitComments>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectGitComments$ {
    /** @deprecated use `CreateProjectGitComments$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectGitComments, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectGitComments$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectGitComments$Outbound, z.ZodTypeDef, CreateProjectGitComments>;
    /** @deprecated use `CreateProjectGitComments$Outbound` instead. */
    type Outbound = CreateProjectGitComments$Outbound;
}
export declare function createProjectGitCommentsToJSON(createProjectGitComments: CreateProjectGitComments): string;
export declare function createProjectGitCommentsFromJSON(jsonString: string): SafeParseResult<CreateProjectGitComments, SDKValidationError>;
/** @internal */
export declare const CreateProjectCreateDeployments$inboundSchema: z.ZodNativeEnum<typeof CreateProjectCreateDeployments>;
/** @internal */
export declare const CreateProjectCreateDeployments$outboundSchema: z.ZodNativeEnum<typeof CreateProjectCreateDeployments>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectCreateDeployments$ {
    /** @deprecated use `CreateProjectCreateDeployments$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Enabled: "enabled";
        readonly Disabled: "disabled";
    }>;
    /** @deprecated use `CreateProjectCreateDeployments$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Enabled: "enabled";
        readonly Disabled: "disabled";
    }>;
}
/** @internal */
export declare const CreateProjectGitProviderOptions$inboundSchema: z.ZodType<CreateProjectGitProviderOptions, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectGitProviderOptions$Outbound = {
    createDeployments: string;
    disableRepositoryDispatchEvents?: boolean | undefined;
};
/** @internal */
export declare const CreateProjectGitProviderOptions$outboundSchema: z.ZodType<CreateProjectGitProviderOptions$Outbound, z.ZodTypeDef, CreateProjectGitProviderOptions>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectGitProviderOptions$ {
    /** @deprecated use `CreateProjectGitProviderOptions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectGitProviderOptions, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectGitProviderOptions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectGitProviderOptions$Outbound, z.ZodTypeDef, CreateProjectGitProviderOptions>;
    /** @deprecated use `CreateProjectGitProviderOptions$Outbound` instead. */
    type Outbound = CreateProjectGitProviderOptions$Outbound;
}
export declare function createProjectGitProviderOptionsToJSON(createProjectGitProviderOptions: CreateProjectGitProviderOptions): string;
export declare function createProjectGitProviderOptionsFromJSON(jsonString: string): SafeParseResult<CreateProjectGitProviderOptions, SDKValidationError>;
/** @internal */
export declare const CreateProjectWebAnalytics$inboundSchema: z.ZodType<CreateProjectWebAnalytics, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectWebAnalytics$Outbound = {
    id: string;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    enabledAt?: number | undefined;
    hasData?: boolean | undefined;
};
/** @internal */
export declare const CreateProjectWebAnalytics$outboundSchema: z.ZodType<CreateProjectWebAnalytics$Outbound, z.ZodTypeDef, CreateProjectWebAnalytics>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectWebAnalytics$ {
    /** @deprecated use `CreateProjectWebAnalytics$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectWebAnalytics, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectWebAnalytics$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectWebAnalytics$Outbound, z.ZodTypeDef, CreateProjectWebAnalytics>;
    /** @deprecated use `CreateProjectWebAnalytics$Outbound` instead. */
    type Outbound = CreateProjectWebAnalytics$Outbound;
}
export declare function createProjectWebAnalyticsToJSON(createProjectWebAnalytics: CreateProjectWebAnalytics): string;
export declare function createProjectWebAnalyticsFromJSON(jsonString: string): SafeParseResult<CreateProjectWebAnalytics, SDKValidationError>;
/** @internal */
export declare const CreateProjectProjectsResponse200Action$inboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsResponse200Action>;
/** @internal */
export declare const CreateProjectProjectsResponse200Action$outboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsResponse200Action>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectProjectsResponse200Action$ {
    /** @deprecated use `CreateProjectProjectsResponse200Action$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Log: "log";
        readonly Challenge: "challenge";
        readonly Deny: "deny";
    }>;
    /** @deprecated use `CreateProjectProjectsResponse200Action$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Log: "log";
        readonly Challenge: "challenge";
        readonly Deny: "deny";
    }>;
}
/** @internal */
export declare const CreateProjectBotFilter$inboundSchema: z.ZodType<CreateProjectBotFilter, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectBotFilter$Outbound = {
    active: boolean;
    action?: string | undefined;
};
/** @internal */
export declare const CreateProjectBotFilter$outboundSchema: z.ZodType<CreateProjectBotFilter$Outbound, z.ZodTypeDef, CreateProjectBotFilter>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectBotFilter$ {
    /** @deprecated use `CreateProjectBotFilter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectBotFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectBotFilter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectBotFilter$Outbound, z.ZodTypeDef, CreateProjectBotFilter>;
    /** @deprecated use `CreateProjectBotFilter$Outbound` instead. */
    type Outbound = CreateProjectBotFilter$Outbound;
}
export declare function createProjectBotFilterToJSON(createProjectBotFilter: CreateProjectBotFilter): string;
export declare function createProjectBotFilterFromJSON(jsonString: string): SafeParseResult<CreateProjectBotFilter, SDKValidationError>;
/** @internal */
export declare const CreateProjectProjectsAction$inboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsAction>;
/** @internal */
export declare const CreateProjectProjectsAction$outboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectProjectsAction$ {
    /** @deprecated use `CreateProjectProjectsAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Log: "log";
        readonly Challenge: "challenge";
        readonly Deny: "deny";
    }>;
    /** @deprecated use `CreateProjectProjectsAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Log: "log";
        readonly Challenge: "challenge";
        readonly Deny: "deny";
    }>;
}
/** @internal */
export declare const CreateProjectAiBots$inboundSchema: z.ZodType<CreateProjectAiBots, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectAiBots$Outbound = {
    active: boolean;
    action?: string | undefined;
};
/** @internal */
export declare const CreateProjectAiBots$outboundSchema: z.ZodType<CreateProjectAiBots$Outbound, z.ZodTypeDef, CreateProjectAiBots>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectAiBots$ {
    /** @deprecated use `CreateProjectAiBots$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectAiBots, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectAiBots$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectAiBots$Outbound, z.ZodTypeDef, CreateProjectAiBots>;
    /** @deprecated use `CreateProjectAiBots$Outbound` instead. */
    type Outbound = CreateProjectAiBots$Outbound;
}
export declare function createProjectAiBotsToJSON(createProjectAiBots: CreateProjectAiBots): string;
export declare function createProjectAiBotsFromJSON(jsonString: string): SafeParseResult<CreateProjectAiBots, SDKValidationError>;
/** @internal */
export declare const CreateProjectProjectsResponseAction$inboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsResponseAction>;
/** @internal */
export declare const CreateProjectProjectsResponseAction$outboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsResponseAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectProjectsResponseAction$ {
    /** @deprecated use `CreateProjectProjectsResponseAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Log: "log";
        readonly Challenge: "challenge";
        readonly Deny: "deny";
    }>;
    /** @deprecated use `CreateProjectProjectsResponseAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Log: "log";
        readonly Challenge: "challenge";
        readonly Deny: "deny";
    }>;
}
/** @internal */
export declare const CreateProjectOwasp$inboundSchema: z.ZodType<CreateProjectOwasp, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectOwasp$Outbound = {
    active: boolean;
    action?: string | undefined;
};
/** @internal */
export declare const CreateProjectOwasp$outboundSchema: z.ZodType<CreateProjectOwasp$Outbound, z.ZodTypeDef, CreateProjectOwasp>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectOwasp$ {
    /** @deprecated use `CreateProjectOwasp$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectOwasp, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectOwasp$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectOwasp$Outbound, z.ZodTypeDef, CreateProjectOwasp>;
    /** @deprecated use `CreateProjectOwasp$Outbound` instead. */
    type Outbound = CreateProjectOwasp$Outbound;
}
export declare function createProjectOwaspToJSON(createProjectOwasp: CreateProjectOwasp): string;
export declare function createProjectOwaspFromJSON(jsonString: string): SafeParseResult<CreateProjectOwasp, SDKValidationError>;
/** @internal */
export declare const CreateProjectManagedRules$inboundSchema: z.ZodType<CreateProjectManagedRules, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectManagedRules$Outbound = {
    bot_filter: CreateProjectBotFilter$Outbound;
    ai_bots: CreateProjectAiBots$Outbound;
    owasp: CreateProjectOwasp$Outbound;
};
/** @internal */
export declare const CreateProjectManagedRules$outboundSchema: z.ZodType<CreateProjectManagedRules$Outbound, z.ZodTypeDef, CreateProjectManagedRules>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectManagedRules$ {
    /** @deprecated use `CreateProjectManagedRules$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectManagedRules, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectManagedRules$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectManagedRules$Outbound, z.ZodTypeDef, CreateProjectManagedRules>;
    /** @deprecated use `CreateProjectManagedRules$Outbound` instead. */
    type Outbound = CreateProjectManagedRules$Outbound;
}
export declare function createProjectManagedRulesToJSON(createProjectManagedRules: CreateProjectManagedRules): string;
export declare function createProjectManagedRulesFromJSON(jsonString: string): SafeParseResult<CreateProjectManagedRules, SDKValidationError>;
/** @internal */
export declare const CreateProjectSecurity$inboundSchema: z.ZodType<CreateProjectSecurity, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectSecurity$Outbound = {
    attackModeEnabled?: boolean | undefined;
    attackModeUpdatedAt?: number | undefined;
    firewallEnabled?: boolean | undefined;
    firewallUpdatedAt?: number | undefined;
    attackModeActiveUntil?: number | null | undefined;
    firewallConfigVersion?: number | undefined;
    firewallSeawallEnabled?: boolean | undefined;
    ja3Enabled?: boolean | undefined;
    ja4Enabled?: boolean | undefined;
    firewallBypassIps?: Array<string> | undefined;
    managedRules?: CreateProjectManagedRules$Outbound | null | undefined;
    botIdEnabled?: boolean | undefined;
};
/** @internal */
export declare const CreateProjectSecurity$outboundSchema: z.ZodType<CreateProjectSecurity$Outbound, z.ZodTypeDef, CreateProjectSecurity>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectSecurity$ {
    /** @deprecated use `CreateProjectSecurity$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectSecurity, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectSecurity$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectSecurity$Outbound, z.ZodTypeDef, CreateProjectSecurity>;
    /** @deprecated use `CreateProjectSecurity$Outbound` instead. */
    type Outbound = CreateProjectSecurity$Outbound;
}
export declare function createProjectSecurityToJSON(createProjectSecurity: CreateProjectSecurity): string;
export declare function createProjectSecurityFromJSON(jsonString: string): SafeParseResult<CreateProjectSecurity, SDKValidationError>;
/** @internal */
export declare const CreateProjectIssuerMode$inboundSchema: z.ZodNativeEnum<typeof CreateProjectIssuerMode>;
/** @internal */
export declare const CreateProjectIssuerMode$outboundSchema: z.ZodNativeEnum<typeof CreateProjectIssuerMode>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectIssuerMode$ {
    /** @deprecated use `CreateProjectIssuerMode$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Team: "team";
        readonly Global: "global";
    }>;
    /** @deprecated use `CreateProjectIssuerMode$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Team: "team";
        readonly Global: "global";
    }>;
}
/** @internal */
export declare const CreateProjectOidcTokenConfig$inboundSchema: z.ZodType<CreateProjectOidcTokenConfig, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectOidcTokenConfig$Outbound = {
    enabled?: boolean | undefined;
    issuerMode?: string | undefined;
};
/** @internal */
export declare const CreateProjectOidcTokenConfig$outboundSchema: z.ZodType<CreateProjectOidcTokenConfig$Outbound, z.ZodTypeDef, CreateProjectOidcTokenConfig>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectOidcTokenConfig$ {
    /** @deprecated use `CreateProjectOidcTokenConfig$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectOidcTokenConfig, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectOidcTokenConfig$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectOidcTokenConfig$Outbound, z.ZodTypeDef, CreateProjectOidcTokenConfig>;
    /** @deprecated use `CreateProjectOidcTokenConfig$Outbound` instead. */
    type Outbound = CreateProjectOidcTokenConfig$Outbound;
}
export declare function createProjectOidcTokenConfigToJSON(createProjectOidcTokenConfig: CreateProjectOidcTokenConfig): string;
export declare function createProjectOidcTokenConfigFromJSON(jsonString: string): SafeParseResult<CreateProjectOidcTokenConfig, SDKValidationError>;
/** @internal */
export declare const CreateProjectTier$inboundSchema: z.ZodNativeEnum<typeof CreateProjectTier>;
/** @internal */
export declare const CreateProjectTier$outboundSchema: z.ZodNativeEnum<typeof CreateProjectTier>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectTier$ {
    /** @deprecated use `CreateProjectTier$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Standard: "standard";
        readonly Advanced: "advanced";
        readonly Critical: "critical";
    }>;
    /** @deprecated use `CreateProjectTier$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Standard: "standard";
        readonly Advanced: "advanced";
        readonly Critical: "critical";
    }>;
}
/** @internal */
export declare const CreateProjectFeatures$inboundSchema: z.ZodType<CreateProjectFeatures, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectFeatures$Outbound = {
    webAnalytics?: boolean | undefined;
};
/** @internal */
export declare const CreateProjectFeatures$outboundSchema: z.ZodType<CreateProjectFeatures$Outbound, z.ZodTypeDef, CreateProjectFeatures>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectFeatures$ {
    /** @deprecated use `CreateProjectFeatures$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectFeatures, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectFeatures$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectFeatures$Outbound, z.ZodTypeDef, CreateProjectFeatures>;
    /** @deprecated use `CreateProjectFeatures$Outbound` instead. */
    type Outbound = CreateProjectFeatures$Outbound;
}
export declare function createProjectFeaturesToJSON(createProjectFeatures: CreateProjectFeatures): string;
export declare function createProjectFeaturesFromJSON(jsonString: string): SafeParseResult<CreateProjectFeatures, SDKValidationError>;
/** @internal */
export declare const CreateProjectHistory$inboundSchema: z.ZodType<CreateProjectHistory, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectHistory$Outbound = {
    scanner: string;
    reason: string;
    by: string;
    byId: string;
    at: number;
};
/** @internal */
export declare const CreateProjectHistory$outboundSchema: z.ZodType<CreateProjectHistory$Outbound, z.ZodTypeDef, CreateProjectHistory>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectHistory$ {
    /** @deprecated use `CreateProjectHistory$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectHistory, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectHistory$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectHistory$Outbound, z.ZodTypeDef, CreateProjectHistory>;
    /** @deprecated use `CreateProjectHistory$Outbound` instead. */
    type Outbound = CreateProjectHistory$Outbound;
}
export declare function createProjectHistoryToJSON(createProjectHistory: CreateProjectHistory): string;
export declare function createProjectHistoryFromJSON(jsonString: string): SafeParseResult<CreateProjectHistory, SDKValidationError>;
/** @internal */
export declare const CreateProjectAction$inboundSchema: z.ZodNativeEnum<typeof CreateProjectAction>;
/** @internal */
export declare const CreateProjectAction$outboundSchema: z.ZodNativeEnum<typeof CreateProjectAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectAction$ {
    /** @deprecated use `CreateProjectAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Blocked: "blocked";
    }>;
    /** @deprecated use `CreateProjectAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Blocked: "blocked";
    }>;
}
/** @internal */
export declare const CreateProjectBlock$inboundSchema: z.ZodType<CreateProjectBlock, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectBlock$Outbound = {
    action: string;
    reason: string;
    statusCode: number;
    createdAt: number;
    caseId?: string | undefined;
    actor?: string | undefined;
    comment?: string | undefined;
    isCascading?: boolean | undefined;
};
/** @internal */
export declare const CreateProjectBlock$outboundSchema: z.ZodType<CreateProjectBlock$Outbound, z.ZodTypeDef, CreateProjectBlock>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectBlock$ {
    /** @deprecated use `CreateProjectBlock$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectBlock, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectBlock$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectBlock$Outbound, z.ZodTypeDef, CreateProjectBlock>;
    /** @deprecated use `CreateProjectBlock$Outbound` instead. */
    type Outbound = CreateProjectBlock$Outbound;
}
export declare function createProjectBlockToJSON(createProjectBlock: CreateProjectBlock): string;
export declare function createProjectBlockFromJSON(jsonString: string): SafeParseResult<CreateProjectBlock, SDKValidationError>;
/** @internal */
export declare const CreateProjectBlockHistoryProjectsResponse200Action$inboundSchema: z.ZodNativeEnum<typeof CreateProjectBlockHistoryProjectsResponse200Action>;
/** @internal */
export declare const CreateProjectBlockHistoryProjectsResponse200Action$outboundSchema: z.ZodNativeEnum<typeof CreateProjectBlockHistoryProjectsResponse200Action>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectBlockHistoryProjectsResponse200Action$ {
    /** @deprecated use `CreateProjectBlockHistoryProjectsResponse200Action$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly RouteUnblocked: "route-unblocked";
    }>;
    /** @deprecated use `CreateProjectBlockHistoryProjectsResponse200Action$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly RouteUnblocked: "route-unblocked";
    }>;
}
/** @internal */
export declare const CreateProjectHasProjectsResponse200Type$inboundSchema: z.ZodNativeEnum<typeof CreateProjectHasProjectsResponse200Type>;
/** @internal */
export declare const CreateProjectHasProjectsResponse200Type$outboundSchema: z.ZodNativeEnum<typeof CreateProjectHasProjectsResponse200Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectHasProjectsResponse200Type$ {
    /** @deprecated use `CreateProjectHasProjectsResponse200Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Host: "host";
    }>;
    /** @deprecated use `CreateProjectHasProjectsResponse200Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Host: "host";
    }>;
}
/** @internal */
export declare const CreateProjectHasProjectsResponse200Value$inboundSchema: z.ZodType<CreateProjectHasProjectsResponse200Value, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectHasProjectsResponse200Value$Outbound = {
    eq: string;
};
/** @internal */
export declare const CreateProjectHasProjectsResponse200Value$outboundSchema: z.ZodType<CreateProjectHasProjectsResponse200Value$Outbound, z.ZodTypeDef, CreateProjectHasProjectsResponse200Value>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectHasProjectsResponse200Value$ {
    /** @deprecated use `CreateProjectHasProjectsResponse200Value$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectHasProjectsResponse200Value, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectHasProjectsResponse200Value$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectHasProjectsResponse200Value$Outbound, z.ZodTypeDef, CreateProjectHasProjectsResponse200Value>;
    /** @deprecated use `CreateProjectHasProjectsResponse200Value$Outbound` instead. */
    type Outbound = CreateProjectHasProjectsResponse200Value$Outbound;
}
export declare function createProjectHasProjectsResponse200ValueToJSON(createProjectHasProjectsResponse200Value: CreateProjectHasProjectsResponse200Value): string;
export declare function createProjectHasProjectsResponse200ValueFromJSON(jsonString: string): SafeParseResult<CreateProjectHasProjectsResponse200Value, SDKValidationError>;
/** @internal */
export declare const CreateProjectHasProjects2$inboundSchema: z.ZodType<CreateProjectHasProjects2, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectHasProjects2$Outbound = {
    type: string;
    value: CreateProjectHasProjectsResponse200Value$Outbound;
};
/** @internal */
export declare const CreateProjectHasProjects2$outboundSchema: z.ZodType<CreateProjectHasProjects2$Outbound, z.ZodTypeDef, CreateProjectHasProjects2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectHasProjects2$ {
    /** @deprecated use `CreateProjectHasProjects2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectHasProjects2, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectHasProjects2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectHasProjects2$Outbound, z.ZodTypeDef, CreateProjectHasProjects2>;
    /** @deprecated use `CreateProjectHasProjects2$Outbound` instead. */
    type Outbound = CreateProjectHasProjects2$Outbound;
}
export declare function createProjectHasProjects2ToJSON(createProjectHasProjects2: CreateProjectHasProjects2): string;
export declare function createProjectHasProjects2FromJSON(jsonString: string): SafeParseResult<CreateProjectHasProjects2, SDKValidationError>;
/** @internal */
export declare const CreateProjectHasProjectsResponseType$inboundSchema: z.ZodNativeEnum<typeof CreateProjectHasProjectsResponseType>;
/** @internal */
export declare const CreateProjectHasProjectsResponseType$outboundSchema: z.ZodNativeEnum<typeof CreateProjectHasProjectsResponseType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectHasProjectsResponseType$ {
    /** @deprecated use `CreateProjectHasProjectsResponseType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Header: "header";
    }>;
    /** @deprecated use `CreateProjectHasProjectsResponseType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Header: "header";
    }>;
}
/** @internal */
export declare const CreateProjectHasProjectsKey$inboundSchema: z.ZodNativeEnum<typeof CreateProjectHasProjectsKey>;
/** @internal */
export declare const CreateProjectHasProjectsKey$outboundSchema: z.ZodNativeEnum<typeof CreateProjectHasProjectsKey>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectHasProjectsKey$ {
    /** @deprecated use `CreateProjectHasProjectsKey$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly XVercelIpCountry: "x-vercel-ip-country";
    }>;
    /** @deprecated use `CreateProjectHasProjectsKey$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly XVercelIpCountry: "x-vercel-ip-country";
    }>;
}
/** @internal */
export declare const CreateProjectHasProjectsResponseValue$inboundSchema: z.ZodType<CreateProjectHasProjectsResponseValue, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectHasProjectsResponseValue$Outbound = {
    eq: string;
};
/** @internal */
export declare const CreateProjectHasProjectsResponseValue$outboundSchema: z.ZodType<CreateProjectHasProjectsResponseValue$Outbound, z.ZodTypeDef, CreateProjectHasProjectsResponseValue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectHasProjectsResponseValue$ {
    /** @deprecated use `CreateProjectHasProjectsResponseValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectHasProjectsResponseValue, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectHasProjectsResponseValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectHasProjectsResponseValue$Outbound, z.ZodTypeDef, CreateProjectHasProjectsResponseValue>;
    /** @deprecated use `CreateProjectHasProjectsResponseValue$Outbound` instead. */
    type Outbound = CreateProjectHasProjectsResponseValue$Outbound;
}
export declare function createProjectHasProjectsResponseValueToJSON(createProjectHasProjectsResponseValue: CreateProjectHasProjectsResponseValue): string;
export declare function createProjectHasProjectsResponseValueFromJSON(jsonString: string): SafeParseResult<CreateProjectHasProjectsResponseValue, SDKValidationError>;
/** @internal */
export declare const CreateProjectHasProjects1$inboundSchema: z.ZodType<CreateProjectHasProjects1, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectHasProjects1$Outbound = {
    type: string;
    key: string;
    value: CreateProjectHasProjectsResponseValue$Outbound;
};
/** @internal */
export declare const CreateProjectHasProjects1$outboundSchema: z.ZodType<CreateProjectHasProjects1$Outbound, z.ZodTypeDef, CreateProjectHasProjects1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectHasProjects1$ {
    /** @deprecated use `CreateProjectHasProjects1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectHasProjects1, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectHasProjects1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectHasProjects1$Outbound, z.ZodTypeDef, CreateProjectHasProjects1>;
    /** @deprecated use `CreateProjectHasProjects1$Outbound` instead. */
    type Outbound = CreateProjectHasProjects1$Outbound;
}
export declare function createProjectHasProjects1ToJSON(createProjectHasProjects1: CreateProjectHasProjects1): string;
export declare function createProjectHasProjects1FromJSON(jsonString: string): SafeParseResult<CreateProjectHasProjects1, SDKValidationError>;
/** @internal */
export declare const CreateProjectRouteProjectsHas$inboundSchema: z.ZodType<CreateProjectRouteProjectsHas, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectRouteProjectsHas$Outbound = CreateProjectHasProjects1$Outbound | CreateProjectHasProjects2$Outbound;
/** @internal */
export declare const CreateProjectRouteProjectsHas$outboundSchema: z.ZodType<CreateProjectRouteProjectsHas$Outbound, z.ZodTypeDef, CreateProjectRouteProjectsHas>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectRouteProjectsHas$ {
    /** @deprecated use `CreateProjectRouteProjectsHas$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectRouteProjectsHas, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectRouteProjectsHas$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectRouteProjectsHas$Outbound, z.ZodTypeDef, CreateProjectRouteProjectsHas>;
    /** @deprecated use `CreateProjectRouteProjectsHas$Outbound` instead. */
    type Outbound = CreateProjectRouteProjectsHas$Outbound;
}
export declare function createProjectRouteProjectsHasToJSON(createProjectRouteProjectsHas: CreateProjectRouteProjectsHas): string;
export declare function createProjectRouteProjectsHasFromJSON(jsonString: string): SafeParseResult<CreateProjectRouteProjectsHas, SDKValidationError>;
/** @internal */
export declare const CreateProjectRouteProjectsAction$inboundSchema: z.ZodNativeEnum<typeof CreateProjectRouteProjectsAction>;
/** @internal */
export declare const CreateProjectRouteProjectsAction$outboundSchema: z.ZodNativeEnum<typeof CreateProjectRouteProjectsAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectRouteProjectsAction$ {
    /** @deprecated use `CreateProjectRouteProjectsAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly BlockLegalCwc: "block_legal_cwc";
    }>;
    /** @deprecated use `CreateProjectRouteProjectsAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly BlockLegalCwc: "block_legal_cwc";
    }>;
}
/** @internal */
export declare const CreateProjectRouteProjectsMitigate$inboundSchema: z.ZodType<CreateProjectRouteProjectsMitigate, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectRouteProjectsMitigate$Outbound = {
    action: string;
};
/** @internal */
export declare const CreateProjectRouteProjectsMitigate$outboundSchema: z.ZodType<CreateProjectRouteProjectsMitigate$Outbound, z.ZodTypeDef, CreateProjectRouteProjectsMitigate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectRouteProjectsMitigate$ {
    /** @deprecated use `CreateProjectRouteProjectsMitigate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectRouteProjectsMitigate, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectRouteProjectsMitigate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectRouteProjectsMitigate$Outbound, z.ZodTypeDef, CreateProjectRouteProjectsMitigate>;
    /** @deprecated use `CreateProjectRouteProjectsMitigate$Outbound` instead. */
    type Outbound = CreateProjectRouteProjectsMitigate$Outbound;
}
export declare function createProjectRouteProjectsMitigateToJSON(createProjectRouteProjectsMitigate: CreateProjectRouteProjectsMitigate): string;
export declare function createProjectRouteProjectsMitigateFromJSON(jsonString: string): SafeParseResult<CreateProjectRouteProjectsMitigate, SDKValidationError>;
/** @internal */
export declare const CreateProjectRouteProjects2$inboundSchema: z.ZodType<CreateProjectRouteProjects2, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectRouteProjects2$Outbound = {
    has: Array<CreateProjectHasProjects1$Outbound | CreateProjectHasProjects2$Outbound>;
    mitigate: CreateProjectRouteProjectsMitigate$Outbound;
    src?: string | undefined;
};
/** @internal */
export declare const CreateProjectRouteProjects2$outboundSchema: z.ZodType<CreateProjectRouteProjects2$Outbound, z.ZodTypeDef, CreateProjectRouteProjects2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectRouteProjects2$ {
    /** @deprecated use `CreateProjectRouteProjects2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectRouteProjects2, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectRouteProjects2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectRouteProjects2$Outbound, z.ZodTypeDef, CreateProjectRouteProjects2>;
    /** @deprecated use `CreateProjectRouteProjects2$Outbound` instead. */
    type Outbound = CreateProjectRouteProjects2$Outbound;
}
export declare function createProjectRouteProjects2ToJSON(createProjectRouteProjects2: CreateProjectRouteProjects2): string;
export declare function createProjectRouteProjects2FromJSON(jsonString: string): SafeParseResult<CreateProjectRouteProjects2, SDKValidationError>;
/** @internal */
export declare const CreateProjectRouteProjects1$inboundSchema: z.ZodType<CreateProjectRouteProjects1, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectRouteProjects1$Outbound = {
    src: string;
    status: number;
};
/** @internal */
export declare const CreateProjectRouteProjects1$outboundSchema: z.ZodType<CreateProjectRouteProjects1$Outbound, z.ZodTypeDef, CreateProjectRouteProjects1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectRouteProjects1$ {
    /** @deprecated use `CreateProjectRouteProjects1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectRouteProjects1, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectRouteProjects1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectRouteProjects1$Outbound, z.ZodTypeDef, CreateProjectRouteProjects1>;
    /** @deprecated use `CreateProjectRouteProjects1$Outbound` instead. */
    type Outbound = CreateProjectRouteProjects1$Outbound;
}
export declare function createProjectRouteProjects1ToJSON(createProjectRouteProjects1: CreateProjectRouteProjects1): string;
export declare function createProjectRouteProjects1FromJSON(jsonString: string): SafeParseResult<CreateProjectRouteProjects1, SDKValidationError>;
/** @internal */
export declare const CreateProjectBlockHistoryProjectsRoute$inboundSchema: z.ZodType<CreateProjectBlockHistoryProjectsRoute, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectBlockHistoryProjectsRoute$Outbound = CreateProjectRouteProjects1$Outbound | CreateProjectRouteProjects2$Outbound;
/** @internal */
export declare const CreateProjectBlockHistoryProjectsRoute$outboundSchema: z.ZodType<CreateProjectBlockHistoryProjectsRoute$Outbound, z.ZodTypeDef, CreateProjectBlockHistoryProjectsRoute>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectBlockHistoryProjectsRoute$ {
    /** @deprecated use `CreateProjectBlockHistoryProjectsRoute$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectBlockHistoryProjectsRoute, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectBlockHistoryProjectsRoute$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectBlockHistoryProjectsRoute$Outbound, z.ZodTypeDef, CreateProjectBlockHistoryProjectsRoute>;
    /** @deprecated use `CreateProjectBlockHistoryProjectsRoute$Outbound` instead. */
    type Outbound = CreateProjectBlockHistoryProjectsRoute$Outbound;
}
export declare function createProjectBlockHistoryProjectsRouteToJSON(createProjectBlockHistoryProjectsRoute: CreateProjectBlockHistoryProjectsRoute): string;
export declare function createProjectBlockHistoryProjectsRouteFromJSON(jsonString: string): SafeParseResult<CreateProjectBlockHistoryProjectsRoute, SDKValidationError>;
/** @internal */
export declare const CreateProjectBlockHistory4$inboundSchema: z.ZodType<CreateProjectBlockHistory4, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectBlockHistory4$Outbound = {
    action: string;
    route: CreateProjectRouteProjects1$Outbound | CreateProjectRouteProjects2$Outbound;
    statusCode?: number | undefined;
    createdAt: number;
    caseId?: string | undefined;
    actor?: string | undefined;
    comment?: string | undefined;
    isCascading?: boolean | undefined;
};
/** @internal */
export declare const CreateProjectBlockHistory4$outboundSchema: z.ZodType<CreateProjectBlockHistory4$Outbound, z.ZodTypeDef, CreateProjectBlockHistory4>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectBlockHistory4$ {
    /** @deprecated use `CreateProjectBlockHistory4$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectBlockHistory4, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectBlockHistory4$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectBlockHistory4$Outbound, z.ZodTypeDef, CreateProjectBlockHistory4>;
    /** @deprecated use `CreateProjectBlockHistory4$Outbound` instead. */
    type Outbound = CreateProjectBlockHistory4$Outbound;
}
export declare function createProjectBlockHistory4ToJSON(createProjectBlockHistory4: CreateProjectBlockHistory4): string;
export declare function createProjectBlockHistory4FromJSON(jsonString: string): SafeParseResult<CreateProjectBlockHistory4, SDKValidationError>;
/** @internal */
export declare const CreateProjectBlockHistoryProjectsResponseAction$inboundSchema: z.ZodNativeEnum<typeof CreateProjectBlockHistoryProjectsResponseAction>;
/** @internal */
export declare const CreateProjectBlockHistoryProjectsResponseAction$outboundSchema: z.ZodNativeEnum<typeof CreateProjectBlockHistoryProjectsResponseAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectBlockHistoryProjectsResponseAction$ {
    /** @deprecated use `CreateProjectBlockHistoryProjectsResponseAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly RouteBlocked: "route-blocked";
    }>;
    /** @deprecated use `CreateProjectBlockHistoryProjectsResponseAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly RouteBlocked: "route-blocked";
    }>;
}
/** @internal */
export declare const CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema: z.ZodNativeEnum<typeof CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyType>;
/** @internal */
export declare const CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema: z.ZodNativeEnum<typeof CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyType$ {
    /** @deprecated use `CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Host: "host";
    }>;
    /** @deprecated use `CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Host: "host";
    }>;
}
/** @internal */
export declare const CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$inboundSchema: z.ZodType<CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$Outbound = {
    eq: string;
};
/** @internal */
export declare const CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$outboundSchema: z.ZodType<CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$Outbound, z.ZodTypeDef, CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$ {
    /** @deprecated use `CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$Outbound, z.ZodTypeDef, CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue>;
    /** @deprecated use `CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$Outbound` instead. */
    type Outbound = CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$Outbound;
}
export declare function createProjectHasProjectsResponse200ApplicationJSONResponseBodyValueToJSON(createProjectHasProjectsResponse200ApplicationJSONResponseBodyValue: CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue): string;
export declare function createProjectHasProjectsResponse200ApplicationJSONResponseBodyValueFromJSON(jsonString: string): SafeParseResult<CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue, SDKValidationError>;
/** @internal */
export declare const CreateProjectHasProjectsResponse2$inboundSchema: z.ZodType<CreateProjectHasProjectsResponse2, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectHasProjectsResponse2$Outbound = {
    type: string;
    value: CreateProjectHasProjectsResponse200ApplicationJSONResponseBodyValue$Outbound;
};
/** @internal */
export declare const CreateProjectHasProjectsResponse2$outboundSchema: z.ZodType<CreateProjectHasProjectsResponse2$Outbound, z.ZodTypeDef, CreateProjectHasProjectsResponse2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectHasProjectsResponse2$ {
    /** @deprecated use `CreateProjectHasProjectsResponse2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectHasProjectsResponse2, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectHasProjectsResponse2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectHasProjectsResponse2$Outbound, z.ZodTypeDef, CreateProjectHasProjectsResponse2>;
    /** @deprecated use `CreateProjectHasProjectsResponse2$Outbound` instead. */
    type Outbound = CreateProjectHasProjectsResponse2$Outbound;
}
export declare function createProjectHasProjectsResponse2ToJSON(createProjectHasProjectsResponse2: CreateProjectHasProjectsResponse2): string;
export declare function createProjectHasProjectsResponse2FromJSON(jsonString: string): SafeParseResult<CreateProjectHasProjectsResponse2, SDKValidationError>;
/** @internal */
export declare const CreateProjectHasProjectsResponse200ApplicationJSONType$inboundSchema: z.ZodNativeEnum<typeof CreateProjectHasProjectsResponse200ApplicationJSONType>;
/** @internal */
export declare const CreateProjectHasProjectsResponse200ApplicationJSONType$outboundSchema: z.ZodNativeEnum<typeof CreateProjectHasProjectsResponse200ApplicationJSONType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectHasProjectsResponse200ApplicationJSONType$ {
    /** @deprecated use `CreateProjectHasProjectsResponse200ApplicationJSONType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Header: "header";
    }>;
    /** @deprecated use `CreateProjectHasProjectsResponse200ApplicationJSONType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Header: "header";
    }>;
}
/** @internal */
export declare const CreateProjectHasKey$inboundSchema: z.ZodNativeEnum<typeof CreateProjectHasKey>;
/** @internal */
export declare const CreateProjectHasKey$outboundSchema: z.ZodNativeEnum<typeof CreateProjectHasKey>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectHasKey$ {
    /** @deprecated use `CreateProjectHasKey$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly XVercelIpCountry: "x-vercel-ip-country";
    }>;
    /** @deprecated use `CreateProjectHasKey$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly XVercelIpCountry: "x-vercel-ip-country";
    }>;
}
/** @internal */
export declare const CreateProjectHasProjectsResponse200ApplicationJSONValue$inboundSchema: z.ZodType<CreateProjectHasProjectsResponse200ApplicationJSONValue, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectHasProjectsResponse200ApplicationJSONValue$Outbound = {
    eq: string;
};
/** @internal */
export declare const CreateProjectHasProjectsResponse200ApplicationJSONValue$outboundSchema: z.ZodType<CreateProjectHasProjectsResponse200ApplicationJSONValue$Outbound, z.ZodTypeDef, CreateProjectHasProjectsResponse200ApplicationJSONValue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectHasProjectsResponse200ApplicationJSONValue$ {
    /** @deprecated use `CreateProjectHasProjectsResponse200ApplicationJSONValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectHasProjectsResponse200ApplicationJSONValue, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectHasProjectsResponse200ApplicationJSONValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectHasProjectsResponse200ApplicationJSONValue$Outbound, z.ZodTypeDef, CreateProjectHasProjectsResponse200ApplicationJSONValue>;
    /** @deprecated use `CreateProjectHasProjectsResponse200ApplicationJSONValue$Outbound` instead. */
    type Outbound = CreateProjectHasProjectsResponse200ApplicationJSONValue$Outbound;
}
export declare function createProjectHasProjectsResponse200ApplicationJSONValueToJSON(createProjectHasProjectsResponse200ApplicationJSONValue: CreateProjectHasProjectsResponse200ApplicationJSONValue): string;
export declare function createProjectHasProjectsResponse200ApplicationJSONValueFromJSON(jsonString: string): SafeParseResult<CreateProjectHasProjectsResponse200ApplicationJSONValue, SDKValidationError>;
/** @internal */
export declare const CreateProjectHasProjectsResponse1$inboundSchema: z.ZodType<CreateProjectHasProjectsResponse1, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectHasProjectsResponse1$Outbound = {
    type: string;
    key: string;
    value: CreateProjectHasProjectsResponse200ApplicationJSONValue$Outbound;
};
/** @internal */
export declare const CreateProjectHasProjectsResponse1$outboundSchema: z.ZodType<CreateProjectHasProjectsResponse1$Outbound, z.ZodTypeDef, CreateProjectHasProjectsResponse1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectHasProjectsResponse1$ {
    /** @deprecated use `CreateProjectHasProjectsResponse1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectHasProjectsResponse1, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectHasProjectsResponse1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectHasProjectsResponse1$Outbound, z.ZodTypeDef, CreateProjectHasProjectsResponse1>;
    /** @deprecated use `CreateProjectHasProjectsResponse1$Outbound` instead. */
    type Outbound = CreateProjectHasProjectsResponse1$Outbound;
}
export declare function createProjectHasProjectsResponse1ToJSON(createProjectHasProjectsResponse1: CreateProjectHasProjectsResponse1): string;
export declare function createProjectHasProjectsResponse1FromJSON(jsonString: string): SafeParseResult<CreateProjectHasProjectsResponse1, SDKValidationError>;
/** @internal */
export declare const CreateProjectRouteHas$inboundSchema: z.ZodType<CreateProjectRouteHas, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectRouteHas$Outbound = CreateProjectHasProjectsResponse1$Outbound | CreateProjectHasProjectsResponse2$Outbound;
/** @internal */
export declare const CreateProjectRouteHas$outboundSchema: z.ZodType<CreateProjectRouteHas$Outbound, z.ZodTypeDef, CreateProjectRouteHas>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectRouteHas$ {
    /** @deprecated use `CreateProjectRouteHas$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectRouteHas, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectRouteHas$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectRouteHas$Outbound, z.ZodTypeDef, CreateProjectRouteHas>;
    /** @deprecated use `CreateProjectRouteHas$Outbound` instead. */
    type Outbound = CreateProjectRouteHas$Outbound;
}
export declare function createProjectRouteHasToJSON(createProjectRouteHas: CreateProjectRouteHas): string;
export declare function createProjectRouteHasFromJSON(jsonString: string): SafeParseResult<CreateProjectRouteHas, SDKValidationError>;
/** @internal */
export declare const CreateProjectRouteAction$inboundSchema: z.ZodNativeEnum<typeof CreateProjectRouteAction>;
/** @internal */
export declare const CreateProjectRouteAction$outboundSchema: z.ZodNativeEnum<typeof CreateProjectRouteAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectRouteAction$ {
    /** @deprecated use `CreateProjectRouteAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly BlockLegalCwc: "block_legal_cwc";
    }>;
    /** @deprecated use `CreateProjectRouteAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly BlockLegalCwc: "block_legal_cwc";
    }>;
}
/** @internal */
export declare const CreateProjectRouteMitigate$inboundSchema: z.ZodType<CreateProjectRouteMitigate, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectRouteMitigate$Outbound = {
    action: string;
};
/** @internal */
export declare const CreateProjectRouteMitigate$outboundSchema: z.ZodType<CreateProjectRouteMitigate$Outbound, z.ZodTypeDef, CreateProjectRouteMitigate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectRouteMitigate$ {
    /** @deprecated use `CreateProjectRouteMitigate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectRouteMitigate, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectRouteMitigate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectRouteMitigate$Outbound, z.ZodTypeDef, CreateProjectRouteMitigate>;
    /** @deprecated use `CreateProjectRouteMitigate$Outbound` instead. */
    type Outbound = CreateProjectRouteMitigate$Outbound;
}
export declare function createProjectRouteMitigateToJSON(createProjectRouteMitigate: CreateProjectRouteMitigate): string;
export declare function createProjectRouteMitigateFromJSON(jsonString: string): SafeParseResult<CreateProjectRouteMitigate, SDKValidationError>;
/** @internal */
export declare const CreateProjectRoute2$inboundSchema: z.ZodType<CreateProjectRoute2, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectRoute2$Outbound = {
    has: Array<CreateProjectHasProjectsResponse1$Outbound | CreateProjectHasProjectsResponse2$Outbound>;
    mitigate: CreateProjectRouteMitigate$Outbound;
    src?: string | undefined;
};
/** @internal */
export declare const CreateProjectRoute2$outboundSchema: z.ZodType<CreateProjectRoute2$Outbound, z.ZodTypeDef, CreateProjectRoute2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectRoute2$ {
    /** @deprecated use `CreateProjectRoute2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectRoute2, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectRoute2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectRoute2$Outbound, z.ZodTypeDef, CreateProjectRoute2>;
    /** @deprecated use `CreateProjectRoute2$Outbound` instead. */
    type Outbound = CreateProjectRoute2$Outbound;
}
export declare function createProjectRoute2ToJSON(createProjectRoute2: CreateProjectRoute2): string;
export declare function createProjectRoute2FromJSON(jsonString: string): SafeParseResult<CreateProjectRoute2, SDKValidationError>;
/** @internal */
export declare const CreateProjectRoute1$inboundSchema: z.ZodType<CreateProjectRoute1, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectRoute1$Outbound = {
    src: string;
    status: number;
};
/** @internal */
export declare const CreateProjectRoute1$outboundSchema: z.ZodType<CreateProjectRoute1$Outbound, z.ZodTypeDef, CreateProjectRoute1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectRoute1$ {
    /** @deprecated use `CreateProjectRoute1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectRoute1, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectRoute1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectRoute1$Outbound, z.ZodTypeDef, CreateProjectRoute1>;
    /** @deprecated use `CreateProjectRoute1$Outbound` instead. */
    type Outbound = CreateProjectRoute1$Outbound;
}
export declare function createProjectRoute1ToJSON(createProjectRoute1: CreateProjectRoute1): string;
export declare function createProjectRoute1FromJSON(jsonString: string): SafeParseResult<CreateProjectRoute1, SDKValidationError>;
/** @internal */
export declare const CreateProjectBlockHistoryRoute$inboundSchema: z.ZodType<CreateProjectBlockHistoryRoute, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectBlockHistoryRoute$Outbound = CreateProjectRoute1$Outbound | CreateProjectRoute2$Outbound;
/** @internal */
export declare const CreateProjectBlockHistoryRoute$outboundSchema: z.ZodType<CreateProjectBlockHistoryRoute$Outbound, z.ZodTypeDef, CreateProjectBlockHistoryRoute>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectBlockHistoryRoute$ {
    /** @deprecated use `CreateProjectBlockHistoryRoute$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectBlockHistoryRoute, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectBlockHistoryRoute$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectBlockHistoryRoute$Outbound, z.ZodTypeDef, CreateProjectBlockHistoryRoute>;
    /** @deprecated use `CreateProjectBlockHistoryRoute$Outbound` instead. */
    type Outbound = CreateProjectBlockHistoryRoute$Outbound;
}
export declare function createProjectBlockHistoryRouteToJSON(createProjectBlockHistoryRoute: CreateProjectBlockHistoryRoute): string;
export declare function createProjectBlockHistoryRouteFromJSON(jsonString: string): SafeParseResult<CreateProjectBlockHistoryRoute, SDKValidationError>;
/** @internal */
export declare const CreateProjectBlockHistory3$inboundSchema: z.ZodType<CreateProjectBlockHistory3, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectBlockHistory3$Outbound = {
    action: string;
    route: CreateProjectRoute1$Outbound | CreateProjectRoute2$Outbound;
    reason: string;
    createdAt: number;
    caseId?: string | undefined;
    actor?: string | undefined;
    comment?: string | undefined;
    isCascading?: boolean | undefined;
};
/** @internal */
export declare const CreateProjectBlockHistory3$outboundSchema: z.ZodType<CreateProjectBlockHistory3$Outbound, z.ZodTypeDef, CreateProjectBlockHistory3>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectBlockHistory3$ {
    /** @deprecated use `CreateProjectBlockHistory3$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectBlockHistory3, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectBlockHistory3$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectBlockHistory3$Outbound, z.ZodTypeDef, CreateProjectBlockHistory3>;
    /** @deprecated use `CreateProjectBlockHistory3$Outbound` instead. */
    type Outbound = CreateProjectBlockHistory3$Outbound;
}
export declare function createProjectBlockHistory3ToJSON(createProjectBlockHistory3: CreateProjectBlockHistory3): string;
export declare function createProjectBlockHistory3FromJSON(jsonString: string): SafeParseResult<CreateProjectBlockHistory3, SDKValidationError>;
/** @internal */
export declare const CreateProjectBlockHistoryProjectsAction$inboundSchema: z.ZodNativeEnum<typeof CreateProjectBlockHistoryProjectsAction>;
/** @internal */
export declare const CreateProjectBlockHistoryProjectsAction$outboundSchema: z.ZodNativeEnum<typeof CreateProjectBlockHistoryProjectsAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectBlockHistoryProjectsAction$ {
    /** @deprecated use `CreateProjectBlockHistoryProjectsAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Unblocked: "unblocked";
    }>;
    /** @deprecated use `CreateProjectBlockHistoryProjectsAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Unblocked: "unblocked";
    }>;
}
/** @internal */
export declare const CreateProjectBlockHistory2$inboundSchema: z.ZodType<CreateProjectBlockHistory2, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectBlockHistory2$Outbound = {
    action: string;
    createdAt: number;
    caseId?: string | undefined;
    actor?: string | undefined;
    comment?: string | undefined;
    isCascading?: boolean | undefined;
};
/** @internal */
export declare const CreateProjectBlockHistory2$outboundSchema: z.ZodType<CreateProjectBlockHistory2$Outbound, z.ZodTypeDef, CreateProjectBlockHistory2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectBlockHistory2$ {
    /** @deprecated use `CreateProjectBlockHistory2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectBlockHistory2, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectBlockHistory2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectBlockHistory2$Outbound, z.ZodTypeDef, CreateProjectBlockHistory2>;
    /** @deprecated use `CreateProjectBlockHistory2$Outbound` instead. */
    type Outbound = CreateProjectBlockHistory2$Outbound;
}
export declare function createProjectBlockHistory2ToJSON(createProjectBlockHistory2: CreateProjectBlockHistory2): string;
export declare function createProjectBlockHistory2FromJSON(jsonString: string): SafeParseResult<CreateProjectBlockHistory2, SDKValidationError>;
/** @internal */
export declare const CreateProjectBlockHistoryAction$inboundSchema: z.ZodNativeEnum<typeof CreateProjectBlockHistoryAction>;
/** @internal */
export declare const CreateProjectBlockHistoryAction$outboundSchema: z.ZodNativeEnum<typeof CreateProjectBlockHistoryAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectBlockHistoryAction$ {
    /** @deprecated use `CreateProjectBlockHistoryAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Blocked: "blocked";
    }>;
    /** @deprecated use `CreateProjectBlockHistoryAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Blocked: "blocked";
    }>;
}
/** @internal */
export declare const CreateProjectBlockHistory1$inboundSchema: z.ZodType<CreateProjectBlockHistory1, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectBlockHistory1$Outbound = {
    action: string;
    reason: string;
    statusCode: number;
    createdAt: number;
    caseId?: string | undefined;
    actor?: string | undefined;
    comment?: string | undefined;
    isCascading?: boolean | undefined;
};
/** @internal */
export declare const CreateProjectBlockHistory1$outboundSchema: z.ZodType<CreateProjectBlockHistory1$Outbound, z.ZodTypeDef, CreateProjectBlockHistory1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectBlockHistory1$ {
    /** @deprecated use `CreateProjectBlockHistory1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectBlockHistory1, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectBlockHistory1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectBlockHistory1$Outbound, z.ZodTypeDef, CreateProjectBlockHistory1>;
    /** @deprecated use `CreateProjectBlockHistory1$Outbound` instead. */
    type Outbound = CreateProjectBlockHistory1$Outbound;
}
export declare function createProjectBlockHistory1ToJSON(createProjectBlockHistory1: CreateProjectBlockHistory1): string;
export declare function createProjectBlockHistory1FromJSON(jsonString: string): SafeParseResult<CreateProjectBlockHistory1, SDKValidationError>;
/** @internal */
export declare const CreateProjectBlockHistory$inboundSchema: z.ZodType<CreateProjectBlockHistory, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectBlockHistory$Outbound = CreateProjectBlockHistory1$Outbound | CreateProjectBlockHistory3$Outbound | CreateProjectBlockHistory4$Outbound | CreateProjectBlockHistory2$Outbound;
/** @internal */
export declare const CreateProjectBlockHistory$outboundSchema: z.ZodType<CreateProjectBlockHistory$Outbound, z.ZodTypeDef, CreateProjectBlockHistory>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectBlockHistory$ {
    /** @deprecated use `CreateProjectBlockHistory$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectBlockHistory, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectBlockHistory$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectBlockHistory$Outbound, z.ZodTypeDef, CreateProjectBlockHistory>;
    /** @deprecated use `CreateProjectBlockHistory$Outbound` instead. */
    type Outbound = CreateProjectBlockHistory$Outbound;
}
export declare function createProjectBlockHistoryToJSON(createProjectBlockHistory: CreateProjectBlockHistory): string;
export declare function createProjectBlockHistoryFromJSON(jsonString: string): SafeParseResult<CreateProjectBlockHistory, SDKValidationError>;
/** @internal */
export declare const CreateProjectAbuse$inboundSchema: z.ZodType<CreateProjectAbuse, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectAbuse$Outbound = {
    scanner?: string | undefined;
    history: Array<CreateProjectHistory$Outbound>;
    updatedAt: number;
    block?: CreateProjectBlock$Outbound | undefined;
    blockHistory?: Array<CreateProjectBlockHistory1$Outbound | CreateProjectBlockHistory3$Outbound | CreateProjectBlockHistory4$Outbound | CreateProjectBlockHistory2$Outbound> | undefined;
};
/** @internal */
export declare const CreateProjectAbuse$outboundSchema: z.ZodType<CreateProjectAbuse$Outbound, z.ZodTypeDef, CreateProjectAbuse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectAbuse$ {
    /** @deprecated use `CreateProjectAbuse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectAbuse, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectAbuse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectAbuse$Outbound, z.ZodTypeDef, CreateProjectAbuse>;
    /** @deprecated use `CreateProjectAbuse$Outbound` instead. */
    type Outbound = CreateProjectAbuse$Outbound;
}
export declare function createProjectAbuseToJSON(createProjectAbuse: CreateProjectAbuse): string;
export declare function createProjectAbuseFromJSON(jsonString: string): SafeParseResult<CreateProjectAbuse, SDKValidationError>;
/** @internal */
export declare const CreateProjectHasProjectsType$inboundSchema: z.ZodNativeEnum<typeof CreateProjectHasProjectsType>;
/** @internal */
export declare const CreateProjectHasProjectsType$outboundSchema: z.ZodNativeEnum<typeof CreateProjectHasProjectsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectHasProjectsType$ {
    /** @deprecated use `CreateProjectHasProjectsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Host: "host";
    }>;
    /** @deprecated use `CreateProjectHasProjectsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Host: "host";
    }>;
}
/** @internal */
export declare const CreateProjectHasProjectsValue$inboundSchema: z.ZodType<CreateProjectHasProjectsValue, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectHasProjectsValue$Outbound = {
    eq: string;
};
/** @internal */
export declare const CreateProjectHasProjectsValue$outboundSchema: z.ZodType<CreateProjectHasProjectsValue$Outbound, z.ZodTypeDef, CreateProjectHasProjectsValue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectHasProjectsValue$ {
    /** @deprecated use `CreateProjectHasProjectsValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectHasProjectsValue, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectHasProjectsValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectHasProjectsValue$Outbound, z.ZodTypeDef, CreateProjectHasProjectsValue>;
    /** @deprecated use `CreateProjectHasProjectsValue$Outbound` instead. */
    type Outbound = CreateProjectHasProjectsValue$Outbound;
}
export declare function createProjectHasProjectsValueToJSON(createProjectHasProjectsValue: CreateProjectHasProjectsValue): string;
export declare function createProjectHasProjectsValueFromJSON(jsonString: string): SafeParseResult<CreateProjectHasProjectsValue, SDKValidationError>;
/** @internal */
export declare const CreateProjectHas2$inboundSchema: z.ZodType<CreateProjectHas2, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectHas2$Outbound = {
    type: string;
    value: CreateProjectHasProjectsValue$Outbound;
};
/** @internal */
export declare const CreateProjectHas2$outboundSchema: z.ZodType<CreateProjectHas2$Outbound, z.ZodTypeDef, CreateProjectHas2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectHas2$ {
    /** @deprecated use `CreateProjectHas2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectHas2, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectHas2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectHas2$Outbound, z.ZodTypeDef, CreateProjectHas2>;
    /** @deprecated use `CreateProjectHas2$Outbound` instead. */
    type Outbound = CreateProjectHas2$Outbound;
}
export declare function createProjectHas2ToJSON(createProjectHas2: CreateProjectHas2): string;
export declare function createProjectHas2FromJSON(jsonString: string): SafeParseResult<CreateProjectHas2, SDKValidationError>;
/** @internal */
export declare const CreateProjectHasType$inboundSchema: z.ZodNativeEnum<typeof CreateProjectHasType>;
/** @internal */
export declare const CreateProjectHasType$outboundSchema: z.ZodNativeEnum<typeof CreateProjectHasType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectHasType$ {
    /** @deprecated use `CreateProjectHasType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Header: "header";
    }>;
    /** @deprecated use `CreateProjectHasType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Header: "header";
    }>;
}
/** @internal */
export declare const HasKey$inboundSchema: z.ZodNativeEnum<typeof HasKey>;
/** @internal */
export declare const HasKey$outboundSchema: z.ZodNativeEnum<typeof HasKey>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace HasKey$ {
    /** @deprecated use `HasKey$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly XVercelIpCountry: "x-vercel-ip-country";
    }>;
    /** @deprecated use `HasKey$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly XVercelIpCountry: "x-vercel-ip-country";
    }>;
}
/** @internal */
export declare const CreateProjectHasValue$inboundSchema: z.ZodType<CreateProjectHasValue, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectHasValue$Outbound = {
    eq: string;
};
/** @internal */
export declare const CreateProjectHasValue$outboundSchema: z.ZodType<CreateProjectHasValue$Outbound, z.ZodTypeDef, CreateProjectHasValue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectHasValue$ {
    /** @deprecated use `CreateProjectHasValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectHasValue, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectHasValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectHasValue$Outbound, z.ZodTypeDef, CreateProjectHasValue>;
    /** @deprecated use `CreateProjectHasValue$Outbound` instead. */
    type Outbound = CreateProjectHasValue$Outbound;
}
export declare function createProjectHasValueToJSON(createProjectHasValue: CreateProjectHasValue): string;
export declare function createProjectHasValueFromJSON(jsonString: string): SafeParseResult<CreateProjectHasValue, SDKValidationError>;
/** @internal */
export declare const CreateProjectHas1$inboundSchema: z.ZodType<CreateProjectHas1, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectHas1$Outbound = {
    type: string;
    key: string;
    value: CreateProjectHasValue$Outbound;
};
/** @internal */
export declare const CreateProjectHas1$outboundSchema: z.ZodType<CreateProjectHas1$Outbound, z.ZodTypeDef, CreateProjectHas1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectHas1$ {
    /** @deprecated use `CreateProjectHas1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectHas1, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectHas1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectHas1$Outbound, z.ZodTypeDef, CreateProjectHas1>;
    /** @deprecated use `CreateProjectHas1$Outbound` instead. */
    type Outbound = CreateProjectHas1$Outbound;
}
export declare function createProjectHas1ToJSON(createProjectHas1: CreateProjectHas1): string;
export declare function createProjectHas1FromJSON(jsonString: string): SafeParseResult<CreateProjectHas1, SDKValidationError>;
/** @internal */
export declare const InternalRoutesHas$inboundSchema: z.ZodType<InternalRoutesHas, z.ZodTypeDef, unknown>;
/** @internal */
export type InternalRoutesHas$Outbound = CreateProjectHas1$Outbound | CreateProjectHas2$Outbound;
/** @internal */
export declare const InternalRoutesHas$outboundSchema: z.ZodType<InternalRoutesHas$Outbound, z.ZodTypeDef, InternalRoutesHas>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace InternalRoutesHas$ {
    /** @deprecated use `InternalRoutesHas$inboundSchema` instead. */
    const inboundSchema: z.ZodType<InternalRoutesHas, z.ZodTypeDef, unknown>;
    /** @deprecated use `InternalRoutesHas$outboundSchema` instead. */
    const outboundSchema: z.ZodType<InternalRoutesHas$Outbound, z.ZodTypeDef, InternalRoutesHas>;
    /** @deprecated use `InternalRoutesHas$Outbound` instead. */
    type Outbound = InternalRoutesHas$Outbound;
}
export declare function internalRoutesHasToJSON(internalRoutesHas: InternalRoutesHas): string;
export declare function internalRoutesHasFromJSON(jsonString: string): SafeParseResult<InternalRoutesHas, SDKValidationError>;
/** @internal */
export declare const CreateProjectInternalRoutesAction$inboundSchema: z.ZodNativeEnum<typeof CreateProjectInternalRoutesAction>;
/** @internal */
export declare const CreateProjectInternalRoutesAction$outboundSchema: z.ZodNativeEnum<typeof CreateProjectInternalRoutesAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectInternalRoutesAction$ {
    /** @deprecated use `CreateProjectInternalRoutesAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly BlockLegalCwc: "block_legal_cwc";
    }>;
    /** @deprecated use `CreateProjectInternalRoutesAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly BlockLegalCwc: "block_legal_cwc";
    }>;
}
/** @internal */
export declare const InternalRoutesMitigate$inboundSchema: z.ZodType<InternalRoutesMitigate, z.ZodTypeDef, unknown>;
/** @internal */
export type InternalRoutesMitigate$Outbound = {
    action: string;
};
/** @internal */
export declare const InternalRoutesMitigate$outboundSchema: z.ZodType<InternalRoutesMitigate$Outbound, z.ZodTypeDef, InternalRoutesMitigate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace InternalRoutesMitigate$ {
    /** @deprecated use `InternalRoutesMitigate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<InternalRoutesMitigate, z.ZodTypeDef, unknown>;
    /** @deprecated use `InternalRoutesMitigate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<InternalRoutesMitigate$Outbound, z.ZodTypeDef, InternalRoutesMitigate>;
    /** @deprecated use `InternalRoutesMitigate$Outbound` instead. */
    type Outbound = InternalRoutesMitigate$Outbound;
}
export declare function internalRoutesMitigateToJSON(internalRoutesMitigate: InternalRoutesMitigate): string;
export declare function internalRoutesMitigateFromJSON(jsonString: string): SafeParseResult<InternalRoutesMitigate, SDKValidationError>;
/** @internal */
export declare const CreateProjectInternalRoutes2$inboundSchema: z.ZodType<CreateProjectInternalRoutes2, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectInternalRoutes2$Outbound = {
    has: Array<CreateProjectHas1$Outbound | CreateProjectHas2$Outbound>;
    mitigate: InternalRoutesMitigate$Outbound;
    src?: string | undefined;
};
/** @internal */
export declare const CreateProjectInternalRoutes2$outboundSchema: z.ZodType<CreateProjectInternalRoutes2$Outbound, z.ZodTypeDef, CreateProjectInternalRoutes2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectInternalRoutes2$ {
    /** @deprecated use `CreateProjectInternalRoutes2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectInternalRoutes2, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectInternalRoutes2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectInternalRoutes2$Outbound, z.ZodTypeDef, CreateProjectInternalRoutes2>;
    /** @deprecated use `CreateProjectInternalRoutes2$Outbound` instead. */
    type Outbound = CreateProjectInternalRoutes2$Outbound;
}
export declare function createProjectInternalRoutes2ToJSON(createProjectInternalRoutes2: CreateProjectInternalRoutes2): string;
export declare function createProjectInternalRoutes2FromJSON(jsonString: string): SafeParseResult<CreateProjectInternalRoutes2, SDKValidationError>;
/** @internal */
export declare const CreateProjectInternalRoutes1$inboundSchema: z.ZodType<CreateProjectInternalRoutes1, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectInternalRoutes1$Outbound = {
    src: string;
    status: number;
};
/** @internal */
export declare const CreateProjectInternalRoutes1$outboundSchema: z.ZodType<CreateProjectInternalRoutes1$Outbound, z.ZodTypeDef, CreateProjectInternalRoutes1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectInternalRoutes1$ {
    /** @deprecated use `CreateProjectInternalRoutes1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectInternalRoutes1, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectInternalRoutes1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectInternalRoutes1$Outbound, z.ZodTypeDef, CreateProjectInternalRoutes1>;
    /** @deprecated use `CreateProjectInternalRoutes1$Outbound` instead. */
    type Outbound = CreateProjectInternalRoutes1$Outbound;
}
export declare function createProjectInternalRoutes1ToJSON(createProjectInternalRoutes1: CreateProjectInternalRoutes1): string;
export declare function createProjectInternalRoutes1FromJSON(jsonString: string): SafeParseResult<CreateProjectInternalRoutes1, SDKValidationError>;
/** @internal */
export declare const CreateProjectInternalRoutes$inboundSchema: z.ZodType<CreateProjectInternalRoutes, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectInternalRoutes$Outbound = CreateProjectInternalRoutes1$Outbound | CreateProjectInternalRoutes2$Outbound;
/** @internal */
export declare const CreateProjectInternalRoutes$outboundSchema: z.ZodType<CreateProjectInternalRoutes$Outbound, z.ZodTypeDef, CreateProjectInternalRoutes>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectInternalRoutes$ {
    /** @deprecated use `CreateProjectInternalRoutes$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectInternalRoutes, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectInternalRoutes$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectInternalRoutes$Outbound, z.ZodTypeDef, CreateProjectInternalRoutes>;
    /** @deprecated use `CreateProjectInternalRoutes$Outbound` instead. */
    type Outbound = CreateProjectInternalRoutes$Outbound;
}
export declare function createProjectInternalRoutesToJSON(createProjectInternalRoutes: CreateProjectInternalRoutes): string;
export declare function createProjectInternalRoutesFromJSON(jsonString: string): SafeParseResult<CreateProjectInternalRoutes, SDKValidationError>;
/** @internal */
export declare const CreateProjectResponseBody$inboundSchema: z.ZodType<CreateProjectResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateProjectResponseBody$Outbound = {
    accountId: string;
    analytics?: CreateProjectAnalytics$Outbound | undefined;
    speedInsights?: CreateProjectSpeedInsights$Outbound | undefined;
    autoExposeSystemEnvs?: boolean | undefined;
    autoAssignCustomDomains?: boolean | undefined;
    autoAssignCustomDomainsUpdatedBy?: string | undefined;
    buildCommand?: string | null | undefined;
    commandForIgnoringBuildStep?: string | null | undefined;
    connectConfigurations?: Array<CreateProjectConnectConfigurations$Outbound> | null | undefined;
    connectConfigurationId?: string | null | undefined;
    connectBuildsEnabled?: boolean | undefined;
    passiveConnectConfigurationId?: string | null | undefined;
    createdAt?: number | undefined;
    customerSupportCodeVisibility?: boolean | undefined;
    crons?: CreateProjectCrons$Outbound | undefined;
    dataCache?: CreateProjectDataCache$Outbound | undefined;
    deploymentExpiration?: CreateProjectDeploymentExpiration$Outbound | null | undefined;
    devCommand?: string | null | undefined;
    directoryListing: boolean;
    installCommand?: string | null | undefined;
    env?: Array<CreateProjectEnv$Outbound> | undefined;
    customEnvironments?: Array<CreateProjectCustomEnvironments$Outbound> | undefined;
    framework?: string | null | undefined;
    gitForkProtection?: boolean | undefined;
    gitLFS?: boolean | undefined;
    id: string;
    ipBuckets?: Array<CreateProjectIpBuckets$Outbound> | undefined;
    latestDeployments?: Array<CreateProjectLatestDeployments$Outbound> | undefined;
    link?: CreateProjectLink4$Outbound | CreateProjectLink5$Outbound | CreateProjectLink3$Outbound | CreateProjectLink1$Outbound | CreateProjectLink2$Outbound | undefined;
    microfrontends?: CreateProjectMicrofrontends1$Outbound | CreateProjectMicrofrontends2$Outbound | undefined;
    name: string;
    nodeVersion: string;
    optionsAllowlist?: CreateProjectOptionsAllowlist$Outbound | null | undefined;
    outputDirectory?: string | null | undefined;
    passwordProtection?: CreateProjectPasswordProtection$Outbound | null | undefined;
    productionDeploymentsFastLane?: boolean | undefined;
    publicSource?: boolean | null | undefined;
    resourceConfig: CreateProjectProjectsResourceConfig$Outbound;
    rollbackDescription?: CreateProjectRollbackDescription$Outbound | undefined;
    rollingRelease?: CreateProjectRollingRelease$Outbound | null | undefined;
    defaultResourceConfig: CreateProjectDefaultResourceConfig$Outbound;
    rootDirectory?: string | null | undefined;
    serverlessFunctionZeroConfigFailover?: boolean | undefined;
    skewProtectionBoundaryAt?: number | undefined;
    skewProtectionMaxAge?: number | undefined;
    skipGitConnectDuringLink?: boolean | undefined;
    sourceFilesOutsideRootDirectory?: boolean | undefined;
    enableAffectedProjectsDeployments?: boolean | undefined;
    ssoProtection?: CreateProjectProjectsSsoProtection$Outbound | null | undefined;
    targets?: {
        [k: string]: CreateProjectTargets$Outbound | null;
    } | undefined;
    transferCompletedAt?: number | undefined;
    transferStartedAt?: number | undefined;
    transferToAccountId?: string | undefined;
    transferredFromAccountId?: string | undefined;
    updatedAt?: number | undefined;
    live?: boolean | undefined;
    enablePreviewFeedback?: boolean | null | undefined;
    enableProductionFeedback?: boolean | null | undefined;
    permissions?: CreateProjectPermissions$Outbound | undefined;
    lastRollbackTarget?: CreateProjectLastRollbackTarget$Outbound | null | undefined;
    lastAliasRequest?: CreateProjectLastAliasRequest$Outbound | null | undefined;
    protectionBypass?: {
        [k: string]: CreateProjectProtectionBypass1$Outbound | CreateProjectProtectionBypass2$Outbound;
    } | undefined;
    hasActiveBranches?: boolean | undefined;
    trustedIps?: CreateProjectTrustedIps1$Outbound | CreateProjectTrustedIps2$Outbound | null | undefined;
    gitComments?: CreateProjectGitComments$Outbound | undefined;
    gitProviderOptions?: CreateProjectGitProviderOptions$Outbound | undefined;
    paused?: boolean | undefined;
    concurrencyBucketName?: string | undefined;
    webAnalytics?: CreateProjectWebAnalytics$Outbound | undefined;
    security?: CreateProjectSecurity$Outbound | undefined;
    oidcTokenConfig?: CreateProjectOidcTokenConfig$Outbound | undefined;
    tier?: string | undefined;
    features?: CreateProjectFeatures$Outbound | undefined;
    v0?: boolean | undefined;
    abuse?: CreateProjectAbuse$Outbound | undefined;
    internalRoutes?: Array<CreateProjectInternalRoutes1$Outbound | CreateProjectInternalRoutes2$Outbound> | undefined;
};
/** @internal */
export declare const CreateProjectResponseBody$outboundSchema: z.ZodType<CreateProjectResponseBody$Outbound, z.ZodTypeDef, CreateProjectResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateProjectResponseBody$ {
    /** @deprecated use `CreateProjectResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateProjectResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateProjectResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateProjectResponseBody$Outbound, z.ZodTypeDef, CreateProjectResponseBody>;
    /** @deprecated use `CreateProjectResponseBody$Outbound` instead. */
    type Outbound = CreateProjectResponseBody$Outbound;
}
export declare function createProjectResponseBodyToJSON(createProjectResponseBody: CreateProjectResponseBody): string;
export declare function createProjectResponseBodyFromJSON(jsonString: string): SafeParseResult<CreateProjectResponseBody, SDKValidationError>;
//# sourceMappingURL=createprojectop.d.ts.map