import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type CompleteRollingReleaseRequestBody = {
    /**
     * The ID of the canary deployment to complete
     */
    canaryDeploymentId: string;
};
export type CompleteRollingReleaseRequest = {
    /**
     * Project ID or project name (URL-encoded)
     */
    idOrName: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody?: CompleteRollingReleaseRequestBody | undefined;
};
/**
 * The current state of the rolling release
 */
export declare const CompleteRollingReleaseState: {
    readonly Active: "ACTIVE";
    readonly Complete: "COMPLETE";
    readonly Aborted: "ABORTED";
};
/**
 * The current state of the rolling release
 */
export type CompleteRollingReleaseState = ClosedEnum<typeof CompleteRollingReleaseState>;
export declare const CompleteRollingReleaseTarget: {
    readonly Staging: "staging";
    readonly Production: "production";
};
export type CompleteRollingReleaseTarget = ClosedEnum<typeof CompleteRollingReleaseTarget>;
export declare const CompleteRollingReleaseSource: {
    readonly ApiTriggerGitDeploy: "api-trigger-git-deploy";
    readonly Cli: "cli";
    readonly CloneRepo: "clone/repo";
    readonly Git: "git";
    readonly Import: "import";
    readonly ImportRepo: "import/repo";
    readonly Redeploy: "redeploy";
    readonly V0Web: "v0-web";
};
export type CompleteRollingReleaseSource = ClosedEnum<typeof CompleteRollingReleaseSource>;
export declare const CompleteRollingReleaseReadyState: {
    readonly Building: "BUILDING";
    readonly Error: "ERROR";
    readonly Initializing: "INITIALIZING";
    readonly Queued: "QUEUED";
    readonly Ready: "READY";
    readonly Canceled: "CANCELED";
};
export type CompleteRollingReleaseReadyState = ClosedEnum<typeof CompleteRollingReleaseReadyState>;
/**
 * The current deployment receiving production traffic
 */
export type CompleteRollingReleaseCurrentDeployment = {
    id: string;
    name: string;
    url: string;
    target?: CompleteRollingReleaseTarget | null | undefined;
    source?: CompleteRollingReleaseSource | undefined;
    createdAt: number;
    readyState: CompleteRollingReleaseReadyState;
    readyStateAt?: number | undefined;
};
export declare const CompleteRollingReleaseRollingReleaseTarget: {
    readonly Staging: "staging";
    readonly Production: "production";
};
export type CompleteRollingReleaseRollingReleaseTarget = ClosedEnum<typeof CompleteRollingReleaseRollingReleaseTarget>;
export declare const CompleteRollingReleaseRollingReleaseSource: {
    readonly ApiTriggerGitDeploy: "api-trigger-git-deploy";
    readonly Cli: "cli";
    readonly CloneRepo: "clone/repo";
    readonly Git: "git";
    readonly Import: "import";
    readonly ImportRepo: "import/repo";
    readonly Redeploy: "redeploy";
    readonly V0Web: "v0-web";
};
export type CompleteRollingReleaseRollingReleaseSource = ClosedEnum<typeof CompleteRollingReleaseRollingReleaseSource>;
export declare const CompleteRollingReleaseRollingReleaseReadyState: {
    readonly Building: "BUILDING";
    readonly Error: "ERROR";
    readonly Initializing: "INITIALIZING";
    readonly Queued: "QUEUED";
    readonly Ready: "READY";
    readonly Canceled: "CANCELED";
};
export type CompleteRollingReleaseRollingReleaseReadyState = ClosedEnum<typeof CompleteRollingReleaseRollingReleaseReadyState>;
/**
 * The canary deployment being rolled out
 */
export type CompleteRollingReleaseCanaryDeployment = {
    id: string;
    name: string;
    url: string;
    target?: CompleteRollingReleaseRollingReleaseTarget | null | undefined;
    source?: CompleteRollingReleaseRollingReleaseSource | undefined;
    createdAt: number;
    readyState: CompleteRollingReleaseRollingReleaseReadyState;
    readyStateAt?: number | undefined;
};
/**
 * The advancement type of the rolling release
 */
export declare const CompleteRollingReleaseAdvancementType: {
    readonly Automatic: "automatic";
    readonly ManualApproval: "manual-approval";
};
/**
 * The advancement type of the rolling release
 */
export type CompleteRollingReleaseAdvancementType = ClosedEnum<typeof CompleteRollingReleaseAdvancementType>;
/**
 * All stages configured for this rolling release
 */
export type CompleteRollingReleaseStages = {
    /**
     * The zero-based index of the stage
     */
    index: number;
    /**
     * Whether or not this stage is the final stage (targetPercentage === 100)
     */
    isFinalStage: boolean;
    /**
     * The percentage of traffic to serve to the canary deployment (0-100)
     */
    targetPercentage: number;
    /**
     * Whether or not this stage requires manual approval to proceed
     */
    requireApproval: boolean;
    /**
     * Duration in seconds for automatic advancement, null for manual stages or the final stage
     */
    duration: number | null;
};
/**
 * The currently active stage, null if the rollout is aborted
 */
export type CompleteRollingReleaseActiveStage = {
    /**
     * The zero-based index of the stage
     */
    index: number;
    /**
     * Whether or not this stage is the final stage (targetPercentage === 100)
     */
    isFinalStage: boolean;
    /**
     * The percentage of traffic to serve to the canary deployment (0-100)
     */
    targetPercentage: number;
    /**
     * Whether or not this stage requires manual approval to proceed
     */
    requireApproval: boolean;
    /**
     * Duration in seconds for automatic advancement, null for manual stages or the final stage
     */
    duration: number | null;
};
/**
 * The next stage to be activated, null if not in ACTIVE state
 */
export type CompleteRollingReleaseNextStage = {
    /**
     * The zero-based index of the stage
     */
    index: number;
    /**
     * Whether or not this stage is the final stage (targetPercentage === 100)
     */
    isFinalStage: boolean;
    /**
     * The percentage of traffic to serve to the canary deployment (0-100)
     */
    targetPercentage: number;
    /**
     * Whether or not this stage requires manual approval to proceed
     */
    requireApproval: boolean;
    /**
     * Duration in seconds for automatic advancement, null for manual stages or the final stage
     */
    duration: number | null;
};
/**
 * Rolling release information including configuration and document details, or null if no rolling release exists
 */
export type CompleteRollingReleaseRollingRelease = {
    /**
     * The current state of the rolling release
     */
    state: CompleteRollingReleaseState;
    /**
     * The current deployment receiving production traffic
     */
    currentDeployment: CompleteRollingReleaseCurrentDeployment | null;
    /**
     * The canary deployment being rolled out
     */
    canaryDeployment: CompleteRollingReleaseCanaryDeployment | null;
    /**
     * The ID of a deployment queued for the next rolling release
     */
    queuedDeploymentId: string | null;
    /**
     * The advancement type of the rolling release
     */
    advancementType: CompleteRollingReleaseAdvancementType;
    /**
     * All stages configured for this rolling release
     */
    stages: Array<CompleteRollingReleaseStages>;
    /**
     * The currently active stage, null if the rollout is aborted
     */
    activeStage: CompleteRollingReleaseActiveStage | null;
    /**
     * The next stage to be activated, null if not in ACTIVE state
     */
    nextStage: CompleteRollingReleaseNextStage | null;
    /**
     * Unix timestamp in milliseconds when the rolling release started
     */
    startedAt: number;
    /**
     * Unix timestamp in milliseconds when the rolling release was last updated
     */
    updatedAt: number;
};
/**
 * The response format for rolling release endpoints that return rolling release information
 */
export type CompleteRollingReleaseResponseBody = {
    /**
     * Rolling release information including configuration and document details, or null if no rolling release exists
     */
    rollingRelease: CompleteRollingReleaseRollingRelease | null;
};
/** @internal */
export declare const CompleteRollingReleaseRequestBody$inboundSchema: z.ZodType<CompleteRollingReleaseRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type CompleteRollingReleaseRequestBody$Outbound = {
    canaryDeploymentId: string;
};
/** @internal */
export declare const CompleteRollingReleaseRequestBody$outboundSchema: z.ZodType<CompleteRollingReleaseRequestBody$Outbound, z.ZodTypeDef, CompleteRollingReleaseRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CompleteRollingReleaseRequestBody$ {
    /** @deprecated use `CompleteRollingReleaseRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CompleteRollingReleaseRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `CompleteRollingReleaseRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CompleteRollingReleaseRequestBody$Outbound, z.ZodTypeDef, CompleteRollingReleaseRequestBody>;
    /** @deprecated use `CompleteRollingReleaseRequestBody$Outbound` instead. */
    type Outbound = CompleteRollingReleaseRequestBody$Outbound;
}
export declare function completeRollingReleaseRequestBodyToJSON(completeRollingReleaseRequestBody: CompleteRollingReleaseRequestBody): string;
export declare function completeRollingReleaseRequestBodyFromJSON(jsonString: string): SafeParseResult<CompleteRollingReleaseRequestBody, SDKValidationError>;
/** @internal */
export declare const CompleteRollingReleaseRequest$inboundSchema: z.ZodType<CompleteRollingReleaseRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type CompleteRollingReleaseRequest$Outbound = {
    idOrName: string;
    teamId?: string | undefined;
    slug?: string | undefined;
    RequestBody?: CompleteRollingReleaseRequestBody$Outbound | undefined;
};
/** @internal */
export declare const CompleteRollingReleaseRequest$outboundSchema: z.ZodType<CompleteRollingReleaseRequest$Outbound, z.ZodTypeDef, CompleteRollingReleaseRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CompleteRollingReleaseRequest$ {
    /** @deprecated use `CompleteRollingReleaseRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CompleteRollingReleaseRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `CompleteRollingReleaseRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CompleteRollingReleaseRequest$Outbound, z.ZodTypeDef, CompleteRollingReleaseRequest>;
    /** @deprecated use `CompleteRollingReleaseRequest$Outbound` instead. */
    type Outbound = CompleteRollingReleaseRequest$Outbound;
}
export declare function completeRollingReleaseRequestToJSON(completeRollingReleaseRequest: CompleteRollingReleaseRequest): string;
export declare function completeRollingReleaseRequestFromJSON(jsonString: string): SafeParseResult<CompleteRollingReleaseRequest, SDKValidationError>;
/** @internal */
export declare const CompleteRollingReleaseState$inboundSchema: z.ZodNativeEnum<typeof CompleteRollingReleaseState>;
/** @internal */
export declare const CompleteRollingReleaseState$outboundSchema: z.ZodNativeEnum<typeof CompleteRollingReleaseState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CompleteRollingReleaseState$ {
    /** @deprecated use `CompleteRollingReleaseState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Active: "ACTIVE";
        readonly Complete: "COMPLETE";
        readonly Aborted: "ABORTED";
    }>;
    /** @deprecated use `CompleteRollingReleaseState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Active: "ACTIVE";
        readonly Complete: "COMPLETE";
        readonly Aborted: "ABORTED";
    }>;
}
/** @internal */
export declare const CompleteRollingReleaseTarget$inboundSchema: z.ZodNativeEnum<typeof CompleteRollingReleaseTarget>;
/** @internal */
export declare const CompleteRollingReleaseTarget$outboundSchema: z.ZodNativeEnum<typeof CompleteRollingReleaseTarget>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CompleteRollingReleaseTarget$ {
    /** @deprecated use `CompleteRollingReleaseTarget$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Staging: "staging";
        readonly Production: "production";
    }>;
    /** @deprecated use `CompleteRollingReleaseTarget$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Staging: "staging";
        readonly Production: "production";
    }>;
}
/** @internal */
export declare const CompleteRollingReleaseSource$inboundSchema: z.ZodNativeEnum<typeof CompleteRollingReleaseSource>;
/** @internal */
export declare const CompleteRollingReleaseSource$outboundSchema: z.ZodNativeEnum<typeof CompleteRollingReleaseSource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CompleteRollingReleaseSource$ {
    /** @deprecated use `CompleteRollingReleaseSource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly ApiTriggerGitDeploy: "api-trigger-git-deploy";
        readonly Cli: "cli";
        readonly CloneRepo: "clone/repo";
        readonly Git: "git";
        readonly Import: "import";
        readonly ImportRepo: "import/repo";
        readonly Redeploy: "redeploy";
        readonly V0Web: "v0-web";
    }>;
    /** @deprecated use `CompleteRollingReleaseSource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly ApiTriggerGitDeploy: "api-trigger-git-deploy";
        readonly Cli: "cli";
        readonly CloneRepo: "clone/repo";
        readonly Git: "git";
        readonly Import: "import";
        readonly ImportRepo: "import/repo";
        readonly Redeploy: "redeploy";
        readonly V0Web: "v0-web";
    }>;
}
/** @internal */
export declare const CompleteRollingReleaseReadyState$inboundSchema: z.ZodNativeEnum<typeof CompleteRollingReleaseReadyState>;
/** @internal */
export declare const CompleteRollingReleaseReadyState$outboundSchema: z.ZodNativeEnum<typeof CompleteRollingReleaseReadyState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CompleteRollingReleaseReadyState$ {
    /** @deprecated use `CompleteRollingReleaseReadyState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Queued: "QUEUED";
        readonly Ready: "READY";
        readonly Canceled: "CANCELED";
    }>;
    /** @deprecated use `CompleteRollingReleaseReadyState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Queued: "QUEUED";
        readonly Ready: "READY";
        readonly Canceled: "CANCELED";
    }>;
}
/** @internal */
export declare const CompleteRollingReleaseCurrentDeployment$inboundSchema: z.ZodType<CompleteRollingReleaseCurrentDeployment, z.ZodTypeDef, unknown>;
/** @internal */
export type CompleteRollingReleaseCurrentDeployment$Outbound = {
    id: string;
    name: string;
    url: string;
    target?: string | null | undefined;
    source?: string | undefined;
    createdAt: number;
    readyState: string;
    readyStateAt?: number | undefined;
};
/** @internal */
export declare const CompleteRollingReleaseCurrentDeployment$outboundSchema: z.ZodType<CompleteRollingReleaseCurrentDeployment$Outbound, z.ZodTypeDef, CompleteRollingReleaseCurrentDeployment>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CompleteRollingReleaseCurrentDeployment$ {
    /** @deprecated use `CompleteRollingReleaseCurrentDeployment$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CompleteRollingReleaseCurrentDeployment, z.ZodTypeDef, unknown>;
    /** @deprecated use `CompleteRollingReleaseCurrentDeployment$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CompleteRollingReleaseCurrentDeployment$Outbound, z.ZodTypeDef, CompleteRollingReleaseCurrentDeployment>;
    /** @deprecated use `CompleteRollingReleaseCurrentDeployment$Outbound` instead. */
    type Outbound = CompleteRollingReleaseCurrentDeployment$Outbound;
}
export declare function completeRollingReleaseCurrentDeploymentToJSON(completeRollingReleaseCurrentDeployment: CompleteRollingReleaseCurrentDeployment): string;
export declare function completeRollingReleaseCurrentDeploymentFromJSON(jsonString: string): SafeParseResult<CompleteRollingReleaseCurrentDeployment, SDKValidationError>;
/** @internal */
export declare const CompleteRollingReleaseRollingReleaseTarget$inboundSchema: z.ZodNativeEnum<typeof CompleteRollingReleaseRollingReleaseTarget>;
/** @internal */
export declare const CompleteRollingReleaseRollingReleaseTarget$outboundSchema: z.ZodNativeEnum<typeof CompleteRollingReleaseRollingReleaseTarget>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CompleteRollingReleaseRollingReleaseTarget$ {
    /** @deprecated use `CompleteRollingReleaseRollingReleaseTarget$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Staging: "staging";
        readonly Production: "production";
    }>;
    /** @deprecated use `CompleteRollingReleaseRollingReleaseTarget$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Staging: "staging";
        readonly Production: "production";
    }>;
}
/** @internal */
export declare const CompleteRollingReleaseRollingReleaseSource$inboundSchema: z.ZodNativeEnum<typeof CompleteRollingReleaseRollingReleaseSource>;
/** @internal */
export declare const CompleteRollingReleaseRollingReleaseSource$outboundSchema: z.ZodNativeEnum<typeof CompleteRollingReleaseRollingReleaseSource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CompleteRollingReleaseRollingReleaseSource$ {
    /** @deprecated use `CompleteRollingReleaseRollingReleaseSource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly ApiTriggerGitDeploy: "api-trigger-git-deploy";
        readonly Cli: "cli";
        readonly CloneRepo: "clone/repo";
        readonly Git: "git";
        readonly Import: "import";
        readonly ImportRepo: "import/repo";
        readonly Redeploy: "redeploy";
        readonly V0Web: "v0-web";
    }>;
    /** @deprecated use `CompleteRollingReleaseRollingReleaseSource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly ApiTriggerGitDeploy: "api-trigger-git-deploy";
        readonly Cli: "cli";
        readonly CloneRepo: "clone/repo";
        readonly Git: "git";
        readonly Import: "import";
        readonly ImportRepo: "import/repo";
        readonly Redeploy: "redeploy";
        readonly V0Web: "v0-web";
    }>;
}
/** @internal */
export declare const CompleteRollingReleaseRollingReleaseReadyState$inboundSchema: z.ZodNativeEnum<typeof CompleteRollingReleaseRollingReleaseReadyState>;
/** @internal */
export declare const CompleteRollingReleaseRollingReleaseReadyState$outboundSchema: z.ZodNativeEnum<typeof CompleteRollingReleaseRollingReleaseReadyState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CompleteRollingReleaseRollingReleaseReadyState$ {
    /** @deprecated use `CompleteRollingReleaseRollingReleaseReadyState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Queued: "QUEUED";
        readonly Ready: "READY";
        readonly Canceled: "CANCELED";
    }>;
    /** @deprecated use `CompleteRollingReleaseRollingReleaseReadyState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Queued: "QUEUED";
        readonly Ready: "READY";
        readonly Canceled: "CANCELED";
    }>;
}
/** @internal */
export declare const CompleteRollingReleaseCanaryDeployment$inboundSchema: z.ZodType<CompleteRollingReleaseCanaryDeployment, z.ZodTypeDef, unknown>;
/** @internal */
export type CompleteRollingReleaseCanaryDeployment$Outbound = {
    id: string;
    name: string;
    url: string;
    target?: string | null | undefined;
    source?: string | undefined;
    createdAt: number;
    readyState: string;
    readyStateAt?: number | undefined;
};
/** @internal */
export declare const CompleteRollingReleaseCanaryDeployment$outboundSchema: z.ZodType<CompleteRollingReleaseCanaryDeployment$Outbound, z.ZodTypeDef, CompleteRollingReleaseCanaryDeployment>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CompleteRollingReleaseCanaryDeployment$ {
    /** @deprecated use `CompleteRollingReleaseCanaryDeployment$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CompleteRollingReleaseCanaryDeployment, z.ZodTypeDef, unknown>;
    /** @deprecated use `CompleteRollingReleaseCanaryDeployment$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CompleteRollingReleaseCanaryDeployment$Outbound, z.ZodTypeDef, CompleteRollingReleaseCanaryDeployment>;
    /** @deprecated use `CompleteRollingReleaseCanaryDeployment$Outbound` instead. */
    type Outbound = CompleteRollingReleaseCanaryDeployment$Outbound;
}
export declare function completeRollingReleaseCanaryDeploymentToJSON(completeRollingReleaseCanaryDeployment: CompleteRollingReleaseCanaryDeployment): string;
export declare function completeRollingReleaseCanaryDeploymentFromJSON(jsonString: string): SafeParseResult<CompleteRollingReleaseCanaryDeployment, SDKValidationError>;
/** @internal */
export declare const CompleteRollingReleaseAdvancementType$inboundSchema: z.ZodNativeEnum<typeof CompleteRollingReleaseAdvancementType>;
/** @internal */
export declare const CompleteRollingReleaseAdvancementType$outboundSchema: z.ZodNativeEnum<typeof CompleteRollingReleaseAdvancementType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CompleteRollingReleaseAdvancementType$ {
    /** @deprecated use `CompleteRollingReleaseAdvancementType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Automatic: "automatic";
        readonly ManualApproval: "manual-approval";
    }>;
    /** @deprecated use `CompleteRollingReleaseAdvancementType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Automatic: "automatic";
        readonly ManualApproval: "manual-approval";
    }>;
}
/** @internal */
export declare const CompleteRollingReleaseStages$inboundSchema: z.ZodType<CompleteRollingReleaseStages, z.ZodTypeDef, unknown>;
/** @internal */
export type CompleteRollingReleaseStages$Outbound = {
    index: number;
    isFinalStage: boolean;
    targetPercentage: number;
    requireApproval: boolean;
    duration: number | null;
};
/** @internal */
export declare const CompleteRollingReleaseStages$outboundSchema: z.ZodType<CompleteRollingReleaseStages$Outbound, z.ZodTypeDef, CompleteRollingReleaseStages>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CompleteRollingReleaseStages$ {
    /** @deprecated use `CompleteRollingReleaseStages$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CompleteRollingReleaseStages, z.ZodTypeDef, unknown>;
    /** @deprecated use `CompleteRollingReleaseStages$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CompleteRollingReleaseStages$Outbound, z.ZodTypeDef, CompleteRollingReleaseStages>;
    /** @deprecated use `CompleteRollingReleaseStages$Outbound` instead. */
    type Outbound = CompleteRollingReleaseStages$Outbound;
}
export declare function completeRollingReleaseStagesToJSON(completeRollingReleaseStages: CompleteRollingReleaseStages): string;
export declare function completeRollingReleaseStagesFromJSON(jsonString: string): SafeParseResult<CompleteRollingReleaseStages, SDKValidationError>;
/** @internal */
export declare const CompleteRollingReleaseActiveStage$inboundSchema: z.ZodType<CompleteRollingReleaseActiveStage, z.ZodTypeDef, unknown>;
/** @internal */
export type CompleteRollingReleaseActiveStage$Outbound = {
    index: number;
    isFinalStage: boolean;
    targetPercentage: number;
    requireApproval: boolean;
    duration: number | null;
};
/** @internal */
export declare const CompleteRollingReleaseActiveStage$outboundSchema: z.ZodType<CompleteRollingReleaseActiveStage$Outbound, z.ZodTypeDef, CompleteRollingReleaseActiveStage>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CompleteRollingReleaseActiveStage$ {
    /** @deprecated use `CompleteRollingReleaseActiveStage$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CompleteRollingReleaseActiveStage, z.ZodTypeDef, unknown>;
    /** @deprecated use `CompleteRollingReleaseActiveStage$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CompleteRollingReleaseActiveStage$Outbound, z.ZodTypeDef, CompleteRollingReleaseActiveStage>;
    /** @deprecated use `CompleteRollingReleaseActiveStage$Outbound` instead. */
    type Outbound = CompleteRollingReleaseActiveStage$Outbound;
}
export declare function completeRollingReleaseActiveStageToJSON(completeRollingReleaseActiveStage: CompleteRollingReleaseActiveStage): string;
export declare function completeRollingReleaseActiveStageFromJSON(jsonString: string): SafeParseResult<CompleteRollingReleaseActiveStage, SDKValidationError>;
/** @internal */
export declare const CompleteRollingReleaseNextStage$inboundSchema: z.ZodType<CompleteRollingReleaseNextStage, z.ZodTypeDef, unknown>;
/** @internal */
export type CompleteRollingReleaseNextStage$Outbound = {
    index: number;
    isFinalStage: boolean;
    targetPercentage: number;
    requireApproval: boolean;
    duration: number | null;
};
/** @internal */
export declare const CompleteRollingReleaseNextStage$outboundSchema: z.ZodType<CompleteRollingReleaseNextStage$Outbound, z.ZodTypeDef, CompleteRollingReleaseNextStage>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CompleteRollingReleaseNextStage$ {
    /** @deprecated use `CompleteRollingReleaseNextStage$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CompleteRollingReleaseNextStage, z.ZodTypeDef, unknown>;
    /** @deprecated use `CompleteRollingReleaseNextStage$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CompleteRollingReleaseNextStage$Outbound, z.ZodTypeDef, CompleteRollingReleaseNextStage>;
    /** @deprecated use `CompleteRollingReleaseNextStage$Outbound` instead. */
    type Outbound = CompleteRollingReleaseNextStage$Outbound;
}
export declare function completeRollingReleaseNextStageToJSON(completeRollingReleaseNextStage: CompleteRollingReleaseNextStage): string;
export declare function completeRollingReleaseNextStageFromJSON(jsonString: string): SafeParseResult<CompleteRollingReleaseNextStage, SDKValidationError>;
/** @internal */
export declare const CompleteRollingReleaseRollingRelease$inboundSchema: z.ZodType<CompleteRollingReleaseRollingRelease, z.ZodTypeDef, unknown>;
/** @internal */
export type CompleteRollingReleaseRollingRelease$Outbound = {
    state: string;
    currentDeployment: CompleteRollingReleaseCurrentDeployment$Outbound | null;
    canaryDeployment: CompleteRollingReleaseCanaryDeployment$Outbound | null;
    queuedDeploymentId: string | null;
    advancementType: string;
    stages: Array<CompleteRollingReleaseStages$Outbound>;
    activeStage: CompleteRollingReleaseActiveStage$Outbound | null;
    nextStage: CompleteRollingReleaseNextStage$Outbound | null;
    startedAt: number;
    updatedAt: number;
};
/** @internal */
export declare const CompleteRollingReleaseRollingRelease$outboundSchema: z.ZodType<CompleteRollingReleaseRollingRelease$Outbound, z.ZodTypeDef, CompleteRollingReleaseRollingRelease>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CompleteRollingReleaseRollingRelease$ {
    /** @deprecated use `CompleteRollingReleaseRollingRelease$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CompleteRollingReleaseRollingRelease, z.ZodTypeDef, unknown>;
    /** @deprecated use `CompleteRollingReleaseRollingRelease$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CompleteRollingReleaseRollingRelease$Outbound, z.ZodTypeDef, CompleteRollingReleaseRollingRelease>;
    /** @deprecated use `CompleteRollingReleaseRollingRelease$Outbound` instead. */
    type Outbound = CompleteRollingReleaseRollingRelease$Outbound;
}
export declare function completeRollingReleaseRollingReleaseToJSON(completeRollingReleaseRollingRelease: CompleteRollingReleaseRollingRelease): string;
export declare function completeRollingReleaseRollingReleaseFromJSON(jsonString: string): SafeParseResult<CompleteRollingReleaseRollingRelease, SDKValidationError>;
/** @internal */
export declare const CompleteRollingReleaseResponseBody$inboundSchema: z.ZodType<CompleteRollingReleaseResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type CompleteRollingReleaseResponseBody$Outbound = {
    rollingRelease: CompleteRollingReleaseRollingRelease$Outbound | null;
};
/** @internal */
export declare const CompleteRollingReleaseResponseBody$outboundSchema: z.ZodType<CompleteRollingReleaseResponseBody$Outbound, z.ZodTypeDef, CompleteRollingReleaseResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CompleteRollingReleaseResponseBody$ {
    /** @deprecated use `CompleteRollingReleaseResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CompleteRollingReleaseResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `CompleteRollingReleaseResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CompleteRollingReleaseResponseBody$Outbound, z.ZodTypeDef, CompleteRollingReleaseResponseBody>;
    /** @deprecated use `CompleteRollingReleaseResponseBody$Outbound` instead. */
    type Outbound = CompleteRollingReleaseResponseBody$Outbound;
}
export declare function completeRollingReleaseResponseBodyToJSON(completeRollingReleaseResponseBody: CompleteRollingReleaseResponseBody): string;
export declare function completeRollingReleaseResponseBodyFromJSON(jsonString: string): SafeParseResult<CompleteRollingReleaseResponseBody, SDKValidationError>;
//# sourceMappingURL=completerollingreleaseop.d.ts.map