/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/**
 * The grant type, when using x-www-form-urlencoded content type
 */
export const ExchangeSsoTokenGrantType = {
    AuthorizationCode: "authorization_code",
};
/** @internal */
export const ExchangeSsoTokenGrantType$inboundSchema = z.nativeEnum(ExchangeSsoTokenGrantType);
/** @internal */
export const ExchangeSsoTokenGrantType$outboundSchema = ExchangeSsoTokenGrantType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ExchangeSsoTokenGrantType$;
(function (ExchangeSsoTokenGrantType$) {
    /** @deprecated use `ExchangeSsoTokenGrantType$inboundSchema` instead. */
    ExchangeSsoTokenGrantType$.inboundSchema = ExchangeSsoTokenGrantType$inboundSchema;
    /** @deprecated use `ExchangeSsoTokenGrantType$outboundSchema` instead. */
    ExchangeSsoTokenGrantType$.outboundSchema = ExchangeSsoTokenGrantType$outboundSchema;
})(ExchangeSsoTokenGrantType$ || (ExchangeSsoTokenGrantType$ = {}));
/** @internal */
export const ExchangeSsoTokenRequestBody$inboundSchema = z.object({
    code: z.string(),
    state: z.string().optional(),
    client_id: z.string(),
    client_secret: z.string(),
    redirect_uri: z.string().optional(),
    grant_type: ExchangeSsoTokenGrantType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "client_id": "clientId",
        "client_secret": "clientSecret",
        "redirect_uri": "redirectUri",
        "grant_type": "grantType",
    });
});
/** @internal */
export const ExchangeSsoTokenRequestBody$outboundSchema = z.object({
    code: z.string(),
    state: z.string().optional(),
    clientId: z.string(),
    clientSecret: z.string(),
    redirectUri: z.string().optional(),
    grantType: ExchangeSsoTokenGrantType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        clientId: "client_id",
        clientSecret: "client_secret",
        redirectUri: "redirect_uri",
        grantType: "grant_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ExchangeSsoTokenRequestBody$;
(function (ExchangeSsoTokenRequestBody$) {
    /** @deprecated use `ExchangeSsoTokenRequestBody$inboundSchema` instead. */
    ExchangeSsoTokenRequestBody$.inboundSchema = ExchangeSsoTokenRequestBody$inboundSchema;
    /** @deprecated use `ExchangeSsoTokenRequestBody$outboundSchema` instead. */
    ExchangeSsoTokenRequestBody$.outboundSchema = ExchangeSsoTokenRequestBody$outboundSchema;
})(ExchangeSsoTokenRequestBody$ || (ExchangeSsoTokenRequestBody$ = {}));
export function exchangeSsoTokenRequestBodyToJSON(exchangeSsoTokenRequestBody) {
    return JSON.stringify(ExchangeSsoTokenRequestBody$outboundSchema.parse(exchangeSsoTokenRequestBody));
}
export function exchangeSsoTokenRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ExchangeSsoTokenRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ExchangeSsoTokenRequestBody' from JSON`);
}
/** @internal */
export const ExchangeSsoTokenResponseBody$inboundSchema = z.object({
    id_token: z.string(),
    access_token: z.nullable(z.string()),
    token_type: z.nullable(z.string()),
}).transform((v) => {
    return remap$(v, {
        "id_token": "idToken",
        "access_token": "accessToken",
        "token_type": "tokenType",
    });
});
/** @internal */
export const ExchangeSsoTokenResponseBody$outboundSchema = z.object({
    idToken: z.string(),
    accessToken: z.nullable(z.string()),
    tokenType: z.nullable(z.string()),
}).transform((v) => {
    return remap$(v, {
        idToken: "id_token",
        accessToken: "access_token",
        tokenType: "token_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ExchangeSsoTokenResponseBody$;
(function (ExchangeSsoTokenResponseBody$) {
    /** @deprecated use `ExchangeSsoTokenResponseBody$inboundSchema` instead. */
    ExchangeSsoTokenResponseBody$.inboundSchema = ExchangeSsoTokenResponseBody$inboundSchema;
    /** @deprecated use `ExchangeSsoTokenResponseBody$outboundSchema` instead. */
    ExchangeSsoTokenResponseBody$.outboundSchema = ExchangeSsoTokenResponseBody$outboundSchema;
})(ExchangeSsoTokenResponseBody$ || (ExchangeSsoTokenResponseBody$ = {}));
export function exchangeSsoTokenResponseBodyToJSON(exchangeSsoTokenResponseBody) {
    return JSON.stringify(ExchangeSsoTokenResponseBody$outboundSchema.parse(exchangeSsoTokenResponseBody));
}
export function exchangeSsoTokenResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ExchangeSsoTokenResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ExchangeSsoTokenResponseBody' from JSON`);
}
//# sourceMappingURL=exchangessotokenop.js.map