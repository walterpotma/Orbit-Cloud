/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
export const LimitedBy = {
    Scope: "scope",
    Mfa: "mfa",
};
export const TeamLimitedRole = {
    Owner: "OWNER",
    Member: "MEMBER",
    Developer: "DEVELOPER",
    Security: "SECURITY",
    Billing: "BILLING",
    Viewer: "VIEWER",
    ViewerForPlus: "VIEWER_FOR_PLUS",
    Contributor: "CONTRIBUTOR",
};
export const TeamLimitedTeamRoles = {
    Owner: "OWNER",
    Member: "MEMBER",
    Developer: "DEVELOPER",
    Security: "SECURITY",
    Billing: "BILLING",
    Viewer: "VIEWER",
    ViewerForPlus: "VIEWER_FOR_PLUS",
    Contributor: "CONTRIBUTOR",
};
export const TeamLimitedTeamPermissions = {
    IntegrationManager: "IntegrationManager",
    CreateProject: "CreateProject",
    FullProductionDeployment: "FullProductionDeployment",
    UsageViewer: "UsageViewer",
    EnvVariableManager: "EnvVariableManager",
    EnvironmentManager: "EnvironmentManager",
    V0Builder: "V0Builder",
    V0Chatter: "V0Chatter",
    V0Viewer: "V0Viewer",
};
export const TeamLimitedOrigin = {
    Link: "link",
    Saml: "saml",
    Mail: "mail",
    Import: "import",
    Teams: "teams",
    Github: "github",
    Gitlab: "gitlab",
    Bitbucket: "bitbucket",
    Dsync: "dsync",
    Feedback: "feedback",
    OrganizationTeams: "organization-teams",
};
/** @internal */
export const LimitedBy$inboundSchema = z
    .nativeEnum(LimitedBy);
/** @internal */
export const LimitedBy$outboundSchema = LimitedBy$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LimitedBy$;
(function (LimitedBy$) {
    /** @deprecated use `LimitedBy$inboundSchema` instead. */
    LimitedBy$.inboundSchema = LimitedBy$inboundSchema;
    /** @deprecated use `LimitedBy$outboundSchema` instead. */
    LimitedBy$.outboundSchema = LimitedBy$outboundSchema;
})(LimitedBy$ || (LimitedBy$ = {}));
/** @internal */
export const TeamLimitedConnection$inboundSchema = z.object({
    type: z.string(),
    status: z.string(),
    state: z.string(),
    connectedAt: z.number(),
    lastReceivedWebhookEvent: z.number().optional(),
});
/** @internal */
export const TeamLimitedConnection$outboundSchema = z.object({
    type: z.string(),
    status: z.string(),
    state: z.string(),
    connectedAt: z.number(),
    lastReceivedWebhookEvent: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TeamLimitedConnection$;
(function (TeamLimitedConnection$) {
    /** @deprecated use `TeamLimitedConnection$inboundSchema` instead. */
    TeamLimitedConnection$.inboundSchema = TeamLimitedConnection$inboundSchema;
    /** @deprecated use `TeamLimitedConnection$outboundSchema` instead. */
    TeamLimitedConnection$.outboundSchema = TeamLimitedConnection$outboundSchema;
})(TeamLimitedConnection$ || (TeamLimitedConnection$ = {}));
export function teamLimitedConnectionToJSON(teamLimitedConnection) {
    return JSON.stringify(TeamLimitedConnection$outboundSchema.parse(teamLimitedConnection));
}
export function teamLimitedConnectionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TeamLimitedConnection$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TeamLimitedConnection' from JSON`);
}
/** @internal */
export const TeamLimitedDirectory$inboundSchema = z.object({
    type: z.string(),
    state: z.string(),
    connectedAt: z.number(),
    lastReceivedWebhookEvent: z.number().optional(),
});
/** @internal */
export const TeamLimitedDirectory$outboundSchema = z.object({
    type: z.string(),
    state: z.string(),
    connectedAt: z.number(),
    lastReceivedWebhookEvent: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TeamLimitedDirectory$;
(function (TeamLimitedDirectory$) {
    /** @deprecated use `TeamLimitedDirectory$inboundSchema` instead. */
    TeamLimitedDirectory$.inboundSchema = TeamLimitedDirectory$inboundSchema;
    /** @deprecated use `TeamLimitedDirectory$outboundSchema` instead. */
    TeamLimitedDirectory$.outboundSchema = TeamLimitedDirectory$outboundSchema;
})(TeamLimitedDirectory$ || (TeamLimitedDirectory$ = {}));
export function teamLimitedDirectoryToJSON(teamLimitedDirectory) {
    return JSON.stringify(TeamLimitedDirectory$outboundSchema.parse(teamLimitedDirectory));
}
export function teamLimitedDirectoryFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TeamLimitedDirectory$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TeamLimitedDirectory' from JSON`);
}
/** @internal */
export const TeamLimitedSaml$inboundSchema = z.object({
    connection: z.lazy(() => TeamLimitedConnection$inboundSchema).optional(),
    directory: z.lazy(() => TeamLimitedDirectory$inboundSchema).optional(),
    enforced: z.boolean(),
});
/** @internal */
export const TeamLimitedSaml$outboundSchema = z.object({
    connection: z.lazy(() => TeamLimitedConnection$outboundSchema).optional(),
    directory: z.lazy(() => TeamLimitedDirectory$outboundSchema).optional(),
    enforced: z.boolean(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TeamLimitedSaml$;
(function (TeamLimitedSaml$) {
    /** @deprecated use `TeamLimitedSaml$inboundSchema` instead. */
    TeamLimitedSaml$.inboundSchema = TeamLimitedSaml$inboundSchema;
    /** @deprecated use `TeamLimitedSaml$outboundSchema` instead. */
    TeamLimitedSaml$.outboundSchema = TeamLimitedSaml$outboundSchema;
})(TeamLimitedSaml$ || (TeamLimitedSaml$ = {}));
export function teamLimitedSamlToJSON(teamLimitedSaml) {
    return JSON.stringify(TeamLimitedSaml$outboundSchema.parse(teamLimitedSaml));
}
export function teamLimitedSamlFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TeamLimitedSaml$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TeamLimitedSaml' from JSON`);
}
/** @internal */
export const TeamLimitedEntitlements$inboundSchema = z.object({
    entitlement: z.string(),
});
/** @internal */
export const TeamLimitedEntitlements$outboundSchema = z.object({
    entitlement: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TeamLimitedEntitlements$;
(function (TeamLimitedEntitlements$) {
    /** @deprecated use `TeamLimitedEntitlements$inboundSchema` instead. */
    TeamLimitedEntitlements$.inboundSchema = TeamLimitedEntitlements$inboundSchema;
    /** @deprecated use `TeamLimitedEntitlements$outboundSchema` instead. */
    TeamLimitedEntitlements$.outboundSchema = TeamLimitedEntitlements$outboundSchema;
})(TeamLimitedEntitlements$ || (TeamLimitedEntitlements$ = {}));
export function teamLimitedEntitlementsToJSON(teamLimitedEntitlements) {
    return JSON.stringify(TeamLimitedEntitlements$outboundSchema.parse(teamLimitedEntitlements));
}
export function teamLimitedEntitlementsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TeamLimitedEntitlements$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TeamLimitedEntitlements' from JSON`);
}
/** @internal */
export const TeamLimitedRole$inboundSchema = z.nativeEnum(TeamLimitedRole);
/** @internal */
export const TeamLimitedRole$outboundSchema = TeamLimitedRole$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TeamLimitedRole$;
(function (TeamLimitedRole$) {
    /** @deprecated use `TeamLimitedRole$inboundSchema` instead. */
    TeamLimitedRole$.inboundSchema = TeamLimitedRole$inboundSchema;
    /** @deprecated use `TeamLimitedRole$outboundSchema` instead. */
    TeamLimitedRole$.outboundSchema = TeamLimitedRole$outboundSchema;
})(TeamLimitedRole$ || (TeamLimitedRole$ = {}));
/** @internal */
export const TeamLimitedTeamRoles$inboundSchema = z.nativeEnum(TeamLimitedTeamRoles);
/** @internal */
export const TeamLimitedTeamRoles$outboundSchema = TeamLimitedTeamRoles$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TeamLimitedTeamRoles$;
(function (TeamLimitedTeamRoles$) {
    /** @deprecated use `TeamLimitedTeamRoles$inboundSchema` instead. */
    TeamLimitedTeamRoles$.inboundSchema = TeamLimitedTeamRoles$inboundSchema;
    /** @deprecated use `TeamLimitedTeamRoles$outboundSchema` instead. */
    TeamLimitedTeamRoles$.outboundSchema = TeamLimitedTeamRoles$outboundSchema;
})(TeamLimitedTeamRoles$ || (TeamLimitedTeamRoles$ = {}));
/** @internal */
export const TeamLimitedTeamPermissions$inboundSchema = z.nativeEnum(TeamLimitedTeamPermissions);
/** @internal */
export const TeamLimitedTeamPermissions$outboundSchema = TeamLimitedTeamPermissions$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TeamLimitedTeamPermissions$;
(function (TeamLimitedTeamPermissions$) {
    /** @deprecated use `TeamLimitedTeamPermissions$inboundSchema` instead. */
    TeamLimitedTeamPermissions$.inboundSchema = TeamLimitedTeamPermissions$inboundSchema;
    /** @deprecated use `TeamLimitedTeamPermissions$outboundSchema` instead. */
    TeamLimitedTeamPermissions$.outboundSchema = TeamLimitedTeamPermissions$outboundSchema;
})(TeamLimitedTeamPermissions$ || (TeamLimitedTeamPermissions$ = {}));
/** @internal */
export const TeamLimitedOrigin$inboundSchema = z.nativeEnum(TeamLimitedOrigin);
/** @internal */
export const TeamLimitedOrigin$outboundSchema = TeamLimitedOrigin$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TeamLimitedOrigin$;
(function (TeamLimitedOrigin$) {
    /** @deprecated use `TeamLimitedOrigin$inboundSchema` instead. */
    TeamLimitedOrigin$.inboundSchema = TeamLimitedOrigin$inboundSchema;
    /** @deprecated use `TeamLimitedOrigin$outboundSchema` instead. */
    TeamLimitedOrigin$.outboundSchema = TeamLimitedOrigin$outboundSchema;
})(TeamLimitedOrigin$ || (TeamLimitedOrigin$ = {}));
/** @internal */
export const TeamLimitedGitUserId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const TeamLimitedGitUserId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TeamLimitedGitUserId$;
(function (TeamLimitedGitUserId$) {
    /** @deprecated use `TeamLimitedGitUserId$inboundSchema` instead. */
    TeamLimitedGitUserId$.inboundSchema = TeamLimitedGitUserId$inboundSchema;
    /** @deprecated use `TeamLimitedGitUserId$outboundSchema` instead. */
    TeamLimitedGitUserId$.outboundSchema = TeamLimitedGitUserId$outboundSchema;
})(TeamLimitedGitUserId$ || (TeamLimitedGitUserId$ = {}));
export function teamLimitedGitUserIdToJSON(teamLimitedGitUserId) {
    return JSON.stringify(TeamLimitedGitUserId$outboundSchema.parse(teamLimitedGitUserId));
}
export function teamLimitedGitUserIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TeamLimitedGitUserId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TeamLimitedGitUserId' from JSON`);
}
/** @internal */
export const TeamLimitedJoinedFrom$inboundSchema = z.object({
    origin: TeamLimitedOrigin$inboundSchema,
    commitId: z.string().optional(),
    repoId: z.string().optional(),
    repoPath: z.string().optional(),
    gitUserId: z.union([z.string(), z.number()]).optional(),
    gitUserLogin: z.string().optional(),
    ssoUserId: z.string().optional(),
    ssoConnectedAt: z.number().optional(),
    idpUserId: z.string().optional(),
    dsyncUserId: z.string().optional(),
    dsyncConnectedAt: z.number().optional(),
});
/** @internal */
export const TeamLimitedJoinedFrom$outboundSchema = z.object({
    origin: TeamLimitedOrigin$outboundSchema,
    commitId: z.string().optional(),
    repoId: z.string().optional(),
    repoPath: z.string().optional(),
    gitUserId: z.union([z.string(), z.number()]).optional(),
    gitUserLogin: z.string().optional(),
    ssoUserId: z.string().optional(),
    ssoConnectedAt: z.number().optional(),
    idpUserId: z.string().optional(),
    dsyncUserId: z.string().optional(),
    dsyncConnectedAt: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TeamLimitedJoinedFrom$;
(function (TeamLimitedJoinedFrom$) {
    /** @deprecated use `TeamLimitedJoinedFrom$inboundSchema` instead. */
    TeamLimitedJoinedFrom$.inboundSchema = TeamLimitedJoinedFrom$inboundSchema;
    /** @deprecated use `TeamLimitedJoinedFrom$outboundSchema` instead. */
    TeamLimitedJoinedFrom$.outboundSchema = TeamLimitedJoinedFrom$outboundSchema;
})(TeamLimitedJoinedFrom$ || (TeamLimitedJoinedFrom$ = {}));
export function teamLimitedJoinedFromToJSON(teamLimitedJoinedFrom) {
    return JSON.stringify(TeamLimitedJoinedFrom$outboundSchema.parse(teamLimitedJoinedFrom));
}
export function teamLimitedJoinedFromFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TeamLimitedJoinedFrom$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TeamLimitedJoinedFrom' from JSON`);
}
/** @internal */
export const TeamLimitedMembership$inboundSchema = z.object({
    uid: z.string().optional(),
    entitlements: z.array(z.lazy(() => TeamLimitedEntitlements$inboundSchema))
        .optional(),
    teamId: z.string().optional(),
    confirmed: z.boolean(),
    accessRequestedAt: z.number().optional(),
    role: TeamLimitedRole$inboundSchema,
    teamRoles: z.array(TeamLimitedTeamRoles$inboundSchema).optional(),
    teamPermissions: z.array(TeamLimitedTeamPermissions$inboundSchema).optional(),
    createdAt: z.number(),
    created: z.number(),
    joinedFrom: z.lazy(() => TeamLimitedJoinedFrom$inboundSchema).optional(),
});
/** @internal */
export const TeamLimitedMembership$outboundSchema = z.object({
    uid: z.string().optional(),
    entitlements: z.array(z.lazy(() => TeamLimitedEntitlements$outboundSchema))
        .optional(),
    teamId: z.string().optional(),
    confirmed: z.boolean(),
    accessRequestedAt: z.number().optional(),
    role: TeamLimitedRole$outboundSchema,
    teamRoles: z.array(TeamLimitedTeamRoles$outboundSchema).optional(),
    teamPermissions: z.array(TeamLimitedTeamPermissions$outboundSchema)
        .optional(),
    createdAt: z.number(),
    created: z.number(),
    joinedFrom: z.lazy(() => TeamLimitedJoinedFrom$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TeamLimitedMembership$;
(function (TeamLimitedMembership$) {
    /** @deprecated use `TeamLimitedMembership$inboundSchema` instead. */
    TeamLimitedMembership$.inboundSchema = TeamLimitedMembership$inboundSchema;
    /** @deprecated use `TeamLimitedMembership$outboundSchema` instead. */
    TeamLimitedMembership$.outboundSchema = TeamLimitedMembership$outboundSchema;
})(TeamLimitedMembership$ || (TeamLimitedMembership$ = {}));
export function teamLimitedMembershipToJSON(teamLimitedMembership) {
    return JSON.stringify(TeamLimitedMembership$outboundSchema.parse(teamLimitedMembership));
}
export function teamLimitedMembershipFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TeamLimitedMembership$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TeamLimitedMembership' from JSON`);
}
/** @internal */
export const TeamLimited$inboundSchema = z.object({
    limited: z.boolean(),
    limitedBy: z.array(LimitedBy$inboundSchema),
    saml: z.lazy(() => TeamLimitedSaml$inboundSchema).optional(),
    id: z.string(),
    slug: z.string(),
    name: z.nullable(z.string()),
    avatar: z.nullable(z.string()),
    membership: z.lazy(() => TeamLimitedMembership$inboundSchema),
    createdAt: z.number(),
});
/** @internal */
export const TeamLimited$outboundSchema = z.object({
    limited: z.boolean(),
    limitedBy: z.array(LimitedBy$outboundSchema),
    saml: z.lazy(() => TeamLimitedSaml$outboundSchema).optional(),
    id: z.string(),
    slug: z.string(),
    name: z.nullable(z.string()),
    avatar: z.nullable(z.string()),
    membership: z.lazy(() => TeamLimitedMembership$outboundSchema),
    createdAt: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TeamLimited$;
(function (TeamLimited$) {
    /** @deprecated use `TeamLimited$inboundSchema` instead. */
    TeamLimited$.inboundSchema = TeamLimited$inboundSchema;
    /** @deprecated use `TeamLimited$outboundSchema` instead. */
    TeamLimited$.outboundSchema = TeamLimited$outboundSchema;
})(TeamLimited$ || (TeamLimited$ = {}));
export function teamLimitedToJSON(teamLimited) {
    return JSON.stringify(TeamLimited$outboundSchema.parse(teamLimited));
}
export function teamLimitedFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TeamLimited$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TeamLimited' from JSON`);
}
//# sourceMappingURL=teamlimited.js.map