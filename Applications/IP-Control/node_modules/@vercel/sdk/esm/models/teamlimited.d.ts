import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export declare const LimitedBy: {
    readonly Scope: "scope";
    readonly Mfa: "mfa";
};
export type LimitedBy = ClosedEnum<typeof LimitedBy>;
/**
 * Information for the SAML Single Sign-On configuration.
 */
export type TeamLimitedConnection = {
    /**
     * The Identity Provider "type", for example Okta.
     */
    type: string;
    /**
     * Current status of the connection.
     */
    status: string;
    /**
     * Current state of the connection.
     */
    state: string;
    /**
     * Timestamp (in milliseconds) of when the configuration was connected.
     */
    connectedAt: number;
    /**
     * Timestamp (in milliseconds) of when the last webhook event was received from WorkOS.
     */
    lastReceivedWebhookEvent?: number | undefined;
};
/**
 * Information for the Directory Sync configuration.
 */
export type TeamLimitedDirectory = {
    /**
     * The Identity Provider "type", for example Okta.
     */
    type: string;
    /**
     * Current state of the connection.
     */
    state: string;
    /**
     * Timestamp (in milliseconds) of when the configuration was connected.
     */
    connectedAt: number;
    /**
     * Timestamp (in milliseconds) of when the last webhook event was received from WorkOS.
     */
    lastReceivedWebhookEvent?: number | undefined;
};
/**
 * When "Single Sign-On (SAML)" is configured, this object contains information that allows the client-side to identify whether or not this Team has SAML enforced.
 */
export type TeamLimitedSaml = {
    /**
     * Information for the SAML Single Sign-On configuration.
     */
    connection?: TeamLimitedConnection | undefined;
    /**
     * Information for the Directory Sync configuration.
     */
    directory?: TeamLimitedDirectory | undefined;
    /**
     * When `true`, interactions with the Team **must** be done with an authentication token that has been authenticated with the Team's SAML Single Sign-On provider.
     */
    enforced: boolean;
};
export type TeamLimitedEntitlements = {
    entitlement: string;
};
export declare const TeamLimitedRole: {
    readonly Owner: "OWNER";
    readonly Member: "MEMBER";
    readonly Developer: "DEVELOPER";
    readonly Security: "SECURITY";
    readonly Billing: "BILLING";
    readonly Viewer: "VIEWER";
    readonly ViewerForPlus: "VIEWER_FOR_PLUS";
    readonly Contributor: "CONTRIBUTOR";
};
export type TeamLimitedRole = ClosedEnum<typeof TeamLimitedRole>;
export declare const TeamLimitedTeamRoles: {
    readonly Owner: "OWNER";
    readonly Member: "MEMBER";
    readonly Developer: "DEVELOPER";
    readonly Security: "SECURITY";
    readonly Billing: "BILLING";
    readonly Viewer: "VIEWER";
    readonly ViewerForPlus: "VIEWER_FOR_PLUS";
    readonly Contributor: "CONTRIBUTOR";
};
export type TeamLimitedTeamRoles = ClosedEnum<typeof TeamLimitedTeamRoles>;
export declare const TeamLimitedTeamPermissions: {
    readonly IntegrationManager: "IntegrationManager";
    readonly CreateProject: "CreateProject";
    readonly FullProductionDeployment: "FullProductionDeployment";
    readonly UsageViewer: "UsageViewer";
    readonly EnvVariableManager: "EnvVariableManager";
    readonly EnvironmentManager: "EnvironmentManager";
    readonly V0Builder: "V0Builder";
    readonly V0Chatter: "V0Chatter";
    readonly V0Viewer: "V0Viewer";
};
export type TeamLimitedTeamPermissions = ClosedEnum<typeof TeamLimitedTeamPermissions>;
export declare const TeamLimitedOrigin: {
    readonly Link: "link";
    readonly Saml: "saml";
    readonly Mail: "mail";
    readonly Import: "import";
    readonly Teams: "teams";
    readonly Github: "github";
    readonly Gitlab: "gitlab";
    readonly Bitbucket: "bitbucket";
    readonly Dsync: "dsync";
    readonly Feedback: "feedback";
    readonly OrganizationTeams: "organization-teams";
};
export type TeamLimitedOrigin = ClosedEnum<typeof TeamLimitedOrigin>;
export type TeamLimitedGitUserId = string | number;
export type TeamLimitedJoinedFrom = {
    origin: TeamLimitedOrigin;
    commitId?: string | undefined;
    repoId?: string | undefined;
    repoPath?: string | undefined;
    gitUserId?: string | number | undefined;
    gitUserLogin?: string | undefined;
    ssoUserId?: string | undefined;
    ssoConnectedAt?: number | undefined;
    idpUserId?: string | undefined;
    dsyncUserId?: string | undefined;
    dsyncConnectedAt?: number | undefined;
};
/**
 * The membership of the authenticated User in relation to the Team.
 */
export type TeamLimitedMembership = {
    uid?: string | undefined;
    entitlements?: Array<TeamLimitedEntitlements> | undefined;
    teamId?: string | undefined;
    confirmed: boolean;
    accessRequestedAt?: number | undefined;
    role: TeamLimitedRole;
    teamRoles?: Array<TeamLimitedTeamRoles> | undefined;
    teamPermissions?: Array<TeamLimitedTeamPermissions> | undefined;
    createdAt: number;
    created: number;
    joinedFrom?: TeamLimitedJoinedFrom | undefined;
};
/**
 * A limited form of data representing a Team, due to the authentication token missing privileges to read the full Team data.
 */
export type TeamLimited = {
    /**
     * Property indicating that this Team data contains only limited information, due to the authentication token missing privileges to read the full Team data or due to team having MFA enforced and the user not having MFA enabled. Re-login with the Team's configured SAML Single Sign-On provider in order to upgrade the authentication token with the necessary privileges.
     */
    limited: boolean;
    limitedBy: Array<LimitedBy>;
    /**
     * When "Single Sign-On (SAML)" is configured, this object contains information that allows the client-side to identify whether or not this Team has SAML enforced.
     */
    saml?: TeamLimitedSaml | undefined;
    /**
     * The Team's unique identifier.
     */
    id: string;
    /**
     * The Team's slug, which is unique across the Vercel platform.
     */
    slug: string;
    /**
     * Name associated with the Team account, or `null` if none has been provided.
     */
    name: string | null;
    /**
     * The ID of the file used as avatar for this Team.
     */
    avatar: string | null;
    /**
     * The membership of the authenticated User in relation to the Team.
     */
    membership: TeamLimitedMembership;
    /**
     * UNIX timestamp (in milliseconds) when the Team was created.
     */
    createdAt: number;
};
/** @internal */
export declare const LimitedBy$inboundSchema: z.ZodNativeEnum<typeof LimitedBy>;
/** @internal */
export declare const LimitedBy$outboundSchema: z.ZodNativeEnum<typeof LimitedBy>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace LimitedBy$ {
    /** @deprecated use `LimitedBy$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Scope: "scope";
        readonly Mfa: "mfa";
    }>;
    /** @deprecated use `LimitedBy$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Scope: "scope";
        readonly Mfa: "mfa";
    }>;
}
/** @internal */
export declare const TeamLimitedConnection$inboundSchema: z.ZodType<TeamLimitedConnection, z.ZodTypeDef, unknown>;
/** @internal */
export type TeamLimitedConnection$Outbound = {
    type: string;
    status: string;
    state: string;
    connectedAt: number;
    lastReceivedWebhookEvent?: number | undefined;
};
/** @internal */
export declare const TeamLimitedConnection$outboundSchema: z.ZodType<TeamLimitedConnection$Outbound, z.ZodTypeDef, TeamLimitedConnection>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TeamLimitedConnection$ {
    /** @deprecated use `TeamLimitedConnection$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TeamLimitedConnection, z.ZodTypeDef, unknown>;
    /** @deprecated use `TeamLimitedConnection$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TeamLimitedConnection$Outbound, z.ZodTypeDef, TeamLimitedConnection>;
    /** @deprecated use `TeamLimitedConnection$Outbound` instead. */
    type Outbound = TeamLimitedConnection$Outbound;
}
export declare function teamLimitedConnectionToJSON(teamLimitedConnection: TeamLimitedConnection): string;
export declare function teamLimitedConnectionFromJSON(jsonString: string): SafeParseResult<TeamLimitedConnection, SDKValidationError>;
/** @internal */
export declare const TeamLimitedDirectory$inboundSchema: z.ZodType<TeamLimitedDirectory, z.ZodTypeDef, unknown>;
/** @internal */
export type TeamLimitedDirectory$Outbound = {
    type: string;
    state: string;
    connectedAt: number;
    lastReceivedWebhookEvent?: number | undefined;
};
/** @internal */
export declare const TeamLimitedDirectory$outboundSchema: z.ZodType<TeamLimitedDirectory$Outbound, z.ZodTypeDef, TeamLimitedDirectory>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TeamLimitedDirectory$ {
    /** @deprecated use `TeamLimitedDirectory$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TeamLimitedDirectory, z.ZodTypeDef, unknown>;
    /** @deprecated use `TeamLimitedDirectory$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TeamLimitedDirectory$Outbound, z.ZodTypeDef, TeamLimitedDirectory>;
    /** @deprecated use `TeamLimitedDirectory$Outbound` instead. */
    type Outbound = TeamLimitedDirectory$Outbound;
}
export declare function teamLimitedDirectoryToJSON(teamLimitedDirectory: TeamLimitedDirectory): string;
export declare function teamLimitedDirectoryFromJSON(jsonString: string): SafeParseResult<TeamLimitedDirectory, SDKValidationError>;
/** @internal */
export declare const TeamLimitedSaml$inboundSchema: z.ZodType<TeamLimitedSaml, z.ZodTypeDef, unknown>;
/** @internal */
export type TeamLimitedSaml$Outbound = {
    connection?: TeamLimitedConnection$Outbound | undefined;
    directory?: TeamLimitedDirectory$Outbound | undefined;
    enforced: boolean;
};
/** @internal */
export declare const TeamLimitedSaml$outboundSchema: z.ZodType<TeamLimitedSaml$Outbound, z.ZodTypeDef, TeamLimitedSaml>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TeamLimitedSaml$ {
    /** @deprecated use `TeamLimitedSaml$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TeamLimitedSaml, z.ZodTypeDef, unknown>;
    /** @deprecated use `TeamLimitedSaml$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TeamLimitedSaml$Outbound, z.ZodTypeDef, TeamLimitedSaml>;
    /** @deprecated use `TeamLimitedSaml$Outbound` instead. */
    type Outbound = TeamLimitedSaml$Outbound;
}
export declare function teamLimitedSamlToJSON(teamLimitedSaml: TeamLimitedSaml): string;
export declare function teamLimitedSamlFromJSON(jsonString: string): SafeParseResult<TeamLimitedSaml, SDKValidationError>;
/** @internal */
export declare const TeamLimitedEntitlements$inboundSchema: z.ZodType<TeamLimitedEntitlements, z.ZodTypeDef, unknown>;
/** @internal */
export type TeamLimitedEntitlements$Outbound = {
    entitlement: string;
};
/** @internal */
export declare const TeamLimitedEntitlements$outboundSchema: z.ZodType<TeamLimitedEntitlements$Outbound, z.ZodTypeDef, TeamLimitedEntitlements>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TeamLimitedEntitlements$ {
    /** @deprecated use `TeamLimitedEntitlements$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TeamLimitedEntitlements, z.ZodTypeDef, unknown>;
    /** @deprecated use `TeamLimitedEntitlements$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TeamLimitedEntitlements$Outbound, z.ZodTypeDef, TeamLimitedEntitlements>;
    /** @deprecated use `TeamLimitedEntitlements$Outbound` instead. */
    type Outbound = TeamLimitedEntitlements$Outbound;
}
export declare function teamLimitedEntitlementsToJSON(teamLimitedEntitlements: TeamLimitedEntitlements): string;
export declare function teamLimitedEntitlementsFromJSON(jsonString: string): SafeParseResult<TeamLimitedEntitlements, SDKValidationError>;
/** @internal */
export declare const TeamLimitedRole$inboundSchema: z.ZodNativeEnum<typeof TeamLimitedRole>;
/** @internal */
export declare const TeamLimitedRole$outboundSchema: z.ZodNativeEnum<typeof TeamLimitedRole>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TeamLimitedRole$ {
    /** @deprecated use `TeamLimitedRole$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly ViewerForPlus: "VIEWER_FOR_PLUS";
        readonly Contributor: "CONTRIBUTOR";
    }>;
    /** @deprecated use `TeamLimitedRole$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly ViewerForPlus: "VIEWER_FOR_PLUS";
        readonly Contributor: "CONTRIBUTOR";
    }>;
}
/** @internal */
export declare const TeamLimitedTeamRoles$inboundSchema: z.ZodNativeEnum<typeof TeamLimitedTeamRoles>;
/** @internal */
export declare const TeamLimitedTeamRoles$outboundSchema: z.ZodNativeEnum<typeof TeamLimitedTeamRoles>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TeamLimitedTeamRoles$ {
    /** @deprecated use `TeamLimitedTeamRoles$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly ViewerForPlus: "VIEWER_FOR_PLUS";
        readonly Contributor: "CONTRIBUTOR";
    }>;
    /** @deprecated use `TeamLimitedTeamRoles$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly ViewerForPlus: "VIEWER_FOR_PLUS";
        readonly Contributor: "CONTRIBUTOR";
    }>;
}
/** @internal */
export declare const TeamLimitedTeamPermissions$inboundSchema: z.ZodNativeEnum<typeof TeamLimitedTeamPermissions>;
/** @internal */
export declare const TeamLimitedTeamPermissions$outboundSchema: z.ZodNativeEnum<typeof TeamLimitedTeamPermissions>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TeamLimitedTeamPermissions$ {
    /** @deprecated use `TeamLimitedTeamPermissions$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly IntegrationManager: "IntegrationManager";
        readonly CreateProject: "CreateProject";
        readonly FullProductionDeployment: "FullProductionDeployment";
        readonly UsageViewer: "UsageViewer";
        readonly EnvVariableManager: "EnvVariableManager";
        readonly EnvironmentManager: "EnvironmentManager";
        readonly V0Builder: "V0Builder";
        readonly V0Chatter: "V0Chatter";
        readonly V0Viewer: "V0Viewer";
    }>;
    /** @deprecated use `TeamLimitedTeamPermissions$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly IntegrationManager: "IntegrationManager";
        readonly CreateProject: "CreateProject";
        readonly FullProductionDeployment: "FullProductionDeployment";
        readonly UsageViewer: "UsageViewer";
        readonly EnvVariableManager: "EnvVariableManager";
        readonly EnvironmentManager: "EnvironmentManager";
        readonly V0Builder: "V0Builder";
        readonly V0Chatter: "V0Chatter";
        readonly V0Viewer: "V0Viewer";
    }>;
}
/** @internal */
export declare const TeamLimitedOrigin$inboundSchema: z.ZodNativeEnum<typeof TeamLimitedOrigin>;
/** @internal */
export declare const TeamLimitedOrigin$outboundSchema: z.ZodNativeEnum<typeof TeamLimitedOrigin>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TeamLimitedOrigin$ {
    /** @deprecated use `TeamLimitedOrigin$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Link: "link";
        readonly Saml: "saml";
        readonly Mail: "mail";
        readonly Import: "import";
        readonly Teams: "teams";
        readonly Github: "github";
        readonly Gitlab: "gitlab";
        readonly Bitbucket: "bitbucket";
        readonly Dsync: "dsync";
        readonly Feedback: "feedback";
        readonly OrganizationTeams: "organization-teams";
    }>;
    /** @deprecated use `TeamLimitedOrigin$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Link: "link";
        readonly Saml: "saml";
        readonly Mail: "mail";
        readonly Import: "import";
        readonly Teams: "teams";
        readonly Github: "github";
        readonly Gitlab: "gitlab";
        readonly Bitbucket: "bitbucket";
        readonly Dsync: "dsync";
        readonly Feedback: "feedback";
        readonly OrganizationTeams: "organization-teams";
    }>;
}
/** @internal */
export declare const TeamLimitedGitUserId$inboundSchema: z.ZodType<TeamLimitedGitUserId, z.ZodTypeDef, unknown>;
/** @internal */
export type TeamLimitedGitUserId$Outbound = string | number;
/** @internal */
export declare const TeamLimitedGitUserId$outboundSchema: z.ZodType<TeamLimitedGitUserId$Outbound, z.ZodTypeDef, TeamLimitedGitUserId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TeamLimitedGitUserId$ {
    /** @deprecated use `TeamLimitedGitUserId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TeamLimitedGitUserId, z.ZodTypeDef, unknown>;
    /** @deprecated use `TeamLimitedGitUserId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TeamLimitedGitUserId$Outbound, z.ZodTypeDef, TeamLimitedGitUserId>;
    /** @deprecated use `TeamLimitedGitUserId$Outbound` instead. */
    type Outbound = TeamLimitedGitUserId$Outbound;
}
export declare function teamLimitedGitUserIdToJSON(teamLimitedGitUserId: TeamLimitedGitUserId): string;
export declare function teamLimitedGitUserIdFromJSON(jsonString: string): SafeParseResult<TeamLimitedGitUserId, SDKValidationError>;
/** @internal */
export declare const TeamLimitedJoinedFrom$inboundSchema: z.ZodType<TeamLimitedJoinedFrom, z.ZodTypeDef, unknown>;
/** @internal */
export type TeamLimitedJoinedFrom$Outbound = {
    origin: string;
    commitId?: string | undefined;
    repoId?: string | undefined;
    repoPath?: string | undefined;
    gitUserId?: string | number | undefined;
    gitUserLogin?: string | undefined;
    ssoUserId?: string | undefined;
    ssoConnectedAt?: number | undefined;
    idpUserId?: string | undefined;
    dsyncUserId?: string | undefined;
    dsyncConnectedAt?: number | undefined;
};
/** @internal */
export declare const TeamLimitedJoinedFrom$outboundSchema: z.ZodType<TeamLimitedJoinedFrom$Outbound, z.ZodTypeDef, TeamLimitedJoinedFrom>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TeamLimitedJoinedFrom$ {
    /** @deprecated use `TeamLimitedJoinedFrom$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TeamLimitedJoinedFrom, z.ZodTypeDef, unknown>;
    /** @deprecated use `TeamLimitedJoinedFrom$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TeamLimitedJoinedFrom$Outbound, z.ZodTypeDef, TeamLimitedJoinedFrom>;
    /** @deprecated use `TeamLimitedJoinedFrom$Outbound` instead. */
    type Outbound = TeamLimitedJoinedFrom$Outbound;
}
export declare function teamLimitedJoinedFromToJSON(teamLimitedJoinedFrom: TeamLimitedJoinedFrom): string;
export declare function teamLimitedJoinedFromFromJSON(jsonString: string): SafeParseResult<TeamLimitedJoinedFrom, SDKValidationError>;
/** @internal */
export declare const TeamLimitedMembership$inboundSchema: z.ZodType<TeamLimitedMembership, z.ZodTypeDef, unknown>;
/** @internal */
export type TeamLimitedMembership$Outbound = {
    uid?: string | undefined;
    entitlements?: Array<TeamLimitedEntitlements$Outbound> | undefined;
    teamId?: string | undefined;
    confirmed: boolean;
    accessRequestedAt?: number | undefined;
    role: string;
    teamRoles?: Array<string> | undefined;
    teamPermissions?: Array<string> | undefined;
    createdAt: number;
    created: number;
    joinedFrom?: TeamLimitedJoinedFrom$Outbound | undefined;
};
/** @internal */
export declare const TeamLimitedMembership$outboundSchema: z.ZodType<TeamLimitedMembership$Outbound, z.ZodTypeDef, TeamLimitedMembership>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TeamLimitedMembership$ {
    /** @deprecated use `TeamLimitedMembership$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TeamLimitedMembership, z.ZodTypeDef, unknown>;
    /** @deprecated use `TeamLimitedMembership$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TeamLimitedMembership$Outbound, z.ZodTypeDef, TeamLimitedMembership>;
    /** @deprecated use `TeamLimitedMembership$Outbound` instead. */
    type Outbound = TeamLimitedMembership$Outbound;
}
export declare function teamLimitedMembershipToJSON(teamLimitedMembership: TeamLimitedMembership): string;
export declare function teamLimitedMembershipFromJSON(jsonString: string): SafeParseResult<TeamLimitedMembership, SDKValidationError>;
/** @internal */
export declare const TeamLimited$inboundSchema: z.ZodType<TeamLimited, z.ZodTypeDef, unknown>;
/** @internal */
export type TeamLimited$Outbound = {
    limited: boolean;
    limitedBy: Array<string>;
    saml?: TeamLimitedSaml$Outbound | undefined;
    id: string;
    slug: string;
    name: string | null;
    avatar: string | null;
    membership: TeamLimitedMembership$Outbound;
    createdAt: number;
};
/** @internal */
export declare const TeamLimited$outboundSchema: z.ZodType<TeamLimited$Outbound, z.ZodTypeDef, TeamLimited>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TeamLimited$ {
    /** @deprecated use `TeamLimited$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TeamLimited, z.ZodTypeDef, unknown>;
    /** @deprecated use `TeamLimited$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TeamLimited$Outbound, z.ZodTypeDef, TeamLimited>;
    /** @deprecated use `TeamLimited$Outbound` instead. */
    type Outbound = TeamLimited$Outbound;
}
export declare function teamLimitedToJSON(teamLimited: TeamLimited): string;
export declare function teamLimitedFromJSON(jsonString: string): SafeParseResult<TeamLimited, SDKValidationError>;
//# sourceMappingURL=teamlimited.d.ts.map