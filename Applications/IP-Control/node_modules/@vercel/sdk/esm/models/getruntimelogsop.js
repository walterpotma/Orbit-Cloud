/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
export const GetRuntimeLogsLevel = {
    Error: "error",
    Warning: "warning",
    Info: "info",
};
export const GetRuntimeLogsSource = {
    Delimiter: "delimiter",
    EdgeFunction: "edge-function",
    EdgeMiddleware: "edge-middleware",
    Serverless: "serverless",
    Request: "request",
};
/** @internal */
export const GetRuntimeLogsRequest$inboundSchema = z.object({
    projectId: z.string(),
    deploymentId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/** @internal */
export const GetRuntimeLogsRequest$outboundSchema = z.object({
    projectId: z.string(),
    deploymentId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetRuntimeLogsRequest$;
(function (GetRuntimeLogsRequest$) {
    /** @deprecated use `GetRuntimeLogsRequest$inboundSchema` instead. */
    GetRuntimeLogsRequest$.inboundSchema = GetRuntimeLogsRequest$inboundSchema;
    /** @deprecated use `GetRuntimeLogsRequest$outboundSchema` instead. */
    GetRuntimeLogsRequest$.outboundSchema = GetRuntimeLogsRequest$outboundSchema;
})(GetRuntimeLogsRequest$ || (GetRuntimeLogsRequest$ = {}));
export function getRuntimeLogsRequestToJSON(getRuntimeLogsRequest) {
    return JSON.stringify(GetRuntimeLogsRequest$outboundSchema.parse(getRuntimeLogsRequest));
}
export function getRuntimeLogsRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetRuntimeLogsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetRuntimeLogsRequest' from JSON`);
}
/** @internal */
export const GetRuntimeLogsLevel$inboundSchema = z.nativeEnum(GetRuntimeLogsLevel);
/** @internal */
export const GetRuntimeLogsLevel$outboundSchema = GetRuntimeLogsLevel$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetRuntimeLogsLevel$;
(function (GetRuntimeLogsLevel$) {
    /** @deprecated use `GetRuntimeLogsLevel$inboundSchema` instead. */
    GetRuntimeLogsLevel$.inboundSchema = GetRuntimeLogsLevel$inboundSchema;
    /** @deprecated use `GetRuntimeLogsLevel$outboundSchema` instead. */
    GetRuntimeLogsLevel$.outboundSchema = GetRuntimeLogsLevel$outboundSchema;
})(GetRuntimeLogsLevel$ || (GetRuntimeLogsLevel$ = {}));
/** @internal */
export const GetRuntimeLogsSource$inboundSchema = z.nativeEnum(GetRuntimeLogsSource);
/** @internal */
export const GetRuntimeLogsSource$outboundSchema = GetRuntimeLogsSource$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetRuntimeLogsSource$;
(function (GetRuntimeLogsSource$) {
    /** @deprecated use `GetRuntimeLogsSource$inboundSchema` instead. */
    GetRuntimeLogsSource$.inboundSchema = GetRuntimeLogsSource$inboundSchema;
    /** @deprecated use `GetRuntimeLogsSource$outboundSchema` instead. */
    GetRuntimeLogsSource$.outboundSchema = GetRuntimeLogsSource$outboundSchema;
})(GetRuntimeLogsSource$ || (GetRuntimeLogsSource$ = {}));
/** @internal */
export const GetRuntimeLogsResponseBody$inboundSchema = z.object({
    level: GetRuntimeLogsLevel$inboundSchema,
    message: z.string(),
    rowId: z.string(),
    source: GetRuntimeLogsSource$inboundSchema,
    timestampInMs: z.number(),
    domain: z.string(),
    messageTruncated: z.boolean(),
    requestMethod: z.string(),
    requestPath: z.string(),
    responseStatusCode: z.number(),
});
/** @internal */
export const GetRuntimeLogsResponseBody$outboundSchema = z.object({
    level: GetRuntimeLogsLevel$outboundSchema,
    message: z.string(),
    rowId: z.string(),
    source: GetRuntimeLogsSource$outboundSchema,
    timestampInMs: z.number(),
    domain: z.string(),
    messageTruncated: z.boolean(),
    requestMethod: z.string(),
    requestPath: z.string(),
    responseStatusCode: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetRuntimeLogsResponseBody$;
(function (GetRuntimeLogsResponseBody$) {
    /** @deprecated use `GetRuntimeLogsResponseBody$inboundSchema` instead. */
    GetRuntimeLogsResponseBody$.inboundSchema = GetRuntimeLogsResponseBody$inboundSchema;
    /** @deprecated use `GetRuntimeLogsResponseBody$outboundSchema` instead. */
    GetRuntimeLogsResponseBody$.outboundSchema = GetRuntimeLogsResponseBody$outboundSchema;
})(GetRuntimeLogsResponseBody$ || (GetRuntimeLogsResponseBody$ = {}));
export function getRuntimeLogsResponseBodyToJSON(getRuntimeLogsResponseBody) {
    return JSON.stringify(GetRuntimeLogsResponseBody$outboundSchema.parse(getRuntimeLogsResponseBody));
}
export function getRuntimeLogsResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetRuntimeLogsResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetRuntimeLogsResponseBody' from JSON`);
}
//# sourceMappingURL=getruntimelogsop.js.map