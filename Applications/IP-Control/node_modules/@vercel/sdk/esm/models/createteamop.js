/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
/** @internal */
export const Utm$inboundSchema = z
    .object({
    utmSource: z.string().optional(),
    utmMedium: z.string().optional(),
    utmCampaign: z.string().optional(),
    utmTerm: z.string().optional(),
});
/** @internal */
export const Utm$outboundSchema = z
    .object({
    utmSource: z.string().optional(),
    utmMedium: z.string().optional(),
    utmCampaign: z.string().optional(),
    utmTerm: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Utm$;
(function (Utm$) {
    /** @deprecated use `Utm$inboundSchema` instead. */
    Utm$.inboundSchema = Utm$inboundSchema;
    /** @deprecated use `Utm$outboundSchema` instead. */
    Utm$.outboundSchema = Utm$outboundSchema;
})(Utm$ || (Utm$ = {}));
export function utmToJSON(utm) {
    return JSON.stringify(Utm$outboundSchema.parse(utm));
}
export function utmFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Utm$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Utm' from JSON`);
}
/** @internal */
export const Attribution$inboundSchema = z.object({
    sessionReferrer: z.string().optional(),
    landingPage: z.string().optional(),
    pageBeforeConversionPage: z.string().optional(),
    utm: z.lazy(() => Utm$inboundSchema).optional(),
});
/** @internal */
export const Attribution$outboundSchema = z.object({
    sessionReferrer: z.string().optional(),
    landingPage: z.string().optional(),
    pageBeforeConversionPage: z.string().optional(),
    utm: z.lazy(() => Utm$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Attribution$;
(function (Attribution$) {
    /** @deprecated use `Attribution$inboundSchema` instead. */
    Attribution$.inboundSchema = Attribution$inboundSchema;
    /** @deprecated use `Attribution$outboundSchema` instead. */
    Attribution$.outboundSchema = Attribution$outboundSchema;
})(Attribution$ || (Attribution$ = {}));
export function attributionToJSON(attribution) {
    return JSON.stringify(Attribution$outboundSchema.parse(attribution));
}
export function attributionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Attribution$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Attribution' from JSON`);
}
/** @internal */
export const CreateTeamRequestBody$inboundSchema = z.object({
    slug: z.string(),
    name: z.string().optional(),
    attribution: z.lazy(() => Attribution$inboundSchema).optional(),
});
/** @internal */
export const CreateTeamRequestBody$outboundSchema = z.object({
    slug: z.string(),
    name: z.string().optional(),
    attribution: z.lazy(() => Attribution$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateTeamRequestBody$;
(function (CreateTeamRequestBody$) {
    /** @deprecated use `CreateTeamRequestBody$inboundSchema` instead. */
    CreateTeamRequestBody$.inboundSchema = CreateTeamRequestBody$inboundSchema;
    /** @deprecated use `CreateTeamRequestBody$outboundSchema` instead. */
    CreateTeamRequestBody$.outboundSchema = CreateTeamRequestBody$outboundSchema;
})(CreateTeamRequestBody$ || (CreateTeamRequestBody$ = {}));
export function createTeamRequestBodyToJSON(createTeamRequestBody) {
    return JSON.stringify(CreateTeamRequestBody$outboundSchema.parse(createTeamRequestBody));
}
export function createTeamRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateTeamRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateTeamRequestBody' from JSON`);
}
/** @internal */
export const CreateTeamResponseBody$inboundSchema = z.object({
    id: z.string(),
    slug: z.string(),
});
/** @internal */
export const CreateTeamResponseBody$outboundSchema = z.object({
    id: z.string(),
    slug: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateTeamResponseBody$;
(function (CreateTeamResponseBody$) {
    /** @deprecated use `CreateTeamResponseBody$inboundSchema` instead. */
    CreateTeamResponseBody$.inboundSchema = CreateTeamResponseBody$inboundSchema;
    /** @deprecated use `CreateTeamResponseBody$outboundSchema` instead. */
    CreateTeamResponseBody$.outboundSchema = CreateTeamResponseBody$outboundSchema;
})(CreateTeamResponseBody$ || (CreateTeamResponseBody$ = {}));
export function createTeamResponseBodyToJSON(createTeamResponseBody) {
    return JSON.stringify(CreateTeamResponseBody$outboundSchema.parse(createTeamResponseBody));
}
export function createTeamResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateTeamResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateTeamResponseBody' from JSON`);
}
//# sourceMappingURL=createteamop.js.map