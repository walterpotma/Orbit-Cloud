/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { marketplaceSubmitInvoice } from "../../funcs/marketplaceSubmitInvoice.js";
import { SubmitInvoiceRequest$inboundSchema } from "../../models/submitinvoiceop.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: SubmitInvoiceRequest$inboundSchema,
};

export const tool$marketplaceSubmitInvoice: ToolDefinition<typeof args> = {
  name: "marketplace-submit-invoice",
  description: `Submit Invoice

This endpoint allows the partner to submit an invoice to Vercel. The invoice is created in Vercel's billing system and sent to the customer. Depending on the type of billing plan, the invoice can be sent at a time of signup, at the start of the billing period, or at the end of the billing period.<br/> <br/> Use the \`credentials.access_token\` we provided in the [Upsert Installation](#upsert-installation) body to authorize this request. <br/> There are several limitations to the invoice submission:<br/> <br/> 1. A resource can only be billed once per the billing period and the billing plan.<br/> 2. The billing plan used to bill the resource must have been active for this resource during the billing period.<br/> 3. The billing plan used must be a subscription plan.<br/> 4. The interim usage data must be sent hourly for all types of subscriptions. See [Send subscription billing and usage data](#send-subscription-billing-and-usage-data) API on how to send interim billing and usage data.<br/>`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await marketplaceSubmitInvoice(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
