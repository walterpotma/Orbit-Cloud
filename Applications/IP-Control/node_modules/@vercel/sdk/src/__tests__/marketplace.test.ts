/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { assert, expect, it, test } from "vitest";
import { Vercel } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Marketplace Get Account Info", async () => {
  const testHttpClient = createTestHTTPClient("get-account-info");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.marketplace.getAccountInfo({
    integrationConfigurationId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    url: "https://joyful-mouser.com/",
    contact: {
      email: "Cecile47@yahoo.com",
    },
  });
});

test("Marketplace Get Member", async () => {
  const testHttpClient = createTestHTTPClient("get-member");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.marketplace.getMember({
    integrationConfigurationId: "<id>",
    memberId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    id: "<id>",
    role: "USER",
  });
});

test("Marketplace Create Event", async () => {
  const testHttpClient = createTestHTTPClient("create-event");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  await vercel.marketplace.createEvent({
    integrationConfigurationId: "<id>",
    requestBody: {
      event: {
        type: "installation.updated",
      },
    },
  });
});

test("Marketplace Submit Billing Data", async () => {
  const testHttpClient = createTestHTTPClient("submit-billing-data");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  await vercel.marketplace.submitBillingData({
    integrationConfigurationId: "<id>",
    requestBody: {
      timestamp: new Date("2023-11-26T05:03:03.977Z"),
      eod: new Date("2023-04-14T04:58:49.647Z"),
      period: {
        start: new Date("2023-03-12T13:32:00.895Z"),
        end: new Date("2023-12-15T15:17:13.187Z"),
      },
      billing: [
        {
          billingPlanId: "<id>",
          name: "<value>",
          price: "694.00",
          quantity: 228.64,
          units: "<value>",
          total: "<value>",
        },
        {
          billingPlanId: "<id>",
          name: "<value>",
          price: "694.00",
          quantity: 228.64,
          units: "<value>",
          total: "<value>",
        },
      ],
      usage: [
        {
          name: "<value>",
          type: "interval",
          units: "<value>",
          dayValue: 5212.43,
          periodValue: 4147.35,
        },
        {
          name: "<value>",
          type: "interval",
          units: "<value>",
          dayValue: 5212.43,
          periodValue: 4147.35,
        },
        {
          name: "<value>",
          type: "interval",
          units: "<value>",
          dayValue: 5212.43,
          periodValue: 4147.35,
        },
      ],
    },
  });
});

test("Marketplace Submit Invoice", async () => {
  const testHttpClient = createTestHTTPClient("submit-invoice");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.marketplace.submitInvoice({
    integrationConfigurationId: "<id>",
    requestBody: {
      invoiceDate: new Date("2023-12-12T13:24:35.882Z"),
      period: {
        start: new Date("2024-10-20T02:46:19.279Z"),
        end: new Date("2025-06-06T21:30:28.107Z"),
      },
      items: [
        {
          billingPlanId: "<id>",
          name: "<value>",
          price: "469.29",
          quantity: 3808.42,
          units: "<value>",
          total: "<value>",
        },
        {
          billingPlanId: "<id>",
          name: "<value>",
          price: "469.29",
          quantity: 3808.42,
          units: "<value>",
          total: "<value>",
        },
      ],
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Marketplace Get Invoice", async () => {
  const testHttpClient = createTestHTTPClient("get-invoice");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.marketplace.getInvoice({
    integrationConfigurationId: "<id>",
    invoiceId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    invoiceId: "<id>",
    state: "invoiced",
    invoiceDate: "<value>",
    period: {
      start: "<value>",
      end: "<value>",
    },
    items: [
      {
        billingPlanId: "<id>",
        name: "<value>",
        price: "354.65",
        quantity: 4602.57,
        units: "<value>",
        total: "<value>",
      },
    ],
    total: "<value>",
    created: "<value>",
    updated: "<value>",
  });
});

test("Marketplace Update Invoice", async () => {
  const testHttpClient = createTestHTTPClient("update-invoice");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  await vercel.marketplace.updateInvoice({
    integrationConfigurationId: "<id>",
    invoiceId: "<id>",
    requestBody: {
      action: "refund",
      reason: "<value>",
      total: "<value>",
    },
  });
});

test("Marketplace Submit Prepayment Balances", async () => {
  const testHttpClient = createTestHTTPClient("submit-prepayment-balances");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  await vercel.marketplace.submitPrepaymentBalances({
    integrationConfigurationId: "<id>",
  });
});

test("Marketplace Update Resource Secrets", async () => {
  const testHttpClient = createTestHTTPClient("update-resource-secrets");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  await vercel.marketplace.updateResourceSecrets({
    integrationConfigurationId: "<id>",
    integrationProductIdOrSlug: "<value>",
    resourceId: "<id>",
    requestBody: {
      secrets: [],
    },
  });
});

test("Marketplace Update Resource Secrets By Id", async () => {
  const testHttpClient = createTestHTTPClient("update-resource-secrets-by-id");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  await vercel.marketplace.updateResourceSecretsById({
    integrationConfigurationId: "<id>",
    resourceId: "<id>",
  });
});

test("Marketplace Import Resource", async () => {
  const testHttpClient = createTestHTTPClient("import-resource");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.marketplace.importResource({
    integrationConfigurationId: "<id>",
    resourceId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    name: "<value>",
  });
});

test("Marketplace Exchange Sso Token", async () => {
  const testHttpClient = createTestHTTPClient("exchange-sso-token");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
  });

  const result = await vercel.marketplace.exchangeSsoToken({
    code: "<value>",
    clientId: "<id>",
    clientSecret: "<value>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    idToken: "<value>",
    accessToken: "<value>",
    tokenType: "<value>",
  });
});

test("Marketplace Post /V1 /Installations/{integration Configuration Id}/resources/{resource Id}/experimentation/items", async () => {
  const testHttpClient = createTestHTTPClient(
    "post_/v1/installations/{integrationConfigurationId}/resources/{resourceId}/experimentation/items",
  );

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  await vercel.marketplace.createInstallationIntegrationConfiguration({
    integrationConfigurationId: "<id>",
    resourceId: "<id>",
  });
});

test("Marketplace Patch /V1 /Installations/{integration Configuration Id}/resources/{resource Id}/experimentation/items/{item Id}", async () => {
  const testHttpClient = createTestHTTPClient(
    "patch_/v1/installations/{integrationConfigurationId}/resources/{resourceId}/experimentation/items/{itemId}",
  );

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  await vercel.marketplace.updateInstallationIntegrationConfiguration({
    integrationConfigurationId: "<id>",
    resourceId: "<id>",
    itemId: "<id>",
  });
});

test("Marketplace Delete /V1 /Installations/{integration Configuration Id}/resources/{resource Id}/experimentation/items/{item Id}", async () => {
  const testHttpClient = createTestHTTPClient(
    "delete_/v1/installations/{integrationConfigurationId}/resources/{resourceId}/experimentation/items/{itemId}",
  );

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  await vercel.marketplace.deleteInstallationIntegrationConfiguration({
    integrationConfigurationId: "<id>",
    resourceId: "<id>",
    itemId: "<id>",
  });
});

test("Marketplace Put /V1 /Installations/{integration Configuration Id}/resources/{resource Id}/experimentation/edge Config", async () => {
  const testHttpClient = createTestHTTPClient(
    "put_/v1/installations/{integrationConfigurationId}/resources/{resourceId}/experimentation/edge-config",
  );

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.marketplace
    .updateInstallationIntegrationEdgeConfig({
      integrationConfigurationId: "<id>",
      resourceId: "<id>",
    });
  expect(result).toBeDefined();
  expect(result).toEqual({
    items: {
      "key": "<value>",
    },
    updatedAt: 1217.32,
    digest: "<value>",
  });
});

it.skip("Marketplace Get Resources", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step get-resources.test referencing operation get-resources not found in document`]",
  );
});

it.skip("Marketplace Get Resource", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step get-resource.test referencing operation get-resource not found in document`]",
  );
});

it.skip("Marketplace Delete Resource", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step delete-resource.test referencing operation delete-resource not found in document`]",
  );
});

test("Marketplace Get Integration Resources", async () => {
  const testHttpClient = createTestHTTPClient("get-integration-resources");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.marketplace.getIntegrationResources({
    integrationConfigurationId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    resources: [
      {
        partnerId: "<id>",
        internalId: "<id>",
        name: "<value>",
        productId: "<id>",
      },
    ],
  });
});

test("Marketplace Get Integration Resource", async () => {
  const testHttpClient = createTestHTTPClient("get-integration-resource");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.marketplace.getIntegrationResource({
    integrationConfigurationId: "<id>",
    resourceId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    id: "<id>",
    internalId: "<id>",
    name: "<value>",
    productId: "<id>",
  });
});
