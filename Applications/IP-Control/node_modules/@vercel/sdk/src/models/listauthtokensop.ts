/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AuthToken,
  AuthToken$inboundSchema,
  AuthToken$Outbound,
  AuthToken$outboundSchema,
} from "./authtoken.js";
import {
  Pagination,
  Pagination$inboundSchema,
  Pagination$Outbound,
  Pagination$outboundSchema,
} from "./pagination.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type ListAuthTokensResponseBody = {
  tokens: Array<AuthToken>;
  /**
   * This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.
   */
  pagination: Pagination;
};

/** @internal */
export const ListAuthTokensResponseBody$inboundSchema: z.ZodType<
  ListAuthTokensResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  tokens: z.array(AuthToken$inboundSchema),
  pagination: Pagination$inboundSchema,
});

/** @internal */
export type ListAuthTokensResponseBody$Outbound = {
  tokens: Array<AuthToken$Outbound>;
  pagination: Pagination$Outbound;
};

/** @internal */
export const ListAuthTokensResponseBody$outboundSchema: z.ZodType<
  ListAuthTokensResponseBody$Outbound,
  z.ZodTypeDef,
  ListAuthTokensResponseBody
> = z.object({
  tokens: z.array(AuthToken$outboundSchema),
  pagination: Pagination$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAuthTokensResponseBody$ {
  /** @deprecated use `ListAuthTokensResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListAuthTokensResponseBody$inboundSchema;
  /** @deprecated use `ListAuthTokensResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListAuthTokensResponseBody$outboundSchema;
  /** @deprecated use `ListAuthTokensResponseBody$Outbound` instead. */
  export type Outbound = ListAuthTokensResponseBody$Outbound;
}

export function listAuthTokensResponseBodyToJSON(
  listAuthTokensResponseBody: ListAuthTokensResponseBody,
): string {
  return JSON.stringify(
    ListAuthTokensResponseBody$outboundSchema.parse(listAuthTokensResponseBody),
  );
}

export function listAuthTokensResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListAuthTokensResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAuthTokensResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAuthTokensResponseBody' from JSON`,
  );
}
