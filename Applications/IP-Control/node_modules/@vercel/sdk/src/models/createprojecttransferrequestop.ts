/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type CreateProjectTransferRequestRequestBody = {
  /**
   * The URL to send a webhook to when the transfer is accepted.
   */
  callbackUrl?: string | undefined;
  /**
   * The secret to use to sign the webhook payload with HMAC-SHA256.
   */
  callbackSecret?: string | undefined;
};

export type CreateProjectTransferRequestRequest = {
  /**
   * The ID or name of the project to transfer.
   */
  idOrName: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
  requestBody?: CreateProjectTransferRequestRequestBody | undefined;
};

/**
 * The project transfer request has been initiated successfully.
 */
export type CreateProjectTransferRequestResponseBody = {
  /**
   * Code that can be used to accept the project transfer request.
   */
  code: string;
};

/** @internal */
export const CreateProjectTransferRequestRequestBody$inboundSchema: z.ZodType<
  CreateProjectTransferRequestRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  callbackUrl: z.string().optional(),
  callbackSecret: z.string().optional(),
});

/** @internal */
export type CreateProjectTransferRequestRequestBody$Outbound = {
  callbackUrl?: string | undefined;
  callbackSecret?: string | undefined;
};

/** @internal */
export const CreateProjectTransferRequestRequestBody$outboundSchema: z.ZodType<
  CreateProjectTransferRequestRequestBody$Outbound,
  z.ZodTypeDef,
  CreateProjectTransferRequestRequestBody
> = z.object({
  callbackUrl: z.string().optional(),
  callbackSecret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectTransferRequestRequestBody$ {
  /** @deprecated use `CreateProjectTransferRequestRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectTransferRequestRequestBody$inboundSchema;
  /** @deprecated use `CreateProjectTransferRequestRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectTransferRequestRequestBody$outboundSchema;
  /** @deprecated use `CreateProjectTransferRequestRequestBody$Outbound` instead. */
  export type Outbound = CreateProjectTransferRequestRequestBody$Outbound;
}

export function createProjectTransferRequestRequestBodyToJSON(
  createProjectTransferRequestRequestBody:
    CreateProjectTransferRequestRequestBody,
): string {
  return JSON.stringify(
    CreateProjectTransferRequestRequestBody$outboundSchema.parse(
      createProjectTransferRequestRequestBody,
    ),
  );
}

export function createProjectTransferRequestRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateProjectTransferRequestRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateProjectTransferRequestRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateProjectTransferRequestRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateProjectTransferRequestRequest$inboundSchema: z.ZodType<
  CreateProjectTransferRequestRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  idOrName: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  RequestBody: z.lazy(() =>
    CreateProjectTransferRequestRequestBody$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateProjectTransferRequestRequest$Outbound = {
  idOrName: string;
  teamId?: string | undefined;
  slug?: string | undefined;
  RequestBody?: CreateProjectTransferRequestRequestBody$Outbound | undefined;
};

/** @internal */
export const CreateProjectTransferRequestRequest$outboundSchema: z.ZodType<
  CreateProjectTransferRequestRequest$Outbound,
  z.ZodTypeDef,
  CreateProjectTransferRequestRequest
> = z.object({
  idOrName: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  requestBody: z.lazy(() =>
    CreateProjectTransferRequestRequestBody$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectTransferRequestRequest$ {
  /** @deprecated use `CreateProjectTransferRequestRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectTransferRequestRequest$inboundSchema;
  /** @deprecated use `CreateProjectTransferRequestRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectTransferRequestRequest$outboundSchema;
  /** @deprecated use `CreateProjectTransferRequestRequest$Outbound` instead. */
  export type Outbound = CreateProjectTransferRequestRequest$Outbound;
}

export function createProjectTransferRequestRequestToJSON(
  createProjectTransferRequestRequest: CreateProjectTransferRequestRequest,
): string {
  return JSON.stringify(
    CreateProjectTransferRequestRequest$outboundSchema.parse(
      createProjectTransferRequestRequest,
    ),
  );
}

export function createProjectTransferRequestRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateProjectTransferRequestRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateProjectTransferRequestRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProjectTransferRequestRequest' from JSON`,
  );
}

/** @internal */
export const CreateProjectTransferRequestResponseBody$inboundSchema: z.ZodType<
  CreateProjectTransferRequestResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
});

/** @internal */
export type CreateProjectTransferRequestResponseBody$Outbound = {
  code: string;
};

/** @internal */
export const CreateProjectTransferRequestResponseBody$outboundSchema: z.ZodType<
  CreateProjectTransferRequestResponseBody$Outbound,
  z.ZodTypeDef,
  CreateProjectTransferRequestResponseBody
> = z.object({
  code: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProjectTransferRequestResponseBody$ {
  /** @deprecated use `CreateProjectTransferRequestResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    CreateProjectTransferRequestResponseBody$inboundSchema;
  /** @deprecated use `CreateProjectTransferRequestResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateProjectTransferRequestResponseBody$outboundSchema;
  /** @deprecated use `CreateProjectTransferRequestResponseBody$Outbound` instead. */
  export type Outbound = CreateProjectTransferRequestResponseBody$Outbound;
}

export function createProjectTransferRequestResponseBodyToJSON(
  createProjectTransferRequestResponseBody:
    CreateProjectTransferRequestResponseBody,
): string {
  return JSON.stringify(
    CreateProjectTransferRequestResponseBody$outboundSchema.parse(
      createProjectTransferRequestResponseBody,
    ),
  );
}

export function createProjectTransferRequestResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateProjectTransferRequestResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateProjectTransferRequestResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateProjectTransferRequestResponseBody' from JSON`,
  );
}
