/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type VerifyProjectDomainRequest = {
  /**
   * The unique project identifier or the project name
   */
  idOrName: string;
  /**
   * The domain name you want to verify
   */
  domain: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
};

/**
 * The project domain was verified successfully
 *
 * @remarks
 * Domain is already verified
 */
export type VerifyProjectDomainResponseBody = {
  name: string;
  apexName: string;
  projectId: string;
  redirect?: string | null | undefined;
  redirectStatusCode?: number | null | undefined;
  gitBranch?: string | null | undefined;
  customEnvironmentId?: string | null | undefined;
  updatedAt?: number | undefined;
  createdAt?: number | undefined;
  /**
   * `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.
   */
  verified: boolean;
};

/** @internal */
export const VerifyProjectDomainRequest$inboundSchema: z.ZodType<
  VerifyProjectDomainRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  idOrName: z.string(),
  domain: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/** @internal */
export type VerifyProjectDomainRequest$Outbound = {
  idOrName: string;
  domain: string;
  teamId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const VerifyProjectDomainRequest$outboundSchema: z.ZodType<
  VerifyProjectDomainRequest$Outbound,
  z.ZodTypeDef,
  VerifyProjectDomainRequest
> = z.object({
  idOrName: z.string(),
  domain: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifyProjectDomainRequest$ {
  /** @deprecated use `VerifyProjectDomainRequest$inboundSchema` instead. */
  export const inboundSchema = VerifyProjectDomainRequest$inboundSchema;
  /** @deprecated use `VerifyProjectDomainRequest$outboundSchema` instead. */
  export const outboundSchema = VerifyProjectDomainRequest$outboundSchema;
  /** @deprecated use `VerifyProjectDomainRequest$Outbound` instead. */
  export type Outbound = VerifyProjectDomainRequest$Outbound;
}

export function verifyProjectDomainRequestToJSON(
  verifyProjectDomainRequest: VerifyProjectDomainRequest,
): string {
  return JSON.stringify(
    VerifyProjectDomainRequest$outboundSchema.parse(verifyProjectDomainRequest),
  );
}

export function verifyProjectDomainRequestFromJSON(
  jsonString: string,
): SafeParseResult<VerifyProjectDomainRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VerifyProjectDomainRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerifyProjectDomainRequest' from JSON`,
  );
}

/** @internal */
export const VerifyProjectDomainResponseBody$inboundSchema: z.ZodType<
  VerifyProjectDomainResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  apexName: z.string(),
  projectId: z.string(),
  redirect: z.nullable(z.string()).optional(),
  redirectStatusCode: z.nullable(z.number()).optional(),
  gitBranch: z.nullable(z.string()).optional(),
  customEnvironmentId: z.nullable(z.string()).optional(),
  updatedAt: z.number().optional(),
  createdAt: z.number().optional(),
  verified: z.boolean(),
});

/** @internal */
export type VerifyProjectDomainResponseBody$Outbound = {
  name: string;
  apexName: string;
  projectId: string;
  redirect?: string | null | undefined;
  redirectStatusCode?: number | null | undefined;
  gitBranch?: string | null | undefined;
  customEnvironmentId?: string | null | undefined;
  updatedAt?: number | undefined;
  createdAt?: number | undefined;
  verified: boolean;
};

/** @internal */
export const VerifyProjectDomainResponseBody$outboundSchema: z.ZodType<
  VerifyProjectDomainResponseBody$Outbound,
  z.ZodTypeDef,
  VerifyProjectDomainResponseBody
> = z.object({
  name: z.string(),
  apexName: z.string(),
  projectId: z.string(),
  redirect: z.nullable(z.string()).optional(),
  redirectStatusCode: z.nullable(z.number()).optional(),
  gitBranch: z.nullable(z.string()).optional(),
  customEnvironmentId: z.nullable(z.string()).optional(),
  updatedAt: z.number().optional(),
  createdAt: z.number().optional(),
  verified: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifyProjectDomainResponseBody$ {
  /** @deprecated use `VerifyProjectDomainResponseBody$inboundSchema` instead. */
  export const inboundSchema = VerifyProjectDomainResponseBody$inboundSchema;
  /** @deprecated use `VerifyProjectDomainResponseBody$outboundSchema` instead. */
  export const outboundSchema = VerifyProjectDomainResponseBody$outboundSchema;
  /** @deprecated use `VerifyProjectDomainResponseBody$Outbound` instead. */
  export type Outbound = VerifyProjectDomainResponseBody$Outbound;
}

export function verifyProjectDomainResponseBodyToJSON(
  verifyProjectDomainResponseBody: VerifyProjectDomainResponseBody,
): string {
  return JSON.stringify(
    VerifyProjectDomainResponseBody$outboundSchema.parse(
      verifyProjectDomainResponseBody,
    ),
  );
}

export function verifyProjectDomainResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<VerifyProjectDomainResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VerifyProjectDomainResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerifyProjectDomainResponseBody' from JSON`,
  );
}
