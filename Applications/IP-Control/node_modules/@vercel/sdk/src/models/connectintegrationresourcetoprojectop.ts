/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type ConnectIntegrationResourceToProjectRequestBody = {
  projectId: string;
};

export type ConnectIntegrationResourceToProjectRequest = {
  integrationConfigurationId: string;
  resourceId: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
  requestBody?: ConnectIntegrationResourceToProjectRequestBody | undefined;
};

/** @internal */
export const ConnectIntegrationResourceToProjectRequestBody$inboundSchema:
  z.ZodType<
    ConnectIntegrationResourceToProjectRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    projectId: z.string(),
  });

/** @internal */
export type ConnectIntegrationResourceToProjectRequestBody$Outbound = {
  projectId: string;
};

/** @internal */
export const ConnectIntegrationResourceToProjectRequestBody$outboundSchema:
  z.ZodType<
    ConnectIntegrationResourceToProjectRequestBody$Outbound,
    z.ZodTypeDef,
    ConnectIntegrationResourceToProjectRequestBody
  > = z.object({
    projectId: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectIntegrationResourceToProjectRequestBody$ {
  /** @deprecated use `ConnectIntegrationResourceToProjectRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    ConnectIntegrationResourceToProjectRequestBody$inboundSchema;
  /** @deprecated use `ConnectIntegrationResourceToProjectRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    ConnectIntegrationResourceToProjectRequestBody$outboundSchema;
  /** @deprecated use `ConnectIntegrationResourceToProjectRequestBody$Outbound` instead. */
  export type Outbound =
    ConnectIntegrationResourceToProjectRequestBody$Outbound;
}

export function connectIntegrationResourceToProjectRequestBodyToJSON(
  connectIntegrationResourceToProjectRequestBody:
    ConnectIntegrationResourceToProjectRequestBody,
): string {
  return JSON.stringify(
    ConnectIntegrationResourceToProjectRequestBody$outboundSchema.parse(
      connectIntegrationResourceToProjectRequestBody,
    ),
  );
}

export function connectIntegrationResourceToProjectRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  ConnectIntegrationResourceToProjectRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ConnectIntegrationResourceToProjectRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ConnectIntegrationResourceToProjectRequestBody' from JSON`,
  );
}

/** @internal */
export const ConnectIntegrationResourceToProjectRequest$inboundSchema:
  z.ZodType<ConnectIntegrationResourceToProjectRequest, z.ZodTypeDef, unknown> =
    z.object({
      integrationConfigurationId: z.string(),
      resourceId: z.string(),
      teamId: z.string().optional(),
      slug: z.string().optional(),
      RequestBody: z.lazy(() =>
        ConnectIntegrationResourceToProjectRequestBody$inboundSchema
      ).optional(),
    }).transform((v) => {
      return remap$(v, {
        "RequestBody": "requestBody",
      });
    });

/** @internal */
export type ConnectIntegrationResourceToProjectRequest$Outbound = {
  integrationConfigurationId: string;
  resourceId: string;
  teamId?: string | undefined;
  slug?: string | undefined;
  RequestBody?:
    | ConnectIntegrationResourceToProjectRequestBody$Outbound
    | undefined;
};

/** @internal */
export const ConnectIntegrationResourceToProjectRequest$outboundSchema:
  z.ZodType<
    ConnectIntegrationResourceToProjectRequest$Outbound,
    z.ZodTypeDef,
    ConnectIntegrationResourceToProjectRequest
  > = z.object({
    integrationConfigurationId: z.string(),
    resourceId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() =>
      ConnectIntegrationResourceToProjectRequestBody$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectIntegrationResourceToProjectRequest$ {
  /** @deprecated use `ConnectIntegrationResourceToProjectRequest$inboundSchema` instead. */
  export const inboundSchema =
    ConnectIntegrationResourceToProjectRequest$inboundSchema;
  /** @deprecated use `ConnectIntegrationResourceToProjectRequest$outboundSchema` instead. */
  export const outboundSchema =
    ConnectIntegrationResourceToProjectRequest$outboundSchema;
  /** @deprecated use `ConnectIntegrationResourceToProjectRequest$Outbound` instead. */
  export type Outbound = ConnectIntegrationResourceToProjectRequest$Outbound;
}

export function connectIntegrationResourceToProjectRequestToJSON(
  connectIntegrationResourceToProjectRequest:
    ConnectIntegrationResourceToProjectRequest,
): string {
  return JSON.stringify(
    ConnectIntegrationResourceToProjectRequest$outboundSchema.parse(
      connectIntegrationResourceToProjectRequest,
    ),
  );
}

export function connectIntegrationResourceToProjectRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  ConnectIntegrationResourceToProjectRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ConnectIntegrationResourceToProjectRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ConnectIntegrationResourceToProjectRequest' from JSON`,
  );
}
