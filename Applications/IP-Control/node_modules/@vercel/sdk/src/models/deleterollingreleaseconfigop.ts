/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type DeleteRollingReleaseConfigRequest = {
  /**
   * Project ID or project name (URL-encoded)
   */
  idOrName: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
};

export type DeleteRollingReleaseConfigResponseBody = {
  rollingRelease?: any | null | undefined;
};

/** @internal */
export const DeleteRollingReleaseConfigRequest$inboundSchema: z.ZodType<
  DeleteRollingReleaseConfigRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  idOrName: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/** @internal */
export type DeleteRollingReleaseConfigRequest$Outbound = {
  idOrName: string;
  teamId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const DeleteRollingReleaseConfigRequest$outboundSchema: z.ZodType<
  DeleteRollingReleaseConfigRequest$Outbound,
  z.ZodTypeDef,
  DeleteRollingReleaseConfigRequest
> = z.object({
  idOrName: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteRollingReleaseConfigRequest$ {
  /** @deprecated use `DeleteRollingReleaseConfigRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteRollingReleaseConfigRequest$inboundSchema;
  /** @deprecated use `DeleteRollingReleaseConfigRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteRollingReleaseConfigRequest$outboundSchema;
  /** @deprecated use `DeleteRollingReleaseConfigRequest$Outbound` instead. */
  export type Outbound = DeleteRollingReleaseConfigRequest$Outbound;
}

export function deleteRollingReleaseConfigRequestToJSON(
  deleteRollingReleaseConfigRequest: DeleteRollingReleaseConfigRequest,
): string {
  return JSON.stringify(
    DeleteRollingReleaseConfigRequest$outboundSchema.parse(
      deleteRollingReleaseConfigRequest,
    ),
  );
}

export function deleteRollingReleaseConfigRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteRollingReleaseConfigRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteRollingReleaseConfigRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteRollingReleaseConfigRequest' from JSON`,
  );
}

/** @internal */
export const DeleteRollingReleaseConfigResponseBody$inboundSchema: z.ZodType<
  DeleteRollingReleaseConfigResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  rollingRelease: z.nullable(z.any()).optional(),
});

/** @internal */
export type DeleteRollingReleaseConfigResponseBody$Outbound = {
  rollingRelease?: any | null | undefined;
};

/** @internal */
export const DeleteRollingReleaseConfigResponseBody$outboundSchema: z.ZodType<
  DeleteRollingReleaseConfigResponseBody$Outbound,
  z.ZodTypeDef,
  DeleteRollingReleaseConfigResponseBody
> = z.object({
  rollingRelease: z.nullable(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteRollingReleaseConfigResponseBody$ {
  /** @deprecated use `DeleteRollingReleaseConfigResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    DeleteRollingReleaseConfigResponseBody$inboundSchema;
  /** @deprecated use `DeleteRollingReleaseConfigResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    DeleteRollingReleaseConfigResponseBody$outboundSchema;
  /** @deprecated use `DeleteRollingReleaseConfigResponseBody$Outbound` instead. */
  export type Outbound = DeleteRollingReleaseConfigResponseBody$Outbound;
}

export function deleteRollingReleaseConfigResponseBodyToJSON(
  deleteRollingReleaseConfigResponseBody:
    DeleteRollingReleaseConfigResponseBody,
): string {
  return JSON.stringify(
    DeleteRollingReleaseConfigResponseBody$outboundSchema.parse(
      deleteRollingReleaseConfigResponseBody,
    ),
  );
}

export function deleteRollingReleaseConfigResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteRollingReleaseConfigResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteRollingReleaseConfigResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteRollingReleaseConfigResponseBody' from JSON`,
  );
}
