/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetRollingReleaseBillingStatusRequest = {
  /**
   * Project ID or project name (URL-encoded)
   */
  idOrName: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
};

export const GetRollingReleaseBillingStatusResponseBodyRollingReleaseResponseReason =
  {
    AvailableSlots: "available_slots",
  } as const;
export type GetRollingReleaseBillingStatusResponseBodyRollingReleaseResponseReason =
  ClosedEnum<
    typeof GetRollingReleaseBillingStatusResponseBodyRollingReleaseResponseReason
  >;

export type ResponseBody4 = {
  availableSlots: number;
  reason:
    GetRollingReleaseBillingStatusResponseBodyRollingReleaseResponseReason;
  message: string;
};

export const GetRollingReleaseBillingStatusResponseBodyRollingReleaseReason = {
  NoAvailableSlots: "no_available_slots",
} as const;
export type GetRollingReleaseBillingStatusResponseBodyRollingReleaseReason =
  ClosedEnum<
    typeof GetRollingReleaseBillingStatusResponseBodyRollingReleaseReason
  >;

export type GetRollingReleaseBillingStatusResponseBody3 = {
  availableSlots: number;
  reason: GetRollingReleaseBillingStatusResponseBodyRollingReleaseReason;
  message: string;
  enabledProjects: Array<string>;
};

export const AvailableSlots = {
  Unlimited: "unlimited",
} as const;
export type AvailableSlots = ClosedEnum<typeof AvailableSlots>;

export const GetRollingReleaseBillingStatusResponseBodyReason = {
  UnlimitedSlots: "unlimited_slots",
} as const;
export type GetRollingReleaseBillingStatusResponseBodyReason = ClosedEnum<
  typeof GetRollingReleaseBillingStatusResponseBodyReason
>;

export type GetRollingReleaseBillingStatusResponseBody2 = {
  availableSlots: AvailableSlots;
  reason: GetRollingReleaseBillingStatusResponseBodyReason;
  message: string;
};

export const ResponseBodyReason = {
  PlanNotSupported: "plan_not_supported",
} as const;
export type ResponseBodyReason = ClosedEnum<typeof ResponseBodyReason>;

export type GetRollingReleaseBillingStatusResponseBody1 = {
  availableSlots: number;
  reason: ResponseBodyReason;
  message: string;
};

export type GetRollingReleaseBillingStatusResponseBody =
  | GetRollingReleaseBillingStatusResponseBody3
  | GetRollingReleaseBillingStatusResponseBody1
  | GetRollingReleaseBillingStatusResponseBody2
  | ResponseBody4;

/** @internal */
export const GetRollingReleaseBillingStatusRequest$inboundSchema: z.ZodType<
  GetRollingReleaseBillingStatusRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  idOrName: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/** @internal */
export type GetRollingReleaseBillingStatusRequest$Outbound = {
  idOrName: string;
  teamId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const GetRollingReleaseBillingStatusRequest$outboundSchema: z.ZodType<
  GetRollingReleaseBillingStatusRequest$Outbound,
  z.ZodTypeDef,
  GetRollingReleaseBillingStatusRequest
> = z.object({
  idOrName: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRollingReleaseBillingStatusRequest$ {
  /** @deprecated use `GetRollingReleaseBillingStatusRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetRollingReleaseBillingStatusRequest$inboundSchema;
  /** @deprecated use `GetRollingReleaseBillingStatusRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetRollingReleaseBillingStatusRequest$outboundSchema;
  /** @deprecated use `GetRollingReleaseBillingStatusRequest$Outbound` instead. */
  export type Outbound = GetRollingReleaseBillingStatusRequest$Outbound;
}

export function getRollingReleaseBillingStatusRequestToJSON(
  getRollingReleaseBillingStatusRequest: GetRollingReleaseBillingStatusRequest,
): string {
  return JSON.stringify(
    GetRollingReleaseBillingStatusRequest$outboundSchema.parse(
      getRollingReleaseBillingStatusRequest,
    ),
  );
}

export function getRollingReleaseBillingStatusRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetRollingReleaseBillingStatusRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetRollingReleaseBillingStatusRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRollingReleaseBillingStatusRequest' from JSON`,
  );
}

/** @internal */
export const GetRollingReleaseBillingStatusResponseBodyRollingReleaseResponseReason$inboundSchema:
  z.ZodNativeEnum<
    typeof GetRollingReleaseBillingStatusResponseBodyRollingReleaseResponseReason
  > = z.nativeEnum(
    GetRollingReleaseBillingStatusResponseBodyRollingReleaseResponseReason,
  );

/** @internal */
export const GetRollingReleaseBillingStatusResponseBodyRollingReleaseResponseReason$outboundSchema:
  z.ZodNativeEnum<
    typeof GetRollingReleaseBillingStatusResponseBodyRollingReleaseResponseReason
  > =
    GetRollingReleaseBillingStatusResponseBodyRollingReleaseResponseReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRollingReleaseBillingStatusResponseBodyRollingReleaseResponseReason$ {
  /** @deprecated use `GetRollingReleaseBillingStatusResponseBodyRollingReleaseResponseReason$inboundSchema` instead. */
  export const inboundSchema =
    GetRollingReleaseBillingStatusResponseBodyRollingReleaseResponseReason$inboundSchema;
  /** @deprecated use `GetRollingReleaseBillingStatusResponseBodyRollingReleaseResponseReason$outboundSchema` instead. */
  export const outboundSchema =
    GetRollingReleaseBillingStatusResponseBodyRollingReleaseResponseReason$outboundSchema;
}

/** @internal */
export const ResponseBody4$inboundSchema: z.ZodType<
  ResponseBody4,
  z.ZodTypeDef,
  unknown
> = z.object({
  availableSlots: z.number(),
  reason:
    GetRollingReleaseBillingStatusResponseBodyRollingReleaseResponseReason$inboundSchema,
  message: z.string(),
});

/** @internal */
export type ResponseBody4$Outbound = {
  availableSlots: number;
  reason: string;
  message: string;
};

/** @internal */
export const ResponseBody4$outboundSchema: z.ZodType<
  ResponseBody4$Outbound,
  z.ZodTypeDef,
  ResponseBody4
> = z.object({
  availableSlots: z.number(),
  reason:
    GetRollingReleaseBillingStatusResponseBodyRollingReleaseResponseReason$outboundSchema,
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBody4$ {
  /** @deprecated use `ResponseBody4$inboundSchema` instead. */
  export const inboundSchema = ResponseBody4$inboundSchema;
  /** @deprecated use `ResponseBody4$outboundSchema` instead. */
  export const outboundSchema = ResponseBody4$outboundSchema;
  /** @deprecated use `ResponseBody4$Outbound` instead. */
  export type Outbound = ResponseBody4$Outbound;
}

export function responseBody4ToJSON(responseBody4: ResponseBody4): string {
  return JSON.stringify(ResponseBody4$outboundSchema.parse(responseBody4));
}

export function responseBody4FromJSON(
  jsonString: string,
): SafeParseResult<ResponseBody4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBody4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBody4' from JSON`,
  );
}

/** @internal */
export const GetRollingReleaseBillingStatusResponseBodyRollingReleaseReason$inboundSchema:
  z.ZodNativeEnum<
    typeof GetRollingReleaseBillingStatusResponseBodyRollingReleaseReason
  > = z.nativeEnum(
    GetRollingReleaseBillingStatusResponseBodyRollingReleaseReason,
  );

/** @internal */
export const GetRollingReleaseBillingStatusResponseBodyRollingReleaseReason$outboundSchema:
  z.ZodNativeEnum<
    typeof GetRollingReleaseBillingStatusResponseBodyRollingReleaseReason
  > =
    GetRollingReleaseBillingStatusResponseBodyRollingReleaseReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRollingReleaseBillingStatusResponseBodyRollingReleaseReason$ {
  /** @deprecated use `GetRollingReleaseBillingStatusResponseBodyRollingReleaseReason$inboundSchema` instead. */
  export const inboundSchema =
    GetRollingReleaseBillingStatusResponseBodyRollingReleaseReason$inboundSchema;
  /** @deprecated use `GetRollingReleaseBillingStatusResponseBodyRollingReleaseReason$outboundSchema` instead. */
  export const outboundSchema =
    GetRollingReleaseBillingStatusResponseBodyRollingReleaseReason$outboundSchema;
}

/** @internal */
export const GetRollingReleaseBillingStatusResponseBody3$inboundSchema:
  z.ZodType<
    GetRollingReleaseBillingStatusResponseBody3,
    z.ZodTypeDef,
    unknown
  > = z.object({
    availableSlots: z.number(),
    reason:
      GetRollingReleaseBillingStatusResponseBodyRollingReleaseReason$inboundSchema,
    message: z.string(),
    enabledProjects: z.array(z.string()),
  });

/** @internal */
export type GetRollingReleaseBillingStatusResponseBody3$Outbound = {
  availableSlots: number;
  reason: string;
  message: string;
  enabledProjects: Array<string>;
};

/** @internal */
export const GetRollingReleaseBillingStatusResponseBody3$outboundSchema:
  z.ZodType<
    GetRollingReleaseBillingStatusResponseBody3$Outbound,
    z.ZodTypeDef,
    GetRollingReleaseBillingStatusResponseBody3
  > = z.object({
    availableSlots: z.number(),
    reason:
      GetRollingReleaseBillingStatusResponseBodyRollingReleaseReason$outboundSchema,
    message: z.string(),
    enabledProjects: z.array(z.string()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRollingReleaseBillingStatusResponseBody3$ {
  /** @deprecated use `GetRollingReleaseBillingStatusResponseBody3$inboundSchema` instead. */
  export const inboundSchema =
    GetRollingReleaseBillingStatusResponseBody3$inboundSchema;
  /** @deprecated use `GetRollingReleaseBillingStatusResponseBody3$outboundSchema` instead. */
  export const outboundSchema =
    GetRollingReleaseBillingStatusResponseBody3$outboundSchema;
  /** @deprecated use `GetRollingReleaseBillingStatusResponseBody3$Outbound` instead. */
  export type Outbound = GetRollingReleaseBillingStatusResponseBody3$Outbound;
}

export function getRollingReleaseBillingStatusResponseBody3ToJSON(
  getRollingReleaseBillingStatusResponseBody3:
    GetRollingReleaseBillingStatusResponseBody3,
): string {
  return JSON.stringify(
    GetRollingReleaseBillingStatusResponseBody3$outboundSchema.parse(
      getRollingReleaseBillingStatusResponseBody3,
    ),
  );
}

export function getRollingReleaseBillingStatusResponseBody3FromJSON(
  jsonString: string,
): SafeParseResult<
  GetRollingReleaseBillingStatusResponseBody3,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetRollingReleaseBillingStatusResponseBody3$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetRollingReleaseBillingStatusResponseBody3' from JSON`,
  );
}

/** @internal */
export const AvailableSlots$inboundSchema: z.ZodNativeEnum<
  typeof AvailableSlots
> = z.nativeEnum(AvailableSlots);

/** @internal */
export const AvailableSlots$outboundSchema: z.ZodNativeEnum<
  typeof AvailableSlots
> = AvailableSlots$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableSlots$ {
  /** @deprecated use `AvailableSlots$inboundSchema` instead. */
  export const inboundSchema = AvailableSlots$inboundSchema;
  /** @deprecated use `AvailableSlots$outboundSchema` instead. */
  export const outboundSchema = AvailableSlots$outboundSchema;
}

/** @internal */
export const GetRollingReleaseBillingStatusResponseBodyReason$inboundSchema:
  z.ZodNativeEnum<typeof GetRollingReleaseBillingStatusResponseBodyReason> = z
    .nativeEnum(GetRollingReleaseBillingStatusResponseBodyReason);

/** @internal */
export const GetRollingReleaseBillingStatusResponseBodyReason$outboundSchema:
  z.ZodNativeEnum<typeof GetRollingReleaseBillingStatusResponseBodyReason> =
    GetRollingReleaseBillingStatusResponseBodyReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRollingReleaseBillingStatusResponseBodyReason$ {
  /** @deprecated use `GetRollingReleaseBillingStatusResponseBodyReason$inboundSchema` instead. */
  export const inboundSchema =
    GetRollingReleaseBillingStatusResponseBodyReason$inboundSchema;
  /** @deprecated use `GetRollingReleaseBillingStatusResponseBodyReason$outboundSchema` instead. */
  export const outboundSchema =
    GetRollingReleaseBillingStatusResponseBodyReason$outboundSchema;
}

/** @internal */
export const GetRollingReleaseBillingStatusResponseBody2$inboundSchema:
  z.ZodType<
    GetRollingReleaseBillingStatusResponseBody2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    availableSlots: AvailableSlots$inboundSchema,
    reason: GetRollingReleaseBillingStatusResponseBodyReason$inboundSchema,
    message: z.string(),
  });

/** @internal */
export type GetRollingReleaseBillingStatusResponseBody2$Outbound = {
  availableSlots: string;
  reason: string;
  message: string;
};

/** @internal */
export const GetRollingReleaseBillingStatusResponseBody2$outboundSchema:
  z.ZodType<
    GetRollingReleaseBillingStatusResponseBody2$Outbound,
    z.ZodTypeDef,
    GetRollingReleaseBillingStatusResponseBody2
  > = z.object({
    availableSlots: AvailableSlots$outboundSchema,
    reason: GetRollingReleaseBillingStatusResponseBodyReason$outboundSchema,
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRollingReleaseBillingStatusResponseBody2$ {
  /** @deprecated use `GetRollingReleaseBillingStatusResponseBody2$inboundSchema` instead. */
  export const inboundSchema =
    GetRollingReleaseBillingStatusResponseBody2$inboundSchema;
  /** @deprecated use `GetRollingReleaseBillingStatusResponseBody2$outboundSchema` instead. */
  export const outboundSchema =
    GetRollingReleaseBillingStatusResponseBody2$outboundSchema;
  /** @deprecated use `GetRollingReleaseBillingStatusResponseBody2$Outbound` instead. */
  export type Outbound = GetRollingReleaseBillingStatusResponseBody2$Outbound;
}

export function getRollingReleaseBillingStatusResponseBody2ToJSON(
  getRollingReleaseBillingStatusResponseBody2:
    GetRollingReleaseBillingStatusResponseBody2,
): string {
  return JSON.stringify(
    GetRollingReleaseBillingStatusResponseBody2$outboundSchema.parse(
      getRollingReleaseBillingStatusResponseBody2,
    ),
  );
}

export function getRollingReleaseBillingStatusResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetRollingReleaseBillingStatusResponseBody2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetRollingReleaseBillingStatusResponseBody2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetRollingReleaseBillingStatusResponseBody2' from JSON`,
  );
}

/** @internal */
export const ResponseBodyReason$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyReason
> = z.nativeEnum(ResponseBodyReason);

/** @internal */
export const ResponseBodyReason$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyReason
> = ResponseBodyReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyReason$ {
  /** @deprecated use `ResponseBodyReason$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyReason$inboundSchema;
  /** @deprecated use `ResponseBodyReason$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyReason$outboundSchema;
}

/** @internal */
export const GetRollingReleaseBillingStatusResponseBody1$inboundSchema:
  z.ZodType<
    GetRollingReleaseBillingStatusResponseBody1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    availableSlots: z.number(),
    reason: ResponseBodyReason$inboundSchema,
    message: z.string(),
  });

/** @internal */
export type GetRollingReleaseBillingStatusResponseBody1$Outbound = {
  availableSlots: number;
  reason: string;
  message: string;
};

/** @internal */
export const GetRollingReleaseBillingStatusResponseBody1$outboundSchema:
  z.ZodType<
    GetRollingReleaseBillingStatusResponseBody1$Outbound,
    z.ZodTypeDef,
    GetRollingReleaseBillingStatusResponseBody1
  > = z.object({
    availableSlots: z.number(),
    reason: ResponseBodyReason$outboundSchema,
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRollingReleaseBillingStatusResponseBody1$ {
  /** @deprecated use `GetRollingReleaseBillingStatusResponseBody1$inboundSchema` instead. */
  export const inboundSchema =
    GetRollingReleaseBillingStatusResponseBody1$inboundSchema;
  /** @deprecated use `GetRollingReleaseBillingStatusResponseBody1$outboundSchema` instead. */
  export const outboundSchema =
    GetRollingReleaseBillingStatusResponseBody1$outboundSchema;
  /** @deprecated use `GetRollingReleaseBillingStatusResponseBody1$Outbound` instead. */
  export type Outbound = GetRollingReleaseBillingStatusResponseBody1$Outbound;
}

export function getRollingReleaseBillingStatusResponseBody1ToJSON(
  getRollingReleaseBillingStatusResponseBody1:
    GetRollingReleaseBillingStatusResponseBody1,
): string {
  return JSON.stringify(
    GetRollingReleaseBillingStatusResponseBody1$outboundSchema.parse(
      getRollingReleaseBillingStatusResponseBody1,
    ),
  );
}

export function getRollingReleaseBillingStatusResponseBody1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetRollingReleaseBillingStatusResponseBody1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetRollingReleaseBillingStatusResponseBody1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetRollingReleaseBillingStatusResponseBody1' from JSON`,
  );
}

/** @internal */
export const GetRollingReleaseBillingStatusResponseBody$inboundSchema:
  z.ZodType<GetRollingReleaseBillingStatusResponseBody, z.ZodTypeDef, unknown> =
    z.union([
      z.lazy(() => GetRollingReleaseBillingStatusResponseBody3$inboundSchema),
      z.lazy(() => GetRollingReleaseBillingStatusResponseBody1$inboundSchema),
      z.lazy(() => GetRollingReleaseBillingStatusResponseBody2$inboundSchema),
      z.lazy(() => ResponseBody4$inboundSchema),
    ]);

/** @internal */
export type GetRollingReleaseBillingStatusResponseBody$Outbound =
  | GetRollingReleaseBillingStatusResponseBody3$Outbound
  | GetRollingReleaseBillingStatusResponseBody1$Outbound
  | GetRollingReleaseBillingStatusResponseBody2$Outbound
  | ResponseBody4$Outbound;

/** @internal */
export const GetRollingReleaseBillingStatusResponseBody$outboundSchema:
  z.ZodType<
    GetRollingReleaseBillingStatusResponseBody$Outbound,
    z.ZodTypeDef,
    GetRollingReleaseBillingStatusResponseBody
  > = z.union([
    z.lazy(() => GetRollingReleaseBillingStatusResponseBody3$outboundSchema),
    z.lazy(() => GetRollingReleaseBillingStatusResponseBody1$outboundSchema),
    z.lazy(() => GetRollingReleaseBillingStatusResponseBody2$outboundSchema),
    z.lazy(() => ResponseBody4$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRollingReleaseBillingStatusResponseBody$ {
  /** @deprecated use `GetRollingReleaseBillingStatusResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetRollingReleaseBillingStatusResponseBody$inboundSchema;
  /** @deprecated use `GetRollingReleaseBillingStatusResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetRollingReleaseBillingStatusResponseBody$outboundSchema;
  /** @deprecated use `GetRollingReleaseBillingStatusResponseBody$Outbound` instead. */
  export type Outbound = GetRollingReleaseBillingStatusResponseBody$Outbound;
}

export function getRollingReleaseBillingStatusResponseBodyToJSON(
  getRollingReleaseBillingStatusResponseBody:
    GetRollingReleaseBillingStatusResponseBody,
): string {
  return JSON.stringify(
    GetRollingReleaseBillingStatusResponseBody$outboundSchema.parse(
      getRollingReleaseBillingStatusResponseBody,
    ),
  );
}

export function getRollingReleaseBillingStatusResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetRollingReleaseBillingStatusResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetRollingReleaseBillingStatusResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetRollingReleaseBillingStatusResponseBody' from JSON`,
  );
}
