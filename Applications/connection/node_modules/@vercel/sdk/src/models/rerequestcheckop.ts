/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type RerequestCheckRequest = {
  /**
   * The deployment to rerun the check for.
   */
  deploymentId: string;
  /**
   * The check to rerun
   */
  checkId: string;
  /**
   * Mark the check as running
   */
  autoUpdate?: boolean | undefined;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
};

export type RerequestCheckResponseBody = {};

/** @internal */
export const RerequestCheckRequest$inboundSchema: z.ZodType<
  RerequestCheckRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  deploymentId: z.string(),
  checkId: z.string(),
  autoUpdate: z.boolean().optional(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/** @internal */
export type RerequestCheckRequest$Outbound = {
  deploymentId: string;
  checkId: string;
  autoUpdate?: boolean | undefined;
  teamId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const RerequestCheckRequest$outboundSchema: z.ZodType<
  RerequestCheckRequest$Outbound,
  z.ZodTypeDef,
  RerequestCheckRequest
> = z.object({
  deploymentId: z.string(),
  checkId: z.string(),
  autoUpdate: z.boolean().optional(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RerequestCheckRequest$ {
  /** @deprecated use `RerequestCheckRequest$inboundSchema` instead. */
  export const inboundSchema = RerequestCheckRequest$inboundSchema;
  /** @deprecated use `RerequestCheckRequest$outboundSchema` instead. */
  export const outboundSchema = RerequestCheckRequest$outboundSchema;
  /** @deprecated use `RerequestCheckRequest$Outbound` instead. */
  export type Outbound = RerequestCheckRequest$Outbound;
}

export function rerequestCheckRequestToJSON(
  rerequestCheckRequest: RerequestCheckRequest,
): string {
  return JSON.stringify(
    RerequestCheckRequest$outboundSchema.parse(rerequestCheckRequest),
  );
}

export function rerequestCheckRequestFromJSON(
  jsonString: string,
): SafeParseResult<RerequestCheckRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RerequestCheckRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RerequestCheckRequest' from JSON`,
  );
}

/** @internal */
export const RerequestCheckResponseBody$inboundSchema: z.ZodType<
  RerequestCheckResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RerequestCheckResponseBody$Outbound = {};

/** @internal */
export const RerequestCheckResponseBody$outboundSchema: z.ZodType<
  RerequestCheckResponseBody$Outbound,
  z.ZodTypeDef,
  RerequestCheckResponseBody
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RerequestCheckResponseBody$ {
  /** @deprecated use `RerequestCheckResponseBody$inboundSchema` instead. */
  export const inboundSchema = RerequestCheckResponseBody$inboundSchema;
  /** @deprecated use `RerequestCheckResponseBody$outboundSchema` instead. */
  export const outboundSchema = RerequestCheckResponseBody$outboundSchema;
  /** @deprecated use `RerequestCheckResponseBody$Outbound` instead. */
  export type Outbound = RerequestCheckResponseBody$Outbound;
}

export function rerequestCheckResponseBodyToJSON(
  rerequestCheckResponseBody: RerequestCheckResponseBody,
): string {
  return JSON.stringify(
    RerequestCheckResponseBody$outboundSchema.parse(rerequestCheckResponseBody),
  );
}

export function rerequestCheckResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<RerequestCheckResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RerequestCheckResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RerequestCheckResponseBody' from JSON`,
  );
}
