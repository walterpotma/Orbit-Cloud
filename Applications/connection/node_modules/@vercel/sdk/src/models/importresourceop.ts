/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export const Ownership = {
  Owned: "owned",
  Linked: "linked",
  Sandbox: "sandbox",
} as const;
export type Ownership = ClosedEnum<typeof Ownership>;

export const ImportResourceStatus = {
  Ready: "ready",
  Pending: "pending",
  Suspended: "suspended",
  Resumed: "resumed",
  Uninstalled: "uninstalled",
  Error: "error",
} as const;
export type ImportResourceStatus = ClosedEnum<typeof ImportResourceStatus>;

export const ImportResourceType = {
  Prepayment: "prepayment",
  Subscription: "subscription",
} as const;
export type ImportResourceType = ClosedEnum<typeof ImportResourceType>;

export type Details = {
  label: string;
  value?: string | undefined;
};

export type HeightlightedDetails = {
  label: string;
  value?: string | undefined;
};

export type BillingPlan = {
  id: string;
  type: ImportResourceType;
  name: string;
  description?: string | undefined;
  paymentMethodRequired?: boolean | undefined;
  cost?: string | undefined;
  details?: Array<Details> | undefined;
  heightlightedDetails?: Array<HeightlightedDetails> | undefined;
  effectiveDate?: string | undefined;
  additionalProperties?: { [k: string]: any };
};

export const Level = {
  Info: "info",
  Warn: "warn",
  Error: "error",
} as const;
export type Level = ClosedEnum<typeof Level>;

export type Notification = {
  level: Level;
  title: string;
  message?: string | undefined;
  href?: string | undefined;
};

/**
 * A map of environments to override values for the secret, used for setting different values across deployments in production, preview, and development environments. Note: the same value will be used for all deployments in the given environment.
 */
export type EnvironmentOverrides = {
  /**
   * Value used for development environment.
   */
  development?: string | undefined;
  /**
   * Value used for preview environment.
   */
  preview?: string | undefined;
  /**
   * Value used for production environment.
   */
  production?: string | undefined;
};

export type ImportResourceSecrets = {
  name: string;
  value: string;
  prefix?: string | undefined;
  /**
   * A map of environments to override values for the secret, used for setting different values across deployments in production, preview, and development environments. Note: the same value will be used for all deployments in the given environment.
   */
  environmentOverrides?: EnvironmentOverrides | undefined;
};

export type ImportResourceRequestBody = {
  ownership?: Ownership | undefined;
  productId: string;
  name: string;
  status: ImportResourceStatus;
  metadata?: { [k: string]: any } | undefined;
  billingPlan?: BillingPlan | undefined;
  notification?: Notification | undefined;
  extras?: { [k: string]: any } | undefined;
  secrets?: Array<ImportResourceSecrets> | undefined;
};

export type ImportResourceRequest = {
  integrationConfigurationId: string;
  resourceId: string;
  requestBody?: ImportResourceRequestBody | undefined;
};

export type ImportResourceResponseBody = {
  name: string;
};

/** @internal */
export const Ownership$inboundSchema: z.ZodNativeEnum<typeof Ownership> = z
  .nativeEnum(Ownership);

/** @internal */
export const Ownership$outboundSchema: z.ZodNativeEnum<typeof Ownership> =
  Ownership$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Ownership$ {
  /** @deprecated use `Ownership$inboundSchema` instead. */
  export const inboundSchema = Ownership$inboundSchema;
  /** @deprecated use `Ownership$outboundSchema` instead. */
  export const outboundSchema = Ownership$outboundSchema;
}

/** @internal */
export const ImportResourceStatus$inboundSchema: z.ZodNativeEnum<
  typeof ImportResourceStatus
> = z.nativeEnum(ImportResourceStatus);

/** @internal */
export const ImportResourceStatus$outboundSchema: z.ZodNativeEnum<
  typeof ImportResourceStatus
> = ImportResourceStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImportResourceStatus$ {
  /** @deprecated use `ImportResourceStatus$inboundSchema` instead. */
  export const inboundSchema = ImportResourceStatus$inboundSchema;
  /** @deprecated use `ImportResourceStatus$outboundSchema` instead. */
  export const outboundSchema = ImportResourceStatus$outboundSchema;
}

/** @internal */
export const ImportResourceType$inboundSchema: z.ZodNativeEnum<
  typeof ImportResourceType
> = z.nativeEnum(ImportResourceType);

/** @internal */
export const ImportResourceType$outboundSchema: z.ZodNativeEnum<
  typeof ImportResourceType
> = ImportResourceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImportResourceType$ {
  /** @deprecated use `ImportResourceType$inboundSchema` instead. */
  export const inboundSchema = ImportResourceType$inboundSchema;
  /** @deprecated use `ImportResourceType$outboundSchema` instead. */
  export const outboundSchema = ImportResourceType$outboundSchema;
}

/** @internal */
export const Details$inboundSchema: z.ZodType<Details, z.ZodTypeDef, unknown> =
  z.object({
    label: z.string(),
    value: z.string().optional(),
  });

/** @internal */
export type Details$Outbound = {
  label: string;
  value?: string | undefined;
};

/** @internal */
export const Details$outboundSchema: z.ZodType<
  Details$Outbound,
  z.ZodTypeDef,
  Details
> = z.object({
  label: z.string(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Details$ {
  /** @deprecated use `Details$inboundSchema` instead. */
  export const inboundSchema = Details$inboundSchema;
  /** @deprecated use `Details$outboundSchema` instead. */
  export const outboundSchema = Details$outboundSchema;
  /** @deprecated use `Details$Outbound` instead. */
  export type Outbound = Details$Outbound;
}

export function detailsToJSON(details: Details): string {
  return JSON.stringify(Details$outboundSchema.parse(details));
}

export function detailsFromJSON(
  jsonString: string,
): SafeParseResult<Details, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Details$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Details' from JSON`,
  );
}

/** @internal */
export const HeightlightedDetails$inboundSchema: z.ZodType<
  HeightlightedDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string(),
  value: z.string().optional(),
});

/** @internal */
export type HeightlightedDetails$Outbound = {
  label: string;
  value?: string | undefined;
};

/** @internal */
export const HeightlightedDetails$outboundSchema: z.ZodType<
  HeightlightedDetails$Outbound,
  z.ZodTypeDef,
  HeightlightedDetails
> = z.object({
  label: z.string(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HeightlightedDetails$ {
  /** @deprecated use `HeightlightedDetails$inboundSchema` instead. */
  export const inboundSchema = HeightlightedDetails$inboundSchema;
  /** @deprecated use `HeightlightedDetails$outboundSchema` instead. */
  export const outboundSchema = HeightlightedDetails$outboundSchema;
  /** @deprecated use `HeightlightedDetails$Outbound` instead. */
  export type Outbound = HeightlightedDetails$Outbound;
}

export function heightlightedDetailsToJSON(
  heightlightedDetails: HeightlightedDetails,
): string {
  return JSON.stringify(
    HeightlightedDetails$outboundSchema.parse(heightlightedDetails),
  );
}

export function heightlightedDetailsFromJSON(
  jsonString: string,
): SafeParseResult<HeightlightedDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HeightlightedDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HeightlightedDetails' from JSON`,
  );
}

/** @internal */
export const BillingPlan$inboundSchema: z.ZodType<
  BillingPlan,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    id: z.string(),
    type: ImportResourceType$inboundSchema,
    name: z.string(),
    description: z.string().optional(),
    paymentMethodRequired: z.boolean().optional(),
    cost: z.string().optional(),
    details: z.array(z.lazy(() => Details$inboundSchema)).optional(),
    heightlightedDetails: z.array(
      z.lazy(() => HeightlightedDetails$inboundSchema),
    ).optional(),
    effectiveDate: z.string().optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
);

/** @internal */
export type BillingPlan$Outbound = {
  id: string;
  type: string;
  name: string;
  description?: string | undefined;
  paymentMethodRequired?: boolean | undefined;
  cost?: string | undefined;
  details?: Array<Details$Outbound> | undefined;
  heightlightedDetails?: Array<HeightlightedDetails$Outbound> | undefined;
  effectiveDate?: string | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const BillingPlan$outboundSchema: z.ZodType<
  BillingPlan$Outbound,
  z.ZodTypeDef,
  BillingPlan
> = z.object({
  id: z.string(),
  type: ImportResourceType$outboundSchema,
  name: z.string(),
  description: z.string().optional(),
  paymentMethodRequired: z.boolean().optional(),
  cost: z.string().optional(),
  details: z.array(z.lazy(() => Details$outboundSchema)).optional(),
  heightlightedDetails: z.array(
    z.lazy(() => HeightlightedDetails$outboundSchema),
  ).optional(),
  effectiveDate: z.string().optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BillingPlan$ {
  /** @deprecated use `BillingPlan$inboundSchema` instead. */
  export const inboundSchema = BillingPlan$inboundSchema;
  /** @deprecated use `BillingPlan$outboundSchema` instead. */
  export const outboundSchema = BillingPlan$outboundSchema;
  /** @deprecated use `BillingPlan$Outbound` instead. */
  export type Outbound = BillingPlan$Outbound;
}

export function billingPlanToJSON(billingPlan: BillingPlan): string {
  return JSON.stringify(BillingPlan$outboundSchema.parse(billingPlan));
}

export function billingPlanFromJSON(
  jsonString: string,
): SafeParseResult<BillingPlan, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BillingPlan$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BillingPlan' from JSON`,
  );
}

/** @internal */
export const Level$inboundSchema: z.ZodNativeEnum<typeof Level> = z.nativeEnum(
  Level,
);

/** @internal */
export const Level$outboundSchema: z.ZodNativeEnum<typeof Level> =
  Level$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Level$ {
  /** @deprecated use `Level$inboundSchema` instead. */
  export const inboundSchema = Level$inboundSchema;
  /** @deprecated use `Level$outboundSchema` instead. */
  export const outboundSchema = Level$outboundSchema;
}

/** @internal */
export const Notification$inboundSchema: z.ZodType<
  Notification,
  z.ZodTypeDef,
  unknown
> = z.object({
  level: Level$inboundSchema,
  title: z.string(),
  message: z.string().optional(),
  href: z.string().optional(),
});

/** @internal */
export type Notification$Outbound = {
  level: string;
  title: string;
  message?: string | undefined;
  href?: string | undefined;
};

/** @internal */
export const Notification$outboundSchema: z.ZodType<
  Notification$Outbound,
  z.ZodTypeDef,
  Notification
> = z.object({
  level: Level$outboundSchema,
  title: z.string(),
  message: z.string().optional(),
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Notification$ {
  /** @deprecated use `Notification$inboundSchema` instead. */
  export const inboundSchema = Notification$inboundSchema;
  /** @deprecated use `Notification$outboundSchema` instead. */
  export const outboundSchema = Notification$outboundSchema;
  /** @deprecated use `Notification$Outbound` instead. */
  export type Outbound = Notification$Outbound;
}

export function notificationToJSON(notification: Notification): string {
  return JSON.stringify(Notification$outboundSchema.parse(notification));
}

export function notificationFromJSON(
  jsonString: string,
): SafeParseResult<Notification, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Notification$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Notification' from JSON`,
  );
}

/** @internal */
export const EnvironmentOverrides$inboundSchema: z.ZodType<
  EnvironmentOverrides,
  z.ZodTypeDef,
  unknown
> = z.object({
  development: z.string().optional(),
  preview: z.string().optional(),
  production: z.string().optional(),
});

/** @internal */
export type EnvironmentOverrides$Outbound = {
  development?: string | undefined;
  preview?: string | undefined;
  production?: string | undefined;
};

/** @internal */
export const EnvironmentOverrides$outboundSchema: z.ZodType<
  EnvironmentOverrides$Outbound,
  z.ZodTypeDef,
  EnvironmentOverrides
> = z.object({
  development: z.string().optional(),
  preview: z.string().optional(),
  production: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOverrides$ {
  /** @deprecated use `EnvironmentOverrides$inboundSchema` instead. */
  export const inboundSchema = EnvironmentOverrides$inboundSchema;
  /** @deprecated use `EnvironmentOverrides$outboundSchema` instead. */
  export const outboundSchema = EnvironmentOverrides$outboundSchema;
  /** @deprecated use `EnvironmentOverrides$Outbound` instead. */
  export type Outbound = EnvironmentOverrides$Outbound;
}

export function environmentOverridesToJSON(
  environmentOverrides: EnvironmentOverrides,
): string {
  return JSON.stringify(
    EnvironmentOverrides$outboundSchema.parse(environmentOverrides),
  );
}

export function environmentOverridesFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOverrides, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentOverrides$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOverrides' from JSON`,
  );
}

/** @internal */
export const ImportResourceSecrets$inboundSchema: z.ZodType<
  ImportResourceSecrets,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
  prefix: z.string().optional(),
  environmentOverrides: z.lazy(() => EnvironmentOverrides$inboundSchema)
    .optional(),
});

/** @internal */
export type ImportResourceSecrets$Outbound = {
  name: string;
  value: string;
  prefix?: string | undefined;
  environmentOverrides?: EnvironmentOverrides$Outbound | undefined;
};

/** @internal */
export const ImportResourceSecrets$outboundSchema: z.ZodType<
  ImportResourceSecrets$Outbound,
  z.ZodTypeDef,
  ImportResourceSecrets
> = z.object({
  name: z.string(),
  value: z.string(),
  prefix: z.string().optional(),
  environmentOverrides: z.lazy(() => EnvironmentOverrides$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImportResourceSecrets$ {
  /** @deprecated use `ImportResourceSecrets$inboundSchema` instead. */
  export const inboundSchema = ImportResourceSecrets$inboundSchema;
  /** @deprecated use `ImportResourceSecrets$outboundSchema` instead. */
  export const outboundSchema = ImportResourceSecrets$outboundSchema;
  /** @deprecated use `ImportResourceSecrets$Outbound` instead. */
  export type Outbound = ImportResourceSecrets$Outbound;
}

export function importResourceSecretsToJSON(
  importResourceSecrets: ImportResourceSecrets,
): string {
  return JSON.stringify(
    ImportResourceSecrets$outboundSchema.parse(importResourceSecrets),
  );
}

export function importResourceSecretsFromJSON(
  jsonString: string,
): SafeParseResult<ImportResourceSecrets, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ImportResourceSecrets$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ImportResourceSecrets' from JSON`,
  );
}

/** @internal */
export const ImportResourceRequestBody$inboundSchema: z.ZodType<
  ImportResourceRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  ownership: Ownership$inboundSchema.optional(),
  productId: z.string(),
  name: z.string(),
  status: ImportResourceStatus$inboundSchema,
  metadata: z.record(z.any()).optional(),
  billingPlan: z.lazy(() => BillingPlan$inboundSchema).optional(),
  notification: z.lazy(() => Notification$inboundSchema).optional(),
  extras: z.record(z.any()).optional(),
  secrets: z.array(z.lazy(() => ImportResourceSecrets$inboundSchema))
    .optional(),
});

/** @internal */
export type ImportResourceRequestBody$Outbound = {
  ownership?: string | undefined;
  productId: string;
  name: string;
  status: string;
  metadata?: { [k: string]: any } | undefined;
  billingPlan?: BillingPlan$Outbound | undefined;
  notification?: Notification$Outbound | undefined;
  extras?: { [k: string]: any } | undefined;
  secrets?: Array<ImportResourceSecrets$Outbound> | undefined;
};

/** @internal */
export const ImportResourceRequestBody$outboundSchema: z.ZodType<
  ImportResourceRequestBody$Outbound,
  z.ZodTypeDef,
  ImportResourceRequestBody
> = z.object({
  ownership: Ownership$outboundSchema.optional(),
  productId: z.string(),
  name: z.string(),
  status: ImportResourceStatus$outboundSchema,
  metadata: z.record(z.any()).optional(),
  billingPlan: z.lazy(() => BillingPlan$outboundSchema).optional(),
  notification: z.lazy(() => Notification$outboundSchema).optional(),
  extras: z.record(z.any()).optional(),
  secrets: z.array(z.lazy(() => ImportResourceSecrets$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImportResourceRequestBody$ {
  /** @deprecated use `ImportResourceRequestBody$inboundSchema` instead. */
  export const inboundSchema = ImportResourceRequestBody$inboundSchema;
  /** @deprecated use `ImportResourceRequestBody$outboundSchema` instead. */
  export const outboundSchema = ImportResourceRequestBody$outboundSchema;
  /** @deprecated use `ImportResourceRequestBody$Outbound` instead. */
  export type Outbound = ImportResourceRequestBody$Outbound;
}

export function importResourceRequestBodyToJSON(
  importResourceRequestBody: ImportResourceRequestBody,
): string {
  return JSON.stringify(
    ImportResourceRequestBody$outboundSchema.parse(importResourceRequestBody),
  );
}

export function importResourceRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ImportResourceRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ImportResourceRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ImportResourceRequestBody' from JSON`,
  );
}

/** @internal */
export const ImportResourceRequest$inboundSchema: z.ZodType<
  ImportResourceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  integrationConfigurationId: z.string(),
  resourceId: z.string(),
  RequestBody: z.lazy(() => ImportResourceRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type ImportResourceRequest$Outbound = {
  integrationConfigurationId: string;
  resourceId: string;
  RequestBody?: ImportResourceRequestBody$Outbound | undefined;
};

/** @internal */
export const ImportResourceRequest$outboundSchema: z.ZodType<
  ImportResourceRequest$Outbound,
  z.ZodTypeDef,
  ImportResourceRequest
> = z.object({
  integrationConfigurationId: z.string(),
  resourceId: z.string(),
  requestBody: z.lazy(() => ImportResourceRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImportResourceRequest$ {
  /** @deprecated use `ImportResourceRequest$inboundSchema` instead. */
  export const inboundSchema = ImportResourceRequest$inboundSchema;
  /** @deprecated use `ImportResourceRequest$outboundSchema` instead. */
  export const outboundSchema = ImportResourceRequest$outboundSchema;
  /** @deprecated use `ImportResourceRequest$Outbound` instead. */
  export type Outbound = ImportResourceRequest$Outbound;
}

export function importResourceRequestToJSON(
  importResourceRequest: ImportResourceRequest,
): string {
  return JSON.stringify(
    ImportResourceRequest$outboundSchema.parse(importResourceRequest),
  );
}

export function importResourceRequestFromJSON(
  jsonString: string,
): SafeParseResult<ImportResourceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ImportResourceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ImportResourceRequest' from JSON`,
  );
}

/** @internal */
export const ImportResourceResponseBody$inboundSchema: z.ZodType<
  ImportResourceResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
});

/** @internal */
export type ImportResourceResponseBody$Outbound = {
  name: string;
};

/** @internal */
export const ImportResourceResponseBody$outboundSchema: z.ZodType<
  ImportResourceResponseBody$Outbound,
  z.ZodTypeDef,
  ImportResourceResponseBody
> = z.object({
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImportResourceResponseBody$ {
  /** @deprecated use `ImportResourceResponseBody$inboundSchema` instead. */
  export const inboundSchema = ImportResourceResponseBody$inboundSchema;
  /** @deprecated use `ImportResourceResponseBody$outboundSchema` instead. */
  export const outboundSchema = ImportResourceResponseBody$outboundSchema;
  /** @deprecated use `ImportResourceResponseBody$Outbound` instead. */
  export type Outbound = ImportResourceResponseBody$Outbound;
}

export function importResourceResponseBodyToJSON(
  importResourceResponseBody: ImportResourceResponseBody,
): string {
  return JSON.stringify(
    ImportResourceResponseBody$outboundSchema.parse(importResourceResponseBody),
  );
}

export function importResourceResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ImportResourceResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ImportResourceResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ImportResourceResponseBody' from JSON`,
  );
}
