/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type CreateEdgeConfigTokenRequestBody = {
  label: string;
};

export type CreateEdgeConfigTokenRequest = {
  edgeConfigId: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
  requestBody: CreateEdgeConfigTokenRequestBody;
};

export type CreateEdgeConfigTokenResponseBody = {
  token: string;
  id: string;
};

/** @internal */
export const CreateEdgeConfigTokenRequestBody$inboundSchema: z.ZodType<
  CreateEdgeConfigTokenRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string(),
});

/** @internal */
export type CreateEdgeConfigTokenRequestBody$Outbound = {
  label: string;
};

/** @internal */
export const CreateEdgeConfigTokenRequestBody$outboundSchema: z.ZodType<
  CreateEdgeConfigTokenRequestBody$Outbound,
  z.ZodTypeDef,
  CreateEdgeConfigTokenRequestBody
> = z.object({
  label: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEdgeConfigTokenRequestBody$ {
  /** @deprecated use `CreateEdgeConfigTokenRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateEdgeConfigTokenRequestBody$inboundSchema;
  /** @deprecated use `CreateEdgeConfigTokenRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateEdgeConfigTokenRequestBody$outboundSchema;
  /** @deprecated use `CreateEdgeConfigTokenRequestBody$Outbound` instead. */
  export type Outbound = CreateEdgeConfigTokenRequestBody$Outbound;
}

export function createEdgeConfigTokenRequestBodyToJSON(
  createEdgeConfigTokenRequestBody: CreateEdgeConfigTokenRequestBody,
): string {
  return JSON.stringify(
    CreateEdgeConfigTokenRequestBody$outboundSchema.parse(
      createEdgeConfigTokenRequestBody,
    ),
  );
}

export function createEdgeConfigTokenRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateEdgeConfigTokenRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateEdgeConfigTokenRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateEdgeConfigTokenRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateEdgeConfigTokenRequest$inboundSchema: z.ZodType<
  CreateEdgeConfigTokenRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  edgeConfigId: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  RequestBody: z.lazy(() => CreateEdgeConfigTokenRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateEdgeConfigTokenRequest$Outbound = {
  edgeConfigId: string;
  teamId?: string | undefined;
  slug?: string | undefined;
  RequestBody: CreateEdgeConfigTokenRequestBody$Outbound;
};

/** @internal */
export const CreateEdgeConfigTokenRequest$outboundSchema: z.ZodType<
  CreateEdgeConfigTokenRequest$Outbound,
  z.ZodTypeDef,
  CreateEdgeConfigTokenRequest
> = z.object({
  edgeConfigId: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  requestBody: z.lazy(() => CreateEdgeConfigTokenRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEdgeConfigTokenRequest$ {
  /** @deprecated use `CreateEdgeConfigTokenRequest$inboundSchema` instead. */
  export const inboundSchema = CreateEdgeConfigTokenRequest$inboundSchema;
  /** @deprecated use `CreateEdgeConfigTokenRequest$outboundSchema` instead. */
  export const outboundSchema = CreateEdgeConfigTokenRequest$outboundSchema;
  /** @deprecated use `CreateEdgeConfigTokenRequest$Outbound` instead. */
  export type Outbound = CreateEdgeConfigTokenRequest$Outbound;
}

export function createEdgeConfigTokenRequestToJSON(
  createEdgeConfigTokenRequest: CreateEdgeConfigTokenRequest,
): string {
  return JSON.stringify(
    CreateEdgeConfigTokenRequest$outboundSchema.parse(
      createEdgeConfigTokenRequest,
    ),
  );
}

export function createEdgeConfigTokenRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateEdgeConfigTokenRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateEdgeConfigTokenRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateEdgeConfigTokenRequest' from JSON`,
  );
}

/** @internal */
export const CreateEdgeConfigTokenResponseBody$inboundSchema: z.ZodType<
  CreateEdgeConfigTokenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  id: z.string(),
});

/** @internal */
export type CreateEdgeConfigTokenResponseBody$Outbound = {
  token: string;
  id: string;
};

/** @internal */
export const CreateEdgeConfigTokenResponseBody$outboundSchema: z.ZodType<
  CreateEdgeConfigTokenResponseBody$Outbound,
  z.ZodTypeDef,
  CreateEdgeConfigTokenResponseBody
> = z.object({
  token: z.string(),
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEdgeConfigTokenResponseBody$ {
  /** @deprecated use `CreateEdgeConfigTokenResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateEdgeConfigTokenResponseBody$inboundSchema;
  /** @deprecated use `CreateEdgeConfigTokenResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateEdgeConfigTokenResponseBody$outboundSchema;
  /** @deprecated use `CreateEdgeConfigTokenResponseBody$Outbound` instead. */
  export type Outbound = CreateEdgeConfigTokenResponseBody$Outbound;
}

export function createEdgeConfigTokenResponseBodyToJSON(
  createEdgeConfigTokenResponseBody: CreateEdgeConfigTokenResponseBody,
): string {
  return JSON.stringify(
    CreateEdgeConfigTokenResponseBody$outboundSchema.parse(
      createEdgeConfigTokenResponseBody,
    ),
  );
}

export function createEdgeConfigTokenResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateEdgeConfigTokenResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateEdgeConfigTokenResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateEdgeConfigTokenResponseBody' from JSON`,
  );
}
