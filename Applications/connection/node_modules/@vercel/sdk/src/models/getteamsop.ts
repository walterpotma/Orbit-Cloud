/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Pagination,
  Pagination$inboundSchema,
  Pagination$Outbound,
  Pagination$outboundSchema,
} from "./pagination.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
import {
  Team,
  Team$inboundSchema,
  Team$Outbound,
  Team$outboundSchema,
} from "./team.js";
import {
  TeamLimited,
  TeamLimited$inboundSchema,
  TeamLimited$Outbound,
  TeamLimited$outboundSchema,
} from "./teamlimited.js";

export type GetTeamsRequest = {
  /**
   * Maximum number of Teams which may be returned.
   */
  limit?: number | undefined;
  /**
   * Timestamp (in milliseconds) to only include Teams created since then.
   */
  since?: number | undefined;
  /**
   * Timestamp (in milliseconds) to only include Teams created until then.
   */
  until?: number | undefined;
};

export type GetTeamsTeams = Team | TeamLimited;

/**
 * A paginated list of teams.
 */
export type GetTeamsResponseBody = {
  teams: Array<Team | TeamLimited>;
  /**
   * This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.
   */
  pagination: Pagination;
};

/** @internal */
export const GetTeamsRequest$inboundSchema: z.ZodType<
  GetTeamsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  limit: z.number().optional(),
  since: z.number().optional(),
  until: z.number().optional(),
});

/** @internal */
export type GetTeamsRequest$Outbound = {
  limit?: number | undefined;
  since?: number | undefined;
  until?: number | undefined;
};

/** @internal */
export const GetTeamsRequest$outboundSchema: z.ZodType<
  GetTeamsRequest$Outbound,
  z.ZodTypeDef,
  GetTeamsRequest
> = z.object({
  limit: z.number().optional(),
  since: z.number().optional(),
  until: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeamsRequest$ {
  /** @deprecated use `GetTeamsRequest$inboundSchema` instead. */
  export const inboundSchema = GetTeamsRequest$inboundSchema;
  /** @deprecated use `GetTeamsRequest$outboundSchema` instead. */
  export const outboundSchema = GetTeamsRequest$outboundSchema;
  /** @deprecated use `GetTeamsRequest$Outbound` instead. */
  export type Outbound = GetTeamsRequest$Outbound;
}

export function getTeamsRequestToJSON(
  getTeamsRequest: GetTeamsRequest,
): string {
  return JSON.stringify(GetTeamsRequest$outboundSchema.parse(getTeamsRequest));
}

export function getTeamsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTeamsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTeamsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTeamsRequest' from JSON`,
  );
}

/** @internal */
export const GetTeamsTeams$inboundSchema: z.ZodType<
  GetTeamsTeams,
  z.ZodTypeDef,
  unknown
> = z.union([Team$inboundSchema, TeamLimited$inboundSchema]);

/** @internal */
export type GetTeamsTeams$Outbound = Team$Outbound | TeamLimited$Outbound;

/** @internal */
export const GetTeamsTeams$outboundSchema: z.ZodType<
  GetTeamsTeams$Outbound,
  z.ZodTypeDef,
  GetTeamsTeams
> = z.union([Team$outboundSchema, TeamLimited$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeamsTeams$ {
  /** @deprecated use `GetTeamsTeams$inboundSchema` instead. */
  export const inboundSchema = GetTeamsTeams$inboundSchema;
  /** @deprecated use `GetTeamsTeams$outboundSchema` instead. */
  export const outboundSchema = GetTeamsTeams$outboundSchema;
  /** @deprecated use `GetTeamsTeams$Outbound` instead. */
  export type Outbound = GetTeamsTeams$Outbound;
}

export function getTeamsTeamsToJSON(getTeamsTeams: GetTeamsTeams): string {
  return JSON.stringify(GetTeamsTeams$outboundSchema.parse(getTeamsTeams));
}

export function getTeamsTeamsFromJSON(
  jsonString: string,
): SafeParseResult<GetTeamsTeams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTeamsTeams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTeamsTeams' from JSON`,
  );
}

/** @internal */
export const GetTeamsResponseBody$inboundSchema: z.ZodType<
  GetTeamsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  teams: z.array(z.union([Team$inboundSchema, TeamLimited$inboundSchema])),
  pagination: Pagination$inboundSchema,
});

/** @internal */
export type GetTeamsResponseBody$Outbound = {
  teams: Array<Team$Outbound | TeamLimited$Outbound>;
  pagination: Pagination$Outbound;
};

/** @internal */
export const GetTeamsResponseBody$outboundSchema: z.ZodType<
  GetTeamsResponseBody$Outbound,
  z.ZodTypeDef,
  GetTeamsResponseBody
> = z.object({
  teams: z.array(z.union([Team$outboundSchema, TeamLimited$outboundSchema])),
  pagination: Pagination$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeamsResponseBody$ {
  /** @deprecated use `GetTeamsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetTeamsResponseBody$inboundSchema;
  /** @deprecated use `GetTeamsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetTeamsResponseBody$outboundSchema;
  /** @deprecated use `GetTeamsResponseBody$Outbound` instead. */
  export type Outbound = GetTeamsResponseBody$Outbound;
}

export function getTeamsResponseBodyToJSON(
  getTeamsResponseBody: GetTeamsResponseBody,
): string {
  return JSON.stringify(
    GetTeamsResponseBody$outboundSchema.parse(getTeamsResponseBody),
  );
}

export function getTeamsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetTeamsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTeamsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTeamsResponseBody' from JSON`,
  );
}
