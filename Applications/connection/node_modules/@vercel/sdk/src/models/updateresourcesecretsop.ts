/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * A map of environments to override values for the secret, used for setting different values across deployments in production, preview, and development environments. Note: the same value will be used for all deployments in the given environment.
 */
export type UpdateResourceSecretsEnvironmentOverrides = {
  /**
   * Value used for development environment.
   */
  development?: string | undefined;
  /**
   * Value used for preview environment.
   */
  preview?: string | undefined;
  /**
   * Value used for production environment.
   */
  production?: string | undefined;
};

export type UpdateResourceSecretsSecrets = {
  name: string;
  value: string;
  prefix?: string | undefined;
  /**
   * A map of environments to override values for the secret, used for setting different values across deployments in production, preview, and development environments. Note: the same value will be used for all deployments in the given environment.
   */
  environmentOverrides?: UpdateResourceSecretsEnvironmentOverrides | undefined;
};

export type UpdateResourceSecretsRequestBody = {
  secrets: Array<UpdateResourceSecretsSecrets>;
  /**
   * If true, will only update the provided secrets
   */
  partial?: boolean | undefined;
};

export type UpdateResourceSecretsRequest = {
  integrationConfigurationId: string;
  integrationProductIdOrSlug: string;
  resourceId: string;
  requestBody: UpdateResourceSecretsRequestBody;
};

/** @internal */
export const UpdateResourceSecretsEnvironmentOverrides$inboundSchema: z.ZodType<
  UpdateResourceSecretsEnvironmentOverrides,
  z.ZodTypeDef,
  unknown
> = z.object({
  development: z.string().optional(),
  preview: z.string().optional(),
  production: z.string().optional(),
});

/** @internal */
export type UpdateResourceSecretsEnvironmentOverrides$Outbound = {
  development?: string | undefined;
  preview?: string | undefined;
  production?: string | undefined;
};

/** @internal */
export const UpdateResourceSecretsEnvironmentOverrides$outboundSchema:
  z.ZodType<
    UpdateResourceSecretsEnvironmentOverrides$Outbound,
    z.ZodTypeDef,
    UpdateResourceSecretsEnvironmentOverrides
  > = z.object({
    development: z.string().optional(),
    preview: z.string().optional(),
    production: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateResourceSecretsEnvironmentOverrides$ {
  /** @deprecated use `UpdateResourceSecretsEnvironmentOverrides$inboundSchema` instead. */
  export const inboundSchema =
    UpdateResourceSecretsEnvironmentOverrides$inboundSchema;
  /** @deprecated use `UpdateResourceSecretsEnvironmentOverrides$outboundSchema` instead. */
  export const outboundSchema =
    UpdateResourceSecretsEnvironmentOverrides$outboundSchema;
  /** @deprecated use `UpdateResourceSecretsEnvironmentOverrides$Outbound` instead. */
  export type Outbound = UpdateResourceSecretsEnvironmentOverrides$Outbound;
}

export function updateResourceSecretsEnvironmentOverridesToJSON(
  updateResourceSecretsEnvironmentOverrides:
    UpdateResourceSecretsEnvironmentOverrides,
): string {
  return JSON.stringify(
    UpdateResourceSecretsEnvironmentOverrides$outboundSchema.parse(
      updateResourceSecretsEnvironmentOverrides,
    ),
  );
}

export function updateResourceSecretsEnvironmentOverridesFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateResourceSecretsEnvironmentOverrides,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateResourceSecretsEnvironmentOverrides$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateResourceSecretsEnvironmentOverrides' from JSON`,
  );
}

/** @internal */
export const UpdateResourceSecretsSecrets$inboundSchema: z.ZodType<
  UpdateResourceSecretsSecrets,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
  prefix: z.string().optional(),
  environmentOverrides: z.lazy(() =>
    UpdateResourceSecretsEnvironmentOverrides$inboundSchema
  ).optional(),
});

/** @internal */
export type UpdateResourceSecretsSecrets$Outbound = {
  name: string;
  value: string;
  prefix?: string | undefined;
  environmentOverrides?:
    | UpdateResourceSecretsEnvironmentOverrides$Outbound
    | undefined;
};

/** @internal */
export const UpdateResourceSecretsSecrets$outboundSchema: z.ZodType<
  UpdateResourceSecretsSecrets$Outbound,
  z.ZodTypeDef,
  UpdateResourceSecretsSecrets
> = z.object({
  name: z.string(),
  value: z.string(),
  prefix: z.string().optional(),
  environmentOverrides: z.lazy(() =>
    UpdateResourceSecretsEnvironmentOverrides$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateResourceSecretsSecrets$ {
  /** @deprecated use `UpdateResourceSecretsSecrets$inboundSchema` instead. */
  export const inboundSchema = UpdateResourceSecretsSecrets$inboundSchema;
  /** @deprecated use `UpdateResourceSecretsSecrets$outboundSchema` instead. */
  export const outboundSchema = UpdateResourceSecretsSecrets$outboundSchema;
  /** @deprecated use `UpdateResourceSecretsSecrets$Outbound` instead. */
  export type Outbound = UpdateResourceSecretsSecrets$Outbound;
}

export function updateResourceSecretsSecretsToJSON(
  updateResourceSecretsSecrets: UpdateResourceSecretsSecrets,
): string {
  return JSON.stringify(
    UpdateResourceSecretsSecrets$outboundSchema.parse(
      updateResourceSecretsSecrets,
    ),
  );
}

export function updateResourceSecretsSecretsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateResourceSecretsSecrets, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateResourceSecretsSecrets$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateResourceSecretsSecrets' from JSON`,
  );
}

/** @internal */
export const UpdateResourceSecretsRequestBody$inboundSchema: z.ZodType<
  UpdateResourceSecretsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  secrets: z.array(z.lazy(() => UpdateResourceSecretsSecrets$inboundSchema)),
  partial: z.boolean().optional(),
});

/** @internal */
export type UpdateResourceSecretsRequestBody$Outbound = {
  secrets: Array<UpdateResourceSecretsSecrets$Outbound>;
  partial?: boolean | undefined;
};

/** @internal */
export const UpdateResourceSecretsRequestBody$outboundSchema: z.ZodType<
  UpdateResourceSecretsRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateResourceSecretsRequestBody
> = z.object({
  secrets: z.array(z.lazy(() => UpdateResourceSecretsSecrets$outboundSchema)),
  partial: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateResourceSecretsRequestBody$ {
  /** @deprecated use `UpdateResourceSecretsRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateResourceSecretsRequestBody$inboundSchema;
  /** @deprecated use `UpdateResourceSecretsRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateResourceSecretsRequestBody$outboundSchema;
  /** @deprecated use `UpdateResourceSecretsRequestBody$Outbound` instead. */
  export type Outbound = UpdateResourceSecretsRequestBody$Outbound;
}

export function updateResourceSecretsRequestBodyToJSON(
  updateResourceSecretsRequestBody: UpdateResourceSecretsRequestBody,
): string {
  return JSON.stringify(
    UpdateResourceSecretsRequestBody$outboundSchema.parse(
      updateResourceSecretsRequestBody,
    ),
  );
}

export function updateResourceSecretsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateResourceSecretsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateResourceSecretsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateResourceSecretsRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateResourceSecretsRequest$inboundSchema: z.ZodType<
  UpdateResourceSecretsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  integrationConfigurationId: z.string(),
  integrationProductIdOrSlug: z.string(),
  resourceId: z.string(),
  RequestBody: z.lazy(() => UpdateResourceSecretsRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateResourceSecretsRequest$Outbound = {
  integrationConfigurationId: string;
  integrationProductIdOrSlug: string;
  resourceId: string;
  RequestBody: UpdateResourceSecretsRequestBody$Outbound;
};

/** @internal */
export const UpdateResourceSecretsRequest$outboundSchema: z.ZodType<
  UpdateResourceSecretsRequest$Outbound,
  z.ZodTypeDef,
  UpdateResourceSecretsRequest
> = z.object({
  integrationConfigurationId: z.string(),
  integrationProductIdOrSlug: z.string(),
  resourceId: z.string(),
  requestBody: z.lazy(() => UpdateResourceSecretsRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateResourceSecretsRequest$ {
  /** @deprecated use `UpdateResourceSecretsRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateResourceSecretsRequest$inboundSchema;
  /** @deprecated use `UpdateResourceSecretsRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateResourceSecretsRequest$outboundSchema;
  /** @deprecated use `UpdateResourceSecretsRequest$Outbound` instead. */
  export type Outbound = UpdateResourceSecretsRequest$Outbound;
}

export function updateResourceSecretsRequestToJSON(
  updateResourceSecretsRequest: UpdateResourceSecretsRequest,
): string {
  return JSON.stringify(
    UpdateResourceSecretsRequest$outboundSchema.parse(
      updateResourceSecretsRequest,
    ),
  );
}

export function updateResourceSecretsRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateResourceSecretsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateResourceSecretsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateResourceSecretsRequest' from JSON`,
  );
}
