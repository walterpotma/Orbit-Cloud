/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export const RequestBodyAction = {
  Refund: "refund",
} as const;
export type RequestBodyAction = ClosedEnum<typeof RequestBodyAction>;

export type UpdateInvoiceRequestBody1 = {
  action: RequestBodyAction;
  /**
   * Refund reason.
   */
  reason: string;
  /**
   * The total amount to be refunded. Must be less than or equal to the total amount of the invoice.
   */
  total: string;
};

export type UpdateInvoiceRequestBody = UpdateInvoiceRequestBody1;

export type UpdateInvoiceRequest = {
  integrationConfigurationId: string;
  invoiceId: string;
  requestBody: UpdateInvoiceRequestBody1;
};

/** @internal */
export const RequestBodyAction$inboundSchema: z.ZodNativeEnum<
  typeof RequestBodyAction
> = z.nativeEnum(RequestBodyAction);

/** @internal */
export const RequestBodyAction$outboundSchema: z.ZodNativeEnum<
  typeof RequestBodyAction
> = RequestBodyAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyAction$ {
  /** @deprecated use `RequestBodyAction$inboundSchema` instead. */
  export const inboundSchema = RequestBodyAction$inboundSchema;
  /** @deprecated use `RequestBodyAction$outboundSchema` instead. */
  export const outboundSchema = RequestBodyAction$outboundSchema;
}

/** @internal */
export const UpdateInvoiceRequestBody1$inboundSchema: z.ZodType<
  UpdateInvoiceRequestBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: RequestBodyAction$inboundSchema,
  reason: z.string(),
  total: z.string(),
});

/** @internal */
export type UpdateInvoiceRequestBody1$Outbound = {
  action: string;
  reason: string;
  total: string;
};

/** @internal */
export const UpdateInvoiceRequestBody1$outboundSchema: z.ZodType<
  UpdateInvoiceRequestBody1$Outbound,
  z.ZodTypeDef,
  UpdateInvoiceRequestBody1
> = z.object({
  action: RequestBodyAction$outboundSchema,
  reason: z.string(),
  total: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInvoiceRequestBody1$ {
  /** @deprecated use `UpdateInvoiceRequestBody1$inboundSchema` instead. */
  export const inboundSchema = UpdateInvoiceRequestBody1$inboundSchema;
  /** @deprecated use `UpdateInvoiceRequestBody1$outboundSchema` instead. */
  export const outboundSchema = UpdateInvoiceRequestBody1$outboundSchema;
  /** @deprecated use `UpdateInvoiceRequestBody1$Outbound` instead. */
  export type Outbound = UpdateInvoiceRequestBody1$Outbound;
}

export function updateInvoiceRequestBody1ToJSON(
  updateInvoiceRequestBody1: UpdateInvoiceRequestBody1,
): string {
  return JSON.stringify(
    UpdateInvoiceRequestBody1$outboundSchema.parse(updateInvoiceRequestBody1),
  );
}

export function updateInvoiceRequestBody1FromJSON(
  jsonString: string,
): SafeParseResult<UpdateInvoiceRequestBody1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateInvoiceRequestBody1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInvoiceRequestBody1' from JSON`,
  );
}

/** @internal */
export const UpdateInvoiceRequestBody$inboundSchema: z.ZodType<
  UpdateInvoiceRequestBody,
  z.ZodTypeDef,
  unknown
> = z.lazy(() => UpdateInvoiceRequestBody1$inboundSchema);

/** @internal */
export type UpdateInvoiceRequestBody$Outbound =
  UpdateInvoiceRequestBody1$Outbound;

/** @internal */
export const UpdateInvoiceRequestBody$outboundSchema: z.ZodType<
  UpdateInvoiceRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateInvoiceRequestBody
> = z.lazy(() => UpdateInvoiceRequestBody1$outboundSchema);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInvoiceRequestBody$ {
  /** @deprecated use `UpdateInvoiceRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateInvoiceRequestBody$inboundSchema;
  /** @deprecated use `UpdateInvoiceRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateInvoiceRequestBody$outboundSchema;
  /** @deprecated use `UpdateInvoiceRequestBody$Outbound` instead. */
  export type Outbound = UpdateInvoiceRequestBody$Outbound;
}

export function updateInvoiceRequestBodyToJSON(
  updateInvoiceRequestBody: UpdateInvoiceRequestBody,
): string {
  return JSON.stringify(
    UpdateInvoiceRequestBody$outboundSchema.parse(updateInvoiceRequestBody),
  );
}

export function updateInvoiceRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInvoiceRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateInvoiceRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInvoiceRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateInvoiceRequest$inboundSchema: z.ZodType<
  UpdateInvoiceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  integrationConfigurationId: z.string(),
  invoiceId: z.string(),
  RequestBody: z.lazy(() => UpdateInvoiceRequestBody1$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateInvoiceRequest$Outbound = {
  integrationConfigurationId: string;
  invoiceId: string;
  RequestBody: UpdateInvoiceRequestBody1$Outbound;
};

/** @internal */
export const UpdateInvoiceRequest$outboundSchema: z.ZodType<
  UpdateInvoiceRequest$Outbound,
  z.ZodTypeDef,
  UpdateInvoiceRequest
> = z.object({
  integrationConfigurationId: z.string(),
  invoiceId: z.string(),
  requestBody: z.lazy(() => UpdateInvoiceRequestBody1$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInvoiceRequest$ {
  /** @deprecated use `UpdateInvoiceRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateInvoiceRequest$inboundSchema;
  /** @deprecated use `UpdateInvoiceRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateInvoiceRequest$outboundSchema;
  /** @deprecated use `UpdateInvoiceRequest$Outbound` instead. */
  export type Outbound = UpdateInvoiceRequest$Outbound;
}

export function updateInvoiceRequestToJSON(
  updateInvoiceRequest: UpdateInvoiceRequest,
): string {
  return JSON.stringify(
    UpdateInvoiceRequest$outboundSchema.parse(updateInvoiceRequest),
  );
}

export function updateInvoiceRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInvoiceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateInvoiceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInvoiceRequest' from JSON`,
  );
}
