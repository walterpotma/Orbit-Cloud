/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type DeleteIntegrationResourceRequest = {
  integrationConfigurationId: string;
  resourceId: string;
};

/** @internal */
export const DeleteIntegrationResourceRequest$inboundSchema: z.ZodType<
  DeleteIntegrationResourceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  integrationConfigurationId: z.string(),
  resourceId: z.string(),
});

/** @internal */
export type DeleteIntegrationResourceRequest$Outbound = {
  integrationConfigurationId: string;
  resourceId: string;
};

/** @internal */
export const DeleteIntegrationResourceRequest$outboundSchema: z.ZodType<
  DeleteIntegrationResourceRequest$Outbound,
  z.ZodTypeDef,
  DeleteIntegrationResourceRequest
> = z.object({
  integrationConfigurationId: z.string(),
  resourceId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteIntegrationResourceRequest$ {
  /** @deprecated use `DeleteIntegrationResourceRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteIntegrationResourceRequest$inboundSchema;
  /** @deprecated use `DeleteIntegrationResourceRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteIntegrationResourceRequest$outboundSchema;
  /** @deprecated use `DeleteIntegrationResourceRequest$Outbound` instead. */
  export type Outbound = DeleteIntegrationResourceRequest$Outbound;
}

export function deleteIntegrationResourceRequestToJSON(
  deleteIntegrationResourceRequest: DeleteIntegrationResourceRequest,
): string {
  return JSON.stringify(
    DeleteIntegrationResourceRequest$outboundSchema.parse(
      deleteIntegrationResourceRequest,
    ),
  );
}

export function deleteIntegrationResourceRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteIntegrationResourceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteIntegrationResourceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteIntegrationResourceRequest' from JSON`,
  );
}
