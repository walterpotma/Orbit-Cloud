/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type FlagJSONValue =
  | string
  | number
  | boolean
  | Array<FlagJSONValue | null>
  | { [k: string]: FlagJSONValue | null };

/** @internal */
export const FlagJSONValue$inboundSchema: z.ZodType<
  FlagJSONValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.nullable(z.lazy(() => FlagJSONValue$inboundSchema))),
  z.record(z.nullable(z.lazy(() => FlagJSONValue$inboundSchema))),
]);

/** @internal */
export type FlagJSONValue$Outbound =
  | string
  | number
  | boolean
  | Array<FlagJSONValue$Outbound | null>
  | { [k: string]: FlagJSONValue$Outbound | null };

/** @internal */
export const FlagJSONValue$outboundSchema: z.ZodType<
  FlagJSONValue$Outbound,
  z.ZodTypeDef,
  FlagJSONValue
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.nullable(z.lazy(() => FlagJSONValue$outboundSchema))),
  z.record(z.nullable(z.lazy(() => FlagJSONValue$outboundSchema))),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlagJSONValue$ {
  /** @deprecated use `FlagJSONValue$inboundSchema` instead. */
  export const inboundSchema = FlagJSONValue$inboundSchema;
  /** @deprecated use `FlagJSONValue$outboundSchema` instead. */
  export const outboundSchema = FlagJSONValue$outboundSchema;
  /** @deprecated use `FlagJSONValue$Outbound` instead. */
  export type Outbound = FlagJSONValue$Outbound;
}

export function flagJSONValueToJSON(flagJSONValue: FlagJSONValue): string {
  return JSON.stringify(FlagJSONValue$outboundSchema.parse(flagJSONValue));
}

export function flagJSONValueFromJSON(
  jsonString: string,
): SafeParseResult<FlagJSONValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FlagJSONValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FlagJSONValue' from JSON`,
  );
}
