/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { projectsPauseProject } from "../../funcs/projectsPauseProject.js";
import { PauseProjectRequest$inboundSchema } from "../../models/pauseprojectop.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: PauseProjectRequest$inboundSchema,
};

export const tool$projectsPauseProject: ToolDefinition<typeof args> = {
  name: "projects-pause-project",
  description: `Pause a project

Pause a project by passing its project \`id\` in the URL. If the project does not exist given the id then the request will fail with 400 status code. If the project disables auto assigning custom production domains and blocks the active Production Deployment then the request will return with 200 status code.`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await projectsPauseProject(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    return formatResult(void 0, apiCall);
  },
};
