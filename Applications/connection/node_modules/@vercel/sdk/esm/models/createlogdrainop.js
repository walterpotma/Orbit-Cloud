/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/**
 * The delivery log format
 */
export const DeliveryFormat = {
    Json: "json",
    Ndjson: "ndjson",
    Syslog: "syslog",
};
export const Sources = {
    Static: "static",
    Lambda: "lambda",
    Build: "build",
    Edge: "edge",
    External: "external",
    Firewall: "firewall",
};
export const Environments = {
    Preview: "preview",
    Production: "production",
};
/**
 * The delivery log format
 */
export const CreateLogDrainDeliveryFormat = {
    Json: "json",
    Ndjson: "ndjson",
    Syslog: "syslog",
    Protobuf: "protobuf",
};
/**
 * The sources from which logs are currently being delivered to this log drain.
 */
export const CreateLogDrainSources = {
    Build: "build",
    Edge: "edge",
    Lambda: "lambda",
    Static: "static",
    External: "external",
    Firewall: "firewall",
};
/**
 * Whether the log drain was created by an integration or by a user
 */
export const CreateLogDrainCreatedFrom = {
    Integration: "integration",
    SelfServed: "self-served",
};
/**
 * The environment of log drain
 */
export const CreateLogDrainEnvironments = {
    Production: "production",
    Preview: "preview",
};
/** @internal */
export const DeliveryFormat$inboundSchema = z.nativeEnum(DeliveryFormat);
/** @internal */
export const DeliveryFormat$outboundSchema = DeliveryFormat$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DeliveryFormat$;
(function (DeliveryFormat$) {
    /** @deprecated use `DeliveryFormat$inboundSchema` instead. */
    DeliveryFormat$.inboundSchema = DeliveryFormat$inboundSchema;
    /** @deprecated use `DeliveryFormat$outboundSchema` instead. */
    DeliveryFormat$.outboundSchema = DeliveryFormat$outboundSchema;
})(DeliveryFormat$ || (DeliveryFormat$ = {}));
/** @internal */
export const Sources$inboundSchema = z
    .nativeEnum(Sources);
/** @internal */
export const Sources$outboundSchema = Sources$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Sources$;
(function (Sources$) {
    /** @deprecated use `Sources$inboundSchema` instead. */
    Sources$.inboundSchema = Sources$inboundSchema;
    /** @deprecated use `Sources$outboundSchema` instead. */
    Sources$.outboundSchema = Sources$outboundSchema;
})(Sources$ || (Sources$ = {}));
/** @internal */
export const Environments$inboundSchema = z.nativeEnum(Environments);
/** @internal */
export const Environments$outboundSchema = Environments$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Environments$;
(function (Environments$) {
    /** @deprecated use `Environments$inboundSchema` instead. */
    Environments$.inboundSchema = Environments$inboundSchema;
    /** @deprecated use `Environments$outboundSchema` instead. */
    Environments$.outboundSchema = Environments$outboundSchema;
})(Environments$ || (Environments$ = {}));
/** @internal */
export const CreateLogDrainRequestBody$inboundSchema = z.object({
    name: z.string(),
    projectIds: z.array(z.string()).optional(),
    secret: z.string().optional(),
    deliveryFormat: DeliveryFormat$inboundSchema.optional(),
    url: z.string(),
    sources: z.array(Sources$inboundSchema).optional(),
    headers: z.record(z.string()).optional(),
    environments: z.array(Environments$inboundSchema).optional(),
});
/** @internal */
export const CreateLogDrainRequestBody$outboundSchema = z.object({
    name: z.string(),
    projectIds: z.array(z.string()).optional(),
    secret: z.string().optional(),
    deliveryFormat: DeliveryFormat$outboundSchema.optional(),
    url: z.string(),
    sources: z.array(Sources$outboundSchema).optional(),
    headers: z.record(z.string()).optional(),
    environments: z.array(Environments$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateLogDrainRequestBody$;
(function (CreateLogDrainRequestBody$) {
    /** @deprecated use `CreateLogDrainRequestBody$inboundSchema` instead. */
    CreateLogDrainRequestBody$.inboundSchema = CreateLogDrainRequestBody$inboundSchema;
    /** @deprecated use `CreateLogDrainRequestBody$outboundSchema` instead. */
    CreateLogDrainRequestBody$.outboundSchema = CreateLogDrainRequestBody$outboundSchema;
})(CreateLogDrainRequestBody$ || (CreateLogDrainRequestBody$ = {}));
export function createLogDrainRequestBodyToJSON(createLogDrainRequestBody) {
    return JSON.stringify(CreateLogDrainRequestBody$outboundSchema.parse(createLogDrainRequestBody));
}
export function createLogDrainRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateLogDrainRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateLogDrainRequestBody' from JSON`);
}
/** @internal */
export const CreateLogDrainRequest$inboundSchema = z.object({
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => CreateLogDrainRequestBody$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const CreateLogDrainRequest$outboundSchema = z.object({
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => CreateLogDrainRequestBody$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateLogDrainRequest$;
(function (CreateLogDrainRequest$) {
    /** @deprecated use `CreateLogDrainRequest$inboundSchema` instead. */
    CreateLogDrainRequest$.inboundSchema = CreateLogDrainRequest$inboundSchema;
    /** @deprecated use `CreateLogDrainRequest$outboundSchema` instead. */
    CreateLogDrainRequest$.outboundSchema = CreateLogDrainRequest$outboundSchema;
})(CreateLogDrainRequest$ || (CreateLogDrainRequest$ = {}));
export function createLogDrainRequestToJSON(createLogDrainRequest) {
    return JSON.stringify(CreateLogDrainRequest$outboundSchema.parse(createLogDrainRequest));
}
export function createLogDrainRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateLogDrainRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateLogDrainRequest' from JSON`);
}
/** @internal */
export const CreateLogDrainDeliveryFormat$inboundSchema = z.nativeEnum(CreateLogDrainDeliveryFormat);
/** @internal */
export const CreateLogDrainDeliveryFormat$outboundSchema = CreateLogDrainDeliveryFormat$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateLogDrainDeliveryFormat$;
(function (CreateLogDrainDeliveryFormat$) {
    /** @deprecated use `CreateLogDrainDeliveryFormat$inboundSchema` instead. */
    CreateLogDrainDeliveryFormat$.inboundSchema = CreateLogDrainDeliveryFormat$inboundSchema;
    /** @deprecated use `CreateLogDrainDeliveryFormat$outboundSchema` instead. */
    CreateLogDrainDeliveryFormat$.outboundSchema = CreateLogDrainDeliveryFormat$outboundSchema;
})(CreateLogDrainDeliveryFormat$ || (CreateLogDrainDeliveryFormat$ = {}));
/** @internal */
export const CreateLogDrainSources$inboundSchema = z.nativeEnum(CreateLogDrainSources);
/** @internal */
export const CreateLogDrainSources$outboundSchema = CreateLogDrainSources$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateLogDrainSources$;
(function (CreateLogDrainSources$) {
    /** @deprecated use `CreateLogDrainSources$inboundSchema` instead. */
    CreateLogDrainSources$.inboundSchema = CreateLogDrainSources$inboundSchema;
    /** @deprecated use `CreateLogDrainSources$outboundSchema` instead. */
    CreateLogDrainSources$.outboundSchema = CreateLogDrainSources$outboundSchema;
})(CreateLogDrainSources$ || (CreateLogDrainSources$ = {}));
/** @internal */
export const CreateLogDrainCreatedFrom$inboundSchema = z.nativeEnum(CreateLogDrainCreatedFrom);
/** @internal */
export const CreateLogDrainCreatedFrom$outboundSchema = CreateLogDrainCreatedFrom$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateLogDrainCreatedFrom$;
(function (CreateLogDrainCreatedFrom$) {
    /** @deprecated use `CreateLogDrainCreatedFrom$inboundSchema` instead. */
    CreateLogDrainCreatedFrom$.inboundSchema = CreateLogDrainCreatedFrom$inboundSchema;
    /** @deprecated use `CreateLogDrainCreatedFrom$outboundSchema` instead. */
    CreateLogDrainCreatedFrom$.outboundSchema = CreateLogDrainCreatedFrom$outboundSchema;
})(CreateLogDrainCreatedFrom$ || (CreateLogDrainCreatedFrom$ = {}));
/** @internal */
export const CreateLogDrainEnvironments$inboundSchema = z.nativeEnum(CreateLogDrainEnvironments);
/** @internal */
export const CreateLogDrainEnvironments$outboundSchema = CreateLogDrainEnvironments$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateLogDrainEnvironments$;
(function (CreateLogDrainEnvironments$) {
    /** @deprecated use `CreateLogDrainEnvironments$inboundSchema` instead. */
    CreateLogDrainEnvironments$.inboundSchema = CreateLogDrainEnvironments$inboundSchema;
    /** @deprecated use `CreateLogDrainEnvironments$outboundSchema` instead. */
    CreateLogDrainEnvironments$.outboundSchema = CreateLogDrainEnvironments$outboundSchema;
})(CreateLogDrainEnvironments$ || (CreateLogDrainEnvironments$ = {}));
/** @internal */
export const CreateLogDrainResponseBody$inboundSchema = z.object({
    clientId: z.string().optional(),
    configurationId: z.string().optional(),
    createdAt: z.number(),
    id: z.string(),
    deliveryFormat: CreateLogDrainDeliveryFormat$inboundSchema.optional(),
    name: z.string(),
    ownerId: z.string(),
    projectId: z.nullable(z.string()).optional(),
    projectIds: z.array(z.string()).optional(),
    url: z.string(),
    sources: z.array(CreateLogDrainSources$inboundSchema).optional(),
    createdFrom: CreateLogDrainCreatedFrom$inboundSchema.optional(),
    headers: z.record(z.string()).optional(),
    environments: z.array(CreateLogDrainEnvironments$inboundSchema).optional(),
    branch: z.string().optional(),
    samplingRate: z.number().optional(),
});
/** @internal */
export const CreateLogDrainResponseBody$outboundSchema = z.object({
    clientId: z.string().optional(),
    configurationId: z.string().optional(),
    createdAt: z.number(),
    id: z.string(),
    deliveryFormat: CreateLogDrainDeliveryFormat$outboundSchema.optional(),
    name: z.string(),
    ownerId: z.string(),
    projectId: z.nullable(z.string()).optional(),
    projectIds: z.array(z.string()).optional(),
    url: z.string(),
    sources: z.array(CreateLogDrainSources$outboundSchema).optional(),
    createdFrom: CreateLogDrainCreatedFrom$outboundSchema.optional(),
    headers: z.record(z.string()).optional(),
    environments: z.array(CreateLogDrainEnvironments$outboundSchema).optional(),
    branch: z.string().optional(),
    samplingRate: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateLogDrainResponseBody$;
(function (CreateLogDrainResponseBody$) {
    /** @deprecated use `CreateLogDrainResponseBody$inboundSchema` instead. */
    CreateLogDrainResponseBody$.inboundSchema = CreateLogDrainResponseBody$inboundSchema;
    /** @deprecated use `CreateLogDrainResponseBody$outboundSchema` instead. */
    CreateLogDrainResponseBody$.outboundSchema = CreateLogDrainResponseBody$outboundSchema;
})(CreateLogDrainResponseBody$ || (CreateLogDrainResponseBody$ = {}));
export function createLogDrainResponseBodyToJSON(createLogDrainResponseBody) {
    return JSON.stringify(CreateLogDrainResponseBody$outboundSchema.parse(createLogDrainResponseBody));
}
export function createLogDrainResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateLogDrainResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateLogDrainResponseBody' from JSON`);
}
//# sourceMappingURL=createlogdrainop.js.map