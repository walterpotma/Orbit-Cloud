import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type GetWebhookRequest = {
    id: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};
/**
 * The webhooks events
 */
export declare const GetWebhookEvents: {
    readonly BudgetReached: "budget.reached";
    readonly BudgetReset: "budget.reset";
    readonly DomainCreated: "domain.created";
    readonly DomainDnsRecordsChanged: "domain.dns.records.changed";
    readonly DomainTransferInStarted: "domain.transfer-in.started";
    readonly DomainTransferInCompleted: "domain.transfer-in.completed";
    readonly DomainTransferInFailed: "domain.transfer-in.failed";
    readonly DomainCertificateAdd: "domain.certificate.add";
    readonly DomainCertificateAddFailed: "domain.certificate.add.failed";
    readonly DomainCertificateRenew: "domain.certificate.renew";
    readonly DomainCertificateRenewFailed: "domain.certificate.renew.failed";
    readonly DomainCertificateDeleted: "domain.certificate.deleted";
    readonly DomainRenewal: "domain.renewal";
    readonly DomainRenewalFailed: "domain.renewal.failed";
    readonly DomainAutoRenewChanged: "domain.auto-renew.changed";
    readonly DeploymentCreated: "deployment.created";
    readonly DeploymentCleanup: "deployment.cleanup";
    readonly DeploymentError: "deployment.error";
    readonly DeploymentCanceled: "deployment.canceled";
    readonly DeploymentSucceeded: "deployment.succeeded";
    readonly DeploymentReady: "deployment.ready";
    readonly DeploymentCheckRerequested: "deployment.check-rerequested";
    readonly DeploymentPromoted: "deployment.promoted";
    readonly DeploymentIntegrationActionStart: "deployment.integration.action.start";
    readonly DeploymentIntegrationActionCancel: "deployment.integration.action.cancel";
    readonly DeploymentIntegrationActionCleanup: "deployment.integration.action.cleanup";
    readonly DeploymentCheckrunStart: "deployment.checkrun.start";
    readonly DeploymentCheckrunCancel: "deployment.checkrun.cancel";
    readonly EdgeConfigCreated: "edge-config.created";
    readonly EdgeConfigDeleted: "edge-config.deleted";
    readonly EdgeConfigItemsUpdated: "edge-config.items.updated";
    readonly FirewallAttack: "firewall.attack";
    readonly IntegrationConfigurationPermissionUpgraded: "integration-configuration.permission-upgraded";
    readonly IntegrationConfigurationRemoved: "integration-configuration.removed";
    readonly IntegrationConfigurationScopeChangeConfirmed: "integration-configuration.scope-change-confirmed";
    readonly IntegrationResourceProjectConnected: "integration-resource.project-connected";
    readonly IntegrationResourceProjectDisconnected: "integration-resource.project-disconnected";
    readonly ProjectCreated: "project.created";
    readonly ProjectRemoved: "project.removed";
    readonly ProjectDomainCreated: "project.domain.created";
    readonly ProjectDomainUpdated: "project.domain.updated";
    readonly ProjectDomainDeleted: "project.domain.deleted";
    readonly ProjectDomainVerified: "project.domain.verified";
    readonly ProjectDomainUnverified: "project.domain.unverified";
    readonly ProjectDomainMoved: "project.domain.moved";
    readonly ProjectRollingReleaseStarted: "project.rolling-release.started";
    readonly ProjectRollingReleaseAborted: "project.rolling-release.aborted";
    readonly ProjectRollingReleaseCompleted: "project.rolling-release.completed";
    readonly ProjectRollingReleaseApproved: "project.rolling-release.approved";
    readonly DeploymentChecksFailed: "deployment.checks.failed";
    readonly DeploymentChecksSucceeded: "deployment.checks.succeeded";
    readonly DeploymentChecksCompleted: "deployment-checks-completed";
    readonly DeploymentReadyHyphen: "deployment-ready";
    readonly DeploymentPreparedHyphen: "deployment-prepared";
    readonly DeploymentErrorHyphen: "deployment-error";
    readonly DeploymentCheckRerequestedHyphen: "deployment-check-rerequested";
    readonly DeploymentCanceledHyphen: "deployment-canceled";
    readonly ProjectCreatedHyphen: "project-created";
    readonly ProjectRemovedHyphen: "project-removed";
    readonly DomainCreatedHyphen: "domain-created";
    readonly Deployment: "deployment";
    readonly IntegrationConfigurationPermissionUpdatedHyphen: "integration-configuration-permission-updated";
    readonly IntegrationConfigurationRemovedHyphen: "integration-configuration-removed";
    readonly IntegrationConfigurationScopeChangeConfirmedHyphen: "integration-configuration-scope-change-confirmed";
    readonly MarketplaceMemberChanged: "marketplace.member.changed";
    readonly MarketplaceInvoiceCreated: "marketplace.invoice.created";
    readonly MarketplaceInvoicePaid: "marketplace.invoice.paid";
    readonly MarketplaceInvoiceNotpaid: "marketplace.invoice.notpaid";
    readonly MarketplaceInvoiceRefunded: "marketplace.invoice.refunded";
    readonly ObservabilityAnomaly: "observability.anomaly";
    readonly ObservabilityAnomalyError: "observability.anomaly-error";
    readonly TestWebhook: "test-webhook";
};
/**
 * The webhooks events
 */
export type GetWebhookEvents = ClosedEnum<typeof GetWebhookEvents>;
export type GetWebhookResponseBody = {
    /**
     * The webhooks events
     */
    events: Array<GetWebhookEvents>;
    /**
     * The webhook id
     */
    id: string;
    /**
     * A string with the URL of the webhook
     */
    url: string;
    /**
     * The unique ID of the team the webhook belongs to
     */
    ownerId: string;
    /**
     * A number containing the date when the webhook was created in in milliseconds
     */
    createdAt: number;
    /**
     * A number containing the date when the webhook was updated in in milliseconds
     */
    updatedAt: number;
    /**
     * The ID of the projects the webhook is associated with
     */
    projectIds?: Array<string> | undefined;
};
/** @internal */
export declare const GetWebhookRequest$inboundSchema: z.ZodType<GetWebhookRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetWebhookRequest$Outbound = {
    id: string;
    teamId?: string | undefined;
    slug?: string | undefined;
};
/** @internal */
export declare const GetWebhookRequest$outboundSchema: z.ZodType<GetWebhookRequest$Outbound, z.ZodTypeDef, GetWebhookRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetWebhookRequest$ {
    /** @deprecated use `GetWebhookRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetWebhookRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetWebhookRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetWebhookRequest$Outbound, z.ZodTypeDef, GetWebhookRequest>;
    /** @deprecated use `GetWebhookRequest$Outbound` instead. */
    type Outbound = GetWebhookRequest$Outbound;
}
export declare function getWebhookRequestToJSON(getWebhookRequest: GetWebhookRequest): string;
export declare function getWebhookRequestFromJSON(jsonString: string): SafeParseResult<GetWebhookRequest, SDKValidationError>;
/** @internal */
export declare const GetWebhookEvents$inboundSchema: z.ZodNativeEnum<typeof GetWebhookEvents>;
/** @internal */
export declare const GetWebhookEvents$outboundSchema: z.ZodNativeEnum<typeof GetWebhookEvents>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetWebhookEvents$ {
    /** @deprecated use `GetWebhookEvents$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly BudgetReached: "budget.reached";
        readonly BudgetReset: "budget.reset";
        readonly DomainCreated: "domain.created";
        readonly DomainDnsRecordsChanged: "domain.dns.records.changed";
        readonly DomainTransferInStarted: "domain.transfer-in.started";
        readonly DomainTransferInCompleted: "domain.transfer-in.completed";
        readonly DomainTransferInFailed: "domain.transfer-in.failed";
        readonly DomainCertificateAdd: "domain.certificate.add";
        readonly DomainCertificateAddFailed: "domain.certificate.add.failed";
        readonly DomainCertificateRenew: "domain.certificate.renew";
        readonly DomainCertificateRenewFailed: "domain.certificate.renew.failed";
        readonly DomainCertificateDeleted: "domain.certificate.deleted";
        readonly DomainRenewal: "domain.renewal";
        readonly DomainRenewalFailed: "domain.renewal.failed";
        readonly DomainAutoRenewChanged: "domain.auto-renew.changed";
        readonly DeploymentCreated: "deployment.created";
        readonly DeploymentCleanup: "deployment.cleanup";
        readonly DeploymentError: "deployment.error";
        readonly DeploymentCanceled: "deployment.canceled";
        readonly DeploymentSucceeded: "deployment.succeeded";
        readonly DeploymentReady: "deployment.ready";
        readonly DeploymentCheckRerequested: "deployment.check-rerequested";
        readonly DeploymentPromoted: "deployment.promoted";
        readonly DeploymentIntegrationActionStart: "deployment.integration.action.start";
        readonly DeploymentIntegrationActionCancel: "deployment.integration.action.cancel";
        readonly DeploymentIntegrationActionCleanup: "deployment.integration.action.cleanup";
        readonly DeploymentCheckrunStart: "deployment.checkrun.start";
        readonly DeploymentCheckrunCancel: "deployment.checkrun.cancel";
        readonly EdgeConfigCreated: "edge-config.created";
        readonly EdgeConfigDeleted: "edge-config.deleted";
        readonly EdgeConfigItemsUpdated: "edge-config.items.updated";
        readonly FirewallAttack: "firewall.attack";
        readonly IntegrationConfigurationPermissionUpgraded: "integration-configuration.permission-upgraded";
        readonly IntegrationConfigurationRemoved: "integration-configuration.removed";
        readonly IntegrationConfigurationScopeChangeConfirmed: "integration-configuration.scope-change-confirmed";
        readonly IntegrationResourceProjectConnected: "integration-resource.project-connected";
        readonly IntegrationResourceProjectDisconnected: "integration-resource.project-disconnected";
        readonly ProjectCreated: "project.created";
        readonly ProjectRemoved: "project.removed";
        readonly ProjectDomainCreated: "project.domain.created";
        readonly ProjectDomainUpdated: "project.domain.updated";
        readonly ProjectDomainDeleted: "project.domain.deleted";
        readonly ProjectDomainVerified: "project.domain.verified";
        readonly ProjectDomainUnverified: "project.domain.unverified";
        readonly ProjectDomainMoved: "project.domain.moved";
        readonly ProjectRollingReleaseStarted: "project.rolling-release.started";
        readonly ProjectRollingReleaseAborted: "project.rolling-release.aborted";
        readonly ProjectRollingReleaseCompleted: "project.rolling-release.completed";
        readonly ProjectRollingReleaseApproved: "project.rolling-release.approved";
        readonly DeploymentChecksFailed: "deployment.checks.failed";
        readonly DeploymentChecksSucceeded: "deployment.checks.succeeded";
        readonly DeploymentChecksCompleted: "deployment-checks-completed";
        readonly DeploymentReadyHyphen: "deployment-ready";
        readonly DeploymentPreparedHyphen: "deployment-prepared";
        readonly DeploymentErrorHyphen: "deployment-error";
        readonly DeploymentCheckRerequestedHyphen: "deployment-check-rerequested";
        readonly DeploymentCanceledHyphen: "deployment-canceled";
        readonly ProjectCreatedHyphen: "project-created";
        readonly ProjectRemovedHyphen: "project-removed";
        readonly DomainCreatedHyphen: "domain-created";
        readonly Deployment: "deployment";
        readonly IntegrationConfigurationPermissionUpdatedHyphen: "integration-configuration-permission-updated";
        readonly IntegrationConfigurationRemovedHyphen: "integration-configuration-removed";
        readonly IntegrationConfigurationScopeChangeConfirmedHyphen: "integration-configuration-scope-change-confirmed";
        readonly MarketplaceMemberChanged: "marketplace.member.changed";
        readonly MarketplaceInvoiceCreated: "marketplace.invoice.created";
        readonly MarketplaceInvoicePaid: "marketplace.invoice.paid";
        readonly MarketplaceInvoiceNotpaid: "marketplace.invoice.notpaid";
        readonly MarketplaceInvoiceRefunded: "marketplace.invoice.refunded";
        readonly ObservabilityAnomaly: "observability.anomaly";
        readonly ObservabilityAnomalyError: "observability.anomaly-error";
        readonly TestWebhook: "test-webhook";
    }>;
    /** @deprecated use `GetWebhookEvents$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly BudgetReached: "budget.reached";
        readonly BudgetReset: "budget.reset";
        readonly DomainCreated: "domain.created";
        readonly DomainDnsRecordsChanged: "domain.dns.records.changed";
        readonly DomainTransferInStarted: "domain.transfer-in.started";
        readonly DomainTransferInCompleted: "domain.transfer-in.completed";
        readonly DomainTransferInFailed: "domain.transfer-in.failed";
        readonly DomainCertificateAdd: "domain.certificate.add";
        readonly DomainCertificateAddFailed: "domain.certificate.add.failed";
        readonly DomainCertificateRenew: "domain.certificate.renew";
        readonly DomainCertificateRenewFailed: "domain.certificate.renew.failed";
        readonly DomainCertificateDeleted: "domain.certificate.deleted";
        readonly DomainRenewal: "domain.renewal";
        readonly DomainRenewalFailed: "domain.renewal.failed";
        readonly DomainAutoRenewChanged: "domain.auto-renew.changed";
        readonly DeploymentCreated: "deployment.created";
        readonly DeploymentCleanup: "deployment.cleanup";
        readonly DeploymentError: "deployment.error";
        readonly DeploymentCanceled: "deployment.canceled";
        readonly DeploymentSucceeded: "deployment.succeeded";
        readonly DeploymentReady: "deployment.ready";
        readonly DeploymentCheckRerequested: "deployment.check-rerequested";
        readonly DeploymentPromoted: "deployment.promoted";
        readonly DeploymentIntegrationActionStart: "deployment.integration.action.start";
        readonly DeploymentIntegrationActionCancel: "deployment.integration.action.cancel";
        readonly DeploymentIntegrationActionCleanup: "deployment.integration.action.cleanup";
        readonly DeploymentCheckrunStart: "deployment.checkrun.start";
        readonly DeploymentCheckrunCancel: "deployment.checkrun.cancel";
        readonly EdgeConfigCreated: "edge-config.created";
        readonly EdgeConfigDeleted: "edge-config.deleted";
        readonly EdgeConfigItemsUpdated: "edge-config.items.updated";
        readonly FirewallAttack: "firewall.attack";
        readonly IntegrationConfigurationPermissionUpgraded: "integration-configuration.permission-upgraded";
        readonly IntegrationConfigurationRemoved: "integration-configuration.removed";
        readonly IntegrationConfigurationScopeChangeConfirmed: "integration-configuration.scope-change-confirmed";
        readonly IntegrationResourceProjectConnected: "integration-resource.project-connected";
        readonly IntegrationResourceProjectDisconnected: "integration-resource.project-disconnected";
        readonly ProjectCreated: "project.created";
        readonly ProjectRemoved: "project.removed";
        readonly ProjectDomainCreated: "project.domain.created";
        readonly ProjectDomainUpdated: "project.domain.updated";
        readonly ProjectDomainDeleted: "project.domain.deleted";
        readonly ProjectDomainVerified: "project.domain.verified";
        readonly ProjectDomainUnverified: "project.domain.unverified";
        readonly ProjectDomainMoved: "project.domain.moved";
        readonly ProjectRollingReleaseStarted: "project.rolling-release.started";
        readonly ProjectRollingReleaseAborted: "project.rolling-release.aborted";
        readonly ProjectRollingReleaseCompleted: "project.rolling-release.completed";
        readonly ProjectRollingReleaseApproved: "project.rolling-release.approved";
        readonly DeploymentChecksFailed: "deployment.checks.failed";
        readonly DeploymentChecksSucceeded: "deployment.checks.succeeded";
        readonly DeploymentChecksCompleted: "deployment-checks-completed";
        readonly DeploymentReadyHyphen: "deployment-ready";
        readonly DeploymentPreparedHyphen: "deployment-prepared";
        readonly DeploymentErrorHyphen: "deployment-error";
        readonly DeploymentCheckRerequestedHyphen: "deployment-check-rerequested";
        readonly DeploymentCanceledHyphen: "deployment-canceled";
        readonly ProjectCreatedHyphen: "project-created";
        readonly ProjectRemovedHyphen: "project-removed";
        readonly DomainCreatedHyphen: "domain-created";
        readonly Deployment: "deployment";
        readonly IntegrationConfigurationPermissionUpdatedHyphen: "integration-configuration-permission-updated";
        readonly IntegrationConfigurationRemovedHyphen: "integration-configuration-removed";
        readonly IntegrationConfigurationScopeChangeConfirmedHyphen: "integration-configuration-scope-change-confirmed";
        readonly MarketplaceMemberChanged: "marketplace.member.changed";
        readonly MarketplaceInvoiceCreated: "marketplace.invoice.created";
        readonly MarketplaceInvoicePaid: "marketplace.invoice.paid";
        readonly MarketplaceInvoiceNotpaid: "marketplace.invoice.notpaid";
        readonly MarketplaceInvoiceRefunded: "marketplace.invoice.refunded";
        readonly ObservabilityAnomaly: "observability.anomaly";
        readonly ObservabilityAnomalyError: "observability.anomaly-error";
        readonly TestWebhook: "test-webhook";
    }>;
}
/** @internal */
export declare const GetWebhookResponseBody$inboundSchema: z.ZodType<GetWebhookResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type GetWebhookResponseBody$Outbound = {
    events: Array<string>;
    id: string;
    url: string;
    ownerId: string;
    createdAt: number;
    updatedAt: number;
    projectIds?: Array<string> | undefined;
};
/** @internal */
export declare const GetWebhookResponseBody$outboundSchema: z.ZodType<GetWebhookResponseBody$Outbound, z.ZodTypeDef, GetWebhookResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetWebhookResponseBody$ {
    /** @deprecated use `GetWebhookResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetWebhookResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetWebhookResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetWebhookResponseBody$Outbound, z.ZodTypeDef, GetWebhookResponseBody>;
    /** @deprecated use `GetWebhookResponseBody$Outbound` instead. */
    type Outbound = GetWebhookResponseBody$Outbound;
}
export declare function getWebhookResponseBodyToJSON(getWebhookResponseBody: GetWebhookResponseBody): string;
export declare function getWebhookResponseBodyFromJSON(jsonString: string): SafeParseResult<GetWebhookResponseBody, SDKValidationError>;
//# sourceMappingURL=getwebhookop.d.ts.map