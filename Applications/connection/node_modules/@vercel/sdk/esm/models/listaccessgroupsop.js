/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
/** @internal */
export const ListAccessGroupsRequest$inboundSchema = z.object({
    projectId: z.string().optional(),
    search: z.string().optional(),
    membersLimit: z.number().int().optional(),
    projectsLimit: z.number().int().optional(),
    limit: z.number().int().optional(),
    next: z.string().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/** @internal */
export const ListAccessGroupsRequest$outboundSchema = z.object({
    projectId: z.string().optional(),
    search: z.string().optional(),
    membersLimit: z.number().int().optional(),
    projectsLimit: z.number().int().optional(),
    limit: z.number().int().optional(),
    next: z.string().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ListAccessGroupsRequest$;
(function (ListAccessGroupsRequest$) {
    /** @deprecated use `ListAccessGroupsRequest$inboundSchema` instead. */
    ListAccessGroupsRequest$.inboundSchema = ListAccessGroupsRequest$inboundSchema;
    /** @deprecated use `ListAccessGroupsRequest$outboundSchema` instead. */
    ListAccessGroupsRequest$.outboundSchema = ListAccessGroupsRequest$outboundSchema;
})(ListAccessGroupsRequest$ || (ListAccessGroupsRequest$ = {}));
export function listAccessGroupsRequestToJSON(listAccessGroupsRequest) {
    return JSON.stringify(ListAccessGroupsRequest$outboundSchema.parse(listAccessGroupsRequest));
}
export function listAccessGroupsRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ListAccessGroupsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListAccessGroupsRequest' from JSON`);
}
/** @internal */
export const AccessGroups$inboundSchema = z.object({
    members: z.array(z.string()).optional(),
    projects: z.array(z.string()).optional(),
    entitlements: z.array(z.string()).optional(),
    teamPermissions: z.array(z.string()).optional(),
    isDsyncManaged: z.boolean(),
    name: z.string(),
    createdAt: z.string(),
    teamId: z.string(),
    updatedAt: z.string(),
    accessGroupId: z.string(),
    membersCount: z.number(),
    projectsCount: z.number(),
    teamRoles: z.array(z.string()).optional(),
});
/** @internal */
export const AccessGroups$outboundSchema = z.object({
    members: z.array(z.string()).optional(),
    projects: z.array(z.string()).optional(),
    entitlements: z.array(z.string()).optional(),
    teamPermissions: z.array(z.string()).optional(),
    isDsyncManaged: z.boolean(),
    name: z.string(),
    createdAt: z.string(),
    teamId: z.string(),
    updatedAt: z.string(),
    accessGroupId: z.string(),
    membersCount: z.number(),
    projectsCount: z.number(),
    teamRoles: z.array(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AccessGroups$;
(function (AccessGroups$) {
    /** @deprecated use `AccessGroups$inboundSchema` instead. */
    AccessGroups$.inboundSchema = AccessGroups$inboundSchema;
    /** @deprecated use `AccessGroups$outboundSchema` instead. */
    AccessGroups$.outboundSchema = AccessGroups$outboundSchema;
})(AccessGroups$ || (AccessGroups$ = {}));
export function accessGroupsToJSON(accessGroups) {
    return JSON.stringify(AccessGroups$outboundSchema.parse(accessGroups));
}
export function accessGroupsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AccessGroups$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccessGroups' from JSON`);
}
/** @internal */
export const ResponseBodyPagination$inboundSchema = z.object({
    count: z.number(),
    next: z.nullable(z.string()),
});
/** @internal */
export const ResponseBodyPagination$outboundSchema = z.object({
    count: z.number(),
    next: z.nullable(z.string()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyPagination$;
(function (ResponseBodyPagination$) {
    /** @deprecated use `ResponseBodyPagination$inboundSchema` instead. */
    ResponseBodyPagination$.inboundSchema = ResponseBodyPagination$inboundSchema;
    /** @deprecated use `ResponseBodyPagination$outboundSchema` instead. */
    ResponseBodyPagination$.outboundSchema = ResponseBodyPagination$outboundSchema;
})(ResponseBodyPagination$ || (ResponseBodyPagination$ = {}));
export function responseBodyPaginationToJSON(responseBodyPagination) {
    return JSON.stringify(ResponseBodyPagination$outboundSchema.parse(responseBodyPagination));
}
export function responseBodyPaginationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyPagination$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyPagination' from JSON`);
}
/** @internal */
export const ListAccessGroupsResponseBody2$inboundSchema = z.object({
    accessGroups: z.array(z.lazy(() => AccessGroups$inboundSchema)),
    pagination: z.lazy(() => ResponseBodyPagination$inboundSchema),
});
/** @internal */
export const ListAccessGroupsResponseBody2$outboundSchema = z.object({
    accessGroups: z.array(z.lazy(() => AccessGroups$outboundSchema)),
    pagination: z.lazy(() => ResponseBodyPagination$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ListAccessGroupsResponseBody2$;
(function (ListAccessGroupsResponseBody2$) {
    /** @deprecated use `ListAccessGroupsResponseBody2$inboundSchema` instead. */
    ListAccessGroupsResponseBody2$.inboundSchema = ListAccessGroupsResponseBody2$inboundSchema;
    /** @deprecated use `ListAccessGroupsResponseBody2$outboundSchema` instead. */
    ListAccessGroupsResponseBody2$.outboundSchema = ListAccessGroupsResponseBody2$outboundSchema;
})(ListAccessGroupsResponseBody2$ || (ListAccessGroupsResponseBody2$ = {}));
export function listAccessGroupsResponseBody2ToJSON(listAccessGroupsResponseBody2) {
    return JSON.stringify(ListAccessGroupsResponseBody2$outboundSchema.parse(listAccessGroupsResponseBody2));
}
export function listAccessGroupsResponseBody2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => ListAccessGroupsResponseBody2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListAccessGroupsResponseBody2' from JSON`);
}
/** @internal */
export const ListAccessGroupsResponseBody1$inboundSchema = z.object({});
/** @internal */
export const ListAccessGroupsResponseBody1$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ListAccessGroupsResponseBody1$;
(function (ListAccessGroupsResponseBody1$) {
    /** @deprecated use `ListAccessGroupsResponseBody1$inboundSchema` instead. */
    ListAccessGroupsResponseBody1$.inboundSchema = ListAccessGroupsResponseBody1$inboundSchema;
    /** @deprecated use `ListAccessGroupsResponseBody1$outboundSchema` instead. */
    ListAccessGroupsResponseBody1$.outboundSchema = ListAccessGroupsResponseBody1$outboundSchema;
})(ListAccessGroupsResponseBody1$ || (ListAccessGroupsResponseBody1$ = {}));
export function listAccessGroupsResponseBody1ToJSON(listAccessGroupsResponseBody1) {
    return JSON.stringify(ListAccessGroupsResponseBody1$outboundSchema.parse(listAccessGroupsResponseBody1));
}
export function listAccessGroupsResponseBody1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => ListAccessGroupsResponseBody1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListAccessGroupsResponseBody1' from JSON`);
}
/** @internal */
export const ListAccessGroupsResponseBody$inboundSchema = z.union([
    z.lazy(() => ListAccessGroupsResponseBody2$inboundSchema),
    z.lazy(() => ListAccessGroupsResponseBody1$inboundSchema),
]);
/** @internal */
export const ListAccessGroupsResponseBody$outboundSchema = z.union([
    z.lazy(() => ListAccessGroupsResponseBody2$outboundSchema),
    z.lazy(() => ListAccessGroupsResponseBody1$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ListAccessGroupsResponseBody$;
(function (ListAccessGroupsResponseBody$) {
    /** @deprecated use `ListAccessGroupsResponseBody$inboundSchema` instead. */
    ListAccessGroupsResponseBody$.inboundSchema = ListAccessGroupsResponseBody$inboundSchema;
    /** @deprecated use `ListAccessGroupsResponseBody$outboundSchema` instead. */
    ListAccessGroupsResponseBody$.outboundSchema = ListAccessGroupsResponseBody$outboundSchema;
})(ListAccessGroupsResponseBody$ || (ListAccessGroupsResponseBody$ = {}));
export function listAccessGroupsResponseBodyToJSON(listAccessGroupsResponseBody) {
    return JSON.stringify(ListAccessGroupsResponseBody$outboundSchema.parse(listAccessGroupsResponseBody));
}
export function listAccessGroupsResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ListAccessGroupsResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListAccessGroupsResponseBody' from JSON`);
}
//# sourceMappingURL=listaccessgroupsop.js.map