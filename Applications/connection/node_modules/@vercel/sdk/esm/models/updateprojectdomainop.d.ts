import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
/**
 * Status code for domain redirect
 */
export declare const RedirectStatusCode: {
    readonly ThreeHundredAndOne: 301;
    readonly ThreeHundredAndTwo: 302;
    readonly ThreeHundredAndSeven: 307;
    readonly ThreeHundredAndEight: 308;
};
/**
 * Status code for domain redirect
 */
export type RedirectStatusCode = ClosedEnum<typeof RedirectStatusCode>;
export type UpdateProjectDomainRequestBody = {
    /**
     * Git branch to link the project domain
     */
    gitBranch?: string | null | undefined;
    /**
     * Target destination domain for redirect
     */
    redirect?: string | null | undefined;
    /**
     * Status code for domain redirect
     */
    redirectStatusCode?: RedirectStatusCode | null | undefined;
};
export type UpdateProjectDomainRequest = {
    /**
     * The unique project identifier or the project name
     */
    idOrName: string;
    /**
     * The project domain name
     */
    domain: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody: UpdateProjectDomainRequestBody;
};
/**
 * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
 */
export type UpdateProjectDomainVerification = {
    type: string;
    domain: string;
    value: string;
    reason: string;
};
/**
 * The domain was updated successfuly
 */
export type UpdateProjectDomainResponseBody = {
    name: string;
    apexName: string;
    projectId: string;
    redirect?: string | null | undefined;
    redirectStatusCode?: number | null | undefined;
    gitBranch?: string | null | undefined;
    customEnvironmentId?: string | null | undefined;
    updatedAt?: number | undefined;
    createdAt?: number | undefined;
    /**
     * `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.
     */
    verified: boolean;
    /**
     * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
     */
    verification?: Array<UpdateProjectDomainVerification> | undefined;
};
/** @internal */
export declare const RedirectStatusCode$inboundSchema: z.ZodNativeEnum<typeof RedirectStatusCode>;
/** @internal */
export declare const RedirectStatusCode$outboundSchema: z.ZodNativeEnum<typeof RedirectStatusCode>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RedirectStatusCode$ {
    /** @deprecated use `RedirectStatusCode$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly ThreeHundredAndOne: 301;
        readonly ThreeHundredAndTwo: 302;
        readonly ThreeHundredAndSeven: 307;
        readonly ThreeHundredAndEight: 308;
    }>;
    /** @deprecated use `RedirectStatusCode$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly ThreeHundredAndOne: 301;
        readonly ThreeHundredAndTwo: 302;
        readonly ThreeHundredAndSeven: 307;
        readonly ThreeHundredAndEight: 308;
    }>;
}
/** @internal */
export declare const UpdateProjectDomainRequestBody$inboundSchema: z.ZodType<UpdateProjectDomainRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectDomainRequestBody$Outbound = {
    gitBranch?: string | null | undefined;
    redirect?: string | null | undefined;
    redirectStatusCode?: number | null | undefined;
};
/** @internal */
export declare const UpdateProjectDomainRequestBody$outboundSchema: z.ZodType<UpdateProjectDomainRequestBody$Outbound, z.ZodTypeDef, UpdateProjectDomainRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectDomainRequestBody$ {
    /** @deprecated use `UpdateProjectDomainRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectDomainRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectDomainRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectDomainRequestBody$Outbound, z.ZodTypeDef, UpdateProjectDomainRequestBody>;
    /** @deprecated use `UpdateProjectDomainRequestBody$Outbound` instead. */
    type Outbound = UpdateProjectDomainRequestBody$Outbound;
}
export declare function updateProjectDomainRequestBodyToJSON(updateProjectDomainRequestBody: UpdateProjectDomainRequestBody): string;
export declare function updateProjectDomainRequestBodyFromJSON(jsonString: string): SafeParseResult<UpdateProjectDomainRequestBody, SDKValidationError>;
/** @internal */
export declare const UpdateProjectDomainRequest$inboundSchema: z.ZodType<UpdateProjectDomainRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectDomainRequest$Outbound = {
    idOrName: string;
    domain: string;
    teamId?: string | undefined;
    slug?: string | undefined;
    RequestBody: UpdateProjectDomainRequestBody$Outbound;
};
/** @internal */
export declare const UpdateProjectDomainRequest$outboundSchema: z.ZodType<UpdateProjectDomainRequest$Outbound, z.ZodTypeDef, UpdateProjectDomainRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectDomainRequest$ {
    /** @deprecated use `UpdateProjectDomainRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectDomainRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectDomainRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectDomainRequest$Outbound, z.ZodTypeDef, UpdateProjectDomainRequest>;
    /** @deprecated use `UpdateProjectDomainRequest$Outbound` instead. */
    type Outbound = UpdateProjectDomainRequest$Outbound;
}
export declare function updateProjectDomainRequestToJSON(updateProjectDomainRequest: UpdateProjectDomainRequest): string;
export declare function updateProjectDomainRequestFromJSON(jsonString: string): SafeParseResult<UpdateProjectDomainRequest, SDKValidationError>;
/** @internal */
export declare const UpdateProjectDomainVerification$inboundSchema: z.ZodType<UpdateProjectDomainVerification, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectDomainVerification$Outbound = {
    type: string;
    domain: string;
    value: string;
    reason: string;
};
/** @internal */
export declare const UpdateProjectDomainVerification$outboundSchema: z.ZodType<UpdateProjectDomainVerification$Outbound, z.ZodTypeDef, UpdateProjectDomainVerification>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectDomainVerification$ {
    /** @deprecated use `UpdateProjectDomainVerification$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectDomainVerification, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectDomainVerification$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectDomainVerification$Outbound, z.ZodTypeDef, UpdateProjectDomainVerification>;
    /** @deprecated use `UpdateProjectDomainVerification$Outbound` instead. */
    type Outbound = UpdateProjectDomainVerification$Outbound;
}
export declare function updateProjectDomainVerificationToJSON(updateProjectDomainVerification: UpdateProjectDomainVerification): string;
export declare function updateProjectDomainVerificationFromJSON(jsonString: string): SafeParseResult<UpdateProjectDomainVerification, SDKValidationError>;
/** @internal */
export declare const UpdateProjectDomainResponseBody$inboundSchema: z.ZodType<UpdateProjectDomainResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateProjectDomainResponseBody$Outbound = {
    name: string;
    apexName: string;
    projectId: string;
    redirect?: string | null | undefined;
    redirectStatusCode?: number | null | undefined;
    gitBranch?: string | null | undefined;
    customEnvironmentId?: string | null | undefined;
    updatedAt?: number | undefined;
    createdAt?: number | undefined;
    verified: boolean;
    verification?: Array<UpdateProjectDomainVerification$Outbound> | undefined;
};
/** @internal */
export declare const UpdateProjectDomainResponseBody$outboundSchema: z.ZodType<UpdateProjectDomainResponseBody$Outbound, z.ZodTypeDef, UpdateProjectDomainResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateProjectDomainResponseBody$ {
    /** @deprecated use `UpdateProjectDomainResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateProjectDomainResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateProjectDomainResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateProjectDomainResponseBody$Outbound, z.ZodTypeDef, UpdateProjectDomainResponseBody>;
    /** @deprecated use `UpdateProjectDomainResponseBody$Outbound` instead. */
    type Outbound = UpdateProjectDomainResponseBody$Outbound;
}
export declare function updateProjectDomainResponseBodyToJSON(updateProjectDomainResponseBody: UpdateProjectDomainResponseBody): string;
export declare function updateProjectDomainResponseBodyFromJSON(jsonString: string): SafeParseResult<UpdateProjectDomainResponseBody, SDKValidationError>;
//# sourceMappingURL=updateprojectdomainop.d.ts.map