/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/** @internal */
export const ArtifactQueryRequestBody$inboundSchema = z.object({
    hashes: z.array(z.string()),
});
/** @internal */
export const ArtifactQueryRequestBody$outboundSchema = z.object({
    hashes: z.array(z.string()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ArtifactQueryRequestBody$;
(function (ArtifactQueryRequestBody$) {
    /** @deprecated use `ArtifactQueryRequestBody$inboundSchema` instead. */
    ArtifactQueryRequestBody$.inboundSchema = ArtifactQueryRequestBody$inboundSchema;
    /** @deprecated use `ArtifactQueryRequestBody$outboundSchema` instead. */
    ArtifactQueryRequestBody$.outboundSchema = ArtifactQueryRequestBody$outboundSchema;
})(ArtifactQueryRequestBody$ || (ArtifactQueryRequestBody$ = {}));
export function artifactQueryRequestBodyToJSON(artifactQueryRequestBody) {
    return JSON.stringify(ArtifactQueryRequestBody$outboundSchema.parse(artifactQueryRequestBody));
}
export function artifactQueryRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ArtifactQueryRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ArtifactQueryRequestBody' from JSON`);
}
/** @internal */
export const ArtifactQueryRequest$inboundSchema = z.object({
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => ArtifactQueryRequestBody$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const ArtifactQueryRequest$outboundSchema = z.object({
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => ArtifactQueryRequestBody$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ArtifactQueryRequest$;
(function (ArtifactQueryRequest$) {
    /** @deprecated use `ArtifactQueryRequest$inboundSchema` instead. */
    ArtifactQueryRequest$.inboundSchema = ArtifactQueryRequest$inboundSchema;
    /** @deprecated use `ArtifactQueryRequest$outboundSchema` instead. */
    ArtifactQueryRequest$.outboundSchema = ArtifactQueryRequest$outboundSchema;
})(ArtifactQueryRequest$ || (ArtifactQueryRequest$ = {}));
export function artifactQueryRequestToJSON(artifactQueryRequest) {
    return JSON.stringify(ArtifactQueryRequest$outboundSchema.parse(artifactQueryRequest));
}
export function artifactQueryRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ArtifactQueryRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ArtifactQueryRequest' from JSON`);
}
/** @internal */
export const ResponseBodyError$inboundSchema = z.object({
    message: z.string(),
});
/** @internal */
export const ResponseBodyError$outboundSchema = z.object({
    message: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyError$;
(function (ResponseBodyError$) {
    /** @deprecated use `ResponseBodyError$inboundSchema` instead. */
    ResponseBodyError$.inboundSchema = ResponseBodyError$inboundSchema;
    /** @deprecated use `ResponseBodyError$outboundSchema` instead. */
    ResponseBodyError$.outboundSchema = ResponseBodyError$outboundSchema;
})(ResponseBodyError$ || (ResponseBodyError$ = {}));
export function responseBodyErrorToJSON(responseBodyError) {
    return JSON.stringify(ResponseBodyError$outboundSchema.parse(responseBodyError));
}
export function responseBodyErrorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyError$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyError' from JSON`);
}
/** @internal */
export const ResponseBody2$inboundSchema = z.object({
    error: z.lazy(() => ResponseBodyError$inboundSchema),
});
/** @internal */
export const ResponseBody2$outboundSchema = z.object({
    error: z.lazy(() => ResponseBodyError$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBody2$;
(function (ResponseBody2$) {
    /** @deprecated use `ResponseBody2$inboundSchema` instead. */
    ResponseBody2$.inboundSchema = ResponseBody2$inboundSchema;
    /** @deprecated use `ResponseBody2$outboundSchema` instead. */
    ResponseBody2$.outboundSchema = ResponseBody2$outboundSchema;
})(ResponseBody2$ || (ResponseBody2$ = {}));
export function responseBody2ToJSON(responseBody2) {
    return JSON.stringify(ResponseBody2$outboundSchema.parse(responseBody2));
}
export function responseBody2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBody2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBody2' from JSON`);
}
/** @internal */
export const ResponseBody1$inboundSchema = z.object({
    size: z.number(),
    taskDurationMs: z.number(),
    tag: z.string().optional(),
});
/** @internal */
export const ResponseBody1$outboundSchema = z.object({
    size: z.number(),
    taskDurationMs: z.number(),
    tag: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBody1$;
(function (ResponseBody1$) {
    /** @deprecated use `ResponseBody1$inboundSchema` instead. */
    ResponseBody1$.inboundSchema = ResponseBody1$inboundSchema;
    /** @deprecated use `ResponseBody1$outboundSchema` instead. */
    ResponseBody1$.outboundSchema = ResponseBody1$outboundSchema;
})(ResponseBody1$ || (ResponseBody1$ = {}));
export function responseBody1ToJSON(responseBody1) {
    return JSON.stringify(ResponseBody1$outboundSchema.parse(responseBody1));
}
export function responseBody1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBody1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBody1' from JSON`);
}
/** @internal */
export const ResponseBody$inboundSchema = z.union([
    z.lazy(() => ResponseBody1$inboundSchema),
    z.lazy(() => ResponseBody2$inboundSchema),
]);
/** @internal */
export const ResponseBody$outboundSchema = z.union([
    z.lazy(() => ResponseBody1$outboundSchema),
    z.lazy(() => ResponseBody2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBody$;
(function (ResponseBody$) {
    /** @deprecated use `ResponseBody$inboundSchema` instead. */
    ResponseBody$.inboundSchema = ResponseBody$inboundSchema;
    /** @deprecated use `ResponseBody$outboundSchema` instead. */
    ResponseBody$.outboundSchema = ResponseBody$outboundSchema;
})(ResponseBody$ || (ResponseBody$ = {}));
export function responseBodyToJSON(responseBody) {
    return JSON.stringify(ResponseBody$outboundSchema.parse(responseBody));
}
export function responseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBody' from JSON`);
}
//# sourceMappingURL=artifactqueryop.js.map