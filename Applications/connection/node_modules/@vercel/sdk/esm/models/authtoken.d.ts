import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export declare const AuthTokenScopesType: {
    readonly Team: "team";
};
export type AuthTokenScopesType = ClosedEnum<typeof AuthTokenScopesType>;
export declare const AuthTokenScopesOrigin: {
    readonly Saml: "saml";
    readonly Github: "github";
    readonly Gitlab: "gitlab";
    readonly Bitbucket: "bitbucket";
    readonly Email: "email";
    readonly Manual: "manual";
    readonly Passkey: "passkey";
    readonly Otp: "otp";
    readonly Sms: "sms";
    readonly Invite: "invite";
    readonly Google: "google";
    readonly App: "app";
};
export type AuthTokenScopesOrigin = ClosedEnum<typeof AuthTokenScopesOrigin>;
/**
 * The access scopes granted to the token.
 */
export type Scopes2 = {
    type: AuthTokenScopesType;
    teamId: string;
    origin?: AuthTokenScopesOrigin | undefined;
    createdAt: number;
    expiresAt?: number | undefined;
};
export declare const ScopesType: {
    readonly User: "user";
};
export type ScopesType = ClosedEnum<typeof ScopesType>;
/**
 * Possible multi-factor origins
 */
export declare const AuthTokenScopes1Origin: {
    readonly Totp: "totp";
    readonly Webauthn: "webauthn";
    readonly RecoveryCode: "recovery-code";
};
/**
 * Possible multi-factor origins
 */
export type AuthTokenScopes1Origin = ClosedEnum<typeof AuthTokenScopes1Origin>;
export type Sudo = {
    /**
     * Possible multi-factor origins
     */
    origin: AuthTokenScopes1Origin;
    expiresAt: number;
};
export declare const ScopesOrigin: {
    readonly Saml: "saml";
    readonly Github: "github";
    readonly Gitlab: "gitlab";
    readonly Bitbucket: "bitbucket";
    readonly Email: "email";
    readonly Manual: "manual";
    readonly Passkey: "passkey";
    readonly Otp: "otp";
    readonly Sms: "sms";
    readonly Invite: "invite";
    readonly Google: "google";
    readonly App: "app";
};
export type ScopesOrigin = ClosedEnum<typeof ScopesOrigin>;
/**
 * The access scopes granted to the token.
 */
export type Scopes1 = {
    type: ScopesType;
    sudo?: Sudo | undefined;
    origin?: ScopesOrigin | undefined;
    createdAt: number;
    expiresAt?: number | undefined;
};
export type Scopes = Scopes2 | Scopes1;
/**
 * Authentication token metadata.
 */
export type AuthToken = {
    /**
     * The unique identifier of the token.
     */
    id: string;
    /**
     * The human-readable name of the token.
     */
    name: string;
    /**
     * The type of the token.
     */
    type: string;
    /**
     * The origin of how the token was created.
     */
    origin?: string | undefined;
    /**
     * The access scopes granted to the token.
     */
    scopes?: Array<Scopes2 | Scopes1> | undefined;
    /**
     * Timestamp (in milliseconds) of when the token expires.
     */
    expiresAt?: number | undefined;
    /**
     * Timestamp (in milliseconds) of when the token was most recently used.
     */
    activeAt: number;
    /**
     * Timestamp (in milliseconds) of when the token was created.
     */
    createdAt: number;
};
/** @internal */
export declare const AuthTokenScopesType$inboundSchema: z.ZodNativeEnum<typeof AuthTokenScopesType>;
/** @internal */
export declare const AuthTokenScopesType$outboundSchema: z.ZodNativeEnum<typeof AuthTokenScopesType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AuthTokenScopesType$ {
    /** @deprecated use `AuthTokenScopesType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Team: "team";
    }>;
    /** @deprecated use `AuthTokenScopesType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Team: "team";
    }>;
}
/** @internal */
export declare const AuthTokenScopesOrigin$inboundSchema: z.ZodNativeEnum<typeof AuthTokenScopesOrigin>;
/** @internal */
export declare const AuthTokenScopesOrigin$outboundSchema: z.ZodNativeEnum<typeof AuthTokenScopesOrigin>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AuthTokenScopesOrigin$ {
    /** @deprecated use `AuthTokenScopesOrigin$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Saml: "saml";
        readonly Github: "github";
        readonly Gitlab: "gitlab";
        readonly Bitbucket: "bitbucket";
        readonly Email: "email";
        readonly Manual: "manual";
        readonly Passkey: "passkey";
        readonly Otp: "otp";
        readonly Sms: "sms";
        readonly Invite: "invite";
        readonly Google: "google";
        readonly App: "app";
    }>;
    /** @deprecated use `AuthTokenScopesOrigin$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Saml: "saml";
        readonly Github: "github";
        readonly Gitlab: "gitlab";
        readonly Bitbucket: "bitbucket";
        readonly Email: "email";
        readonly Manual: "manual";
        readonly Passkey: "passkey";
        readonly Otp: "otp";
        readonly Sms: "sms";
        readonly Invite: "invite";
        readonly Google: "google";
        readonly App: "app";
    }>;
}
/** @internal */
export declare const Scopes2$inboundSchema: z.ZodType<Scopes2, z.ZodTypeDef, unknown>;
/** @internal */
export type Scopes2$Outbound = {
    type: string;
    teamId: string;
    origin?: string | undefined;
    createdAt: number;
    expiresAt?: number | undefined;
};
/** @internal */
export declare const Scopes2$outboundSchema: z.ZodType<Scopes2$Outbound, z.ZodTypeDef, Scopes2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Scopes2$ {
    /** @deprecated use `Scopes2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Scopes2, z.ZodTypeDef, unknown>;
    /** @deprecated use `Scopes2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Scopes2$Outbound, z.ZodTypeDef, Scopes2>;
    /** @deprecated use `Scopes2$Outbound` instead. */
    type Outbound = Scopes2$Outbound;
}
export declare function scopes2ToJSON(scopes2: Scopes2): string;
export declare function scopes2FromJSON(jsonString: string): SafeParseResult<Scopes2, SDKValidationError>;
/** @internal */
export declare const ScopesType$inboundSchema: z.ZodNativeEnum<typeof ScopesType>;
/** @internal */
export declare const ScopesType$outboundSchema: z.ZodNativeEnum<typeof ScopesType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ScopesType$ {
    /** @deprecated use `ScopesType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly User: "user";
    }>;
    /** @deprecated use `ScopesType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly User: "user";
    }>;
}
/** @internal */
export declare const AuthTokenScopes1Origin$inboundSchema: z.ZodNativeEnum<typeof AuthTokenScopes1Origin>;
/** @internal */
export declare const AuthTokenScopes1Origin$outboundSchema: z.ZodNativeEnum<typeof AuthTokenScopes1Origin>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AuthTokenScopes1Origin$ {
    /** @deprecated use `AuthTokenScopes1Origin$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Totp: "totp";
        readonly Webauthn: "webauthn";
        readonly RecoveryCode: "recovery-code";
    }>;
    /** @deprecated use `AuthTokenScopes1Origin$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Totp: "totp";
        readonly Webauthn: "webauthn";
        readonly RecoveryCode: "recovery-code";
    }>;
}
/** @internal */
export declare const Sudo$inboundSchema: z.ZodType<Sudo, z.ZodTypeDef, unknown>;
/** @internal */
export type Sudo$Outbound = {
    origin: string;
    expiresAt: number;
};
/** @internal */
export declare const Sudo$outboundSchema: z.ZodType<Sudo$Outbound, z.ZodTypeDef, Sudo>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Sudo$ {
    /** @deprecated use `Sudo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Sudo, z.ZodTypeDef, unknown>;
    /** @deprecated use `Sudo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Sudo$Outbound, z.ZodTypeDef, Sudo>;
    /** @deprecated use `Sudo$Outbound` instead. */
    type Outbound = Sudo$Outbound;
}
export declare function sudoToJSON(sudo: Sudo): string;
export declare function sudoFromJSON(jsonString: string): SafeParseResult<Sudo, SDKValidationError>;
/** @internal */
export declare const ScopesOrigin$inboundSchema: z.ZodNativeEnum<typeof ScopesOrigin>;
/** @internal */
export declare const ScopesOrigin$outboundSchema: z.ZodNativeEnum<typeof ScopesOrigin>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ScopesOrigin$ {
    /** @deprecated use `ScopesOrigin$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Saml: "saml";
        readonly Github: "github";
        readonly Gitlab: "gitlab";
        readonly Bitbucket: "bitbucket";
        readonly Email: "email";
        readonly Manual: "manual";
        readonly Passkey: "passkey";
        readonly Otp: "otp";
        readonly Sms: "sms";
        readonly Invite: "invite";
        readonly Google: "google";
        readonly App: "app";
    }>;
    /** @deprecated use `ScopesOrigin$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Saml: "saml";
        readonly Github: "github";
        readonly Gitlab: "gitlab";
        readonly Bitbucket: "bitbucket";
        readonly Email: "email";
        readonly Manual: "manual";
        readonly Passkey: "passkey";
        readonly Otp: "otp";
        readonly Sms: "sms";
        readonly Invite: "invite";
        readonly Google: "google";
        readonly App: "app";
    }>;
}
/** @internal */
export declare const Scopes1$inboundSchema: z.ZodType<Scopes1, z.ZodTypeDef, unknown>;
/** @internal */
export type Scopes1$Outbound = {
    type: string;
    sudo?: Sudo$Outbound | undefined;
    origin?: string | undefined;
    createdAt: number;
    expiresAt?: number | undefined;
};
/** @internal */
export declare const Scopes1$outboundSchema: z.ZodType<Scopes1$Outbound, z.ZodTypeDef, Scopes1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Scopes1$ {
    /** @deprecated use `Scopes1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Scopes1, z.ZodTypeDef, unknown>;
    /** @deprecated use `Scopes1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Scopes1$Outbound, z.ZodTypeDef, Scopes1>;
    /** @deprecated use `Scopes1$Outbound` instead. */
    type Outbound = Scopes1$Outbound;
}
export declare function scopes1ToJSON(scopes1: Scopes1): string;
export declare function scopes1FromJSON(jsonString: string): SafeParseResult<Scopes1, SDKValidationError>;
/** @internal */
export declare const Scopes$inboundSchema: z.ZodType<Scopes, z.ZodTypeDef, unknown>;
/** @internal */
export type Scopes$Outbound = Scopes2$Outbound | Scopes1$Outbound;
/** @internal */
export declare const Scopes$outboundSchema: z.ZodType<Scopes$Outbound, z.ZodTypeDef, Scopes>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Scopes$ {
    /** @deprecated use `Scopes$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Scopes, z.ZodTypeDef, unknown>;
    /** @deprecated use `Scopes$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Scopes$Outbound, z.ZodTypeDef, Scopes>;
    /** @deprecated use `Scopes$Outbound` instead. */
    type Outbound = Scopes$Outbound;
}
export declare function scopesToJSON(scopes: Scopes): string;
export declare function scopesFromJSON(jsonString: string): SafeParseResult<Scopes, SDKValidationError>;
/** @internal */
export declare const AuthToken$inboundSchema: z.ZodType<AuthToken, z.ZodTypeDef, unknown>;
/** @internal */
export type AuthToken$Outbound = {
    id: string;
    name: string;
    type: string;
    origin?: string | undefined;
    scopes?: Array<Scopes2$Outbound | Scopes1$Outbound> | undefined;
    expiresAt?: number | undefined;
    activeAt: number;
    createdAt: number;
};
/** @internal */
export declare const AuthToken$outboundSchema: z.ZodType<AuthToken$Outbound, z.ZodTypeDef, AuthToken>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AuthToken$ {
    /** @deprecated use `AuthToken$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AuthToken, z.ZodTypeDef, unknown>;
    /** @deprecated use `AuthToken$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AuthToken$Outbound, z.ZodTypeDef, AuthToken>;
    /** @deprecated use `AuthToken$Outbound` instead. */
    type Outbound = AuthToken$Outbound;
}
export declare function authTokenToJSON(authToken: AuthToken): string;
export declare function authTokenFromJSON(jsonString: string): SafeParseResult<AuthToken, SDKValidationError>;
//# sourceMappingURL=authtoken.d.ts.map