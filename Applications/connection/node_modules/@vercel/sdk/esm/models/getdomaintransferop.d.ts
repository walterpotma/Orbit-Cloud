import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type GetDomainTransferRequest = {
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    domain: string;
};
/**
 * The domain's transfer policy (depends on TLD requirements). `charge-and-renew`: transfer will charge for renewal and will renew the existing domain's registration. `no-charge-no-change`: transfer will have no change to registration period and does not require charge. `no-change`: transfer charge is required, but no change in registration period. `new-term`: transfer charge is required and a new registry term is set based on the transfer date. `not-supported`: transfers are not supported for this domain or TLD. `null`: This TLD is not supported by Vercel's Registrar.
 */
export declare const TransferPolicy: {
    readonly ChargeAndRenew: "charge-and-renew";
    readonly NoChargeNoChange: "no-charge-no-change";
    readonly NoChange: "no-change";
    readonly NewTerm: "new-term";
    readonly NotSupported: "not-supported";
};
/**
 * The domain's transfer policy (depends on TLD requirements). `charge-and-renew`: transfer will charge for renewal and will renew the existing domain's registration. `no-charge-no-change`: transfer will have no change to registration period and does not require charge. `no-change`: transfer charge is required, but no change in registration period. `new-term`: transfer charge is required and a new registry term is set based on the transfer date. `not-supported`: transfers are not supported for this domain or TLD. `null`: This TLD is not supported by Vercel's Registrar.
 */
export type TransferPolicy = ClosedEnum<typeof TransferPolicy>;
/**
 * The current state of an ongoing transfer. `pending_owner`: Awaiting approval by domain's admin contact (every transfer begins with this status). If approval is not given within five days, the transfer is cancelled. `pending_admin`: Waiting for approval by Vercel Registrar admin. `pending_registry`: Awaiting registry approval (the transfer completes after 7 days unless it is declined by the current registrar). `completed`: The transfer completed successfully. `cancelled`: The transfer was cancelled. `undef`: No transfer exists for this domain. `unknown`: This TLD is not supported by Vercel's Registrar.
 */
export declare const GetDomainTransferStatus: {
    readonly PendingOwner: "pending_owner";
    readonly PendingAdmin: "pending_admin";
    readonly PendingRegistry: "pending_registry";
    readonly Completed: "completed";
    readonly Cancelled: "cancelled";
    readonly Undef: "undef";
    readonly Unknown: "unknown";
};
/**
 * The current state of an ongoing transfer. `pending_owner`: Awaiting approval by domain's admin contact (every transfer begins with this status). If approval is not given within five days, the transfer is cancelled. `pending_admin`: Waiting for approval by Vercel Registrar admin. `pending_registry`: Awaiting registry approval (the transfer completes after 7 days unless it is declined by the current registrar). `completed`: The transfer completed successfully. `cancelled`: The transfer was cancelled. `undef`: No transfer exists for this domain. `unknown`: This TLD is not supported by Vercel's Registrar.
 */
export type GetDomainTransferStatus = ClosedEnum<typeof GetDomainTransferStatus>;
export type GetDomainTransferResponseBody = {
    /**
     * Whether or not the domain is transferable
     */
    transferable: boolean;
    /**
     * The domain's transfer policy (depends on TLD requirements). `charge-and-renew`: transfer will charge for renewal and will renew the existing domain's registration. `no-charge-no-change`: transfer will have no change to registration period and does not require charge. `no-change`: transfer charge is required, but no change in registration period. `new-term`: transfer charge is required and a new registry term is set based on the transfer date. `not-supported`: transfers are not supported for this domain or TLD. `null`: This TLD is not supported by Vercel's Registrar.
     */
    transferPolicy: TransferPolicy | null;
    /**
     * Description associated with transferable state.
     */
    reason: string;
    /**
     * The current state of an ongoing transfer. `pending_owner`: Awaiting approval by domain's admin contact (every transfer begins with this status). If approval is not given within five days, the transfer is cancelled. `pending_admin`: Waiting for approval by Vercel Registrar admin. `pending_registry`: Awaiting registry approval (the transfer completes after 7 days unless it is declined by the current registrar). `completed`: The transfer completed successfully. `cancelled`: The transfer was cancelled. `undef`: No transfer exists for this domain. `unknown`: This TLD is not supported by Vercel's Registrar.
     */
    status: GetDomainTransferStatus;
};
/** @internal */
export declare const GetDomainTransferRequest$inboundSchema: z.ZodType<GetDomainTransferRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDomainTransferRequest$Outbound = {
    teamId?: string | undefined;
    slug?: string | undefined;
    domain: string;
};
/** @internal */
export declare const GetDomainTransferRequest$outboundSchema: z.ZodType<GetDomainTransferRequest$Outbound, z.ZodTypeDef, GetDomainTransferRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDomainTransferRequest$ {
    /** @deprecated use `GetDomainTransferRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDomainTransferRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDomainTransferRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDomainTransferRequest$Outbound, z.ZodTypeDef, GetDomainTransferRequest>;
    /** @deprecated use `GetDomainTransferRequest$Outbound` instead. */
    type Outbound = GetDomainTransferRequest$Outbound;
}
export declare function getDomainTransferRequestToJSON(getDomainTransferRequest: GetDomainTransferRequest): string;
export declare function getDomainTransferRequestFromJSON(jsonString: string): SafeParseResult<GetDomainTransferRequest, SDKValidationError>;
/** @internal */
export declare const TransferPolicy$inboundSchema: z.ZodNativeEnum<typeof TransferPolicy>;
/** @internal */
export declare const TransferPolicy$outboundSchema: z.ZodNativeEnum<typeof TransferPolicy>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TransferPolicy$ {
    /** @deprecated use `TransferPolicy$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly ChargeAndRenew: "charge-and-renew";
        readonly NoChargeNoChange: "no-charge-no-change";
        readonly NoChange: "no-change";
        readonly NewTerm: "new-term";
        readonly NotSupported: "not-supported";
    }>;
    /** @deprecated use `TransferPolicy$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly ChargeAndRenew: "charge-and-renew";
        readonly NoChargeNoChange: "no-charge-no-change";
        readonly NoChange: "no-change";
        readonly NewTerm: "new-term";
        readonly NotSupported: "not-supported";
    }>;
}
/** @internal */
export declare const GetDomainTransferStatus$inboundSchema: z.ZodNativeEnum<typeof GetDomainTransferStatus>;
/** @internal */
export declare const GetDomainTransferStatus$outboundSchema: z.ZodNativeEnum<typeof GetDomainTransferStatus>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDomainTransferStatus$ {
    /** @deprecated use `GetDomainTransferStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly PendingOwner: "pending_owner";
        readonly PendingAdmin: "pending_admin";
        readonly PendingRegistry: "pending_registry";
        readonly Completed: "completed";
        readonly Cancelled: "cancelled";
        readonly Undef: "undef";
        readonly Unknown: "unknown";
    }>;
    /** @deprecated use `GetDomainTransferStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly PendingOwner: "pending_owner";
        readonly PendingAdmin: "pending_admin";
        readonly PendingRegistry: "pending_registry";
        readonly Completed: "completed";
        readonly Cancelled: "cancelled";
        readonly Undef: "undef";
        readonly Unknown: "unknown";
    }>;
}
/** @internal */
export declare const GetDomainTransferResponseBody$inboundSchema: z.ZodType<GetDomainTransferResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDomainTransferResponseBody$Outbound = {
    transferable: boolean;
    transferPolicy: string | null;
    reason: string;
    status: string;
};
/** @internal */
export declare const GetDomainTransferResponseBody$outboundSchema: z.ZodType<GetDomainTransferResponseBody$Outbound, z.ZodTypeDef, GetDomainTransferResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDomainTransferResponseBody$ {
    /** @deprecated use `GetDomainTransferResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDomainTransferResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDomainTransferResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDomainTransferResponseBody$Outbound, z.ZodTypeDef, GetDomainTransferResponseBody>;
    /** @deprecated use `GetDomainTransferResponseBody$Outbound` instead. */
    type Outbound = GetDomainTransferResponseBody$Outbound;
}
export declare function getDomainTransferResponseBodyToJSON(getDomainTransferResponseBody: GetDomainTransferResponseBody): string;
export declare function getDomainTransferResponseBodyFromJSON(jsonString: string): SafeParseResult<GetDomainTransferResponseBody, SDKValidationError>;
//# sourceMappingURL=getdomaintransferop.d.ts.map