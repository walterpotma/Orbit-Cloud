import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { FlagJSONValue, FlagJSONValue$Outbound } from "./flagjsonvalue.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
/**
 * Forces a new deployment even if there is a previous similar deployment
 */
export declare const ForceNew: {
    readonly Zero: "0";
    readonly One: "1";
};
/**
 * Forces a new deployment even if there is a previous similar deployment
 */
export type ForceNew = ClosedEnum<typeof ForceNew>;
/**
 * Allows to skip framework detection so the API would not fail to ask for confirmation
 */
export declare const SkipAutoDetectionConfirmation: {
    readonly Zero: "0";
    readonly One: "1";
};
/**
 * Allows to skip framework detection so the API would not fail to ask for confirmation
 */
export type SkipAutoDetectionConfirmation = ClosedEnum<typeof SkipAutoDetectionConfirmation>;
/**
 * Used in the case you want to reference a file that was already uploaded
 */
export type UploadedFile = {
    /**
     * The file path relative to the project root
     */
    file: string;
    /**
     * The file contents hashed with SHA1, used to check the integrity
     */
    sha?: string | undefined;
    /**
     * The file size in bytes
     */
    size?: number | undefined;
};
/**
 * The file content encoding, it could be either a base64 (useful for images, etc.) of the files or the plain text for source code.
 */
export declare const Encoding: {
    readonly Base64: "base64";
    readonly Utf8: "utf-8";
};
/**
 * The file content encoding, it could be either a base64 (useful for images, etc.) of the files or the plain text for source code.
 */
export type Encoding = ClosedEnum<typeof Encoding>;
/**
 * Used in the case you want to inline a file inside the request
 */
export type InlinedFile = {
    /**
     * The file content, it could be either a `base64` (useful for images, etc.) of the files or the plain content for source code
     */
    data: string;
    /**
     * The file content encoding, it could be either a base64 (useful for images, etc.) of the files or the plain text for source code.
     */
    encoding?: Encoding | undefined;
    /**
     * The file name including the whole path
     */
    file: string;
};
export type Files = InlinedFile | UploadedFile;
/**
 * Populates initial git metadata for different git providers.
 */
export type GitMetadata = {
    /**
     * The git repository's remote origin url
     */
    remoteUrl?: string | undefined;
    /**
     * The name of the author of the commit
     */
    commitAuthorName?: string | undefined;
    /**
     * The email of the author of the commit
     */
    commitAuthorEmail?: string | undefined;
    /**
     * The commit message
     */
    commitMessage?: string | undefined;
    /**
     * The branch on which the commit was made
     */
    commitRef?: string | undefined;
    /**
     * The hash of the commit
     */
    commitSha?: string | undefined;
    /**
     * Whether or not there have been modifications to the working tree since the latest commit
     */
    dirty?: boolean | undefined;
    /**
     * True if process.env.CI was set when deploying
     */
    ci?: boolean | undefined;
    /**
     * The type of CI system used
     */
    ciType?: string | undefined;
    /**
     * The username used for the Git Provider (e.g. GitHub) if their CI (e.g. GitHub Actions) was used, if available
     */
    ciGitProviderUsername?: string | undefined;
    /**
     * The visibility of the Git repository if their CI (e.g. GitHub Actions) was used, if available
     */
    ciGitRepoVisibility?: string | undefined;
};
export declare const CreateDeploymentGitSourceDeploymentsRequestType: {
    readonly Bitbucket: "bitbucket";
};
export type CreateDeploymentGitSourceDeploymentsRequestType = ClosedEnum<typeof CreateDeploymentGitSourceDeploymentsRequestType>;
export type GitSource5 = {
    owner: string;
    ref: string;
    sha?: string | undefined;
    slug: string;
    type: CreateDeploymentGitSourceDeploymentsRequestType;
};
export declare const CreateDeploymentGitSourceDeploymentsType: {
    readonly Bitbucket: "bitbucket";
};
export type CreateDeploymentGitSourceDeploymentsType = ClosedEnum<typeof CreateDeploymentGitSourceDeploymentsType>;
export type GitSource4 = {
    ref: string;
    repoUuid: string;
    sha?: string | undefined;
    type: CreateDeploymentGitSourceDeploymentsType;
    workspaceUuid?: string | undefined;
};
export type ProjectId = number | string;
export declare const CreateDeploymentGitSourceType: {
    readonly Gitlab: "gitlab";
};
export type CreateDeploymentGitSourceType = ClosedEnum<typeof CreateDeploymentGitSourceType>;
export type GitSource3 = {
    projectId: number | string;
    ref: string;
    sha?: string | undefined;
    type: CreateDeploymentGitSourceType;
};
export declare const GitSourceType: {
    readonly Github: "github";
};
export type GitSourceType = ClosedEnum<typeof GitSourceType>;
export type GitSource2 = {
    org: string;
    ref: string;
    repo: string;
    sha?: string | undefined;
    type: GitSourceType;
};
export type RepoId = number | string;
export declare const CreateDeploymentGitSourceDeploymentsRequestRequestBodyType: {
    readonly Github: "github";
};
export type CreateDeploymentGitSourceDeploymentsRequestRequestBodyType = ClosedEnum<typeof CreateDeploymentGitSourceDeploymentsRequestRequestBodyType>;
export type GitSource1 = {
    ref: string;
    repoId: number | string;
    sha?: string | undefined;
    type: CreateDeploymentGitSourceDeploymentsRequestRequestBodyType;
};
/**
 * Defines the Git Repository source to be deployed. This property can not be used in combination with `files`.
 */
export type GitSource = GitSource2 | GitSource5 | GitSource1 | GitSource3 | GitSource4;
/**
 * The framework that is being used for this project. When `null` is used no framework is selected
 */
export declare const Framework: {
    readonly Blitzjs: "blitzjs";
    readonly Nextjs: "nextjs";
    readonly Gatsby: "gatsby";
    readonly Remix: "remix";
    readonly ReactRouter: "react-router";
    readonly Astro: "astro";
    readonly Hexo: "hexo";
    readonly Eleventy: "eleventy";
    readonly Docusaurus2: "docusaurus-2";
    readonly Docusaurus: "docusaurus";
    readonly Preact: "preact";
    readonly Solidstart1: "solidstart-1";
    readonly Solidstart: "solidstart";
    readonly Dojo: "dojo";
    readonly Ember: "ember";
    readonly Vue: "vue";
    readonly Scully: "scully";
    readonly IonicAngular: "ionic-angular";
    readonly Angular: "angular";
    readonly Polymer: "polymer";
    readonly Svelte: "svelte";
    readonly Sveltekit: "sveltekit";
    readonly Sveltekit1: "sveltekit-1";
    readonly IonicReact: "ionic-react";
    readonly CreateReactApp: "create-react-app";
    readonly Gridsome: "gridsome";
    readonly Umijs: "umijs";
    readonly Sapper: "sapper";
    readonly Saber: "saber";
    readonly Stencil: "stencil";
    readonly Nuxtjs: "nuxtjs";
    readonly Redwoodjs: "redwoodjs";
    readonly Hugo: "hugo";
    readonly Jekyll: "jekyll";
    readonly Brunch: "brunch";
    readonly Middleman: "middleman";
    readonly Zola: "zola";
    readonly Hydrogen: "hydrogen";
    readonly Vite: "vite";
    readonly Vitepress: "vitepress";
    readonly Vuepress: "vuepress";
    readonly Parcel: "parcel";
    readonly Fastapi: "fastapi";
    readonly Fasthtml: "fasthtml";
    readonly SanityV3: "sanity-v3";
    readonly Sanity: "sanity";
    readonly Storybook: "storybook";
    readonly Nitro: "nitro";
    readonly Hono: "hono";
    readonly Express: "express";
    readonly Xmcp: "xmcp";
};
/**
 * The framework that is being used for this project. When `null` is used no framework is selected
 */
export type Framework = ClosedEnum<typeof Framework>;
/**
 * Override the Node.js version that should be used for this deployment
 */
export declare const NodeVersion: {
    readonly TwentyTwoDotX: "22.x";
    readonly TwentyDotX: "20.x";
    readonly EighteenDotX: "18.x";
    readonly SixteenDotX: "16.x";
    readonly FourteenDotX: "14.x";
    readonly TwelveDotX: "12.x";
    readonly TenDotX: "10.x";
    readonly EightDot10DotX: "8.10.x";
};
/**
 * Override the Node.js version that should be used for this deployment
 */
export type NodeVersion = ClosedEnum<typeof NodeVersion>;
/**
 * Project settings that will be applied to the deployment. It is required for the first deployment of a project and will be saved for any following deployments
 */
export type ProjectSettings = {
    /**
     * The build command for this project. When `null` is used this value will be automatically detected
     */
    buildCommand?: string | null | undefined;
    commandForIgnoringBuildStep?: string | null | undefined;
    /**
     * The dev command for this project. When `null` is used this value will be automatically detected
     */
    devCommand?: string | null | undefined;
    /**
     * The framework that is being used for this project. When `null` is used no framework is selected
     */
    framework?: Framework | null | undefined;
    /**
     * The install command for this project. When `null` is used this value will be automatically detected
     */
    installCommand?: string | null | undefined;
    /**
     * Override the Node.js version that should be used for this deployment
     */
    nodeVersion?: NodeVersion | undefined;
    /**
     * The output directory of the project. When `null` is used this value will be automatically detected
     */
    outputDirectory?: string | null | undefined;
    /**
     * The name of a directory or relative path to the source code of your project. When `null` is used it will default to the project root
     */
    rootDirectory?: string | null | undefined;
    /**
     * The region to deploy Serverless Functions in this project
     */
    serverlessFunctionRegion?: string | null | undefined;
    /**
     * Opts-out of the message prompting a CLI user to connect a Git repository in `vercel link`.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    skipGitConnectDuringLink?: boolean | undefined;
    /**
     * Indicates if there are source files outside of the root directory, typically used for monorepos
     */
    sourceFilesOutsideRootDirectory?: boolean | undefined;
};
export type CreateDeploymentRequestBody = {
    /**
     * Deploy to a custom environment, which will override the default environment
     */
    customEnvironmentSlugOrId?: string | undefined;
    /**
     * An deployment id for an existing deployment to redeploy
     */
    deploymentId?: string | undefined;
    /**
     * A list of objects with the files to be deployed
     */
    files?: Array<InlinedFile | UploadedFile> | undefined;
    /**
     * Populates initial git metadata for different git providers.
     */
    gitMetadata?: GitMetadata | undefined;
    /**
     * Defines the Git Repository source to be deployed. This property can not be used in combination with `files`.
     */
    gitSource?: GitSource2 | GitSource5 | GitSource1 | GitSource3 | GitSource4 | undefined;
    /**
     * An object containing the deployment's metadata. Multiple key-value pairs can be attached to a deployment
     */
    meta?: {
        [k: string]: string;
    } | undefined;
    /**
     * The monorepo manager that is being used for this deployment. When `null` is used no monorepo manager is selected
     */
    monorepoManager?: string | null | undefined;
    /**
     * A string with the project name used in the deployment URL
     */
    name: string;
    /**
     * The target project identifier in which the deployment will be created. When defined, this parameter overrides name
     */
    project?: string | undefined;
    /**
     * Project settings that will be applied to the deployment. It is required for the first deployment of a project and will be saved for any following deployments
     */
    projectSettings?: ProjectSettings | undefined;
    /**
     * Either not defined, `staging`, `production`, or a custom environment identifier. If `staging`, a staging alias in the format `<project>-<team>.vercel.app` will be assigned. If `production`, any aliases defined in `alias` will be assigned. If omitted, the target will be `preview`.
     */
    target?: string | undefined;
    /**
     * When `true` and `deploymentId` is passed in, the sha from the previous deployment's `gitSource` is removed forcing the latest commit to be used.
     */
    withLatestCommit?: boolean | undefined;
};
export type CreateDeploymentRequest = {
    /**
     * Forces a new deployment even if there is a previous similar deployment
     */
    forceNew?: ForceNew | undefined;
    /**
     * Allows to skip framework detection so the API would not fail to ask for confirmation
     */
    skipAutoDetectionConfirmation?: SkipAutoDetectionConfirmation | undefined;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody: CreateDeploymentRequestBody;
};
export type AliasAssignedAt = number | boolean;
export type Build = {
    env: Array<string>;
};
export type Builds = {
    use: string;
    src?: string | undefined;
    config?: {
        [k: string]: any;
    } | undefined;
};
export declare const CreateDeploymentFramework: {
    readonly Blitzjs: "blitzjs";
    readonly Nextjs: "nextjs";
    readonly Gatsby: "gatsby";
    readonly Remix: "remix";
    readonly ReactRouter: "react-router";
    readonly Astro: "astro";
    readonly Hexo: "hexo";
    readonly Eleventy: "eleventy";
    readonly Docusaurus2: "docusaurus-2";
    readonly Docusaurus: "docusaurus";
    readonly Preact: "preact";
    readonly Solidstart1: "solidstart-1";
    readonly Solidstart: "solidstart";
    readonly Dojo: "dojo";
    readonly Ember: "ember";
    readonly Vue: "vue";
    readonly Scully: "scully";
    readonly IonicAngular: "ionic-angular";
    readonly Angular: "angular";
    readonly Polymer: "polymer";
    readonly Svelte: "svelte";
    readonly Sveltekit: "sveltekit";
    readonly Sveltekit1: "sveltekit-1";
    readonly IonicReact: "ionic-react";
    readonly CreateReactApp: "create-react-app";
    readonly Gridsome: "gridsome";
    readonly Umijs: "umijs";
    readonly Sapper: "sapper";
    readonly Saber: "saber";
    readonly Stencil: "stencil";
    readonly Nuxtjs: "nuxtjs";
    readonly Redwoodjs: "redwoodjs";
    readonly Hugo: "hugo";
    readonly Jekyll: "jekyll";
    readonly Brunch: "brunch";
    readonly Middleman: "middleman";
    readonly Zola: "zola";
    readonly Hydrogen: "hydrogen";
    readonly Vite: "vite";
    readonly Vitepress: "vitepress";
    readonly Vuepress: "vuepress";
    readonly Parcel: "parcel";
    readonly Fastapi: "fastapi";
    readonly Fasthtml: "fasthtml";
    readonly SanityV3: "sanity-v3";
    readonly Sanity: "sanity";
    readonly Storybook: "storybook";
    readonly Nitro: "nitro";
    readonly Hono: "hono";
    readonly Express: "express";
    readonly Xmcp: "xmcp";
};
export type CreateDeploymentFramework = ClosedEnum<typeof CreateDeploymentFramework>;
export type CreateDeploymentSpeedInsights = {
    id: string;
    enabledAt?: number | undefined;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    hasData?: boolean | undefined;
    paidAt?: number | undefined;
};
export type CreateDeploymentWebAnalytics = {
    id: string;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    enabledAt?: number | undefined;
    hasData?: boolean | undefined;
};
export type CreateDeploymentProjectSettings = {
    buildCommand?: string | null | undefined;
    commandForIgnoringBuildStep?: string | null | undefined;
    devCommand?: string | null | undefined;
    framework?: CreateDeploymentFramework | null | undefined;
    installCommand?: string | null | undefined;
    outputDirectory?: string | null | undefined;
    speedInsights?: CreateDeploymentSpeedInsights | undefined;
    webAnalytics?: CreateDeploymentWebAnalytics | undefined;
};
export declare const CreateDeploymentDeploymentsStatus: {
    readonly Skipped: "skipped";
    readonly Pending: "pending";
    readonly Ready: "ready";
    readonly Error: "error";
    readonly Timeout: "timeout";
};
export type CreateDeploymentDeploymentsStatus = ClosedEnum<typeof CreateDeploymentDeploymentsStatus>;
export type Integrations = {
    status: CreateDeploymentDeploymentsStatus;
    startedAt: number;
    completedAt?: number | undefined;
    skippedAt?: number | undefined;
    skippedBy?: string | undefined;
};
/**
 * Must be `http` or `https`.
 */
export declare const Protocol: {
    readonly Http: "http";
    readonly Https: "https";
};
/**
 * Must be `http` or `https`.
 */
export type Protocol = ClosedEnum<typeof Protocol>;
export type RemotePatterns = {
    /**
     * Must be `http` or `https`.
     */
    protocol?: Protocol | undefined;
    /**
     * Can be literal or wildcard. Single `*` matches a single subdomain. Double `**` matches any number of subdomains.
     */
    hostname: string;
    /**
     * Can be literal port such as `8080` or empty string meaning no port.
     */
    port?: string | undefined;
    /**
     * Can be literal or wildcard. Single `*` matches a single path segment. Double `**` matches any number of path segments.
     */
    pathname?: string | undefined;
    /**
     * Can be literal query string such as `?v=1` or empty string meaning no query string.
     */
    search?: string | undefined;
};
export type LocalPatterns = {
    /**
     * Can be literal or wildcard. Single `*` matches a single path segment. Double `**` matches any number of path segments.
     */
    pathname?: string | undefined;
    /**
     * Can be literal query string such as `?v=1` or empty string meaning no query string.
     */
    search?: string | undefined;
};
export declare const Formats: {
    readonly ImageAvif: "image/avif";
    readonly ImageWebp: "image/webp";
};
export type Formats = ClosedEnum<typeof Formats>;
export declare const ContentDispositionType: {
    readonly Inline: "inline";
    readonly Attachment: "attachment";
};
export type ContentDispositionType = ClosedEnum<typeof ContentDispositionType>;
export type Images = {
    sizes?: Array<number> | undefined;
    qualities?: Array<number> | undefined;
    domains?: Array<string> | undefined;
    remotePatterns?: Array<RemotePatterns> | undefined;
    localPatterns?: Array<LocalPatterns> | undefined;
    minimumCacheTTL?: number | undefined;
    formats?: Array<Formats> | undefined;
    dangerouslyAllowSVG?: boolean | undefined;
    contentSecurityPolicy?: string | undefined;
    contentDispositionType?: ContentDispositionType | undefined;
};
export type Creator = {
    uid: string;
    username?: string | undefined;
    avatar?: string | undefined;
};
export declare const CreateDeploymentReadyState: {
    readonly Building: "BUILDING";
    readonly Error: "ERROR";
    readonly Initializing: "INITIALIZING";
    readonly Ready: "READY";
};
export type CreateDeploymentReadyState = ClosedEnum<typeof CreateDeploymentReadyState>;
export type CreateDeploymentOutput = {
    path: string;
    functionName: string;
};
/**
 * A partial representation of a Build used by the deployment endpoint.
 */
export type Lambdas = {
    id: string;
    createdAt?: number | undefined;
    readyState?: CreateDeploymentReadyState | undefined;
    entrypoint?: string | null | undefined;
    readyStateAt?: number | undefined;
    output: Array<CreateDeploymentOutput>;
};
export declare const CreateDeploymentStatus: {
    readonly Canceled: "CANCELED";
    readonly Error: "ERROR";
    readonly Queued: "QUEUED";
    readonly Building: "BUILDING";
    readonly Initializing: "INITIALIZING";
    readonly Ready: "READY";
};
export type CreateDeploymentStatus = ClosedEnum<typeof CreateDeploymentStatus>;
export type CreateDeploymentTeam = {
    id: string;
    name: string;
    slug: string;
    avatar?: string | undefined;
};
export type CustomEnvironment2 = {
    id: string;
};
/**
 * The type of environment (production, preview, or development)
 */
export declare const CustomEnvironmentType: {
    readonly Production: "production";
    readonly Preview: "preview";
    readonly Development: "development";
};
/**
 * The type of environment (production, preview, or development)
 */
export type CustomEnvironmentType = ClosedEnum<typeof CustomEnvironmentType>;
/**
 * The type of matching to perform
 */
export declare const CreateDeploymentCustomEnvironmentType: {
    readonly EndsWith: "endsWith";
    readonly StartsWith: "startsWith";
    readonly Equals: "equals";
};
/**
 * The type of matching to perform
 */
export type CreateDeploymentCustomEnvironmentType = ClosedEnum<typeof CreateDeploymentCustomEnvironmentType>;
/**
 * Configuration for matching git branches to this environment
 */
export type CustomEnvironmentBranchMatcher = {
    /**
     * The type of matching to perform
     */
    type: CreateDeploymentCustomEnvironmentType;
    /**
     * The pattern to match against branch names
     */
    pattern: string;
};
/**
 * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
 */
export type CustomEnvironmentVerification = {
    type: string;
    domain: string;
    value: string;
    reason: string;
};
/**
 * List of domains associated with this environment
 */
export type CustomEnvironmentDomains = {
    name: string;
    apexName: string;
    projectId: string;
    redirect?: string | null | undefined;
    redirectStatusCode?: number | null | undefined;
    gitBranch?: string | null | undefined;
    customEnvironmentId?: string | null | undefined;
    updatedAt?: number | undefined;
    createdAt?: number | undefined;
    /**
     * `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.
     */
    verified: boolean;
    /**
     * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
     */
    verification?: Array<CustomEnvironmentVerification> | undefined;
};
/**
 * Internal representation of a custom environment with all required properties
 */
export type CustomEnvironment1 = {
    /**
     * Unique identifier for the custom environment (format: env_*)
     */
    id: string;
    /**
     * URL-friendly name of the environment
     */
    slug: string;
    /**
     * The type of environment (production, preview, or development)
     */
    type: CustomEnvironmentType;
    /**
     * Optional description of the environment's purpose
     */
    description?: string | undefined;
    /**
     * Configuration for matching git branches to this environment
     */
    branchMatcher?: CustomEnvironmentBranchMatcher | undefined;
    /**
     * List of domains associated with this environment
     */
    domains?: Array<CustomEnvironmentDomains> | undefined;
    /**
     * List of aliases for the current deployment
     */
    currentDeploymentAliases?: Array<string> | undefined;
    /**
     * Timestamp when the environment was created
     */
    createdAt: number;
    /**
     * Timestamp when the environment was last updated
     */
    updatedAt: number;
};
export type CustomEnvironment = CustomEnvironment1 | CustomEnvironment2;
export declare const OomReport: {
    readonly OutOfMemory: "out-of-memory";
};
export type OomReport = ClosedEnum<typeof OomReport>;
export declare const CreateDeploymentType: {
    readonly Lambdas: "LAMBDAS";
};
export type CreateDeploymentType = ClosedEnum<typeof CreateDeploymentType>;
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody15Type: {
    readonly Bitbucket: "bitbucket";
};
export type CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody15Type = ClosedEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody15Type>;
export type CreateDeploymentGitSource15 = {
    type: CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody15Type;
    ref: string;
    sha: string;
    owner?: string | undefined;
    slug?: string | undefined;
    workspaceUuid: string;
    repoUuid: string;
};
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody14Type: {
    readonly Gitlab: "gitlab";
};
export type CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody14Type = ClosedEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody14Type>;
export type CreateDeploymentGitSource14 = {
    type: CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody14Type;
    ref: string;
    sha: string;
    projectId: number;
};
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody13Type: {
    readonly GithubLimited: "github-limited";
};
export type CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody13Type = ClosedEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody13Type>;
export type CreateDeploymentGitSource13 = {
    type: CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody13Type;
    ref: string;
    sha: string;
    repoId: number;
    org?: string | undefined;
    repo?: string | undefined;
};
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type: {
    readonly GithubCustomHost: "github-custom-host";
};
export type CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type = ClosedEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type>;
export type CreateDeploymentGitSource12 = {
    type: CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type;
    host: string;
    ref: string;
    sha: string;
    repoId: number;
    org?: string | undefined;
    repo?: string | undefined;
};
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type: {
    readonly Github: "github";
};
export type CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type = ClosedEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type>;
export type CreateDeploymentGitSource11 = {
    type: CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type;
    ref: string;
    sha: string;
    repoId: number;
    org?: string | undefined;
    repo?: string | undefined;
};
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type: {
    readonly Custom: "custom";
};
export type CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type = ClosedEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type>;
/**
 * Allows custom git sources (local folder mounted to the container) in test mode
 */
export type CreateDeploymentGitSource10 = {
    type: CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type;
    ref: string;
    sha: string;
    gitUrl: string;
};
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type: {
    readonly Bitbucket: "bitbucket";
};
export type CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type = ClosedEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type>;
export type CreateDeploymentGitSource9 = {
    type: CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type;
    owner: string;
    slug: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type: {
    readonly Bitbucket: "bitbucket";
};
export type CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type = ClosedEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type>;
export type CreateDeploymentGitSource8 = {
    type: CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type;
    workspaceUuid?: string | undefined;
    repoUuid: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type: {
    readonly Gitlab: "gitlab";
};
export type CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type = ClosedEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type>;
export type GitSourceProjectId = string | number;
export type CreateDeploymentGitSource7 = {
    type: CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type;
    projectId: string | number;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody6Type: {
    readonly GithubLimited: "github-limited";
};
export type CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody6Type = ClosedEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody6Type>;
export type CreateDeploymentGitSource6 = {
    type: CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody6Type;
    org: string;
    repo: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody5Type: {
    readonly GithubLimited: "github-limited";
};
export type CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody5Type = ClosedEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody5Type>;
export type CreateDeploymentGitSourceDeploymentsRepoId = string | number;
export type CreateDeploymentGitSource5 = {
    type: CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody5Type;
    repoId: string | number;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType: {
    readonly GithubCustomHost: "github-custom-host";
};
export type CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType = ClosedEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType>;
export type CreateDeploymentGitSource4 = {
    type: CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType;
    host: string;
    org: string;
    repo: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONType: {
    readonly GithubCustomHost: "github-custom-host";
};
export type CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONType = ClosedEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONType>;
export type CreateDeploymentGitSourceRepoId = string | number;
export type CreateDeploymentGitSource3 = {
    type: CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONType;
    host: string;
    repoId: string | number;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
export declare const CreateDeploymentGitSourceDeploymentsResponse200Type: {
    readonly Github: "github";
};
export type CreateDeploymentGitSourceDeploymentsResponse200Type = ClosedEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200Type>;
export type CreateDeploymentGitSource2 = {
    type: CreateDeploymentGitSourceDeploymentsResponse200Type;
    org: string;
    repo: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
export declare const CreateDeploymentGitSourceDeploymentsResponseType: {
    readonly Github: "github";
};
export type CreateDeploymentGitSourceDeploymentsResponseType = ClosedEnum<typeof CreateDeploymentGitSourceDeploymentsResponseType>;
export type GitSourceRepoId = string | number;
export type CreateDeploymentGitSource1 = {
    type: CreateDeploymentGitSourceDeploymentsResponseType;
    repoId: string | number;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
export type CreateDeploymentGitSource = CreateDeploymentGitSource12 | CreateDeploymentGitSource15 | CreateDeploymentGitSource4 | CreateDeploymentGitSource10 | CreateDeploymentGitSource11 | CreateDeploymentGitSource13 | CreateDeploymentGitSource14 | CreateDeploymentGitSource2 | CreateDeploymentGitSource3 | CreateDeploymentGitSource6 | CreateDeploymentGitSource9 | CreateDeploymentGitSource1 | CreateDeploymentGitSource5 | CreateDeploymentGitSource7 | CreateDeploymentGitSource8;
export type CreateDeploymentProject = {
    id: string;
    name: string;
    framework?: string | null | undefined;
};
/**
 * If set it overrides the `projectSettings.nodeVersion` for this deployment.
 */
export declare const CreateDeploymentNodeVersion: {
    readonly TwentyTwoDotX: "22.x";
    readonly TwentyDotX: "20.x";
    readonly EighteenDotX: "18.x";
    readonly SixteenDotX: "16.x";
    readonly FourteenDotX: "14.x";
    readonly TwelveDotX: "12.x";
    readonly TenDotX: "10.x";
    readonly EightDot10DotX: "8.10.x";
};
/**
 * If set it overrides the `projectSettings.nodeVersion` for this deployment.
 */
export type CreateDeploymentNodeVersion = ClosedEnum<typeof CreateDeploymentNodeVersion>;
export declare const ReadyState: {
    readonly Canceled: "CANCELED";
    readonly Error: "ERROR";
    readonly Queued: "QUEUED";
    readonly Building: "BUILDING";
    readonly Initializing: "INITIALIZING";
    readonly Ready: "READY";
};
export type ReadyState = ClosedEnum<typeof ReadyState>;
export declare const CreateDeploymentSource: {
    readonly Cli: "cli";
    readonly Git: "git";
    readonly Import: "import";
    readonly ImportRepo: "import/repo";
    readonly CloneRepo: "clone/repo";
    readonly ApiTriggerGitDeploy: "api-trigger-git-deploy";
    readonly Redeploy: "redeploy";
    readonly V0Web: "v0-web";
};
export type CreateDeploymentSource = ClosedEnum<typeof CreateDeploymentSource>;
export declare const CreateDeploymentTarget: {
    readonly Production: "production";
    readonly Staging: "staging";
};
export type CreateDeploymentTarget = ClosedEnum<typeof CreateDeploymentTarget>;
export type AliasError = {
    code: string;
    message: string;
};
export type AliasWarning = {
    code: string;
    message: string;
    link?: string | undefined;
    action?: string | undefined;
};
export declare const ChecksConclusion: {
    readonly Succeeded: "succeeded";
    readonly Failed: "failed";
    readonly Skipped: "skipped";
    readonly Canceled: "canceled";
};
export type ChecksConclusion = ClosedEnum<typeof ChecksConclusion>;
export declare const ChecksState: {
    readonly Registered: "registered";
    readonly Running: "running";
    readonly Completed: "completed";
};
export type ChecksState = ClosedEnum<typeof ChecksState>;
export type OidcTokenClaims = {
    iss: string;
    sub: string;
    scope: string;
    aud: string;
    owner: string;
    ownerId: string;
    project: string;
    projectId: string;
    environment: string;
};
/**
 * Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - ROLLING: in the process of having production traffic gradually transitioned. - PROMOTED: has seen production traffic
 */
export declare const ReadySubstate: {
    readonly Staged: "STAGED";
    readonly Rolling: "ROLLING";
    readonly Promoted: "PROMOTED";
};
/**
 * Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - ROLLING: in the process of having production traffic gradually transitioned. - PROMOTED: has seen production traffic
 */
export type ReadySubstate = ClosedEnum<typeof ReadySubstate>;
export declare const CreateDeploymentPlan: {
    readonly Hobby: "hobby";
    readonly Pro: "pro";
    readonly Enterprise: "enterprise";
};
export type CreateDeploymentPlan = ClosedEnum<typeof CreateDeploymentPlan>;
export declare const FunctionType: {
    readonly Fluid: "fluid";
    readonly Standard: "standard";
};
export type FunctionType = ClosedEnum<typeof FunctionType>;
export declare const FunctionMemoryType: {
    readonly Standard: "standard";
    readonly StandardLegacy: "standard_legacy";
    readonly Performance: "performance";
};
export type FunctionMemoryType = ClosedEnum<typeof FunctionMemoryType>;
/**
 * Since February 2025 the configuration must include snapshot data at the time of deployment creation to capture properties for the /deployments/:id/config endpoint utilized for displaying Deployment Configuration on the frontend This is optional because older deployments may not have this data captured
 */
export type Config = {
    version?: number | undefined;
    functionType: FunctionType;
    functionMemoryType: FunctionMemoryType;
    functionTimeout: number | null;
    secureComputePrimaryRegion: string | null;
    secureComputeFallbackRegion: string | null;
    isUsingActiveCPU?: boolean | undefined;
};
export declare const Architecture: {
    readonly X8664: "x86_64";
    readonly Arm64: "arm64";
};
export type Architecture = ClosedEnum<typeof Architecture>;
/**
 * Event type - must be "queue/v1beta" (REQUIRED)
 */
export declare const CreateDeploymentDeploymentsType: {
    readonly QueueV1beta: "queue/v1beta";
};
/**
 * Event type - must be "queue/v1beta" (REQUIRED)
 */
export type CreateDeploymentDeploymentsType = ClosedEnum<typeof CreateDeploymentDeploymentsType>;
/**
 * Queue trigger event for Vercel's queue system. Handles "queue/v1beta" events with queue-specific configuration.
 */
export type ExperimentalTriggers = {
    /**
     * Event type - must be "queue/v1beta" (REQUIRED)
     */
    type: CreateDeploymentDeploymentsType;
    /**
     * Name of the queue topic to consume from (REQUIRED)
     */
    topic: string;
    /**
     * Name of the consumer group for this trigger (REQUIRED)
     */
    consumer: string;
    /**
     * Maximum number of delivery attempts for message processing (OPTIONAL) This represents the total number of times a message can be delivered, not the number of retries. Must be at least 1 if specified. Behavior when not specified depends on the server's default configuration.
     */
    maxDeliveries?: number | undefined;
    /**
     * Delay in seconds before retrying failed executions (OPTIONAL) Behavior when not specified depends on the server's default configuration.
     */
    retryAfterSeconds?: number | undefined;
    /**
     * Initial delay in seconds before first execution attempt (OPTIONAL) Must be 0 or greater. Use 0 for no initial delay. Behavior when not specified depends on the server's default configuration.
     */
    initialDelaySeconds?: number | undefined;
};
export type Functions = {
    architecture?: Architecture | undefined;
    memory?: number | undefined;
    maxDuration?: number | undefined;
    runtime?: string | undefined;
    includeFiles?: string | undefined;
    excludeFiles?: string | undefined;
    experimentalTriggers?: Array<ExperimentalTriggers> | undefined;
    supportsCancellation?: boolean | undefined;
};
export type Routes3 = {
    src: string;
    continue: boolean;
    middleware: number;
};
export declare const Handle: {
    readonly Error: "error";
    readonly Filesystem: "filesystem";
    readonly Hit: "hit";
    readonly Miss: "miss";
    readonly Rewrite: "rewrite";
    readonly Resource: "resource";
};
export type Handle = ClosedEnum<typeof Handle>;
export type Routes2 = {
    handle: Handle;
    src?: string | undefined;
    dest?: string | undefined;
    status?: number | undefined;
};
export declare const CreateDeploymentHasDeploymentsType: {
    readonly Header: "header";
    readonly Cookie: "cookie";
    readonly Query: "query";
};
export type CreateDeploymentHasDeploymentsType = ClosedEnum<typeof CreateDeploymentHasDeploymentsType>;
export type ValueEq = string | number;
export type CreateDeploymentValue2 = {
    eq?: string | number | undefined;
    neq?: string | undefined;
    inc?: Array<string> | undefined;
    ninc?: Array<string> | undefined;
    pre?: string | undefined;
    suf?: string | undefined;
    re?: string | undefined;
    gt?: number | undefined;
    gte?: number | undefined;
    lt?: number | undefined;
    lte?: number | undefined;
};
export type CreateDeploymentHasDeploymentsValue = CreateDeploymentValue2 | string;
export type CreateDeploymentHas2 = {
    type: CreateDeploymentHasDeploymentsType;
    key: string;
    value?: CreateDeploymentValue2 | string | undefined;
};
export declare const CreateDeploymentHasType: {
    readonly Host: "host";
};
export type CreateDeploymentHasType = ClosedEnum<typeof CreateDeploymentHasType>;
export type Eq = string | number;
export type CreateDeploymentValueDeploymentsResponse2002 = {
    eq?: string | number | undefined;
    neq?: string | undefined;
    inc?: Array<string> | undefined;
    ninc?: Array<string> | undefined;
    pre?: string | undefined;
    suf?: string | undefined;
    re?: string | undefined;
    gt?: number | undefined;
    gte?: number | undefined;
    lt?: number | undefined;
    lte?: number | undefined;
};
export type CreateDeploymentHasValue = CreateDeploymentValueDeploymentsResponse2002 | string;
export type CreateDeploymentHas1 = {
    type: CreateDeploymentHasType;
    value: CreateDeploymentValueDeploymentsResponse2002 | string;
};
export type RoutesHas = CreateDeploymentHas1 | CreateDeploymentHas2;
export declare const CreateDeploymentMissingType: {
    readonly Header: "header";
    readonly Cookie: "cookie";
    readonly Query: "query";
};
export type CreateDeploymentMissingType = ClosedEnum<typeof CreateDeploymentMissingType>;
export type CreateDeploymentValueDeploymentsEq = string | number;
export type CreateDeploymentValueDeploymentsResponse2 = {
    eq?: string | number | undefined;
    neq?: string | undefined;
    inc?: Array<string> | undefined;
    ninc?: Array<string> | undefined;
    pre?: string | undefined;
    suf?: string | undefined;
    re?: string | undefined;
    gt?: number | undefined;
    gte?: number | undefined;
    lt?: number | undefined;
    lte?: number | undefined;
};
export type CreateDeploymentMissingValue = CreateDeploymentValueDeploymentsResponse2 | string;
export type Missing2 = {
    type: CreateDeploymentMissingType;
    key: string;
    value?: CreateDeploymentValueDeploymentsResponse2 | string | undefined;
};
export declare const MissingType: {
    readonly Host: "host";
};
export type MissingType = ClosedEnum<typeof MissingType>;
export type CreateDeploymentValueEq = string | number;
export type CreateDeploymentValueDeployments2 = {
    eq?: string | number | undefined;
    neq?: string | undefined;
    inc?: Array<string> | undefined;
    ninc?: Array<string> | undefined;
    pre?: string | undefined;
    suf?: string | undefined;
    re?: string | undefined;
    gt?: number | undefined;
    gte?: number | undefined;
    lt?: number | undefined;
    lte?: number | undefined;
};
export type MissingValue = CreateDeploymentValueDeployments2 | string;
export type Missing1 = {
    type: MissingType;
    value: CreateDeploymentValueDeployments2 | string;
};
export type Missing = Missing1 | Missing2;
export declare const RoutesAction: {
    readonly Challenge: "challenge";
    readonly Deny: "deny";
};
export type RoutesAction = ClosedEnum<typeof RoutesAction>;
export type RoutesMitigate = {
    action: RoutesAction;
};
export declare const RoutesType: {
    readonly RequestHeaders: "request.headers";
    readonly RequestQuery: "request.query";
    readonly ResponseHeaders: "response.headers";
};
export type RoutesType = ClosedEnum<typeof RoutesType>;
export declare const CreateDeploymentRoutesOp: {
    readonly Append: "append";
    readonly Set: "set";
    readonly Delete: "delete";
};
export type CreateDeploymentRoutesOp = ClosedEnum<typeof CreateDeploymentRoutesOp>;
export type KeyEq = string | number;
export type Key2 = {
    eq?: string | number | undefined;
    neq?: string | undefined;
    inc?: Array<string> | undefined;
    ninc?: Array<string> | undefined;
    pre?: string | undefined;
    suf?: string | undefined;
    gt?: number | undefined;
    gte?: number | undefined;
    lt?: number | undefined;
    lte?: number | undefined;
};
export type RoutesKey = Key2 | string;
export type RoutesTarget = {
    key: Key2 | string;
};
export type Args = string | Array<string>;
export type Transforms = {
    type: RoutesType;
    op: CreateDeploymentRoutesOp;
    target: RoutesTarget;
    args?: string | Array<string> | undefined;
};
export type Locale = {
    redirect?: {
        [k: string]: string;
    } | undefined;
    cookie?: string | undefined;
};
export type Routes1 = {
    src: string;
    dest?: string | undefined;
    headers?: {
        [k: string]: string;
    } | undefined;
    methods?: Array<string> | undefined;
    continue?: boolean | undefined;
    override?: boolean | undefined;
    caseSensitive?: boolean | undefined;
    check?: boolean | undefined;
    important?: boolean | undefined;
    status?: number | undefined;
    has?: Array<CreateDeploymentHas1 | CreateDeploymentHas2> | undefined;
    missing?: Array<Missing1 | Missing2> | undefined;
    mitigate?: RoutesMitigate | undefined;
    transforms?: Array<Transforms> | undefined;
    locale?: Locale | undefined;
    /**
     * A middleware key within the `output` key under the build result. Overrides a `middleware` definition.
     */
    middlewarePath?: string | undefined;
    /**
     * The original middleware matchers.
     */
    middlewareRawSrc?: Array<string> | undefined;
    /**
     * A middleware index in the `middleware` key under the build result
     */
    middleware?: number | undefined;
};
export type Routes = Routes3 | Routes1 | Routes2;
export type CreateDeploymentCrons = {
    schedule: string;
    path: string;
};
export declare const CreateDeploymentState: {
    readonly Succeeded: "succeeded";
    readonly Failed: "failed";
    readonly Pending: "pending";
};
export type CreateDeploymentState = ClosedEnum<typeof CreateDeploymentState>;
/**
 * Condensed check data. Retrieve individual check and check run data using api-checks v2 routes.
 */
export type DeploymentAlias = {
    state: CreateDeploymentState;
    startedAt: number;
    completedAt?: number | undefined;
};
export type CreateDeploymentChecks = {
    /**
     * Condensed check data. Retrieve individual check and check run data using api-checks v2 routes.
     */
    deploymentAlias: DeploymentAlias;
};
/**
 * A map of the other applications that are part of this group. Only defined on the default application. The field is set after deployments have been created, so can be undefined, but should be there for a successful deployment. Note: this field will be removed when MFE alias routing is fully rolled out.
 */
export type CreateDeploymentMicrofrontendsApplications = {
    isDefaultApp?: boolean | undefined;
    /**
     * This is the production alias, it will always show the most up to date of each application.
     */
    productionHost: string;
    /**
     * Use the fixed deploymentAlias and deploymentHost so that the microfrontend preview stays in sync with the deployment. These are only present for mono-repos when a single commit creates multiple deployments. If they are not present, productionHost will be used.
     */
    deploymentAlias?: string | undefined;
    deploymentHost?: string | undefined;
};
/**
 * The result of the microfrontends config upload during deployment creation. Only set for default app deployments. - `success` - The config was uploaded successfully. - `error` - The config upload failed. - `no_config` - No config was found to upload. - `undefined` - The config upload has not been attempted yet.
 */
export declare const MfeConfigUploadState: {
    readonly Error: "error";
    readonly Success: "success";
    readonly NoConfig: "no_config";
};
/**
 * The result of the microfrontends config upload during deployment creation. Only set for default app deployments. - `success` - The config was uploaded successfully. - `error` - The config upload failed. - `no_config` - No config was found to upload. - `undefined` - The config upload has not been attempted yet.
 */
export type MfeConfigUploadState = ClosedEnum<typeof MfeConfigUploadState>;
export type CreateDeploymentMicrofrontends2 = {
    isDefaultApp: boolean;
    /**
     * A map of the other applications that are part of this group. Only defined on the default application. The field is set after deployments have been created, so can be undefined, but should be there for a successful deployment. Note: this field will be removed when MFE alias routing is fully rolled out.
     */
    applications?: {
        [k: string]: CreateDeploymentMicrofrontendsApplications;
    } | undefined;
    /**
     * The result of the microfrontends config upload during deployment creation. Only set for default app deployments. - `success` - The config was uploaded successfully. - `error` - The config upload failed. - `no_config` - No config was found to upload. - `undefined` - The config upload has not been attempted yet.
     */
    mfeConfigUploadState?: MfeConfigUploadState | undefined;
    /**
     * The project name of the default app of this deployment's microfrontends group.
     */
    defaultAppProjectName: string;
    /**
     * A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI.
     */
    defaultRoute?: string | undefined;
    /**
     * The group of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together.
     */
    groupIds: Array<string>;
    /**
     * Whether the MicrofrontendsAlias2 team flag should be considered enabled for this deployment or not.
     */
    microfrontendsAlias2Enabled?: boolean | undefined;
};
export type CreateDeploymentMicrofrontends1 = {
    isDefaultApp?: boolean | undefined;
    /**
     * The project name of the default app of this deployment's microfrontends group.
     */
    defaultAppProjectName: string;
    /**
     * A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI.
     */
    defaultRoute?: string | undefined;
    /**
     * The group of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together.
     */
    groupIds: Array<string>;
    /**
     * Whether the MicrofrontendsAlias2 team flag should be considered enabled for this deployment or not.
     */
    microfrontendsAlias2Enabled?: boolean | undefined;
};
export type CreateDeploymentMicrofrontends = CreateDeploymentMicrofrontends2 | CreateDeploymentMicrofrontends1;
/**
 * Flags defined in the Build Output API, used by this deployment. Primarily used by the Toolbar to know about the used flags.
 */
export type Flags2 = {};
export type Options = {
    value: FlagJSONValue | null;
    label?: string | undefined;
};
export type FlagsDefinitions = {
    options?: Array<Options> | undefined;
    url?: string | undefined;
    description?: string | undefined;
};
/**
 * Flags defined in the Build Output API, used by this deployment. Primarily used by the Toolbar to know about the used flags.
 */
export type Flags1 = {
    definitions: {
        [k: string]: FlagsDefinitions;
    };
};
export type Flags = Flags1 | Array<Flags2>;
export declare const CreateDeploymentGitRepoDeploymentsType: {
    readonly Bitbucket: "bitbucket";
};
export type CreateDeploymentGitRepoDeploymentsType = ClosedEnum<typeof CreateDeploymentGitRepoDeploymentsType>;
export declare const CreateDeploymentGitRepoOwnerType: {
    readonly Team: "team";
    readonly User: "user";
};
export type CreateDeploymentGitRepoOwnerType = ClosedEnum<typeof CreateDeploymentGitRepoOwnerType>;
export type GitRepo3 = {
    owner: string;
    repoUuid: string;
    slug: string;
    type: CreateDeploymentGitRepoDeploymentsType;
    workspaceUuid: string;
    path: string;
    defaultBranch: string;
    name: string;
    private: boolean;
    ownerType: CreateDeploymentGitRepoOwnerType;
};
export declare const CreateDeploymentGitRepoType: {
    readonly Github: "github";
};
export type CreateDeploymentGitRepoType = ClosedEnum<typeof CreateDeploymentGitRepoType>;
export declare const GitRepoOwnerType: {
    readonly Team: "team";
    readonly User: "user";
};
export type GitRepoOwnerType = ClosedEnum<typeof GitRepoOwnerType>;
export type GitRepo2 = {
    org: string;
    repo: string;
    repoId: number;
    type: CreateDeploymentGitRepoType;
    repoOwnerId: number;
    path: string;
    defaultBranch: string;
    name: string;
    private: boolean;
    ownerType: GitRepoOwnerType;
};
export declare const GitRepoType: {
    readonly Gitlab: "gitlab";
};
export type GitRepoType = ClosedEnum<typeof GitRepoType>;
export declare const OwnerType: {
    readonly Team: "team";
    readonly User: "user";
};
export type OwnerType = ClosedEnum<typeof OwnerType>;
export type GitRepo1 = {
    namespace: string;
    projectId: number;
    type: GitRepoType;
    url: string;
    path: string;
    defaultBranch: string;
    name: string;
    private: boolean;
    ownerType: OwnerType;
};
export type GitRepo = GitRepo2 | GitRepo3 | GitRepo1;
/**
 * The successfully created deployment
 */
export type CreateDeploymentResponseBody = {
    aliasAssignedAt?: number | boolean | null | undefined;
    alwaysRefuseToBuild?: boolean | undefined;
    build: Build;
    buildArtifactUrls?: Array<string> | undefined;
    builds?: Array<Builds> | undefined;
    env: Array<string>;
    inspectorUrl: string | null;
    isInConcurrentBuildsQueue: boolean;
    isInSystemBuildsQueue: boolean;
    projectSettings: CreateDeploymentProjectSettings;
    readyStateReason?: string | undefined;
    integrations?: Integrations | undefined;
    images?: Images | undefined;
    alias?: Array<string> | undefined;
    aliasAssigned: boolean;
    bootedAt: number;
    buildingAt: number;
    /**
     * Since April 2025 it necessary for On-Demand Concurrency Minutes calculation
     */
    buildContainerFinishedAt?: number | undefined;
    buildSkipped: boolean;
    creator: Creator;
    initReadyAt?: number | undefined;
    isFirstBranchDeployment?: boolean | undefined;
    lambdas?: Array<Lambdas> | undefined;
    public: boolean;
    ready?: number | undefined;
    status: CreateDeploymentStatus;
    team?: CreateDeploymentTeam | undefined;
    userAliases?: Array<string> | undefined;
    previewCommentsEnabled?: boolean | undefined;
    ttyBuildLogs?: boolean | undefined;
    customEnvironment?: CustomEnvironment1 | CustomEnvironment2 | undefined;
    oomReport?: OomReport | undefined;
    id: string;
    name: string;
    createdAt: number;
    type: CreateDeploymentType;
    deletedAt?: number | null | undefined;
    version: number;
    /**
     * applies to custom domains only, defaults to `true`
     */
    autoAssignCustomDomains?: boolean | undefined;
    gitSource?: CreateDeploymentGitSource12 | CreateDeploymentGitSource15 | CreateDeploymentGitSource4 | CreateDeploymentGitSource10 | CreateDeploymentGitSource11 | CreateDeploymentGitSource13 | CreateDeploymentGitSource14 | CreateDeploymentGitSource2 | CreateDeploymentGitSource3 | CreateDeploymentGitSource6 | CreateDeploymentGitSource9 | CreateDeploymentGitSource1 | CreateDeploymentGitSource5 | CreateDeploymentGitSource7 | CreateDeploymentGitSource8 | undefined;
    meta: {
        [k: string]: string;
    };
    project?: CreateDeploymentProject | undefined;
    /**
     * If set it overrides the `projectSettings.nodeVersion` for this deployment.
     */
    nodeVersion?: CreateDeploymentNodeVersion | undefined;
    readyState: ReadyState;
    source?: CreateDeploymentSource | undefined;
    target?: CreateDeploymentTarget | null | undefined;
    errorMessage?: string | null | undefined;
    /**
     * Since November 2023 this field defines a set of regions that we will deploy the lambda to passively Lambdas will be deployed to these regions but only invoked if all of the primary `regions` are marked as out of service
     */
    passiveRegions?: Array<string> | undefined;
    regions: Array<string>;
    aliasError?: AliasError | null | undefined;
    aliasFinal?: string | null | undefined;
    aliasWarning?: AliasWarning | null | undefined;
    automaticAliases?: Array<string> | undefined;
    buildErrorAt?: number | undefined;
    canceledAt?: number | undefined;
    checksConclusion?: ChecksConclusion | undefined;
    checksState?: ChecksState | undefined;
    /**
     * Computed field that is only available for deployments with a microfrontend configuration.
     */
    defaultRoute?: string | undefined;
    errorCode?: string | undefined;
    errorLink?: string | undefined;
    errorStep?: string | undefined;
    originCacheRegion?: string | undefined;
    oidcTokenClaims?: OidcTokenClaims | undefined;
    /**
     * Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - ROLLING: in the process of having production traffic gradually transitioned. - PROMOTED: has seen production traffic
     */
    readySubstate?: ReadySubstate | undefined;
    softDeletedByRetention?: boolean | undefined;
    undeletedAt?: number | undefined;
    url: string;
    projectId: string;
    ownerId: string;
    monorepoManager?: string | null | undefined;
    plan: CreateDeploymentPlan;
    /**
     * Since February 2025 the configuration must include snapshot data at the time of deployment creation to capture properties for the /deployments/:id/config endpoint utilized for displaying Deployment Configuration on the frontend This is optional because older deployments may not have this data captured
     */
    config?: Config | undefined;
    functions?: {
        [k: string]: Functions;
    } | null | undefined;
    routes: Array<Routes3 | Routes1 | Routes2> | null;
    crons?: Array<CreateDeploymentCrons> | undefined;
    checks?: CreateDeploymentChecks | undefined;
    microfrontends?: CreateDeploymentMicrofrontends2 | CreateDeploymentMicrofrontends1 | undefined;
    connectBuildsEnabled?: boolean | undefined;
    connectConfigurationId?: string | undefined;
    createdIn: string;
    /**
     * Since November 2023 this field defines a Secure Compute network that will only be used to deploy passive lambdas to (as in passiveRegions)
     */
    passiveConnectConfigurationId?: string | undefined;
    flags?: Flags1 | Array<Flags2> | undefined;
    gitRepo?: GitRepo2 | GitRepo3 | GitRepo1 | null | undefined;
};
/** @internal */
export declare const ForceNew$inboundSchema: z.ZodNativeEnum<typeof ForceNew>;
/** @internal */
export declare const ForceNew$outboundSchema: z.ZodNativeEnum<typeof ForceNew>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ForceNew$ {
    /** @deprecated use `ForceNew$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Zero: "0";
        readonly One: "1";
    }>;
    /** @deprecated use `ForceNew$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Zero: "0";
        readonly One: "1";
    }>;
}
/** @internal */
export declare const SkipAutoDetectionConfirmation$inboundSchema: z.ZodNativeEnum<typeof SkipAutoDetectionConfirmation>;
/** @internal */
export declare const SkipAutoDetectionConfirmation$outboundSchema: z.ZodNativeEnum<typeof SkipAutoDetectionConfirmation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SkipAutoDetectionConfirmation$ {
    /** @deprecated use `SkipAutoDetectionConfirmation$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Zero: "0";
        readonly One: "1";
    }>;
    /** @deprecated use `SkipAutoDetectionConfirmation$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Zero: "0";
        readonly One: "1";
    }>;
}
/** @internal */
export declare const UploadedFile$inboundSchema: z.ZodType<UploadedFile, z.ZodTypeDef, unknown>;
/** @internal */
export type UploadedFile$Outbound = {
    file: string;
    sha?: string | undefined;
    size?: number | undefined;
};
/** @internal */
export declare const UploadedFile$outboundSchema: z.ZodType<UploadedFile$Outbound, z.ZodTypeDef, UploadedFile>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UploadedFile$ {
    /** @deprecated use `UploadedFile$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UploadedFile, z.ZodTypeDef, unknown>;
    /** @deprecated use `UploadedFile$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UploadedFile$Outbound, z.ZodTypeDef, UploadedFile>;
    /** @deprecated use `UploadedFile$Outbound` instead. */
    type Outbound = UploadedFile$Outbound;
}
export declare function uploadedFileToJSON(uploadedFile: UploadedFile): string;
export declare function uploadedFileFromJSON(jsonString: string): SafeParseResult<UploadedFile, SDKValidationError>;
/** @internal */
export declare const Encoding$inboundSchema: z.ZodNativeEnum<typeof Encoding>;
/** @internal */
export declare const Encoding$outboundSchema: z.ZodNativeEnum<typeof Encoding>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Encoding$ {
    /** @deprecated use `Encoding$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Base64: "base64";
        readonly Utf8: "utf-8";
    }>;
    /** @deprecated use `Encoding$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Base64: "base64";
        readonly Utf8: "utf-8";
    }>;
}
/** @internal */
export declare const InlinedFile$inboundSchema: z.ZodType<InlinedFile, z.ZodTypeDef, unknown>;
/** @internal */
export type InlinedFile$Outbound = {
    data: string;
    encoding?: string | undefined;
    file: string;
};
/** @internal */
export declare const InlinedFile$outboundSchema: z.ZodType<InlinedFile$Outbound, z.ZodTypeDef, InlinedFile>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace InlinedFile$ {
    /** @deprecated use `InlinedFile$inboundSchema` instead. */
    const inboundSchema: z.ZodType<InlinedFile, z.ZodTypeDef, unknown>;
    /** @deprecated use `InlinedFile$outboundSchema` instead. */
    const outboundSchema: z.ZodType<InlinedFile$Outbound, z.ZodTypeDef, InlinedFile>;
    /** @deprecated use `InlinedFile$Outbound` instead. */
    type Outbound = InlinedFile$Outbound;
}
export declare function inlinedFileToJSON(inlinedFile: InlinedFile): string;
export declare function inlinedFileFromJSON(jsonString: string): SafeParseResult<InlinedFile, SDKValidationError>;
/** @internal */
export declare const Files$inboundSchema: z.ZodType<Files, z.ZodTypeDef, unknown>;
/** @internal */
export type Files$Outbound = InlinedFile$Outbound | UploadedFile$Outbound;
/** @internal */
export declare const Files$outboundSchema: z.ZodType<Files$Outbound, z.ZodTypeDef, Files>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Files$ {
    /** @deprecated use `Files$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Files, z.ZodTypeDef, unknown>;
    /** @deprecated use `Files$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Files$Outbound, z.ZodTypeDef, Files>;
    /** @deprecated use `Files$Outbound` instead. */
    type Outbound = Files$Outbound;
}
export declare function filesToJSON(files: Files): string;
export declare function filesFromJSON(jsonString: string): SafeParseResult<Files, SDKValidationError>;
/** @internal */
export declare const GitMetadata$inboundSchema: z.ZodType<GitMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type GitMetadata$Outbound = {
    remoteUrl?: string | undefined;
    commitAuthorName?: string | undefined;
    commitAuthorEmail?: string | undefined;
    commitMessage?: string | undefined;
    commitRef?: string | undefined;
    commitSha?: string | undefined;
    dirty?: boolean | undefined;
    ci?: boolean | undefined;
    ciType?: string | undefined;
    ciGitProviderUsername?: string | undefined;
    ciGitRepoVisibility?: string | undefined;
};
/** @internal */
export declare const GitMetadata$outboundSchema: z.ZodType<GitMetadata$Outbound, z.ZodTypeDef, GitMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GitMetadata$ {
    /** @deprecated use `GitMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GitMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `GitMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GitMetadata$Outbound, z.ZodTypeDef, GitMetadata>;
    /** @deprecated use `GitMetadata$Outbound` instead. */
    type Outbound = GitMetadata$Outbound;
}
export declare function gitMetadataToJSON(gitMetadata: GitMetadata): string;
export declare function gitMetadataFromJSON(jsonString: string): SafeParseResult<GitMetadata, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsRequestType$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceDeploymentsRequestType>;
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsRequestType$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceDeploymentsRequestType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitSourceDeploymentsRequestType$ {
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsRequestType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsRequestType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
}
/** @internal */
export declare const GitSource5$inboundSchema: z.ZodType<GitSource5, z.ZodTypeDef, unknown>;
/** @internal */
export type GitSource5$Outbound = {
    owner: string;
    ref: string;
    sha?: string | undefined;
    slug: string;
    type: string;
};
/** @internal */
export declare const GitSource5$outboundSchema: z.ZodType<GitSource5$Outbound, z.ZodTypeDef, GitSource5>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GitSource5$ {
    /** @deprecated use `GitSource5$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GitSource5, z.ZodTypeDef, unknown>;
    /** @deprecated use `GitSource5$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GitSource5$Outbound, z.ZodTypeDef, GitSource5>;
    /** @deprecated use `GitSource5$Outbound` instead. */
    type Outbound = GitSource5$Outbound;
}
export declare function gitSource5ToJSON(gitSource5: GitSource5): string;
export declare function gitSource5FromJSON(jsonString: string): SafeParseResult<GitSource5, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsType$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceDeploymentsType>;
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsType$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceDeploymentsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitSourceDeploymentsType$ {
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
}
/** @internal */
export declare const GitSource4$inboundSchema: z.ZodType<GitSource4, z.ZodTypeDef, unknown>;
/** @internal */
export type GitSource4$Outbound = {
    ref: string;
    repoUuid: string;
    sha?: string | undefined;
    type: string;
    workspaceUuid?: string | undefined;
};
/** @internal */
export declare const GitSource4$outboundSchema: z.ZodType<GitSource4$Outbound, z.ZodTypeDef, GitSource4>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GitSource4$ {
    /** @deprecated use `GitSource4$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GitSource4, z.ZodTypeDef, unknown>;
    /** @deprecated use `GitSource4$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GitSource4$Outbound, z.ZodTypeDef, GitSource4>;
    /** @deprecated use `GitSource4$Outbound` instead. */
    type Outbound = GitSource4$Outbound;
}
export declare function gitSource4ToJSON(gitSource4: GitSource4): string;
export declare function gitSource4FromJSON(jsonString: string): SafeParseResult<GitSource4, SDKValidationError>;
/** @internal */
export declare const ProjectId$inboundSchema: z.ZodType<ProjectId, z.ZodTypeDef, unknown>;
/** @internal */
export type ProjectId$Outbound = number | string;
/** @internal */
export declare const ProjectId$outboundSchema: z.ZodType<ProjectId$Outbound, z.ZodTypeDef, ProjectId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ProjectId$ {
    /** @deprecated use `ProjectId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ProjectId, z.ZodTypeDef, unknown>;
    /** @deprecated use `ProjectId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ProjectId$Outbound, z.ZodTypeDef, ProjectId>;
    /** @deprecated use `ProjectId$Outbound` instead. */
    type Outbound = ProjectId$Outbound;
}
export declare function projectIdToJSON(projectId: ProjectId): string;
export declare function projectIdFromJSON(jsonString: string): SafeParseResult<ProjectId, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentGitSourceType$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceType>;
/** @internal */
export declare const CreateDeploymentGitSourceType$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitSourceType$ {
    /** @deprecated use `CreateDeploymentGitSourceType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Gitlab: "gitlab";
    }>;
    /** @deprecated use `CreateDeploymentGitSourceType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Gitlab: "gitlab";
    }>;
}
/** @internal */
export declare const GitSource3$inboundSchema: z.ZodType<GitSource3, z.ZodTypeDef, unknown>;
/** @internal */
export type GitSource3$Outbound = {
    projectId: number | string;
    ref: string;
    sha?: string | undefined;
    type: string;
};
/** @internal */
export declare const GitSource3$outboundSchema: z.ZodType<GitSource3$Outbound, z.ZodTypeDef, GitSource3>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GitSource3$ {
    /** @deprecated use `GitSource3$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GitSource3, z.ZodTypeDef, unknown>;
    /** @deprecated use `GitSource3$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GitSource3$Outbound, z.ZodTypeDef, GitSource3>;
    /** @deprecated use `GitSource3$Outbound` instead. */
    type Outbound = GitSource3$Outbound;
}
export declare function gitSource3ToJSON(gitSource3: GitSource3): string;
export declare function gitSource3FromJSON(jsonString: string): SafeParseResult<GitSource3, SDKValidationError>;
/** @internal */
export declare const GitSourceType$inboundSchema: z.ZodNativeEnum<typeof GitSourceType>;
/** @internal */
export declare const GitSourceType$outboundSchema: z.ZodNativeEnum<typeof GitSourceType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GitSourceType$ {
    /** @deprecated use `GitSourceType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
    /** @deprecated use `GitSourceType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
}
/** @internal */
export declare const GitSource2$inboundSchema: z.ZodType<GitSource2, z.ZodTypeDef, unknown>;
/** @internal */
export type GitSource2$Outbound = {
    org: string;
    ref: string;
    repo: string;
    sha?: string | undefined;
    type: string;
};
/** @internal */
export declare const GitSource2$outboundSchema: z.ZodType<GitSource2$Outbound, z.ZodTypeDef, GitSource2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GitSource2$ {
    /** @deprecated use `GitSource2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GitSource2, z.ZodTypeDef, unknown>;
    /** @deprecated use `GitSource2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GitSource2$Outbound, z.ZodTypeDef, GitSource2>;
    /** @deprecated use `GitSource2$Outbound` instead. */
    type Outbound = GitSource2$Outbound;
}
export declare function gitSource2ToJSON(gitSource2: GitSource2): string;
export declare function gitSource2FromJSON(jsonString: string): SafeParseResult<GitSource2, SDKValidationError>;
/** @internal */
export declare const RepoId$inboundSchema: z.ZodType<RepoId, z.ZodTypeDef, unknown>;
/** @internal */
export type RepoId$Outbound = number | string;
/** @internal */
export declare const RepoId$outboundSchema: z.ZodType<RepoId$Outbound, z.ZodTypeDef, RepoId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RepoId$ {
    /** @deprecated use `RepoId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RepoId, z.ZodTypeDef, unknown>;
    /** @deprecated use `RepoId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RepoId$Outbound, z.ZodTypeDef, RepoId>;
    /** @deprecated use `RepoId$Outbound` instead. */
    type Outbound = RepoId$Outbound;
}
export declare function repoIdToJSON(repoId: RepoId): string;
export declare function repoIdFromJSON(jsonString: string): SafeParseResult<RepoId, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsRequestRequestBodyType$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceDeploymentsRequestRequestBodyType>;
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsRequestRequestBodyType$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceDeploymentsRequestRequestBodyType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitSourceDeploymentsRequestRequestBodyType$ {
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsRequestRequestBodyType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsRequestRequestBodyType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
}
/** @internal */
export declare const GitSource1$inboundSchema: z.ZodType<GitSource1, z.ZodTypeDef, unknown>;
/** @internal */
export type GitSource1$Outbound = {
    ref: string;
    repoId: number | string;
    sha?: string | undefined;
    type: string;
};
/** @internal */
export declare const GitSource1$outboundSchema: z.ZodType<GitSource1$Outbound, z.ZodTypeDef, GitSource1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GitSource1$ {
    /** @deprecated use `GitSource1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GitSource1, z.ZodTypeDef, unknown>;
    /** @deprecated use `GitSource1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GitSource1$Outbound, z.ZodTypeDef, GitSource1>;
    /** @deprecated use `GitSource1$Outbound` instead. */
    type Outbound = GitSource1$Outbound;
}
export declare function gitSource1ToJSON(gitSource1: GitSource1): string;
export declare function gitSource1FromJSON(jsonString: string): SafeParseResult<GitSource1, SDKValidationError>;
/** @internal */
export declare const GitSource$inboundSchema: z.ZodType<GitSource, z.ZodTypeDef, unknown>;
/** @internal */
export type GitSource$Outbound = GitSource2$Outbound | GitSource5$Outbound | GitSource1$Outbound | GitSource3$Outbound | GitSource4$Outbound;
/** @internal */
export declare const GitSource$outboundSchema: z.ZodType<GitSource$Outbound, z.ZodTypeDef, GitSource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GitSource$ {
    /** @deprecated use `GitSource$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GitSource, z.ZodTypeDef, unknown>;
    /** @deprecated use `GitSource$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GitSource$Outbound, z.ZodTypeDef, GitSource>;
    /** @deprecated use `GitSource$Outbound` instead. */
    type Outbound = GitSource$Outbound;
}
export declare function gitSourceToJSON(gitSource: GitSource): string;
export declare function gitSourceFromJSON(jsonString: string): SafeParseResult<GitSource, SDKValidationError>;
/** @internal */
export declare const Framework$inboundSchema: z.ZodNativeEnum<typeof Framework>;
/** @internal */
export declare const Framework$outboundSchema: z.ZodNativeEnum<typeof Framework>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Framework$ {
    /** @deprecated use `Framework$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Blitzjs: "blitzjs";
        readonly Nextjs: "nextjs";
        readonly Gatsby: "gatsby";
        readonly Remix: "remix";
        readonly ReactRouter: "react-router";
        readonly Astro: "astro";
        readonly Hexo: "hexo";
        readonly Eleventy: "eleventy";
        readonly Docusaurus2: "docusaurus-2";
        readonly Docusaurus: "docusaurus";
        readonly Preact: "preact";
        readonly Solidstart1: "solidstart-1";
        readonly Solidstart: "solidstart";
        readonly Dojo: "dojo";
        readonly Ember: "ember";
        readonly Vue: "vue";
        readonly Scully: "scully";
        readonly IonicAngular: "ionic-angular";
        readonly Angular: "angular";
        readonly Polymer: "polymer";
        readonly Svelte: "svelte";
        readonly Sveltekit: "sveltekit";
        readonly Sveltekit1: "sveltekit-1";
        readonly IonicReact: "ionic-react";
        readonly CreateReactApp: "create-react-app";
        readonly Gridsome: "gridsome";
        readonly Umijs: "umijs";
        readonly Sapper: "sapper";
        readonly Saber: "saber";
        readonly Stencil: "stencil";
        readonly Nuxtjs: "nuxtjs";
        readonly Redwoodjs: "redwoodjs";
        readonly Hugo: "hugo";
        readonly Jekyll: "jekyll";
        readonly Brunch: "brunch";
        readonly Middleman: "middleman";
        readonly Zola: "zola";
        readonly Hydrogen: "hydrogen";
        readonly Vite: "vite";
        readonly Vitepress: "vitepress";
        readonly Vuepress: "vuepress";
        readonly Parcel: "parcel";
        readonly Fastapi: "fastapi";
        readonly Fasthtml: "fasthtml";
        readonly SanityV3: "sanity-v3";
        readonly Sanity: "sanity";
        readonly Storybook: "storybook";
        readonly Nitro: "nitro";
        readonly Hono: "hono";
        readonly Express: "express";
        readonly Xmcp: "xmcp";
    }>;
    /** @deprecated use `Framework$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Blitzjs: "blitzjs";
        readonly Nextjs: "nextjs";
        readonly Gatsby: "gatsby";
        readonly Remix: "remix";
        readonly ReactRouter: "react-router";
        readonly Astro: "astro";
        readonly Hexo: "hexo";
        readonly Eleventy: "eleventy";
        readonly Docusaurus2: "docusaurus-2";
        readonly Docusaurus: "docusaurus";
        readonly Preact: "preact";
        readonly Solidstart1: "solidstart-1";
        readonly Solidstart: "solidstart";
        readonly Dojo: "dojo";
        readonly Ember: "ember";
        readonly Vue: "vue";
        readonly Scully: "scully";
        readonly IonicAngular: "ionic-angular";
        readonly Angular: "angular";
        readonly Polymer: "polymer";
        readonly Svelte: "svelte";
        readonly Sveltekit: "sveltekit";
        readonly Sveltekit1: "sveltekit-1";
        readonly IonicReact: "ionic-react";
        readonly CreateReactApp: "create-react-app";
        readonly Gridsome: "gridsome";
        readonly Umijs: "umijs";
        readonly Sapper: "sapper";
        readonly Saber: "saber";
        readonly Stencil: "stencil";
        readonly Nuxtjs: "nuxtjs";
        readonly Redwoodjs: "redwoodjs";
        readonly Hugo: "hugo";
        readonly Jekyll: "jekyll";
        readonly Brunch: "brunch";
        readonly Middleman: "middleman";
        readonly Zola: "zola";
        readonly Hydrogen: "hydrogen";
        readonly Vite: "vite";
        readonly Vitepress: "vitepress";
        readonly Vuepress: "vuepress";
        readonly Parcel: "parcel";
        readonly Fastapi: "fastapi";
        readonly Fasthtml: "fasthtml";
        readonly SanityV3: "sanity-v3";
        readonly Sanity: "sanity";
        readonly Storybook: "storybook";
        readonly Nitro: "nitro";
        readonly Hono: "hono";
        readonly Express: "express";
        readonly Xmcp: "xmcp";
    }>;
}
/** @internal */
export declare const NodeVersion$inboundSchema: z.ZodNativeEnum<typeof NodeVersion>;
/** @internal */
export declare const NodeVersion$outboundSchema: z.ZodNativeEnum<typeof NodeVersion>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NodeVersion$ {
    /** @deprecated use `NodeVersion$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly TwentyTwoDotX: "22.x";
        readonly TwentyDotX: "20.x";
        readonly EighteenDotX: "18.x";
        readonly SixteenDotX: "16.x";
        readonly FourteenDotX: "14.x";
        readonly TwelveDotX: "12.x";
        readonly TenDotX: "10.x";
        readonly EightDot10DotX: "8.10.x";
    }>;
    /** @deprecated use `NodeVersion$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly TwentyTwoDotX: "22.x";
        readonly TwentyDotX: "20.x";
        readonly EighteenDotX: "18.x";
        readonly SixteenDotX: "16.x";
        readonly FourteenDotX: "14.x";
        readonly TwelveDotX: "12.x";
        readonly TenDotX: "10.x";
        readonly EightDot10DotX: "8.10.x";
    }>;
}
/** @internal */
export declare const ProjectSettings$inboundSchema: z.ZodType<ProjectSettings, z.ZodTypeDef, unknown>;
/** @internal */
export type ProjectSettings$Outbound = {
    buildCommand?: string | null | undefined;
    commandForIgnoringBuildStep?: string | null | undefined;
    devCommand?: string | null | undefined;
    framework?: string | null | undefined;
    installCommand?: string | null | undefined;
    nodeVersion?: string | undefined;
    outputDirectory?: string | null | undefined;
    rootDirectory?: string | null | undefined;
    serverlessFunctionRegion?: string | null | undefined;
    skipGitConnectDuringLink?: boolean | undefined;
    sourceFilesOutsideRootDirectory?: boolean | undefined;
};
/** @internal */
export declare const ProjectSettings$outboundSchema: z.ZodType<ProjectSettings$Outbound, z.ZodTypeDef, ProjectSettings>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ProjectSettings$ {
    /** @deprecated use `ProjectSettings$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ProjectSettings, z.ZodTypeDef, unknown>;
    /** @deprecated use `ProjectSettings$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ProjectSettings$Outbound, z.ZodTypeDef, ProjectSettings>;
    /** @deprecated use `ProjectSettings$Outbound` instead. */
    type Outbound = ProjectSettings$Outbound;
}
export declare function projectSettingsToJSON(projectSettings: ProjectSettings): string;
export declare function projectSettingsFromJSON(jsonString: string): SafeParseResult<ProjectSettings, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentRequestBody$inboundSchema: z.ZodType<CreateDeploymentRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentRequestBody$Outbound = {
    customEnvironmentSlugOrId?: string | undefined;
    deploymentId?: string | undefined;
    files?: Array<InlinedFile$Outbound | UploadedFile$Outbound> | undefined;
    gitMetadata?: GitMetadata$Outbound | undefined;
    gitSource?: GitSource2$Outbound | GitSource5$Outbound | GitSource1$Outbound | GitSource3$Outbound | GitSource4$Outbound | undefined;
    meta?: {
        [k: string]: string;
    } | undefined;
    monorepoManager?: string | null | undefined;
    name: string;
    project?: string | undefined;
    projectSettings?: ProjectSettings$Outbound | undefined;
    target?: string | undefined;
    withLatestCommit?: boolean | undefined;
};
/** @internal */
export declare const CreateDeploymentRequestBody$outboundSchema: z.ZodType<CreateDeploymentRequestBody$Outbound, z.ZodTypeDef, CreateDeploymentRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentRequestBody$ {
    /** @deprecated use `CreateDeploymentRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentRequestBody$Outbound, z.ZodTypeDef, CreateDeploymentRequestBody>;
    /** @deprecated use `CreateDeploymentRequestBody$Outbound` instead. */
    type Outbound = CreateDeploymentRequestBody$Outbound;
}
export declare function createDeploymentRequestBodyToJSON(createDeploymentRequestBody: CreateDeploymentRequestBody): string;
export declare function createDeploymentRequestBodyFromJSON(jsonString: string): SafeParseResult<CreateDeploymentRequestBody, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentRequest$inboundSchema: z.ZodType<CreateDeploymentRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentRequest$Outbound = {
    forceNew?: string | undefined;
    skipAutoDetectionConfirmation?: string | undefined;
    teamId?: string | undefined;
    slug?: string | undefined;
    RequestBody: CreateDeploymentRequestBody$Outbound;
};
/** @internal */
export declare const CreateDeploymentRequest$outboundSchema: z.ZodType<CreateDeploymentRequest$Outbound, z.ZodTypeDef, CreateDeploymentRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentRequest$ {
    /** @deprecated use `CreateDeploymentRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentRequest$Outbound, z.ZodTypeDef, CreateDeploymentRequest>;
    /** @deprecated use `CreateDeploymentRequest$Outbound` instead. */
    type Outbound = CreateDeploymentRequest$Outbound;
}
export declare function createDeploymentRequestToJSON(createDeploymentRequest: CreateDeploymentRequest): string;
export declare function createDeploymentRequestFromJSON(jsonString: string): SafeParseResult<CreateDeploymentRequest, SDKValidationError>;
/** @internal */
export declare const AliasAssignedAt$inboundSchema: z.ZodType<AliasAssignedAt, z.ZodTypeDef, unknown>;
/** @internal */
export type AliasAssignedAt$Outbound = number | boolean;
/** @internal */
export declare const AliasAssignedAt$outboundSchema: z.ZodType<AliasAssignedAt$Outbound, z.ZodTypeDef, AliasAssignedAt>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AliasAssignedAt$ {
    /** @deprecated use `AliasAssignedAt$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AliasAssignedAt, z.ZodTypeDef, unknown>;
    /** @deprecated use `AliasAssignedAt$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AliasAssignedAt$Outbound, z.ZodTypeDef, AliasAssignedAt>;
    /** @deprecated use `AliasAssignedAt$Outbound` instead. */
    type Outbound = AliasAssignedAt$Outbound;
}
export declare function aliasAssignedAtToJSON(aliasAssignedAt: AliasAssignedAt): string;
export declare function aliasAssignedAtFromJSON(jsonString: string): SafeParseResult<AliasAssignedAt, SDKValidationError>;
/** @internal */
export declare const Build$inboundSchema: z.ZodType<Build, z.ZodTypeDef, unknown>;
/** @internal */
export type Build$Outbound = {
    env: Array<string>;
};
/** @internal */
export declare const Build$outboundSchema: z.ZodType<Build$Outbound, z.ZodTypeDef, Build>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Build$ {
    /** @deprecated use `Build$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Build, z.ZodTypeDef, unknown>;
    /** @deprecated use `Build$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Build$Outbound, z.ZodTypeDef, Build>;
    /** @deprecated use `Build$Outbound` instead. */
    type Outbound = Build$Outbound;
}
export declare function buildToJSON(build: Build): string;
export declare function buildFromJSON(jsonString: string): SafeParseResult<Build, SDKValidationError>;
/** @internal */
export declare const Builds$inboundSchema: z.ZodType<Builds, z.ZodTypeDef, unknown>;
/** @internal */
export type Builds$Outbound = {
    use: string;
    src?: string | undefined;
    config?: {
        [k: string]: any;
    } | undefined;
};
/** @internal */
export declare const Builds$outboundSchema: z.ZodType<Builds$Outbound, z.ZodTypeDef, Builds>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Builds$ {
    /** @deprecated use `Builds$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Builds, z.ZodTypeDef, unknown>;
    /** @deprecated use `Builds$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Builds$Outbound, z.ZodTypeDef, Builds>;
    /** @deprecated use `Builds$Outbound` instead. */
    type Outbound = Builds$Outbound;
}
export declare function buildsToJSON(builds: Builds): string;
export declare function buildsFromJSON(jsonString: string): SafeParseResult<Builds, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentFramework$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentFramework>;
/** @internal */
export declare const CreateDeploymentFramework$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentFramework>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentFramework$ {
    /** @deprecated use `CreateDeploymentFramework$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Blitzjs: "blitzjs";
        readonly Nextjs: "nextjs";
        readonly Gatsby: "gatsby";
        readonly Remix: "remix";
        readonly ReactRouter: "react-router";
        readonly Astro: "astro";
        readonly Hexo: "hexo";
        readonly Eleventy: "eleventy";
        readonly Docusaurus2: "docusaurus-2";
        readonly Docusaurus: "docusaurus";
        readonly Preact: "preact";
        readonly Solidstart1: "solidstart-1";
        readonly Solidstart: "solidstart";
        readonly Dojo: "dojo";
        readonly Ember: "ember";
        readonly Vue: "vue";
        readonly Scully: "scully";
        readonly IonicAngular: "ionic-angular";
        readonly Angular: "angular";
        readonly Polymer: "polymer";
        readonly Svelte: "svelte";
        readonly Sveltekit: "sveltekit";
        readonly Sveltekit1: "sveltekit-1";
        readonly IonicReact: "ionic-react";
        readonly CreateReactApp: "create-react-app";
        readonly Gridsome: "gridsome";
        readonly Umijs: "umijs";
        readonly Sapper: "sapper";
        readonly Saber: "saber";
        readonly Stencil: "stencil";
        readonly Nuxtjs: "nuxtjs";
        readonly Redwoodjs: "redwoodjs";
        readonly Hugo: "hugo";
        readonly Jekyll: "jekyll";
        readonly Brunch: "brunch";
        readonly Middleman: "middleman";
        readonly Zola: "zola";
        readonly Hydrogen: "hydrogen";
        readonly Vite: "vite";
        readonly Vitepress: "vitepress";
        readonly Vuepress: "vuepress";
        readonly Parcel: "parcel";
        readonly Fastapi: "fastapi";
        readonly Fasthtml: "fasthtml";
        readonly SanityV3: "sanity-v3";
        readonly Sanity: "sanity";
        readonly Storybook: "storybook";
        readonly Nitro: "nitro";
        readonly Hono: "hono";
        readonly Express: "express";
        readonly Xmcp: "xmcp";
    }>;
    /** @deprecated use `CreateDeploymentFramework$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Blitzjs: "blitzjs";
        readonly Nextjs: "nextjs";
        readonly Gatsby: "gatsby";
        readonly Remix: "remix";
        readonly ReactRouter: "react-router";
        readonly Astro: "astro";
        readonly Hexo: "hexo";
        readonly Eleventy: "eleventy";
        readonly Docusaurus2: "docusaurus-2";
        readonly Docusaurus: "docusaurus";
        readonly Preact: "preact";
        readonly Solidstart1: "solidstart-1";
        readonly Solidstart: "solidstart";
        readonly Dojo: "dojo";
        readonly Ember: "ember";
        readonly Vue: "vue";
        readonly Scully: "scully";
        readonly IonicAngular: "ionic-angular";
        readonly Angular: "angular";
        readonly Polymer: "polymer";
        readonly Svelte: "svelte";
        readonly Sveltekit: "sveltekit";
        readonly Sveltekit1: "sveltekit-1";
        readonly IonicReact: "ionic-react";
        readonly CreateReactApp: "create-react-app";
        readonly Gridsome: "gridsome";
        readonly Umijs: "umijs";
        readonly Sapper: "sapper";
        readonly Saber: "saber";
        readonly Stencil: "stencil";
        readonly Nuxtjs: "nuxtjs";
        readonly Redwoodjs: "redwoodjs";
        readonly Hugo: "hugo";
        readonly Jekyll: "jekyll";
        readonly Brunch: "brunch";
        readonly Middleman: "middleman";
        readonly Zola: "zola";
        readonly Hydrogen: "hydrogen";
        readonly Vite: "vite";
        readonly Vitepress: "vitepress";
        readonly Vuepress: "vuepress";
        readonly Parcel: "parcel";
        readonly Fastapi: "fastapi";
        readonly Fasthtml: "fasthtml";
        readonly SanityV3: "sanity-v3";
        readonly Sanity: "sanity";
        readonly Storybook: "storybook";
        readonly Nitro: "nitro";
        readonly Hono: "hono";
        readonly Express: "express";
        readonly Xmcp: "xmcp";
    }>;
}
/** @internal */
export declare const CreateDeploymentSpeedInsights$inboundSchema: z.ZodType<CreateDeploymentSpeedInsights, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentSpeedInsights$Outbound = {
    id: string;
    enabledAt?: number | undefined;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    hasData?: boolean | undefined;
    paidAt?: number | undefined;
};
/** @internal */
export declare const CreateDeploymentSpeedInsights$outboundSchema: z.ZodType<CreateDeploymentSpeedInsights$Outbound, z.ZodTypeDef, CreateDeploymentSpeedInsights>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentSpeedInsights$ {
    /** @deprecated use `CreateDeploymentSpeedInsights$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentSpeedInsights, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentSpeedInsights$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentSpeedInsights$Outbound, z.ZodTypeDef, CreateDeploymentSpeedInsights>;
    /** @deprecated use `CreateDeploymentSpeedInsights$Outbound` instead. */
    type Outbound = CreateDeploymentSpeedInsights$Outbound;
}
export declare function createDeploymentSpeedInsightsToJSON(createDeploymentSpeedInsights: CreateDeploymentSpeedInsights): string;
export declare function createDeploymentSpeedInsightsFromJSON(jsonString: string): SafeParseResult<CreateDeploymentSpeedInsights, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentWebAnalytics$inboundSchema: z.ZodType<CreateDeploymentWebAnalytics, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentWebAnalytics$Outbound = {
    id: string;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    enabledAt?: number | undefined;
    hasData?: boolean | undefined;
};
/** @internal */
export declare const CreateDeploymentWebAnalytics$outboundSchema: z.ZodType<CreateDeploymentWebAnalytics$Outbound, z.ZodTypeDef, CreateDeploymentWebAnalytics>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentWebAnalytics$ {
    /** @deprecated use `CreateDeploymentWebAnalytics$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentWebAnalytics, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentWebAnalytics$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentWebAnalytics$Outbound, z.ZodTypeDef, CreateDeploymentWebAnalytics>;
    /** @deprecated use `CreateDeploymentWebAnalytics$Outbound` instead. */
    type Outbound = CreateDeploymentWebAnalytics$Outbound;
}
export declare function createDeploymentWebAnalyticsToJSON(createDeploymentWebAnalytics: CreateDeploymentWebAnalytics): string;
export declare function createDeploymentWebAnalyticsFromJSON(jsonString: string): SafeParseResult<CreateDeploymentWebAnalytics, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentProjectSettings$inboundSchema: z.ZodType<CreateDeploymentProjectSettings, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentProjectSettings$Outbound = {
    buildCommand?: string | null | undefined;
    commandForIgnoringBuildStep?: string | null | undefined;
    devCommand?: string | null | undefined;
    framework?: string | null | undefined;
    installCommand?: string | null | undefined;
    outputDirectory?: string | null | undefined;
    speedInsights?: CreateDeploymentSpeedInsights$Outbound | undefined;
    webAnalytics?: CreateDeploymentWebAnalytics$Outbound | undefined;
};
/** @internal */
export declare const CreateDeploymentProjectSettings$outboundSchema: z.ZodType<CreateDeploymentProjectSettings$Outbound, z.ZodTypeDef, CreateDeploymentProjectSettings>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentProjectSettings$ {
    /** @deprecated use `CreateDeploymentProjectSettings$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentProjectSettings, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentProjectSettings$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentProjectSettings$Outbound, z.ZodTypeDef, CreateDeploymentProjectSettings>;
    /** @deprecated use `CreateDeploymentProjectSettings$Outbound` instead. */
    type Outbound = CreateDeploymentProjectSettings$Outbound;
}
export declare function createDeploymentProjectSettingsToJSON(createDeploymentProjectSettings: CreateDeploymentProjectSettings): string;
export declare function createDeploymentProjectSettingsFromJSON(jsonString: string): SafeParseResult<CreateDeploymentProjectSettings, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentDeploymentsStatus$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentDeploymentsStatus>;
/** @internal */
export declare const CreateDeploymentDeploymentsStatus$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentDeploymentsStatus>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentDeploymentsStatus$ {
    /** @deprecated use `CreateDeploymentDeploymentsStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Skipped: "skipped";
        readonly Pending: "pending";
        readonly Ready: "ready";
        readonly Error: "error";
        readonly Timeout: "timeout";
    }>;
    /** @deprecated use `CreateDeploymentDeploymentsStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Skipped: "skipped";
        readonly Pending: "pending";
        readonly Ready: "ready";
        readonly Error: "error";
        readonly Timeout: "timeout";
    }>;
}
/** @internal */
export declare const Integrations$inboundSchema: z.ZodType<Integrations, z.ZodTypeDef, unknown>;
/** @internal */
export type Integrations$Outbound = {
    status: string;
    startedAt: number;
    completedAt?: number | undefined;
    skippedAt?: number | undefined;
    skippedBy?: string | undefined;
};
/** @internal */
export declare const Integrations$outboundSchema: z.ZodType<Integrations$Outbound, z.ZodTypeDef, Integrations>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Integrations$ {
    /** @deprecated use `Integrations$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Integrations, z.ZodTypeDef, unknown>;
    /** @deprecated use `Integrations$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Integrations$Outbound, z.ZodTypeDef, Integrations>;
    /** @deprecated use `Integrations$Outbound` instead. */
    type Outbound = Integrations$Outbound;
}
export declare function integrationsToJSON(integrations: Integrations): string;
export declare function integrationsFromJSON(jsonString: string): SafeParseResult<Integrations, SDKValidationError>;
/** @internal */
export declare const Protocol$inboundSchema: z.ZodNativeEnum<typeof Protocol>;
/** @internal */
export declare const Protocol$outboundSchema: z.ZodNativeEnum<typeof Protocol>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Protocol$ {
    /** @deprecated use `Protocol$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Http: "http";
        readonly Https: "https";
    }>;
    /** @deprecated use `Protocol$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Http: "http";
        readonly Https: "https";
    }>;
}
/** @internal */
export declare const RemotePatterns$inboundSchema: z.ZodType<RemotePatterns, z.ZodTypeDef, unknown>;
/** @internal */
export type RemotePatterns$Outbound = {
    protocol?: string | undefined;
    hostname: string;
    port?: string | undefined;
    pathname?: string | undefined;
    search?: string | undefined;
};
/** @internal */
export declare const RemotePatterns$outboundSchema: z.ZodType<RemotePatterns$Outbound, z.ZodTypeDef, RemotePatterns>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RemotePatterns$ {
    /** @deprecated use `RemotePatterns$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RemotePatterns, z.ZodTypeDef, unknown>;
    /** @deprecated use `RemotePatterns$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RemotePatterns$Outbound, z.ZodTypeDef, RemotePatterns>;
    /** @deprecated use `RemotePatterns$Outbound` instead. */
    type Outbound = RemotePatterns$Outbound;
}
export declare function remotePatternsToJSON(remotePatterns: RemotePatterns): string;
export declare function remotePatternsFromJSON(jsonString: string): SafeParseResult<RemotePatterns, SDKValidationError>;
/** @internal */
export declare const LocalPatterns$inboundSchema: z.ZodType<LocalPatterns, z.ZodTypeDef, unknown>;
/** @internal */
export type LocalPatterns$Outbound = {
    pathname?: string | undefined;
    search?: string | undefined;
};
/** @internal */
export declare const LocalPatterns$outboundSchema: z.ZodType<LocalPatterns$Outbound, z.ZodTypeDef, LocalPatterns>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace LocalPatterns$ {
    /** @deprecated use `LocalPatterns$inboundSchema` instead. */
    const inboundSchema: z.ZodType<LocalPatterns, z.ZodTypeDef, unknown>;
    /** @deprecated use `LocalPatterns$outboundSchema` instead. */
    const outboundSchema: z.ZodType<LocalPatterns$Outbound, z.ZodTypeDef, LocalPatterns>;
    /** @deprecated use `LocalPatterns$Outbound` instead. */
    type Outbound = LocalPatterns$Outbound;
}
export declare function localPatternsToJSON(localPatterns: LocalPatterns): string;
export declare function localPatternsFromJSON(jsonString: string): SafeParseResult<LocalPatterns, SDKValidationError>;
/** @internal */
export declare const Formats$inboundSchema: z.ZodNativeEnum<typeof Formats>;
/** @internal */
export declare const Formats$outboundSchema: z.ZodNativeEnum<typeof Formats>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Formats$ {
    /** @deprecated use `Formats$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly ImageAvif: "image/avif";
        readonly ImageWebp: "image/webp";
    }>;
    /** @deprecated use `Formats$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly ImageAvif: "image/avif";
        readonly ImageWebp: "image/webp";
    }>;
}
/** @internal */
export declare const ContentDispositionType$inboundSchema: z.ZodNativeEnum<typeof ContentDispositionType>;
/** @internal */
export declare const ContentDispositionType$outboundSchema: z.ZodNativeEnum<typeof ContentDispositionType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ContentDispositionType$ {
    /** @deprecated use `ContentDispositionType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Inline: "inline";
        readonly Attachment: "attachment";
    }>;
    /** @deprecated use `ContentDispositionType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Inline: "inline";
        readonly Attachment: "attachment";
    }>;
}
/** @internal */
export declare const Images$inboundSchema: z.ZodType<Images, z.ZodTypeDef, unknown>;
/** @internal */
export type Images$Outbound = {
    sizes?: Array<number> | undefined;
    qualities?: Array<number> | undefined;
    domains?: Array<string> | undefined;
    remotePatterns?: Array<RemotePatterns$Outbound> | undefined;
    localPatterns?: Array<LocalPatterns$Outbound> | undefined;
    minimumCacheTTL?: number | undefined;
    formats?: Array<string> | undefined;
    dangerouslyAllowSVG?: boolean | undefined;
    contentSecurityPolicy?: string | undefined;
    contentDispositionType?: string | undefined;
};
/** @internal */
export declare const Images$outboundSchema: z.ZodType<Images$Outbound, z.ZodTypeDef, Images>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Images$ {
    /** @deprecated use `Images$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Images, z.ZodTypeDef, unknown>;
    /** @deprecated use `Images$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Images$Outbound, z.ZodTypeDef, Images>;
    /** @deprecated use `Images$Outbound` instead. */
    type Outbound = Images$Outbound;
}
export declare function imagesToJSON(images: Images): string;
export declare function imagesFromJSON(jsonString: string): SafeParseResult<Images, SDKValidationError>;
/** @internal */
export declare const Creator$inboundSchema: z.ZodType<Creator, z.ZodTypeDef, unknown>;
/** @internal */
export type Creator$Outbound = {
    uid: string;
    username?: string | undefined;
    avatar?: string | undefined;
};
/** @internal */
export declare const Creator$outboundSchema: z.ZodType<Creator$Outbound, z.ZodTypeDef, Creator>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Creator$ {
    /** @deprecated use `Creator$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Creator, z.ZodTypeDef, unknown>;
    /** @deprecated use `Creator$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Creator$Outbound, z.ZodTypeDef, Creator>;
    /** @deprecated use `Creator$Outbound` instead. */
    type Outbound = Creator$Outbound;
}
export declare function creatorToJSON(creator: Creator): string;
export declare function creatorFromJSON(jsonString: string): SafeParseResult<Creator, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentReadyState$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentReadyState>;
/** @internal */
export declare const CreateDeploymentReadyState$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentReadyState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentReadyState$ {
    /** @deprecated use `CreateDeploymentReadyState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Ready: "READY";
    }>;
    /** @deprecated use `CreateDeploymentReadyState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Building: "BUILDING";
        readonly Error: "ERROR";
        readonly Initializing: "INITIALIZING";
        readonly Ready: "READY";
    }>;
}
/** @internal */
export declare const CreateDeploymentOutput$inboundSchema: z.ZodType<CreateDeploymentOutput, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentOutput$Outbound = {
    path: string;
    functionName: string;
};
/** @internal */
export declare const CreateDeploymentOutput$outboundSchema: z.ZodType<CreateDeploymentOutput$Outbound, z.ZodTypeDef, CreateDeploymentOutput>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentOutput$ {
    /** @deprecated use `CreateDeploymentOutput$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentOutput, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentOutput$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentOutput$Outbound, z.ZodTypeDef, CreateDeploymentOutput>;
    /** @deprecated use `CreateDeploymentOutput$Outbound` instead. */
    type Outbound = CreateDeploymentOutput$Outbound;
}
export declare function createDeploymentOutputToJSON(createDeploymentOutput: CreateDeploymentOutput): string;
export declare function createDeploymentOutputFromJSON(jsonString: string): SafeParseResult<CreateDeploymentOutput, SDKValidationError>;
/** @internal */
export declare const Lambdas$inboundSchema: z.ZodType<Lambdas, z.ZodTypeDef, unknown>;
/** @internal */
export type Lambdas$Outbound = {
    id: string;
    createdAt?: number | undefined;
    readyState?: string | undefined;
    entrypoint?: string | null | undefined;
    readyStateAt?: number | undefined;
    output: Array<CreateDeploymentOutput$Outbound>;
};
/** @internal */
export declare const Lambdas$outboundSchema: z.ZodType<Lambdas$Outbound, z.ZodTypeDef, Lambdas>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Lambdas$ {
    /** @deprecated use `Lambdas$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Lambdas, z.ZodTypeDef, unknown>;
    /** @deprecated use `Lambdas$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Lambdas$Outbound, z.ZodTypeDef, Lambdas>;
    /** @deprecated use `Lambdas$Outbound` instead. */
    type Outbound = Lambdas$Outbound;
}
export declare function lambdasToJSON(lambdas: Lambdas): string;
export declare function lambdasFromJSON(jsonString: string): SafeParseResult<Lambdas, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentStatus$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentStatus>;
/** @internal */
export declare const CreateDeploymentStatus$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentStatus>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentStatus$ {
    /** @deprecated use `CreateDeploymentStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Canceled: "CANCELED";
        readonly Error: "ERROR";
        readonly Queued: "QUEUED";
        readonly Building: "BUILDING";
        readonly Initializing: "INITIALIZING";
        readonly Ready: "READY";
    }>;
    /** @deprecated use `CreateDeploymentStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Canceled: "CANCELED";
        readonly Error: "ERROR";
        readonly Queued: "QUEUED";
        readonly Building: "BUILDING";
        readonly Initializing: "INITIALIZING";
        readonly Ready: "READY";
    }>;
}
/** @internal */
export declare const CreateDeploymentTeam$inboundSchema: z.ZodType<CreateDeploymentTeam, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentTeam$Outbound = {
    id: string;
    name: string;
    slug: string;
    avatar?: string | undefined;
};
/** @internal */
export declare const CreateDeploymentTeam$outboundSchema: z.ZodType<CreateDeploymentTeam$Outbound, z.ZodTypeDef, CreateDeploymentTeam>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentTeam$ {
    /** @deprecated use `CreateDeploymentTeam$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentTeam, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentTeam$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentTeam$Outbound, z.ZodTypeDef, CreateDeploymentTeam>;
    /** @deprecated use `CreateDeploymentTeam$Outbound` instead. */
    type Outbound = CreateDeploymentTeam$Outbound;
}
export declare function createDeploymentTeamToJSON(createDeploymentTeam: CreateDeploymentTeam): string;
export declare function createDeploymentTeamFromJSON(jsonString: string): SafeParseResult<CreateDeploymentTeam, SDKValidationError>;
/** @internal */
export declare const CustomEnvironment2$inboundSchema: z.ZodType<CustomEnvironment2, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomEnvironment2$Outbound = {
    id: string;
};
/** @internal */
export declare const CustomEnvironment2$outboundSchema: z.ZodType<CustomEnvironment2$Outbound, z.ZodTypeDef, CustomEnvironment2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomEnvironment2$ {
    /** @deprecated use `CustomEnvironment2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomEnvironment2, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomEnvironment2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomEnvironment2$Outbound, z.ZodTypeDef, CustomEnvironment2>;
    /** @deprecated use `CustomEnvironment2$Outbound` instead. */
    type Outbound = CustomEnvironment2$Outbound;
}
export declare function customEnvironment2ToJSON(customEnvironment2: CustomEnvironment2): string;
export declare function customEnvironment2FromJSON(jsonString: string): SafeParseResult<CustomEnvironment2, SDKValidationError>;
/** @internal */
export declare const CustomEnvironmentType$inboundSchema: z.ZodNativeEnum<typeof CustomEnvironmentType>;
/** @internal */
export declare const CustomEnvironmentType$outboundSchema: z.ZodNativeEnum<typeof CustomEnvironmentType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomEnvironmentType$ {
    /** @deprecated use `CustomEnvironmentType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Production: "production";
        readonly Preview: "preview";
        readonly Development: "development";
    }>;
    /** @deprecated use `CustomEnvironmentType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Production: "production";
        readonly Preview: "preview";
        readonly Development: "development";
    }>;
}
/** @internal */
export declare const CreateDeploymentCustomEnvironmentType$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentCustomEnvironmentType>;
/** @internal */
export declare const CreateDeploymentCustomEnvironmentType$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentCustomEnvironmentType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentCustomEnvironmentType$ {
    /** @deprecated use `CreateDeploymentCustomEnvironmentType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly EndsWith: "endsWith";
        readonly StartsWith: "startsWith";
        readonly Equals: "equals";
    }>;
    /** @deprecated use `CreateDeploymentCustomEnvironmentType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly EndsWith: "endsWith";
        readonly StartsWith: "startsWith";
        readonly Equals: "equals";
    }>;
}
/** @internal */
export declare const CustomEnvironmentBranchMatcher$inboundSchema: z.ZodType<CustomEnvironmentBranchMatcher, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomEnvironmentBranchMatcher$Outbound = {
    type: string;
    pattern: string;
};
/** @internal */
export declare const CustomEnvironmentBranchMatcher$outboundSchema: z.ZodType<CustomEnvironmentBranchMatcher$Outbound, z.ZodTypeDef, CustomEnvironmentBranchMatcher>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomEnvironmentBranchMatcher$ {
    /** @deprecated use `CustomEnvironmentBranchMatcher$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomEnvironmentBranchMatcher, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomEnvironmentBranchMatcher$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomEnvironmentBranchMatcher$Outbound, z.ZodTypeDef, CustomEnvironmentBranchMatcher>;
    /** @deprecated use `CustomEnvironmentBranchMatcher$Outbound` instead. */
    type Outbound = CustomEnvironmentBranchMatcher$Outbound;
}
export declare function customEnvironmentBranchMatcherToJSON(customEnvironmentBranchMatcher: CustomEnvironmentBranchMatcher): string;
export declare function customEnvironmentBranchMatcherFromJSON(jsonString: string): SafeParseResult<CustomEnvironmentBranchMatcher, SDKValidationError>;
/** @internal */
export declare const CustomEnvironmentVerification$inboundSchema: z.ZodType<CustomEnvironmentVerification, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomEnvironmentVerification$Outbound = {
    type: string;
    domain: string;
    value: string;
    reason: string;
};
/** @internal */
export declare const CustomEnvironmentVerification$outboundSchema: z.ZodType<CustomEnvironmentVerification$Outbound, z.ZodTypeDef, CustomEnvironmentVerification>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomEnvironmentVerification$ {
    /** @deprecated use `CustomEnvironmentVerification$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomEnvironmentVerification, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomEnvironmentVerification$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomEnvironmentVerification$Outbound, z.ZodTypeDef, CustomEnvironmentVerification>;
    /** @deprecated use `CustomEnvironmentVerification$Outbound` instead. */
    type Outbound = CustomEnvironmentVerification$Outbound;
}
export declare function customEnvironmentVerificationToJSON(customEnvironmentVerification: CustomEnvironmentVerification): string;
export declare function customEnvironmentVerificationFromJSON(jsonString: string): SafeParseResult<CustomEnvironmentVerification, SDKValidationError>;
/** @internal */
export declare const CustomEnvironmentDomains$inboundSchema: z.ZodType<CustomEnvironmentDomains, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomEnvironmentDomains$Outbound = {
    name: string;
    apexName: string;
    projectId: string;
    redirect?: string | null | undefined;
    redirectStatusCode?: number | null | undefined;
    gitBranch?: string | null | undefined;
    customEnvironmentId?: string | null | undefined;
    updatedAt?: number | undefined;
    createdAt?: number | undefined;
    verified: boolean;
    verification?: Array<CustomEnvironmentVerification$Outbound> | undefined;
};
/** @internal */
export declare const CustomEnvironmentDomains$outboundSchema: z.ZodType<CustomEnvironmentDomains$Outbound, z.ZodTypeDef, CustomEnvironmentDomains>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomEnvironmentDomains$ {
    /** @deprecated use `CustomEnvironmentDomains$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomEnvironmentDomains, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomEnvironmentDomains$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomEnvironmentDomains$Outbound, z.ZodTypeDef, CustomEnvironmentDomains>;
    /** @deprecated use `CustomEnvironmentDomains$Outbound` instead. */
    type Outbound = CustomEnvironmentDomains$Outbound;
}
export declare function customEnvironmentDomainsToJSON(customEnvironmentDomains: CustomEnvironmentDomains): string;
export declare function customEnvironmentDomainsFromJSON(jsonString: string): SafeParseResult<CustomEnvironmentDomains, SDKValidationError>;
/** @internal */
export declare const CustomEnvironment1$inboundSchema: z.ZodType<CustomEnvironment1, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomEnvironment1$Outbound = {
    id: string;
    slug: string;
    type: string;
    description?: string | undefined;
    branchMatcher?: CustomEnvironmentBranchMatcher$Outbound | undefined;
    domains?: Array<CustomEnvironmentDomains$Outbound> | undefined;
    currentDeploymentAliases?: Array<string> | undefined;
    createdAt: number;
    updatedAt: number;
};
/** @internal */
export declare const CustomEnvironment1$outboundSchema: z.ZodType<CustomEnvironment1$Outbound, z.ZodTypeDef, CustomEnvironment1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomEnvironment1$ {
    /** @deprecated use `CustomEnvironment1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomEnvironment1, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomEnvironment1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomEnvironment1$Outbound, z.ZodTypeDef, CustomEnvironment1>;
    /** @deprecated use `CustomEnvironment1$Outbound` instead. */
    type Outbound = CustomEnvironment1$Outbound;
}
export declare function customEnvironment1ToJSON(customEnvironment1: CustomEnvironment1): string;
export declare function customEnvironment1FromJSON(jsonString: string): SafeParseResult<CustomEnvironment1, SDKValidationError>;
/** @internal */
export declare const CustomEnvironment$inboundSchema: z.ZodType<CustomEnvironment, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomEnvironment$Outbound = CustomEnvironment1$Outbound | CustomEnvironment2$Outbound;
/** @internal */
export declare const CustomEnvironment$outboundSchema: z.ZodType<CustomEnvironment$Outbound, z.ZodTypeDef, CustomEnvironment>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomEnvironment$ {
    /** @deprecated use `CustomEnvironment$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomEnvironment, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomEnvironment$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomEnvironment$Outbound, z.ZodTypeDef, CustomEnvironment>;
    /** @deprecated use `CustomEnvironment$Outbound` instead. */
    type Outbound = CustomEnvironment$Outbound;
}
export declare function customEnvironmentToJSON(customEnvironment: CustomEnvironment): string;
export declare function customEnvironmentFromJSON(jsonString: string): SafeParseResult<CustomEnvironment, SDKValidationError>;
/** @internal */
export declare const OomReport$inboundSchema: z.ZodNativeEnum<typeof OomReport>;
/** @internal */
export declare const OomReport$outboundSchema: z.ZodNativeEnum<typeof OomReport>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OomReport$ {
    /** @deprecated use `OomReport$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly OutOfMemory: "out-of-memory";
    }>;
    /** @deprecated use `OomReport$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly OutOfMemory: "out-of-memory";
    }>;
}
/** @internal */
export declare const CreateDeploymentType$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentType>;
/** @internal */
export declare const CreateDeploymentType$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentType$ {
    /** @deprecated use `CreateDeploymentType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Lambdas: "LAMBDAS";
    }>;
    /** @deprecated use `CreateDeploymentType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Lambdas: "LAMBDAS";
    }>;
}
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody15Type$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody15Type>;
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody15Type$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody15Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody15Type$ {
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody15Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody15Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
}
/** @internal */
export declare const CreateDeploymentGitSource15$inboundSchema: z.ZodType<CreateDeploymentGitSource15, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentGitSource15$Outbound = {
    type: string;
    ref: string;
    sha: string;
    owner?: string | undefined;
    slug?: string | undefined;
    workspaceUuid: string;
    repoUuid: string;
};
/** @internal */
export declare const CreateDeploymentGitSource15$outboundSchema: z.ZodType<CreateDeploymentGitSource15$Outbound, z.ZodTypeDef, CreateDeploymentGitSource15>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitSource15$ {
    /** @deprecated use `CreateDeploymentGitSource15$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentGitSource15, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentGitSource15$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentGitSource15$Outbound, z.ZodTypeDef, CreateDeploymentGitSource15>;
    /** @deprecated use `CreateDeploymentGitSource15$Outbound` instead. */
    type Outbound = CreateDeploymentGitSource15$Outbound;
}
export declare function createDeploymentGitSource15ToJSON(createDeploymentGitSource15: CreateDeploymentGitSource15): string;
export declare function createDeploymentGitSource15FromJSON(jsonString: string): SafeParseResult<CreateDeploymentGitSource15, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody14Type$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody14Type>;
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody14Type$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody14Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody14Type$ {
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody14Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Gitlab: "gitlab";
    }>;
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody14Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Gitlab: "gitlab";
    }>;
}
/** @internal */
export declare const CreateDeploymentGitSource14$inboundSchema: z.ZodType<CreateDeploymentGitSource14, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentGitSource14$Outbound = {
    type: string;
    ref: string;
    sha: string;
    projectId: number;
};
/** @internal */
export declare const CreateDeploymentGitSource14$outboundSchema: z.ZodType<CreateDeploymentGitSource14$Outbound, z.ZodTypeDef, CreateDeploymentGitSource14>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitSource14$ {
    /** @deprecated use `CreateDeploymentGitSource14$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentGitSource14, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentGitSource14$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentGitSource14$Outbound, z.ZodTypeDef, CreateDeploymentGitSource14>;
    /** @deprecated use `CreateDeploymentGitSource14$Outbound` instead. */
    type Outbound = CreateDeploymentGitSource14$Outbound;
}
export declare function createDeploymentGitSource14ToJSON(createDeploymentGitSource14: CreateDeploymentGitSource14): string;
export declare function createDeploymentGitSource14FromJSON(jsonString: string): SafeParseResult<CreateDeploymentGitSource14, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody13Type$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody13Type>;
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody13Type$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody13Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody13Type$ {
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody13Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly GithubLimited: "github-limited";
    }>;
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody13Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly GithubLimited: "github-limited";
    }>;
}
/** @internal */
export declare const CreateDeploymentGitSource13$inboundSchema: z.ZodType<CreateDeploymentGitSource13, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentGitSource13$Outbound = {
    type: string;
    ref: string;
    sha: string;
    repoId: number;
    org?: string | undefined;
    repo?: string | undefined;
};
/** @internal */
export declare const CreateDeploymentGitSource13$outboundSchema: z.ZodType<CreateDeploymentGitSource13$Outbound, z.ZodTypeDef, CreateDeploymentGitSource13>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitSource13$ {
    /** @deprecated use `CreateDeploymentGitSource13$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentGitSource13, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentGitSource13$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentGitSource13$Outbound, z.ZodTypeDef, CreateDeploymentGitSource13>;
    /** @deprecated use `CreateDeploymentGitSource13$Outbound` instead. */
    type Outbound = CreateDeploymentGitSource13$Outbound;
}
export declare function createDeploymentGitSource13ToJSON(createDeploymentGitSource13: CreateDeploymentGitSource13): string;
export declare function createDeploymentGitSource13FromJSON(jsonString: string): SafeParseResult<CreateDeploymentGitSource13, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type>;
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$ {
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly GithubCustomHost: "github-custom-host";
    }>;
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody12Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly GithubCustomHost: "github-custom-host";
    }>;
}
/** @internal */
export declare const CreateDeploymentGitSource12$inboundSchema: z.ZodType<CreateDeploymentGitSource12, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentGitSource12$Outbound = {
    type: string;
    host: string;
    ref: string;
    sha: string;
    repoId: number;
    org?: string | undefined;
    repo?: string | undefined;
};
/** @internal */
export declare const CreateDeploymentGitSource12$outboundSchema: z.ZodType<CreateDeploymentGitSource12$Outbound, z.ZodTypeDef, CreateDeploymentGitSource12>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitSource12$ {
    /** @deprecated use `CreateDeploymentGitSource12$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentGitSource12, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentGitSource12$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentGitSource12$Outbound, z.ZodTypeDef, CreateDeploymentGitSource12>;
    /** @deprecated use `CreateDeploymentGitSource12$Outbound` instead. */
    type Outbound = CreateDeploymentGitSource12$Outbound;
}
export declare function createDeploymentGitSource12ToJSON(createDeploymentGitSource12: CreateDeploymentGitSource12): string;
export declare function createDeploymentGitSource12FromJSON(jsonString: string): SafeParseResult<CreateDeploymentGitSource12, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type>;
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$ {
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
}
/** @internal */
export declare const CreateDeploymentGitSource11$inboundSchema: z.ZodType<CreateDeploymentGitSource11, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentGitSource11$Outbound = {
    type: string;
    ref: string;
    sha: string;
    repoId: number;
    org?: string | undefined;
    repo?: string | undefined;
};
/** @internal */
export declare const CreateDeploymentGitSource11$outboundSchema: z.ZodType<CreateDeploymentGitSource11$Outbound, z.ZodTypeDef, CreateDeploymentGitSource11>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitSource11$ {
    /** @deprecated use `CreateDeploymentGitSource11$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentGitSource11, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentGitSource11$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentGitSource11$Outbound, z.ZodTypeDef, CreateDeploymentGitSource11>;
    /** @deprecated use `CreateDeploymentGitSource11$Outbound` instead. */
    type Outbound = CreateDeploymentGitSource11$Outbound;
}
export declare function createDeploymentGitSource11ToJSON(createDeploymentGitSource11: CreateDeploymentGitSource11): string;
export declare function createDeploymentGitSource11FromJSON(jsonString: string): SafeParseResult<CreateDeploymentGitSource11, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type>;
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$ {
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Custom: "custom";
    }>;
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody10Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Custom: "custom";
    }>;
}
/** @internal */
export declare const CreateDeploymentGitSource10$inboundSchema: z.ZodType<CreateDeploymentGitSource10, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentGitSource10$Outbound = {
    type: string;
    ref: string;
    sha: string;
    gitUrl: string;
};
/** @internal */
export declare const CreateDeploymentGitSource10$outboundSchema: z.ZodType<CreateDeploymentGitSource10$Outbound, z.ZodTypeDef, CreateDeploymentGitSource10>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitSource10$ {
    /** @deprecated use `CreateDeploymentGitSource10$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentGitSource10, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentGitSource10$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentGitSource10$Outbound, z.ZodTypeDef, CreateDeploymentGitSource10>;
    /** @deprecated use `CreateDeploymentGitSource10$Outbound` instead. */
    type Outbound = CreateDeploymentGitSource10$Outbound;
}
export declare function createDeploymentGitSource10ToJSON(createDeploymentGitSource10: CreateDeploymentGitSource10): string;
export declare function createDeploymentGitSource10FromJSON(jsonString: string): SafeParseResult<CreateDeploymentGitSource10, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type>;
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$ {
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
}
/** @internal */
export declare const CreateDeploymentGitSource9$inboundSchema: z.ZodType<CreateDeploymentGitSource9, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentGitSource9$Outbound = {
    type: string;
    owner: string;
    slug: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
/** @internal */
export declare const CreateDeploymentGitSource9$outboundSchema: z.ZodType<CreateDeploymentGitSource9$Outbound, z.ZodTypeDef, CreateDeploymentGitSource9>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitSource9$ {
    /** @deprecated use `CreateDeploymentGitSource9$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentGitSource9, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentGitSource9$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentGitSource9$Outbound, z.ZodTypeDef, CreateDeploymentGitSource9>;
    /** @deprecated use `CreateDeploymentGitSource9$Outbound` instead. */
    type Outbound = CreateDeploymentGitSource9$Outbound;
}
export declare function createDeploymentGitSource9ToJSON(createDeploymentGitSource9: CreateDeploymentGitSource9): string;
export declare function createDeploymentGitSource9FromJSON(jsonString: string): SafeParseResult<CreateDeploymentGitSource9, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type>;
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$ {
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
}
/** @internal */
export declare const CreateDeploymentGitSource8$inboundSchema: z.ZodType<CreateDeploymentGitSource8, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentGitSource8$Outbound = {
    type: string;
    workspaceUuid?: string | undefined;
    repoUuid: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
/** @internal */
export declare const CreateDeploymentGitSource8$outboundSchema: z.ZodType<CreateDeploymentGitSource8$Outbound, z.ZodTypeDef, CreateDeploymentGitSource8>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitSource8$ {
    /** @deprecated use `CreateDeploymentGitSource8$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentGitSource8, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentGitSource8$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentGitSource8$Outbound, z.ZodTypeDef, CreateDeploymentGitSource8>;
    /** @deprecated use `CreateDeploymentGitSource8$Outbound` instead. */
    type Outbound = CreateDeploymentGitSource8$Outbound;
}
export declare function createDeploymentGitSource8ToJSON(createDeploymentGitSource8: CreateDeploymentGitSource8): string;
export declare function createDeploymentGitSource8FromJSON(jsonString: string): SafeParseResult<CreateDeploymentGitSource8, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type>;
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$ {
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Gitlab: "gitlab";
    }>;
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Gitlab: "gitlab";
    }>;
}
/** @internal */
export declare const GitSourceProjectId$inboundSchema: z.ZodType<GitSourceProjectId, z.ZodTypeDef, unknown>;
/** @internal */
export type GitSourceProjectId$Outbound = string | number;
/** @internal */
export declare const GitSourceProjectId$outboundSchema: z.ZodType<GitSourceProjectId$Outbound, z.ZodTypeDef, GitSourceProjectId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GitSourceProjectId$ {
    /** @deprecated use `GitSourceProjectId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GitSourceProjectId, z.ZodTypeDef, unknown>;
    /** @deprecated use `GitSourceProjectId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GitSourceProjectId$Outbound, z.ZodTypeDef, GitSourceProjectId>;
    /** @deprecated use `GitSourceProjectId$Outbound` instead. */
    type Outbound = GitSourceProjectId$Outbound;
}
export declare function gitSourceProjectIdToJSON(gitSourceProjectId: GitSourceProjectId): string;
export declare function gitSourceProjectIdFromJSON(jsonString: string): SafeParseResult<GitSourceProjectId, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentGitSource7$inboundSchema: z.ZodType<CreateDeploymentGitSource7, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentGitSource7$Outbound = {
    type: string;
    projectId: string | number;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
/** @internal */
export declare const CreateDeploymentGitSource7$outboundSchema: z.ZodType<CreateDeploymentGitSource7$Outbound, z.ZodTypeDef, CreateDeploymentGitSource7>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitSource7$ {
    /** @deprecated use `CreateDeploymentGitSource7$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentGitSource7, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentGitSource7$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentGitSource7$Outbound, z.ZodTypeDef, CreateDeploymentGitSource7>;
    /** @deprecated use `CreateDeploymentGitSource7$Outbound` instead. */
    type Outbound = CreateDeploymentGitSource7$Outbound;
}
export declare function createDeploymentGitSource7ToJSON(createDeploymentGitSource7: CreateDeploymentGitSource7): string;
export declare function createDeploymentGitSource7FromJSON(jsonString: string): SafeParseResult<CreateDeploymentGitSource7, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody6Type$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody6Type>;
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody6Type$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody6Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody6Type$ {
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody6Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly GithubLimited: "github-limited";
    }>;
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody6Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly GithubLimited: "github-limited";
    }>;
}
/** @internal */
export declare const CreateDeploymentGitSource6$inboundSchema: z.ZodType<CreateDeploymentGitSource6, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentGitSource6$Outbound = {
    type: string;
    org: string;
    repo: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
/** @internal */
export declare const CreateDeploymentGitSource6$outboundSchema: z.ZodType<CreateDeploymentGitSource6$Outbound, z.ZodTypeDef, CreateDeploymentGitSource6>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitSource6$ {
    /** @deprecated use `CreateDeploymentGitSource6$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentGitSource6, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentGitSource6$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentGitSource6$Outbound, z.ZodTypeDef, CreateDeploymentGitSource6>;
    /** @deprecated use `CreateDeploymentGitSource6$Outbound` instead. */
    type Outbound = CreateDeploymentGitSource6$Outbound;
}
export declare function createDeploymentGitSource6ToJSON(createDeploymentGitSource6: CreateDeploymentGitSource6): string;
export declare function createDeploymentGitSource6FromJSON(jsonString: string): SafeParseResult<CreateDeploymentGitSource6, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody5Type$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody5Type>;
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody5Type$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody5Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody5Type$ {
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody5Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly GithubLimited: "github-limited";
    }>;
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody5Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly GithubLimited: "github-limited";
    }>;
}
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsRepoId$inboundSchema: z.ZodType<CreateDeploymentGitSourceDeploymentsRepoId, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentGitSourceDeploymentsRepoId$Outbound = string | number;
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsRepoId$outboundSchema: z.ZodType<CreateDeploymentGitSourceDeploymentsRepoId$Outbound, z.ZodTypeDef, CreateDeploymentGitSourceDeploymentsRepoId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitSourceDeploymentsRepoId$ {
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsRepoId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentGitSourceDeploymentsRepoId, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsRepoId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentGitSourceDeploymentsRepoId$Outbound, z.ZodTypeDef, CreateDeploymentGitSourceDeploymentsRepoId>;
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsRepoId$Outbound` instead. */
    type Outbound = CreateDeploymentGitSourceDeploymentsRepoId$Outbound;
}
export declare function createDeploymentGitSourceDeploymentsRepoIdToJSON(createDeploymentGitSourceDeploymentsRepoId: CreateDeploymentGitSourceDeploymentsRepoId): string;
export declare function createDeploymentGitSourceDeploymentsRepoIdFromJSON(jsonString: string): SafeParseResult<CreateDeploymentGitSourceDeploymentsRepoId, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentGitSource5$inboundSchema: z.ZodType<CreateDeploymentGitSource5, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentGitSource5$Outbound = {
    type: string;
    repoId: string | number;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
/** @internal */
export declare const CreateDeploymentGitSource5$outboundSchema: z.ZodType<CreateDeploymentGitSource5$Outbound, z.ZodTypeDef, CreateDeploymentGitSource5>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitSource5$ {
    /** @deprecated use `CreateDeploymentGitSource5$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentGitSource5, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentGitSource5$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentGitSource5$Outbound, z.ZodTypeDef, CreateDeploymentGitSource5>;
    /** @deprecated use `CreateDeploymentGitSource5$Outbound` instead. */
    type Outbound = CreateDeploymentGitSource5$Outbound;
}
export declare function createDeploymentGitSource5ToJSON(createDeploymentGitSource5: CreateDeploymentGitSource5): string;
export declare function createDeploymentGitSource5FromJSON(jsonString: string): SafeParseResult<CreateDeploymentGitSource5, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType>;
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$ {
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly GithubCustomHost: "github-custom-host";
    }>;
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly GithubCustomHost: "github-custom-host";
    }>;
}
/** @internal */
export declare const CreateDeploymentGitSource4$inboundSchema: z.ZodType<CreateDeploymentGitSource4, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentGitSource4$Outbound = {
    type: string;
    host: string;
    org: string;
    repo: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
/** @internal */
export declare const CreateDeploymentGitSource4$outboundSchema: z.ZodType<CreateDeploymentGitSource4$Outbound, z.ZodTypeDef, CreateDeploymentGitSource4>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitSource4$ {
    /** @deprecated use `CreateDeploymentGitSource4$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentGitSource4, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentGitSource4$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentGitSource4$Outbound, z.ZodTypeDef, CreateDeploymentGitSource4>;
    /** @deprecated use `CreateDeploymentGitSource4$Outbound` instead. */
    type Outbound = CreateDeploymentGitSource4$Outbound;
}
export declare function createDeploymentGitSource4ToJSON(createDeploymentGitSource4: CreateDeploymentGitSource4): string;
export declare function createDeploymentGitSource4FromJSON(jsonString: string): SafeParseResult<CreateDeploymentGitSource4, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONType>;
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$ {
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly GithubCustomHost: "github-custom-host";
    }>;
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly GithubCustomHost: "github-custom-host";
    }>;
}
/** @internal */
export declare const CreateDeploymentGitSourceRepoId$inboundSchema: z.ZodType<CreateDeploymentGitSourceRepoId, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentGitSourceRepoId$Outbound = string | number;
/** @internal */
export declare const CreateDeploymentGitSourceRepoId$outboundSchema: z.ZodType<CreateDeploymentGitSourceRepoId$Outbound, z.ZodTypeDef, CreateDeploymentGitSourceRepoId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitSourceRepoId$ {
    /** @deprecated use `CreateDeploymentGitSourceRepoId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentGitSourceRepoId, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentGitSourceRepoId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentGitSourceRepoId$Outbound, z.ZodTypeDef, CreateDeploymentGitSourceRepoId>;
    /** @deprecated use `CreateDeploymentGitSourceRepoId$Outbound` instead. */
    type Outbound = CreateDeploymentGitSourceRepoId$Outbound;
}
export declare function createDeploymentGitSourceRepoIdToJSON(createDeploymentGitSourceRepoId: CreateDeploymentGitSourceRepoId): string;
export declare function createDeploymentGitSourceRepoIdFromJSON(jsonString: string): SafeParseResult<CreateDeploymentGitSourceRepoId, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentGitSource3$inboundSchema: z.ZodType<CreateDeploymentGitSource3, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentGitSource3$Outbound = {
    type: string;
    host: string;
    repoId: string | number;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
/** @internal */
export declare const CreateDeploymentGitSource3$outboundSchema: z.ZodType<CreateDeploymentGitSource3$Outbound, z.ZodTypeDef, CreateDeploymentGitSource3>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitSource3$ {
    /** @deprecated use `CreateDeploymentGitSource3$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentGitSource3, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentGitSource3$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentGitSource3$Outbound, z.ZodTypeDef, CreateDeploymentGitSource3>;
    /** @deprecated use `CreateDeploymentGitSource3$Outbound` instead. */
    type Outbound = CreateDeploymentGitSource3$Outbound;
}
export declare function createDeploymentGitSource3ToJSON(createDeploymentGitSource3: CreateDeploymentGitSource3): string;
export declare function createDeploymentGitSource3FromJSON(jsonString: string): SafeParseResult<CreateDeploymentGitSource3, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsResponse200Type$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200Type>;
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsResponse200Type$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceDeploymentsResponse200Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitSourceDeploymentsResponse200Type$ {
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponse200Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
}
/** @internal */
export declare const CreateDeploymentGitSource2$inboundSchema: z.ZodType<CreateDeploymentGitSource2, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentGitSource2$Outbound = {
    type: string;
    org: string;
    repo: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
/** @internal */
export declare const CreateDeploymentGitSource2$outboundSchema: z.ZodType<CreateDeploymentGitSource2$Outbound, z.ZodTypeDef, CreateDeploymentGitSource2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitSource2$ {
    /** @deprecated use `CreateDeploymentGitSource2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentGitSource2, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentGitSource2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentGitSource2$Outbound, z.ZodTypeDef, CreateDeploymentGitSource2>;
    /** @deprecated use `CreateDeploymentGitSource2$Outbound` instead. */
    type Outbound = CreateDeploymentGitSource2$Outbound;
}
export declare function createDeploymentGitSource2ToJSON(createDeploymentGitSource2: CreateDeploymentGitSource2): string;
export declare function createDeploymentGitSource2FromJSON(jsonString: string): SafeParseResult<CreateDeploymentGitSource2, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsResponseType$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceDeploymentsResponseType>;
/** @internal */
export declare const CreateDeploymentGitSourceDeploymentsResponseType$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitSourceDeploymentsResponseType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitSourceDeploymentsResponseType$ {
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponseType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
    /** @deprecated use `CreateDeploymentGitSourceDeploymentsResponseType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
}
/** @internal */
export declare const GitSourceRepoId$inboundSchema: z.ZodType<GitSourceRepoId, z.ZodTypeDef, unknown>;
/** @internal */
export type GitSourceRepoId$Outbound = string | number;
/** @internal */
export declare const GitSourceRepoId$outboundSchema: z.ZodType<GitSourceRepoId$Outbound, z.ZodTypeDef, GitSourceRepoId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GitSourceRepoId$ {
    /** @deprecated use `GitSourceRepoId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GitSourceRepoId, z.ZodTypeDef, unknown>;
    /** @deprecated use `GitSourceRepoId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GitSourceRepoId$Outbound, z.ZodTypeDef, GitSourceRepoId>;
    /** @deprecated use `GitSourceRepoId$Outbound` instead. */
    type Outbound = GitSourceRepoId$Outbound;
}
export declare function gitSourceRepoIdToJSON(gitSourceRepoId: GitSourceRepoId): string;
export declare function gitSourceRepoIdFromJSON(jsonString: string): SafeParseResult<GitSourceRepoId, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentGitSource1$inboundSchema: z.ZodType<CreateDeploymentGitSource1, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentGitSource1$Outbound = {
    type: string;
    repoId: string | number;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};
/** @internal */
export declare const CreateDeploymentGitSource1$outboundSchema: z.ZodType<CreateDeploymentGitSource1$Outbound, z.ZodTypeDef, CreateDeploymentGitSource1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitSource1$ {
    /** @deprecated use `CreateDeploymentGitSource1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentGitSource1, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentGitSource1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentGitSource1$Outbound, z.ZodTypeDef, CreateDeploymentGitSource1>;
    /** @deprecated use `CreateDeploymentGitSource1$Outbound` instead. */
    type Outbound = CreateDeploymentGitSource1$Outbound;
}
export declare function createDeploymentGitSource1ToJSON(createDeploymentGitSource1: CreateDeploymentGitSource1): string;
export declare function createDeploymentGitSource1FromJSON(jsonString: string): SafeParseResult<CreateDeploymentGitSource1, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentGitSource$inboundSchema: z.ZodType<CreateDeploymentGitSource, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentGitSource$Outbound = CreateDeploymentGitSource12$Outbound | CreateDeploymentGitSource15$Outbound | CreateDeploymentGitSource4$Outbound | CreateDeploymentGitSource10$Outbound | CreateDeploymentGitSource11$Outbound | CreateDeploymentGitSource13$Outbound | CreateDeploymentGitSource14$Outbound | CreateDeploymentGitSource2$Outbound | CreateDeploymentGitSource3$Outbound | CreateDeploymentGitSource6$Outbound | CreateDeploymentGitSource9$Outbound | CreateDeploymentGitSource1$Outbound | CreateDeploymentGitSource5$Outbound | CreateDeploymentGitSource7$Outbound | CreateDeploymentGitSource8$Outbound;
/** @internal */
export declare const CreateDeploymentGitSource$outboundSchema: z.ZodType<CreateDeploymentGitSource$Outbound, z.ZodTypeDef, CreateDeploymentGitSource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitSource$ {
    /** @deprecated use `CreateDeploymentGitSource$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentGitSource, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentGitSource$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentGitSource$Outbound, z.ZodTypeDef, CreateDeploymentGitSource>;
    /** @deprecated use `CreateDeploymentGitSource$Outbound` instead. */
    type Outbound = CreateDeploymentGitSource$Outbound;
}
export declare function createDeploymentGitSourceToJSON(createDeploymentGitSource: CreateDeploymentGitSource): string;
export declare function createDeploymentGitSourceFromJSON(jsonString: string): SafeParseResult<CreateDeploymentGitSource, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentProject$inboundSchema: z.ZodType<CreateDeploymentProject, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentProject$Outbound = {
    id: string;
    name: string;
    framework?: string | null | undefined;
};
/** @internal */
export declare const CreateDeploymentProject$outboundSchema: z.ZodType<CreateDeploymentProject$Outbound, z.ZodTypeDef, CreateDeploymentProject>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentProject$ {
    /** @deprecated use `CreateDeploymentProject$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentProject, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentProject$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentProject$Outbound, z.ZodTypeDef, CreateDeploymentProject>;
    /** @deprecated use `CreateDeploymentProject$Outbound` instead. */
    type Outbound = CreateDeploymentProject$Outbound;
}
export declare function createDeploymentProjectToJSON(createDeploymentProject: CreateDeploymentProject): string;
export declare function createDeploymentProjectFromJSON(jsonString: string): SafeParseResult<CreateDeploymentProject, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentNodeVersion$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentNodeVersion>;
/** @internal */
export declare const CreateDeploymentNodeVersion$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentNodeVersion>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentNodeVersion$ {
    /** @deprecated use `CreateDeploymentNodeVersion$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly TwentyTwoDotX: "22.x";
        readonly TwentyDotX: "20.x";
        readonly EighteenDotX: "18.x";
        readonly SixteenDotX: "16.x";
        readonly FourteenDotX: "14.x";
        readonly TwelveDotX: "12.x";
        readonly TenDotX: "10.x";
        readonly EightDot10DotX: "8.10.x";
    }>;
    /** @deprecated use `CreateDeploymentNodeVersion$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly TwentyTwoDotX: "22.x";
        readonly TwentyDotX: "20.x";
        readonly EighteenDotX: "18.x";
        readonly SixteenDotX: "16.x";
        readonly FourteenDotX: "14.x";
        readonly TwelveDotX: "12.x";
        readonly TenDotX: "10.x";
        readonly EightDot10DotX: "8.10.x";
    }>;
}
/** @internal */
export declare const ReadyState$inboundSchema: z.ZodNativeEnum<typeof ReadyState>;
/** @internal */
export declare const ReadyState$outboundSchema: z.ZodNativeEnum<typeof ReadyState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ReadyState$ {
    /** @deprecated use `ReadyState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Canceled: "CANCELED";
        readonly Error: "ERROR";
        readonly Queued: "QUEUED";
        readonly Building: "BUILDING";
        readonly Initializing: "INITIALIZING";
        readonly Ready: "READY";
    }>;
    /** @deprecated use `ReadyState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Canceled: "CANCELED";
        readonly Error: "ERROR";
        readonly Queued: "QUEUED";
        readonly Building: "BUILDING";
        readonly Initializing: "INITIALIZING";
        readonly Ready: "READY";
    }>;
}
/** @internal */
export declare const CreateDeploymentSource$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentSource>;
/** @internal */
export declare const CreateDeploymentSource$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentSource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentSource$ {
    /** @deprecated use `CreateDeploymentSource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Cli: "cli";
        readonly Git: "git";
        readonly Import: "import";
        readonly ImportRepo: "import/repo";
        readonly CloneRepo: "clone/repo";
        readonly ApiTriggerGitDeploy: "api-trigger-git-deploy";
        readonly Redeploy: "redeploy";
        readonly V0Web: "v0-web";
    }>;
    /** @deprecated use `CreateDeploymentSource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Cli: "cli";
        readonly Git: "git";
        readonly Import: "import";
        readonly ImportRepo: "import/repo";
        readonly CloneRepo: "clone/repo";
        readonly ApiTriggerGitDeploy: "api-trigger-git-deploy";
        readonly Redeploy: "redeploy";
        readonly V0Web: "v0-web";
    }>;
}
/** @internal */
export declare const CreateDeploymentTarget$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentTarget>;
/** @internal */
export declare const CreateDeploymentTarget$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentTarget>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentTarget$ {
    /** @deprecated use `CreateDeploymentTarget$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Production: "production";
        readonly Staging: "staging";
    }>;
    /** @deprecated use `CreateDeploymentTarget$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Production: "production";
        readonly Staging: "staging";
    }>;
}
/** @internal */
export declare const AliasError$inboundSchema: z.ZodType<AliasError, z.ZodTypeDef, unknown>;
/** @internal */
export type AliasError$Outbound = {
    code: string;
    message: string;
};
/** @internal */
export declare const AliasError$outboundSchema: z.ZodType<AliasError$Outbound, z.ZodTypeDef, AliasError>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AliasError$ {
    /** @deprecated use `AliasError$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AliasError, z.ZodTypeDef, unknown>;
    /** @deprecated use `AliasError$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AliasError$Outbound, z.ZodTypeDef, AliasError>;
    /** @deprecated use `AliasError$Outbound` instead. */
    type Outbound = AliasError$Outbound;
}
export declare function aliasErrorToJSON(aliasError: AliasError): string;
export declare function aliasErrorFromJSON(jsonString: string): SafeParseResult<AliasError, SDKValidationError>;
/** @internal */
export declare const AliasWarning$inboundSchema: z.ZodType<AliasWarning, z.ZodTypeDef, unknown>;
/** @internal */
export type AliasWarning$Outbound = {
    code: string;
    message: string;
    link?: string | undefined;
    action?: string | undefined;
};
/** @internal */
export declare const AliasWarning$outboundSchema: z.ZodType<AliasWarning$Outbound, z.ZodTypeDef, AliasWarning>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AliasWarning$ {
    /** @deprecated use `AliasWarning$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AliasWarning, z.ZodTypeDef, unknown>;
    /** @deprecated use `AliasWarning$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AliasWarning$Outbound, z.ZodTypeDef, AliasWarning>;
    /** @deprecated use `AliasWarning$Outbound` instead. */
    type Outbound = AliasWarning$Outbound;
}
export declare function aliasWarningToJSON(aliasWarning: AliasWarning): string;
export declare function aliasWarningFromJSON(jsonString: string): SafeParseResult<AliasWarning, SDKValidationError>;
/** @internal */
export declare const ChecksConclusion$inboundSchema: z.ZodNativeEnum<typeof ChecksConclusion>;
/** @internal */
export declare const ChecksConclusion$outboundSchema: z.ZodNativeEnum<typeof ChecksConclusion>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ChecksConclusion$ {
    /** @deprecated use `ChecksConclusion$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Succeeded: "succeeded";
        readonly Failed: "failed";
        readonly Skipped: "skipped";
        readonly Canceled: "canceled";
    }>;
    /** @deprecated use `ChecksConclusion$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Succeeded: "succeeded";
        readonly Failed: "failed";
        readonly Skipped: "skipped";
        readonly Canceled: "canceled";
    }>;
}
/** @internal */
export declare const ChecksState$inboundSchema: z.ZodNativeEnum<typeof ChecksState>;
/** @internal */
export declare const ChecksState$outboundSchema: z.ZodNativeEnum<typeof ChecksState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ChecksState$ {
    /** @deprecated use `ChecksState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Registered: "registered";
        readonly Running: "running";
        readonly Completed: "completed";
    }>;
    /** @deprecated use `ChecksState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Registered: "registered";
        readonly Running: "running";
        readonly Completed: "completed";
    }>;
}
/** @internal */
export declare const OidcTokenClaims$inboundSchema: z.ZodType<OidcTokenClaims, z.ZodTypeDef, unknown>;
/** @internal */
export type OidcTokenClaims$Outbound = {
    iss: string;
    sub: string;
    scope: string;
    aud: string;
    owner: string;
    owner_id: string;
    project: string;
    project_id: string;
    environment: string;
};
/** @internal */
export declare const OidcTokenClaims$outboundSchema: z.ZodType<OidcTokenClaims$Outbound, z.ZodTypeDef, OidcTokenClaims>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OidcTokenClaims$ {
    /** @deprecated use `OidcTokenClaims$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OidcTokenClaims, z.ZodTypeDef, unknown>;
    /** @deprecated use `OidcTokenClaims$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OidcTokenClaims$Outbound, z.ZodTypeDef, OidcTokenClaims>;
    /** @deprecated use `OidcTokenClaims$Outbound` instead. */
    type Outbound = OidcTokenClaims$Outbound;
}
export declare function oidcTokenClaimsToJSON(oidcTokenClaims: OidcTokenClaims): string;
export declare function oidcTokenClaimsFromJSON(jsonString: string): SafeParseResult<OidcTokenClaims, SDKValidationError>;
/** @internal */
export declare const ReadySubstate$inboundSchema: z.ZodNativeEnum<typeof ReadySubstate>;
/** @internal */
export declare const ReadySubstate$outboundSchema: z.ZodNativeEnum<typeof ReadySubstate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ReadySubstate$ {
    /** @deprecated use `ReadySubstate$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Staged: "STAGED";
        readonly Rolling: "ROLLING";
        readonly Promoted: "PROMOTED";
    }>;
    /** @deprecated use `ReadySubstate$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Staged: "STAGED";
        readonly Rolling: "ROLLING";
        readonly Promoted: "PROMOTED";
    }>;
}
/** @internal */
export declare const CreateDeploymentPlan$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentPlan>;
/** @internal */
export declare const CreateDeploymentPlan$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentPlan>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentPlan$ {
    /** @deprecated use `CreateDeploymentPlan$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Hobby: "hobby";
        readonly Pro: "pro";
        readonly Enterprise: "enterprise";
    }>;
    /** @deprecated use `CreateDeploymentPlan$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Hobby: "hobby";
        readonly Pro: "pro";
        readonly Enterprise: "enterprise";
    }>;
}
/** @internal */
export declare const FunctionType$inboundSchema: z.ZodNativeEnum<typeof FunctionType>;
/** @internal */
export declare const FunctionType$outboundSchema: z.ZodNativeEnum<typeof FunctionType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FunctionType$ {
    /** @deprecated use `FunctionType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Fluid: "fluid";
        readonly Standard: "standard";
    }>;
    /** @deprecated use `FunctionType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Fluid: "fluid";
        readonly Standard: "standard";
    }>;
}
/** @internal */
export declare const FunctionMemoryType$inboundSchema: z.ZodNativeEnum<typeof FunctionMemoryType>;
/** @internal */
export declare const FunctionMemoryType$outboundSchema: z.ZodNativeEnum<typeof FunctionMemoryType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FunctionMemoryType$ {
    /** @deprecated use `FunctionMemoryType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Standard: "standard";
        readonly StandardLegacy: "standard_legacy";
        readonly Performance: "performance";
    }>;
    /** @deprecated use `FunctionMemoryType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Standard: "standard";
        readonly StandardLegacy: "standard_legacy";
        readonly Performance: "performance";
    }>;
}
/** @internal */
export declare const Config$inboundSchema: z.ZodType<Config, z.ZodTypeDef, unknown>;
/** @internal */
export type Config$Outbound = {
    version?: number | undefined;
    functionType: string;
    functionMemoryType: string;
    functionTimeout: number | null;
    secureComputePrimaryRegion: string | null;
    secureComputeFallbackRegion: string | null;
    isUsingActiveCPU?: boolean | undefined;
};
/** @internal */
export declare const Config$outboundSchema: z.ZodType<Config$Outbound, z.ZodTypeDef, Config>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Config$ {
    /** @deprecated use `Config$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Config, z.ZodTypeDef, unknown>;
    /** @deprecated use `Config$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Config$Outbound, z.ZodTypeDef, Config>;
    /** @deprecated use `Config$Outbound` instead. */
    type Outbound = Config$Outbound;
}
export declare function configToJSON(config: Config): string;
export declare function configFromJSON(jsonString: string): SafeParseResult<Config, SDKValidationError>;
/** @internal */
export declare const Architecture$inboundSchema: z.ZodNativeEnum<typeof Architecture>;
/** @internal */
export declare const Architecture$outboundSchema: z.ZodNativeEnum<typeof Architecture>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Architecture$ {
    /** @deprecated use `Architecture$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly X8664: "x86_64";
        readonly Arm64: "arm64";
    }>;
    /** @deprecated use `Architecture$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly X8664: "x86_64";
        readonly Arm64: "arm64";
    }>;
}
/** @internal */
export declare const CreateDeploymentDeploymentsType$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentDeploymentsType>;
/** @internal */
export declare const CreateDeploymentDeploymentsType$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentDeploymentsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentDeploymentsType$ {
    /** @deprecated use `CreateDeploymentDeploymentsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly QueueV1beta: "queue/v1beta";
    }>;
    /** @deprecated use `CreateDeploymentDeploymentsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly QueueV1beta: "queue/v1beta";
    }>;
}
/** @internal */
export declare const ExperimentalTriggers$inboundSchema: z.ZodType<ExperimentalTriggers, z.ZodTypeDef, unknown>;
/** @internal */
export type ExperimentalTriggers$Outbound = {
    type: string;
    topic: string;
    consumer: string;
    maxDeliveries?: number | undefined;
    retryAfterSeconds?: number | undefined;
    initialDelaySeconds?: number | undefined;
};
/** @internal */
export declare const ExperimentalTriggers$outboundSchema: z.ZodType<ExperimentalTriggers$Outbound, z.ZodTypeDef, ExperimentalTriggers>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ExperimentalTriggers$ {
    /** @deprecated use `ExperimentalTriggers$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ExperimentalTriggers, z.ZodTypeDef, unknown>;
    /** @deprecated use `ExperimentalTriggers$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ExperimentalTriggers$Outbound, z.ZodTypeDef, ExperimentalTriggers>;
    /** @deprecated use `ExperimentalTriggers$Outbound` instead. */
    type Outbound = ExperimentalTriggers$Outbound;
}
export declare function experimentalTriggersToJSON(experimentalTriggers: ExperimentalTriggers): string;
export declare function experimentalTriggersFromJSON(jsonString: string): SafeParseResult<ExperimentalTriggers, SDKValidationError>;
/** @internal */
export declare const Functions$inboundSchema: z.ZodType<Functions, z.ZodTypeDef, unknown>;
/** @internal */
export type Functions$Outbound = {
    architecture?: string | undefined;
    memory?: number | undefined;
    maxDuration?: number | undefined;
    runtime?: string | undefined;
    includeFiles?: string | undefined;
    excludeFiles?: string | undefined;
    experimentalTriggers?: Array<ExperimentalTriggers$Outbound> | undefined;
    supportsCancellation?: boolean | undefined;
};
/** @internal */
export declare const Functions$outboundSchema: z.ZodType<Functions$Outbound, z.ZodTypeDef, Functions>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Functions$ {
    /** @deprecated use `Functions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Functions, z.ZodTypeDef, unknown>;
    /** @deprecated use `Functions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Functions$Outbound, z.ZodTypeDef, Functions>;
    /** @deprecated use `Functions$Outbound` instead. */
    type Outbound = Functions$Outbound;
}
export declare function functionsToJSON(functions: Functions): string;
export declare function functionsFromJSON(jsonString: string): SafeParseResult<Functions, SDKValidationError>;
/** @internal */
export declare const Routes3$inboundSchema: z.ZodType<Routes3, z.ZodTypeDef, unknown>;
/** @internal */
export type Routes3$Outbound = {
    src: string;
    continue: boolean;
    middleware: number;
};
/** @internal */
export declare const Routes3$outboundSchema: z.ZodType<Routes3$Outbound, z.ZodTypeDef, Routes3>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Routes3$ {
    /** @deprecated use `Routes3$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Routes3, z.ZodTypeDef, unknown>;
    /** @deprecated use `Routes3$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Routes3$Outbound, z.ZodTypeDef, Routes3>;
    /** @deprecated use `Routes3$Outbound` instead. */
    type Outbound = Routes3$Outbound;
}
export declare function routes3ToJSON(routes3: Routes3): string;
export declare function routes3FromJSON(jsonString: string): SafeParseResult<Routes3, SDKValidationError>;
/** @internal */
export declare const Handle$inboundSchema: z.ZodNativeEnum<typeof Handle>;
/** @internal */
export declare const Handle$outboundSchema: z.ZodNativeEnum<typeof Handle>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Handle$ {
    /** @deprecated use `Handle$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Error: "error";
        readonly Filesystem: "filesystem";
        readonly Hit: "hit";
        readonly Miss: "miss";
        readonly Rewrite: "rewrite";
        readonly Resource: "resource";
    }>;
    /** @deprecated use `Handle$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Error: "error";
        readonly Filesystem: "filesystem";
        readonly Hit: "hit";
        readonly Miss: "miss";
        readonly Rewrite: "rewrite";
        readonly Resource: "resource";
    }>;
}
/** @internal */
export declare const Routes2$inboundSchema: z.ZodType<Routes2, z.ZodTypeDef, unknown>;
/** @internal */
export type Routes2$Outbound = {
    handle: string;
    src?: string | undefined;
    dest?: string | undefined;
    status?: number | undefined;
};
/** @internal */
export declare const Routes2$outboundSchema: z.ZodType<Routes2$Outbound, z.ZodTypeDef, Routes2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Routes2$ {
    /** @deprecated use `Routes2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Routes2, z.ZodTypeDef, unknown>;
    /** @deprecated use `Routes2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Routes2$Outbound, z.ZodTypeDef, Routes2>;
    /** @deprecated use `Routes2$Outbound` instead. */
    type Outbound = Routes2$Outbound;
}
export declare function routes2ToJSON(routes2: Routes2): string;
export declare function routes2FromJSON(jsonString: string): SafeParseResult<Routes2, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentHasDeploymentsType$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentHasDeploymentsType>;
/** @internal */
export declare const CreateDeploymentHasDeploymentsType$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentHasDeploymentsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentHasDeploymentsType$ {
    /** @deprecated use `CreateDeploymentHasDeploymentsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Header: "header";
        readonly Cookie: "cookie";
        readonly Query: "query";
    }>;
    /** @deprecated use `CreateDeploymentHasDeploymentsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Header: "header";
        readonly Cookie: "cookie";
        readonly Query: "query";
    }>;
}
/** @internal */
export declare const ValueEq$inboundSchema: z.ZodType<ValueEq, z.ZodTypeDef, unknown>;
/** @internal */
export type ValueEq$Outbound = string | number;
/** @internal */
export declare const ValueEq$outboundSchema: z.ZodType<ValueEq$Outbound, z.ZodTypeDef, ValueEq>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ValueEq$ {
    /** @deprecated use `ValueEq$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ValueEq, z.ZodTypeDef, unknown>;
    /** @deprecated use `ValueEq$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ValueEq$Outbound, z.ZodTypeDef, ValueEq>;
    /** @deprecated use `ValueEq$Outbound` instead. */
    type Outbound = ValueEq$Outbound;
}
export declare function valueEqToJSON(valueEq: ValueEq): string;
export declare function valueEqFromJSON(jsonString: string): SafeParseResult<ValueEq, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentValue2$inboundSchema: z.ZodType<CreateDeploymentValue2, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentValue2$Outbound = {
    eq?: string | number | undefined;
    neq?: string | undefined;
    inc?: Array<string> | undefined;
    ninc?: Array<string> | undefined;
    pre?: string | undefined;
    suf?: string | undefined;
    re?: string | undefined;
    gt?: number | undefined;
    gte?: number | undefined;
    lt?: number | undefined;
    lte?: number | undefined;
};
/** @internal */
export declare const CreateDeploymentValue2$outboundSchema: z.ZodType<CreateDeploymentValue2$Outbound, z.ZodTypeDef, CreateDeploymentValue2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentValue2$ {
    /** @deprecated use `CreateDeploymentValue2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentValue2, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentValue2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentValue2$Outbound, z.ZodTypeDef, CreateDeploymentValue2>;
    /** @deprecated use `CreateDeploymentValue2$Outbound` instead. */
    type Outbound = CreateDeploymentValue2$Outbound;
}
export declare function createDeploymentValue2ToJSON(createDeploymentValue2: CreateDeploymentValue2): string;
export declare function createDeploymentValue2FromJSON(jsonString: string): SafeParseResult<CreateDeploymentValue2, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentHasDeploymentsValue$inboundSchema: z.ZodType<CreateDeploymentHasDeploymentsValue, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentHasDeploymentsValue$Outbound = CreateDeploymentValue2$Outbound | string;
/** @internal */
export declare const CreateDeploymentHasDeploymentsValue$outboundSchema: z.ZodType<CreateDeploymentHasDeploymentsValue$Outbound, z.ZodTypeDef, CreateDeploymentHasDeploymentsValue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentHasDeploymentsValue$ {
    /** @deprecated use `CreateDeploymentHasDeploymentsValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentHasDeploymentsValue, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentHasDeploymentsValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentHasDeploymentsValue$Outbound, z.ZodTypeDef, CreateDeploymentHasDeploymentsValue>;
    /** @deprecated use `CreateDeploymentHasDeploymentsValue$Outbound` instead. */
    type Outbound = CreateDeploymentHasDeploymentsValue$Outbound;
}
export declare function createDeploymentHasDeploymentsValueToJSON(createDeploymentHasDeploymentsValue: CreateDeploymentHasDeploymentsValue): string;
export declare function createDeploymentHasDeploymentsValueFromJSON(jsonString: string): SafeParseResult<CreateDeploymentHasDeploymentsValue, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentHas2$inboundSchema: z.ZodType<CreateDeploymentHas2, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentHas2$Outbound = {
    type: string;
    key: string;
    value?: CreateDeploymentValue2$Outbound | string | undefined;
};
/** @internal */
export declare const CreateDeploymentHas2$outboundSchema: z.ZodType<CreateDeploymentHas2$Outbound, z.ZodTypeDef, CreateDeploymentHas2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentHas2$ {
    /** @deprecated use `CreateDeploymentHas2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentHas2, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentHas2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentHas2$Outbound, z.ZodTypeDef, CreateDeploymentHas2>;
    /** @deprecated use `CreateDeploymentHas2$Outbound` instead. */
    type Outbound = CreateDeploymentHas2$Outbound;
}
export declare function createDeploymentHas2ToJSON(createDeploymentHas2: CreateDeploymentHas2): string;
export declare function createDeploymentHas2FromJSON(jsonString: string): SafeParseResult<CreateDeploymentHas2, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentHasType$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentHasType>;
/** @internal */
export declare const CreateDeploymentHasType$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentHasType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentHasType$ {
    /** @deprecated use `CreateDeploymentHasType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Host: "host";
    }>;
    /** @deprecated use `CreateDeploymentHasType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Host: "host";
    }>;
}
/** @internal */
export declare const Eq$inboundSchema: z.ZodType<Eq, z.ZodTypeDef, unknown>;
/** @internal */
export type Eq$Outbound = string | number;
/** @internal */
export declare const Eq$outboundSchema: z.ZodType<Eq$Outbound, z.ZodTypeDef, Eq>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Eq$ {
    /** @deprecated use `Eq$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Eq, z.ZodTypeDef, unknown>;
    /** @deprecated use `Eq$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Eq$Outbound, z.ZodTypeDef, Eq>;
    /** @deprecated use `Eq$Outbound` instead. */
    type Outbound = Eq$Outbound;
}
export declare function eqToJSON(eq: Eq): string;
export declare function eqFromJSON(jsonString: string): SafeParseResult<Eq, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentValueDeploymentsResponse2002$inboundSchema: z.ZodType<CreateDeploymentValueDeploymentsResponse2002, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentValueDeploymentsResponse2002$Outbound = {
    eq?: string | number | undefined;
    neq?: string | undefined;
    inc?: Array<string> | undefined;
    ninc?: Array<string> | undefined;
    pre?: string | undefined;
    suf?: string | undefined;
    re?: string | undefined;
    gt?: number | undefined;
    gte?: number | undefined;
    lt?: number | undefined;
    lte?: number | undefined;
};
/** @internal */
export declare const CreateDeploymentValueDeploymentsResponse2002$outboundSchema: z.ZodType<CreateDeploymentValueDeploymentsResponse2002$Outbound, z.ZodTypeDef, CreateDeploymentValueDeploymentsResponse2002>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentValueDeploymentsResponse2002$ {
    /** @deprecated use `CreateDeploymentValueDeploymentsResponse2002$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentValueDeploymentsResponse2002, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentValueDeploymentsResponse2002$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentValueDeploymentsResponse2002$Outbound, z.ZodTypeDef, CreateDeploymentValueDeploymentsResponse2002>;
    /** @deprecated use `CreateDeploymentValueDeploymentsResponse2002$Outbound` instead. */
    type Outbound = CreateDeploymentValueDeploymentsResponse2002$Outbound;
}
export declare function createDeploymentValueDeploymentsResponse2002ToJSON(createDeploymentValueDeploymentsResponse2002: CreateDeploymentValueDeploymentsResponse2002): string;
export declare function createDeploymentValueDeploymentsResponse2002FromJSON(jsonString: string): SafeParseResult<CreateDeploymentValueDeploymentsResponse2002, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentHasValue$inboundSchema: z.ZodType<CreateDeploymentHasValue, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentHasValue$Outbound = CreateDeploymentValueDeploymentsResponse2002$Outbound | string;
/** @internal */
export declare const CreateDeploymentHasValue$outboundSchema: z.ZodType<CreateDeploymentHasValue$Outbound, z.ZodTypeDef, CreateDeploymentHasValue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentHasValue$ {
    /** @deprecated use `CreateDeploymentHasValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentHasValue, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentHasValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentHasValue$Outbound, z.ZodTypeDef, CreateDeploymentHasValue>;
    /** @deprecated use `CreateDeploymentHasValue$Outbound` instead. */
    type Outbound = CreateDeploymentHasValue$Outbound;
}
export declare function createDeploymentHasValueToJSON(createDeploymentHasValue: CreateDeploymentHasValue): string;
export declare function createDeploymentHasValueFromJSON(jsonString: string): SafeParseResult<CreateDeploymentHasValue, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentHas1$inboundSchema: z.ZodType<CreateDeploymentHas1, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentHas1$Outbound = {
    type: string;
    value: CreateDeploymentValueDeploymentsResponse2002$Outbound | string;
};
/** @internal */
export declare const CreateDeploymentHas1$outboundSchema: z.ZodType<CreateDeploymentHas1$Outbound, z.ZodTypeDef, CreateDeploymentHas1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentHas1$ {
    /** @deprecated use `CreateDeploymentHas1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentHas1, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentHas1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentHas1$Outbound, z.ZodTypeDef, CreateDeploymentHas1>;
    /** @deprecated use `CreateDeploymentHas1$Outbound` instead. */
    type Outbound = CreateDeploymentHas1$Outbound;
}
export declare function createDeploymentHas1ToJSON(createDeploymentHas1: CreateDeploymentHas1): string;
export declare function createDeploymentHas1FromJSON(jsonString: string): SafeParseResult<CreateDeploymentHas1, SDKValidationError>;
/** @internal */
export declare const RoutesHas$inboundSchema: z.ZodType<RoutesHas, z.ZodTypeDef, unknown>;
/** @internal */
export type RoutesHas$Outbound = CreateDeploymentHas1$Outbound | CreateDeploymentHas2$Outbound;
/** @internal */
export declare const RoutesHas$outboundSchema: z.ZodType<RoutesHas$Outbound, z.ZodTypeDef, RoutesHas>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RoutesHas$ {
    /** @deprecated use `RoutesHas$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RoutesHas, z.ZodTypeDef, unknown>;
    /** @deprecated use `RoutesHas$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RoutesHas$Outbound, z.ZodTypeDef, RoutesHas>;
    /** @deprecated use `RoutesHas$Outbound` instead. */
    type Outbound = RoutesHas$Outbound;
}
export declare function routesHasToJSON(routesHas: RoutesHas): string;
export declare function routesHasFromJSON(jsonString: string): SafeParseResult<RoutesHas, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentMissingType$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentMissingType>;
/** @internal */
export declare const CreateDeploymentMissingType$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentMissingType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentMissingType$ {
    /** @deprecated use `CreateDeploymentMissingType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Header: "header";
        readonly Cookie: "cookie";
        readonly Query: "query";
    }>;
    /** @deprecated use `CreateDeploymentMissingType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Header: "header";
        readonly Cookie: "cookie";
        readonly Query: "query";
    }>;
}
/** @internal */
export declare const CreateDeploymentValueDeploymentsEq$inboundSchema: z.ZodType<CreateDeploymentValueDeploymentsEq, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentValueDeploymentsEq$Outbound = string | number;
/** @internal */
export declare const CreateDeploymentValueDeploymentsEq$outboundSchema: z.ZodType<CreateDeploymentValueDeploymentsEq$Outbound, z.ZodTypeDef, CreateDeploymentValueDeploymentsEq>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentValueDeploymentsEq$ {
    /** @deprecated use `CreateDeploymentValueDeploymentsEq$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentValueDeploymentsEq, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentValueDeploymentsEq$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentValueDeploymentsEq$Outbound, z.ZodTypeDef, CreateDeploymentValueDeploymentsEq>;
    /** @deprecated use `CreateDeploymentValueDeploymentsEq$Outbound` instead. */
    type Outbound = CreateDeploymentValueDeploymentsEq$Outbound;
}
export declare function createDeploymentValueDeploymentsEqToJSON(createDeploymentValueDeploymentsEq: CreateDeploymentValueDeploymentsEq): string;
export declare function createDeploymentValueDeploymentsEqFromJSON(jsonString: string): SafeParseResult<CreateDeploymentValueDeploymentsEq, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentValueDeploymentsResponse2$inboundSchema: z.ZodType<CreateDeploymentValueDeploymentsResponse2, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentValueDeploymentsResponse2$Outbound = {
    eq?: string | number | undefined;
    neq?: string | undefined;
    inc?: Array<string> | undefined;
    ninc?: Array<string> | undefined;
    pre?: string | undefined;
    suf?: string | undefined;
    re?: string | undefined;
    gt?: number | undefined;
    gte?: number | undefined;
    lt?: number | undefined;
    lte?: number | undefined;
};
/** @internal */
export declare const CreateDeploymentValueDeploymentsResponse2$outboundSchema: z.ZodType<CreateDeploymentValueDeploymentsResponse2$Outbound, z.ZodTypeDef, CreateDeploymentValueDeploymentsResponse2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentValueDeploymentsResponse2$ {
    /** @deprecated use `CreateDeploymentValueDeploymentsResponse2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentValueDeploymentsResponse2, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentValueDeploymentsResponse2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentValueDeploymentsResponse2$Outbound, z.ZodTypeDef, CreateDeploymentValueDeploymentsResponse2>;
    /** @deprecated use `CreateDeploymentValueDeploymentsResponse2$Outbound` instead. */
    type Outbound = CreateDeploymentValueDeploymentsResponse2$Outbound;
}
export declare function createDeploymentValueDeploymentsResponse2ToJSON(createDeploymentValueDeploymentsResponse2: CreateDeploymentValueDeploymentsResponse2): string;
export declare function createDeploymentValueDeploymentsResponse2FromJSON(jsonString: string): SafeParseResult<CreateDeploymentValueDeploymentsResponse2, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentMissingValue$inboundSchema: z.ZodType<CreateDeploymentMissingValue, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentMissingValue$Outbound = CreateDeploymentValueDeploymentsResponse2$Outbound | string;
/** @internal */
export declare const CreateDeploymentMissingValue$outboundSchema: z.ZodType<CreateDeploymentMissingValue$Outbound, z.ZodTypeDef, CreateDeploymentMissingValue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentMissingValue$ {
    /** @deprecated use `CreateDeploymentMissingValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentMissingValue, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentMissingValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentMissingValue$Outbound, z.ZodTypeDef, CreateDeploymentMissingValue>;
    /** @deprecated use `CreateDeploymentMissingValue$Outbound` instead. */
    type Outbound = CreateDeploymentMissingValue$Outbound;
}
export declare function createDeploymentMissingValueToJSON(createDeploymentMissingValue: CreateDeploymentMissingValue): string;
export declare function createDeploymentMissingValueFromJSON(jsonString: string): SafeParseResult<CreateDeploymentMissingValue, SDKValidationError>;
/** @internal */
export declare const Missing2$inboundSchema: z.ZodType<Missing2, z.ZodTypeDef, unknown>;
/** @internal */
export type Missing2$Outbound = {
    type: string;
    key: string;
    value?: CreateDeploymentValueDeploymentsResponse2$Outbound | string | undefined;
};
/** @internal */
export declare const Missing2$outboundSchema: z.ZodType<Missing2$Outbound, z.ZodTypeDef, Missing2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Missing2$ {
    /** @deprecated use `Missing2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Missing2, z.ZodTypeDef, unknown>;
    /** @deprecated use `Missing2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Missing2$Outbound, z.ZodTypeDef, Missing2>;
    /** @deprecated use `Missing2$Outbound` instead. */
    type Outbound = Missing2$Outbound;
}
export declare function missing2ToJSON(missing2: Missing2): string;
export declare function missing2FromJSON(jsonString: string): SafeParseResult<Missing2, SDKValidationError>;
/** @internal */
export declare const MissingType$inboundSchema: z.ZodNativeEnum<typeof MissingType>;
/** @internal */
export declare const MissingType$outboundSchema: z.ZodNativeEnum<typeof MissingType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MissingType$ {
    /** @deprecated use `MissingType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Host: "host";
    }>;
    /** @deprecated use `MissingType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Host: "host";
    }>;
}
/** @internal */
export declare const CreateDeploymentValueEq$inboundSchema: z.ZodType<CreateDeploymentValueEq, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentValueEq$Outbound = string | number;
/** @internal */
export declare const CreateDeploymentValueEq$outboundSchema: z.ZodType<CreateDeploymentValueEq$Outbound, z.ZodTypeDef, CreateDeploymentValueEq>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentValueEq$ {
    /** @deprecated use `CreateDeploymentValueEq$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentValueEq, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentValueEq$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentValueEq$Outbound, z.ZodTypeDef, CreateDeploymentValueEq>;
    /** @deprecated use `CreateDeploymentValueEq$Outbound` instead. */
    type Outbound = CreateDeploymentValueEq$Outbound;
}
export declare function createDeploymentValueEqToJSON(createDeploymentValueEq: CreateDeploymentValueEq): string;
export declare function createDeploymentValueEqFromJSON(jsonString: string): SafeParseResult<CreateDeploymentValueEq, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentValueDeployments2$inboundSchema: z.ZodType<CreateDeploymentValueDeployments2, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentValueDeployments2$Outbound = {
    eq?: string | number | undefined;
    neq?: string | undefined;
    inc?: Array<string> | undefined;
    ninc?: Array<string> | undefined;
    pre?: string | undefined;
    suf?: string | undefined;
    re?: string | undefined;
    gt?: number | undefined;
    gte?: number | undefined;
    lt?: number | undefined;
    lte?: number | undefined;
};
/** @internal */
export declare const CreateDeploymentValueDeployments2$outboundSchema: z.ZodType<CreateDeploymentValueDeployments2$Outbound, z.ZodTypeDef, CreateDeploymentValueDeployments2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentValueDeployments2$ {
    /** @deprecated use `CreateDeploymentValueDeployments2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentValueDeployments2, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentValueDeployments2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentValueDeployments2$Outbound, z.ZodTypeDef, CreateDeploymentValueDeployments2>;
    /** @deprecated use `CreateDeploymentValueDeployments2$Outbound` instead. */
    type Outbound = CreateDeploymentValueDeployments2$Outbound;
}
export declare function createDeploymentValueDeployments2ToJSON(createDeploymentValueDeployments2: CreateDeploymentValueDeployments2): string;
export declare function createDeploymentValueDeployments2FromJSON(jsonString: string): SafeParseResult<CreateDeploymentValueDeployments2, SDKValidationError>;
/** @internal */
export declare const MissingValue$inboundSchema: z.ZodType<MissingValue, z.ZodTypeDef, unknown>;
/** @internal */
export type MissingValue$Outbound = CreateDeploymentValueDeployments2$Outbound | string;
/** @internal */
export declare const MissingValue$outboundSchema: z.ZodType<MissingValue$Outbound, z.ZodTypeDef, MissingValue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MissingValue$ {
    /** @deprecated use `MissingValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<MissingValue, z.ZodTypeDef, unknown>;
    /** @deprecated use `MissingValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<MissingValue$Outbound, z.ZodTypeDef, MissingValue>;
    /** @deprecated use `MissingValue$Outbound` instead. */
    type Outbound = MissingValue$Outbound;
}
export declare function missingValueToJSON(missingValue: MissingValue): string;
export declare function missingValueFromJSON(jsonString: string): SafeParseResult<MissingValue, SDKValidationError>;
/** @internal */
export declare const Missing1$inboundSchema: z.ZodType<Missing1, z.ZodTypeDef, unknown>;
/** @internal */
export type Missing1$Outbound = {
    type: string;
    value: CreateDeploymentValueDeployments2$Outbound | string;
};
/** @internal */
export declare const Missing1$outboundSchema: z.ZodType<Missing1$Outbound, z.ZodTypeDef, Missing1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Missing1$ {
    /** @deprecated use `Missing1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Missing1, z.ZodTypeDef, unknown>;
    /** @deprecated use `Missing1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Missing1$Outbound, z.ZodTypeDef, Missing1>;
    /** @deprecated use `Missing1$Outbound` instead. */
    type Outbound = Missing1$Outbound;
}
export declare function missing1ToJSON(missing1: Missing1): string;
export declare function missing1FromJSON(jsonString: string): SafeParseResult<Missing1, SDKValidationError>;
/** @internal */
export declare const Missing$inboundSchema: z.ZodType<Missing, z.ZodTypeDef, unknown>;
/** @internal */
export type Missing$Outbound = Missing1$Outbound | Missing2$Outbound;
/** @internal */
export declare const Missing$outboundSchema: z.ZodType<Missing$Outbound, z.ZodTypeDef, Missing>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Missing$ {
    /** @deprecated use `Missing$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Missing, z.ZodTypeDef, unknown>;
    /** @deprecated use `Missing$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Missing$Outbound, z.ZodTypeDef, Missing>;
    /** @deprecated use `Missing$Outbound` instead. */
    type Outbound = Missing$Outbound;
}
export declare function missingToJSON(missing: Missing): string;
export declare function missingFromJSON(jsonString: string): SafeParseResult<Missing, SDKValidationError>;
/** @internal */
export declare const RoutesAction$inboundSchema: z.ZodNativeEnum<typeof RoutesAction>;
/** @internal */
export declare const RoutesAction$outboundSchema: z.ZodNativeEnum<typeof RoutesAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RoutesAction$ {
    /** @deprecated use `RoutesAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Challenge: "challenge";
        readonly Deny: "deny";
    }>;
    /** @deprecated use `RoutesAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Challenge: "challenge";
        readonly Deny: "deny";
    }>;
}
/** @internal */
export declare const RoutesMitigate$inboundSchema: z.ZodType<RoutesMitigate, z.ZodTypeDef, unknown>;
/** @internal */
export type RoutesMitigate$Outbound = {
    action: string;
};
/** @internal */
export declare const RoutesMitigate$outboundSchema: z.ZodType<RoutesMitigate$Outbound, z.ZodTypeDef, RoutesMitigate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RoutesMitigate$ {
    /** @deprecated use `RoutesMitigate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RoutesMitigate, z.ZodTypeDef, unknown>;
    /** @deprecated use `RoutesMitigate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RoutesMitigate$Outbound, z.ZodTypeDef, RoutesMitigate>;
    /** @deprecated use `RoutesMitigate$Outbound` instead. */
    type Outbound = RoutesMitigate$Outbound;
}
export declare function routesMitigateToJSON(routesMitigate: RoutesMitigate): string;
export declare function routesMitigateFromJSON(jsonString: string): SafeParseResult<RoutesMitigate, SDKValidationError>;
/** @internal */
export declare const RoutesType$inboundSchema: z.ZodNativeEnum<typeof RoutesType>;
/** @internal */
export declare const RoutesType$outboundSchema: z.ZodNativeEnum<typeof RoutesType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RoutesType$ {
    /** @deprecated use `RoutesType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly RequestHeaders: "request.headers";
        readonly RequestQuery: "request.query";
        readonly ResponseHeaders: "response.headers";
    }>;
    /** @deprecated use `RoutesType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly RequestHeaders: "request.headers";
        readonly RequestQuery: "request.query";
        readonly ResponseHeaders: "response.headers";
    }>;
}
/** @internal */
export declare const CreateDeploymentRoutesOp$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentRoutesOp>;
/** @internal */
export declare const CreateDeploymentRoutesOp$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentRoutesOp>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentRoutesOp$ {
    /** @deprecated use `CreateDeploymentRoutesOp$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Append: "append";
        readonly Set: "set";
        readonly Delete: "delete";
    }>;
    /** @deprecated use `CreateDeploymentRoutesOp$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Append: "append";
        readonly Set: "set";
        readonly Delete: "delete";
    }>;
}
/** @internal */
export declare const KeyEq$inboundSchema: z.ZodType<KeyEq, z.ZodTypeDef, unknown>;
/** @internal */
export type KeyEq$Outbound = string | number;
/** @internal */
export declare const KeyEq$outboundSchema: z.ZodType<KeyEq$Outbound, z.ZodTypeDef, KeyEq>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace KeyEq$ {
    /** @deprecated use `KeyEq$inboundSchema` instead. */
    const inboundSchema: z.ZodType<KeyEq, z.ZodTypeDef, unknown>;
    /** @deprecated use `KeyEq$outboundSchema` instead. */
    const outboundSchema: z.ZodType<KeyEq$Outbound, z.ZodTypeDef, KeyEq>;
    /** @deprecated use `KeyEq$Outbound` instead. */
    type Outbound = KeyEq$Outbound;
}
export declare function keyEqToJSON(keyEq: KeyEq): string;
export declare function keyEqFromJSON(jsonString: string): SafeParseResult<KeyEq, SDKValidationError>;
/** @internal */
export declare const Key2$inboundSchema: z.ZodType<Key2, z.ZodTypeDef, unknown>;
/** @internal */
export type Key2$Outbound = {
    eq?: string | number | undefined;
    neq?: string | undefined;
    inc?: Array<string> | undefined;
    ninc?: Array<string> | undefined;
    pre?: string | undefined;
    suf?: string | undefined;
    gt?: number | undefined;
    gte?: number | undefined;
    lt?: number | undefined;
    lte?: number | undefined;
};
/** @internal */
export declare const Key2$outboundSchema: z.ZodType<Key2$Outbound, z.ZodTypeDef, Key2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Key2$ {
    /** @deprecated use `Key2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Key2, z.ZodTypeDef, unknown>;
    /** @deprecated use `Key2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Key2$Outbound, z.ZodTypeDef, Key2>;
    /** @deprecated use `Key2$Outbound` instead. */
    type Outbound = Key2$Outbound;
}
export declare function key2ToJSON(key2: Key2): string;
export declare function key2FromJSON(jsonString: string): SafeParseResult<Key2, SDKValidationError>;
/** @internal */
export declare const RoutesKey$inboundSchema: z.ZodType<RoutesKey, z.ZodTypeDef, unknown>;
/** @internal */
export type RoutesKey$Outbound = Key2$Outbound | string;
/** @internal */
export declare const RoutesKey$outboundSchema: z.ZodType<RoutesKey$Outbound, z.ZodTypeDef, RoutesKey>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RoutesKey$ {
    /** @deprecated use `RoutesKey$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RoutesKey, z.ZodTypeDef, unknown>;
    /** @deprecated use `RoutesKey$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RoutesKey$Outbound, z.ZodTypeDef, RoutesKey>;
    /** @deprecated use `RoutesKey$Outbound` instead. */
    type Outbound = RoutesKey$Outbound;
}
export declare function routesKeyToJSON(routesKey: RoutesKey): string;
export declare function routesKeyFromJSON(jsonString: string): SafeParseResult<RoutesKey, SDKValidationError>;
/** @internal */
export declare const RoutesTarget$inboundSchema: z.ZodType<RoutesTarget, z.ZodTypeDef, unknown>;
/** @internal */
export type RoutesTarget$Outbound = {
    key: Key2$Outbound | string;
};
/** @internal */
export declare const RoutesTarget$outboundSchema: z.ZodType<RoutesTarget$Outbound, z.ZodTypeDef, RoutesTarget>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RoutesTarget$ {
    /** @deprecated use `RoutesTarget$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RoutesTarget, z.ZodTypeDef, unknown>;
    /** @deprecated use `RoutesTarget$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RoutesTarget$Outbound, z.ZodTypeDef, RoutesTarget>;
    /** @deprecated use `RoutesTarget$Outbound` instead. */
    type Outbound = RoutesTarget$Outbound;
}
export declare function routesTargetToJSON(routesTarget: RoutesTarget): string;
export declare function routesTargetFromJSON(jsonString: string): SafeParseResult<RoutesTarget, SDKValidationError>;
/** @internal */
export declare const Args$inboundSchema: z.ZodType<Args, z.ZodTypeDef, unknown>;
/** @internal */
export type Args$Outbound = string | Array<string>;
/** @internal */
export declare const Args$outboundSchema: z.ZodType<Args$Outbound, z.ZodTypeDef, Args>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Args$ {
    /** @deprecated use `Args$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Args, z.ZodTypeDef, unknown>;
    /** @deprecated use `Args$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Args$Outbound, z.ZodTypeDef, Args>;
    /** @deprecated use `Args$Outbound` instead. */
    type Outbound = Args$Outbound;
}
export declare function argsToJSON(args: Args): string;
export declare function argsFromJSON(jsonString: string): SafeParseResult<Args, SDKValidationError>;
/** @internal */
export declare const Transforms$inboundSchema: z.ZodType<Transforms, z.ZodTypeDef, unknown>;
/** @internal */
export type Transforms$Outbound = {
    type: string;
    op: string;
    target: RoutesTarget$Outbound;
    args?: string | Array<string> | undefined;
};
/** @internal */
export declare const Transforms$outboundSchema: z.ZodType<Transforms$Outbound, z.ZodTypeDef, Transforms>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Transforms$ {
    /** @deprecated use `Transforms$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Transforms, z.ZodTypeDef, unknown>;
    /** @deprecated use `Transforms$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Transforms$Outbound, z.ZodTypeDef, Transforms>;
    /** @deprecated use `Transforms$Outbound` instead. */
    type Outbound = Transforms$Outbound;
}
export declare function transformsToJSON(transforms: Transforms): string;
export declare function transformsFromJSON(jsonString: string): SafeParseResult<Transforms, SDKValidationError>;
/** @internal */
export declare const Locale$inboundSchema: z.ZodType<Locale, z.ZodTypeDef, unknown>;
/** @internal */
export type Locale$Outbound = {
    redirect?: {
        [k: string]: string;
    } | undefined;
    cookie?: string | undefined;
};
/** @internal */
export declare const Locale$outboundSchema: z.ZodType<Locale$Outbound, z.ZodTypeDef, Locale>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Locale$ {
    /** @deprecated use `Locale$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Locale, z.ZodTypeDef, unknown>;
    /** @deprecated use `Locale$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Locale$Outbound, z.ZodTypeDef, Locale>;
    /** @deprecated use `Locale$Outbound` instead. */
    type Outbound = Locale$Outbound;
}
export declare function localeToJSON(locale: Locale): string;
export declare function localeFromJSON(jsonString: string): SafeParseResult<Locale, SDKValidationError>;
/** @internal */
export declare const Routes1$inboundSchema: z.ZodType<Routes1, z.ZodTypeDef, unknown>;
/** @internal */
export type Routes1$Outbound = {
    src: string;
    dest?: string | undefined;
    headers?: {
        [k: string]: string;
    } | undefined;
    methods?: Array<string> | undefined;
    continue?: boolean | undefined;
    override?: boolean | undefined;
    caseSensitive?: boolean | undefined;
    check?: boolean | undefined;
    important?: boolean | undefined;
    status?: number | undefined;
    has?: Array<CreateDeploymentHas1$Outbound | CreateDeploymentHas2$Outbound> | undefined;
    missing?: Array<Missing1$Outbound | Missing2$Outbound> | undefined;
    mitigate?: RoutesMitigate$Outbound | undefined;
    transforms?: Array<Transforms$Outbound> | undefined;
    locale?: Locale$Outbound | undefined;
    middlewarePath?: string | undefined;
    middlewareRawSrc?: Array<string> | undefined;
    middleware?: number | undefined;
};
/** @internal */
export declare const Routes1$outboundSchema: z.ZodType<Routes1$Outbound, z.ZodTypeDef, Routes1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Routes1$ {
    /** @deprecated use `Routes1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Routes1, z.ZodTypeDef, unknown>;
    /** @deprecated use `Routes1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Routes1$Outbound, z.ZodTypeDef, Routes1>;
    /** @deprecated use `Routes1$Outbound` instead. */
    type Outbound = Routes1$Outbound;
}
export declare function routes1ToJSON(routes1: Routes1): string;
export declare function routes1FromJSON(jsonString: string): SafeParseResult<Routes1, SDKValidationError>;
/** @internal */
export declare const Routes$inboundSchema: z.ZodType<Routes, z.ZodTypeDef, unknown>;
/** @internal */
export type Routes$Outbound = Routes3$Outbound | Routes1$Outbound | Routes2$Outbound;
/** @internal */
export declare const Routes$outboundSchema: z.ZodType<Routes$Outbound, z.ZodTypeDef, Routes>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Routes$ {
    /** @deprecated use `Routes$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Routes, z.ZodTypeDef, unknown>;
    /** @deprecated use `Routes$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Routes$Outbound, z.ZodTypeDef, Routes>;
    /** @deprecated use `Routes$Outbound` instead. */
    type Outbound = Routes$Outbound;
}
export declare function routesToJSON(routes: Routes): string;
export declare function routesFromJSON(jsonString: string): SafeParseResult<Routes, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentCrons$inboundSchema: z.ZodType<CreateDeploymentCrons, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentCrons$Outbound = {
    schedule: string;
    path: string;
};
/** @internal */
export declare const CreateDeploymentCrons$outboundSchema: z.ZodType<CreateDeploymentCrons$Outbound, z.ZodTypeDef, CreateDeploymentCrons>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentCrons$ {
    /** @deprecated use `CreateDeploymentCrons$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentCrons, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentCrons$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentCrons$Outbound, z.ZodTypeDef, CreateDeploymentCrons>;
    /** @deprecated use `CreateDeploymentCrons$Outbound` instead. */
    type Outbound = CreateDeploymentCrons$Outbound;
}
export declare function createDeploymentCronsToJSON(createDeploymentCrons: CreateDeploymentCrons): string;
export declare function createDeploymentCronsFromJSON(jsonString: string): SafeParseResult<CreateDeploymentCrons, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentState$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentState>;
/** @internal */
export declare const CreateDeploymentState$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentState$ {
    /** @deprecated use `CreateDeploymentState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Succeeded: "succeeded";
        readonly Failed: "failed";
        readonly Pending: "pending";
    }>;
    /** @deprecated use `CreateDeploymentState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Succeeded: "succeeded";
        readonly Failed: "failed";
        readonly Pending: "pending";
    }>;
}
/** @internal */
export declare const DeploymentAlias$inboundSchema: z.ZodType<DeploymentAlias, z.ZodTypeDef, unknown>;
/** @internal */
export type DeploymentAlias$Outbound = {
    state: string;
    startedAt: number;
    completedAt?: number | undefined;
};
/** @internal */
export declare const DeploymentAlias$outboundSchema: z.ZodType<DeploymentAlias$Outbound, z.ZodTypeDef, DeploymentAlias>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace DeploymentAlias$ {
    /** @deprecated use `DeploymentAlias$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DeploymentAlias, z.ZodTypeDef, unknown>;
    /** @deprecated use `DeploymentAlias$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DeploymentAlias$Outbound, z.ZodTypeDef, DeploymentAlias>;
    /** @deprecated use `DeploymentAlias$Outbound` instead. */
    type Outbound = DeploymentAlias$Outbound;
}
export declare function deploymentAliasToJSON(deploymentAlias: DeploymentAlias): string;
export declare function deploymentAliasFromJSON(jsonString: string): SafeParseResult<DeploymentAlias, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentChecks$inboundSchema: z.ZodType<CreateDeploymentChecks, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentChecks$Outbound = {
    "deployment-alias": DeploymentAlias$Outbound;
};
/** @internal */
export declare const CreateDeploymentChecks$outboundSchema: z.ZodType<CreateDeploymentChecks$Outbound, z.ZodTypeDef, CreateDeploymentChecks>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentChecks$ {
    /** @deprecated use `CreateDeploymentChecks$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentChecks, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentChecks$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentChecks$Outbound, z.ZodTypeDef, CreateDeploymentChecks>;
    /** @deprecated use `CreateDeploymentChecks$Outbound` instead. */
    type Outbound = CreateDeploymentChecks$Outbound;
}
export declare function createDeploymentChecksToJSON(createDeploymentChecks: CreateDeploymentChecks): string;
export declare function createDeploymentChecksFromJSON(jsonString: string): SafeParseResult<CreateDeploymentChecks, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentMicrofrontendsApplications$inboundSchema: z.ZodType<CreateDeploymentMicrofrontendsApplications, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentMicrofrontendsApplications$Outbound = {
    isDefaultApp?: boolean | undefined;
    productionHost: string;
    deploymentAlias?: string | undefined;
    deploymentHost?: string | undefined;
};
/** @internal */
export declare const CreateDeploymentMicrofrontendsApplications$outboundSchema: z.ZodType<CreateDeploymentMicrofrontendsApplications$Outbound, z.ZodTypeDef, CreateDeploymentMicrofrontendsApplications>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentMicrofrontendsApplications$ {
    /** @deprecated use `CreateDeploymentMicrofrontendsApplications$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentMicrofrontendsApplications, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentMicrofrontendsApplications$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentMicrofrontendsApplications$Outbound, z.ZodTypeDef, CreateDeploymentMicrofrontendsApplications>;
    /** @deprecated use `CreateDeploymentMicrofrontendsApplications$Outbound` instead. */
    type Outbound = CreateDeploymentMicrofrontendsApplications$Outbound;
}
export declare function createDeploymentMicrofrontendsApplicationsToJSON(createDeploymentMicrofrontendsApplications: CreateDeploymentMicrofrontendsApplications): string;
export declare function createDeploymentMicrofrontendsApplicationsFromJSON(jsonString: string): SafeParseResult<CreateDeploymentMicrofrontendsApplications, SDKValidationError>;
/** @internal */
export declare const MfeConfigUploadState$inboundSchema: z.ZodNativeEnum<typeof MfeConfigUploadState>;
/** @internal */
export declare const MfeConfigUploadState$outboundSchema: z.ZodNativeEnum<typeof MfeConfigUploadState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MfeConfigUploadState$ {
    /** @deprecated use `MfeConfigUploadState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Error: "error";
        readonly Success: "success";
        readonly NoConfig: "no_config";
    }>;
    /** @deprecated use `MfeConfigUploadState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Error: "error";
        readonly Success: "success";
        readonly NoConfig: "no_config";
    }>;
}
/** @internal */
export declare const CreateDeploymentMicrofrontends2$inboundSchema: z.ZodType<CreateDeploymentMicrofrontends2, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentMicrofrontends2$Outbound = {
    isDefaultApp: boolean;
    applications?: {
        [k: string]: CreateDeploymentMicrofrontendsApplications$Outbound;
    } | undefined;
    mfeConfigUploadState?: string | undefined;
    defaultAppProjectName: string;
    defaultRoute?: string | undefined;
    groupIds: Array<string>;
    microfrontendsAlias2Enabled?: boolean | undefined;
};
/** @internal */
export declare const CreateDeploymentMicrofrontends2$outboundSchema: z.ZodType<CreateDeploymentMicrofrontends2$Outbound, z.ZodTypeDef, CreateDeploymentMicrofrontends2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentMicrofrontends2$ {
    /** @deprecated use `CreateDeploymentMicrofrontends2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentMicrofrontends2, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentMicrofrontends2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentMicrofrontends2$Outbound, z.ZodTypeDef, CreateDeploymentMicrofrontends2>;
    /** @deprecated use `CreateDeploymentMicrofrontends2$Outbound` instead. */
    type Outbound = CreateDeploymentMicrofrontends2$Outbound;
}
export declare function createDeploymentMicrofrontends2ToJSON(createDeploymentMicrofrontends2: CreateDeploymentMicrofrontends2): string;
export declare function createDeploymentMicrofrontends2FromJSON(jsonString: string): SafeParseResult<CreateDeploymentMicrofrontends2, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentMicrofrontends1$inboundSchema: z.ZodType<CreateDeploymentMicrofrontends1, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentMicrofrontends1$Outbound = {
    isDefaultApp?: boolean | undefined;
    defaultAppProjectName: string;
    defaultRoute?: string | undefined;
    groupIds: Array<string>;
    microfrontendsAlias2Enabled?: boolean | undefined;
};
/** @internal */
export declare const CreateDeploymentMicrofrontends1$outboundSchema: z.ZodType<CreateDeploymentMicrofrontends1$Outbound, z.ZodTypeDef, CreateDeploymentMicrofrontends1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentMicrofrontends1$ {
    /** @deprecated use `CreateDeploymentMicrofrontends1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentMicrofrontends1, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentMicrofrontends1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentMicrofrontends1$Outbound, z.ZodTypeDef, CreateDeploymentMicrofrontends1>;
    /** @deprecated use `CreateDeploymentMicrofrontends1$Outbound` instead. */
    type Outbound = CreateDeploymentMicrofrontends1$Outbound;
}
export declare function createDeploymentMicrofrontends1ToJSON(createDeploymentMicrofrontends1: CreateDeploymentMicrofrontends1): string;
export declare function createDeploymentMicrofrontends1FromJSON(jsonString: string): SafeParseResult<CreateDeploymentMicrofrontends1, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentMicrofrontends$inboundSchema: z.ZodType<CreateDeploymentMicrofrontends, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentMicrofrontends$Outbound = CreateDeploymentMicrofrontends2$Outbound | CreateDeploymentMicrofrontends1$Outbound;
/** @internal */
export declare const CreateDeploymentMicrofrontends$outboundSchema: z.ZodType<CreateDeploymentMicrofrontends$Outbound, z.ZodTypeDef, CreateDeploymentMicrofrontends>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentMicrofrontends$ {
    /** @deprecated use `CreateDeploymentMicrofrontends$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentMicrofrontends, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentMicrofrontends$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentMicrofrontends$Outbound, z.ZodTypeDef, CreateDeploymentMicrofrontends>;
    /** @deprecated use `CreateDeploymentMicrofrontends$Outbound` instead. */
    type Outbound = CreateDeploymentMicrofrontends$Outbound;
}
export declare function createDeploymentMicrofrontendsToJSON(createDeploymentMicrofrontends: CreateDeploymentMicrofrontends): string;
export declare function createDeploymentMicrofrontendsFromJSON(jsonString: string): SafeParseResult<CreateDeploymentMicrofrontends, SDKValidationError>;
/** @internal */
export declare const Flags2$inboundSchema: z.ZodType<Flags2, z.ZodTypeDef, unknown>;
/** @internal */
export type Flags2$Outbound = {};
/** @internal */
export declare const Flags2$outboundSchema: z.ZodType<Flags2$Outbound, z.ZodTypeDef, Flags2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Flags2$ {
    /** @deprecated use `Flags2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Flags2, z.ZodTypeDef, unknown>;
    /** @deprecated use `Flags2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Flags2$Outbound, z.ZodTypeDef, Flags2>;
    /** @deprecated use `Flags2$Outbound` instead. */
    type Outbound = Flags2$Outbound;
}
export declare function flags2ToJSON(flags2: Flags2): string;
export declare function flags2FromJSON(jsonString: string): SafeParseResult<Flags2, SDKValidationError>;
/** @internal */
export declare const Options$inboundSchema: z.ZodType<Options, z.ZodTypeDef, unknown>;
/** @internal */
export type Options$Outbound = {
    value: FlagJSONValue$Outbound | null;
    label?: string | undefined;
};
/** @internal */
export declare const Options$outboundSchema: z.ZodType<Options$Outbound, z.ZodTypeDef, Options>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Options$ {
    /** @deprecated use `Options$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Options, z.ZodTypeDef, unknown>;
    /** @deprecated use `Options$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Options$Outbound, z.ZodTypeDef, Options>;
    /** @deprecated use `Options$Outbound` instead. */
    type Outbound = Options$Outbound;
}
export declare function optionsToJSON(options: Options): string;
export declare function optionsFromJSON(jsonString: string): SafeParseResult<Options, SDKValidationError>;
/** @internal */
export declare const FlagsDefinitions$inboundSchema: z.ZodType<FlagsDefinitions, z.ZodTypeDef, unknown>;
/** @internal */
export type FlagsDefinitions$Outbound = {
    options?: Array<Options$Outbound> | undefined;
    url?: string | undefined;
    description?: string | undefined;
};
/** @internal */
export declare const FlagsDefinitions$outboundSchema: z.ZodType<FlagsDefinitions$Outbound, z.ZodTypeDef, FlagsDefinitions>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FlagsDefinitions$ {
    /** @deprecated use `FlagsDefinitions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FlagsDefinitions, z.ZodTypeDef, unknown>;
    /** @deprecated use `FlagsDefinitions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FlagsDefinitions$Outbound, z.ZodTypeDef, FlagsDefinitions>;
    /** @deprecated use `FlagsDefinitions$Outbound` instead. */
    type Outbound = FlagsDefinitions$Outbound;
}
export declare function flagsDefinitionsToJSON(flagsDefinitions: FlagsDefinitions): string;
export declare function flagsDefinitionsFromJSON(jsonString: string): SafeParseResult<FlagsDefinitions, SDKValidationError>;
/** @internal */
export declare const Flags1$inboundSchema: z.ZodType<Flags1, z.ZodTypeDef, unknown>;
/** @internal */
export type Flags1$Outbound = {
    definitions: {
        [k: string]: FlagsDefinitions$Outbound;
    };
};
/** @internal */
export declare const Flags1$outboundSchema: z.ZodType<Flags1$Outbound, z.ZodTypeDef, Flags1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Flags1$ {
    /** @deprecated use `Flags1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Flags1, z.ZodTypeDef, unknown>;
    /** @deprecated use `Flags1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Flags1$Outbound, z.ZodTypeDef, Flags1>;
    /** @deprecated use `Flags1$Outbound` instead. */
    type Outbound = Flags1$Outbound;
}
export declare function flags1ToJSON(flags1: Flags1): string;
export declare function flags1FromJSON(jsonString: string): SafeParseResult<Flags1, SDKValidationError>;
/** @internal */
export declare const Flags$inboundSchema: z.ZodType<Flags, z.ZodTypeDef, unknown>;
/** @internal */
export type Flags$Outbound = Flags1$Outbound | Array<Flags2$Outbound>;
/** @internal */
export declare const Flags$outboundSchema: z.ZodType<Flags$Outbound, z.ZodTypeDef, Flags>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Flags$ {
    /** @deprecated use `Flags$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Flags, z.ZodTypeDef, unknown>;
    /** @deprecated use `Flags$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Flags$Outbound, z.ZodTypeDef, Flags>;
    /** @deprecated use `Flags$Outbound` instead. */
    type Outbound = Flags$Outbound;
}
export declare function flagsToJSON(flags: Flags): string;
export declare function flagsFromJSON(jsonString: string): SafeParseResult<Flags, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentGitRepoDeploymentsType$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitRepoDeploymentsType>;
/** @internal */
export declare const CreateDeploymentGitRepoDeploymentsType$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitRepoDeploymentsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitRepoDeploymentsType$ {
    /** @deprecated use `CreateDeploymentGitRepoDeploymentsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
    /** @deprecated use `CreateDeploymentGitRepoDeploymentsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Bitbucket: "bitbucket";
    }>;
}
/** @internal */
export declare const CreateDeploymentGitRepoOwnerType$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitRepoOwnerType>;
/** @internal */
export declare const CreateDeploymentGitRepoOwnerType$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitRepoOwnerType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitRepoOwnerType$ {
    /** @deprecated use `CreateDeploymentGitRepoOwnerType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Team: "team";
        readonly User: "user";
    }>;
    /** @deprecated use `CreateDeploymentGitRepoOwnerType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Team: "team";
        readonly User: "user";
    }>;
}
/** @internal */
export declare const GitRepo3$inboundSchema: z.ZodType<GitRepo3, z.ZodTypeDef, unknown>;
/** @internal */
export type GitRepo3$Outbound = {
    owner: string;
    repoUuid: string;
    slug: string;
    type: string;
    workspaceUuid: string;
    path: string;
    defaultBranch: string;
    name: string;
    private: boolean;
    ownerType: string;
};
/** @internal */
export declare const GitRepo3$outboundSchema: z.ZodType<GitRepo3$Outbound, z.ZodTypeDef, GitRepo3>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GitRepo3$ {
    /** @deprecated use `GitRepo3$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GitRepo3, z.ZodTypeDef, unknown>;
    /** @deprecated use `GitRepo3$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GitRepo3$Outbound, z.ZodTypeDef, GitRepo3>;
    /** @deprecated use `GitRepo3$Outbound` instead. */
    type Outbound = GitRepo3$Outbound;
}
export declare function gitRepo3ToJSON(gitRepo3: GitRepo3): string;
export declare function gitRepo3FromJSON(jsonString: string): SafeParseResult<GitRepo3, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentGitRepoType$inboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitRepoType>;
/** @internal */
export declare const CreateDeploymentGitRepoType$outboundSchema: z.ZodNativeEnum<typeof CreateDeploymentGitRepoType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentGitRepoType$ {
    /** @deprecated use `CreateDeploymentGitRepoType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
    /** @deprecated use `CreateDeploymentGitRepoType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
    }>;
}
/** @internal */
export declare const GitRepoOwnerType$inboundSchema: z.ZodNativeEnum<typeof GitRepoOwnerType>;
/** @internal */
export declare const GitRepoOwnerType$outboundSchema: z.ZodNativeEnum<typeof GitRepoOwnerType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GitRepoOwnerType$ {
    /** @deprecated use `GitRepoOwnerType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Team: "team";
        readonly User: "user";
    }>;
    /** @deprecated use `GitRepoOwnerType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Team: "team";
        readonly User: "user";
    }>;
}
/** @internal */
export declare const GitRepo2$inboundSchema: z.ZodType<GitRepo2, z.ZodTypeDef, unknown>;
/** @internal */
export type GitRepo2$Outbound = {
    org: string;
    repo: string;
    repoId: number;
    type: string;
    repoOwnerId: number;
    path: string;
    defaultBranch: string;
    name: string;
    private: boolean;
    ownerType: string;
};
/** @internal */
export declare const GitRepo2$outboundSchema: z.ZodType<GitRepo2$Outbound, z.ZodTypeDef, GitRepo2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GitRepo2$ {
    /** @deprecated use `GitRepo2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GitRepo2, z.ZodTypeDef, unknown>;
    /** @deprecated use `GitRepo2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GitRepo2$Outbound, z.ZodTypeDef, GitRepo2>;
    /** @deprecated use `GitRepo2$Outbound` instead. */
    type Outbound = GitRepo2$Outbound;
}
export declare function gitRepo2ToJSON(gitRepo2: GitRepo2): string;
export declare function gitRepo2FromJSON(jsonString: string): SafeParseResult<GitRepo2, SDKValidationError>;
/** @internal */
export declare const GitRepoType$inboundSchema: z.ZodNativeEnum<typeof GitRepoType>;
/** @internal */
export declare const GitRepoType$outboundSchema: z.ZodNativeEnum<typeof GitRepoType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GitRepoType$ {
    /** @deprecated use `GitRepoType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Gitlab: "gitlab";
    }>;
    /** @deprecated use `GitRepoType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Gitlab: "gitlab";
    }>;
}
/** @internal */
export declare const OwnerType$inboundSchema: z.ZodNativeEnum<typeof OwnerType>;
/** @internal */
export declare const OwnerType$outboundSchema: z.ZodNativeEnum<typeof OwnerType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OwnerType$ {
    /** @deprecated use `OwnerType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Team: "team";
        readonly User: "user";
    }>;
    /** @deprecated use `OwnerType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Team: "team";
        readonly User: "user";
    }>;
}
/** @internal */
export declare const GitRepo1$inboundSchema: z.ZodType<GitRepo1, z.ZodTypeDef, unknown>;
/** @internal */
export type GitRepo1$Outbound = {
    namespace: string;
    projectId: number;
    type: string;
    url: string;
    path: string;
    defaultBranch: string;
    name: string;
    private: boolean;
    ownerType: string;
};
/** @internal */
export declare const GitRepo1$outboundSchema: z.ZodType<GitRepo1$Outbound, z.ZodTypeDef, GitRepo1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GitRepo1$ {
    /** @deprecated use `GitRepo1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GitRepo1, z.ZodTypeDef, unknown>;
    /** @deprecated use `GitRepo1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GitRepo1$Outbound, z.ZodTypeDef, GitRepo1>;
    /** @deprecated use `GitRepo1$Outbound` instead. */
    type Outbound = GitRepo1$Outbound;
}
export declare function gitRepo1ToJSON(gitRepo1: GitRepo1): string;
export declare function gitRepo1FromJSON(jsonString: string): SafeParseResult<GitRepo1, SDKValidationError>;
/** @internal */
export declare const GitRepo$inboundSchema: z.ZodType<GitRepo, z.ZodTypeDef, unknown>;
/** @internal */
export type GitRepo$Outbound = GitRepo2$Outbound | GitRepo3$Outbound | GitRepo1$Outbound;
/** @internal */
export declare const GitRepo$outboundSchema: z.ZodType<GitRepo$Outbound, z.ZodTypeDef, GitRepo>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GitRepo$ {
    /** @deprecated use `GitRepo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GitRepo, z.ZodTypeDef, unknown>;
    /** @deprecated use `GitRepo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GitRepo$Outbound, z.ZodTypeDef, GitRepo>;
    /** @deprecated use `GitRepo$Outbound` instead. */
    type Outbound = GitRepo$Outbound;
}
export declare function gitRepoToJSON(gitRepo: GitRepo): string;
export declare function gitRepoFromJSON(jsonString: string): SafeParseResult<GitRepo, SDKValidationError>;
/** @internal */
export declare const CreateDeploymentResponseBody$inboundSchema: z.ZodType<CreateDeploymentResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateDeploymentResponseBody$Outbound = {
    aliasAssignedAt?: number | boolean | null | undefined;
    alwaysRefuseToBuild?: boolean | undefined;
    build: Build$Outbound;
    buildArtifactUrls?: Array<string> | undefined;
    builds?: Array<Builds$Outbound> | undefined;
    env: Array<string>;
    inspectorUrl: string | null;
    isInConcurrentBuildsQueue: boolean;
    isInSystemBuildsQueue: boolean;
    projectSettings: CreateDeploymentProjectSettings$Outbound;
    readyStateReason?: string | undefined;
    integrations?: Integrations$Outbound | undefined;
    images?: Images$Outbound | undefined;
    alias?: Array<string> | undefined;
    aliasAssigned: boolean;
    bootedAt: number;
    buildingAt: number;
    buildContainerFinishedAt?: number | undefined;
    buildSkipped: boolean;
    creator: Creator$Outbound;
    initReadyAt?: number | undefined;
    isFirstBranchDeployment?: boolean | undefined;
    lambdas?: Array<Lambdas$Outbound> | undefined;
    public: boolean;
    ready?: number | undefined;
    status: string;
    team?: CreateDeploymentTeam$Outbound | undefined;
    userAliases?: Array<string> | undefined;
    previewCommentsEnabled?: boolean | undefined;
    ttyBuildLogs?: boolean | undefined;
    customEnvironment?: CustomEnvironment1$Outbound | CustomEnvironment2$Outbound | undefined;
    oomReport?: string | undefined;
    id: string;
    name: string;
    createdAt: number;
    type: string;
    deletedAt?: number | null | undefined;
    version: number;
    autoAssignCustomDomains?: boolean | undefined;
    gitSource?: CreateDeploymentGitSource12$Outbound | CreateDeploymentGitSource15$Outbound | CreateDeploymentGitSource4$Outbound | CreateDeploymentGitSource10$Outbound | CreateDeploymentGitSource11$Outbound | CreateDeploymentGitSource13$Outbound | CreateDeploymentGitSource14$Outbound | CreateDeploymentGitSource2$Outbound | CreateDeploymentGitSource3$Outbound | CreateDeploymentGitSource6$Outbound | CreateDeploymentGitSource9$Outbound | CreateDeploymentGitSource1$Outbound | CreateDeploymentGitSource5$Outbound | CreateDeploymentGitSource7$Outbound | CreateDeploymentGitSource8$Outbound | undefined;
    meta: {
        [k: string]: string;
    };
    project?: CreateDeploymentProject$Outbound | undefined;
    nodeVersion?: string | undefined;
    readyState: string;
    source?: string | undefined;
    target?: string | null | undefined;
    errorMessage?: string | null | undefined;
    passiveRegions?: Array<string> | undefined;
    regions: Array<string>;
    aliasError?: AliasError$Outbound | null | undefined;
    aliasFinal?: string | null | undefined;
    aliasWarning?: AliasWarning$Outbound | null | undefined;
    automaticAliases?: Array<string> | undefined;
    buildErrorAt?: number | undefined;
    canceledAt?: number | undefined;
    checksConclusion?: string | undefined;
    checksState?: string | undefined;
    defaultRoute?: string | undefined;
    errorCode?: string | undefined;
    errorLink?: string | undefined;
    errorStep?: string | undefined;
    originCacheRegion?: string | undefined;
    oidcTokenClaims?: OidcTokenClaims$Outbound | undefined;
    readySubstate?: string | undefined;
    softDeletedByRetention?: boolean | undefined;
    undeletedAt?: number | undefined;
    url: string;
    projectId: string;
    ownerId: string;
    monorepoManager?: string | null | undefined;
    plan: string;
    config?: Config$Outbound | undefined;
    functions?: {
        [k: string]: Functions$Outbound;
    } | null | undefined;
    routes: Array<Routes3$Outbound | Routes1$Outbound | Routes2$Outbound> | null;
    crons?: Array<CreateDeploymentCrons$Outbound> | undefined;
    checks?: CreateDeploymentChecks$Outbound | undefined;
    microfrontends?: CreateDeploymentMicrofrontends2$Outbound | CreateDeploymentMicrofrontends1$Outbound | undefined;
    connectBuildsEnabled?: boolean | undefined;
    connectConfigurationId?: string | undefined;
    createdIn: string;
    passiveConnectConfigurationId?: string | undefined;
    flags?: Flags1$Outbound | Array<Flags2$Outbound> | undefined;
    gitRepo?: GitRepo2$Outbound | GitRepo3$Outbound | GitRepo1$Outbound | null | undefined;
};
/** @internal */
export declare const CreateDeploymentResponseBody$outboundSchema: z.ZodType<CreateDeploymentResponseBody$Outbound, z.ZodTypeDef, CreateDeploymentResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateDeploymentResponseBody$ {
    /** @deprecated use `CreateDeploymentResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDeploymentResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDeploymentResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDeploymentResponseBody$Outbound, z.ZodTypeDef, CreateDeploymentResponseBody>;
    /** @deprecated use `CreateDeploymentResponseBody$Outbound` instead. */
    type Outbound = CreateDeploymentResponseBody$Outbound;
}
export declare function createDeploymentResponseBodyToJSON(createDeploymentResponseBody: CreateDeploymentResponseBody): string;
export declare function createDeploymentResponseBodyFromJSON(jsonString: string): SafeParseResult<CreateDeploymentResponseBody, SDKValidationError>;
//# sourceMappingURL=createdeploymentop.d.ts.map