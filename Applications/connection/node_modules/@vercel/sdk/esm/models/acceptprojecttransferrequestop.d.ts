import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type PaidFeatures = {
    concurrentBuilds?: number | null | undefined;
    passwordProtection?: boolean | null | undefined;
    previewDeploymentSuffix?: boolean | null | undefined;
};
export type AcceptedPolicies = {
    eula: Date;
    privacy: Date;
    additionalProperties?: {
        [k: string]: Date;
    };
};
export type AcceptProjectTransferRequestRequestBody = {
    /**
     * The desired name for the project
     */
    newProjectName?: string | undefined;
    paidFeatures?: PaidFeatures | undefined;
    acceptedPolicies?: {
        [k: string]: AcceptedPolicies;
    } | undefined;
};
export type AcceptProjectTransferRequestRequest = {
    /**
     * The code of the project transfer request.
     */
    code: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody?: AcceptProjectTransferRequestRequestBody | undefined;
};
export type AcceptProjectTransferRequestResponseBody2 = {};
export declare const AcceptProjectTransferRequestResponseBodyStatus: {
    readonly Fulfilled: "fulfilled";
    readonly Errored: "errored";
};
export type AcceptProjectTransferRequestResponseBodyStatus = ClosedEnum<typeof AcceptProjectTransferRequestResponseBodyStatus>;
export type AcceptProjectTransferRequestResponseBodyError = {};
export type AcceptProjectTransferRequestResponseBodyResult = {
    status: AcceptProjectTransferRequestResponseBodyStatus;
    error?: AcceptProjectTransferRequestResponseBodyError | undefined;
    code?: string | undefined;
};
export type PartnerCalls = {
    installationId: string;
    resourceIds: Array<string>;
    result: AcceptProjectTransferRequestResponseBodyResult;
};
export type ResourceTransferErrors = {};
export type AcceptProjectTransferRequestResponseBody1 = {
    partnerCalls: Array<PartnerCalls>;
    resourceTransferErrors: Array<ResourceTransferErrors>;
};
/**
 * The project has been transferred successfully.
 */
export type AcceptProjectTransferRequestResponseBody = AcceptProjectTransferRequestResponseBody1 | AcceptProjectTransferRequestResponseBody2;
/** @internal */
export declare const PaidFeatures$inboundSchema: z.ZodType<PaidFeatures, z.ZodTypeDef, unknown>;
/** @internal */
export type PaidFeatures$Outbound = {
    concurrentBuilds?: number | null | undefined;
    passwordProtection?: boolean | null | undefined;
    previewDeploymentSuffix?: boolean | null | undefined;
};
/** @internal */
export declare const PaidFeatures$outboundSchema: z.ZodType<PaidFeatures$Outbound, z.ZodTypeDef, PaidFeatures>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PaidFeatures$ {
    /** @deprecated use `PaidFeatures$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PaidFeatures, z.ZodTypeDef, unknown>;
    /** @deprecated use `PaidFeatures$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PaidFeatures$Outbound, z.ZodTypeDef, PaidFeatures>;
    /** @deprecated use `PaidFeatures$Outbound` instead. */
    type Outbound = PaidFeatures$Outbound;
}
export declare function paidFeaturesToJSON(paidFeatures: PaidFeatures): string;
export declare function paidFeaturesFromJSON(jsonString: string): SafeParseResult<PaidFeatures, SDKValidationError>;
/** @internal */
export declare const AcceptedPolicies$inboundSchema: z.ZodType<AcceptedPolicies, z.ZodTypeDef, unknown>;
/** @internal */
export type AcceptedPolicies$Outbound = {
    eula: string;
    privacy: string;
    [additionalProperties: string]: unknown;
};
/** @internal */
export declare const AcceptedPolicies$outboundSchema: z.ZodType<AcceptedPolicies$Outbound, z.ZodTypeDef, AcceptedPolicies>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AcceptedPolicies$ {
    /** @deprecated use `AcceptedPolicies$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AcceptedPolicies, z.ZodTypeDef, unknown>;
    /** @deprecated use `AcceptedPolicies$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AcceptedPolicies$Outbound, z.ZodTypeDef, AcceptedPolicies>;
    /** @deprecated use `AcceptedPolicies$Outbound` instead. */
    type Outbound = AcceptedPolicies$Outbound;
}
export declare function acceptedPoliciesToJSON(acceptedPolicies: AcceptedPolicies): string;
export declare function acceptedPoliciesFromJSON(jsonString: string): SafeParseResult<AcceptedPolicies, SDKValidationError>;
/** @internal */
export declare const AcceptProjectTransferRequestRequestBody$inboundSchema: z.ZodType<AcceptProjectTransferRequestRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type AcceptProjectTransferRequestRequestBody$Outbound = {
    newProjectName?: string | undefined;
    paidFeatures?: PaidFeatures$Outbound | undefined;
    acceptedPolicies?: {
        [k: string]: AcceptedPolicies$Outbound;
    } | undefined;
};
/** @internal */
export declare const AcceptProjectTransferRequestRequestBody$outboundSchema: z.ZodType<AcceptProjectTransferRequestRequestBody$Outbound, z.ZodTypeDef, AcceptProjectTransferRequestRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AcceptProjectTransferRequestRequestBody$ {
    /** @deprecated use `AcceptProjectTransferRequestRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AcceptProjectTransferRequestRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `AcceptProjectTransferRequestRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AcceptProjectTransferRequestRequestBody$Outbound, z.ZodTypeDef, AcceptProjectTransferRequestRequestBody>;
    /** @deprecated use `AcceptProjectTransferRequestRequestBody$Outbound` instead. */
    type Outbound = AcceptProjectTransferRequestRequestBody$Outbound;
}
export declare function acceptProjectTransferRequestRequestBodyToJSON(acceptProjectTransferRequestRequestBody: AcceptProjectTransferRequestRequestBody): string;
export declare function acceptProjectTransferRequestRequestBodyFromJSON(jsonString: string): SafeParseResult<AcceptProjectTransferRequestRequestBody, SDKValidationError>;
/** @internal */
export declare const AcceptProjectTransferRequestRequest$inboundSchema: z.ZodType<AcceptProjectTransferRequestRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type AcceptProjectTransferRequestRequest$Outbound = {
    code: string;
    teamId?: string | undefined;
    slug?: string | undefined;
    RequestBody?: AcceptProjectTransferRequestRequestBody$Outbound | undefined;
};
/** @internal */
export declare const AcceptProjectTransferRequestRequest$outboundSchema: z.ZodType<AcceptProjectTransferRequestRequest$Outbound, z.ZodTypeDef, AcceptProjectTransferRequestRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AcceptProjectTransferRequestRequest$ {
    /** @deprecated use `AcceptProjectTransferRequestRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AcceptProjectTransferRequestRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `AcceptProjectTransferRequestRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AcceptProjectTransferRequestRequest$Outbound, z.ZodTypeDef, AcceptProjectTransferRequestRequest>;
    /** @deprecated use `AcceptProjectTransferRequestRequest$Outbound` instead. */
    type Outbound = AcceptProjectTransferRequestRequest$Outbound;
}
export declare function acceptProjectTransferRequestRequestToJSON(acceptProjectTransferRequestRequest: AcceptProjectTransferRequestRequest): string;
export declare function acceptProjectTransferRequestRequestFromJSON(jsonString: string): SafeParseResult<AcceptProjectTransferRequestRequest, SDKValidationError>;
/** @internal */
export declare const AcceptProjectTransferRequestResponseBody2$inboundSchema: z.ZodType<AcceptProjectTransferRequestResponseBody2, z.ZodTypeDef, unknown>;
/** @internal */
export type AcceptProjectTransferRequestResponseBody2$Outbound = {};
/** @internal */
export declare const AcceptProjectTransferRequestResponseBody2$outboundSchema: z.ZodType<AcceptProjectTransferRequestResponseBody2$Outbound, z.ZodTypeDef, AcceptProjectTransferRequestResponseBody2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AcceptProjectTransferRequestResponseBody2$ {
    /** @deprecated use `AcceptProjectTransferRequestResponseBody2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AcceptProjectTransferRequestResponseBody2, z.ZodTypeDef, unknown>;
    /** @deprecated use `AcceptProjectTransferRequestResponseBody2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AcceptProjectTransferRequestResponseBody2$Outbound, z.ZodTypeDef, AcceptProjectTransferRequestResponseBody2>;
    /** @deprecated use `AcceptProjectTransferRequestResponseBody2$Outbound` instead. */
    type Outbound = AcceptProjectTransferRequestResponseBody2$Outbound;
}
export declare function acceptProjectTransferRequestResponseBody2ToJSON(acceptProjectTransferRequestResponseBody2: AcceptProjectTransferRequestResponseBody2): string;
export declare function acceptProjectTransferRequestResponseBody2FromJSON(jsonString: string): SafeParseResult<AcceptProjectTransferRequestResponseBody2, SDKValidationError>;
/** @internal */
export declare const AcceptProjectTransferRequestResponseBodyStatus$inboundSchema: z.ZodNativeEnum<typeof AcceptProjectTransferRequestResponseBodyStatus>;
/** @internal */
export declare const AcceptProjectTransferRequestResponseBodyStatus$outboundSchema: z.ZodNativeEnum<typeof AcceptProjectTransferRequestResponseBodyStatus>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AcceptProjectTransferRequestResponseBodyStatus$ {
    /** @deprecated use `AcceptProjectTransferRequestResponseBodyStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Fulfilled: "fulfilled";
        readonly Errored: "errored";
    }>;
    /** @deprecated use `AcceptProjectTransferRequestResponseBodyStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Fulfilled: "fulfilled";
        readonly Errored: "errored";
    }>;
}
/** @internal */
export declare const AcceptProjectTransferRequestResponseBodyError$inboundSchema: z.ZodType<AcceptProjectTransferRequestResponseBodyError, z.ZodTypeDef, unknown>;
/** @internal */
export type AcceptProjectTransferRequestResponseBodyError$Outbound = {};
/** @internal */
export declare const AcceptProjectTransferRequestResponseBodyError$outboundSchema: z.ZodType<AcceptProjectTransferRequestResponseBodyError$Outbound, z.ZodTypeDef, AcceptProjectTransferRequestResponseBodyError>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AcceptProjectTransferRequestResponseBodyError$ {
    /** @deprecated use `AcceptProjectTransferRequestResponseBodyError$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AcceptProjectTransferRequestResponseBodyError, z.ZodTypeDef, unknown>;
    /** @deprecated use `AcceptProjectTransferRequestResponseBodyError$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AcceptProjectTransferRequestResponseBodyError$Outbound, z.ZodTypeDef, AcceptProjectTransferRequestResponseBodyError>;
    /** @deprecated use `AcceptProjectTransferRequestResponseBodyError$Outbound` instead. */
    type Outbound = AcceptProjectTransferRequestResponseBodyError$Outbound;
}
export declare function acceptProjectTransferRequestResponseBodyErrorToJSON(acceptProjectTransferRequestResponseBodyError: AcceptProjectTransferRequestResponseBodyError): string;
export declare function acceptProjectTransferRequestResponseBodyErrorFromJSON(jsonString: string): SafeParseResult<AcceptProjectTransferRequestResponseBodyError, SDKValidationError>;
/** @internal */
export declare const AcceptProjectTransferRequestResponseBodyResult$inboundSchema: z.ZodType<AcceptProjectTransferRequestResponseBodyResult, z.ZodTypeDef, unknown>;
/** @internal */
export type AcceptProjectTransferRequestResponseBodyResult$Outbound = {
    status: string;
    error?: AcceptProjectTransferRequestResponseBodyError$Outbound | undefined;
    code?: string | undefined;
};
/** @internal */
export declare const AcceptProjectTransferRequestResponseBodyResult$outboundSchema: z.ZodType<AcceptProjectTransferRequestResponseBodyResult$Outbound, z.ZodTypeDef, AcceptProjectTransferRequestResponseBodyResult>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AcceptProjectTransferRequestResponseBodyResult$ {
    /** @deprecated use `AcceptProjectTransferRequestResponseBodyResult$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AcceptProjectTransferRequestResponseBodyResult, z.ZodTypeDef, unknown>;
    /** @deprecated use `AcceptProjectTransferRequestResponseBodyResult$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AcceptProjectTransferRequestResponseBodyResult$Outbound, z.ZodTypeDef, AcceptProjectTransferRequestResponseBodyResult>;
    /** @deprecated use `AcceptProjectTransferRequestResponseBodyResult$Outbound` instead. */
    type Outbound = AcceptProjectTransferRequestResponseBodyResult$Outbound;
}
export declare function acceptProjectTransferRequestResponseBodyResultToJSON(acceptProjectTransferRequestResponseBodyResult: AcceptProjectTransferRequestResponseBodyResult): string;
export declare function acceptProjectTransferRequestResponseBodyResultFromJSON(jsonString: string): SafeParseResult<AcceptProjectTransferRequestResponseBodyResult, SDKValidationError>;
/** @internal */
export declare const PartnerCalls$inboundSchema: z.ZodType<PartnerCalls, z.ZodTypeDef, unknown>;
/** @internal */
export type PartnerCalls$Outbound = {
    installationId: string;
    resourceIds: Array<string>;
    result: AcceptProjectTransferRequestResponseBodyResult$Outbound;
};
/** @internal */
export declare const PartnerCalls$outboundSchema: z.ZodType<PartnerCalls$Outbound, z.ZodTypeDef, PartnerCalls>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PartnerCalls$ {
    /** @deprecated use `PartnerCalls$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PartnerCalls, z.ZodTypeDef, unknown>;
    /** @deprecated use `PartnerCalls$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PartnerCalls$Outbound, z.ZodTypeDef, PartnerCalls>;
    /** @deprecated use `PartnerCalls$Outbound` instead. */
    type Outbound = PartnerCalls$Outbound;
}
export declare function partnerCallsToJSON(partnerCalls: PartnerCalls): string;
export declare function partnerCallsFromJSON(jsonString: string): SafeParseResult<PartnerCalls, SDKValidationError>;
/** @internal */
export declare const ResourceTransferErrors$inboundSchema: z.ZodType<ResourceTransferErrors, z.ZodTypeDef, unknown>;
/** @internal */
export type ResourceTransferErrors$Outbound = {};
/** @internal */
export declare const ResourceTransferErrors$outboundSchema: z.ZodType<ResourceTransferErrors$Outbound, z.ZodTypeDef, ResourceTransferErrors>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResourceTransferErrors$ {
    /** @deprecated use `ResourceTransferErrors$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResourceTransferErrors, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResourceTransferErrors$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResourceTransferErrors$Outbound, z.ZodTypeDef, ResourceTransferErrors>;
    /** @deprecated use `ResourceTransferErrors$Outbound` instead. */
    type Outbound = ResourceTransferErrors$Outbound;
}
export declare function resourceTransferErrorsToJSON(resourceTransferErrors: ResourceTransferErrors): string;
export declare function resourceTransferErrorsFromJSON(jsonString: string): SafeParseResult<ResourceTransferErrors, SDKValidationError>;
/** @internal */
export declare const AcceptProjectTransferRequestResponseBody1$inboundSchema: z.ZodType<AcceptProjectTransferRequestResponseBody1, z.ZodTypeDef, unknown>;
/** @internal */
export type AcceptProjectTransferRequestResponseBody1$Outbound = {
    partnerCalls: Array<PartnerCalls$Outbound>;
    resourceTransferErrors: Array<ResourceTransferErrors$Outbound>;
};
/** @internal */
export declare const AcceptProjectTransferRequestResponseBody1$outboundSchema: z.ZodType<AcceptProjectTransferRequestResponseBody1$Outbound, z.ZodTypeDef, AcceptProjectTransferRequestResponseBody1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AcceptProjectTransferRequestResponseBody1$ {
    /** @deprecated use `AcceptProjectTransferRequestResponseBody1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AcceptProjectTransferRequestResponseBody1, z.ZodTypeDef, unknown>;
    /** @deprecated use `AcceptProjectTransferRequestResponseBody1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AcceptProjectTransferRequestResponseBody1$Outbound, z.ZodTypeDef, AcceptProjectTransferRequestResponseBody1>;
    /** @deprecated use `AcceptProjectTransferRequestResponseBody1$Outbound` instead. */
    type Outbound = AcceptProjectTransferRequestResponseBody1$Outbound;
}
export declare function acceptProjectTransferRequestResponseBody1ToJSON(acceptProjectTransferRequestResponseBody1: AcceptProjectTransferRequestResponseBody1): string;
export declare function acceptProjectTransferRequestResponseBody1FromJSON(jsonString: string): SafeParseResult<AcceptProjectTransferRequestResponseBody1, SDKValidationError>;
/** @internal */
export declare const AcceptProjectTransferRequestResponseBody$inboundSchema: z.ZodType<AcceptProjectTransferRequestResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type AcceptProjectTransferRequestResponseBody$Outbound = AcceptProjectTransferRequestResponseBody1$Outbound | AcceptProjectTransferRequestResponseBody2$Outbound;
/** @internal */
export declare const AcceptProjectTransferRequestResponseBody$outboundSchema: z.ZodType<AcceptProjectTransferRequestResponseBody$Outbound, z.ZodTypeDef, AcceptProjectTransferRequestResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AcceptProjectTransferRequestResponseBody$ {
    /** @deprecated use `AcceptProjectTransferRequestResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AcceptProjectTransferRequestResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `AcceptProjectTransferRequestResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AcceptProjectTransferRequestResponseBody$Outbound, z.ZodTypeDef, AcceptProjectTransferRequestResponseBody>;
    /** @deprecated use `AcceptProjectTransferRequestResponseBody$Outbound` instead. */
    type Outbound = AcceptProjectTransferRequestResponseBody$Outbound;
}
export declare function acceptProjectTransferRequestResponseBodyToJSON(acceptProjectTransferRequestResponseBody: AcceptProjectTransferRequestResponseBody): string;
export declare function acceptProjectTransferRequestResponseBodyFromJSON(jsonString: string): SafeParseResult<AcceptProjectTransferRequestResponseBody, SDKValidationError>;
//# sourceMappingURL=acceptprojecttransferrequestop.d.ts.map