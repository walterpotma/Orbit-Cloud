/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/** @internal */
export const UpdateAttackChallengeModeRequestBody$inboundSchema = z.object({
    projectId: z.string(),
    attackModeEnabled: z.boolean(),
    attackModeActiveUntil: z.nullable(z.number()).optional(),
});
/** @internal */
export const UpdateAttackChallengeModeRequestBody$outboundSchema = z.object({
    projectId: z.string(),
    attackModeEnabled: z.boolean(),
    attackModeActiveUntil: z.nullable(z.number()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateAttackChallengeModeRequestBody$;
(function (UpdateAttackChallengeModeRequestBody$) {
    /** @deprecated use `UpdateAttackChallengeModeRequestBody$inboundSchema` instead. */
    UpdateAttackChallengeModeRequestBody$.inboundSchema = UpdateAttackChallengeModeRequestBody$inboundSchema;
    /** @deprecated use `UpdateAttackChallengeModeRequestBody$outboundSchema` instead. */
    UpdateAttackChallengeModeRequestBody$.outboundSchema = UpdateAttackChallengeModeRequestBody$outboundSchema;
})(UpdateAttackChallengeModeRequestBody$ || (UpdateAttackChallengeModeRequestBody$ = {}));
export function updateAttackChallengeModeRequestBodyToJSON(updateAttackChallengeModeRequestBody) {
    return JSON.stringify(UpdateAttackChallengeModeRequestBody$outboundSchema.parse(updateAttackChallengeModeRequestBody));
}
export function updateAttackChallengeModeRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateAttackChallengeModeRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateAttackChallengeModeRequestBody' from JSON`);
}
/** @internal */
export const UpdateAttackChallengeModeRequest$inboundSchema = z.object({
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => UpdateAttackChallengeModeRequestBody$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const UpdateAttackChallengeModeRequest$outboundSchema = z.object({
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => UpdateAttackChallengeModeRequestBody$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateAttackChallengeModeRequest$;
(function (UpdateAttackChallengeModeRequest$) {
    /** @deprecated use `UpdateAttackChallengeModeRequest$inboundSchema` instead. */
    UpdateAttackChallengeModeRequest$.inboundSchema = UpdateAttackChallengeModeRequest$inboundSchema;
    /** @deprecated use `UpdateAttackChallengeModeRequest$outboundSchema` instead. */
    UpdateAttackChallengeModeRequest$.outboundSchema = UpdateAttackChallengeModeRequest$outboundSchema;
})(UpdateAttackChallengeModeRequest$ || (UpdateAttackChallengeModeRequest$ = {}));
export function updateAttackChallengeModeRequestToJSON(updateAttackChallengeModeRequest) {
    return JSON.stringify(UpdateAttackChallengeModeRequest$outboundSchema.parse(updateAttackChallengeModeRequest));
}
export function updateAttackChallengeModeRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateAttackChallengeModeRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateAttackChallengeModeRequest' from JSON`);
}
/** @internal */
export const UpdateAttackChallengeModeResponseBody$inboundSchema = z.object({
    attackModeEnabled: z.boolean(),
    attackModeUpdatedAt: z.number(),
});
/** @internal */
export const UpdateAttackChallengeModeResponseBody$outboundSchema = z.object({
    attackModeEnabled: z.boolean(),
    attackModeUpdatedAt: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateAttackChallengeModeResponseBody$;
(function (UpdateAttackChallengeModeResponseBody$) {
    /** @deprecated use `UpdateAttackChallengeModeResponseBody$inboundSchema` instead. */
    UpdateAttackChallengeModeResponseBody$.inboundSchema = UpdateAttackChallengeModeResponseBody$inboundSchema;
    /** @deprecated use `UpdateAttackChallengeModeResponseBody$outboundSchema` instead. */
    UpdateAttackChallengeModeResponseBody$.outboundSchema = UpdateAttackChallengeModeResponseBody$outboundSchema;
})(UpdateAttackChallengeModeResponseBody$ || (UpdateAttackChallengeModeResponseBody$ = {}));
export function updateAttackChallengeModeResponseBodyToJSON(updateAttackChallengeModeResponseBody) {
    return JSON.stringify(UpdateAttackChallengeModeResponseBody$outboundSchema.parse(updateAttackChallengeModeResponseBody));
}
export function updateAttackChallengeModeResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateAttackChallengeModeResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateAttackChallengeModeResponseBody' from JSON`);
}
//# sourceMappingURL=updateattackchallengemodeop.js.map