/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
/**
 * The delivery log format
 */
export const GetIntegrationLogDrainsDeliveryFormat = {
    Json: "json",
    Ndjson: "ndjson",
    Syslog: "syslog",
    Protobuf: "protobuf",
};
/**
 * The sources from which logs are currently being delivered to this log drain.
 */
export const GetIntegrationLogDrainsSources = {
    Build: "build",
    Edge: "edge",
    Lambda: "lambda",
    Static: "static",
    External: "external",
    Firewall: "firewall",
};
/**
 * Whether the log drain was created by an integration or by a user
 */
export const CreatedFrom = {
    Integration: "integration",
    SelfServed: "self-served",
};
/**
 * The environment of log drain
 */
export const GetIntegrationLogDrainsEnvironments = {
    Production: "production",
    Preview: "preview",
};
/** @internal */
export const GetIntegrationLogDrainsRequest$inboundSchema = z.object({
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/** @internal */
export const GetIntegrationLogDrainsRequest$outboundSchema = z.object({
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetIntegrationLogDrainsRequest$;
(function (GetIntegrationLogDrainsRequest$) {
    /** @deprecated use `GetIntegrationLogDrainsRequest$inboundSchema` instead. */
    GetIntegrationLogDrainsRequest$.inboundSchema = GetIntegrationLogDrainsRequest$inboundSchema;
    /** @deprecated use `GetIntegrationLogDrainsRequest$outboundSchema` instead. */
    GetIntegrationLogDrainsRequest$.outboundSchema = GetIntegrationLogDrainsRequest$outboundSchema;
})(GetIntegrationLogDrainsRequest$ || (GetIntegrationLogDrainsRequest$ = {}));
export function getIntegrationLogDrainsRequestToJSON(getIntegrationLogDrainsRequest) {
    return JSON.stringify(GetIntegrationLogDrainsRequest$outboundSchema.parse(getIntegrationLogDrainsRequest));
}
export function getIntegrationLogDrainsRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetIntegrationLogDrainsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetIntegrationLogDrainsRequest' from JSON`);
}
/** @internal */
export const GetIntegrationLogDrainsDeliveryFormat$inboundSchema = z.nativeEnum(GetIntegrationLogDrainsDeliveryFormat);
/** @internal */
export const GetIntegrationLogDrainsDeliveryFormat$outboundSchema = GetIntegrationLogDrainsDeliveryFormat$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetIntegrationLogDrainsDeliveryFormat$;
(function (GetIntegrationLogDrainsDeliveryFormat$) {
    /** @deprecated use `GetIntegrationLogDrainsDeliveryFormat$inboundSchema` instead. */
    GetIntegrationLogDrainsDeliveryFormat$.inboundSchema = GetIntegrationLogDrainsDeliveryFormat$inboundSchema;
    /** @deprecated use `GetIntegrationLogDrainsDeliveryFormat$outboundSchema` instead. */
    GetIntegrationLogDrainsDeliveryFormat$.outboundSchema = GetIntegrationLogDrainsDeliveryFormat$outboundSchema;
})(GetIntegrationLogDrainsDeliveryFormat$ || (GetIntegrationLogDrainsDeliveryFormat$ = {}));
/** @internal */
export const GetIntegrationLogDrainsSources$inboundSchema = z.nativeEnum(GetIntegrationLogDrainsSources);
/** @internal */
export const GetIntegrationLogDrainsSources$outboundSchema = GetIntegrationLogDrainsSources$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetIntegrationLogDrainsSources$;
(function (GetIntegrationLogDrainsSources$) {
    /** @deprecated use `GetIntegrationLogDrainsSources$inboundSchema` instead. */
    GetIntegrationLogDrainsSources$.inboundSchema = GetIntegrationLogDrainsSources$inboundSchema;
    /** @deprecated use `GetIntegrationLogDrainsSources$outboundSchema` instead. */
    GetIntegrationLogDrainsSources$.outboundSchema = GetIntegrationLogDrainsSources$outboundSchema;
})(GetIntegrationLogDrainsSources$ || (GetIntegrationLogDrainsSources$ = {}));
/** @internal */
export const CreatedFrom$inboundSchema = z
    .nativeEnum(CreatedFrom);
/** @internal */
export const CreatedFrom$outboundSchema = CreatedFrom$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreatedFrom$;
(function (CreatedFrom$) {
    /** @deprecated use `CreatedFrom$inboundSchema` instead. */
    CreatedFrom$.inboundSchema = CreatedFrom$inboundSchema;
    /** @deprecated use `CreatedFrom$outboundSchema` instead. */
    CreatedFrom$.outboundSchema = CreatedFrom$outboundSchema;
})(CreatedFrom$ || (CreatedFrom$ = {}));
/** @internal */
export const GetIntegrationLogDrainsEnvironments$inboundSchema = z.nativeEnum(GetIntegrationLogDrainsEnvironments);
/** @internal */
export const GetIntegrationLogDrainsEnvironments$outboundSchema = GetIntegrationLogDrainsEnvironments$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetIntegrationLogDrainsEnvironments$;
(function (GetIntegrationLogDrainsEnvironments$) {
    /** @deprecated use `GetIntegrationLogDrainsEnvironments$inboundSchema` instead. */
    GetIntegrationLogDrainsEnvironments$.inboundSchema = GetIntegrationLogDrainsEnvironments$inboundSchema;
    /** @deprecated use `GetIntegrationLogDrainsEnvironments$outboundSchema` instead. */
    GetIntegrationLogDrainsEnvironments$.outboundSchema = GetIntegrationLogDrainsEnvironments$outboundSchema;
})(GetIntegrationLogDrainsEnvironments$ || (GetIntegrationLogDrainsEnvironments$ = {}));
/** @internal */
export const GetIntegrationLogDrainsResponseBody$inboundSchema = z.object({
    clientId: z.string().optional(),
    configurationId: z.string().optional(),
    createdAt: z.number(),
    id: z.string(),
    deliveryFormat: GetIntegrationLogDrainsDeliveryFormat$inboundSchema
        .optional(),
    name: z.string(),
    ownerId: z.string(),
    projectId: z.nullable(z.string()).optional(),
    projectIds: z.array(z.string()).optional(),
    url: z.string(),
    sources: z.array(GetIntegrationLogDrainsSources$inboundSchema).optional(),
    createdFrom: CreatedFrom$inboundSchema.optional(),
    headers: z.record(z.string()).optional(),
    environments: z.array(GetIntegrationLogDrainsEnvironments$inboundSchema)
        .optional(),
    branch: z.string().optional(),
    samplingRate: z.number().optional(),
});
/** @internal */
export const GetIntegrationLogDrainsResponseBody$outboundSchema = z.object({
    clientId: z.string().optional(),
    configurationId: z.string().optional(),
    createdAt: z.number(),
    id: z.string(),
    deliveryFormat: GetIntegrationLogDrainsDeliveryFormat$outboundSchema
        .optional(),
    name: z.string(),
    ownerId: z.string(),
    projectId: z.nullable(z.string()).optional(),
    projectIds: z.array(z.string()).optional(),
    url: z.string(),
    sources: z.array(GetIntegrationLogDrainsSources$outboundSchema).optional(),
    createdFrom: CreatedFrom$outboundSchema.optional(),
    headers: z.record(z.string()).optional(),
    environments: z.array(GetIntegrationLogDrainsEnvironments$outboundSchema)
        .optional(),
    branch: z.string().optional(),
    samplingRate: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetIntegrationLogDrainsResponseBody$;
(function (GetIntegrationLogDrainsResponseBody$) {
    /** @deprecated use `GetIntegrationLogDrainsResponseBody$inboundSchema` instead. */
    GetIntegrationLogDrainsResponseBody$.inboundSchema = GetIntegrationLogDrainsResponseBody$inboundSchema;
    /** @deprecated use `GetIntegrationLogDrainsResponseBody$outboundSchema` instead. */
    GetIntegrationLogDrainsResponseBody$.outboundSchema = GetIntegrationLogDrainsResponseBody$outboundSchema;
})(GetIntegrationLogDrainsResponseBody$ || (GetIntegrationLogDrainsResponseBody$ = {}));
export function getIntegrationLogDrainsResponseBodyToJSON(getIntegrationLogDrainsResponseBody) {
    return JSON.stringify(GetIntegrationLogDrainsResponseBody$outboundSchema.parse(getIntegrationLogDrainsResponseBody));
}
export function getIntegrationLogDrainsResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetIntegrationLogDrainsResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetIntegrationLogDrainsResponseBody' from JSON`);
}
//# sourceMappingURL=getintegrationlogdrainsop.js.map