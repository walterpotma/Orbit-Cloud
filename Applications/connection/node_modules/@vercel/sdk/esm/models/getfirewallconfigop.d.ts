import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type GetFirewallConfigRequest = {
    projectId: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    /**
     * The deployed configVersion for the firewall configuration
     */
    configVersion: string;
};
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction: {
    readonly Deny: "deny";
    readonly Log: "log";
};
export type GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction = ClosedEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction>;
/**
 * Scanner Detection - Detect and prevent reconnaissance activities from network scanning tools.
 */
export type GetFirewallConfigSd = {
    active: boolean;
    action: GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction;
};
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction: {
    readonly Deny: "deny";
    readonly Log: "log";
};
export type GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction = ClosedEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction>;
/**
 * Multipart Attack - Block attempts to bypass security controls using multipart/form-data encoding.
 */
export type GetFirewallConfigMa = {
    active: boolean;
    action: GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction;
};
export declare const GetFirewallConfigSecurityResponseAction: {
    readonly Deny: "deny";
    readonly Log: "log";
};
export type GetFirewallConfigSecurityResponseAction = ClosedEnum<typeof GetFirewallConfigSecurityResponseAction>;
/**
 * Local File Inclusion Attack - Prevent unauthorized access to local files through web applications.
 */
export type GetFirewallConfigLfi = {
    active: boolean;
    action: GetFirewallConfigSecurityResponseAction;
};
export declare const GetFirewallConfigSecurityResponse200Action: {
    readonly Deny: "deny";
    readonly Log: "log";
};
export type GetFirewallConfigSecurityResponse200Action = ClosedEnum<typeof GetFirewallConfigSecurityResponse200Action>;
/**
 * Remote File Inclusion Attack - Prohibit unauthorized upload or execution of remote files.
 */
export type GetFirewallConfigRfi = {
    active: boolean;
    action: GetFirewallConfigSecurityResponse200Action;
};
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONAction: {
    readonly Deny: "deny";
    readonly Log: "log";
};
export type GetFirewallConfigSecurityResponse200ApplicationJSONAction = ClosedEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONAction>;
/**
 * Remote Execution Attack - Prevent unauthorized execution of remote scripts or commands.
 */
export type GetFirewallConfigRce = {
    active: boolean;
    action: GetFirewallConfigSecurityResponse200ApplicationJSONAction;
};
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction: {
    readonly Deny: "deny";
    readonly Log: "log";
};
export type GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction = ClosedEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction>;
/**
 * PHP Attack - Safeguard against vulnerability exploits in PHP-based applications.
 */
export type GetFirewallConfigPhp = {
    active: boolean;
    action: GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction;
};
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction: {
    readonly Deny: "deny";
    readonly Log: "log";
};
export type GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction = ClosedEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction>;
/**
 * Generic Attack - Provide broad protection from various undefined or novel attack vectors.
 */
export type GetFirewallConfigGen = {
    active: boolean;
    action: GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction;
};
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXssAction: {
    readonly Deny: "deny";
    readonly Log: "log";
};
export type GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXssAction = ClosedEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXssAction>;
/**
 * XSS Attack - Prevent injection of malicious scripts into trusted webpages.
 */
export type GetFirewallConfigXss = {
    active: boolean;
    action: GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXssAction;
};
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction: {
    readonly Deny: "deny";
    readonly Log: "log";
};
export type GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction = ClosedEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction>;
/**
 * SQL Injection Attack - Prohibit unauthorized use of SQL commands to manipulate databases.
 */
export type GetFirewallConfigSqli = {
    active: boolean;
    action: GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction;
};
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction: {
    readonly Deny: "deny";
    readonly Log: "log";
};
export type GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction = ClosedEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction>;
/**
 * Session Fixation Attack - Prevent unauthorized takeover of user sessions by enforcing unique session IDs.
 */
export type GetFirewallConfigSf = {
    active: boolean;
    action: GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction;
};
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction: {
    readonly Deny: "deny";
    readonly Log: "log";
};
export type GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction = ClosedEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction>;
/**
 * Java Attack - Mitigate risks of exploitation targeting Java-based applications or components.
 */
export type GetFirewallConfigJava = {
    active: boolean;
    action: GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction;
};
/**
 * Custom Ruleset
 */
export type GetFirewallConfigCrs = {
    /**
     * Scanner Detection - Detect and prevent reconnaissance activities from network scanning tools.
     */
    sd: GetFirewallConfigSd;
    /**
     * Multipart Attack - Block attempts to bypass security controls using multipart/form-data encoding.
     */
    ma: GetFirewallConfigMa;
    /**
     * Local File Inclusion Attack - Prevent unauthorized access to local files through web applications.
     */
    lfi: GetFirewallConfigLfi;
    /**
     * Remote File Inclusion Attack - Prohibit unauthorized upload or execution of remote files.
     */
    rfi: GetFirewallConfigRfi;
    /**
     * Remote Execution Attack - Prevent unauthorized execution of remote scripts or commands.
     */
    rce: GetFirewallConfigRce;
    /**
     * PHP Attack - Safeguard against vulnerability exploits in PHP-based applications.
     */
    php: GetFirewallConfigPhp;
    /**
     * Generic Attack - Provide broad protection from various undefined or novel attack vectors.
     */
    gen: GetFirewallConfigGen;
    /**
     * XSS Attack - Prevent injection of malicious scripts into trusted webpages.
     */
    xss: GetFirewallConfigXss;
    /**
     * SQL Injection Attack - Prohibit unauthorized use of SQL commands to manipulate databases.
     */
    sqli: GetFirewallConfigSqli;
    /**
     * Session Fixation Attack - Prevent unauthorized takeover of user sessions by enforcing unique session IDs.
     */
    sf: GetFirewallConfigSf;
    /**
     * Java Attack - Mitigate risks of exploitation targeting Java-based applications or components.
     */
    java: GetFirewallConfigJava;
};
/**
 * [Parameter](https://vercel.com/docs/security/vercel-waf/rule-configuration#parameters) from the incoming traffic.
 */
export declare const GetFirewallConfigType: {
    readonly Host: "host";
    readonly Path: "path";
    readonly Method: "method";
    readonly Header: "header";
    readonly Query: "query";
    readonly Cookie: "cookie";
    readonly TargetPath: "target_path";
    readonly Route: "route";
    readonly RawPath: "raw_path";
    readonly IpAddress: "ip_address";
    readonly Protocol: "protocol";
    readonly Region: "region";
    readonly Scheme: "scheme";
    readonly Environment: "environment";
    readonly UserAgent: "user_agent";
    readonly GeoContinent: "geo_continent";
    readonly GeoCountry: "geo_country";
    readonly GeoCountryRegion: "geo_country_region";
    readonly GeoCity: "geo_city";
    readonly GeoAsNumber: "geo_as_number";
    readonly Ja4Digest: "ja4_digest";
    readonly Ja3Digest: "ja3_digest";
    readonly RateLimitApiId: "rate_limit_api_id";
    readonly ServerAction: "server_action";
};
/**
 * [Parameter](https://vercel.com/docs/security/vercel-waf/rule-configuration#parameters) from the incoming traffic.
 */
export type GetFirewallConfigType = ClosedEnum<typeof GetFirewallConfigType>;
export declare const GetFirewallConfigOp: {
    readonly Re: "re";
    readonly Eq: "eq";
    readonly Ex: "ex";
    readonly Inc: "inc";
    readonly Pre: "pre";
    readonly Suf: "suf";
    readonly Sub: "sub";
    readonly Gt: "gt";
    readonly Gte: "gte";
    readonly Lt: "lt";
    readonly Lte: "lte";
    readonly Nex: "nex";
    readonly Ninc: "ninc";
    readonly Neq: "neq";
};
export type GetFirewallConfigOp = ClosedEnum<typeof GetFirewallConfigOp>;
export type GetFirewallConfigValue = string | number | Array<string>;
export type GetFirewallConfigConditions = {
    /**
     * [Parameter](https://vercel.com/docs/security/vercel-waf/rule-configuration#parameters) from the incoming traffic.
     */
    type: GetFirewallConfigType;
    op: GetFirewallConfigOp;
    neg?: boolean | undefined;
    key?: string | undefined;
    value?: string | number | Array<string> | undefined;
};
export type GetFirewallConfigConditionGroup = {
    conditions: Array<GetFirewallConfigConditions>;
};
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction: {
    readonly Deny: "deny";
    readonly Log: "log";
    readonly Challenge: "challenge";
    readonly Bypass: "bypass";
    readonly RateLimit: "rate_limit";
    readonly Redirect: "redirect";
};
export type GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction = ClosedEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction>;
export declare const GetFirewallConfigAlgo: {
    readonly FixedWindow: "fixed_window";
    readonly TokenBucket: "token_bucket";
};
export type GetFirewallConfigAlgo = ClosedEnum<typeof GetFirewallConfigAlgo>;
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction: {
    readonly Deny: "deny";
    readonly Log: "log";
    readonly Challenge: "challenge";
    readonly RateLimit: "rate_limit";
};
export type GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction = ClosedEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction>;
export type GetFirewallConfigRateLimit = {
    algo: GetFirewallConfigAlgo;
    window: number;
    limit: number;
    keys: Array<string>;
    action?: GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction | null | undefined;
};
export type GetFirewallConfigRedirect = {
    location: string;
    permanent: boolean;
};
export type GetFirewallConfigMitigate = {
    action: GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction;
    rateLimit?: GetFirewallConfigRateLimit | null | undefined;
    redirect?: GetFirewallConfigRedirect | null | undefined;
    actionDuration?: string | null | undefined;
    bypassSystem?: boolean | null | undefined;
};
export type GetFirewallConfigAction = {
    mitigate?: GetFirewallConfigMitigate | undefined;
};
export type GetFirewallConfigRules = {
    id: string;
    name: string;
    description?: string | undefined;
    active: boolean;
    conditionGroup: Array<GetFirewallConfigConditionGroup>;
    action: GetFirewallConfigAction;
};
export declare const GetFirewallConfigSecurityAction: {
    readonly Deny: "deny";
    readonly Log: "log";
    readonly Challenge: "challenge";
    readonly Bypass: "bypass";
};
export type GetFirewallConfigSecurityAction = ClosedEnum<typeof GetFirewallConfigSecurityAction>;
export type GetFirewallConfigIps = {
    id: string;
    hostname: string;
    ip: string;
    notes?: string | undefined;
    action: GetFirewallConfigSecurityAction;
};
export type Changes = {};
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyManagedRulesAction: {
    readonly Deny: "deny";
    readonly Log: "log";
    readonly Challenge: "challenge";
};
export type GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyManagedRulesAction = ClosedEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyManagedRulesAction>;
export type BotProtection = {
    active: boolean;
    action?: GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyManagedRulesAction | undefined;
    updatedAt?: string | undefined;
    userId?: string | undefined;
    username?: string | undefined;
};
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyManagedRulesAiBotsAction: {
    readonly Deny: "deny";
    readonly Log: "log";
    readonly Challenge: "challenge";
};
export type GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyManagedRulesAiBotsAction = ClosedEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyManagedRulesAiBotsAction>;
export type AiBots = {
    active: boolean;
    action?: GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyManagedRulesAiBotsAction | undefined;
    updatedAt?: string | undefined;
    userId?: string | undefined;
    username?: string | undefined;
};
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyManagedRulesOwaspAction: {
    readonly Deny: "deny";
    readonly Log: "log";
    readonly Challenge: "challenge";
};
export type GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyManagedRulesOwaspAction = ClosedEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyManagedRulesOwaspAction>;
export type Owasp = {
    active: boolean;
    action?: GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyManagedRulesOwaspAction | undefined;
    updatedAt?: string | undefined;
    userId?: string | undefined;
    username?: string | undefined;
};
export type ManagedRules = {
    botProtection?: BotProtection | undefined;
    aiBots?: AiBots | undefined;
    owasp?: Owasp | undefined;
};
/**
 * If the firewall configuration includes a [custom managed ruleset](https://vercel.com/docs/security/vercel-waf/managed-rulesets), it will include a `crs` item that has the following values: sd: Scanner Detection ma: Multipart Attack lfi: Local File Inclusion Attack rfi: Remote File Inclusion Attack rce: Remote Execution Attack php: PHP Attack gen: Generic Attack xss: XSS Attack sqli: SQL Injection Attack sf: Session Fixation Attack java: Java Attack
 */
export type GetFirewallConfigResponseBody = {
    ownerId: string;
    projectKey: string;
    id: string;
    version: number;
    updatedAt: string;
    firewallEnabled: boolean;
    /**
     * Custom Ruleset
     */
    crs: GetFirewallConfigCrs;
    rules: Array<GetFirewallConfigRules>;
    ips: Array<GetFirewallConfigIps>;
    changes: Array<Changes>;
    managedRules?: ManagedRules | undefined;
    botIdEnabled?: boolean | undefined;
};
/** @internal */
export declare const GetFirewallConfigRequest$inboundSchema: z.ZodType<GetFirewallConfigRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetFirewallConfigRequest$Outbound = {
    projectId: string;
    teamId?: string | undefined;
    slug?: string | undefined;
    configVersion: string;
};
/** @internal */
export declare const GetFirewallConfigRequest$outboundSchema: z.ZodType<GetFirewallConfigRequest$Outbound, z.ZodTypeDef, GetFirewallConfigRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigRequest$ {
    /** @deprecated use `GetFirewallConfigRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetFirewallConfigRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetFirewallConfigRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetFirewallConfigRequest$Outbound, z.ZodTypeDef, GetFirewallConfigRequest>;
    /** @deprecated use `GetFirewallConfigRequest$Outbound` instead. */
    type Outbound = GetFirewallConfigRequest$Outbound;
}
export declare function getFirewallConfigRequestToJSON(getFirewallConfigRequest: GetFirewallConfigRequest): string;
export declare function getFirewallConfigRequestFromJSON(jsonString: string): SafeParseResult<GetFirewallConfigRequest, SDKValidationError>;
/** @internal */
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction$inboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction>;
/** @internal */
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction$outboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction$ {
    /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Deny: "deny";
        readonly Log: "log";
    }>;
    /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Deny: "deny";
        readonly Log: "log";
    }>;
}
/** @internal */
export declare const GetFirewallConfigSd$inboundSchema: z.ZodType<GetFirewallConfigSd, z.ZodTypeDef, unknown>;
/** @internal */
export type GetFirewallConfigSd$Outbound = {
    active: boolean;
    action: string;
};
/** @internal */
export declare const GetFirewallConfigSd$outboundSchema: z.ZodType<GetFirewallConfigSd$Outbound, z.ZodTypeDef, GetFirewallConfigSd>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigSd$ {
    /** @deprecated use `GetFirewallConfigSd$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetFirewallConfigSd, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetFirewallConfigSd$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetFirewallConfigSd$Outbound, z.ZodTypeDef, GetFirewallConfigSd>;
    /** @deprecated use `GetFirewallConfigSd$Outbound` instead. */
    type Outbound = GetFirewallConfigSd$Outbound;
}
export declare function getFirewallConfigSdToJSON(getFirewallConfigSd: GetFirewallConfigSd): string;
export declare function getFirewallConfigSdFromJSON(jsonString: string): SafeParseResult<GetFirewallConfigSd, SDKValidationError>;
/** @internal */
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction$inboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction>;
/** @internal */
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction$outboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction$ {
    /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Deny: "deny";
        readonly Log: "log";
    }>;
    /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Deny: "deny";
        readonly Log: "log";
    }>;
}
/** @internal */
export declare const GetFirewallConfigMa$inboundSchema: z.ZodType<GetFirewallConfigMa, z.ZodTypeDef, unknown>;
/** @internal */
export type GetFirewallConfigMa$Outbound = {
    active: boolean;
    action: string;
};
/** @internal */
export declare const GetFirewallConfigMa$outboundSchema: z.ZodType<GetFirewallConfigMa$Outbound, z.ZodTypeDef, GetFirewallConfigMa>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigMa$ {
    /** @deprecated use `GetFirewallConfigMa$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetFirewallConfigMa, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetFirewallConfigMa$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetFirewallConfigMa$Outbound, z.ZodTypeDef, GetFirewallConfigMa>;
    /** @deprecated use `GetFirewallConfigMa$Outbound` instead. */
    type Outbound = GetFirewallConfigMa$Outbound;
}
export declare function getFirewallConfigMaToJSON(getFirewallConfigMa: GetFirewallConfigMa): string;
export declare function getFirewallConfigMaFromJSON(jsonString: string): SafeParseResult<GetFirewallConfigMa, SDKValidationError>;
/** @internal */
export declare const GetFirewallConfigSecurityResponseAction$inboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigSecurityResponseAction>;
/** @internal */
export declare const GetFirewallConfigSecurityResponseAction$outboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigSecurityResponseAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigSecurityResponseAction$ {
    /** @deprecated use `GetFirewallConfigSecurityResponseAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Deny: "deny";
        readonly Log: "log";
    }>;
    /** @deprecated use `GetFirewallConfigSecurityResponseAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Deny: "deny";
        readonly Log: "log";
    }>;
}
/** @internal */
export declare const GetFirewallConfigLfi$inboundSchema: z.ZodType<GetFirewallConfigLfi, z.ZodTypeDef, unknown>;
/** @internal */
export type GetFirewallConfigLfi$Outbound = {
    active: boolean;
    action: string;
};
/** @internal */
export declare const GetFirewallConfigLfi$outboundSchema: z.ZodType<GetFirewallConfigLfi$Outbound, z.ZodTypeDef, GetFirewallConfigLfi>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigLfi$ {
    /** @deprecated use `GetFirewallConfigLfi$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetFirewallConfigLfi, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetFirewallConfigLfi$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetFirewallConfigLfi$Outbound, z.ZodTypeDef, GetFirewallConfigLfi>;
    /** @deprecated use `GetFirewallConfigLfi$Outbound` instead. */
    type Outbound = GetFirewallConfigLfi$Outbound;
}
export declare function getFirewallConfigLfiToJSON(getFirewallConfigLfi: GetFirewallConfigLfi): string;
export declare function getFirewallConfigLfiFromJSON(jsonString: string): SafeParseResult<GetFirewallConfigLfi, SDKValidationError>;
/** @internal */
export declare const GetFirewallConfigSecurityResponse200Action$inboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigSecurityResponse200Action>;
/** @internal */
export declare const GetFirewallConfigSecurityResponse200Action$outboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigSecurityResponse200Action>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigSecurityResponse200Action$ {
    /** @deprecated use `GetFirewallConfigSecurityResponse200Action$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Deny: "deny";
        readonly Log: "log";
    }>;
    /** @deprecated use `GetFirewallConfigSecurityResponse200Action$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Deny: "deny";
        readonly Log: "log";
    }>;
}
/** @internal */
export declare const GetFirewallConfigRfi$inboundSchema: z.ZodType<GetFirewallConfigRfi, z.ZodTypeDef, unknown>;
/** @internal */
export type GetFirewallConfigRfi$Outbound = {
    active: boolean;
    action: string;
};
/** @internal */
export declare const GetFirewallConfigRfi$outboundSchema: z.ZodType<GetFirewallConfigRfi$Outbound, z.ZodTypeDef, GetFirewallConfigRfi>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigRfi$ {
    /** @deprecated use `GetFirewallConfigRfi$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetFirewallConfigRfi, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetFirewallConfigRfi$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetFirewallConfigRfi$Outbound, z.ZodTypeDef, GetFirewallConfigRfi>;
    /** @deprecated use `GetFirewallConfigRfi$Outbound` instead. */
    type Outbound = GetFirewallConfigRfi$Outbound;
}
export declare function getFirewallConfigRfiToJSON(getFirewallConfigRfi: GetFirewallConfigRfi): string;
export declare function getFirewallConfigRfiFromJSON(jsonString: string): SafeParseResult<GetFirewallConfigRfi, SDKValidationError>;
/** @internal */
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONAction$inboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONAction>;
/** @internal */
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONAction$outboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigSecurityResponse200ApplicationJSONAction$ {
    /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Deny: "deny";
        readonly Log: "log";
    }>;
    /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Deny: "deny";
        readonly Log: "log";
    }>;
}
/** @internal */
export declare const GetFirewallConfigRce$inboundSchema: z.ZodType<GetFirewallConfigRce, z.ZodTypeDef, unknown>;
/** @internal */
export type GetFirewallConfigRce$Outbound = {
    active: boolean;
    action: string;
};
/** @internal */
export declare const GetFirewallConfigRce$outboundSchema: z.ZodType<GetFirewallConfigRce$Outbound, z.ZodTypeDef, GetFirewallConfigRce>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigRce$ {
    /** @deprecated use `GetFirewallConfigRce$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetFirewallConfigRce, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetFirewallConfigRce$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetFirewallConfigRce$Outbound, z.ZodTypeDef, GetFirewallConfigRce>;
    /** @deprecated use `GetFirewallConfigRce$Outbound` instead. */
    type Outbound = GetFirewallConfigRce$Outbound;
}
export declare function getFirewallConfigRceToJSON(getFirewallConfigRce: GetFirewallConfigRce): string;
export declare function getFirewallConfigRceFromJSON(jsonString: string): SafeParseResult<GetFirewallConfigRce, SDKValidationError>;
/** @internal */
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction$inboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction>;
/** @internal */
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction$outboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction$ {
    /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Deny: "deny";
        readonly Log: "log";
    }>;
    /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Deny: "deny";
        readonly Log: "log";
    }>;
}
/** @internal */
export declare const GetFirewallConfigPhp$inboundSchema: z.ZodType<GetFirewallConfigPhp, z.ZodTypeDef, unknown>;
/** @internal */
export type GetFirewallConfigPhp$Outbound = {
    active: boolean;
    action: string;
};
/** @internal */
export declare const GetFirewallConfigPhp$outboundSchema: z.ZodType<GetFirewallConfigPhp$Outbound, z.ZodTypeDef, GetFirewallConfigPhp>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigPhp$ {
    /** @deprecated use `GetFirewallConfigPhp$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetFirewallConfigPhp, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetFirewallConfigPhp$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetFirewallConfigPhp$Outbound, z.ZodTypeDef, GetFirewallConfigPhp>;
    /** @deprecated use `GetFirewallConfigPhp$Outbound` instead. */
    type Outbound = GetFirewallConfigPhp$Outbound;
}
export declare function getFirewallConfigPhpToJSON(getFirewallConfigPhp: GetFirewallConfigPhp): string;
export declare function getFirewallConfigPhpFromJSON(jsonString: string): SafeParseResult<GetFirewallConfigPhp, SDKValidationError>;
/** @internal */
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction$inboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction>;
/** @internal */
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction$outboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction$ {
    /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Deny: "deny";
        readonly Log: "log";
    }>;
    /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Deny: "deny";
        readonly Log: "log";
    }>;
}
/** @internal */
export declare const GetFirewallConfigGen$inboundSchema: z.ZodType<GetFirewallConfigGen, z.ZodTypeDef, unknown>;
/** @internal */
export type GetFirewallConfigGen$Outbound = {
    active: boolean;
    action: string;
};
/** @internal */
export declare const GetFirewallConfigGen$outboundSchema: z.ZodType<GetFirewallConfigGen$Outbound, z.ZodTypeDef, GetFirewallConfigGen>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigGen$ {
    /** @deprecated use `GetFirewallConfigGen$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetFirewallConfigGen, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetFirewallConfigGen$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetFirewallConfigGen$Outbound, z.ZodTypeDef, GetFirewallConfigGen>;
    /** @deprecated use `GetFirewallConfigGen$Outbound` instead. */
    type Outbound = GetFirewallConfigGen$Outbound;
}
export declare function getFirewallConfigGenToJSON(getFirewallConfigGen: GetFirewallConfigGen): string;
export declare function getFirewallConfigGenFromJSON(jsonString: string): SafeParseResult<GetFirewallConfigGen, SDKValidationError>;
/** @internal */
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXssAction$inboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXssAction>;
/** @internal */
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXssAction$outboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXssAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXssAction$ {
    /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXssAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Deny: "deny";
        readonly Log: "log";
    }>;
    /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXssAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Deny: "deny";
        readonly Log: "log";
    }>;
}
/** @internal */
export declare const GetFirewallConfigXss$inboundSchema: z.ZodType<GetFirewallConfigXss, z.ZodTypeDef, unknown>;
/** @internal */
export type GetFirewallConfigXss$Outbound = {
    active: boolean;
    action: string;
};
/** @internal */
export declare const GetFirewallConfigXss$outboundSchema: z.ZodType<GetFirewallConfigXss$Outbound, z.ZodTypeDef, GetFirewallConfigXss>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigXss$ {
    /** @deprecated use `GetFirewallConfigXss$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetFirewallConfigXss, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetFirewallConfigXss$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetFirewallConfigXss$Outbound, z.ZodTypeDef, GetFirewallConfigXss>;
    /** @deprecated use `GetFirewallConfigXss$Outbound` instead. */
    type Outbound = GetFirewallConfigXss$Outbound;
}
export declare function getFirewallConfigXssToJSON(getFirewallConfigXss: GetFirewallConfigXss): string;
export declare function getFirewallConfigXssFromJSON(jsonString: string): SafeParseResult<GetFirewallConfigXss, SDKValidationError>;
/** @internal */
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction$inboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction>;
/** @internal */
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction$outboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction$ {
    /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Deny: "deny";
        readonly Log: "log";
    }>;
    /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Deny: "deny";
        readonly Log: "log";
    }>;
}
/** @internal */
export declare const GetFirewallConfigSqli$inboundSchema: z.ZodType<GetFirewallConfigSqli, z.ZodTypeDef, unknown>;
/** @internal */
export type GetFirewallConfigSqli$Outbound = {
    active: boolean;
    action: string;
};
/** @internal */
export declare const GetFirewallConfigSqli$outboundSchema: z.ZodType<GetFirewallConfigSqli$Outbound, z.ZodTypeDef, GetFirewallConfigSqli>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigSqli$ {
    /** @deprecated use `GetFirewallConfigSqli$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetFirewallConfigSqli, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetFirewallConfigSqli$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetFirewallConfigSqli$Outbound, z.ZodTypeDef, GetFirewallConfigSqli>;
    /** @deprecated use `GetFirewallConfigSqli$Outbound` instead. */
    type Outbound = GetFirewallConfigSqli$Outbound;
}
export declare function getFirewallConfigSqliToJSON(getFirewallConfigSqli: GetFirewallConfigSqli): string;
export declare function getFirewallConfigSqliFromJSON(jsonString: string): SafeParseResult<GetFirewallConfigSqli, SDKValidationError>;
/** @internal */
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction$inboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction>;
/** @internal */
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction$outboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction$ {
    /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Deny: "deny";
        readonly Log: "log";
    }>;
    /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Deny: "deny";
        readonly Log: "log";
    }>;
}
/** @internal */
export declare const GetFirewallConfigSf$inboundSchema: z.ZodType<GetFirewallConfigSf, z.ZodTypeDef, unknown>;
/** @internal */
export type GetFirewallConfigSf$Outbound = {
    active: boolean;
    action: string;
};
/** @internal */
export declare const GetFirewallConfigSf$outboundSchema: z.ZodType<GetFirewallConfigSf$Outbound, z.ZodTypeDef, GetFirewallConfigSf>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigSf$ {
    /** @deprecated use `GetFirewallConfigSf$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetFirewallConfigSf, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetFirewallConfigSf$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetFirewallConfigSf$Outbound, z.ZodTypeDef, GetFirewallConfigSf>;
    /** @deprecated use `GetFirewallConfigSf$Outbound` instead. */
    type Outbound = GetFirewallConfigSf$Outbound;
}
export declare function getFirewallConfigSfToJSON(getFirewallConfigSf: GetFirewallConfigSf): string;
export declare function getFirewallConfigSfFromJSON(jsonString: string): SafeParseResult<GetFirewallConfigSf, SDKValidationError>;
/** @internal */
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction$inboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction>;
/** @internal */
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction$outboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction$ {
    /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Deny: "deny";
        readonly Log: "log";
    }>;
    /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Deny: "deny";
        readonly Log: "log";
    }>;
}
/** @internal */
export declare const GetFirewallConfigJava$inboundSchema: z.ZodType<GetFirewallConfigJava, z.ZodTypeDef, unknown>;
/** @internal */
export type GetFirewallConfigJava$Outbound = {
    active: boolean;
    action: string;
};
/** @internal */
export declare const GetFirewallConfigJava$outboundSchema: z.ZodType<GetFirewallConfigJava$Outbound, z.ZodTypeDef, GetFirewallConfigJava>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigJava$ {
    /** @deprecated use `GetFirewallConfigJava$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetFirewallConfigJava, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetFirewallConfigJava$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetFirewallConfigJava$Outbound, z.ZodTypeDef, GetFirewallConfigJava>;
    /** @deprecated use `GetFirewallConfigJava$Outbound` instead. */
    type Outbound = GetFirewallConfigJava$Outbound;
}
export declare function getFirewallConfigJavaToJSON(getFirewallConfigJava: GetFirewallConfigJava): string;
export declare function getFirewallConfigJavaFromJSON(jsonString: string): SafeParseResult<GetFirewallConfigJava, SDKValidationError>;
/** @internal */
export declare const GetFirewallConfigCrs$inboundSchema: z.ZodType<GetFirewallConfigCrs, z.ZodTypeDef, unknown>;
/** @internal */
export type GetFirewallConfigCrs$Outbound = {
    sd: GetFirewallConfigSd$Outbound;
    ma: GetFirewallConfigMa$Outbound;
    lfi: GetFirewallConfigLfi$Outbound;
    rfi: GetFirewallConfigRfi$Outbound;
    rce: GetFirewallConfigRce$Outbound;
    php: GetFirewallConfigPhp$Outbound;
    gen: GetFirewallConfigGen$Outbound;
    xss: GetFirewallConfigXss$Outbound;
    sqli: GetFirewallConfigSqli$Outbound;
    sf: GetFirewallConfigSf$Outbound;
    java: GetFirewallConfigJava$Outbound;
};
/** @internal */
export declare const GetFirewallConfigCrs$outboundSchema: z.ZodType<GetFirewallConfigCrs$Outbound, z.ZodTypeDef, GetFirewallConfigCrs>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigCrs$ {
    /** @deprecated use `GetFirewallConfigCrs$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetFirewallConfigCrs, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetFirewallConfigCrs$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetFirewallConfigCrs$Outbound, z.ZodTypeDef, GetFirewallConfigCrs>;
    /** @deprecated use `GetFirewallConfigCrs$Outbound` instead. */
    type Outbound = GetFirewallConfigCrs$Outbound;
}
export declare function getFirewallConfigCrsToJSON(getFirewallConfigCrs: GetFirewallConfigCrs): string;
export declare function getFirewallConfigCrsFromJSON(jsonString: string): SafeParseResult<GetFirewallConfigCrs, SDKValidationError>;
/** @internal */
export declare const GetFirewallConfigType$inboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigType>;
/** @internal */
export declare const GetFirewallConfigType$outboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigType$ {
    /** @deprecated use `GetFirewallConfigType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Host: "host";
        readonly Path: "path";
        readonly Method: "method";
        readonly Header: "header";
        readonly Query: "query";
        readonly Cookie: "cookie";
        readonly TargetPath: "target_path";
        readonly Route: "route";
        readonly RawPath: "raw_path";
        readonly IpAddress: "ip_address";
        readonly Protocol: "protocol";
        readonly Region: "region";
        readonly Scheme: "scheme";
        readonly Environment: "environment";
        readonly UserAgent: "user_agent";
        readonly GeoContinent: "geo_continent";
        readonly GeoCountry: "geo_country";
        readonly GeoCountryRegion: "geo_country_region";
        readonly GeoCity: "geo_city";
        readonly GeoAsNumber: "geo_as_number";
        readonly Ja4Digest: "ja4_digest";
        readonly Ja3Digest: "ja3_digest";
        readonly RateLimitApiId: "rate_limit_api_id";
        readonly ServerAction: "server_action";
    }>;
    /** @deprecated use `GetFirewallConfigType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Host: "host";
        readonly Path: "path";
        readonly Method: "method";
        readonly Header: "header";
        readonly Query: "query";
        readonly Cookie: "cookie";
        readonly TargetPath: "target_path";
        readonly Route: "route";
        readonly RawPath: "raw_path";
        readonly IpAddress: "ip_address";
        readonly Protocol: "protocol";
        readonly Region: "region";
        readonly Scheme: "scheme";
        readonly Environment: "environment";
        readonly UserAgent: "user_agent";
        readonly GeoContinent: "geo_continent";
        readonly GeoCountry: "geo_country";
        readonly GeoCountryRegion: "geo_country_region";
        readonly GeoCity: "geo_city";
        readonly GeoAsNumber: "geo_as_number";
        readonly Ja4Digest: "ja4_digest";
        readonly Ja3Digest: "ja3_digest";
        readonly RateLimitApiId: "rate_limit_api_id";
        readonly ServerAction: "server_action";
    }>;
}
/** @internal */
export declare const GetFirewallConfigOp$inboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigOp>;
/** @internal */
export declare const GetFirewallConfigOp$outboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigOp>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigOp$ {
    /** @deprecated use `GetFirewallConfigOp$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Re: "re";
        readonly Eq: "eq";
        readonly Ex: "ex";
        readonly Inc: "inc";
        readonly Pre: "pre";
        readonly Suf: "suf";
        readonly Sub: "sub";
        readonly Gt: "gt";
        readonly Gte: "gte";
        readonly Lt: "lt";
        readonly Lte: "lte";
        readonly Nex: "nex";
        readonly Ninc: "ninc";
        readonly Neq: "neq";
    }>;
    /** @deprecated use `GetFirewallConfigOp$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Re: "re";
        readonly Eq: "eq";
        readonly Ex: "ex";
        readonly Inc: "inc";
        readonly Pre: "pre";
        readonly Suf: "suf";
        readonly Sub: "sub";
        readonly Gt: "gt";
        readonly Gte: "gte";
        readonly Lt: "lt";
        readonly Lte: "lte";
        readonly Nex: "nex";
        readonly Ninc: "ninc";
        readonly Neq: "neq";
    }>;
}
/** @internal */
export declare const GetFirewallConfigValue$inboundSchema: z.ZodType<GetFirewallConfigValue, z.ZodTypeDef, unknown>;
/** @internal */
export type GetFirewallConfigValue$Outbound = string | number | Array<string>;
/** @internal */
export declare const GetFirewallConfigValue$outboundSchema: z.ZodType<GetFirewallConfigValue$Outbound, z.ZodTypeDef, GetFirewallConfigValue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigValue$ {
    /** @deprecated use `GetFirewallConfigValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetFirewallConfigValue, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetFirewallConfigValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetFirewallConfigValue$Outbound, z.ZodTypeDef, GetFirewallConfigValue>;
    /** @deprecated use `GetFirewallConfigValue$Outbound` instead. */
    type Outbound = GetFirewallConfigValue$Outbound;
}
export declare function getFirewallConfigValueToJSON(getFirewallConfigValue: GetFirewallConfigValue): string;
export declare function getFirewallConfigValueFromJSON(jsonString: string): SafeParseResult<GetFirewallConfigValue, SDKValidationError>;
/** @internal */
export declare const GetFirewallConfigConditions$inboundSchema: z.ZodType<GetFirewallConfigConditions, z.ZodTypeDef, unknown>;
/** @internal */
export type GetFirewallConfigConditions$Outbound = {
    type: string;
    op: string;
    neg?: boolean | undefined;
    key?: string | undefined;
    value?: string | number | Array<string> | undefined;
};
/** @internal */
export declare const GetFirewallConfigConditions$outboundSchema: z.ZodType<GetFirewallConfigConditions$Outbound, z.ZodTypeDef, GetFirewallConfigConditions>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigConditions$ {
    /** @deprecated use `GetFirewallConfigConditions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetFirewallConfigConditions, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetFirewallConfigConditions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetFirewallConfigConditions$Outbound, z.ZodTypeDef, GetFirewallConfigConditions>;
    /** @deprecated use `GetFirewallConfigConditions$Outbound` instead. */
    type Outbound = GetFirewallConfigConditions$Outbound;
}
export declare function getFirewallConfigConditionsToJSON(getFirewallConfigConditions: GetFirewallConfigConditions): string;
export declare function getFirewallConfigConditionsFromJSON(jsonString: string): SafeParseResult<GetFirewallConfigConditions, SDKValidationError>;
/** @internal */
export declare const GetFirewallConfigConditionGroup$inboundSchema: z.ZodType<GetFirewallConfigConditionGroup, z.ZodTypeDef, unknown>;
/** @internal */
export type GetFirewallConfigConditionGroup$Outbound = {
    conditions: Array<GetFirewallConfigConditions$Outbound>;
};
/** @internal */
export declare const GetFirewallConfigConditionGroup$outboundSchema: z.ZodType<GetFirewallConfigConditionGroup$Outbound, z.ZodTypeDef, GetFirewallConfigConditionGroup>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigConditionGroup$ {
    /** @deprecated use `GetFirewallConfigConditionGroup$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetFirewallConfigConditionGroup, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetFirewallConfigConditionGroup$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetFirewallConfigConditionGroup$Outbound, z.ZodTypeDef, GetFirewallConfigConditionGroup>;
    /** @deprecated use `GetFirewallConfigConditionGroup$Outbound` instead. */
    type Outbound = GetFirewallConfigConditionGroup$Outbound;
}
export declare function getFirewallConfigConditionGroupToJSON(getFirewallConfigConditionGroup: GetFirewallConfigConditionGroup): string;
export declare function getFirewallConfigConditionGroupFromJSON(jsonString: string): SafeParseResult<GetFirewallConfigConditionGroup, SDKValidationError>;
/** @internal */
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction$inboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction>;
/** @internal */
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction$outboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction$ {
    /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Deny: "deny";
        readonly Log: "log";
        readonly Challenge: "challenge";
        readonly Bypass: "bypass";
        readonly RateLimit: "rate_limit";
        readonly Redirect: "redirect";
    }>;
    /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Deny: "deny";
        readonly Log: "log";
        readonly Challenge: "challenge";
        readonly Bypass: "bypass";
        readonly RateLimit: "rate_limit";
        readonly Redirect: "redirect";
    }>;
}
/** @internal */
export declare const GetFirewallConfigAlgo$inboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigAlgo>;
/** @internal */
export declare const GetFirewallConfigAlgo$outboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigAlgo>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigAlgo$ {
    /** @deprecated use `GetFirewallConfigAlgo$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly FixedWindow: "fixed_window";
        readonly TokenBucket: "token_bucket";
    }>;
    /** @deprecated use `GetFirewallConfigAlgo$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly FixedWindow: "fixed_window";
        readonly TokenBucket: "token_bucket";
    }>;
}
/** @internal */
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction$inboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction>;
/** @internal */
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction$outboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction$ {
    /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Deny: "deny";
        readonly Log: "log";
        readonly Challenge: "challenge";
        readonly RateLimit: "rate_limit";
    }>;
    /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Deny: "deny";
        readonly Log: "log";
        readonly Challenge: "challenge";
        readonly RateLimit: "rate_limit";
    }>;
}
/** @internal */
export declare const GetFirewallConfigRateLimit$inboundSchema: z.ZodType<GetFirewallConfigRateLimit, z.ZodTypeDef, unknown>;
/** @internal */
export type GetFirewallConfigRateLimit$Outbound = {
    algo: string;
    window: number;
    limit: number;
    keys: Array<string>;
    action?: string | null | undefined;
};
/** @internal */
export declare const GetFirewallConfigRateLimit$outboundSchema: z.ZodType<GetFirewallConfigRateLimit$Outbound, z.ZodTypeDef, GetFirewallConfigRateLimit>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigRateLimit$ {
    /** @deprecated use `GetFirewallConfigRateLimit$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetFirewallConfigRateLimit, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetFirewallConfigRateLimit$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetFirewallConfigRateLimit$Outbound, z.ZodTypeDef, GetFirewallConfigRateLimit>;
    /** @deprecated use `GetFirewallConfigRateLimit$Outbound` instead. */
    type Outbound = GetFirewallConfigRateLimit$Outbound;
}
export declare function getFirewallConfigRateLimitToJSON(getFirewallConfigRateLimit: GetFirewallConfigRateLimit): string;
export declare function getFirewallConfigRateLimitFromJSON(jsonString: string): SafeParseResult<GetFirewallConfigRateLimit, SDKValidationError>;
/** @internal */
export declare const GetFirewallConfigRedirect$inboundSchema: z.ZodType<GetFirewallConfigRedirect, z.ZodTypeDef, unknown>;
/** @internal */
export type GetFirewallConfigRedirect$Outbound = {
    location: string;
    permanent: boolean;
};
/** @internal */
export declare const GetFirewallConfigRedirect$outboundSchema: z.ZodType<GetFirewallConfigRedirect$Outbound, z.ZodTypeDef, GetFirewallConfigRedirect>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigRedirect$ {
    /** @deprecated use `GetFirewallConfigRedirect$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetFirewallConfigRedirect, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetFirewallConfigRedirect$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetFirewallConfigRedirect$Outbound, z.ZodTypeDef, GetFirewallConfigRedirect>;
    /** @deprecated use `GetFirewallConfigRedirect$Outbound` instead. */
    type Outbound = GetFirewallConfigRedirect$Outbound;
}
export declare function getFirewallConfigRedirectToJSON(getFirewallConfigRedirect: GetFirewallConfigRedirect): string;
export declare function getFirewallConfigRedirectFromJSON(jsonString: string): SafeParseResult<GetFirewallConfigRedirect, SDKValidationError>;
/** @internal */
export declare const GetFirewallConfigMitigate$inboundSchema: z.ZodType<GetFirewallConfigMitigate, z.ZodTypeDef, unknown>;
/** @internal */
export type GetFirewallConfigMitigate$Outbound = {
    action: string;
    rateLimit?: GetFirewallConfigRateLimit$Outbound | null | undefined;
    redirect?: GetFirewallConfigRedirect$Outbound | null | undefined;
    actionDuration?: string | null | undefined;
    bypassSystem?: boolean | null | undefined;
};
/** @internal */
export declare const GetFirewallConfigMitigate$outboundSchema: z.ZodType<GetFirewallConfigMitigate$Outbound, z.ZodTypeDef, GetFirewallConfigMitigate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigMitigate$ {
    /** @deprecated use `GetFirewallConfigMitigate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetFirewallConfigMitigate, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetFirewallConfigMitigate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetFirewallConfigMitigate$Outbound, z.ZodTypeDef, GetFirewallConfigMitigate>;
    /** @deprecated use `GetFirewallConfigMitigate$Outbound` instead. */
    type Outbound = GetFirewallConfigMitigate$Outbound;
}
export declare function getFirewallConfigMitigateToJSON(getFirewallConfigMitigate: GetFirewallConfigMitigate): string;
export declare function getFirewallConfigMitigateFromJSON(jsonString: string): SafeParseResult<GetFirewallConfigMitigate, SDKValidationError>;
/** @internal */
export declare const GetFirewallConfigAction$inboundSchema: z.ZodType<GetFirewallConfigAction, z.ZodTypeDef, unknown>;
/** @internal */
export type GetFirewallConfigAction$Outbound = {
    mitigate?: GetFirewallConfigMitigate$Outbound | undefined;
};
/** @internal */
export declare const GetFirewallConfigAction$outboundSchema: z.ZodType<GetFirewallConfigAction$Outbound, z.ZodTypeDef, GetFirewallConfigAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigAction$ {
    /** @deprecated use `GetFirewallConfigAction$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetFirewallConfigAction, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetFirewallConfigAction$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetFirewallConfigAction$Outbound, z.ZodTypeDef, GetFirewallConfigAction>;
    /** @deprecated use `GetFirewallConfigAction$Outbound` instead. */
    type Outbound = GetFirewallConfigAction$Outbound;
}
export declare function getFirewallConfigActionToJSON(getFirewallConfigAction: GetFirewallConfigAction): string;
export declare function getFirewallConfigActionFromJSON(jsonString: string): SafeParseResult<GetFirewallConfigAction, SDKValidationError>;
/** @internal */
export declare const GetFirewallConfigRules$inboundSchema: z.ZodType<GetFirewallConfigRules, z.ZodTypeDef, unknown>;
/** @internal */
export type GetFirewallConfigRules$Outbound = {
    id: string;
    name: string;
    description?: string | undefined;
    active: boolean;
    conditionGroup: Array<GetFirewallConfigConditionGroup$Outbound>;
    action: GetFirewallConfigAction$Outbound;
};
/** @internal */
export declare const GetFirewallConfigRules$outboundSchema: z.ZodType<GetFirewallConfigRules$Outbound, z.ZodTypeDef, GetFirewallConfigRules>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigRules$ {
    /** @deprecated use `GetFirewallConfigRules$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetFirewallConfigRules, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetFirewallConfigRules$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetFirewallConfigRules$Outbound, z.ZodTypeDef, GetFirewallConfigRules>;
    /** @deprecated use `GetFirewallConfigRules$Outbound` instead. */
    type Outbound = GetFirewallConfigRules$Outbound;
}
export declare function getFirewallConfigRulesToJSON(getFirewallConfigRules: GetFirewallConfigRules): string;
export declare function getFirewallConfigRulesFromJSON(jsonString: string): SafeParseResult<GetFirewallConfigRules, SDKValidationError>;
/** @internal */
export declare const GetFirewallConfigSecurityAction$inboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigSecurityAction>;
/** @internal */
export declare const GetFirewallConfigSecurityAction$outboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigSecurityAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigSecurityAction$ {
    /** @deprecated use `GetFirewallConfigSecurityAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Deny: "deny";
        readonly Log: "log";
        readonly Challenge: "challenge";
        readonly Bypass: "bypass";
    }>;
    /** @deprecated use `GetFirewallConfigSecurityAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Deny: "deny";
        readonly Log: "log";
        readonly Challenge: "challenge";
        readonly Bypass: "bypass";
    }>;
}
/** @internal */
export declare const GetFirewallConfigIps$inboundSchema: z.ZodType<GetFirewallConfigIps, z.ZodTypeDef, unknown>;
/** @internal */
export type GetFirewallConfigIps$Outbound = {
    id: string;
    hostname: string;
    ip: string;
    notes?: string | undefined;
    action: string;
};
/** @internal */
export declare const GetFirewallConfigIps$outboundSchema: z.ZodType<GetFirewallConfigIps$Outbound, z.ZodTypeDef, GetFirewallConfigIps>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigIps$ {
    /** @deprecated use `GetFirewallConfigIps$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetFirewallConfigIps, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetFirewallConfigIps$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetFirewallConfigIps$Outbound, z.ZodTypeDef, GetFirewallConfigIps>;
    /** @deprecated use `GetFirewallConfigIps$Outbound` instead. */
    type Outbound = GetFirewallConfigIps$Outbound;
}
export declare function getFirewallConfigIpsToJSON(getFirewallConfigIps: GetFirewallConfigIps): string;
export declare function getFirewallConfigIpsFromJSON(jsonString: string): SafeParseResult<GetFirewallConfigIps, SDKValidationError>;
/** @internal */
export declare const Changes$inboundSchema: z.ZodType<Changes, z.ZodTypeDef, unknown>;
/** @internal */
export type Changes$Outbound = {};
/** @internal */
export declare const Changes$outboundSchema: z.ZodType<Changes$Outbound, z.ZodTypeDef, Changes>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Changes$ {
    /** @deprecated use `Changes$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Changes, z.ZodTypeDef, unknown>;
    /** @deprecated use `Changes$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Changes$Outbound, z.ZodTypeDef, Changes>;
    /** @deprecated use `Changes$Outbound` instead. */
    type Outbound = Changes$Outbound;
}
export declare function changesToJSON(changes: Changes): string;
export declare function changesFromJSON(jsonString: string): SafeParseResult<Changes, SDKValidationError>;
/** @internal */
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyManagedRulesAction$inboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyManagedRulesAction>;
/** @internal */
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyManagedRulesAction$outboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyManagedRulesAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyManagedRulesAction$ {
    /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyManagedRulesAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Deny: "deny";
        readonly Log: "log";
        readonly Challenge: "challenge";
    }>;
    /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyManagedRulesAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Deny: "deny";
        readonly Log: "log";
        readonly Challenge: "challenge";
    }>;
}
/** @internal */
export declare const BotProtection$inboundSchema: z.ZodType<BotProtection, z.ZodTypeDef, unknown>;
/** @internal */
export type BotProtection$Outbound = {
    active: boolean;
    action?: string | undefined;
    updatedAt?: string | undefined;
    userId?: string | undefined;
    username?: string | undefined;
};
/** @internal */
export declare const BotProtection$outboundSchema: z.ZodType<BotProtection$Outbound, z.ZodTypeDef, BotProtection>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BotProtection$ {
    /** @deprecated use `BotProtection$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BotProtection, z.ZodTypeDef, unknown>;
    /** @deprecated use `BotProtection$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BotProtection$Outbound, z.ZodTypeDef, BotProtection>;
    /** @deprecated use `BotProtection$Outbound` instead. */
    type Outbound = BotProtection$Outbound;
}
export declare function botProtectionToJSON(botProtection: BotProtection): string;
export declare function botProtectionFromJSON(jsonString: string): SafeParseResult<BotProtection, SDKValidationError>;
/** @internal */
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyManagedRulesAiBotsAction$inboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyManagedRulesAiBotsAction>;
/** @internal */
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyManagedRulesAiBotsAction$outboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyManagedRulesAiBotsAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyManagedRulesAiBotsAction$ {
    /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyManagedRulesAiBotsAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Deny: "deny";
        readonly Log: "log";
        readonly Challenge: "challenge";
    }>;
    /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyManagedRulesAiBotsAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Deny: "deny";
        readonly Log: "log";
        readonly Challenge: "challenge";
    }>;
}
/** @internal */
export declare const AiBots$inboundSchema: z.ZodType<AiBots, z.ZodTypeDef, unknown>;
/** @internal */
export type AiBots$Outbound = {
    active: boolean;
    action?: string | undefined;
    updatedAt?: string | undefined;
    userId?: string | undefined;
    username?: string | undefined;
};
/** @internal */
export declare const AiBots$outboundSchema: z.ZodType<AiBots$Outbound, z.ZodTypeDef, AiBots>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AiBots$ {
    /** @deprecated use `AiBots$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AiBots, z.ZodTypeDef, unknown>;
    /** @deprecated use `AiBots$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AiBots$Outbound, z.ZodTypeDef, AiBots>;
    /** @deprecated use `AiBots$Outbound` instead. */
    type Outbound = AiBots$Outbound;
}
export declare function aiBotsToJSON(aiBots: AiBots): string;
export declare function aiBotsFromJSON(jsonString: string): SafeParseResult<AiBots, SDKValidationError>;
/** @internal */
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyManagedRulesOwaspAction$inboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyManagedRulesOwaspAction>;
/** @internal */
export declare const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyManagedRulesOwaspAction$outboundSchema: z.ZodNativeEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyManagedRulesOwaspAction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyManagedRulesOwaspAction$ {
    /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyManagedRulesOwaspAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Deny: "deny";
        readonly Log: "log";
        readonly Challenge: "challenge";
    }>;
    /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyManagedRulesOwaspAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Deny: "deny";
        readonly Log: "log";
        readonly Challenge: "challenge";
    }>;
}
/** @internal */
export declare const Owasp$inboundSchema: z.ZodType<Owasp, z.ZodTypeDef, unknown>;
/** @internal */
export type Owasp$Outbound = {
    active: boolean;
    action?: string | undefined;
    updatedAt?: string | undefined;
    userId?: string | undefined;
    username?: string | undefined;
};
/** @internal */
export declare const Owasp$outboundSchema: z.ZodType<Owasp$Outbound, z.ZodTypeDef, Owasp>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Owasp$ {
    /** @deprecated use `Owasp$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Owasp, z.ZodTypeDef, unknown>;
    /** @deprecated use `Owasp$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Owasp$Outbound, z.ZodTypeDef, Owasp>;
    /** @deprecated use `Owasp$Outbound` instead. */
    type Outbound = Owasp$Outbound;
}
export declare function owaspToJSON(owasp: Owasp): string;
export declare function owaspFromJSON(jsonString: string): SafeParseResult<Owasp, SDKValidationError>;
/** @internal */
export declare const ManagedRules$inboundSchema: z.ZodType<ManagedRules, z.ZodTypeDef, unknown>;
/** @internal */
export type ManagedRules$Outbound = {
    bot_protection?: BotProtection$Outbound | undefined;
    ai_bots?: AiBots$Outbound | undefined;
    owasp?: Owasp$Outbound | undefined;
};
/** @internal */
export declare const ManagedRules$outboundSchema: z.ZodType<ManagedRules$Outbound, z.ZodTypeDef, ManagedRules>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ManagedRules$ {
    /** @deprecated use `ManagedRules$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ManagedRules, z.ZodTypeDef, unknown>;
    /** @deprecated use `ManagedRules$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ManagedRules$Outbound, z.ZodTypeDef, ManagedRules>;
    /** @deprecated use `ManagedRules$Outbound` instead. */
    type Outbound = ManagedRules$Outbound;
}
export declare function managedRulesToJSON(managedRules: ManagedRules): string;
export declare function managedRulesFromJSON(jsonString: string): SafeParseResult<ManagedRules, SDKValidationError>;
/** @internal */
export declare const GetFirewallConfigResponseBody$inboundSchema: z.ZodType<GetFirewallConfigResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type GetFirewallConfigResponseBody$Outbound = {
    ownerId: string;
    projectKey: string;
    id: string;
    version: number;
    updatedAt: string;
    firewallEnabled: boolean;
    crs: GetFirewallConfigCrs$Outbound;
    rules: Array<GetFirewallConfigRules$Outbound>;
    ips: Array<GetFirewallConfigIps$Outbound>;
    changes: Array<Changes$Outbound>;
    managedRules?: ManagedRules$Outbound | undefined;
    botIdEnabled?: boolean | undefined;
};
/** @internal */
export declare const GetFirewallConfigResponseBody$outboundSchema: z.ZodType<GetFirewallConfigResponseBody$Outbound, z.ZodTypeDef, GetFirewallConfigResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetFirewallConfigResponseBody$ {
    /** @deprecated use `GetFirewallConfigResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetFirewallConfigResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetFirewallConfigResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetFirewallConfigResponseBody$Outbound, z.ZodTypeDef, GetFirewallConfigResponseBody>;
    /** @deprecated use `GetFirewallConfigResponseBody$Outbound` instead. */
    type Outbound = GetFirewallConfigResponseBody$Outbound;
}
export declare function getFirewallConfigResponseBodyToJSON(getFirewallConfigResponseBody: GetFirewallConfigResponseBody): string;
export declare function getFirewallConfigResponseBodyFromJSON(jsonString: string): SafeParseResult<GetFirewallConfigResponseBody, SDKValidationError>;
//# sourceMappingURL=getfirewallconfigop.d.ts.map