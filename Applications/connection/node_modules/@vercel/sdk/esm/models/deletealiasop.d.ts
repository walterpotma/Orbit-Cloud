import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type DeleteAliasRequest = {
    /**
     * The ID or alias that will be removed
     */
    aliasId: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};
export declare const DeleteAliasStatus: {
    readonly Success: "SUCCESS";
};
export type DeleteAliasStatus = ClosedEnum<typeof DeleteAliasStatus>;
/**
 * The alias was successfully removed
 */
export type DeleteAliasResponseBody = {
    status: DeleteAliasStatus;
};
/** @internal */
export declare const DeleteAliasRequest$inboundSchema: z.ZodType<DeleteAliasRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type DeleteAliasRequest$Outbound = {
    aliasId: string;
    teamId?: string | undefined;
    slug?: string | undefined;
};
/** @internal */
export declare const DeleteAliasRequest$outboundSchema: z.ZodType<DeleteAliasRequest$Outbound, z.ZodTypeDef, DeleteAliasRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace DeleteAliasRequest$ {
    /** @deprecated use `DeleteAliasRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DeleteAliasRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `DeleteAliasRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DeleteAliasRequest$Outbound, z.ZodTypeDef, DeleteAliasRequest>;
    /** @deprecated use `DeleteAliasRequest$Outbound` instead. */
    type Outbound = DeleteAliasRequest$Outbound;
}
export declare function deleteAliasRequestToJSON(deleteAliasRequest: DeleteAliasRequest): string;
export declare function deleteAliasRequestFromJSON(jsonString: string): SafeParseResult<DeleteAliasRequest, SDKValidationError>;
/** @internal */
export declare const DeleteAliasStatus$inboundSchema: z.ZodNativeEnum<typeof DeleteAliasStatus>;
/** @internal */
export declare const DeleteAliasStatus$outboundSchema: z.ZodNativeEnum<typeof DeleteAliasStatus>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace DeleteAliasStatus$ {
    /** @deprecated use `DeleteAliasStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Success: "SUCCESS";
    }>;
    /** @deprecated use `DeleteAliasStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Success: "SUCCESS";
    }>;
}
/** @internal */
export declare const DeleteAliasResponseBody$inboundSchema: z.ZodType<DeleteAliasResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type DeleteAliasResponseBody$Outbound = {
    status: string;
};
/** @internal */
export declare const DeleteAliasResponseBody$outboundSchema: z.ZodType<DeleteAliasResponseBody$Outbound, z.ZodTypeDef, DeleteAliasResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace DeleteAliasResponseBody$ {
    /** @deprecated use `DeleteAliasResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DeleteAliasResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `DeleteAliasResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DeleteAliasResponseBody$Outbound, z.ZodTypeDef, DeleteAliasResponseBody>;
    /** @deprecated use `DeleteAliasResponseBody$Outbound` instead. */
    type Outbound = DeleteAliasResponseBody$Outbound;
}
export declare function deleteAliasResponseBodyToJSON(deleteAliasResponseBody: DeleteAliasResponseBody): string;
export declare function deleteAliasResponseBodyFromJSON(jsonString: string): SafeParseResult<DeleteAliasResponseBody, SDKValidationError>;
//# sourceMappingURL=deletealiasop.d.ts.map