import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
/**
 * The role of the user to invite
 */
export declare const InviteUserToTeamRole: {
    readonly Owner: "OWNER";
    readonly Member: "MEMBER";
    readonly Developer: "DEVELOPER";
    readonly Security: "SECURITY";
    readonly Billing: "BILLING";
    readonly Viewer: "VIEWER";
    readonly ViewerForPlus: "VIEWER_FOR_PLUS";
    readonly Contributor: "CONTRIBUTOR";
};
/**
 * The role of the user to invite
 */
export type InviteUserToTeamRole = ClosedEnum<typeof InviteUserToTeamRole>;
/**
 * Sets the project roles for the invited user
 */
export declare const InviteUserToTeamTeamsRole: {
    readonly Admin: "ADMIN";
    readonly ProjectViewer: "PROJECT_VIEWER";
    readonly ProjectDeveloper: "PROJECT_DEVELOPER";
};
/**
 * Sets the project roles for the invited user
 */
export type InviteUserToTeamTeamsRole = ClosedEnum<typeof InviteUserToTeamTeamsRole>;
export type InviteUserToTeamProjects = {
    /**
     * The ID of the project.
     */
    projectId: string;
    /**
     * Sets the project roles for the invited user
     */
    role: InviteUserToTeamTeamsRole;
};
export type InviteUserToTeamRequestBody = {
    /**
     * The email address of the user to invite
     */
    email: string;
    /**
     * The role of the user to invite
     */
    role?: InviteUserToTeamRole | undefined;
    projects?: Array<InviteUserToTeamProjects> | undefined;
};
export type InviteUserToTeamRequest = {
    teamId: string;
    requestBody: InviteUserToTeamRequestBody;
};
/**
 * The role used for the invitation
 */
export declare const InviteUserToTeamTeamsResponseRole: {
    readonly Owner: "OWNER";
    readonly Member: "MEMBER";
    readonly Developer: "DEVELOPER";
    readonly Security: "SECURITY";
    readonly Billing: "BILLING";
    readonly Viewer: "VIEWER";
    readonly ViewerForPlus: "VIEWER_FOR_PLUS";
    readonly Contributor: "CONTRIBUTOR";
};
/**
 * The role used for the invitation
 */
export type InviteUserToTeamTeamsResponseRole = ClosedEnum<typeof InviteUserToTeamTeamsResponseRole>;
/**
 * The team roles of the user
 */
export declare const InviteUserToTeamTeamRoles: {
    readonly Owner: "OWNER";
    readonly Member: "MEMBER";
    readonly Developer: "DEVELOPER";
    readonly Security: "SECURITY";
    readonly Billing: "BILLING";
    readonly Viewer: "VIEWER";
    readonly ViewerForPlus: "VIEWER_FOR_PLUS";
    readonly Contributor: "CONTRIBUTOR";
};
/**
 * The team roles of the user
 */
export type InviteUserToTeamTeamRoles = ClosedEnum<typeof InviteUserToTeamTeamRoles>;
/**
 * The team permissions of the user
 */
export declare const InviteUserToTeamTeamPermissions: {
    readonly IntegrationManager: "IntegrationManager";
    readonly CreateProject: "CreateProject";
    readonly FullProductionDeployment: "FullProductionDeployment";
    readonly UsageViewer: "UsageViewer";
    readonly EnvVariableManager: "EnvVariableManager";
    readonly EnvironmentManager: "EnvironmentManager";
    readonly V0Builder: "V0Builder";
    readonly V0Chatter: "V0Chatter";
    readonly V0Viewer: "V0Viewer";
};
/**
 * The team permissions of the user
 */
export type InviteUserToTeamTeamPermissions = ClosedEnum<typeof InviteUserToTeamTeamPermissions>;
/**
 * The member was successfully added to the team
 */
export type InviteUserToTeamResponseBody = {
    /**
     * The ID of the invited user
     */
    uid: string;
    /**
     * The username of the invited user
     */
    username: string;
    /**
     * The email of the invited user.
     */
    email: string;
    /**
     * The role used for the invitation
     */
    role: InviteUserToTeamTeamsResponseRole;
    /**
     * The team roles of the user
     */
    teamRoles?: Array<InviteUserToTeamTeamRoles> | undefined;
    /**
     * The team permissions of the user
     */
    teamPermissions?: Array<InviteUserToTeamTeamPermissions> | undefined;
};
/** @internal */
export declare const InviteUserToTeamRole$inboundSchema: z.ZodNativeEnum<typeof InviteUserToTeamRole>;
/** @internal */
export declare const InviteUserToTeamRole$outboundSchema: z.ZodNativeEnum<typeof InviteUserToTeamRole>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace InviteUserToTeamRole$ {
    /** @deprecated use `InviteUserToTeamRole$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly ViewerForPlus: "VIEWER_FOR_PLUS";
        readonly Contributor: "CONTRIBUTOR";
    }>;
    /** @deprecated use `InviteUserToTeamRole$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly ViewerForPlus: "VIEWER_FOR_PLUS";
        readonly Contributor: "CONTRIBUTOR";
    }>;
}
/** @internal */
export declare const InviteUserToTeamTeamsRole$inboundSchema: z.ZodNativeEnum<typeof InviteUserToTeamTeamsRole>;
/** @internal */
export declare const InviteUserToTeamTeamsRole$outboundSchema: z.ZodNativeEnum<typeof InviteUserToTeamTeamsRole>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace InviteUserToTeamTeamsRole$ {
    /** @deprecated use `InviteUserToTeamTeamsRole$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Admin: "ADMIN";
        readonly ProjectViewer: "PROJECT_VIEWER";
        readonly ProjectDeveloper: "PROJECT_DEVELOPER";
    }>;
    /** @deprecated use `InviteUserToTeamTeamsRole$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Admin: "ADMIN";
        readonly ProjectViewer: "PROJECT_VIEWER";
        readonly ProjectDeveloper: "PROJECT_DEVELOPER";
    }>;
}
/** @internal */
export declare const InviteUserToTeamProjects$inboundSchema: z.ZodType<InviteUserToTeamProjects, z.ZodTypeDef, unknown>;
/** @internal */
export type InviteUserToTeamProjects$Outbound = {
    projectId: string;
    role: string;
};
/** @internal */
export declare const InviteUserToTeamProjects$outboundSchema: z.ZodType<InviteUserToTeamProjects$Outbound, z.ZodTypeDef, InviteUserToTeamProjects>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace InviteUserToTeamProjects$ {
    /** @deprecated use `InviteUserToTeamProjects$inboundSchema` instead. */
    const inboundSchema: z.ZodType<InviteUserToTeamProjects, z.ZodTypeDef, unknown>;
    /** @deprecated use `InviteUserToTeamProjects$outboundSchema` instead. */
    const outboundSchema: z.ZodType<InviteUserToTeamProjects$Outbound, z.ZodTypeDef, InviteUserToTeamProjects>;
    /** @deprecated use `InviteUserToTeamProjects$Outbound` instead. */
    type Outbound = InviteUserToTeamProjects$Outbound;
}
export declare function inviteUserToTeamProjectsToJSON(inviteUserToTeamProjects: InviteUserToTeamProjects): string;
export declare function inviteUserToTeamProjectsFromJSON(jsonString: string): SafeParseResult<InviteUserToTeamProjects, SDKValidationError>;
/** @internal */
export declare const InviteUserToTeamRequestBody$inboundSchema: z.ZodType<InviteUserToTeamRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type InviteUserToTeamRequestBody$Outbound = {
    email: string;
    role: string;
    projects?: Array<InviteUserToTeamProjects$Outbound> | undefined;
};
/** @internal */
export declare const InviteUserToTeamRequestBody$outboundSchema: z.ZodType<InviteUserToTeamRequestBody$Outbound, z.ZodTypeDef, InviteUserToTeamRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace InviteUserToTeamRequestBody$ {
    /** @deprecated use `InviteUserToTeamRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<InviteUserToTeamRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `InviteUserToTeamRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<InviteUserToTeamRequestBody$Outbound, z.ZodTypeDef, InviteUserToTeamRequestBody>;
    /** @deprecated use `InviteUserToTeamRequestBody$Outbound` instead. */
    type Outbound = InviteUserToTeamRequestBody$Outbound;
}
export declare function inviteUserToTeamRequestBodyToJSON(inviteUserToTeamRequestBody: InviteUserToTeamRequestBody): string;
export declare function inviteUserToTeamRequestBodyFromJSON(jsonString: string): SafeParseResult<InviteUserToTeamRequestBody, SDKValidationError>;
/** @internal */
export declare const InviteUserToTeamRequest$inboundSchema: z.ZodType<InviteUserToTeamRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type InviteUserToTeamRequest$Outbound = {
    teamId: string;
    RequestBody: InviteUserToTeamRequestBody$Outbound;
};
/** @internal */
export declare const InviteUserToTeamRequest$outboundSchema: z.ZodType<InviteUserToTeamRequest$Outbound, z.ZodTypeDef, InviteUserToTeamRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace InviteUserToTeamRequest$ {
    /** @deprecated use `InviteUserToTeamRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<InviteUserToTeamRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `InviteUserToTeamRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<InviteUserToTeamRequest$Outbound, z.ZodTypeDef, InviteUserToTeamRequest>;
    /** @deprecated use `InviteUserToTeamRequest$Outbound` instead. */
    type Outbound = InviteUserToTeamRequest$Outbound;
}
export declare function inviteUserToTeamRequestToJSON(inviteUserToTeamRequest: InviteUserToTeamRequest): string;
export declare function inviteUserToTeamRequestFromJSON(jsonString: string): SafeParseResult<InviteUserToTeamRequest, SDKValidationError>;
/** @internal */
export declare const InviteUserToTeamTeamsResponseRole$inboundSchema: z.ZodNativeEnum<typeof InviteUserToTeamTeamsResponseRole>;
/** @internal */
export declare const InviteUserToTeamTeamsResponseRole$outboundSchema: z.ZodNativeEnum<typeof InviteUserToTeamTeamsResponseRole>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace InviteUserToTeamTeamsResponseRole$ {
    /** @deprecated use `InviteUserToTeamTeamsResponseRole$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly ViewerForPlus: "VIEWER_FOR_PLUS";
        readonly Contributor: "CONTRIBUTOR";
    }>;
    /** @deprecated use `InviteUserToTeamTeamsResponseRole$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly ViewerForPlus: "VIEWER_FOR_PLUS";
        readonly Contributor: "CONTRIBUTOR";
    }>;
}
/** @internal */
export declare const InviteUserToTeamTeamRoles$inboundSchema: z.ZodNativeEnum<typeof InviteUserToTeamTeamRoles>;
/** @internal */
export declare const InviteUserToTeamTeamRoles$outboundSchema: z.ZodNativeEnum<typeof InviteUserToTeamTeamRoles>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace InviteUserToTeamTeamRoles$ {
    /** @deprecated use `InviteUserToTeamTeamRoles$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly ViewerForPlus: "VIEWER_FOR_PLUS";
        readonly Contributor: "CONTRIBUTOR";
    }>;
    /** @deprecated use `InviteUserToTeamTeamRoles$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly ViewerForPlus: "VIEWER_FOR_PLUS";
        readonly Contributor: "CONTRIBUTOR";
    }>;
}
/** @internal */
export declare const InviteUserToTeamTeamPermissions$inboundSchema: z.ZodNativeEnum<typeof InviteUserToTeamTeamPermissions>;
/** @internal */
export declare const InviteUserToTeamTeamPermissions$outboundSchema: z.ZodNativeEnum<typeof InviteUserToTeamTeamPermissions>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace InviteUserToTeamTeamPermissions$ {
    /** @deprecated use `InviteUserToTeamTeamPermissions$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly IntegrationManager: "IntegrationManager";
        readonly CreateProject: "CreateProject";
        readonly FullProductionDeployment: "FullProductionDeployment";
        readonly UsageViewer: "UsageViewer";
        readonly EnvVariableManager: "EnvVariableManager";
        readonly EnvironmentManager: "EnvironmentManager";
        readonly V0Builder: "V0Builder";
        readonly V0Chatter: "V0Chatter";
        readonly V0Viewer: "V0Viewer";
    }>;
    /** @deprecated use `InviteUserToTeamTeamPermissions$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly IntegrationManager: "IntegrationManager";
        readonly CreateProject: "CreateProject";
        readonly FullProductionDeployment: "FullProductionDeployment";
        readonly UsageViewer: "UsageViewer";
        readonly EnvVariableManager: "EnvVariableManager";
        readonly EnvironmentManager: "EnvironmentManager";
        readonly V0Builder: "V0Builder";
        readonly V0Chatter: "V0Chatter";
        readonly V0Viewer: "V0Viewer";
    }>;
}
/** @internal */
export declare const InviteUserToTeamResponseBody$inboundSchema: z.ZodType<InviteUserToTeamResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type InviteUserToTeamResponseBody$Outbound = {
    uid: string;
    username: string;
    email: string;
    role: string;
    teamRoles?: Array<string> | undefined;
    teamPermissions?: Array<string> | undefined;
};
/** @internal */
export declare const InviteUserToTeamResponseBody$outboundSchema: z.ZodType<InviteUserToTeamResponseBody$Outbound, z.ZodTypeDef, InviteUserToTeamResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace InviteUserToTeamResponseBody$ {
    /** @deprecated use `InviteUserToTeamResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<InviteUserToTeamResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `InviteUserToTeamResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<InviteUserToTeamResponseBody$Outbound, z.ZodTypeDef, InviteUserToTeamResponseBody>;
    /** @deprecated use `InviteUserToTeamResponseBody$Outbound` instead. */
    type Outbound = InviteUserToTeamResponseBody$Outbound;
}
export declare function inviteUserToTeamResponseBodyToJSON(inviteUserToTeamResponseBody: InviteUserToTeamResponseBody): string;
export declare function inviteUserToTeamResponseBodyFromJSON(jsonString: string): SafeParseResult<InviteUserToTeamResponseBody, SDKValidationError>;
//# sourceMappingURL=inviteusertoteamop.d.ts.map