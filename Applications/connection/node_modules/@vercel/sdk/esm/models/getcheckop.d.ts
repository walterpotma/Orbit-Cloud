import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type GetCheckRequest = {
    /**
     * The deployment to get the check for.
     */
    deploymentId: string;
    /**
     * The check to fetch
     */
    checkId: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};
export declare const GetCheckStatus: {
    readonly Registered: "registered";
    readonly Running: "running";
    readonly Completed: "completed";
};
export type GetCheckStatus = ClosedEnum<typeof GetCheckStatus>;
export declare const GetCheckConclusion: {
    readonly Canceled: "canceled";
    readonly Failed: "failed";
    readonly Neutral: "neutral";
    readonly Succeeded: "succeeded";
    readonly Skipped: "skipped";
    readonly Stale: "stale";
};
export type GetCheckConclusion = ClosedEnum<typeof GetCheckConclusion>;
export declare const GetCheckSource: {
    readonly WebVitals: "web-vitals";
};
export type GetCheckSource = ClosedEnum<typeof GetCheckSource>;
export type GetCheckFCP = {
    value: number | null;
    previousValue?: number | undefined;
    source: GetCheckSource;
};
export declare const GetCheckChecksSource: {
    readonly WebVitals: "web-vitals";
};
export type GetCheckChecksSource = ClosedEnum<typeof GetCheckChecksSource>;
export type GetCheckLCP = {
    value: number | null;
    previousValue?: number | undefined;
    source: GetCheckChecksSource;
};
export declare const GetCheckChecksResponseSource: {
    readonly WebVitals: "web-vitals";
};
export type GetCheckChecksResponseSource = ClosedEnum<typeof GetCheckChecksResponseSource>;
export type GetCheckCLS = {
    value: number | null;
    previousValue?: number | undefined;
    source: GetCheckChecksResponseSource;
};
export declare const GetCheckChecksResponse200Source: {
    readonly WebVitals: "web-vitals";
};
export type GetCheckChecksResponse200Source = ClosedEnum<typeof GetCheckChecksResponse200Source>;
export type GetCheckTBT = {
    value: number | null;
    previousValue?: number | undefined;
    source: GetCheckChecksResponse200Source;
};
export declare const GetCheckChecksResponse200ApplicationJSONSource: {
    readonly WebVitals: "web-vitals";
};
export type GetCheckChecksResponse200ApplicationJSONSource = ClosedEnum<typeof GetCheckChecksResponse200ApplicationJSONSource>;
export type GetCheckVirtualExperienceScore = {
    value: number | null;
    previousValue?: number | undefined;
    source: GetCheckChecksResponse200ApplicationJSONSource;
};
export type GetCheckMetrics = {
    fcp: GetCheckFCP;
    lcp: GetCheckLCP;
    cls: GetCheckCLS;
    tbt: GetCheckTBT;
    virtualExperienceScore?: GetCheckVirtualExperienceScore | undefined;
};
export type GetCheckOutput = {
    metrics?: GetCheckMetrics | undefined;
};
export type GetCheckResponseBody = {
    id: string;
    name: string;
    path?: string | undefined;
    status: GetCheckStatus;
    conclusion?: GetCheckConclusion | undefined;
    blocking: boolean;
    output?: GetCheckOutput | undefined;
    detailsUrl?: string | undefined;
    integrationId: string;
    deploymentId: string;
    externalId?: string | undefined;
    createdAt: number;
    updatedAt: number;
    startedAt?: number | undefined;
    completedAt?: number | undefined;
    rerequestable?: boolean | undefined;
};
/** @internal */
export declare const GetCheckRequest$inboundSchema: z.ZodType<GetCheckRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetCheckRequest$Outbound = {
    deploymentId: string;
    checkId: string;
    teamId?: string | undefined;
    slug?: string | undefined;
};
/** @internal */
export declare const GetCheckRequest$outboundSchema: z.ZodType<GetCheckRequest$Outbound, z.ZodTypeDef, GetCheckRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetCheckRequest$ {
    /** @deprecated use `GetCheckRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetCheckRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetCheckRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetCheckRequest$Outbound, z.ZodTypeDef, GetCheckRequest>;
    /** @deprecated use `GetCheckRequest$Outbound` instead. */
    type Outbound = GetCheckRequest$Outbound;
}
export declare function getCheckRequestToJSON(getCheckRequest: GetCheckRequest): string;
export declare function getCheckRequestFromJSON(jsonString: string): SafeParseResult<GetCheckRequest, SDKValidationError>;
/** @internal */
export declare const GetCheckStatus$inboundSchema: z.ZodNativeEnum<typeof GetCheckStatus>;
/** @internal */
export declare const GetCheckStatus$outboundSchema: z.ZodNativeEnum<typeof GetCheckStatus>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetCheckStatus$ {
    /** @deprecated use `GetCheckStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Registered: "registered";
        readonly Running: "running";
        readonly Completed: "completed";
    }>;
    /** @deprecated use `GetCheckStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Registered: "registered";
        readonly Running: "running";
        readonly Completed: "completed";
    }>;
}
/** @internal */
export declare const GetCheckConclusion$inboundSchema: z.ZodNativeEnum<typeof GetCheckConclusion>;
/** @internal */
export declare const GetCheckConclusion$outboundSchema: z.ZodNativeEnum<typeof GetCheckConclusion>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetCheckConclusion$ {
    /** @deprecated use `GetCheckConclusion$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Canceled: "canceled";
        readonly Failed: "failed";
        readonly Neutral: "neutral";
        readonly Succeeded: "succeeded";
        readonly Skipped: "skipped";
        readonly Stale: "stale";
    }>;
    /** @deprecated use `GetCheckConclusion$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Canceled: "canceled";
        readonly Failed: "failed";
        readonly Neutral: "neutral";
        readonly Succeeded: "succeeded";
        readonly Skipped: "skipped";
        readonly Stale: "stale";
    }>;
}
/** @internal */
export declare const GetCheckSource$inboundSchema: z.ZodNativeEnum<typeof GetCheckSource>;
/** @internal */
export declare const GetCheckSource$outboundSchema: z.ZodNativeEnum<typeof GetCheckSource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetCheckSource$ {
    /** @deprecated use `GetCheckSource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
    /** @deprecated use `GetCheckSource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
}
/** @internal */
export declare const GetCheckFCP$inboundSchema: z.ZodType<GetCheckFCP, z.ZodTypeDef, unknown>;
/** @internal */
export type GetCheckFCP$Outbound = {
    value: number | null;
    previousValue?: number | undefined;
    source: string;
};
/** @internal */
export declare const GetCheckFCP$outboundSchema: z.ZodType<GetCheckFCP$Outbound, z.ZodTypeDef, GetCheckFCP>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetCheckFCP$ {
    /** @deprecated use `GetCheckFCP$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetCheckFCP, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetCheckFCP$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetCheckFCP$Outbound, z.ZodTypeDef, GetCheckFCP>;
    /** @deprecated use `GetCheckFCP$Outbound` instead. */
    type Outbound = GetCheckFCP$Outbound;
}
export declare function getCheckFCPToJSON(getCheckFCP: GetCheckFCP): string;
export declare function getCheckFCPFromJSON(jsonString: string): SafeParseResult<GetCheckFCP, SDKValidationError>;
/** @internal */
export declare const GetCheckChecksSource$inboundSchema: z.ZodNativeEnum<typeof GetCheckChecksSource>;
/** @internal */
export declare const GetCheckChecksSource$outboundSchema: z.ZodNativeEnum<typeof GetCheckChecksSource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetCheckChecksSource$ {
    /** @deprecated use `GetCheckChecksSource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
    /** @deprecated use `GetCheckChecksSource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
}
/** @internal */
export declare const GetCheckLCP$inboundSchema: z.ZodType<GetCheckLCP, z.ZodTypeDef, unknown>;
/** @internal */
export type GetCheckLCP$Outbound = {
    value: number | null;
    previousValue?: number | undefined;
    source: string;
};
/** @internal */
export declare const GetCheckLCP$outboundSchema: z.ZodType<GetCheckLCP$Outbound, z.ZodTypeDef, GetCheckLCP>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetCheckLCP$ {
    /** @deprecated use `GetCheckLCP$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetCheckLCP, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetCheckLCP$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetCheckLCP$Outbound, z.ZodTypeDef, GetCheckLCP>;
    /** @deprecated use `GetCheckLCP$Outbound` instead. */
    type Outbound = GetCheckLCP$Outbound;
}
export declare function getCheckLCPToJSON(getCheckLCP: GetCheckLCP): string;
export declare function getCheckLCPFromJSON(jsonString: string): SafeParseResult<GetCheckLCP, SDKValidationError>;
/** @internal */
export declare const GetCheckChecksResponseSource$inboundSchema: z.ZodNativeEnum<typeof GetCheckChecksResponseSource>;
/** @internal */
export declare const GetCheckChecksResponseSource$outboundSchema: z.ZodNativeEnum<typeof GetCheckChecksResponseSource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetCheckChecksResponseSource$ {
    /** @deprecated use `GetCheckChecksResponseSource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
    /** @deprecated use `GetCheckChecksResponseSource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
}
/** @internal */
export declare const GetCheckCLS$inboundSchema: z.ZodType<GetCheckCLS, z.ZodTypeDef, unknown>;
/** @internal */
export type GetCheckCLS$Outbound = {
    value: number | null;
    previousValue?: number | undefined;
    source: string;
};
/** @internal */
export declare const GetCheckCLS$outboundSchema: z.ZodType<GetCheckCLS$Outbound, z.ZodTypeDef, GetCheckCLS>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetCheckCLS$ {
    /** @deprecated use `GetCheckCLS$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetCheckCLS, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetCheckCLS$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetCheckCLS$Outbound, z.ZodTypeDef, GetCheckCLS>;
    /** @deprecated use `GetCheckCLS$Outbound` instead. */
    type Outbound = GetCheckCLS$Outbound;
}
export declare function getCheckCLSToJSON(getCheckCLS: GetCheckCLS): string;
export declare function getCheckCLSFromJSON(jsonString: string): SafeParseResult<GetCheckCLS, SDKValidationError>;
/** @internal */
export declare const GetCheckChecksResponse200Source$inboundSchema: z.ZodNativeEnum<typeof GetCheckChecksResponse200Source>;
/** @internal */
export declare const GetCheckChecksResponse200Source$outboundSchema: z.ZodNativeEnum<typeof GetCheckChecksResponse200Source>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetCheckChecksResponse200Source$ {
    /** @deprecated use `GetCheckChecksResponse200Source$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
    /** @deprecated use `GetCheckChecksResponse200Source$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
}
/** @internal */
export declare const GetCheckTBT$inboundSchema: z.ZodType<GetCheckTBT, z.ZodTypeDef, unknown>;
/** @internal */
export type GetCheckTBT$Outbound = {
    value: number | null;
    previousValue?: number | undefined;
    source: string;
};
/** @internal */
export declare const GetCheckTBT$outboundSchema: z.ZodType<GetCheckTBT$Outbound, z.ZodTypeDef, GetCheckTBT>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetCheckTBT$ {
    /** @deprecated use `GetCheckTBT$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetCheckTBT, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetCheckTBT$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetCheckTBT$Outbound, z.ZodTypeDef, GetCheckTBT>;
    /** @deprecated use `GetCheckTBT$Outbound` instead. */
    type Outbound = GetCheckTBT$Outbound;
}
export declare function getCheckTBTToJSON(getCheckTBT: GetCheckTBT): string;
export declare function getCheckTBTFromJSON(jsonString: string): SafeParseResult<GetCheckTBT, SDKValidationError>;
/** @internal */
export declare const GetCheckChecksResponse200ApplicationJSONSource$inboundSchema: z.ZodNativeEnum<typeof GetCheckChecksResponse200ApplicationJSONSource>;
/** @internal */
export declare const GetCheckChecksResponse200ApplicationJSONSource$outboundSchema: z.ZodNativeEnum<typeof GetCheckChecksResponse200ApplicationJSONSource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetCheckChecksResponse200ApplicationJSONSource$ {
    /** @deprecated use `GetCheckChecksResponse200ApplicationJSONSource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
    /** @deprecated use `GetCheckChecksResponse200ApplicationJSONSource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly WebVitals: "web-vitals";
    }>;
}
/** @internal */
export declare const GetCheckVirtualExperienceScore$inboundSchema: z.ZodType<GetCheckVirtualExperienceScore, z.ZodTypeDef, unknown>;
/** @internal */
export type GetCheckVirtualExperienceScore$Outbound = {
    value: number | null;
    previousValue?: number | undefined;
    source: string;
};
/** @internal */
export declare const GetCheckVirtualExperienceScore$outboundSchema: z.ZodType<GetCheckVirtualExperienceScore$Outbound, z.ZodTypeDef, GetCheckVirtualExperienceScore>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetCheckVirtualExperienceScore$ {
    /** @deprecated use `GetCheckVirtualExperienceScore$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetCheckVirtualExperienceScore, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetCheckVirtualExperienceScore$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetCheckVirtualExperienceScore$Outbound, z.ZodTypeDef, GetCheckVirtualExperienceScore>;
    /** @deprecated use `GetCheckVirtualExperienceScore$Outbound` instead. */
    type Outbound = GetCheckVirtualExperienceScore$Outbound;
}
export declare function getCheckVirtualExperienceScoreToJSON(getCheckVirtualExperienceScore: GetCheckVirtualExperienceScore): string;
export declare function getCheckVirtualExperienceScoreFromJSON(jsonString: string): SafeParseResult<GetCheckVirtualExperienceScore, SDKValidationError>;
/** @internal */
export declare const GetCheckMetrics$inboundSchema: z.ZodType<GetCheckMetrics, z.ZodTypeDef, unknown>;
/** @internal */
export type GetCheckMetrics$Outbound = {
    FCP: GetCheckFCP$Outbound;
    LCP: GetCheckLCP$Outbound;
    CLS: GetCheckCLS$Outbound;
    TBT: GetCheckTBT$Outbound;
    virtualExperienceScore?: GetCheckVirtualExperienceScore$Outbound | undefined;
};
/** @internal */
export declare const GetCheckMetrics$outboundSchema: z.ZodType<GetCheckMetrics$Outbound, z.ZodTypeDef, GetCheckMetrics>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetCheckMetrics$ {
    /** @deprecated use `GetCheckMetrics$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetCheckMetrics, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetCheckMetrics$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetCheckMetrics$Outbound, z.ZodTypeDef, GetCheckMetrics>;
    /** @deprecated use `GetCheckMetrics$Outbound` instead. */
    type Outbound = GetCheckMetrics$Outbound;
}
export declare function getCheckMetricsToJSON(getCheckMetrics: GetCheckMetrics): string;
export declare function getCheckMetricsFromJSON(jsonString: string): SafeParseResult<GetCheckMetrics, SDKValidationError>;
/** @internal */
export declare const GetCheckOutput$inboundSchema: z.ZodType<GetCheckOutput, z.ZodTypeDef, unknown>;
/** @internal */
export type GetCheckOutput$Outbound = {
    metrics?: GetCheckMetrics$Outbound | undefined;
};
/** @internal */
export declare const GetCheckOutput$outboundSchema: z.ZodType<GetCheckOutput$Outbound, z.ZodTypeDef, GetCheckOutput>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetCheckOutput$ {
    /** @deprecated use `GetCheckOutput$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetCheckOutput, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetCheckOutput$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetCheckOutput$Outbound, z.ZodTypeDef, GetCheckOutput>;
    /** @deprecated use `GetCheckOutput$Outbound` instead. */
    type Outbound = GetCheckOutput$Outbound;
}
export declare function getCheckOutputToJSON(getCheckOutput: GetCheckOutput): string;
export declare function getCheckOutputFromJSON(jsonString: string): SafeParseResult<GetCheckOutput, SDKValidationError>;
/** @internal */
export declare const GetCheckResponseBody$inboundSchema: z.ZodType<GetCheckResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type GetCheckResponseBody$Outbound = {
    id: string;
    name: string;
    path?: string | undefined;
    status: string;
    conclusion?: string | undefined;
    blocking: boolean;
    output?: GetCheckOutput$Outbound | undefined;
    detailsUrl?: string | undefined;
    integrationId: string;
    deploymentId: string;
    externalId?: string | undefined;
    createdAt: number;
    updatedAt: number;
    startedAt?: number | undefined;
    completedAt?: number | undefined;
    rerequestable?: boolean | undefined;
};
/** @internal */
export declare const GetCheckResponseBody$outboundSchema: z.ZodType<GetCheckResponseBody$Outbound, z.ZodTypeDef, GetCheckResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetCheckResponseBody$ {
    /** @deprecated use `GetCheckResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetCheckResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetCheckResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetCheckResponseBody$Outbound, z.ZodTypeDef, GetCheckResponseBody>;
    /** @deprecated use `GetCheckResponseBody$Outbound` instead. */
    type Outbound = GetCheckResponseBody$Outbound;
}
export declare function getCheckResponseBodyToJSON(getCheckResponseBody: GetCheckResponseBody): string;
export declare function getCheckResponseBodyFromJSON(jsonString: string): SafeParseResult<GetCheckResponseBody, SDKValidationError>;
//# sourceMappingURL=getcheckop.d.ts.map