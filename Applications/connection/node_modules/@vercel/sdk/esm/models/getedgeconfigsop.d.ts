import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type GetEdgeConfigsRequest = {
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};
/**
 * Keeps track of the current state of the Edge Config while it gets transferred.
 */
export type Transfer = {
    fromAccountId: string;
    startedAt: number;
    doneAt: number | null;
};
export type Schema = {};
export declare const GetEdgeConfigsType: {
    readonly Flags: "flags";
};
export type GetEdgeConfigsType = ClosedEnum<typeof GetEdgeConfigsType>;
export type Purpose = {
    type: GetEdgeConfigsType;
    projectId: string;
};
export type GetEdgeConfigsResponseBody = {
    id?: string | undefined;
    createdAt?: number | undefined;
    ownerId?: string | undefined;
    /**
     * Name for the Edge Config Names are not unique. Must start with an alphabetic character and can contain only alphanumeric characters and underscores).
     */
    slug?: string | undefined;
    updatedAt?: number | undefined;
    digest?: string | undefined;
    /**
     * Keeps track of the current state of the Edge Config while it gets transferred.
     */
    transfer?: Transfer | undefined;
    schema?: Schema | undefined;
    purpose?: Purpose | undefined;
    sizeInBytes: number;
    itemCount: number;
};
/** @internal */
export declare const GetEdgeConfigsRequest$inboundSchema: z.ZodType<GetEdgeConfigsRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetEdgeConfigsRequest$Outbound = {
    teamId?: string | undefined;
    slug?: string | undefined;
};
/** @internal */
export declare const GetEdgeConfigsRequest$outboundSchema: z.ZodType<GetEdgeConfigsRequest$Outbound, z.ZodTypeDef, GetEdgeConfigsRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetEdgeConfigsRequest$ {
    /** @deprecated use `GetEdgeConfigsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetEdgeConfigsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetEdgeConfigsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetEdgeConfigsRequest$Outbound, z.ZodTypeDef, GetEdgeConfigsRequest>;
    /** @deprecated use `GetEdgeConfigsRequest$Outbound` instead. */
    type Outbound = GetEdgeConfigsRequest$Outbound;
}
export declare function getEdgeConfigsRequestToJSON(getEdgeConfigsRequest: GetEdgeConfigsRequest): string;
export declare function getEdgeConfigsRequestFromJSON(jsonString: string): SafeParseResult<GetEdgeConfigsRequest, SDKValidationError>;
/** @internal */
export declare const Transfer$inboundSchema: z.ZodType<Transfer, z.ZodTypeDef, unknown>;
/** @internal */
export type Transfer$Outbound = {
    fromAccountId: string;
    startedAt: number;
    doneAt: number | null;
};
/** @internal */
export declare const Transfer$outboundSchema: z.ZodType<Transfer$Outbound, z.ZodTypeDef, Transfer>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Transfer$ {
    /** @deprecated use `Transfer$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Transfer, z.ZodTypeDef, unknown>;
    /** @deprecated use `Transfer$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Transfer$Outbound, z.ZodTypeDef, Transfer>;
    /** @deprecated use `Transfer$Outbound` instead. */
    type Outbound = Transfer$Outbound;
}
export declare function transferToJSON(transfer: Transfer): string;
export declare function transferFromJSON(jsonString: string): SafeParseResult<Transfer, SDKValidationError>;
/** @internal */
export declare const Schema$inboundSchema: z.ZodType<Schema, z.ZodTypeDef, unknown>;
/** @internal */
export type Schema$Outbound = {};
/** @internal */
export declare const Schema$outboundSchema: z.ZodType<Schema$Outbound, z.ZodTypeDef, Schema>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Schema$ {
    /** @deprecated use `Schema$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Schema, z.ZodTypeDef, unknown>;
    /** @deprecated use `Schema$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Schema$Outbound, z.ZodTypeDef, Schema>;
    /** @deprecated use `Schema$Outbound` instead. */
    type Outbound = Schema$Outbound;
}
export declare function schemaToJSON(schema: Schema): string;
export declare function schemaFromJSON(jsonString: string): SafeParseResult<Schema, SDKValidationError>;
/** @internal */
export declare const GetEdgeConfigsType$inboundSchema: z.ZodNativeEnum<typeof GetEdgeConfigsType>;
/** @internal */
export declare const GetEdgeConfigsType$outboundSchema: z.ZodNativeEnum<typeof GetEdgeConfigsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetEdgeConfigsType$ {
    /** @deprecated use `GetEdgeConfigsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Flags: "flags";
    }>;
    /** @deprecated use `GetEdgeConfigsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Flags: "flags";
    }>;
}
/** @internal */
export declare const Purpose$inboundSchema: z.ZodType<Purpose, z.ZodTypeDef, unknown>;
/** @internal */
export type Purpose$Outbound = {
    type: string;
    projectId: string;
};
/** @internal */
export declare const Purpose$outboundSchema: z.ZodType<Purpose$Outbound, z.ZodTypeDef, Purpose>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Purpose$ {
    /** @deprecated use `Purpose$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Purpose, z.ZodTypeDef, unknown>;
    /** @deprecated use `Purpose$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Purpose$Outbound, z.ZodTypeDef, Purpose>;
    /** @deprecated use `Purpose$Outbound` instead. */
    type Outbound = Purpose$Outbound;
}
export declare function purposeToJSON(purpose: Purpose): string;
export declare function purposeFromJSON(jsonString: string): SafeParseResult<Purpose, SDKValidationError>;
/** @internal */
export declare const GetEdgeConfigsResponseBody$inboundSchema: z.ZodType<GetEdgeConfigsResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type GetEdgeConfigsResponseBody$Outbound = {
    id?: string | undefined;
    createdAt?: number | undefined;
    ownerId?: string | undefined;
    slug?: string | undefined;
    updatedAt?: number | undefined;
    digest?: string | undefined;
    transfer?: Transfer$Outbound | undefined;
    schema?: Schema$Outbound | undefined;
    purpose?: Purpose$Outbound | undefined;
    sizeInBytes: number;
    itemCount: number;
};
/** @internal */
export declare const GetEdgeConfigsResponseBody$outboundSchema: z.ZodType<GetEdgeConfigsResponseBody$Outbound, z.ZodTypeDef, GetEdgeConfigsResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetEdgeConfigsResponseBody$ {
    /** @deprecated use `GetEdgeConfigsResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetEdgeConfigsResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetEdgeConfigsResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetEdgeConfigsResponseBody$Outbound, z.ZodTypeDef, GetEdgeConfigsResponseBody>;
    /** @deprecated use `GetEdgeConfigsResponseBody$Outbound` instead. */
    type Outbound = GetEdgeConfigsResponseBody$Outbound;
}
export declare function getEdgeConfigsResponseBodyToJSON(getEdgeConfigsResponseBody: GetEdgeConfigsResponseBody): string;
export declare function getEdgeConfigsResponseBodyFromJSON(jsonString: string): SafeParseResult<GetEdgeConfigsResponseBody, SDKValidationError>;
//# sourceMappingURL=getedgeconfigsop.d.ts.map