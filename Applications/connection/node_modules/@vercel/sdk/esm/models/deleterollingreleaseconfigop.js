/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
/** @internal */
export const DeleteRollingReleaseConfigRequest$inboundSchema = z.object({
    idOrName: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/** @internal */
export const DeleteRollingReleaseConfigRequest$outboundSchema = z.object({
    idOrName: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DeleteRollingReleaseConfigRequest$;
(function (DeleteRollingReleaseConfigRequest$) {
    /** @deprecated use `DeleteRollingReleaseConfigRequest$inboundSchema` instead. */
    DeleteRollingReleaseConfigRequest$.inboundSchema = DeleteRollingReleaseConfigRequest$inboundSchema;
    /** @deprecated use `DeleteRollingReleaseConfigRequest$outboundSchema` instead. */
    DeleteRollingReleaseConfigRequest$.outboundSchema = DeleteRollingReleaseConfigRequest$outboundSchema;
})(DeleteRollingReleaseConfigRequest$ || (DeleteRollingReleaseConfigRequest$ = {}));
export function deleteRollingReleaseConfigRequestToJSON(deleteRollingReleaseConfigRequest) {
    return JSON.stringify(DeleteRollingReleaseConfigRequest$outboundSchema.parse(deleteRollingReleaseConfigRequest));
}
export function deleteRollingReleaseConfigRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DeleteRollingReleaseConfigRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteRollingReleaseConfigRequest' from JSON`);
}
/** @internal */
export const DeleteRollingReleaseConfigResponseBody$inboundSchema = z.object({
    rollingRelease: z.nullable(z.any()).optional(),
});
/** @internal */
export const DeleteRollingReleaseConfigResponseBody$outboundSchema = z.object({
    rollingRelease: z.nullable(z.any()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DeleteRollingReleaseConfigResponseBody$;
(function (DeleteRollingReleaseConfigResponseBody$) {
    /** @deprecated use `DeleteRollingReleaseConfigResponseBody$inboundSchema` instead. */
    DeleteRollingReleaseConfigResponseBody$.inboundSchema = DeleteRollingReleaseConfigResponseBody$inboundSchema;
    /** @deprecated use `DeleteRollingReleaseConfigResponseBody$outboundSchema` instead. */
    DeleteRollingReleaseConfigResponseBody$.outboundSchema = DeleteRollingReleaseConfigResponseBody$outboundSchema;
})(DeleteRollingReleaseConfigResponseBody$ || (DeleteRollingReleaseConfigResponseBody$ = {}));
export function deleteRollingReleaseConfigResponseBodyToJSON(deleteRollingReleaseConfigResponseBody) {
    return JSON.stringify(DeleteRollingReleaseConfigResponseBody$outboundSchema.parse(deleteRollingReleaseConfigResponseBody));
}
export function deleteRollingReleaseConfigResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DeleteRollingReleaseConfigResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteRollingReleaseConfigResponseBody' from JSON`);
}
//# sourceMappingURL=deleterollingreleaseconfigop.js.map