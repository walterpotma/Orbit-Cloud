/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { RateLimitNotice$inboundSchema, RateLimitNotice$outboundSchema, } from "./ratelimitnotice.js";
import { VercelError } from "./vercelerror.js";
export class VercelRateLimitError extends VercelError {
    constructor(err, httpMeta) {
        const message = err.error?.message
            || `API error occurred: ${JSON.stringify(err)}`;
        super(message, httpMeta);
        this.data$ = err;
        this.error = err.error;
        this.name = "VercelRateLimitError";
    }
}
/** @internal */
export const VercelRateLimitErrorError$inboundSchema = z.object({
    code: z.string(),
    message: z.string(),
    limit: RateLimitNotice$inboundSchema.optional(),
});
/** @internal */
export const VercelRateLimitErrorError$outboundSchema = z.object({
    code: z.string(),
    message: z.string(),
    limit: RateLimitNotice$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var VercelRateLimitErrorError$;
(function (VercelRateLimitErrorError$) {
    /** @deprecated use `VercelRateLimitErrorError$inboundSchema` instead. */
    VercelRateLimitErrorError$.inboundSchema = VercelRateLimitErrorError$inboundSchema;
    /** @deprecated use `VercelRateLimitErrorError$outboundSchema` instead. */
    VercelRateLimitErrorError$.outboundSchema = VercelRateLimitErrorError$outboundSchema;
})(VercelRateLimitErrorError$ || (VercelRateLimitErrorError$ = {}));
export function vercelRateLimitErrorErrorToJSON(vercelRateLimitErrorError) {
    return JSON.stringify(VercelRateLimitErrorError$outboundSchema.parse(vercelRateLimitErrorError));
}
export function vercelRateLimitErrorErrorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => VercelRateLimitErrorError$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'VercelRateLimitErrorError' from JSON`);
}
/** @internal */
export const VercelRateLimitError$inboundSchema = z.object({
    error: z.lazy(() => VercelRateLimitErrorError$inboundSchema),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
})
    .transform((v) => {
    return new VercelRateLimitError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
    });
});
/** @internal */
export const VercelRateLimitError$outboundSchema = z.instanceof(VercelRateLimitError)
    .transform(v => v.data$)
    .pipe(z.object({
    error: z.lazy(() => VercelRateLimitErrorError$outboundSchema),
}));
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var VercelRateLimitError$;
(function (VercelRateLimitError$) {
    /** @deprecated use `VercelRateLimitError$inboundSchema` instead. */
    VercelRateLimitError$.inboundSchema = VercelRateLimitError$inboundSchema;
    /** @deprecated use `VercelRateLimitError$outboundSchema` instead. */
    VercelRateLimitError$.outboundSchema = VercelRateLimitError$outboundSchema;
})(VercelRateLimitError$ || (VercelRateLimitError$ = {}));
//# sourceMappingURL=vercelratelimiterror.js.map