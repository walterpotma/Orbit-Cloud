/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
export const PatchEdgeConfigItems1Operation = {
    Create: "create",
    Update: "update",
    Upsert: "upsert",
    Delete: "delete",
};
export const OneOperation = {
    Create: "create",
    Update: "update",
    Upsert: "upsert",
    Delete: "delete",
};
export const Operation = {
    Create: "create",
    Update: "update",
    Upsert: "upsert",
    Delete: "delete",
};
/** @internal */
export const PatchEdgeConfigItems1Operation$inboundSchema = z.nativeEnum(PatchEdgeConfigItems1Operation);
/** @internal */
export const PatchEdgeConfigItems1Operation$outboundSchema = PatchEdgeConfigItems1Operation$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PatchEdgeConfigItems1Operation$;
(function (PatchEdgeConfigItems1Operation$) {
    /** @deprecated use `PatchEdgeConfigItems1Operation$inboundSchema` instead. */
    PatchEdgeConfigItems1Operation$.inboundSchema = PatchEdgeConfigItems1Operation$inboundSchema;
    /** @deprecated use `PatchEdgeConfigItems1Operation$outboundSchema` instead. */
    PatchEdgeConfigItems1Operation$.outboundSchema = PatchEdgeConfigItems1Operation$outboundSchema;
})(PatchEdgeConfigItems1Operation$ || (PatchEdgeConfigItems1Operation$ = {}));
/** @internal */
export const PatchEdgeConfigItems1Description$inboundSchema = z.union([z.string(), z.any()]);
/** @internal */
export const PatchEdgeConfigItems1Description$outboundSchema = z.union([z.string(), z.any()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PatchEdgeConfigItems1Description$;
(function (PatchEdgeConfigItems1Description$) {
    /** @deprecated use `PatchEdgeConfigItems1Description$inboundSchema` instead. */
    PatchEdgeConfigItems1Description$.inboundSchema = PatchEdgeConfigItems1Description$inboundSchema;
    /** @deprecated use `PatchEdgeConfigItems1Description$outboundSchema` instead. */
    PatchEdgeConfigItems1Description$.outboundSchema = PatchEdgeConfigItems1Description$outboundSchema;
})(PatchEdgeConfigItems1Description$ || (PatchEdgeConfigItems1Description$ = {}));
export function patchEdgeConfigItems1DescriptionToJSON(patchEdgeConfigItems1Description) {
    return JSON.stringify(PatchEdgeConfigItems1Description$outboundSchema.parse(patchEdgeConfigItems1Description));
}
export function patchEdgeConfigItems1DescriptionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PatchEdgeConfigItems1Description$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PatchEdgeConfigItems1Description' from JSON`);
}
/** @internal */
export const One3$inboundSchema = z
    .object({
    operation: PatchEdgeConfigItems1Operation$inboundSchema,
    key: z.string(),
    value: z.nullable(z.any()).optional(),
    description: z.nullable(z.union([z.string(), z.any()])).optional(),
});
/** @internal */
export const One3$outboundSchema = z.object({
    operation: PatchEdgeConfigItems1Operation$outboundSchema,
    key: z.string(),
    value: z.nullable(z.any()).optional(),
    description: z.nullable(z.union([z.string(), z.any()])).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var One3$;
(function (One3$) {
    /** @deprecated use `One3$inboundSchema` instead. */
    One3$.inboundSchema = One3$inboundSchema;
    /** @deprecated use `One3$outboundSchema` instead. */
    One3$.outboundSchema = One3$outboundSchema;
})(One3$ || (One3$ = {}));
export function one3ToJSON(one3) {
    return JSON.stringify(One3$outboundSchema.parse(one3));
}
export function one3FromJSON(jsonString) {
    return safeParse(jsonString, (x) => One3$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'One3' from JSON`);
}
/** @internal */
export const OneOperation$inboundSchema = z.nativeEnum(OneOperation);
/** @internal */
export const OneOperation$outboundSchema = OneOperation$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneOperation$;
(function (OneOperation$) {
    /** @deprecated use `OneOperation$inboundSchema` instead. */
    OneOperation$.inboundSchema = OneOperation$inboundSchema;
    /** @deprecated use `OneOperation$outboundSchema` instead. */
    OneOperation$.outboundSchema = OneOperation$outboundSchema;
})(OneOperation$ || (OneOperation$ = {}));
/** @internal */
export const OneDescription$inboundSchema = z.union([z.string(), z.any()]);
/** @internal */
export const OneDescription$outboundSchema = z.union([z.string(), z.any()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneDescription$;
(function (OneDescription$) {
    /** @deprecated use `OneDescription$inboundSchema` instead. */
    OneDescription$.inboundSchema = OneDescription$inboundSchema;
    /** @deprecated use `OneDescription$outboundSchema` instead. */
    OneDescription$.outboundSchema = OneDescription$outboundSchema;
})(OneDescription$ || (OneDescription$ = {}));
export function oneDescriptionToJSON(oneDescription) {
    return JSON.stringify(OneDescription$outboundSchema.parse(oneDescription));
}
export function oneDescriptionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneDescription$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneDescription' from JSON`);
}
/** @internal */
export const One2$inboundSchema = z
    .object({
    operation: OneOperation$inboundSchema,
    key: z.string(),
    value: z.nullable(z.any()).optional(),
    description: z.nullable(z.union([z.string(), z.any()])).optional(),
});
/** @internal */
export const One2$outboundSchema = z.object({
    operation: OneOperation$outboundSchema,
    key: z.string(),
    value: z.nullable(z.any()).optional(),
    description: z.nullable(z.union([z.string(), z.any()])).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var One2$;
(function (One2$) {
    /** @deprecated use `One2$inboundSchema` instead. */
    One2$.inboundSchema = One2$inboundSchema;
    /** @deprecated use `One2$outboundSchema` instead. */
    One2$.outboundSchema = One2$outboundSchema;
})(One2$ || (One2$ = {}));
export function one2ToJSON(one2) {
    return JSON.stringify(One2$outboundSchema.parse(one2));
}
export function one2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => One2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'One2' from JSON`);
}
/** @internal */
export const Operation$inboundSchema = z
    .nativeEnum(Operation);
/** @internal */
export const Operation$outboundSchema = Operation$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Operation$;
(function (Operation$) {
    /** @deprecated use `Operation$inboundSchema` instead. */
    Operation$.inboundSchema = Operation$inboundSchema;
    /** @deprecated use `Operation$outboundSchema` instead. */
    Operation$.outboundSchema = Operation$outboundSchema;
})(Operation$ || (Operation$ = {}));
/** @internal */
export const Description$inboundSchema = z.union([z.string(), z.any()]);
/** @internal */
export const Description$outboundSchema = z.union([z.string(), z.any()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Description$;
(function (Description$) {
    /** @deprecated use `Description$inboundSchema` instead. */
    Description$.inboundSchema = Description$inboundSchema;
    /** @deprecated use `Description$outboundSchema` instead. */
    Description$.outboundSchema = Description$outboundSchema;
})(Description$ || (Description$ = {}));
export function descriptionToJSON(description) {
    return JSON.stringify(Description$outboundSchema.parse(description));
}
export function descriptionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Description$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Description' from JSON`);
}
/** @internal */
export const One1$inboundSchema = z
    .object({
    operation: Operation$inboundSchema,
    key: z.string(),
    value: z.nullable(z.any()).optional(),
    description: z.nullable(z.union([z.string(), z.any()])).optional(),
});
/** @internal */
export const One1$outboundSchema = z.object({
    operation: Operation$outboundSchema,
    key: z.string(),
    value: z.nullable(z.any()).optional(),
    description: z.nullable(z.union([z.string(), z.any()])).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var One1$;
(function (One1$) {
    /** @deprecated use `One1$inboundSchema` instead. */
    One1$.inboundSchema = One1$inboundSchema;
    /** @deprecated use `One1$outboundSchema` instead. */
    One1$.outboundSchema = One1$outboundSchema;
})(One1$ || (One1$ = {}));
export function one1ToJSON(one1) {
    return JSON.stringify(One1$outboundSchema.parse(one1));
}
export function one1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => One1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'One1' from JSON`);
}
/** @internal */
export const Items1$inboundSchema = z
    .union([
    z.lazy(() => One1$inboundSchema),
    z.lazy(() => One2$inboundSchema),
    z.lazy(() => One3$inboundSchema),
]);
/** @internal */
export const Items1$outboundSchema = z.union([
    z.lazy(() => One1$outboundSchema),
    z.lazy(() => One2$outboundSchema),
    z.lazy(() => One3$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Items1$;
(function (Items1$) {
    /** @deprecated use `Items1$inboundSchema` instead. */
    Items1$.inboundSchema = Items1$inboundSchema;
    /** @deprecated use `Items1$outboundSchema` instead. */
    Items1$.outboundSchema = Items1$outboundSchema;
})(Items1$ || (Items1$ = {}));
export function items1ToJSON(items1) {
    return JSON.stringify(Items1$outboundSchema.parse(items1));
}
export function items1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Items1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Items1' from JSON`);
}
/** @internal */
export const Items$inboundSchema = z
    .union([
    z.lazy(() => One1$inboundSchema),
    z.lazy(() => One2$inboundSchema),
    z.lazy(() => One3$inboundSchema),
]);
/** @internal */
export const Items$outboundSchema = z.union([
    z.lazy(() => One1$outboundSchema),
    z.lazy(() => One2$outboundSchema),
    z.lazy(() => One3$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Items$;
(function (Items$) {
    /** @deprecated use `Items$inboundSchema` instead. */
    Items$.inboundSchema = Items$inboundSchema;
    /** @deprecated use `Items$outboundSchema` instead. */
    Items$.outboundSchema = Items$outboundSchema;
})(Items$ || (Items$ = {}));
export function itemsToJSON(items) {
    return JSON.stringify(Items$outboundSchema.parse(items));
}
export function itemsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Items$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Items' from JSON`);
}
/** @internal */
export const PatchEdgeConfigItemsRequestBody$inboundSchema = z.object({
    items: z.array(z.union([
        z.lazy(() => One1$inboundSchema),
        z.lazy(() => One2$inboundSchema),
        z.lazy(() => One3$inboundSchema),
    ])),
});
/** @internal */
export const PatchEdgeConfigItemsRequestBody$outboundSchema = z.object({
    items: z.array(z.union([
        z.lazy(() => One1$outboundSchema),
        z.lazy(() => One2$outboundSchema),
        z.lazy(() => One3$outboundSchema),
    ])),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PatchEdgeConfigItemsRequestBody$;
(function (PatchEdgeConfigItemsRequestBody$) {
    /** @deprecated use `PatchEdgeConfigItemsRequestBody$inboundSchema` instead. */
    PatchEdgeConfigItemsRequestBody$.inboundSchema = PatchEdgeConfigItemsRequestBody$inboundSchema;
    /** @deprecated use `PatchEdgeConfigItemsRequestBody$outboundSchema` instead. */
    PatchEdgeConfigItemsRequestBody$.outboundSchema = PatchEdgeConfigItemsRequestBody$outboundSchema;
})(PatchEdgeConfigItemsRequestBody$ || (PatchEdgeConfigItemsRequestBody$ = {}));
export function patchEdgeConfigItemsRequestBodyToJSON(patchEdgeConfigItemsRequestBody) {
    return JSON.stringify(PatchEdgeConfigItemsRequestBody$outboundSchema.parse(patchEdgeConfigItemsRequestBody));
}
export function patchEdgeConfigItemsRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PatchEdgeConfigItemsRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PatchEdgeConfigItemsRequestBody' from JSON`);
}
/** @internal */
export const PatchEdgeConfigItemsRequest$inboundSchema = z.object({
    edgeConfigId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => PatchEdgeConfigItemsRequestBody$inboundSchema)
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const PatchEdgeConfigItemsRequest$outboundSchema = z.object({
    edgeConfigId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => PatchEdgeConfigItemsRequestBody$outboundSchema)
        .optional(),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PatchEdgeConfigItemsRequest$;
(function (PatchEdgeConfigItemsRequest$) {
    /** @deprecated use `PatchEdgeConfigItemsRequest$inboundSchema` instead. */
    PatchEdgeConfigItemsRequest$.inboundSchema = PatchEdgeConfigItemsRequest$inboundSchema;
    /** @deprecated use `PatchEdgeConfigItemsRequest$outboundSchema` instead. */
    PatchEdgeConfigItemsRequest$.outboundSchema = PatchEdgeConfigItemsRequest$outboundSchema;
})(PatchEdgeConfigItemsRequest$ || (PatchEdgeConfigItemsRequest$ = {}));
export function patchEdgeConfigItemsRequestToJSON(patchEdgeConfigItemsRequest) {
    return JSON.stringify(PatchEdgeConfigItemsRequest$outboundSchema.parse(patchEdgeConfigItemsRequest));
}
export function patchEdgeConfigItemsRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PatchEdgeConfigItemsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PatchEdgeConfigItemsRequest' from JSON`);
}
/** @internal */
export const PatchEdgeConfigItemsResponseBody$inboundSchema = z.object({
    status: z.string(),
});
/** @internal */
export const PatchEdgeConfigItemsResponseBody$outboundSchema = z.object({
    status: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PatchEdgeConfigItemsResponseBody$;
(function (PatchEdgeConfigItemsResponseBody$) {
    /** @deprecated use `PatchEdgeConfigItemsResponseBody$inboundSchema` instead. */
    PatchEdgeConfigItemsResponseBody$.inboundSchema = PatchEdgeConfigItemsResponseBody$inboundSchema;
    /** @deprecated use `PatchEdgeConfigItemsResponseBody$outboundSchema` instead. */
    PatchEdgeConfigItemsResponseBody$.outboundSchema = PatchEdgeConfigItemsResponseBody$outboundSchema;
})(PatchEdgeConfigItemsResponseBody$ || (PatchEdgeConfigItemsResponseBody$ = {}));
export function patchEdgeConfigItemsResponseBodyToJSON(patchEdgeConfigItemsResponseBody) {
    return JSON.stringify(PatchEdgeConfigItemsResponseBody$outboundSchema.parse(patchEdgeConfigItemsResponseBody));
}
export function patchEdgeConfigItemsResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PatchEdgeConfigItemsResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PatchEdgeConfigItemsResponseBody' from JSON`);
}
//# sourceMappingURL=patchedgeconfigitemsop.js.map