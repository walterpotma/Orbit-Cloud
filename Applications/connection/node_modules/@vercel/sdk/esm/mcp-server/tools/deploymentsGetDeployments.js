/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { deploymentsGetDeployments } from "../../funcs/deploymentsGetDeployments.js";
import { GetDeploymentsRequest$inboundSchema } from "../../models/getdeploymentsop.js";
import { formatResult } from "../tools.js";
const args = {
    request: GetDeploymentsRequest$inboundSchema,
};
export const tool$deploymentsGetDeployments = {
    name: "deployments-get-deployments",
    description: `List deployments

List deployments under the authenticated user or team. If a deployment hasn't finished uploading (is incomplete), the \`url\` property will have a value of \`null\`.`,
    args,
    tool: async (client, args, ctx) => {
        const [result, apiCall] = await deploymentsGetDeployments(client, args.request, { fetchOptions: { signal: ctx.signal } }).$inspect();
        if (!result.ok) {
            return {
                content: [{ type: "text", text: result.error.message }],
                isError: true,
            };
        }
        const value = result.value;
        return formatResult(value, apiCall);
    },
};
//# sourceMappingURL=deploymentsGetDeployments.js.map